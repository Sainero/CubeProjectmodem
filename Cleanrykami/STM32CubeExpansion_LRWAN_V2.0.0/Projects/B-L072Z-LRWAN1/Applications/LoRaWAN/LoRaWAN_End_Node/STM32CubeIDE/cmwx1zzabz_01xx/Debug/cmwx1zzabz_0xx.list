
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d95c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001538  0801da1c  0801da1c  0002da1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ef54  0801ef54  0002ef54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ef5c  0801ef5c  0002ef5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ef60  0801ef60  0002ef60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000021c  20000000  0801ef64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017dc  2000021c  0801f180  0003021c  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  200019f8  0801f180  000319f8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037236  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000913d  00000000  00000000  0006747a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a90  00000000  00000000  000705b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000026b8  00000000  00000000  00073048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021ab6  00000000  00000000  00075700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c438  00000000  00000000  000971b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b2529  00000000  00000000  000d35ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00185b17  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009818  00000000  00000000  00185b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000021c 	.word	0x2000021c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801da04 	.word	0x0801da04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000220 	.word	0x20000220
 8000104:	0801da04 	.word	0x0801da04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fa77 	bl	8001908 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9c7 	bl	80017b8 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa69 	bl	8001908 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa5f 	bl	8001908 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9ef 	bl	800183c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9e5 	bl	800183c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f93e 	bl	8000738 <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	0008      	movs	r0, r1
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f852 	bl	80005a0 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4647      	mov	r7, r8
 800050e:	b580      	push	{r7, lr}
 8000510:	0007      	movs	r7, r0
 8000512:	4699      	mov	r9, r3
 8000514:	0c3b      	lsrs	r3, r7, #16
 8000516:	469c      	mov	ip, r3
 8000518:	0413      	lsls	r3, r2, #16
 800051a:	0c1b      	lsrs	r3, r3, #16
 800051c:	001d      	movs	r5, r3
 800051e:	000e      	movs	r6, r1
 8000520:	4661      	mov	r1, ip
 8000522:	0400      	lsls	r0, r0, #16
 8000524:	0c14      	lsrs	r4, r2, #16
 8000526:	0c00      	lsrs	r0, r0, #16
 8000528:	4345      	muls	r5, r0
 800052a:	434b      	muls	r3, r1
 800052c:	4360      	muls	r0, r4
 800052e:	4361      	muls	r1, r4
 8000530:	18c0      	adds	r0, r0, r3
 8000532:	0c2c      	lsrs	r4, r5, #16
 8000534:	1820      	adds	r0, r4, r0
 8000536:	468c      	mov	ip, r1
 8000538:	4283      	cmp	r3, r0
 800053a:	d903      	bls.n	8000544 <__aeabi_lmul+0x3c>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	025b      	lsls	r3, r3, #9
 8000540:	4698      	mov	r8, r3
 8000542:	44c4      	add	ip, r8
 8000544:	4649      	mov	r1, r9
 8000546:	4379      	muls	r1, r7
 8000548:	4372      	muls	r2, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	4463      	add	r3, ip
 800054e:	042d      	lsls	r5, r5, #16
 8000550:	0c2d      	lsrs	r5, r5, #16
 8000552:	18c9      	adds	r1, r1, r3
 8000554:	0400      	lsls	r0, r0, #16
 8000556:	1940      	adds	r0, r0, r5
 8000558:	1889      	adds	r1, r1, r2
 800055a:	bcc0      	pop	{r6, r7}
 800055c:	46b9      	mov	r9, r7
 800055e:	46b0      	mov	r8, r6
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)

08000564 <__aeabi_d2uiz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	2200      	movs	r2, #0
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__aeabi_d2uiz+0x38>)
 800056a:	0004      	movs	r4, r0
 800056c:	000d      	movs	r5, r1
 800056e:	f7ff ff7d 	bl	800046c <__aeabi_dcmpge>
 8000572:	2800      	cmp	r0, #0
 8000574:	d104      	bne.n	8000580 <__aeabi_d2uiz+0x1c>
 8000576:	0020      	movs	r0, r4
 8000578:	0029      	movs	r1, r5
 800057a:	f002 f827 	bl	80025cc <__aeabi_d2iz>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <__aeabi_d2uiz+0x38>)
 8000582:	2200      	movs	r2, #0
 8000584:	0020      	movs	r0, r4
 8000586:	0029      	movs	r1, r5
 8000588:	f001 fc8e 	bl	8001ea8 <__aeabi_dsub>
 800058c:	f002 f81e 	bl	80025cc <__aeabi_d2iz>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	061b      	lsls	r3, r3, #24
 8000594:	469c      	mov	ip, r3
 8000596:	4460      	add	r0, ip
 8000598:	e7f1      	b.n	800057e <__aeabi_d2uiz+0x1a>
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	41e00000 	.word	0x41e00000

080005a0 <__udivmoddi4>:
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	4657      	mov	r7, sl
 80005a4:	464e      	mov	r6, r9
 80005a6:	4645      	mov	r5, r8
 80005a8:	46de      	mov	lr, fp
 80005aa:	b5e0      	push	{r5, r6, r7, lr}
 80005ac:	0004      	movs	r4, r0
 80005ae:	000d      	movs	r5, r1
 80005b0:	4692      	mov	sl, r2
 80005b2:	4699      	mov	r9, r3
 80005b4:	b083      	sub	sp, #12
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d830      	bhi.n	800061c <__udivmoddi4+0x7c>
 80005ba:	d02d      	beq.n	8000618 <__udivmoddi4+0x78>
 80005bc:	4649      	mov	r1, r9
 80005be:	4650      	mov	r0, sl
 80005c0:	f002 f8f6 	bl	80027b0 <__clzdi2>
 80005c4:	0029      	movs	r1, r5
 80005c6:	0006      	movs	r6, r0
 80005c8:	0020      	movs	r0, r4
 80005ca:	f002 f8f1 	bl	80027b0 <__clzdi2>
 80005ce:	1a33      	subs	r3, r6, r0
 80005d0:	4698      	mov	r8, r3
 80005d2:	3b20      	subs	r3, #32
 80005d4:	469b      	mov	fp, r3
 80005d6:	d433      	bmi.n	8000640 <__udivmoddi4+0xa0>
 80005d8:	465a      	mov	r2, fp
 80005da:	4653      	mov	r3, sl
 80005dc:	4093      	lsls	r3, r2
 80005de:	4642      	mov	r2, r8
 80005e0:	001f      	movs	r7, r3
 80005e2:	4653      	mov	r3, sl
 80005e4:	4093      	lsls	r3, r2
 80005e6:	001e      	movs	r6, r3
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d83a      	bhi.n	8000662 <__udivmoddi4+0xc2>
 80005ec:	42af      	cmp	r7, r5
 80005ee:	d100      	bne.n	80005f2 <__udivmoddi4+0x52>
 80005f0:	e078      	b.n	80006e4 <__udivmoddi4+0x144>
 80005f2:	465b      	mov	r3, fp
 80005f4:	1ba4      	subs	r4, r4, r6
 80005f6:	41bd      	sbcs	r5, r7
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	da00      	bge.n	80005fe <__udivmoddi4+0x5e>
 80005fc:	e075      	b.n	80006ea <__udivmoddi4+0x14a>
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2301      	movs	r3, #1
 8000608:	465a      	mov	r2, fp
 800060a:	4093      	lsls	r3, r2
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2301      	movs	r3, #1
 8000610:	4642      	mov	r2, r8
 8000612:	4093      	lsls	r3, r2
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	e028      	b.n	800066a <__udivmoddi4+0xca>
 8000618:	4282      	cmp	r2, r0
 800061a:	d9cf      	bls.n	80005bc <__udivmoddi4+0x1c>
 800061c:	2200      	movs	r2, #0
 800061e:	2300      	movs	r3, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <__udivmoddi4+0x8e>
 800062a:	601c      	str	r4, [r3, #0]
 800062c:	605d      	str	r5, [r3, #4]
 800062e:	9800      	ldr	r0, [sp, #0]
 8000630:	9901      	ldr	r1, [sp, #4]
 8000632:	b003      	add	sp, #12
 8000634:	bcf0      	pop	{r4, r5, r6, r7}
 8000636:	46bb      	mov	fp, r7
 8000638:	46b2      	mov	sl, r6
 800063a:	46a9      	mov	r9, r5
 800063c:	46a0      	mov	r8, r4
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000640:	4642      	mov	r2, r8
 8000642:	2320      	movs	r3, #32
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	4652      	mov	r2, sl
 8000648:	40da      	lsrs	r2, r3
 800064a:	4641      	mov	r1, r8
 800064c:	0013      	movs	r3, r2
 800064e:	464a      	mov	r2, r9
 8000650:	408a      	lsls	r2, r1
 8000652:	0017      	movs	r7, r2
 8000654:	4642      	mov	r2, r8
 8000656:	431f      	orrs	r7, r3
 8000658:	4653      	mov	r3, sl
 800065a:	4093      	lsls	r3, r2
 800065c:	001e      	movs	r6, r3
 800065e:	42af      	cmp	r7, r5
 8000660:	d9c4      	bls.n	80005ec <__udivmoddi4+0x4c>
 8000662:	2200      	movs	r2, #0
 8000664:	2300      	movs	r3, #0
 8000666:	9200      	str	r2, [sp, #0]
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	4643      	mov	r3, r8
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0d9      	beq.n	8000624 <__udivmoddi4+0x84>
 8000670:	07fb      	lsls	r3, r7, #31
 8000672:	0872      	lsrs	r2, r6, #1
 8000674:	431a      	orrs	r2, r3
 8000676:	4646      	mov	r6, r8
 8000678:	087b      	lsrs	r3, r7, #1
 800067a:	e00e      	b.n	800069a <__udivmoddi4+0xfa>
 800067c:	42ab      	cmp	r3, r5
 800067e:	d101      	bne.n	8000684 <__udivmoddi4+0xe4>
 8000680:	42a2      	cmp	r2, r4
 8000682:	d80c      	bhi.n	800069e <__udivmoddi4+0xfe>
 8000684:	1aa4      	subs	r4, r4, r2
 8000686:	419d      	sbcs	r5, r3
 8000688:	2001      	movs	r0, #1
 800068a:	1924      	adds	r4, r4, r4
 800068c:	416d      	adcs	r5, r5
 800068e:	2100      	movs	r1, #0
 8000690:	3e01      	subs	r6, #1
 8000692:	1824      	adds	r4, r4, r0
 8000694:	414d      	adcs	r5, r1
 8000696:	2e00      	cmp	r6, #0
 8000698:	d006      	beq.n	80006a8 <__udivmoddi4+0x108>
 800069a:	42ab      	cmp	r3, r5
 800069c:	d9ee      	bls.n	800067c <__udivmoddi4+0xdc>
 800069e:	3e01      	subs	r6, #1
 80006a0:	1924      	adds	r4, r4, r4
 80006a2:	416d      	adcs	r5, r5
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d1f8      	bne.n	800069a <__udivmoddi4+0xfa>
 80006a8:	9800      	ldr	r0, [sp, #0]
 80006aa:	9901      	ldr	r1, [sp, #4]
 80006ac:	465b      	mov	r3, fp
 80006ae:	1900      	adds	r0, r0, r4
 80006b0:	4169      	adcs	r1, r5
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db24      	blt.n	8000700 <__udivmoddi4+0x160>
 80006b6:	002b      	movs	r3, r5
 80006b8:	465a      	mov	r2, fp
 80006ba:	4644      	mov	r4, r8
 80006bc:	40d3      	lsrs	r3, r2
 80006be:	002a      	movs	r2, r5
 80006c0:	40e2      	lsrs	r2, r4
 80006c2:	001c      	movs	r4, r3
 80006c4:	465b      	mov	r3, fp
 80006c6:	0015      	movs	r5, r2
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db2a      	blt.n	8000722 <__udivmoddi4+0x182>
 80006cc:	0026      	movs	r6, r4
 80006ce:	409e      	lsls	r6, r3
 80006d0:	0033      	movs	r3, r6
 80006d2:	0026      	movs	r6, r4
 80006d4:	4647      	mov	r7, r8
 80006d6:	40be      	lsls	r6, r7
 80006d8:	0032      	movs	r2, r6
 80006da:	1a80      	subs	r0, r0, r2
 80006dc:	4199      	sbcs	r1, r3
 80006de:	9000      	str	r0, [sp, #0]
 80006e0:	9101      	str	r1, [sp, #4]
 80006e2:	e79f      	b.n	8000624 <__udivmoddi4+0x84>
 80006e4:	42a3      	cmp	r3, r4
 80006e6:	d8bc      	bhi.n	8000662 <__udivmoddi4+0xc2>
 80006e8:	e783      	b.n	80005f2 <__udivmoddi4+0x52>
 80006ea:	4642      	mov	r2, r8
 80006ec:	2320      	movs	r3, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	9100      	str	r1, [sp, #0]
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	40da      	lsrs	r2, r3
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	e786      	b.n	800060e <__udivmoddi4+0x6e>
 8000700:	4642      	mov	r2, r8
 8000702:	2320      	movs	r3, #32
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	002a      	movs	r2, r5
 8000708:	4646      	mov	r6, r8
 800070a:	409a      	lsls	r2, r3
 800070c:	0023      	movs	r3, r4
 800070e:	40f3      	lsrs	r3, r6
 8000710:	4644      	mov	r4, r8
 8000712:	4313      	orrs	r3, r2
 8000714:	002a      	movs	r2, r5
 8000716:	40e2      	lsrs	r2, r4
 8000718:	001c      	movs	r4, r3
 800071a:	465b      	mov	r3, fp
 800071c:	0015      	movs	r5, r2
 800071e:	2b00      	cmp	r3, #0
 8000720:	dad4      	bge.n	80006cc <__udivmoddi4+0x12c>
 8000722:	4642      	mov	r2, r8
 8000724:	002f      	movs	r7, r5
 8000726:	2320      	movs	r3, #32
 8000728:	0026      	movs	r6, r4
 800072a:	4097      	lsls	r7, r2
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	40de      	lsrs	r6, r3
 8000730:	003b      	movs	r3, r7
 8000732:	4333      	orrs	r3, r6
 8000734:	e7cd      	b.n	80006d2 <__udivmoddi4+0x132>
 8000736:	46c0      	nop			; (mov r8, r8)

08000738 <__gnu_ldivmod_helper>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	46ce      	mov	lr, r9
 800073c:	4647      	mov	r7, r8
 800073e:	b580      	push	{r7, lr}
 8000740:	4691      	mov	r9, r2
 8000742:	4698      	mov	r8, r3
 8000744:	0004      	movs	r4, r0
 8000746:	000d      	movs	r5, r1
 8000748:	f002 f83e 	bl	80027c8 <__divdi3>
 800074c:	0007      	movs	r7, r0
 800074e:	000e      	movs	r6, r1
 8000750:	0002      	movs	r2, r0
 8000752:	000b      	movs	r3, r1
 8000754:	4648      	mov	r0, r9
 8000756:	4641      	mov	r1, r8
 8000758:	f7ff fed6 	bl	8000508 <__aeabi_lmul>
 800075c:	1a24      	subs	r4, r4, r0
 800075e:	418d      	sbcs	r5, r1
 8000760:	9b08      	ldr	r3, [sp, #32]
 8000762:	0038      	movs	r0, r7
 8000764:	0031      	movs	r1, r6
 8000766:	601c      	str	r4, [r3, #0]
 8000768:	605d      	str	r5, [r3, #4]
 800076a:	bcc0      	pop	{r6, r7}
 800076c:	46b9      	mov	r9, r7
 800076e:	46b0      	mov	r8, r6
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)

08000774 <__aeabi_fsub>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	46ce      	mov	lr, r9
 8000778:	4647      	mov	r7, r8
 800077a:	0243      	lsls	r3, r0, #9
 800077c:	0a5b      	lsrs	r3, r3, #9
 800077e:	024e      	lsls	r6, r1, #9
 8000780:	00da      	lsls	r2, r3, #3
 8000782:	4694      	mov	ip, r2
 8000784:	0a72      	lsrs	r2, r6, #9
 8000786:	4691      	mov	r9, r2
 8000788:	0045      	lsls	r5, r0, #1
 800078a:	004a      	lsls	r2, r1, #1
 800078c:	b580      	push	{r7, lr}
 800078e:	0e2d      	lsrs	r5, r5, #24
 8000790:	001f      	movs	r7, r3
 8000792:	0fc4      	lsrs	r4, r0, #31
 8000794:	0e12      	lsrs	r2, r2, #24
 8000796:	0fc9      	lsrs	r1, r1, #31
 8000798:	09b6      	lsrs	r6, r6, #6
 800079a:	2aff      	cmp	r2, #255	; 0xff
 800079c:	d05b      	beq.n	8000856 <__aeabi_fsub+0xe2>
 800079e:	2001      	movs	r0, #1
 80007a0:	4041      	eors	r1, r0
 80007a2:	428c      	cmp	r4, r1
 80007a4:	d039      	beq.n	800081a <__aeabi_fsub+0xa6>
 80007a6:	1aa8      	subs	r0, r5, r2
 80007a8:	2800      	cmp	r0, #0
 80007aa:	dd5a      	ble.n	8000862 <__aeabi_fsub+0xee>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d06a      	beq.n	8000886 <__aeabi_fsub+0x112>
 80007b0:	2dff      	cmp	r5, #255	; 0xff
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fsub+0x42>
 80007b4:	e0d9      	b.n	800096a <__aeabi_fsub+0x1f6>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	04d2      	lsls	r2, r2, #19
 80007ba:	4316      	orrs	r6, r2
 80007bc:	281b      	cmp	r0, #27
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_fsub+0x4e>
 80007c0:	e0e9      	b.n	8000996 <__aeabi_fsub+0x222>
 80007c2:	2001      	movs	r0, #1
 80007c4:	4663      	mov	r3, ip
 80007c6:	1a18      	subs	r0, r3, r0
 80007c8:	0143      	lsls	r3, r0, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fsub+0x5a>
 80007cc:	e0b4      	b.n	8000938 <__aeabi_fsub+0x1c4>
 80007ce:	0180      	lsls	r0, r0, #6
 80007d0:	0987      	lsrs	r7, r0, #6
 80007d2:	0038      	movs	r0, r7
 80007d4:	f001 ffce 	bl	8002774 <__clzsi2>
 80007d8:	3805      	subs	r0, #5
 80007da:	4087      	lsls	r7, r0
 80007dc:	4285      	cmp	r5, r0
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_fsub+0x6e>
 80007e0:	e0cc      	b.n	800097c <__aeabi_fsub+0x208>
 80007e2:	1a2d      	subs	r5, r5, r0
 80007e4:	48b5      	ldr	r0, [pc, #724]	; (8000abc <__aeabi_fsub+0x348>)
 80007e6:	4038      	ands	r0, r7
 80007e8:	0743      	lsls	r3, r0, #29
 80007ea:	d004      	beq.n	80007f6 <__aeabi_fsub+0x82>
 80007ec:	230f      	movs	r3, #15
 80007ee:	4003      	ands	r3, r0
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fsub+0x82>
 80007f4:	3004      	adds	r0, #4
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fsub+0x88>
 80007fa:	e0a0      	b.n	800093e <__aeabi_fsub+0x1ca>
 80007fc:	1c6a      	adds	r2, r5, #1
 80007fe:	2dfe      	cmp	r5, #254	; 0xfe
 8000800:	d100      	bne.n	8000804 <__aeabi_fsub+0x90>
 8000802:	e08d      	b.n	8000920 <__aeabi_fsub+0x1ac>
 8000804:	0180      	lsls	r0, r0, #6
 8000806:	0a47      	lsrs	r7, r0, #9
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	05d0      	lsls	r0, r2, #23
 800080c:	4338      	orrs	r0, r7
 800080e:	07e4      	lsls	r4, r4, #31
 8000810:	4320      	orrs	r0, r4
 8000812:	bcc0      	pop	{r6, r7}
 8000814:	46b9      	mov	r9, r7
 8000816:	46b0      	mov	r8, r6
 8000818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081a:	1aa8      	subs	r0, r5, r2
 800081c:	4680      	mov	r8, r0
 800081e:	2800      	cmp	r0, #0
 8000820:	dd45      	ble.n	80008ae <__aeabi_fsub+0x13a>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d070      	beq.n	8000908 <__aeabi_fsub+0x194>
 8000826:	2dff      	cmp	r5, #255	; 0xff
 8000828:	d100      	bne.n	800082c <__aeabi_fsub+0xb8>
 800082a:	e09e      	b.n	800096a <__aeabi_fsub+0x1f6>
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	04db      	lsls	r3, r3, #19
 8000830:	431e      	orrs	r6, r3
 8000832:	4643      	mov	r3, r8
 8000834:	2b1b      	cmp	r3, #27
 8000836:	dc00      	bgt.n	800083a <__aeabi_fsub+0xc6>
 8000838:	e0d2      	b.n	80009e0 <__aeabi_fsub+0x26c>
 800083a:	2001      	movs	r0, #1
 800083c:	4460      	add	r0, ip
 800083e:	0143      	lsls	r3, r0, #5
 8000840:	d57a      	bpl.n	8000938 <__aeabi_fsub+0x1c4>
 8000842:	3501      	adds	r5, #1
 8000844:	2dff      	cmp	r5, #255	; 0xff
 8000846:	d06b      	beq.n	8000920 <__aeabi_fsub+0x1ac>
 8000848:	2301      	movs	r3, #1
 800084a:	4a9d      	ldr	r2, [pc, #628]	; (8000ac0 <__aeabi_fsub+0x34c>)
 800084c:	4003      	ands	r3, r0
 800084e:	0840      	lsrs	r0, r0, #1
 8000850:	4010      	ands	r0, r2
 8000852:	4318      	orrs	r0, r3
 8000854:	e7c8      	b.n	80007e8 <__aeabi_fsub+0x74>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d020      	beq.n	800089c <__aeabi_fsub+0x128>
 800085a:	428c      	cmp	r4, r1
 800085c:	d023      	beq.n	80008a6 <__aeabi_fsub+0x132>
 800085e:	0028      	movs	r0, r5
 8000860:	38ff      	subs	r0, #255	; 0xff
 8000862:	2800      	cmp	r0, #0
 8000864:	d039      	beq.n	80008da <__aeabi_fsub+0x166>
 8000866:	1b57      	subs	r7, r2, r5
 8000868:	2d00      	cmp	r5, #0
 800086a:	d000      	beq.n	800086e <__aeabi_fsub+0xfa>
 800086c:	e09d      	b.n	80009aa <__aeabi_fsub+0x236>
 800086e:	4663      	mov	r3, ip
 8000870:	2b00      	cmp	r3, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fsub+0x102>
 8000874:	e0db      	b.n	8000a2e <__aeabi_fsub+0x2ba>
 8000876:	1e7b      	subs	r3, r7, #1
 8000878:	2f01      	cmp	r7, #1
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x10a>
 800087c:	e10d      	b.n	8000a9a <__aeabi_fsub+0x326>
 800087e:	2fff      	cmp	r7, #255	; 0xff
 8000880:	d071      	beq.n	8000966 <__aeabi_fsub+0x1f2>
 8000882:	001f      	movs	r7, r3
 8000884:	e098      	b.n	80009b8 <__aeabi_fsub+0x244>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d100      	bne.n	800088c <__aeabi_fsub+0x118>
 800088a:	e0a7      	b.n	80009dc <__aeabi_fsub+0x268>
 800088c:	1e42      	subs	r2, r0, #1
 800088e:	2801      	cmp	r0, #1
 8000890:	d100      	bne.n	8000894 <__aeabi_fsub+0x120>
 8000892:	e0e6      	b.n	8000a62 <__aeabi_fsub+0x2ee>
 8000894:	28ff      	cmp	r0, #255	; 0xff
 8000896:	d068      	beq.n	800096a <__aeabi_fsub+0x1f6>
 8000898:	0010      	movs	r0, r2
 800089a:	e78f      	b.n	80007bc <__aeabi_fsub+0x48>
 800089c:	2001      	movs	r0, #1
 800089e:	4041      	eors	r1, r0
 80008a0:	42a1      	cmp	r1, r4
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fsub+0x132>
 80008a4:	e77f      	b.n	80007a6 <__aeabi_fsub+0x32>
 80008a6:	20ff      	movs	r0, #255	; 0xff
 80008a8:	4240      	negs	r0, r0
 80008aa:	4680      	mov	r8, r0
 80008ac:	44a8      	add	r8, r5
 80008ae:	4640      	mov	r0, r8
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d038      	beq.n	8000926 <__aeabi_fsub+0x1b2>
 80008b4:	1b51      	subs	r1, r2, r5
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fsub+0x148>
 80008ba:	e0ae      	b.n	8000a1a <__aeabi_fsub+0x2a6>
 80008bc:	2aff      	cmp	r2, #255	; 0xff
 80008be:	d100      	bne.n	80008c2 <__aeabi_fsub+0x14e>
 80008c0:	e0df      	b.n	8000a82 <__aeabi_fsub+0x30e>
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	4660      	mov	r0, ip
 80008c6:	04db      	lsls	r3, r3, #19
 80008c8:	4318      	orrs	r0, r3
 80008ca:	4684      	mov	ip, r0
 80008cc:	291b      	cmp	r1, #27
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_fsub+0x15e>
 80008d0:	e0d9      	b.n	8000a86 <__aeabi_fsub+0x312>
 80008d2:	2001      	movs	r0, #1
 80008d4:	0015      	movs	r5, r2
 80008d6:	1980      	adds	r0, r0, r6
 80008d8:	e7b1      	b.n	800083e <__aeabi_fsub+0xca>
 80008da:	20fe      	movs	r0, #254	; 0xfe
 80008dc:	1c6a      	adds	r2, r5, #1
 80008de:	4210      	tst	r0, r2
 80008e0:	d171      	bne.n	80009c6 <__aeabi_fsub+0x252>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fsub+0x174>
 80008e6:	e0a6      	b.n	8000a36 <__aeabi_fsub+0x2c2>
 80008e8:	4663      	mov	r3, ip
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fsub+0x17c>
 80008ee:	e0d9      	b.n	8000aa4 <__aeabi_fsub+0x330>
 80008f0:	2200      	movs	r2, #0
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fsub+0x184>
 80008f6:	e788      	b.n	800080a <__aeabi_fsub+0x96>
 80008f8:	1b98      	subs	r0, r3, r6
 80008fa:	0143      	lsls	r3, r0, #5
 80008fc:	d400      	bmi.n	8000900 <__aeabi_fsub+0x18c>
 80008fe:	e0e1      	b.n	8000ac4 <__aeabi_fsub+0x350>
 8000900:	4663      	mov	r3, ip
 8000902:	000c      	movs	r4, r1
 8000904:	1af0      	subs	r0, r6, r3
 8000906:	e76f      	b.n	80007e8 <__aeabi_fsub+0x74>
 8000908:	2e00      	cmp	r6, #0
 800090a:	d100      	bne.n	800090e <__aeabi_fsub+0x19a>
 800090c:	e0b7      	b.n	8000a7e <__aeabi_fsub+0x30a>
 800090e:	0002      	movs	r2, r0
 8000910:	3a01      	subs	r2, #1
 8000912:	2801      	cmp	r0, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_fsub+0x1a4>
 8000916:	e09c      	b.n	8000a52 <__aeabi_fsub+0x2de>
 8000918:	28ff      	cmp	r0, #255	; 0xff
 800091a:	d026      	beq.n	800096a <__aeabi_fsub+0x1f6>
 800091c:	4690      	mov	r8, r2
 800091e:	e788      	b.n	8000832 <__aeabi_fsub+0xbe>
 8000920:	22ff      	movs	r2, #255	; 0xff
 8000922:	2700      	movs	r7, #0
 8000924:	e771      	b.n	800080a <__aeabi_fsub+0x96>
 8000926:	20fe      	movs	r0, #254	; 0xfe
 8000928:	1c6a      	adds	r2, r5, #1
 800092a:	4210      	tst	r0, r2
 800092c:	d064      	beq.n	80009f8 <__aeabi_fsub+0x284>
 800092e:	2aff      	cmp	r2, #255	; 0xff
 8000930:	d0f6      	beq.n	8000920 <__aeabi_fsub+0x1ac>
 8000932:	0015      	movs	r5, r2
 8000934:	4466      	add	r6, ip
 8000936:	0870      	lsrs	r0, r6, #1
 8000938:	0743      	lsls	r3, r0, #29
 800093a:	d000      	beq.n	800093e <__aeabi_fsub+0x1ca>
 800093c:	e756      	b.n	80007ec <__aeabi_fsub+0x78>
 800093e:	08c3      	lsrs	r3, r0, #3
 8000940:	2dff      	cmp	r5, #255	; 0xff
 8000942:	d012      	beq.n	800096a <__aeabi_fsub+0x1f6>
 8000944:	025b      	lsls	r3, r3, #9
 8000946:	0a5f      	lsrs	r7, r3, #9
 8000948:	b2ea      	uxtb	r2, r5
 800094a:	e75e      	b.n	800080a <__aeabi_fsub+0x96>
 800094c:	4662      	mov	r2, ip
 800094e:	2a00      	cmp	r2, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fsub+0x1e0>
 8000952:	e096      	b.n	8000a82 <__aeabi_fsub+0x30e>
 8000954:	2e00      	cmp	r6, #0
 8000956:	d008      	beq.n	800096a <__aeabi_fsub+0x1f6>
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	4213      	tst	r3, r2
 800095e:	d004      	beq.n	800096a <__aeabi_fsub+0x1f6>
 8000960:	4648      	mov	r0, r9
 8000962:	4210      	tst	r0, r2
 8000964:	d101      	bne.n	800096a <__aeabi_fsub+0x1f6>
 8000966:	000c      	movs	r4, r1
 8000968:	464b      	mov	r3, r9
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0d8      	beq.n	8000920 <__aeabi_fsub+0x1ac>
 800096e:	2780      	movs	r7, #128	; 0x80
 8000970:	03ff      	lsls	r7, r7, #15
 8000972:	431f      	orrs	r7, r3
 8000974:	027f      	lsls	r7, r7, #9
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	0a7f      	lsrs	r7, r7, #9
 800097a:	e746      	b.n	800080a <__aeabi_fsub+0x96>
 800097c:	2320      	movs	r3, #32
 800097e:	003a      	movs	r2, r7
 8000980:	1b45      	subs	r5, r0, r5
 8000982:	0038      	movs	r0, r7
 8000984:	3501      	adds	r5, #1
 8000986:	40ea      	lsrs	r2, r5
 8000988:	1b5d      	subs	r5, r3, r5
 800098a:	40a8      	lsls	r0, r5
 800098c:	1e43      	subs	r3, r0, #1
 800098e:	4198      	sbcs	r0, r3
 8000990:	2500      	movs	r5, #0
 8000992:	4310      	orrs	r0, r2
 8000994:	e728      	b.n	80007e8 <__aeabi_fsub+0x74>
 8000996:	2320      	movs	r3, #32
 8000998:	1a1b      	subs	r3, r3, r0
 800099a:	0032      	movs	r2, r6
 800099c:	409e      	lsls	r6, r3
 800099e:	40c2      	lsrs	r2, r0
 80009a0:	0030      	movs	r0, r6
 80009a2:	1e43      	subs	r3, r0, #1
 80009a4:	4198      	sbcs	r0, r3
 80009a6:	4310      	orrs	r0, r2
 80009a8:	e70c      	b.n	80007c4 <__aeabi_fsub+0x50>
 80009aa:	2aff      	cmp	r2, #255	; 0xff
 80009ac:	d0db      	beq.n	8000966 <__aeabi_fsub+0x1f2>
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	4660      	mov	r0, ip
 80009b2:	04db      	lsls	r3, r3, #19
 80009b4:	4318      	orrs	r0, r3
 80009b6:	4684      	mov	ip, r0
 80009b8:	2f1b      	cmp	r7, #27
 80009ba:	dd56      	ble.n	8000a6a <__aeabi_fsub+0x2f6>
 80009bc:	2001      	movs	r0, #1
 80009be:	000c      	movs	r4, r1
 80009c0:	0015      	movs	r5, r2
 80009c2:	1a30      	subs	r0, r6, r0
 80009c4:	e700      	b.n	80007c8 <__aeabi_fsub+0x54>
 80009c6:	4663      	mov	r3, ip
 80009c8:	1b9f      	subs	r7, r3, r6
 80009ca:	017b      	lsls	r3, r7, #5
 80009cc:	d43d      	bmi.n	8000a4a <__aeabi_fsub+0x2d6>
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fsub+0x260>
 80009d2:	e6fe      	b.n	80007d2 <__aeabi_fsub+0x5e>
 80009d4:	2400      	movs	r4, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	2700      	movs	r7, #0
 80009da:	e716      	b.n	800080a <__aeabi_fsub+0x96>
 80009dc:	0005      	movs	r5, r0
 80009de:	e7af      	b.n	8000940 <__aeabi_fsub+0x1cc>
 80009e0:	0032      	movs	r2, r6
 80009e2:	4643      	mov	r3, r8
 80009e4:	4641      	mov	r1, r8
 80009e6:	40da      	lsrs	r2, r3
 80009e8:	2320      	movs	r3, #32
 80009ea:	1a5b      	subs	r3, r3, r1
 80009ec:	409e      	lsls	r6, r3
 80009ee:	0030      	movs	r0, r6
 80009f0:	1e43      	subs	r3, r0, #1
 80009f2:	4198      	sbcs	r0, r3
 80009f4:	4310      	orrs	r0, r2
 80009f6:	e721      	b.n	800083c <__aeabi_fsub+0xc8>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d1a7      	bne.n	800094c <__aeabi_fsub+0x1d8>
 80009fc:	4663      	mov	r3, ip
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d059      	beq.n	8000ab6 <__aeabi_fsub+0x342>
 8000a02:	2200      	movs	r2, #0
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fsub+0x296>
 8000a08:	e6ff      	b.n	800080a <__aeabi_fsub+0x96>
 8000a0a:	0030      	movs	r0, r6
 8000a0c:	4460      	add	r0, ip
 8000a0e:	0143      	lsls	r3, r0, #5
 8000a10:	d592      	bpl.n	8000938 <__aeabi_fsub+0x1c4>
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <__aeabi_fsub+0x348>)
 8000a14:	3501      	adds	r5, #1
 8000a16:	4018      	ands	r0, r3
 8000a18:	e78e      	b.n	8000938 <__aeabi_fsub+0x1c4>
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d047      	beq.n	8000ab0 <__aeabi_fsub+0x33c>
 8000a20:	1e4b      	subs	r3, r1, #1
 8000a22:	2901      	cmp	r1, #1
 8000a24:	d015      	beq.n	8000a52 <__aeabi_fsub+0x2de>
 8000a26:	29ff      	cmp	r1, #255	; 0xff
 8000a28:	d02b      	beq.n	8000a82 <__aeabi_fsub+0x30e>
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	e74e      	b.n	80008cc <__aeabi_fsub+0x158>
 8000a2e:	000c      	movs	r4, r1
 8000a30:	464b      	mov	r3, r9
 8000a32:	003d      	movs	r5, r7
 8000a34:	e784      	b.n	8000940 <__aeabi_fsub+0x1cc>
 8000a36:	4662      	mov	r2, ip
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d18b      	bne.n	8000954 <__aeabi_fsub+0x1e0>
 8000a3c:	2e00      	cmp	r6, #0
 8000a3e:	d192      	bne.n	8000966 <__aeabi_fsub+0x1f2>
 8000a40:	2780      	movs	r7, #128	; 0x80
 8000a42:	2400      	movs	r4, #0
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	03ff      	lsls	r7, r7, #15
 8000a48:	e6df      	b.n	800080a <__aeabi_fsub+0x96>
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	1af7      	subs	r7, r6, r3
 8000a50:	e6bf      	b.n	80007d2 <__aeabi_fsub+0x5e>
 8000a52:	0030      	movs	r0, r6
 8000a54:	4460      	add	r0, ip
 8000a56:	2501      	movs	r5, #1
 8000a58:	0143      	lsls	r3, r0, #5
 8000a5a:	d400      	bmi.n	8000a5e <__aeabi_fsub+0x2ea>
 8000a5c:	e76c      	b.n	8000938 <__aeabi_fsub+0x1c4>
 8000a5e:	2502      	movs	r5, #2
 8000a60:	e6f2      	b.n	8000848 <__aeabi_fsub+0xd4>
 8000a62:	4663      	mov	r3, ip
 8000a64:	2501      	movs	r5, #1
 8000a66:	1b98      	subs	r0, r3, r6
 8000a68:	e6ae      	b.n	80007c8 <__aeabi_fsub+0x54>
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	4664      	mov	r4, ip
 8000a6e:	4660      	mov	r0, ip
 8000a70:	40fc      	lsrs	r4, r7
 8000a72:	1bdf      	subs	r7, r3, r7
 8000a74:	40b8      	lsls	r0, r7
 8000a76:	1e43      	subs	r3, r0, #1
 8000a78:	4198      	sbcs	r0, r3
 8000a7a:	4320      	orrs	r0, r4
 8000a7c:	e79f      	b.n	80009be <__aeabi_fsub+0x24a>
 8000a7e:	0005      	movs	r5, r0
 8000a80:	e75e      	b.n	8000940 <__aeabi_fsub+0x1cc>
 8000a82:	464b      	mov	r3, r9
 8000a84:	e771      	b.n	800096a <__aeabi_fsub+0x1f6>
 8000a86:	2320      	movs	r3, #32
 8000a88:	4665      	mov	r5, ip
 8000a8a:	4660      	mov	r0, ip
 8000a8c:	40cd      	lsrs	r5, r1
 8000a8e:	1a59      	subs	r1, r3, r1
 8000a90:	4088      	lsls	r0, r1
 8000a92:	1e43      	subs	r3, r0, #1
 8000a94:	4198      	sbcs	r0, r3
 8000a96:	4328      	orrs	r0, r5
 8000a98:	e71c      	b.n	80008d4 <__aeabi_fsub+0x160>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	2501      	movs	r5, #1
 8000aa0:	1af0      	subs	r0, r6, r3
 8000aa2:	e691      	b.n	80007c8 <__aeabi_fsub+0x54>
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d095      	beq.n	80009d4 <__aeabi_fsub+0x260>
 8000aa8:	000c      	movs	r4, r1
 8000aaa:	464f      	mov	r7, r9
 8000aac:	2200      	movs	r2, #0
 8000aae:	e6ac      	b.n	800080a <__aeabi_fsub+0x96>
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	000d      	movs	r5, r1
 8000ab4:	e744      	b.n	8000940 <__aeabi_fsub+0x1cc>
 8000ab6:	464f      	mov	r7, r9
 8000ab8:	2200      	movs	r2, #0
 8000aba:	e6a6      	b.n	800080a <__aeabi_fsub+0x96>
 8000abc:	fbffffff 	.word	0xfbffffff
 8000ac0:	7dffffff 	.word	0x7dffffff
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d000      	beq.n	8000aca <__aeabi_fsub+0x356>
 8000ac8:	e736      	b.n	8000938 <__aeabi_fsub+0x1c4>
 8000aca:	2400      	movs	r4, #0
 8000acc:	2700      	movs	r7, #0
 8000ace:	e69c      	b.n	800080a <__aeabi_fsub+0x96>

08000ad0 <__aeabi_ui2f>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	1e05      	subs	r5, r0, #0
 8000ad4:	d00e      	beq.n	8000af4 <__aeabi_ui2f+0x24>
 8000ad6:	f001 fe4d 	bl	8002774 <__clzsi2>
 8000ada:	239e      	movs	r3, #158	; 0x9e
 8000adc:	0004      	movs	r4, r0
 8000ade:	1a1b      	subs	r3, r3, r0
 8000ae0:	2b96      	cmp	r3, #150	; 0x96
 8000ae2:	dc0c      	bgt.n	8000afe <__aeabi_ui2f+0x2e>
 8000ae4:	2808      	cmp	r0, #8
 8000ae6:	dd01      	ble.n	8000aec <__aeabi_ui2f+0x1c>
 8000ae8:	3c08      	subs	r4, #8
 8000aea:	40a5      	lsls	r5, r4
 8000aec:	026d      	lsls	r5, r5, #9
 8000aee:	0a6d      	lsrs	r5, r5, #9
 8000af0:	b2d8      	uxtb	r0, r3
 8000af2:	e001      	b.n	8000af8 <__aeabi_ui2f+0x28>
 8000af4:	2000      	movs	r0, #0
 8000af6:	2500      	movs	r5, #0
 8000af8:	05c0      	lsls	r0, r0, #23
 8000afa:	4328      	orrs	r0, r5
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
 8000afe:	2b99      	cmp	r3, #153	; 0x99
 8000b00:	dd09      	ble.n	8000b16 <__aeabi_ui2f+0x46>
 8000b02:	0002      	movs	r2, r0
 8000b04:	0029      	movs	r1, r5
 8000b06:	321b      	adds	r2, #27
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	1e4a      	subs	r2, r1, #1
 8000b0c:	4191      	sbcs	r1, r2
 8000b0e:	2205      	movs	r2, #5
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	40d5      	lsrs	r5, r2
 8000b14:	430d      	orrs	r5, r1
 8000b16:	2c05      	cmp	r4, #5
 8000b18:	dc12      	bgt.n	8000b40 <__aeabi_ui2f+0x70>
 8000b1a:	0029      	movs	r1, r5
 8000b1c:	4e0c      	ldr	r6, [pc, #48]	; (8000b50 <__aeabi_ui2f+0x80>)
 8000b1e:	4031      	ands	r1, r6
 8000b20:	076a      	lsls	r2, r5, #29
 8000b22:	d009      	beq.n	8000b38 <__aeabi_ui2f+0x68>
 8000b24:	200f      	movs	r0, #15
 8000b26:	4028      	ands	r0, r5
 8000b28:	2804      	cmp	r0, #4
 8000b2a:	d005      	beq.n	8000b38 <__aeabi_ui2f+0x68>
 8000b2c:	3104      	adds	r1, #4
 8000b2e:	014a      	lsls	r2, r1, #5
 8000b30:	d502      	bpl.n	8000b38 <__aeabi_ui2f+0x68>
 8000b32:	239f      	movs	r3, #159	; 0x9f
 8000b34:	4031      	ands	r1, r6
 8000b36:	1b1b      	subs	r3, r3, r4
 8000b38:	0189      	lsls	r1, r1, #6
 8000b3a:	0a4d      	lsrs	r5, r1, #9
 8000b3c:	b2d8      	uxtb	r0, r3
 8000b3e:	e7db      	b.n	8000af8 <__aeabi_ui2f+0x28>
 8000b40:	1f62      	subs	r2, r4, #5
 8000b42:	4095      	lsls	r5, r2
 8000b44:	0029      	movs	r1, r5
 8000b46:	4e02      	ldr	r6, [pc, #8]	; (8000b50 <__aeabi_ui2f+0x80>)
 8000b48:	4031      	ands	r1, r6
 8000b4a:	076a      	lsls	r2, r5, #29
 8000b4c:	d0f4      	beq.n	8000b38 <__aeabi_ui2f+0x68>
 8000b4e:	e7e9      	b.n	8000b24 <__aeabi_ui2f+0x54>
 8000b50:	fbffffff 	.word	0xfbffffff

08000b54 <__aeabi_dadd>:
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b56:	464f      	mov	r7, r9
 8000b58:	4646      	mov	r6, r8
 8000b5a:	46d6      	mov	lr, sl
 8000b5c:	000d      	movs	r5, r1
 8000b5e:	0004      	movs	r4, r0
 8000b60:	b5c0      	push	{r6, r7, lr}
 8000b62:	001f      	movs	r7, r3
 8000b64:	0011      	movs	r1, r2
 8000b66:	0328      	lsls	r0, r5, #12
 8000b68:	0f62      	lsrs	r2, r4, #29
 8000b6a:	0a40      	lsrs	r0, r0, #9
 8000b6c:	4310      	orrs	r0, r2
 8000b6e:	007a      	lsls	r2, r7, #1
 8000b70:	0d52      	lsrs	r2, r2, #21
 8000b72:	00e3      	lsls	r3, r4, #3
 8000b74:	033c      	lsls	r4, r7, #12
 8000b76:	4691      	mov	r9, r2
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0ffa      	lsrs	r2, r7, #31
 8000b7c:	0f4f      	lsrs	r7, r1, #29
 8000b7e:	006e      	lsls	r6, r5, #1
 8000b80:	4327      	orrs	r7, r4
 8000b82:	4692      	mov	sl, r2
 8000b84:	46b8      	mov	r8, r7
 8000b86:	0d76      	lsrs	r6, r6, #21
 8000b88:	0fed      	lsrs	r5, r5, #31
 8000b8a:	00c9      	lsls	r1, r1, #3
 8000b8c:	4295      	cmp	r5, r2
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x3e>
 8000b90:	e099      	b.n	8000cc6 <__aeabi_dadd+0x172>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b34      	subs	r4, r6, r4
 8000b96:	46a4      	mov	ip, r4
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_dadd+0x4a>
 8000b9c:	e07c      	b.n	8000c98 <__aeabi_dadd+0x144>
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x52>
 8000ba4:	e0b8      	b.n	8000d18 <__aeabi_dadd+0x1c4>
 8000ba6:	4ac5      	ldr	r2, [pc, #788]	; (8000ebc <__aeabi_dadd+0x368>)
 8000ba8:	4296      	cmp	r6, r2
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x5a>
 8000bac:	e11c      	b.n	8000de8 <__aeabi_dadd+0x294>
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	003c      	movs	r4, r7
 8000bb2:	0412      	lsls	r2, r2, #16
 8000bb4:	4314      	orrs	r4, r2
 8000bb6:	46a0      	mov	r8, r4
 8000bb8:	4662      	mov	r2, ip
 8000bba:	2a38      	cmp	r2, #56	; 0x38
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_dadd+0x6c>
 8000bbe:	e161      	b.n	8000e84 <__aeabi_dadd+0x330>
 8000bc0:	2a1f      	cmp	r2, #31
 8000bc2:	dd00      	ble.n	8000bc6 <__aeabi_dadd+0x72>
 8000bc4:	e1cc      	b.n	8000f60 <__aeabi_dadd+0x40c>
 8000bc6:	4664      	mov	r4, ip
 8000bc8:	2220      	movs	r2, #32
 8000bca:	1b12      	subs	r2, r2, r4
 8000bcc:	4644      	mov	r4, r8
 8000bce:	4094      	lsls	r4, r2
 8000bd0:	000f      	movs	r7, r1
 8000bd2:	46a1      	mov	r9, r4
 8000bd4:	4664      	mov	r4, ip
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	40e7      	lsrs	r7, r4
 8000bda:	464c      	mov	r4, r9
 8000bdc:	1e4a      	subs	r2, r1, #1
 8000bde:	4191      	sbcs	r1, r2
 8000be0:	433c      	orrs	r4, r7
 8000be2:	4642      	mov	r2, r8
 8000be4:	4321      	orrs	r1, r4
 8000be6:	4664      	mov	r4, ip
 8000be8:	40e2      	lsrs	r2, r4
 8000bea:	1a80      	subs	r0, r0, r2
 8000bec:	1a5c      	subs	r4, r3, r1
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	419b      	sbcs	r3, r3
 8000bf2:	425f      	negs	r7, r3
 8000bf4:	1bc7      	subs	r7, r0, r7
 8000bf6:	023b      	lsls	r3, r7, #8
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_dadd+0xa8>
 8000bfa:	e0d0      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8000bfc:	027f      	lsls	r7, r7, #9
 8000bfe:	0a7f      	lsrs	r7, r7, #9
 8000c00:	2f00      	cmp	r7, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0xb2>
 8000c04:	e0ff      	b.n	8000e06 <__aeabi_dadd+0x2b2>
 8000c06:	0038      	movs	r0, r7
 8000c08:	f001 fdb4 	bl	8002774 <__clzsi2>
 8000c0c:	0001      	movs	r1, r0
 8000c0e:	3908      	subs	r1, #8
 8000c10:	2320      	movs	r3, #32
 8000c12:	0022      	movs	r2, r4
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	408f      	lsls	r7, r1
 8000c18:	40da      	lsrs	r2, r3
 8000c1a:	408c      	lsls	r4, r1
 8000c1c:	4317      	orrs	r7, r2
 8000c1e:	42b1      	cmp	r1, r6
 8000c20:	da00      	bge.n	8000c24 <__aeabi_dadd+0xd0>
 8000c22:	e0ff      	b.n	8000e24 <__aeabi_dadd+0x2d0>
 8000c24:	1b89      	subs	r1, r1, r6
 8000c26:	1c4b      	adds	r3, r1, #1
 8000c28:	2b1f      	cmp	r3, #31
 8000c2a:	dd00      	ble.n	8000c2e <__aeabi_dadd+0xda>
 8000c2c:	e0a8      	b.n	8000d80 <__aeabi_dadd+0x22c>
 8000c2e:	2220      	movs	r2, #32
 8000c30:	0039      	movs	r1, r7
 8000c32:	1ad2      	subs	r2, r2, r3
 8000c34:	0020      	movs	r0, r4
 8000c36:	4094      	lsls	r4, r2
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	40d8      	lsrs	r0, r3
 8000c3c:	1e62      	subs	r2, r4, #1
 8000c3e:	4194      	sbcs	r4, r2
 8000c40:	40df      	lsrs	r7, r3
 8000c42:	2600      	movs	r6, #0
 8000c44:	4301      	orrs	r1, r0
 8000c46:	430c      	orrs	r4, r1
 8000c48:	0763      	lsls	r3, r4, #29
 8000c4a:	d009      	beq.n	8000c60 <__aeabi_dadd+0x10c>
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4023      	ands	r3, r4
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d005      	beq.n	8000c60 <__aeabi_dadd+0x10c>
 8000c54:	1d23      	adds	r3, r4, #4
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	41a4      	sbcs	r4, r4
 8000c5a:	4264      	negs	r4, r4
 8000c5c:	193f      	adds	r7, r7, r4
 8000c5e:	001c      	movs	r4, r3
 8000c60:	023b      	lsls	r3, r7, #8
 8000c62:	d400      	bmi.n	8000c66 <__aeabi_dadd+0x112>
 8000c64:	e09e      	b.n	8000da4 <__aeabi_dadd+0x250>
 8000c66:	4b95      	ldr	r3, [pc, #596]	; (8000ebc <__aeabi_dadd+0x368>)
 8000c68:	3601      	adds	r6, #1
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x11c>
 8000c6e:	e0b7      	b.n	8000de0 <__aeabi_dadd+0x28c>
 8000c70:	4a93      	ldr	r2, [pc, #588]	; (8000ec0 <__aeabi_dadd+0x36c>)
 8000c72:	08e4      	lsrs	r4, r4, #3
 8000c74:	4017      	ands	r7, r2
 8000c76:	077b      	lsls	r3, r7, #29
 8000c78:	0571      	lsls	r1, r6, #21
 8000c7a:	027f      	lsls	r7, r7, #9
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	0b3f      	lsrs	r7, r7, #12
 8000c80:	0d4a      	lsrs	r2, r1, #21
 8000c82:	0512      	lsls	r2, r2, #20
 8000c84:	433a      	orrs	r2, r7
 8000c86:	07ed      	lsls	r5, r5, #31
 8000c88:	432a      	orrs	r2, r5
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	bce0      	pop	{r5, r6, r7}
 8000c90:	46ba      	mov	sl, r7
 8000c92:	46b1      	mov	r9, r6
 8000c94:	46a8      	mov	r8, r5
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c98:	2c00      	cmp	r4, #0
 8000c9a:	d04b      	beq.n	8000d34 <__aeabi_dadd+0x1e0>
 8000c9c:	464c      	mov	r4, r9
 8000c9e:	1ba4      	subs	r4, r4, r6
 8000ca0:	46a4      	mov	ip, r4
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dadd+0x154>
 8000ca6:	e123      	b.n	8000ef0 <__aeabi_dadd+0x39c>
 8000ca8:	0004      	movs	r4, r0
 8000caa:	431c      	orrs	r4, r3
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x15c>
 8000cae:	e1af      	b.n	8001010 <__aeabi_dadd+0x4bc>
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	1e54      	subs	r4, r2, #1
 8000cb4:	2a01      	cmp	r2, #1
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x166>
 8000cb8:	e215      	b.n	80010e6 <__aeabi_dadd+0x592>
 8000cba:	4d80      	ldr	r5, [pc, #512]	; (8000ebc <__aeabi_dadd+0x368>)
 8000cbc:	45ac      	cmp	ip, r5
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x16e>
 8000cc0:	e1c8      	b.n	8001054 <__aeabi_dadd+0x500>
 8000cc2:	46a4      	mov	ip, r4
 8000cc4:	e11b      	b.n	8000efe <__aeabi_dadd+0x3aa>
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	1ab2      	subs	r2, r6, r2
 8000cca:	4694      	mov	ip, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	dc00      	bgt.n	8000cd2 <__aeabi_dadd+0x17e>
 8000cd0:	e0ac      	b.n	8000e2c <__aeabi_dadd+0x2d8>
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	d043      	beq.n	8000d60 <__aeabi_dadd+0x20c>
 8000cd8:	4a78      	ldr	r2, [pc, #480]	; (8000ebc <__aeabi_dadd+0x368>)
 8000cda:	4296      	cmp	r6, r2
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dadd+0x18c>
 8000cde:	e1af      	b.n	8001040 <__aeabi_dadd+0x4ec>
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	003c      	movs	r4, r7
 8000ce4:	0412      	lsls	r2, r2, #16
 8000ce6:	4314      	orrs	r4, r2
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	4662      	mov	r2, ip
 8000cec:	2a38      	cmp	r2, #56	; 0x38
 8000cee:	dc67      	bgt.n	8000dc0 <__aeabi_dadd+0x26c>
 8000cf0:	2a1f      	cmp	r2, #31
 8000cf2:	dc00      	bgt.n	8000cf6 <__aeabi_dadd+0x1a2>
 8000cf4:	e15f      	b.n	8000fb6 <__aeabi_dadd+0x462>
 8000cf6:	4647      	mov	r7, r8
 8000cf8:	3a20      	subs	r2, #32
 8000cfa:	40d7      	lsrs	r7, r2
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	2a20      	cmp	r2, #32
 8000d00:	d005      	beq.n	8000d0e <__aeabi_dadd+0x1ba>
 8000d02:	4664      	mov	r4, ip
 8000d04:	2240      	movs	r2, #64	; 0x40
 8000d06:	1b12      	subs	r2, r2, r4
 8000d08:	4644      	mov	r4, r8
 8000d0a:	4094      	lsls	r4, r2
 8000d0c:	4321      	orrs	r1, r4
 8000d0e:	1e4a      	subs	r2, r1, #1
 8000d10:	4191      	sbcs	r1, r2
 8000d12:	000c      	movs	r4, r1
 8000d14:	433c      	orrs	r4, r7
 8000d16:	e057      	b.n	8000dc8 <__aeabi_dadd+0x274>
 8000d18:	003a      	movs	r2, r7
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dadd+0x1cc>
 8000d1e:	e105      	b.n	8000f2c <__aeabi_dadd+0x3d8>
 8000d20:	0022      	movs	r2, r4
 8000d22:	3a01      	subs	r2, #1
 8000d24:	2c01      	cmp	r4, #1
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x1d6>
 8000d28:	e182      	b.n	8001030 <__aeabi_dadd+0x4dc>
 8000d2a:	4c64      	ldr	r4, [pc, #400]	; (8000ebc <__aeabi_dadd+0x368>)
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d05b      	beq.n	8000de8 <__aeabi_dadd+0x294>
 8000d30:	4694      	mov	ip, r2
 8000d32:	e741      	b.n	8000bb8 <__aeabi_dadd+0x64>
 8000d34:	4c63      	ldr	r4, [pc, #396]	; (8000ec4 <__aeabi_dadd+0x370>)
 8000d36:	1c77      	adds	r7, r6, #1
 8000d38:	4227      	tst	r7, r4
 8000d3a:	d000      	beq.n	8000d3e <__aeabi_dadd+0x1ea>
 8000d3c:	e0c4      	b.n	8000ec8 <__aeabi_dadd+0x374>
 8000d3e:	0004      	movs	r4, r0
 8000d40:	431c      	orrs	r4, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d000      	beq.n	8000d48 <__aeabi_dadd+0x1f4>
 8000d46:	e169      	b.n	800101c <__aeabi_dadd+0x4c8>
 8000d48:	2c00      	cmp	r4, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dadd+0x1fa>
 8000d4c:	e1bf      	b.n	80010ce <__aeabi_dadd+0x57a>
 8000d4e:	4644      	mov	r4, r8
 8000d50:	430c      	orrs	r4, r1
 8000d52:	d000      	beq.n	8000d56 <__aeabi_dadd+0x202>
 8000d54:	e1d0      	b.n	80010f8 <__aeabi_dadd+0x5a4>
 8000d56:	0742      	lsls	r2, r0, #29
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	08c0      	lsrs	r0, r0, #3
 8000d5e:	e029      	b.n	8000db4 <__aeabi_dadd+0x260>
 8000d60:	003a      	movs	r2, r7
 8000d62:	430a      	orrs	r2, r1
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x214>
 8000d66:	e170      	b.n	800104a <__aeabi_dadd+0x4f6>
 8000d68:	4662      	mov	r2, ip
 8000d6a:	4664      	mov	r4, ip
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	2c01      	cmp	r4, #1
 8000d70:	d100      	bne.n	8000d74 <__aeabi_dadd+0x220>
 8000d72:	e0e0      	b.n	8000f36 <__aeabi_dadd+0x3e2>
 8000d74:	4c51      	ldr	r4, [pc, #324]	; (8000ebc <__aeabi_dadd+0x368>)
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d100      	bne.n	8000d7c <__aeabi_dadd+0x228>
 8000d7a:	e161      	b.n	8001040 <__aeabi_dadd+0x4ec>
 8000d7c:	4694      	mov	ip, r2
 8000d7e:	e7b4      	b.n	8000cea <__aeabi_dadd+0x196>
 8000d80:	003a      	movs	r2, r7
 8000d82:	391f      	subs	r1, #31
 8000d84:	40ca      	lsrs	r2, r1
 8000d86:	0011      	movs	r1, r2
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	d003      	beq.n	8000d94 <__aeabi_dadd+0x240>
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	409f      	lsls	r7, r3
 8000d92:	433c      	orrs	r4, r7
 8000d94:	1e63      	subs	r3, r4, #1
 8000d96:	419c      	sbcs	r4, r3
 8000d98:	2700      	movs	r7, #0
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	430c      	orrs	r4, r1
 8000d9e:	0763      	lsls	r3, r4, #29
 8000da0:	d000      	beq.n	8000da4 <__aeabi_dadd+0x250>
 8000da2:	e753      	b.n	8000c4c <__aeabi_dadd+0xf8>
 8000da4:	46b4      	mov	ip, r6
 8000da6:	08e4      	lsrs	r4, r4, #3
 8000da8:	077b      	lsls	r3, r7, #29
 8000daa:	4323      	orrs	r3, r4
 8000dac:	08f8      	lsrs	r0, r7, #3
 8000dae:	4a43      	ldr	r2, [pc, #268]	; (8000ebc <__aeabi_dadd+0x368>)
 8000db0:	4594      	cmp	ip, r2
 8000db2:	d01d      	beq.n	8000df0 <__aeabi_dadd+0x29c>
 8000db4:	4662      	mov	r2, ip
 8000db6:	0307      	lsls	r7, r0, #12
 8000db8:	0552      	lsls	r2, r2, #21
 8000dba:	0b3f      	lsrs	r7, r7, #12
 8000dbc:	0d52      	lsrs	r2, r2, #21
 8000dbe:	e760      	b.n	8000c82 <__aeabi_dadd+0x12e>
 8000dc0:	4644      	mov	r4, r8
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	1e62      	subs	r2, r4, #1
 8000dc6:	4194      	sbcs	r4, r2
 8000dc8:	18e4      	adds	r4, r4, r3
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	419b      	sbcs	r3, r3
 8000dce:	425f      	negs	r7, r3
 8000dd0:	183f      	adds	r7, r7, r0
 8000dd2:	023b      	lsls	r3, r7, #8
 8000dd4:	d5e3      	bpl.n	8000d9e <__aeabi_dadd+0x24a>
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <__aeabi_dadd+0x368>)
 8000dd8:	3601      	adds	r6, #1
 8000dda:	429e      	cmp	r6, r3
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dadd+0x28c>
 8000dde:	e0b5      	b.n	8000f4c <__aeabi_dadd+0x3f8>
 8000de0:	0032      	movs	r2, r6
 8000de2:	2700      	movs	r7, #0
 8000de4:	2300      	movs	r3, #0
 8000de6:	e74c      	b.n	8000c82 <__aeabi_dadd+0x12e>
 8000de8:	0742      	lsls	r2, r0, #29
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	08c0      	lsrs	r0, r0, #3
 8000df0:	001a      	movs	r2, r3
 8000df2:	4302      	orrs	r2, r0
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x2a4>
 8000df6:	e1e1      	b.n	80011bc <__aeabi_dadd+0x668>
 8000df8:	2780      	movs	r7, #128	; 0x80
 8000dfa:	033f      	lsls	r7, r7, #12
 8000dfc:	4307      	orrs	r7, r0
 8000dfe:	033f      	lsls	r7, r7, #12
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <__aeabi_dadd+0x368>)
 8000e02:	0b3f      	lsrs	r7, r7, #12
 8000e04:	e73d      	b.n	8000c82 <__aeabi_dadd+0x12e>
 8000e06:	0020      	movs	r0, r4
 8000e08:	f001 fcb4 	bl	8002774 <__clzsi2>
 8000e0c:	0001      	movs	r1, r0
 8000e0e:	3118      	adds	r1, #24
 8000e10:	291f      	cmp	r1, #31
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_dadd+0x2c2>
 8000e14:	e6fc      	b.n	8000c10 <__aeabi_dadd+0xbc>
 8000e16:	3808      	subs	r0, #8
 8000e18:	4084      	lsls	r4, r0
 8000e1a:	0027      	movs	r7, r4
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	42b1      	cmp	r1, r6
 8000e20:	db00      	blt.n	8000e24 <__aeabi_dadd+0x2d0>
 8000e22:	e6ff      	b.n	8000c24 <__aeabi_dadd+0xd0>
 8000e24:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <__aeabi_dadd+0x36c>)
 8000e26:	1a76      	subs	r6, r6, r1
 8000e28:	4017      	ands	r7, r2
 8000e2a:	e70d      	b.n	8000c48 <__aeabi_dadd+0xf4>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d02f      	beq.n	8000e90 <__aeabi_dadd+0x33c>
 8000e30:	464a      	mov	r2, r9
 8000e32:	1b92      	subs	r2, r2, r6
 8000e34:	4694      	mov	ip, r2
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x2e8>
 8000e3a:	e0ad      	b.n	8000f98 <__aeabi_dadd+0x444>
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <__aeabi_dadd+0x368>)
 8000e3e:	4591      	cmp	r9, r2
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x2f0>
 8000e42:	e10f      	b.n	8001064 <__aeabi_dadd+0x510>
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	0412      	lsls	r2, r2, #16
 8000e48:	4310      	orrs	r0, r2
 8000e4a:	4662      	mov	r2, ip
 8000e4c:	2a38      	cmp	r2, #56	; 0x38
 8000e4e:	dd00      	ble.n	8000e52 <__aeabi_dadd+0x2fe>
 8000e50:	e10f      	b.n	8001072 <__aeabi_dadd+0x51e>
 8000e52:	2a1f      	cmp	r2, #31
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_dadd+0x304>
 8000e56:	e180      	b.n	800115a <__aeabi_dadd+0x606>
 8000e58:	4664      	mov	r4, ip
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	001e      	movs	r6, r3
 8000e5e:	1b12      	subs	r2, r2, r4
 8000e60:	4667      	mov	r7, ip
 8000e62:	0004      	movs	r4, r0
 8000e64:	4093      	lsls	r3, r2
 8000e66:	4094      	lsls	r4, r2
 8000e68:	40fe      	lsrs	r6, r7
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	4193      	sbcs	r3, r2
 8000e6e:	40f8      	lsrs	r0, r7
 8000e70:	4334      	orrs	r4, r6
 8000e72:	431c      	orrs	r4, r3
 8000e74:	4480      	add	r8, r0
 8000e76:	1864      	adds	r4, r4, r1
 8000e78:	428c      	cmp	r4, r1
 8000e7a:	41bf      	sbcs	r7, r7
 8000e7c:	427f      	negs	r7, r7
 8000e7e:	464e      	mov	r6, r9
 8000e80:	4447      	add	r7, r8
 8000e82:	e7a6      	b.n	8000dd2 <__aeabi_dadd+0x27e>
 8000e84:	4642      	mov	r2, r8
 8000e86:	430a      	orrs	r2, r1
 8000e88:	0011      	movs	r1, r2
 8000e8a:	1e4a      	subs	r2, r1, #1
 8000e8c:	4191      	sbcs	r1, r2
 8000e8e:	e6ad      	b.n	8000bec <__aeabi_dadd+0x98>
 8000e90:	4c0c      	ldr	r4, [pc, #48]	; (8000ec4 <__aeabi_dadd+0x370>)
 8000e92:	1c72      	adds	r2, r6, #1
 8000e94:	4222      	tst	r2, r4
 8000e96:	d000      	beq.n	8000e9a <__aeabi_dadd+0x346>
 8000e98:	e0a1      	b.n	8000fde <__aeabi_dadd+0x48a>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d000      	beq.n	8000ea4 <__aeabi_dadd+0x350>
 8000ea2:	e0fa      	b.n	800109a <__aeabi_dadd+0x546>
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_dadd+0x356>
 8000ea8:	e145      	b.n	8001136 <__aeabi_dadd+0x5e2>
 8000eaa:	003a      	movs	r2, r7
 8000eac:	430a      	orrs	r2, r1
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_dadd+0x35e>
 8000eb0:	e146      	b.n	8001140 <__aeabi_dadd+0x5ec>
 8000eb2:	0742      	lsls	r2, r0, #29
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	08c0      	lsrs	r0, r0, #3
 8000eba:	e77b      	b.n	8000db4 <__aeabi_dadd+0x260>
 8000ebc:	000007ff 	.word	0x000007ff
 8000ec0:	ff7fffff 	.word	0xff7fffff
 8000ec4:	000007fe 	.word	0x000007fe
 8000ec8:	4647      	mov	r7, r8
 8000eca:	1a5c      	subs	r4, r3, r1
 8000ecc:	1bc2      	subs	r2, r0, r7
 8000ece:	42a3      	cmp	r3, r4
 8000ed0:	41bf      	sbcs	r7, r7
 8000ed2:	427f      	negs	r7, r7
 8000ed4:	46b9      	mov	r9, r7
 8000ed6:	0017      	movs	r7, r2
 8000ed8:	464a      	mov	r2, r9
 8000eda:	1abf      	subs	r7, r7, r2
 8000edc:	023a      	lsls	r2, r7, #8
 8000ede:	d500      	bpl.n	8000ee2 <__aeabi_dadd+0x38e>
 8000ee0:	e08d      	b.n	8000ffe <__aeabi_dadd+0x4aa>
 8000ee2:	0023      	movs	r3, r4
 8000ee4:	433b      	orrs	r3, r7
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x396>
 8000ee8:	e68a      	b.n	8000c00 <__aeabi_dadd+0xac>
 8000eea:	2000      	movs	r0, #0
 8000eec:	2500      	movs	r5, #0
 8000eee:	e761      	b.n	8000db4 <__aeabi_dadd+0x260>
 8000ef0:	4cb4      	ldr	r4, [pc, #720]	; (80011c4 <__aeabi_dadd+0x670>)
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_dadd+0x3a4>
 8000ef6:	e0ad      	b.n	8001054 <__aeabi_dadd+0x500>
 8000ef8:	2480      	movs	r4, #128	; 0x80
 8000efa:	0424      	lsls	r4, r4, #16
 8000efc:	4320      	orrs	r0, r4
 8000efe:	4664      	mov	r4, ip
 8000f00:	2c38      	cmp	r4, #56	; 0x38
 8000f02:	dc3d      	bgt.n	8000f80 <__aeabi_dadd+0x42c>
 8000f04:	4662      	mov	r2, ip
 8000f06:	2c1f      	cmp	r4, #31
 8000f08:	dd00      	ble.n	8000f0c <__aeabi_dadd+0x3b8>
 8000f0a:	e0b7      	b.n	800107c <__aeabi_dadd+0x528>
 8000f0c:	2520      	movs	r5, #32
 8000f0e:	001e      	movs	r6, r3
 8000f10:	1b2d      	subs	r5, r5, r4
 8000f12:	0004      	movs	r4, r0
 8000f14:	40ab      	lsls	r3, r5
 8000f16:	40ac      	lsls	r4, r5
 8000f18:	40d6      	lsrs	r6, r2
 8000f1a:	40d0      	lsrs	r0, r2
 8000f1c:	4642      	mov	r2, r8
 8000f1e:	1e5d      	subs	r5, r3, #1
 8000f20:	41ab      	sbcs	r3, r5
 8000f22:	4334      	orrs	r4, r6
 8000f24:	1a12      	subs	r2, r2, r0
 8000f26:	4690      	mov	r8, r2
 8000f28:	4323      	orrs	r3, r4
 8000f2a:	e02c      	b.n	8000f86 <__aeabi_dadd+0x432>
 8000f2c:	0742      	lsls	r2, r0, #29
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	08c0      	lsrs	r0, r0, #3
 8000f34:	e73b      	b.n	8000dae <__aeabi_dadd+0x25a>
 8000f36:	185c      	adds	r4, r3, r1
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	419b      	sbcs	r3, r3
 8000f3c:	4440      	add	r0, r8
 8000f3e:	425b      	negs	r3, r3
 8000f40:	18c7      	adds	r7, r0, r3
 8000f42:	2601      	movs	r6, #1
 8000f44:	023b      	lsls	r3, r7, #8
 8000f46:	d400      	bmi.n	8000f4a <__aeabi_dadd+0x3f6>
 8000f48:	e729      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8000f4a:	2602      	movs	r6, #2
 8000f4c:	4a9e      	ldr	r2, [pc, #632]	; (80011c8 <__aeabi_dadd+0x674>)
 8000f4e:	0863      	lsrs	r3, r4, #1
 8000f50:	4017      	ands	r7, r2
 8000f52:	2201      	movs	r2, #1
 8000f54:	4014      	ands	r4, r2
 8000f56:	431c      	orrs	r4, r3
 8000f58:	07fb      	lsls	r3, r7, #31
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	087f      	lsrs	r7, r7, #1
 8000f5e:	e673      	b.n	8000c48 <__aeabi_dadd+0xf4>
 8000f60:	4644      	mov	r4, r8
 8000f62:	3a20      	subs	r2, #32
 8000f64:	40d4      	lsrs	r4, r2
 8000f66:	4662      	mov	r2, ip
 8000f68:	2a20      	cmp	r2, #32
 8000f6a:	d005      	beq.n	8000f78 <__aeabi_dadd+0x424>
 8000f6c:	4667      	mov	r7, ip
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	1bd2      	subs	r2, r2, r7
 8000f72:	4647      	mov	r7, r8
 8000f74:	4097      	lsls	r7, r2
 8000f76:	4339      	orrs	r1, r7
 8000f78:	1e4a      	subs	r2, r1, #1
 8000f7a:	4191      	sbcs	r1, r2
 8000f7c:	4321      	orrs	r1, r4
 8000f7e:	e635      	b.n	8000bec <__aeabi_dadd+0x98>
 8000f80:	4303      	orrs	r3, r0
 8000f82:	1e58      	subs	r0, r3, #1
 8000f84:	4183      	sbcs	r3, r0
 8000f86:	1acc      	subs	r4, r1, r3
 8000f88:	42a1      	cmp	r1, r4
 8000f8a:	41bf      	sbcs	r7, r7
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	427f      	negs	r7, r7
 8000f90:	4655      	mov	r5, sl
 8000f92:	464e      	mov	r6, r9
 8000f94:	1bdf      	subs	r7, r3, r7
 8000f96:	e62e      	b.n	8000bf6 <__aeabi_dadd+0xa2>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x44c>
 8000f9e:	e0bd      	b.n	800111c <__aeabi_dadd+0x5c8>
 8000fa0:	4662      	mov	r2, ip
 8000fa2:	4664      	mov	r4, ip
 8000fa4:	3a01      	subs	r2, #1
 8000fa6:	2c01      	cmp	r4, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x458>
 8000faa:	e0e5      	b.n	8001178 <__aeabi_dadd+0x624>
 8000fac:	4c85      	ldr	r4, [pc, #532]	; (80011c4 <__aeabi_dadd+0x670>)
 8000fae:	45a4      	cmp	ip, r4
 8000fb0:	d058      	beq.n	8001064 <__aeabi_dadd+0x510>
 8000fb2:	4694      	mov	ip, r2
 8000fb4:	e749      	b.n	8000e4a <__aeabi_dadd+0x2f6>
 8000fb6:	4664      	mov	r4, ip
 8000fb8:	2220      	movs	r2, #32
 8000fba:	1b12      	subs	r2, r2, r4
 8000fbc:	4644      	mov	r4, r8
 8000fbe:	4094      	lsls	r4, r2
 8000fc0:	000f      	movs	r7, r1
 8000fc2:	46a1      	mov	r9, r4
 8000fc4:	4664      	mov	r4, ip
 8000fc6:	4091      	lsls	r1, r2
 8000fc8:	40e7      	lsrs	r7, r4
 8000fca:	464c      	mov	r4, r9
 8000fcc:	1e4a      	subs	r2, r1, #1
 8000fce:	4191      	sbcs	r1, r2
 8000fd0:	433c      	orrs	r4, r7
 8000fd2:	4642      	mov	r2, r8
 8000fd4:	430c      	orrs	r4, r1
 8000fd6:	4661      	mov	r1, ip
 8000fd8:	40ca      	lsrs	r2, r1
 8000fda:	1880      	adds	r0, r0, r2
 8000fdc:	e6f4      	b.n	8000dc8 <__aeabi_dadd+0x274>
 8000fde:	4c79      	ldr	r4, [pc, #484]	; (80011c4 <__aeabi_dadd+0x670>)
 8000fe0:	42a2      	cmp	r2, r4
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x492>
 8000fe4:	e6fd      	b.n	8000de2 <__aeabi_dadd+0x28e>
 8000fe6:	1859      	adds	r1, r3, r1
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	419b      	sbcs	r3, r3
 8000fec:	4440      	add	r0, r8
 8000fee:	425f      	negs	r7, r3
 8000ff0:	19c7      	adds	r7, r0, r7
 8000ff2:	07fc      	lsls	r4, r7, #31
 8000ff4:	0849      	lsrs	r1, r1, #1
 8000ff6:	0016      	movs	r6, r2
 8000ff8:	430c      	orrs	r4, r1
 8000ffa:	087f      	lsrs	r7, r7, #1
 8000ffc:	e6cf      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8000ffe:	1acc      	subs	r4, r1, r3
 8001000:	42a1      	cmp	r1, r4
 8001002:	41bf      	sbcs	r7, r7
 8001004:	4643      	mov	r3, r8
 8001006:	427f      	negs	r7, r7
 8001008:	1a18      	subs	r0, r3, r0
 800100a:	4655      	mov	r5, sl
 800100c:	1bc7      	subs	r7, r0, r7
 800100e:	e5f7      	b.n	8000c00 <__aeabi_dadd+0xac>
 8001010:	08c9      	lsrs	r1, r1, #3
 8001012:	077b      	lsls	r3, r7, #29
 8001014:	4655      	mov	r5, sl
 8001016:	430b      	orrs	r3, r1
 8001018:	08f8      	lsrs	r0, r7, #3
 800101a:	e6c8      	b.n	8000dae <__aeabi_dadd+0x25a>
 800101c:	2c00      	cmp	r4, #0
 800101e:	d000      	beq.n	8001022 <__aeabi_dadd+0x4ce>
 8001020:	e081      	b.n	8001126 <__aeabi_dadd+0x5d2>
 8001022:	4643      	mov	r3, r8
 8001024:	430b      	orrs	r3, r1
 8001026:	d115      	bne.n	8001054 <__aeabi_dadd+0x500>
 8001028:	2080      	movs	r0, #128	; 0x80
 800102a:	2500      	movs	r5, #0
 800102c:	0300      	lsls	r0, r0, #12
 800102e:	e6e3      	b.n	8000df8 <__aeabi_dadd+0x2a4>
 8001030:	1a5c      	subs	r4, r3, r1
 8001032:	42a3      	cmp	r3, r4
 8001034:	419b      	sbcs	r3, r3
 8001036:	1bc7      	subs	r7, r0, r7
 8001038:	425b      	negs	r3, r3
 800103a:	2601      	movs	r6, #1
 800103c:	1aff      	subs	r7, r7, r3
 800103e:	e5da      	b.n	8000bf6 <__aeabi_dadd+0xa2>
 8001040:	0742      	lsls	r2, r0, #29
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	4313      	orrs	r3, r2
 8001046:	08c0      	lsrs	r0, r0, #3
 8001048:	e6d2      	b.n	8000df0 <__aeabi_dadd+0x29c>
 800104a:	0742      	lsls	r2, r0, #29
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	4313      	orrs	r3, r2
 8001050:	08c0      	lsrs	r0, r0, #3
 8001052:	e6ac      	b.n	8000dae <__aeabi_dadd+0x25a>
 8001054:	4643      	mov	r3, r8
 8001056:	4642      	mov	r2, r8
 8001058:	08c9      	lsrs	r1, r1, #3
 800105a:	075b      	lsls	r3, r3, #29
 800105c:	4655      	mov	r5, sl
 800105e:	430b      	orrs	r3, r1
 8001060:	08d0      	lsrs	r0, r2, #3
 8001062:	e6c5      	b.n	8000df0 <__aeabi_dadd+0x29c>
 8001064:	4643      	mov	r3, r8
 8001066:	4642      	mov	r2, r8
 8001068:	075b      	lsls	r3, r3, #29
 800106a:	08c9      	lsrs	r1, r1, #3
 800106c:	430b      	orrs	r3, r1
 800106e:	08d0      	lsrs	r0, r2, #3
 8001070:	e6be      	b.n	8000df0 <__aeabi_dadd+0x29c>
 8001072:	4303      	orrs	r3, r0
 8001074:	001c      	movs	r4, r3
 8001076:	1e63      	subs	r3, r4, #1
 8001078:	419c      	sbcs	r4, r3
 800107a:	e6fc      	b.n	8000e76 <__aeabi_dadd+0x322>
 800107c:	0002      	movs	r2, r0
 800107e:	3c20      	subs	r4, #32
 8001080:	40e2      	lsrs	r2, r4
 8001082:	0014      	movs	r4, r2
 8001084:	4662      	mov	r2, ip
 8001086:	2a20      	cmp	r2, #32
 8001088:	d003      	beq.n	8001092 <__aeabi_dadd+0x53e>
 800108a:	2540      	movs	r5, #64	; 0x40
 800108c:	1aad      	subs	r5, r5, r2
 800108e:	40a8      	lsls	r0, r5
 8001090:	4303      	orrs	r3, r0
 8001092:	1e58      	subs	r0, r3, #1
 8001094:	4183      	sbcs	r3, r0
 8001096:	4323      	orrs	r3, r4
 8001098:	e775      	b.n	8000f86 <__aeabi_dadd+0x432>
 800109a:	2a00      	cmp	r2, #0
 800109c:	d0e2      	beq.n	8001064 <__aeabi_dadd+0x510>
 800109e:	003a      	movs	r2, r7
 80010a0:	430a      	orrs	r2, r1
 80010a2:	d0cd      	beq.n	8001040 <__aeabi_dadd+0x4ec>
 80010a4:	0742      	lsls	r2, r0, #29
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	08c0      	lsrs	r0, r0, #3
 80010ae:	0312      	lsls	r2, r2, #12
 80010b0:	4210      	tst	r0, r2
 80010b2:	d006      	beq.n	80010c2 <__aeabi_dadd+0x56e>
 80010b4:	08fc      	lsrs	r4, r7, #3
 80010b6:	4214      	tst	r4, r2
 80010b8:	d103      	bne.n	80010c2 <__aeabi_dadd+0x56e>
 80010ba:	0020      	movs	r0, r4
 80010bc:	08cb      	lsrs	r3, r1, #3
 80010be:	077a      	lsls	r2, r7, #29
 80010c0:	4313      	orrs	r3, r2
 80010c2:	0f5a      	lsrs	r2, r3, #29
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	0752      	lsls	r2, r2, #29
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	e690      	b.n	8000df0 <__aeabi_dadd+0x29c>
 80010ce:	4643      	mov	r3, r8
 80010d0:	430b      	orrs	r3, r1
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dadd+0x582>
 80010d4:	e709      	b.n	8000eea <__aeabi_dadd+0x396>
 80010d6:	4643      	mov	r3, r8
 80010d8:	4642      	mov	r2, r8
 80010da:	08c9      	lsrs	r1, r1, #3
 80010dc:	075b      	lsls	r3, r3, #29
 80010de:	4655      	mov	r5, sl
 80010e0:	430b      	orrs	r3, r1
 80010e2:	08d0      	lsrs	r0, r2, #3
 80010e4:	e666      	b.n	8000db4 <__aeabi_dadd+0x260>
 80010e6:	1acc      	subs	r4, r1, r3
 80010e8:	42a1      	cmp	r1, r4
 80010ea:	4189      	sbcs	r1, r1
 80010ec:	1a3f      	subs	r7, r7, r0
 80010ee:	4249      	negs	r1, r1
 80010f0:	4655      	mov	r5, sl
 80010f2:	2601      	movs	r6, #1
 80010f4:	1a7f      	subs	r7, r7, r1
 80010f6:	e57e      	b.n	8000bf6 <__aeabi_dadd+0xa2>
 80010f8:	4642      	mov	r2, r8
 80010fa:	1a5c      	subs	r4, r3, r1
 80010fc:	1a87      	subs	r7, r0, r2
 80010fe:	42a3      	cmp	r3, r4
 8001100:	4192      	sbcs	r2, r2
 8001102:	4252      	negs	r2, r2
 8001104:	1abf      	subs	r7, r7, r2
 8001106:	023a      	lsls	r2, r7, #8
 8001108:	d53d      	bpl.n	8001186 <__aeabi_dadd+0x632>
 800110a:	1acc      	subs	r4, r1, r3
 800110c:	42a1      	cmp	r1, r4
 800110e:	4189      	sbcs	r1, r1
 8001110:	4643      	mov	r3, r8
 8001112:	4249      	negs	r1, r1
 8001114:	1a1f      	subs	r7, r3, r0
 8001116:	4655      	mov	r5, sl
 8001118:	1a7f      	subs	r7, r7, r1
 800111a:	e595      	b.n	8000c48 <__aeabi_dadd+0xf4>
 800111c:	077b      	lsls	r3, r7, #29
 800111e:	08c9      	lsrs	r1, r1, #3
 8001120:	430b      	orrs	r3, r1
 8001122:	08f8      	lsrs	r0, r7, #3
 8001124:	e643      	b.n	8000dae <__aeabi_dadd+0x25a>
 8001126:	4644      	mov	r4, r8
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	430c      	orrs	r4, r1
 800112c:	d130      	bne.n	8001190 <__aeabi_dadd+0x63c>
 800112e:	0742      	lsls	r2, r0, #29
 8001130:	4313      	orrs	r3, r2
 8001132:	08c0      	lsrs	r0, r0, #3
 8001134:	e65c      	b.n	8000df0 <__aeabi_dadd+0x29c>
 8001136:	077b      	lsls	r3, r7, #29
 8001138:	08c9      	lsrs	r1, r1, #3
 800113a:	430b      	orrs	r3, r1
 800113c:	08f8      	lsrs	r0, r7, #3
 800113e:	e639      	b.n	8000db4 <__aeabi_dadd+0x260>
 8001140:	185c      	adds	r4, r3, r1
 8001142:	429c      	cmp	r4, r3
 8001144:	419b      	sbcs	r3, r3
 8001146:	4440      	add	r0, r8
 8001148:	425b      	negs	r3, r3
 800114a:	18c7      	adds	r7, r0, r3
 800114c:	023b      	lsls	r3, r7, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x5fe>
 8001150:	e625      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <__aeabi_dadd+0x674>)
 8001154:	2601      	movs	r6, #1
 8001156:	401f      	ands	r7, r3
 8001158:	e621      	b.n	8000d9e <__aeabi_dadd+0x24a>
 800115a:	0004      	movs	r4, r0
 800115c:	3a20      	subs	r2, #32
 800115e:	40d4      	lsrs	r4, r2
 8001160:	4662      	mov	r2, ip
 8001162:	2a20      	cmp	r2, #32
 8001164:	d004      	beq.n	8001170 <__aeabi_dadd+0x61c>
 8001166:	2240      	movs	r2, #64	; 0x40
 8001168:	4666      	mov	r6, ip
 800116a:	1b92      	subs	r2, r2, r6
 800116c:	4090      	lsls	r0, r2
 800116e:	4303      	orrs	r3, r0
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	4193      	sbcs	r3, r2
 8001174:	431c      	orrs	r4, r3
 8001176:	e67e      	b.n	8000e76 <__aeabi_dadd+0x322>
 8001178:	185c      	adds	r4, r3, r1
 800117a:	428c      	cmp	r4, r1
 800117c:	4189      	sbcs	r1, r1
 800117e:	4440      	add	r0, r8
 8001180:	4249      	negs	r1, r1
 8001182:	1847      	adds	r7, r0, r1
 8001184:	e6dd      	b.n	8000f42 <__aeabi_dadd+0x3ee>
 8001186:	0023      	movs	r3, r4
 8001188:	433b      	orrs	r3, r7
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x63a>
 800118c:	e6ad      	b.n	8000eea <__aeabi_dadd+0x396>
 800118e:	e606      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8001190:	0744      	lsls	r4, r0, #29
 8001192:	4323      	orrs	r3, r4
 8001194:	2480      	movs	r4, #128	; 0x80
 8001196:	08c0      	lsrs	r0, r0, #3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	4220      	tst	r0, r4
 800119c:	d008      	beq.n	80011b0 <__aeabi_dadd+0x65c>
 800119e:	4642      	mov	r2, r8
 80011a0:	08d6      	lsrs	r6, r2, #3
 80011a2:	4226      	tst	r6, r4
 80011a4:	d104      	bne.n	80011b0 <__aeabi_dadd+0x65c>
 80011a6:	4655      	mov	r5, sl
 80011a8:	0030      	movs	r0, r6
 80011aa:	08cb      	lsrs	r3, r1, #3
 80011ac:	0751      	lsls	r1, r2, #29
 80011ae:	430b      	orrs	r3, r1
 80011b0:	0f5a      	lsrs	r2, r3, #29
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	0752      	lsls	r2, r2, #29
 80011b8:	4313      	orrs	r3, r2
 80011ba:	e619      	b.n	8000df0 <__aeabi_dadd+0x29c>
 80011bc:	2300      	movs	r3, #0
 80011be:	4a01      	ldr	r2, [pc, #4]	; (80011c4 <__aeabi_dadd+0x670>)
 80011c0:	001f      	movs	r7, r3
 80011c2:	e55e      	b.n	8000c82 <__aeabi_dadd+0x12e>
 80011c4:	000007ff 	.word	0x000007ff
 80011c8:	ff7fffff 	.word	0xff7fffff

080011cc <__aeabi_ddiv>:
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	4657      	mov	r7, sl
 80011d0:	464e      	mov	r6, r9
 80011d2:	4645      	mov	r5, r8
 80011d4:	46de      	mov	lr, fp
 80011d6:	b5e0      	push	{r5, r6, r7, lr}
 80011d8:	4681      	mov	r9, r0
 80011da:	0005      	movs	r5, r0
 80011dc:	030c      	lsls	r4, r1, #12
 80011de:	0048      	lsls	r0, r1, #1
 80011e0:	4692      	mov	sl, r2
 80011e2:	001f      	movs	r7, r3
 80011e4:	b085      	sub	sp, #20
 80011e6:	0b24      	lsrs	r4, r4, #12
 80011e8:	0d40      	lsrs	r0, r0, #21
 80011ea:	0fce      	lsrs	r6, r1, #31
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_ddiv+0x26>
 80011f0:	e156      	b.n	80014a0 <__aeabi_ddiv+0x2d4>
 80011f2:	4bd4      	ldr	r3, [pc, #848]	; (8001544 <__aeabi_ddiv+0x378>)
 80011f4:	4298      	cmp	r0, r3
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x2e>
 80011f8:	e172      	b.n	80014e0 <__aeabi_ddiv+0x314>
 80011fa:	0f6b      	lsrs	r3, r5, #29
 80011fc:	00e4      	lsls	r4, r4, #3
 80011fe:	431c      	orrs	r4, r3
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	4323      	orrs	r3, r4
 8001206:	4698      	mov	r8, r3
 8001208:	4bcf      	ldr	r3, [pc, #828]	; (8001548 <__aeabi_ddiv+0x37c>)
 800120a:	00ed      	lsls	r5, r5, #3
 800120c:	469b      	mov	fp, r3
 800120e:	2300      	movs	r3, #0
 8001210:	4699      	mov	r9, r3
 8001212:	4483      	add	fp, r0
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	033c      	lsls	r4, r7, #12
 8001218:	007b      	lsls	r3, r7, #1
 800121a:	4650      	mov	r0, sl
 800121c:	0b24      	lsrs	r4, r4, #12
 800121e:	0d5b      	lsrs	r3, r3, #21
 8001220:	0fff      	lsrs	r7, r7, #31
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0x5c>
 8001226:	e11f      	b.n	8001468 <__aeabi_ddiv+0x29c>
 8001228:	4ac6      	ldr	r2, [pc, #792]	; (8001544 <__aeabi_ddiv+0x378>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d100      	bne.n	8001230 <__aeabi_ddiv+0x64>
 800122e:	e162      	b.n	80014f6 <__aeabi_ddiv+0x32a>
 8001230:	49c5      	ldr	r1, [pc, #788]	; (8001548 <__aeabi_ddiv+0x37c>)
 8001232:	0f42      	lsrs	r2, r0, #29
 8001234:	468c      	mov	ip, r1
 8001236:	00e4      	lsls	r4, r4, #3
 8001238:	4659      	mov	r1, fp
 800123a:	4314      	orrs	r4, r2
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	4463      	add	r3, ip
 8001240:	0412      	lsls	r2, r2, #16
 8001242:	1acb      	subs	r3, r1, r3
 8001244:	4314      	orrs	r4, r2
 8001246:	469b      	mov	fp, r3
 8001248:	00c2      	lsls	r2, r0, #3
 800124a:	2000      	movs	r0, #0
 800124c:	0033      	movs	r3, r6
 800124e:	407b      	eors	r3, r7
 8001250:	469a      	mov	sl, r3
 8001252:	464b      	mov	r3, r9
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d827      	bhi.n	80012a8 <__aeabi_ddiv+0xdc>
 8001258:	49bc      	ldr	r1, [pc, #752]	; (800154c <__aeabi_ddiv+0x380>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	58cb      	ldr	r3, [r1, r3]
 800125e:	469f      	mov	pc, r3
 8001260:	46b2      	mov	sl, r6
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d016      	beq.n	8001296 <__aeabi_ddiv+0xca>
 8001268:	2b03      	cmp	r3, #3
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0xa2>
 800126c:	e28e      	b.n	800178c <__aeabi_ddiv+0x5c0>
 800126e:	2b01      	cmp	r3, #1
 8001270:	d000      	beq.n	8001274 <__aeabi_ddiv+0xa8>
 8001272:	e0d9      	b.n	8001428 <__aeabi_ddiv+0x25c>
 8001274:	2300      	movs	r3, #0
 8001276:	2400      	movs	r4, #0
 8001278:	2500      	movs	r5, #0
 800127a:	4652      	mov	r2, sl
 800127c:	051b      	lsls	r3, r3, #20
 800127e:	4323      	orrs	r3, r4
 8001280:	07d2      	lsls	r2, r2, #31
 8001282:	4313      	orrs	r3, r2
 8001284:	0028      	movs	r0, r5
 8001286:	0019      	movs	r1, r3
 8001288:	b005      	add	sp, #20
 800128a:	bcf0      	pop	{r4, r5, r6, r7}
 800128c:	46bb      	mov	fp, r7
 800128e:	46b2      	mov	sl, r6
 8001290:	46a9      	mov	r9, r5
 8001292:	46a0      	mov	r8, r4
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	2400      	movs	r4, #0
 8001298:	2500      	movs	r5, #0
 800129a:	4baa      	ldr	r3, [pc, #680]	; (8001544 <__aeabi_ddiv+0x378>)
 800129c:	e7ed      	b.n	800127a <__aeabi_ddiv+0xae>
 800129e:	46ba      	mov	sl, r7
 80012a0:	46a0      	mov	r8, r4
 80012a2:	0015      	movs	r5, r2
 80012a4:	9000      	str	r0, [sp, #0]
 80012a6:	e7dc      	b.n	8001262 <__aeabi_ddiv+0x96>
 80012a8:	4544      	cmp	r4, r8
 80012aa:	d200      	bcs.n	80012ae <__aeabi_ddiv+0xe2>
 80012ac:	e1c7      	b.n	800163e <__aeabi_ddiv+0x472>
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0xe6>
 80012b0:	e1c2      	b.n	8001638 <__aeabi_ddiv+0x46c>
 80012b2:	2301      	movs	r3, #1
 80012b4:	425b      	negs	r3, r3
 80012b6:	469c      	mov	ip, r3
 80012b8:	002e      	movs	r6, r5
 80012ba:	4640      	mov	r0, r8
 80012bc:	2500      	movs	r5, #0
 80012be:	44e3      	add	fp, ip
 80012c0:	0223      	lsls	r3, r4, #8
 80012c2:	0e14      	lsrs	r4, r2, #24
 80012c4:	431c      	orrs	r4, r3
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	4699      	mov	r9, r3
 80012ca:	0423      	lsls	r3, r4, #16
 80012cc:	0c1f      	lsrs	r7, r3, #16
 80012ce:	0212      	lsls	r2, r2, #8
 80012d0:	4649      	mov	r1, r9
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	9701      	str	r7, [sp, #4]
 80012d6:	f7fe ffa5 	bl	8000224 <__aeabi_uidivmod>
 80012da:	0002      	movs	r2, r0
 80012dc:	437a      	muls	r2, r7
 80012de:	040b      	lsls	r3, r1, #16
 80012e0:	0c31      	lsrs	r1, r6, #16
 80012e2:	4680      	mov	r8, r0
 80012e4:	4319      	orrs	r1, r3
 80012e6:	428a      	cmp	r2, r1
 80012e8:	d907      	bls.n	80012fa <__aeabi_ddiv+0x12e>
 80012ea:	2301      	movs	r3, #1
 80012ec:	425b      	negs	r3, r3
 80012ee:	469c      	mov	ip, r3
 80012f0:	1909      	adds	r1, r1, r4
 80012f2:	44e0      	add	r8, ip
 80012f4:	428c      	cmp	r4, r1
 80012f6:	d800      	bhi.n	80012fa <__aeabi_ddiv+0x12e>
 80012f8:	e207      	b.n	800170a <__aeabi_ddiv+0x53e>
 80012fa:	1a88      	subs	r0, r1, r2
 80012fc:	4649      	mov	r1, r9
 80012fe:	f7fe ff91 	bl	8000224 <__aeabi_uidivmod>
 8001302:	0409      	lsls	r1, r1, #16
 8001304:	468c      	mov	ip, r1
 8001306:	0431      	lsls	r1, r6, #16
 8001308:	4666      	mov	r6, ip
 800130a:	9a01      	ldr	r2, [sp, #4]
 800130c:	0c09      	lsrs	r1, r1, #16
 800130e:	4342      	muls	r2, r0
 8001310:	0003      	movs	r3, r0
 8001312:	4331      	orrs	r1, r6
 8001314:	428a      	cmp	r2, r1
 8001316:	d904      	bls.n	8001322 <__aeabi_ddiv+0x156>
 8001318:	1909      	adds	r1, r1, r4
 800131a:	3b01      	subs	r3, #1
 800131c:	428c      	cmp	r4, r1
 800131e:	d800      	bhi.n	8001322 <__aeabi_ddiv+0x156>
 8001320:	e1ed      	b.n	80016fe <__aeabi_ddiv+0x532>
 8001322:	1a88      	subs	r0, r1, r2
 8001324:	4642      	mov	r2, r8
 8001326:	0412      	lsls	r2, r2, #16
 8001328:	431a      	orrs	r2, r3
 800132a:	4690      	mov	r8, r2
 800132c:	4641      	mov	r1, r8
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	040e      	lsls	r6, r1, #16
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	001f      	movs	r7, r3
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	9b00      	ldr	r3, [sp, #0]
 800133a:	0c36      	lsrs	r6, r6, #16
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	0c19      	lsrs	r1, r3, #16
 8001340:	000b      	movs	r3, r1
 8001342:	4373      	muls	r3, r6
 8001344:	0c12      	lsrs	r2, r2, #16
 8001346:	437e      	muls	r6, r7
 8001348:	9103      	str	r1, [sp, #12]
 800134a:	4351      	muls	r1, r2
 800134c:	437a      	muls	r2, r7
 800134e:	0c1f      	lsrs	r7, r3, #16
 8001350:	46bc      	mov	ip, r7
 8001352:	1876      	adds	r6, r6, r1
 8001354:	4466      	add	r6, ip
 8001356:	42b1      	cmp	r1, r6
 8001358:	d903      	bls.n	8001362 <__aeabi_ddiv+0x196>
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0249      	lsls	r1, r1, #9
 800135e:	468c      	mov	ip, r1
 8001360:	4462      	add	r2, ip
 8001362:	0c31      	lsrs	r1, r6, #16
 8001364:	188a      	adds	r2, r1, r2
 8001366:	0431      	lsls	r1, r6, #16
 8001368:	041e      	lsls	r6, r3, #16
 800136a:	0c36      	lsrs	r6, r6, #16
 800136c:	198e      	adds	r6, r1, r6
 800136e:	4290      	cmp	r0, r2
 8001370:	d302      	bcc.n	8001378 <__aeabi_ddiv+0x1ac>
 8001372:	d112      	bne.n	800139a <__aeabi_ddiv+0x1ce>
 8001374:	42b5      	cmp	r5, r6
 8001376:	d210      	bcs.n	800139a <__aeabi_ddiv+0x1ce>
 8001378:	4643      	mov	r3, r8
 800137a:	1e59      	subs	r1, r3, #1
 800137c:	9b00      	ldr	r3, [sp, #0]
 800137e:	469c      	mov	ip, r3
 8001380:	4465      	add	r5, ip
 8001382:	001f      	movs	r7, r3
 8001384:	429d      	cmp	r5, r3
 8001386:	419b      	sbcs	r3, r3
 8001388:	425b      	negs	r3, r3
 800138a:	191b      	adds	r3, r3, r4
 800138c:	18c0      	adds	r0, r0, r3
 800138e:	4284      	cmp	r4, r0
 8001390:	d200      	bcs.n	8001394 <__aeabi_ddiv+0x1c8>
 8001392:	e1a0      	b.n	80016d6 <__aeabi_ddiv+0x50a>
 8001394:	d100      	bne.n	8001398 <__aeabi_ddiv+0x1cc>
 8001396:	e19b      	b.n	80016d0 <__aeabi_ddiv+0x504>
 8001398:	4688      	mov	r8, r1
 800139a:	1bae      	subs	r6, r5, r6
 800139c:	42b5      	cmp	r5, r6
 800139e:	41ad      	sbcs	r5, r5
 80013a0:	1a80      	subs	r0, r0, r2
 80013a2:	426d      	negs	r5, r5
 80013a4:	1b40      	subs	r0, r0, r5
 80013a6:	4284      	cmp	r4, r0
 80013a8:	d100      	bne.n	80013ac <__aeabi_ddiv+0x1e0>
 80013aa:	e1d5      	b.n	8001758 <__aeabi_ddiv+0x58c>
 80013ac:	4649      	mov	r1, r9
 80013ae:	f7fe ff39 	bl	8000224 <__aeabi_uidivmod>
 80013b2:	9a01      	ldr	r2, [sp, #4]
 80013b4:	040b      	lsls	r3, r1, #16
 80013b6:	4342      	muls	r2, r0
 80013b8:	0c31      	lsrs	r1, r6, #16
 80013ba:	0005      	movs	r5, r0
 80013bc:	4319      	orrs	r1, r3
 80013be:	428a      	cmp	r2, r1
 80013c0:	d900      	bls.n	80013c4 <__aeabi_ddiv+0x1f8>
 80013c2:	e16c      	b.n	800169e <__aeabi_ddiv+0x4d2>
 80013c4:	1a88      	subs	r0, r1, r2
 80013c6:	4649      	mov	r1, r9
 80013c8:	f7fe ff2c 	bl	8000224 <__aeabi_uidivmod>
 80013cc:	9a01      	ldr	r2, [sp, #4]
 80013ce:	0436      	lsls	r6, r6, #16
 80013d0:	4342      	muls	r2, r0
 80013d2:	0409      	lsls	r1, r1, #16
 80013d4:	0c36      	lsrs	r6, r6, #16
 80013d6:	0003      	movs	r3, r0
 80013d8:	430e      	orrs	r6, r1
 80013da:	42b2      	cmp	r2, r6
 80013dc:	d900      	bls.n	80013e0 <__aeabi_ddiv+0x214>
 80013de:	e153      	b.n	8001688 <__aeabi_ddiv+0x4bc>
 80013e0:	9803      	ldr	r0, [sp, #12]
 80013e2:	1ab6      	subs	r6, r6, r2
 80013e4:	0002      	movs	r2, r0
 80013e6:	042d      	lsls	r5, r5, #16
 80013e8:	431d      	orrs	r5, r3
 80013ea:	9f02      	ldr	r7, [sp, #8]
 80013ec:	042b      	lsls	r3, r5, #16
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	435a      	muls	r2, r3
 80013f2:	437b      	muls	r3, r7
 80013f4:	469c      	mov	ip, r3
 80013f6:	0c29      	lsrs	r1, r5, #16
 80013f8:	4348      	muls	r0, r1
 80013fa:	0c13      	lsrs	r3, r2, #16
 80013fc:	4484      	add	ip, r0
 80013fe:	4463      	add	r3, ip
 8001400:	4379      	muls	r1, r7
 8001402:	4298      	cmp	r0, r3
 8001404:	d903      	bls.n	800140e <__aeabi_ddiv+0x242>
 8001406:	2080      	movs	r0, #128	; 0x80
 8001408:	0240      	lsls	r0, r0, #9
 800140a:	4684      	mov	ip, r0
 800140c:	4461      	add	r1, ip
 800140e:	0c18      	lsrs	r0, r3, #16
 8001410:	0412      	lsls	r2, r2, #16
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	0c12      	lsrs	r2, r2, #16
 8001416:	1841      	adds	r1, r0, r1
 8001418:	189b      	adds	r3, r3, r2
 800141a:	428e      	cmp	r6, r1
 800141c:	d200      	bcs.n	8001420 <__aeabi_ddiv+0x254>
 800141e:	e0ff      	b.n	8001620 <__aeabi_ddiv+0x454>
 8001420:	d100      	bne.n	8001424 <__aeabi_ddiv+0x258>
 8001422:	e0fa      	b.n	800161a <__aeabi_ddiv+0x44e>
 8001424:	2301      	movs	r3, #1
 8001426:	431d      	orrs	r5, r3
 8001428:	4a49      	ldr	r2, [pc, #292]	; (8001550 <__aeabi_ddiv+0x384>)
 800142a:	445a      	add	r2, fp
 800142c:	2a00      	cmp	r2, #0
 800142e:	dc00      	bgt.n	8001432 <__aeabi_ddiv+0x266>
 8001430:	e0aa      	b.n	8001588 <__aeabi_ddiv+0x3bc>
 8001432:	076b      	lsls	r3, r5, #29
 8001434:	d000      	beq.n	8001438 <__aeabi_ddiv+0x26c>
 8001436:	e13d      	b.n	80016b4 <__aeabi_ddiv+0x4e8>
 8001438:	08ed      	lsrs	r5, r5, #3
 800143a:	4643      	mov	r3, r8
 800143c:	01db      	lsls	r3, r3, #7
 800143e:	d506      	bpl.n	800144e <__aeabi_ddiv+0x282>
 8001440:	4642      	mov	r2, r8
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <__aeabi_ddiv+0x388>)
 8001444:	401a      	ands	r2, r3
 8001446:	4690      	mov	r8, r2
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	00d2      	lsls	r2, r2, #3
 800144c:	445a      	add	r2, fp
 800144e:	4b42      	ldr	r3, [pc, #264]	; (8001558 <__aeabi_ddiv+0x38c>)
 8001450:	429a      	cmp	r2, r3
 8001452:	dd00      	ble.n	8001456 <__aeabi_ddiv+0x28a>
 8001454:	e71f      	b.n	8001296 <__aeabi_ddiv+0xca>
 8001456:	4643      	mov	r3, r8
 8001458:	075b      	lsls	r3, r3, #29
 800145a:	431d      	orrs	r5, r3
 800145c:	4643      	mov	r3, r8
 800145e:	0552      	lsls	r2, r2, #21
 8001460:	025c      	lsls	r4, r3, #9
 8001462:	0b24      	lsrs	r4, r4, #12
 8001464:	0d53      	lsrs	r3, r2, #21
 8001466:	e708      	b.n	800127a <__aeabi_ddiv+0xae>
 8001468:	4652      	mov	r2, sl
 800146a:	4322      	orrs	r2, r4
 800146c:	d100      	bne.n	8001470 <__aeabi_ddiv+0x2a4>
 800146e:	e07b      	b.n	8001568 <__aeabi_ddiv+0x39c>
 8001470:	2c00      	cmp	r4, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_ddiv+0x2aa>
 8001474:	e0fa      	b.n	800166c <__aeabi_ddiv+0x4a0>
 8001476:	0020      	movs	r0, r4
 8001478:	f001 f97c 	bl	8002774 <__clzsi2>
 800147c:	0002      	movs	r2, r0
 800147e:	3a0b      	subs	r2, #11
 8001480:	231d      	movs	r3, #29
 8001482:	0001      	movs	r1, r0
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	4652      	mov	r2, sl
 8001488:	3908      	subs	r1, #8
 800148a:	40da      	lsrs	r2, r3
 800148c:	408c      	lsls	r4, r1
 800148e:	4314      	orrs	r4, r2
 8001490:	4652      	mov	r2, sl
 8001492:	408a      	lsls	r2, r1
 8001494:	4b31      	ldr	r3, [pc, #196]	; (800155c <__aeabi_ddiv+0x390>)
 8001496:	4458      	add	r0, fp
 8001498:	469b      	mov	fp, r3
 800149a:	4483      	add	fp, r0
 800149c:	2000      	movs	r0, #0
 800149e:	e6d5      	b.n	800124c <__aeabi_ddiv+0x80>
 80014a0:	464b      	mov	r3, r9
 80014a2:	4323      	orrs	r3, r4
 80014a4:	4698      	mov	r8, r3
 80014a6:	d044      	beq.n	8001532 <__aeabi_ddiv+0x366>
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x2e2>
 80014ac:	e0ce      	b.n	800164c <__aeabi_ddiv+0x480>
 80014ae:	0020      	movs	r0, r4
 80014b0:	f001 f960 	bl	8002774 <__clzsi2>
 80014b4:	0001      	movs	r1, r0
 80014b6:	0002      	movs	r2, r0
 80014b8:	390b      	subs	r1, #11
 80014ba:	231d      	movs	r3, #29
 80014bc:	1a5b      	subs	r3, r3, r1
 80014be:	4649      	mov	r1, r9
 80014c0:	0010      	movs	r0, r2
 80014c2:	40d9      	lsrs	r1, r3
 80014c4:	3808      	subs	r0, #8
 80014c6:	4084      	lsls	r4, r0
 80014c8:	000b      	movs	r3, r1
 80014ca:	464d      	mov	r5, r9
 80014cc:	4323      	orrs	r3, r4
 80014ce:	4698      	mov	r8, r3
 80014d0:	4085      	lsls	r5, r0
 80014d2:	4823      	ldr	r0, [pc, #140]	; (8001560 <__aeabi_ddiv+0x394>)
 80014d4:	1a83      	subs	r3, r0, r2
 80014d6:	469b      	mov	fp, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	4699      	mov	r9, r3
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	e69a      	b.n	8001216 <__aeabi_ddiv+0x4a>
 80014e0:	464b      	mov	r3, r9
 80014e2:	4323      	orrs	r3, r4
 80014e4:	4698      	mov	r8, r3
 80014e6:	d11d      	bne.n	8001524 <__aeabi_ddiv+0x358>
 80014e8:	2308      	movs	r3, #8
 80014ea:	4699      	mov	r9, r3
 80014ec:	3b06      	subs	r3, #6
 80014ee:	2500      	movs	r5, #0
 80014f0:	4683      	mov	fp, r0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	e68f      	b.n	8001216 <__aeabi_ddiv+0x4a>
 80014f6:	4652      	mov	r2, sl
 80014f8:	4322      	orrs	r2, r4
 80014fa:	d109      	bne.n	8001510 <__aeabi_ddiv+0x344>
 80014fc:	2302      	movs	r3, #2
 80014fe:	4649      	mov	r1, r9
 8001500:	4319      	orrs	r1, r3
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <__aeabi_ddiv+0x398>)
 8001504:	4689      	mov	r9, r1
 8001506:	469c      	mov	ip, r3
 8001508:	2400      	movs	r4, #0
 800150a:	2002      	movs	r0, #2
 800150c:	44e3      	add	fp, ip
 800150e:	e69d      	b.n	800124c <__aeabi_ddiv+0x80>
 8001510:	2303      	movs	r3, #3
 8001512:	464a      	mov	r2, r9
 8001514:	431a      	orrs	r2, r3
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <__aeabi_ddiv+0x398>)
 8001518:	4691      	mov	r9, r2
 800151a:	469c      	mov	ip, r3
 800151c:	4652      	mov	r2, sl
 800151e:	2003      	movs	r0, #3
 8001520:	44e3      	add	fp, ip
 8001522:	e693      	b.n	800124c <__aeabi_ddiv+0x80>
 8001524:	230c      	movs	r3, #12
 8001526:	4699      	mov	r9, r3
 8001528:	3b09      	subs	r3, #9
 800152a:	46a0      	mov	r8, r4
 800152c:	4683      	mov	fp, r0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	e671      	b.n	8001216 <__aeabi_ddiv+0x4a>
 8001532:	2304      	movs	r3, #4
 8001534:	4699      	mov	r9, r3
 8001536:	2300      	movs	r3, #0
 8001538:	469b      	mov	fp, r3
 800153a:	3301      	adds	r3, #1
 800153c:	2500      	movs	r5, #0
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	e669      	b.n	8001216 <__aeabi_ddiv+0x4a>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff
 8001548:	fffffc01 	.word	0xfffffc01
 800154c:	0801eed4 	.word	0x0801eed4
 8001550:	000003ff 	.word	0x000003ff
 8001554:	feffffff 	.word	0xfeffffff
 8001558:	000007fe 	.word	0x000007fe
 800155c:	000003f3 	.word	0x000003f3
 8001560:	fffffc0d 	.word	0xfffffc0d
 8001564:	fffff801 	.word	0xfffff801
 8001568:	4649      	mov	r1, r9
 800156a:	2301      	movs	r3, #1
 800156c:	4319      	orrs	r1, r3
 800156e:	4689      	mov	r9, r1
 8001570:	2400      	movs	r4, #0
 8001572:	2001      	movs	r0, #1
 8001574:	e66a      	b.n	800124c <__aeabi_ddiv+0x80>
 8001576:	2300      	movs	r3, #0
 8001578:	2480      	movs	r4, #128	; 0x80
 800157a:	469a      	mov	sl, r3
 800157c:	2500      	movs	r5, #0
 800157e:	4b8a      	ldr	r3, [pc, #552]	; (80017a8 <__aeabi_ddiv+0x5dc>)
 8001580:	0324      	lsls	r4, r4, #12
 8001582:	e67a      	b.n	800127a <__aeabi_ddiv+0xae>
 8001584:	2501      	movs	r5, #1
 8001586:	426d      	negs	r5, r5
 8001588:	2301      	movs	r3, #1
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	2b38      	cmp	r3, #56	; 0x38
 800158e:	dd00      	ble.n	8001592 <__aeabi_ddiv+0x3c6>
 8001590:	e670      	b.n	8001274 <__aeabi_ddiv+0xa8>
 8001592:	2b1f      	cmp	r3, #31
 8001594:	dc00      	bgt.n	8001598 <__aeabi_ddiv+0x3cc>
 8001596:	e0bf      	b.n	8001718 <__aeabi_ddiv+0x54c>
 8001598:	211f      	movs	r1, #31
 800159a:	4249      	negs	r1, r1
 800159c:	1a8a      	subs	r2, r1, r2
 800159e:	4641      	mov	r1, r8
 80015a0:	40d1      	lsrs	r1, r2
 80015a2:	000a      	movs	r2, r1
 80015a4:	2b20      	cmp	r3, #32
 80015a6:	d004      	beq.n	80015b2 <__aeabi_ddiv+0x3e6>
 80015a8:	4641      	mov	r1, r8
 80015aa:	4b80      	ldr	r3, [pc, #512]	; (80017ac <__aeabi_ddiv+0x5e0>)
 80015ac:	445b      	add	r3, fp
 80015ae:	4099      	lsls	r1, r3
 80015b0:	430d      	orrs	r5, r1
 80015b2:	1e6b      	subs	r3, r5, #1
 80015b4:	419d      	sbcs	r5, r3
 80015b6:	2307      	movs	r3, #7
 80015b8:	432a      	orrs	r2, r5
 80015ba:	001d      	movs	r5, r3
 80015bc:	2400      	movs	r4, #0
 80015be:	4015      	ands	r5, r2
 80015c0:	4213      	tst	r3, r2
 80015c2:	d100      	bne.n	80015c6 <__aeabi_ddiv+0x3fa>
 80015c4:	e0d4      	b.n	8001770 <__aeabi_ddiv+0x5a4>
 80015c6:	210f      	movs	r1, #15
 80015c8:	2300      	movs	r3, #0
 80015ca:	4011      	ands	r1, r2
 80015cc:	2904      	cmp	r1, #4
 80015ce:	d100      	bne.n	80015d2 <__aeabi_ddiv+0x406>
 80015d0:	e0cb      	b.n	800176a <__aeabi_ddiv+0x59e>
 80015d2:	1d11      	adds	r1, r2, #4
 80015d4:	4291      	cmp	r1, r2
 80015d6:	4192      	sbcs	r2, r2
 80015d8:	4252      	negs	r2, r2
 80015da:	189b      	adds	r3, r3, r2
 80015dc:	000a      	movs	r2, r1
 80015de:	0219      	lsls	r1, r3, #8
 80015e0:	d400      	bmi.n	80015e4 <__aeabi_ddiv+0x418>
 80015e2:	e0c2      	b.n	800176a <__aeabi_ddiv+0x59e>
 80015e4:	2301      	movs	r3, #1
 80015e6:	2400      	movs	r4, #0
 80015e8:	2500      	movs	r5, #0
 80015ea:	e646      	b.n	800127a <__aeabi_ddiv+0xae>
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	4641      	mov	r1, r8
 80015f0:	031b      	lsls	r3, r3, #12
 80015f2:	4219      	tst	r1, r3
 80015f4:	d008      	beq.n	8001608 <__aeabi_ddiv+0x43c>
 80015f6:	421c      	tst	r4, r3
 80015f8:	d106      	bne.n	8001608 <__aeabi_ddiv+0x43c>
 80015fa:	431c      	orrs	r4, r3
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	46ba      	mov	sl, r7
 8001600:	0015      	movs	r5, r2
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <__aeabi_ddiv+0x5dc>)
 8001604:	0b24      	lsrs	r4, r4, #12
 8001606:	e638      	b.n	800127a <__aeabi_ddiv+0xae>
 8001608:	2480      	movs	r4, #128	; 0x80
 800160a:	4643      	mov	r3, r8
 800160c:	0324      	lsls	r4, r4, #12
 800160e:	431c      	orrs	r4, r3
 8001610:	0324      	lsls	r4, r4, #12
 8001612:	46b2      	mov	sl, r6
 8001614:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <__aeabi_ddiv+0x5dc>)
 8001616:	0b24      	lsrs	r4, r4, #12
 8001618:	e62f      	b.n	800127a <__aeabi_ddiv+0xae>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_ddiv+0x454>
 800161e:	e703      	b.n	8001428 <__aeabi_ddiv+0x25c>
 8001620:	19a6      	adds	r6, r4, r6
 8001622:	1e68      	subs	r0, r5, #1
 8001624:	42a6      	cmp	r6, r4
 8001626:	d200      	bcs.n	800162a <__aeabi_ddiv+0x45e>
 8001628:	e08d      	b.n	8001746 <__aeabi_ddiv+0x57a>
 800162a:	428e      	cmp	r6, r1
 800162c:	d200      	bcs.n	8001630 <__aeabi_ddiv+0x464>
 800162e:	e0a3      	b.n	8001778 <__aeabi_ddiv+0x5ac>
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x468>
 8001632:	e0b3      	b.n	800179c <__aeabi_ddiv+0x5d0>
 8001634:	0005      	movs	r5, r0
 8001636:	e6f5      	b.n	8001424 <__aeabi_ddiv+0x258>
 8001638:	42aa      	cmp	r2, r5
 800163a:	d900      	bls.n	800163e <__aeabi_ddiv+0x472>
 800163c:	e639      	b.n	80012b2 <__aeabi_ddiv+0xe6>
 800163e:	4643      	mov	r3, r8
 8001640:	07de      	lsls	r6, r3, #31
 8001642:	0858      	lsrs	r0, r3, #1
 8001644:	086b      	lsrs	r3, r5, #1
 8001646:	431e      	orrs	r6, r3
 8001648:	07ed      	lsls	r5, r5, #31
 800164a:	e639      	b.n	80012c0 <__aeabi_ddiv+0xf4>
 800164c:	4648      	mov	r0, r9
 800164e:	f001 f891 	bl	8002774 <__clzsi2>
 8001652:	0001      	movs	r1, r0
 8001654:	0002      	movs	r2, r0
 8001656:	3115      	adds	r1, #21
 8001658:	3220      	adds	r2, #32
 800165a:	291c      	cmp	r1, #28
 800165c:	dc00      	bgt.n	8001660 <__aeabi_ddiv+0x494>
 800165e:	e72c      	b.n	80014ba <__aeabi_ddiv+0x2ee>
 8001660:	464b      	mov	r3, r9
 8001662:	3808      	subs	r0, #8
 8001664:	4083      	lsls	r3, r0
 8001666:	2500      	movs	r5, #0
 8001668:	4698      	mov	r8, r3
 800166a:	e732      	b.n	80014d2 <__aeabi_ddiv+0x306>
 800166c:	f001 f882 	bl	8002774 <__clzsi2>
 8001670:	0003      	movs	r3, r0
 8001672:	001a      	movs	r2, r3
 8001674:	3215      	adds	r2, #21
 8001676:	3020      	adds	r0, #32
 8001678:	2a1c      	cmp	r2, #28
 800167a:	dc00      	bgt.n	800167e <__aeabi_ddiv+0x4b2>
 800167c:	e700      	b.n	8001480 <__aeabi_ddiv+0x2b4>
 800167e:	4654      	mov	r4, sl
 8001680:	3b08      	subs	r3, #8
 8001682:	2200      	movs	r2, #0
 8001684:	409c      	lsls	r4, r3
 8001686:	e705      	b.n	8001494 <__aeabi_ddiv+0x2c8>
 8001688:	1936      	adds	r6, r6, r4
 800168a:	3b01      	subs	r3, #1
 800168c:	42b4      	cmp	r4, r6
 800168e:	d900      	bls.n	8001692 <__aeabi_ddiv+0x4c6>
 8001690:	e6a6      	b.n	80013e0 <__aeabi_ddiv+0x214>
 8001692:	42b2      	cmp	r2, r6
 8001694:	d800      	bhi.n	8001698 <__aeabi_ddiv+0x4cc>
 8001696:	e6a3      	b.n	80013e0 <__aeabi_ddiv+0x214>
 8001698:	1e83      	subs	r3, r0, #2
 800169a:	1936      	adds	r6, r6, r4
 800169c:	e6a0      	b.n	80013e0 <__aeabi_ddiv+0x214>
 800169e:	1909      	adds	r1, r1, r4
 80016a0:	3d01      	subs	r5, #1
 80016a2:	428c      	cmp	r4, r1
 80016a4:	d900      	bls.n	80016a8 <__aeabi_ddiv+0x4dc>
 80016a6:	e68d      	b.n	80013c4 <__aeabi_ddiv+0x1f8>
 80016a8:	428a      	cmp	r2, r1
 80016aa:	d800      	bhi.n	80016ae <__aeabi_ddiv+0x4e2>
 80016ac:	e68a      	b.n	80013c4 <__aeabi_ddiv+0x1f8>
 80016ae:	1e85      	subs	r5, r0, #2
 80016b0:	1909      	adds	r1, r1, r4
 80016b2:	e687      	b.n	80013c4 <__aeabi_ddiv+0x1f8>
 80016b4:	230f      	movs	r3, #15
 80016b6:	402b      	ands	r3, r5
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x4f2>
 80016bc:	e6bc      	b.n	8001438 <__aeabi_ddiv+0x26c>
 80016be:	2305      	movs	r3, #5
 80016c0:	425b      	negs	r3, r3
 80016c2:	42ab      	cmp	r3, r5
 80016c4:	419b      	sbcs	r3, r3
 80016c6:	3504      	adds	r5, #4
 80016c8:	425b      	negs	r3, r3
 80016ca:	08ed      	lsrs	r5, r5, #3
 80016cc:	4498      	add	r8, r3
 80016ce:	e6b4      	b.n	800143a <__aeabi_ddiv+0x26e>
 80016d0:	42af      	cmp	r7, r5
 80016d2:	d900      	bls.n	80016d6 <__aeabi_ddiv+0x50a>
 80016d4:	e660      	b.n	8001398 <__aeabi_ddiv+0x1cc>
 80016d6:	4282      	cmp	r2, r0
 80016d8:	d804      	bhi.n	80016e4 <__aeabi_ddiv+0x518>
 80016da:	d000      	beq.n	80016de <__aeabi_ddiv+0x512>
 80016dc:	e65c      	b.n	8001398 <__aeabi_ddiv+0x1cc>
 80016de:	42ae      	cmp	r6, r5
 80016e0:	d800      	bhi.n	80016e4 <__aeabi_ddiv+0x518>
 80016e2:	e659      	b.n	8001398 <__aeabi_ddiv+0x1cc>
 80016e4:	2302      	movs	r3, #2
 80016e6:	425b      	negs	r3, r3
 80016e8:	469c      	mov	ip, r3
 80016ea:	9b00      	ldr	r3, [sp, #0]
 80016ec:	44e0      	add	r8, ip
 80016ee:	469c      	mov	ip, r3
 80016f0:	4465      	add	r5, ip
 80016f2:	429d      	cmp	r5, r3
 80016f4:	419b      	sbcs	r3, r3
 80016f6:	425b      	negs	r3, r3
 80016f8:	191b      	adds	r3, r3, r4
 80016fa:	18c0      	adds	r0, r0, r3
 80016fc:	e64d      	b.n	800139a <__aeabi_ddiv+0x1ce>
 80016fe:	428a      	cmp	r2, r1
 8001700:	d800      	bhi.n	8001704 <__aeabi_ddiv+0x538>
 8001702:	e60e      	b.n	8001322 <__aeabi_ddiv+0x156>
 8001704:	1e83      	subs	r3, r0, #2
 8001706:	1909      	adds	r1, r1, r4
 8001708:	e60b      	b.n	8001322 <__aeabi_ddiv+0x156>
 800170a:	428a      	cmp	r2, r1
 800170c:	d800      	bhi.n	8001710 <__aeabi_ddiv+0x544>
 800170e:	e5f4      	b.n	80012fa <__aeabi_ddiv+0x12e>
 8001710:	1e83      	subs	r3, r0, #2
 8001712:	4698      	mov	r8, r3
 8001714:	1909      	adds	r1, r1, r4
 8001716:	e5f0      	b.n	80012fa <__aeabi_ddiv+0x12e>
 8001718:	4925      	ldr	r1, [pc, #148]	; (80017b0 <__aeabi_ddiv+0x5e4>)
 800171a:	0028      	movs	r0, r5
 800171c:	4459      	add	r1, fp
 800171e:	408d      	lsls	r5, r1
 8001720:	4642      	mov	r2, r8
 8001722:	408a      	lsls	r2, r1
 8001724:	1e69      	subs	r1, r5, #1
 8001726:	418d      	sbcs	r5, r1
 8001728:	4641      	mov	r1, r8
 800172a:	40d8      	lsrs	r0, r3
 800172c:	40d9      	lsrs	r1, r3
 800172e:	4302      	orrs	r2, r0
 8001730:	432a      	orrs	r2, r5
 8001732:	000b      	movs	r3, r1
 8001734:	0751      	lsls	r1, r2, #29
 8001736:	d100      	bne.n	800173a <__aeabi_ddiv+0x56e>
 8001738:	e751      	b.n	80015de <__aeabi_ddiv+0x412>
 800173a:	210f      	movs	r1, #15
 800173c:	4011      	ands	r1, r2
 800173e:	2904      	cmp	r1, #4
 8001740:	d000      	beq.n	8001744 <__aeabi_ddiv+0x578>
 8001742:	e746      	b.n	80015d2 <__aeabi_ddiv+0x406>
 8001744:	e74b      	b.n	80015de <__aeabi_ddiv+0x412>
 8001746:	0005      	movs	r5, r0
 8001748:	428e      	cmp	r6, r1
 800174a:	d000      	beq.n	800174e <__aeabi_ddiv+0x582>
 800174c:	e66a      	b.n	8001424 <__aeabi_ddiv+0x258>
 800174e:	9a00      	ldr	r2, [sp, #0]
 8001750:	4293      	cmp	r3, r2
 8001752:	d000      	beq.n	8001756 <__aeabi_ddiv+0x58a>
 8001754:	e666      	b.n	8001424 <__aeabi_ddiv+0x258>
 8001756:	e667      	b.n	8001428 <__aeabi_ddiv+0x25c>
 8001758:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <__aeabi_ddiv+0x5e8>)
 800175a:	445a      	add	r2, fp
 800175c:	2a00      	cmp	r2, #0
 800175e:	dc00      	bgt.n	8001762 <__aeabi_ddiv+0x596>
 8001760:	e710      	b.n	8001584 <__aeabi_ddiv+0x3b8>
 8001762:	2301      	movs	r3, #1
 8001764:	2500      	movs	r5, #0
 8001766:	4498      	add	r8, r3
 8001768:	e667      	b.n	800143a <__aeabi_ddiv+0x26e>
 800176a:	075d      	lsls	r5, r3, #29
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	0b1c      	lsrs	r4, r3, #12
 8001770:	08d2      	lsrs	r2, r2, #3
 8001772:	2300      	movs	r3, #0
 8001774:	4315      	orrs	r5, r2
 8001776:	e580      	b.n	800127a <__aeabi_ddiv+0xae>
 8001778:	9800      	ldr	r0, [sp, #0]
 800177a:	3d02      	subs	r5, #2
 800177c:	0042      	lsls	r2, r0, #1
 800177e:	4282      	cmp	r2, r0
 8001780:	41bf      	sbcs	r7, r7
 8001782:	427f      	negs	r7, r7
 8001784:	193c      	adds	r4, r7, r4
 8001786:	1936      	adds	r6, r6, r4
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	e7dd      	b.n	8001748 <__aeabi_ddiv+0x57c>
 800178c:	2480      	movs	r4, #128	; 0x80
 800178e:	4643      	mov	r3, r8
 8001790:	0324      	lsls	r4, r4, #12
 8001792:	431c      	orrs	r4, r3
 8001794:	0324      	lsls	r4, r4, #12
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__aeabi_ddiv+0x5dc>)
 8001798:	0b24      	lsrs	r4, r4, #12
 800179a:	e56e      	b.n	800127a <__aeabi_ddiv+0xae>
 800179c:	9a00      	ldr	r2, [sp, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3ea      	bcc.n	8001778 <__aeabi_ddiv+0x5ac>
 80017a2:	0005      	movs	r5, r0
 80017a4:	e7d3      	b.n	800174e <__aeabi_ddiv+0x582>
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	000007ff 	.word	0x000007ff
 80017ac:	0000043e 	.word	0x0000043e
 80017b0:	0000041e 	.word	0x0000041e
 80017b4:	000003ff 	.word	0x000003ff

080017b8 <__eqdf2>:
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	464e      	mov	r6, r9
 80017bc:	4645      	mov	r5, r8
 80017be:	46de      	mov	lr, fp
 80017c0:	4657      	mov	r7, sl
 80017c2:	4690      	mov	r8, r2
 80017c4:	b5e0      	push	{r5, r6, r7, lr}
 80017c6:	0017      	movs	r7, r2
 80017c8:	031a      	lsls	r2, r3, #12
 80017ca:	0b12      	lsrs	r2, r2, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4684      	mov	ip, r0
 80017d0:	4819      	ldr	r0, [pc, #100]	; (8001838 <__eqdf2+0x80>)
 80017d2:	030e      	lsls	r6, r1, #12
 80017d4:	004c      	lsls	r4, r1, #1
 80017d6:	4691      	mov	r9, r2
 80017d8:	005a      	lsls	r2, r3, #1
 80017da:	0fdb      	lsrs	r3, r3, #31
 80017dc:	469b      	mov	fp, r3
 80017de:	0b36      	lsrs	r6, r6, #12
 80017e0:	0d64      	lsrs	r4, r4, #21
 80017e2:	0fc9      	lsrs	r1, r1, #31
 80017e4:	0d52      	lsrs	r2, r2, #21
 80017e6:	4284      	cmp	r4, r0
 80017e8:	d019      	beq.n	800181e <__eqdf2+0x66>
 80017ea:	4282      	cmp	r2, r0
 80017ec:	d010      	beq.n	8001810 <__eqdf2+0x58>
 80017ee:	2001      	movs	r0, #1
 80017f0:	4294      	cmp	r4, r2
 80017f2:	d10e      	bne.n	8001812 <__eqdf2+0x5a>
 80017f4:	454e      	cmp	r6, r9
 80017f6:	d10c      	bne.n	8001812 <__eqdf2+0x5a>
 80017f8:	2001      	movs	r0, #1
 80017fa:	45c4      	cmp	ip, r8
 80017fc:	d109      	bne.n	8001812 <__eqdf2+0x5a>
 80017fe:	4559      	cmp	r1, fp
 8001800:	d017      	beq.n	8001832 <__eqdf2+0x7a>
 8001802:	2c00      	cmp	r4, #0
 8001804:	d105      	bne.n	8001812 <__eqdf2+0x5a>
 8001806:	0030      	movs	r0, r6
 8001808:	4328      	orrs	r0, r5
 800180a:	1e43      	subs	r3, r0, #1
 800180c:	4198      	sbcs	r0, r3
 800180e:	e000      	b.n	8001812 <__eqdf2+0x5a>
 8001810:	2001      	movs	r0, #1
 8001812:	bcf0      	pop	{r4, r5, r6, r7}
 8001814:	46bb      	mov	fp, r7
 8001816:	46b2      	mov	sl, r6
 8001818:	46a9      	mov	r9, r5
 800181a:	46a0      	mov	r8, r4
 800181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181e:	0033      	movs	r3, r6
 8001820:	2001      	movs	r0, #1
 8001822:	432b      	orrs	r3, r5
 8001824:	d1f5      	bne.n	8001812 <__eqdf2+0x5a>
 8001826:	42a2      	cmp	r2, r4
 8001828:	d1f3      	bne.n	8001812 <__eqdf2+0x5a>
 800182a:	464b      	mov	r3, r9
 800182c:	433b      	orrs	r3, r7
 800182e:	d1f0      	bne.n	8001812 <__eqdf2+0x5a>
 8001830:	e7e2      	b.n	80017f8 <__eqdf2+0x40>
 8001832:	2000      	movs	r0, #0
 8001834:	e7ed      	b.n	8001812 <__eqdf2+0x5a>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	000007ff 	.word	0x000007ff

0800183c <__gedf2>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4647      	mov	r7, r8
 8001840:	46ce      	mov	lr, r9
 8001842:	0004      	movs	r4, r0
 8001844:	0018      	movs	r0, r3
 8001846:	0016      	movs	r6, r2
 8001848:	031b      	lsls	r3, r3, #12
 800184a:	0b1b      	lsrs	r3, r3, #12
 800184c:	4d2d      	ldr	r5, [pc, #180]	; (8001904 <__gedf2+0xc8>)
 800184e:	004a      	lsls	r2, r1, #1
 8001850:	4699      	mov	r9, r3
 8001852:	b580      	push	{r7, lr}
 8001854:	0043      	lsls	r3, r0, #1
 8001856:	030f      	lsls	r7, r1, #12
 8001858:	46a4      	mov	ip, r4
 800185a:	46b0      	mov	r8, r6
 800185c:	0b3f      	lsrs	r7, r7, #12
 800185e:	0d52      	lsrs	r2, r2, #21
 8001860:	0fc9      	lsrs	r1, r1, #31
 8001862:	0d5b      	lsrs	r3, r3, #21
 8001864:	0fc0      	lsrs	r0, r0, #31
 8001866:	42aa      	cmp	r2, r5
 8001868:	d021      	beq.n	80018ae <__gedf2+0x72>
 800186a:	42ab      	cmp	r3, r5
 800186c:	d013      	beq.n	8001896 <__gedf2+0x5a>
 800186e:	2a00      	cmp	r2, #0
 8001870:	d122      	bne.n	80018b8 <__gedf2+0x7c>
 8001872:	433c      	orrs	r4, r7
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <__gedf2+0x42>
 8001878:	464d      	mov	r5, r9
 800187a:	432e      	orrs	r6, r5
 800187c:	d022      	beq.n	80018c4 <__gedf2+0x88>
 800187e:	2c00      	cmp	r4, #0
 8001880:	d010      	beq.n	80018a4 <__gedf2+0x68>
 8001882:	4281      	cmp	r1, r0
 8001884:	d022      	beq.n	80018cc <__gedf2+0x90>
 8001886:	2002      	movs	r0, #2
 8001888:	3901      	subs	r1, #1
 800188a:	4008      	ands	r0, r1
 800188c:	3801      	subs	r0, #1
 800188e:	bcc0      	pop	{r6, r7}
 8001890:	46b9      	mov	r9, r7
 8001892:	46b0      	mov	r8, r6
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001896:	464d      	mov	r5, r9
 8001898:	432e      	orrs	r6, r5
 800189a:	d129      	bne.n	80018f0 <__gedf2+0xb4>
 800189c:	2a00      	cmp	r2, #0
 800189e:	d1f0      	bne.n	8001882 <__gedf2+0x46>
 80018a0:	433c      	orrs	r4, r7
 80018a2:	d1ee      	bne.n	8001882 <__gedf2+0x46>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d1f2      	bne.n	800188e <__gedf2+0x52>
 80018a8:	2001      	movs	r0, #1
 80018aa:	4240      	negs	r0, r0
 80018ac:	e7ef      	b.n	800188e <__gedf2+0x52>
 80018ae:	003d      	movs	r5, r7
 80018b0:	4325      	orrs	r5, r4
 80018b2:	d11d      	bne.n	80018f0 <__gedf2+0xb4>
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d0ee      	beq.n	8001896 <__gedf2+0x5a>
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e2      	bne.n	8001882 <__gedf2+0x46>
 80018bc:	464c      	mov	r4, r9
 80018be:	4326      	orrs	r6, r4
 80018c0:	d1df      	bne.n	8001882 <__gedf2+0x46>
 80018c2:	e7e0      	b.n	8001886 <__gedf2+0x4a>
 80018c4:	2000      	movs	r0, #0
 80018c6:	2c00      	cmp	r4, #0
 80018c8:	d0e1      	beq.n	800188e <__gedf2+0x52>
 80018ca:	e7dc      	b.n	8001886 <__gedf2+0x4a>
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dc0a      	bgt.n	80018e6 <__gedf2+0xaa>
 80018d0:	dbe8      	blt.n	80018a4 <__gedf2+0x68>
 80018d2:	454f      	cmp	r7, r9
 80018d4:	d8d7      	bhi.n	8001886 <__gedf2+0x4a>
 80018d6:	d00e      	beq.n	80018f6 <__gedf2+0xba>
 80018d8:	2000      	movs	r0, #0
 80018da:	454f      	cmp	r7, r9
 80018dc:	d2d7      	bcs.n	800188e <__gedf2+0x52>
 80018de:	2900      	cmp	r1, #0
 80018e0:	d0e2      	beq.n	80018a8 <__gedf2+0x6c>
 80018e2:	0008      	movs	r0, r1
 80018e4:	e7d3      	b.n	800188e <__gedf2+0x52>
 80018e6:	4243      	negs	r3, r0
 80018e8:	4158      	adcs	r0, r3
 80018ea:	0040      	lsls	r0, r0, #1
 80018ec:	3801      	subs	r0, #1
 80018ee:	e7ce      	b.n	800188e <__gedf2+0x52>
 80018f0:	2002      	movs	r0, #2
 80018f2:	4240      	negs	r0, r0
 80018f4:	e7cb      	b.n	800188e <__gedf2+0x52>
 80018f6:	45c4      	cmp	ip, r8
 80018f8:	d8c5      	bhi.n	8001886 <__gedf2+0x4a>
 80018fa:	2000      	movs	r0, #0
 80018fc:	45c4      	cmp	ip, r8
 80018fe:	d2c6      	bcs.n	800188e <__gedf2+0x52>
 8001900:	e7ed      	b.n	80018de <__gedf2+0xa2>
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	000007ff 	.word	0x000007ff

08001908 <__ledf2>:
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	4647      	mov	r7, r8
 800190c:	46ce      	mov	lr, r9
 800190e:	0004      	movs	r4, r0
 8001910:	0018      	movs	r0, r3
 8001912:	0016      	movs	r6, r2
 8001914:	031b      	lsls	r3, r3, #12
 8001916:	0b1b      	lsrs	r3, r3, #12
 8001918:	4d2c      	ldr	r5, [pc, #176]	; (80019cc <__ledf2+0xc4>)
 800191a:	004a      	lsls	r2, r1, #1
 800191c:	4699      	mov	r9, r3
 800191e:	b580      	push	{r7, lr}
 8001920:	0043      	lsls	r3, r0, #1
 8001922:	030f      	lsls	r7, r1, #12
 8001924:	46a4      	mov	ip, r4
 8001926:	46b0      	mov	r8, r6
 8001928:	0b3f      	lsrs	r7, r7, #12
 800192a:	0d52      	lsrs	r2, r2, #21
 800192c:	0fc9      	lsrs	r1, r1, #31
 800192e:	0d5b      	lsrs	r3, r3, #21
 8001930:	0fc0      	lsrs	r0, r0, #31
 8001932:	42aa      	cmp	r2, r5
 8001934:	d00d      	beq.n	8001952 <__ledf2+0x4a>
 8001936:	42ab      	cmp	r3, r5
 8001938:	d010      	beq.n	800195c <__ledf2+0x54>
 800193a:	2a00      	cmp	r2, #0
 800193c:	d127      	bne.n	800198e <__ledf2+0x86>
 800193e:	433c      	orrs	r4, r7
 8001940:	2b00      	cmp	r3, #0
 8001942:	d111      	bne.n	8001968 <__ledf2+0x60>
 8001944:	464d      	mov	r5, r9
 8001946:	432e      	orrs	r6, r5
 8001948:	d10e      	bne.n	8001968 <__ledf2+0x60>
 800194a:	2000      	movs	r0, #0
 800194c:	2c00      	cmp	r4, #0
 800194e:	d015      	beq.n	800197c <__ledf2+0x74>
 8001950:	e00e      	b.n	8001970 <__ledf2+0x68>
 8001952:	003d      	movs	r5, r7
 8001954:	4325      	orrs	r5, r4
 8001956:	d110      	bne.n	800197a <__ledf2+0x72>
 8001958:	4293      	cmp	r3, r2
 800195a:	d118      	bne.n	800198e <__ledf2+0x86>
 800195c:	464d      	mov	r5, r9
 800195e:	432e      	orrs	r6, r5
 8001960:	d10b      	bne.n	800197a <__ledf2+0x72>
 8001962:	2a00      	cmp	r2, #0
 8001964:	d102      	bne.n	800196c <__ledf2+0x64>
 8001966:	433c      	orrs	r4, r7
 8001968:	2c00      	cmp	r4, #0
 800196a:	d00b      	beq.n	8001984 <__ledf2+0x7c>
 800196c:	4281      	cmp	r1, r0
 800196e:	d014      	beq.n	800199a <__ledf2+0x92>
 8001970:	2002      	movs	r0, #2
 8001972:	3901      	subs	r1, #1
 8001974:	4008      	ands	r0, r1
 8001976:	3801      	subs	r0, #1
 8001978:	e000      	b.n	800197c <__ledf2+0x74>
 800197a:	2002      	movs	r0, #2
 800197c:	bcc0      	pop	{r6, r7}
 800197e:	46b9      	mov	r9, r7
 8001980:	46b0      	mov	r8, r6
 8001982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001984:	2800      	cmp	r0, #0
 8001986:	d1f9      	bne.n	800197c <__ledf2+0x74>
 8001988:	2001      	movs	r0, #1
 800198a:	4240      	negs	r0, r0
 800198c:	e7f6      	b.n	800197c <__ledf2+0x74>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ec      	bne.n	800196c <__ledf2+0x64>
 8001992:	464c      	mov	r4, r9
 8001994:	4326      	orrs	r6, r4
 8001996:	d1e9      	bne.n	800196c <__ledf2+0x64>
 8001998:	e7ea      	b.n	8001970 <__ledf2+0x68>
 800199a:	429a      	cmp	r2, r3
 800199c:	dd04      	ble.n	80019a8 <__ledf2+0xa0>
 800199e:	4243      	negs	r3, r0
 80019a0:	4158      	adcs	r0, r3
 80019a2:	0040      	lsls	r0, r0, #1
 80019a4:	3801      	subs	r0, #1
 80019a6:	e7e9      	b.n	800197c <__ledf2+0x74>
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbeb      	blt.n	8001984 <__ledf2+0x7c>
 80019ac:	454f      	cmp	r7, r9
 80019ae:	d8df      	bhi.n	8001970 <__ledf2+0x68>
 80019b0:	d006      	beq.n	80019c0 <__ledf2+0xb8>
 80019b2:	2000      	movs	r0, #0
 80019b4:	454f      	cmp	r7, r9
 80019b6:	d2e1      	bcs.n	800197c <__ledf2+0x74>
 80019b8:	2900      	cmp	r1, #0
 80019ba:	d0e5      	beq.n	8001988 <__ledf2+0x80>
 80019bc:	0008      	movs	r0, r1
 80019be:	e7dd      	b.n	800197c <__ledf2+0x74>
 80019c0:	45c4      	cmp	ip, r8
 80019c2:	d8d5      	bhi.n	8001970 <__ledf2+0x68>
 80019c4:	2000      	movs	r0, #0
 80019c6:	45c4      	cmp	ip, r8
 80019c8:	d2d8      	bcs.n	800197c <__ledf2+0x74>
 80019ca:	e7f5      	b.n	80019b8 <__ledf2+0xb0>
 80019cc:	000007ff 	.word	0x000007ff

080019d0 <__aeabi_dmul>:
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	4657      	mov	r7, sl
 80019d4:	464e      	mov	r6, r9
 80019d6:	4645      	mov	r5, r8
 80019d8:	46de      	mov	lr, fp
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	4698      	mov	r8, r3
 80019de:	030c      	lsls	r4, r1, #12
 80019e0:	004b      	lsls	r3, r1, #1
 80019e2:	0006      	movs	r6, r0
 80019e4:	4692      	mov	sl, r2
 80019e6:	b087      	sub	sp, #28
 80019e8:	0b24      	lsrs	r4, r4, #12
 80019ea:	0d5b      	lsrs	r3, r3, #21
 80019ec:	0fcf      	lsrs	r7, r1, #31
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dmul+0x24>
 80019f2:	e15c      	b.n	8001cae <__aeabi_dmul+0x2de>
 80019f4:	4ad9      	ldr	r2, [pc, #868]	; (8001d5c <__aeabi_dmul+0x38c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d100      	bne.n	80019fc <__aeabi_dmul+0x2c>
 80019fa:	e175      	b.n	8001ce8 <__aeabi_dmul+0x318>
 80019fc:	0f42      	lsrs	r2, r0, #29
 80019fe:	00e4      	lsls	r4, r4, #3
 8001a00:	4314      	orrs	r4, r2
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0412      	lsls	r2, r2, #16
 8001a06:	4314      	orrs	r4, r2
 8001a08:	4ad5      	ldr	r2, [pc, #852]	; (8001d60 <__aeabi_dmul+0x390>)
 8001a0a:	00c5      	lsls	r5, r0, #3
 8001a0c:	4694      	mov	ip, r2
 8001a0e:	4463      	add	r3, ip
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	4699      	mov	r9, r3
 8001a16:	469b      	mov	fp, r3
 8001a18:	4643      	mov	r3, r8
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	031e      	lsls	r6, r3, #12
 8001a1e:	0fd2      	lsrs	r2, r2, #31
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4650      	mov	r0, sl
 8001a24:	4690      	mov	r8, r2
 8001a26:	0b36      	lsrs	r6, r6, #12
 8001a28:	0d5b      	lsrs	r3, r3, #21
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dmul+0x5e>
 8001a2c:	e120      	b.n	8001c70 <__aeabi_dmul+0x2a0>
 8001a2e:	4acb      	ldr	r2, [pc, #812]	; (8001d5c <__aeabi_dmul+0x38c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dmul+0x66>
 8001a34:	e162      	b.n	8001cfc <__aeabi_dmul+0x32c>
 8001a36:	49ca      	ldr	r1, [pc, #808]	; (8001d60 <__aeabi_dmul+0x390>)
 8001a38:	0f42      	lsrs	r2, r0, #29
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	9900      	ldr	r1, [sp, #0]
 8001a3e:	4463      	add	r3, ip
 8001a40:	00f6      	lsls	r6, r6, #3
 8001a42:	468c      	mov	ip, r1
 8001a44:	4316      	orrs	r6, r2
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	449c      	add	ip, r3
 8001a4a:	0412      	lsls	r2, r2, #16
 8001a4c:	4663      	mov	r3, ip
 8001a4e:	4316      	orrs	r6, r2
 8001a50:	00c2      	lsls	r2, r0, #3
 8001a52:	2000      	movs	r0, #0
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	9900      	ldr	r1, [sp, #0]
 8001a58:	4643      	mov	r3, r8
 8001a5a:	3101      	adds	r1, #1
 8001a5c:	468c      	mov	ip, r1
 8001a5e:	4649      	mov	r1, r9
 8001a60:	407b      	eors	r3, r7
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	290f      	cmp	r1, #15
 8001a66:	d826      	bhi.n	8001ab6 <__aeabi_dmul+0xe6>
 8001a68:	4bbe      	ldr	r3, [pc, #760]	; (8001d64 <__aeabi_dmul+0x394>)
 8001a6a:	0089      	lsls	r1, r1, #2
 8001a6c:	5859      	ldr	r1, [r3, r1]
 8001a6e:	468f      	mov	pc, r1
 8001a70:	4643      	mov	r3, r8
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	0034      	movs	r4, r6
 8001a76:	0015      	movs	r5, r2
 8001a78:	4683      	mov	fp, r0
 8001a7a:	465b      	mov	r3, fp
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d016      	beq.n	8001aae <__aeabi_dmul+0xde>
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0xb6>
 8001a84:	e203      	b.n	8001e8e <__aeabi_dmul+0x4be>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d000      	beq.n	8001a8c <__aeabi_dmul+0xbc>
 8001a8a:	e0cd      	b.n	8001c28 <__aeabi_dmul+0x258>
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2400      	movs	r4, #0
 8001a90:	2500      	movs	r5, #0
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	0512      	lsls	r2, r2, #20
 8001a96:	4322      	orrs	r2, r4
 8001a98:	07db      	lsls	r3, r3, #31
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	0028      	movs	r0, r5
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa4:	46bb      	mov	fp, r7
 8001aa6:	46b2      	mov	sl, r6
 8001aa8:	46a9      	mov	r9, r5
 8001aaa:	46a0      	mov	r8, r4
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	2400      	movs	r4, #0
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	4aaa      	ldr	r2, [pc, #680]	; (8001d5c <__aeabi_dmul+0x38c>)
 8001ab4:	e7ed      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001ab6:	0c28      	lsrs	r0, r5, #16
 8001ab8:	042d      	lsls	r5, r5, #16
 8001aba:	0c2d      	lsrs	r5, r5, #16
 8001abc:	002b      	movs	r3, r5
 8001abe:	0c11      	lsrs	r1, r2, #16
 8001ac0:	0412      	lsls	r2, r2, #16
 8001ac2:	0c12      	lsrs	r2, r2, #16
 8001ac4:	4353      	muls	r3, r2
 8001ac6:	4698      	mov	r8, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	002f      	movs	r7, r5
 8001acc:	4343      	muls	r3, r0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	434f      	muls	r7, r1
 8001ad2:	444f      	add	r7, r9
 8001ad4:	46bb      	mov	fp, r7
 8001ad6:	4647      	mov	r7, r8
 8001ad8:	000b      	movs	r3, r1
 8001ada:	0c3f      	lsrs	r7, r7, #16
 8001adc:	46ba      	mov	sl, r7
 8001ade:	4343      	muls	r3, r0
 8001ae0:	44da      	add	sl, fp
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	45d1      	cmp	r9, sl
 8001ae6:	d904      	bls.n	8001af2 <__aeabi_dmul+0x122>
 8001ae8:	2780      	movs	r7, #128	; 0x80
 8001aea:	027f      	lsls	r7, r7, #9
 8001aec:	46b9      	mov	r9, r7
 8001aee:	444b      	add	r3, r9
 8001af0:	9302      	str	r3, [sp, #8]
 8001af2:	4653      	mov	r3, sl
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	469b      	mov	fp, r3
 8001af8:	4653      	mov	r3, sl
 8001afa:	041f      	lsls	r7, r3, #16
 8001afc:	4643      	mov	r3, r8
 8001afe:	041b      	lsls	r3, r3, #16
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	4698      	mov	r8, r3
 8001b04:	003b      	movs	r3, r7
 8001b06:	4443      	add	r3, r8
 8001b08:	9304      	str	r3, [sp, #16]
 8001b0a:	0c33      	lsrs	r3, r6, #16
 8001b0c:	0436      	lsls	r6, r6, #16
 8001b0e:	0c36      	lsrs	r6, r6, #16
 8001b10:	4698      	mov	r8, r3
 8001b12:	0033      	movs	r3, r6
 8001b14:	4343      	muls	r3, r0
 8001b16:	4699      	mov	r9, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	4343      	muls	r3, r0
 8001b1c:	002f      	movs	r7, r5
 8001b1e:	469a      	mov	sl, r3
 8001b20:	4643      	mov	r3, r8
 8001b22:	4377      	muls	r7, r6
 8001b24:	435d      	muls	r5, r3
 8001b26:	0c38      	lsrs	r0, r7, #16
 8001b28:	444d      	add	r5, r9
 8001b2a:	1945      	adds	r5, r0, r5
 8001b2c:	45a9      	cmp	r9, r5
 8001b2e:	d903      	bls.n	8001b38 <__aeabi_dmul+0x168>
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	025b      	lsls	r3, r3, #9
 8001b34:	4699      	mov	r9, r3
 8001b36:	44ca      	add	sl, r9
 8001b38:	043f      	lsls	r7, r7, #16
 8001b3a:	0c28      	lsrs	r0, r5, #16
 8001b3c:	0c3f      	lsrs	r7, r7, #16
 8001b3e:	042d      	lsls	r5, r5, #16
 8001b40:	19ed      	adds	r5, r5, r7
 8001b42:	0c27      	lsrs	r7, r4, #16
 8001b44:	0424      	lsls	r4, r4, #16
 8001b46:	0c24      	lsrs	r4, r4, #16
 8001b48:	0003      	movs	r3, r0
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	4350      	muls	r0, r2
 8001b4e:	437a      	muls	r2, r7
 8001b50:	4691      	mov	r9, r2
 8001b52:	003a      	movs	r2, r7
 8001b54:	4453      	add	r3, sl
 8001b56:	9305      	str	r3, [sp, #20]
 8001b58:	0c03      	lsrs	r3, r0, #16
 8001b5a:	469a      	mov	sl, r3
 8001b5c:	434a      	muls	r2, r1
 8001b5e:	4361      	muls	r1, r4
 8001b60:	4449      	add	r1, r9
 8001b62:	4451      	add	r1, sl
 8001b64:	44ab      	add	fp, r5
 8001b66:	4589      	cmp	r9, r1
 8001b68:	d903      	bls.n	8001b72 <__aeabi_dmul+0x1a2>
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	4699      	mov	r9, r3
 8001b70:	444a      	add	r2, r9
 8001b72:	0400      	lsls	r0, r0, #16
 8001b74:	0c0b      	lsrs	r3, r1, #16
 8001b76:	0c00      	lsrs	r0, r0, #16
 8001b78:	0409      	lsls	r1, r1, #16
 8001b7a:	1809      	adds	r1, r1, r0
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	4699      	mov	r9, r3
 8001b80:	4643      	mov	r3, r8
 8001b82:	4370      	muls	r0, r6
 8001b84:	435c      	muls	r4, r3
 8001b86:	437e      	muls	r6, r7
 8001b88:	435f      	muls	r7, r3
 8001b8a:	0c03      	lsrs	r3, r0, #16
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	19a4      	adds	r4, r4, r6
 8001b90:	4444      	add	r4, r8
 8001b92:	444a      	add	r2, r9
 8001b94:	9703      	str	r7, [sp, #12]
 8001b96:	42a6      	cmp	r6, r4
 8001b98:	d904      	bls.n	8001ba4 <__aeabi_dmul+0x1d4>
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	025b      	lsls	r3, r3, #9
 8001b9e:	4698      	mov	r8, r3
 8001ba0:	4447      	add	r7, r8
 8001ba2:	9703      	str	r7, [sp, #12]
 8001ba4:	0423      	lsls	r3, r4, #16
 8001ba6:	9e02      	ldr	r6, [sp, #8]
 8001ba8:	469a      	mov	sl, r3
 8001baa:	9b05      	ldr	r3, [sp, #20]
 8001bac:	445e      	add	r6, fp
 8001bae:	4698      	mov	r8, r3
 8001bb0:	42ae      	cmp	r6, r5
 8001bb2:	41ad      	sbcs	r5, r5
 8001bb4:	1876      	adds	r6, r6, r1
 8001bb6:	428e      	cmp	r6, r1
 8001bb8:	4189      	sbcs	r1, r1
 8001bba:	0400      	lsls	r0, r0, #16
 8001bbc:	0c00      	lsrs	r0, r0, #16
 8001bbe:	4450      	add	r0, sl
 8001bc0:	4440      	add	r0, r8
 8001bc2:	426d      	negs	r5, r5
 8001bc4:	1947      	adds	r7, r0, r5
 8001bc6:	46b8      	mov	r8, r7
 8001bc8:	4693      	mov	fp, r2
 8001bca:	4249      	negs	r1, r1
 8001bcc:	4689      	mov	r9, r1
 8001bce:	44c3      	add	fp, r8
 8001bd0:	44d9      	add	r9, fp
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	4180      	sbcs	r0, r0
 8001bd6:	45a8      	cmp	r8, r5
 8001bd8:	41ad      	sbcs	r5, r5
 8001bda:	4593      	cmp	fp, r2
 8001bdc:	4192      	sbcs	r2, r2
 8001bde:	4589      	cmp	r9, r1
 8001be0:	4189      	sbcs	r1, r1
 8001be2:	426d      	negs	r5, r5
 8001be4:	4240      	negs	r0, r0
 8001be6:	4328      	orrs	r0, r5
 8001be8:	0c24      	lsrs	r4, r4, #16
 8001bea:	4252      	negs	r2, r2
 8001bec:	4249      	negs	r1, r1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	9b03      	ldr	r3, [sp, #12]
 8001bf2:	1900      	adds	r0, r0, r4
 8001bf4:	1880      	adds	r0, r0, r2
 8001bf6:	18c7      	adds	r7, r0, r3
 8001bf8:	464b      	mov	r3, r9
 8001bfa:	0ddc      	lsrs	r4, r3, #23
 8001bfc:	9b04      	ldr	r3, [sp, #16]
 8001bfe:	0275      	lsls	r5, r6, #9
 8001c00:	431d      	orrs	r5, r3
 8001c02:	1e6a      	subs	r2, r5, #1
 8001c04:	4195      	sbcs	r5, r2
 8001c06:	464b      	mov	r3, r9
 8001c08:	0df6      	lsrs	r6, r6, #23
 8001c0a:	027f      	lsls	r7, r7, #9
 8001c0c:	4335      	orrs	r5, r6
 8001c0e:	025a      	lsls	r2, r3, #9
 8001c10:	433c      	orrs	r4, r7
 8001c12:	4315      	orrs	r5, r2
 8001c14:	01fb      	lsls	r3, r7, #7
 8001c16:	d400      	bmi.n	8001c1a <__aeabi_dmul+0x24a>
 8001c18:	e11c      	b.n	8001e54 <__aeabi_dmul+0x484>
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	086a      	lsrs	r2, r5, #1
 8001c1e:	400d      	ands	r5, r1
 8001c20:	4315      	orrs	r5, r2
 8001c22:	07e2      	lsls	r2, r4, #31
 8001c24:	4315      	orrs	r5, r2
 8001c26:	0864      	lsrs	r4, r4, #1
 8001c28:	494f      	ldr	r1, [pc, #316]	; (8001d68 <__aeabi_dmul+0x398>)
 8001c2a:	4461      	add	r1, ip
 8001c2c:	2900      	cmp	r1, #0
 8001c2e:	dc00      	bgt.n	8001c32 <__aeabi_dmul+0x262>
 8001c30:	e0b0      	b.n	8001d94 <__aeabi_dmul+0x3c4>
 8001c32:	076b      	lsls	r3, r5, #29
 8001c34:	d009      	beq.n	8001c4a <__aeabi_dmul+0x27a>
 8001c36:	220f      	movs	r2, #15
 8001c38:	402a      	ands	r2, r5
 8001c3a:	2a04      	cmp	r2, #4
 8001c3c:	d005      	beq.n	8001c4a <__aeabi_dmul+0x27a>
 8001c3e:	1d2a      	adds	r2, r5, #4
 8001c40:	42aa      	cmp	r2, r5
 8001c42:	41ad      	sbcs	r5, r5
 8001c44:	426d      	negs	r5, r5
 8001c46:	1964      	adds	r4, r4, r5
 8001c48:	0015      	movs	r5, r2
 8001c4a:	01e3      	lsls	r3, r4, #7
 8001c4c:	d504      	bpl.n	8001c58 <__aeabi_dmul+0x288>
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	4a46      	ldr	r2, [pc, #280]	; (8001d6c <__aeabi_dmul+0x39c>)
 8001c52:	00c9      	lsls	r1, r1, #3
 8001c54:	4014      	ands	r4, r2
 8001c56:	4461      	add	r1, ip
 8001c58:	4a45      	ldr	r2, [pc, #276]	; (8001d70 <__aeabi_dmul+0x3a0>)
 8001c5a:	4291      	cmp	r1, r2
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_dmul+0x290>
 8001c5e:	e726      	b.n	8001aae <__aeabi_dmul+0xde>
 8001c60:	0762      	lsls	r2, r4, #29
 8001c62:	08ed      	lsrs	r5, r5, #3
 8001c64:	0264      	lsls	r4, r4, #9
 8001c66:	0549      	lsls	r1, r1, #21
 8001c68:	4315      	orrs	r5, r2
 8001c6a:	0b24      	lsrs	r4, r4, #12
 8001c6c:	0d4a      	lsrs	r2, r1, #21
 8001c6e:	e710      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001c70:	4652      	mov	r2, sl
 8001c72:	4332      	orrs	r2, r6
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dmul+0x2a8>
 8001c76:	e07f      	b.n	8001d78 <__aeabi_dmul+0x3a8>
 8001c78:	2e00      	cmp	r6, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dmul+0x2ae>
 8001c7c:	e0dc      	b.n	8001e38 <__aeabi_dmul+0x468>
 8001c7e:	0030      	movs	r0, r6
 8001c80:	f000 fd78 	bl	8002774 <__clzsi2>
 8001c84:	0002      	movs	r2, r0
 8001c86:	3a0b      	subs	r2, #11
 8001c88:	231d      	movs	r3, #29
 8001c8a:	0001      	movs	r1, r0
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	4652      	mov	r2, sl
 8001c90:	3908      	subs	r1, #8
 8001c92:	40da      	lsrs	r2, r3
 8001c94:	408e      	lsls	r6, r1
 8001c96:	4316      	orrs	r6, r2
 8001c98:	4652      	mov	r2, sl
 8001c9a:	408a      	lsls	r2, r1
 8001c9c:	9b00      	ldr	r3, [sp, #0]
 8001c9e:	4935      	ldr	r1, [pc, #212]	; (8001d74 <__aeabi_dmul+0x3a4>)
 8001ca0:	1a18      	subs	r0, r3, r0
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	468c      	mov	ip, r1
 8001ca6:	4463      	add	r3, ip
 8001ca8:	2000      	movs	r0, #0
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	e6d3      	b.n	8001a56 <__aeabi_dmul+0x86>
 8001cae:	0025      	movs	r5, r4
 8001cb0:	4305      	orrs	r5, r0
 8001cb2:	d04a      	beq.n	8001d4a <__aeabi_dmul+0x37a>
 8001cb4:	2c00      	cmp	r4, #0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dmul+0x2ea>
 8001cb8:	e0b0      	b.n	8001e1c <__aeabi_dmul+0x44c>
 8001cba:	0020      	movs	r0, r4
 8001cbc:	f000 fd5a 	bl	8002774 <__clzsi2>
 8001cc0:	0001      	movs	r1, r0
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	390b      	subs	r1, #11
 8001cc6:	231d      	movs	r3, #29
 8001cc8:	0010      	movs	r0, r2
 8001cca:	1a5b      	subs	r3, r3, r1
 8001ccc:	0031      	movs	r1, r6
 8001cce:	0035      	movs	r5, r6
 8001cd0:	3808      	subs	r0, #8
 8001cd2:	4084      	lsls	r4, r0
 8001cd4:	40d9      	lsrs	r1, r3
 8001cd6:	4085      	lsls	r5, r0
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	4826      	ldr	r0, [pc, #152]	; (8001d74 <__aeabi_dmul+0x3a4>)
 8001cdc:	1a83      	subs	r3, r0, r2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	469b      	mov	fp, r3
 8001ce6:	e697      	b.n	8001a18 <__aeabi_dmul+0x48>
 8001ce8:	0005      	movs	r5, r0
 8001cea:	4325      	orrs	r5, r4
 8001cec:	d126      	bne.n	8001d3c <__aeabi_dmul+0x36c>
 8001cee:	2208      	movs	r2, #8
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	2400      	movs	r4, #0
 8001cf6:	4691      	mov	r9, r2
 8001cf8:	469b      	mov	fp, r3
 8001cfa:	e68d      	b.n	8001a18 <__aeabi_dmul+0x48>
 8001cfc:	4652      	mov	r2, sl
 8001cfe:	9b00      	ldr	r3, [sp, #0]
 8001d00:	4332      	orrs	r2, r6
 8001d02:	d110      	bne.n	8001d26 <__aeabi_dmul+0x356>
 8001d04:	4915      	ldr	r1, [pc, #84]	; (8001d5c <__aeabi_dmul+0x38c>)
 8001d06:	2600      	movs	r6, #0
 8001d08:	468c      	mov	ip, r1
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	4319      	orrs	r1, r3
 8001d14:	4689      	mov	r9, r1
 8001d16:	2002      	movs	r0, #2
 8001d18:	e69d      	b.n	8001a56 <__aeabi_dmul+0x86>
 8001d1a:	465b      	mov	r3, fp
 8001d1c:	9701      	str	r7, [sp, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d000      	beq.n	8001d24 <__aeabi_dmul+0x354>
 8001d22:	e6ad      	b.n	8001a80 <__aeabi_dmul+0xb0>
 8001d24:	e6c3      	b.n	8001aae <__aeabi_dmul+0xde>
 8001d26:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <__aeabi_dmul+0x38c>)
 8001d28:	2003      	movs	r0, #3
 8001d2a:	4694      	mov	ip, r2
 8001d2c:	4463      	add	r3, ip
 8001d2e:	464a      	mov	r2, r9
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2303      	movs	r3, #3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	4691      	mov	r9, r2
 8001d38:	4652      	mov	r2, sl
 8001d3a:	e68c      	b.n	8001a56 <__aeabi_dmul+0x86>
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2303      	movs	r3, #3
 8001d42:	0005      	movs	r5, r0
 8001d44:	4691      	mov	r9, r2
 8001d46:	469b      	mov	fp, r3
 8001d48:	e666      	b.n	8001a18 <__aeabi_dmul+0x48>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	2400      	movs	r4, #0
 8001d56:	469b      	mov	fp, r3
 8001d58:	e65e      	b.n	8001a18 <__aeabi_dmul+0x48>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	fffffc01 	.word	0xfffffc01
 8001d64:	0801ef14 	.word	0x0801ef14
 8001d68:	000003ff 	.word	0x000003ff
 8001d6c:	feffffff 	.word	0xfeffffff
 8001d70:	000007fe 	.word	0x000007fe
 8001d74:	fffffc0d 	.word	0xfffffc0d
 8001d78:	4649      	mov	r1, r9
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	4319      	orrs	r1, r3
 8001d7e:	4689      	mov	r9, r1
 8001d80:	2600      	movs	r6, #0
 8001d82:	2001      	movs	r0, #1
 8001d84:	e667      	b.n	8001a56 <__aeabi_dmul+0x86>
 8001d86:	2300      	movs	r3, #0
 8001d88:	2480      	movs	r4, #128	; 0x80
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <__aeabi_dmul+0x4cc>)
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	0324      	lsls	r4, r4, #12
 8001d92:	e67e      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001d94:	2001      	movs	r0, #1
 8001d96:	1a40      	subs	r0, r0, r1
 8001d98:	2838      	cmp	r0, #56	; 0x38
 8001d9a:	dd00      	ble.n	8001d9e <__aeabi_dmul+0x3ce>
 8001d9c:	e676      	b.n	8001a8c <__aeabi_dmul+0xbc>
 8001d9e:	281f      	cmp	r0, #31
 8001da0:	dd5b      	ble.n	8001e5a <__aeabi_dmul+0x48a>
 8001da2:	221f      	movs	r2, #31
 8001da4:	0023      	movs	r3, r4
 8001da6:	4252      	negs	r2, r2
 8001da8:	1a51      	subs	r1, r2, r1
 8001daa:	40cb      	lsrs	r3, r1
 8001dac:	0019      	movs	r1, r3
 8001dae:	2820      	cmp	r0, #32
 8001db0:	d003      	beq.n	8001dba <__aeabi_dmul+0x3ea>
 8001db2:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <__aeabi_dmul+0x4d0>)
 8001db4:	4462      	add	r2, ip
 8001db6:	4094      	lsls	r4, r2
 8001db8:	4325      	orrs	r5, r4
 8001dba:	1e6a      	subs	r2, r5, #1
 8001dbc:	4195      	sbcs	r5, r2
 8001dbe:	002a      	movs	r2, r5
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	2107      	movs	r1, #7
 8001dc4:	000d      	movs	r5, r1
 8001dc6:	2400      	movs	r4, #0
 8001dc8:	4015      	ands	r5, r2
 8001dca:	4211      	tst	r1, r2
 8001dcc:	d05b      	beq.n	8001e86 <__aeabi_dmul+0x4b6>
 8001dce:	210f      	movs	r1, #15
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	4011      	ands	r1, r2
 8001dd4:	2904      	cmp	r1, #4
 8001dd6:	d053      	beq.n	8001e80 <__aeabi_dmul+0x4b0>
 8001dd8:	1d11      	adds	r1, r2, #4
 8001dda:	4291      	cmp	r1, r2
 8001ddc:	4192      	sbcs	r2, r2
 8001dde:	4252      	negs	r2, r2
 8001de0:	18a4      	adds	r4, r4, r2
 8001de2:	000a      	movs	r2, r1
 8001de4:	0223      	lsls	r3, r4, #8
 8001de6:	d54b      	bpl.n	8001e80 <__aeabi_dmul+0x4b0>
 8001de8:	2201      	movs	r2, #1
 8001dea:	2400      	movs	r4, #0
 8001dec:	2500      	movs	r5, #0
 8001dee:	e650      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	031b      	lsls	r3, r3, #12
 8001df4:	421c      	tst	r4, r3
 8001df6:	d009      	beq.n	8001e0c <__aeabi_dmul+0x43c>
 8001df8:	421e      	tst	r6, r3
 8001dfa:	d107      	bne.n	8001e0c <__aeabi_dmul+0x43c>
 8001dfc:	4333      	orrs	r3, r6
 8001dfe:	031c      	lsls	r4, r3, #12
 8001e00:	4643      	mov	r3, r8
 8001e02:	0015      	movs	r5, r2
 8001e04:	0b24      	lsrs	r4, r4, #12
 8001e06:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <__aeabi_dmul+0x4cc>)
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	e642      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	0312      	lsls	r2, r2, #12
 8001e10:	4314      	orrs	r4, r2
 8001e12:	0324      	lsls	r4, r4, #12
 8001e14:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <__aeabi_dmul+0x4cc>)
 8001e16:	0b24      	lsrs	r4, r4, #12
 8001e18:	9701      	str	r7, [sp, #4]
 8001e1a:	e63a      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001e1c:	f000 fcaa 	bl	8002774 <__clzsi2>
 8001e20:	0001      	movs	r1, r0
 8001e22:	0002      	movs	r2, r0
 8001e24:	3115      	adds	r1, #21
 8001e26:	3220      	adds	r2, #32
 8001e28:	291c      	cmp	r1, #28
 8001e2a:	dc00      	bgt.n	8001e2e <__aeabi_dmul+0x45e>
 8001e2c:	e74b      	b.n	8001cc6 <__aeabi_dmul+0x2f6>
 8001e2e:	0034      	movs	r4, r6
 8001e30:	3808      	subs	r0, #8
 8001e32:	2500      	movs	r5, #0
 8001e34:	4084      	lsls	r4, r0
 8001e36:	e750      	b.n	8001cda <__aeabi_dmul+0x30a>
 8001e38:	f000 fc9c 	bl	8002774 <__clzsi2>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	001a      	movs	r2, r3
 8001e40:	3215      	adds	r2, #21
 8001e42:	3020      	adds	r0, #32
 8001e44:	2a1c      	cmp	r2, #28
 8001e46:	dc00      	bgt.n	8001e4a <__aeabi_dmul+0x47a>
 8001e48:	e71e      	b.n	8001c88 <__aeabi_dmul+0x2b8>
 8001e4a:	4656      	mov	r6, sl
 8001e4c:	3b08      	subs	r3, #8
 8001e4e:	2200      	movs	r2, #0
 8001e50:	409e      	lsls	r6, r3
 8001e52:	e723      	b.n	8001c9c <__aeabi_dmul+0x2cc>
 8001e54:	9b00      	ldr	r3, [sp, #0]
 8001e56:	469c      	mov	ip, r3
 8001e58:	e6e6      	b.n	8001c28 <__aeabi_dmul+0x258>
 8001e5a:	4912      	ldr	r1, [pc, #72]	; (8001ea4 <__aeabi_dmul+0x4d4>)
 8001e5c:	0022      	movs	r2, r4
 8001e5e:	4461      	add	r1, ip
 8001e60:	002e      	movs	r6, r5
 8001e62:	408d      	lsls	r5, r1
 8001e64:	408a      	lsls	r2, r1
 8001e66:	40c6      	lsrs	r6, r0
 8001e68:	1e69      	subs	r1, r5, #1
 8001e6a:	418d      	sbcs	r5, r1
 8001e6c:	4332      	orrs	r2, r6
 8001e6e:	432a      	orrs	r2, r5
 8001e70:	40c4      	lsrs	r4, r0
 8001e72:	0753      	lsls	r3, r2, #29
 8001e74:	d0b6      	beq.n	8001de4 <__aeabi_dmul+0x414>
 8001e76:	210f      	movs	r1, #15
 8001e78:	4011      	ands	r1, r2
 8001e7a:	2904      	cmp	r1, #4
 8001e7c:	d1ac      	bne.n	8001dd8 <__aeabi_dmul+0x408>
 8001e7e:	e7b1      	b.n	8001de4 <__aeabi_dmul+0x414>
 8001e80:	0765      	lsls	r5, r4, #29
 8001e82:	0264      	lsls	r4, r4, #9
 8001e84:	0b24      	lsrs	r4, r4, #12
 8001e86:	08d2      	lsrs	r2, r2, #3
 8001e88:	4315      	orrs	r5, r2
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	e601      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	0312      	lsls	r2, r2, #12
 8001e92:	4314      	orrs	r4, r2
 8001e94:	0324      	lsls	r4, r4, #12
 8001e96:	4a01      	ldr	r2, [pc, #4]	; (8001e9c <__aeabi_dmul+0x4cc>)
 8001e98:	0b24      	lsrs	r4, r4, #12
 8001e9a:	e5fa      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	0000043e 	.word	0x0000043e
 8001ea4:	0000041e 	.word	0x0000041e

08001ea8 <__aeabi_dsub>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	4657      	mov	r7, sl
 8001eac:	464e      	mov	r6, r9
 8001eae:	4645      	mov	r5, r8
 8001eb0:	46de      	mov	lr, fp
 8001eb2:	b5e0      	push	{r5, r6, r7, lr}
 8001eb4:	001e      	movs	r6, r3
 8001eb6:	0017      	movs	r7, r2
 8001eb8:	004a      	lsls	r2, r1, #1
 8001eba:	030b      	lsls	r3, r1, #12
 8001ebc:	0d52      	lsrs	r2, r2, #21
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	0f42      	lsrs	r2, r0, #29
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	0fcd      	lsrs	r5, r1, #31
 8001ec8:	4ccd      	ldr	r4, [pc, #820]	; (8002200 <__aeabi_dsub+0x358>)
 8001eca:	0331      	lsls	r1, r6, #12
 8001ecc:	00c3      	lsls	r3, r0, #3
 8001ece:	4694      	mov	ip, r2
 8001ed0:	0070      	lsls	r0, r6, #1
 8001ed2:	0f7a      	lsrs	r2, r7, #29
 8001ed4:	0a49      	lsrs	r1, r1, #9
 8001ed6:	00ff      	lsls	r7, r7, #3
 8001ed8:	469a      	mov	sl, r3
 8001eda:	46b9      	mov	r9, r7
 8001edc:	0d40      	lsrs	r0, r0, #21
 8001ede:	0ff6      	lsrs	r6, r6, #31
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	42a0      	cmp	r0, r4
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x40>
 8001ee6:	e0b1      	b.n	800204c <__aeabi_dsub+0x1a4>
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4056      	eors	r6, r2
 8001eec:	46b3      	mov	fp, r6
 8001eee:	42b5      	cmp	r5, r6
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x4c>
 8001ef2:	e088      	b.n	8002006 <__aeabi_dsub+0x15e>
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	1a12      	subs	r2, r2, r0
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	dc00      	bgt.n	8001efe <__aeabi_dsub+0x56>
 8001efc:	e0ae      	b.n	800205c <__aeabi_dsub+0x1b4>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x5c>
 8001f02:	e0c1      	b.n	8002088 <__aeabi_dsub+0x1e0>
 8001f04:	48be      	ldr	r0, [pc, #760]	; (8002200 <__aeabi_dsub+0x358>)
 8001f06:	4580      	cmp	r8, r0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x64>
 8001f0a:	e151      	b.n	80021b0 <__aeabi_dsub+0x308>
 8001f0c:	2080      	movs	r0, #128	; 0x80
 8001f0e:	0400      	lsls	r0, r0, #16
 8001f10:	4301      	orrs	r1, r0
 8001f12:	2a38      	cmp	r2, #56	; 0x38
 8001f14:	dd00      	ble.n	8001f18 <__aeabi_dsub+0x70>
 8001f16:	e17b      	b.n	8002210 <__aeabi_dsub+0x368>
 8001f18:	2a1f      	cmp	r2, #31
 8001f1a:	dd00      	ble.n	8001f1e <__aeabi_dsub+0x76>
 8001f1c:	e1ee      	b.n	80022fc <__aeabi_dsub+0x454>
 8001f1e:	2020      	movs	r0, #32
 8001f20:	003e      	movs	r6, r7
 8001f22:	1a80      	subs	r0, r0, r2
 8001f24:	000c      	movs	r4, r1
 8001f26:	40d6      	lsrs	r6, r2
 8001f28:	40d1      	lsrs	r1, r2
 8001f2a:	4087      	lsls	r7, r0
 8001f2c:	4662      	mov	r2, ip
 8001f2e:	4084      	lsls	r4, r0
 8001f30:	1a52      	subs	r2, r2, r1
 8001f32:	1e78      	subs	r0, r7, #1
 8001f34:	4187      	sbcs	r7, r0
 8001f36:	4694      	mov	ip, r2
 8001f38:	4334      	orrs	r4, r6
 8001f3a:	4327      	orrs	r7, r4
 8001f3c:	1bdc      	subs	r4, r3, r7
 8001f3e:	42a3      	cmp	r3, r4
 8001f40:	419b      	sbcs	r3, r3
 8001f42:	4662      	mov	r2, ip
 8001f44:	425b      	negs	r3, r3
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	4699      	mov	r9, r3
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0xaa>
 8001f50:	e118      	b.n	8002184 <__aeabi_dsub+0x2dc>
 8001f52:	464b      	mov	r3, r9
 8001f54:	0258      	lsls	r0, r3, #9
 8001f56:	0a43      	lsrs	r3, r0, #9
 8001f58:	4699      	mov	r9, r3
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0xba>
 8001f60:	e137      	b.n	80021d2 <__aeabi_dsub+0x32a>
 8001f62:	4648      	mov	r0, r9
 8001f64:	f000 fc06 	bl	8002774 <__clzsi2>
 8001f68:	0001      	movs	r1, r0
 8001f6a:	3908      	subs	r1, #8
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	0022      	movs	r2, r4
 8001f70:	4648      	mov	r0, r9
 8001f72:	1a5b      	subs	r3, r3, r1
 8001f74:	40da      	lsrs	r2, r3
 8001f76:	4088      	lsls	r0, r1
 8001f78:	408c      	lsls	r4, r1
 8001f7a:	4643      	mov	r3, r8
 8001f7c:	4310      	orrs	r0, r2
 8001f7e:	4588      	cmp	r8, r1
 8001f80:	dd00      	ble.n	8001f84 <__aeabi_dsub+0xdc>
 8001f82:	e136      	b.n	80021f2 <__aeabi_dsub+0x34a>
 8001f84:	1ac9      	subs	r1, r1, r3
 8001f86:	1c4b      	adds	r3, r1, #1
 8001f88:	2b1f      	cmp	r3, #31
 8001f8a:	dd00      	ble.n	8001f8e <__aeabi_dsub+0xe6>
 8001f8c:	e0ea      	b.n	8002164 <__aeabi_dsub+0x2bc>
 8001f8e:	2220      	movs	r2, #32
 8001f90:	0026      	movs	r6, r4
 8001f92:	1ad2      	subs	r2, r2, r3
 8001f94:	0001      	movs	r1, r0
 8001f96:	4094      	lsls	r4, r2
 8001f98:	40de      	lsrs	r6, r3
 8001f9a:	40d8      	lsrs	r0, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	4091      	lsls	r1, r2
 8001fa0:	1e62      	subs	r2, r4, #1
 8001fa2:	4194      	sbcs	r4, r2
 8001fa4:	4681      	mov	r9, r0
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	4331      	orrs	r1, r6
 8001faa:	430c      	orrs	r4, r1
 8001fac:	0763      	lsls	r3, r4, #29
 8001fae:	d009      	beq.n	8001fc4 <__aeabi_dsub+0x11c>
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	4023      	ands	r3, r4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d005      	beq.n	8001fc4 <__aeabi_dsub+0x11c>
 8001fb8:	1d23      	adds	r3, r4, #4
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	41a4      	sbcs	r4, r4
 8001fbe:	4264      	negs	r4, r4
 8001fc0:	44a1      	add	r9, r4
 8001fc2:	001c      	movs	r4, r3
 8001fc4:	464b      	mov	r3, r9
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	d400      	bmi.n	8001fcc <__aeabi_dsub+0x124>
 8001fca:	e0de      	b.n	800218a <__aeabi_dsub+0x2e2>
 8001fcc:	4641      	mov	r1, r8
 8001fce:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <__aeabi_dsub+0x358>)
 8001fd0:	3101      	adds	r1, #1
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x130>
 8001fd6:	e0e7      	b.n	80021a8 <__aeabi_dsub+0x300>
 8001fd8:	464b      	mov	r3, r9
 8001fda:	488a      	ldr	r0, [pc, #552]	; (8002204 <__aeabi_dsub+0x35c>)
 8001fdc:	08e4      	lsrs	r4, r4, #3
 8001fde:	4003      	ands	r3, r0
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	0549      	lsls	r1, r1, #21
 8001fe4:	075b      	lsls	r3, r3, #29
 8001fe6:	0240      	lsls	r0, r0, #9
 8001fe8:	4323      	orrs	r3, r4
 8001fea:	0d4a      	lsrs	r2, r1, #21
 8001fec:	0b04      	lsrs	r4, r0, #12
 8001fee:	0512      	lsls	r2, r2, #20
 8001ff0:	07ed      	lsls	r5, r5, #31
 8001ff2:	4322      	orrs	r2, r4
 8001ff4:	432a      	orrs	r2, r5
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002006:	4642      	mov	r2, r8
 8002008:	1a12      	subs	r2, r2, r0
 800200a:	2a00      	cmp	r2, #0
 800200c:	dd52      	ble.n	80020b4 <__aeabi_dsub+0x20c>
 800200e:	2800      	cmp	r0, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x16c>
 8002012:	e09c      	b.n	800214e <__aeabi_dsub+0x2a6>
 8002014:	45a0      	cmp	r8, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x172>
 8002018:	e0ca      	b.n	80021b0 <__aeabi_dsub+0x308>
 800201a:	2080      	movs	r0, #128	; 0x80
 800201c:	0400      	lsls	r0, r0, #16
 800201e:	4301      	orrs	r1, r0
 8002020:	2a38      	cmp	r2, #56	; 0x38
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0x17e>
 8002024:	e149      	b.n	80022ba <__aeabi_dsub+0x412>
 8002026:	2a1f      	cmp	r2, #31
 8002028:	dc00      	bgt.n	800202c <__aeabi_dsub+0x184>
 800202a:	e197      	b.n	800235c <__aeabi_dsub+0x4b4>
 800202c:	0010      	movs	r0, r2
 800202e:	000e      	movs	r6, r1
 8002030:	3820      	subs	r0, #32
 8002032:	40c6      	lsrs	r6, r0
 8002034:	2a20      	cmp	r2, #32
 8002036:	d004      	beq.n	8002042 <__aeabi_dsub+0x19a>
 8002038:	2040      	movs	r0, #64	; 0x40
 800203a:	1a82      	subs	r2, r0, r2
 800203c:	4091      	lsls	r1, r2
 800203e:	430f      	orrs	r7, r1
 8002040:	46b9      	mov	r9, r7
 8002042:	464c      	mov	r4, r9
 8002044:	1e62      	subs	r2, r4, #1
 8002046:	4194      	sbcs	r4, r2
 8002048:	4334      	orrs	r4, r6
 800204a:	e13a      	b.n	80022c2 <__aeabi_dsub+0x41a>
 800204c:	000a      	movs	r2, r1
 800204e:	433a      	orrs	r2, r7
 8002050:	d028      	beq.n	80020a4 <__aeabi_dsub+0x1fc>
 8002052:	46b3      	mov	fp, r6
 8002054:	42b5      	cmp	r5, r6
 8002056:	d02b      	beq.n	80020b0 <__aeabi_dsub+0x208>
 8002058:	4a6b      	ldr	r2, [pc, #428]	; (8002208 <__aeabi_dsub+0x360>)
 800205a:	4442      	add	r2, r8
 800205c:	2a00      	cmp	r2, #0
 800205e:	d05d      	beq.n	800211c <__aeabi_dsub+0x274>
 8002060:	4642      	mov	r2, r8
 8002062:	4644      	mov	r4, r8
 8002064:	1a82      	subs	r2, r0, r2
 8002066:	2c00      	cmp	r4, #0
 8002068:	d000      	beq.n	800206c <__aeabi_dsub+0x1c4>
 800206a:	e0f5      	b.n	8002258 <__aeabi_dsub+0x3b0>
 800206c:	4665      	mov	r5, ip
 800206e:	431d      	orrs	r5, r3
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x1cc>
 8002072:	e19c      	b.n	80023ae <__aeabi_dsub+0x506>
 8002074:	1e55      	subs	r5, r2, #1
 8002076:	2a01      	cmp	r2, #1
 8002078:	d100      	bne.n	800207c <__aeabi_dsub+0x1d4>
 800207a:	e1fb      	b.n	8002474 <__aeabi_dsub+0x5cc>
 800207c:	4c60      	ldr	r4, [pc, #384]	; (8002200 <__aeabi_dsub+0x358>)
 800207e:	42a2      	cmp	r2, r4
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x1dc>
 8002082:	e1bd      	b.n	8002400 <__aeabi_dsub+0x558>
 8002084:	002a      	movs	r2, r5
 8002086:	e0f0      	b.n	800226a <__aeabi_dsub+0x3c2>
 8002088:	0008      	movs	r0, r1
 800208a:	4338      	orrs	r0, r7
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x1e8>
 800208e:	e0c3      	b.n	8002218 <__aeabi_dsub+0x370>
 8002090:	1e50      	subs	r0, r2, #1
 8002092:	2a01      	cmp	r2, #1
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x1f0>
 8002096:	e1a8      	b.n	80023ea <__aeabi_dsub+0x542>
 8002098:	4c59      	ldr	r4, [pc, #356]	; (8002200 <__aeabi_dsub+0x358>)
 800209a:	42a2      	cmp	r2, r4
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x1f8>
 800209e:	e087      	b.n	80021b0 <__aeabi_dsub+0x308>
 80020a0:	0002      	movs	r2, r0
 80020a2:	e736      	b.n	8001f12 <__aeabi_dsub+0x6a>
 80020a4:	2201      	movs	r2, #1
 80020a6:	4056      	eors	r6, r2
 80020a8:	46b3      	mov	fp, r6
 80020aa:	42b5      	cmp	r5, r6
 80020ac:	d000      	beq.n	80020b0 <__aeabi_dsub+0x208>
 80020ae:	e721      	b.n	8001ef4 <__aeabi_dsub+0x4c>
 80020b0:	4a55      	ldr	r2, [pc, #340]	; (8002208 <__aeabi_dsub+0x360>)
 80020b2:	4442      	add	r2, r8
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x212>
 80020b8:	e0b5      	b.n	8002226 <__aeabi_dsub+0x37e>
 80020ba:	4642      	mov	r2, r8
 80020bc:	4644      	mov	r4, r8
 80020be:	1a82      	subs	r2, r0, r2
 80020c0:	2c00      	cmp	r4, #0
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dsub+0x21e>
 80020c4:	e138      	b.n	8002338 <__aeabi_dsub+0x490>
 80020c6:	4e4e      	ldr	r6, [pc, #312]	; (8002200 <__aeabi_dsub+0x358>)
 80020c8:	42b0      	cmp	r0, r6
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x226>
 80020cc:	e1de      	b.n	800248c <__aeabi_dsub+0x5e4>
 80020ce:	2680      	movs	r6, #128	; 0x80
 80020d0:	4664      	mov	r4, ip
 80020d2:	0436      	lsls	r6, r6, #16
 80020d4:	4334      	orrs	r4, r6
 80020d6:	46a4      	mov	ip, r4
 80020d8:	2a38      	cmp	r2, #56	; 0x38
 80020da:	dd00      	ble.n	80020de <__aeabi_dsub+0x236>
 80020dc:	e196      	b.n	800240c <__aeabi_dsub+0x564>
 80020de:	2a1f      	cmp	r2, #31
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dsub+0x23c>
 80020e2:	e224      	b.n	800252e <__aeabi_dsub+0x686>
 80020e4:	2620      	movs	r6, #32
 80020e6:	1ab4      	subs	r4, r6, r2
 80020e8:	46a2      	mov	sl, r4
 80020ea:	4664      	mov	r4, ip
 80020ec:	4656      	mov	r6, sl
 80020ee:	40b4      	lsls	r4, r6
 80020f0:	46a1      	mov	r9, r4
 80020f2:	001c      	movs	r4, r3
 80020f4:	464e      	mov	r6, r9
 80020f6:	40d4      	lsrs	r4, r2
 80020f8:	4326      	orrs	r6, r4
 80020fa:	0034      	movs	r4, r6
 80020fc:	4656      	mov	r6, sl
 80020fe:	40b3      	lsls	r3, r6
 8002100:	1e5e      	subs	r6, r3, #1
 8002102:	41b3      	sbcs	r3, r6
 8002104:	431c      	orrs	r4, r3
 8002106:	4663      	mov	r3, ip
 8002108:	40d3      	lsrs	r3, r2
 800210a:	18c9      	adds	r1, r1, r3
 800210c:	19e4      	adds	r4, r4, r7
 800210e:	42bc      	cmp	r4, r7
 8002110:	41bf      	sbcs	r7, r7
 8002112:	427f      	negs	r7, r7
 8002114:	46b9      	mov	r9, r7
 8002116:	4680      	mov	r8, r0
 8002118:	4489      	add	r9, r1
 800211a:	e0d8      	b.n	80022ce <__aeabi_dsub+0x426>
 800211c:	4640      	mov	r0, r8
 800211e:	4c3b      	ldr	r4, [pc, #236]	; (800220c <__aeabi_dsub+0x364>)
 8002120:	3001      	adds	r0, #1
 8002122:	4220      	tst	r0, r4
 8002124:	d000      	beq.n	8002128 <__aeabi_dsub+0x280>
 8002126:	e0b4      	b.n	8002292 <__aeabi_dsub+0x3ea>
 8002128:	4640      	mov	r0, r8
 800212a:	2800      	cmp	r0, #0
 800212c:	d000      	beq.n	8002130 <__aeabi_dsub+0x288>
 800212e:	e144      	b.n	80023ba <__aeabi_dsub+0x512>
 8002130:	4660      	mov	r0, ip
 8002132:	4318      	orrs	r0, r3
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x290>
 8002136:	e190      	b.n	800245a <__aeabi_dsub+0x5b2>
 8002138:	0008      	movs	r0, r1
 800213a:	4338      	orrs	r0, r7
 800213c:	d000      	beq.n	8002140 <__aeabi_dsub+0x298>
 800213e:	e1aa      	b.n	8002496 <__aeabi_dsub+0x5ee>
 8002140:	4661      	mov	r1, ip
 8002142:	08db      	lsrs	r3, r3, #3
 8002144:	0749      	lsls	r1, r1, #29
 8002146:	430b      	orrs	r3, r1
 8002148:	4661      	mov	r1, ip
 800214a:	08cc      	lsrs	r4, r1, #3
 800214c:	e027      	b.n	800219e <__aeabi_dsub+0x2f6>
 800214e:	0008      	movs	r0, r1
 8002150:	4338      	orrs	r0, r7
 8002152:	d061      	beq.n	8002218 <__aeabi_dsub+0x370>
 8002154:	1e50      	subs	r0, r2, #1
 8002156:	2a01      	cmp	r2, #1
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x2b4>
 800215a:	e139      	b.n	80023d0 <__aeabi_dsub+0x528>
 800215c:	42a2      	cmp	r2, r4
 800215e:	d027      	beq.n	80021b0 <__aeabi_dsub+0x308>
 8002160:	0002      	movs	r2, r0
 8002162:	e75d      	b.n	8002020 <__aeabi_dsub+0x178>
 8002164:	0002      	movs	r2, r0
 8002166:	391f      	subs	r1, #31
 8002168:	40ca      	lsrs	r2, r1
 800216a:	0011      	movs	r1, r2
 800216c:	2b20      	cmp	r3, #32
 800216e:	d003      	beq.n	8002178 <__aeabi_dsub+0x2d0>
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	4098      	lsls	r0, r3
 8002176:	4304      	orrs	r4, r0
 8002178:	1e63      	subs	r3, r4, #1
 800217a:	419c      	sbcs	r4, r3
 800217c:	2300      	movs	r3, #0
 800217e:	4699      	mov	r9, r3
 8002180:	4698      	mov	r8, r3
 8002182:	430c      	orrs	r4, r1
 8002184:	0763      	lsls	r3, r4, #29
 8002186:	d000      	beq.n	800218a <__aeabi_dsub+0x2e2>
 8002188:	e712      	b.n	8001fb0 <__aeabi_dsub+0x108>
 800218a:	464b      	mov	r3, r9
 800218c:	464a      	mov	r2, r9
 800218e:	08e4      	lsrs	r4, r4, #3
 8002190:	075b      	lsls	r3, r3, #29
 8002192:	4323      	orrs	r3, r4
 8002194:	08d4      	lsrs	r4, r2, #3
 8002196:	4642      	mov	r2, r8
 8002198:	4919      	ldr	r1, [pc, #100]	; (8002200 <__aeabi_dsub+0x358>)
 800219a:	428a      	cmp	r2, r1
 800219c:	d00e      	beq.n	80021bc <__aeabi_dsub+0x314>
 800219e:	0324      	lsls	r4, r4, #12
 80021a0:	0552      	lsls	r2, r2, #21
 80021a2:	0b24      	lsrs	r4, r4, #12
 80021a4:	0d52      	lsrs	r2, r2, #21
 80021a6:	e722      	b.n	8001fee <__aeabi_dsub+0x146>
 80021a8:	000a      	movs	r2, r1
 80021aa:	2400      	movs	r4, #0
 80021ac:	2300      	movs	r3, #0
 80021ae:	e71e      	b.n	8001fee <__aeabi_dsub+0x146>
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	4662      	mov	r2, ip
 80021b4:	0752      	lsls	r2, r2, #29
 80021b6:	4313      	orrs	r3, r2
 80021b8:	4662      	mov	r2, ip
 80021ba:	08d4      	lsrs	r4, r2, #3
 80021bc:	001a      	movs	r2, r3
 80021be:	4322      	orrs	r2, r4
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0x31c>
 80021c2:	e1fc      	b.n	80025be <__aeabi_dsub+0x716>
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	0312      	lsls	r2, r2, #12
 80021c8:	4314      	orrs	r4, r2
 80021ca:	0324      	lsls	r4, r4, #12
 80021cc:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <__aeabi_dsub+0x358>)
 80021ce:	0b24      	lsrs	r4, r4, #12
 80021d0:	e70d      	b.n	8001fee <__aeabi_dsub+0x146>
 80021d2:	0020      	movs	r0, r4
 80021d4:	f000 face 	bl	8002774 <__clzsi2>
 80021d8:	0001      	movs	r1, r0
 80021da:	3118      	adds	r1, #24
 80021dc:	291f      	cmp	r1, #31
 80021de:	dc00      	bgt.n	80021e2 <__aeabi_dsub+0x33a>
 80021e0:	e6c4      	b.n	8001f6c <__aeabi_dsub+0xc4>
 80021e2:	3808      	subs	r0, #8
 80021e4:	4084      	lsls	r4, r0
 80021e6:	4643      	mov	r3, r8
 80021e8:	0020      	movs	r0, r4
 80021ea:	2400      	movs	r4, #0
 80021ec:	4588      	cmp	r8, r1
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dsub+0x34a>
 80021f0:	e6c8      	b.n	8001f84 <__aeabi_dsub+0xdc>
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <__aeabi_dsub+0x35c>)
 80021f4:	1a5b      	subs	r3, r3, r1
 80021f6:	4010      	ands	r0, r2
 80021f8:	4698      	mov	r8, r3
 80021fa:	4681      	mov	r9, r0
 80021fc:	e6d6      	b.n	8001fac <__aeabi_dsub+0x104>
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	000007ff 	.word	0x000007ff
 8002204:	ff7fffff 	.word	0xff7fffff
 8002208:	fffff801 	.word	0xfffff801
 800220c:	000007fe 	.word	0x000007fe
 8002210:	430f      	orrs	r7, r1
 8002212:	1e7a      	subs	r2, r7, #1
 8002214:	4197      	sbcs	r7, r2
 8002216:	e691      	b.n	8001f3c <__aeabi_dsub+0x94>
 8002218:	4661      	mov	r1, ip
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	0749      	lsls	r1, r1, #29
 800221e:	430b      	orrs	r3, r1
 8002220:	4661      	mov	r1, ip
 8002222:	08cc      	lsrs	r4, r1, #3
 8002224:	e7b8      	b.n	8002198 <__aeabi_dsub+0x2f0>
 8002226:	4640      	mov	r0, r8
 8002228:	4cd3      	ldr	r4, [pc, #844]	; (8002578 <__aeabi_dsub+0x6d0>)
 800222a:	3001      	adds	r0, #1
 800222c:	4220      	tst	r0, r4
 800222e:	d000      	beq.n	8002232 <__aeabi_dsub+0x38a>
 8002230:	e0a2      	b.n	8002378 <__aeabi_dsub+0x4d0>
 8002232:	4640      	mov	r0, r8
 8002234:	2800      	cmp	r0, #0
 8002236:	d000      	beq.n	800223a <__aeabi_dsub+0x392>
 8002238:	e101      	b.n	800243e <__aeabi_dsub+0x596>
 800223a:	4660      	mov	r0, ip
 800223c:	4318      	orrs	r0, r3
 800223e:	d100      	bne.n	8002242 <__aeabi_dsub+0x39a>
 8002240:	e15e      	b.n	8002500 <__aeabi_dsub+0x658>
 8002242:	0008      	movs	r0, r1
 8002244:	4338      	orrs	r0, r7
 8002246:	d000      	beq.n	800224a <__aeabi_dsub+0x3a2>
 8002248:	e15f      	b.n	800250a <__aeabi_dsub+0x662>
 800224a:	4661      	mov	r1, ip
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	0749      	lsls	r1, r1, #29
 8002250:	430b      	orrs	r3, r1
 8002252:	4661      	mov	r1, ip
 8002254:	08cc      	lsrs	r4, r1, #3
 8002256:	e7a2      	b.n	800219e <__aeabi_dsub+0x2f6>
 8002258:	4dc8      	ldr	r5, [pc, #800]	; (800257c <__aeabi_dsub+0x6d4>)
 800225a:	42a8      	cmp	r0, r5
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x3b8>
 800225e:	e0cf      	b.n	8002400 <__aeabi_dsub+0x558>
 8002260:	2580      	movs	r5, #128	; 0x80
 8002262:	4664      	mov	r4, ip
 8002264:	042d      	lsls	r5, r5, #16
 8002266:	432c      	orrs	r4, r5
 8002268:	46a4      	mov	ip, r4
 800226a:	2a38      	cmp	r2, #56	; 0x38
 800226c:	dc56      	bgt.n	800231c <__aeabi_dsub+0x474>
 800226e:	2a1f      	cmp	r2, #31
 8002270:	dd00      	ble.n	8002274 <__aeabi_dsub+0x3cc>
 8002272:	e0d1      	b.n	8002418 <__aeabi_dsub+0x570>
 8002274:	2520      	movs	r5, #32
 8002276:	001e      	movs	r6, r3
 8002278:	1aad      	subs	r5, r5, r2
 800227a:	4664      	mov	r4, ip
 800227c:	40ab      	lsls	r3, r5
 800227e:	40ac      	lsls	r4, r5
 8002280:	40d6      	lsrs	r6, r2
 8002282:	1e5d      	subs	r5, r3, #1
 8002284:	41ab      	sbcs	r3, r5
 8002286:	4334      	orrs	r4, r6
 8002288:	4323      	orrs	r3, r4
 800228a:	4664      	mov	r4, ip
 800228c:	40d4      	lsrs	r4, r2
 800228e:	1b09      	subs	r1, r1, r4
 8002290:	e049      	b.n	8002326 <__aeabi_dsub+0x47e>
 8002292:	4660      	mov	r0, ip
 8002294:	1bdc      	subs	r4, r3, r7
 8002296:	1a46      	subs	r6, r0, r1
 8002298:	42a3      	cmp	r3, r4
 800229a:	4180      	sbcs	r0, r0
 800229c:	4240      	negs	r0, r0
 800229e:	4681      	mov	r9, r0
 80022a0:	0030      	movs	r0, r6
 80022a2:	464e      	mov	r6, r9
 80022a4:	1b80      	subs	r0, r0, r6
 80022a6:	4681      	mov	r9, r0
 80022a8:	0200      	lsls	r0, r0, #8
 80022aa:	d476      	bmi.n	800239a <__aeabi_dsub+0x4f2>
 80022ac:	464b      	mov	r3, r9
 80022ae:	4323      	orrs	r3, r4
 80022b0:	d000      	beq.n	80022b4 <__aeabi_dsub+0x40c>
 80022b2:	e652      	b.n	8001f5a <__aeabi_dsub+0xb2>
 80022b4:	2400      	movs	r4, #0
 80022b6:	2500      	movs	r5, #0
 80022b8:	e771      	b.n	800219e <__aeabi_dsub+0x2f6>
 80022ba:	4339      	orrs	r1, r7
 80022bc:	000c      	movs	r4, r1
 80022be:	1e62      	subs	r2, r4, #1
 80022c0:	4194      	sbcs	r4, r2
 80022c2:	18e4      	adds	r4, r4, r3
 80022c4:	429c      	cmp	r4, r3
 80022c6:	419b      	sbcs	r3, r3
 80022c8:	425b      	negs	r3, r3
 80022ca:	4463      	add	r3, ip
 80022cc:	4699      	mov	r9, r3
 80022ce:	464b      	mov	r3, r9
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	d400      	bmi.n	80022d6 <__aeabi_dsub+0x42e>
 80022d4:	e756      	b.n	8002184 <__aeabi_dsub+0x2dc>
 80022d6:	2301      	movs	r3, #1
 80022d8:	469c      	mov	ip, r3
 80022da:	4ba8      	ldr	r3, [pc, #672]	; (800257c <__aeabi_dsub+0x6d4>)
 80022dc:	44e0      	add	r8, ip
 80022de:	4598      	cmp	r8, r3
 80022e0:	d038      	beq.n	8002354 <__aeabi_dsub+0x4ac>
 80022e2:	464b      	mov	r3, r9
 80022e4:	48a6      	ldr	r0, [pc, #664]	; (8002580 <__aeabi_dsub+0x6d8>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	4003      	ands	r3, r0
 80022ea:	0018      	movs	r0, r3
 80022ec:	0863      	lsrs	r3, r4, #1
 80022ee:	4014      	ands	r4, r2
 80022f0:	431c      	orrs	r4, r3
 80022f2:	07c3      	lsls	r3, r0, #31
 80022f4:	431c      	orrs	r4, r3
 80022f6:	0843      	lsrs	r3, r0, #1
 80022f8:	4699      	mov	r9, r3
 80022fa:	e657      	b.n	8001fac <__aeabi_dsub+0x104>
 80022fc:	0010      	movs	r0, r2
 80022fe:	000e      	movs	r6, r1
 8002300:	3820      	subs	r0, #32
 8002302:	40c6      	lsrs	r6, r0
 8002304:	2a20      	cmp	r2, #32
 8002306:	d004      	beq.n	8002312 <__aeabi_dsub+0x46a>
 8002308:	2040      	movs	r0, #64	; 0x40
 800230a:	1a82      	subs	r2, r0, r2
 800230c:	4091      	lsls	r1, r2
 800230e:	430f      	orrs	r7, r1
 8002310:	46b9      	mov	r9, r7
 8002312:	464f      	mov	r7, r9
 8002314:	1e7a      	subs	r2, r7, #1
 8002316:	4197      	sbcs	r7, r2
 8002318:	4337      	orrs	r7, r6
 800231a:	e60f      	b.n	8001f3c <__aeabi_dsub+0x94>
 800231c:	4662      	mov	r2, ip
 800231e:	431a      	orrs	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	1e5a      	subs	r2, r3, #1
 8002324:	4193      	sbcs	r3, r2
 8002326:	1afc      	subs	r4, r7, r3
 8002328:	42a7      	cmp	r7, r4
 800232a:	41bf      	sbcs	r7, r7
 800232c:	427f      	negs	r7, r7
 800232e:	1bcb      	subs	r3, r1, r7
 8002330:	4699      	mov	r9, r3
 8002332:	465d      	mov	r5, fp
 8002334:	4680      	mov	r8, r0
 8002336:	e608      	b.n	8001f4a <__aeabi_dsub+0xa2>
 8002338:	4666      	mov	r6, ip
 800233a:	431e      	orrs	r6, r3
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x498>
 800233e:	e0be      	b.n	80024be <__aeabi_dsub+0x616>
 8002340:	1e56      	subs	r6, r2, #1
 8002342:	2a01      	cmp	r2, #1
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x4a0>
 8002346:	e109      	b.n	800255c <__aeabi_dsub+0x6b4>
 8002348:	4c8c      	ldr	r4, [pc, #560]	; (800257c <__aeabi_dsub+0x6d4>)
 800234a:	42a2      	cmp	r2, r4
 800234c:	d100      	bne.n	8002350 <__aeabi_dsub+0x4a8>
 800234e:	e119      	b.n	8002584 <__aeabi_dsub+0x6dc>
 8002350:	0032      	movs	r2, r6
 8002352:	e6c1      	b.n	80020d8 <__aeabi_dsub+0x230>
 8002354:	4642      	mov	r2, r8
 8002356:	2400      	movs	r4, #0
 8002358:	2300      	movs	r3, #0
 800235a:	e648      	b.n	8001fee <__aeabi_dsub+0x146>
 800235c:	2020      	movs	r0, #32
 800235e:	000c      	movs	r4, r1
 8002360:	1a80      	subs	r0, r0, r2
 8002362:	003e      	movs	r6, r7
 8002364:	4087      	lsls	r7, r0
 8002366:	4084      	lsls	r4, r0
 8002368:	40d6      	lsrs	r6, r2
 800236a:	1e78      	subs	r0, r7, #1
 800236c:	4187      	sbcs	r7, r0
 800236e:	40d1      	lsrs	r1, r2
 8002370:	4334      	orrs	r4, r6
 8002372:	433c      	orrs	r4, r7
 8002374:	448c      	add	ip, r1
 8002376:	e7a4      	b.n	80022c2 <__aeabi_dsub+0x41a>
 8002378:	4a80      	ldr	r2, [pc, #512]	; (800257c <__aeabi_dsub+0x6d4>)
 800237a:	4290      	cmp	r0, r2
 800237c:	d100      	bne.n	8002380 <__aeabi_dsub+0x4d8>
 800237e:	e0e9      	b.n	8002554 <__aeabi_dsub+0x6ac>
 8002380:	19df      	adds	r7, r3, r7
 8002382:	429f      	cmp	r7, r3
 8002384:	419b      	sbcs	r3, r3
 8002386:	4461      	add	r1, ip
 8002388:	425b      	negs	r3, r3
 800238a:	18c9      	adds	r1, r1, r3
 800238c:	07cc      	lsls	r4, r1, #31
 800238e:	087f      	lsrs	r7, r7, #1
 8002390:	084b      	lsrs	r3, r1, #1
 8002392:	4699      	mov	r9, r3
 8002394:	4680      	mov	r8, r0
 8002396:	433c      	orrs	r4, r7
 8002398:	e6f4      	b.n	8002184 <__aeabi_dsub+0x2dc>
 800239a:	1afc      	subs	r4, r7, r3
 800239c:	42a7      	cmp	r7, r4
 800239e:	41bf      	sbcs	r7, r7
 80023a0:	4663      	mov	r3, ip
 80023a2:	427f      	negs	r7, r7
 80023a4:	1ac9      	subs	r1, r1, r3
 80023a6:	1bcb      	subs	r3, r1, r7
 80023a8:	4699      	mov	r9, r3
 80023aa:	465d      	mov	r5, fp
 80023ac:	e5d5      	b.n	8001f5a <__aeabi_dsub+0xb2>
 80023ae:	08ff      	lsrs	r7, r7, #3
 80023b0:	074b      	lsls	r3, r1, #29
 80023b2:	465d      	mov	r5, fp
 80023b4:	433b      	orrs	r3, r7
 80023b6:	08cc      	lsrs	r4, r1, #3
 80023b8:	e6ee      	b.n	8002198 <__aeabi_dsub+0x2f0>
 80023ba:	4662      	mov	r2, ip
 80023bc:	431a      	orrs	r2, r3
 80023be:	d000      	beq.n	80023c2 <__aeabi_dsub+0x51a>
 80023c0:	e082      	b.n	80024c8 <__aeabi_dsub+0x620>
 80023c2:	000b      	movs	r3, r1
 80023c4:	433b      	orrs	r3, r7
 80023c6:	d11b      	bne.n	8002400 <__aeabi_dsub+0x558>
 80023c8:	2480      	movs	r4, #128	; 0x80
 80023ca:	2500      	movs	r5, #0
 80023cc:	0324      	lsls	r4, r4, #12
 80023ce:	e6f9      	b.n	80021c4 <__aeabi_dsub+0x31c>
 80023d0:	19dc      	adds	r4, r3, r7
 80023d2:	429c      	cmp	r4, r3
 80023d4:	419b      	sbcs	r3, r3
 80023d6:	4461      	add	r1, ip
 80023d8:	4689      	mov	r9, r1
 80023da:	425b      	negs	r3, r3
 80023dc:	4499      	add	r9, r3
 80023de:	464b      	mov	r3, r9
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	d444      	bmi.n	800246e <__aeabi_dsub+0x5c6>
 80023e4:	2301      	movs	r3, #1
 80023e6:	4698      	mov	r8, r3
 80023e8:	e6cc      	b.n	8002184 <__aeabi_dsub+0x2dc>
 80023ea:	1bdc      	subs	r4, r3, r7
 80023ec:	4662      	mov	r2, ip
 80023ee:	42a3      	cmp	r3, r4
 80023f0:	419b      	sbcs	r3, r3
 80023f2:	1a51      	subs	r1, r2, r1
 80023f4:	425b      	negs	r3, r3
 80023f6:	1acb      	subs	r3, r1, r3
 80023f8:	4699      	mov	r9, r3
 80023fa:	2301      	movs	r3, #1
 80023fc:	4698      	mov	r8, r3
 80023fe:	e5a4      	b.n	8001f4a <__aeabi_dsub+0xa2>
 8002400:	08ff      	lsrs	r7, r7, #3
 8002402:	074b      	lsls	r3, r1, #29
 8002404:	465d      	mov	r5, fp
 8002406:	433b      	orrs	r3, r7
 8002408:	08cc      	lsrs	r4, r1, #3
 800240a:	e6d7      	b.n	80021bc <__aeabi_dsub+0x314>
 800240c:	4662      	mov	r2, ip
 800240e:	431a      	orrs	r2, r3
 8002410:	0014      	movs	r4, r2
 8002412:	1e63      	subs	r3, r4, #1
 8002414:	419c      	sbcs	r4, r3
 8002416:	e679      	b.n	800210c <__aeabi_dsub+0x264>
 8002418:	0015      	movs	r5, r2
 800241a:	4664      	mov	r4, ip
 800241c:	3d20      	subs	r5, #32
 800241e:	40ec      	lsrs	r4, r5
 8002420:	46a0      	mov	r8, r4
 8002422:	2a20      	cmp	r2, #32
 8002424:	d005      	beq.n	8002432 <__aeabi_dsub+0x58a>
 8002426:	2540      	movs	r5, #64	; 0x40
 8002428:	4664      	mov	r4, ip
 800242a:	1aaa      	subs	r2, r5, r2
 800242c:	4094      	lsls	r4, r2
 800242e:	4323      	orrs	r3, r4
 8002430:	469a      	mov	sl, r3
 8002432:	4654      	mov	r4, sl
 8002434:	1e63      	subs	r3, r4, #1
 8002436:	419c      	sbcs	r4, r3
 8002438:	4643      	mov	r3, r8
 800243a:	4323      	orrs	r3, r4
 800243c:	e773      	b.n	8002326 <__aeabi_dsub+0x47e>
 800243e:	4662      	mov	r2, ip
 8002440:	431a      	orrs	r2, r3
 8002442:	d023      	beq.n	800248c <__aeabi_dsub+0x5e4>
 8002444:	000a      	movs	r2, r1
 8002446:	433a      	orrs	r2, r7
 8002448:	d000      	beq.n	800244c <__aeabi_dsub+0x5a4>
 800244a:	e0a0      	b.n	800258e <__aeabi_dsub+0x6e6>
 800244c:	4662      	mov	r2, ip
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	0752      	lsls	r2, r2, #29
 8002452:	4313      	orrs	r3, r2
 8002454:	4662      	mov	r2, ip
 8002456:	08d4      	lsrs	r4, r2, #3
 8002458:	e6b0      	b.n	80021bc <__aeabi_dsub+0x314>
 800245a:	000b      	movs	r3, r1
 800245c:	433b      	orrs	r3, r7
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x5ba>
 8002460:	e728      	b.n	80022b4 <__aeabi_dsub+0x40c>
 8002462:	08ff      	lsrs	r7, r7, #3
 8002464:	074b      	lsls	r3, r1, #29
 8002466:	465d      	mov	r5, fp
 8002468:	433b      	orrs	r3, r7
 800246a:	08cc      	lsrs	r4, r1, #3
 800246c:	e697      	b.n	800219e <__aeabi_dsub+0x2f6>
 800246e:	2302      	movs	r3, #2
 8002470:	4698      	mov	r8, r3
 8002472:	e736      	b.n	80022e2 <__aeabi_dsub+0x43a>
 8002474:	1afc      	subs	r4, r7, r3
 8002476:	42a7      	cmp	r7, r4
 8002478:	41bf      	sbcs	r7, r7
 800247a:	4663      	mov	r3, ip
 800247c:	427f      	negs	r7, r7
 800247e:	1ac9      	subs	r1, r1, r3
 8002480:	1bcb      	subs	r3, r1, r7
 8002482:	4699      	mov	r9, r3
 8002484:	2301      	movs	r3, #1
 8002486:	465d      	mov	r5, fp
 8002488:	4698      	mov	r8, r3
 800248a:	e55e      	b.n	8001f4a <__aeabi_dsub+0xa2>
 800248c:	074b      	lsls	r3, r1, #29
 800248e:	08ff      	lsrs	r7, r7, #3
 8002490:	433b      	orrs	r3, r7
 8002492:	08cc      	lsrs	r4, r1, #3
 8002494:	e692      	b.n	80021bc <__aeabi_dsub+0x314>
 8002496:	1bdc      	subs	r4, r3, r7
 8002498:	4660      	mov	r0, ip
 800249a:	42a3      	cmp	r3, r4
 800249c:	41b6      	sbcs	r6, r6
 800249e:	1a40      	subs	r0, r0, r1
 80024a0:	4276      	negs	r6, r6
 80024a2:	1b80      	subs	r0, r0, r6
 80024a4:	4681      	mov	r9, r0
 80024a6:	0200      	lsls	r0, r0, #8
 80024a8:	d560      	bpl.n	800256c <__aeabi_dsub+0x6c4>
 80024aa:	1afc      	subs	r4, r7, r3
 80024ac:	42a7      	cmp	r7, r4
 80024ae:	41bf      	sbcs	r7, r7
 80024b0:	4663      	mov	r3, ip
 80024b2:	427f      	negs	r7, r7
 80024b4:	1ac9      	subs	r1, r1, r3
 80024b6:	1bcb      	subs	r3, r1, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	465d      	mov	r5, fp
 80024bc:	e576      	b.n	8001fac <__aeabi_dsub+0x104>
 80024be:	08ff      	lsrs	r7, r7, #3
 80024c0:	074b      	lsls	r3, r1, #29
 80024c2:	433b      	orrs	r3, r7
 80024c4:	08cc      	lsrs	r4, r1, #3
 80024c6:	e667      	b.n	8002198 <__aeabi_dsub+0x2f0>
 80024c8:	000a      	movs	r2, r1
 80024ca:	08db      	lsrs	r3, r3, #3
 80024cc:	433a      	orrs	r2, r7
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dsub+0x62a>
 80024d0:	e66f      	b.n	80021b2 <__aeabi_dsub+0x30a>
 80024d2:	4662      	mov	r2, ip
 80024d4:	0752      	lsls	r2, r2, #29
 80024d6:	4313      	orrs	r3, r2
 80024d8:	4662      	mov	r2, ip
 80024da:	08d4      	lsrs	r4, r2, #3
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	0312      	lsls	r2, r2, #12
 80024e0:	4214      	tst	r4, r2
 80024e2:	d007      	beq.n	80024f4 <__aeabi_dsub+0x64c>
 80024e4:	08c8      	lsrs	r0, r1, #3
 80024e6:	4210      	tst	r0, r2
 80024e8:	d104      	bne.n	80024f4 <__aeabi_dsub+0x64c>
 80024ea:	465d      	mov	r5, fp
 80024ec:	0004      	movs	r4, r0
 80024ee:	08fb      	lsrs	r3, r7, #3
 80024f0:	0749      	lsls	r1, r1, #29
 80024f2:	430b      	orrs	r3, r1
 80024f4:	0f5a      	lsrs	r2, r3, #29
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	0752      	lsls	r2, r2, #29
 80024fc:	4313      	orrs	r3, r2
 80024fe:	e65d      	b.n	80021bc <__aeabi_dsub+0x314>
 8002500:	074b      	lsls	r3, r1, #29
 8002502:	08ff      	lsrs	r7, r7, #3
 8002504:	433b      	orrs	r3, r7
 8002506:	08cc      	lsrs	r4, r1, #3
 8002508:	e649      	b.n	800219e <__aeabi_dsub+0x2f6>
 800250a:	19dc      	adds	r4, r3, r7
 800250c:	429c      	cmp	r4, r3
 800250e:	419b      	sbcs	r3, r3
 8002510:	4461      	add	r1, ip
 8002512:	4689      	mov	r9, r1
 8002514:	425b      	negs	r3, r3
 8002516:	4499      	add	r9, r3
 8002518:	464b      	mov	r3, r9
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	d400      	bmi.n	8002520 <__aeabi_dsub+0x678>
 800251e:	e631      	b.n	8002184 <__aeabi_dsub+0x2dc>
 8002520:	464a      	mov	r2, r9
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <__aeabi_dsub+0x6d8>)
 8002524:	401a      	ands	r2, r3
 8002526:	2301      	movs	r3, #1
 8002528:	4691      	mov	r9, r2
 800252a:	4698      	mov	r8, r3
 800252c:	e62a      	b.n	8002184 <__aeabi_dsub+0x2dc>
 800252e:	0016      	movs	r6, r2
 8002530:	4664      	mov	r4, ip
 8002532:	3e20      	subs	r6, #32
 8002534:	40f4      	lsrs	r4, r6
 8002536:	46a0      	mov	r8, r4
 8002538:	2a20      	cmp	r2, #32
 800253a:	d005      	beq.n	8002548 <__aeabi_dsub+0x6a0>
 800253c:	2640      	movs	r6, #64	; 0x40
 800253e:	4664      	mov	r4, ip
 8002540:	1ab2      	subs	r2, r6, r2
 8002542:	4094      	lsls	r4, r2
 8002544:	4323      	orrs	r3, r4
 8002546:	469a      	mov	sl, r3
 8002548:	4654      	mov	r4, sl
 800254a:	1e63      	subs	r3, r4, #1
 800254c:	419c      	sbcs	r4, r3
 800254e:	4643      	mov	r3, r8
 8002550:	431c      	orrs	r4, r3
 8002552:	e5db      	b.n	800210c <__aeabi_dsub+0x264>
 8002554:	0002      	movs	r2, r0
 8002556:	2400      	movs	r4, #0
 8002558:	2300      	movs	r3, #0
 800255a:	e548      	b.n	8001fee <__aeabi_dsub+0x146>
 800255c:	19dc      	adds	r4, r3, r7
 800255e:	42bc      	cmp	r4, r7
 8002560:	41bf      	sbcs	r7, r7
 8002562:	4461      	add	r1, ip
 8002564:	4689      	mov	r9, r1
 8002566:	427f      	negs	r7, r7
 8002568:	44b9      	add	r9, r7
 800256a:	e738      	b.n	80023de <__aeabi_dsub+0x536>
 800256c:	464b      	mov	r3, r9
 800256e:	4323      	orrs	r3, r4
 8002570:	d100      	bne.n	8002574 <__aeabi_dsub+0x6cc>
 8002572:	e69f      	b.n	80022b4 <__aeabi_dsub+0x40c>
 8002574:	e606      	b.n	8002184 <__aeabi_dsub+0x2dc>
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	000007fe 	.word	0x000007fe
 800257c:	000007ff 	.word	0x000007ff
 8002580:	ff7fffff 	.word	0xff7fffff
 8002584:	08ff      	lsrs	r7, r7, #3
 8002586:	074b      	lsls	r3, r1, #29
 8002588:	433b      	orrs	r3, r7
 800258a:	08cc      	lsrs	r4, r1, #3
 800258c:	e616      	b.n	80021bc <__aeabi_dsub+0x314>
 800258e:	4662      	mov	r2, ip
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	0752      	lsls	r2, r2, #29
 8002594:	4313      	orrs	r3, r2
 8002596:	4662      	mov	r2, ip
 8002598:	08d4      	lsrs	r4, r2, #3
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	0312      	lsls	r2, r2, #12
 800259e:	4214      	tst	r4, r2
 80025a0:	d007      	beq.n	80025b2 <__aeabi_dsub+0x70a>
 80025a2:	08c8      	lsrs	r0, r1, #3
 80025a4:	4210      	tst	r0, r2
 80025a6:	d104      	bne.n	80025b2 <__aeabi_dsub+0x70a>
 80025a8:	465d      	mov	r5, fp
 80025aa:	0004      	movs	r4, r0
 80025ac:	08fb      	lsrs	r3, r7, #3
 80025ae:	0749      	lsls	r1, r1, #29
 80025b0:	430b      	orrs	r3, r1
 80025b2:	0f5a      	lsrs	r2, r3, #29
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	0752      	lsls	r2, r2, #29
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	e5fe      	b.n	80021bc <__aeabi_dsub+0x314>
 80025be:	2300      	movs	r3, #0
 80025c0:	4a01      	ldr	r2, [pc, #4]	; (80025c8 <__aeabi_dsub+0x720>)
 80025c2:	001c      	movs	r4, r3
 80025c4:	e513      	b.n	8001fee <__aeabi_dsub+0x146>
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	000007ff 	.word	0x000007ff

080025cc <__aeabi_d2iz>:
 80025cc:	000a      	movs	r2, r1
 80025ce:	b530      	push	{r4, r5, lr}
 80025d0:	4c13      	ldr	r4, [pc, #76]	; (8002620 <__aeabi_d2iz+0x54>)
 80025d2:	0053      	lsls	r3, r2, #1
 80025d4:	0309      	lsls	r1, r1, #12
 80025d6:	0005      	movs	r5, r0
 80025d8:	0b09      	lsrs	r1, r1, #12
 80025da:	2000      	movs	r0, #0
 80025dc:	0d5b      	lsrs	r3, r3, #21
 80025de:	0fd2      	lsrs	r2, r2, #31
 80025e0:	42a3      	cmp	r3, r4
 80025e2:	dd04      	ble.n	80025ee <__aeabi_d2iz+0x22>
 80025e4:	480f      	ldr	r0, [pc, #60]	; (8002624 <__aeabi_d2iz+0x58>)
 80025e6:	4283      	cmp	r3, r0
 80025e8:	dd02      	ble.n	80025f0 <__aeabi_d2iz+0x24>
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <__aeabi_d2iz+0x5c>)
 80025ec:	18d0      	adds	r0, r2, r3
 80025ee:	bd30      	pop	{r4, r5, pc}
 80025f0:	2080      	movs	r0, #128	; 0x80
 80025f2:	0340      	lsls	r0, r0, #13
 80025f4:	4301      	orrs	r1, r0
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <__aeabi_d2iz+0x60>)
 80025f8:	1ac0      	subs	r0, r0, r3
 80025fa:	281f      	cmp	r0, #31
 80025fc:	dd08      	ble.n	8002610 <__aeabi_d2iz+0x44>
 80025fe:	480c      	ldr	r0, [pc, #48]	; (8002630 <__aeabi_d2iz+0x64>)
 8002600:	1ac3      	subs	r3, r0, r3
 8002602:	40d9      	lsrs	r1, r3
 8002604:	000b      	movs	r3, r1
 8002606:	4258      	negs	r0, r3
 8002608:	2a00      	cmp	r2, #0
 800260a:	d1f0      	bne.n	80025ee <__aeabi_d2iz+0x22>
 800260c:	0018      	movs	r0, r3
 800260e:	e7ee      	b.n	80025ee <__aeabi_d2iz+0x22>
 8002610:	4c08      	ldr	r4, [pc, #32]	; (8002634 <__aeabi_d2iz+0x68>)
 8002612:	40c5      	lsrs	r5, r0
 8002614:	46a4      	mov	ip, r4
 8002616:	4463      	add	r3, ip
 8002618:	4099      	lsls	r1, r3
 800261a:	000b      	movs	r3, r1
 800261c:	432b      	orrs	r3, r5
 800261e:	e7f2      	b.n	8002606 <__aeabi_d2iz+0x3a>
 8002620:	000003fe 	.word	0x000003fe
 8002624:	0000041d 	.word	0x0000041d
 8002628:	7fffffff 	.word	0x7fffffff
 800262c:	00000433 	.word	0x00000433
 8002630:	00000413 	.word	0x00000413
 8002634:	fffffbed 	.word	0xfffffbed

08002638 <__aeabi_i2d>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	2800      	cmp	r0, #0
 800263c:	d016      	beq.n	800266c <__aeabi_i2d+0x34>
 800263e:	17c3      	asrs	r3, r0, #31
 8002640:	18c5      	adds	r5, r0, r3
 8002642:	405d      	eors	r5, r3
 8002644:	0fc4      	lsrs	r4, r0, #31
 8002646:	0028      	movs	r0, r5
 8002648:	f000 f894 	bl	8002774 <__clzsi2>
 800264c:	4a11      	ldr	r2, [pc, #68]	; (8002694 <__aeabi_i2d+0x5c>)
 800264e:	1a12      	subs	r2, r2, r0
 8002650:	280a      	cmp	r0, #10
 8002652:	dc16      	bgt.n	8002682 <__aeabi_i2d+0x4a>
 8002654:	0003      	movs	r3, r0
 8002656:	002e      	movs	r6, r5
 8002658:	3315      	adds	r3, #21
 800265a:	409e      	lsls	r6, r3
 800265c:	230b      	movs	r3, #11
 800265e:	1a18      	subs	r0, r3, r0
 8002660:	40c5      	lsrs	r5, r0
 8002662:	0552      	lsls	r2, r2, #21
 8002664:	032d      	lsls	r5, r5, #12
 8002666:	0b2d      	lsrs	r5, r5, #12
 8002668:	0d53      	lsrs	r3, r2, #21
 800266a:	e003      	b.n	8002674 <__aeabi_i2d+0x3c>
 800266c:	2400      	movs	r4, #0
 800266e:	2300      	movs	r3, #0
 8002670:	2500      	movs	r5, #0
 8002672:	2600      	movs	r6, #0
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	432b      	orrs	r3, r5
 8002678:	07e4      	lsls	r4, r4, #31
 800267a:	4323      	orrs	r3, r4
 800267c:	0030      	movs	r0, r6
 800267e:	0019      	movs	r1, r3
 8002680:	bd70      	pop	{r4, r5, r6, pc}
 8002682:	380b      	subs	r0, #11
 8002684:	4085      	lsls	r5, r0
 8002686:	0552      	lsls	r2, r2, #21
 8002688:	032d      	lsls	r5, r5, #12
 800268a:	2600      	movs	r6, #0
 800268c:	0b2d      	lsrs	r5, r5, #12
 800268e:	0d53      	lsrs	r3, r2, #21
 8002690:	e7f0      	b.n	8002674 <__aeabi_i2d+0x3c>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	0000041e 	.word	0x0000041e

08002698 <__aeabi_ui2d>:
 8002698:	b510      	push	{r4, lr}
 800269a:	1e04      	subs	r4, r0, #0
 800269c:	d010      	beq.n	80026c0 <__aeabi_ui2d+0x28>
 800269e:	f000 f869 	bl	8002774 <__clzsi2>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <__aeabi_ui2d+0x48>)
 80026a4:	1a1b      	subs	r3, r3, r0
 80026a6:	280a      	cmp	r0, #10
 80026a8:	dc11      	bgt.n	80026ce <__aeabi_ui2d+0x36>
 80026aa:	220b      	movs	r2, #11
 80026ac:	0021      	movs	r1, r4
 80026ae:	1a12      	subs	r2, r2, r0
 80026b0:	40d1      	lsrs	r1, r2
 80026b2:	3015      	adds	r0, #21
 80026b4:	030a      	lsls	r2, r1, #12
 80026b6:	055b      	lsls	r3, r3, #21
 80026b8:	4084      	lsls	r4, r0
 80026ba:	0b12      	lsrs	r2, r2, #12
 80026bc:	0d5b      	lsrs	r3, r3, #21
 80026be:	e001      	b.n	80026c4 <__aeabi_ui2d+0x2c>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2200      	movs	r2, #0
 80026c4:	051b      	lsls	r3, r3, #20
 80026c6:	4313      	orrs	r3, r2
 80026c8:	0020      	movs	r0, r4
 80026ca:	0019      	movs	r1, r3
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	0022      	movs	r2, r4
 80026d0:	380b      	subs	r0, #11
 80026d2:	4082      	lsls	r2, r0
 80026d4:	055b      	lsls	r3, r3, #21
 80026d6:	0312      	lsls	r2, r2, #12
 80026d8:	2400      	movs	r4, #0
 80026da:	0b12      	lsrs	r2, r2, #12
 80026dc:	0d5b      	lsrs	r3, r3, #21
 80026de:	e7f1      	b.n	80026c4 <__aeabi_ui2d+0x2c>
 80026e0:	0000041e 	.word	0x0000041e

080026e4 <__aeabi_f2d>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	0043      	lsls	r3, r0, #1
 80026e8:	0246      	lsls	r6, r0, #9
 80026ea:	0fc4      	lsrs	r4, r0, #31
 80026ec:	20fe      	movs	r0, #254	; 0xfe
 80026ee:	0e1b      	lsrs	r3, r3, #24
 80026f0:	1c59      	adds	r1, r3, #1
 80026f2:	0a75      	lsrs	r5, r6, #9
 80026f4:	4208      	tst	r0, r1
 80026f6:	d00c      	beq.n	8002712 <__aeabi_f2d+0x2e>
 80026f8:	22e0      	movs	r2, #224	; 0xe0
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4694      	mov	ip, r2
 80026fe:	076d      	lsls	r5, r5, #29
 8002700:	0b36      	lsrs	r6, r6, #12
 8002702:	4463      	add	r3, ip
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	4333      	orrs	r3, r6
 8002708:	07e4      	lsls	r4, r4, #31
 800270a:	4323      	orrs	r3, r4
 800270c:	0028      	movs	r0, r5
 800270e:	0019      	movs	r1, r3
 8002710:	bd70      	pop	{r4, r5, r6, pc}
 8002712:	2b00      	cmp	r3, #0
 8002714:	d114      	bne.n	8002740 <__aeabi_f2d+0x5c>
 8002716:	2d00      	cmp	r5, #0
 8002718:	d01b      	beq.n	8002752 <__aeabi_f2d+0x6e>
 800271a:	0028      	movs	r0, r5
 800271c:	f000 f82a 	bl	8002774 <__clzsi2>
 8002720:	280a      	cmp	r0, #10
 8002722:	dc1c      	bgt.n	800275e <__aeabi_f2d+0x7a>
 8002724:	230b      	movs	r3, #11
 8002726:	002e      	movs	r6, r5
 8002728:	1a1b      	subs	r3, r3, r0
 800272a:	40de      	lsrs	r6, r3
 800272c:	0003      	movs	r3, r0
 800272e:	3315      	adds	r3, #21
 8002730:	409d      	lsls	r5, r3
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <__aeabi_f2d+0x88>)
 8002734:	0336      	lsls	r6, r6, #12
 8002736:	1a12      	subs	r2, r2, r0
 8002738:	0552      	lsls	r2, r2, #21
 800273a:	0b36      	lsrs	r6, r6, #12
 800273c:	0d53      	lsrs	r3, r2, #21
 800273e:	e7e1      	b.n	8002704 <__aeabi_f2d+0x20>
 8002740:	2d00      	cmp	r5, #0
 8002742:	d009      	beq.n	8002758 <__aeabi_f2d+0x74>
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	0b36      	lsrs	r6, r6, #12
 8002748:	0312      	lsls	r2, r2, #12
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <__aeabi_f2d+0x8c>)
 800274c:	076d      	lsls	r5, r5, #29
 800274e:	4316      	orrs	r6, r2
 8002750:	e7d8      	b.n	8002704 <__aeabi_f2d+0x20>
 8002752:	2300      	movs	r3, #0
 8002754:	2600      	movs	r6, #0
 8002756:	e7d5      	b.n	8002704 <__aeabi_f2d+0x20>
 8002758:	2600      	movs	r6, #0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <__aeabi_f2d+0x8c>)
 800275c:	e7d2      	b.n	8002704 <__aeabi_f2d+0x20>
 800275e:	0003      	movs	r3, r0
 8002760:	3b0b      	subs	r3, #11
 8002762:	409d      	lsls	r5, r3
 8002764:	002e      	movs	r6, r5
 8002766:	2500      	movs	r5, #0
 8002768:	e7e3      	b.n	8002732 <__aeabi_f2d+0x4e>
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	00000389 	.word	0x00000389
 8002770:	000007ff 	.word	0x000007ff

08002774 <__clzsi2>:
 8002774:	211c      	movs	r1, #28
 8002776:	2301      	movs	r3, #1
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	4298      	cmp	r0, r3
 800277c:	d301      	bcc.n	8002782 <__clzsi2+0xe>
 800277e:	0c00      	lsrs	r0, r0, #16
 8002780:	3910      	subs	r1, #16
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	4298      	cmp	r0, r3
 8002786:	d301      	bcc.n	800278c <__clzsi2+0x18>
 8002788:	0a00      	lsrs	r0, r0, #8
 800278a:	3908      	subs	r1, #8
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	4298      	cmp	r0, r3
 8002790:	d301      	bcc.n	8002796 <__clzsi2+0x22>
 8002792:	0900      	lsrs	r0, r0, #4
 8002794:	3904      	subs	r1, #4
 8002796:	a202      	add	r2, pc, #8	; (adr r2, 80027a0 <__clzsi2+0x2c>)
 8002798:	5c10      	ldrb	r0, [r2, r0]
 800279a:	1840      	adds	r0, r0, r1
 800279c:	4770      	bx	lr
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	02020304 	.word	0x02020304
 80027a4:	01010101 	.word	0x01010101
	...

080027b0 <__clzdi2>:
 80027b0:	b510      	push	{r4, lr}
 80027b2:	2900      	cmp	r1, #0
 80027b4:	d103      	bne.n	80027be <__clzdi2+0xe>
 80027b6:	f7ff ffdd 	bl	8002774 <__clzsi2>
 80027ba:	3020      	adds	r0, #32
 80027bc:	e002      	b.n	80027c4 <__clzdi2+0x14>
 80027be:	0008      	movs	r0, r1
 80027c0:	f7ff ffd8 	bl	8002774 <__clzsi2>
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)

080027c8 <__divdi3>:
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	4657      	mov	r7, sl
 80027cc:	464e      	mov	r6, r9
 80027ce:	4645      	mov	r5, r8
 80027d0:	46de      	mov	lr, fp
 80027d2:	b5e0      	push	{r5, r6, r7, lr}
 80027d4:	000f      	movs	r7, r1
 80027d6:	0019      	movs	r1, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	0006      	movs	r6, r0
 80027dc:	4698      	mov	r8, r3
 80027de:	0010      	movs	r0, r2
 80027e0:	b083      	sub	sp, #12
 80027e2:	2f00      	cmp	r7, #0
 80027e4:	da07      	bge.n	80027f6 <__divdi3+0x2e>
 80027e6:	0033      	movs	r3, r6
 80027e8:	003c      	movs	r4, r7
 80027ea:	2700      	movs	r7, #0
 80027ec:	425e      	negs	r6, r3
 80027ee:	41a7      	sbcs	r7, r4
 80027f0:	2301      	movs	r3, #1
 80027f2:	425b      	negs	r3, r3
 80027f4:	4698      	mov	r8, r3
 80027f6:	2900      	cmp	r1, #0
 80027f8:	da07      	bge.n	800280a <__divdi3+0x42>
 80027fa:	4643      	mov	r3, r8
 80027fc:	43db      	mvns	r3, r3
 80027fe:	000c      	movs	r4, r1
 8002800:	4698      	mov	r8, r3
 8002802:	0003      	movs	r3, r0
 8002804:	2100      	movs	r1, #0
 8002806:	4258      	negs	r0, r3
 8002808:	41a1      	sbcs	r1, r4
 800280a:	0034      	movs	r4, r6
 800280c:	003d      	movs	r5, r7
 800280e:	4682      	mov	sl, r0
 8002810:	4689      	mov	r9, r1
 8002812:	42b9      	cmp	r1, r7
 8002814:	d86a      	bhi.n	80028ec <__divdi3+0x124>
 8002816:	d067      	beq.n	80028e8 <__divdi3+0x120>
 8002818:	4649      	mov	r1, r9
 800281a:	4650      	mov	r0, sl
 800281c:	f7ff ffc8 	bl	80027b0 <__clzdi2>
 8002820:	4683      	mov	fp, r0
 8002822:	0039      	movs	r1, r7
 8002824:	0030      	movs	r0, r6
 8002826:	f7ff ffc3 	bl	80027b0 <__clzdi2>
 800282a:	465b      	mov	r3, fp
 800282c:	1a1b      	subs	r3, r3, r0
 800282e:	469c      	mov	ip, r3
 8002830:	3b20      	subs	r3, #32
 8002832:	469b      	mov	fp, r3
 8002834:	d46b      	bmi.n	800290e <__divdi3+0x146>
 8002836:	4658      	mov	r0, fp
 8002838:	4651      	mov	r1, sl
 800283a:	4081      	lsls	r1, r0
 800283c:	4660      	mov	r0, ip
 800283e:	000b      	movs	r3, r1
 8002840:	4651      	mov	r1, sl
 8002842:	4081      	lsls	r1, r0
 8002844:	000a      	movs	r2, r1
 8002846:	42bb      	cmp	r3, r7
 8002848:	d900      	bls.n	800284c <__divdi3+0x84>
 800284a:	e072      	b.n	8002932 <__divdi3+0x16a>
 800284c:	42bb      	cmp	r3, r7
 800284e:	d100      	bne.n	8002852 <__divdi3+0x8a>
 8002850:	e079      	b.n	8002946 <__divdi3+0x17e>
 8002852:	0034      	movs	r4, r6
 8002854:	003d      	movs	r5, r7
 8002856:	4659      	mov	r1, fp
 8002858:	1aa4      	subs	r4, r4, r2
 800285a:	419d      	sbcs	r5, r3
 800285c:	2900      	cmp	r1, #0
 800285e:	da00      	bge.n	8002862 <__divdi3+0x9a>
 8002860:	e074      	b.n	800294c <__divdi3+0x184>
 8002862:	2100      	movs	r1, #0
 8002864:	2000      	movs	r0, #0
 8002866:	2601      	movs	r6, #1
 8002868:	9000      	str	r0, [sp, #0]
 800286a:	9101      	str	r1, [sp, #4]
 800286c:	4659      	mov	r1, fp
 800286e:	408e      	lsls	r6, r1
 8002870:	9601      	str	r6, [sp, #4]
 8002872:	4661      	mov	r1, ip
 8002874:	2601      	movs	r6, #1
 8002876:	408e      	lsls	r6, r1
 8002878:	4661      	mov	r1, ip
 800287a:	9600      	str	r6, [sp, #0]
 800287c:	2900      	cmp	r1, #0
 800287e:	d05f      	beq.n	8002940 <__divdi3+0x178>
 8002880:	07d9      	lsls	r1, r3, #31
 8002882:	0856      	lsrs	r6, r2, #1
 8002884:	430e      	orrs	r6, r1
 8002886:	085f      	lsrs	r7, r3, #1
 8002888:	4661      	mov	r1, ip
 800288a:	2201      	movs	r2, #1
 800288c:	2300      	movs	r3, #0
 800288e:	e00c      	b.n	80028aa <__divdi3+0xe2>
 8002890:	42af      	cmp	r7, r5
 8002892:	d101      	bne.n	8002898 <__divdi3+0xd0>
 8002894:	42a6      	cmp	r6, r4
 8002896:	d80a      	bhi.n	80028ae <__divdi3+0xe6>
 8002898:	1ba4      	subs	r4, r4, r6
 800289a:	41bd      	sbcs	r5, r7
 800289c:	1924      	adds	r4, r4, r4
 800289e:	416d      	adcs	r5, r5
 80028a0:	3901      	subs	r1, #1
 80028a2:	18a4      	adds	r4, r4, r2
 80028a4:	415d      	adcs	r5, r3
 80028a6:	2900      	cmp	r1, #0
 80028a8:	d006      	beq.n	80028b8 <__divdi3+0xf0>
 80028aa:	42af      	cmp	r7, r5
 80028ac:	d9f0      	bls.n	8002890 <__divdi3+0xc8>
 80028ae:	3901      	subs	r1, #1
 80028b0:	1924      	adds	r4, r4, r4
 80028b2:	416d      	adcs	r5, r5
 80028b4:	2900      	cmp	r1, #0
 80028b6:	d1f8      	bne.n	80028aa <__divdi3+0xe2>
 80028b8:	9800      	ldr	r0, [sp, #0]
 80028ba:	9901      	ldr	r1, [sp, #4]
 80028bc:	465b      	mov	r3, fp
 80028be:	1900      	adds	r0, r0, r4
 80028c0:	4169      	adcs	r1, r5
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	db4d      	blt.n	8002962 <__divdi3+0x19a>
 80028c6:	002e      	movs	r6, r5
 80028c8:	002c      	movs	r4, r5
 80028ca:	40de      	lsrs	r6, r3
 80028cc:	4663      	mov	r3, ip
 80028ce:	40dc      	lsrs	r4, r3
 80028d0:	465b      	mov	r3, fp
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db55      	blt.n	8002982 <__divdi3+0x1ba>
 80028d6:	0034      	movs	r4, r6
 80028d8:	409c      	lsls	r4, r3
 80028da:	0023      	movs	r3, r4
 80028dc:	4664      	mov	r4, ip
 80028de:	40a6      	lsls	r6, r4
 80028e0:	0032      	movs	r2, r6
 80028e2:	1a80      	subs	r0, r0, r2
 80028e4:	4199      	sbcs	r1, r3
 80028e6:	e003      	b.n	80028f0 <__divdi3+0x128>
 80028e8:	42b0      	cmp	r0, r6
 80028ea:	d995      	bls.n	8002818 <__divdi3+0x50>
 80028ec:	2000      	movs	r0, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	4643      	mov	r3, r8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <__divdi3+0x138>
 80028f6:	0003      	movs	r3, r0
 80028f8:	000c      	movs	r4, r1
 80028fa:	2100      	movs	r1, #0
 80028fc:	4258      	negs	r0, r3
 80028fe:	41a1      	sbcs	r1, r4
 8002900:	b003      	add	sp, #12
 8002902:	bcf0      	pop	{r4, r5, r6, r7}
 8002904:	46bb      	mov	fp, r7
 8002906:	46b2      	mov	sl, r6
 8002908:	46a9      	mov	r9, r5
 800290a:	46a0      	mov	r8, r4
 800290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290e:	4662      	mov	r2, ip
 8002910:	4648      	mov	r0, r9
 8002912:	2320      	movs	r3, #32
 8002914:	4651      	mov	r1, sl
 8002916:	4090      	lsls	r0, r2
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	40d9      	lsrs	r1, r3
 800291c:	0003      	movs	r3, r0
 800291e:	9100      	str	r1, [sp, #0]
 8002920:	9900      	ldr	r1, [sp, #0]
 8002922:	4660      	mov	r0, ip
 8002924:	430b      	orrs	r3, r1
 8002926:	4651      	mov	r1, sl
 8002928:	4081      	lsls	r1, r0
 800292a:	000a      	movs	r2, r1
 800292c:	42bb      	cmp	r3, r7
 800292e:	d800      	bhi.n	8002932 <__divdi3+0x16a>
 8002930:	e78c      	b.n	800284c <__divdi3+0x84>
 8002932:	2100      	movs	r1, #0
 8002934:	2000      	movs	r0, #0
 8002936:	9000      	str	r0, [sp, #0]
 8002938:	9101      	str	r1, [sp, #4]
 800293a:	4661      	mov	r1, ip
 800293c:	2900      	cmp	r1, #0
 800293e:	d19f      	bne.n	8002880 <__divdi3+0xb8>
 8002940:	9800      	ldr	r0, [sp, #0]
 8002942:	9901      	ldr	r1, [sp, #4]
 8002944:	e7d4      	b.n	80028f0 <__divdi3+0x128>
 8002946:	42b1      	cmp	r1, r6
 8002948:	d8f3      	bhi.n	8002932 <__divdi3+0x16a>
 800294a:	e782      	b.n	8002852 <__divdi3+0x8a>
 800294c:	4661      	mov	r1, ip
 800294e:	2620      	movs	r6, #32
 8002950:	2701      	movs	r7, #1
 8002952:	1a76      	subs	r6, r6, r1
 8002954:	2000      	movs	r0, #0
 8002956:	2100      	movs	r1, #0
 8002958:	40f7      	lsrs	r7, r6
 800295a:	9000      	str	r0, [sp, #0]
 800295c:	9101      	str	r1, [sp, #4]
 800295e:	9701      	str	r7, [sp, #4]
 8002960:	e787      	b.n	8002872 <__divdi3+0xaa>
 8002962:	4662      	mov	r2, ip
 8002964:	2320      	movs	r3, #32
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	002a      	movs	r2, r5
 800296a:	409a      	lsls	r2, r3
 800296c:	0026      	movs	r6, r4
 800296e:	0013      	movs	r3, r2
 8002970:	4662      	mov	r2, ip
 8002972:	40d6      	lsrs	r6, r2
 8002974:	002c      	movs	r4, r5
 8002976:	431e      	orrs	r6, r3
 8002978:	4663      	mov	r3, ip
 800297a:	40dc      	lsrs	r4, r3
 800297c:	465b      	mov	r3, fp
 800297e:	2b00      	cmp	r3, #0
 8002980:	daa9      	bge.n	80028d6 <__divdi3+0x10e>
 8002982:	4662      	mov	r2, ip
 8002984:	2320      	movs	r3, #32
 8002986:	0035      	movs	r5, r6
 8002988:	4094      	lsls	r4, r2
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	40dd      	lsrs	r5, r3
 800298e:	0023      	movs	r3, r4
 8002990:	432b      	orrs	r3, r5
 8002992:	e7a3      	b.n	80028dc <__divdi3+0x114>

08002994 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002998:	f001 fcf8 	bl	800438c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800299c:	f000 f80e 	bl	80029bc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80029aa:	2301      	movs	r3, #1
 80029ac:	425b      	negs	r3, r3
 80029ae:	0018      	movs	r0, r3
 80029b0:	f019 faca 	bl	801bf48 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 80029c2:	2002      	movs	r0, #2
 80029c4:	f002 fb60 	bl	8005088 <BSP_LED_Init>
  LED_Init(LED_RED1);
 80029c8:	2001      	movs	r0, #1
 80029ca:	f002 fb5d 	bl	8005088 <BSP_LED_Init>
  LED_Init(LED_RED2);
 80029ce:	2003      	movs	r0, #3
 80029d0:	f002 fb5a 	bl	8005088 <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "## Версия протокола:   V%X.%X.%X\r\n",
 80029d4:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <LoRaWAN_Init+0x114>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	9202      	str	r2, [sp, #8]
 80029da:	2200      	movs	r2, #0
 80029dc:	9201      	str	r2, [sp, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	9200      	str	r2, [sp, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2002      	movs	r0, #2
 80029e8:	f018 feec 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <LoRaWAN_Init+0x118>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	4251      	negs	r1, r2
 80029f2:	4839      	ldr	r0, [pc, #228]	; (8002ad8 <LoRaWAN_Init+0x11c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	9200      	str	r2, [sp, #0]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f019 fd6d 	bl	801c4d8 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <LoRaWAN_Init+0x120>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	4251      	negs	r1, r2
 8002a04:	4836      	ldr	r0, [pc, #216]	; (8002ae0 <LoRaWAN_Init+0x124>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	9200      	str	r2, [sp, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f019 fd64 	bl	801c4d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002a10:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <LoRaWAN_Init+0x128>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	4251      	negs	r1, r2
 8002a16:	4834      	ldr	r0, [pc, #208]	; (8002ae8 <LoRaWAN_Init+0x12c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	9200      	str	r2, [sp, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f019 fd5b 	bl	801c4d8 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002a22:	23fa      	movs	r3, #250	; 0xfa
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <LoRaWAN_Init+0x11c>)
 8002a28:	0011      	movs	r1, r2
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f019 fe7c 	bl	801c728 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002a30:	23fa      	movs	r3, #250	; 0xfa
 8002a32:	005a      	lsls	r2, r3, #1
 8002a34:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <LoRaWAN_Init+0x124>)
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f019 fe75 	bl	801c728 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002a3e:	23fa      	movs	r3, #250	; 0xfa
 8002a40:	005a      	lsls	r2, r3, #1
 8002a42:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <LoRaWAN_Init+0x12c>)
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f019 fe6e 	bl	801c728 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <LoRaWAN_Init+0x130>)
 8002a4e:	001a      	movs	r2, r3
 8002a50:	2100      	movs	r1, #0
 8002a52:	2001      	movs	r0, #1
 8002a54:	f019 fb5a 	bl	801c10c <UTIL_SEQ_RegTask>
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <LoRaWAN_Init+0x134>)
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f019 fb54 	bl	801c10c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002a64:	f000 fb46 	bl	80030f4 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <LoRaWAN_Init+0x138>)
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f00a fb62 	bl	800d134 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <LoRaWAN_Init+0x13c>)
 8002a72:	0018      	movs	r0, r3
 8002a74:	f00a fba4 	bl	800d1c0 <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <LoRaWAN_Init+0x12c>)
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f019 fd64 	bl	801c548 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <LoRaWAN_Init+0x140>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f00a fcdf 	bl	800d448 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <LoRaWAN_Init+0x144>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d115      	bne.n	8002abe <LoRaWAN_Init+0x102>
  {
    /* send every time timer elapses */
 uint32_t APPTXDUTYCYCLE; // Для конфигурации периода передачи только нужно добавить в EEPROM
 APPTXDUTYCYCLE = 10000; // Для конфигурации периода передачи
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <LoRaWAN_Init+0x148>)
 8002a94:	607b      	str	r3, [r7, #4]
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <LoRaWAN_Init+0x14c>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4251      	negs	r1, r2
 8002a9c:	481b      	ldr	r0, [pc, #108]	; (8002b0c <LoRaWAN_Init+0x150>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	9200      	str	r2, [sp, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f019 fd18 	bl	801c4d8 <UTIL_TIMER_Create>
//    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
    UTIL_TIMER_SetPeriod(&TxTimer,  APPTXDUTYCYCLE);
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <LoRaWAN_Init+0x150>)
 8002aac:	0011      	movs	r1, r2
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f019 fe3a 	bl	801c728 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <LoRaWAN_Init+0x150>)
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f019 fd46 	bl	801c548 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 8002abc:	e003      	b.n	8002ac6 <LoRaWAN_Init+0x10a>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002abe:	2101      	movs	r1, #1
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f002 fba3 	bl	800520c <BSP_PB_Init>
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	0801da2c 	.word	0x0801da2c
 8002ad4:	08002f59 	.word	0x08002f59
 8002ad8:	20000344 	.word	0x20000344
 8002adc:	08002f6f 	.word	0x08002f6f
 8002ae0:	2000035c 	.word	0x2000035c
 8002ae4:	08002f85 	.word	0x08002f85
 8002ae8:	20000374 	.word	0x20000374
 8002aec:	0800d38d 	.word	0x0800d38d
 8002af0:	08002c45 	.word	0x08002c45
 8002af4:	2000000c 	.word	0x2000000c
 8002af8:	2000002c 	.word	0x2000002c
 8002afc:	20000008 	.word	0x20000008
 8002b00:	2000032b 	.word	0x2000032b
 8002b04:	00002710 	.word	0x00002710
 8002b08:	08002f35 	.word	0x08002f35
 8002b0c:	2000032c 	.word	0x2000032c

08002b10 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	af06      	add	r7, sp, #24
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d100      	bne.n	8002b22 <OnRxData+0x12>
 8002b20:	e07a      	b.n	8002c18 <OnRxData+0x108>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d100      	bne.n	8002b2a <OnRxData+0x1a>
 8002b28:	e076      	b.n	8002c18 <OnRxData+0x108>
  {
    LED_On(LED_BLUE);
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f002 fb1a 	bl	8005164 <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n   Индикация приёма данных\r\n");
 8002b30:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <OnRxData+0x11c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	2002      	movs	r0, #2
 8002b38:	f018 fe44 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	7b12      	ldrb	r2, [r2, #12]
 8002b44:	b252      	sxtb	r2, r2
 8002b46:	0011      	movs	r1, r2
 8002b48:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <OnRxData+0x120>)
 8002b4a:	0089      	lsls	r1, r1, #2
 8002b4c:	588a      	ldr	r2, [r1, r2]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	7809      	ldrb	r1, [r1, #0]
 8002b52:	0008      	movs	r0, r1
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	7889      	ldrb	r1, [r1, #2]
 8002b58:	b249      	sxtb	r1, r1
 8002b5a:	000c      	movs	r4, r1
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	78c9      	ldrb	r1, [r1, #3]
 8002b60:	b249      	sxtb	r1, r1
 8002b62:	000d      	movs	r5, r1
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	7909      	ldrb	r1, [r1, #4]
 8002b68:	b249      	sxtb	r1, r1
 8002b6a:	000e      	movs	r6, r1
 8002b6c:	4931      	ldr	r1, [pc, #196]	; (8002c34 <OnRxData+0x124>)
 8002b6e:	9605      	str	r6, [sp, #20]
 8002b70:	9504      	str	r5, [sp, #16]
 8002b72:	9403      	str	r4, [sp, #12]
 8002b74:	9002      	str	r0, [sp, #8]
 8002b76:	9201      	str	r2, [sp, #4]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	000b      	movs	r3, r1
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2003      	movs	r0, #3
 8002b82:	f018 fe1f 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d020      	beq.n	8002bd0 <OnRxData+0xc0>
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d144      	bne.n	8002c1c <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d116      	bne.n	8002bc8 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d00d      	beq.n	8002bc0 <OnRxData+0xb0>
 8002ba4:	dc12      	bgt.n	8002bcc <OnRxData+0xbc>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <OnRxData+0xa0>
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d004      	beq.n	8002bb8 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8002bae:	e00d      	b.n	8002bcc <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f00a fda3 	bl	800d6fc <LmHandlerRequestClass>
              break;
 8002bb6:	e00a      	b.n	8002bce <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f00a fd9f 	bl	800d6fc <LmHandlerRequestClass>
              break;
 8002bbe:	e006      	b.n	8002bce <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f00a fd9b 	bl	800d6fc <LmHandlerRequestClass>
              break;
 8002bc6:	e002      	b.n	8002bce <OnRxData+0xbe>
          }
        }
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	e02a      	b.n	8002c22 <OnRxData+0x112>
              break;
 8002bcc:	46c0      	nop			; (mov r8, r8)
        break;
 8002bce:	e028      	b.n	8002c22 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d123      	bne.n	8002c20 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <OnRxData+0x128>)
 8002be6:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <OnRxData+0x128>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <OnRxData+0x12c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	f018 fde4 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f002 facd 	bl	800519c <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 8002c02:	e00d      	b.n	8002c20 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <OnRxData+0x130>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f018 fdda 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f002 faa7 	bl	8005164 <BSP_LED_On>
        break;
 8002c16:	e003      	b.n	8002c20 <OnRxData+0x110>
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
    }
  }
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	e002      	b.n	8002c22 <OnRxData+0x112>
        break;
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	e000      	b.n	8002c22 <OnRxData+0x112>
        break;
 8002c20:	46c0      	nop			; (mov r8, r8)

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b003      	add	sp, #12
 8002c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	0801da60 	.word	0x0801da60
 8002c30:	20000034 	.word	0x20000034
 8002c34:	0801da94 	.word	0x0801da94
 8002c38:	2000032a 	.word	0x2000032a
 8002c3c:	0801dad8 	.word	0x0801dad8
 8002c40:	0801dae4 	.word	0x0801dae4

08002c44 <SendTxData>:

static void SendTxData(void)
{
 8002c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c46:	b0e1      	sub	sp, #388	; 0x184
 8002c48:	af04      	add	r7, sp, #16
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 8002c4a:	23b7      	movs	r3, #183	; 0xb7
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2200      	movs	r2, #0
 8002c52:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 8002c54:	23b6      	movs	r3, #182	; 0xb6
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Datasens[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 8002c62:	4b9e      	ldr	r3, [pc, #632]	; (8002edc <SendTxData+0x298>)
 8002c64:	22b8      	movs	r2, #184	; 0xb8
 8002c66:	0052      	lsls	r2, r2, #1
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	19db      	adds	r3, r3, r7
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 8002c70:	23b5      	movs	r3, #181	; 0xb5
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2200      	movs	r2, #0
 8002c78:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	22b2      	movs	r2, #178	; 0xb2
 8002c7e:	0052      	lsls	r2, r2, #1
 8002c80:	18ba      	adds	r2, r7, r2
 8002c82:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	22b0      	movs	r2, #176	; 0xb0
 8002c88:	0052      	lsls	r2, r2, #1
 8002c8a:	18ba      	adds	r2, r7, r2
 8002c8c:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	22ae      	movs	r2, #174	; 0xae
 8002c92:	0052      	lsls	r2, r2, #1
 8002c94:	18ba      	adds	r2, r7, r2
 8002c96:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 8002c98:	23ad      	movs	r3, #173	; 0xad
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8002ca2:	4b8f      	ldr	r3, [pc, #572]	; (8002ee0 <SendTxData+0x29c>)
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 8002ca8:	f002 f8a6 	bl	8004df8 <BSP_I2C1_Init>
  MX_ADC_Init();
 8002cac:	f000 fa56 	bl	800315c <MX_ADC_Init>
  MX_LPTIM1_Init();
 8002cb0:	f000 fa12 	bl	80030d8 <MX_LPTIM1_Init>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  	  bmp280_init_default_params(&bmp280.params);
 8002cb4:	4b8b      	ldr	r3, [pc, #556]	; (8002ee4 <SendTxData+0x2a0>)
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f01a f8e2 	bl	801ce80 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002cbc:	4b8a      	ldr	r3, [pc, #552]	; (8002ee8 <SendTxData+0x2a4>)
 8002cbe:	2276      	movs	r2, #118	; 0x76
 8002cc0:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <SendTxData+0x2a4>)
 8002cc4:	4a89      	ldr	r2, [pc, #548]	; (8002eec <SendTxData+0x2a8>)
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8002cc8:	4a86      	ldr	r2, [pc, #536]	; (8002ee4 <SendTxData+0x2a0>)
 8002cca:	4b87      	ldr	r3, [pc, #540]	; (8002ee8 <SendTxData+0x2a4>)
 8002ccc:	0011      	movs	r1, r2
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f01a fa6a 	bl	801d1a8 <bmp280_init>
    	HAL_Delay(2000);
 8002cd4:	23fa      	movs	r3, #250	; 0xfa
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f001 fcd4 	bl	8004686 <HAL_Delay>
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
//    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
    	 bmp280_read_fixed(&bmp280, &temperaturei, &pressurei, &humidityi);
 8002cde:	4b84      	ldr	r3, [pc, #528]	; (8002ef0 <SendTxData+0x2ac>)
 8002ce0:	4a84      	ldr	r2, [pc, #528]	; (8002ef4 <SendTxData+0x2b0>)
 8002ce2:	4985      	ldr	r1, [pc, #532]	; (8002ef8 <SendTxData+0x2b4>)
 8002ce4:	4880      	ldr	r0, [pc, #512]	; (8002ee8 <SendTxData+0x2a4>)
 8002ce6:	f01a fd5f 	bl	801d7a8 <bmp280_read_fixed>
    	 int32_t temp_decimal = temperaturei % 100; // Получаем 2-ю цифру после запятой
 8002cea:	4b83      	ldr	r3, [pc, #524]	; (8002ef8 <SendTxData+0x2b4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2164      	movs	r1, #100	; 0x64
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fd fb81 	bl	80003f8 <__aeabi_idivmod>
 8002cf6:	000b      	movs	r3, r1
 8002cf8:	22aa      	movs	r2, #170	; 0xaa
 8002cfa:	0052      	lsls	r2, r2, #1
 8002cfc:	18ba      	adds	r2, r7, r2
 8002cfe:	6013      	str	r3, [r2, #0]
//    	HAL_Delay(200);
//    	APP_LOG(TS_OFF, VLEVEL_M, " Температура:%d | Влажность:%d\r\n", Datasens, Datasens);
//    	 APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//    		       		numberdev, temperaturei, humidityi, per, chargebattery);

    	 if(bmp280.dig_T1!=0)
 8002d00:	4b79      	ldr	r3, [pc, #484]	; (8002ee8 <SendTxData+0x2a4>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <SendTxData+0xd2>
    	//*/
    	{
//    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, "     Датчик измерения : активен\r\n");
 8002d08:	4b7c      	ldr	r3, [pc, #496]	; (8002efc <SendTxData+0x2b8>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2002      	movs	r0, #2
 8002d10:	f018 fd58 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
 8002d14:	e005      	b.n	8002d22 <SendTxData+0xde>
    	 else
    	 {

//    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
//    		 APP_LOG(TS_OFF, VLEVEL_M, "  Ошибка инициализации датчика   \r\n");
    		 APP_LOG(TS_OFF, VLEVEL_M, "     Датчик измерения : ошибка инициализации    \r\n");
 8002d16:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <SendTxData+0x2bc>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f018 fd51 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    	 }

    	 if(temperaturei/100>=1 && temperaturei/100<=30)
 8002d22:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <SendTxData+0x2b4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b63      	cmp	r3, #99	; 0x63
 8002d28:	dd0b      	ble.n	8002d42 <SendTxData+0xfe>
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <SendTxData+0x2b4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a75      	ldr	r2, [pc, #468]	; (8002f04 <SendTxData+0x2c0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	dc06      	bgt.n	8002d42 <SendTxData+0xfe>
//    		 if(temperature1>=1 && temperature1<=30 && pressure1>=1)
    	     	//*/
    	  {
//    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
    	     	  APP_LOG(TS_OFF, VLEVEL_M, "     Параметры окружающей среды: в норме \r\n");
 8002d34:	4b74      	ldr	r3, [pc, #464]	; (8002f08 <SendTxData+0x2c4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2002      	movs	r0, #2
 8002d3c:	f018 fd42 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
 8002d40:	e005      	b.n	8002d4e <SendTxData+0x10a>
    	  } //*/
    	     	 else
    	   {
//    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
//    	       		 APP_LOG(TS_OFF, VLEVEL_M, "    Отклонение от нормы > \r\n");
    	       		 APP_LOG(TS_OFF, VLEVEL_M, "     Параметры окружающей среды: отклонение от нормы \r\n");
 8002d42:	4b72      	ldr	r3, [pc, #456]	; (8002f0c <SendTxData+0x2c8>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	2002      	movs	r0, #2
 8002d4a:	f018 fd3b 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 modelnum = 1;
 8002d4e:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <SendTxData+0x2cc>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
    	 // EEPROMWRITE modelnum
    	 numberdev = 0x01;  // new 0b00010001
 8002d54:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <SendTxData+0x2d0>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	801a      	strh	r2, [r3, #0]
    	 per = 0xA; // new
 8002d5a:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <SendTxData+0x2d4>)
 8002d5c:	220a      	movs	r2, #10
 8002d5e:	801a      	strh	r2, [r3, #0]
         FirmwareVersion = 1.1;
 8002d60:	4b6e      	ldr	r3, [pc, #440]	; (8002f1c <SendTxData+0x2d8>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 8002d66:	4b6b      	ldr	r3, [pc, #428]	; (8002f14 <SendTxData+0x2d0>)
 8002d68:	2000      	movs	r0, #0
 8002d6a:	5e18      	ldrsh	r0, [r3, r0]
 8002d6c:	4b5c      	ldr	r3, [pc, #368]	; (8002ee0 <SendTxData+0x29c>)
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	24b2      	movs	r4, #178	; 0xb2
 8002d72:	0064      	lsls	r4, r4, #1
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	1c59      	adds	r1, r3, #1
 8002d7a:	193d      	adds	r5, r7, r4
 8002d7c:	6029      	str	r1, [r5, #0]
 8002d7e:	18d3      	adds	r3, r2, r3
 8002d80:	b2c2      	uxtb	r2, r0
 8002d82:	701a      	strb	r2, [r3, #0]
//     AppData.Buffer[i++] = temperaturei;
//     AppData.Buffer[i++] = temperaturei / 100;
     AppData.Buffer[i++] = (temperaturei / 100) % 100;
 8002d84:	4b5c      	ldr	r3, [pc, #368]	; (8002ef8 <SendTxData+0x2b4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2164      	movs	r1, #100	; 0x64
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7fd fa4e 	bl	800022c <__divsi3>
 8002d90:	0003      	movs	r3, r0
 8002d92:	2164      	movs	r1, #100	; 0x64
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7fd fb2f 	bl	80003f8 <__aeabi_idivmod>
 8002d9a:	000b      	movs	r3, r1
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <SendTxData+0x29c>)
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	1c59      	adds	r1, r3, #1
 8002da8:	193d      	adds	r5, r7, r4
 8002daa:	6029      	str	r1, [r5, #0]
 8002dac:	18d3      	adds	r3, r2, r3
 8002dae:	b2c2      	uxtb	r2, r0
 8002db0:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = humidityi/1000;
 8002db2:	4b4f      	ldr	r3, [pc, #316]	; (8002ef0 <SendTxData+0x2ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	22fa      	movs	r2, #250	; 0xfa
 8002db8:	0091      	lsls	r1, r2, #2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7fd fa36 	bl	800022c <__divsi3>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <SendTxData+0x29c>)
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	193b      	adds	r3, r7, r4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	1c59      	adds	r1, r3, #1
 8002dce:	193d      	adds	r5, r7, r4
 8002dd0:	6029      	str	r1, [r5, #0]
 8002dd2:	18d3      	adds	r3, r2, r3
 8002dd4:	b2c2      	uxtb	r2, r0
 8002dd6:	701a      	strb	r2, [r3, #0]

     AppData.Buffer[i++] = per; // new период включения прибора
 8002dd8:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <SendTxData+0x2d4>)
 8002dda:	2000      	movs	r0, #0
 8002ddc:	5e18      	ldrsh	r0, [r3, r0]
 8002dde:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <SendTxData+0x29c>)
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	1c59      	adds	r1, r3, #1
 8002de8:	0026      	movs	r6, r4
 8002dea:	193c      	adds	r4, r7, r4
 8002dec:	6021      	str	r1, [r4, #0]
 8002dee:	18d3      	adds	r3, r2, r3
 8002df0:	b2c2      	uxtb	r2, r0
 8002df2:	701a      	strb	r2, [r3, #0]
//     temperatureint = temperature1;
//     humidityint = humidity1;
      // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
     chargebattery = GetBatteryLevel(); // new заряд батареи
 8002df4:	f001 faf6 	bl	80043e4 <GetBatteryLevel>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	b21a      	sxth	r2, r3
 8002dfc:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <SendTxData+0x2dc>)
 8002dfe:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = chargebattery;
 8002e00:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <SendTxData+0x2dc>)
 8002e02:	2000      	movs	r0, #0
 8002e04:	5e18      	ldrsh	r0, [r3, r0]
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <SendTxData+0x29c>)
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	19bb      	adds	r3, r7, r6
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1c59      	adds	r1, r3, #1
 8002e10:	19bc      	adds	r4, r7, r6
 8002e12:	6021      	str	r1, [r4, #0]
 8002e14:	18d3      	adds	r3, r2, r3
 8002e16:	b2c2      	uxtb	r2, r0
 8002e18:	701a      	strb	r2, [r3, #0]
//     HAL_Delay(1000);
//     APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//       		numberdev, temperatureint, humidityint, per, chargebattery);
//     APP_LOG(TS_OFF, VLEVEL_M, "Заряд батареи:%d\r\n", chargebattery);
     HAL_Delay(200);
 8002e1a:	20c8      	movs	r0, #200	; 0xc8
 8002e1c:	f001 fc33 	bl	8004686 <HAL_Delay>

//		 APP_LOG(TS_OFF, VLEVEL_M, "     Номер устройства:%d | Температура:%d,%02d °C | Влажность:%d%  | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//	  numberdev, temperaturei / 100, temp_decimal, humidityi /1000, per, chargebattery);
		 APP_LOG(TS_OFF, VLEVEL_M, "     Номер устройства: %d | Температура воздуха: %d,%02d °C | Влажность воздуха: %d%\r\n",
 8002e20:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <SendTxData+0x2d0>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	5e9b      	ldrsh	r3, [r3, r2]
 8002e26:	001c      	movs	r4, r3
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <SendTxData+0x2b4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2164      	movs	r1, #100	; 0x64
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd f9fc 	bl	800022c <__divsi3>
 8002e34:	0003      	movs	r3, r0
 8002e36:	001d      	movs	r5, r3
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <SendTxData+0x2ac>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	22fa      	movs	r2, #250	; 0xfa
 8002e3e:	0091      	lsls	r1, r2, #2
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fd f9f3 	bl	800022c <__divsi3>
 8002e46:	0003      	movs	r3, r0
 8002e48:	4a36      	ldr	r2, [pc, #216]	; (8002f24 <SendTxData+0x2e0>)
 8002e4a:	9303      	str	r3, [sp, #12]
 8002e4c:	23aa      	movs	r3, #170	; 0xaa
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	9302      	str	r3, [sp, #8]
 8002e56:	9501      	str	r5, [sp, #4]
 8002e58:	9400      	str	r4, [sp, #0]
 8002e5a:	0013      	movs	r3, r2
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2002      	movs	r0, #2
 8002e62:	f018 fcaf 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
		  numberdev, temperaturei / 100, temp_decimal, humidityi /1000);
		 APP_LOG(TS_OFF, VLEVEL_M, "     Период передачи: %d сек | Заряд батареи: %d%\r\n", per, chargebattery);
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <SendTxData+0x2d4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	5e9b      	ldrsh	r3, [r3, r2]
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <SendTxData+0x2dc>)
 8002e70:	2100      	movs	r1, #0
 8002e72:	5e5b      	ldrsh	r3, [r3, r1]
 8002e74:	0019      	movs	r1, r3
 8002e76:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <SendTxData+0x2e4>)
 8002e78:	9101      	str	r1, [sp, #4]
 8002e7a:	9200      	str	r2, [sp, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	2002      	movs	r0, #2
 8002e82:	f018 fc9f 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 8002e86:	19bb      	adds	r3, r7, r6
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <SendTxData+0x29c>)
 8002e8e:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8002e90:	2338      	movs	r3, #56	; 0x38
 8002e92:	18fa      	adds	r2, r7, r3
 8002e94:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <SendTxData+0x29c>)
 8002e96:	2300      	movs	r3, #0
 8002e98:	2101      	movs	r1, #1
 8002e9a:	f00a fb5d 	bl	800d558 <LmHandlerSend>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d106      	bne.n	8002eb0 <SendTxData+0x26c>
  {
	  APP_LOG(TS_OFF, VLEVEL_L, "     Запрос на подключение: отправлен\r\n");
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <SendTxData+0x2e8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f018 fc8b 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, "    Следующий запрос на отправку через : ~%d секунд \r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 8002eae:	e011      	b.n	8002ed4 <SendTxData+0x290>
  else if (nextTxIn > 0)
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00e      	beq.n	8002ed4 <SendTxData+0x290>
    APP_LOG(TS_OFF, VLEVEL_L, "    Следующий запрос на отправку через : ~%d секунд \r\n", (nextTxIn / 1000));
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	22fa      	movs	r2, #250	; 0xfa
 8002eba:	0091      	lsls	r1, r2, #2
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fd f92b 	bl	8000118 <__udivsi3>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <SendTxData+0x2ec>)
 8002ec8:	9200      	str	r2, [sp, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f018 fc78 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b05d      	add	sp, #372	; 0x174
 8002eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002edc:	fffffe92 	.word	0xfffffe92
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	200003b8 	.word	0x200003b8
 8002ee8:	2000038c 	.word	0x2000038c
 8002eec:	20000788 	.word	0x20000788
 8002ef0:	200004fc 	.word	0x200004fc
 8002ef4:	20000500 	.word	0x20000500
 8002ef8:	200004f8 	.word	0x200004f8
 8002efc:	0801daf0 	.word	0x0801daf0
 8002f00:	0801db28 	.word	0x0801db28
 8002f04:	00000c1b 	.word	0x00000c1b
 8002f08:	0801db80 	.word	0x0801db80
 8002f0c:	0801dbcc 	.word	0x0801dbcc
 8002f10:	200004ec 	.word	0x200004ec
 8002f14:	200004e8 	.word	0x200004e8
 8002f18:	200004ea 	.word	0x200004ea
 8002f1c:	200004f0 	.word	0x200004f0
 8002f20:	20000504 	.word	0x20000504
 8002f24:	0801dc30 	.word	0x0801dc30
 8002f28:	0801dcbc 	.word	0x0801dcbc
 8002f2c:	0801dd10 	.word	0x0801dd10
 8002f30:	0801dd54 	.word	0x0801dd54

08002f34 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f019 f908 	bl	801c154 <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <OnTxTimerEvent+0x20>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f019 fafe 	bl	801c548 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	2000032c 	.word	0x2000032c

08002f58 <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 8002f60:	2003      	movs	r0, #3
 8002f62:	f002 f91b 	bl	800519c <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b002      	add	sp, #8
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 8002f76:	2002      	movs	r0, #2
 8002f78:	f002 f910 	bl	800519c <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f002 f921 	bl	80051d4 <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b002      	add	sp, #8
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af04      	add	r7, sp, #16
 8002fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d042      	beq.n	8003030 <OnTxData+0x94>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03e      	beq.n	8003030 <OnTxData+0x94>
  {
    LED_On(LED_RED2) ;
 8002fb2:	2003      	movs	r0, #3
 8002fb4:	f002 f8d6 	bl	8005164 <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <OnTxData+0x9c>)
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f019 fac4 	bl	801c548 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "     MCPS Подтверждение\r\n");
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <OnTxData+0xa0>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f018 fbfc 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
//            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
//    int8_t txPower2 = 7;
//    LmHandlerSetTxPower(txPower2);
//    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Мощность:%d | Канал связи:%d\r\n",
//    		params->UplinkCounter, params->AppData.Port, params->TxPower, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, "     Номер посылки: %01d | Порт: %d | Канал связи: %d\r\n",
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	7b12      	ldrb	r2, [r2, #12]
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	7d52      	ldrb	r2, [r2, #21]
 8002fda:	0010      	movs	r0, r2
 8002fdc:	4a18      	ldr	r2, [pc, #96]	; (8003040 <OnTxData+0xa4>)
 8002fde:	9002      	str	r0, [sp, #8]
 8002fe0:	9101      	str	r1, [sp, #4]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2002      	movs	r0, #2
 8002fec:	f018 fbea 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
       		params->UplinkCounter, params->AppData.Port, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <OnTxData+0xa8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	f018 fbe4 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	789b      	ldrb	r3, [r3, #2]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10f      	bne.n	8003024 <OnTxData+0x88>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	78db      	ldrb	r3, [r3, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <OnTxData+0x74>
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <OnTxData+0xac>)
 800300e:	e000      	b.n	8003012 <OnTxData+0x76>
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <OnTxData+0xb0>)
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <OnTxData+0xb4>)
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	0013      	movs	r3, r2
 8003018:	2200      	movs	r2, #0
 800301a:	2100      	movs	r1, #0
 800301c:	2003      	movs	r0, #3
 800301e:	f018 fbd1 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 8003022:	e005      	b.n	8003030 <OnTxData+0x94>
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n UNCONFIRMED\r\n");
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <OnTxData+0xb8>)
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	2003      	movs	r0, #3
 800302c:	f018 fbca 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000344 	.word	0x20000344
 800303c:	0801ddb0 	.word	0x0801ddb0
 8003040:	0801ddd8 	.word	0x0801ddd8
 8003044:	0801de2c 	.word	0x0801de2c
 8003048:	0801de3c 	.word	0x0801de3c
 800304c:	0801de40 	.word	0x0801de40
 8003050:	0801de48 	.word	0x0801de48
 8003054:	0801de5c 	.word	0x0801de5c

08003058 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d029      	beq.n	80030ba <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	785b      	ldrb	r3, [r3, #1]
 800306a:	b25b      	sxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d11e      	bne.n	80030ae <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <OnJoinRequest+0x6c>)
 8003072:	0018      	movs	r0, r3
 8003074:	f019 fae0 	bl	801c638 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 8003078:	2001      	movs	r0, #1
 800307a:	f002 f88f 	bl	800519c <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n🗸  Устройство подключено  \r\n  "); // ✓✔ ✅︎ ☑ 🗹︎ √
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <OnJoinRequest+0x70>)
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	2002      	movs	r0, #2
 8003086:	f018 fb9d 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	789b      	ldrb	r3, [r3, #2]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d106      	bne.n	80030a0 <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
//    	  APP_LOG(TS_OFF, VLEVEL_M, " Активация по воздуху  \r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, "   Тип активации: OTAA  \r\n");
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <OnJoinRequest+0x74>)
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2002      	movs	r0, #2
 800309a:	f018 fb93 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 800309e:	e00c      	b.n	80030ba <OnJoinRequest+0x62>
    	  APP_LOG(TS_OFF, VLEVEL_M, "     Тип активации: ABP  \r\n");
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <OnJoinRequest+0x78>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	2002      	movs	r0, #2
 80030a8:	f018 fb8c 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 80030ac:	e005      	b.n	80030ba <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, "     Подключение к базовой станции: ошибка > \r\n");
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <OnJoinRequest+0x7c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	2002      	movs	r0, #2
 80030b6:	f018 fb85 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b002      	add	sp, #8
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	20000374 	.word	0x20000374
 80030c8:	0801de70 	.word	0x0801de70
 80030cc:	0801dea8 	.word	0x0801dea8
 80030d0:	0801ded0 	.word	0x0801ded0
 80030d4:	0801def8 	.word	0x0801def8

080030d8 <MX_LPTIM1_Init>:
  }
  */
/*

 */ static void MX_LPTIM1_Init(void) // new
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <OnMacProcessNotify>:
//    }
//
//  }

static void OnMacProcessNotify(void)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80030e6:	2100      	movs	r1, #0
 80030e8:	2001      	movs	r0, #1
 80030ea:	f019 f833 	bl	801c154 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <LoraInfo_Init+0x50>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <LoraInfo_Init+0x50>)
 8003100:	2200      	movs	r2, #0
 8003102:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <LoraInfo_Init+0x50>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <LoraInfo_Init+0x50>)
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <LoraInfo_Init+0x50>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	431a      	orrs	r2, r3
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <LoraInfo_Init+0x50>)
 800311a:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <LoraInfo_Init+0x50>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <LoraInfo_Init+0x54>)
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	2000      	movs	r0, #0
 800312c:	f018 fb4a 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 8003130:	e7fe      	b.n	8003130 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <LoraInfo_Init+0x50>)
 8003134:	2200      	movs	r2, #0
 8003136:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8003138:	4b02      	ldr	r3, [pc, #8]	; (8003144 <LoraInfo_Init+0x50>)
 800313a:	2203      	movs	r2, #3
 800313c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000508 	.word	0x20000508
 8003148:	0801df94 	.word	0x0801df94

0800314c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8003150:	4b01      	ldr	r3, [pc, #4]	; (8003158 <LoraInfo_GetPtr+0xc>)
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000508 	.word	0x20000508

0800315c <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 8003160:	4b22      	ldr	r3, [pc, #136]	; (80031ec <MX_ADC_Init+0x90>)
 8003162:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <MX_ADC_Init+0x94>)
 8003164:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <MX_ADC_Init+0x90>)
 8003168:	2200      	movs	r2, #0
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800316c:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <MX_ADC_Init+0x90>)
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	0612      	lsls	r2, r2, #24
 8003172:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <MX_ADC_Init+0x90>)
 8003176:	2200      	movs	r2, #0
 8003178:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 800317a:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <MX_ADC_Init+0x90>)
 800317c:	2201      	movs	r2, #1
 800317e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <MX_ADC_Init+0x90>)
 8003182:	2200      	movs	r2, #0
 8003184:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8003186:	4b19      	ldr	r3, [pc, #100]	; (80031ec <MX_ADC_Init+0x90>)
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <MX_ADC_Init+0x90>)
 800318e:	2207      	movs	r2, #7
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <MX_ADC_Init+0x90>)
 8003194:	2201      	movs	r2, #1
 8003196:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <MX_ADC_Init+0x90>)
 800319a:	2200      	movs	r2, #0
 800319c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <MX_ADC_Init+0x90>)
 80031a0:	2220      	movs	r2, #32
 80031a2:	2100      	movs	r1, #0
 80031a4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <MX_ADC_Init+0x90>)
 80031a8:	2221      	movs	r2, #33	; 0x21
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <MX_ADC_Init+0x90>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <MX_ADC_Init+0x90>)
 80031b6:	2204      	movs	r2, #4
 80031b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <MX_ADC_Init+0x90>)
 80031bc:	222c      	movs	r2, #44	; 0x2c
 80031be:	2100      	movs	r1, #0
 80031c0:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <MX_ADC_Init+0x90>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f002 fc7f 	bl	8005ac8 <HAL_ADC_Init>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d001      	beq.n	80031d2 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 80031ce:	f000 fa47 	bl	8003660 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <MX_ADC_Init+0x90>)
 80031d4:	2100      	movs	r1, #0
 80031d6:	0018      	movs	r0, r3
 80031d8:	f003 f968 	bl	80064ac <HAL_ADCEx_Calibration_Start>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d001      	beq.n	80031e4 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 80031e0:	f000 fa3e 	bl	8003660 <Error_Handler>
  }
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	20000518 	.word	0x20000518
 80031f0:	40012400 	.word	0x40012400

080031f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a12      	ldr	r2, [pc, #72]	; (800324c <HAL_ADC_MspInit+0x58>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11e      	bne.n	8003244 <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003206:	240c      	movs	r4, #12
 8003208:	193b      	adds	r3, r7, r4
 800320a:	0018      	movs	r0, r3
 800320c:	2314      	movs	r3, #20
 800320e:	001a      	movs	r2, r3
 8003210:	2100      	movs	r1, #0
 8003212:	f01a fb64 	bl	801d8de <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_ADC_MspInit+0x5c>)
 8003218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_ADC_MspInit+0x5c>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	0089      	lsls	r1, r1, #2
 8003220:	430a      	orrs	r2, r1
 8003222:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 8003224:	193b      	adds	r3, r7, r4
 8003226:	2210      	movs	r2, #16
 8003228:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 800322a:	193b      	adds	r3, r7, r4
 800322c:	2203      	movs	r2, #3
 800322e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 8003230:	193b      	adds	r3, r7, r4
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 8003236:	193a      	adds	r2, r7, r4
 8003238:	23a0      	movs	r3, #160	; 0xa0
 800323a:	05db      	lsls	r3, r3, #23
 800323c:	0011      	movs	r1, r2
 800323e:	0018      	movs	r0, r3
 8003240:	f003 fda0 	bl	8006d84 <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b009      	add	sp, #36	; 0x24
 800324a:	bd90      	pop	{r4, r7, pc}
 800324c:	40012400 	.word	0x40012400
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <HAL_ADC_MspDeInit+0x4c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d118      	bne.n	8003298 <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8003266:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <HAL_ADC_MspDeInit+0x50>)
 8003268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_ADC_MspDeInit+0x50>)
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	0089      	lsls	r1, r1, #2
 8003270:	430a      	orrs	r2, r1
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_ADC_MspDeInit+0x50>)
 8003276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_ADC_MspDeInit+0x50>)
 800327a:	490b      	ldr	r1, [pc, #44]	; (80032a8 <HAL_ADC_MspDeInit+0x54>)
 800327c:	400a      	ands	r2, r1
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <HAL_ADC_MspDeInit+0x50>)
 8003282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_ADC_MspDeInit+0x50>)
 8003286:	4908      	ldr	r1, [pc, #32]	; (80032a8 <HAL_ADC_MspDeInit+0x54>)
 8003288:	400a      	ands	r2, r1
 800328a:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 800328c:	23a0      	movs	r3, #160	; 0xa0
 800328e:	05db      	lsls	r3, r3, #23
 8003290:	2110      	movs	r1, #16
 8003292:	0018      	movs	r0, r3
 8003294:	f003 fef4 	bl	8007080 <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40012400 	.word	0x40012400
 80032a4:	40021000 	.word	0x40021000
 80032a8:	fffffdff 	.word	0xfffffdff

080032ac <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 80032b0:	4b02      	ldr	r3, [pc, #8]	; (80032bc <SYS_InitMeasurement+0x10>)
 80032b2:	4a03      	ldr	r2, [pc, #12]	; (80032c0 <SYS_InitMeasurement+0x14>)
 80032b4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000518 	.word	0x20000518
 80032c0:	40012400 	.word	0x40012400

080032c4 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80032c4:	b5b0      	push	{r4, r5, r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80032ca:	250e      	movs	r5, #14
 80032cc:	197b      	adds	r3, r7, r5
 80032ce:	2200      	movs	r2, #0
 80032d0:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80032d6:	1dbc      	adds	r4, r7, #6
 80032d8:	f000 f83c 	bl	8003354 <SYS_GetBatteryLevel>
 80032dc:	0003      	movs	r3, r0
 80032de:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <SYS_GetTemperatureLevel+0x80>)
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 f864 	bl	80033b0 <ADC_ReadChannels>
 80032e8:	0003      	movs	r3, r0
 80032ea:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 80032ec:	1dbb      	adds	r3, r7, #6
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	4353      	muls	r3, r2
 80032f4:	4914      	ldr	r1, [pc, #80]	; (8003348 <SYS_GetTemperatureLevel+0x84>)
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7fc ff0e 	bl	8000118 <__udivsi3>
 80032fc:	0003      	movs	r3, r0
 80032fe:	001a      	movs	r2, r3
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <SYS_GetTemperatureLevel+0x88>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	1ad2      	subs	r2, r2, r3
 8003306:	0013      	movs	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	189b      	adds	r3, r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <SYS_GetTemperatureLevel+0x8c>)
 8003312:	8812      	ldrh	r2, [r2, #0]
 8003314:	0011      	movs	r1, r2
 8003316:	4a0d      	ldr	r2, [pc, #52]	; (800334c <SYS_GetTemperatureLevel+0x88>)
 8003318:	8812      	ldrh	r2, [r2, #0]
 800331a:	1a8a      	subs	r2, r1, r2
 800331c:	0011      	movs	r1, r2
 800331e:	0018      	movs	r0, r3
 8003320:	f7fc ff84 	bl	800022c <__divsi3>
 8003324:	0003      	movs	r3, r0
 8003326:	b29b      	uxth	r3, r3
 8003328:	22f0      	movs	r2, #240	; 0xf0
 800332a:	0152      	lsls	r2, r2, #5
 800332c:	4694      	mov	ip, r2
 800332e:	4463      	add	r3, ip
 8003330:	b29a      	uxth	r2, r3
 8003332:	197b      	adds	r3, r7, r5
 8003334:	801a      	strh	r2, [r3, #0]

//  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);

  return (int16_t) temperatureDegreeC;
 8003336:	197b      	adds	r3, r7, r5
 8003338:	2200      	movs	r2, #0
 800333a:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b004      	add	sp, #16
 8003342:	bdb0      	pop	{r4, r5, r7, pc}
 8003344:	48040000 	.word	0x48040000
 8003348:	00000bb8 	.word	0x00000bb8
 800334c:	1ff8007a 	.word	0x1ff8007a
 8003350:	1ff8007e 	.word	0x1ff8007e

08003354 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800335a:	1dbb      	adds	r3, r7, #6
 800335c:	2200      	movs	r2, #0
 800335e:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <SYS_GetBatteryLevel+0x50>)
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f822 	bl	80033b0 <ADC_ReadChannels>
 800336c:	0003      	movs	r3, r0
 800336e:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 8003376:	1dbb      	adds	r3, r7, #6
 8003378:	2200      	movs	r2, #0
 800337a:	801a      	strh	r2, [r3, #0]
 800337c:	e00c      	b.n	8003398 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <SYS_GetBatteryLevel+0x54>)
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	001a      	movs	r2, r3
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <SYS_GetBatteryLevel+0x58>)
 8003386:	4353      	muls	r3, r2
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	0018      	movs	r0, r3
 800338c:	f7fc fec4 	bl	8000118 <__udivsi3>
 8003390:	0003      	movs	r3, r0
 8003392:	001a      	movs	r2, r3
 8003394:	1dbb      	adds	r3, r7, #6
 8003396:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 8003398:	1dbb      	adds	r3, r7, #6
 800339a:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	44020000 	.word	0x44020000
 80033a8:	1ff80078 	.word	0x1ff80078
 80033ac:	00000bb8 	.word	0x00000bb8

080033b0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80033bc:	230c      	movs	r3, #12
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	0018      	movs	r0, r3
 80033c2:	2308      	movs	r3, #8
 80033c4:	001a      	movs	r2, r3
 80033c6:	2100      	movs	r1, #0
 80033c8:	f01a fa89 	bl	801d8de <memset>

  MX_ADC_Init();
 80033cc:	f7ff fec6 	bl	800315c <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <ADC_ReadChannels+0xd4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2208      	movs	r2, #8
 80033d8:	4013      	ands	r3, r2
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d1f9      	bne.n	80033d2 <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <ADC_ReadChannels+0xd8>)
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <ADC_ReadChannels+0xd8>)
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	0089      	lsls	r1, r1, #2
 80033e8:	430a      	orrs	r2, r1
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <ADC_ReadChannels+0xdc>)
 80033ee:	2100      	movs	r1, #0
 80033f0:	0018      	movs	r0, r3
 80033f2:	f003 f85b 	bl	80064ac <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 80033f6:	240c      	movs	r4, #12
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	4a25      	ldr	r2, [pc, #148]	; (8003490 <ADC_ReadChannels+0xe0>)
 80033fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <ADC_ReadChannels+0xe4>)
 8003402:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003404:	193a      	adds	r2, r7, r4
 8003406:	4b21      	ldr	r3, [pc, #132]	; (800348c <ADC_ReadChannels+0xdc>)
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f002 fea2 	bl	8006154 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8003410:	0021      	movs	r1, r4
 8003412:	187b      	adds	r3, r7, r1
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003418:	187b      	adds	r3, r7, r1
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	0152      	lsls	r2, r2, #5
 800341e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003420:	187a      	adds	r2, r7, r1
 8003422:	4b1a      	ldr	r3, [pc, #104]	; (800348c <ADC_ReadChannels+0xdc>)
 8003424:	0011      	movs	r1, r2
 8003426:	0018      	movs	r0, r3
 8003428:	f002 fe94 	bl	8006154 <HAL_ADC_ConfigChannel>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d001      	beq.n	8003434 <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 8003430:	f000 f916 	bl	8003660 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003434:	4b15      	ldr	r3, [pc, #84]	; (800348c <ADC_ReadChannels+0xdc>)
 8003436:	0018      	movs	r0, r3
 8003438:	f002 fd56 	bl	8005ee8 <HAL_ADC_Start>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d001      	beq.n	8003444 <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 8003440:	f000 f90e 	bl	8003660 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003444:	2301      	movs	r3, #1
 8003446:	425a      	negs	r2, r3
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <ADC_ReadChannels+0xdc>)
 800344a:	0011      	movs	r1, r2
 800344c:	0018      	movs	r0, r3
 800344e:	f002 fddf 	bl	8006010 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <ADC_ReadChannels+0xdc>)
 8003454:	0018      	movs	r0, r3
 8003456:	f002 fd9b 	bl	8005f90 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <ADC_ReadChannels+0xdc>)
 800345c:	0018      	movs	r0, r3
 800345e:	f002 fe6d 	bl	800613c <HAL_ADC_GetValue>
 8003462:	0003      	movs	r3, r0
 8003464:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <ADC_ReadChannels+0xdc>)
 8003468:	0018      	movs	r0, r3
 800346a:	f002 fca1 	bl	8005db0 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <ADC_ReadChannels+0xd8>)
 8003470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <ADC_ReadChannels+0xd8>)
 8003474:	4908      	ldr	r1, [pc, #32]	; (8003498 <ADC_ReadChannels+0xe8>)
 8003476:	400a      	ands	r2, r1
 8003478:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 800347a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b007      	add	sp, #28
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	40007000 	.word	0x40007000
 8003488:	40021000 	.word	0x40021000
 800348c:	20000518 	.word	0x20000518
 8003490:	0007ffff 	.word	0x0007ffff
 8003494:	00001001 	.word	0x00001001
 8003498:	fffffdff 	.word	0xfffffdff

0800349c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <MX_DMA_Init+0x38>)
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <MX_DMA_Init+0x38>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	430a      	orrs	r2, r1
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <MX_DMA_Init+0x38>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	2201      	movs	r2, #1
 80034b4:	4013      	ands	r3, r2
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	200b      	movs	r0, #11
 80034c0:	f003 f934 	bl	800672c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80034c4:	200b      	movs	r0, #11
 80034c6:	f003 f946 	bl	8006756 <HAL_NVIC_EnableIRQ>

}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	40021000 	.word	0x40021000

080034d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034de:	f002 fa79 	bl	80059d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034e2:	f000 f827 	bl	8003534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 80034e6:	f7ff fa55 	bl	8002994 <MX_LoRaWAN_Init>
      	   		size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
      	 	HAL_UART_Transmit(&husart2, Data, size, 1000);
      	 	*/
  //      uint16_t eepromBaseAddress = 0x08080000; // Пример адреса EEPROM
  	  #define eepromBaseAddress 0x08080000UL
        uint8_t dataToWrite[] = {0x01, 0x02, 0x03}; // Пример данных для записи
 80034ea:	003b      	movs	r3, r7
 80034ec:	4a10      	ldr	r2, [pc, #64]	; (8003530 <main+0x58>)
 80034ee:	8811      	ldrh	r1, [r2, #0]
 80034f0:	8019      	strh	r1, [r3, #0]
 80034f2:	7892      	ldrb	r2, [r2, #2]
 80034f4:	709a      	strb	r2, [r3, #2]
        uint8_t dataToWrite1 = 10; // Пример данных для записи
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	220a      	movs	r2, #10
 80034fa:	701a      	strb	r2, [r3, #0]
        uint8_t dataSize = sizeof(dataToWrite1); // Размер данных
 80034fc:	1dbb      	adds	r3, r7, #6
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
//        EEPROM_WRITE_DATA(STM32L072_EEPROM_START_ADDR, dataToWrite1, dataSize);
  //    FLASHEx_EEPROM_WRITE(0, params->DownlinkCounter, sizeof(params->DownlinkCounter));
  //      dataeprom = dataToWrite;
//        EEPROM_CLEAR();      // возможный вариант
//        EEPROM_WRITE_DATA(eepromBaseAddress, dataToWrite1, dataSize); // возможный вариант
        uint8_t datareadepr = 0; // Прочитанные данные
 8003502:	1d7b      	adds	r3, r7, #5
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
//        EEPROM_ReadData();
        uint8_t datareadeprerror = 2; // Буфер ошибки
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	2202      	movs	r2, #2
 800350c:	701a      	strb	r2, [r3, #0]
//        EEPROM_Read_Data(eepromBaseAddress, datareadepr, dataSize); //  возможный вариант
//        datareadepr =  EEPROM_ReadData();
//        datareadepr = EEPROM_Read_Data();
//        memcmp(datareadepr,dataToWrite);
         if (datareadepr == dataToWrite1)
 800350e:	1d7a      	adds	r2, r7, #5
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	7812      	ldrb	r2, [r2, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d103      	bne.n	8003522 <main+0x4a>
        {
        	datareadeprerror = 100;
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	2264      	movs	r2, #100	; 0x64
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e002      	b.n	8003528 <main+0x50>
        }
        else {
            // Прочитанные данные не соответствуют записанным данным
            // Выполняйте необходимые действия здесь
//               printf("Ошибка при записи или чтении данных из EEPROM\n");
            datareadeprerror =  0;
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 8003528:	f7ff fa3d 	bl	80029a6 <MX_LoRaWAN_Process>
 800352c:	e7fc      	b.n	8003528 <main+0x50>
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	0801dfe4 	.word	0x0801dfe4

08003534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b09d      	sub	sp, #116	; 0x74
 8003538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353a:	2438      	movs	r4, #56	; 0x38
 800353c:	193b      	adds	r3, r7, r4
 800353e:	0018      	movs	r0, r3
 8003540:	2338      	movs	r3, #56	; 0x38
 8003542:	001a      	movs	r2, r3
 8003544:	2100      	movs	r1, #0
 8003546:	f01a f9ca 	bl	801d8de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800354a:	2324      	movs	r3, #36	; 0x24
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	0018      	movs	r0, r3
 8003550:	2314      	movs	r3, #20
 8003552:	001a      	movs	r2, r3
 8003554:	2100      	movs	r1, #0
 8003556:	f01a f9c2 	bl	801d8de <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800355a:	003b      	movs	r3, r7
 800355c:	0018      	movs	r0, r3
 800355e:	2324      	movs	r3, #36	; 0x24
 8003560:	001a      	movs	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	f01a f9bb 	bl	801d8de <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003568:	0021      	movs	r1, r4
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2202      	movs	r2, #2
 800356e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2200      	movs	r2, #0
 8003574:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2201      	movs	r2, #1
 800357a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2201      	movs	r2, #1
 8003580:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2210      	movs	r2, #16
 8003586:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003588:	187b      	adds	r3, r7, r1
 800358a:	2202      	movs	r2, #2
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800358e:	187b      	adds	r3, r7, r1
 8003590:	2200      	movs	r2, #0
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003594:	187b      	adds	r3, r7, r1
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	0312      	lsls	r2, r2, #12
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800359c:	187b      	adds	r3, r7, r1
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	0412      	lsls	r2, r2, #16
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	0018      	movs	r0, r3
 80035a8:	f004 fd62 	bl	8008070 <HAL_RCC_OscConfig>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80035b0:	f000 f856 	bl	8003660 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <SystemClock_Config+0x120>)
 80035b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <SystemClock_Config+0x120>)
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	0549      	lsls	r1, r1, #21
 80035be:	430a      	orrs	r2, r1
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035c2:	4b25      	ldr	r3, [pc, #148]	; (8003658 <SystemClock_Config+0x124>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a25      	ldr	r2, [pc, #148]	; (800365c <SystemClock_Config+0x128>)
 80035c8:	401a      	ands	r2, r3
 80035ca:	4b23      	ldr	r3, [pc, #140]	; (8003658 <SystemClock_Config+0x124>)
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	0109      	lsls	r1, r1, #4
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <SystemClock_Config+0x124>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2210      	movs	r2, #16
 80035dc:	4013      	ands	r3, r2
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d0f9      	beq.n	80035d6 <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80035e2:	2124      	movs	r1, #36	; 0x24
 80035e4:	187b      	adds	r3, r7, r1
 80035e6:	220f      	movs	r2, #15
 80035e8:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2203      	movs	r2, #3
 80035ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2200      	movs	r2, #0
 80035fa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2101      	movs	r1, #1
 8003606:	0018      	movs	r0, r3
 8003608:	f005 f906 	bl	8008818 <HAL_RCC_ClockConfig>
 800360c:	1e03      	subs	r3, r0, #0
 800360e:	d001      	beq.n	8003614 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003610:	f000 f826 	bl	8003660 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003614:	003b      	movs	r3, r7
 8003616:	22ab      	movs	r2, #171	; 0xab
 8003618:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800361a:	003b      	movs	r3, r7
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003620:	003b      	movs	r3, r7
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003626:	003b      	movs	r3, r7
 8003628:	2200      	movs	r2, #0
 800362a:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800362c:	003b      	movs	r3, r7
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	0292      	lsls	r2, r2, #10
 8003632:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003634:	003b      	movs	r3, r7
 8003636:	2200      	movs	r2, #0
 8003638:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363a:	003b      	movs	r3, r7
 800363c:	0018      	movs	r0, r3
 800363e:	f005 fb0f 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 8003642:	1e03      	subs	r3, r0, #0
 8003644:	d001      	beq.n	800364a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8003646:	f000 f80b 	bl	8003660 <Error_Handler>
  }
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b01d      	add	sp, #116	; 0x74
 8003650:	bd90      	pop	{r4, r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
 800365c:	ffffe7ff 	.word	0xffffe7ff

08003660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003664:	e7fe      	b.n	8003664 <Error_Handler+0x4>
	...

08003668 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b090      	sub	sp, #64	; 0x40
 800366c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800366e:	232c      	movs	r3, #44	; 0x2c
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	0018      	movs	r0, r3
 8003674:	2314      	movs	r3, #20
 8003676:	001a      	movs	r2, r3
 8003678:	2100      	movs	r1, #0
 800367a:	f01a f930 	bl	801d8de <memset>
  RTC_DateTypeDef sDate = {0};
 800367e:	2328      	movs	r3, #40	; 0x28
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003686:	003b      	movs	r3, r7
 8003688:	0018      	movs	r0, r3
 800368a:	2328      	movs	r3, #40	; 0x28
 800368c:	001a      	movs	r2, r3
 800368e:	2100      	movs	r1, #0
 8003690:	f01a f925 	bl	801d8de <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003694:	4b41      	ldr	r3, [pc, #260]	; (800379c <MX_RTC_Init+0x134>)
 8003696:	4a42      	ldr	r2, [pc, #264]	; (80037a0 <MX_RTC_Init+0x138>)
 8003698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800369a:	4b40      	ldr	r3, [pc, #256]	; (800379c <MX_RTC_Init+0x134>)
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80036a0:	4b3e      	ldr	r3, [pc, #248]	; (800379c <MX_RTC_Init+0x134>)
 80036a2:	221f      	movs	r2, #31
 80036a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <MX_RTC_Init+0x134>)
 80036a8:	4a3e      	ldr	r2, [pc, #248]	; (80037a4 <MX_RTC_Init+0x13c>)
 80036aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036ac:	4b3b      	ldr	r3, [pc, #236]	; (800379c <MX_RTC_Init+0x134>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <MX_RTC_Init+0x134>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036b8:	4b38      	ldr	r3, [pc, #224]	; (800379c <MX_RTC_Init+0x134>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036be:	4b37      	ldr	r3, [pc, #220]	; (800379c <MX_RTC_Init+0x134>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036c4:	4b35      	ldr	r3, [pc, #212]	; (800379c <MX_RTC_Init+0x134>)
 80036c6:	0018      	movs	r0, r3
 80036c8:	f005 fc20 	bl	8008f0c <HAL_RTC_Init>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80036d0:	f7ff ffc6 	bl	8003660 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	2200      	movs	r2, #0
 80036e0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	2200      	movs	r2, #0
 80036e6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	2200      	movs	r2, #0
 80036ec:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80036f4:	1879      	adds	r1, r7, r1
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <MX_RTC_Init+0x134>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	0018      	movs	r0, r3
 80036fc:	f005 fca4 	bl	8009048 <HAL_RTC_SetTime>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d001      	beq.n	8003708 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003704:	f7ff ffac 	bl	8003660 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003708:	2128      	movs	r1, #40	; 0x28
 800370a:	187b      	adds	r3, r7, r1
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2201      	movs	r2, #1
 8003714:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2201      	movs	r2, #1
 800371a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2200      	movs	r2, #0
 8003720:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003722:	1879      	adds	r1, r7, r1
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <MX_RTC_Init+0x134>)
 8003726:	2200      	movs	r2, #0
 8003728:	0018      	movs	r0, r3
 800372a:	f005 fdad 	bl	8009288 <HAL_RTC_SetDate>
 800372e:	1e03      	subs	r3, r0, #0
 8003730:	d001      	beq.n	8003736 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003732:	f7ff ff95 	bl	8003660 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003736:	003b      	movs	r3, r7
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800373c:	003b      	movs	r3, r7
 800373e:	2200      	movs	r2, #0
 8003740:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003742:	003b      	movs	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003748:	003b      	movs	r3, r7
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800374e:	003b      	movs	r3, r7
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003754:	003b      	movs	r3, r7
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800375a:	003b      	movs	r3, r7
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003760:	003b      	movs	r3, r7
 8003762:	22a0      	movs	r2, #160	; 0xa0
 8003764:	0512      	lsls	r2, r2, #20
 8003766:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003768:	003b      	movs	r3, r7
 800376a:	2200      	movs	r2, #0
 800376c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 800376e:	003b      	movs	r3, r7
 8003770:	2220      	movs	r2, #32
 8003772:	211e      	movs	r1, #30
 8003774:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003776:	003b      	movs	r3, r7
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	0052      	lsls	r2, r2, #1
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800377e:	0039      	movs	r1, r7
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <MX_RTC_Init+0x134>)
 8003782:	2200      	movs	r2, #0
 8003784:	0018      	movs	r0, r3
 8003786:	f005 fe7b 	bl	8009480 <HAL_RTC_SetAlarm_IT>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d001      	beq.n	8003792 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800378e:	f7ff ff67 	bl	8003660 <Error_Handler>
  }

}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b010      	add	sp, #64	; 0x40
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	200005ec 	.word	0x200005ec
 80037a0:	40002800 	.word	0x40002800
 80037a4:	000003ff 	.word	0x000003ff

080037a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b091      	sub	sp, #68	; 0x44
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b0:	2408      	movs	r4, #8
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	0018      	movs	r0, r3
 80037b6:	2338      	movs	r3, #56	; 0x38
 80037b8:	001a      	movs	r2, r3
 80037ba:	2100      	movs	r1, #0
 80037bc:	f01a f88f 	bl	801d8de <memset>
  if (rtcHandle->Instance == RTC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_RTC_MspInit+0x78>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d126      	bne.n	8003818 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	2204      	movs	r2, #4
 80037ce:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	2280      	movs	r2, #128	; 0x80
 80037d4:	0052      	lsls	r2, r2, #1
 80037d6:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 80037d8:	193b      	adds	r3, r7, r4
 80037da:	2200      	movs	r2, #0
 80037dc:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	0018      	movs	r0, r3
 80037ee:	f004 fc3f 	bl	8008070 <HAL_RCC_OscConfig>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 80037f6:	f7ff ff33 	bl	8003660 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_RTC_MspInit+0x7c>)
 80037fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RTC_MspInit+0x7c>)
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	02c9      	lsls	r1, r1, #11
 8003804:	430a      	orrs	r2, r1
 8003806:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003808:	2200      	movs	r2, #0
 800380a:	2100      	movs	r1, #0
 800380c:	2002      	movs	r0, #2
 800380e:	f002 ff8d 	bl	800672c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 8003812:	2002      	movs	r0, #2
 8003814:	f002 ff9f 	bl	8006756 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b011      	add	sp, #68	; 0x44
 800381e:	bd90      	pop	{r4, r7, pc}
 8003820:	40002800 	.word	0x40002800
 8003824:	40021000 	.word	0x40021000

08003828 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	0c1b      	lsrs	r3, r3, #16
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}

08003840 <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <RTC_IF_Init+0x60>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	4053      	eors	r3, r2
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01f      	beq.n	8003894 <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	2220      	movs	r2, #32
 8003858:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	2280      	movs	r2, #128	; 0x80
 800385e:	0252      	lsls	r2, r2, #9
 8003860:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	0018      	movs	r0, r3
 8003866:	f005 f9fb 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d000      	beq.n	8003870 <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 800386e:	e7fe      	b.n	800386e <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003870:	f7ff fefa 	bl	8003668 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	005a      	lsls	r2, r3, #1
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <RTC_IF_Init+0x64>)
 800387a:	0011      	movs	r1, r2
 800387c:	0018      	movs	r0, r3
 800387e:	f005 ff4b 	bl	8009718 <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <RTC_IF_Init+0x64>)
 8003884:	0018      	movs	r0, r3
 8003886:	f006 f8f5 	bl	8009a74 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 800388a:	f000 f859 	bl	8003940 <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 800388e:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <RTC_IF_Init+0x60>)
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b00a      	add	sp, #40	; 0x28
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	20000610 	.word	0x20000610
 80038a4:	200005ec 	.word	0x200005ec

080038a8 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <RTC_IF_StartTimer+0x5c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	5e9b      	ldrsh	r3, [r3, r2]
 80038b6:	3303      	adds	r3, #3
 80038b8:	001c      	movs	r4, r3
 80038ba:	f000 f861 	bl	8003980 <RTC_IF_GetTimerElapsedTime>
 80038be:	0002      	movs	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	429c      	cmp	r4, r3
 80038c6:	d204      	bcs.n	80038d2 <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 80038c8:	2100      	movs	r1, #0
 80038ca:	2002      	movs	r0, #2
 80038cc:	f018 fa32 	bl	801bd34 <UTIL_LPM_SetStopMode>
 80038d0:	e003      	b.n	80038da <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 80038d2:	2101      	movs	r1, #1
 80038d4:	2002      	movs	r0, #2
 80038d6:	f018 fa2d 	bl	801bd34 <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 80038da:	f018 fa8b 	bl	801bdf4 <UTIL_LPM_GetMode>
 80038de:	0003      	movs	r3, r0
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d106      	bne.n	80038f2 <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <RTC_IF_StartTimer+0x5c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	5e9b      	ldrsh	r3, [r3, r2]
 80038ea:	001a      	movs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f959 	bl	8003bac <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b003      	add	sp, #12
 8003902:	bd90      	pop	{r4, r7, pc}
 8003904:	20000612 	.word	0x20000612

08003908 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <RTC_IF_StopTimer+0x30>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	22ff      	movs	r2, #255	; 0xff
 8003914:	401a      	ands	r2, r3
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <RTC_IF_StopTimer+0x30>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4908      	ldr	r1, [pc, #32]	; (800393c <RTC_IF_StopTimer+0x34>)
 800391c:	430a      	orrs	r2, r1
 800391e:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	005a      	lsls	r2, r3, #1
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <RTC_IF_StopTimer+0x30>)
 8003926:	0011      	movs	r1, r2
 8003928:	0018      	movs	r0, r3
 800392a:	f005 fef5 	bl	8009718 <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	200005ec 	.word	0x200005ec
 800393c:	fffffe7f 	.word	0xfffffe7f

08003940 <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003944:	4a06      	ldr	r2, [pc, #24]	; (8003960 <RTC_IF_SetTimerContext+0x20>)
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <RTC_IF_SetTimerContext+0x24>)
 8003948:	0011      	movs	r1, r2
 800394a:	0018      	movs	r0, r3
 800394c:	f000 fa94 	bl	8003e78 <RTC_GetCalendarValue>
 8003950:	0002      	movs	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <RTC_IF_SetTimerContext+0x28>)
 8003954:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <RTC_IF_SetTimerContext+0x28>)
 8003958:	681b      	ldr	r3, [r3, #0]
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000640 	.word	0x20000640
 8003964:	20000654 	.word	0x20000654
 8003968:	2000063c 	.word	0x2000063c

0800396c <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003970:	4b02      	ldr	r3, [pc, #8]	; (800397c <RTC_IF_GetTimerContext+0x10>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	2000063c 	.word	0x2000063c

08003980 <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003986:	2308      	movs	r3, #8
 8003988:	18fa      	adds	r2, r7, r3
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	0011      	movs	r1, r2
 800398e:	0018      	movs	r0, r3
 8003990:	f000 fa72 	bl	8003e78 <RTC_GetCalendarValue>
 8003994:	0003      	movs	r3, r0
 8003996:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <RTC_IF_GetTimerElapsedTime+0x28>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	1ad3      	subs	r3, r2, r3
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b008      	add	sp, #32
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	2000063c 	.word	0x2000063c

080039ac <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <RTC_IF_GetTimerValue+0x30>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80039be:	2308      	movs	r3, #8
 80039c0:	18fa      	adds	r2, r7, r3
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	0011      	movs	r1, r2
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fa56 	bl	8003e78 <RTC_GetCalendarValue>
 80039cc:	0003      	movs	r3, r0
 80039ce:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 80039d0:	69fb      	ldr	r3, [r7, #28]
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b008      	add	sp, #32
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	20000610 	.word	0x20000610

080039e0 <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 80039e4:	2303      	movs	r3, #3
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80039ec:	b5b0      	push	{r4, r5, r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	000a      	movs	r2, r1
 80039f8:	2100      	movs	r1, #0
 80039fa:	000b      	movs	r3, r1
 80039fc:	0e51      	lsrs	r1, r2, #25
 80039fe:	01dd      	lsls	r5, r3, #7
 8003a00:	430d      	orrs	r5, r1
 8003a02:	01d4      	lsls	r4, r2, #7
 8003a04:	227d      	movs	r2, #125	; 0x7d
 8003a06:	2300      	movs	r3, #0
 8003a08:	0020      	movs	r0, r4
 8003a0a:	0029      	movs	r1, r5
 8003a0c:	f7fc fd5c 	bl	80004c8 <__aeabi_uldivmod>
 8003a10:	0002      	movs	r2, r0
 8003a12:	000b      	movs	r3, r1
 8003a14:	0013      	movs	r3, r2
}
 8003a16:	0018      	movs	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b002      	add	sp, #8
 8003a1c:	bdb0      	pop	{r4, r5, r7, pc}

08003a1e <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a20:	b089      	sub	sp, #36	; 0x24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	0ed1      	lsrs	r1, r2, #27
 8003a34:	0158      	lsls	r0, r3, #5
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	4308      	orrs	r0, r1
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	0153      	lsls	r3, r2, #5
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	68fc      	ldr	r4, [r7, #12]
 8003a46:	6939      	ldr	r1, [r7, #16]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	1a5b      	subs	r3, r3, r1
 8003a4c:	4194      	sbcs	r4, r2
 8003a4e:	001a      	movs	r2, r3
 8003a50:	0023      	movs	r3, r4
 8003a52:	0f91      	lsrs	r1, r2, #30
 8003a54:	0098      	lsls	r0, r3, #2
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4308      	orrs	r0, r1
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	0093      	lsls	r3, r2, #2
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	6838      	ldr	r0, [r7, #0]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	1812      	adds	r2, r2, r0
 8003a6c:	414b      	adcs	r3, r1
 8003a6e:	0659      	lsls	r1, r3, #25
 8003a70:	09d0      	lsrs	r0, r2, #7
 8003a72:	0005      	movs	r5, r0
 8003a74:	0028      	movs	r0, r5
 8003a76:	4308      	orrs	r0, r1
 8003a78:	0005      	movs	r5, r0
 8003a7a:	09db      	lsrs	r3, r3, #7
 8003a7c:	001e      	movs	r6, r3
 8003a7e:	002b      	movs	r3, r5
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b009      	add	sp, #36	; 0x24
 8003a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a88 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7ff ffa6 	bl	80039ec <RTC_IF_Convert_ms2Tick>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8003aa4:	f7ff ff82 	bl	80039ac <RTC_IF_GetTimerValue>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003aac:	e000      	b.n	8003ab0 <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 8003aae:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003ab0:	f7ff ff7c 	bl	80039ac <RTC_IF_GetTimerValue>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d8f6      	bhi.n	8003aae <RTC_IF_DelayMs+0x26>
  }
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b004      	add	sp, #16
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 8003ad2:	f018 fe5d 	bl	801c790 <UTIL_TIMER_IRQ_Handler>
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}

08003ade <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 8003ade:	b5b0      	push	{r4, r5, r7, lr}
 8003ae0:	b08c      	sub	sp, #48	; 0x30
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	18fa      	adds	r2, r7, r3
 8003aea:	2308      	movs	r3, #8
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	0011      	movs	r1, r2
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 f9c1 	bl	8003e78 <RTC_GetCalendarValue>
 8003af6:	0003      	movs	r3, r0
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afa:	2300      	movs	r3, #0
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	059b      	lsls	r3, r3, #22
 8003b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b04:	0a94      	lsrs	r4, r2, #10
 8003b06:	431c      	orrs	r4, r3
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	0a9d      	lsrs	r5, r3, #10
 8003b0c:	0023      	movs	r3, r4
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	059b      	lsls	r3, r3, #22
 8003b14:	0d9b      	lsrs	r3, r3, #22
 8003b16:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7ff ff7f 	bl	8003a1e <RTC_IF_Convert_Tick2ms>
 8003b20:	0003      	movs	r3, r0
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	801a      	strh	r2, [r3, #0]

  return seconds;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b00c      	add	sp, #48	; 0x30
 8003b30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003b34 <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <RTC_IF_BkUp_Write_Seconds+0x1c>)
 8003b40:	2100      	movs	r1, #0
 8003b42:	0018      	movs	r0, r3
 8003b44:	f005 ff6c 	bl	8009a20 <HAL_RTCEx_BKUPWrite>
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	200005ec 	.word	0x200005ec

08003b54 <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8003b60:	2101      	movs	r1, #1
 8003b62:	0018      	movs	r0, r3
 8003b64:	f005 ff5c 	bl	8009a20 <HAL_RTCEx_BKUPWrite>
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200005ec 	.word	0x200005ec

08003b74 <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <RTC_IF_BkUp_Read_Seconds+0x18>)
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f005 ff65 	bl	8009a4c <HAL_RTCEx_BKUPRead>
 8003b82:	0003      	movs	r3, r0
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	200005ec 	.word	0x200005ec

08003b90 <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f005 ff57 	bl	8009a4c <HAL_RTCEx_BKUPRead>
 8003b9e:	0003      	movs	r3, r0
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	200005ec 	.word	0x200005ec

08003bac <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8003bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bae:	b08d      	sub	sp, #52	; 0x34
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8003bb4:	242e      	movs	r4, #46	; 0x2e
 8003bb6:	193b      	adds	r3, r7, r4
 8003bb8:	2200      	movs	r2, #0
 8003bba:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8003bbc:	232c      	movs	r3, #44	; 0x2c
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8003bc4:	232a      	movs	r3, #42	; 0x2a
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2200      	movs	r2, #0
 8003bca:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8003bcc:	2328      	movs	r3, #40	; 0x28
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8003bd4:	2526      	movs	r5, #38	; 0x26
 8003bd6:	197b      	adds	r3, r7, r5
 8003bd8:	2200      	movs	r2, #0
 8003bda:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003bdc:	2610      	movs	r6, #16
 8003bde:	19ba      	adds	r2, r7, r6
 8003be0:	4b9b      	ldr	r3, [pc, #620]	; (8003e50 <RTC_StartWakeUpAlarm+0x2a4>)
 8003be2:	3304      	adds	r3, #4
 8003be4:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003be6:	c223      	stmia	r2!, {r0, r1, r5}
 8003be8:	cb03      	ldmia	r3!, {r0, r1}
 8003bea:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003bec:	230c      	movs	r3, #12
 8003bee:	001d      	movs	r5, r3
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	4a97      	ldr	r2, [pc, #604]	; (8003e50 <RTC_StartWakeUpAlarm+0x2a4>)
 8003bf4:	6992      	ldr	r2, [r2, #24]
 8003bf6:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8003bf8:	f7ff fe86 	bl	8003908 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003bfc:	19bb      	adds	r3, r7, r6
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	193b      	adds	r3, r7, r4
 8003c04:	4993      	ldr	r1, [pc, #588]	; (8003e54 <RTC_StartWakeUpAlarm+0x2a8>)
 8003c06:	1a8a      	subs	r2, r1, r2
 8003c08:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	059b      	lsls	r3, r3, #22
 8003c10:	0d9b      	lsrs	r3, r3, #22
 8003c12:	b299      	uxth	r1, r3
 8003c14:	193b      	adds	r3, r7, r4
 8003c16:	193a      	adds	r2, r7, r4
 8003c18:	8812      	ldrh	r2, [r2, #0]
 8003c1a:	188a      	adds	r2, r1, r2
 8003c1c:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0a9b      	lsrs	r3, r3, #10
 8003c22:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003c24:	002b      	movs	r3, r5
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	789a      	ldrb	r2, [r3, #2]
 8003c2a:	2526      	movs	r5, #38	; 0x26
 8003c2c:	197b      	adds	r3, r7, r5
 8003c2e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003c30:	e00a      	b.n	8003c48 <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a88      	ldr	r2, [pc, #544]	; (8003e58 <RTC_StartWakeUpAlarm+0x2ac>)
 8003c36:	4694      	mov	ip, r2
 8003c38:	4463      	add	r3, ip
 8003c3a:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8003c3c:	2126      	movs	r1, #38	; 0x26
 8003c3e:	187b      	adds	r3, r7, r1
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	3201      	adds	r2, #1
 8003c46:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a84      	ldr	r2, [pc, #528]	; (8003e5c <RTC_StartWakeUpAlarm+0x2b0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d8f0      	bhi.n	8003c32 <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8003c50:	2310      	movs	r3, #16
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	2328      	movs	r3, #40	; 0x28
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003c5c:	e00a      	b.n	8003c74 <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a7f      	ldr	r2, [pc, #508]	; (8003e60 <RTC_StartWakeUpAlarm+0x2b4>)
 8003c62:	4694      	mov	ip, r2
 8003c64:	4463      	add	r3, ip
 8003c66:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8003c68:	2128      	movs	r1, #40	; 0x28
 8003c6a:	187b      	adds	r3, r7, r1
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	3201      	adds	r2, #1
 8003c72:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	23e1      	movs	r3, #225	; 0xe1
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d2ef      	bcs.n	8003c5e <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003c7e:	2310      	movs	r3, #16
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	785a      	ldrb	r2, [r3, #1]
 8003c84:	232a      	movs	r3, #42	; 0x2a
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003c8a:	e008      	b.n	8003c9e <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b3c      	subs	r3, #60	; 0x3c
 8003c90:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8003c92:	212a      	movs	r1, #42	; 0x2a
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	881a      	ldrh	r2, [r3, #0]
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	3201      	adds	r2, #1
 8003c9c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b3b      	cmp	r3, #59	; 0x3b
 8003ca2:	d8f3      	bhi.n	8003c8c <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	789b      	ldrb	r3, [r3, #2]
 8003caa:	b299      	uxth	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	232c      	movs	r3, #44	; 0x2c
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	188a      	adds	r2, r1, r2
 8003cb6:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003cb8:	e00d      	b.n	8003cd6 <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 8003cba:	222e      	movs	r2, #46	; 0x2e
 8003cbc:	18bb      	adds	r3, r7, r2
 8003cbe:	18ba      	adds	r2, r7, r2
 8003cc0:	8812      	ldrh	r2, [r2, #0]
 8003cc2:	4968      	ldr	r1, [pc, #416]	; (8003e64 <RTC_StartWakeUpAlarm+0x2b8>)
 8003cc4:	468c      	mov	ip, r1
 8003cc6:	4462      	add	r2, ip
 8003cc8:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	881a      	ldrh	r2, [r3, #0]
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	3201      	adds	r2, #1
 8003cd4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003cd6:	232e      	movs	r3, #46	; 0x2e
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	881a      	ldrh	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d2ea      	bcs.n	8003cba <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003ce4:	e00b      	b.n	8003cfe <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003ce6:	222c      	movs	r2, #44	; 0x2c
 8003ce8:	18bb      	adds	r3, r7, r2
 8003cea:	18ba      	adds	r2, r7, r2
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	3a3c      	subs	r2, #60	; 0x3c
 8003cf0:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8003cf2:	212a      	movs	r1, #42	; 0x2a
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	881a      	ldrh	r2, [r3, #0]
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	3201      	adds	r2, #1
 8003cfc:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003cfe:	232c      	movs	r3, #44	; 0x2c
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	2b3b      	cmp	r3, #59	; 0x3b
 8003d06:	d8ee      	bhi.n	8003ce6 <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003d08:	e00b      	b.n	8003d22 <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003d0a:	222a      	movs	r2, #42	; 0x2a
 8003d0c:	18bb      	adds	r3, r7, r2
 8003d0e:	18ba      	adds	r2, r7, r2
 8003d10:	8812      	ldrh	r2, [r2, #0]
 8003d12:	3a3c      	subs	r2, #60	; 0x3c
 8003d14:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8003d16:	2128      	movs	r1, #40	; 0x28
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	3201      	adds	r2, #1
 8003d20:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003d22:	232a      	movs	r3, #42	; 0x2a
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	2b3b      	cmp	r3, #59	; 0x3b
 8003d2a:	d8ee      	bhi.n	8003d0a <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003d2c:	e00b      	b.n	8003d46 <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003d2e:	2228      	movs	r2, #40	; 0x28
 8003d30:	18bb      	adds	r3, r7, r2
 8003d32:	18ba      	adds	r2, r7, r2
 8003d34:	8812      	ldrh	r2, [r2, #0]
 8003d36:	3a18      	subs	r2, #24
 8003d38:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8003d3a:	2126      	movs	r1, #38	; 0x26
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	3201      	adds	r2, #1
 8003d44:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003d46:	2328      	movs	r3, #40	; 0x28
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	2b17      	cmp	r3, #23
 8003d4e:	d8ee      	bhi.n	8003d2e <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8003d50:	210c      	movs	r1, #12
 8003d52:	187b      	adds	r3, r7, r1
 8003d54:	78db      	ldrb	r3, [r3, #3]
 8003d56:	2203      	movs	r2, #3
 8003d58:	4013      	ands	r3, r2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d119      	bne.n	8003d94 <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	4a40      	ldr	r2, [pc, #256]	; (8003e68 <RTC_StartWakeUpAlarm+0x2bc>)
 8003d68:	5cd3      	ldrb	r3, [r2, r3]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2426      	movs	r4, #38	; 0x26
 8003d6e:	193a      	adds	r2, r7, r4
 8003d70:	8812      	ldrh	r2, [r2, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d928      	bls.n	8003dc8 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	8818      	ldrh	r0, [r3, #0]
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	4a39      	ldr	r2, [pc, #228]	; (8003e68 <RTC_StartWakeUpAlarm+0x2bc>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	0019      	movs	r1, r3
 8003d86:	f7fc fb37 	bl	80003f8 <__aeabi_idivmod>
 8003d8a:	000b      	movs	r3, r1
 8003d8c:	001a      	movs	r2, r3
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	801a      	strh	r2, [r3, #0]
 8003d92:	e019      	b.n	8003dc8 <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003d94:	210c      	movs	r1, #12
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	4a33      	ldr	r2, [pc, #204]	; (8003e6c <RTC_StartWakeUpAlarm+0x2c0>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2426      	movs	r4, #38	; 0x26
 8003da4:	193a      	adds	r2, r7, r4
 8003da6:	8812      	ldrh	r2, [r2, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d90d      	bls.n	8003dc8 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	8818      	ldrh	r0, [r3, #0]
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <RTC_StartWakeUpAlarm+0x2c0>)
 8003db8:	5cd3      	ldrb	r3, [r2, r3]
 8003dba:	0019      	movs	r1, r3
 8003dbc:	f7fc fb1c 	bl	80003f8 <__aeabi_idivmod>
 8003dc0:	000b      	movs	r3, r1
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	193b      	adds	r3, r7, r4
 8003dc6:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8003dc8:	232e      	movs	r3, #46	; 0x2e
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <RTC_StartWakeUpAlarm+0x2a8>)
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003dd6:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003dda:	22a0      	movs	r2, #160	; 0xa0
 8003ddc:	0512      	lsls	r2, r2, #20
 8003dde:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8003de0:	232c      	movs	r3, #44	; 0x2c
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003dea:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8003dec:	232a      	movs	r3, #42	; 0x2a
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003df6:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8003df8:	2328      	movs	r3, #40	; 0x28
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e02:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003e04:	2326      	movs	r3, #38	; 0x26
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b2d9      	uxtb	r1, r3
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e0e:	2220      	movs	r2, #32
 8003e10:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8003e12:	2310      	movs	r3, #16
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	78da      	ldrb	r2, [r3, #3]
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e1a:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	0052      	lsls	r2, r2, #1
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003e3c:	490c      	ldr	r1, [pc, #48]	; (8003e70 <RTC_StartWakeUpAlarm+0x2c4>)
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <RTC_StartWakeUpAlarm+0x2c8>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	0018      	movs	r0, r3
 8003e44:	f005 fb1c 	bl	8009480 <HAL_RTC_SetAlarm_IT>
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b00d      	add	sp, #52	; 0x34
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e50:	2000063c 	.word	0x2000063c
 8003e54:	000003ff 	.word	0x000003ff
 8003e58:	fffeae80 	.word	0xfffeae80
 8003e5c:	0001517f 	.word	0x0001517f
 8003e60:	fffff1f0 	.word	0xfffff1f0
 8003e64:	fffffc00 	.word	0xfffffc00
 8003e68:	0801dff4 	.word	0x0801dff4
 8003e6c:	0801dfe8 	.word	0x0801dfe8
 8003e70:	20000614 	.word	0x20000614
 8003e74:	200005ec 	.word	0x200005ec

08003e78 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <RTC_GetCalendarValue+0x11c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f005 f99f 	bl	80091d0 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <RTC_GetCalendarValue+0x120>)
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff fcc7 	bl	8003828 <LL_RTC_TIME_GetSubSecond>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4b3c      	ldr	r3, [pc, #240]	; (8003f94 <RTC_GetCalendarValue+0x11c>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f005 fa9d 	bl	80093e4 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003eaa:	6839      	ldr	r1, [r7, #0]
 8003eac:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <RTC_GetCalendarValue+0x11c>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f005 f98d 	bl	80091d0 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8003eb6:	4b38      	ldr	r3, [pc, #224]	; (8003f98 <RTC_GetCalendarValue+0x120>)
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7ff fcb5 	bl	8003828 <LL_RTC_TIME_GetSubSecond>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d1e5      	bne.n	8003e92 <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	78db      	ldrb	r3, [r3, #3]
 8003eca:	001a      	movs	r2, r3
 8003ecc:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <RTC_GetCalendarValue+0x124>)
 8003ece:	4353      	muls	r3, r2
 8003ed0:	3303      	adds	r3, #3
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	78db      	ldrb	r3, [r3, #3]
 8003eda:	2203      	movs	r2, #3
 8003edc:	4013      	ands	r3, r2
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <RTC_GetCalendarValue+0x70>
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <RTC_GetCalendarValue+0x128>)
 8003ee6:	e000      	b.n	8003eea <RTC_GetCalendarValue+0x72>
 8003ee8:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <RTC_GetCalendarValue+0x12c>)
 8003eea:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	0013      	movs	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	3301      	adds	r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da00      	bge.n	8003f04 <RTC_GetCalendarValue+0x8c>
 8003f02:	3301      	adds	r3, #1
 8003f04:	105b      	asrs	r3, r3, #1
 8003f06:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	40da      	lsrs	r2, r3
 8003f14:	0013      	movs	r3, r2
 8003f16:	2203      	movs	r2, #3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	18d3      	adds	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	789b      	ldrb	r3, [r3, #2]
 8003f26:	001a      	movs	r2, r3
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	18d3      	adds	r3, r2, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	0013      	movs	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	011a      	lsls	r2, r3, #4
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	0113      	lsls	r3, r2, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	01db      	lsls	r3, r3, #7
 8003f42:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	789b      	ldrb	r3, [r3, #2]
 8003f48:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	001a      	movs	r2, r3
 8003f50:	0013      	movs	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	011a      	lsls	r2, r3, #4
 8003f58:	1ad2      	subs	r2, r2, r3
 8003f5a:	0113      	lsls	r3, r2, #4
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	001a      	movs	r2, r3
 8003f66:	0013      	movs	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	18c3      	adds	r3, r0, r3
 8003f70:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	029a      	lsls	r2, r3, #10
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <RTC_GetCalendarValue+0x130>)
 8003f84:	4694      	mov	ip, r2
 8003f86:	4463      	add	r3, ip
 8003f88:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 8003f8a:	697b      	ldr	r3, [r7, #20]
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b006      	add	sp, #24
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	200005ec 	.word	0x200005ec
 8003f98:	40002800 	.word	0x40002800
 8003f9c:	000005b5 	.word	0x000005b5
 8003fa0:	00445550 	.word	0x00445550
 8003fa4:	0099aaa0 	.word	0x0099aaa0
 8003fa8:	000003ff 	.word	0x000003ff

08003fac <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fca:	607b      	str	r3, [r7, #4]
  return(result);
 8003fcc:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8003fce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd0:	b672      	cpsid	i
}
 8003fd2:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 8003fd4:	f001 faae 	bl	8005534 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <PWR_EnterStopMode+0x48>)
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7ff f93a 	bl	8003254 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <PWR_EnterStopMode+0x4c>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <PWR_EnterStopMode+0x4c>)
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f383 8810 	msr	PRIMASK, r3
}
 8003ff6:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	f003 ffc0 	bl	8007f80 <HAL_PWR_EnterSTOPMode>
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000518 	.word	0x20000518
 800400c:	40007000 	.word	0x40007000

08004010 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004016:	f3ef 8310 	mrs	r3, PRIMASK
 800401a:	60bb      	str	r3, [r7, #8]
  return(result);
 800401c:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 800401e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004020:	b672      	cpsid	i
}
 8004022:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <PWR_ExitStopMode+0x7c>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b18      	ldr	r3, [pc, #96]	; (800408c <PWR_ExitStopMode+0x7c>)
 800402a:	2101      	movs	r1, #1
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	4b16      	ldr	r3, [pc, #88]	; (800408c <PWR_ExitStopMode+0x7c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2204      	movs	r2, #4
 8004038:	4013      	ands	r3, r2
 800403a:	d0fa      	beq.n	8004032 <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <PWR_ExitStopMode+0x7c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <PWR_ExitStopMode+0x7c>)
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	0449      	lsls	r1, r1, #17
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <PWR_ExitStopMode+0x7c>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	049b      	lsls	r3, r3, #18
 8004054:	4013      	ands	r3, r2
 8004056:	d0f9      	beq.n	800404c <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <PWR_ExitStopMode+0x7c>)
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <PWR_ExitStopMode+0x7c>)
 800405e:	2103      	movs	r1, #3
 8004060:	430a      	orrs	r2, r1
 8004062:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <PWR_ExitStopMode+0x7c>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	220c      	movs	r2, #12
 800406c:	4013      	ands	r3, r2
 800406e:	2b0c      	cmp	r3, #12
 8004070:	d1f9      	bne.n	8004066 <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8004072:	f001 f959 	bl	8005328 <CMWX1ZZABZ0XX_RADIO_IoInit>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f383 8810 	msr	PRIMASK, r3
}
 8004080:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b004      	add	sp, #16
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	40021000 	.word	0x40021000

08004090 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004094:	2101      	movs	r1, #1
 8004096:	2000      	movs	r0, #0
 8004098:	f003 ff1a 	bl	8007ed0 <HAL_PWR_EnterSLEEPMode>
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	af00      	add	r7, sp, #0
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2201      	movs	r2, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10e      	bne.n	80040e0 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2201      	movs	r2, #1
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d107      	bne.n	80040e0 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2201      	movs	r2, #1
 80040d6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 f888 	bl	80041f0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d10e      	bne.n	800410c <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2202      	movs	r2, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d107      	bne.n	800410c <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2202      	movs	r2, #2
 8004102:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0018      	movs	r0, r3
 8004108:	f000 f87a 	bl	8004200 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2204      	movs	r2, #4
 8004114:	4013      	ands	r3, r2
 8004116:	2b04      	cmp	r3, #4
 8004118:	d10e      	bne.n	8004138 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2204      	movs	r2, #4
 8004122:	4013      	ands	r3, r2
 8004124:	2b04      	cmp	r3, #4
 8004126:	d107      	bne.n	8004138 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2204      	movs	r2, #4
 800412e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f86c 	bl	8004210 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2208      	movs	r2, #8
 8004140:	4013      	ands	r3, r2
 8004142:	2b08      	cmp	r3, #8
 8004144:	d10e      	bne.n	8004164 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2208      	movs	r2, #8
 800414e:	4013      	ands	r3, r2
 8004150:	2b08      	cmp	r3, #8
 8004152:	d107      	bne.n	8004164 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2208      	movs	r2, #8
 800415a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0018      	movs	r0, r3
 8004160:	f000 f85e 	bl	8004220 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2210      	movs	r2, #16
 800416c:	4013      	ands	r3, r2
 800416e:	2b10      	cmp	r3, #16
 8004170:	d10e      	bne.n	8004190 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2210      	movs	r2, #16
 800417a:	4013      	ands	r3, r2
 800417c:	2b10      	cmp	r3, #16
 800417e:	d107      	bne.n	8004190 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2210      	movs	r2, #16
 8004186:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 f850 	bl	8004230 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2220      	movs	r2, #32
 8004198:	4013      	ands	r3, r2
 800419a:	2b20      	cmp	r3, #32
 800419c:	d10e      	bne.n	80041bc <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2220      	movs	r2, #32
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d107      	bne.n	80041bc <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2220      	movs	r2, #32
 80041b2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	0018      	movs	r0, r3
 80041b8:	f000 f842 	bl	8004240 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2240      	movs	r2, #64	; 0x40
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b40      	cmp	r3, #64	; 0x40
 80041c8:	d10e      	bne.n	80041e8 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2240      	movs	r2, #64	; 0x40
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d107      	bne.n	80041e8 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2240      	movs	r2, #64	; 0x40
 80041de:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 f834 	bl	8004250 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b002      	add	sp, #8
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b002      	add	sp, #8
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b002      	add	sp, #8
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_MspInit+0x3c>)
 8004266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_MspInit+0x3c>)
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	0549      	lsls	r1, r1, #21
 800426e:	430a      	orrs	r2, r1
 8004270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004272:	f003 fe1f 	bl	8007eb4 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8004276:	f003 feed 	bl	8008054 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_MspInit+0x40>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_MspInit+0x40>)
 8004280:	2108      	movs	r1, #8
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_MspInit+0x40>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_MspInit+0x40>)
 800428c:	2108      	movs	r1, #8
 800428e:	438a      	bics	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004292:	f003 fed1 	bl	8008038 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000
 80042a0:	40022000 	.word	0x40022000

080042a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	e7fd      	b.n	80042b2 <HardFault_Handler+0x4>

080042b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042ce:	f001 fba1 	bl	8005a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <EXTI0_1_IRQHandler+0x1c>)
 80042de:	0018      	movs	r0, r3
 80042e0:	f002 fd2c 	bl	8006d3c <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <EXTI0_1_IRQHandler+0x20>)
 80042e6:	0018      	movs	r0, r3
 80042e8:	f002 fd28 	bl	8006d3c <HAL_EXTI_IRQHandler>
#endif
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	200007e8 	.word	0x200007e8
 80042f8:	200007e0 	.word	0x200007e0

080042fc <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <EXTI4_15_IRQHandler+0x1c>)
 800430e:	0018      	movs	r0, r3
 8004310:	f002 fd14 	bl	8006d3c <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <EXTI4_15_IRQHandler+0x20>)
 8004316:	0018      	movs	r0, r3
 8004318:	f002 fd10 	bl	8006d3c <HAL_EXTI_IRQHandler>
#endif
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	200007d8 	.word	0x200007d8
 8004328:	200007f0 	.word	0x200007f0

0800432c <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004334:	0018      	movs	r0, r3
 8004336:	f002 fbf2 	bl	8006b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000658 	.word	0x20000658

08004344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <USART2_IRQHandler+0x14>)
 800434a:	0018      	movs	r0, r3
 800434c:	f006 f844 	bl	800a3d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	20000658 	.word	0x20000658

0800435c <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <LPTIM1_IRQHandler+0x14>)
 8004362:	0018      	movs	r0, r3
 8004364:	f7ff fea2 	bl	80040ac <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	200005bc 	.word	0x200005bc

08004374 <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <RTC_IRQHandler+0x14>)
 800437a:	0018      	movs	r0, r3
 800437c:	f005 fa6c 	bl	8009858 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	200005ec 	.word	0x200005ec

0800438c <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004390:	f018 f892 	bl	801c4b8 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004394:	f000 f8b6 	bl	8004504 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 8004398:	f000 f982 	bl	80046a0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800439c:	f017 f9f2 	bl	801b784 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <SystemApp_Init+0x44>)
 80043a2:	0018      	movs	r0, r3
 80043a4:	f017 faa6 	bl	801b8f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80043a8:	2002      	movs	r0, #2
 80043aa:	f017 fab1 	bl	801b910 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80043ae:	f7fe ff7d 	bl	80032ac <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 80043b2:	f001 f9ed 	bl	8005790 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 80043b6:	f000 ffb7 	bl	8005328 <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 80043ba:	f000 fa15 	bl	80047e8 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80043be:	f017 fca9 	bl	801bd14 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80043c2:	2101      	movs	r1, #1
 80043c4:	2001      	movs	r0, #1
 80043c6:	f017 fce5 	bl	801bd94 <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	080044b9 	.word	0x080044b9

080043d4 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80043d8:	f017 fd3e 	bl	801be58 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80043ea:	250f      	movs	r5, #15
 80043ec:	197b      	adds	r3, r7, r5
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80043f2:	260c      	movs	r6, #12
 80043f4:	19bc      	adds	r4, r7, r6
 80043f6:	f7fe ffad 	bl	8003354 <SYS_GetBatteryLevel>
 80043fa:	0003      	movs	r3, r0
 80043fc:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80043fe:	19bb      	adds	r3, r7, r6
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	4a18      	ldr	r2, [pc, #96]	; (8004464 <GetBatteryLevel+0x80>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d903      	bls.n	8004410 <GetBatteryLevel+0x2c>
  {
//    batteryLevel = LORAWAN_MAX_BAT;
	  batteryLevel = 100;
 8004408:	197b      	adds	r3, r7, r5
 800440a:	2264      	movs	r2, #100	; 0x64
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e021      	b.n	8004454 <GetBatteryLevel+0x70>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004410:	230c      	movs	r3, #12
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	23e1      	movs	r3, #225	; 0xe1
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	429a      	cmp	r2, r3
 800441c:	d204      	bcs.n	8004428 <GetBatteryLevel+0x44>
  {
    batteryLevel = 0;
 800441e:	230f      	movs	r3, #15
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e015      	b.n	8004454 <GetBatteryLevel+0x70>
  }
  else
  {
//    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
    uint32_t batteryRange = VDD_BAT - VDD_MIN;
 8004428:	2396      	movs	r3, #150	; 0x96
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	60bb      	str	r3, [r7, #8]
    uint32_t batteryRemaining = batteryLevelmV - VDD_MIN;
 800442e:	230c      	movs	r3, #12
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <GetBatteryLevel+0x84>)
 8004436:	4694      	mov	ip, r2
 8004438:	4463      	add	r3, ip
 800443a:	607b      	str	r3, [r7, #4]
    batteryLevel = (batteryRemaining * 100) / batteryRange;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2264      	movs	r2, #100	; 0x64
 8004440:	4353      	muls	r3, r2
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	0018      	movs	r0, r3
 8004446:	f7fb fe67 	bl	8000118 <__udivsi3>
 800444a:	0003      	movs	r3, r0
 800444c:	001a      	movs	r2, r3
 800444e:	230f      	movs	r3, #15
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004454:	230f      	movs	r3, #15
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	781b      	ldrb	r3, [r3, #0]
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b005      	add	sp, #20
 8004460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	00000bb8 	.word	0x00000bb8
 8004468:	fffff8f8 	.word	0xfffff8f8

0800446c <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8004472:	1dbb      	adds	r3, r7, #6
 8004474:	2200      	movs	r2, #0
 8004476:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004478:	f7fe ff24 	bl	80032c4 <SYS_GetTemperatureLevel>
 800447c:	1e03      	subs	r3, r0, #0
 800447e:	da00      	bge.n	8004482 <GetTemperatureLevel+0x16>
 8004480:	33ff      	adds	r3, #255	; 0xff
 8004482:	121b      	asrs	r3, r3, #8
 8004484:	b21a      	sxth	r2, r3
 8004486:	1dbb      	adds	r3, r7, #6
 8004488:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800448a:	1dbb      	adds	r3, r7, #6
 800448c:	881b      	ldrh	r3, [r3, #0]
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b002      	add	sp, #8
 8004494:	bd80      	pop	{r7, pc}

08004496 <GetDevAddr>:

  /* USER CODE END GetUniqueId_2 */
}

uint32_t GetDevAddr(void)
{
 8004496:	b5b0      	push	{r4, r5, r7, lr}
 8004498:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800449a:	f001 facd 	bl	8005a38 <HAL_GetUIDw0>
 800449e:	0004      	movs	r4, r0
 80044a0:	f001 fad4 	bl	8005a4c <HAL_GetUIDw1>
 80044a4:	0003      	movs	r3, r0
 80044a6:	405c      	eors	r4, r3
 80044a8:	f001 fada 	bl	8005a60 <HAL_GetUIDw2>
 80044ac:	0003      	movs	r3, r0
 80044ae:	4063      	eors	r3, r4
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080044b8 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80044c2:	2408      	movs	r4, #8
 80044c4:	193b      	adds	r3, r7, r4
 80044c6:	0018      	movs	r0, r3
 80044c8:	f017 ff94 	bl	801c3f4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80044cc:	0022      	movs	r2, r4
 80044ce:	18bb      	adds	r3, r7, r2
 80044d0:	6819      	ldr	r1, [r3, #0]
 80044d2:	18bb      	adds	r3, r7, r2
 80044d4:	2204      	movs	r2, #4
 80044d6:	5e9b      	ldrsh	r3, [r3, r2]
 80044d8:	4a09      	ldr	r2, [pc, #36]	; (8004500 <TimestampNow+0x48>)
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	000b      	movs	r3, r1
 80044e0:	2110      	movs	r1, #16
 80044e2:	f000 f8a9 	bl	8004638 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f7fb fe0d 	bl	8000108 <strlen>
 80044ee:	0003      	movs	r3, r0
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b005      	add	sp, #20
 80044fc:	bd90      	pop	{r4, r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	0801e058 	.word	0x0801e058

08004504 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b08b      	sub	sp, #44	; 0x2c
 8004508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450a:	2414      	movs	r4, #20
 800450c:	193b      	adds	r3, r7, r4
 800450e:	0018      	movs	r0, r3
 8004510:	2314      	movs	r3, #20
 8004512:	001a      	movs	r2, r3
 8004514:	2100      	movs	r1, #0
 8004516:	f019 f9e2 	bl	801d8de <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800451a:	4b38      	ldr	r3, [pc, #224]	; (80045fc <Gpio_PreInit+0xf8>)
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <Gpio_PreInit+0xf8>)
 8004520:	2101      	movs	r1, #1
 8004522:	430a      	orrs	r2, r1
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
 8004526:	4b35      	ldr	r3, [pc, #212]	; (80045fc <Gpio_PreInit+0xf8>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	2201      	movs	r2, #1
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004532:	4b32      	ldr	r3, [pc, #200]	; (80045fc <Gpio_PreInit+0xf8>)
 8004534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004536:	4b31      	ldr	r3, [pc, #196]	; (80045fc <Gpio_PreInit+0xf8>)
 8004538:	2102      	movs	r1, #2
 800453a:	430a      	orrs	r2, r1
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <Gpio_PreInit+0xf8>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800454a:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <Gpio_PreInit+0xf8>)
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <Gpio_PreInit+0xf8>)
 8004550:	2104      	movs	r1, #4
 8004552:	430a      	orrs	r2, r1
 8004554:	62da      	str	r2, [r3, #44]	; 0x2c
 8004556:	4b29      	ldr	r3, [pc, #164]	; (80045fc <Gpio_PreInit+0xf8>)
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	2204      	movs	r2, #4
 800455c:	4013      	ands	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004562:	4b26      	ldr	r3, [pc, #152]	; (80045fc <Gpio_PreInit+0xf8>)
 8004564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004566:	4b25      	ldr	r3, [pc, #148]	; (80045fc <Gpio_PreInit+0xf8>)
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	430a      	orrs	r2, r1
 800456c:	62da      	str	r2, [r3, #44]	; 0x2c
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <Gpio_PreInit+0xf8>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	4013      	ands	r3, r2
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800457a:	193b      	adds	r3, r7, r4
 800457c:	2203      	movs	r2, #3
 800457e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	193b      	adds	r3, r7, r4
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8004586:	193b      	adds	r3, r7, r4
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <Gpio_PreInit+0xfc>)
 800458a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458c:	193a      	adds	r2, r7, r4
 800458e:	23a0      	movs	r3, #160	; 0xa0
 8004590:	05db      	lsls	r3, r3, #23
 8004592:	0011      	movs	r1, r2
 8004594:	0018      	movs	r0, r3
 8004596:	f002 fbf5 	bl	8006d84 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800459a:	193b      	adds	r3, r7, r4
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <Gpio_PreInit+0x100>)
 800459e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a0:	193b      	adds	r3, r7, r4
 80045a2:	4a19      	ldr	r2, [pc, #100]	; (8004608 <Gpio_PreInit+0x104>)
 80045a4:	0019      	movs	r1, r3
 80045a6:	0010      	movs	r0, r2
 80045a8:	f002 fbec 	bl	8006d84 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ac:	193b      	adds	r3, r7, r4
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <Gpio_PreInit+0x108>)
 80045b0:	0019      	movs	r1, r3
 80045b2:	0010      	movs	r0, r2
 80045b4:	f002 fbe6 	bl	8006d84 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045b8:	193b      	adds	r3, r7, r4
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <Gpio_PreInit+0x10c>)
 80045bc:	0019      	movs	r1, r3
 80045be:	0010      	movs	r0, r2
 80045c0:	f002 fbe0 	bl	8006d84 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80045c4:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <Gpio_PreInit+0xf8>)
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <Gpio_PreInit+0xf8>)
 80045ca:	2101      	movs	r1, #1
 80045cc:	438a      	bics	r2, r1
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <Gpio_PreInit+0xf8>)
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <Gpio_PreInit+0xf8>)
 80045d6:	2102      	movs	r1, #2
 80045d8:	438a      	bics	r2, r1
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80045dc:	4b07      	ldr	r3, [pc, #28]	; (80045fc <Gpio_PreInit+0xf8>)
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <Gpio_PreInit+0xf8>)
 80045e2:	2104      	movs	r1, #4
 80045e4:	438a      	bics	r2, r1
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <Gpio_PreInit+0xf8>)
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <Gpio_PreInit+0xf8>)
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	438a      	bics	r2, r1
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b00b      	add	sp, #44	; 0x2c
 80045fa:	bd90      	pop	{r4, r7, pc}
 80045fc:	40021000 	.word	0x40021000
 8004600:	00009fff 	.word	0x00009fff
 8004604:	0000ffff 	.word	0x0000ffff
 8004608:	50000400 	.word	0x50000400
 800460c:	50000800 	.word	0x50000800
 8004610:	50001c00 	.word	0x50001c00

08004614 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8004618:	2101      	movs	r1, #1
 800461a:	2004      	movs	r0, #4
 800461c:	f017 fb8a 	bl	801bd34 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800462a:	2100      	movs	r1, #0
 800462c:	2004      	movs	r0, #4
 800462e:	f017 fb81 	bl	801bd34 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8004638:	b40c      	push	{r2, r3}
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8004644:	231c      	movs	r3, #28
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800464a:	6839      	ldr	r1, [r7, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f018 fafb 	bl	801cc4c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	b004      	add	sp, #16
 800465c:	bc80      	pop	{r7}
 800465e:	bc08      	pop	{r3}
 8004660:	b002      	add	sp, #8
 8004662:	4718      	bx	r3

08004664 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800466e:	0018      	movs	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	b002      	add	sp, #8
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 800467a:	f7ff f997 	bl	80039ac <RTC_IF_GetTimerValue>
 800467e:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f7ff f9f9 	bl	8003a88 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b08b      	sub	sp, #44	; 0x2c
 80046a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80046a6:	2414      	movs	r4, #20
 80046a8:	193b      	adds	r3, r7, r4
 80046aa:	0018      	movs	r0, r3
 80046ac:	2314      	movs	r3, #20
 80046ae:	001a      	movs	r2, r3
 80046b0:	2100      	movs	r1, #0
 80046b2:	f019 f914 	bl	801d8de <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 80046b6:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <DBG_Init+0x140>)
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <DBG_Init+0x140>)
 80046bc:	2102      	movs	r1, #2
 80046be:	430a      	orrs	r2, r1
 80046c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80046c2:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <DBG_Init+0x140>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	2202      	movs	r2, #2
 80046c8:	4013      	ands	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 80046ce:	4b44      	ldr	r3, [pc, #272]	; (80047e0 <DBG_Init+0x140>)
 80046d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d2:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <DBG_Init+0x140>)
 80046d4:	2102      	movs	r1, #2
 80046d6:	430a      	orrs	r2, r1
 80046d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80046da:	4b41      	ldr	r3, [pc, #260]	; (80047e0 <DBG_Init+0x140>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	2202      	movs	r2, #2
 80046e0:	4013      	ands	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 80046e6:	4b3e      	ldr	r3, [pc, #248]	; (80047e0 <DBG_Init+0x140>)
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	4b3d      	ldr	r3, [pc, #244]	; (80047e0 <DBG_Init+0x140>)
 80046ec:	2102      	movs	r1, #2
 80046ee:	430a      	orrs	r2, r1
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <DBG_Init+0x140>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	2202      	movs	r2, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 80046fe:	4b38      	ldr	r3, [pc, #224]	; (80047e0 <DBG_Init+0x140>)
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <DBG_Init+0x140>)
 8004704:	2102      	movs	r1, #2
 8004706:	430a      	orrs	r2, r1
 8004708:	62da      	str	r2, [r3, #44]	; 0x2c
 800470a:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <DBG_Init+0x140>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	2202      	movs	r2, #2
 8004710:	4013      	ands	r3, r2
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8004716:	0021      	movs	r1, r4
 8004718:	187b      	adds	r3, r7, r1
 800471a:	2201      	movs	r2, #1
 800471c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 800471e:	187b      	adds	r3, r7, r1
 8004720:	2201      	movs	r2, #1
 8004722:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8004724:	187b      	adds	r3, r7, r1
 8004726:	2203      	movs	r2, #3
 8004728:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 800472a:	187b      	adds	r3, r7, r1
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	0152      	lsls	r2, r2, #5
 8004730:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 8004732:	000c      	movs	r4, r1
 8004734:	187b      	adds	r3, r7, r1
 8004736:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <DBG_Init+0x144>)
 8004738:	0019      	movs	r1, r3
 800473a:	0010      	movs	r0, r2
 800473c:	f002 fb22 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 8004740:	0021      	movs	r1, r4
 8004742:	187b      	adds	r3, r7, r1
 8004744:	2280      	movs	r2, #128	; 0x80
 8004746:	0192      	lsls	r2, r2, #6
 8004748:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 800474a:	000c      	movs	r4, r1
 800474c:	187b      	adds	r3, r7, r1
 800474e:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <DBG_Init+0x144>)
 8004750:	0019      	movs	r1, r3
 8004752:	0010      	movs	r0, r2
 8004754:	f002 fb16 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 8004758:	0021      	movs	r1, r4
 800475a:	187b      	adds	r3, r7, r1
 800475c:	2280      	movs	r2, #128	; 0x80
 800475e:	01d2      	lsls	r2, r2, #7
 8004760:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 8004762:	000c      	movs	r4, r1
 8004764:	187b      	adds	r3, r7, r1
 8004766:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <DBG_Init+0x144>)
 8004768:	0019      	movs	r1, r3
 800476a:	0010      	movs	r0, r2
 800476c:	f002 fb0a 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 8004770:	0021      	movs	r1, r4
 8004772:	187b      	adds	r3, r7, r1
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	0212      	lsls	r2, r2, #8
 8004778:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 800477a:	187b      	adds	r3, r7, r1
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <DBG_Init+0x144>)
 800477e:	0019      	movs	r1, r3
 8004780:	0010      	movs	r0, r2
 8004782:	f002 faff 	bl	8006d84 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	015b      	lsls	r3, r3, #5
 800478a:	4816      	ldr	r0, [pc, #88]	; (80047e4 <DBG_Init+0x144>)
 800478c:	2200      	movs	r2, #0
 800478e:	0019      	movs	r1, r3
 8004790:	f002 fd75 	bl	800727e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	019b      	lsls	r3, r3, #6
 8004798:	4812      	ldr	r0, [pc, #72]	; (80047e4 <DBG_Init+0x144>)
 800479a:	2200      	movs	r2, #0
 800479c:	0019      	movs	r1, r3
 800479e:	f002 fd6e 	bl	800727e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	01db      	lsls	r3, r3, #7
 80047a6:	480f      	ldr	r0, [pc, #60]	; (80047e4 <DBG_Init+0x144>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	0019      	movs	r1, r3
 80047ac:	f002 fd67 	bl	800727e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	480b      	ldr	r0, [pc, #44]	; (80047e4 <DBG_Init+0x144>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	0019      	movs	r1, r3
 80047ba:	f002 fd60 	bl	800727e <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <DBG_Init+0x140>)
 80047c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <DBG_Init+0x140>)
 80047c4:	2180      	movs	r1, #128	; 0x80
 80047c6:	03c9      	lsls	r1, r1, #15
 80047c8:	430a      	orrs	r2, r1
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 80047cc:	f001 f952 	bl	8005a74 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80047d0:	f001 f95e 	bl	8005a90 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80047d4:	f001 f96a 	bl	8005aac <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	b00b      	add	sp, #44	; 0x2c
 80047de:	bd90      	pop	{r4, r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	50000400 	.word	0x50000400

080047e8 <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <MX_USART2_Init+0x48>)
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <MX_USART2_Init+0x4c>)
 80047fc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <MX_USART2_Init+0x48>)
 8004800:	22e1      	movs	r2, #225	; 0xe1
 8004802:	0252      	lsls	r2, r2, #9
 8004804:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <MX_USART2_Init+0x48>)
 8004808:	2200      	movs	r2, #0
 800480a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <MX_USART2_Init+0x48>)
 800480e:	2200      	movs	r2, #0
 8004810:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <MX_USART2_Init+0x48>)
 8004814:	2200      	movs	r2, #0
 8004816:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <MX_USART2_Init+0x48>)
 800481a:	2208      	movs	r2, #8
 800481c:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <MX_USART2_Init+0x48>)
 8004820:	2200      	movs	r2, #0
 8004822:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <MX_USART2_Init+0x48>)
 8004826:	0018      	movs	r0, r3
 8004828:	f005 fc98 	bl	800a15c <HAL_UART_Init>
 800482c:	1e03      	subs	r3, r0, #0
 800482e:	d001      	beq.n	8004834 <MX_USART2_Init+0x40>
  {
    Error_Handler();
 8004830:	f7fe ff16 	bl	8003660 <Error_Handler>
  }
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	20000658 	.word	0x20000658
 8004840:	40004400 	.word	0x40004400

08004844 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b095      	sub	sp, #84	; 0x54
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	233c      	movs	r3, #60	; 0x3c
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	0018      	movs	r0, r3
 8004852:	2314      	movs	r3, #20
 8004854:	001a      	movs	r2, r3
 8004856:	2100      	movs	r1, #0
 8004858:	f019 f841 	bl	801d8de <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800485c:	2418      	movs	r4, #24
 800485e:	193b      	adds	r3, r7, r4
 8004860:	0018      	movs	r0, r3
 8004862:	2324      	movs	r3, #36	; 0x24
 8004864:	001a      	movs	r2, r3
 8004866:	2100      	movs	r1, #0
 8004868:	f019 f839 	bl	801d8de <memset>
  if (uartHandle->Instance == USART2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_UART_MspInit+0x18c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d000      	beq.n	8004878 <HAL_UART_MspInit+0x34>
 8004876:	e0a6      	b.n	80049c6 <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8004878:	4b56      	ldr	r3, [pc, #344]	; (80049d4 <HAL_UART_MspInit+0x190>)
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <HAL_UART_MspInit+0x190>)
 800487e:	2101      	movs	r1, #1
 8004880:	430a      	orrs	r2, r1
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c
 8004884:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_UART_MspInit+0x190>)
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	2201      	movs	r2, #1
 800488a:	4013      	ands	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004890:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_UART_MspInit+0x190>)
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_UART_MspInit+0x190>)
 8004896:	2101      	movs	r1, #1
 8004898:	430a      	orrs	r2, r1
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c
 800489c:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <HAL_UART_MspInit+0x190>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	2201      	movs	r2, #1
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 80048a8:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_UART_MspInit+0x190>)
 80048aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ac:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <HAL_UART_MspInit+0x190>)
 80048ae:	2180      	movs	r1, #128	; 0x80
 80048b0:	0289      	lsls	r1, r1, #10
 80048b2:	430a      	orrs	r2, r1
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_UART_MspInit+0x190>)
 80048b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ba:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <HAL_UART_MspInit+0x190>)
 80048bc:	2101      	movs	r1, #1
 80048be:	430a      	orrs	r2, r1
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_UART_MspInit+0x190>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	2201      	movs	r2, #1
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_UART_MspInit+0x190>)
 80048d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d2:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <HAL_UART_MspInit+0x190>)
 80048d4:	2180      	movs	r1, #128	; 0x80
 80048d6:	0289      	lsls	r1, r1, #10
 80048d8:	430a      	orrs	r2, r1
 80048da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80048dc:	193b      	adds	r3, r7, r4
 80048de:	2202      	movs	r2, #2
 80048e0:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80048e2:	193b      	adds	r3, r7, r4
 80048e4:	2204      	movs	r2, #4
 80048e6:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048e8:	193b      	adds	r3, r7, r4
 80048ea:	0018      	movs	r0, r3
 80048ec:	f004 f9b8 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 80048f0:	1e03      	subs	r3, r0, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80048f4:	f7fe feb4 	bl	8003660 <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 80048f8:	243c      	movs	r4, #60	; 0x3c
 80048fa:	193b      	adds	r3, r7, r4
 80048fc:	2204      	movs	r2, #4
 80048fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004900:	193b      	adds	r3, r7, r4
 8004902:	2202      	movs	r2, #2
 8004904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004906:	193b      	adds	r3, r7, r4
 8004908:	2200      	movs	r2, #0
 800490a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800490c:	193b      	adds	r3, r7, r4
 800490e:	2203      	movs	r2, #3
 8004910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004912:	193b      	adds	r3, r7, r4
 8004914:	2204      	movs	r2, #4
 8004916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8004918:	193a      	adds	r2, r7, r4
 800491a:	23a0      	movs	r3, #160	; 0xa0
 800491c:	05db      	lsls	r3, r3, #23
 800491e:	0011      	movs	r1, r2
 8004920:	0018      	movs	r0, r3
 8004922:	f002 fa2f 	bl	8006d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8004926:	0021      	movs	r1, r4
 8004928:	187b      	adds	r3, r7, r1
 800492a:	2208      	movs	r2, #8
 800492c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492e:	187b      	adds	r3, r7, r1
 8004930:	2202      	movs	r2, #2
 8004932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	187b      	adds	r3, r7, r1
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800493a:	187b      	adds	r3, r7, r1
 800493c:	2203      	movs	r2, #3
 800493e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8004940:	187b      	adds	r3, r7, r1
 8004942:	2204      	movs	r2, #4
 8004944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004946:	187a      	adds	r2, r7, r1
 8004948:	23a0      	movs	r3, #160	; 0xa0
 800494a:	05db      	lsls	r3, r3, #23
 800494c:	0011      	movs	r1, r2
 800494e:	0018      	movs	r0, r3
 8004950:	f002 fa18 	bl	8006d84 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8004954:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <HAL_UART_MspInit+0x194>)
 8004956:	4a21      	ldr	r2, [pc, #132]	; (80049dc <HAL_UART_MspInit+0x198>)
 8004958:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <HAL_UART_MspInit+0x194>)
 800495c:	2204      	movs	r2, #4
 800495e:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_UART_MspInit+0x194>)
 8004962:	2210      	movs	r2, #16
 8004964:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <HAL_UART_MspInit+0x194>)
 8004968:	2200      	movs	r2, #0
 800496a:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <HAL_UART_MspInit+0x194>)
 800496e:	2280      	movs	r2, #128	; 0x80
 8004970:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_UART_MspInit+0x194>)
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <HAL_UART_MspInit+0x194>)
 800497a:	2200      	movs	r2, #0
 800497c:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_UART_MspInit+0x194>)
 8004980:	2200      	movs	r2, #0
 8004982:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <HAL_UART_MspInit+0x194>)
 8004986:	2200      	movs	r2, #0
 8004988:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_UART_MspInit+0x194>)
 800498c:	0018      	movs	r0, r3
 800498e:	f001 ff03 	bl	8006798 <HAL_DMA_Init>
 8004992:	1e03      	subs	r3, r0, #0
 8004994:	d001      	beq.n	800499a <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8004996:	f7fe fe63 	bl	8003660 <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a0e      	ldr	r2, [pc, #56]	; (80049d8 <HAL_UART_MspInit+0x194>)
 800499e:	66da      	str	r2, [r3, #108]	; 0x6c
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_UART_MspInit+0x194>)
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80049a6:	2201      	movs	r2, #1
 80049a8:	2100      	movs	r1, #0
 80049aa:	200b      	movs	r0, #11
 80049ac:	f001 febe 	bl	800672c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80049b0:	200b      	movs	r0, #11
 80049b2:	f001 fed0 	bl	8006756 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 80049b6:	2201      	movs	r2, #1
 80049b8:	2100      	movs	r1, #0
 80049ba:	201c      	movs	r0, #28
 80049bc:	f001 feb6 	bl	800672c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80049c0:	201c      	movs	r0, #28
 80049c2:	f001 fec8 	bl	8006756 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b015      	add	sp, #84	; 0x54
 80049cc:	bd90      	pop	{r4, r7, pc}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	40004400 	.word	0x40004400
 80049d4:	40021000 	.word	0x40021000
 80049d8:	200006dc 	.word	0x200006dc
 80049dc:	40020080 	.word	0x40020080

080049e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <HAL_UART_MspDeInit+0x44>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d113      	bne.n	8004a1a <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <HAL_UART_MspDeInit+0x48>)
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <HAL_UART_MspDeInit+0x48>)
 80049f8:	490c      	ldr	r1, [pc, #48]	; (8004a2c <HAL_UART_MspDeInit+0x4c>)
 80049fa:	400a      	ands	r2, r1
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80049fe:	23a0      	movs	r3, #160	; 0xa0
 8004a00:	05db      	lsls	r3, r3, #23
 8004a02:	210c      	movs	r1, #12
 8004a04:	0018      	movs	r0, r3
 8004a06:	f002 fb3b 	bl	8007080 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f001 ff3a 	bl	8006888 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004a14:	201c      	movs	r0, #28
 8004a16:	f001 feae 	bl	8006776 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b002      	add	sp, #8
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	40004400 	.word	0x40004400
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	fffdffff 	.word	0xfffdffff

08004a30 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <vcom_Init+0x20>)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 8004a3e:	f7fe fd2d 	bl	800349c <MX_DMA_Init>
  MX_USART2_Init();
 8004a42:	f7ff fed7 	bl	80047f4 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 8004a46:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000728 	.word	0x20000728

08004a54 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <vcom_DeInit+0x34>)
 8004a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <vcom_DeInit+0x34>)
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	0289      	lsls	r1, r1, #10
 8004a62:	430a      	orrs	r2, r1
 8004a64:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <vcom_DeInit+0x34>)
 8004a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <vcom_DeInit+0x34>)
 8004a6c:	4907      	ldr	r1, [pc, #28]	; (8004a8c <vcom_DeInit+0x38>)
 8004a6e:	400a      	ands	r2, r1
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <vcom_DeInit+0x3c>)
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7ff ffb3 	bl	80049e0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004a7a:	200b      	movs	r0, #11
 8004a7c:	f001 fe7b 	bl	8006776 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8004a80:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8004a82:	0018      	movs	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	fffdffff 	.word	0xfffdffff
 8004a90:	20000658 	.word	0x20000658

08004a94 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	000a      	movs	r2, r1
 8004a9e:	1cbb      	adds	r3, r7, #2
 8004aa0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8004aa2:	1cbb      	adds	r3, r7, #2
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <vcom_Trace_DMA+0x28>)
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f005 fc02 	bl	800a2b4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8004ab0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b002      	add	sp, #8
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	20000658 	.word	0x20000658

08004ac0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <vcom_ReceiveInit+0x80>)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8004ace:	2108      	movs	r1, #8
 8004ad0:	187b      	adds	r3, r7, r1
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	0392      	lsls	r2, r2, #14
 8004ad6:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8004ad8:	187b      	adds	r3, r7, r1
 8004ada:	481a      	ldr	r0, [pc, #104]	; (8004b44 <vcom_ReceiveInit+0x84>)
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	f006 fd22 	bl	800b528 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <vcom_ReceiveInit+0x84>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	025b      	lsls	r3, r3, #9
 8004af0:	401a      	ands	r2, r3
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	025b      	lsls	r3, r3, #9
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d0f5      	beq.n	8004ae6 <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <vcom_ReceiveInit+0x84>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	03db      	lsls	r3, r3, #15
 8004b06:	401a      	ands	r2, r3
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	03db      	lsls	r3, r3, #15
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1f5      	bne.n	8004afc <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <vcom_ReceiveInit+0x84>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <vcom_ReceiveInit+0x84>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	03c9      	lsls	r1, r1, #15
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <vcom_ReceiveInit+0x84>)
 8004b24:	0018      	movs	r0, r3
 8004b26:	f006 fd65 	bl	800b5f4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8004b2a:	4907      	ldr	r1, [pc, #28]	; (8004b48 <vcom_ReceiveInit+0x88>)
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <vcom_ReceiveInit+0x84>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	0018      	movs	r0, r3
 8004b32:	f005 fb67 	bl	800a204 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8004b36:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	2000072c 	.word	0x2000072c
 8004b44:	20000658 	.word	0x20000658
 8004b48:	20000724 	.word	0x20000724

08004b4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_UART_TxCpltCallback+0x18>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2000      	movs	r0, #0
 8004b5a:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000728 	.word	0x20000728

08004b68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <HAL_UART_RxCpltCallback+0x3c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_UART_RxCpltCallback+0x26>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	589b      	ldr	r3, [r3, r2]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <HAL_UART_RxCpltCallback+0x3c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4808      	ldr	r0, [pc, #32]	; (8004ba8 <HAL_UART_RxCpltCallback+0x40>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8004b8e:	4906      	ldr	r1, [pc, #24]	; (8004ba8 <HAL_UART_RxCpltCallback+0x40>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	0018      	movs	r0, r3
 8004b96:	f005 fb35 	bl	800a204 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b002      	add	sp, #8
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	2000072c 	.word	0x2000072c
 8004ba8:	20000724 	.word	0x20000724

08004bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004bac:	480d      	ldr	r0, [pc, #52]	; (8004be4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004bae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bb0:	480d      	ldr	r0, [pc, #52]	; (8004be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bb2:	490e      	ldr	r1, [pc, #56]	; (8004bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bb4:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <LoopForever+0xe>)
  movs r3, #0
 8004bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bb8:	e002      	b.n	8004bc0 <LoopCopyDataInit>

08004bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bbe:	3304      	adds	r3, #4

08004bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bc4:	d3f9      	bcc.n	8004bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bc6:	4a0b      	ldr	r2, [pc, #44]	; (8004bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004bc8:	4c0b      	ldr	r4, [pc, #44]	; (8004bf8 <LoopForever+0x16>)
  movs r3, #0
 8004bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bcc:	e001      	b.n	8004bd2 <LoopFillZerobss>

08004bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bd0:	3204      	adds	r2, #4

08004bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bd4:	d3fb      	bcc.n	8004bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004bd6:	f000 febf 	bl	8005958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bda:	f018 fe53 	bl	801d884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bde:	f7fe fc7b 	bl	80034d8 <main>

08004be2 <LoopForever>:

LoopForever:
    b LoopForever
 8004be2:	e7fe      	b.n	8004be2 <LoopForever>
   ldr   r0, =_estack
 8004be4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bec:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8004bf0:	0801ef64 	.word	0x0801ef64
  ldr r2, =_sbss
 8004bf4:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8004bf8:	200019f8 	.word	0x200019f8

08004bfc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bfc:	e7fe      	b.n	8004bfc <ADC1_COMP_IRQHandler>
	...

08004c00 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <BSP_SPI1_Init+0x40>)
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <BSP_SPI1_Init+0x44>)
 8004c0e:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <BSP_SPI1_Init+0x40>)
 8004c12:	0018      	movs	r0, r3
 8004c14:	f005 f9c1 	bl	8009f9a <HAL_SPI_GetState>
 8004c18:	1e03      	subs	r3, r0, #0
 8004c1a:	d10c      	bne.n	8004c36 <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 8004c1c:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <BSP_SPI1_Init+0x40>)
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 f87e 	bl	8004d20 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <BSP_SPI1_Init+0x40>)
 8004c26:	0018      	movs	r0, r3
 8004c28:	f000 f830 	bl	8004c8c <MX_SPI1_Init>
 8004c2c:	1e03      	subs	r3, r0, #0
 8004c2e:	d002      	beq.n	8004c36 <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004c30:	2308      	movs	r3, #8
 8004c32:	425b      	negs	r3, r3
 8004c34:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8004c36:	687b      	ldr	r3, [r7, #4]
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000730 	.word	0x20000730
 8004c44:	40013000 	.word	0x40013000

08004c48 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	1dbb      	adds	r3, r7, #6
 8004c54:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004c56:	2306      	movs	r3, #6
 8004c58:	425b      	negs	r3, r3
 8004c5a:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004c5c:	1dbb      	adds	r3, r7, #6
 8004c5e:	881c      	ldrh	r4, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	4808      	ldr	r0, [pc, #32]	; (8004c88 <BSP_SPI1_SendRecv+0x40>)
 8004c66:	23fa      	movs	r3, #250	; 0xfa
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	0023      	movs	r3, r4
 8004c6e:	f004 ffd9 	bl	8009c24 <HAL_SPI_TransmitReceive>
 8004c72:	1e03      	subs	r3, r0, #0
 8004c74:	d102      	bne.n	8004c7c <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 8004c76:	1dbb      	adds	r3, r7, #6
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004c7c:	697b      	ldr	r3, [r7, #20]
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b007      	add	sp, #28
 8004c84:	bd90      	pop	{r4, r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	20000730 	.word	0x20000730

08004c8c <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c94:	240f      	movs	r4, #15
 8004c96:	193b      	adds	r3, r7, r4
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <MX_SPI1_Init+0x8c>)
 8004ca0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2282      	movs	r2, #130	; 0x82
 8004ca6:	0052      	lsls	r2, r2, #1
 8004ca8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2280      	movs	r2, #128	; 0x80
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8004cca:	f003 ffb3 	bl	8008c34 <HAL_RCC_GetPCLK2Freq>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <MX_SPI1_Init+0x90>)
 8004cd2:	0011      	movs	r1, r2
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f000 f867 	bl	8004da8 <SPI_GetPrescaler>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f004 fef6 	bl	8009aec <HAL_SPI_Init>
 8004d00:	1e03      	subs	r3, r0, #0
 8004d02:	d002      	beq.n	8004d0a <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 8004d04:	193b      	adds	r3, r7, r4
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004d0a:	230f      	movs	r3, #15
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	781b      	ldrb	r3, [r3, #0]
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b005      	add	sp, #20
 8004d16:	bd90      	pop	{r4, r7, pc}
 8004d18:	40013000 	.word	0x40013000
 8004d1c:	00989680 	.word	0x00989680

08004d20 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <SPI1_MspInit+0x80>)
 8004d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	; (8004da0 <SPI1_MspInit+0x80>)
 8004d2e:	2180      	movs	r1, #128	; 0x80
 8004d30:	0149      	lsls	r1, r1, #5
 8004d32:	430a      	orrs	r2, r1
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d36:	240c      	movs	r4, #12
 8004d38:	193b      	adds	r3, r7, r4
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d44:	193b      	adds	r3, r7, r4
 8004d46:	2203      	movs	r2, #3
 8004d48:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8004d4a:	193b      	adds	r3, r7, r4
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8004d50:	193b      	adds	r3, r7, r4
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004d56:	193a      	adds	r2, r7, r4
 8004d58:	23a0      	movs	r3, #160	; 0xa0
 8004d5a:	05db      	lsls	r3, r3, #23
 8004d5c:	0011      	movs	r1, r2
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f002 f810 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8004d64:	193b      	adds	r3, r7, r4
 8004d66:	2200      	movs	r2, #0
 8004d68:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8004d6a:	193b      	adds	r3, r7, r4
 8004d6c:	2240      	movs	r2, #64	; 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004d70:	193a      	adds	r2, r7, r4
 8004d72:	23a0      	movs	r3, #160	; 0xa0
 8004d74:	05db      	lsls	r3, r3, #23
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f002 f803 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8004d7e:	193b      	adds	r3, r7, r4
 8004d80:	2200      	movs	r2, #0
 8004d82:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8004d84:	193b      	adds	r3, r7, r4
 8004d86:	2208      	movs	r2, #8
 8004d88:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004d8a:	193b      	adds	r3, r7, r4
 8004d8c:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <SPI1_MspInit+0x84>)
 8004d8e:	0019      	movs	r1, r3
 8004d90:	0010      	movs	r0, r2
 8004d92:	f001 fff7 	bl	8006d84 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b009      	add	sp, #36	; 0x24
 8004d9c:	bd90      	pop	{r4, r7, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	40021000 	.word	0x40021000
 8004da4:	50000400 	.word	0x50000400

08004da8 <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8004dbe:	e00d      	b.n	8004ddc <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <SPI_GetPrescaler+0x4c>)
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	0092      	lsls	r2, r2, #2
 8004dc6:	58d3      	ldr	r3, [r2, r3]
 8004dc8:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b07      	cmp	r3, #7
 8004dd4:	d807      	bhi.n	8004de6 <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d8ed      	bhi.n	8004dc0 <SPI_GetPrescaler+0x18>
 8004de4:	e000      	b.n	8004de8 <SPI_GetPrescaler+0x40>
      break;
 8004de6:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 8004de8:	68fb      	ldr	r3, [r7, #12]
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b006      	add	sp, #24
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	0801e074 	.word	0x0801e074

08004df8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <BSP_I2C1_Init+0x70>)
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <BSP_I2C1_Init+0x74>)
 8004e06:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 8004e08:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <BSP_I2C1_Init+0x78>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	1c59      	adds	r1, r3, #1
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <BSP_I2C1_Init+0x78>)
 8004e10:	6011      	str	r1, [r2, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d123      	bne.n	8004e5e <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <BSP_I2C1_Init+0x70>)
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f002 fd69 	bl	80078f0 <HAL_I2C_GetState>
 8004e1e:	1e03      	subs	r3, r0, #0
 8004e20:	d11d      	bne.n	8004e5e <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <BSP_I2C1_Init+0x70>)
 8004e24:	0018      	movs	r0, r3
 8004e26:	f000 f873 	bl	8004f10 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d116      	bne.n	8004e5e <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 8004e30:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <BSP_I2C1_Init+0x70>)
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f81e 	bl	8004e74 <MX_I2C1_Init>
 8004e38:	1e03      	subs	r3, r0, #0
 8004e3a:	d003      	beq.n	8004e44 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	425b      	negs	r3, r3
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	e00c      	b.n	8004e5e <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <BSP_I2C1_Init+0x70>)
 8004e46:	2100      	movs	r1, #0
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f002 ff9b 	bl	8007d84 <HAL_I2CEx_ConfigAnalogFilter>
 8004e4e:	1e03      	subs	r3, r0, #0
 8004e50:	d003      	beq.n	8004e5a <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004e52:	2308      	movs	r3, #8
 8004e54:	425b      	negs	r3, r3
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	e001      	b.n	8004e5e <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8004e5e:	687b      	ldr	r3, [r7, #4]
}
 8004e60:	0018      	movs	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b002      	add	sp, #8
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000788 	.word	0x20000788
 8004e6c:	40005400 	.word	0x40005400
 8004e70:	200007d4 	.word	0x200007d4

08004e74 <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e7c:	240f      	movs	r4, #15
 8004e7e:	193b      	adds	r3, r7, r4
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <MX_I2C1_Init+0x94>)
 8004e88:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <MX_I2C1_Init+0x98>)
 8004e8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f002 fa17 	bl	80072f0 <HAL_I2C_Init>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d002      	beq.n	8004ecc <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 8004ec6:	193b      	adds	r3, r7, r4
 8004ec8:	2201      	movs	r2, #1
 8004eca:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2100      	movs	r1, #0
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f002 ff57 	bl	8007d84 <HAL_I2CEx_ConfigAnalogFilter>
 8004ed6:	1e03      	subs	r3, r0, #0
 8004ed8:	d003      	beq.n	8004ee2 <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8004eda:	230f      	movs	r3, #15
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f002 ff98 	bl	8007e1c <HAL_I2CEx_ConfigDigitalFilter>
 8004eec:	1e03      	subs	r3, r0, #0
 8004eee:	d003      	beq.n	8004ef8 <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8004ef0:	230f      	movs	r3, #15
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004ef8:	230f      	movs	r3, #15
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	781b      	ldrb	r3, [r3, #0]
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b005      	add	sp, #20
 8004f04:	bd90      	pop	{r4, r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	40005400 	.word	0x40005400
 8004f0c:	00707cbb 	.word	0x00707cbb

08004f10 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b089      	sub	sp, #36	; 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <I2C1_MspInit+0x94>)
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <I2C1_MspInit+0x94>)
 8004f1e:	2102      	movs	r1, #2
 8004f20:	430a      	orrs	r2, r1
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f24:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <I2C1_MspInit+0x94>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	2202      	movs	r2, #2
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8004f30:	210c      	movs	r1, #12
 8004f32:	187b      	adds	r3, r7, r1
 8004f34:	2280      	movs	r2, #128	; 0x80
 8004f36:	0052      	lsls	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f3a:	000c      	movs	r4, r1
 8004f3c:	193b      	adds	r3, r7, r4
 8004f3e:	2212      	movs	r2, #18
 8004f40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f42:	193b      	adds	r3, r7, r4
 8004f44:	2201      	movs	r2, #1
 8004f46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f48:	193b      	adds	r3, r7, r4
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8004f4e:	193b      	adds	r3, r7, r4
 8004f50:	2204      	movs	r2, #4
 8004f52:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004f54:	193b      	adds	r3, r7, r4
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <I2C1_MspInit+0x98>)
 8004f58:	0019      	movs	r1, r3
 8004f5a:	0010      	movs	r0, r2
 8004f5c:	f001 ff12 	bl	8006d84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004f60:	0021      	movs	r1, r4
 8004f62:	187b      	adds	r3, r7, r1
 8004f64:	2280      	movs	r2, #128	; 0x80
 8004f66:	0092      	lsls	r2, r2, #2
 8004f68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f6a:	187b      	adds	r3, r7, r1
 8004f6c:	2212      	movs	r2, #18
 8004f6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	2201      	movs	r2, #1
 8004f74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f76:	187b      	adds	r3, r7, r1
 8004f78:	2203      	movs	r2, #3
 8004f7a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8004f7c:	187b      	adds	r3, r7, r1
 8004f7e:	2204      	movs	r2, #4
 8004f80:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004f82:	187b      	adds	r3, r7, r1
 8004f84:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <I2C1_MspInit+0x98>)
 8004f86:	0019      	movs	r1, r3
 8004f88:	0010      	movs	r0, r2
 8004f8a:	f001 fefb 	bl	8006d84 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <I2C1_MspInit+0x94>)
 8004f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f92:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <I2C1_MspInit+0x94>)
 8004f94:	2180      	movs	r1, #128	; 0x80
 8004f96:	0389      	lsls	r1, r1, #14
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b009      	add	sp, #36	; 0x24
 8004fa2:	bd90      	pop	{r4, r7, pc}
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	50000400 	.word	0x50000400

08004fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	0002      	movs	r2, r0
 8004fb4:	6039      	str	r1, [r7, #0]
 8004fb6:	1dfb      	adds	r3, r7, #7
 8004fb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fba:	1dfb      	adds	r3, r7, #7
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc0:	d828      	bhi.n	8005014 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fc2:	4a2f      	ldr	r2, [pc, #188]	; (8005080 <__NVIC_SetPriority+0xd4>)
 8004fc4:	1dfb      	adds	r3, r7, #7
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	b25b      	sxtb	r3, r3
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	33c0      	adds	r3, #192	; 0xc0
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	589b      	ldr	r3, [r3, r2]
 8004fd2:	1dfa      	adds	r2, r7, #7
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	2203      	movs	r2, #3
 8004fda:	400a      	ands	r2, r1
 8004fdc:	00d2      	lsls	r2, r2, #3
 8004fde:	21ff      	movs	r1, #255	; 0xff
 8004fe0:	4091      	lsls	r1, r2
 8004fe2:	000a      	movs	r2, r1
 8004fe4:	43d2      	mvns	r2, r2
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	019b      	lsls	r3, r3, #6
 8004fee:	22ff      	movs	r2, #255	; 0xff
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	1dfb      	adds	r3, r7, #7
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	4003      	ands	r3, r0
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005000:	481f      	ldr	r0, [pc, #124]	; (8005080 <__NVIC_SetPriority+0xd4>)
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b25b      	sxtb	r3, r3
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	430a      	orrs	r2, r1
 800500c:	33c0      	adds	r3, #192	; 0xc0
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005012:	e031      	b.n	8005078 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005014:	4a1b      	ldr	r2, [pc, #108]	; (8005084 <__NVIC_SetPriority+0xd8>)
 8005016:	1dfb      	adds	r3, r7, #7
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	0019      	movs	r1, r3
 800501c:	230f      	movs	r3, #15
 800501e:	400b      	ands	r3, r1
 8005020:	3b08      	subs	r3, #8
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	3306      	adds	r3, #6
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	18d3      	adds	r3, r2, r3
 800502a:	3304      	adds	r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	1dfa      	adds	r2, r7, #7
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	0011      	movs	r1, r2
 8005034:	2203      	movs	r2, #3
 8005036:	400a      	ands	r2, r1
 8005038:	00d2      	lsls	r2, r2, #3
 800503a:	21ff      	movs	r1, #255	; 0xff
 800503c:	4091      	lsls	r1, r2
 800503e:	000a      	movs	r2, r1
 8005040:	43d2      	mvns	r2, r2
 8005042:	401a      	ands	r2, r3
 8005044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	22ff      	movs	r2, #255	; 0xff
 800504c:	401a      	ands	r2, r3
 800504e:	1dfb      	adds	r3, r7, #7
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	0018      	movs	r0, r3
 8005054:	2303      	movs	r3, #3
 8005056:	4003      	ands	r3, r0
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800505c:	4809      	ldr	r0, [pc, #36]	; (8005084 <__NVIC_SetPriority+0xd8>)
 800505e:	1dfb      	adds	r3, r7, #7
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	001c      	movs	r4, r3
 8005064:	230f      	movs	r3, #15
 8005066:	4023      	ands	r3, r4
 8005068:	3b08      	subs	r3, #8
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	430a      	orrs	r2, r1
 800506e:	3306      	adds	r3, #6
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	18c3      	adds	r3, r0, r3
 8005074:	3304      	adds	r3, #4
 8005076:	601a      	str	r2, [r3, #0]
}
 8005078:	46c0      	nop			; (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	b003      	add	sp, #12
 800507e:	bd90      	pop	{r4, r7, pc}
 8005080:	e000e100 	.word	0xe000e100
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08c      	sub	sp, #48	; 0x30
 800508c:	af00      	add	r7, sp, #0
 800508e:	0002      	movs	r2, r0
 8005090:	1dfb      	adds	r3, r7, #7
 8005092:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005094:	1dfb      	adds	r3, r7, #7
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d02f      	beq.n	80050fc <BSP_LED_Init+0x74>
 800509c:	dc3a      	bgt.n	8005114 <BSP_LED_Init+0x8c>
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d01f      	beq.n	80050e2 <BSP_LED_Init+0x5a>
 80050a2:	dc37      	bgt.n	8005114 <BSP_LED_Init+0x8c>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <BSP_LED_Init+0x26>
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d00d      	beq.n	80050c8 <BSP_LED_Init+0x40>
 80050ac:	e032      	b.n	8005114 <BSP_LED_Init+0x8c>
 80050ae:	4b2a      	ldr	r3, [pc, #168]	; (8005158 <BSP_LED_Init+0xd0>)
 80050b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <BSP_LED_Init+0xd0>)
 80050b4:	2102      	movs	r1, #2
 80050b6:	430a      	orrs	r2, r1
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ba:	4b27      	ldr	r3, [pc, #156]	; (8005158 <BSP_LED_Init+0xd0>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	e025      	b.n	8005114 <BSP_LED_Init+0x8c>
 80050c8:	4b23      	ldr	r3, [pc, #140]	; (8005158 <BSP_LED_Init+0xd0>)
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	4b22      	ldr	r3, [pc, #136]	; (8005158 <BSP_LED_Init+0xd0>)
 80050ce:	2101      	movs	r1, #1
 80050d0:	430a      	orrs	r2, r1
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80050d4:	4b20      	ldr	r3, [pc, #128]	; (8005158 <BSP_LED_Init+0xd0>)
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	2201      	movs	r2, #1
 80050da:	4013      	ands	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	e018      	b.n	8005114 <BSP_LED_Init+0x8c>
 80050e2:	4b1d      	ldr	r3, [pc, #116]	; (8005158 <BSP_LED_Init+0xd0>)
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <BSP_LED_Init+0xd0>)
 80050e8:	2102      	movs	r1, #2
 80050ea:	430a      	orrs	r2, r1
 80050ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ee:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <BSP_LED_Init+0xd0>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	2202      	movs	r2, #2
 80050f4:	4013      	ands	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	e00b      	b.n	8005114 <BSP_LED_Init+0x8c>
 80050fc:	4b16      	ldr	r3, [pc, #88]	; (8005158 <BSP_LED_Init+0xd0>)
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	4b15      	ldr	r3, [pc, #84]	; (8005158 <BSP_LED_Init+0xd0>)
 8005102:	2102      	movs	r1, #2
 8005104:	430a      	orrs	r2, r1
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c
 8005108:	4b13      	ldr	r3, [pc, #76]	; (8005158 <BSP_LED_Init+0xd0>)
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	2202      	movs	r2, #2
 800510e:	4013      	ands	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005116:	1dfb      	adds	r3, r7, #7
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <BSP_LED_Init+0xd4>)
 800511c:	0052      	lsls	r2, r2, #1
 800511e:	5ad3      	ldrh	r3, [r2, r3]
 8005120:	001a      	movs	r2, r3
 8005122:	211c      	movs	r1, #28
 8005124:	187b      	adds	r3, r7, r1
 8005126:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005128:	187b      	adds	r3, r7, r1
 800512a:	2201      	movs	r2, #1
 800512c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	187b      	adds	r3, r7, r1
 8005130:	2200      	movs	r2, #0
 8005132:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005134:	187b      	adds	r3, r7, r1
 8005136:	2203      	movs	r2, #3
 8005138:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800513a:	1dfb      	adds	r3, r7, #7
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <BSP_LED_Init+0xd8>)
 8005140:	0092      	lsls	r2, r2, #2
 8005142:	58d3      	ldr	r3, [r2, r3]
 8005144:	187a      	adds	r2, r7, r1
 8005146:	0011      	movs	r1, r2
 8005148:	0018      	movs	r0, r3
 800514a:	f001 fe1b 	bl	8006d84 <HAL_GPIO_Init>
}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	46bd      	mov	sp, r7
 8005152:	b00c      	add	sp, #48	; 0x30
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	40021000 	.word	0x40021000
 800515c:	0801e094 	.word	0x0801e094
 8005160:	2000004c 	.word	0x2000004c

08005164 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	0002      	movs	r2, r0
 800516c:	1dfb      	adds	r3, r7, #7
 800516e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8005170:	1dfb      	adds	r3, r7, #7
 8005172:	781a      	ldrb	r2, [r3, #0]
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <BSP_LED_On+0x30>)
 8005176:	0092      	lsls	r2, r2, #2
 8005178:	58d0      	ldr	r0, [r2, r3]
 800517a:	1dfb      	adds	r3, r7, #7
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	4b06      	ldr	r3, [pc, #24]	; (8005198 <BSP_LED_On+0x34>)
 8005180:	0052      	lsls	r2, r2, #1
 8005182:	5ad3      	ldrh	r3, [r2, r3]
 8005184:	2201      	movs	r2, #1
 8005186:	0019      	movs	r1, r3
 8005188:	f002 f879 	bl	800727e <HAL_GPIO_WritePin>
}
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46bd      	mov	sp, r7
 8005190:	b002      	add	sp, #8
 8005192:	bd80      	pop	{r7, pc}
 8005194:	2000004c 	.word	0x2000004c
 8005198:	0801e094 	.word	0x0801e094

0800519c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	0002      	movs	r2, r0
 80051a4:	1dfb      	adds	r3, r7, #7
 80051a6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80051a8:	1dfb      	adds	r3, r7, #7
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <BSP_LED_Off+0x30>)
 80051ae:	0092      	lsls	r2, r2, #2
 80051b0:	58d0      	ldr	r0, [r2, r3]
 80051b2:	1dfb      	adds	r3, r7, #7
 80051b4:	781a      	ldrb	r2, [r3, #0]
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <BSP_LED_Off+0x34>)
 80051b8:	0052      	lsls	r2, r2, #1
 80051ba:	5ad3      	ldrh	r3, [r2, r3]
 80051bc:	2200      	movs	r2, #0
 80051be:	0019      	movs	r1, r3
 80051c0:	f002 f85d 	bl	800727e <HAL_GPIO_WritePin>
}
 80051c4:	46c0      	nop			; (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b002      	add	sp, #8
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	2000004c 	.word	0x2000004c
 80051d0:	0801e094 	.word	0x0801e094

080051d4 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	0002      	movs	r2, r0
 80051dc:	1dfb      	adds	r3, r7, #7
 80051de:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80051e0:	1dfb      	adds	r3, r7, #7
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <BSP_LED_Toggle+0x30>)
 80051e6:	0092      	lsls	r2, r2, #2
 80051e8:	58d0      	ldr	r0, [r2, r3]
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <BSP_LED_Toggle+0x34>)
 80051f0:	0052      	lsls	r2, r2, #1
 80051f2:	5ad3      	ldrh	r3, [r2, r3]
 80051f4:	0019      	movs	r1, r3
 80051f6:	f002 f85f 	bl	80072b8 <HAL_GPIO_TogglePin>
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b002      	add	sp, #8
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	2000004c 	.word	0x2000004c
 8005208:	0801e094 	.word	0x0801e094

0800520c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	0002      	movs	r2, r0
 8005214:	1dfb      	adds	r3, r7, #7
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	1dbb      	adds	r3, r7, #6
 800521a:	1c0a      	adds	r2, r1, #0
 800521c:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800521e:	4b2b      	ldr	r3, [pc, #172]	; (80052cc <BSP_PB_Init+0xc0>)
 8005220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005222:	4b2a      	ldr	r3, [pc, #168]	; (80052cc <BSP_PB_Init+0xc0>)
 8005224:	2102      	movs	r1, #2
 8005226:	430a      	orrs	r2, r1
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c
 800522a:	4b28      	ldr	r3, [pc, #160]	; (80052cc <BSP_PB_Init+0xc0>)
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	2202      	movs	r2, #2
 8005230:	4013      	ands	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]
 8005234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005236:	4b25      	ldr	r3, [pc, #148]	; (80052cc <BSP_PB_Init+0xc0>)
 8005238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523a:	4b24      	ldr	r3, [pc, #144]	; (80052cc <BSP_PB_Init+0xc0>)
 800523c:	2101      	movs	r1, #1
 800523e:	430a      	orrs	r2, r1
 8005240:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005242:	1dbb      	adds	r3, r7, #6
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d117      	bne.n	800527a <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800524a:	2304      	movs	r3, #4
 800524c:	001a      	movs	r2, r3
 800524e:	210c      	movs	r1, #12
 8005250:	187b      	adds	r3, r7, r1
 8005252:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005254:	187b      	adds	r3, r7, r1
 8005256:	2200      	movs	r2, #0
 8005258:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800525a:	187b      	adds	r3, r7, r1
 800525c:	2202      	movs	r2, #2
 800525e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005260:	187b      	adds	r3, r7, r1
 8005262:	2203      	movs	r2, #3
 8005264:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005266:	1dfb      	adds	r3, r7, #7
 8005268:	781a      	ldrb	r2, [r3, #0]
 800526a:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <BSP_PB_Init+0xc4>)
 800526c:	0092      	lsls	r2, r2, #2
 800526e:	58d3      	ldr	r3, [r2, r3]
 8005270:	187a      	adds	r2, r7, r1
 8005272:	0011      	movs	r1, r2
 8005274:	0018      	movs	r0, r3
 8005276:	f001 fd85 	bl	8006d84 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 800527a:	1dbb      	adds	r3, r7, #6
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d11f      	bne.n	80052c2 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005282:	2304      	movs	r3, #4
 8005284:	001a      	movs	r2, r3
 8005286:	210c      	movs	r1, #12
 8005288:	187b      	adds	r3, r7, r1
 800528a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	187b      	adds	r3, r7, r1
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005292:	187b      	adds	r3, r7, r1
 8005294:	4a0f      	ldr	r2, [pc, #60]	; (80052d4 <BSP_PB_Init+0xc8>)
 8005296:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005298:	1dfb      	adds	r3, r7, #7
 800529a:	781a      	ldrb	r2, [r3, #0]
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <BSP_PB_Init+0xc4>)
 800529e:	0092      	lsls	r2, r2, #2
 80052a0:	58d3      	ldr	r3, [r2, r3]
 80052a2:	187a      	adds	r2, r7, r1
 80052a4:	0011      	movs	r1, r2
 80052a6:	0018      	movs	r0, r3
 80052a8:	f001 fd6c 	bl	8006d84 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 80052ac:	2306      	movs	r3, #6
 80052ae:	b25b      	sxtb	r3, r3
 80052b0:	2103      	movs	r1, #3
 80052b2:	0018      	movs	r0, r3
 80052b4:	f7ff fe7a 	bl	8004fac <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80052b8:	2306      	movs	r3, #6
 80052ba:	b25b      	sxtb	r3, r3
 80052bc:	0018      	movs	r0, r3
 80052be:	f001 fa4a 	bl	8006756 <HAL_NVIC_EnableIRQ>
  }
}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b008      	add	sp, #32
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	40021000 	.word	0x40021000
 80052d0:	2000005c 	.word	0x2000005c
 80052d4:	10110000 	.word	0x10110000

080052d8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 80052dc:	2305      	movs	r3, #5
}
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	0002      	movs	r2, r0
 80052ec:	1dfb      	adds	r3, r7, #7
 80052ee:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 80052f0:	1dfb      	adds	r3, r7, #7
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d10b      	bne.n	8005310 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	0159      	lsls	r1, r3, #5
 80052fc:	23a0      	movs	r3, #160	; 0xa0
 80052fe:	05db      	lsls	r3, r3, #23
 8005300:	2201      	movs	r2, #1
 8005302:	0018      	movs	r0, r3
 8005304:	f001 ffbb 	bl	800727e <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8005308:	2005      	movs	r0, #5
 800530a:	f7ff f9bc 	bl	8004686 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 800530e:	e007      	b.n	8005320 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	0159      	lsls	r1, r3, #5
 8005314:	23a0      	movs	r3, #160	; 0xa0
 8005316:	05db      	lsls	r3, r3, #23
 8005318:	2200      	movs	r2, #0
 800531a:	0018      	movs	r0, r3
 800531c:	f001 ffaf 	bl	800727e <HAL_GPIO_WritePin>
}
 8005320:	46c0      	nop			; (mov r8, r8)
 8005322:	46bd      	mov	sp, r7
 8005324:	b002      	add	sp, #8
 8005326:	bd80      	pop	{r7, pc}

08005328 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b0a7      	sub	sp, #156	; 0x9c
 800532c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 800532e:	2480      	movs	r4, #128	; 0x80
 8005330:	193b      	adds	r3, r7, r4
 8005332:	0018      	movs	r0, r3
 8005334:	2314      	movs	r3, #20
 8005336:	001a      	movs	r2, r3
 8005338:	2100      	movs	r1, #0
 800533a:	f018 fad0 	bl	801d8de <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800533e:	4b78      	ldr	r3, [pc, #480]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005342:	4b77      	ldr	r3, [pc, #476]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005344:	2102      	movs	r1, #2
 8005346:	430a      	orrs	r2, r1
 8005348:	62da      	str	r2, [r3, #44]	; 0x2c
 800534a:	4b75      	ldr	r3, [pc, #468]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	2202      	movs	r2, #2
 8005350:	4013      	ands	r3, r2
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8005356:	4b72      	ldr	r3, [pc, #456]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	4b71      	ldr	r3, [pc, #452]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800535c:	2102      	movs	r1, #2
 800535e:	430a      	orrs	r2, r1
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
 8005362:	4b6f      	ldr	r3, [pc, #444]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	2202      	movs	r2, #2
 8005368:	4013      	ands	r3, r2
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 800536e:	4b6c      	ldr	r3, [pc, #432]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005372:	4b6b      	ldr	r3, [pc, #428]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005374:	2102      	movs	r1, #2
 8005376:	430a      	orrs	r2, r1
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c
 800537a:	4b69      	ldr	r3, [pc, #420]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	2202      	movs	r2, #2
 8005380:	4013      	ands	r3, r2
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8005386:	4b66      	ldr	r3, [pc, #408]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538a:	4b65      	ldr	r3, [pc, #404]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800538c:	2104      	movs	r1, #4
 800538e:	430a      	orrs	r2, r1
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	2204      	movs	r2, #4
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 800539e:	193b      	adds	r3, r7, r4
 80053a0:	2202      	movs	r2, #2
 80053a2:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80053a4:	193b      	adds	r3, r7, r4
 80053a6:	2203      	movs	r2, #3
 80053a8:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	2294      	movs	r2, #148	; 0x94
 80053ae:	18ba      	adds	r2, r7, r2
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e020      	b.n	80053f6 <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 80053b4:	4b5b      	ldr	r3, [pc, #364]	; (8005524 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 80053b6:	2194      	movs	r1, #148	; 0x94
 80053b8:	187a      	adds	r2, r7, r1
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	0092      	lsls	r2, r2, #2
 80053be:	58d2      	ldr	r2, [r2, r3]
 80053c0:	2080      	movs	r0, #128	; 0x80
 80053c2:	183b      	adds	r3, r7, r0
 80053c4:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80053c6:	4b58      	ldr	r3, [pc, #352]	; (8005528 <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 80053c8:	187a      	adds	r2, r7, r1
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	0052      	lsls	r2, r2, #1
 80053ce:	5ad3      	ldrh	r3, [r2, r3]
 80053d0:	001a      	movs	r2, r3
 80053d2:	183b      	adds	r3, r7, r0
 80053d4:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80053d6:	4b55      	ldr	r3, [pc, #340]	; (800552c <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 80053d8:	000c      	movs	r4, r1
 80053da:	187a      	adds	r2, r7, r1
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	0092      	lsls	r2, r2, #2
 80053e0:	58d3      	ldr	r3, [r2, r3]
 80053e2:	183a      	adds	r2, r7, r0
 80053e4:	0011      	movs	r1, r2
 80053e6:	0018      	movs	r0, r3
 80053e8:	f001 fccc 	bl	8006d84 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80053ec:	193b      	adds	r3, r7, r4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	193a      	adds	r2, r7, r4
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	2394      	movs	r3, #148	; 0x94
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d9d9      	bls.n	80053b4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8005400:	2328      	movs	r3, #40	; 0x28
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	0018      	movs	r0, r3
 8005406:	f000 fa07 	bl	8005818 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 800540a:	2480      	movs	r4, #128	; 0x80
 800540c:	193b      	adds	r3, r7, r4
 800540e:	2280      	movs	r2, #128	; 0x80
 8005410:	0212      	lsls	r2, r2, #8
 8005412:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005414:	193b      	adds	r3, r7, r4
 8005416:	2201      	movs	r2, #1
 8005418:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 800541a:	193b      	adds	r3, r7, r4
 800541c:	2201      	movs	r2, #1
 800541e:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8005420:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005426:	2101      	movs	r1, #1
 8005428:	430a      	orrs	r2, r1
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c
 800542c:	4b3c      	ldr	r3, [pc, #240]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	2201      	movs	r2, #1
 8005432:	4013      	ands	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8005438:	193a      	adds	r2, r7, r4
 800543a:	23a0      	movs	r3, #160	; 0xa0
 800543c:	05db      	lsls	r3, r3, #23
 800543e:	0011      	movs	r1, r2
 8005440:	0018      	movs	r0, r3
 8005442:	f001 fc9f 	bl	8006d84 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	0219      	lsls	r1, r3, #8
 800544a:	23a0      	movs	r3, #160	; 0xa0
 800544c:	05db      	lsls	r3, r3, #23
 800544e:	2201      	movs	r2, #1
 8005450:	0018      	movs	r0, r3
 8005452:	f001 ff14 	bl	800727e <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 8005456:	4b32      	ldr	r3, [pc, #200]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800545c:	2101      	movs	r1, #1
 800545e:	430a      	orrs	r2, r1
 8005460:	62da      	str	r2, [r3, #44]	; 0x2c
 8005462:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	2201      	movs	r2, #1
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	4b2b      	ldr	r3, [pc, #172]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005474:	2101      	movs	r1, #1
 8005476:	430a      	orrs	r2, r1
 8005478:	62da      	str	r2, [r3, #44]	; 0x2c
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	2201      	movs	r2, #1
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8005486:	4b26      	ldr	r3, [pc, #152]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548a:	4b25      	ldr	r3, [pc, #148]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800548c:	2104      	movs	r1, #4
 800548e:	430a      	orrs	r2, r1
 8005490:	62da      	str	r2, [r3, #44]	; 0x2c
 8005492:	4b23      	ldr	r3, [pc, #140]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	2204      	movs	r2, #4
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a2:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054a4:	2104      	movs	r1, #4
 80054a6:	430a      	orrs	r2, r1
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	2204      	movs	r2, #4
 80054b0:	4013      	ands	r3, r2
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054b6:	193b      	adds	r3, r7, r4
 80054b8:	2201      	movs	r2, #1
 80054ba:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 80054bc:	193b      	adds	r3, r7, r4
 80054be:	2200      	movs	r2, #0
 80054c0:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80054c2:	193b      	adds	r3, r7, r4
 80054c4:	2203      	movs	r2, #3
 80054c6:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80054c8:	193b      	adds	r3, r7, r4
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	0152      	lsls	r2, r2, #5
 80054ce:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80054d0:	193a      	adds	r2, r7, r4
 80054d2:	23a0      	movs	r3, #160	; 0xa0
 80054d4:	05db      	lsls	r3, r3, #23
 80054d6:	0011      	movs	r1, r2
 80054d8:	0018      	movs	r0, r3
 80054da:	f001 fc53 	bl	8006d84 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 80054de:	193b      	adds	r3, r7, r4
 80054e0:	2202      	movs	r2, #2
 80054e2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80054e4:	193a      	adds	r2, r7, r4
 80054e6:	23a0      	movs	r3, #160	; 0xa0
 80054e8:	05db      	lsls	r3, r3, #23
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f001 fc49 	bl	8006d84 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 80054f2:	193b      	adds	r3, r7, r4
 80054f4:	2202      	movs	r2, #2
 80054f6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80054f8:	193b      	adds	r3, r7, r4
 80054fa:	4a0d      	ldr	r2, [pc, #52]	; (8005530 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 80054fc:	0019      	movs	r1, r3
 80054fe:	0010      	movs	r0, r2
 8005500:	f001 fc40 	bl	8006d84 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8005504:	193b      	adds	r3, r7, r4
 8005506:	2204      	movs	r2, #4
 8005508:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 800550a:	193b      	adds	r3, r7, r4
 800550c:	4a08      	ldr	r2, [pc, #32]	; (8005530 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 800550e:	0019      	movs	r1, r3
 8005510:	0010      	movs	r0, r2
 8005512:	f001 fc37 	bl	8006d84 <HAL_GPIO_Init>
}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	b027      	add	sp, #156	; 0x9c
 800551c:	bd90      	pop	{r4, r7, pc}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	40021000 	.word	0x40021000
 8005524:	0801e0d0 	.word	0x0801e0d0
 8005528:	0801e0c8 	.word	0x0801e0c8
 800552c:	20000060 	.word	0x20000060
 8005530:	50000800 	.word	0x50000800

08005534 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 800553a:	003b      	movs	r3, r7
 800553c:	0018      	movs	r0, r3
 800553e:	2314      	movs	r3, #20
 8005540:	001a      	movs	r2, r3
 8005542:	2100      	movs	r1, #0
 8005544:	f018 f9cb 	bl	801d8de <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 8005548:	003b      	movs	r3, r7
 800554a:	2202      	movs	r2, #2
 800554c:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	e018      	b.n	8005586 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005554:	4b10      	ldr	r3, [pc, #64]	; (8005598 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	0092      	lsls	r2, r2, #2
 800555a:	58d2      	ldr	r2, [r2, r3]
 800555c:	003b      	movs	r3, r7
 800555e:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005560:	4b0e      	ldr	r3, [pc, #56]	; (800559c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	0052      	lsls	r2, r2, #1
 8005566:	5ad3      	ldrh	r3, [r2, r3]
 8005568:	001a      	movs	r2, r3
 800556a:	003b      	movs	r3, r7
 800556c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	0092      	lsls	r2, r2, #2
 8005574:	58d3      	ldr	r3, [r2, r3]
 8005576:	003a      	movs	r2, r7
 8005578:	0011      	movs	r1, r2
 800557a:	0018      	movs	r0, r3
 800557c:	f001 fc02 	bl	8006d84 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	3301      	adds	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d9e3      	bls.n	8005554 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 800558c:	f000 f9a4 	bl	80058d8 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b006      	add	sp, #24
 8005596:	bd80      	pop	{r7, pc}
 8005598:	0801e0d0 	.word	0x0801e0d0
 800559c:	0801e0c8 	.word	0x0801e0c8
 80055a0:	20000060 	.word	0x20000060

080055a4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ac:	f3ef 8310 	mrs	r3, PRIMASK
 80055b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80055b2:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 80055b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80055b6:	b672      	cpsid	i
}
 80055b8:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e02f      	b.n	8005620 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	00da      	lsls	r2, r3, #3
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 80055c6:	18d0      	adds	r0, r2, r3
 80055c8:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	0092      	lsls	r2, r2, #2
 80055ce:	58d3      	ldr	r3, [r2, r3]
 80055d0:	0019      	movs	r1, r3
 80055d2:	f001 fba1 	bl	8006d18 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	00da      	lsls	r2, r3, #3
 80055da:	4b18      	ldr	r3, [pc, #96]	; (800563c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 80055dc:	18d0      	adds	r0, r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	18d3      	adds	r3, r2, r3
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	001a      	movs	r2, r3
 80055ea:	2100      	movs	r1, #0
 80055ec:	f001 fb73 	bl	8006cd6 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 80055f0:	4a14      	ldr	r2, [pc, #80]	; (8005644 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	18d3      	adds	r3, r2, r3
 80055f6:	2000      	movs	r0, #0
 80055f8:	5618      	ldrsb	r0, [r3, r0]
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	0092      	lsls	r2, r2, #2
 8005600:	58d3      	ldr	r3, [r2, r3]
 8005602:	2200      	movs	r2, #0
 8005604:	0019      	movs	r1, r3
 8005606:	f001 f891 	bl	800672c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 800560a:	4a0e      	ldr	r2, [pc, #56]	; (8005644 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	18d3      	adds	r3, r2, r3
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	b25b      	sxtb	r3, r3
 8005614:	0018      	movs	r0, r3
 8005616:	f001 f89e 	bl	8006756 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	3301      	adds	r3, #1
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d9cc      	bls.n	80055c0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	46bd      	mov	sp, r7
 8005636:	b006      	add	sp, #24
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	200007d8 	.word	0x200007d8
 8005640:	0801e0a4 	.word	0x0801e0a4
 8005644:	0801e0c4 	.word	0x0801e0c4
 8005648:	0801e0b4 	.word	0x0801e0b4

0800564c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8005654:	2300      	movs	r3, #0
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b002      	add	sp, #8
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	0002      	movs	r2, r0
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	701a      	strb	r2, [r3, #0]

  switch (state)
 800566c:	1dfb      	adds	r3, r7, #7
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b04      	cmp	r3, #4
 8005672:	d82e      	bhi.n	80056d2 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 8005674:	009a      	lsls	r2, r3, #2
 8005676:	4b23      	ldr	r3, [pc, #140]	; (8005704 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 8005678:	18d3      	adds	r3, r2, r3
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 800567e:	23a0      	movs	r3, #160	; 0xa0
 8005680:	05db      	lsls	r3, r3, #23
 8005682:	2201      	movs	r2, #1
 8005684:	2102      	movs	r1, #2
 8005686:	0018      	movs	r0, r3
 8005688:	f001 fdf9 	bl	800727e <HAL_GPIO_WritePin>
      break;
 800568c:	e036      	b.n	80056fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800568e:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005690:	2201      	movs	r2, #1
 8005692:	2104      	movs	r1, #4
 8005694:	0018      	movs	r0, r3
 8005696:	f001 fdf2 	bl	800727e <HAL_GPIO_WritePin>
      break;
 800569a:	e02f      	b.n	80056fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 800569c:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800569e:	2201      	movs	r2, #1
 80056a0:	2102      	movs	r1, #2
 80056a2:	0018      	movs	r0, r3
 80056a4:	f001 fdeb 	bl	800727e <HAL_GPIO_WritePin>
      break;
 80056a8:	e028      	b.n	80056fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80056aa:	23a0      	movs	r3, #160	; 0xa0
 80056ac:	05db      	lsls	r3, r3, #23
 80056ae:	2200      	movs	r2, #0
 80056b0:	2102      	movs	r1, #2
 80056b2:	0018      	movs	r0, r3
 80056b4:	f001 fde3 	bl	800727e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	2104      	movs	r1, #4
 80056be:	0018      	movs	r0, r3
 80056c0:	f001 fddd 	bl	800727e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80056c4:	4b10      	ldr	r3, [pc, #64]	; (8005708 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	2102      	movs	r1, #2
 80056ca:	0018      	movs	r0, r3
 80056cc:	f001 fdd7 	bl	800727e <HAL_GPIO_WritePin>
      break;
 80056d0:	e014      	b.n	80056fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80056d2:	23a0      	movs	r3, #160	; 0xa0
 80056d4:	05db      	lsls	r3, r3, #23
 80056d6:	2200      	movs	r2, #0
 80056d8:	2102      	movs	r1, #2
 80056da:	0018      	movs	r0, r3
 80056dc:	f001 fdcf 	bl	800727e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	2104      	movs	r1, #4
 80056e6:	0018      	movs	r0, r3
 80056e8:	f001 fdc9 	bl	800727e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	2102      	movs	r1, #2
 80056f2:	0018      	movs	r0, r3
 80056f4:	f001 fdc3 	bl	800727e <HAL_GPIO_WritePin>

      break;
 80056f8:	e000      	b.n	80056fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 80056fa:	46c0      	nop			; (mov r8, r8)
  }
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b002      	add	sp, #8
 8005702:	bd80      	pop	{r7, pc}
 8005704:	0801e0e0 	.word	0x0801e0e0
 8005708:	50000800 	.word	0x50000800

0800570c <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8005714:	2301      	movs	r3, #1
}
 8005716:	0018      	movs	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	b002      	add	sp, #8
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	0018      	movs	r0, r3
 800572a:	2314      	movs	r3, #20
 800572c:	001a      	movs	r2, r3
 800572e:	2100      	movs	r1, #0
 8005730:	f018 f8d5 	bl	801d8de <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005734:	1d3b      	adds	r3, r7, #4
 8005736:	2201      	movs	r2, #1
 8005738:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	2200      	movs	r2, #0
 800573e:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005740:	1d3b      	adds	r3, r7, #4
 8005742:	2203      	movs	r2, #3
 8005744:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	4a0f      	ldr	r2, [pc, #60]	; (800578c <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005750:	0019      	movs	r1, r3
 8005752:	0010      	movs	r0, r2
 8005754:	f001 fb16 	bl	8006d84 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 800575a:	2200      	movs	r2, #0
 800575c:	2101      	movs	r1, #1
 800575e:	0018      	movs	r0, r3
 8005760:	f001 fd8d 	bl	800727e <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 8005764:	2001      	movs	r0, #1
 8005766:	f7fe ff8e 	bl	8004686 <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	2200      	movs	r2, #0
 800576e:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	4a06      	ldr	r2, [pc, #24]	; (800578c <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005774:	0019      	movs	r1, r3
 8005776:	0010      	movs	r0, r2
 8005778:	f001 fb04 	bl	8006d84 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 800577c:	2006      	movs	r0, #6
 800577e:	f7fe ff82 	bl	8004686 <HAL_Delay>
}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	46bd      	mov	sp, r7
 8005786:	b006      	add	sp, #24
 8005788:	bd80      	pop	{r7, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	50000800 	.word	0x50000800

08005790 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 8005794:	f7ff fa34 	bl	8004c00 <BSP_SPI1_Init>
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 800579e:	b590      	push	{r4, r7, lr}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	0002      	movs	r2, r0
 80057a6:	1dbb      	adds	r3, r7, #6
 80057a8:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80057aa:	240e      	movs	r4, #14
 80057ac:	1939      	adds	r1, r7, r4
 80057ae:	1dbb      	adds	r3, r7, #6
 80057b0:	2201      	movs	r2, #1
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7ff fa48 	bl	8004c48 <BSP_SPI1_SendRecv>

  return rxData;
 80057b8:	193b      	adds	r3, r7, r4
 80057ba:	881b      	ldrh	r3, [r3, #0]
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b005      	add	sp, #20
 80057c2:	bd90      	pop	{r4, r7, pc}

080057c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  if (state == 0)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d108      	bne.n	80057e4 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	0219      	lsls	r1, r3, #8
 80057d6:	23a0      	movs	r3, #160	; 0xa0
 80057d8:	05db      	lsls	r3, r3, #23
 80057da:	2200      	movs	r2, #0
 80057dc:	0018      	movs	r0, r3
 80057de:	f001 fd4e 	bl	800727e <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 80057e2:	e007      	b.n	80057f4 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	0219      	lsls	r1, r3, #8
 80057e8:	23a0      	movs	r3, #160	; 0xa0
 80057ea:	05db      	lsls	r3, r3, #23
 80057ec:	2201      	movs	r2, #1
 80057ee:	0018      	movs	r0, r3
 80057f0:	f001 fd45 	bl	800727e <HAL_GPIO_WritePin>
}
 80057f4:	46c0      	nop			; (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b002      	add	sp, #8
 80057fa:	bd80      	pop	{r7, pc}

080057fc <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 8005802:	2102      	movs	r1, #2
 8005804:	0018      	movs	r0, r3
 8005806:	f001 fd1d 	bl	8007244 <HAL_GPIO_ReadPin>
 800580a:	0003      	movs	r3, r0
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	50000400 	.word	0x50000400

08005818 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b08b      	sub	sp, #44	; 0x2c
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4b2a      	ldr	r3, [pc, #168]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005826:	2102      	movs	r1, #2
 8005828:	430a      	orrs	r2, r1
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c
 800582c:	4b28      	ldr	r3, [pc, #160]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	2202      	movs	r2, #2
 8005832:	4013      	ands	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800583e:	2101      	movs	r1, #1
 8005840:	430a      	orrs	r2, r1
 8005842:	62da      	str	r2, [r3, #44]	; 0x2c
 8005844:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	2201      	movs	r2, #1
 800584a:	4013      	ands	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8005850:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005856:	2101      	movs	r1, #1
 8005858:	430a      	orrs	r2, r1
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c
 800585c:	4b1c      	ldr	r3, [pc, #112]	; (80058d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	2201      	movs	r2, #1
 8005862:	4013      	ands	r3, r2
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005868:	2414      	movs	r4, #20
 800586a:	193b      	adds	r3, r7, r4
 800586c:	2202      	movs	r2, #2
 800586e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005870:	193b      	adds	r3, r7, r4
 8005872:	2202      	movs	r2, #2
 8005874:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005876:	193b      	adds	r3, r7, r4
 8005878:	2203      	movs	r2, #3
 800587a:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 800587c:	193b      	adds	r3, r7, r4
 800587e:	2200      	movs	r2, #0
 8005880:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8005882:	193b      	adds	r3, r7, r4
 8005884:	2280      	movs	r2, #128	; 0x80
 8005886:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8005888:	193a      	adds	r2, r7, r4
 800588a:	23a0      	movs	r3, #160	; 0xa0
 800588c:	05db      	lsls	r3, r3, #23
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f001 fa77 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8005896:	193b      	adds	r3, r7, r4
 8005898:	2200      	movs	r2, #0
 800589a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800589c:	193b      	adds	r3, r7, r4
 800589e:	2240      	movs	r2, #64	; 0x40
 80058a0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80058a2:	193a      	adds	r2, r7, r4
 80058a4:	23a0      	movs	r3, #160	; 0xa0
 80058a6:	05db      	lsls	r3, r3, #23
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f001 fa6a 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80058b0:	193b      	adds	r3, r7, r4
 80058b2:	2200      	movs	r2, #0
 80058b4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80058b6:	193b      	adds	r3, r7, r4
 80058b8:	2208      	movs	r2, #8
 80058ba:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80058bc:	193b      	adds	r3, r7, r4
 80058be:	4a05      	ldr	r2, [pc, #20]	; (80058d4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 80058c0:	0019      	movs	r1, r3
 80058c2:	0010      	movs	r0, r2
 80058c4:	f001 fa5e 	bl	8006d84 <HAL_GPIO_Init>
}
 80058c8:	46c0      	nop			; (mov r8, r8)
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b00b      	add	sp, #44	; 0x2c
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	40021000 	.word	0x40021000
 80058d4:	50000400 	.word	0x50000400

080058d8 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	2201      	movs	r2, #1
 80058e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058e4:	1d3b      	adds	r3, r7, #4
 80058e6:	2202      	movs	r2, #2
 80058e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80058ea:	1d3b      	adds	r3, r7, #4
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80058f0:	1d3a      	adds	r2, r7, #4
 80058f2:	23a0      	movs	r3, #160	; 0xa0
 80058f4:	05db      	lsls	r3, r3, #23
 80058f6:	0011      	movs	r1, r2
 80058f8:	0018      	movs	r0, r3
 80058fa:	f001 fa43 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80058fe:	1d3b      	adds	r3, r7, #4
 8005900:	2240      	movs	r2, #64	; 0x40
 8005902:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005904:	1d3a      	adds	r2, r7, #4
 8005906:	23a0      	movs	r3, #160	; 0xa0
 8005908:	05db      	lsls	r3, r3, #23
 800590a:	0011      	movs	r1, r2
 800590c:	0018      	movs	r0, r3
 800590e:	f001 fa39 	bl	8006d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	2208      	movs	r2, #8
 8005916:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	4a0e      	ldr	r2, [pc, #56]	; (8005954 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 800591c:	0019      	movs	r1, r3
 800591e:	0010      	movs	r0, r2
 8005920:	f001 fa30 	bl	8006d84 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8005924:	23a0      	movs	r3, #160	; 0xa0
 8005926:	05db      	lsls	r3, r3, #23
 8005928:	2200      	movs	r2, #0
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	0018      	movs	r0, r3
 800592e:	f001 fca6 	bl	800727e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8005932:	23a0      	movs	r3, #160	; 0xa0
 8005934:	05db      	lsls	r3, r3, #23
 8005936:	2200      	movs	r2, #0
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	0018      	movs	r0, r3
 800593c:	f001 fc9f 	bl	800727e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8005942:	2200      	movs	r2, #0
 8005944:	2108      	movs	r1, #8
 8005946:	0018      	movs	r0, r3
 8005948:	f001 fc99 	bl	800727e <HAL_GPIO_WritePin>

}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b006      	add	sp, #24
 8005952:	bd80      	pop	{r7, pc}
 8005954:	50000400 	.word	0x50000400

08005958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <SystemInit+0x64>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b16      	ldr	r3, [pc, #88]	; (80059bc <SystemInit+0x64>)
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	0049      	lsls	r1, r1, #1
 8005966:	430a      	orrs	r2, r1
 8005968:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <SystemInit+0x64>)
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <SystemInit+0x64>)
 8005970:	4913      	ldr	r1, [pc, #76]	; (80059c0 <SystemInit+0x68>)
 8005972:	400a      	ands	r2, r1
 8005974:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <SystemInit+0x64>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <SystemInit+0x64>)
 800597c:	4911      	ldr	r1, [pc, #68]	; (80059c4 <SystemInit+0x6c>)
 800597e:	400a      	ands	r2, r1
 8005980:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005982:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <SystemInit+0x64>)
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <SystemInit+0x64>)
 8005988:	2101      	movs	r1, #1
 800598a:	438a      	bics	r2, r1
 800598c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <SystemInit+0x64>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <SystemInit+0x64>)
 8005994:	490c      	ldr	r1, [pc, #48]	; (80059c8 <SystemInit+0x70>)
 8005996:	400a      	ands	r2, r1
 8005998:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800599a:	4b08      	ldr	r3, [pc, #32]	; (80059bc <SystemInit+0x64>)
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <SystemInit+0x64>)
 80059a0:	490a      	ldr	r1, [pc, #40]	; (80059cc <SystemInit+0x74>)
 80059a2:	400a      	ands	r2, r1
 80059a4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <SystemInit+0x64>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <SystemInit+0x78>)
 80059ae:	2280      	movs	r2, #128	; 0x80
 80059b0:	0512      	lsls	r2, r2, #20
 80059b2:	609a      	str	r2, [r3, #8]
#endif
}
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	40021000 	.word	0x40021000
 80059c0:	88ff400c 	.word	0x88ff400c
 80059c4:	fef6fff6 	.word	0xfef6fff6
 80059c8:	fffbffff 	.word	0xfffbffff
 80059cc:	ff02ffff 	.word	0xff02ffff
 80059d0:	e000ed00 	.word	0xe000ed00

080059d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80059da:	1dfb      	adds	r3, r7, #7
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_Init+0x3c>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <HAL_Init+0x3c>)
 80059e6:	2102      	movs	r1, #2
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059ec:	2003      	movs	r0, #3
 80059ee:	f7fe fe39 	bl	8004664 <HAL_InitTick>
 80059f2:	1e03      	subs	r3, r0, #0
 80059f4:	d003      	beq.n	80059fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80059f6:	1dfb      	adds	r3, r7, #7
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	e001      	b.n	8005a02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059fe:	f7fe fc2f 	bl	8004260 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a02:	1dfb      	adds	r3, r7, #7
 8005a04:	781b      	ldrb	r3, [r3, #0]
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b002      	add	sp, #8
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	40022000 	.word	0x40022000

08005a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <HAL_IncTick+0x1c>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	001a      	movs	r2, r3
 8005a1e:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <HAL_IncTick+0x20>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	18d2      	adds	r2, r2, r3
 8005a24:	4b03      	ldr	r3, [pc, #12]	; (8005a34 <HAL_IncTick+0x20>)
 8005a26:	601a      	str	r2, [r3, #0]
}
 8005a28:	46c0      	nop			; (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	20000078 	.word	0x20000078
 8005a34:	200007f8 	.word	0x200007f8

08005a38 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8005a3c:	4b02      	ldr	r3, [pc, #8]	; (8005a48 <HAL_GetUIDw0+0x10>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
}
 8005a40:	0018      	movs	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	1ff80050 	.word	0x1ff80050

08005a4c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8005a50:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <HAL_GetUIDw1+0x10>)
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	1ff80054 	.word	0x1ff80054

08005a60 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8005a64:	4b02      	ldr	r3, [pc, #8]	; (8005a70 <HAL_GetUIDw2+0x10>)
 8005a66:	681b      	ldr	r3, [r3, #0]
}
 8005a68:	0018      	movs	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	1ff80064 	.word	0x1ff80064

08005a74 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005a7e:	2101      	movs	r1, #1
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	40015800 	.word	0x40015800

08005a90 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	605a      	str	r2, [r3, #4]
}
 8005aa0:	46c0      	nop			; (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	40015800 	.word	0x40015800

08005aac <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	4b03      	ldr	r3, [pc, #12]	; (8005ac4 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	40015800 	.word	0x40015800

08005ac8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e159      	b.n	8005d8e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2250      	movs	r2, #80	; 0x50
 8005aec:	2100      	movs	r1, #0
 8005aee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7fd fb7e 	bl	80031f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	2210      	movs	r2, #16
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d005      	beq.n	8005b10 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005b0e:	d00b      	beq.n	8005b28 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	2210      	movs	r2, #16
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2250      	movs	r2, #80	; 0x50
 8005b20:	2100      	movs	r1, #0
 8005b22:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e132      	b.n	8005d8e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2c:	4a9a      	ldr	r2, [pc, #616]	; (8005d98 <HAL_ADC_Init+0x2d0>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2202      	movs	r2, #2
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d108      	bne.n	8005b58 <HAL_ADC_Init+0x90>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_ADC_Init+0x90>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <HAL_ADC_Init+0x92>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d149      	bne.n	8005bf2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	23c0      	movs	r3, #192	; 0xc0
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d00b      	beq.n	8005b82 <HAL_ADC_Init+0xba>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	05db      	lsls	r3, r3, #23
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d005      	beq.n	8005b82 <HAL_ADC_Init+0xba>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	2380      	movs	r3, #128	; 0x80
 8005b7c:	061b      	lsls	r3, r3, #24
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d111      	bne.n	8005ba6 <HAL_ADC_Init+0xde>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	0092      	lsls	r2, r2, #2
 8005b8e:	0892      	lsrs	r2, r2, #2
 8005b90:	611a      	str	r2, [r3, #16]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6919      	ldr	r1, [r3, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	611a      	str	r2, [r3, #16]
 8005ba4:	e014      	b.n	8005bd0 <HAL_ADC_Init+0x108>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	0092      	lsls	r2, r2, #2
 8005bb2:	0892      	lsrs	r2, r2, #2
 8005bb4:	611a      	str	r2, [r3, #16]
 8005bb6:	4b79      	ldr	r3, [pc, #484]	; (8005d9c <HAL_ADC_Init+0x2d4>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b78      	ldr	r3, [pc, #480]	; (8005d9c <HAL_ADC_Init+0x2d4>)
 8005bbc:	4978      	ldr	r1, [pc, #480]	; (8005da0 <HAL_ADC_Init+0x2d8>)
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	4b76      	ldr	r3, [pc, #472]	; (8005d9c <HAL_ADC_Init+0x2d4>)
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	4b74      	ldr	r3, [pc, #464]	; (8005d9c <HAL_ADC_Init+0x2d4>)
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2118      	movs	r1, #24
 8005bdc:	438a      	bics	r2, r1
 8005bde:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68d9      	ldr	r1, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005bf2:	4b6a      	ldr	r3, [pc, #424]	; (8005d9c <HAL_ADC_Init+0x2d4>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b69      	ldr	r3, [pc, #420]	; (8005d9c <HAL_ADC_Init+0x2d4>)
 8005bf8:	496a      	ldr	r1, [pc, #424]	; (8005da4 <HAL_ADC_Init+0x2dc>)
 8005bfa:	400a      	ands	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8005bfe:	4b67      	ldr	r3, [pc, #412]	; (8005d9c <HAL_ADC_Init+0x2d4>)
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c06:	065a      	lsls	r2, r3, #25
 8005c08:	4b64      	ldr	r3, [pc, #400]	; (8005d9c <HAL_ADC_Init+0x2d4>)
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	055b      	lsls	r3, r3, #21
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d108      	bne.n	8005c2e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2180      	movs	r1, #128	; 0x80
 8005c28:	0549      	lsls	r1, r1, #21
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	495b      	ldr	r1, [pc, #364]	; (8005da8 <HAL_ADC_Init+0x2e0>)
 8005c3a:	400a      	ands	r2, r1
 8005c3c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68d9      	ldr	r1, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d101      	bne.n	8005c54 <HAL_ADC_Init+0x18c>
 8005c50:	2304      	movs	r3, #4
 8005c52:	e000      	b.n	8005c56 <HAL_ADC_Init+0x18e>
 8005c54:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005c56:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2020      	movs	r0, #32
 8005c5c:	5c1b      	ldrb	r3, [r3, r0]
 8005c5e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005c60:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	202c      	movs	r0, #44	; 0x2c
 8005c66:	5c1b      	ldrb	r3, [r3, r0]
 8005c68:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005c6a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005c70:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005c78:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005c80:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c8e:	23c2      	movs	r3, #194	; 0xc2
 8005c90:	33ff      	adds	r3, #255	; 0xff
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d00b      	beq.n	8005cae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68d9      	ldr	r1, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2221      	movs	r2, #33	; 0x21
 8005cb2:	5c9b      	ldrb	r3, [r3, r2]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d11a      	bne.n	8005cee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	5c9b      	ldrb	r3, [r3, r2]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2180      	movs	r1, #128	; 0x80
 8005cce:	0249      	lsls	r1, r1, #9
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	e00b      	b.n	8005cee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cda:	2220      	movs	r2, #32
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d11f      	bne.n	8005d36 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	492a      	ldr	r1, [pc, #168]	; (8005dac <HAL_ADC_Init+0x2e4>)
 8005d02:	400a      	ands	r2, r1
 8005d04:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6919      	ldr	r1, [r3, #16]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005d14:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8005d1a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2101      	movs	r1, #1
 8005d30:	430a      	orrs	r2, r1
 8005d32:	611a      	str	r2, [r3, #16]
 8005d34:	e00e      	b.n	8005d54 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2101      	movs	r1, #1
 8005d50:	438a      	bics	r2, r1
 8005d52:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2107      	movs	r1, #7
 8005d60:	438a      	bics	r2, r1
 8005d62:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6959      	ldr	r1, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	2203      	movs	r2, #3
 8005d82:	4393      	bics	r3, r2
 8005d84:	2201      	movs	r2, #1
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	0018      	movs	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b002      	add	sp, #8
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	fffffefd 	.word	0xfffffefd
 8005d9c:	40012708 	.word	0x40012708
 8005da0:	ffc3ffff 	.word	0xffc3ffff
 8005da4:	fdffffff 	.word	0xfdffffff
 8005da8:	fffe0219 	.word	0xfffe0219
 8005dac:	fffffc03 	.word	0xfffffc03

08005db0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8005db0:	b5b0      	push	{r4, r5, r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005db8:	230f      	movs	r3, #15
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e07d      	b.n	8005ec6 <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	2202      	movs	r2, #2
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005dd6:	250f      	movs	r5, #15
 8005dd8:	197c      	adds	r4, r7, r5
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f000 faff 	bl	80063e0 <ADC_ConversionStop>
 8005de2:	0003      	movs	r3, r0
 8005de4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005de6:	197b      	adds	r3, r7, r5
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005dee:	197c      	adds	r4, r7, r5
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	0018      	movs	r0, r3
 8005df4:	f000 fa94 	bl	8006320 <ADC_Disable>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8005dfc:	197b      	adds	r3, r7, r5
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d002      	beq.n	8005e0a <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8005e0a:	230f      	movs	r3, #15
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d051      	beq.n	8005eb8 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	492c      	ldr	r1, [pc, #176]	; (8005ed0 <HAL_ADC_DeInit+0x120>)
 8005e20:	400a      	ands	r2, r1
 8005e22:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <HAL_ADC_DeInit+0x124>)
 8005e2a:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4928      	ldr	r1, [pc, #160]	; (8005ed8 <HAL_ADC_DeInit+0x128>)
 8005e38:	400a      	ands	r2, r1
 8005e3a:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4925      	ldr	r1, [pc, #148]	; (8005edc <HAL_ADC_DeInit+0x12c>)
 8005e48:	400a      	ands	r2, r1
 8005e4a:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4922      	ldr	r1, [pc, #136]	; (8005ee0 <HAL_ADC_DeInit+0x130>)
 8005e58:	400a      	ands	r2, r1
 8005e5a:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2107      	movs	r1, #7
 8005e68:	438a      	bics	r2, r1
 8005e6a:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	491b      	ldr	r1, [pc, #108]	; (8005ee4 <HAL_ADC_DeInit+0x134>)
 8005e78:	400a      	ands	r2, r1
 8005e7a:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	22b4      	movs	r2, #180	; 0xb4
 8005e82:	589a      	ldr	r2, [r3, r2]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	217f      	movs	r1, #127	; 0x7f
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	21b4      	movs	r1, #180	; 0xb4
 8005e8e:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	22b4      	movs	r2, #180	; 0xb4
 8005e96:	589a      	ldr	r2, [r3, r2]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	217f      	movs	r1, #127	; 0x7f
 8005e9e:	438a      	bics	r2, r1
 8005ea0:	21b4      	movs	r1, #180	; 0xb4
 8005ea2:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7fd f9d4 	bl	8003254 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2250      	movs	r2, #80	; 0x50
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005ec0:	230f      	movs	r3, #15
 8005ec2:	18fb      	adds	r3, r7, r3
 8005ec4:	781b      	ldrb	r3, [r3, #0]
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b004      	add	sp, #16
 8005ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	fffff760 	.word	0xfffff760
 8005ed4:	0000089f 	.word	0x0000089f
 8005ed8:	efffffff 	.word	0xefffffff
 8005edc:	833e0200 	.word	0x833e0200
 8005ee0:	3ffffc02 	.word	0x3ffffc02
 8005ee4:	f000f000 	.word	0xf000f000

08005ee8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005ee8:	b590      	push	{r4, r7, lr}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ef0:	230f      	movs	r3, #15
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2204      	movs	r2, #4
 8005f00:	4013      	ands	r3, r2
 8005f02:	d138      	bne.n	8005f76 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2250      	movs	r2, #80	; 0x50
 8005f08:	5c9b      	ldrb	r3, [r3, r2]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_ADC_Start+0x2a>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e038      	b.n	8005f84 <HAL_ADC_Start+0x9c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2250      	movs	r2, #80	; 0x50
 8005f16:	2101      	movs	r1, #1
 8005f18:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d007      	beq.n	8005f32 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005f22:	230f      	movs	r3, #15
 8005f24:	18fc      	adds	r4, r7, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f000 f999 	bl	8006260 <ADC_Enable>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005f32:	230f      	movs	r3, #15
 8005f34:	18fb      	adds	r3, r7, r3
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d120      	bne.n	8005f7e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f40:	4a12      	ldr	r2, [pc, #72]	; (8005f8c <HAL_ADC_Start+0xa4>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	2280      	movs	r2, #128	; 0x80
 8005f46:	0052      	lsls	r2, r2, #1
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2250      	movs	r2, #80	; 0x50
 8005f58:	2100      	movs	r1, #0
 8005f5a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	221c      	movs	r2, #28
 8005f62:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2104      	movs	r1, #4
 8005f70:	430a      	orrs	r2, r1
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	e003      	b.n	8005f7e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005f76:	230f      	movs	r3, #15
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005f7e:	230f      	movs	r3, #15
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	781b      	ldrb	r3, [r3, #0]
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b005      	add	sp, #20
 8005f8a:	bd90      	pop	{r4, r7, pc}
 8005f8c:	fffff0fe 	.word	0xfffff0fe

08005f90 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005f90:	b5b0      	push	{r4, r5, r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f98:	230f      	movs	r3, #15
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2250      	movs	r2, #80	; 0x50
 8005fa4:	5c9b      	ldrb	r3, [r3, r2]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_ADC_Stop+0x1e>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e029      	b.n	8006002 <HAL_ADC_Stop+0x72>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2250      	movs	r2, #80	; 0x50
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005fb6:	250f      	movs	r5, #15
 8005fb8:	197c      	adds	r4, r7, r5
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 fa0f 	bl	80063e0 <ADC_ConversionStop>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005fc6:	197b      	adds	r3, r7, r5
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d112      	bne.n	8005ff4 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005fce:	197c      	adds	r4, r7, r5
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 f9a4 	bl	8006320 <ADC_Disable>
 8005fd8:	0003      	movs	r3, r0
 8005fda:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005fdc:	197b      	adds	r3, r7, r5
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d107      	bne.n	8005ff4 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe8:	4a08      	ldr	r2, [pc, #32]	; (800600c <HAL_ADC_Stop+0x7c>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	2201      	movs	r2, #1
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2250      	movs	r2, #80	; 0x50
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005ffc:	230f      	movs	r3, #15
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	781b      	ldrb	r3, [r3, #0]
}
 8006002:	0018      	movs	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	b004      	add	sp, #16
 8006008:	bdb0      	pop	{r4, r5, r7, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	fffffefe 	.word	0xfffffefe

08006010 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	2b08      	cmp	r3, #8
 8006028:	d102      	bne.n	8006030 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800602a:	2308      	movs	r3, #8
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e014      	b.n	800605a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	4013      	ands	r3, r2
 800603a:	2b01      	cmp	r3, #1
 800603c:	d10b      	bne.n	8006056 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	2220      	movs	r2, #32
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2250      	movs	r2, #80	; 0x50
 800604e:	2100      	movs	r1, #0
 8006050:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e06c      	b.n	8006130 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006056:	230c      	movs	r3, #12
 8006058:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800605a:	f7fe fb0c 	bl	8004676 <HAL_GetTick>
 800605e:	0003      	movs	r3, r0
 8006060:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006062:	e019      	b.n	8006098 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	d016      	beq.n	8006098 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_ADC_PollForConversion+0x70>
 8006070:	f7fe fb01 	bl	8004676 <HAL_GetTick>
 8006074:	0002      	movs	r2, r0
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d20b      	bcs.n	8006098 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006084:	2204      	movs	r2, #4
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2250      	movs	r2, #80	; 0x50
 8006090:	2100      	movs	r1, #0
 8006092:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e04b      	b.n	8006130 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4013      	ands	r3, r2
 80060a2:	d0df      	beq.n	8006064 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a8:	2280      	movs	r2, #128	; 0x80
 80060aa:	0092      	lsls	r2, r2, #2
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	23c0      	movs	r3, #192	; 0xc0
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4013      	ands	r3, r2
 80060be:	d12e      	bne.n	800611e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d129      	bne.n	800611e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2208      	movs	r2, #8
 80060d2:	4013      	ands	r3, r2
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d122      	bne.n	800611e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2204      	movs	r2, #4
 80060e0:	4013      	ands	r3, r2
 80060e2:	d110      	bne.n	8006106 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	210c      	movs	r1, #12
 80060f0:	438a      	bics	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f8:	4a0f      	ldr	r2, [pc, #60]	; (8006138 <HAL_ADC_PollForConversion+0x128>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	2201      	movs	r2, #1
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
 8006104:	e00b      	b.n	800611e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	2220      	movs	r2, #32
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	2201      	movs	r2, #1
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	220c      	movs	r2, #12
 800612c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	0018      	movs	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	b004      	add	sp, #16
 8006136:	bd80      	pop	{r7, pc}
 8006138:	fffffefe 	.word	0xfffffefe

0800613c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800614a:	0018      	movs	r0, r3
 800614c:	46bd      	mov	sp, r7
 800614e:	b002      	add	sp, #8
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2250      	movs	r2, #80	; 0x50
 8006162:	5c9b      	ldrb	r3, [r3, r2]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_ADC_ConfigChannel+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e06c      	b.n	8006246 <HAL_ADC_ConfigChannel+0xf2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2250      	movs	r2, #80	; 0x50
 8006170:	2101      	movs	r1, #1
 8006172:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2204      	movs	r2, #4
 800617c:	4013      	ands	r3, r2
 800617e:	d00b      	beq.n	8006198 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	2220      	movs	r2, #32
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2250      	movs	r2, #80	; 0x50
 8006190:	2100      	movs	r1, #0
 8006192:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e056      	b.n	8006246 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4a2c      	ldr	r2, [pc, #176]	; (8006250 <HAL_ADC_ConfigChannel+0xfc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d028      	beq.n	80061f4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	035b      	lsls	r3, r3, #13
 80061ae:	0b5a      	lsrs	r2, r3, #13
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	02db      	lsls	r3, r3, #11
 80061c0:	4013      	ands	r3, r2
 80061c2:	d009      	beq.n	80061d8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80061c4:	4b23      	ldr	r3, [pc, #140]	; (8006254 <HAL_ADC_ConfigChannel+0x100>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4b22      	ldr	r3, [pc, #136]	; (8006254 <HAL_ADC_ConfigChannel+0x100>)
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	0409      	lsls	r1, r1, #16
 80061ce:	430a      	orrs	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80061d2:	200a      	movs	r0, #10
 80061d4:	f000 f94a 	bl	800646c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	4013      	ands	r3, r2
 80061e2:	d02b      	beq.n	800623c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80061e4:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <HAL_ADC_ConfigChannel+0x100>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <HAL_ADC_ConfigChannel+0x100>)
 80061ea:	2180      	movs	r1, #128	; 0x80
 80061ec:	03c9      	lsls	r1, r1, #15
 80061ee:	430a      	orrs	r2, r1
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	e023      	b.n	800623c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	035b      	lsls	r3, r3, #13
 8006200:	0b5b      	lsrs	r3, r3, #13
 8006202:	43d9      	mvns	r1, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	400a      	ands	r2, r1
 800620a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	02db      	lsls	r3, r3, #11
 8006214:	4013      	ands	r3, r2
 8006216:	d005      	beq.n	8006224 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006218:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <HAL_ADC_ConfigChannel+0x100>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <HAL_ADC_ConfigChannel+0x100>)
 800621e:	490e      	ldr	r1, [pc, #56]	; (8006258 <HAL_ADC_ConfigChannel+0x104>)
 8006220:	400a      	ands	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	4013      	ands	r3, r2
 800622e:	d005      	beq.n	800623c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006230:	4b08      	ldr	r3, [pc, #32]	; (8006254 <HAL_ADC_ConfigChannel+0x100>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b07      	ldr	r3, [pc, #28]	; (8006254 <HAL_ADC_ConfigChannel+0x100>)
 8006236:	4909      	ldr	r1, [pc, #36]	; (800625c <HAL_ADC_ConfigChannel+0x108>)
 8006238:	400a      	ands	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2250      	movs	r2, #80	; 0x50
 8006240:	2100      	movs	r1, #0
 8006242:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b002      	add	sp, #8
 800624c:	bd80      	pop	{r7, pc}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	00001001 	.word	0x00001001
 8006254:	40012708 	.word	0x40012708
 8006258:	ff7fffff 	.word	0xff7fffff
 800625c:	ffbfffff 	.word	0xffbfffff

08006260 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2203      	movs	r2, #3
 8006274:	4013      	ands	r3, r2
 8006276:	2b01      	cmp	r3, #1
 8006278:	d108      	bne.n	800628c <ADC_Enable+0x2c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2201      	movs	r2, #1
 8006282:	4013      	ands	r3, r2
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <ADC_Enable+0x2c>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <ADC_Enable+0x2e>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d13f      	bne.n	8006312 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4a20      	ldr	r2, [pc, #128]	; (800631c <ADC_Enable+0xbc>)
 800629a:	4013      	ands	r3, r2
 800629c:	d00d      	beq.n	80062ba <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	2210      	movs	r2, #16
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	2201      	movs	r2, #1
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e02c      	b.n	8006314 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2101      	movs	r1, #1
 80062c6:	430a      	orrs	r2, r1
 80062c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80062ca:	2001      	movs	r0, #1
 80062cc:	f000 f8ce 	bl	800646c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80062d0:	f7fe f9d1 	bl	8004676 <HAL_GetTick>
 80062d4:	0003      	movs	r3, r0
 80062d6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80062d8:	e014      	b.n	8006304 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062da:	f7fe f9cc 	bl	8004676 <HAL_GetTick>
 80062de:	0002      	movs	r2, r0
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b0a      	cmp	r3, #10
 80062e6:	d90d      	bls.n	8006304 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ec:	2210      	movs	r2, #16
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f8:	2201      	movs	r2, #1
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e007      	b.n	8006314 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	4013      	ands	r3, r2
 800630e:	2b01      	cmp	r3, #1
 8006310:	d1e3      	bne.n	80062da <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b004      	add	sp, #16
 800631a:	bd80      	pop	{r7, pc}
 800631c:	80000017 	.word	0x80000017

08006320 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2203      	movs	r2, #3
 8006334:	4013      	ands	r3, r2
 8006336:	2b01      	cmp	r3, #1
 8006338:	d108      	bne.n	800634c <ADC_Disable+0x2c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2201      	movs	r2, #1
 8006342:	4013      	ands	r3, r2
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <ADC_Disable+0x2c>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <ADC_Disable+0x2e>
 800634c:	2300      	movs	r3, #0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d041      	beq.n	80063d6 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2205      	movs	r2, #5
 800635a:	4013      	ands	r3, r2
 800635c:	2b01      	cmp	r3, #1
 800635e:	d110      	bne.n	8006382 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2102      	movs	r1, #2
 800636c:	430a      	orrs	r2, r1
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2203      	movs	r2, #3
 8006376:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006378:	f7fe f97d 	bl	8004676 <HAL_GetTick>
 800637c:	0003      	movs	r3, r0
 800637e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006380:	e022      	b.n	80063c8 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006386:	2210      	movs	r2, #16
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	2201      	movs	r2, #1
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01c      	b.n	80063d8 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800639e:	f7fe f96a 	bl	8004676 <HAL_GetTick>
 80063a2:	0002      	movs	r2, r0
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b0a      	cmp	r3, #10
 80063aa:	d90d      	bls.n	80063c8 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	2210      	movs	r2, #16
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063bc:	2201      	movs	r2, #1
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e007      	b.n	80063d8 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2201      	movs	r2, #1
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d0e3      	beq.n	800639e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b004      	add	sp, #16
 80063de:	bd80      	pop	{r7, pc}

080063e0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2204      	movs	r2, #4
 80063f4:	4013      	ands	r3, r2
 80063f6:	d034      	beq.n	8006462 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2204      	movs	r2, #4
 8006400:	4013      	ands	r3, r2
 8006402:	2b04      	cmp	r3, #4
 8006404:	d10d      	bne.n	8006422 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2202      	movs	r2, #2
 800640e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006410:	d107      	bne.n	8006422 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2110      	movs	r1, #16
 800641e:	430a      	orrs	r2, r1
 8006420:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006422:	f7fe f928 	bl	8004676 <HAL_GetTick>
 8006426:	0003      	movs	r3, r0
 8006428:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800642a:	e014      	b.n	8006456 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800642c:	f7fe f923 	bl	8004676 <HAL_GetTick>
 8006430:	0002      	movs	r2, r0
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b0a      	cmp	r3, #10
 8006438:	d90d      	bls.n	8006456 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643e:	2210      	movs	r2, #16
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	2201      	movs	r2, #1
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e006      	b.n	8006464 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2204      	movs	r2, #4
 800645e:	4013      	ands	r3, r2
 8006460:	d1e4      	bne.n	800642c <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	0018      	movs	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	b004      	add	sp, #16
 800646a:	bd80      	pop	{r7, pc}

0800646c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006474:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <ADC_DelayMicroSecond+0x38>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	490b      	ldr	r1, [pc, #44]	; (80064a8 <ADC_DelayMicroSecond+0x3c>)
 800647a:	0018      	movs	r0, r3
 800647c:	f7f9 fe4c 	bl	8000118 <__udivsi3>
 8006480:	0003      	movs	r3, r0
 8006482:	001a      	movs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4353      	muls	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800648a:	e002      	b.n	8006492 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3b01      	subs	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1f9      	bne.n	800648c <ADC_DelayMicroSecond+0x20>
  } 
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	46bd      	mov	sp, r7
 800649e:	b004      	add	sp, #16
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	20000070 	.word	0x20000070
 80064a8:	000f4240 	.word	0x000f4240

080064ac <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064b6:	2317      	movs	r3, #23
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2250      	movs	r2, #80	; 0x50
 80064ca:	5c9b      	ldrb	r3, [r3, r2]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_ADCEx_Calibration_Start+0x28>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e07a      	b.n	80065ca <HAL_ADCEx_Calibration_Start+0x11e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2250      	movs	r2, #80	; 0x50
 80064d8:	2101      	movs	r1, #1
 80064da:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2203      	movs	r2, #3
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d108      	bne.n	80064fc <HAL_ADCEx_Calibration_Start+0x50>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2201      	movs	r2, #1
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_ADCEx_Calibration_Start+0x50>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <HAL_ADCEx_Calibration_Start+0x52>
 80064fc:	2300      	movs	r3, #0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d152      	bne.n	80065a8 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006506:	4a33      	ldr	r2, [pc, #204]	; (80065d4 <HAL_ADCEx_Calibration_Start+0x128>)
 8006508:	4013      	ands	r3, r2
 800650a:	2202      	movs	r2, #2
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2203      	movs	r2, #3
 800651a:	4013      	ands	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2103      	movs	r1, #3
 800652a:	438a      	bics	r2, r1
 800652c:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2180      	movs	r1, #128	; 0x80
 800653a:	0609      	lsls	r1, r1, #24
 800653c:	430a      	orrs	r2, r1
 800653e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006540:	f7fe f899 	bl	8004676 <HAL_GetTick>
 8006544:	0003      	movs	r3, r0
 8006546:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006548:	e014      	b.n	8006574 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800654a:	f7fe f894 	bl	8004676 <HAL_GetTick>
 800654e:	0002      	movs	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b0a      	cmp	r3, #10
 8006556:	d90d      	bls.n	8006574 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655c:	2212      	movs	r2, #18
 800655e:	4393      	bics	r3, r2
 8006560:	2210      	movs	r2, #16
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2250      	movs	r2, #80	; 0x50
 800656c:	2100      	movs	r1, #0
 800656e:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e02a      	b.n	80065ca <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	0fdb      	lsrs	r3, r3, #31
 800657c:	07da      	lsls	r2, r3, #31
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	061b      	lsls	r3, r3, #24
 8006582:	429a      	cmp	r2, r3
 8006584:	d0e1      	beq.n	800654a <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68d9      	ldr	r1, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	430a      	orrs	r2, r1
 8006594:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659a:	2203      	movs	r2, #3
 800659c:	4393      	bics	r3, r2
 800659e:	2201      	movs	r2, #1
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54
 80065a6:	e009      	b.n	80065bc <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ac:	2220      	movs	r2, #32
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80065b4:	2317      	movs	r3, #23
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2250      	movs	r2, #80	; 0x50
 80065c0:	2100      	movs	r1, #0
 80065c2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80065c4:	2317      	movs	r3, #23
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	781b      	ldrb	r3, [r3, #0]
}
 80065ca:	0018      	movs	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	b006      	add	sp, #24
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	fffffefd 	.word	0xfffffefd

080065d8 <__NVIC_EnableIRQ>:
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	0002      	movs	r2, r0
 80065e0:	1dfb      	adds	r3, r7, #7
 80065e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80065e4:	1dfb      	adds	r3, r7, #7
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ea:	d809      	bhi.n	8006600 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ec:	1dfb      	adds	r3, r7, #7
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	001a      	movs	r2, r3
 80065f2:	231f      	movs	r3, #31
 80065f4:	401a      	ands	r2, r3
 80065f6:	4b04      	ldr	r3, [pc, #16]	; (8006608 <__NVIC_EnableIRQ+0x30>)
 80065f8:	2101      	movs	r1, #1
 80065fa:	4091      	lsls	r1, r2
 80065fc:	000a      	movs	r2, r1
 80065fe:	601a      	str	r2, [r3, #0]
}
 8006600:	46c0      	nop			; (mov r8, r8)
 8006602:	46bd      	mov	sp, r7
 8006604:	b002      	add	sp, #8
 8006606:	bd80      	pop	{r7, pc}
 8006608:	e000e100 	.word	0xe000e100

0800660c <__NVIC_DisableIRQ>:
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	0002      	movs	r2, r0
 8006614:	1dfb      	adds	r3, r7, #7
 8006616:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006618:	1dfb      	adds	r3, r7, #7
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b7f      	cmp	r3, #127	; 0x7f
 800661e:	d810      	bhi.n	8006642 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006620:	1dfb      	adds	r3, r7, #7
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	001a      	movs	r2, r3
 8006626:	231f      	movs	r3, #31
 8006628:	4013      	ands	r3, r2
 800662a:	4908      	ldr	r1, [pc, #32]	; (800664c <__NVIC_DisableIRQ+0x40>)
 800662c:	2201      	movs	r2, #1
 800662e:	409a      	lsls	r2, r3
 8006630:	0013      	movs	r3, r2
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006636:	f3bf 8f4f 	dsb	sy
}
 800663a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800663c:	f3bf 8f6f 	isb	sy
}
 8006640:	46c0      	nop			; (mov r8, r8)
}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	46bd      	mov	sp, r7
 8006646:	b002      	add	sp, #8
 8006648:	bd80      	pop	{r7, pc}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	e000e100 	.word	0xe000e100

08006650 <__NVIC_SetPriority>:
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	0002      	movs	r2, r0
 8006658:	6039      	str	r1, [r7, #0]
 800665a:	1dfb      	adds	r3, r7, #7
 800665c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800665e:	1dfb      	adds	r3, r7, #7
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b7f      	cmp	r3, #127	; 0x7f
 8006664:	d828      	bhi.n	80066b8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006666:	4a2f      	ldr	r2, [pc, #188]	; (8006724 <__NVIC_SetPriority+0xd4>)
 8006668:	1dfb      	adds	r3, r7, #7
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b25b      	sxtb	r3, r3
 800666e:	089b      	lsrs	r3, r3, #2
 8006670:	33c0      	adds	r3, #192	; 0xc0
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	589b      	ldr	r3, [r3, r2]
 8006676:	1dfa      	adds	r2, r7, #7
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	0011      	movs	r1, r2
 800667c:	2203      	movs	r2, #3
 800667e:	400a      	ands	r2, r1
 8006680:	00d2      	lsls	r2, r2, #3
 8006682:	21ff      	movs	r1, #255	; 0xff
 8006684:	4091      	lsls	r1, r2
 8006686:	000a      	movs	r2, r1
 8006688:	43d2      	mvns	r2, r2
 800668a:	401a      	ands	r2, r3
 800668c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	019b      	lsls	r3, r3, #6
 8006692:	22ff      	movs	r2, #255	; 0xff
 8006694:	401a      	ands	r2, r3
 8006696:	1dfb      	adds	r3, r7, #7
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	0018      	movs	r0, r3
 800669c:	2303      	movs	r3, #3
 800669e:	4003      	ands	r3, r0
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066a4:	481f      	ldr	r0, [pc, #124]	; (8006724 <__NVIC_SetPriority+0xd4>)
 80066a6:	1dfb      	adds	r3, r7, #7
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b25b      	sxtb	r3, r3
 80066ac:	089b      	lsrs	r3, r3, #2
 80066ae:	430a      	orrs	r2, r1
 80066b0:	33c0      	adds	r3, #192	; 0xc0
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	501a      	str	r2, [r3, r0]
}
 80066b6:	e031      	b.n	800671c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066b8:	4a1b      	ldr	r2, [pc, #108]	; (8006728 <__NVIC_SetPriority+0xd8>)
 80066ba:	1dfb      	adds	r3, r7, #7
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	0019      	movs	r1, r3
 80066c0:	230f      	movs	r3, #15
 80066c2:	400b      	ands	r3, r1
 80066c4:	3b08      	subs	r3, #8
 80066c6:	089b      	lsrs	r3, r3, #2
 80066c8:	3306      	adds	r3, #6
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	18d3      	adds	r3, r2, r3
 80066ce:	3304      	adds	r3, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	1dfa      	adds	r2, r7, #7
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	0011      	movs	r1, r2
 80066d8:	2203      	movs	r2, #3
 80066da:	400a      	ands	r2, r1
 80066dc:	00d2      	lsls	r2, r2, #3
 80066de:	21ff      	movs	r1, #255	; 0xff
 80066e0:	4091      	lsls	r1, r2
 80066e2:	000a      	movs	r2, r1
 80066e4:	43d2      	mvns	r2, r2
 80066e6:	401a      	ands	r2, r3
 80066e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	019b      	lsls	r3, r3, #6
 80066ee:	22ff      	movs	r2, #255	; 0xff
 80066f0:	401a      	ands	r2, r3
 80066f2:	1dfb      	adds	r3, r7, #7
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	0018      	movs	r0, r3
 80066f8:	2303      	movs	r3, #3
 80066fa:	4003      	ands	r3, r0
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006700:	4809      	ldr	r0, [pc, #36]	; (8006728 <__NVIC_SetPriority+0xd8>)
 8006702:	1dfb      	adds	r3, r7, #7
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	001c      	movs	r4, r3
 8006708:	230f      	movs	r3, #15
 800670a:	4023      	ands	r3, r4
 800670c:	3b08      	subs	r3, #8
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	430a      	orrs	r2, r1
 8006712:	3306      	adds	r3, #6
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	18c3      	adds	r3, r0, r3
 8006718:	3304      	adds	r3, #4
 800671a:	601a      	str	r2, [r3, #0]
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b003      	add	sp, #12
 8006722:	bd90      	pop	{r4, r7, pc}
 8006724:	e000e100 	.word	0xe000e100
 8006728:	e000ed00 	.word	0xe000ed00

0800672c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	210f      	movs	r1, #15
 8006738:	187b      	adds	r3, r7, r1
 800673a:	1c02      	adds	r2, r0, #0
 800673c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	187b      	adds	r3, r7, r1
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	b25b      	sxtb	r3, r3
 8006746:	0011      	movs	r1, r2
 8006748:	0018      	movs	r0, r3
 800674a:	f7ff ff81 	bl	8006650 <__NVIC_SetPriority>
}
 800674e:	46c0      	nop			; (mov r8, r8)
 8006750:	46bd      	mov	sp, r7
 8006752:	b004      	add	sp, #16
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	0002      	movs	r2, r0
 800675e:	1dfb      	adds	r3, r7, #7
 8006760:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006762:	1dfb      	adds	r3, r7, #7
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	b25b      	sxtb	r3, r3
 8006768:	0018      	movs	r0, r3
 800676a:	f7ff ff35 	bl	80065d8 <__NVIC_EnableIRQ>
}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	46bd      	mov	sp, r7
 8006772:	b002      	add	sp, #8
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	0002      	movs	r2, r0
 800677e:	1dfb      	adds	r3, r7, #7
 8006780:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006782:	1dfb      	adds	r3, r7, #7
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b25b      	sxtb	r3, r3
 8006788:	0018      	movs	r0, r3
 800678a:	f7ff ff3f 	bl	800660c <__NVIC_DisableIRQ>
}
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	46bd      	mov	sp, r7
 8006792:	b002      	add	sp, #8
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e061      	b.n	800686e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a32      	ldr	r2, [pc, #200]	; (8006878 <HAL_DMA_Init+0xe0>)
 80067b0:	4694      	mov	ip, r2
 80067b2:	4463      	add	r3, ip
 80067b4:	2114      	movs	r1, #20
 80067b6:	0018      	movs	r0, r3
 80067b8:	f7f9 fcae 	bl	8000118 <__udivsi3>
 80067bc:	0003      	movs	r3, r0
 80067be:	009a      	lsls	r2, r3, #2
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a2d      	ldr	r2, [pc, #180]	; (800687c <HAL_DMA_Init+0xe4>)
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2225      	movs	r2, #37	; 0x25
 80067ce:	2102      	movs	r1, #2
 80067d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a28      	ldr	r2, [pc, #160]	; (8006880 <HAL_DMA_Init+0xe8>)
 80067de:	4013      	ands	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80067ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	01db      	lsls	r3, r3, #7
 8006820:	429a      	cmp	r2, r3
 8006822:	d018      	beq.n	8006856 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006824:	4b17      	ldr	r3, [pc, #92]	; (8006884 <HAL_DMA_Init+0xec>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682c:	211c      	movs	r1, #28
 800682e:	400b      	ands	r3, r1
 8006830:	210f      	movs	r1, #15
 8006832:	4099      	lsls	r1, r3
 8006834:	000b      	movs	r3, r1
 8006836:	43d9      	mvns	r1, r3
 8006838:	4b12      	ldr	r3, [pc, #72]	; (8006884 <HAL_DMA_Init+0xec>)
 800683a:	400a      	ands	r2, r1
 800683c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800683e:	4b11      	ldr	r3, [pc, #68]	; (8006884 <HAL_DMA_Init+0xec>)
 8006840:	6819      	ldr	r1, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	201c      	movs	r0, #28
 800684c:	4003      	ands	r3, r0
 800684e:	409a      	lsls	r2, r3
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <HAL_DMA_Init+0xec>)
 8006852:	430a      	orrs	r2, r1
 8006854:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2225      	movs	r2, #37	; 0x25
 8006860:	2101      	movs	r1, #1
 8006862:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	2100      	movs	r1, #0
 800686a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	0018      	movs	r0, r3
 8006870:	46bd      	mov	sp, r7
 8006872:	b004      	add	sp, #16
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	bffdfff8 	.word	0xbffdfff8
 800687c:	40020000 	.word	0x40020000
 8006880:	ffff800f 	.word	0xffff800f
 8006884:	400200a8 	.word	0x400200a8

08006888 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e04a      	b.n	8006930 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2101      	movs	r1, #1
 80068a6:	438a      	bics	r2, r1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a22      	ldr	r2, [pc, #136]	; (8006938 <HAL_DMA_DeInit+0xb0>)
 80068b0:	4694      	mov	ip, r2
 80068b2:	4463      	add	r3, ip
 80068b4:	2114      	movs	r1, #20
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7f9 fc2e 	bl	8000118 <__udivsi3>
 80068bc:	0003      	movs	r3, r0
 80068be:	009a      	lsls	r2, r3, #2
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a1d      	ldr	r2, [pc, #116]	; (800693c <HAL_DMA_DeInit+0xb4>)
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	221c      	movs	r2, #28
 80068d8:	401a      	ands	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	2101      	movs	r1, #1
 80068e0:	4091      	lsls	r1, r2
 80068e2:	000a      	movs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80068e6:	4b16      	ldr	r3, [pc, #88]	; (8006940 <HAL_DMA_DeInit+0xb8>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	211c      	movs	r1, #28
 80068f0:	400b      	ands	r3, r1
 80068f2:	210f      	movs	r1, #15
 80068f4:	4099      	lsls	r1, r3
 80068f6:	000b      	movs	r3, r1
 80068f8:	43d9      	mvns	r1, r3
 80068fa:	4b11      	ldr	r3, [pc, #68]	; (8006940 <HAL_DMA_DeInit+0xb8>)
 80068fc:	400a      	ands	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2225      	movs	r2, #37	; 0x25
 8006922:	2100      	movs	r1, #0
 8006924:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2224      	movs	r2, #36	; 0x24
 800692a:	2100      	movs	r1, #0
 800692c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	0018      	movs	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	b002      	add	sp, #8
 8006936:	bd80      	pop	{r7, pc}
 8006938:	bffdfff8 	.word	0xbffdfff8
 800693c:	40020000 	.word	0x40020000
 8006940:	400200a8 	.word	0x400200a8

08006944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006952:	2317      	movs	r3, #23
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2224      	movs	r2, #36	; 0x24
 800695e:	5c9b      	ldrb	r3, [r3, r2]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_DMA_Start_IT+0x24>
 8006964:	2302      	movs	r3, #2
 8006966:	e04f      	b.n	8006a08 <HAL_DMA_Start_IT+0xc4>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2224      	movs	r2, #36	; 0x24
 800696c:	2101      	movs	r1, #1
 800696e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2225      	movs	r2, #37	; 0x25
 8006974:	5c9b      	ldrb	r3, [r3, r2]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d13a      	bne.n	80069f2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2225      	movs	r2, #37	; 0x25
 8006980:	2102      	movs	r1, #2
 8006982:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2101      	movs	r1, #1
 8006996:	438a      	bics	r2, r1
 8006998:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f96a 	bl	8006c7a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	210e      	movs	r1, #14
 80069ba:	430a      	orrs	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e00f      	b.n	80069e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2104      	movs	r1, #4
 80069cc:	438a      	bics	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	210a      	movs	r1, #10
 80069dc:	430a      	orrs	r2, r1
 80069de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2101      	movs	r1, #1
 80069ec:	430a      	orrs	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e007      	b.n	8006a02 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2224      	movs	r2, #36	; 0x24
 80069f6:	2100      	movs	r1, #0
 80069f8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80069fa:	2317      	movs	r3, #23
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	2202      	movs	r2, #2
 8006a00:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006a02:	2317      	movs	r3, #23
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	781b      	ldrb	r3, [r3, #0]
}
 8006a08:	0018      	movs	r0, r3
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b006      	add	sp, #24
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a18:	230f      	movs	r3, #15
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2225      	movs	r2, #37	; 0x25
 8006a24:	5c9b      	ldrb	r3, [r3, r2]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d008      	beq.n	8006a3e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2224      	movs	r2, #36	; 0x24
 8006a36:	2100      	movs	r1, #0
 8006a38:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e024      	b.n	8006a88 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	210e      	movs	r1, #14
 8006a4a:	438a      	bics	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2101      	movs	r1, #1
 8006a5a:	438a      	bics	r2, r1
 8006a5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	221c      	movs	r2, #28
 8006a64:	401a      	ands	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	4091      	lsls	r1, r2
 8006a6e:	000a      	movs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2225      	movs	r2, #37	; 0x25
 8006a76:	2101      	movs	r1, #1
 8006a78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2224      	movs	r2, #36	; 0x24
 8006a7e:	2100      	movs	r1, #0
 8006a80:	5499      	strb	r1, [r3, r2]

    return status;
 8006a82:	230f      	movs	r3, #15
 8006a84:	18fb      	adds	r3, r7, r3
 8006a86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a88:	0018      	movs	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b004      	add	sp, #16
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a98:	210f      	movs	r1, #15
 8006a9a:	187b      	adds	r3, r7, r1
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2225      	movs	r2, #37	; 0x25
 8006aa4:	5c9b      	ldrb	r3, [r3, r2]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d006      	beq.n	8006aba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006ab2:	187b      	adds	r3, r7, r1
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	e02a      	b.n	8006b10 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	210e      	movs	r1, #14
 8006ac6:	438a      	bics	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	438a      	bics	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ade:	221c      	movs	r2, #28
 8006ae0:	401a      	ands	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4091      	lsls	r1, r2
 8006aea:	000a      	movs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2225      	movs	r2, #37	; 0x25
 8006af2:	2101      	movs	r1, #1
 8006af4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2224      	movs	r2, #36	; 0x24
 8006afa:	2100      	movs	r1, #0
 8006afc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	0010      	movs	r0, r2
 8006b0e:	4798      	blx	r3
    }
  }
  return status;
 8006b10:	230f      	movs	r3, #15
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	781b      	ldrb	r3, [r3, #0]
}
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b004      	add	sp, #16
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	221c      	movs	r2, #28
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2204      	movs	r2, #4
 8006b40:	409a      	lsls	r2, r3
 8006b42:	0013      	movs	r3, r2
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4013      	ands	r3, r2
 8006b48:	d026      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x7a>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d022      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d107      	bne.n	8006b6e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2104      	movs	r1, #4
 8006b6a:	438a      	bics	r2, r1
 8006b6c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	221c      	movs	r2, #28
 8006b74:	401a      	ands	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2104      	movs	r1, #4
 8006b7c:	4091      	lsls	r1, r2
 8006b7e:	000a      	movs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d100      	bne.n	8006b8c <HAL_DMA_IRQHandler+0x6e>
 8006b8a:	e071      	b.n	8006c70 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	0010      	movs	r0, r2
 8006b94:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8006b96:	e06b      	b.n	8006c70 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	221c      	movs	r2, #28
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	0013      	movs	r3, r2
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	d02d      	beq.n	8006c08 <HAL_DMA_IRQHandler+0xea>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d029      	beq.n	8006c08 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d10b      	bne.n	8006bd8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	210a      	movs	r1, #10
 8006bcc:	438a      	bics	r2, r1
 8006bce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2225      	movs	r2, #37	; 0x25
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bdc:	221c      	movs	r2, #28
 8006bde:	401a      	ands	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	2102      	movs	r1, #2
 8006be6:	4091      	lsls	r1, r2
 8006be8:	000a      	movs	r2, r1
 8006bea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2224      	movs	r2, #36	; 0x24
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d039      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	0010      	movs	r0, r2
 8006c04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006c06:	e033      	b.n	8006c70 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0c:	221c      	movs	r2, #28
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2208      	movs	r2, #8
 8006c12:	409a      	lsls	r2, r3
 8006c14:	0013      	movs	r3, r2
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d02a      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x154>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2208      	movs	r2, #8
 8006c20:	4013      	ands	r3, r2
 8006c22:	d026      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	210e      	movs	r1, #14
 8006c30:	438a      	bics	r2, r1
 8006c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	221c      	movs	r2, #28
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	2101      	movs	r1, #1
 8006c42:	4091      	lsls	r1, r2
 8006c44:	000a      	movs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2225      	movs	r2, #37	; 0x25
 8006c52:	2101      	movs	r1, #1
 8006c54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2224      	movs	r2, #36	; 0x24
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	0010      	movs	r0, r2
 8006c6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	46c0      	nop			; (mov r8, r8)
}
 8006c74:	46bd      	mov	sp, r7
 8006c76:	b004      	add	sp, #16
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8c:	221c      	movs	r2, #28
 8006c8e:	401a      	ands	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	2101      	movs	r1, #1
 8006c96:	4091      	lsls	r1, r2
 8006c98:	000a      	movs	r2, r1
 8006c9a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d108      	bne.n	8006cbe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006cbc:	e007      	b.n	8006cce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	60da      	str	r2, [r3, #12]
}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b004      	add	sp, #16
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	200b      	movs	r0, #11
 8006ce2:	183b      	adds	r3, r7, r0
 8006ce4:	1c0a      	adds	r2, r1, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce8:	2317      	movs	r3, #23
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8006cf0:	183b      	adds	r3, r7, r0
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	605a      	str	r2, [r3, #4]
      break;
 8006cfe:	e004      	b.n	8006d0a <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 8006d00:	2317      	movs	r3, #23
 8006d02:	18fb      	adds	r3, r7, r3
 8006d04:	2201      	movs	r2, #1
 8006d06:	701a      	strb	r2, [r3, #0]
      break;
 8006d08:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8006d0a:	2317      	movs	r3, #23
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	781b      	ldrb	r3, [r3, #0]
}
 8006d10:	0018      	movs	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b006      	add	sp, #24
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e003      	b.n	8006d34 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006d32:	2300      	movs	r3, #0
  }
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b002      	add	sp, #8
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	221f      	movs	r2, #31
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	0013      	movs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <HAL_EXTI_IRQHandler+0x44>)
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_EXTI_IRQHandler+0x44>)
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4798      	blx	r3
    }
  }
}
 8006d78:	46c0      	nop			; (mov r8, r8)
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b004      	add	sp, #16
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40010400 	.word	0x40010400

08006d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006d9a:	e155      	b.n	8007048 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2101      	movs	r1, #1
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4091      	lsls	r1, r2
 8006da6:	000a      	movs	r2, r1
 8006da8:	4013      	ands	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d100      	bne.n	8006db4 <HAL_GPIO_Init+0x30>
 8006db2:	e146      	b.n	8007042 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d00b      	beq.n	8006dd4 <HAL_GPIO_Init+0x50>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d007      	beq.n	8006dd4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dc8:	2b11      	cmp	r3, #17
 8006dca:	d003      	beq.n	8006dd4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b12      	cmp	r3, #18
 8006dd2:	d130      	bne.n	8006e36 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	2203      	movs	r2, #3
 8006de0:	409a      	lsls	r2, r3
 8006de2:	0013      	movs	r3, r2
 8006de4:	43da      	mvns	r2, r3
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	4013      	ands	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	409a      	lsls	r2, r3
 8006df6:	0013      	movs	r3, r2
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	0013      	movs	r3, r2
 8006e12:	43da      	mvns	r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	4013      	ands	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	091b      	lsrs	r3, r3, #4
 8006e20:	2201      	movs	r2, #1
 8006e22:	401a      	ands	r2, r3
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	409a      	lsls	r2, r3
 8006e28:	0013      	movs	r3, r2
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	2203      	movs	r2, #3
 8006e42:	409a      	lsls	r2, r3
 8006e44:	0013      	movs	r3, r2
 8006e46:	43da      	mvns	r2, r3
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	409a      	lsls	r2, r3
 8006e58:	0013      	movs	r3, r2
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d003      	beq.n	8006e76 <HAL_GPIO_Init+0xf2>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2b12      	cmp	r3, #18
 8006e74:	d123      	bne.n	8006ebe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	08da      	lsrs	r2, r3, #3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3208      	adds	r2, #8
 8006e7e:	0092      	lsls	r2, r2, #2
 8006e80:	58d3      	ldr	r3, [r2, r3]
 8006e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2207      	movs	r2, #7
 8006e88:	4013      	ands	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	220f      	movs	r2, #15
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	0013      	movs	r3, r2
 8006e92:	43da      	mvns	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4013      	ands	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	691a      	ldr	r2, [r3, #16]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2107      	movs	r1, #7
 8006ea2:	400b      	ands	r3, r1
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	409a      	lsls	r2, r3
 8006ea8:	0013      	movs	r3, r2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	08da      	lsrs	r2, r3, #3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3208      	adds	r2, #8
 8006eb8:	0092      	lsls	r2, r2, #2
 8006eba:	6939      	ldr	r1, [r7, #16]
 8006ebc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	2203      	movs	r2, #3
 8006eca:	409a      	lsls	r2, r3
 8006ecc:	0013      	movs	r3, r2
 8006ece:	43da      	mvns	r2, r3
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2203      	movs	r2, #3
 8006edc:	401a      	ands	r2, r3
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	409a      	lsls	r2, r3
 8006ee4:	0013      	movs	r3, r2
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	2380      	movs	r3, #128	; 0x80
 8006ef8:	055b      	lsls	r3, r3, #21
 8006efa:	4013      	ands	r3, r2
 8006efc:	d100      	bne.n	8006f00 <HAL_GPIO_Init+0x17c>
 8006efe:	e0a0      	b.n	8007042 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f00:	4b57      	ldr	r3, [pc, #348]	; (8007060 <HAL_GPIO_Init+0x2dc>)
 8006f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f04:	4b56      	ldr	r3, [pc, #344]	; (8007060 <HAL_GPIO_Init+0x2dc>)
 8006f06:	2101      	movs	r1, #1
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f0c:	4a55      	ldr	r2, [pc, #340]	; (8007064 <HAL_GPIO_Init+0x2e0>)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	089b      	lsrs	r3, r3, #2
 8006f12:	3302      	adds	r3, #2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	589b      	ldr	r3, [r3, r2]
 8006f18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	4013      	ands	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	220f      	movs	r2, #15
 8006f24:	409a      	lsls	r2, r3
 8006f26:	0013      	movs	r3, r2
 8006f28:	43da      	mvns	r2, r3
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	23a0      	movs	r3, #160	; 0xa0
 8006f34:	05db      	lsls	r3, r3, #23
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d01f      	beq.n	8006f7a <HAL_GPIO_Init+0x1f6>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a4a      	ldr	r2, [pc, #296]	; (8007068 <HAL_GPIO_Init+0x2e4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d019      	beq.n	8006f76 <HAL_GPIO_Init+0x1f2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a49      	ldr	r2, [pc, #292]	; (800706c <HAL_GPIO_Init+0x2e8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_GPIO_Init+0x1ee>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a48      	ldr	r2, [pc, #288]	; (8007070 <HAL_GPIO_Init+0x2ec>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00d      	beq.n	8006f6e <HAL_GPIO_Init+0x1ea>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a47      	ldr	r2, [pc, #284]	; (8007074 <HAL_GPIO_Init+0x2f0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d007      	beq.n	8006f6a <HAL_GPIO_Init+0x1e6>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a46      	ldr	r2, [pc, #280]	; (8007078 <HAL_GPIO_Init+0x2f4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d101      	bne.n	8006f66 <HAL_GPIO_Init+0x1e2>
 8006f62:	2305      	movs	r3, #5
 8006f64:	e00a      	b.n	8006f7c <HAL_GPIO_Init+0x1f8>
 8006f66:	2306      	movs	r3, #6
 8006f68:	e008      	b.n	8006f7c <HAL_GPIO_Init+0x1f8>
 8006f6a:	2304      	movs	r3, #4
 8006f6c:	e006      	b.n	8006f7c <HAL_GPIO_Init+0x1f8>
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e004      	b.n	8006f7c <HAL_GPIO_Init+0x1f8>
 8006f72:	2302      	movs	r3, #2
 8006f74:	e002      	b.n	8006f7c <HAL_GPIO_Init+0x1f8>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <HAL_GPIO_Init+0x1f8>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	2103      	movs	r1, #3
 8006f80:	400a      	ands	r2, r1
 8006f82:	0092      	lsls	r2, r2, #2
 8006f84:	4093      	lsls	r3, r2
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f8c:	4935      	ldr	r1, [pc, #212]	; (8007064 <HAL_GPIO_Init+0x2e0>)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	089b      	lsrs	r3, r3, #2
 8006f92:	3302      	adds	r3, #2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f9a:	4b38      	ldr	r3, [pc, #224]	; (800707c <HAL_GPIO_Init+0x2f8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	43da      	mvns	r2, r3
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	2380      	movs	r3, #128	; 0x80
 8006fb0:	025b      	lsls	r3, r3, #9
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	d003      	beq.n	8006fbe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006fbe:	4b2f      	ldr	r3, [pc, #188]	; (800707c <HAL_GPIO_Init+0x2f8>)
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006fc4:	4b2d      	ldr	r3, [pc, #180]	; (800707c <HAL_GPIO_Init+0x2f8>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	43da      	mvns	r2, r3
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	2380      	movs	r3, #128	; 0x80
 8006fda:	029b      	lsls	r3, r3, #10
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006fe8:	4b24      	ldr	r3, [pc, #144]	; (800707c <HAL_GPIO_Init+0x2f8>)
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006fee:	4b23      	ldr	r3, [pc, #140]	; (800707c <HAL_GPIO_Init+0x2f8>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	43da      	mvns	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	035b      	lsls	r3, r3, #13
 8007006:	4013      	ands	r3, r2
 8007008:	d003      	beq.n	8007012 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <HAL_GPIO_Init+0x2f8>)
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007018:	4b18      	ldr	r3, [pc, #96]	; (800707c <HAL_GPIO_Init+0x2f8>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	43da      	mvns	r2, r3
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4013      	ands	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	2380      	movs	r3, #128	; 0x80
 800702e:	039b      	lsls	r3, r3, #14
 8007030:	4013      	ands	r3, r2
 8007032:	d003      	beq.n	800703c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <HAL_GPIO_Init+0x2f8>)
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	3301      	adds	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	40da      	lsrs	r2, r3
 8007050:	1e13      	subs	r3, r2, #0
 8007052:	d000      	beq.n	8007056 <HAL_GPIO_Init+0x2d2>
 8007054:	e6a2      	b.n	8006d9c <HAL_GPIO_Init+0x18>
  }
}
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	46c0      	nop			; (mov r8, r8)
 800705a:	46bd      	mov	sp, r7
 800705c:	b006      	add	sp, #24
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40021000 	.word	0x40021000
 8007064:	40010000 	.word	0x40010000
 8007068:	50000400 	.word	0x50000400
 800706c:	50000800 	.word	0x50000800
 8007070:	50000c00 	.word	0x50000c00
 8007074:	50001000 	.word	0x50001000
 8007078:	50001c00 	.word	0x50001c00
 800707c:	40010400 	.word	0x40010400

08007080 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8007096:	e0bc      	b.n	8007212 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007098:	2201      	movs	r2, #1
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	409a      	lsls	r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	4013      	ands	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d100      	bne.n	80070ac <HAL_GPIO_DeInit+0x2c>
 80070aa:	e0af      	b.n	800720c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80070ac:	4a5e      	ldr	r2, [pc, #376]	; (8007228 <HAL_GPIO_DeInit+0x1a8>)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	089b      	lsrs	r3, r3, #2
 80070b2:	3302      	adds	r3, #2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	589b      	ldr	r3, [r3, r2]
 80070b8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2203      	movs	r2, #3
 80070be:	4013      	ands	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	220f      	movs	r2, #15
 80070c4:	409a      	lsls	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4013      	ands	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	23a0      	movs	r3, #160	; 0xa0
 80070d0:	05db      	lsls	r3, r3, #23
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d01f      	beq.n	8007116 <HAL_GPIO_DeInit+0x96>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a54      	ldr	r2, [pc, #336]	; (800722c <HAL_GPIO_DeInit+0x1ac>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d019      	beq.n	8007112 <HAL_GPIO_DeInit+0x92>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a53      	ldr	r2, [pc, #332]	; (8007230 <HAL_GPIO_DeInit+0x1b0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <HAL_GPIO_DeInit+0x8e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a52      	ldr	r2, [pc, #328]	; (8007234 <HAL_GPIO_DeInit+0x1b4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00d      	beq.n	800710a <HAL_GPIO_DeInit+0x8a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a51      	ldr	r2, [pc, #324]	; (8007238 <HAL_GPIO_DeInit+0x1b8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d007      	beq.n	8007106 <HAL_GPIO_DeInit+0x86>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a50      	ldr	r2, [pc, #320]	; (800723c <HAL_GPIO_DeInit+0x1bc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d101      	bne.n	8007102 <HAL_GPIO_DeInit+0x82>
 80070fe:	2305      	movs	r3, #5
 8007100:	e00a      	b.n	8007118 <HAL_GPIO_DeInit+0x98>
 8007102:	2306      	movs	r3, #6
 8007104:	e008      	b.n	8007118 <HAL_GPIO_DeInit+0x98>
 8007106:	2304      	movs	r3, #4
 8007108:	e006      	b.n	8007118 <HAL_GPIO_DeInit+0x98>
 800710a:	2303      	movs	r3, #3
 800710c:	e004      	b.n	8007118 <HAL_GPIO_DeInit+0x98>
 800710e:	2302      	movs	r3, #2
 8007110:	e002      	b.n	8007118 <HAL_GPIO_DeInit+0x98>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <HAL_GPIO_DeInit+0x98>
 8007116:	2300      	movs	r3, #0
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	2103      	movs	r1, #3
 800711c:	400a      	ands	r2, r1
 800711e:	0092      	lsls	r2, r2, #2
 8007120:	4093      	lsls	r3, r2
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	429a      	cmp	r2, r3
 8007126:	d132      	bne.n	800718e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007128:	4b45      	ldr	r3, [pc, #276]	; (8007240 <HAL_GPIO_DeInit+0x1c0>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	43d9      	mvns	r1, r3
 8007130:	4b43      	ldr	r3, [pc, #268]	; (8007240 <HAL_GPIO_DeInit+0x1c0>)
 8007132:	400a      	ands	r2, r1
 8007134:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007136:	4b42      	ldr	r3, [pc, #264]	; (8007240 <HAL_GPIO_DeInit+0x1c0>)
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	43d9      	mvns	r1, r3
 800713e:	4b40      	ldr	r3, [pc, #256]	; (8007240 <HAL_GPIO_DeInit+0x1c0>)
 8007140:	400a      	ands	r2, r1
 8007142:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007144:	4b3e      	ldr	r3, [pc, #248]	; (8007240 <HAL_GPIO_DeInit+0x1c0>)
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	43d9      	mvns	r1, r3
 800714c:	4b3c      	ldr	r3, [pc, #240]	; (8007240 <HAL_GPIO_DeInit+0x1c0>)
 800714e:	400a      	ands	r2, r1
 8007150:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007152:	4b3b      	ldr	r3, [pc, #236]	; (8007240 <HAL_GPIO_DeInit+0x1c0>)
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	43d9      	mvns	r1, r3
 800715a:	4b39      	ldr	r3, [pc, #228]	; (8007240 <HAL_GPIO_DeInit+0x1c0>)
 800715c:	400a      	ands	r2, r1
 800715e:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2203      	movs	r2, #3
 8007164:	4013      	ands	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	220f      	movs	r2, #15
 800716a:	409a      	lsls	r2, r3
 800716c:	0013      	movs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007170:	4a2d      	ldr	r2, [pc, #180]	; (8007228 <HAL_GPIO_DeInit+0x1a8>)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	089b      	lsrs	r3, r3, #2
 8007176:	3302      	adds	r3, #2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	589a      	ldr	r2, [r3, r2]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	43d9      	mvns	r1, r3
 8007180:	4829      	ldr	r0, [pc, #164]	; (8007228 <HAL_GPIO_DeInit+0x1a8>)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	089b      	lsrs	r3, r3, #2
 8007186:	400a      	ands	r2, r1
 8007188:	3302      	adds	r3, #2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	2103      	movs	r1, #3
 8007198:	4099      	lsls	r1, r3
 800719a:	000b      	movs	r3, r1
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	08da      	lsrs	r2, r3, #3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3208      	adds	r2, #8
 80071aa:	0092      	lsls	r2, r2, #2
 80071ac:	58d3      	ldr	r3, [r2, r3]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	2107      	movs	r1, #7
 80071b2:	400a      	ands	r2, r1
 80071b4:	0092      	lsls	r2, r2, #2
 80071b6:	210f      	movs	r1, #15
 80071b8:	4091      	lsls	r1, r2
 80071ba:	000a      	movs	r2, r1
 80071bc:	43d1      	mvns	r1, r2
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	08d2      	lsrs	r2, r2, #3
 80071c2:	4019      	ands	r1, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3208      	adds	r2, #8
 80071c8:	0092      	lsls	r2, r2, #2
 80071ca:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	0052      	lsls	r2, r2, #1
 80071d4:	2103      	movs	r1, #3
 80071d6:	4091      	lsls	r1, r2
 80071d8:	000a      	movs	r2, r1
 80071da:	43d2      	mvns	r2, r2
 80071dc:	401a      	ands	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2101      	movs	r1, #1
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4091      	lsls	r1, r2
 80071ec:	000a      	movs	r2, r1
 80071ee:	43d2      	mvns	r2, r2
 80071f0:	401a      	ands	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	0052      	lsls	r2, r2, #1
 80071fe:	2103      	movs	r1, #3
 8007200:	4091      	lsls	r1, r2
 8007202:	000a      	movs	r2, r1
 8007204:	43d2      	mvns	r2, r2
 8007206:	401a      	ands	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	3301      	adds	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	40da      	lsrs	r2, r3
 8007218:	1e13      	subs	r3, r2, #0
 800721a:	d000      	beq.n	800721e <HAL_GPIO_DeInit+0x19e>
 800721c:	e73c      	b.n	8007098 <HAL_GPIO_DeInit+0x18>
  }
}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	46c0      	nop			; (mov r8, r8)
 8007222:	46bd      	mov	sp, r7
 8007224:	b006      	add	sp, #24
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40010000 	.word	0x40010000
 800722c:	50000400 	.word	0x50000400
 8007230:	50000800 	.word	0x50000800
 8007234:	50000c00 	.word	0x50000c00
 8007238:	50001000 	.word	0x50001000
 800723c:	50001c00 	.word	0x50001c00
 8007240:	40010400 	.word	0x40010400

08007244 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	000a      	movs	r2, r1
 800724e:	1cbb      	adds	r3, r7, #2
 8007250:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	1cba      	adds	r2, r7, #2
 8007258:	8812      	ldrh	r2, [r2, #0]
 800725a:	4013      	ands	r3, r2
 800725c:	d004      	beq.n	8007268 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800725e:	230f      	movs	r3, #15
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	2201      	movs	r2, #1
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e003      	b.n	8007270 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007268:	230f      	movs	r3, #15
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	2200      	movs	r2, #0
 800726e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007270:	230f      	movs	r3, #15
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	781b      	ldrb	r3, [r3, #0]
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b004      	add	sp, #16
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	0008      	movs	r0, r1
 8007288:	0011      	movs	r1, r2
 800728a:	1cbb      	adds	r3, r7, #2
 800728c:	1c02      	adds	r2, r0, #0
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	1c7b      	adds	r3, r7, #1
 8007292:	1c0a      	adds	r2, r1, #0
 8007294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007296:	1c7b      	adds	r3, r7, #1
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800729e:	1cbb      	adds	r3, r7, #2
 80072a0:	881a      	ldrh	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80072a6:	e003      	b.n	80072b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80072a8:	1cbb      	adds	r3, r7, #2
 80072aa:	881a      	ldrh	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072b0:	46c0      	nop			; (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b002      	add	sp, #8
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	000a      	movs	r2, r1
 80072c2:	1cbb      	adds	r3, r7, #2
 80072c4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072cc:	1cbb      	adds	r3, r7, #2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4013      	ands	r3, r2
 80072d4:	041a      	lsls	r2, r3, #16
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	43db      	mvns	r3, r3
 80072da:	1cb9      	adds	r1, r7, #2
 80072dc:	8809      	ldrh	r1, [r1, #0]
 80072de:	400b      	ands	r3, r1
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	619a      	str	r2, [r3, #24]
}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b004      	add	sp, #16
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e082      	b.n	8007408 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2241      	movs	r2, #65	; 0x41
 8007306:	5c9b      	ldrb	r3, [r3, r2]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d107      	bne.n	800731e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2240      	movs	r2, #64	; 0x40
 8007312:	2100      	movs	r1, #0
 8007314:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	0018      	movs	r0, r3
 800731a:	f000 f87f 	bl	800741c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2241      	movs	r2, #65	; 0x41
 8007322:	2124      	movs	r1, #36	; 0x24
 8007324:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2101      	movs	r1, #1
 8007332:	438a      	bics	r2, r1
 8007334:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4934      	ldr	r1, [pc, #208]	; (8007410 <HAL_I2C_Init+0x120>)
 8007340:	400a      	ands	r2, r1
 8007342:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4931      	ldr	r1, [pc, #196]	; (8007414 <HAL_I2C_Init+0x124>)
 8007350:	400a      	ands	r2, r1
 8007352:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d108      	bne.n	800736e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2180      	movs	r1, #128	; 0x80
 8007366:	0209      	lsls	r1, r1, #8
 8007368:	430a      	orrs	r2, r1
 800736a:	609a      	str	r2, [r3, #8]
 800736c:	e007      	b.n	800737e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2184      	movs	r1, #132	; 0x84
 8007378:	0209      	lsls	r1, r1, #8
 800737a:	430a      	orrs	r2, r1
 800737c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d104      	bne.n	8007390 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2280      	movs	r2, #128	; 0x80
 800738c:	0112      	lsls	r2, r2, #4
 800738e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	491f      	ldr	r1, [pc, #124]	; (8007418 <HAL_I2C_Init+0x128>)
 800739c:	430a      	orrs	r2, r1
 800739e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	491a      	ldr	r1, [pc, #104]	; (8007414 <HAL_I2C_Init+0x124>)
 80073ac:	400a      	ands	r2, r1
 80073ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	0011      	movs	r1, r2
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	021a      	lsls	r2, r3, #8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69d9      	ldr	r1, [r3, #28]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1a      	ldr	r2, [r3, #32]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2101      	movs	r1, #1
 80073e6:	430a      	orrs	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2241      	movs	r2, #65	; 0x41
 80073f4:	2120      	movs	r1, #32
 80073f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2242      	movs	r2, #66	; 0x42
 8007402:	2100      	movs	r1, #0
 8007404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	0018      	movs	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	b002      	add	sp, #8
 800740e:	bd80      	pop	{r7, pc}
 8007410:	f0ffffff 	.word	0xf0ffffff
 8007414:	ffff7fff 	.word	0xffff7fff
 8007418:	02008000 	.word	0x02008000

0800741c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007424:	46c0      	nop			; (mov r8, r8)
 8007426:	46bd      	mov	sp, r7
 8007428:	b002      	add	sp, #8
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742c:	b590      	push	{r4, r7, lr}
 800742e:	b089      	sub	sp, #36	; 0x24
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	000c      	movs	r4, r1
 8007436:	0010      	movs	r0, r2
 8007438:	0019      	movs	r1, r3
 800743a:	230a      	movs	r3, #10
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	1c22      	adds	r2, r4, #0
 8007440:	801a      	strh	r2, [r3, #0]
 8007442:	2308      	movs	r3, #8
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	1c02      	adds	r2, r0, #0
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	1dbb      	adds	r3, r7, #6
 800744c:	1c0a      	adds	r2, r1, #0
 800744e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2241      	movs	r2, #65	; 0x41
 8007454:	5c9b      	ldrb	r3, [r3, r2]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b20      	cmp	r3, #32
 800745a:	d000      	beq.n	800745e <HAL_I2C_Mem_Write+0x32>
 800745c:	e10c      	b.n	8007678 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <HAL_I2C_Mem_Write+0x42>
 8007464:	232c      	movs	r3, #44	; 0x2c
 8007466:	18fb      	adds	r3, r7, r3
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d105      	bne.n	800747a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2280      	movs	r2, #128	; 0x80
 8007472:	0092      	lsls	r2, r2, #2
 8007474:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0ff      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2240      	movs	r2, #64	; 0x40
 800747e:	5c9b      	ldrb	r3, [r3, r2]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_I2C_Mem_Write+0x5c>
 8007484:	2302      	movs	r3, #2
 8007486:	e0f8      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2240      	movs	r2, #64	; 0x40
 800748c:	2101      	movs	r1, #1
 800748e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007490:	f7fd f8f1 	bl	8004676 <HAL_GetTick>
 8007494:	0003      	movs	r3, r0
 8007496:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	0219      	lsls	r1, r3, #8
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	2319      	movs	r3, #25
 80074a4:	2201      	movs	r2, #1
 80074a6:	f000 fb17 	bl	8007ad8 <I2C_WaitOnFlagUntilTimeout>
 80074aa:	1e03      	subs	r3, r0, #0
 80074ac:	d001      	beq.n	80074b2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e0e3      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2241      	movs	r2, #65	; 0x41
 80074b6:	2121      	movs	r1, #33	; 0x21
 80074b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2242      	movs	r2, #66	; 0x42
 80074be:	2140      	movs	r1, #64	; 0x40
 80074c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	222c      	movs	r2, #44	; 0x2c
 80074d2:	18ba      	adds	r2, r7, r2
 80074d4:	8812      	ldrh	r2, [r2, #0]
 80074d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074de:	1dbb      	adds	r3, r7, #6
 80074e0:	881c      	ldrh	r4, [r3, #0]
 80074e2:	2308      	movs	r3, #8
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	881a      	ldrh	r2, [r3, #0]
 80074e8:	230a      	movs	r3, #10
 80074ea:	18fb      	adds	r3, r7, r3
 80074ec:	8819      	ldrh	r1, [r3, #0]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	0023      	movs	r3, r4
 80074fa:	f000 fa05 	bl	8007908 <I2C_RequestMemoryWrite>
 80074fe:	1e03      	subs	r3, r0, #0
 8007500:	d005      	beq.n	800750e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2240      	movs	r2, #64	; 0x40
 8007506:	2100      	movs	r1, #0
 8007508:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e0b5      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007512:	b29b      	uxth	r3, r3
 8007514:	2bff      	cmp	r3, #255	; 0xff
 8007516:	d911      	bls.n	800753c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	22ff      	movs	r2, #255	; 0xff
 800751c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007522:	b2da      	uxtb	r2, r3
 8007524:	2380      	movs	r3, #128	; 0x80
 8007526:	045c      	lsls	r4, r3, #17
 8007528:	230a      	movs	r3, #10
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	8819      	ldrh	r1, [r3, #0]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	2300      	movs	r3, #0
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	0023      	movs	r3, r4
 8007536:	f000 fbef 	bl	8007d18 <I2C_TransferConfig>
 800753a:	e012      	b.n	8007562 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754a:	b2da      	uxtb	r2, r3
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	049c      	lsls	r4, r3, #18
 8007550:	230a      	movs	r3, #10
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	8819      	ldrh	r1, [r3, #0]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	2300      	movs	r3, #0
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	0023      	movs	r3, r4
 800755e:	f000 fbdb 	bl	8007d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	0018      	movs	r0, r3
 800756a:	f000 faf4 	bl	8007b56 <I2C_WaitOnTXISFlagUntilTimeout>
 800756e:	1e03      	subs	r3, r0, #0
 8007570:	d001      	beq.n	8007576 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e081      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	781a      	ldrb	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d03a      	beq.n	8007626 <HAL_I2C_Mem_Write+0x1fa>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d136      	bne.n	8007626 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	0013      	movs	r3, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	f000 fa87 	bl	8007ad8 <I2C_WaitOnFlagUntilTimeout>
 80075ca:	1e03      	subs	r3, r0, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e053      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2bff      	cmp	r3, #255	; 0xff
 80075da:	d911      	bls.n	8007600 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	22ff      	movs	r2, #255	; 0xff
 80075e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	045c      	lsls	r4, r3, #17
 80075ec:	230a      	movs	r3, #10
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	8819      	ldrh	r1, [r3, #0]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	2300      	movs	r3, #0
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	0023      	movs	r3, r4
 80075fa:	f000 fb8d 	bl	8007d18 <I2C_TransferConfig>
 80075fe:	e012      	b.n	8007626 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760e:	b2da      	uxtb	r2, r3
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	049c      	lsls	r4, r3, #18
 8007614:	230a      	movs	r3, #10
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	8819      	ldrh	r1, [r3, #0]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	2300      	movs	r3, #0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	0023      	movs	r3, r4
 8007622:	f000 fb79 	bl	8007d18 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d198      	bne.n	8007562 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	0018      	movs	r0, r3
 8007638:	f000 facc 	bl	8007bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800763c:	1e03      	subs	r3, r0, #0
 800763e:	d001      	beq.n	8007644 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e01a      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2220      	movs	r2, #32
 800764a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	490b      	ldr	r1, [pc, #44]	; (8007684 <HAL_I2C_Mem_Write+0x258>)
 8007658:	400a      	ands	r2, r1
 800765a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2241      	movs	r2, #65	; 0x41
 8007660:	2120      	movs	r1, #32
 8007662:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2242      	movs	r2, #66	; 0x42
 8007668:	2100      	movs	r1, #0
 800766a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2240      	movs	r2, #64	; 0x40
 8007670:	2100      	movs	r1, #0
 8007672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e000      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
  }
}
 800767a:	0018      	movs	r0, r3
 800767c:	46bd      	mov	sp, r7
 800767e:	b007      	add	sp, #28
 8007680:	bd90      	pop	{r4, r7, pc}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	fe00e800 	.word	0xfe00e800

08007688 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b089      	sub	sp, #36	; 0x24
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	000c      	movs	r4, r1
 8007692:	0010      	movs	r0, r2
 8007694:	0019      	movs	r1, r3
 8007696:	230a      	movs	r3, #10
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	1c22      	adds	r2, r4, #0
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	2308      	movs	r3, #8
 80076a0:	18fb      	adds	r3, r7, r3
 80076a2:	1c02      	adds	r2, r0, #0
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	1dbb      	adds	r3, r7, #6
 80076a8:	1c0a      	adds	r2, r1, #0
 80076aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2241      	movs	r2, #65	; 0x41
 80076b0:	5c9b      	ldrb	r3, [r3, r2]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d000      	beq.n	80076ba <HAL_I2C_Mem_Read+0x32>
 80076b8:	e110      	b.n	80078dc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d004      	beq.n	80076ca <HAL_I2C_Mem_Read+0x42>
 80076c0:	232c      	movs	r3, #44	; 0x2c
 80076c2:	18fb      	adds	r3, r7, r3
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d105      	bne.n	80076d6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2280      	movs	r2, #128	; 0x80
 80076ce:	0092      	lsls	r2, r2, #2
 80076d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e103      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2240      	movs	r2, #64	; 0x40
 80076da:	5c9b      	ldrb	r3, [r3, r2]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_I2C_Mem_Read+0x5c>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e0fc      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2240      	movs	r2, #64	; 0x40
 80076e8:	2101      	movs	r1, #1
 80076ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076ec:	f7fc ffc3 	bl	8004676 <HAL_GetTick>
 80076f0:	0003      	movs	r3, r0
 80076f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076f4:	2380      	movs	r3, #128	; 0x80
 80076f6:	0219      	lsls	r1, r3, #8
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	2319      	movs	r3, #25
 8007700:	2201      	movs	r2, #1
 8007702:	f000 f9e9 	bl	8007ad8 <I2C_WaitOnFlagUntilTimeout>
 8007706:	1e03      	subs	r3, r0, #0
 8007708:	d001      	beq.n	800770e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e0e7      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2241      	movs	r2, #65	; 0x41
 8007712:	2122      	movs	r1, #34	; 0x22
 8007714:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2242      	movs	r2, #66	; 0x42
 800771a:	2140      	movs	r1, #64	; 0x40
 800771c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	222c      	movs	r2, #44	; 0x2c
 800772e:	18ba      	adds	r2, r7, r2
 8007730:	8812      	ldrh	r2, [r2, #0]
 8007732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800773a:	1dbb      	adds	r3, r7, #6
 800773c:	881c      	ldrh	r4, [r3, #0]
 800773e:	2308      	movs	r3, #8
 8007740:	18fb      	adds	r3, r7, r3
 8007742:	881a      	ldrh	r2, [r3, #0]
 8007744:	230a      	movs	r3, #10
 8007746:	18fb      	adds	r3, r7, r3
 8007748:	8819      	ldrh	r1, [r3, #0]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	0023      	movs	r3, r4
 8007756:	f000 f93b 	bl	80079d0 <I2C_RequestMemoryRead>
 800775a:	1e03      	subs	r3, r0, #0
 800775c:	d005      	beq.n	800776a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2240      	movs	r2, #64	; 0x40
 8007762:	2100      	movs	r1, #0
 8007764:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0b9      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	2bff      	cmp	r3, #255	; 0xff
 8007772:	d911      	bls.n	8007798 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	22ff      	movs	r2, #255	; 0xff
 8007778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777e:	b2da      	uxtb	r2, r3
 8007780:	2380      	movs	r3, #128	; 0x80
 8007782:	045c      	lsls	r4, r3, #17
 8007784:	230a      	movs	r3, #10
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	8819      	ldrh	r1, [r3, #0]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	4b56      	ldr	r3, [pc, #344]	; (80078e8 <HAL_I2C_Mem_Read+0x260>)
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	0023      	movs	r3, r4
 8007792:	f000 fac1 	bl	8007d18 <I2C_TransferConfig>
 8007796:	e012      	b.n	80077be <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	2380      	movs	r3, #128	; 0x80
 80077aa:	049c      	lsls	r4, r3, #18
 80077ac:	230a      	movs	r3, #10
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	8819      	ldrh	r1, [r3, #0]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	4b4c      	ldr	r3, [pc, #304]	; (80078e8 <HAL_I2C_Mem_Read+0x260>)
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	0023      	movs	r3, r4
 80077ba:	f000 faad 	bl	8007d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80077be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	0013      	movs	r3, r2
 80077c8:	2200      	movs	r2, #0
 80077ca:	2104      	movs	r1, #4
 80077cc:	f000 f984 	bl	8007ad8 <I2C_WaitOnFlagUntilTimeout>
 80077d0:	1e03      	subs	r3, r0, #0
 80077d2:	d001      	beq.n	80077d8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e082      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007800:	b29b      	uxth	r3, r3
 8007802:	3b01      	subs	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d03a      	beq.n	800788a <HAL_I2C_Mem_Read+0x202>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007818:	2b00      	cmp	r3, #0
 800781a:	d136      	bne.n	800788a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800781c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	0013      	movs	r3, r2
 8007826:	2200      	movs	r2, #0
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	f000 f955 	bl	8007ad8 <I2C_WaitOnFlagUntilTimeout>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d001      	beq.n	8007836 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e053      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783a:	b29b      	uxth	r3, r3
 800783c:	2bff      	cmp	r3, #255	; 0xff
 800783e:	d911      	bls.n	8007864 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	22ff      	movs	r2, #255	; 0xff
 8007844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784a:	b2da      	uxtb	r2, r3
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	045c      	lsls	r4, r3, #17
 8007850:	230a      	movs	r3, #10
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	8819      	ldrh	r1, [r3, #0]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	2300      	movs	r3, #0
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	0023      	movs	r3, r4
 800785e:	f000 fa5b 	bl	8007d18 <I2C_TransferConfig>
 8007862:	e012      	b.n	800788a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007872:	b2da      	uxtb	r2, r3
 8007874:	2380      	movs	r3, #128	; 0x80
 8007876:	049c      	lsls	r4, r3, #18
 8007878:	230a      	movs	r3, #10
 800787a:	18fb      	adds	r3, r7, r3
 800787c:	8819      	ldrh	r1, [r3, #0]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	0023      	movs	r3, r4
 8007886:	f000 fa47 	bl	8007d18 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d194      	bne.n	80077be <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	0018      	movs	r0, r3
 800789c:	f000 f99a 	bl	8007bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078a0:	1e03      	subs	r3, r0, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e01a      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2220      	movs	r2, #32
 80078ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	490c      	ldr	r1, [pc, #48]	; (80078ec <HAL_I2C_Mem_Read+0x264>)
 80078bc:	400a      	ands	r2, r1
 80078be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2241      	movs	r2, #65	; 0x41
 80078c4:	2120      	movs	r1, #32
 80078c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2242      	movs	r2, #66	; 0x42
 80078cc:	2100      	movs	r1, #0
 80078ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2240      	movs	r2, #64	; 0x40
 80078d4:	2100      	movs	r1, #0
 80078d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	e000      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80078dc:	2302      	movs	r3, #2
  }
}
 80078de:	0018      	movs	r0, r3
 80078e0:	46bd      	mov	sp, r7
 80078e2:	b007      	add	sp, #28
 80078e4:	bd90      	pop	{r4, r7, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	80002400 	.word	0x80002400
 80078ec:	fe00e800 	.word	0xfe00e800

080078f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2241      	movs	r2, #65	; 0x41
 80078fc:	5c9b      	ldrb	r3, [r3, r2]
 80078fe:	b2db      	uxtb	r3, r3
}
 8007900:	0018      	movs	r0, r3
 8007902:	46bd      	mov	sp, r7
 8007904:	b002      	add	sp, #8
 8007906:	bd80      	pop	{r7, pc}

08007908 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007908:	b5b0      	push	{r4, r5, r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af02      	add	r7, sp, #8
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	000c      	movs	r4, r1
 8007912:	0010      	movs	r0, r2
 8007914:	0019      	movs	r1, r3
 8007916:	250a      	movs	r5, #10
 8007918:	197b      	adds	r3, r7, r5
 800791a:	1c22      	adds	r2, r4, #0
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	2308      	movs	r3, #8
 8007920:	18fb      	adds	r3, r7, r3
 8007922:	1c02      	adds	r2, r0, #0
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	1dbb      	adds	r3, r7, #6
 8007928:	1c0a      	adds	r2, r1, #0
 800792a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800792c:	1dbb      	adds	r3, r7, #6
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b2da      	uxtb	r2, r3
 8007932:	2380      	movs	r3, #128	; 0x80
 8007934:	045c      	lsls	r4, r3, #17
 8007936:	197b      	adds	r3, r7, r5
 8007938:	8819      	ldrh	r1, [r3, #0]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	4b23      	ldr	r3, [pc, #140]	; (80079cc <I2C_RequestMemoryWrite+0xc4>)
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	0023      	movs	r3, r4
 8007942:	f000 f9e9 	bl	8007d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	6a39      	ldr	r1, [r7, #32]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	0018      	movs	r0, r3
 800794e:	f000 f902 	bl	8007b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8007952:	1e03      	subs	r3, r0, #0
 8007954:	d001      	beq.n	800795a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e033      	b.n	80079c2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800795a:	1dbb      	adds	r3, r7, #6
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d107      	bne.n	8007972 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007962:	2308      	movs	r3, #8
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	629a      	str	r2, [r3, #40]	; 0x28
 8007970:	e019      	b.n	80079a6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007972:	2308      	movs	r3, #8
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	b29b      	uxth	r3, r3
 800797c:	b2da      	uxtb	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007986:	6a39      	ldr	r1, [r7, #32]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	0018      	movs	r0, r3
 800798c:	f000 f8e3 	bl	8007b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8007990:	1e03      	subs	r3, r0, #0
 8007992:	d001      	beq.n	8007998 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e014      	b.n	80079c2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007998:	2308      	movs	r3, #8
 800799a:	18fb      	adds	r3, r7, r3
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079a6:	6a3a      	ldr	r2, [r7, #32]
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	0013      	movs	r3, r2
 80079b0:	2200      	movs	r2, #0
 80079b2:	2180      	movs	r1, #128	; 0x80
 80079b4:	f000 f890 	bl	8007ad8 <I2C_WaitOnFlagUntilTimeout>
 80079b8:	1e03      	subs	r3, r0, #0
 80079ba:	d001      	beq.n	80079c0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	0018      	movs	r0, r3
 80079c4:	46bd      	mov	sp, r7
 80079c6:	b004      	add	sp, #16
 80079c8:	bdb0      	pop	{r4, r5, r7, pc}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	80002000 	.word	0x80002000

080079d0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b5b0      	push	{r4, r5, r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	000c      	movs	r4, r1
 80079da:	0010      	movs	r0, r2
 80079dc:	0019      	movs	r1, r3
 80079de:	250a      	movs	r5, #10
 80079e0:	197b      	adds	r3, r7, r5
 80079e2:	1c22      	adds	r2, r4, #0
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	2308      	movs	r3, #8
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	1c02      	adds	r2, r0, #0
 80079ec:	801a      	strh	r2, [r3, #0]
 80079ee:	1dbb      	adds	r3, r7, #6
 80079f0:	1c0a      	adds	r2, r1, #0
 80079f2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80079f4:	1dbb      	adds	r3, r7, #6
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	197b      	adds	r3, r7, r5
 80079fc:	8819      	ldrh	r1, [r3, #0]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	4b23      	ldr	r3, [pc, #140]	; (8007a90 <I2C_RequestMemoryRead+0xc0>)
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	2300      	movs	r3, #0
 8007a06:	f000 f987 	bl	8007d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0c:	6a39      	ldr	r1, [r7, #32]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	0018      	movs	r0, r3
 8007a12:	f000 f8a0 	bl	8007b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a16:	1e03      	subs	r3, r0, #0
 8007a18:	d001      	beq.n	8007a1e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e033      	b.n	8007a86 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a1e:	1dbb      	adds	r3, r7, #6
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d107      	bne.n	8007a36 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a26:	2308      	movs	r3, #8
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	629a      	str	r2, [r3, #40]	; 0x28
 8007a34:	e019      	b.n	8007a6a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a36:	2308      	movs	r3, #8
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	0a1b      	lsrs	r3, r3, #8
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a4a:	6a39      	ldr	r1, [r7, #32]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f000 f881 	bl	8007b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a54:	1e03      	subs	r3, r0, #0
 8007a56:	d001      	beq.n	8007a5c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e014      	b.n	8007a86 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a5c:	2308      	movs	r3, #8
 8007a5e:	18fb      	adds	r3, r7, r3
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007a6a:	6a3a      	ldr	r2, [r7, #32]
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	0013      	movs	r3, r2
 8007a74:	2200      	movs	r2, #0
 8007a76:	2140      	movs	r1, #64	; 0x40
 8007a78:	f000 f82e 	bl	8007ad8 <I2C_WaitOnFlagUntilTimeout>
 8007a7c:	1e03      	subs	r3, r0, #0
 8007a7e:	d001      	beq.n	8007a84 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	0018      	movs	r0, r3
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	b004      	add	sp, #16
 8007a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	80002000 	.word	0x80002000

08007a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d103      	bne.n	8007ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d007      	beq.n	8007ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2101      	movs	r1, #1
 8007acc:	430a      	orrs	r2, r1
 8007ace:	619a      	str	r2, [r3, #24]
  }
}
 8007ad0:	46c0      	nop			; (mov r8, r8)
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b002      	add	sp, #8
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	1dfb      	adds	r3, r7, #7
 8007ae6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ae8:	e021      	b.n	8007b2e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	3301      	adds	r3, #1
 8007aee:	d01e      	beq.n	8007b2e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af0:	f7fc fdc1 	bl	8004676 <HAL_GetTick>
 8007af4:	0002      	movs	r2, r0
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d302      	bcc.n	8007b06 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d113      	bne.n	8007b2e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2241      	movs	r2, #65	; 0x41
 8007b16:	2120      	movs	r1, #32
 8007b18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2242      	movs	r2, #66	; 0x42
 8007b1e:	2100      	movs	r1, #0
 8007b20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2240      	movs	r2, #64	; 0x40
 8007b26:	2100      	movs	r1, #0
 8007b28:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e00f      	b.n	8007b4e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	4013      	ands	r3, r2
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	425a      	negs	r2, r3
 8007b3e:	4153      	adcs	r3, r2
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	001a      	movs	r2, r3
 8007b44:	1dfb      	adds	r3, r7, #7
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d0ce      	beq.n	8007aea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	0018      	movs	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	b004      	add	sp, #16
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b62:	e02b      	b.n	8007bbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	f000 f86e 	bl	8007c4c <I2C_IsAcknowledgeFailed>
 8007b70:	1e03      	subs	r3, r0, #0
 8007b72:	d001      	beq.n	8007b78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e029      	b.n	8007bcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	d01e      	beq.n	8007bbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b7e:	f7fc fd7a 	bl	8004676 <HAL_GetTick>
 8007b82:	0002      	movs	r2, r0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d302      	bcc.n	8007b94 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d113      	bne.n	8007bbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b98:	2220      	movs	r2, #32
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2241      	movs	r2, #65	; 0x41
 8007ba4:	2120      	movs	r1, #32
 8007ba6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2242      	movs	r2, #66	; 0x42
 8007bac:	2100      	movs	r1, #0
 8007bae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2240      	movs	r2, #64	; 0x40
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e007      	b.n	8007bcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d1cc      	bne.n	8007b64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	0018      	movs	r0, r3
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b004      	add	sp, #16
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007be0:	e028      	b.n	8007c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	0018      	movs	r0, r3
 8007bea:	f000 f82f 	bl	8007c4c <I2C_IsAcknowledgeFailed>
 8007bee:	1e03      	subs	r3, r0, #0
 8007bf0:	d001      	beq.n	8007bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e026      	b.n	8007c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf6:	f7fc fd3e 	bl	8004676 <HAL_GetTick>
 8007bfa:	0002      	movs	r2, r0
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d302      	bcc.n	8007c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d113      	bne.n	8007c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c10:	2220      	movs	r2, #32
 8007c12:	431a      	orrs	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2241      	movs	r2, #65	; 0x41
 8007c1c:	2120      	movs	r1, #32
 8007c1e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2242      	movs	r2, #66	; 0x42
 8007c24:	2100      	movs	r1, #0
 8007c26:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2240      	movs	r2, #64	; 0x40
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e007      	b.n	8007c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	d1cf      	bne.n	8007be2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	0018      	movs	r0, r3
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b004      	add	sp, #16
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	2210      	movs	r2, #16
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d151      	bne.n	8007d0a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c66:	e021      	b.n	8007cac <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	d01e      	beq.n	8007cac <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6e:	f7fc fd02 	bl	8004676 <HAL_GetTick>
 8007c72:	0002      	movs	r2, r0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d302      	bcc.n	8007c84 <I2C_IsAcknowledgeFailed+0x38>
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d113      	bne.n	8007cac <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c88:	2220      	movs	r2, #32
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2241      	movs	r2, #65	; 0x41
 8007c94:	2120      	movs	r1, #32
 8007c96:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2242      	movs	r2, #66	; 0x42
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2240      	movs	r2, #64	; 0x40
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e02f      	b.n	8007d0c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d1d6      	bne.n	8007c68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2210      	movs	r2, #16
 8007cc0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f7ff fee1 	bl	8007a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	490d      	ldr	r1, [pc, #52]	; (8007d14 <I2C_IsAcknowledgeFailed+0xc8>)
 8007cde:	400a      	ands	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2241      	movs	r2, #65	; 0x41
 8007cf2:	2120      	movs	r1, #32
 8007cf4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2242      	movs	r2, #66	; 0x42
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2240      	movs	r2, #64	; 0x40
 8007d02:	2100      	movs	r1, #0
 8007d04:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b004      	add	sp, #16
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	fe00e800 	.word	0xfe00e800

08007d18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	0008      	movs	r0, r1
 8007d22:	0011      	movs	r1, r2
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	240a      	movs	r4, #10
 8007d28:	193b      	adds	r3, r7, r4
 8007d2a:	1c02      	adds	r2, r0, #0
 8007d2c:	801a      	strh	r2, [r3, #0]
 8007d2e:	2009      	movs	r0, #9
 8007d30:	183b      	adds	r3, r7, r0
 8007d32:	1c0a      	adds	r2, r1, #0
 8007d34:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	0d51      	lsrs	r1, r2, #21
 8007d40:	2280      	movs	r2, #128	; 0x80
 8007d42:	00d2      	lsls	r2, r2, #3
 8007d44:	400a      	ands	r2, r1
 8007d46:	490e      	ldr	r1, [pc, #56]	; (8007d80 <I2C_TransferConfig+0x68>)
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	43d2      	mvns	r2, r2
 8007d4c:	401a      	ands	r2, r3
 8007d4e:	0011      	movs	r1, r2
 8007d50:	193b      	adds	r3, r7, r4
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	059b      	lsls	r3, r3, #22
 8007d56:	0d9a      	lsrs	r2, r3, #22
 8007d58:	183b      	adds	r3, r7, r0
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	0418      	lsls	r0, r3, #16
 8007d5e:	23ff      	movs	r3, #255	; 0xff
 8007d60:	041b      	lsls	r3, r3, #16
 8007d62:	4003      	ands	r3, r0
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b005      	add	sp, #20
 8007d7c:	bd90      	pop	{r4, r7, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	03ff63ff 	.word	0x03ff63ff

08007d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2241      	movs	r2, #65	; 0x41
 8007d92:	5c9b      	ldrb	r3, [r3, r2]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	d138      	bne.n	8007e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2240      	movs	r2, #64	; 0x40
 8007d9e:	5c9b      	ldrb	r3, [r3, r2]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d101      	bne.n	8007da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007da4:	2302      	movs	r3, #2
 8007da6:	e032      	b.n	8007e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2240      	movs	r2, #64	; 0x40
 8007dac:	2101      	movs	r1, #1
 8007dae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2241      	movs	r2, #65	; 0x41
 8007db4:	2124      	movs	r1, #36	; 0x24
 8007db6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	438a      	bics	r2, r1
 8007dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4911      	ldr	r1, [pc, #68]	; (8007e18 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007dd4:	400a      	ands	r2, r1
 8007dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6819      	ldr	r1, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2101      	movs	r1, #1
 8007df4:	430a      	orrs	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2241      	movs	r2, #65	; 0x41
 8007dfc:	2120      	movs	r1, #32
 8007dfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2240      	movs	r2, #64	; 0x40
 8007e04:	2100      	movs	r1, #0
 8007e06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e000      	b.n	8007e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e0c:	2302      	movs	r3, #2
  }
}
 8007e0e:	0018      	movs	r0, r3
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b002      	add	sp, #8
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	ffffefff 	.word	0xffffefff

08007e1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2241      	movs	r2, #65	; 0x41
 8007e2a:	5c9b      	ldrb	r3, [r3, r2]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d139      	bne.n	8007ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2240      	movs	r2, #64	; 0x40
 8007e36:	5c9b      	ldrb	r3, [r3, r2]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e033      	b.n	8007ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2240      	movs	r2, #64	; 0x40
 8007e44:	2101      	movs	r1, #1
 8007e46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2241      	movs	r2, #65	; 0x41
 8007e4c:	2124      	movs	r1, #36	; 0x24
 8007e4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	438a      	bics	r2, r1
 8007e5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a11      	ldr	r2, [pc, #68]	; (8007eb0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2241      	movs	r2, #65	; 0x41
 8007e96:	2120      	movs	r1, #32
 8007e98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2240      	movs	r2, #64	; 0x40
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ea6:	2302      	movs	r3, #2
  }
}
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b004      	add	sp, #16
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	fffff0ff 	.word	0xfffff0ff

08007eb4 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8007eb8:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <HAL_PWR_DisablePVD+0x18>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <HAL_PWR_DisablePVD+0x18>)
 8007ebe:	2110      	movs	r1, #16
 8007ec0:	438a      	bics	r2, r1
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	46c0      	nop			; (mov r8, r8)
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	40007000 	.word	0x40007000

08007ed0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	000a      	movs	r2, r1
 8007eda:	1cfb      	adds	r3, r7, #3
 8007edc:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8007ee2:	4b23      	ldr	r3, [pc, #140]	; (8007f70 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	2380      	movs	r3, #128	; 0x80
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4013      	ands	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d008      	beq.n	8007f10 <HAL_PWR_EnterSLEEPMode+0x40>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8007f04:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b19      	ldr	r3, [pc, #100]	; (8007f70 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f0a:	491b      	ldr	r1, [pc, #108]	; (8007f78 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2203      	movs	r2, #3
 8007f1a:	4393      	bics	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007f2c:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <HAL_PWR_EnterSLEEPMode+0xac>)
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <HAL_PWR_EnterSLEEPMode+0xac>)
 8007f32:	2104      	movs	r1, #4
 8007f34:	438a      	bics	r2, r1
 8007f36:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007f38:	1cfb      	adds	r3, r7, #3
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007f40:	bf30      	wfi
 8007f42:	e002      	b.n	8007f4a <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007f44:	bf40      	sev
    __WFE();
 8007f46:	bf20      	wfe
    __WFE();
 8007f48:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d009      	beq.n	8007f64 <HAL_PWR_EnterSLEEPMode+0x94>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d006      	beq.n	8007f64 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8007f56:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	0089      	lsls	r1, r1, #2
 8007f60:	430a      	orrs	r2, r1
 8007f62:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8007f64:	46c0      	nop			; (mov r8, r8)

}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	b006      	add	sp, #24
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	40007000 	.word	0x40007000
 8007f74:	40010000 	.word	0x40010000
 8007f78:	fffffdff 	.word	0xfffffdff
 8007f7c:	e000ed00 	.word	0xe000ed00

08007f80 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	000a      	movs	r2, r1
 8007f8a:	1cfb      	adds	r3, r7, #3
 8007f8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8007f92:	4b25      	ldr	r3, [pc, #148]	; (8008028 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	2380      	movs	r3, #128	; 0x80
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8007f9e:	4b23      	ldr	r3, [pc, #140]	; (800802c <HAL_PWR_EnterSTOPMode+0xac>)
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <HAL_PWR_EnterSTOPMode+0x40>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8007fb4:	4b1c      	ldr	r3, [pc, #112]	; (8008028 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007fba:	491d      	ldr	r1, [pc, #116]	; (8008030 <HAL_PWR_EnterSTOPMode+0xb0>)
 8007fbc:	400a      	ands	r2, r1
 8007fbe:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2203      	movs	r2, #3
 8007fca:	4393      	bics	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007fdc:	4b15      	ldr	r3, [pc, #84]	; (8008034 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	4b14      	ldr	r3, [pc, #80]	; (8008034 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007fe2:	2104      	movs	r1, #4
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007fe8:	1cfb      	adds	r3, r7, #3
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007ff0:	bf30      	wfi
 8007ff2:	e002      	b.n	8007ffa <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007ff4:	bf40      	sev
    __WFE();
 8007ff6:	bf20      	wfe
    __WFE();
 8007ff8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007ffa:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008000:	2104      	movs	r1, #4
 8008002:	438a      	bics	r2, r1
 8008004:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d009      	beq.n	8008020 <HAL_PWR_EnterSTOPMode+0xa0>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d006      	beq.n	8008020 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4b04      	ldr	r3, [pc, #16]	; (8008028 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008018:	2180      	movs	r1, #128	; 0x80
 800801a:	0089      	lsls	r1, r1, #2
 800801c:	430a      	orrs	r2, r1
 800801e:	601a      	str	r2, [r3, #0]
  }
}
 8008020:	46c0      	nop			; (mov r8, r8)
 8008022:	46bd      	mov	sp, r7
 8008024:	b006      	add	sp, #24
 8008026:	bd80      	pop	{r7, pc}
 8008028:	40007000 	.word	0x40007000
 800802c:	40010000 	.word	0x40010000
 8008030:	fffffdff 	.word	0xfffffdff
 8008034:	e000ed00 	.word	0xe000ed00

08008038 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 800803c:	4b04      	ldr	r3, [pc, #16]	; (8008050 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	4b03      	ldr	r3, [pc, #12]	; (8008050 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008042:	2180      	movs	r1, #128	; 0x80
 8008044:	00c9      	lsls	r1, r1, #3
 8008046:	430a      	orrs	r2, r1
 8008048:	601a      	str	r2, [r3, #0]
}
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40007000 	.word	0x40007000

08008054 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008058:	4b04      	ldr	r3, [pc, #16]	; (800806c <HAL_PWREx_EnableUltraLowPower+0x18>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	4b03      	ldr	r3, [pc, #12]	; (800806c <HAL_PWREx_EnableUltraLowPower+0x18>)
 800805e:	2180      	movs	r1, #128	; 0x80
 8008060:	0089      	lsls	r1, r1, #2
 8008062:	430a      	orrs	r2, r1
 8008064:	601a      	str	r2, [r3, #0]
}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	40007000 	.word	0x40007000

08008070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008070:	b5b0      	push	{r4, r5, r7, lr}
 8008072:	b08a      	sub	sp, #40	; 0x28
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f000 fbbf 	bl	8008802 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008084:	4bc9      	ldr	r3, [pc, #804]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	220c      	movs	r2, #12
 800808a:	4013      	ands	r3, r2
 800808c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800808e:	4bc7      	ldr	r3, [pc, #796]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	2380      	movs	r3, #128	; 0x80
 8008094:	025b      	lsls	r3, r3, #9
 8008096:	4013      	ands	r3, r2
 8008098:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2201      	movs	r2, #1
 80080a0:	4013      	ands	r3, r2
 80080a2:	d100      	bne.n	80080a6 <HAL_RCC_OscConfig+0x36>
 80080a4:	e07e      	b.n	80081a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d007      	beq.n	80080bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	2b0c      	cmp	r3, #12
 80080b0:	d112      	bne.n	80080d8 <HAL_RCC_OscConfig+0x68>
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	2380      	movs	r3, #128	; 0x80
 80080b6:	025b      	lsls	r3, r3, #9
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d10d      	bne.n	80080d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080bc:	4bbb      	ldr	r3, [pc, #748]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	2380      	movs	r3, #128	; 0x80
 80080c2:	029b      	lsls	r3, r3, #10
 80080c4:	4013      	ands	r3, r2
 80080c6:	d100      	bne.n	80080ca <HAL_RCC_OscConfig+0x5a>
 80080c8:	e06b      	b.n	80081a2 <HAL_RCC_OscConfig+0x132>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d167      	bne.n	80081a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f000 fb95 	bl	8008802 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	025b      	lsls	r3, r3, #9
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d107      	bne.n	80080f4 <HAL_RCC_OscConfig+0x84>
 80080e4:	4bb1      	ldr	r3, [pc, #708]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	4bb0      	ldr	r3, [pc, #704]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80080ea:	2180      	movs	r1, #128	; 0x80
 80080ec:	0249      	lsls	r1, r1, #9
 80080ee:	430a      	orrs	r2, r1
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	e027      	b.n	8008144 <HAL_RCC_OscConfig+0xd4>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	23a0      	movs	r3, #160	; 0xa0
 80080fa:	02db      	lsls	r3, r3, #11
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d10e      	bne.n	800811e <HAL_RCC_OscConfig+0xae>
 8008100:	4baa      	ldr	r3, [pc, #680]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4ba9      	ldr	r3, [pc, #676]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008106:	2180      	movs	r1, #128	; 0x80
 8008108:	02c9      	lsls	r1, r1, #11
 800810a:	430a      	orrs	r2, r1
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	4ba7      	ldr	r3, [pc, #668]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4ba6      	ldr	r3, [pc, #664]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008114:	2180      	movs	r1, #128	; 0x80
 8008116:	0249      	lsls	r1, r1, #9
 8008118:	430a      	orrs	r2, r1
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	e012      	b.n	8008144 <HAL_RCC_OscConfig+0xd4>
 800811e:	4ba3      	ldr	r3, [pc, #652]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	4ba2      	ldr	r3, [pc, #648]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008124:	49a2      	ldr	r1, [pc, #648]	; (80083b0 <HAL_RCC_OscConfig+0x340>)
 8008126:	400a      	ands	r2, r1
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	4ba0      	ldr	r3, [pc, #640]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	025b      	lsls	r3, r3, #9
 8008132:	4013      	ands	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4b9c      	ldr	r3, [pc, #624]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	4b9b      	ldr	r3, [pc, #620]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800813e:	499d      	ldr	r1, [pc, #628]	; (80083b4 <HAL_RCC_OscConfig+0x344>)
 8008140:	400a      	ands	r2, r1
 8008142:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d015      	beq.n	8008178 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800814c:	f7fc fa93 	bl	8004676 <HAL_GetTick>
 8008150:	0003      	movs	r3, r0
 8008152:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008154:	e009      	b.n	800816a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008156:	f7fc fa8e 	bl	8004676 <HAL_GetTick>
 800815a:	0002      	movs	r2, r0
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b64      	cmp	r3, #100	; 0x64
 8008162:	d902      	bls.n	800816a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	f000 fb4c 	bl	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800816a:	4b90      	ldr	r3, [pc, #576]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	2380      	movs	r3, #128	; 0x80
 8008170:	029b      	lsls	r3, r3, #10
 8008172:	4013      	ands	r3, r2
 8008174:	d0ef      	beq.n	8008156 <HAL_RCC_OscConfig+0xe6>
 8008176:	e015      	b.n	80081a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008178:	f7fc fa7d 	bl	8004676 <HAL_GetTick>
 800817c:	0003      	movs	r3, r0
 800817e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008180:	e008      	b.n	8008194 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008182:	f7fc fa78 	bl	8004676 <HAL_GetTick>
 8008186:	0002      	movs	r2, r0
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b64      	cmp	r3, #100	; 0x64
 800818e:	d901      	bls.n	8008194 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e336      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008194:	4b85      	ldr	r3, [pc, #532]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	2380      	movs	r3, #128	; 0x80
 800819a:	029b      	lsls	r3, r3, #10
 800819c:	4013      	ands	r3, r2
 800819e:	d1f0      	bne.n	8008182 <HAL_RCC_OscConfig+0x112>
 80081a0:	e000      	b.n	80081a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2202      	movs	r2, #2
 80081aa:	4013      	ands	r3, r2
 80081ac:	d100      	bne.n	80081b0 <HAL_RCC_OscConfig+0x140>
 80081ae:	e099      	b.n	80082e4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	2220      	movs	r2, #32
 80081ba:	4013      	ands	r3, r2
 80081bc:	d009      	beq.n	80081d2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80081be:	4b7b      	ldr	r3, [pc, #492]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	4b7a      	ldr	r3, [pc, #488]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80081c4:	2120      	movs	r1, #32
 80081c6:	430a      	orrs	r2, r1
 80081c8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	2220      	movs	r2, #32
 80081ce:	4393      	bics	r3, r2
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	2b04      	cmp	r3, #4
 80081d6:	d005      	beq.n	80081e4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2b0c      	cmp	r3, #12
 80081dc:	d13e      	bne.n	800825c <HAL_RCC_OscConfig+0x1ec>
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d13b      	bne.n	800825c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80081e4:	4b71      	ldr	r3, [pc, #452]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2204      	movs	r2, #4
 80081ea:	4013      	ands	r3, r2
 80081ec:	d004      	beq.n	80081f8 <HAL_RCC_OscConfig+0x188>
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e304      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f8:	4b6c      	ldr	r3, [pc, #432]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4a6e      	ldr	r2, [pc, #440]	; (80083b8 <HAL_RCC_OscConfig+0x348>)
 80081fe:	4013      	ands	r3, r2
 8008200:	0019      	movs	r1, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	021a      	lsls	r2, r3, #8
 8008208:	4b68      	ldr	r3, [pc, #416]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800820e:	4b67      	ldr	r3, [pc, #412]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2209      	movs	r2, #9
 8008214:	4393      	bics	r3, r2
 8008216:	0019      	movs	r1, r3
 8008218:	4b64      	ldr	r3, [pc, #400]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800821a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821c:	430a      	orrs	r2, r1
 800821e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008220:	f000 fc42 	bl	8008aa8 <HAL_RCC_GetSysClockFreq>
 8008224:	0001      	movs	r1, r0
 8008226:	4b61      	ldr	r3, [pc, #388]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	091b      	lsrs	r3, r3, #4
 800822c:	220f      	movs	r2, #15
 800822e:	4013      	ands	r3, r2
 8008230:	4a62      	ldr	r2, [pc, #392]	; (80083bc <HAL_RCC_OscConfig+0x34c>)
 8008232:	5cd3      	ldrb	r3, [r2, r3]
 8008234:	000a      	movs	r2, r1
 8008236:	40da      	lsrs	r2, r3
 8008238:	4b61      	ldr	r3, [pc, #388]	; (80083c0 <HAL_RCC_OscConfig+0x350>)
 800823a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800823c:	4b61      	ldr	r3, [pc, #388]	; (80083c4 <HAL_RCC_OscConfig+0x354>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2513      	movs	r5, #19
 8008242:	197c      	adds	r4, r7, r5
 8008244:	0018      	movs	r0, r3
 8008246:	f7fc fa0d 	bl	8004664 <HAL_InitTick>
 800824a:	0003      	movs	r3, r0
 800824c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800824e:	197b      	adds	r3, r7, r5
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d046      	beq.n	80082e4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8008256:	197b      	adds	r3, r7, r5
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	e2d2      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	d027      	beq.n	80082b2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008262:	4b52      	ldr	r3, [pc, #328]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2209      	movs	r2, #9
 8008268:	4393      	bics	r3, r2
 800826a:	0019      	movs	r1, r3
 800826c:	4b4f      	ldr	r3, [pc, #316]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800826e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008270:	430a      	orrs	r2, r1
 8008272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008274:	f7fc f9ff 	bl	8004676 <HAL_GetTick>
 8008278:	0003      	movs	r3, r0
 800827a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800827c:	e008      	b.n	8008290 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800827e:	f7fc f9fa 	bl	8004676 <HAL_GetTick>
 8008282:	0002      	movs	r2, r0
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	2b02      	cmp	r3, #2
 800828a:	d901      	bls.n	8008290 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e2b8      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008290:	4b46      	ldr	r3, [pc, #280]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2204      	movs	r2, #4
 8008296:	4013      	ands	r3, r2
 8008298:	d0f1      	beq.n	800827e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829a:	4b44      	ldr	r3, [pc, #272]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	4a46      	ldr	r2, [pc, #280]	; (80083b8 <HAL_RCC_OscConfig+0x348>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	0019      	movs	r1, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	021a      	lsls	r2, r3, #8
 80082aa:	4b40      	ldr	r3, [pc, #256]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80082ac:	430a      	orrs	r2, r1
 80082ae:	605a      	str	r2, [r3, #4]
 80082b0:	e018      	b.n	80082e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082b2:	4b3e      	ldr	r3, [pc, #248]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b3d      	ldr	r3, [pc, #244]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80082b8:	2101      	movs	r1, #1
 80082ba:	438a      	bics	r2, r1
 80082bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082be:	f7fc f9da 	bl	8004676 <HAL_GetTick>
 80082c2:	0003      	movs	r3, r0
 80082c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082c8:	f7fc f9d5 	bl	8004676 <HAL_GetTick>
 80082cc:	0002      	movs	r2, r0
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e293      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082da:	4b34      	ldr	r3, [pc, #208]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2204      	movs	r2, #4
 80082e0:	4013      	ands	r3, r2
 80082e2:	d1f1      	bne.n	80082c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2210      	movs	r2, #16
 80082ea:	4013      	ands	r3, r2
 80082ec:	d100      	bne.n	80082f0 <HAL_RCC_OscConfig+0x280>
 80082ee:	e0a2      	b.n	8008436 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d140      	bne.n	8008378 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082f6:	4b2d      	ldr	r3, [pc, #180]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4013      	ands	r3, r2
 8008300:	d005      	beq.n	800830e <HAL_RCC_OscConfig+0x29e>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e279      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800830e:	4b27      	ldr	r3, [pc, #156]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	4a2d      	ldr	r2, [pc, #180]	; (80083c8 <HAL_RCC_OscConfig+0x358>)
 8008314:	4013      	ands	r3, r2
 8008316:	0019      	movs	r1, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800831c:	4b23      	ldr	r3, [pc, #140]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008322:	4b22      	ldr	r3, [pc, #136]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	021b      	lsls	r3, r3, #8
 8008328:	0a19      	lsrs	r1, r3, #8
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	061a      	lsls	r2, r3, #24
 8008330:	4b1e      	ldr	r3, [pc, #120]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	0b5b      	lsrs	r3, r3, #13
 800833c:	3301      	adds	r3, #1
 800833e:	2280      	movs	r2, #128	; 0x80
 8008340:	0212      	lsls	r2, r2, #8
 8008342:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008344:	4b19      	ldr	r3, [pc, #100]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	091b      	lsrs	r3, r3, #4
 800834a:	210f      	movs	r1, #15
 800834c:	400b      	ands	r3, r1
 800834e:	491b      	ldr	r1, [pc, #108]	; (80083bc <HAL_RCC_OscConfig+0x34c>)
 8008350:	5ccb      	ldrb	r3, [r1, r3]
 8008352:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008354:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <HAL_RCC_OscConfig+0x350>)
 8008356:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008358:	4b1a      	ldr	r3, [pc, #104]	; (80083c4 <HAL_RCC_OscConfig+0x354>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2513      	movs	r5, #19
 800835e:	197c      	adds	r4, r7, r5
 8008360:	0018      	movs	r0, r3
 8008362:	f7fc f97f 	bl	8004664 <HAL_InitTick>
 8008366:	0003      	movs	r3, r0
 8008368:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800836a:	197b      	adds	r3, r7, r5
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d061      	beq.n	8008436 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008372:	197b      	adds	r3, r7, r5
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	e244      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d040      	beq.n	8008402 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008380:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	4b09      	ldr	r3, [pc, #36]	; (80083ac <HAL_RCC_OscConfig+0x33c>)
 8008386:	2180      	movs	r1, #128	; 0x80
 8008388:	0049      	lsls	r1, r1, #1
 800838a:	430a      	orrs	r2, r1
 800838c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800838e:	f7fc f972 	bl	8004676 <HAL_GetTick>
 8008392:	0003      	movs	r3, r0
 8008394:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008396:	e019      	b.n	80083cc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008398:	f7fc f96d 	bl	8004676 <HAL_GetTick>
 800839c:	0002      	movs	r2, r0
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d912      	bls.n	80083cc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e22b      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	40021000 	.word	0x40021000
 80083b0:	fffeffff 	.word	0xfffeffff
 80083b4:	fffbffff 	.word	0xfffbffff
 80083b8:	ffffe0ff 	.word	0xffffe0ff
 80083bc:	0801e0f4 	.word	0x0801e0f4
 80083c0:	20000070 	.word	0x20000070
 80083c4:	20000074 	.word	0x20000074
 80083c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80083cc:	4bca      	ldr	r3, [pc, #808]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	2380      	movs	r3, #128	; 0x80
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4013      	ands	r3, r2
 80083d6:	d0df      	beq.n	8008398 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083d8:	4bc7      	ldr	r3, [pc, #796]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	4ac7      	ldr	r2, [pc, #796]	; (80086fc <HAL_RCC_OscConfig+0x68c>)
 80083de:	4013      	ands	r3, r2
 80083e0:	0019      	movs	r1, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083e6:	4bc4      	ldr	r3, [pc, #784]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80083e8:	430a      	orrs	r2, r1
 80083ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083ec:	4bc2      	ldr	r3, [pc, #776]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	0a19      	lsrs	r1, r3, #8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	061a      	lsls	r2, r3, #24
 80083fa:	4bbf      	ldr	r3, [pc, #764]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80083fc:	430a      	orrs	r2, r1
 80083fe:	605a      	str	r2, [r3, #4]
 8008400:	e019      	b.n	8008436 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008402:	4bbd      	ldr	r3, [pc, #756]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4bbc      	ldr	r3, [pc, #752]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008408:	49bd      	ldr	r1, [pc, #756]	; (8008700 <HAL_RCC_OscConfig+0x690>)
 800840a:	400a      	ands	r2, r1
 800840c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800840e:	f7fc f932 	bl	8004676 <HAL_GetTick>
 8008412:	0003      	movs	r3, r0
 8008414:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008416:	e008      	b.n	800842a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008418:	f7fc f92d 	bl	8004676 <HAL_GetTick>
 800841c:	0002      	movs	r2, r0
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	2b02      	cmp	r3, #2
 8008424:	d901      	bls.n	800842a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e1eb      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800842a:	4bb3      	ldr	r3, [pc, #716]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	2380      	movs	r3, #128	; 0x80
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4013      	ands	r3, r2
 8008434:	d1f0      	bne.n	8008418 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2208      	movs	r2, #8
 800843c:	4013      	ands	r3, r2
 800843e:	d036      	beq.n	80084ae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d019      	beq.n	800847c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008448:	4bab      	ldr	r3, [pc, #684]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800844a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800844c:	4baa      	ldr	r3, [pc, #680]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800844e:	2101      	movs	r1, #1
 8008450:	430a      	orrs	r2, r1
 8008452:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008454:	f7fc f90f 	bl	8004676 <HAL_GetTick>
 8008458:	0003      	movs	r3, r0
 800845a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800845c:	e008      	b.n	8008470 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800845e:	f7fc f90a 	bl	8004676 <HAL_GetTick>
 8008462:	0002      	movs	r2, r0
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d901      	bls.n	8008470 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e1c8      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008470:	4ba1      	ldr	r3, [pc, #644]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	2202      	movs	r2, #2
 8008476:	4013      	ands	r3, r2
 8008478:	d0f1      	beq.n	800845e <HAL_RCC_OscConfig+0x3ee>
 800847a:	e018      	b.n	80084ae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800847c:	4b9e      	ldr	r3, [pc, #632]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800847e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008480:	4b9d      	ldr	r3, [pc, #628]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008482:	2101      	movs	r1, #1
 8008484:	438a      	bics	r2, r1
 8008486:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008488:	f7fc f8f5 	bl	8004676 <HAL_GetTick>
 800848c:	0003      	movs	r3, r0
 800848e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008490:	e008      	b.n	80084a4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008492:	f7fc f8f0 	bl	8004676 <HAL_GetTick>
 8008496:	0002      	movs	r2, r0
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d901      	bls.n	80084a4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e1ae      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084a4:	4b94      	ldr	r3, [pc, #592]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80084a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a8:	2202      	movs	r2, #2
 80084aa:	4013      	ands	r3, r2
 80084ac:	d1f1      	bne.n	8008492 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2204      	movs	r2, #4
 80084b4:	4013      	ands	r3, r2
 80084b6:	d100      	bne.n	80084ba <HAL_RCC_OscConfig+0x44a>
 80084b8:	e0ae      	b.n	8008618 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084ba:	2023      	movs	r0, #35	; 0x23
 80084bc:	183b      	adds	r3, r7, r0
 80084be:	2200      	movs	r2, #0
 80084c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084c2:	4b8d      	ldr	r3, [pc, #564]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80084c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c6:	2380      	movs	r3, #128	; 0x80
 80084c8:	055b      	lsls	r3, r3, #21
 80084ca:	4013      	ands	r3, r2
 80084cc:	d109      	bne.n	80084e2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084ce:	4b8a      	ldr	r3, [pc, #552]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80084d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d2:	4b89      	ldr	r3, [pc, #548]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80084d4:	2180      	movs	r1, #128	; 0x80
 80084d6:	0549      	lsls	r1, r1, #21
 80084d8:	430a      	orrs	r2, r1
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80084dc:	183b      	adds	r3, r7, r0
 80084de:	2201      	movs	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084e2:	4b88      	ldr	r3, [pc, #544]	; (8008704 <HAL_RCC_OscConfig+0x694>)
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	2380      	movs	r3, #128	; 0x80
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	4013      	ands	r3, r2
 80084ec:	d11a      	bne.n	8008524 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084ee:	4b85      	ldr	r3, [pc, #532]	; (8008704 <HAL_RCC_OscConfig+0x694>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b84      	ldr	r3, [pc, #528]	; (8008704 <HAL_RCC_OscConfig+0x694>)
 80084f4:	2180      	movs	r1, #128	; 0x80
 80084f6:	0049      	lsls	r1, r1, #1
 80084f8:	430a      	orrs	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084fc:	f7fc f8bb 	bl	8004676 <HAL_GetTick>
 8008500:	0003      	movs	r3, r0
 8008502:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008504:	e008      	b.n	8008518 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008506:	f7fc f8b6 	bl	8004676 <HAL_GetTick>
 800850a:	0002      	movs	r2, r0
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b64      	cmp	r3, #100	; 0x64
 8008512:	d901      	bls.n	8008518 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e174      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008518:	4b7a      	ldr	r3, [pc, #488]	; (8008704 <HAL_RCC_OscConfig+0x694>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	2380      	movs	r3, #128	; 0x80
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	4013      	ands	r3, r2
 8008522:	d0f0      	beq.n	8008506 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	2380      	movs	r3, #128	; 0x80
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	429a      	cmp	r2, r3
 800852e:	d107      	bne.n	8008540 <HAL_RCC_OscConfig+0x4d0>
 8008530:	4b71      	ldr	r3, [pc, #452]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008534:	4b70      	ldr	r3, [pc, #448]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	0049      	lsls	r1, r1, #1
 800853a:	430a      	orrs	r2, r1
 800853c:	651a      	str	r2, [r3, #80]	; 0x50
 800853e:	e031      	b.n	80085a4 <HAL_RCC_OscConfig+0x534>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10c      	bne.n	8008562 <HAL_RCC_OscConfig+0x4f2>
 8008548:	4b6b      	ldr	r3, [pc, #428]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800854a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800854c:	4b6a      	ldr	r3, [pc, #424]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800854e:	496c      	ldr	r1, [pc, #432]	; (8008700 <HAL_RCC_OscConfig+0x690>)
 8008550:	400a      	ands	r2, r1
 8008552:	651a      	str	r2, [r3, #80]	; 0x50
 8008554:	4b68      	ldr	r3, [pc, #416]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008558:	4b67      	ldr	r3, [pc, #412]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800855a:	496b      	ldr	r1, [pc, #428]	; (8008708 <HAL_RCC_OscConfig+0x698>)
 800855c:	400a      	ands	r2, r1
 800855e:	651a      	str	r2, [r3, #80]	; 0x50
 8008560:	e020      	b.n	80085a4 <HAL_RCC_OscConfig+0x534>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	23a0      	movs	r3, #160	; 0xa0
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	429a      	cmp	r2, r3
 800856c:	d10e      	bne.n	800858c <HAL_RCC_OscConfig+0x51c>
 800856e:	4b62      	ldr	r3, [pc, #392]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008572:	4b61      	ldr	r3, [pc, #388]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008574:	2180      	movs	r1, #128	; 0x80
 8008576:	00c9      	lsls	r1, r1, #3
 8008578:	430a      	orrs	r2, r1
 800857a:	651a      	str	r2, [r3, #80]	; 0x50
 800857c:	4b5e      	ldr	r3, [pc, #376]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800857e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008580:	4b5d      	ldr	r3, [pc, #372]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008582:	2180      	movs	r1, #128	; 0x80
 8008584:	0049      	lsls	r1, r1, #1
 8008586:	430a      	orrs	r2, r1
 8008588:	651a      	str	r2, [r3, #80]	; 0x50
 800858a:	e00b      	b.n	80085a4 <HAL_RCC_OscConfig+0x534>
 800858c:	4b5a      	ldr	r3, [pc, #360]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800858e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008590:	4b59      	ldr	r3, [pc, #356]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008592:	495b      	ldr	r1, [pc, #364]	; (8008700 <HAL_RCC_OscConfig+0x690>)
 8008594:	400a      	ands	r2, r1
 8008596:	651a      	str	r2, [r3, #80]	; 0x50
 8008598:	4b57      	ldr	r3, [pc, #348]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800859a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800859c:	4b56      	ldr	r3, [pc, #344]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800859e:	495a      	ldr	r1, [pc, #360]	; (8008708 <HAL_RCC_OscConfig+0x698>)
 80085a0:	400a      	ands	r2, r1
 80085a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d015      	beq.n	80085d8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085ac:	f7fc f863 	bl	8004676 <HAL_GetTick>
 80085b0:	0003      	movs	r3, r0
 80085b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085b4:	e009      	b.n	80085ca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085b6:	f7fc f85e 	bl	8004676 <HAL_GetTick>
 80085ba:	0002      	movs	r2, r0
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	4a52      	ldr	r2, [pc, #328]	; (800870c <HAL_RCC_OscConfig+0x69c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e11b      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085ca:	4b4b      	ldr	r3, [pc, #300]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80085cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ce:	2380      	movs	r3, #128	; 0x80
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4013      	ands	r3, r2
 80085d4:	d0ef      	beq.n	80085b6 <HAL_RCC_OscConfig+0x546>
 80085d6:	e014      	b.n	8008602 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085d8:	f7fc f84d 	bl	8004676 <HAL_GetTick>
 80085dc:	0003      	movs	r3, r0
 80085de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085e0:	e009      	b.n	80085f6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085e2:	f7fc f848 	bl	8004676 <HAL_GetTick>
 80085e6:	0002      	movs	r2, r0
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	4a47      	ldr	r2, [pc, #284]	; (800870c <HAL_RCC_OscConfig+0x69c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e105      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085f6:	4b40      	ldr	r3, [pc, #256]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80085f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085fa:	2380      	movs	r3, #128	; 0x80
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4013      	ands	r3, r2
 8008600:	d1ef      	bne.n	80085e2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008602:	2323      	movs	r3, #35	; 0x23
 8008604:	18fb      	adds	r3, r7, r3
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d105      	bne.n	8008618 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800860c:	4b3a      	ldr	r3, [pc, #232]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800860e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008610:	4b39      	ldr	r3, [pc, #228]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008612:	493f      	ldr	r1, [pc, #252]	; (8008710 <HAL_RCC_OscConfig+0x6a0>)
 8008614:	400a      	ands	r2, r1
 8008616:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2220      	movs	r2, #32
 800861e:	4013      	ands	r3, r2
 8008620:	d049      	beq.n	80086b6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d026      	beq.n	8008678 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800862a:	4b33      	ldr	r3, [pc, #204]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	4b32      	ldr	r3, [pc, #200]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008630:	2101      	movs	r1, #1
 8008632:	430a      	orrs	r2, r1
 8008634:	609a      	str	r2, [r3, #8]
 8008636:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 8008638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800863a:	4b2f      	ldr	r3, [pc, #188]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800863c:	2101      	movs	r1, #1
 800863e:	430a      	orrs	r2, r1
 8008640:	635a      	str	r2, [r3, #52]	; 0x34
 8008642:	4b34      	ldr	r3, [pc, #208]	; (8008714 <HAL_RCC_OscConfig+0x6a4>)
 8008644:	6a1a      	ldr	r2, [r3, #32]
 8008646:	4b33      	ldr	r3, [pc, #204]	; (8008714 <HAL_RCC_OscConfig+0x6a4>)
 8008648:	2180      	movs	r1, #128	; 0x80
 800864a:	0189      	lsls	r1, r1, #6
 800864c:	430a      	orrs	r2, r1
 800864e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008650:	f7fc f811 	bl	8004676 <HAL_GetTick>
 8008654:	0003      	movs	r3, r0
 8008656:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008658:	e008      	b.n	800866c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800865a:	f7fc f80c 	bl	8004676 <HAL_GetTick>
 800865e:	0002      	movs	r2, r0
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	d901      	bls.n	800866c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e0ca      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800866c:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2202      	movs	r2, #2
 8008672:	4013      	ands	r3, r2
 8008674:	d0f1      	beq.n	800865a <HAL_RCC_OscConfig+0x5ea>
 8008676:	e01e      	b.n	80086b6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008678:	4b1f      	ldr	r3, [pc, #124]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	4b1e      	ldr	r3, [pc, #120]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 800867e:	2101      	movs	r1, #1
 8008680:	438a      	bics	r2, r1
 8008682:	609a      	str	r2, [r3, #8]
 8008684:	4b23      	ldr	r3, [pc, #140]	; (8008714 <HAL_RCC_OscConfig+0x6a4>)
 8008686:	6a1a      	ldr	r2, [r3, #32]
 8008688:	4b22      	ldr	r3, [pc, #136]	; (8008714 <HAL_RCC_OscConfig+0x6a4>)
 800868a:	4923      	ldr	r1, [pc, #140]	; (8008718 <HAL_RCC_OscConfig+0x6a8>)
 800868c:	400a      	ands	r2, r1
 800868e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008690:	f7fb fff1 	bl	8004676 <HAL_GetTick>
 8008694:	0003      	movs	r3, r0
 8008696:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008698:	e008      	b.n	80086ac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800869a:	f7fb ffec 	bl	8004676 <HAL_GetTick>
 800869e:	0002      	movs	r2, r0
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e0aa      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086ac:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	2202      	movs	r2, #2
 80086b2:	4013      	ands	r3, r2
 80086b4:	d1f1      	bne.n	800869a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d100      	bne.n	80086c0 <HAL_RCC_OscConfig+0x650>
 80086be:	e09f      	b.n	8008800 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	2b0c      	cmp	r3, #12
 80086c4:	d100      	bne.n	80086c8 <HAL_RCC_OscConfig+0x658>
 80086c6:	e078      	b.n	80087ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d159      	bne.n	8008784 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086d0:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	4b08      	ldr	r3, [pc, #32]	; (80086f8 <HAL_RCC_OscConfig+0x688>)
 80086d6:	4911      	ldr	r1, [pc, #68]	; (800871c <HAL_RCC_OscConfig+0x6ac>)
 80086d8:	400a      	ands	r2, r1
 80086da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086dc:	f7fb ffcb 	bl	8004676 <HAL_GetTick>
 80086e0:	0003      	movs	r3, r0
 80086e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80086e4:	e01c      	b.n	8008720 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e6:	f7fb ffc6 	bl	8004676 <HAL_GetTick>
 80086ea:	0002      	movs	r2, r0
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d915      	bls.n	8008720 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e084      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
 80086f8:	40021000 	.word	0x40021000
 80086fc:	ffff1fff 	.word	0xffff1fff
 8008700:	fffffeff 	.word	0xfffffeff
 8008704:	40007000 	.word	0x40007000
 8008708:	fffffbff 	.word	0xfffffbff
 800870c:	00001388 	.word	0x00001388
 8008710:	efffffff 	.word	0xefffffff
 8008714:	40010000 	.word	0x40010000
 8008718:	ffffdfff 	.word	0xffffdfff
 800871c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008720:	4b3a      	ldr	r3, [pc, #232]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	2380      	movs	r3, #128	; 0x80
 8008726:	049b      	lsls	r3, r3, #18
 8008728:	4013      	ands	r3, r2
 800872a:	d1dc      	bne.n	80086e6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800872c:	4b37      	ldr	r3, [pc, #220]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4a37      	ldr	r2, [pc, #220]	; (8008810 <HAL_RCC_OscConfig+0x7a0>)
 8008732:	4013      	ands	r3, r2
 8008734:	0019      	movs	r1, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008744:	431a      	orrs	r2, r3
 8008746:	4b31      	ldr	r3, [pc, #196]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 8008748:	430a      	orrs	r2, r1
 800874a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800874c:	4b2f      	ldr	r3, [pc, #188]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	4b2e      	ldr	r3, [pc, #184]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 8008752:	2180      	movs	r1, #128	; 0x80
 8008754:	0449      	lsls	r1, r1, #17
 8008756:	430a      	orrs	r2, r1
 8008758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875a:	f7fb ff8c 	bl	8004676 <HAL_GetTick>
 800875e:	0003      	movs	r3, r0
 8008760:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008762:	e008      	b.n	8008776 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008764:	f7fb ff87 	bl	8004676 <HAL_GetTick>
 8008768:	0002      	movs	r2, r0
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b02      	cmp	r3, #2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e045      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008776:	4b25      	ldr	r3, [pc, #148]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	2380      	movs	r3, #128	; 0x80
 800877c:	049b      	lsls	r3, r3, #18
 800877e:	4013      	ands	r3, r2
 8008780:	d0f0      	beq.n	8008764 <HAL_RCC_OscConfig+0x6f4>
 8008782:	e03d      	b.n	8008800 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008784:	4b21      	ldr	r3, [pc, #132]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	4b20      	ldr	r3, [pc, #128]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 800878a:	4922      	ldr	r1, [pc, #136]	; (8008814 <HAL_RCC_OscConfig+0x7a4>)
 800878c:	400a      	ands	r2, r1
 800878e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008790:	f7fb ff71 	bl	8004676 <HAL_GetTick>
 8008794:	0003      	movs	r3, r0
 8008796:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008798:	e008      	b.n	80087ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800879a:	f7fb ff6c 	bl	8004676 <HAL_GetTick>
 800879e:	0002      	movs	r2, r0
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d901      	bls.n	80087ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e02a      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80087ac:	4b17      	ldr	r3, [pc, #92]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	049b      	lsls	r3, r3, #18
 80087b4:	4013      	ands	r3, r2
 80087b6:	d1f0      	bne.n	800879a <HAL_RCC_OscConfig+0x72a>
 80087b8:	e022      	b.n	8008800 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e01d      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80087c6:	4b11      	ldr	r3, [pc, #68]	; (800880c <HAL_RCC_OscConfig+0x79c>)
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	2380      	movs	r3, #128	; 0x80
 80087d0:	025b      	lsls	r3, r3, #9
 80087d2:	401a      	ands	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	429a      	cmp	r2, r3
 80087da:	d10f      	bne.n	80087fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	23f0      	movs	r3, #240	; 0xf0
 80087e0:	039b      	lsls	r3, r3, #14
 80087e2:	401a      	ands	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d107      	bne.n	80087fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	23c0      	movs	r3, #192	; 0xc0
 80087f0:	041b      	lsls	r3, r3, #16
 80087f2:	401a      	ands	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d001      	beq.n	8008800 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e000      	b.n	8008802 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	0018      	movs	r0, r3
 8008804:	46bd      	mov	sp, r7
 8008806:	b00a      	add	sp, #40	; 0x28
 8008808:	bdb0      	pop	{r4, r5, r7, pc}
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	40021000 	.word	0x40021000
 8008810:	ff02ffff 	.word	0xff02ffff
 8008814:	feffffff 	.word	0xfeffffff

08008818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008818:	b5b0      	push	{r4, r5, r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e128      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800882c:	4b96      	ldr	r3, [pc, #600]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2201      	movs	r2, #1
 8008832:	4013      	ands	r3, r2
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d91e      	bls.n	8008878 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800883a:	4b93      	ldr	r3, [pc, #588]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2201      	movs	r2, #1
 8008840:	4393      	bics	r3, r2
 8008842:	0019      	movs	r1, r3
 8008844:	4b90      	ldr	r3, [pc, #576]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800884c:	f7fb ff13 	bl	8004676 <HAL_GetTick>
 8008850:	0003      	movs	r3, r0
 8008852:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008854:	e009      	b.n	800886a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008856:	f7fb ff0e 	bl	8004676 <HAL_GetTick>
 800885a:	0002      	movs	r2, r0
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	4a8a      	ldr	r2, [pc, #552]	; (8008a8c <HAL_RCC_ClockConfig+0x274>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d901      	bls.n	800886a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e109      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800886a:	4b87      	ldr	r3, [pc, #540]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2201      	movs	r2, #1
 8008870:	4013      	ands	r3, r2
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	429a      	cmp	r2, r3
 8008876:	d1ee      	bne.n	8008856 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2202      	movs	r2, #2
 800887e:	4013      	ands	r3, r2
 8008880:	d009      	beq.n	8008896 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008882:	4b83      	ldr	r3, [pc, #524]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	22f0      	movs	r2, #240	; 0xf0
 8008888:	4393      	bics	r3, r2
 800888a:	0019      	movs	r1, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	4b7f      	ldr	r3, [pc, #508]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008892:	430a      	orrs	r2, r1
 8008894:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2201      	movs	r2, #1
 800889c:	4013      	ands	r3, r2
 800889e:	d100      	bne.n	80088a2 <HAL_RCC_ClockConfig+0x8a>
 80088a0:	e089      	b.n	80089b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d107      	bne.n	80088ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088aa:	4b79      	ldr	r3, [pc, #484]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	2380      	movs	r3, #128	; 0x80
 80088b0:	029b      	lsls	r3, r3, #10
 80088b2:	4013      	ands	r3, r2
 80088b4:	d120      	bne.n	80088f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e0e1      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d107      	bne.n	80088d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088c2:	4b73      	ldr	r3, [pc, #460]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	2380      	movs	r3, #128	; 0x80
 80088c8:	049b      	lsls	r3, r3, #18
 80088ca:	4013      	ands	r3, r2
 80088cc:	d114      	bne.n	80088f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e0d5      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d106      	bne.n	80088e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088da:	4b6d      	ldr	r3, [pc, #436]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2204      	movs	r2, #4
 80088e0:	4013      	ands	r3, r2
 80088e2:	d109      	bne.n	80088f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e0ca      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80088e8:	4b69      	ldr	r3, [pc, #420]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	2380      	movs	r3, #128	; 0x80
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4013      	ands	r3, r2
 80088f2:	d101      	bne.n	80088f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0c2      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088f8:	4b65      	ldr	r3, [pc, #404]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2203      	movs	r2, #3
 80088fe:	4393      	bics	r3, r2
 8008900:	0019      	movs	r1, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	4b62      	ldr	r3, [pc, #392]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008908:	430a      	orrs	r2, r1
 800890a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800890c:	f7fb feb3 	bl	8004676 <HAL_GetTick>
 8008910:	0003      	movs	r3, r0
 8008912:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d111      	bne.n	8008940 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800891c:	e009      	b.n	8008932 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800891e:	f7fb feaa 	bl	8004676 <HAL_GetTick>
 8008922:	0002      	movs	r2, r0
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	4a58      	ldr	r2, [pc, #352]	; (8008a8c <HAL_RCC_ClockConfig+0x274>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e0a5      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008932:	4b57      	ldr	r3, [pc, #348]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	220c      	movs	r2, #12
 8008938:	4013      	ands	r3, r2
 800893a:	2b08      	cmp	r3, #8
 800893c:	d1ef      	bne.n	800891e <HAL_RCC_ClockConfig+0x106>
 800893e:	e03a      	b.n	80089b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d111      	bne.n	800896c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008948:	e009      	b.n	800895e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800894a:	f7fb fe94 	bl	8004676 <HAL_GetTick>
 800894e:	0002      	movs	r2, r0
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	4a4d      	ldr	r2, [pc, #308]	; (8008a8c <HAL_RCC_ClockConfig+0x274>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d901      	bls.n	800895e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e08f      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800895e:	4b4c      	ldr	r3, [pc, #304]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	220c      	movs	r2, #12
 8008964:	4013      	ands	r3, r2
 8008966:	2b0c      	cmp	r3, #12
 8008968:	d1ef      	bne.n	800894a <HAL_RCC_ClockConfig+0x132>
 800896a:	e024      	b.n	80089b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d11b      	bne.n	80089ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008974:	e009      	b.n	800898a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008976:	f7fb fe7e 	bl	8004676 <HAL_GetTick>
 800897a:	0002      	movs	r2, r0
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	4a42      	ldr	r2, [pc, #264]	; (8008a8c <HAL_RCC_ClockConfig+0x274>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d901      	bls.n	800898a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e079      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800898a:	4b41      	ldr	r3, [pc, #260]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	220c      	movs	r2, #12
 8008990:	4013      	ands	r3, r2
 8008992:	2b04      	cmp	r3, #4
 8008994:	d1ef      	bne.n	8008976 <HAL_RCC_ClockConfig+0x15e>
 8008996:	e00e      	b.n	80089b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008998:	f7fb fe6d 	bl	8004676 <HAL_GetTick>
 800899c:	0002      	movs	r2, r0
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	4a3a      	ldr	r2, [pc, #232]	; (8008a8c <HAL_RCC_ClockConfig+0x274>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e068      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80089ac:	4b38      	ldr	r3, [pc, #224]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	220c      	movs	r2, #12
 80089b2:	4013      	ands	r3, r2
 80089b4:	d1f0      	bne.n	8008998 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089b6:	4b34      	ldr	r3, [pc, #208]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2201      	movs	r2, #1
 80089bc:	4013      	ands	r3, r2
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d21e      	bcs.n	8008a02 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c4:	4b30      	ldr	r3, [pc, #192]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2201      	movs	r2, #1
 80089ca:	4393      	bics	r3, r2
 80089cc:	0019      	movs	r1, r3
 80089ce:	4b2e      	ldr	r3, [pc, #184]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80089d6:	f7fb fe4e 	bl	8004676 <HAL_GetTick>
 80089da:	0003      	movs	r3, r0
 80089dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089de:	e009      	b.n	80089f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089e0:	f7fb fe49 	bl	8004676 <HAL_GetTick>
 80089e4:	0002      	movs	r2, r0
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	4a28      	ldr	r2, [pc, #160]	; (8008a8c <HAL_RCC_ClockConfig+0x274>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d901      	bls.n	80089f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e044      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f4:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2201      	movs	r2, #1
 80089fa:	4013      	ands	r3, r2
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d1ee      	bne.n	80089e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2204      	movs	r2, #4
 8008a08:	4013      	ands	r3, r2
 8008a0a:	d009      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a0c:	4b20      	ldr	r3, [pc, #128]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	4a20      	ldr	r2, [pc, #128]	; (8008a94 <HAL_RCC_ClockConfig+0x27c>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	0019      	movs	r1, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	4b1d      	ldr	r3, [pc, #116]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2208      	movs	r2, #8
 8008a26:	4013      	ands	r3, r2
 8008a28:	d00a      	beq.n	8008a40 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a2a:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	4a1a      	ldr	r2, [pc, #104]	; (8008a98 <HAL_RCC_ClockConfig+0x280>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	0019      	movs	r1, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	00da      	lsls	r2, r3, #3
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a40:	f000 f832 	bl	8008aa8 <HAL_RCC_GetSysClockFreq>
 8008a44:	0001      	movs	r1, r0
 8008a46:	4b12      	ldr	r3, [pc, #72]	; (8008a90 <HAL_RCC_ClockConfig+0x278>)
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	091b      	lsrs	r3, r3, #4
 8008a4c:	220f      	movs	r2, #15
 8008a4e:	4013      	ands	r3, r2
 8008a50:	4a12      	ldr	r2, [pc, #72]	; (8008a9c <HAL_RCC_ClockConfig+0x284>)
 8008a52:	5cd3      	ldrb	r3, [r2, r3]
 8008a54:	000a      	movs	r2, r1
 8008a56:	40da      	lsrs	r2, r3
 8008a58:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <HAL_RCC_ClockConfig+0x288>)
 8008a5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a5c:	4b11      	ldr	r3, [pc, #68]	; (8008aa4 <HAL_RCC_ClockConfig+0x28c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	250b      	movs	r5, #11
 8008a62:	197c      	adds	r4, r7, r5
 8008a64:	0018      	movs	r0, r3
 8008a66:	f7fb fdfd 	bl	8004664 <HAL_InitTick>
 8008a6a:	0003      	movs	r3, r0
 8008a6c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008a6e:	197b      	adds	r3, r7, r5
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008a76:	197b      	adds	r3, r7, r5
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	e000      	b.n	8008a7e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	0018      	movs	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	b004      	add	sp, #16
 8008a84:	bdb0      	pop	{r4, r5, r7, pc}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	40022000 	.word	0x40022000
 8008a8c:	00001388 	.word	0x00001388
 8008a90:	40021000 	.word	0x40021000
 8008a94:	fffff8ff 	.word	0xfffff8ff
 8008a98:	ffffc7ff 	.word	0xffffc7ff
 8008a9c:	0801e0f4 	.word	0x0801e0f4
 8008aa0:	20000070 	.word	0x20000070
 8008aa4:	20000074 	.word	0x20000074

08008aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008aa8:	b5b0      	push	{r4, r5, r7, lr}
 8008aaa:	b08e      	sub	sp, #56	; 0x38
 8008aac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008aae:	4b4c      	ldr	r3, [pc, #304]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b0c      	cmp	r3, #12
 8008abc:	d014      	beq.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8008abe:	d900      	bls.n	8008ac2 <HAL_RCC_GetSysClockFreq+0x1a>
 8008ac0:	e07b      	b.n	8008bba <HAL_RCC_GetSysClockFreq+0x112>
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d002      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0x24>
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d00b      	beq.n	8008ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008aca:	e076      	b.n	8008bba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008acc:	4b44      	ldr	r3, [pc, #272]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2210      	movs	r2, #16
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	d002      	beq.n	8008adc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008ad6:	4b43      	ldr	r3, [pc, #268]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008ad8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008ada:	e07c      	b.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008adc:	4b42      	ldr	r3, [pc, #264]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x140>)
 8008ade:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008ae0:	e079      	b.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008ae2:	4b42      	ldr	r3, [pc, #264]	; (8008bec <HAL_RCC_GetSysClockFreq+0x144>)
 8008ae4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008ae6:	e076      	b.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	0c9a      	lsrs	r2, r3, #18
 8008aec:	230f      	movs	r3, #15
 8008aee:	401a      	ands	r2, r3
 8008af0:	4b3f      	ldr	r3, [pc, #252]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x148>)
 8008af2:	5c9b      	ldrb	r3, [r3, r2]
 8008af4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	0d9a      	lsrs	r2, r3, #22
 8008afa:	2303      	movs	r3, #3
 8008afc:	4013      	ands	r3, r2
 8008afe:	3301      	adds	r3, #1
 8008b00:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b02:	4b37      	ldr	r3, [pc, #220]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	2380      	movs	r3, #128	; 0x80
 8008b08:	025b      	lsls	r3, r3, #9
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	d01a      	beq.n	8008b44 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	2300      	movs	r3, #0
 8008b14:	61fb      	str	r3, [r7, #28]
 8008b16:	4a35      	ldr	r2, [pc, #212]	; (8008bec <HAL_RCC_GetSysClockFreq+0x144>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	69b8      	ldr	r0, [r7, #24]
 8008b1c:	69f9      	ldr	r1, [r7, #28]
 8008b1e:	f7f7 fcf3 	bl	8000508 <__aeabi_lmul>
 8008b22:	0002      	movs	r2, r0
 8008b24:	000b      	movs	r3, r1
 8008b26:	0010      	movs	r0, r2
 8008b28:	0019      	movs	r1, r3
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	613b      	str	r3, [r7, #16]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f7f7 fcc7 	bl	80004c8 <__aeabi_uldivmod>
 8008b3a:	0002      	movs	r2, r0
 8008b3c:	000b      	movs	r3, r1
 8008b3e:	0013      	movs	r3, r2
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
 8008b42:	e037      	b.n	8008bb4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008b44:	4b26      	ldr	r3, [pc, #152]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2210      	movs	r2, #16
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	d01a      	beq.n	8008b84 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	60bb      	str	r3, [r7, #8]
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	4a23      	ldr	r2, [pc, #140]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008b58:	2300      	movs	r3, #0
 8008b5a:	68b8      	ldr	r0, [r7, #8]
 8008b5c:	68f9      	ldr	r1, [r7, #12]
 8008b5e:	f7f7 fcd3 	bl	8000508 <__aeabi_lmul>
 8008b62:	0002      	movs	r2, r0
 8008b64:	000b      	movs	r3, r1
 8008b66:	0010      	movs	r0, r2
 8008b68:	0019      	movs	r1, r3
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	603b      	str	r3, [r7, #0]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	607b      	str	r3, [r7, #4]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f7f7 fca7 	bl	80004c8 <__aeabi_uldivmod>
 8008b7a:	0002      	movs	r2, r0
 8008b7c:	000b      	movs	r3, r1
 8008b7e:	0013      	movs	r3, r2
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
 8008b82:	e017      	b.n	8008bb4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	0018      	movs	r0, r3
 8008b88:	2300      	movs	r3, #0
 8008b8a:	0019      	movs	r1, r3
 8008b8c:	4a16      	ldr	r2, [pc, #88]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x140>)
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f7f7 fcba 	bl	8000508 <__aeabi_lmul>
 8008b94:	0002      	movs	r2, r0
 8008b96:	000b      	movs	r3, r1
 8008b98:	0010      	movs	r0, r2
 8008b9a:	0019      	movs	r1, r3
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	001c      	movs	r4, r3
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	001d      	movs	r5, r3
 8008ba4:	0022      	movs	r2, r4
 8008ba6:	002b      	movs	r3, r5
 8008ba8:	f7f7 fc8e 	bl	80004c8 <__aeabi_uldivmod>
 8008bac:	0002      	movs	r2, r0
 8008bae:	000b      	movs	r3, r1
 8008bb0:	0013      	movs	r3, r2
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008bb8:	e00d      	b.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008bba:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	0b5b      	lsrs	r3, r3, #13
 8008bc0:	2207      	movs	r2, #7
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	2280      	movs	r2, #128	; 0x80
 8008bcc:	0212      	lsls	r2, r2, #8
 8008bce:	409a      	lsls	r2, r3
 8008bd0:	0013      	movs	r3, r2
 8008bd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008bd4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008bd8:	0018      	movs	r0, r3
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	b00e      	add	sp, #56	; 0x38
 8008bde:	bdb0      	pop	{r4, r5, r7, pc}
 8008be0:	40021000 	.word	0x40021000
 8008be4:	003d0900 	.word	0x003d0900
 8008be8:	00f42400 	.word	0x00f42400
 8008bec:	007a1200 	.word	0x007a1200
 8008bf0:	0801e10c 	.word	0x0801e10c

08008bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bf8:	4b02      	ldr	r3, [pc, #8]	; (8008c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
}
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	20000070 	.word	0x20000070

08008c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c0c:	f7ff fff2 	bl	8008bf4 <HAL_RCC_GetHCLKFreq>
 8008c10:	0001      	movs	r1, r0
 8008c12:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	2207      	movs	r2, #7
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	4a04      	ldr	r2, [pc, #16]	; (8008c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c1e:	5cd3      	ldrb	r3, [r2, r3]
 8008c20:	40d9      	lsrs	r1, r3
 8008c22:	000b      	movs	r3, r1
}
 8008c24:	0018      	movs	r0, r3
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	40021000 	.word	0x40021000
 8008c30:	0801e104 	.word	0x0801e104

08008c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c38:	f7ff ffdc 	bl	8008bf4 <HAL_RCC_GetHCLKFreq>
 8008c3c:	0001      	movs	r1, r0
 8008c3e:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	0adb      	lsrs	r3, r3, #11
 8008c44:	2207      	movs	r2, #7
 8008c46:	4013      	ands	r3, r2
 8008c48:	4a04      	ldr	r2, [pc, #16]	; (8008c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c4a:	5cd3      	ldrb	r3, [r2, r3]
 8008c4c:	40d9      	lsrs	r1, r3
 8008c4e:	000b      	movs	r3, r1
}
 8008c50:	0018      	movs	r0, r3
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	40021000 	.word	0x40021000
 8008c5c:	0801e104 	.word	0x0801e104

08008c60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008c68:	2017      	movs	r0, #23
 8008c6a:	183b      	adds	r3, r7, r0
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2220      	movs	r2, #32
 8008c76:	4013      	ands	r3, r2
 8008c78:	d100      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8008c7a:	e0c2      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c7c:	4b98      	ldr	r3, [pc, #608]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c80:	2380      	movs	r3, #128	; 0x80
 8008c82:	055b      	lsls	r3, r3, #21
 8008c84:	4013      	ands	r3, r2
 8008c86:	d109      	bne.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c88:	4b95      	ldr	r3, [pc, #596]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8c:	4b94      	ldr	r3, [pc, #592]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c8e:	2180      	movs	r1, #128	; 0x80
 8008c90:	0549      	lsls	r1, r1, #21
 8008c92:	430a      	orrs	r2, r1
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008c96:	183b      	adds	r3, r7, r0
 8008c98:	2201      	movs	r2, #1
 8008c9a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c9c:	4b91      	ldr	r3, [pc, #580]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	2380      	movs	r3, #128	; 0x80
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	d11a      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ca8:	4b8e      	ldr	r3, [pc, #568]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	4b8d      	ldr	r3, [pc, #564]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008cae:	2180      	movs	r1, #128	; 0x80
 8008cb0:	0049      	lsls	r1, r1, #1
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cb6:	f7fb fcde 	bl	8004676 <HAL_GetTick>
 8008cba:	0003      	movs	r3, r0
 8008cbc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cc0:	f7fb fcd9 	bl	8004676 <HAL_GetTick>
 8008cc4:	0002      	movs	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b64      	cmp	r3, #100	; 0x64
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e102      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cd2:	4b84      	ldr	r3, [pc, #528]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	2380      	movs	r3, #128	; 0x80
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d0f0      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008cde:	4b80      	ldr	r3, [pc, #512]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	23c0      	movs	r3, #192	; 0xc0
 8008ce4:	039b      	lsls	r3, r3, #14
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	23c0      	movs	r3, #192	; 0xc0
 8008cf0:	039b      	lsls	r3, r3, #14
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d013      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	23c0      	movs	r3, #192	; 0xc0
 8008d00:	029b      	lsls	r3, r3, #10
 8008d02:	401a      	ands	r2, r3
 8008d04:	23c0      	movs	r3, #192	; 0xc0
 8008d06:	029b      	lsls	r3, r3, #10
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d10a      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d0c:	4b74      	ldr	r3, [pc, #464]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	2380      	movs	r3, #128	; 0x80
 8008d12:	029b      	lsls	r3, r3, #10
 8008d14:	401a      	ands	r2, r3
 8008d16:	2380      	movs	r3, #128	; 0x80
 8008d18:	029b      	lsls	r3, r3, #10
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d101      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e0da      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008d22:	4b6f      	ldr	r3, [pc, #444]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d26:	23c0      	movs	r3, #192	; 0xc0
 8008d28:	029b      	lsls	r3, r3, #10
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d03b      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	23c0      	movs	r3, #192	; 0xc0
 8008d3a:	029b      	lsls	r3, r3, #10
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d033      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	d02e      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008d4e:	4b64      	ldr	r3, [pc, #400]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d52:	4a65      	ldr	r2, [pc, #404]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d58:	4b61      	ldr	r3, [pc, #388]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d5c:	4b60      	ldr	r3, [pc, #384]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d5e:	2180      	movs	r1, #128	; 0x80
 8008d60:	0309      	lsls	r1, r1, #12
 8008d62:	430a      	orrs	r2, r1
 8008d64:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d66:	4b5e      	ldr	r3, [pc, #376]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d6a:	4b5d      	ldr	r3, [pc, #372]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d6c:	495f      	ldr	r1, [pc, #380]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008d6e:	400a      	ands	r2, r1
 8008d70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008d72:	4b5b      	ldr	r3, [pc, #364]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	2380      	movs	r3, #128	; 0x80
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	4013      	ands	r3, r2
 8008d80:	d014      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d82:	f7fb fc78 	bl	8004676 <HAL_GetTick>
 8008d86:	0003      	movs	r3, r0
 8008d88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d8a:	e009      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d8c:	f7fb fc73 	bl	8004676 <HAL_GetTick>
 8008d90:	0002      	movs	r2, r0
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	4a56      	ldr	r2, [pc, #344]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d901      	bls.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e09b      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008da0:	4b4f      	ldr	r3, [pc, #316]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008da4:	2380      	movs	r3, #128	; 0x80
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4013      	ands	r3, r2
 8008daa:	d0ef      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	23c0      	movs	r3, #192	; 0xc0
 8008db2:	029b      	lsls	r3, r3, #10
 8008db4:	401a      	ands	r2, r3
 8008db6:	23c0      	movs	r3, #192	; 0xc0
 8008db8:	029b      	lsls	r3, r3, #10
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d10c      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8008dbe:	4b48      	ldr	r3, [pc, #288]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a4c      	ldr	r2, [pc, #304]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	0019      	movs	r1, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	23c0      	movs	r3, #192	; 0xc0
 8008dce:	039b      	lsls	r3, r3, #14
 8008dd0:	401a      	ands	r2, r3
 8008dd2:	4b43      	ldr	r3, [pc, #268]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	4b41      	ldr	r3, [pc, #260]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dda:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	23c0      	movs	r3, #192	; 0xc0
 8008de2:	029b      	lsls	r3, r3, #10
 8008de4:	401a      	ands	r2, r3
 8008de6:	4b3e      	ldr	r3, [pc, #248]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008de8:	430a      	orrs	r2, r1
 8008dea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008dec:	2317      	movs	r3, #23
 8008dee:	18fb      	adds	r3, r7, r3
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d105      	bne.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008df6:	4b3a      	ldr	r3, [pc, #232]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfa:	4b39      	ldr	r3, [pc, #228]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dfc:	493e      	ldr	r1, [pc, #248]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008dfe:	400a      	ands	r2, r1
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2201      	movs	r2, #1
 8008e08:	4013      	ands	r3, r2
 8008e0a:	d009      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e0c:	4b34      	ldr	r3, [pc, #208]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e10:	2203      	movs	r2, #3
 8008e12:	4393      	bics	r3, r2
 8008e14:	0019      	movs	r1, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	4b31      	ldr	r3, [pc, #196]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2202      	movs	r2, #2
 8008e26:	4013      	ands	r3, r2
 8008e28:	d009      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e2a:	4b2d      	ldr	r3, [pc, #180]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2e:	220c      	movs	r2, #12
 8008e30:	4393      	bics	r3, r2
 8008e32:	0019      	movs	r1, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	4b29      	ldr	r3, [pc, #164]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2204      	movs	r2, #4
 8008e44:	4013      	ands	r3, r2
 8008e46:	d009      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e48:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4c:	4a2b      	ldr	r2, [pc, #172]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	0019      	movs	r1, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691a      	ldr	r2, [r3, #16]
 8008e56:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2208      	movs	r2, #8
 8008e62:	4013      	ands	r3, r2
 8008e64:	d009      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e66:	4b1e      	ldr	r3, [pc, #120]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6a:	4a25      	ldr	r2, [pc, #148]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	0019      	movs	r1, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	695a      	ldr	r2, [r3, #20]
 8008e74:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e76:	430a      	orrs	r2, r1
 8008e78:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	2380      	movs	r3, #128	; 0x80
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4013      	ands	r3, r2
 8008e84:	d009      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e86:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8a:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	0019      	movs	r1, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e96:	430a      	orrs	r2, r1
 8008e98:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2240      	movs	r2, #64	; 0x40
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea8:	4a16      	ldr	r2, [pc, #88]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	0019      	movs	r1, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2280      	movs	r2, #128	; 0x80
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	d009      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008ec2:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec6:	4a10      	ldr	r2, [pc, #64]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	0019      	movs	r1, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	69da      	ldr	r2, [r3, #28]
 8008ed0:	4b03      	ldr	r3, [pc, #12]	; (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	0018      	movs	r0, r3
 8008eda:	46bd      	mov	sp, r7
 8008edc:	b006      	add	sp, #24
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	40007000 	.word	0x40007000
 8008ee8:	fffcffff 	.word	0xfffcffff
 8008eec:	fff7ffff 	.word	0xfff7ffff
 8008ef0:	00001388 	.word	0x00001388
 8008ef4:	ffcfffff 	.word	0xffcfffff
 8008ef8:	efffffff 	.word	0xefffffff
 8008efc:	fffff3ff 	.word	0xfffff3ff
 8008f00:	ffffcfff 	.word	0xffffcfff
 8008f04:	fbffffff 	.word	0xfbffffff
 8008f08:	fff3ffff 	.word	0xfff3ffff

08008f0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e08e      	b.n	800903c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2221      	movs	r2, #33	; 0x21
 8008f22:	5c9b      	ldrb	r3, [r3, r2]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d107      	bne.n	8008f3a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	2100      	movs	r1, #0
 8008f30:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	0018      	movs	r0, r3
 8008f36:	f7fa fc37 	bl	80037a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2221      	movs	r2, #33	; 0x21
 8008f3e:	2102      	movs	r1, #2
 8008f40:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	22ca      	movs	r2, #202	; 0xca
 8008f48:	625a      	str	r2, [r3, #36]	; 0x24
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2253      	movs	r2, #83	; 0x53
 8008f50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	0018      	movs	r0, r3
 8008f56:	f000 fcf4 	bl	8009942 <RTC_EnterInitMode>
 8008f5a:	1e03      	subs	r3, r0, #0
 8008f5c:	d009      	beq.n	8008f72 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	22ff      	movs	r2, #255	; 0xff
 8008f64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2221      	movs	r2, #33	; 0x21
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e064      	b.n	800903c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4931      	ldr	r1, [pc, #196]	; (8009044 <HAL_RTC_Init+0x138>)
 8008f7e:	400a      	ands	r2, r1
 8008f80:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6899      	ldr	r1, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	431a      	orrs	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	68d2      	ldr	r2, [r2, #12]
 8008fa8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6919      	ldr	r1, [r3, #16]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	041a      	lsls	r2, r3, #16
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2180      	movs	r1, #128	; 0x80
 8008fca:	438a      	bics	r2, r1
 8008fcc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2103      	movs	r1, #3
 8008fda:	438a      	bics	r2, r1
 8008fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69da      	ldr	r2, [r3, #28]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	4013      	ands	r3, r2
 8009000:	d113      	bne.n	800902a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	0018      	movs	r0, r3
 8009006:	f000 fc75 	bl	80098f4 <HAL_RTC_WaitForSynchro>
 800900a:	1e03      	subs	r3, r0, #0
 800900c:	d00d      	beq.n	800902a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	22ff      	movs	r2, #255	; 0xff
 8009014:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2221      	movs	r2, #33	; 0x21
 800901a:	2104      	movs	r1, #4
 800901c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2220      	movs	r2, #32
 8009022:	2100      	movs	r1, #0
 8009024:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e008      	b.n	800903c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	22ff      	movs	r2, #255	; 0xff
 8009030:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2221      	movs	r2, #33	; 0x21
 8009036:	2101      	movs	r1, #1
 8009038:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800903a:	2300      	movs	r3, #0
  }
}
 800903c:	0018      	movs	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	b002      	add	sp, #8
 8009042:	bd80      	pop	{r7, pc}
 8009044:	ff8fffbf 	.word	0xff8fffbf

08009048 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2220      	movs	r2, #32
 8009058:	5c9b      	ldrb	r3, [r3, r2]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d101      	bne.n	8009062 <HAL_RTC_SetTime+0x1a>
 800905e:	2302      	movs	r3, #2
 8009060:	e0ad      	b.n	80091be <HAL_RTC_SetTime+0x176>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2220      	movs	r2, #32
 8009066:	2101      	movs	r1, #1
 8009068:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2221      	movs	r2, #33	; 0x21
 800906e:	2102      	movs	r1, #2
 8009070:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d125      	bne.n	80090c4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	2240      	movs	r2, #64	; 0x40
 8009080:	4013      	ands	r3, r2
 8009082:	d102      	bne.n	800908a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2200      	movs	r2, #0
 8009088:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	0018      	movs	r0, r3
 8009090:	f000 fc81 	bl	8009996 <RTC_ByteToBcd2>
 8009094:	0003      	movs	r3, r0
 8009096:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	0018      	movs	r0, r3
 800909e:	f000 fc7a 	bl	8009996 <RTC_ByteToBcd2>
 80090a2:	0003      	movs	r3, r0
 80090a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80090a6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	789b      	ldrb	r3, [r3, #2]
 80090ac:	0018      	movs	r0, r3
 80090ae:	f000 fc72 	bl	8009996 <RTC_ByteToBcd2>
 80090b2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80090b4:	0022      	movs	r2, r4
 80090b6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	78db      	ldrb	r3, [r3, #3]
 80090bc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e017      	b.n	80090f4 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	2240      	movs	r2, #64	; 0x40
 80090cc:	4013      	ands	r3, r2
 80090ce:	d102      	bne.n	80090d6 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2200      	movs	r2, #0
 80090d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80090e2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80090e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	78db      	ldrb	r3, [r3, #3]
 80090ee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80090f0:	4313      	orrs	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	22ca      	movs	r2, #202	; 0xca
 80090fa:	625a      	str	r2, [r3, #36]	; 0x24
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2253      	movs	r2, #83	; 0x53
 8009102:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	0018      	movs	r0, r3
 8009108:	f000 fc1b 	bl	8009942 <RTC_EnterInitMode>
 800910c:	1e03      	subs	r3, r0, #0
 800910e:	d00d      	beq.n	800912c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	22ff      	movs	r2, #255	; 0xff
 8009116:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2221      	movs	r2, #33	; 0x21
 800911c:	2104      	movs	r1, #4
 800911e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2220      	movs	r2, #32
 8009124:	2100      	movs	r1, #0
 8009126:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e048      	b.n	80091be <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	4925      	ldr	r1, [pc, #148]	; (80091c8 <HAL_RTC_SetTime+0x180>)
 8009134:	400a      	ands	r2, r1
 8009136:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689a      	ldr	r2, [r3, #8]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4922      	ldr	r1, [pc, #136]	; (80091cc <HAL_RTC_SetTime+0x184>)
 8009144:	400a      	ands	r2, r1
 8009146:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6899      	ldr	r1, [r3, #8]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	431a      	orrs	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2180      	movs	r1, #128	; 0x80
 800916c:	438a      	bics	r2, r1
 800916e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	2220      	movs	r2, #32
 8009178:	4013      	ands	r3, r2
 800917a:	d113      	bne.n	80091a4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	0018      	movs	r0, r3
 8009180:	f000 fbb8 	bl	80098f4 <HAL_RTC_WaitForSynchro>
 8009184:	1e03      	subs	r3, r0, #0
 8009186:	d00d      	beq.n	80091a4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2221      	movs	r2, #33	; 0x21
 8009194:	2104      	movs	r1, #4
 8009196:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2220      	movs	r2, #32
 800919c:	2100      	movs	r1, #0
 800919e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e00c      	b.n	80091be <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	22ff      	movs	r2, #255	; 0xff
 80091aa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2221      	movs	r2, #33	; 0x21
 80091b0:	2101      	movs	r1, #1
 80091b2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2220      	movs	r2, #32
 80091b8:	2100      	movs	r1, #0
 80091ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80091bc:	2300      	movs	r3, #0
  }
}
 80091be:	0018      	movs	r0, r3
 80091c0:	46bd      	mov	sp, r7
 80091c2:	b007      	add	sp, #28
 80091c4:	bd90      	pop	{r4, r7, pc}
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	007f7f7f 	.word	0x007f7f7f
 80091cc:	fffbffff 	.word	0xfffbffff

080091d0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	045b      	lsls	r3, r3, #17
 80091ee:	0c5a      	lsrs	r2, r3, #17
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a22      	ldr	r2, [pc, #136]	; (8009284 <HAL_RTC_GetTime+0xb4>)
 80091fc:	4013      	ands	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	0c1b      	lsrs	r3, r3, #16
 8009204:	b2db      	uxtb	r3, r3
 8009206:	223f      	movs	r2, #63	; 0x3f
 8009208:	4013      	ands	r3, r2
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	0a1b      	lsrs	r3, r3, #8
 8009214:	b2db      	uxtb	r3, r3
 8009216:	227f      	movs	r2, #127	; 0x7f
 8009218:	4013      	ands	r3, r2
 800921a:	b2da      	uxtb	r2, r3
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	227f      	movs	r2, #127	; 0x7f
 8009226:	4013      	ands	r3, r2
 8009228:	b2da      	uxtb	r2, r3
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	0c1b      	lsrs	r3, r3, #16
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2240      	movs	r2, #64	; 0x40
 8009236:	4013      	ands	r3, r2
 8009238:	b2da      	uxtb	r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d11a      	bne.n	800927a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	0018      	movs	r0, r3
 800924a:	f000 fbcc 	bl	80099e6 <RTC_Bcd2ToByte>
 800924e:	0003      	movs	r3, r0
 8009250:	001a      	movs	r2, r3
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	0018      	movs	r0, r3
 800925c:	f000 fbc3 	bl	80099e6 <RTC_Bcd2ToByte>
 8009260:	0003      	movs	r3, r0
 8009262:	001a      	movs	r2, r3
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	789b      	ldrb	r3, [r3, #2]
 800926c:	0018      	movs	r0, r3
 800926e:	f000 fbba 	bl	80099e6 <RTC_Bcd2ToByte>
 8009272:	0003      	movs	r3, r0
 8009274:	001a      	movs	r2, r3
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	0018      	movs	r0, r3
 800927e:	46bd      	mov	sp, r7
 8009280:	b006      	add	sp, #24
 8009282:	bd80      	pop	{r7, pc}
 8009284:	007f7f7f 	.word	0x007f7f7f

08009288 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2220      	movs	r2, #32
 8009298:	5c9b      	ldrb	r3, [r3, r2]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_RTC_SetDate+0x1a>
 800929e:	2302      	movs	r3, #2
 80092a0:	e099      	b.n	80093d6 <HAL_RTC_SetDate+0x14e>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2220      	movs	r2, #32
 80092a6:	2101      	movs	r1, #1
 80092a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2221      	movs	r2, #33	; 0x21
 80092ae:	2102      	movs	r1, #2
 80092b0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10e      	bne.n	80092d6 <HAL_RTC_SetDate+0x4e>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	001a      	movs	r2, r3
 80092be:	2310      	movs	r3, #16
 80092c0:	4013      	ands	r3, r2
 80092c2:	d008      	beq.n	80092d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	785b      	ldrb	r3, [r3, #1]
 80092c8:	2210      	movs	r2, #16
 80092ca:	4393      	bics	r3, r2
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	330a      	adds	r3, #10
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d11c      	bne.n	8009316 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	78db      	ldrb	r3, [r3, #3]
 80092e0:	0018      	movs	r0, r3
 80092e2:	f000 fb58 	bl	8009996 <RTC_ByteToBcd2>
 80092e6:	0003      	movs	r3, r0
 80092e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	0018      	movs	r0, r3
 80092f0:	f000 fb51 	bl	8009996 <RTC_ByteToBcd2>
 80092f4:	0003      	movs	r3, r0
 80092f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80092f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	789b      	ldrb	r3, [r3, #2]
 80092fe:	0018      	movs	r0, r3
 8009300:	f000 fb49 	bl	8009996 <RTC_ByteToBcd2>
 8009304:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009306:	0022      	movs	r2, r4
 8009308:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009310:	4313      	orrs	r3, r2
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	e00e      	b.n	8009334 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	78db      	ldrb	r3, [r3, #3]
 800931a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	785b      	ldrb	r3, [r3, #1]
 8009320:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009322:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009328:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009330:	4313      	orrs	r3, r2
 8009332:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	22ca      	movs	r2, #202	; 0xca
 800933a:	625a      	str	r2, [r3, #36]	; 0x24
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2253      	movs	r2, #83	; 0x53
 8009342:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	0018      	movs	r0, r3
 8009348:	f000 fafb 	bl	8009942 <RTC_EnterInitMode>
 800934c:	1e03      	subs	r3, r0, #0
 800934e:	d00d      	beq.n	800936c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	22ff      	movs	r2, #255	; 0xff
 8009356:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2221      	movs	r2, #33	; 0x21
 800935c:	2104      	movs	r1, #4
 800935e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2220      	movs	r2, #32
 8009364:	2100      	movs	r1, #0
 8009366:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e034      	b.n	80093d6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	491b      	ldr	r1, [pc, #108]	; (80093e0 <HAL_RTC_SetDate+0x158>)
 8009374:	400a      	ands	r2, r1
 8009376:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2180      	movs	r1, #128	; 0x80
 8009384:	438a      	bics	r2, r1
 8009386:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	2220      	movs	r2, #32
 8009390:	4013      	ands	r3, r2
 8009392:	d113      	bne.n	80093bc <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	0018      	movs	r0, r3
 8009398:	f000 faac 	bl	80098f4 <HAL_RTC_WaitForSynchro>
 800939c:	1e03      	subs	r3, r0, #0
 800939e:	d00d      	beq.n	80093bc <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	22ff      	movs	r2, #255	; 0xff
 80093a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2221      	movs	r2, #33	; 0x21
 80093ac:	2104      	movs	r1, #4
 80093ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2220      	movs	r2, #32
 80093b4:	2100      	movs	r1, #0
 80093b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e00c      	b.n	80093d6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	22ff      	movs	r2, #255	; 0xff
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2221      	movs	r2, #33	; 0x21
 80093c8:	2101      	movs	r1, #1
 80093ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	2100      	movs	r1, #0
 80093d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80093d4:	2300      	movs	r3, #0
  }
}
 80093d6:	0018      	movs	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	b007      	add	sp, #28
 80093dc:	bd90      	pop	{r4, r7, pc}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	00ffff3f 	.word	0x00ffff3f

080093e4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	4a21      	ldr	r2, [pc, #132]	; (800947c <HAL_RTC_GetDate+0x98>)
 80093f8:	4013      	ands	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	0c1b      	lsrs	r3, r3, #16
 8009400:	b2da      	uxtb	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	0a1b      	lsrs	r3, r3, #8
 800940a:	b2db      	uxtb	r3, r3
 800940c:	221f      	movs	r2, #31
 800940e:	4013      	ands	r3, r2
 8009410:	b2da      	uxtb	r2, r3
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	b2db      	uxtb	r3, r3
 800941a:	223f      	movs	r2, #63	; 0x3f
 800941c:	4013      	ands	r3, r2
 800941e:	b2da      	uxtb	r2, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	0b5b      	lsrs	r3, r3, #13
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2207      	movs	r2, #7
 800942c:	4013      	ands	r3, r2
 800942e:	b2da      	uxtb	r2, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d11a      	bne.n	8009470 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	78db      	ldrb	r3, [r3, #3]
 800943e:	0018      	movs	r0, r3
 8009440:	f000 fad1 	bl	80099e6 <RTC_Bcd2ToByte>
 8009444:	0003      	movs	r3, r0
 8009446:	001a      	movs	r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	0018      	movs	r0, r3
 8009452:	f000 fac8 	bl	80099e6 <RTC_Bcd2ToByte>
 8009456:	0003      	movs	r3, r0
 8009458:	001a      	movs	r2, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	789b      	ldrb	r3, [r3, #2]
 8009462:	0018      	movs	r0, r3
 8009464:	f000 fabf 	bl	80099e6 <RTC_Bcd2ToByte>
 8009468:	0003      	movs	r3, r0
 800946a:	001a      	movs	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	0018      	movs	r0, r3
 8009474:	46bd      	mov	sp, r7
 8009476:	b006      	add	sp, #24
 8009478:	bd80      	pop	{r7, pc}
 800947a:	46c0      	nop			; (mov r8, r8)
 800947c:	00ffff3f 	.word	0x00ffff3f

08009480 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009480:	b590      	push	{r4, r7, lr}
 8009482:	b089      	sub	sp, #36	; 0x24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2220      	movs	r2, #32
 8009490:	5c9b      	ldrb	r3, [r3, r2]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d101      	bne.n	800949a <HAL_RTC_SetAlarm_IT+0x1a>
 8009496:	2302      	movs	r3, #2
 8009498:	e130      	b.n	80096fc <HAL_RTC_SetAlarm_IT+0x27c>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2220      	movs	r2, #32
 800949e:	2101      	movs	r1, #1
 80094a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2221      	movs	r2, #33	; 0x21
 80094a6:	2102      	movs	r1, #2
 80094a8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d136      	bne.n	800951e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2240      	movs	r2, #64	; 0x40
 80094b8:	4013      	ands	r3, r2
 80094ba:	d102      	bne.n	80094c2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2200      	movs	r2, #0
 80094c0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	0018      	movs	r0, r3
 80094c8:	f000 fa65 	bl	8009996 <RTC_ByteToBcd2>
 80094cc:	0003      	movs	r3, r0
 80094ce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	0018      	movs	r0, r3
 80094d6:	f000 fa5e 	bl	8009996 <RTC_ByteToBcd2>
 80094da:	0003      	movs	r3, r0
 80094dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80094de:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	789b      	ldrb	r3, [r3, #2]
 80094e4:	0018      	movs	r0, r3
 80094e6:	f000 fa56 	bl	8009996 <RTC_ByteToBcd2>
 80094ea:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80094ec:	0022      	movs	r2, r4
 80094ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	78db      	ldrb	r3, [r3, #3]
 80094f4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80094f6:	431a      	orrs	r2, r3
 80094f8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2220      	movs	r2, #32
 80094fe:	5c9b      	ldrb	r3, [r3, r2]
 8009500:	0018      	movs	r0, r3
 8009502:	f000 fa48 	bl	8009996 <RTC_ByteToBcd2>
 8009506:	0003      	movs	r3, r0
 8009508:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800950a:	0022      	movs	r2, r4
 800950c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009512:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009518:	4313      	orrs	r3, r2
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	e022      	b.n	8009564 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	2240      	movs	r2, #64	; 0x40
 8009526:	4013      	ands	r3, r2
 8009528:	d102      	bne.n	8009530 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2200      	movs	r2, #0
 800952e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800953c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009542:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	78db      	ldrb	r3, [r3, #3]
 8009548:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800954a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2120      	movs	r1, #32
 8009550:	5c5b      	ldrb	r3, [r3, r1]
 8009552:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009554:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800955a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009560:	4313      	orrs	r3, r2
 8009562:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	4313      	orrs	r3, r2
 800956e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	22ca      	movs	r2, #202	; 0xca
 8009576:	625a      	str	r2, [r3, #36]	; 0x24
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2253      	movs	r2, #83	; 0x53
 800957e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009584:	2380      	movs	r3, #128	; 0x80
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	429a      	cmp	r2, r3
 800958a:	d14e      	bne.n	800962a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	495b      	ldr	r1, [pc, #364]	; (8009704 <HAL_RTC_SetAlarm_IT+0x284>)
 8009598:	400a      	ands	r2, r1
 800959a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	22ff      	movs	r2, #255	; 0xff
 80095a4:	401a      	ands	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4957      	ldr	r1, [pc, #348]	; (8009708 <HAL_RTC_SetAlarm_IT+0x288>)
 80095ac:	430a      	orrs	r2, r1
 80095ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80095b0:	f7fb f861 	bl	8004676 <HAL_GetTick>
 80095b4:	0003      	movs	r3, r0
 80095b6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80095b8:	e016      	b.n	80095e8 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095ba:	f7fb f85c 	bl	8004676 <HAL_GetTick>
 80095be:	0002      	movs	r2, r0
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	1ad2      	subs	r2, r2, r3
 80095c4:	23fa      	movs	r3, #250	; 0xfa
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d90d      	bls.n	80095e8 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	22ff      	movs	r2, #255	; 0xff
 80095d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2221      	movs	r2, #33	; 0x21
 80095d8:	2103      	movs	r1, #3
 80095da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2220      	movs	r2, #32
 80095e0:	2100      	movs	r1, #0
 80095e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e089      	b.n	80096fc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	2201      	movs	r2, #1
 80095f0:	4013      	ands	r3, r2
 80095f2:	d0e2      	beq.n	80095ba <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689a      	ldr	r2, [r3, #8]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2180      	movs	r1, #128	; 0x80
 8009610:	0049      	lsls	r1, r1, #1
 8009612:	430a      	orrs	r2, r1
 8009614:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2180      	movs	r1, #128	; 0x80
 8009622:	0149      	lsls	r1, r1, #5
 8009624:	430a      	orrs	r2, r1
 8009626:	609a      	str	r2, [r3, #8]
 8009628:	e04d      	b.n	80096c6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4935      	ldr	r1, [pc, #212]	; (800970c <HAL_RTC_SetAlarm_IT+0x28c>)
 8009636:	400a      	ands	r2, r1
 8009638:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	22ff      	movs	r2, #255	; 0xff
 8009642:	401a      	ands	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4931      	ldr	r1, [pc, #196]	; (8009710 <HAL_RTC_SetAlarm_IT+0x290>)
 800964a:	430a      	orrs	r2, r1
 800964c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800964e:	f7fb f812 	bl	8004676 <HAL_GetTick>
 8009652:	0003      	movs	r3, r0
 8009654:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009656:	e016      	b.n	8009686 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009658:	f7fb f80d 	bl	8004676 <HAL_GetTick>
 800965c:	0002      	movs	r2, r0
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	1ad2      	subs	r2, r2, r3
 8009662:	23fa      	movs	r3, #250	; 0xfa
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	429a      	cmp	r2, r3
 8009668:	d90d      	bls.n	8009686 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	22ff      	movs	r2, #255	; 0xff
 8009670:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2221      	movs	r2, #33	; 0x21
 8009676:	2103      	movs	r1, #3
 8009678:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2220      	movs	r2, #32
 800967e:	2100      	movs	r1, #0
 8009680:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e03a      	b.n	80096fc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	2202      	movs	r2, #2
 800968e:	4013      	ands	r3, r2
 8009690:	d0e2      	beq.n	8009658 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2180      	movs	r1, #128	; 0x80
 80096ae:	0089      	lsls	r1, r1, #2
 80096b0:	430a      	orrs	r2, r1
 80096b2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689a      	ldr	r2, [r3, #8]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2180      	movs	r1, #128	; 0x80
 80096c0:	0189      	lsls	r1, r1, #6
 80096c2:	430a      	orrs	r2, r1
 80096c4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80096c6:	4b13      	ldr	r3, [pc, #76]	; (8009714 <HAL_RTC_SetAlarm_IT+0x294>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	4b12      	ldr	r3, [pc, #72]	; (8009714 <HAL_RTC_SetAlarm_IT+0x294>)
 80096cc:	2180      	movs	r1, #128	; 0x80
 80096ce:	0289      	lsls	r1, r1, #10
 80096d0:	430a      	orrs	r2, r1
 80096d2:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <HAL_RTC_SetAlarm_IT+0x294>)
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <HAL_RTC_SetAlarm_IT+0x294>)
 80096da:	2180      	movs	r1, #128	; 0x80
 80096dc:	0289      	lsls	r1, r1, #10
 80096de:	430a      	orrs	r2, r1
 80096e0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	22ff      	movs	r2, #255	; 0xff
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2221      	movs	r2, #33	; 0x21
 80096ee:	2101      	movs	r1, #1
 80096f0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2220      	movs	r2, #32
 80096f6:	2100      	movs	r1, #0
 80096f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	0018      	movs	r0, r3
 80096fe:	46bd      	mov	sp, r7
 8009700:	b009      	add	sp, #36	; 0x24
 8009702:	bd90      	pop	{r4, r7, pc}
 8009704:	fffffeff 	.word	0xfffffeff
 8009708:	fffffe7f 	.word	0xfffffe7f
 800970c:	fffffdff 	.word	0xfffffdff
 8009710:	fffffd7f 	.word	0xfffffd7f
 8009714:	40010400 	.word	0x40010400

08009718 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2220      	movs	r2, #32
 8009726:	5c9b      	ldrb	r3, [r3, r2]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d101      	bne.n	8009730 <HAL_RTC_DeactivateAlarm+0x18>
 800972c:	2302      	movs	r3, #2
 800972e:	e086      	b.n	800983e <HAL_RTC_DeactivateAlarm+0x126>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2220      	movs	r2, #32
 8009734:	2101      	movs	r1, #1
 8009736:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2221      	movs	r2, #33	; 0x21
 800973c:	2102      	movs	r1, #2
 800973e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	22ca      	movs	r2, #202	; 0xca
 8009746:	625a      	str	r2, [r3, #36]	; 0x24
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2253      	movs	r2, #83	; 0x53
 800974e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	2380      	movs	r3, #128	; 0x80
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	429a      	cmp	r2, r3
 8009758:	d132      	bne.n	80097c0 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4938      	ldr	r1, [pc, #224]	; (8009848 <HAL_RTC_DeactivateAlarm+0x130>)
 8009766:	400a      	ands	r2, r1
 8009768:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4935      	ldr	r1, [pc, #212]	; (800984c <HAL_RTC_DeactivateAlarm+0x134>)
 8009776:	400a      	ands	r2, r1
 8009778:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800977a:	f7fa ff7c 	bl	8004676 <HAL_GetTick>
 800977e:	0003      	movs	r3, r0
 8009780:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009782:	e016      	b.n	80097b2 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009784:	f7fa ff77 	bl	8004676 <HAL_GetTick>
 8009788:	0002      	movs	r2, r0
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1ad2      	subs	r2, r2, r3
 800978e:	23fa      	movs	r3, #250	; 0xfa
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	429a      	cmp	r2, r3
 8009794:	d90d      	bls.n	80097b2 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	22ff      	movs	r2, #255	; 0xff
 800979c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2221      	movs	r2, #33	; 0x21
 80097a2:	2103      	movs	r1, #3
 80097a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	2100      	movs	r1, #0
 80097ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e045      	b.n	800983e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	2201      	movs	r2, #1
 80097ba:	4013      	ands	r3, r2
 80097bc:	d0e2      	beq.n	8009784 <HAL_RTC_DeactivateAlarm+0x6c>
 80097be:	e031      	b.n	8009824 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4921      	ldr	r1, [pc, #132]	; (8009850 <HAL_RTC_DeactivateAlarm+0x138>)
 80097cc:	400a      	ands	r2, r1
 80097ce:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	689a      	ldr	r2, [r3, #8]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	491e      	ldr	r1, [pc, #120]	; (8009854 <HAL_RTC_DeactivateAlarm+0x13c>)
 80097dc:	400a      	ands	r2, r1
 80097de:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80097e0:	f7fa ff49 	bl	8004676 <HAL_GetTick>
 80097e4:	0003      	movs	r3, r0
 80097e6:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80097e8:	e016      	b.n	8009818 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097ea:	f7fa ff44 	bl	8004676 <HAL_GetTick>
 80097ee:	0002      	movs	r2, r0
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	1ad2      	subs	r2, r2, r3
 80097f4:	23fa      	movs	r3, #250	; 0xfa
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d90d      	bls.n	8009818 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	22ff      	movs	r2, #255	; 0xff
 8009802:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2221      	movs	r2, #33	; 0x21
 8009808:	2103      	movs	r1, #3
 800980a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2220      	movs	r2, #32
 8009810:	2100      	movs	r1, #0
 8009812:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e012      	b.n	800983e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	2202      	movs	r2, #2
 8009820:	4013      	ands	r3, r2
 8009822:	d0e2      	beq.n	80097ea <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	22ff      	movs	r2, #255	; 0xff
 800982a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2221      	movs	r2, #33	; 0x21
 8009830:	2101      	movs	r1, #1
 8009832:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	2100      	movs	r1, #0
 800983a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	0018      	movs	r0, r3
 8009840:	46bd      	mov	sp, r7
 8009842:	b004      	add	sp, #16
 8009844:	bd80      	pop	{r7, pc}
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	fffffeff 	.word	0xfffffeff
 800984c:	ffffefff 	.word	0xffffefff
 8009850:	fffffdff 	.word	0xfffffdff
 8009854:	ffffdfff 	.word	0xffffdfff

08009858 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	2380      	movs	r3, #128	; 0x80
 8009868:	015b      	lsls	r3, r3, #5
 800986a:	4013      	ands	r3, r2
 800986c:	d014      	beq.n	8009898 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68da      	ldr	r2, [r3, #12]
 8009874:	2380      	movs	r3, #128	; 0x80
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	4013      	ands	r3, r2
 800987a:	d00d      	beq.n	8009898 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	0018      	movs	r0, r3
 8009880:	f7fa f923 	bl	8003aca <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	22ff      	movs	r2, #255	; 0xff
 800988c:	401a      	ands	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4915      	ldr	r1, [pc, #84]	; (80098e8 <HAL_RTC_AlarmIRQHandler+0x90>)
 8009894:	430a      	orrs	r2, r1
 8009896:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689a      	ldr	r2, [r3, #8]
 800989e:	2380      	movs	r3, #128	; 0x80
 80098a0:	019b      	lsls	r3, r3, #6
 80098a2:	4013      	ands	r3, r2
 80098a4:	d014      	beq.n	80098d0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68da      	ldr	r2, [r3, #12]
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4013      	ands	r3, r2
 80098b2:	d00d      	beq.n	80098d0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	0018      	movs	r0, r3
 80098b8:	f000 f910 	bl	8009adc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	22ff      	movs	r2, #255	; 0xff
 80098c4:	401a      	ands	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4908      	ldr	r1, [pc, #32]	; (80098ec <HAL_RTC_AlarmIRQHandler+0x94>)
 80098cc:	430a      	orrs	r2, r1
 80098ce:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <HAL_RTC_AlarmIRQHandler+0x98>)
 80098d2:	2280      	movs	r2, #128	; 0x80
 80098d4:	0292      	lsls	r2, r2, #10
 80098d6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2221      	movs	r2, #33	; 0x21
 80098dc:	2101      	movs	r1, #1
 80098de:	5499      	strb	r1, [r3, r2]
}
 80098e0:	46c0      	nop			; (mov r8, r8)
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b002      	add	sp, #8
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	fffffe7f 	.word	0xfffffe7f
 80098ec:	fffffd7f 	.word	0xfffffd7f
 80098f0:	40010400 	.word	0x40010400

080098f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	21a0      	movs	r1, #160	; 0xa0
 8009908:	438a      	bics	r2, r1
 800990a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800990c:	f7fa feb3 	bl	8004676 <HAL_GetTick>
 8009910:	0003      	movs	r3, r0
 8009912:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009914:	e00a      	b.n	800992c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009916:	f7fa feae 	bl	8004676 <HAL_GetTick>
 800991a:	0002      	movs	r2, r0
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	23fa      	movs	r3, #250	; 0xfa
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	429a      	cmp	r2, r3
 8009926:	d901      	bls.n	800992c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e006      	b.n	800993a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	2220      	movs	r2, #32
 8009934:	4013      	ands	r3, r2
 8009936:	d0ee      	beq.n	8009916 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	0018      	movs	r0, r3
 800993c:	46bd      	mov	sp, r7
 800993e:	b004      	add	sp, #16
 8009940:	bd80      	pop	{r7, pc}

08009942 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	2240      	movs	r2, #64	; 0x40
 8009952:	4013      	ands	r3, r2
 8009954:	d11a      	bne.n	800998c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2201      	movs	r2, #1
 800995c:	4252      	negs	r2, r2
 800995e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009960:	f7fa fe89 	bl	8004676 <HAL_GetTick>
 8009964:	0003      	movs	r3, r0
 8009966:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009968:	e00a      	b.n	8009980 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800996a:	f7fa fe84 	bl	8004676 <HAL_GetTick>
 800996e:	0002      	movs	r2, r0
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	23fa      	movs	r3, #250	; 0xfa
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	429a      	cmp	r2, r3
 800997a:	d901      	bls.n	8009980 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e006      	b.n	800998e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	2240      	movs	r2, #64	; 0x40
 8009988:	4013      	ands	r3, r2
 800998a:	d0ee      	beq.n	800996a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	0018      	movs	r0, r3
 8009990:	46bd      	mov	sp, r7
 8009992:	b004      	add	sp, #16
 8009994:	bd80      	pop	{r7, pc}

08009996 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	0002      	movs	r2, r0
 800999e:	1dfb      	adds	r3, r7, #7
 80099a0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80099a6:	230b      	movs	r3, #11
 80099a8:	18fb      	adds	r3, r7, r3
 80099aa:	1dfa      	adds	r2, r7, #7
 80099ac:	7812      	ldrb	r2, [r2, #0]
 80099ae:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80099b0:	e008      	b.n	80099c4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3301      	adds	r3, #1
 80099b6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80099b8:	220b      	movs	r2, #11
 80099ba:	18bb      	adds	r3, r7, r2
 80099bc:	18ba      	adds	r2, r7, r2
 80099be:	7812      	ldrb	r2, [r2, #0]
 80099c0:	3a0a      	subs	r2, #10
 80099c2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80099c4:	210b      	movs	r1, #11
 80099c6:	187b      	adds	r3, r7, r1
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	d8f1      	bhi.n	80099b2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	187b      	adds	r3, r7, r1
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	4313      	orrs	r3, r2
 80099dc:	b2db      	uxtb	r3, r3
}
 80099de:	0018      	movs	r0, r3
 80099e0:	46bd      	mov	sp, r7
 80099e2:	b004      	add	sp, #16
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	0002      	movs	r2, r0
 80099ee:	1dfb      	adds	r3, r7, #7
 80099f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80099f2:	1dfb      	adds	r3, r7, #7
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	091b      	lsrs	r3, r3, #4
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	001a      	movs	r2, r3
 80099fc:	0013      	movs	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	189b      	adds	r3, r3, r2
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	1dfb      	adds	r3, r7, #7
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	210f      	movs	r1, #15
 8009a10:	400b      	ands	r3, r1
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	18d3      	adds	r3, r2, r3
 8009a16:	b2db      	uxtb	r3, r3
}
 8009a18:	0018      	movs	r0, r3
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	b004      	add	sp, #16
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3350      	adds	r3, #80	; 0x50
 8009a32:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	18d3      	adds	r3, r2, r3
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	601a      	str	r2, [r3, #0]
}
 8009a44:	46c0      	nop			; (mov r8, r8)
 8009a46:	46bd      	mov	sp, r7
 8009a48:	b006      	add	sp, #24
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3350      	adds	r3, #80	; 0x50
 8009a5c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	18d3      	adds	r3, r2, r3
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
}
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b004      	add	sp, #16
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	5c9b      	ldrb	r3, [r3, r2]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d101      	bne.n	8009a8a <HAL_RTCEx_EnableBypassShadow+0x16>
 8009a86:	2302      	movs	r3, #2
 8009a88:	e024      	b.n	8009ad4 <HAL_RTCEx_EnableBypassShadow+0x60>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	2101      	movs	r1, #1
 8009a90:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2221      	movs	r2, #33	; 0x21
 8009a96:	2102      	movs	r1, #2
 8009a98:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	22ca      	movs	r2, #202	; 0xca
 8009aa0:	625a      	str	r2, [r3, #36]	; 0x24
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2253      	movs	r2, #83	; 0x53
 8009aa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2120      	movs	r1, #32
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	22ff      	movs	r2, #255	; 0xff
 8009ac0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2221      	movs	r2, #33	; 0x21
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2220      	movs	r2, #32
 8009ace:	2100      	movs	r1, #0
 8009ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	b002      	add	sp, #8
 8009ada:	bd80      	pop	{r7, pc}

08009adc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009ae4:	46c0      	nop			; (mov r8, r8)
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	b002      	add	sp, #8
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e083      	b.n	8009c06 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d109      	bne.n	8009b1a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	2382      	movs	r3, #130	; 0x82
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d009      	beq.n	8009b26 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	61da      	str	r2, [r3, #28]
 8009b18:	e005      	b.n	8009b26 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2251      	movs	r2, #81	; 0x51
 8009b30:	5c9b      	ldrb	r3, [r3, r2]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d107      	bne.n	8009b48 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2250      	movs	r2, #80	; 0x50
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	0018      	movs	r0, r3
 8009b44:	f000 f866 	bl	8009c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2251      	movs	r2, #81	; 0x51
 8009b4c:	2102      	movs	r1, #2
 8009b4e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2140      	movs	r1, #64	; 0x40
 8009b5c:	438a      	bics	r2, r1
 8009b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	2382      	movs	r3, #130	; 0x82
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	401a      	ands	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6899      	ldr	r1, [r3, #8]
 8009b6e:	2384      	movs	r3, #132	; 0x84
 8009b70:	021b      	lsls	r3, r3, #8
 8009b72:	400b      	ands	r3, r1
 8009b74:	431a      	orrs	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68d9      	ldr	r1, [r3, #12]
 8009b7a:	2380      	movs	r3, #128	; 0x80
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	400b      	ands	r3, r1
 8009b80:	431a      	orrs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2102      	movs	r1, #2
 8009b88:	400b      	ands	r3, r1
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	2101      	movs	r1, #1
 8009b92:	400b      	ands	r3, r1
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6999      	ldr	r1, [r3, #24]
 8009b9a:	2380      	movs	r3, #128	; 0x80
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	400b      	ands	r3, r1
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	2138      	movs	r1, #56	; 0x38
 8009ba8:	400b      	ands	r3, r1
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	2180      	movs	r1, #128	; 0x80
 8009bb2:	400b      	ands	r3, r1
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	0011      	movs	r1, r2
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bbc:	2380      	movs	r3, #128	; 0x80
 8009bbe:	019b      	lsls	r3, r3, #6
 8009bc0:	401a      	ands	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	0c1b      	lsrs	r3, r3, #16
 8009bd0:	2204      	movs	r2, #4
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	0019      	movs	r1, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2210      	movs	r2, #16
 8009bdc:	401a      	ands	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69da      	ldr	r2, [r3, #28]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4907      	ldr	r1, [pc, #28]	; (8009c10 <HAL_SPI_Init+0x124>)
 8009bf2:	400a      	ands	r2, r1
 8009bf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2251      	movs	r2, #81	; 0x51
 8009c00:	2101      	movs	r1, #1
 8009c02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	0018      	movs	r0, r3
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	b002      	add	sp, #8
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	fffff7ff 	.word	0xfffff7ff

08009c14 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8009c1c:	46c0      	nop			; (mov r8, r8)
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b002      	add	sp, #8
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08c      	sub	sp, #48	; 0x30
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	001a      	movs	r2, r3
 8009c32:	1cbb      	adds	r3, r7, #2
 8009c34:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c36:	2301      	movs	r3, #1
 8009c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c3a:	232b      	movs	r3, #43	; 0x2b
 8009c3c:	18fb      	adds	r3, r7, r3
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2250      	movs	r2, #80	; 0x50
 8009c46:	5c9b      	ldrb	r3, [r3, r2]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_SPI_TransmitReceive+0x2c>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e1a0      	b.n	8009f92 <HAL_SPI_TransmitReceive+0x36e>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2250      	movs	r2, #80	; 0x50
 8009c54:	2101      	movs	r1, #1
 8009c56:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c58:	f7fa fd0d 	bl	8004676 <HAL_GetTick>
 8009c5c:	0003      	movs	r3, r0
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c60:	2023      	movs	r0, #35	; 0x23
 8009c62:	183b      	adds	r3, r7, r0
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	2151      	movs	r1, #81	; 0x51
 8009c68:	5c52      	ldrb	r2, [r2, r1]
 8009c6a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c72:	231a      	movs	r3, #26
 8009c74:	18fb      	adds	r3, r7, r3
 8009c76:	1cba      	adds	r2, r7, #2
 8009c78:	8812      	ldrh	r2, [r2, #0]
 8009c7a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c7c:	183b      	adds	r3, r7, r0
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d011      	beq.n	8009ca8 <HAL_SPI_TransmitReceive+0x84>
 8009c84:	69fa      	ldr	r2, [r7, #28]
 8009c86:	2382      	movs	r3, #130	; 0x82
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d107      	bne.n	8009c9e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d103      	bne.n	8009c9e <HAL_SPI_TransmitReceive+0x7a>
 8009c96:	183b      	adds	r3, r7, r0
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d004      	beq.n	8009ca8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009c9e:	232b      	movs	r3, #43	; 0x2b
 8009ca0:	18fb      	adds	r3, r7, r3
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	701a      	strb	r2, [r3, #0]
    goto error;
 8009ca6:	e169      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d006      	beq.n	8009cbc <HAL_SPI_TransmitReceive+0x98>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_SPI_TransmitReceive+0x98>
 8009cb4:	1cbb      	adds	r3, r7, #2
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d104      	bne.n	8009cc6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009cbc:	232b      	movs	r3, #43	; 0x2b
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8009cc4:	e15a      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2251      	movs	r2, #81	; 0x51
 8009cca:	5c9b      	ldrb	r3, [r3, r2]
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d003      	beq.n	8009cda <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2251      	movs	r2, #81	; 0x51
 8009cd6:	2105      	movs	r1, #5
 8009cd8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	1cba      	adds	r2, r7, #2
 8009cea:	8812      	ldrh	r2, [r2, #0]
 8009cec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	1cba      	adds	r2, r7, #2
 8009cf2:	8812      	ldrh	r2, [r2, #0]
 8009cf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	1cba      	adds	r2, r7, #2
 8009d00:	8812      	ldrh	r2, [r2, #0]
 8009d02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	1cba      	adds	r2, r7, #2
 8009d08:	8812      	ldrh	r2, [r2, #0]
 8009d0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2240      	movs	r2, #64	; 0x40
 8009d20:	4013      	ands	r3, r2
 8009d22:	2b40      	cmp	r3, #64	; 0x40
 8009d24:	d007      	beq.n	8009d36 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2140      	movs	r1, #64	; 0x40
 8009d32:	430a      	orrs	r2, r1
 8009d34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	2380      	movs	r3, #128	; 0x80
 8009d3c:	011b      	lsls	r3, r3, #4
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d000      	beq.n	8009d44 <HAL_SPI_TransmitReceive+0x120>
 8009d42:	e07a      	b.n	8009e3a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d004      	beq.n	8009d56 <HAL_SPI_TransmitReceive+0x132>
 8009d4c:	231a      	movs	r3, #26
 8009d4e:	18fb      	adds	r3, r7, r3
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d166      	bne.n	8009e24 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5a:	881a      	ldrh	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d66:	1c9a      	adds	r2, r3, #2
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d7a:	e053      	b.n	8009e24 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2202      	movs	r2, #2
 8009d84:	4013      	ands	r3, r2
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d11b      	bne.n	8009dc2 <HAL_SPI_TransmitReceive+0x19e>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d016      	beq.n	8009dc2 <HAL_SPI_TransmitReceive+0x19e>
 8009d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d113      	bne.n	8009dc2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9e:	881a      	ldrh	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009daa:	1c9a      	adds	r2, r3, #2
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d119      	bne.n	8009e04 <HAL_SPI_TransmitReceive+0x1e0>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d014      	beq.n	8009e04 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68da      	ldr	r2, [r3, #12]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de4:	b292      	uxth	r2, r2
 8009de6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dec:	1c9a      	adds	r2, r3, #2
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e00:	2301      	movs	r3, #1
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e04:	f7fa fc37 	bl	8004676 <HAL_GetTick>
 8009e08:	0002      	movs	r2, r0
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d807      	bhi.n	8009e24 <HAL_SPI_TransmitReceive+0x200>
 8009e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e16:	3301      	adds	r3, #1
 8009e18:	d004      	beq.n	8009e24 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8009e1a:	232b      	movs	r3, #43	; 0x2b
 8009e1c:	18fb      	adds	r3, r7, r3
 8009e1e:	2203      	movs	r2, #3
 8009e20:	701a      	strb	r2, [r3, #0]
        goto error;
 8009e22:	e0ab      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1a6      	bne.n	8009d7c <HAL_SPI_TransmitReceive+0x158>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1a1      	bne.n	8009d7c <HAL_SPI_TransmitReceive+0x158>
 8009e38:	e07f      	b.n	8009f3a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <HAL_SPI_TransmitReceive+0x22a>
 8009e42:	231a      	movs	r3, #26
 8009e44:	18fb      	adds	r3, r7, r3
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d000      	beq.n	8009e4e <HAL_SPI_TransmitReceive+0x22a>
 8009e4c:	e06b      	b.n	8009f26 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	330c      	adds	r3, #12
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e74:	e057      	b.n	8009f26 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	4013      	ands	r3, r2
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d11c      	bne.n	8009ebe <HAL_SPI_TransmitReceive+0x29a>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d017      	beq.n	8009ebe <HAL_SPI_TransmitReceive+0x29a>
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d114      	bne.n	8009ebe <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	330c      	adds	r3, #12
 8009e9e:	7812      	ldrb	r2, [r2, #0]
 8009ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d119      	bne.n	8009f00 <HAL_SPI_TransmitReceive+0x2dc>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d014      	beq.n	8009f00 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68da      	ldr	r2, [r3, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009efc:	2301      	movs	r3, #1
 8009efe:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f00:	f7fa fbb9 	bl	8004676 <HAL_GetTick>
 8009f04:	0002      	movs	r2, r0
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d802      	bhi.n	8009f16 <HAL_SPI_TransmitReceive+0x2f2>
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	3301      	adds	r3, #1
 8009f14:	d102      	bne.n	8009f1c <HAL_SPI_TransmitReceive+0x2f8>
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d104      	bne.n	8009f26 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8009f1c:	232b      	movs	r3, #43	; 0x2b
 8009f1e:	18fb      	adds	r3, r7, r3
 8009f20:	2203      	movs	r2, #3
 8009f22:	701a      	strb	r2, [r3, #0]
        goto error;
 8009f24:	e02a      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1a2      	bne.n	8009e76 <HAL_SPI_TransmitReceive+0x252>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d19d      	bne.n	8009e76 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	0018      	movs	r0, r3
 8009f42:	f000 f8c5 	bl	800a0d0 <SPI_EndRxTxTransaction>
 8009f46:	1e03      	subs	r3, r0, #0
 8009f48:	d007      	beq.n	8009f5a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8009f4a:	232b      	movs	r3, #43	; 0x2b
 8009f4c:	18fb      	adds	r3, r7, r3
 8009f4e:	2201      	movs	r2, #1
 8009f50:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2220      	movs	r2, #32
 8009f56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f58:	e010      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10b      	bne.n	8009f7a <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f62:	2300      	movs	r3, #0
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	617b      	str	r3, [r7, #20]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	617b      	str	r3, [r7, #20]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	e000      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8009f7a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2251      	movs	r2, #81	; 0x51
 8009f80:	2101      	movs	r1, #1
 8009f82:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2250      	movs	r2, #80	; 0x50
 8009f88:	2100      	movs	r1, #0
 8009f8a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009f8c:	232b      	movs	r3, #43	; 0x2b
 8009f8e:	18fb      	adds	r3, r7, r3
 8009f90:	781b      	ldrb	r3, [r3, #0]
}
 8009f92:	0018      	movs	r0, r3
 8009f94:	46bd      	mov	sp, r7
 8009f96:	b00c      	add	sp, #48	; 0x30
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2251      	movs	r2, #81	; 0x51
 8009fa6:	5c9b      	ldrb	r3, [r3, r2]
 8009fa8:	b2db      	uxtb	r3, r3
}
 8009faa:	0018      	movs	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b002      	add	sp, #8
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	1dfb      	adds	r3, r7, #7
 8009fc2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fc4:	f7fa fb57 	bl	8004676 <HAL_GetTick>
 8009fc8:	0002      	movs	r2, r0
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	1a9b      	subs	r3, r3, r2
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	18d3      	adds	r3, r2, r3
 8009fd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fd4:	f7fa fb4f 	bl	8004676 <HAL_GetTick>
 8009fd8:	0003      	movs	r3, r0
 8009fda:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fdc:	4b3a      	ldr	r3, [pc, #232]	; (800a0c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	015b      	lsls	r3, r3, #5
 8009fe2:	0d1b      	lsrs	r3, r3, #20
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	4353      	muls	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fea:	e058      	b.n	800a09e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	d055      	beq.n	800a09e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ff2:	f7fa fb40 	bl	8004676 <HAL_GetTick>
 8009ff6:	0002      	movs	r2, r0
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	69fa      	ldr	r2, [r7, #28]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d902      	bls.n	800a008 <SPI_WaitFlagStateUntilTimeout+0x54>
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d142      	bne.n	800a08e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	21e0      	movs	r1, #224	; 0xe0
 800a014:	438a      	bics	r2, r1
 800a016:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	2382      	movs	r3, #130	; 0x82
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	429a      	cmp	r2, r3
 800a022:	d113      	bne.n	800a04c <SPI_WaitFlagStateUntilTimeout+0x98>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	2380      	movs	r3, #128	; 0x80
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d005      	beq.n	800a03c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	2380      	movs	r3, #128	; 0x80
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	429a      	cmp	r2, r3
 800a03a:	d107      	bne.n	800a04c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2140      	movs	r1, #64	; 0x40
 800a048:	438a      	bics	r2, r1
 800a04a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a050:	2380      	movs	r3, #128	; 0x80
 800a052:	019b      	lsls	r3, r3, #6
 800a054:	429a      	cmp	r2, r3
 800a056:	d110      	bne.n	800a07a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	491a      	ldr	r1, [pc, #104]	; (800a0cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a064:	400a      	ands	r2, r1
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2180      	movs	r1, #128	; 0x80
 800a074:	0189      	lsls	r1, r1, #6
 800a076:	430a      	orrs	r2, r1
 800a078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2251      	movs	r2, #81	; 0x51
 800a07e:	2101      	movs	r1, #1
 800a080:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2250      	movs	r2, #80	; 0x50
 800a086:	2100      	movs	r1, #0
 800a088:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e017      	b.n	800a0be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a094:	2300      	movs	r3, #0
 800a096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	425a      	negs	r2, r3
 800a0ae:	4153      	adcs	r3, r2
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	001a      	movs	r2, r3
 800a0b4:	1dfb      	adds	r3, r7, #7
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d197      	bne.n	8009fec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	0018      	movs	r0, r3
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	b008      	add	sp, #32
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	46c0      	nop			; (mov r8, r8)
 800a0c8:	20000070 	.word	0x20000070
 800a0cc:	ffffdfff 	.word	0xffffdfff

0800a0d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <SPI_EndRxTxTransaction+0x84>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	491d      	ldr	r1, [pc, #116]	; (800a158 <SPI_EndRxTxTransaction+0x88>)
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7f6 f818 	bl	8000118 <__udivsi3>
 800a0e8:	0003      	movs	r3, r0
 800a0ea:	001a      	movs	r2, r3
 800a0ec:	0013      	movs	r3, r2
 800a0ee:	015b      	lsls	r3, r3, #5
 800a0f0:	1a9b      	subs	r3, r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	189b      	adds	r3, r3, r2
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	2382      	movs	r3, #130	; 0x82
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	429a      	cmp	r2, r3
 800a104:	d112      	bne.n	800a12c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	0013      	movs	r3, r2
 800a110:	2200      	movs	r2, #0
 800a112:	2180      	movs	r1, #128	; 0x80
 800a114:	f7ff ff4e 	bl	8009fb4 <SPI_WaitFlagStateUntilTimeout>
 800a118:	1e03      	subs	r3, r0, #0
 800a11a:	d016      	beq.n	800a14a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a120:	2220      	movs	r2, #32
 800a122:	431a      	orrs	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e00f      	b.n	800a14c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00a      	beq.n	800a148 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	3b01      	subs	r3, #1
 800a136:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	2280      	movs	r2, #128	; 0x80
 800a140:	4013      	ands	r3, r2
 800a142:	2b80      	cmp	r3, #128	; 0x80
 800a144:	d0f2      	beq.n	800a12c <SPI_EndRxTxTransaction+0x5c>
 800a146:	e000      	b.n	800a14a <SPI_EndRxTxTransaction+0x7a>
        break;
 800a148:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	0018      	movs	r0, r3
 800a14e:	46bd      	mov	sp, r7
 800a150:	b006      	add	sp, #24
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000070 	.word	0x20000070
 800a158:	016e3600 	.word	0x016e3600

0800a15c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e044      	b.n	800a1f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a172:	2b00      	cmp	r3, #0
 800a174:	d107      	bne.n	800a186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2274      	movs	r2, #116	; 0x74
 800a17a:	2100      	movs	r1, #0
 800a17c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	0018      	movs	r0, r3
 800a182:	f7fa fb5f 	bl	8004844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2224      	movs	r2, #36	; 0x24
 800a18a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2101      	movs	r1, #1
 800a198:	438a      	bics	r2, r1
 800a19a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	0018      	movs	r0, r3
 800a1a0:	f000 fb3a 	bl	800a818 <UART_SetConfig>
 800a1a4:	0003      	movs	r3, r0
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d101      	bne.n	800a1ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e024      	b.n	800a1f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	f000 fdcd 	bl	800ad58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	490d      	ldr	r1, [pc, #52]	; (800a200 <HAL_UART_Init+0xa4>)
 800a1ca:	400a      	ands	r2, r1
 800a1cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	212a      	movs	r1, #42	; 0x2a
 800a1da:	438a      	bics	r2, r1
 800a1dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	f000 fe65 	bl	800aec0 <UART_CheckIdleState>
 800a1f6:	0003      	movs	r3, r0
}
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	b002      	add	sp, #8
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	ffffb7ff 	.word	0xffffb7ff

0800a204 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	1dbb      	adds	r3, r7, #6
 800a210:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a216:	2b20      	cmp	r3, #32
 800a218:	d144      	bne.n	800a2a4 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d003      	beq.n	800a228 <HAL_UART_Receive_IT+0x24>
 800a220:	1dbb      	adds	r3, r7, #6
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e03c      	b.n	800a2a6 <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	015b      	lsls	r3, r3, #5
 800a234:	429a      	cmp	r2, r3
 800a236:	d109      	bne.n	800a24c <HAL_UART_Receive_IT+0x48>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d105      	bne.n	800a24c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2201      	movs	r2, #1
 800a244:	4013      	ands	r3, r2
 800a246:	d001      	beq.n	800a24c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e02c      	b.n	800a2a6 <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2274      	movs	r2, #116	; 0x74
 800a250:	5c9b      	ldrb	r3, [r3, r2]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d101      	bne.n	800a25a <HAL_UART_Receive_IT+0x56>
 800a256:	2302      	movs	r3, #2
 800a258:	e025      	b.n	800a2a6 <HAL_UART_Receive_IT+0xa2>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2274      	movs	r2, #116	; 0x74
 800a25e:	2101      	movs	r1, #1
 800a260:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a10      	ldr	r2, [pc, #64]	; (800a2b0 <HAL_UART_Receive_IT+0xac>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00f      	beq.n	800a292 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	2380      	movs	r3, #128	; 0x80
 800a27a:	041b      	lsls	r3, r3, #16
 800a27c:	4013      	ands	r3, r2
 800a27e:	d008      	beq.n	800a292 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2180      	movs	r1, #128	; 0x80
 800a28c:	04c9      	lsls	r1, r1, #19
 800a28e:	430a      	orrs	r2, r1
 800a290:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a292:	1dbb      	adds	r3, r7, #6
 800a294:	881a      	ldrh	r2, [r3, #0]
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	0018      	movs	r0, r3
 800a29c:	f000 fed6 	bl	800b04c <UART_Start_Receive_IT>
 800a2a0:	0003      	movs	r3, r0
 800a2a2:	e000      	b.n	800a2a6 <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a2a4:	2302      	movs	r3, #2
  }
}
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	b004      	add	sp, #16
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	46c0      	nop			; (mov r8, r8)
 800a2b0:	40004800 	.word	0x40004800

0800a2b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	1dbb      	adds	r3, r7, #6
 800a2c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	d000      	beq.n	800a2cc <HAL_UART_Transmit_DMA+0x18>
 800a2ca:	e079      	b.n	800a3c0 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <HAL_UART_Transmit_DMA+0x26>
 800a2d2:	1dbb      	adds	r3, r7, #6
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e071      	b.n	800a3c2 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	2380      	movs	r3, #128	; 0x80
 800a2e4:	015b      	lsls	r3, r3, #5
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d109      	bne.n	800a2fe <HAL_UART_Transmit_DMA+0x4a>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d105      	bne.n	800a2fe <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	d001      	beq.n	800a2fe <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e061      	b.n	800a3c2 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2274      	movs	r2, #116	; 0x74
 800a302:	5c9b      	ldrb	r3, [r3, r2]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d101      	bne.n	800a30c <HAL_UART_Transmit_DMA+0x58>
 800a308:	2302      	movs	r3, #2
 800a30a:	e05a      	b.n	800a3c2 <HAL_UART_Transmit_DMA+0x10e>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2274      	movs	r2, #116	; 0x74
 800a310:	2101      	movs	r1, #1
 800a312:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	1dba      	adds	r2, r7, #6
 800a31e:	2150      	movs	r1, #80	; 0x50
 800a320:	8812      	ldrh	r2, [r2, #0]
 800a322:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	1dba      	adds	r2, r7, #6
 800a328:	2152      	movs	r1, #82	; 0x52
 800a32a:	8812      	ldrh	r2, [r2, #0]
 800a32c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2280      	movs	r2, #128	; 0x80
 800a332:	2100      	movs	r1, #0
 800a334:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2221      	movs	r2, #33	; 0x21
 800a33a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a340:	2b00      	cmp	r3, #0
 800a342:	d02b      	beq.n	800a39c <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a348:	4a20      	ldr	r2, [pc, #128]	; (800a3cc <HAL_UART_Transmit_DMA+0x118>)
 800a34a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a350:	4a1f      	ldr	r2, [pc, #124]	; (800a3d0 <HAL_UART_Transmit_DMA+0x11c>)
 800a352:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a358:	4a1e      	ldr	r2, [pc, #120]	; (800a3d4 <HAL_UART_Transmit_DMA+0x120>)
 800a35a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a360:	2200      	movs	r2, #0
 800a362:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36c:	0019      	movs	r1, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3328      	adds	r3, #40	; 0x28
 800a374:	001a      	movs	r2, r3
 800a376:	1dbb      	adds	r3, r7, #6
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	f7fc fae3 	bl	8006944 <HAL_DMA_Start_IT>
 800a37e:	1e03      	subs	r3, r0, #0
 800a380:	d00c      	beq.n	800a39c <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2280      	movs	r2, #128	; 0x80
 800a386:	2110      	movs	r1, #16
 800a388:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2274      	movs	r2, #116	; 0x74
 800a38e:	2100      	movs	r1, #0
 800a390:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2220      	movs	r2, #32
 800a396:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e012      	b.n	800a3c2 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2240      	movs	r2, #64	; 0x40
 800a3a2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2274      	movs	r2, #116	; 0x74
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689a      	ldr	r2, [r3, #8]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2180      	movs	r1, #128	; 0x80
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e000      	b.n	800a3c2 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
  }
}
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	b004      	add	sp, #16
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	46c0      	nop			; (mov r8, r8)
 800a3cc:	0800b1f1 	.word	0x0800b1f1
 800a3d0:	0800b245 	.word	0x0800b245
 800a3d4:	0800b263 	.word	0x0800b263

0800a3d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	4ab5      	ldr	r2, [pc, #724]	; (800a6d0 <HAL_UART_IRQHandler+0x2f8>)
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d112      	bne.n	800a42c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	2220      	movs	r2, #32
 800a40a:	4013      	ands	r3, r2
 800a40c:	d00e      	beq.n	800a42c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	2220      	movs	r2, #32
 800a412:	4013      	ands	r3, r2
 800a414:	d00a      	beq.n	800a42c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d100      	bne.n	800a420 <HAL_UART_IRQHandler+0x48>
 800a41e:	e1d1      	b.n	800a7c4 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	0010      	movs	r0, r2
 800a428:	4798      	blx	r3
      }
      return;
 800a42a:	e1cb      	b.n	800a7c4 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d100      	bne.n	800a434 <HAL_UART_IRQHandler+0x5c>
 800a432:	e0d9      	b.n	800a5e8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2201      	movs	r2, #1
 800a438:	4013      	ands	r3, r2
 800a43a:	d104      	bne.n	800a446 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	4aa5      	ldr	r2, [pc, #660]	; (800a6d4 <HAL_UART_IRQHandler+0x2fc>)
 800a440:	4013      	ands	r3, r2
 800a442:	d100      	bne.n	800a446 <HAL_UART_IRQHandler+0x6e>
 800a444:	e0d0      	b.n	800a5e8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	2201      	movs	r2, #1
 800a44a:	4013      	ands	r3, r2
 800a44c:	d010      	beq.n	800a470 <HAL_UART_IRQHandler+0x98>
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	2380      	movs	r3, #128	; 0x80
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	4013      	ands	r3, r2
 800a456:	d00b      	beq.n	800a470 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2201      	movs	r2, #1
 800a45e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2280      	movs	r2, #128	; 0x80
 800a464:	589b      	ldr	r3, [r3, r2]
 800a466:	2201      	movs	r2, #1
 800a468:	431a      	orrs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2180      	movs	r1, #128	; 0x80
 800a46e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	2202      	movs	r2, #2
 800a474:	4013      	ands	r3, r2
 800a476:	d00f      	beq.n	800a498 <HAL_UART_IRQHandler+0xc0>
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	2201      	movs	r2, #1
 800a47c:	4013      	ands	r3, r2
 800a47e:	d00b      	beq.n	800a498 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2202      	movs	r2, #2
 800a486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2280      	movs	r2, #128	; 0x80
 800a48c:	589b      	ldr	r3, [r3, r2]
 800a48e:	2204      	movs	r2, #4
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2180      	movs	r1, #128	; 0x80
 800a496:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	2204      	movs	r2, #4
 800a49c:	4013      	ands	r3, r2
 800a49e:	d00f      	beq.n	800a4c0 <HAL_UART_IRQHandler+0xe8>
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	d00b      	beq.n	800a4c0 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2204      	movs	r2, #4
 800a4ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2280      	movs	r2, #128	; 0x80
 800a4b4:	589b      	ldr	r3, [r3, r2]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2180      	movs	r1, #128	; 0x80
 800a4be:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	2208      	movs	r2, #8
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	d013      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	d103      	bne.n	800a4d8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a4d6:	d00b      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2208      	movs	r2, #8
 800a4de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2280      	movs	r2, #128	; 0x80
 800a4e4:	589b      	ldr	r3, [r3, r2]
 800a4e6:	2208      	movs	r2, #8
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2180      	movs	r1, #128	; 0x80
 800a4ee:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4f0:	69fa      	ldr	r2, [r7, #28]
 800a4f2:	2380      	movs	r3, #128	; 0x80
 800a4f4:	011b      	lsls	r3, r3, #4
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	d011      	beq.n	800a51e <HAL_UART_IRQHandler+0x146>
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	2380      	movs	r3, #128	; 0x80
 800a4fe:	04db      	lsls	r3, r3, #19
 800a500:	4013      	ands	r3, r2
 800a502:	d00c      	beq.n	800a51e <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2280      	movs	r2, #128	; 0x80
 800a50a:	0112      	lsls	r2, r2, #4
 800a50c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2280      	movs	r2, #128	; 0x80
 800a512:	589b      	ldr	r3, [r3, r2]
 800a514:	2220      	movs	r2, #32
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2180      	movs	r1, #128	; 0x80
 800a51c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2280      	movs	r2, #128	; 0x80
 800a522:	589b      	ldr	r3, [r3, r2]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d100      	bne.n	800a52a <HAL_UART_IRQHandler+0x152>
 800a528:	e14e      	b.n	800a7c8 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	2220      	movs	r2, #32
 800a52e:	4013      	ands	r3, r2
 800a530:	d00c      	beq.n	800a54c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	2220      	movs	r2, #32
 800a536:	4013      	ands	r3, r2
 800a538:	d008      	beq.n	800a54c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d004      	beq.n	800a54c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	0010      	movs	r0, r2
 800a54a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2280      	movs	r2, #128	; 0x80
 800a550:	589b      	ldr	r3, [r3, r2]
 800a552:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	2240      	movs	r2, #64	; 0x40
 800a55c:	4013      	ands	r3, r2
 800a55e:	2b40      	cmp	r3, #64	; 0x40
 800a560:	d003      	beq.n	800a56a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2228      	movs	r2, #40	; 0x28
 800a566:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a568:	d033      	beq.n	800a5d2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	0018      	movs	r0, r3
 800a56e:	f000 fe0f 	bl	800b190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	2240      	movs	r2, #64	; 0x40
 800a57a:	4013      	ands	r3, r2
 800a57c:	2b40      	cmp	r3, #64	; 0x40
 800a57e:	d123      	bne.n	800a5c8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689a      	ldr	r2, [r3, #8]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2140      	movs	r1, #64	; 0x40
 800a58c:	438a      	bics	r2, r1
 800a58e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a594:	2b00      	cmp	r3, #0
 800a596:	d012      	beq.n	800a5be <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59c:	4a4e      	ldr	r2, [pc, #312]	; (800a6d8 <HAL_UART_IRQHandler+0x300>)
 800a59e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	f7fc fa73 	bl	8006a90 <HAL_DMA_Abort_IT>
 800a5aa:	1e03      	subs	r3, r0, #0
 800a5ac:	d01a      	beq.n	800a5e4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5bc:	e012      	b.n	800a5e4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f000 f915 	bl	800a7f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c6:	e00d      	b.n	800a5e4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	f000 f910 	bl	800a7f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d0:	e008      	b.n	800a5e4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	f000 f90b 	bl	800a7f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2280      	movs	r2, #128	; 0x80
 800a5de:	2100      	movs	r1, #0
 800a5e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a5e2:	e0f1      	b.n	800a7c8 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e4:	46c0      	nop			; (mov r8, r8)
    return;
 800a5e6:	e0ef      	b.n	800a7c8 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d000      	beq.n	800a5f2 <HAL_UART_IRQHandler+0x21a>
 800a5f0:	e0b5      	b.n	800a75e <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	2210      	movs	r2, #16
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	d100      	bne.n	800a5fc <HAL_UART_IRQHandler+0x224>
 800a5fa:	e0b0      	b.n	800a75e <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2210      	movs	r2, #16
 800a600:	4013      	ands	r3, r2
 800a602:	d100      	bne.n	800a606 <HAL_UART_IRQHandler+0x22e>
 800a604:	e0ab      	b.n	800a75e <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2210      	movs	r2, #16
 800a60c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	2240      	movs	r2, #64	; 0x40
 800a616:	4013      	ands	r3, r2
 800a618:	2b40      	cmp	r3, #64	; 0x40
 800a61a:	d161      	bne.n	800a6e0 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	2108      	movs	r1, #8
 800a626:	187b      	adds	r3, r7, r1
 800a628:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800a62a:	187b      	adds	r3, r7, r1
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d100      	bne.n	800a634 <HAL_UART_IRQHandler+0x25c>
 800a632:	e0cb      	b.n	800a7cc <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2258      	movs	r2, #88	; 0x58
 800a638:	5a9b      	ldrh	r3, [r3, r2]
 800a63a:	187a      	adds	r2, r7, r1
 800a63c:	8812      	ldrh	r2, [r2, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d300      	bcc.n	800a644 <HAL_UART_IRQHandler+0x26c>
 800a642:	e0c3      	b.n	800a7cc <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	187a      	adds	r2, r7, r1
 800a648:	215a      	movs	r1, #90	; 0x5a
 800a64a:	8812      	ldrh	r2, [r2, #0]
 800a64c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2220      	movs	r2, #32
 800a658:	4013      	ands	r3, r2
 800a65a:	d12a      	bne.n	800a6b2 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	491d      	ldr	r1, [pc, #116]	; (800a6dc <HAL_UART_IRQHandler+0x304>)
 800a668:	400a      	ands	r2, r1
 800a66a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2101      	movs	r1, #1
 800a678:	438a      	bics	r2, r1
 800a67a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	689a      	ldr	r2, [r3, #8]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2140      	movs	r1, #64	; 0x40
 800a688:	438a      	bics	r2, r1
 800a68a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2220      	movs	r2, #32
 800a690:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2110      	movs	r1, #16
 800a6a4:	438a      	bics	r2, r1
 800a6a6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	f7fc f9af 	bl	8006a10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2258      	movs	r2, #88	; 0x58
 800a6b6:	5a9a      	ldrh	r2, [r3, r2]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	215a      	movs	r1, #90	; 0x5a
 800a6bc:	5a5b      	ldrh	r3, [r3, r1]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	0011      	movs	r1, r2
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f000 f899 	bl	800a800 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a6ce:	e07d      	b.n	800a7cc <HAL_UART_IRQHandler+0x3f4>
 800a6d0:	0000080f 	.word	0x0000080f
 800a6d4:	04000120 	.word	0x04000120
 800a6d8:	0800b2e5 	.word	0x0800b2e5
 800a6dc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2258      	movs	r2, #88	; 0x58
 800a6e4:	5a99      	ldrh	r1, [r3, r2]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	225a      	movs	r2, #90	; 0x5a
 800a6ea:	5a9b      	ldrh	r3, [r3, r2]
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	200a      	movs	r0, #10
 800a6f0:	183b      	adds	r3, r7, r0
 800a6f2:	1a8a      	subs	r2, r1, r2
 800a6f4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	225a      	movs	r2, #90	; 0x5a
 800a6fa:	5a9b      	ldrh	r3, [r3, r2]
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d100      	bne.n	800a704 <HAL_UART_IRQHandler+0x32c>
 800a702:	e065      	b.n	800a7d0 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800a704:	183b      	adds	r3, r7, r0
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d061      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4931      	ldr	r1, [pc, #196]	; (800a7dc <HAL_UART_IRQHandler+0x404>)
 800a718:	400a      	ands	r2, r1
 800a71a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2101      	movs	r1, #1
 800a728:	438a      	bics	r2, r1
 800a72a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2110      	movs	r1, #16
 800a74a:	438a      	bics	r2, r1
 800a74c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a74e:	183b      	adds	r3, r7, r0
 800a750:	881a      	ldrh	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	0011      	movs	r1, r2
 800a756:	0018      	movs	r0, r3
 800a758:	f000 f852 	bl	800a800 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a75c:	e038      	b.n	800a7d0 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	2380      	movs	r3, #128	; 0x80
 800a762:	035b      	lsls	r3, r3, #13
 800a764:	4013      	ands	r3, r2
 800a766:	d00e      	beq.n	800a786 <HAL_UART_IRQHandler+0x3ae>
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	2380      	movs	r3, #128	; 0x80
 800a76c:	03db      	lsls	r3, r3, #15
 800a76e:	4013      	ands	r3, r2
 800a770:	d009      	beq.n	800a786 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2280      	movs	r2, #128	; 0x80
 800a778:	0352      	lsls	r2, r2, #13
 800a77a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	0018      	movs	r0, r3
 800a780:	f000 feca 	bl	800b518 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a784:	e027      	b.n	800a7d6 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	2280      	movs	r2, #128	; 0x80
 800a78a:	4013      	ands	r3, r2
 800a78c:	d00d      	beq.n	800a7aa <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	2280      	movs	r2, #128	; 0x80
 800a792:	4013      	ands	r3, r2
 800a794:	d009      	beq.n	800a7aa <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d01a      	beq.n	800a7d4 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	0010      	movs	r0, r2
 800a7a6:	4798      	blx	r3
    }
    return;
 800a7a8:	e014      	b.n	800a7d4 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	2240      	movs	r2, #64	; 0x40
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	d011      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x3fe>
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	2240      	movs	r2, #64	; 0x40
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	d00d      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f000 fda8 	bl	800b312 <UART_EndTransmit_IT>
    return;
 800a7c2:	e008      	b.n	800a7d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800a7c4:	46c0      	nop			; (mov r8, r8)
 800a7c6:	e006      	b.n	800a7d6 <HAL_UART_IRQHandler+0x3fe>
    return;
 800a7c8:	46c0      	nop			; (mov r8, r8)
 800a7ca:	e004      	b.n	800a7d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800a7cc:	46c0      	nop			; (mov r8, r8)
 800a7ce:	e002      	b.n	800a7d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800a7d0:	46c0      	nop			; (mov r8, r8)
 800a7d2:	e000      	b.n	800a7d6 <HAL_UART_IRQHandler+0x3fe>
    return;
 800a7d4:	46c0      	nop			; (mov r8, r8)
  }

}
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	b008      	add	sp, #32
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	fffffedf 	.word	0xfffffedf

0800a7e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7e8:	46c0      	nop			; (mov r8, r8)
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b002      	add	sp, #8
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7f8:	46c0      	nop			; (mov r8, r8)
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	000a      	movs	r2, r1
 800a80a:	1cbb      	adds	r3, r7, #2
 800a80c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a80e:	46c0      	nop			; (mov r8, r8)
 800a810:	46bd      	mov	sp, r7
 800a812:	b002      	add	sp, #8
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a818:	b5b0      	push	{r4, r5, r7, lr}
 800a81a:	b08e      	sub	sp, #56	; 0x38
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a820:	231a      	movs	r3, #26
 800a822:	2218      	movs	r2, #24
 800a824:	189b      	adds	r3, r3, r2
 800a826:	19db      	adds	r3, r3, r7
 800a828:	2200      	movs	r2, #0
 800a82a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	431a      	orrs	r2, r3
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	431a      	orrs	r2, r3
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	4313      	orrs	r3, r2
 800a842:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4ac3      	ldr	r2, [pc, #780]	; (800ab58 <UART_SetConfig+0x340>)
 800a84c:	4013      	ands	r3, r2
 800a84e:	0019      	movs	r1, r3
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a856:	430a      	orrs	r2, r1
 800a858:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4abe      	ldr	r2, [pc, #760]	; (800ab5c <UART_SetConfig+0x344>)
 800a862:	4013      	ands	r3, r2
 800a864:	0019      	movs	r1, r3
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	430a      	orrs	r2, r1
 800a870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4ab8      	ldr	r2, [pc, #736]	; (800ab60 <UART_SetConfig+0x348>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d004      	beq.n	800a88c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a888:	4313      	orrs	r3, r2
 800a88a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	4ab4      	ldr	r2, [pc, #720]	; (800ab64 <UART_SetConfig+0x34c>)
 800a894:	4013      	ands	r3, r2
 800a896:	0019      	movs	r1, r3
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4ab0      	ldr	r2, [pc, #704]	; (800ab68 <UART_SetConfig+0x350>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d131      	bne.n	800a910 <UART_SetConfig+0xf8>
 800a8ac:	4baf      	ldr	r3, [pc, #700]	; (800ab6c <UART_SetConfig+0x354>)
 800a8ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b0:	2203      	movs	r2, #3
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d01d      	beq.n	800a8f4 <UART_SetConfig+0xdc>
 800a8b8:	d823      	bhi.n	800a902 <UART_SetConfig+0xea>
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d00c      	beq.n	800a8d8 <UART_SetConfig+0xc0>
 800a8be:	d820      	bhi.n	800a902 <UART_SetConfig+0xea>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <UART_SetConfig+0xb2>
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d00e      	beq.n	800a8e6 <UART_SetConfig+0xce>
 800a8c8:	e01b      	b.n	800a902 <UART_SetConfig+0xea>
 800a8ca:	231b      	movs	r3, #27
 800a8cc:	2218      	movs	r2, #24
 800a8ce:	189b      	adds	r3, r3, r2
 800a8d0:	19db      	adds	r3, r3, r7
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	e0b4      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a8d8:	231b      	movs	r3, #27
 800a8da:	2218      	movs	r2, #24
 800a8dc:	189b      	adds	r3, r3, r2
 800a8de:	19db      	adds	r3, r3, r7
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	e0ad      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a8e6:	231b      	movs	r3, #27
 800a8e8:	2218      	movs	r2, #24
 800a8ea:	189b      	adds	r3, r3, r2
 800a8ec:	19db      	adds	r3, r3, r7
 800a8ee:	2204      	movs	r2, #4
 800a8f0:	701a      	strb	r2, [r3, #0]
 800a8f2:	e0a6      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a8f4:	231b      	movs	r3, #27
 800a8f6:	2218      	movs	r2, #24
 800a8f8:	189b      	adds	r3, r3, r2
 800a8fa:	19db      	adds	r3, r3, r7
 800a8fc:	2208      	movs	r2, #8
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e09f      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a902:	231b      	movs	r3, #27
 800a904:	2218      	movs	r2, #24
 800a906:	189b      	adds	r3, r3, r2
 800a908:	19db      	adds	r3, r3, r7
 800a90a:	2210      	movs	r2, #16
 800a90c:	701a      	strb	r2, [r3, #0]
 800a90e:	e098      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a96      	ldr	r2, [pc, #600]	; (800ab70 <UART_SetConfig+0x358>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d131      	bne.n	800a97e <UART_SetConfig+0x166>
 800a91a:	4b94      	ldr	r3, [pc, #592]	; (800ab6c <UART_SetConfig+0x354>)
 800a91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a91e:	220c      	movs	r2, #12
 800a920:	4013      	ands	r3, r2
 800a922:	2b0c      	cmp	r3, #12
 800a924:	d01d      	beq.n	800a962 <UART_SetConfig+0x14a>
 800a926:	d823      	bhi.n	800a970 <UART_SetConfig+0x158>
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d00c      	beq.n	800a946 <UART_SetConfig+0x12e>
 800a92c:	d820      	bhi.n	800a970 <UART_SetConfig+0x158>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <UART_SetConfig+0x120>
 800a932:	2b04      	cmp	r3, #4
 800a934:	d00e      	beq.n	800a954 <UART_SetConfig+0x13c>
 800a936:	e01b      	b.n	800a970 <UART_SetConfig+0x158>
 800a938:	231b      	movs	r3, #27
 800a93a:	2218      	movs	r2, #24
 800a93c:	189b      	adds	r3, r3, r2
 800a93e:	19db      	adds	r3, r3, r7
 800a940:	2200      	movs	r2, #0
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	e07d      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a946:	231b      	movs	r3, #27
 800a948:	2218      	movs	r2, #24
 800a94a:	189b      	adds	r3, r3, r2
 800a94c:	19db      	adds	r3, r3, r7
 800a94e:	2202      	movs	r2, #2
 800a950:	701a      	strb	r2, [r3, #0]
 800a952:	e076      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a954:	231b      	movs	r3, #27
 800a956:	2218      	movs	r2, #24
 800a958:	189b      	adds	r3, r3, r2
 800a95a:	19db      	adds	r3, r3, r7
 800a95c:	2204      	movs	r2, #4
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	e06f      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a962:	231b      	movs	r3, #27
 800a964:	2218      	movs	r2, #24
 800a966:	189b      	adds	r3, r3, r2
 800a968:	19db      	adds	r3, r3, r7
 800a96a:	2208      	movs	r2, #8
 800a96c:	701a      	strb	r2, [r3, #0]
 800a96e:	e068      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a970:	231b      	movs	r3, #27
 800a972:	2218      	movs	r2, #24
 800a974:	189b      	adds	r3, r3, r2
 800a976:	19db      	adds	r3, r3, r7
 800a978:	2210      	movs	r2, #16
 800a97a:	701a      	strb	r2, [r3, #0]
 800a97c:	e061      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a7c      	ldr	r2, [pc, #496]	; (800ab74 <UART_SetConfig+0x35c>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d106      	bne.n	800a996 <UART_SetConfig+0x17e>
 800a988:	231b      	movs	r3, #27
 800a98a:	2218      	movs	r2, #24
 800a98c:	189b      	adds	r3, r3, r2
 800a98e:	19db      	adds	r3, r3, r7
 800a990:	2200      	movs	r2, #0
 800a992:	701a      	strb	r2, [r3, #0]
 800a994:	e055      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a77      	ldr	r2, [pc, #476]	; (800ab78 <UART_SetConfig+0x360>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d106      	bne.n	800a9ae <UART_SetConfig+0x196>
 800a9a0:	231b      	movs	r3, #27
 800a9a2:	2218      	movs	r2, #24
 800a9a4:	189b      	adds	r3, r3, r2
 800a9a6:	19db      	adds	r3, r3, r7
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	701a      	strb	r2, [r3, #0]
 800a9ac:	e049      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a6b      	ldr	r2, [pc, #428]	; (800ab60 <UART_SetConfig+0x348>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d13e      	bne.n	800aa36 <UART_SetConfig+0x21e>
 800a9b8:	4b6c      	ldr	r3, [pc, #432]	; (800ab6c <UART_SetConfig+0x354>)
 800a9ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9bc:	23c0      	movs	r3, #192	; 0xc0
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	22c0      	movs	r2, #192	; 0xc0
 800a9c4:	0112      	lsls	r2, r2, #4
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d027      	beq.n	800aa1a <UART_SetConfig+0x202>
 800a9ca:	22c0      	movs	r2, #192	; 0xc0
 800a9cc:	0112      	lsls	r2, r2, #4
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d82a      	bhi.n	800aa28 <UART_SetConfig+0x210>
 800a9d2:	2280      	movs	r2, #128	; 0x80
 800a9d4:	0112      	lsls	r2, r2, #4
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d011      	beq.n	800a9fe <UART_SetConfig+0x1e6>
 800a9da:	2280      	movs	r2, #128	; 0x80
 800a9dc:	0112      	lsls	r2, r2, #4
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d822      	bhi.n	800aa28 <UART_SetConfig+0x210>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <UART_SetConfig+0x1d8>
 800a9e6:	2280      	movs	r2, #128	; 0x80
 800a9e8:	00d2      	lsls	r2, r2, #3
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00e      	beq.n	800aa0c <UART_SetConfig+0x1f4>
 800a9ee:	e01b      	b.n	800aa28 <UART_SetConfig+0x210>
 800a9f0:	231b      	movs	r3, #27
 800a9f2:	2218      	movs	r2, #24
 800a9f4:	189b      	adds	r3, r3, r2
 800a9f6:	19db      	adds	r3, r3, r7
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e021      	b.n	800aa42 <UART_SetConfig+0x22a>
 800a9fe:	231b      	movs	r3, #27
 800aa00:	2218      	movs	r2, #24
 800aa02:	189b      	adds	r3, r3, r2
 800aa04:	19db      	adds	r3, r3, r7
 800aa06:	2202      	movs	r2, #2
 800aa08:	701a      	strb	r2, [r3, #0]
 800aa0a:	e01a      	b.n	800aa42 <UART_SetConfig+0x22a>
 800aa0c:	231b      	movs	r3, #27
 800aa0e:	2218      	movs	r2, #24
 800aa10:	189b      	adds	r3, r3, r2
 800aa12:	19db      	adds	r3, r3, r7
 800aa14:	2204      	movs	r2, #4
 800aa16:	701a      	strb	r2, [r3, #0]
 800aa18:	e013      	b.n	800aa42 <UART_SetConfig+0x22a>
 800aa1a:	231b      	movs	r3, #27
 800aa1c:	2218      	movs	r2, #24
 800aa1e:	189b      	adds	r3, r3, r2
 800aa20:	19db      	adds	r3, r3, r7
 800aa22:	2208      	movs	r2, #8
 800aa24:	701a      	strb	r2, [r3, #0]
 800aa26:	e00c      	b.n	800aa42 <UART_SetConfig+0x22a>
 800aa28:	231b      	movs	r3, #27
 800aa2a:	2218      	movs	r2, #24
 800aa2c:	189b      	adds	r3, r3, r2
 800aa2e:	19db      	adds	r3, r3, r7
 800aa30:	2210      	movs	r2, #16
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	e005      	b.n	800aa42 <UART_SetConfig+0x22a>
 800aa36:	231b      	movs	r3, #27
 800aa38:	2218      	movs	r2, #24
 800aa3a:	189b      	adds	r3, r3, r2
 800aa3c:	19db      	adds	r3, r3, r7
 800aa3e:	2210      	movs	r2, #16
 800aa40:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a46      	ldr	r2, [pc, #280]	; (800ab60 <UART_SetConfig+0x348>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d000      	beq.n	800aa4e <UART_SetConfig+0x236>
 800aa4c:	e09a      	b.n	800ab84 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa4e:	231b      	movs	r3, #27
 800aa50:	2218      	movs	r2, #24
 800aa52:	189b      	adds	r3, r3, r2
 800aa54:	19db      	adds	r3, r3, r7
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d01d      	beq.n	800aa98 <UART_SetConfig+0x280>
 800aa5c:	dc20      	bgt.n	800aaa0 <UART_SetConfig+0x288>
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d015      	beq.n	800aa8e <UART_SetConfig+0x276>
 800aa62:	dc1d      	bgt.n	800aaa0 <UART_SetConfig+0x288>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <UART_SetConfig+0x256>
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d005      	beq.n	800aa78 <UART_SetConfig+0x260>
 800aa6c:	e018      	b.n	800aaa0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa6e:	f7fe f8cb 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800aa72:	0003      	movs	r3, r0
 800aa74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa76:	e01c      	b.n	800aab2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa78:	4b3c      	ldr	r3, [pc, #240]	; (800ab6c <UART_SetConfig+0x354>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2210      	movs	r2, #16
 800aa7e:	4013      	ands	r3, r2
 800aa80:	d002      	beq.n	800aa88 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800aa82:	4b3e      	ldr	r3, [pc, #248]	; (800ab7c <UART_SetConfig+0x364>)
 800aa84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa86:	e014      	b.n	800aab2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800aa88:	4b3d      	ldr	r3, [pc, #244]	; (800ab80 <UART_SetConfig+0x368>)
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa8c:	e011      	b.n	800aab2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa8e:	f7fe f80b 	bl	8008aa8 <HAL_RCC_GetSysClockFreq>
 800aa92:	0003      	movs	r3, r0
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa96:	e00c      	b.n	800aab2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa98:	2380      	movs	r3, #128	; 0x80
 800aa9a:	021b      	lsls	r3, r3, #8
 800aa9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa9e:	e008      	b.n	800aab2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aaa4:	231a      	movs	r3, #26
 800aaa6:	2218      	movs	r2, #24
 800aaa8:	189b      	adds	r3, r3, r2
 800aaaa:	19db      	adds	r3, r3, r7
 800aaac:	2201      	movs	r2, #1
 800aaae:	701a      	strb	r2, [r3, #0]
        break;
 800aab0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d100      	bne.n	800aaba <UART_SetConfig+0x2a2>
 800aab8:	e134      	b.n	800ad24 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	0013      	movs	r3, r2
 800aac0:	005b      	lsls	r3, r3, #1
 800aac2:	189b      	adds	r3, r3, r2
 800aac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d305      	bcc.n	800aad6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d906      	bls.n	800aae4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800aad6:	231a      	movs	r3, #26
 800aad8:	2218      	movs	r2, #24
 800aada:	189b      	adds	r3, r3, r2
 800aadc:	19db      	adds	r3, r3, r7
 800aade:	2201      	movs	r2, #1
 800aae0:	701a      	strb	r2, [r3, #0]
 800aae2:	e11f      	b.n	800ad24 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	613b      	str	r3, [r7, #16]
 800aae8:	2300      	movs	r3, #0
 800aaea:	617b      	str	r3, [r7, #20]
 800aaec:	6939      	ldr	r1, [r7, #16]
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	000b      	movs	r3, r1
 800aaf2:	0e1b      	lsrs	r3, r3, #24
 800aaf4:	0010      	movs	r0, r2
 800aaf6:	0205      	lsls	r5, r0, #8
 800aaf8:	431d      	orrs	r5, r3
 800aafa:	000b      	movs	r3, r1
 800aafc:	021c      	lsls	r4, r3, #8
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	60bb      	str	r3, [r7, #8]
 800ab06:	2300      	movs	r3, #0
 800ab08:	60fb      	str	r3, [r7, #12]
 800ab0a:	68b8      	ldr	r0, [r7, #8]
 800ab0c:	68f9      	ldr	r1, [r7, #12]
 800ab0e:	1900      	adds	r0, r0, r4
 800ab10:	4169      	adcs	r1, r5
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	607b      	str	r3, [r7, #4]
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f7f5 fcd2 	bl	80004c8 <__aeabi_uldivmod>
 800ab24:	0002      	movs	r2, r0
 800ab26:	000b      	movs	r3, r1
 800ab28:	0013      	movs	r3, r2
 800ab2a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab2e:	23c0      	movs	r3, #192	; 0xc0
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d309      	bcc.n	800ab4a <UART_SetConfig+0x332>
 800ab36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab38:	2380      	movs	r3, #128	; 0x80
 800ab3a:	035b      	lsls	r3, r3, #13
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d204      	bcs.n	800ab4a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab46:	60da      	str	r2, [r3, #12]
 800ab48:	e0ec      	b.n	800ad24 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800ab4a:	231a      	movs	r3, #26
 800ab4c:	2218      	movs	r2, #24
 800ab4e:	189b      	adds	r3, r3, r2
 800ab50:	19db      	adds	r3, r3, r7
 800ab52:	2201      	movs	r2, #1
 800ab54:	701a      	strb	r2, [r3, #0]
 800ab56:	e0e5      	b.n	800ad24 <UART_SetConfig+0x50c>
 800ab58:	efff69f3 	.word	0xefff69f3
 800ab5c:	ffffcfff 	.word	0xffffcfff
 800ab60:	40004800 	.word	0x40004800
 800ab64:	fffff4ff 	.word	0xfffff4ff
 800ab68:	40013800 	.word	0x40013800
 800ab6c:	40021000 	.word	0x40021000
 800ab70:	40004400 	.word	0x40004400
 800ab74:	40004c00 	.word	0x40004c00
 800ab78:	40005000 	.word	0x40005000
 800ab7c:	003d0900 	.word	0x003d0900
 800ab80:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	69da      	ldr	r2, [r3, #28]
 800ab88:	2380      	movs	r3, #128	; 0x80
 800ab8a:	021b      	lsls	r3, r3, #8
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d000      	beq.n	800ab92 <UART_SetConfig+0x37a>
 800ab90:	e071      	b.n	800ac76 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800ab92:	231b      	movs	r3, #27
 800ab94:	2218      	movs	r2, #24
 800ab96:	189b      	adds	r3, r3, r2
 800ab98:	19db      	adds	r3, r3, r7
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b08      	cmp	r3, #8
 800ab9e:	d822      	bhi.n	800abe6 <UART_SetConfig+0x3ce>
 800aba0:	009a      	lsls	r2, r3, #2
 800aba2:	4b68      	ldr	r3, [pc, #416]	; (800ad44 <UART_SetConfig+0x52c>)
 800aba4:	18d3      	adds	r3, r2, r3
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abaa:	f7fe f82d 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800abae:	0003      	movs	r3, r0
 800abb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abb2:	e021      	b.n	800abf8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abb4:	f7fe f83e 	bl	8008c34 <HAL_RCC_GetPCLK2Freq>
 800abb8:	0003      	movs	r3, r0
 800abba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abbc:	e01c      	b.n	800abf8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abbe:	4b62      	ldr	r3, [pc, #392]	; (800ad48 <UART_SetConfig+0x530>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2210      	movs	r2, #16
 800abc4:	4013      	ands	r3, r2
 800abc6:	d002      	beq.n	800abce <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800abc8:	4b60      	ldr	r3, [pc, #384]	; (800ad4c <UART_SetConfig+0x534>)
 800abca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abcc:	e014      	b.n	800abf8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800abce:	4b60      	ldr	r3, [pc, #384]	; (800ad50 <UART_SetConfig+0x538>)
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abd2:	e011      	b.n	800abf8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abd4:	f7fd ff68 	bl	8008aa8 <HAL_RCC_GetSysClockFreq>
 800abd8:	0003      	movs	r3, r0
 800abda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abdc:	e00c      	b.n	800abf8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abde:	2380      	movs	r3, #128	; 0x80
 800abe0:	021b      	lsls	r3, r3, #8
 800abe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abe4:	e008      	b.n	800abf8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800abe6:	2300      	movs	r3, #0
 800abe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800abea:	231a      	movs	r3, #26
 800abec:	2218      	movs	r2, #24
 800abee:	189b      	adds	r3, r3, r2
 800abf0:	19db      	adds	r3, r3, r7
 800abf2:	2201      	movs	r2, #1
 800abf4:	701a      	strb	r2, [r3, #0]
        break;
 800abf6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d100      	bne.n	800ac00 <UART_SetConfig+0x3e8>
 800abfe:	e091      	b.n	800ad24 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac02:	005a      	lsls	r2, r3, #1
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	085b      	lsrs	r3, r3, #1
 800ac0a:	18d2      	adds	r2, r2, r3
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	0019      	movs	r1, r3
 800ac12:	0010      	movs	r0, r2
 800ac14:	f7f5 fa80 	bl	8000118 <__udivsi3>
 800ac18:	0003      	movs	r3, r0
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	2b0f      	cmp	r3, #15
 800ac22:	d921      	bls.n	800ac68 <UART_SetConfig+0x450>
 800ac24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac26:	2380      	movs	r3, #128	; 0x80
 800ac28:	025b      	lsls	r3, r3, #9
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d21c      	bcs.n	800ac68 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	200e      	movs	r0, #14
 800ac34:	2418      	movs	r4, #24
 800ac36:	1903      	adds	r3, r0, r4
 800ac38:	19db      	adds	r3, r3, r7
 800ac3a:	210f      	movs	r1, #15
 800ac3c:	438a      	bics	r2, r1
 800ac3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	085b      	lsrs	r3, r3, #1
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	2207      	movs	r2, #7
 800ac48:	4013      	ands	r3, r2
 800ac4a:	b299      	uxth	r1, r3
 800ac4c:	1903      	adds	r3, r0, r4
 800ac4e:	19db      	adds	r3, r3, r7
 800ac50:	1902      	adds	r2, r0, r4
 800ac52:	19d2      	adds	r2, r2, r7
 800ac54:	8812      	ldrh	r2, [r2, #0]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	1902      	adds	r2, r0, r4
 800ac60:	19d2      	adds	r2, r2, r7
 800ac62:	8812      	ldrh	r2, [r2, #0]
 800ac64:	60da      	str	r2, [r3, #12]
 800ac66:	e05d      	b.n	800ad24 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800ac68:	231a      	movs	r3, #26
 800ac6a:	2218      	movs	r2, #24
 800ac6c:	189b      	adds	r3, r3, r2
 800ac6e:	19db      	adds	r3, r3, r7
 800ac70:	2201      	movs	r2, #1
 800ac72:	701a      	strb	r2, [r3, #0]
 800ac74:	e056      	b.n	800ad24 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac76:	231b      	movs	r3, #27
 800ac78:	2218      	movs	r2, #24
 800ac7a:	189b      	adds	r3, r3, r2
 800ac7c:	19db      	adds	r3, r3, r7
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b08      	cmp	r3, #8
 800ac82:	d822      	bhi.n	800acca <UART_SetConfig+0x4b2>
 800ac84:	009a      	lsls	r2, r3, #2
 800ac86:	4b33      	ldr	r3, [pc, #204]	; (800ad54 <UART_SetConfig+0x53c>)
 800ac88:	18d3      	adds	r3, r2, r3
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac8e:	f7fd ffbb 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800ac92:	0003      	movs	r3, r0
 800ac94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac96:	e021      	b.n	800acdc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac98:	f7fd ffcc 	bl	8008c34 <HAL_RCC_GetPCLK2Freq>
 800ac9c:	0003      	movs	r3, r0
 800ac9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aca0:	e01c      	b.n	800acdc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aca2:	4b29      	ldr	r3, [pc, #164]	; (800ad48 <UART_SetConfig+0x530>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2210      	movs	r2, #16
 800aca8:	4013      	ands	r3, r2
 800acaa:	d002      	beq.n	800acb2 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800acac:	4b27      	ldr	r3, [pc, #156]	; (800ad4c <UART_SetConfig+0x534>)
 800acae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acb0:	e014      	b.n	800acdc <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800acb2:	4b27      	ldr	r3, [pc, #156]	; (800ad50 <UART_SetConfig+0x538>)
 800acb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acb6:	e011      	b.n	800acdc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acb8:	f7fd fef6 	bl	8008aa8 <HAL_RCC_GetSysClockFreq>
 800acbc:	0003      	movs	r3, r0
 800acbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acc0:	e00c      	b.n	800acdc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acc2:	2380      	movs	r3, #128	; 0x80
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acc8:	e008      	b.n	800acdc <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800acce:	231a      	movs	r3, #26
 800acd0:	2218      	movs	r2, #24
 800acd2:	189b      	adds	r3, r3, r2
 800acd4:	19db      	adds	r3, r3, r7
 800acd6:	2201      	movs	r2, #1
 800acd8:	701a      	strb	r2, [r3, #0]
        break;
 800acda:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800acdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d020      	beq.n	800ad24 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	085a      	lsrs	r2, r3, #1
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	18d2      	adds	r2, r2, r3
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	0019      	movs	r1, r3
 800acf2:	0010      	movs	r0, r2
 800acf4:	f7f5 fa10 	bl	8000118 <__udivsi3>
 800acf8:	0003      	movs	r3, r0
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	2b0f      	cmp	r3, #15
 800ad02:	d909      	bls.n	800ad18 <UART_SetConfig+0x500>
 800ad04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad06:	2380      	movs	r3, #128	; 0x80
 800ad08:	025b      	lsls	r3, r3, #9
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d204      	bcs.n	800ad18 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad14:	60da      	str	r2, [r3, #12]
 800ad16:	e005      	b.n	800ad24 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad18:	231a      	movs	r3, #26
 800ad1a:	2218      	movs	r2, #24
 800ad1c:	189b      	adds	r3, r3, r2
 800ad1e:	19db      	adds	r3, r3, r7
 800ad20:	2201      	movs	r2, #1
 800ad22:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	2200      	movs	r2, #0
 800ad28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ad30:	231a      	movs	r3, #26
 800ad32:	2218      	movs	r2, #24
 800ad34:	189b      	adds	r3, r3, r2
 800ad36:	19db      	adds	r3, r3, r7
 800ad38:	781b      	ldrb	r3, [r3, #0]
}
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	b00e      	add	sp, #56	; 0x38
 800ad40:	bdb0      	pop	{r4, r5, r7, pc}
 800ad42:	46c0      	nop			; (mov r8, r8)
 800ad44:	0801e118 	.word	0x0801e118
 800ad48:	40021000 	.word	0x40021000
 800ad4c:	003d0900 	.word	0x003d0900
 800ad50:	00f42400 	.word	0x00f42400
 800ad54:	0801e13c 	.word	0x0801e13c

0800ad58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad64:	2201      	movs	r2, #1
 800ad66:	4013      	ands	r3, r2
 800ad68:	d00b      	beq.n	800ad82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	4a4a      	ldr	r2, [pc, #296]	; (800ae9c <UART_AdvFeatureConfig+0x144>)
 800ad72:	4013      	ands	r3, r2
 800ad74:	0019      	movs	r1, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	2202      	movs	r2, #2
 800ad88:	4013      	ands	r3, r2
 800ad8a:	d00b      	beq.n	800ada4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	4a43      	ldr	r2, [pc, #268]	; (800aea0 <UART_AdvFeatureConfig+0x148>)
 800ad94:	4013      	ands	r3, r2
 800ad96:	0019      	movs	r1, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	430a      	orrs	r2, r1
 800ada2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2204      	movs	r2, #4
 800adaa:	4013      	ands	r3, r2
 800adac:	d00b      	beq.n	800adc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	4a3b      	ldr	r2, [pc, #236]	; (800aea4 <UART_AdvFeatureConfig+0x14c>)
 800adb6:	4013      	ands	r3, r2
 800adb8:	0019      	movs	r1, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	430a      	orrs	r2, r1
 800adc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2208      	movs	r2, #8
 800adcc:	4013      	ands	r3, r2
 800adce:	d00b      	beq.n	800ade8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	4a34      	ldr	r2, [pc, #208]	; (800aea8 <UART_AdvFeatureConfig+0x150>)
 800add8:	4013      	ands	r3, r2
 800adda:	0019      	movs	r1, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	2210      	movs	r2, #16
 800adee:	4013      	ands	r3, r2
 800adf0:	d00b      	beq.n	800ae0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	4a2c      	ldr	r2, [pc, #176]	; (800aeac <UART_AdvFeatureConfig+0x154>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	0019      	movs	r1, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	2220      	movs	r2, #32
 800ae10:	4013      	ands	r3, r2
 800ae12:	d00b      	beq.n	800ae2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	4a25      	ldr	r2, [pc, #148]	; (800aeb0 <UART_AdvFeatureConfig+0x158>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	0019      	movs	r1, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	2240      	movs	r2, #64	; 0x40
 800ae32:	4013      	ands	r3, r2
 800ae34:	d01d      	beq.n	800ae72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	4a1d      	ldr	r2, [pc, #116]	; (800aeb4 <UART_AdvFeatureConfig+0x15c>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	0019      	movs	r1, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae52:	2380      	movs	r3, #128	; 0x80
 800ae54:	035b      	lsls	r3, r3, #13
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d10b      	bne.n	800ae72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	4a15      	ldr	r2, [pc, #84]	; (800aeb8 <UART_AdvFeatureConfig+0x160>)
 800ae62:	4013      	ands	r3, r2
 800ae64:	0019      	movs	r1, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	430a      	orrs	r2, r1
 800ae70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2280      	movs	r2, #128	; 0x80
 800ae78:	4013      	ands	r3, r2
 800ae7a:	d00b      	beq.n	800ae94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	4a0e      	ldr	r2, [pc, #56]	; (800aebc <UART_AdvFeatureConfig+0x164>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	0019      	movs	r1, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	430a      	orrs	r2, r1
 800ae92:	605a      	str	r2, [r3, #4]
  }
}
 800ae94:	46c0      	nop			; (mov r8, r8)
 800ae96:	46bd      	mov	sp, r7
 800ae98:	b002      	add	sp, #8
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	fffdffff 	.word	0xfffdffff
 800aea0:	fffeffff 	.word	0xfffeffff
 800aea4:	fffbffff 	.word	0xfffbffff
 800aea8:	ffff7fff 	.word	0xffff7fff
 800aeac:	ffffefff 	.word	0xffffefff
 800aeb0:	ffffdfff 	.word	0xffffdfff
 800aeb4:	ffefffff 	.word	0xffefffff
 800aeb8:	ff9fffff 	.word	0xff9fffff
 800aebc:	fff7ffff 	.word	0xfff7ffff

0800aec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af02      	add	r7, sp, #8
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2280      	movs	r2, #128	; 0x80
 800aecc:	2100      	movs	r1, #0
 800aece:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aed0:	f7f9 fbd1 	bl	8004676 <HAL_GetTick>
 800aed4:	0003      	movs	r3, r0
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2208      	movs	r2, #8
 800aee0:	4013      	ands	r3, r2
 800aee2:	2b08      	cmp	r3, #8
 800aee4:	d10c      	bne.n	800af00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2280      	movs	r2, #128	; 0x80
 800aeea:	0391      	lsls	r1, r2, #14
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	4a17      	ldr	r2, [pc, #92]	; (800af4c <UART_CheckIdleState+0x8c>)
 800aef0:	9200      	str	r2, [sp, #0]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f000 f82c 	bl	800af50 <UART_WaitOnFlagUntilTimeout>
 800aef8:	1e03      	subs	r3, r0, #0
 800aefa:	d001      	beq.n	800af00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e021      	b.n	800af44 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2204      	movs	r2, #4
 800af08:	4013      	ands	r3, r2
 800af0a:	2b04      	cmp	r3, #4
 800af0c:	d10c      	bne.n	800af28 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2280      	movs	r2, #128	; 0x80
 800af12:	03d1      	lsls	r1, r2, #15
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	4a0d      	ldr	r2, [pc, #52]	; (800af4c <UART_CheckIdleState+0x8c>)
 800af18:	9200      	str	r2, [sp, #0]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f000 f818 	bl	800af50 <UART_WaitOnFlagUntilTimeout>
 800af20:	1e03      	subs	r3, r0, #0
 800af22:	d001      	beq.n	800af28 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af24:	2303      	movs	r3, #3
 800af26:	e00d      	b.n	800af44 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2220      	movs	r2, #32
 800af2c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2274      	movs	r2, #116	; 0x74
 800af3e:	2100      	movs	r1, #0
 800af40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	0018      	movs	r0, r3
 800af46:	46bd      	mov	sp, r7
 800af48:	b004      	add	sp, #16
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	01ffffff 	.word	0x01ffffff

0800af50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	1dfb      	adds	r3, r7, #7
 800af5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af60:	e05e      	b.n	800b020 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	3301      	adds	r3, #1
 800af66:	d05b      	beq.n	800b020 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af68:	f7f9 fb85 	bl	8004676 <HAL_GetTick>
 800af6c:	0002      	movs	r2, r0
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	69ba      	ldr	r2, [r7, #24]
 800af74:	429a      	cmp	r2, r3
 800af76:	d302      	bcc.n	800af7e <UART_WaitOnFlagUntilTimeout+0x2e>
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d11b      	bne.n	800afb6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	492f      	ldr	r1, [pc, #188]	; (800b048 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800af8a:	400a      	ands	r2, r1
 800af8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2101      	movs	r1, #1
 800af9a:	438a      	bics	r2, r1
 800af9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2220      	movs	r2, #32
 800afa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2274      	movs	r2, #116	; 0x74
 800afae:	2100      	movs	r1, #0
 800afb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e044      	b.n	800b040 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2204      	movs	r2, #4
 800afbe:	4013      	ands	r3, r2
 800afc0:	d02e      	beq.n	800b020 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	2380      	movs	r3, #128	; 0x80
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	401a      	ands	r2, r3
 800afce:	2380      	movs	r3, #128	; 0x80
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d124      	bne.n	800b020 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2280      	movs	r2, #128	; 0x80
 800afdc:	0112      	lsls	r2, r2, #4
 800afde:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4917      	ldr	r1, [pc, #92]	; (800b048 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800afec:	400a      	ands	r2, r1
 800afee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2101      	movs	r1, #1
 800affc:	438a      	bics	r2, r1
 800affe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2220      	movs	r2, #32
 800b004:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2220      	movs	r2, #32
 800b00a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2280      	movs	r2, #128	; 0x80
 800b010:	2120      	movs	r1, #32
 800b012:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2274      	movs	r2, #116	; 0x74
 800b018:	2100      	movs	r1, #0
 800b01a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e00f      	b.n	800b040 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	4013      	ands	r3, r2
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	425a      	negs	r2, r3
 800b030:	4153      	adcs	r3, r2
 800b032:	b2db      	uxtb	r3, r3
 800b034:	001a      	movs	r2, r3
 800b036:	1dfb      	adds	r3, r7, #7
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d091      	beq.n	800af62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	0018      	movs	r0, r3
 800b042:	46bd      	mov	sp, r7
 800b044:	b004      	add	sp, #16
 800b046:	bd80      	pop	{r7, pc}
 800b048:	fffffe5f 	.word	0xfffffe5f

0800b04c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	1dbb      	adds	r3, r7, #6
 800b058:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	1dba      	adds	r2, r7, #6
 800b064:	2158      	movs	r1, #88	; 0x58
 800b066:	8812      	ldrh	r2, [r2, #0]
 800b068:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	1dba      	adds	r2, r7, #6
 800b06e:	215a      	movs	r1, #90	; 0x5a
 800b070:	8812      	ldrh	r2, [r2, #0]
 800b072:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689a      	ldr	r2, [r3, #8]
 800b07e:	2380      	movs	r3, #128	; 0x80
 800b080:	015b      	lsls	r3, r3, #5
 800b082:	429a      	cmp	r2, r3
 800b084:	d10d      	bne.n	800b0a2 <UART_Start_Receive_IT+0x56>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d104      	bne.n	800b098 <UART_Start_Receive_IT+0x4c>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	225c      	movs	r2, #92	; 0x5c
 800b092:	4932      	ldr	r1, [pc, #200]	; (800b15c <UART_Start_Receive_IT+0x110>)
 800b094:	5299      	strh	r1, [r3, r2]
 800b096:	e02e      	b.n	800b0f6 <UART_Start_Receive_IT+0xaa>
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	225c      	movs	r2, #92	; 0x5c
 800b09c:	21ff      	movs	r1, #255	; 0xff
 800b09e:	5299      	strh	r1, [r3, r2]
 800b0a0:	e029      	b.n	800b0f6 <UART_Start_Receive_IT+0xaa>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10d      	bne.n	800b0c6 <UART_Start_Receive_IT+0x7a>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d104      	bne.n	800b0bc <UART_Start_Receive_IT+0x70>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	225c      	movs	r2, #92	; 0x5c
 800b0b6:	21ff      	movs	r1, #255	; 0xff
 800b0b8:	5299      	strh	r1, [r3, r2]
 800b0ba:	e01c      	b.n	800b0f6 <UART_Start_Receive_IT+0xaa>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	225c      	movs	r2, #92	; 0x5c
 800b0c0:	217f      	movs	r1, #127	; 0x7f
 800b0c2:	5299      	strh	r1, [r3, r2]
 800b0c4:	e017      	b.n	800b0f6 <UART_Start_Receive_IT+0xaa>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	2380      	movs	r3, #128	; 0x80
 800b0cc:	055b      	lsls	r3, r3, #21
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d10d      	bne.n	800b0ee <UART_Start_Receive_IT+0xa2>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d104      	bne.n	800b0e4 <UART_Start_Receive_IT+0x98>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	225c      	movs	r2, #92	; 0x5c
 800b0de:	217f      	movs	r1, #127	; 0x7f
 800b0e0:	5299      	strh	r1, [r3, r2]
 800b0e2:	e008      	b.n	800b0f6 <UART_Start_Receive_IT+0xaa>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	225c      	movs	r2, #92	; 0x5c
 800b0e8:	213f      	movs	r1, #63	; 0x3f
 800b0ea:	5299      	strh	r1, [r3, r2]
 800b0ec:	e003      	b.n	800b0f6 <UART_Start_Receive_IT+0xaa>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	225c      	movs	r2, #92	; 0x5c
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2280      	movs	r2, #128	; 0x80
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2222      	movs	r2, #34	; 0x22
 800b102:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	689a      	ldr	r2, [r3, #8]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2101      	movs	r1, #1
 800b110:	430a      	orrs	r2, r1
 800b112:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	689a      	ldr	r2, [r3, #8]
 800b118:	2380      	movs	r3, #128	; 0x80
 800b11a:	015b      	lsls	r3, r3, #5
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d107      	bne.n	800b130 <UART_Start_Receive_IT+0xe4>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d103      	bne.n	800b130 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4a0d      	ldr	r2, [pc, #52]	; (800b160 <UART_Start_Receive_IT+0x114>)
 800b12c:	665a      	str	r2, [r3, #100]	; 0x64
 800b12e:	e002      	b.n	800b136 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	4a0c      	ldr	r2, [pc, #48]	; (800b164 <UART_Start_Receive_IT+0x118>)
 800b134:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2274      	movs	r2, #116	; 0x74
 800b13a:	2100      	movs	r1, #0
 800b13c:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2190      	movs	r1, #144	; 0x90
 800b14a:	0049      	lsls	r1, r1, #1
 800b14c:	430a      	orrs	r2, r1
 800b14e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	0018      	movs	r0, r3
 800b154:	46bd      	mov	sp, r7
 800b156:	b004      	add	sp, #16
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	000001ff 	.word	0x000001ff
 800b160:	0800b431 	.word	0x0800b431
 800b164:	0800b349 	.word	0x0800b349

0800b168 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	21c0      	movs	r1, #192	; 0xc0
 800b17c:	438a      	bics	r2, r1
 800b17e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2220      	movs	r2, #32
 800b184:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b186:	46c0      	nop			; (mov r8, r8)
 800b188:	46bd      	mov	sp, r7
 800b18a:	b002      	add	sp, #8
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4912      	ldr	r1, [pc, #72]	; (800b1ec <UART_EndRxTransfer+0x5c>)
 800b1a4:	400a      	ands	r2, r1
 800b1a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	689a      	ldr	r2, [r3, #8]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2101      	movs	r1, #1
 800b1b4:	438a      	bics	r2, r1
 800b1b6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d107      	bne.n	800b1d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2110      	movs	r1, #16
 800b1cc:	438a      	bics	r2, r1
 800b1ce:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b1e2:	46c0      	nop			; (mov r8, r8)
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	b002      	add	sp, #8
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	46c0      	nop			; (mov r8, r8)
 800b1ec:	fffffedf 	.word	0xfffffedf

0800b1f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2220      	movs	r2, #32
 800b206:	4013      	ands	r3, r2
 800b208:	d114      	bne.n	800b234 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2252      	movs	r2, #82	; 0x52
 800b20e:	2100      	movs	r1, #0
 800b210:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	689a      	ldr	r2, [r3, #8]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2180      	movs	r1, #128	; 0x80
 800b21e:	438a      	bics	r2, r1
 800b220:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2140      	movs	r1, #64	; 0x40
 800b22e:	430a      	orrs	r2, r1
 800b230:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b232:	e003      	b.n	800b23c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	0018      	movs	r0, r3
 800b238:	f7f9 fc88 	bl	8004b4c <HAL_UART_TxCpltCallback>
}
 800b23c:	46c0      	nop			; (mov r8, r8)
 800b23e:	46bd      	mov	sp, r7
 800b240:	b004      	add	sp, #16
 800b242:	bd80      	pop	{r7, pc}

0800b244 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b250:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	0018      	movs	r0, r3
 800b256:	f7ff fac3 	bl	800a7e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b25a:	46c0      	nop			; (mov r8, r8)
 800b25c:	46bd      	mov	sp, r7
 800b25e:	b004      	add	sp, #16
 800b260:	bd80      	pop	{r7, pc}

0800b262 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b086      	sub	sp, #24
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b274:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	2280      	movs	r2, #128	; 0x80
 800b284:	4013      	ands	r3, r2
 800b286:	2b80      	cmp	r3, #128	; 0x80
 800b288:	d10a      	bne.n	800b2a0 <UART_DMAError+0x3e>
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2b21      	cmp	r3, #33	; 0x21
 800b28e:	d107      	bne.n	800b2a0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2252      	movs	r2, #82	; 0x52
 800b294:	2100      	movs	r1, #0
 800b296:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	0018      	movs	r0, r3
 800b29c:	f7ff ff64 	bl	800b168 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	2240      	movs	r2, #64	; 0x40
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	2b40      	cmp	r3, #64	; 0x40
 800b2ac:	d10a      	bne.n	800b2c4 <UART_DMAError+0x62>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2b22      	cmp	r3, #34	; 0x22
 800b2b2:	d107      	bne.n	800b2c4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	225a      	movs	r2, #90	; 0x5a
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	0018      	movs	r0, r3
 800b2c0:	f7ff ff66 	bl	800b190 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2280      	movs	r2, #128	; 0x80
 800b2c8:	589b      	ldr	r3, [r3, r2]
 800b2ca:	2210      	movs	r2, #16
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2180      	movs	r1, #128	; 0x80
 800b2d2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	f7ff fa8a 	bl	800a7f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2dc:	46c0      	nop			; (mov r8, r8)
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	b006      	add	sp, #24
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	225a      	movs	r2, #90	; 0x5a
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2252      	movs	r2, #82	; 0x52
 800b2fe:	2100      	movs	r1, #0
 800b300:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	0018      	movs	r0, r3
 800b306:	f7ff fa73 	bl	800a7f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b30a:	46c0      	nop			; (mov r8, r8)
 800b30c:	46bd      	mov	sp, r7
 800b30e:	b004      	add	sp, #16
 800b310:	bd80      	pop	{r7, pc}

0800b312 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b082      	sub	sp, #8
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2140      	movs	r1, #64	; 0x40
 800b326:	438a      	bics	r2, r1
 800b328:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2220      	movs	r2, #32
 800b32e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	0018      	movs	r0, r3
 800b33a:	f7f9 fc07 	bl	8004b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	46bd      	mov	sp, r7
 800b342:	b002      	add	sp, #8
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b350:	200e      	movs	r0, #14
 800b352:	183b      	adds	r3, r7, r0
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	215c      	movs	r1, #92	; 0x5c
 800b358:	5a52      	ldrh	r2, [r2, r1]
 800b35a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b360:	2b22      	cmp	r3, #34	; 0x22
 800b362:	d157      	bne.n	800b414 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b36a:	210c      	movs	r1, #12
 800b36c:	187b      	adds	r3, r7, r1
 800b36e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b370:	187b      	adds	r3, r7, r1
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	b2da      	uxtb	r2, r3
 800b376:	183b      	adds	r3, r7, r0
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	b2d9      	uxtb	r1, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b380:	400a      	ands	r2, r1
 800b382:	b2d2      	uxtb	r2, r2
 800b384:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	225a      	movs	r2, #90	; 0x5a
 800b394:	5a9b      	ldrh	r3, [r3, r2]
 800b396:	b29b      	uxth	r3, r3
 800b398:	3b01      	subs	r3, #1
 800b39a:	b299      	uxth	r1, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	225a      	movs	r2, #90	; 0x5a
 800b3a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	225a      	movs	r2, #90	; 0x5a
 800b3a6:	5a9b      	ldrh	r3, [r3, r2]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d13a      	bne.n	800b424 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	491c      	ldr	r1, [pc, #112]	; (800b42c <UART_RxISR_8BIT+0xe4>)
 800b3ba:	400a      	ands	r2, r1
 800b3bc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	438a      	bics	r2, r1
 800b3cc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d110      	bne.n	800b404 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2110      	movs	r1, #16
 800b3ee:	438a      	bics	r2, r1
 800b3f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2258      	movs	r2, #88	; 0x58
 800b3f6:	5a9a      	ldrh	r2, [r3, r2]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	0011      	movs	r1, r2
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	f7ff f9ff 	bl	800a800 <HAL_UARTEx_RxEventCallback>
 800b402:	e003      	b.n	800b40c <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	0018      	movs	r0, r3
 800b408:	f7f9 fbae 	bl	8004b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b412:	e007      	b.n	800b424 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	699a      	ldr	r2, [r3, #24]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2108      	movs	r1, #8
 800b420:	430a      	orrs	r2, r1
 800b422:	619a      	str	r2, [r3, #24]
}
 800b424:	46c0      	nop			; (mov r8, r8)
 800b426:	46bd      	mov	sp, r7
 800b428:	b004      	add	sp, #16
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	fffffedf 	.word	0xfffffedf

0800b430 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b438:	200e      	movs	r0, #14
 800b43a:	183b      	adds	r3, r7, r0
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	215c      	movs	r1, #92	; 0x5c
 800b440:	5a52      	ldrh	r2, [r2, r1]
 800b442:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b448:	2b22      	cmp	r3, #34	; 0x22
 800b44a:	d157      	bne.n	800b4fc <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b452:	210c      	movs	r1, #12
 800b454:	187b      	adds	r3, r7, r1
 800b456:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b45e:	187b      	adds	r3, r7, r1
 800b460:	183a      	adds	r2, r7, r0
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	8812      	ldrh	r2, [r2, #0]
 800b466:	4013      	ands	r3, r2
 800b468:	b29a      	uxth	r2, r3
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b472:	1c9a      	adds	r2, r3, #2
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	225a      	movs	r2, #90	; 0x5a
 800b47c:	5a9b      	ldrh	r3, [r3, r2]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	3b01      	subs	r3, #1
 800b482:	b299      	uxth	r1, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	225a      	movs	r2, #90	; 0x5a
 800b488:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	225a      	movs	r2, #90	; 0x5a
 800b48e:	5a9b      	ldrh	r3, [r3, r2]
 800b490:	b29b      	uxth	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	d13a      	bne.n	800b50c <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	491c      	ldr	r1, [pc, #112]	; (800b514 <UART_RxISR_16BIT+0xe4>)
 800b4a2:	400a      	ands	r2, r1
 800b4a4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	689a      	ldr	r2, [r3, #8]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	438a      	bics	r2, r1
 800b4b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d110      	bne.n	800b4ec <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2110      	movs	r1, #16
 800b4d6:	438a      	bics	r2, r1
 800b4d8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2258      	movs	r2, #88	; 0x58
 800b4de:	5a9a      	ldrh	r2, [r3, r2]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	0011      	movs	r1, r2
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	f7ff f98b 	bl	800a800 <HAL_UARTEx_RxEventCallback>
 800b4ea:	e003      	b.n	800b4f4 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	0018      	movs	r0, r3
 800b4f0:	f7f9 fb3a 	bl	8004b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4fa:	e007      	b.n	800b50c <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	699a      	ldr	r2, [r3, #24]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2108      	movs	r1, #8
 800b508:	430a      	orrs	r2, r1
 800b50a:	619a      	str	r2, [r3, #24]
}
 800b50c:	46c0      	nop			; (mov r8, r8)
 800b50e:	46bd      	mov	sp, r7
 800b510:	b004      	add	sp, #16
 800b512:	bd80      	pop	{r7, pc}
 800b514:	fffffedf 	.word	0xfffffedf

0800b518 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b520:	46c0      	nop			; (mov r8, r8)
 800b522:	46bd      	mov	sp, r7
 800b524:	b002      	add	sp, #8
 800b526:	bd80      	pop	{r7, pc}

0800b528 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	1d3b      	adds	r3, r7, #4
 800b532:	6019      	str	r1, [r3, #0]
 800b534:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b536:	2317      	movs	r3, #23
 800b538:	18fb      	adds	r3, r7, r3
 800b53a:	2200      	movs	r2, #0
 800b53c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2274      	movs	r2, #116	; 0x74
 800b542:	5c9b      	ldrb	r3, [r3, r2]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d101      	bne.n	800b54c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800b548:	2302      	movs	r3, #2
 800b54a:	e04a      	b.n	800b5e2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2274      	movs	r2, #116	; 0x74
 800b550:	2101      	movs	r1, #1
 800b552:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2224      	movs	r2, #36	; 0x24
 800b558:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2101      	movs	r1, #1
 800b566:	438a      	bics	r2, r1
 800b568:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	4a1e      	ldr	r2, [pc, #120]	; (800b5ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800b572:	4013      	ands	r3, r2
 800b574:	0019      	movs	r1, r3
 800b576:	1d3b      	adds	r3, r7, #4
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	430a      	orrs	r2, r1
 800b580:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b582:	1d3b      	adds	r3, r7, #4
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d105      	bne.n	800b596 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b58a:	1d3b      	adds	r3, r7, #4
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	6819      	ldr	r1, [r3, #0]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	f000 f84f 	bl	800b634 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5a6:	f7f9 f866 	bl	8004676 <HAL_GetTick>
 800b5aa:	0003      	movs	r3, r0
 800b5ac:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	2280      	movs	r2, #128	; 0x80
 800b5b2:	03d1      	lsls	r1, r2, #15
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	4a0e      	ldr	r2, [pc, #56]	; (800b5f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800b5b8:	9200      	str	r2, [sp, #0]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f7ff fcc8 	bl	800af50 <UART_WaitOnFlagUntilTimeout>
 800b5c0:	1e03      	subs	r3, r0, #0
 800b5c2:	d004      	beq.n	800b5ce <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800b5c4:	2317      	movs	r3, #23
 800b5c6:	18fb      	adds	r3, r7, r3
 800b5c8:	2203      	movs	r2, #3
 800b5ca:	701a      	strb	r2, [r3, #0]
 800b5cc:	e002      	b.n	800b5d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2220      	movs	r2, #32
 800b5d2:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2274      	movs	r2, #116	; 0x74
 800b5d8:	2100      	movs	r1, #0
 800b5da:	5499      	strb	r1, [r3, r2]

  return status;
 800b5dc:	2317      	movs	r3, #23
 800b5de:	18fb      	adds	r3, r7, r3
 800b5e0:	781b      	ldrb	r3, [r3, #0]
}
 800b5e2:	0018      	movs	r0, r3
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	b006      	add	sp, #24
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	46c0      	nop			; (mov r8, r8)
 800b5ec:	ffcfffff 	.word	0xffcfffff
 800b5f0:	01ffffff 	.word	0x01ffffff

0800b5f4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2274      	movs	r2, #116	; 0x74
 800b600:	5c9b      	ldrb	r3, [r3, r2]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d101      	bne.n	800b60a <HAL_UARTEx_EnableStopMode+0x16>
 800b606:	2302      	movs	r3, #2
 800b608:	e010      	b.n	800b62c <HAL_UARTEx_EnableStopMode+0x38>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2274      	movs	r2, #116	; 0x74
 800b60e:	2101      	movs	r1, #1
 800b610:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2102      	movs	r1, #2
 800b61e:	430a      	orrs	r2, r1
 800b620:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2274      	movs	r2, #116	; 0x74
 800b626:	2100      	movs	r1, #0
 800b628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	0018      	movs	r0, r3
 800b62e:	46bd      	mov	sp, r7
 800b630:	b002      	add	sp, #8
 800b632:	bd80      	pop	{r7, pc}

0800b634 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	1d3b      	adds	r3, r7, #4
 800b63e:	6019      	str	r1, [r3, #0]
 800b640:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	2210      	movs	r2, #16
 800b64a:	4393      	bics	r3, r2
 800b64c:	001a      	movs	r2, r3
 800b64e:	1d3b      	adds	r3, r7, #4
 800b650:	889b      	ldrh	r3, [r3, #4]
 800b652:	0019      	movs	r1, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	021b      	lsls	r3, r3, #8
 800b664:	0a19      	lsrs	r1, r3, #8
 800b666:	1d3b      	adds	r3, r7, #4
 800b668:	799b      	ldrb	r3, [r3, #6]
 800b66a:	061a      	lsls	r2, r3, #24
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	430a      	orrs	r2, r1
 800b672:	605a      	str	r2, [r3, #4]
}
 800b674:	46c0      	nop			; (mov r8, r8)
 800b676:	46bd      	mov	sp, r7
 800b678:	b004      	add	sp, #16
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	33f1      	adds	r3, #241	; 0xf1
 800b688:	2210      	movs	r2, #16
 800b68a:	2100      	movs	r1, #0
 800b68c:	0018      	movs	r0, r3
 800b68e:	f00d fc99 	bl	8018fc4 <memset1>
    ctx->M_n = 0;
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	238a      	movs	r3, #138	; 0x8a
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	2100      	movs	r1, #0
 800b69a:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	22f0      	movs	r2, #240	; 0xf0
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f00d fc8e 	bl	8018fc4 <memset1>
}
 800b6a8:	46c0      	nop			; (mov r8, r8)
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	b002      	add	sp, #8
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	2110      	movs	r1, #16
 800b6c0:	0018      	movs	r0, r3
 800b6c2:	f000 feaf 	bl	800c424 <lorawan_aes_set_key>
}
 800b6c6:	46c0      	nop			; (mov r8, r8)
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	b002      	add	sp, #8
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b6ce:	b590      	push	{r4, r7, lr}
 800b6d0:	b08d      	sub	sp, #52	; 0x34
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	60f8      	str	r0, [r7, #12]
 800b6d6:	60b9      	str	r1, [r7, #8]
 800b6d8:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	238a      	movs	r3, #138	; 0x8a
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	58d3      	ldr	r3, [r2, r3]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d100      	bne.n	800b6e8 <AES_CMAC_Update+0x1a>
 800b6e6:	e0a4      	b.n	800b832 <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	238a      	movs	r3, #138	; 0x8a
 800b6ec:	005b      	lsls	r3, r3, #1
 800b6ee:	58d3      	ldr	r3, [r2, r3]
 800b6f0:	2210      	movs	r2, #16
 800b6f2:	1ad2      	subs	r2, r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d900      	bls.n	800b6fc <AES_CMAC_Update+0x2e>
 800b6fa:	0013      	movs	r3, r2
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	1c9a      	adds	r2, r3, #2
 800b702:	32ff      	adds	r2, #255	; 0xff
 800b704:	68f9      	ldr	r1, [r7, #12]
 800b706:	238a      	movs	r3, #138	; 0x8a
 800b708:	005b      	lsls	r3, r3, #1
 800b70a:	58cb      	ldr	r3, [r1, r3]
 800b70c:	18d3      	adds	r3, r2, r3
 800b70e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b710:	b292      	uxth	r2, r2
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	0018      	movs	r0, r3
 800b716:	f00d fc17 	bl	8018f48 <memcpy1>
        ctx->M_n += mlen;
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	238a      	movs	r3, #138	; 0x8a
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	58d2      	ldr	r2, [r2, r3]
 800b722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b724:	18d1      	adds	r1, r2, r3
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	238a      	movs	r3, #138	; 0x8a
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	238a      	movs	r3, #138	; 0x8a
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	58d3      	ldr	r3, [r2, r3]
 800b736:	2b0f      	cmp	r3, #15
 800b738:	d800      	bhi.n	800b73c <AES_CMAC_Update+0x6e>
 800b73a:	e08c      	b.n	800b856 <AES_CMAC_Update+0x188>
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	429a      	cmp	r2, r3
 800b742:	d100      	bne.n	800b746 <AES_CMAC_Update+0x78>
 800b744:	e087      	b.n	800b856 <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800b746:	2300      	movs	r3, #0
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b74a:	e018      	b.n	800b77e <AES_CMAC_Update+0xb0>
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	21f1      	movs	r1, #241	; 0xf1
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	18d3      	adds	r3, r2, r3
 800b754:	185b      	adds	r3, r3, r1
 800b756:	781a      	ldrb	r2, [r3, #0]
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	2302      	movs	r3, #2
 800b75c:	33ff      	adds	r3, #255	; 0xff
 800b75e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b760:	1841      	adds	r1, r0, r1
 800b762:	18cb      	adds	r3, r1, r3
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	4053      	eors	r3, r2
 800b768:	b2d8      	uxtb	r0, r3
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	21f1      	movs	r1, #241	; 0xf1
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	18d3      	adds	r3, r2, r3
 800b772:	185b      	adds	r3, r3, r1
 800b774:	1c02      	adds	r2, r0, #0
 800b776:	701a      	strb	r2, [r3, #0]
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	3301      	adds	r3, #1
 800b77c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	2b0f      	cmp	r3, #15
 800b782:	dde3      	ble.n	800b74c <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	33f1      	adds	r3, #241	; 0xf1
 800b788:	0019      	movs	r1, r3
 800b78a:	2414      	movs	r4, #20
 800b78c:	193b      	adds	r3, r7, r4
 800b78e:	2210      	movs	r2, #16
 800b790:	0018      	movs	r0, r3
 800b792:	f00d fbd9 	bl	8018f48 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	1939      	adds	r1, r7, r4
 800b79a:	193b      	adds	r3, r7, r4
 800b79c:	0018      	movs	r0, r3
 800b79e:	f000 ff7d 	bl	800c69c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	33f1      	adds	r3, #241	; 0xf1
 800b7a6:	1939      	adds	r1, r7, r4
 800b7a8:	2210      	movs	r2, #16
 800b7aa:	0018      	movs	r0, r3
 800b7ac:	f00d fbcc 	bl	8018f48 <memcpy1>

        data += mlen;
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b4:	18d3      	adds	r3, r2, r3
 800b7b6:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b7c0:	e037      	b.n	800b832 <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7c6:	e015      	b.n	800b7f4 <AES_CMAC_Update+0x126>
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	21f1      	movs	r1, #241	; 0xf1
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	18d3      	adds	r3, r2, r3
 800b7d0:	185b      	adds	r3, r3, r1
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	18cb      	adds	r3, r1, r3
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	4053      	eors	r3, r2
 800b7de:	b2d8      	uxtb	r0, r3
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	21f1      	movs	r1, #241	; 0xf1
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	18d3      	adds	r3, r2, r3
 800b7e8:	185b      	adds	r3, r3, r1
 800b7ea:	1c02      	adds	r2, r0, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	2b0f      	cmp	r3, #15
 800b7f8:	dde6      	ble.n	800b7c8 <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	33f1      	adds	r3, #241	; 0xf1
 800b7fe:	0019      	movs	r1, r3
 800b800:	2414      	movs	r4, #20
 800b802:	193b      	adds	r3, r7, r4
 800b804:	2210      	movs	r2, #16
 800b806:	0018      	movs	r0, r3
 800b808:	f00d fb9e 	bl	8018f48 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	1939      	adds	r1, r7, r4
 800b810:	193b      	adds	r3, r7, r4
 800b812:	0018      	movs	r0, r3
 800b814:	f000 ff42 	bl	800c69c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	33f1      	adds	r3, #241	; 0xf1
 800b81c:	1939      	adds	r1, r7, r4
 800b81e:	2210      	movs	r2, #16
 800b820:	0018      	movs	r0, r3
 800b822:	f00d fb91 	bl	8018f48 <memcpy1>

        data += 16;
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	3310      	adds	r3, #16
 800b82a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3b10      	subs	r3, #16
 800b830:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b10      	cmp	r3, #16
 800b836:	d8c4      	bhi.n	800b7c2 <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3302      	adds	r3, #2
 800b83c:	33ff      	adds	r3, #255	; 0xff
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	b292      	uxth	r2, r2
 800b842:	68b9      	ldr	r1, [r7, #8]
 800b844:	0018      	movs	r0, r3
 800b846:	f00d fb7f 	bl	8018f48 <memcpy1>
    ctx->M_n = len;
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	238a      	movs	r3, #138	; 0x8a
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	6879      	ldr	r1, [r7, #4]
 800b852:	50d1      	str	r1, [r2, r3]
 800b854:	e000      	b.n	800b858 <AES_CMAC_Update+0x18a>
            return;
 800b856:	46c0      	nop			; (mov r8, r8)
}
 800b858:	46bd      	mov	sp, r7
 800b85a:	b00d      	add	sp, #52	; 0x34
 800b85c:	bd90      	pop	{r4, r7, pc}

0800b85e <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b85e:	b590      	push	{r4, r7, lr}
 800b860:	b093      	sub	sp, #76	; 0x4c
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b868:	241c      	movs	r4, #28
 800b86a:	193b      	adds	r3, r7, r4
 800b86c:	2210      	movs	r2, #16
 800b86e:	2100      	movs	r1, #0
 800b870:	0018      	movs	r0, r3
 800b872:	f00d fba7 	bl	8018fc4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	1939      	adds	r1, r7, r4
 800b87a:	193b      	adds	r3, r7, r4
 800b87c:	0018      	movs	r0, r3
 800b87e:	f000 ff0d 	bl	800c69c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b882:	193b      	adds	r3, r7, r4
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	b25b      	sxtb	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	da2e      	bge.n	800b8ea <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800b88c:	2300      	movs	r3, #0
 800b88e:	647b      	str	r3, [r7, #68]	; 0x44
 800b890:	e018      	b.n	800b8c4 <AES_CMAC_Final+0x66>
 800b892:	201c      	movs	r0, #28
 800b894:	183a      	adds	r2, r7, r0
 800b896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b898:	18d3      	adds	r3, r2, r3
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	b25a      	sxtb	r2, r3
 800b8a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	1839      	adds	r1, r7, r0
 800b8a6:	5ccb      	ldrb	r3, [r1, r3]
 800b8a8:	09db      	lsrs	r3, r3, #7
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	b25b      	sxtb	r3, r3
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	b25b      	sxtb	r3, r3
 800b8b2:	b2d9      	uxtb	r1, r3
 800b8b4:	183a      	adds	r2, r7, r0
 800b8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b8:	18d3      	adds	r3, r2, r3
 800b8ba:	1c0a      	adds	r2, r1, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
 800b8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	647b      	str	r3, [r7, #68]	; 0x44
 800b8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c6:	2b0e      	cmp	r3, #14
 800b8c8:	dde3      	ble.n	800b892 <AES_CMAC_Final+0x34>
 800b8ca:	211c      	movs	r1, #28
 800b8cc:	187b      	adds	r3, r7, r1
 800b8ce:	7bdb      	ldrb	r3, [r3, #15]
 800b8d0:	18db      	adds	r3, r3, r3
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	187b      	adds	r3, r7, r1
 800b8d6:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800b8d8:	187b      	adds	r3, r7, r1
 800b8da:	7bdb      	ldrb	r3, [r3, #15]
 800b8dc:	2279      	movs	r2, #121	; 0x79
 800b8de:	4252      	negs	r2, r2
 800b8e0:	4053      	eors	r3, r2
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	187b      	adds	r3, r7, r1
 800b8e6:	73da      	strb	r2, [r3, #15]
 800b8e8:	e025      	b.n	800b936 <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b8ee:	e018      	b.n	800b922 <AES_CMAC_Final+0xc4>
 800b8f0:	201c      	movs	r0, #28
 800b8f2:	183a      	adds	r2, r7, r0
 800b8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f6:	18d3      	adds	r3, r2, r3
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	b25a      	sxtb	r2, r3
 800b8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b900:	3301      	adds	r3, #1
 800b902:	1839      	adds	r1, r7, r0
 800b904:	5ccb      	ldrb	r3, [r1, r3]
 800b906:	09db      	lsrs	r3, r3, #7
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	b25b      	sxtb	r3, r3
 800b90c:	4313      	orrs	r3, r2
 800b90e:	b25b      	sxtb	r3, r3
 800b910:	b2d9      	uxtb	r1, r3
 800b912:	183a      	adds	r2, r7, r0
 800b914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b916:	18d3      	adds	r3, r2, r3
 800b918:	1c0a      	adds	r2, r1, #0
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b91e:	3301      	adds	r3, #1
 800b920:	643b      	str	r3, [r7, #64]	; 0x40
 800b922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b924:	2b0e      	cmp	r3, #14
 800b926:	dde3      	ble.n	800b8f0 <AES_CMAC_Final+0x92>
 800b928:	211c      	movs	r1, #28
 800b92a:	187b      	adds	r3, r7, r1
 800b92c:	7bdb      	ldrb	r3, [r3, #15]
 800b92e:	18db      	adds	r3, r3, r3
 800b930:	b2da      	uxtb	r2, r3
 800b932:	187b      	adds	r3, r7, r1
 800b934:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	238a      	movs	r3, #138	; 0x8a
 800b93a:	005b      	lsls	r3, r3, #1
 800b93c:	58d3      	ldr	r3, [r2, r3]
 800b93e:	2b10      	cmp	r3, #16
 800b940:	d11f      	bne.n	800b982 <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b942:	2300      	movs	r3, #0
 800b944:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b946:	e018      	b.n	800b97a <AES_CMAC_Final+0x11c>
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	2302      	movs	r3, #2
 800b94c:	33ff      	adds	r3, #255	; 0xff
 800b94e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b950:	188a      	adds	r2, r1, r2
 800b952:	18d3      	adds	r3, r2, r3
 800b954:	781a      	ldrb	r2, [r3, #0]
 800b956:	231c      	movs	r3, #28
 800b958:	18f9      	adds	r1, r7, r3
 800b95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95c:	18cb      	adds	r3, r1, r3
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	4053      	eors	r3, r2
 800b962:	b2d8      	uxtb	r0, r3
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	2302      	movs	r3, #2
 800b968:	33ff      	adds	r3, #255	; 0xff
 800b96a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b96c:	188a      	adds	r2, r1, r2
 800b96e:	18d3      	adds	r3, r2, r3
 800b970:	1c02      	adds	r2, r0, #0
 800b972:	701a      	strb	r2, [r3, #0]
 800b974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b976:	3301      	adds	r3, #1
 800b978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b97c:	2b0f      	cmp	r3, #15
 800b97e:	dde3      	ble.n	800b948 <AES_CMAC_Final+0xea>
 800b980:	e09f      	b.n	800bac2 <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b982:	231c      	movs	r3, #28
 800b984:	18fb      	adds	r3, r7, r3
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	b25b      	sxtb	r3, r3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	da2e      	bge.n	800b9ec <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800b98e:	2300      	movs	r3, #0
 800b990:	63bb      	str	r3, [r7, #56]	; 0x38
 800b992:	e018      	b.n	800b9c6 <AES_CMAC_Final+0x168>
 800b994:	201c      	movs	r0, #28
 800b996:	183a      	adds	r2, r7, r0
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	18d3      	adds	r3, r2, r3
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	b25a      	sxtb	r2, r3
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	1839      	adds	r1, r7, r0
 800b9a8:	5ccb      	ldrb	r3, [r1, r3]
 800b9aa:	09db      	lsrs	r3, r3, #7
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	b25b      	sxtb	r3, r3
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	b25b      	sxtb	r3, r3
 800b9b4:	b2d9      	uxtb	r1, r3
 800b9b6:	183a      	adds	r2, r7, r0
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	18d3      	adds	r3, r2, r3
 800b9bc:	1c0a      	adds	r2, r1, #0
 800b9be:	701a      	strb	r2, [r3, #0]
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	2b0e      	cmp	r3, #14
 800b9ca:	dde3      	ble.n	800b994 <AES_CMAC_Final+0x136>
 800b9cc:	211c      	movs	r1, #28
 800b9ce:	187b      	adds	r3, r7, r1
 800b9d0:	7bdb      	ldrb	r3, [r3, #15]
 800b9d2:	18db      	adds	r3, r3, r3
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	187b      	adds	r3, r7, r1
 800b9d8:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800b9da:	187b      	adds	r3, r7, r1
 800b9dc:	7bdb      	ldrb	r3, [r3, #15]
 800b9de:	2279      	movs	r2, #121	; 0x79
 800b9e0:	4252      	negs	r2, r2
 800b9e2:	4053      	eors	r3, r2
 800b9e4:	b2da      	uxtb	r2, r3
 800b9e6:	187b      	adds	r3, r7, r1
 800b9e8:	73da      	strb	r2, [r3, #15]
 800b9ea:	e025      	b.n	800ba38 <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f0:	e018      	b.n	800ba24 <AES_CMAC_Final+0x1c6>
 800b9f2:	201c      	movs	r0, #28
 800b9f4:	183a      	adds	r2, r7, r0
 800b9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f8:	18d3      	adds	r3, r2, r3
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	b25a      	sxtb	r2, r3
 800ba00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba02:	3301      	adds	r3, #1
 800ba04:	1839      	adds	r1, r7, r0
 800ba06:	5ccb      	ldrb	r3, [r1, r3]
 800ba08:	09db      	lsrs	r3, r3, #7
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	b25b      	sxtb	r3, r3
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	b25b      	sxtb	r3, r3
 800ba12:	b2d9      	uxtb	r1, r3
 800ba14:	183a      	adds	r2, r7, r0
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	18d3      	adds	r3, r2, r3
 800ba1a:	1c0a      	adds	r2, r1, #0
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba20:	3301      	adds	r3, #1
 800ba22:	637b      	str	r3, [r7, #52]	; 0x34
 800ba24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba26:	2b0e      	cmp	r3, #14
 800ba28:	dde3      	ble.n	800b9f2 <AES_CMAC_Final+0x194>
 800ba2a:	211c      	movs	r1, #28
 800ba2c:	187b      	adds	r3, r7, r1
 800ba2e:	7bdb      	ldrb	r3, [r3, #15]
 800ba30:	18db      	adds	r3, r3, r3
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	187b      	adds	r3, r7, r1
 800ba36:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	238a      	movs	r3, #138	; 0x8a
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	58d2      	ldr	r2, [r2, r3]
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	2302      	movs	r3, #2
 800ba44:	33ff      	adds	r3, #255	; 0xff
 800ba46:	188a      	adds	r2, r1, r2
 800ba48:	18d3      	adds	r3, r2, r3
 800ba4a:	2280      	movs	r2, #128	; 0x80
 800ba4c:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800ba4e:	e00a      	b.n	800ba66 <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	238a      	movs	r3, #138	; 0x8a
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	58d2      	ldr	r2, [r2, r3]
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	33ff      	adds	r3, #255	; 0xff
 800ba5e:	188a      	adds	r2, r1, r2
 800ba60:	18d3      	adds	r3, r2, r3
 800ba62:	2200      	movs	r2, #0
 800ba64:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	238a      	movs	r3, #138	; 0x8a
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	58d3      	ldr	r3, [r2, r3]
 800ba6e:	1c59      	adds	r1, r3, #1
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	238a      	movs	r3, #138	; 0x8a
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	50d1      	str	r1, [r2, r3]
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	238a      	movs	r3, #138	; 0x8a
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	58d3      	ldr	r3, [r2, r3]
 800ba80:	2b0f      	cmp	r3, #15
 800ba82:	d9e5      	bls.n	800ba50 <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800ba84:	2300      	movs	r3, #0
 800ba86:	633b      	str	r3, [r7, #48]	; 0x30
 800ba88:	e018      	b.n	800babc <AES_CMAC_Final+0x25e>
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	33ff      	adds	r3, #255	; 0xff
 800ba90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba92:	188a      	adds	r2, r1, r2
 800ba94:	18d3      	adds	r3, r2, r3
 800ba96:	781a      	ldrb	r2, [r3, #0]
 800ba98:	231c      	movs	r3, #28
 800ba9a:	18f9      	adds	r1, r7, r3
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	18cb      	adds	r3, r1, r3
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	4053      	eors	r3, r2
 800baa4:	b2d8      	uxtb	r0, r3
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	2302      	movs	r3, #2
 800baaa:	33ff      	adds	r3, #255	; 0xff
 800baac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baae:	188a      	adds	r2, r1, r2
 800bab0:	18d3      	adds	r3, r2, r3
 800bab2:	1c02      	adds	r2, r0, #0
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	3301      	adds	r3, #1
 800baba:	633b      	str	r3, [r7, #48]	; 0x30
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	2b0f      	cmp	r3, #15
 800bac0:	dde3      	ble.n	800ba8a <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800bac2:	2300      	movs	r3, #0
 800bac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bac6:	e018      	b.n	800bafa <AES_CMAC_Final+0x29c>
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	21f1      	movs	r1, #241	; 0xf1
 800bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bace:	18d3      	adds	r3, r2, r3
 800bad0:	185b      	adds	r3, r3, r1
 800bad2:	781a      	ldrb	r2, [r3, #0]
 800bad4:	6838      	ldr	r0, [r7, #0]
 800bad6:	2302      	movs	r3, #2
 800bad8:	33ff      	adds	r3, #255	; 0xff
 800bada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800badc:	1841      	adds	r1, r0, r1
 800bade:	18cb      	adds	r3, r1, r3
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	4053      	eors	r3, r2
 800bae4:	b2d8      	uxtb	r0, r3
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	21f1      	movs	r1, #241	; 0xf1
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	18d3      	adds	r3, r2, r3
 800baee:	185b      	adds	r3, r3, r1
 800baf0:	1c02      	adds	r2, r0, #0
 800baf2:	701a      	strb	r2, [r3, #0]
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	3301      	adds	r3, #1
 800baf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafc:	2b0f      	cmp	r3, #15
 800bafe:	dde3      	ble.n	800bac8 <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	33f1      	adds	r3, #241	; 0xf1
 800bb04:	0019      	movs	r1, r3
 800bb06:	240c      	movs	r4, #12
 800bb08:	193b      	adds	r3, r7, r4
 800bb0a:	2210      	movs	r2, #16
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	f00d fa1b 	bl	8018f48 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	6879      	ldr	r1, [r7, #4]
 800bb16:	193b      	adds	r3, r7, r4
 800bb18:	0018      	movs	r0, r3
 800bb1a:	f000 fdbf 	bl	800c69c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bb1e:	231c      	movs	r3, #28
 800bb20:	18fb      	adds	r3, r7, r3
 800bb22:	2210      	movs	r2, #16
 800bb24:	2100      	movs	r1, #0
 800bb26:	0018      	movs	r0, r3
 800bb28:	f00d fa4c 	bl	8018fc4 <memset1>
}
 800bb2c:	46c0      	nop			; (mov r8, r8)
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	b013      	add	sp, #76	; 0x4c
 800bb32:	bd90      	pop	{r4, r7, pc}

0800bb34 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	781a      	ldrb	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	7852      	ldrb	r2, [r2, #1]
 800bb4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3302      	adds	r3, #2
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	7892      	ldrb	r2, [r2, #2]
 800bb58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	3303      	adds	r3, #3
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	78d2      	ldrb	r2, [r2, #3]
 800bb62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3304      	adds	r3, #4
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	7912      	ldrb	r2, [r2, #4]
 800bb6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	3305      	adds	r3, #5
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	7952      	ldrb	r2, [r2, #5]
 800bb76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3306      	adds	r3, #6
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	7992      	ldrb	r2, [r2, #6]
 800bb80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	3307      	adds	r3, #7
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	79d2      	ldrb	r2, [r2, #7]
 800bb8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3308      	adds	r3, #8
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	7a12      	ldrb	r2, [r2, #8]
 800bb94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3309      	adds	r3, #9
 800bb9a:	683a      	ldr	r2, [r7, #0]
 800bb9c:	7a52      	ldrb	r2, [r2, #9]
 800bb9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	330a      	adds	r3, #10
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	7a92      	ldrb	r2, [r2, #10]
 800bba8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	330b      	adds	r3, #11
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	7ad2      	ldrb	r2, [r2, #11]
 800bbb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	330c      	adds	r3, #12
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	7b12      	ldrb	r2, [r2, #12]
 800bbbc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	330d      	adds	r3, #13
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	7b52      	ldrb	r2, [r2, #13]
 800bbc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	330e      	adds	r3, #14
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	7b92      	ldrb	r2, [r2, #14]
 800bbd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	330f      	adds	r3, #15
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	7bd2      	ldrb	r2, [r2, #15]
 800bbda:	701a      	strb	r2, [r3, #0]
#endif
}
 800bbdc:	46c0      	nop			; (mov r8, r8)
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	b002      	add	sp, #8
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	1dfb      	adds	r3, r7, #7
 800bbf0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bbf2:	e007      	b.n	800bc04 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	1c53      	adds	r3, r2, #1
 800bbf8:	60bb      	str	r3, [r7, #8]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	1c59      	adds	r1, r3, #1
 800bbfe:	60f9      	str	r1, [r7, #12]
 800bc00:	7812      	ldrb	r2, [r2, #0]
 800bc02:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bc04:	1dfb      	adds	r3, r7, #7
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	1dfa      	adds	r2, r7, #7
 800bc0a:	1e59      	subs	r1, r3, #1
 800bc0c:	7011      	strb	r1, [r2, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1f0      	bne.n	800bbf4 <copy_block_nn+0x10>
}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	46c0      	nop			; (mov r8, r8)
 800bc16:	46bd      	mov	sp, r7
 800bc18:	b004      	add	sp, #16
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	781a      	ldrb	r2, [r3, #0]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	4053      	eors	r3, r2
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	7819      	ldrb	r1, [r3, #0]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	781a      	ldrb	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	3301      	adds	r3, #1
 800bc46:	404a      	eors	r2, r1
 800bc48:	b2d2      	uxtb	r2, r2
 800bc4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3302      	adds	r3, #2
 800bc50:	7819      	ldrb	r1, [r3, #0]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	3302      	adds	r3, #2
 800bc56:	781a      	ldrb	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	3302      	adds	r3, #2
 800bc5c:	404a      	eors	r2, r1
 800bc5e:	b2d2      	uxtb	r2, r2
 800bc60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3303      	adds	r3, #3
 800bc66:	7819      	ldrb	r1, [r3, #0]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	3303      	adds	r3, #3
 800bc6c:	781a      	ldrb	r2, [r3, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3303      	adds	r3, #3
 800bc72:	404a      	eors	r2, r1
 800bc74:	b2d2      	uxtb	r2, r2
 800bc76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	7819      	ldrb	r1, [r3, #0]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	3304      	adds	r3, #4
 800bc82:	781a      	ldrb	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	3304      	adds	r3, #4
 800bc88:	404a      	eors	r2, r1
 800bc8a:	b2d2      	uxtb	r2, r2
 800bc8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3305      	adds	r3, #5
 800bc92:	7819      	ldrb	r1, [r3, #0]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	3305      	adds	r3, #5
 800bc98:	781a      	ldrb	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	3305      	adds	r3, #5
 800bc9e:	404a      	eors	r2, r1
 800bca0:	b2d2      	uxtb	r2, r2
 800bca2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	3306      	adds	r3, #6
 800bca8:	7819      	ldrb	r1, [r3, #0]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	3306      	adds	r3, #6
 800bcae:	781a      	ldrb	r2, [r3, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3306      	adds	r3, #6
 800bcb4:	404a      	eors	r2, r1
 800bcb6:	b2d2      	uxtb	r2, r2
 800bcb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3307      	adds	r3, #7
 800bcbe:	7819      	ldrb	r1, [r3, #0]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	3307      	adds	r3, #7
 800bcc4:	781a      	ldrb	r2, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3307      	adds	r3, #7
 800bcca:	404a      	eors	r2, r1
 800bccc:	b2d2      	uxtb	r2, r2
 800bcce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	7819      	ldrb	r1, [r3, #0]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	3308      	adds	r3, #8
 800bcda:	781a      	ldrb	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3308      	adds	r3, #8
 800bce0:	404a      	eors	r2, r1
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3309      	adds	r3, #9
 800bcea:	7819      	ldrb	r1, [r3, #0]
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	3309      	adds	r3, #9
 800bcf0:	781a      	ldrb	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	3309      	adds	r3, #9
 800bcf6:	404a      	eors	r2, r1
 800bcf8:	b2d2      	uxtb	r2, r2
 800bcfa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	330a      	adds	r3, #10
 800bd00:	7819      	ldrb	r1, [r3, #0]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	330a      	adds	r3, #10
 800bd06:	781a      	ldrb	r2, [r3, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	330a      	adds	r3, #10
 800bd0c:	404a      	eors	r2, r1
 800bd0e:	b2d2      	uxtb	r2, r2
 800bd10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	330b      	adds	r3, #11
 800bd16:	7819      	ldrb	r1, [r3, #0]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	330b      	adds	r3, #11
 800bd1c:	781a      	ldrb	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	330b      	adds	r3, #11
 800bd22:	404a      	eors	r2, r1
 800bd24:	b2d2      	uxtb	r2, r2
 800bd26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	330c      	adds	r3, #12
 800bd2c:	7819      	ldrb	r1, [r3, #0]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	330c      	adds	r3, #12
 800bd32:	781a      	ldrb	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	330c      	adds	r3, #12
 800bd38:	404a      	eors	r2, r1
 800bd3a:	b2d2      	uxtb	r2, r2
 800bd3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	330d      	adds	r3, #13
 800bd42:	7819      	ldrb	r1, [r3, #0]
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	330d      	adds	r3, #13
 800bd48:	781a      	ldrb	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	330d      	adds	r3, #13
 800bd4e:	404a      	eors	r2, r1
 800bd50:	b2d2      	uxtb	r2, r2
 800bd52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	330e      	adds	r3, #14
 800bd58:	7819      	ldrb	r1, [r3, #0]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	330e      	adds	r3, #14
 800bd5e:	781a      	ldrb	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	330e      	adds	r3, #14
 800bd64:	404a      	eors	r2, r1
 800bd66:	b2d2      	uxtb	r2, r2
 800bd68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	330f      	adds	r3, #15
 800bd6e:	7819      	ldrb	r1, [r3, #0]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	330f      	adds	r3, #15
 800bd74:	781a      	ldrb	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	330f      	adds	r3, #15
 800bd7a:	404a      	eors	r2, r1
 800bd7c:	b2d2      	uxtb	r2, r2
 800bd7e:	701a      	strb	r2, [r3, #0]
#endif
}
 800bd80:	46c0      	nop			; (mov r8, r8)
 800bd82:	46bd      	mov	sp, r7
 800bd84:	b002      	add	sp, #8
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	781a      	ldrb	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4053      	eors	r3, r2
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	3301      	adds	r3, #1
 800bda8:	7819      	ldrb	r1, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	3301      	adds	r3, #1
 800bdae:	781a      	ldrb	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	404a      	eors	r2, r1
 800bdb6:	b2d2      	uxtb	r2, r2
 800bdb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	3302      	adds	r3, #2
 800bdbe:	7819      	ldrb	r1, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3302      	adds	r3, #2
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3302      	adds	r3, #2
 800bdca:	404a      	eors	r2, r1
 800bdcc:	b2d2      	uxtb	r2, r2
 800bdce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	3303      	adds	r3, #3
 800bdd4:	7819      	ldrb	r1, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3303      	adds	r3, #3
 800bdda:	781a      	ldrb	r2, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3303      	adds	r3, #3
 800bde0:	404a      	eors	r2, r1
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	3304      	adds	r3, #4
 800bdea:	7819      	ldrb	r1, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	781a      	ldrb	r2, [r3, #0]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	404a      	eors	r2, r1
 800bdf8:	b2d2      	uxtb	r2, r2
 800bdfa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	3305      	adds	r3, #5
 800be00:	7819      	ldrb	r1, [r3, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3305      	adds	r3, #5
 800be06:	781a      	ldrb	r2, [r3, #0]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3305      	adds	r3, #5
 800be0c:	404a      	eors	r2, r1
 800be0e:	b2d2      	uxtb	r2, r2
 800be10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	3306      	adds	r3, #6
 800be16:	7819      	ldrb	r1, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3306      	adds	r3, #6
 800be1c:	781a      	ldrb	r2, [r3, #0]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3306      	adds	r3, #6
 800be22:	404a      	eors	r2, r1
 800be24:	b2d2      	uxtb	r2, r2
 800be26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	3307      	adds	r3, #7
 800be2c:	7819      	ldrb	r1, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	3307      	adds	r3, #7
 800be32:	781a      	ldrb	r2, [r3, #0]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3307      	adds	r3, #7
 800be38:	404a      	eors	r2, r1
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	3308      	adds	r3, #8
 800be42:	7819      	ldrb	r1, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3308      	adds	r3, #8
 800be48:	781a      	ldrb	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3308      	adds	r3, #8
 800be4e:	404a      	eors	r2, r1
 800be50:	b2d2      	uxtb	r2, r2
 800be52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	3309      	adds	r3, #9
 800be58:	7819      	ldrb	r1, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3309      	adds	r3, #9
 800be5e:	781a      	ldrb	r2, [r3, #0]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3309      	adds	r3, #9
 800be64:	404a      	eors	r2, r1
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	330a      	adds	r3, #10
 800be6e:	7819      	ldrb	r1, [r3, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	330a      	adds	r3, #10
 800be74:	781a      	ldrb	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	330a      	adds	r3, #10
 800be7a:	404a      	eors	r2, r1
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	330b      	adds	r3, #11
 800be84:	7819      	ldrb	r1, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	330b      	adds	r3, #11
 800be8a:	781a      	ldrb	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	330b      	adds	r3, #11
 800be90:	404a      	eors	r2, r1
 800be92:	b2d2      	uxtb	r2, r2
 800be94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	330c      	adds	r3, #12
 800be9a:	7819      	ldrb	r1, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	330c      	adds	r3, #12
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	330c      	adds	r3, #12
 800bea6:	404a      	eors	r2, r1
 800bea8:	b2d2      	uxtb	r2, r2
 800beaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	330d      	adds	r3, #13
 800beb0:	7819      	ldrb	r1, [r3, #0]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	330d      	adds	r3, #13
 800beb6:	781a      	ldrb	r2, [r3, #0]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	330d      	adds	r3, #13
 800bebc:	404a      	eors	r2, r1
 800bebe:	b2d2      	uxtb	r2, r2
 800bec0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	330e      	adds	r3, #14
 800bec6:	7819      	ldrb	r1, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	330e      	adds	r3, #14
 800becc:	781a      	ldrb	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	330e      	adds	r3, #14
 800bed2:	404a      	eors	r2, r1
 800bed4:	b2d2      	uxtb	r2, r2
 800bed6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	330f      	adds	r3, #15
 800bedc:	7819      	ldrb	r1, [r3, #0]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	330f      	adds	r3, #15
 800bee2:	781a      	ldrb	r2, [r3, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	330f      	adds	r3, #15
 800bee8:	404a      	eors	r2, r1
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	46bd      	mov	sp, r7
 800bef2:	b004      	add	sp, #16
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b082      	sub	sp, #8
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800bf00:	683a      	ldr	r2, [r7, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	0011      	movs	r1, r2
 800bf06:	0018      	movs	r0, r3
 800bf08:	f7ff fe88 	bl	800bc1c <xor_block>
}
 800bf0c:	46c0      	nop			; (mov r8, r8)
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	b002      	add	sp, #8
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	001a      	movs	r2, r3
 800bf22:	4b4c      	ldr	r3, [pc, #304]	; (800c054 <shift_sub_rows+0x140>)
 800bf24:	5c9a      	ldrb	r2, [r3, r2]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	701a      	strb	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	0019      	movs	r1, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3304      	adds	r3, #4
 800bf36:	4a47      	ldr	r2, [pc, #284]	; (800c054 <shift_sub_rows+0x140>)
 800bf38:	5c52      	ldrb	r2, [r2, r1]
 800bf3a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	3308      	adds	r3, #8
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	0019      	movs	r1, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	3308      	adds	r3, #8
 800bf48:	4a42      	ldr	r2, [pc, #264]	; (800c054 <shift_sub_rows+0x140>)
 800bf4a:	5c52      	ldrb	r2, [r2, r1]
 800bf4c:	701a      	strb	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	330c      	adds	r3, #12
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	0019      	movs	r1, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	330c      	adds	r3, #12
 800bf5a:	4a3e      	ldr	r2, [pc, #248]	; (800c054 <shift_sub_rows+0x140>)
 800bf5c:	5c52      	ldrb	r2, [r2, r1]
 800bf5e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800bf60:	200f      	movs	r0, #15
 800bf62:	183b      	adds	r3, r7, r0
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	7852      	ldrb	r2, [r2, #1]
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3305      	adds	r3, #5
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	0019      	movs	r1, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	3301      	adds	r3, #1
 800bf76:	4a37      	ldr	r2, [pc, #220]	; (800c054 <shift_sub_rows+0x140>)
 800bf78:	5c52      	ldrb	r2, [r2, r1]
 800bf7a:	701a      	strb	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3309      	adds	r3, #9
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	0019      	movs	r1, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	3305      	adds	r3, #5
 800bf88:	4a32      	ldr	r2, [pc, #200]	; (800c054 <shift_sub_rows+0x140>)
 800bf8a:	5c52      	ldrb	r2, [r2, r1]
 800bf8c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	330d      	adds	r3, #13
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	0019      	movs	r1, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	3309      	adds	r3, #9
 800bf9a:	4a2e      	ldr	r2, [pc, #184]	; (800c054 <shift_sub_rows+0x140>)
 800bf9c:	5c52      	ldrb	r2, [r2, r1]
 800bf9e:	701a      	strb	r2, [r3, #0]
 800bfa0:	183b      	adds	r3, r7, r0
 800bfa2:	781a      	ldrb	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	330d      	adds	r3, #13
 800bfa8:	492a      	ldr	r1, [pc, #168]	; (800c054 <shift_sub_rows+0x140>)
 800bfaa:	5c8a      	ldrb	r2, [r1, r2]
 800bfac:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800bfae:	183b      	adds	r3, r7, r0
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	7892      	ldrb	r2, [r2, #2]
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	330a      	adds	r3, #10
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	0019      	movs	r1, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3302      	adds	r3, #2
 800bfc2:	4a24      	ldr	r2, [pc, #144]	; (800c054 <shift_sub_rows+0x140>)
 800bfc4:	5c52      	ldrb	r2, [r2, r1]
 800bfc6:	701a      	strb	r2, [r3, #0]
 800bfc8:	183b      	adds	r3, r7, r0
 800bfca:	781a      	ldrb	r2, [r3, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	330a      	adds	r3, #10
 800bfd0:	4920      	ldr	r1, [pc, #128]	; (800c054 <shift_sub_rows+0x140>)
 800bfd2:	5c8a      	ldrb	r2, [r1, r2]
 800bfd4:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800bfd6:	183b      	adds	r3, r7, r0
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	7992      	ldrb	r2, [r2, #6]
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	330e      	adds	r3, #14
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	0019      	movs	r1, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	3306      	adds	r3, #6
 800bfea:	4a1a      	ldr	r2, [pc, #104]	; (800c054 <shift_sub_rows+0x140>)
 800bfec:	5c52      	ldrb	r2, [r2, r1]
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	183b      	adds	r3, r7, r0
 800bff2:	781a      	ldrb	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	330e      	adds	r3, #14
 800bff8:	4916      	ldr	r1, [pc, #88]	; (800c054 <shift_sub_rows+0x140>)
 800bffa:	5c8a      	ldrb	r2, [r1, r2]
 800bffc:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800bffe:	183b      	adds	r3, r7, r0
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	7bd2      	ldrb	r2, [r2, #15]
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	330b      	adds	r3, #11
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	0019      	movs	r1, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	330f      	adds	r3, #15
 800c012:	4a10      	ldr	r2, [pc, #64]	; (800c054 <shift_sub_rows+0x140>)
 800c014:	5c52      	ldrb	r2, [r2, r1]
 800c016:	701a      	strb	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3307      	adds	r3, #7
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	0019      	movs	r1, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	330b      	adds	r3, #11
 800c024:	4a0b      	ldr	r2, [pc, #44]	; (800c054 <shift_sub_rows+0x140>)
 800c026:	5c52      	ldrb	r2, [r2, r1]
 800c028:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	3303      	adds	r3, #3
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	0019      	movs	r1, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	3307      	adds	r3, #7
 800c036:	4a07      	ldr	r2, [pc, #28]	; (800c054 <shift_sub_rows+0x140>)
 800c038:	5c52      	ldrb	r2, [r2, r1]
 800c03a:	701a      	strb	r2, [r3, #0]
 800c03c:	183b      	adds	r3, r7, r0
 800c03e:	781a      	ldrb	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3303      	adds	r3, #3
 800c044:	4903      	ldr	r1, [pc, #12]	; (800c054 <shift_sub_rows+0x140>)
 800c046:	5c8a      	ldrb	r2, [r1, r2]
 800c048:	701a      	strb	r2, [r3, #0]
}
 800c04a:	46c0      	nop			; (mov r8, r8)
 800c04c:	46bd      	mov	sp, r7
 800c04e:	b004      	add	sp, #16
 800c050:	bd80      	pop	{r7, pc}
 800c052:	46c0      	nop			; (mov r8, r8)
 800c054:	0801e160 	.word	0x0801e160

0800c058 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c058:	b590      	push	{r4, r7, lr}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	2408      	movs	r4, #8
 800c064:	193b      	adds	r3, r7, r4
 800c066:	0011      	movs	r1, r2
 800c068:	0018      	movs	r0, r3
 800c06a:	f7ff fd63 	bl	800bb34 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c06e:	0020      	movs	r0, r4
 800c070:	183b      	adds	r3, r7, r0
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	001a      	movs	r2, r3
 800c076:	4be8      	ldr	r3, [pc, #928]	; (800c418 <mix_sub_columns+0x3c0>)
 800c078:	5c9a      	ldrb	r2, [r3, r2]
 800c07a:	183b      	adds	r3, r7, r0
 800c07c:	795b      	ldrb	r3, [r3, #5]
 800c07e:	0019      	movs	r1, r3
 800c080:	4be6      	ldr	r3, [pc, #920]	; (800c41c <mix_sub_columns+0x3c4>)
 800c082:	5c5b      	ldrb	r3, [r3, r1]
 800c084:	4053      	eors	r3, r2
 800c086:	b2da      	uxtb	r2, r3
 800c088:	183b      	adds	r3, r7, r0
 800c08a:	7a9b      	ldrb	r3, [r3, #10]
 800c08c:	0019      	movs	r1, r3
 800c08e:	4be4      	ldr	r3, [pc, #912]	; (800c420 <mix_sub_columns+0x3c8>)
 800c090:	5c5b      	ldrb	r3, [r3, r1]
 800c092:	4053      	eors	r3, r2
 800c094:	b2da      	uxtb	r2, r3
 800c096:	183b      	adds	r3, r7, r0
 800c098:	7bdb      	ldrb	r3, [r3, #15]
 800c09a:	0019      	movs	r1, r3
 800c09c:	4be0      	ldr	r3, [pc, #896]	; (800c420 <mix_sub_columns+0x3c8>)
 800c09e:	5c5b      	ldrb	r3, [r3, r1]
 800c0a0:	4053      	eors	r3, r2
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c0a8:	183b      	adds	r3, r7, r0
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	001a      	movs	r2, r3
 800c0ae:	4bdc      	ldr	r3, [pc, #880]	; (800c420 <mix_sub_columns+0x3c8>)
 800c0b0:	5c9a      	ldrb	r2, [r3, r2]
 800c0b2:	183b      	adds	r3, r7, r0
 800c0b4:	795b      	ldrb	r3, [r3, #5]
 800c0b6:	0019      	movs	r1, r3
 800c0b8:	4bd7      	ldr	r3, [pc, #860]	; (800c418 <mix_sub_columns+0x3c0>)
 800c0ba:	5c5b      	ldrb	r3, [r3, r1]
 800c0bc:	4053      	eors	r3, r2
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	183b      	adds	r3, r7, r0
 800c0c2:	7a9b      	ldrb	r3, [r3, #10]
 800c0c4:	0019      	movs	r1, r3
 800c0c6:	4bd5      	ldr	r3, [pc, #852]	; (800c41c <mix_sub_columns+0x3c4>)
 800c0c8:	5c5b      	ldrb	r3, [r3, r1]
 800c0ca:	4053      	eors	r3, r2
 800c0cc:	b2d9      	uxtb	r1, r3
 800c0ce:	183b      	adds	r3, r7, r0
 800c0d0:	7bdb      	ldrb	r3, [r3, #15]
 800c0d2:	001a      	movs	r2, r3
 800c0d4:	4bd2      	ldr	r3, [pc, #840]	; (800c420 <mix_sub_columns+0x3c8>)
 800c0d6:	5c9a      	ldrb	r2, [r3, r2]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	404a      	eors	r2, r1
 800c0de:	b2d2      	uxtb	r2, r2
 800c0e0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c0e2:	183b      	adds	r3, r7, r0
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	001a      	movs	r2, r3
 800c0e8:	4bcd      	ldr	r3, [pc, #820]	; (800c420 <mix_sub_columns+0x3c8>)
 800c0ea:	5c9a      	ldrb	r2, [r3, r2]
 800c0ec:	183b      	adds	r3, r7, r0
 800c0ee:	795b      	ldrb	r3, [r3, #5]
 800c0f0:	0019      	movs	r1, r3
 800c0f2:	4bcb      	ldr	r3, [pc, #812]	; (800c420 <mix_sub_columns+0x3c8>)
 800c0f4:	5c5b      	ldrb	r3, [r3, r1]
 800c0f6:	4053      	eors	r3, r2
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	183b      	adds	r3, r7, r0
 800c0fc:	7a9b      	ldrb	r3, [r3, #10]
 800c0fe:	0019      	movs	r1, r3
 800c100:	4bc5      	ldr	r3, [pc, #788]	; (800c418 <mix_sub_columns+0x3c0>)
 800c102:	5c5b      	ldrb	r3, [r3, r1]
 800c104:	4053      	eors	r3, r2
 800c106:	b2d9      	uxtb	r1, r3
 800c108:	183b      	adds	r3, r7, r0
 800c10a:	7bdb      	ldrb	r3, [r3, #15]
 800c10c:	001a      	movs	r2, r3
 800c10e:	4bc3      	ldr	r3, [pc, #780]	; (800c41c <mix_sub_columns+0x3c4>)
 800c110:	5c9a      	ldrb	r2, [r3, r2]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	3302      	adds	r3, #2
 800c116:	404a      	eors	r2, r1
 800c118:	b2d2      	uxtb	r2, r2
 800c11a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c11c:	183b      	adds	r3, r7, r0
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	001a      	movs	r2, r3
 800c122:	4bbe      	ldr	r3, [pc, #760]	; (800c41c <mix_sub_columns+0x3c4>)
 800c124:	5c9a      	ldrb	r2, [r3, r2]
 800c126:	183b      	adds	r3, r7, r0
 800c128:	795b      	ldrb	r3, [r3, #5]
 800c12a:	0019      	movs	r1, r3
 800c12c:	4bbc      	ldr	r3, [pc, #752]	; (800c420 <mix_sub_columns+0x3c8>)
 800c12e:	5c5b      	ldrb	r3, [r3, r1]
 800c130:	4053      	eors	r3, r2
 800c132:	b2da      	uxtb	r2, r3
 800c134:	183b      	adds	r3, r7, r0
 800c136:	7a9b      	ldrb	r3, [r3, #10]
 800c138:	0019      	movs	r1, r3
 800c13a:	4bb9      	ldr	r3, [pc, #740]	; (800c420 <mix_sub_columns+0x3c8>)
 800c13c:	5c5b      	ldrb	r3, [r3, r1]
 800c13e:	4053      	eors	r3, r2
 800c140:	b2d9      	uxtb	r1, r3
 800c142:	183b      	adds	r3, r7, r0
 800c144:	7bdb      	ldrb	r3, [r3, #15]
 800c146:	001a      	movs	r2, r3
 800c148:	4bb3      	ldr	r3, [pc, #716]	; (800c418 <mix_sub_columns+0x3c0>)
 800c14a:	5c9a      	ldrb	r2, [r3, r2]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3303      	adds	r3, #3
 800c150:	404a      	eors	r2, r1
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c156:	183b      	adds	r3, r7, r0
 800c158:	791b      	ldrb	r3, [r3, #4]
 800c15a:	001a      	movs	r2, r3
 800c15c:	4bae      	ldr	r3, [pc, #696]	; (800c418 <mix_sub_columns+0x3c0>)
 800c15e:	5c9a      	ldrb	r2, [r3, r2]
 800c160:	183b      	adds	r3, r7, r0
 800c162:	7a5b      	ldrb	r3, [r3, #9]
 800c164:	0019      	movs	r1, r3
 800c166:	4bad      	ldr	r3, [pc, #692]	; (800c41c <mix_sub_columns+0x3c4>)
 800c168:	5c5b      	ldrb	r3, [r3, r1]
 800c16a:	4053      	eors	r3, r2
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	183b      	adds	r3, r7, r0
 800c170:	7b9b      	ldrb	r3, [r3, #14]
 800c172:	0019      	movs	r1, r3
 800c174:	4baa      	ldr	r3, [pc, #680]	; (800c420 <mix_sub_columns+0x3c8>)
 800c176:	5c5b      	ldrb	r3, [r3, r1]
 800c178:	4053      	eors	r3, r2
 800c17a:	b2d9      	uxtb	r1, r3
 800c17c:	183b      	adds	r3, r7, r0
 800c17e:	78db      	ldrb	r3, [r3, #3]
 800c180:	001a      	movs	r2, r3
 800c182:	4ba7      	ldr	r3, [pc, #668]	; (800c420 <mix_sub_columns+0x3c8>)
 800c184:	5c9a      	ldrb	r2, [r3, r2]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	3304      	adds	r3, #4
 800c18a:	404a      	eors	r2, r1
 800c18c:	b2d2      	uxtb	r2, r2
 800c18e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c190:	183b      	adds	r3, r7, r0
 800c192:	791b      	ldrb	r3, [r3, #4]
 800c194:	001a      	movs	r2, r3
 800c196:	4ba2      	ldr	r3, [pc, #648]	; (800c420 <mix_sub_columns+0x3c8>)
 800c198:	5c9a      	ldrb	r2, [r3, r2]
 800c19a:	183b      	adds	r3, r7, r0
 800c19c:	7a5b      	ldrb	r3, [r3, #9]
 800c19e:	0019      	movs	r1, r3
 800c1a0:	4b9d      	ldr	r3, [pc, #628]	; (800c418 <mix_sub_columns+0x3c0>)
 800c1a2:	5c5b      	ldrb	r3, [r3, r1]
 800c1a4:	4053      	eors	r3, r2
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	183b      	adds	r3, r7, r0
 800c1aa:	7b9b      	ldrb	r3, [r3, #14]
 800c1ac:	0019      	movs	r1, r3
 800c1ae:	4b9b      	ldr	r3, [pc, #620]	; (800c41c <mix_sub_columns+0x3c4>)
 800c1b0:	5c5b      	ldrb	r3, [r3, r1]
 800c1b2:	4053      	eors	r3, r2
 800c1b4:	b2d9      	uxtb	r1, r3
 800c1b6:	183b      	adds	r3, r7, r0
 800c1b8:	78db      	ldrb	r3, [r3, #3]
 800c1ba:	001a      	movs	r2, r3
 800c1bc:	4b98      	ldr	r3, [pc, #608]	; (800c420 <mix_sub_columns+0x3c8>)
 800c1be:	5c9a      	ldrb	r2, [r3, r2]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	3305      	adds	r3, #5
 800c1c4:	404a      	eors	r2, r1
 800c1c6:	b2d2      	uxtb	r2, r2
 800c1c8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c1ca:	183b      	adds	r3, r7, r0
 800c1cc:	791b      	ldrb	r3, [r3, #4]
 800c1ce:	001a      	movs	r2, r3
 800c1d0:	4b93      	ldr	r3, [pc, #588]	; (800c420 <mix_sub_columns+0x3c8>)
 800c1d2:	5c9a      	ldrb	r2, [r3, r2]
 800c1d4:	183b      	adds	r3, r7, r0
 800c1d6:	7a5b      	ldrb	r3, [r3, #9]
 800c1d8:	0019      	movs	r1, r3
 800c1da:	4b91      	ldr	r3, [pc, #580]	; (800c420 <mix_sub_columns+0x3c8>)
 800c1dc:	5c5b      	ldrb	r3, [r3, r1]
 800c1de:	4053      	eors	r3, r2
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	183b      	adds	r3, r7, r0
 800c1e4:	7b9b      	ldrb	r3, [r3, #14]
 800c1e6:	0019      	movs	r1, r3
 800c1e8:	4b8b      	ldr	r3, [pc, #556]	; (800c418 <mix_sub_columns+0x3c0>)
 800c1ea:	5c5b      	ldrb	r3, [r3, r1]
 800c1ec:	4053      	eors	r3, r2
 800c1ee:	b2d9      	uxtb	r1, r3
 800c1f0:	183b      	adds	r3, r7, r0
 800c1f2:	78db      	ldrb	r3, [r3, #3]
 800c1f4:	001a      	movs	r2, r3
 800c1f6:	4b89      	ldr	r3, [pc, #548]	; (800c41c <mix_sub_columns+0x3c4>)
 800c1f8:	5c9a      	ldrb	r2, [r3, r2]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	3306      	adds	r3, #6
 800c1fe:	404a      	eors	r2, r1
 800c200:	b2d2      	uxtb	r2, r2
 800c202:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c204:	183b      	adds	r3, r7, r0
 800c206:	791b      	ldrb	r3, [r3, #4]
 800c208:	001a      	movs	r2, r3
 800c20a:	4b84      	ldr	r3, [pc, #528]	; (800c41c <mix_sub_columns+0x3c4>)
 800c20c:	5c9a      	ldrb	r2, [r3, r2]
 800c20e:	183b      	adds	r3, r7, r0
 800c210:	7a5b      	ldrb	r3, [r3, #9]
 800c212:	0019      	movs	r1, r3
 800c214:	4b82      	ldr	r3, [pc, #520]	; (800c420 <mix_sub_columns+0x3c8>)
 800c216:	5c5b      	ldrb	r3, [r3, r1]
 800c218:	4053      	eors	r3, r2
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	183b      	adds	r3, r7, r0
 800c21e:	7b9b      	ldrb	r3, [r3, #14]
 800c220:	0019      	movs	r1, r3
 800c222:	4b7f      	ldr	r3, [pc, #508]	; (800c420 <mix_sub_columns+0x3c8>)
 800c224:	5c5b      	ldrb	r3, [r3, r1]
 800c226:	4053      	eors	r3, r2
 800c228:	b2d9      	uxtb	r1, r3
 800c22a:	183b      	adds	r3, r7, r0
 800c22c:	78db      	ldrb	r3, [r3, #3]
 800c22e:	001a      	movs	r2, r3
 800c230:	4b79      	ldr	r3, [pc, #484]	; (800c418 <mix_sub_columns+0x3c0>)
 800c232:	5c9a      	ldrb	r2, [r3, r2]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3307      	adds	r3, #7
 800c238:	404a      	eors	r2, r1
 800c23a:	b2d2      	uxtb	r2, r2
 800c23c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c23e:	183b      	adds	r3, r7, r0
 800c240:	7a1b      	ldrb	r3, [r3, #8]
 800c242:	001a      	movs	r2, r3
 800c244:	4b74      	ldr	r3, [pc, #464]	; (800c418 <mix_sub_columns+0x3c0>)
 800c246:	5c9a      	ldrb	r2, [r3, r2]
 800c248:	183b      	adds	r3, r7, r0
 800c24a:	7b5b      	ldrb	r3, [r3, #13]
 800c24c:	0019      	movs	r1, r3
 800c24e:	4b73      	ldr	r3, [pc, #460]	; (800c41c <mix_sub_columns+0x3c4>)
 800c250:	5c5b      	ldrb	r3, [r3, r1]
 800c252:	4053      	eors	r3, r2
 800c254:	b2da      	uxtb	r2, r3
 800c256:	183b      	adds	r3, r7, r0
 800c258:	789b      	ldrb	r3, [r3, #2]
 800c25a:	0019      	movs	r1, r3
 800c25c:	4b70      	ldr	r3, [pc, #448]	; (800c420 <mix_sub_columns+0x3c8>)
 800c25e:	5c5b      	ldrb	r3, [r3, r1]
 800c260:	4053      	eors	r3, r2
 800c262:	b2d9      	uxtb	r1, r3
 800c264:	183b      	adds	r3, r7, r0
 800c266:	79db      	ldrb	r3, [r3, #7]
 800c268:	001a      	movs	r2, r3
 800c26a:	4b6d      	ldr	r3, [pc, #436]	; (800c420 <mix_sub_columns+0x3c8>)
 800c26c:	5c9a      	ldrb	r2, [r3, r2]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	3308      	adds	r3, #8
 800c272:	404a      	eors	r2, r1
 800c274:	b2d2      	uxtb	r2, r2
 800c276:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c278:	183b      	adds	r3, r7, r0
 800c27a:	7a1b      	ldrb	r3, [r3, #8]
 800c27c:	001a      	movs	r2, r3
 800c27e:	4b68      	ldr	r3, [pc, #416]	; (800c420 <mix_sub_columns+0x3c8>)
 800c280:	5c9a      	ldrb	r2, [r3, r2]
 800c282:	183b      	adds	r3, r7, r0
 800c284:	7b5b      	ldrb	r3, [r3, #13]
 800c286:	0019      	movs	r1, r3
 800c288:	4b63      	ldr	r3, [pc, #396]	; (800c418 <mix_sub_columns+0x3c0>)
 800c28a:	5c5b      	ldrb	r3, [r3, r1]
 800c28c:	4053      	eors	r3, r2
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	183b      	adds	r3, r7, r0
 800c292:	789b      	ldrb	r3, [r3, #2]
 800c294:	0019      	movs	r1, r3
 800c296:	4b61      	ldr	r3, [pc, #388]	; (800c41c <mix_sub_columns+0x3c4>)
 800c298:	5c5b      	ldrb	r3, [r3, r1]
 800c29a:	4053      	eors	r3, r2
 800c29c:	b2d9      	uxtb	r1, r3
 800c29e:	183b      	adds	r3, r7, r0
 800c2a0:	79db      	ldrb	r3, [r3, #7]
 800c2a2:	001a      	movs	r2, r3
 800c2a4:	4b5e      	ldr	r3, [pc, #376]	; (800c420 <mix_sub_columns+0x3c8>)
 800c2a6:	5c9a      	ldrb	r2, [r3, r2]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3309      	adds	r3, #9
 800c2ac:	404a      	eors	r2, r1
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c2b2:	183b      	adds	r3, r7, r0
 800c2b4:	7a1b      	ldrb	r3, [r3, #8]
 800c2b6:	001a      	movs	r2, r3
 800c2b8:	4b59      	ldr	r3, [pc, #356]	; (800c420 <mix_sub_columns+0x3c8>)
 800c2ba:	5c9a      	ldrb	r2, [r3, r2]
 800c2bc:	183b      	adds	r3, r7, r0
 800c2be:	7b5b      	ldrb	r3, [r3, #13]
 800c2c0:	0019      	movs	r1, r3
 800c2c2:	4b57      	ldr	r3, [pc, #348]	; (800c420 <mix_sub_columns+0x3c8>)
 800c2c4:	5c5b      	ldrb	r3, [r3, r1]
 800c2c6:	4053      	eors	r3, r2
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	183b      	adds	r3, r7, r0
 800c2cc:	789b      	ldrb	r3, [r3, #2]
 800c2ce:	0019      	movs	r1, r3
 800c2d0:	4b51      	ldr	r3, [pc, #324]	; (800c418 <mix_sub_columns+0x3c0>)
 800c2d2:	5c5b      	ldrb	r3, [r3, r1]
 800c2d4:	4053      	eors	r3, r2
 800c2d6:	b2d9      	uxtb	r1, r3
 800c2d8:	183b      	adds	r3, r7, r0
 800c2da:	79db      	ldrb	r3, [r3, #7]
 800c2dc:	001a      	movs	r2, r3
 800c2de:	4b4f      	ldr	r3, [pc, #316]	; (800c41c <mix_sub_columns+0x3c4>)
 800c2e0:	5c9a      	ldrb	r2, [r3, r2]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	330a      	adds	r3, #10
 800c2e6:	404a      	eors	r2, r1
 800c2e8:	b2d2      	uxtb	r2, r2
 800c2ea:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c2ec:	183b      	adds	r3, r7, r0
 800c2ee:	7a1b      	ldrb	r3, [r3, #8]
 800c2f0:	001a      	movs	r2, r3
 800c2f2:	4b4a      	ldr	r3, [pc, #296]	; (800c41c <mix_sub_columns+0x3c4>)
 800c2f4:	5c9a      	ldrb	r2, [r3, r2]
 800c2f6:	183b      	adds	r3, r7, r0
 800c2f8:	7b5b      	ldrb	r3, [r3, #13]
 800c2fa:	0019      	movs	r1, r3
 800c2fc:	4b48      	ldr	r3, [pc, #288]	; (800c420 <mix_sub_columns+0x3c8>)
 800c2fe:	5c5b      	ldrb	r3, [r3, r1]
 800c300:	4053      	eors	r3, r2
 800c302:	b2da      	uxtb	r2, r3
 800c304:	183b      	adds	r3, r7, r0
 800c306:	789b      	ldrb	r3, [r3, #2]
 800c308:	0019      	movs	r1, r3
 800c30a:	4b45      	ldr	r3, [pc, #276]	; (800c420 <mix_sub_columns+0x3c8>)
 800c30c:	5c5b      	ldrb	r3, [r3, r1]
 800c30e:	4053      	eors	r3, r2
 800c310:	b2d9      	uxtb	r1, r3
 800c312:	183b      	adds	r3, r7, r0
 800c314:	79db      	ldrb	r3, [r3, #7]
 800c316:	001a      	movs	r2, r3
 800c318:	4b3f      	ldr	r3, [pc, #252]	; (800c418 <mix_sub_columns+0x3c0>)
 800c31a:	5c9a      	ldrb	r2, [r3, r2]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	330b      	adds	r3, #11
 800c320:	404a      	eors	r2, r1
 800c322:	b2d2      	uxtb	r2, r2
 800c324:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c326:	183b      	adds	r3, r7, r0
 800c328:	7b1b      	ldrb	r3, [r3, #12]
 800c32a:	001a      	movs	r2, r3
 800c32c:	4b3a      	ldr	r3, [pc, #232]	; (800c418 <mix_sub_columns+0x3c0>)
 800c32e:	5c9a      	ldrb	r2, [r3, r2]
 800c330:	183b      	adds	r3, r7, r0
 800c332:	785b      	ldrb	r3, [r3, #1]
 800c334:	0019      	movs	r1, r3
 800c336:	4b39      	ldr	r3, [pc, #228]	; (800c41c <mix_sub_columns+0x3c4>)
 800c338:	5c5b      	ldrb	r3, [r3, r1]
 800c33a:	4053      	eors	r3, r2
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	183b      	adds	r3, r7, r0
 800c340:	799b      	ldrb	r3, [r3, #6]
 800c342:	0019      	movs	r1, r3
 800c344:	4b36      	ldr	r3, [pc, #216]	; (800c420 <mix_sub_columns+0x3c8>)
 800c346:	5c5b      	ldrb	r3, [r3, r1]
 800c348:	4053      	eors	r3, r2
 800c34a:	b2d9      	uxtb	r1, r3
 800c34c:	183b      	adds	r3, r7, r0
 800c34e:	7adb      	ldrb	r3, [r3, #11]
 800c350:	001a      	movs	r2, r3
 800c352:	4b33      	ldr	r3, [pc, #204]	; (800c420 <mix_sub_columns+0x3c8>)
 800c354:	5c9a      	ldrb	r2, [r3, r2]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	330c      	adds	r3, #12
 800c35a:	404a      	eors	r2, r1
 800c35c:	b2d2      	uxtb	r2, r2
 800c35e:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c360:	183b      	adds	r3, r7, r0
 800c362:	7b1b      	ldrb	r3, [r3, #12]
 800c364:	001a      	movs	r2, r3
 800c366:	4b2e      	ldr	r3, [pc, #184]	; (800c420 <mix_sub_columns+0x3c8>)
 800c368:	5c9a      	ldrb	r2, [r3, r2]
 800c36a:	183b      	adds	r3, r7, r0
 800c36c:	785b      	ldrb	r3, [r3, #1]
 800c36e:	0019      	movs	r1, r3
 800c370:	4b29      	ldr	r3, [pc, #164]	; (800c418 <mix_sub_columns+0x3c0>)
 800c372:	5c5b      	ldrb	r3, [r3, r1]
 800c374:	4053      	eors	r3, r2
 800c376:	b2da      	uxtb	r2, r3
 800c378:	183b      	adds	r3, r7, r0
 800c37a:	799b      	ldrb	r3, [r3, #6]
 800c37c:	0019      	movs	r1, r3
 800c37e:	4b27      	ldr	r3, [pc, #156]	; (800c41c <mix_sub_columns+0x3c4>)
 800c380:	5c5b      	ldrb	r3, [r3, r1]
 800c382:	4053      	eors	r3, r2
 800c384:	b2d9      	uxtb	r1, r3
 800c386:	183b      	adds	r3, r7, r0
 800c388:	7adb      	ldrb	r3, [r3, #11]
 800c38a:	001a      	movs	r2, r3
 800c38c:	4b24      	ldr	r3, [pc, #144]	; (800c420 <mix_sub_columns+0x3c8>)
 800c38e:	5c9a      	ldrb	r2, [r3, r2]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	330d      	adds	r3, #13
 800c394:	404a      	eors	r2, r1
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c39a:	183b      	adds	r3, r7, r0
 800c39c:	7b1b      	ldrb	r3, [r3, #12]
 800c39e:	001a      	movs	r2, r3
 800c3a0:	4b1f      	ldr	r3, [pc, #124]	; (800c420 <mix_sub_columns+0x3c8>)
 800c3a2:	5c9a      	ldrb	r2, [r3, r2]
 800c3a4:	183b      	adds	r3, r7, r0
 800c3a6:	785b      	ldrb	r3, [r3, #1]
 800c3a8:	0019      	movs	r1, r3
 800c3aa:	4b1d      	ldr	r3, [pc, #116]	; (800c420 <mix_sub_columns+0x3c8>)
 800c3ac:	5c5b      	ldrb	r3, [r3, r1]
 800c3ae:	4053      	eors	r3, r2
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	183b      	adds	r3, r7, r0
 800c3b4:	799b      	ldrb	r3, [r3, #6]
 800c3b6:	0019      	movs	r1, r3
 800c3b8:	4b17      	ldr	r3, [pc, #92]	; (800c418 <mix_sub_columns+0x3c0>)
 800c3ba:	5c5b      	ldrb	r3, [r3, r1]
 800c3bc:	4053      	eors	r3, r2
 800c3be:	b2d9      	uxtb	r1, r3
 800c3c0:	183b      	adds	r3, r7, r0
 800c3c2:	7adb      	ldrb	r3, [r3, #11]
 800c3c4:	001a      	movs	r2, r3
 800c3c6:	4b15      	ldr	r3, [pc, #84]	; (800c41c <mix_sub_columns+0x3c4>)
 800c3c8:	5c9a      	ldrb	r2, [r3, r2]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	330e      	adds	r3, #14
 800c3ce:	404a      	eors	r2, r1
 800c3d0:	b2d2      	uxtb	r2, r2
 800c3d2:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c3d4:	183b      	adds	r3, r7, r0
 800c3d6:	7b1b      	ldrb	r3, [r3, #12]
 800c3d8:	001a      	movs	r2, r3
 800c3da:	4b10      	ldr	r3, [pc, #64]	; (800c41c <mix_sub_columns+0x3c4>)
 800c3dc:	5c9a      	ldrb	r2, [r3, r2]
 800c3de:	183b      	adds	r3, r7, r0
 800c3e0:	785b      	ldrb	r3, [r3, #1]
 800c3e2:	0019      	movs	r1, r3
 800c3e4:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <mix_sub_columns+0x3c8>)
 800c3e6:	5c5b      	ldrb	r3, [r3, r1]
 800c3e8:	4053      	eors	r3, r2
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	183b      	adds	r3, r7, r0
 800c3ee:	799b      	ldrb	r3, [r3, #6]
 800c3f0:	0019      	movs	r1, r3
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <mix_sub_columns+0x3c8>)
 800c3f4:	5c5b      	ldrb	r3, [r3, r1]
 800c3f6:	4053      	eors	r3, r2
 800c3f8:	b2d9      	uxtb	r1, r3
 800c3fa:	183b      	adds	r3, r7, r0
 800c3fc:	7adb      	ldrb	r3, [r3, #11]
 800c3fe:	001a      	movs	r2, r3
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <mix_sub_columns+0x3c0>)
 800c402:	5c9a      	ldrb	r2, [r3, r2]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	330f      	adds	r3, #15
 800c408:	404a      	eors	r2, r1
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	701a      	strb	r2, [r3, #0]
  }
 800c40e:	46c0      	nop			; (mov r8, r8)
 800c410:	46bd      	mov	sp, r7
 800c412:	b007      	add	sp, #28
 800c414:	bd90      	pop	{r4, r7, pc}
 800c416:	46c0      	nop			; (mov r8, r8)
 800c418:	0801e260 	.word	0x0801e260
 800c41c:	0801e360 	.word	0x0801e360
 800c420:	0801e160 	.word	0x0801e160

0800c424 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	607a      	str	r2, [r7, #4]
 800c42e:	200b      	movs	r0, #11
 800c430:	183b      	adds	r3, r7, r0
 800c432:	1c0a      	adds	r2, r1, #0
 800c434:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c436:	183b      	adds	r3, r7, r0
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	3b10      	subs	r3, #16
 800c43c:	2210      	movs	r2, #16
 800c43e:	429a      	cmp	r2, r3
 800c440:	4192      	sbcs	r2, r2
 800c442:	4252      	negs	r2, r2
 800c444:	b2d2      	uxtb	r2, r2
 800c446:	2a00      	cmp	r2, #0
 800c448:	d109      	bne.n	800c45e <lorawan_aes_set_key+0x3a>
 800c44a:	2201      	movs	r2, #1
 800c44c:	409a      	lsls	r2, r3
 800c44e:	0013      	movs	r3, r2
 800c450:	4a90      	ldr	r2, [pc, #576]	; (800c694 <lorawan_aes_set_key+0x270>)
 800c452:	4013      	ands	r3, r2
 800c454:	1e5a      	subs	r2, r3, #1
 800c456:	4193      	sbcs	r3, r2
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d105      	bne.n	800c46a <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	22f0      	movs	r2, #240	; 0xf0
 800c462:	2100      	movs	r1, #0
 800c464:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800c466:	23ff      	movs	r3, #255	; 0xff
 800c468:	e10f      	b.n	800c68a <lorawan_aes_set_key+0x266>
        break;
 800c46a:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	240b      	movs	r4, #11
 800c470:	193b      	adds	r3, r7, r4
 800c472:	781a      	ldrb	r2, [r3, #0]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	0019      	movs	r1, r3
 800c478:	f7ff fbb4 	bl	800bbe4 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c47c:	0020      	movs	r0, r4
 800c47e:	183b      	adds	r3, r7, r0
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	331c      	adds	r3, #28
 800c484:	b2da      	uxtb	r2, r3
 800c486:	2111      	movs	r1, #17
 800c488:	187b      	adds	r3, r7, r1
 800c48a:	0092      	lsls	r2, r2, #2
 800c48c:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800c48e:	187b      	adds	r3, r7, r1
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	091b      	lsrs	r3, r3, #4
 800c494:	b2db      	uxtb	r3, r3
 800c496:	3b01      	subs	r3, #1
 800c498:	b2d9      	uxtb	r1, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	22f0      	movs	r2, #240	; 0xf0
 800c49e:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c4a0:	2317      	movs	r3, #23
 800c4a2:	18fb      	adds	r3, r7, r3
 800c4a4:	183a      	adds	r2, r7, r0
 800c4a6:	7812      	ldrb	r2, [r2, #0]
 800c4a8:	701a      	strb	r2, [r3, #0]
 800c4aa:	2316      	movs	r3, #22
 800c4ac:	18fb      	adds	r3, r7, r3
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	701a      	strb	r2, [r3, #0]
 800c4b2:	e0e0      	b.n	800c676 <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c4b4:	2017      	movs	r0, #23
 800c4b6:	183b      	adds	r3, r7, r0
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	1f1a      	subs	r2, r3, #4
 800c4bc:	2415      	movs	r4, #21
 800c4be:	193b      	adds	r3, r7, r4
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	5c8a      	ldrb	r2, [r1, r2]
 800c4c4:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800c4c6:	183b      	adds	r3, r7, r0
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	1eda      	subs	r2, r3, #3
 800c4cc:	2514      	movs	r5, #20
 800c4ce:	197b      	adds	r3, r7, r5
 800c4d0:	6879      	ldr	r1, [r7, #4]
 800c4d2:	5c8a      	ldrb	r2, [r1, r2]
 800c4d4:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800c4d6:	183b      	adds	r3, r7, r0
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	1e9a      	subs	r2, r3, #2
 800c4dc:	2613      	movs	r6, #19
 800c4de:	19bb      	adds	r3, r7, r6
 800c4e0:	6879      	ldr	r1, [r7, #4]
 800c4e2:	5c8a      	ldrb	r2, [r1, r2]
 800c4e4:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800c4e6:	183b      	adds	r3, r7, r0
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	1e5a      	subs	r2, r3, #1
 800c4ec:	2312      	movs	r3, #18
 800c4ee:	18fb      	adds	r3, r7, r3
 800c4f0:	6879      	ldr	r1, [r7, #4]
 800c4f2:	5c8a      	ldrb	r2, [r1, r2]
 800c4f4:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800c4f6:	183a      	adds	r2, r7, r0
 800c4f8:	210b      	movs	r1, #11
 800c4fa:	187b      	adds	r3, r7, r1
 800c4fc:	7812      	ldrb	r2, [r2, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	0019      	movs	r1, r3
 800c502:	0010      	movs	r0, r2
 800c504:	f7f3 fe8e 	bl	8000224 <__aeabi_uidivmod>
 800c508:	000b      	movs	r3, r1
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d13b      	bne.n	800c588 <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800c510:	2210      	movs	r2, #16
 800c512:	18bb      	adds	r3, r7, r2
 800c514:	193a      	adds	r2, r7, r4
 800c516:	7812      	ldrb	r2, [r2, #0]
 800c518:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800c51a:	197b      	adds	r3, r7, r5
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	4a5e      	ldr	r2, [pc, #376]	; (800c698 <lorawan_aes_set_key+0x274>)
 800c520:	5cd1      	ldrb	r1, [r2, r3]
 800c522:	193b      	adds	r3, r7, r4
 800c524:	2016      	movs	r0, #22
 800c526:	183a      	adds	r2, r7, r0
 800c528:	7812      	ldrb	r2, [r2, #0]
 800c52a:	404a      	eors	r2, r1
 800c52c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800c52e:	19bb      	adds	r3, r7, r6
 800c530:	781a      	ldrb	r2, [r3, #0]
 800c532:	197b      	adds	r3, r7, r5
 800c534:	4958      	ldr	r1, [pc, #352]	; (800c698 <lorawan_aes_set_key+0x274>)
 800c536:	5c8a      	ldrb	r2, [r1, r2]
 800c538:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800c53a:	2412      	movs	r4, #18
 800c53c:	193b      	adds	r3, r7, r4
 800c53e:	781a      	ldrb	r2, [r3, #0]
 800c540:	19bb      	adds	r3, r7, r6
 800c542:	4955      	ldr	r1, [pc, #340]	; (800c698 <lorawan_aes_set_key+0x274>)
 800c544:	5c8a      	ldrb	r2, [r1, r2]
 800c546:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800c548:	2210      	movs	r2, #16
 800c54a:	18bb      	adds	r3, r7, r2
 800c54c:	781a      	ldrb	r2, [r3, #0]
 800c54e:	193b      	adds	r3, r7, r4
 800c550:	4951      	ldr	r1, [pc, #324]	; (800c698 <lorawan_aes_set_key+0x274>)
 800c552:	5c8a      	ldrb	r2, [r1, r2]
 800c554:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800c556:	183b      	adds	r3, r7, r0
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	b25a      	sxtb	r2, r3
 800c55e:	0004      	movs	r4, r0
 800c560:	183b      	adds	r3, r7, r0
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	09db      	lsrs	r3, r3, #7
 800c566:	b2db      	uxtb	r3, r3
 800c568:	1c19      	adds	r1, r3, #0
 800c56a:	1c0b      	adds	r3, r1, #0
 800c56c:	18db      	adds	r3, r3, r3
 800c56e:	185b      	adds	r3, r3, r1
 800c570:	1c19      	adds	r1, r3, #0
 800c572:	00c8      	lsls	r0, r1, #3
 800c574:	1c19      	adds	r1, r3, #0
 800c576:	1c03      	adds	r3, r0, #0
 800c578:	18cb      	adds	r3, r1, r3
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	b25b      	sxtb	r3, r3
 800c57e:	4053      	eors	r3, r2
 800c580:	b25a      	sxtb	r2, r3
 800c582:	193b      	adds	r3, r7, r4
 800c584:	701a      	strb	r2, [r3, #0]
 800c586:	e02d      	b.n	800c5e4 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c588:	210b      	movs	r1, #11
 800c58a:	187b      	adds	r3, r7, r1
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b18      	cmp	r3, #24
 800c590:	d928      	bls.n	800c5e4 <lorawan_aes_set_key+0x1c0>
 800c592:	2317      	movs	r3, #23
 800c594:	18fa      	adds	r2, r7, r3
 800c596:	187b      	adds	r3, r7, r1
 800c598:	7812      	ldrb	r2, [r2, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	0019      	movs	r1, r3
 800c59e:	0010      	movs	r0, r2
 800c5a0:	f7f3 fe40 	bl	8000224 <__aeabi_uidivmod>
 800c5a4:	000b      	movs	r3, r1
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	2b10      	cmp	r3, #16
 800c5aa:	d11b      	bne.n	800c5e4 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800c5ac:	2115      	movs	r1, #21
 800c5ae:	187b      	adds	r3, r7, r1
 800c5b0:	781a      	ldrb	r2, [r3, #0]
 800c5b2:	187b      	adds	r3, r7, r1
 800c5b4:	4938      	ldr	r1, [pc, #224]	; (800c698 <lorawan_aes_set_key+0x274>)
 800c5b6:	5c8a      	ldrb	r2, [r1, r2]
 800c5b8:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800c5ba:	2114      	movs	r1, #20
 800c5bc:	187b      	adds	r3, r7, r1
 800c5be:	781a      	ldrb	r2, [r3, #0]
 800c5c0:	187b      	adds	r3, r7, r1
 800c5c2:	4935      	ldr	r1, [pc, #212]	; (800c698 <lorawan_aes_set_key+0x274>)
 800c5c4:	5c8a      	ldrb	r2, [r1, r2]
 800c5c6:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800c5c8:	2113      	movs	r1, #19
 800c5ca:	187b      	adds	r3, r7, r1
 800c5cc:	781a      	ldrb	r2, [r3, #0]
 800c5ce:	187b      	adds	r3, r7, r1
 800c5d0:	4931      	ldr	r1, [pc, #196]	; (800c698 <lorawan_aes_set_key+0x274>)
 800c5d2:	5c8a      	ldrb	r2, [r1, r2]
 800c5d4:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800c5d6:	2112      	movs	r1, #18
 800c5d8:	187b      	adds	r3, r7, r1
 800c5da:	781a      	ldrb	r2, [r3, #0]
 800c5dc:	187b      	adds	r3, r7, r1
 800c5de:	492e      	ldr	r1, [pc, #184]	; (800c698 <lorawan_aes_set_key+0x274>)
 800c5e0:	5c8a      	ldrb	r2, [r1, r2]
 800c5e2:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800c5e4:	2410      	movs	r4, #16
 800c5e6:	193b      	adds	r3, r7, r4
 800c5e8:	2017      	movs	r0, #23
 800c5ea:	1839      	adds	r1, r7, r0
 800c5ec:	220b      	movs	r2, #11
 800c5ee:	18ba      	adds	r2, r7, r2
 800c5f0:	7809      	ldrb	r1, [r1, #0]
 800c5f2:	7812      	ldrb	r2, [r2, #0]
 800c5f4:	1a8a      	subs	r2, r1, r2
 800c5f6:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c5f8:	193b      	adds	r3, r7, r4
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	5cd1      	ldrb	r1, [r2, r3]
 800c600:	183b      	adds	r3, r7, r0
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2215      	movs	r2, #21
 800c606:	18ba      	adds	r2, r7, r2
 800c608:	7812      	ldrb	r2, [r2, #0]
 800c60a:	404a      	eors	r2, r1
 800c60c:	b2d1      	uxtb	r1, r2
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c612:	193b      	adds	r3, r7, r4
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	3301      	adds	r3, #1
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	5cd1      	ldrb	r1, [r2, r3]
 800c61c:	183b      	adds	r3, r7, r0
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	2214      	movs	r2, #20
 800c624:	18ba      	adds	r2, r7, r2
 800c626:	7812      	ldrb	r2, [r2, #0]
 800c628:	404a      	eors	r2, r1
 800c62a:	b2d1      	uxtb	r1, r2
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c630:	193b      	adds	r3, r7, r4
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	3302      	adds	r3, #2
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	5cd1      	ldrb	r1, [r2, r3]
 800c63a:	183b      	adds	r3, r7, r0
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	3302      	adds	r3, #2
 800c640:	2213      	movs	r2, #19
 800c642:	18ba      	adds	r2, r7, r2
 800c644:	7812      	ldrb	r2, [r2, #0]
 800c646:	404a      	eors	r2, r1
 800c648:	b2d1      	uxtb	r1, r2
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c64e:	193b      	adds	r3, r7, r4
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	3303      	adds	r3, #3
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	5cd1      	ldrb	r1, [r2, r3]
 800c658:	183b      	adds	r3, r7, r0
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	3303      	adds	r3, #3
 800c65e:	2212      	movs	r2, #18
 800c660:	18ba      	adds	r2, r7, r2
 800c662:	7812      	ldrb	r2, [r2, #0]
 800c664:	404a      	eors	r2, r1
 800c666:	b2d1      	uxtb	r1, r2
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c66c:	183b      	adds	r3, r7, r0
 800c66e:	183a      	adds	r2, r7, r0
 800c670:	7812      	ldrb	r2, [r2, #0]
 800c672:	3204      	adds	r2, #4
 800c674:	701a      	strb	r2, [r3, #0]
 800c676:	2317      	movs	r3, #23
 800c678:	18fa      	adds	r2, r7, r3
 800c67a:	2311      	movs	r3, #17
 800c67c:	18fb      	adds	r3, r7, r3
 800c67e:	7812      	ldrb	r2, [r2, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d200      	bcs.n	800c688 <lorawan_aes_set_key+0x264>
 800c686:	e715      	b.n	800c4b4 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	0018      	movs	r0, r3
 800c68c:	46bd      	mov	sp, r7
 800c68e:	b007      	add	sp, #28
 800c690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	00010101 	.word	0x00010101
 800c698:	0801e160 	.word	0x0801e160

0800c69c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c69c:	b5b0      	push	{r4, r5, r7, lr}
 800c69e:	b08a      	sub	sp, #40	; 0x28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	22f0      	movs	r2, #240	; 0xf0
 800c6ac:	5c9b      	ldrb	r3, [r3, r2]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d039      	beq.n	800c726 <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	68f9      	ldr	r1, [r7, #12]
 800c6b6:	2314      	movs	r3, #20
 800c6b8:	18fb      	adds	r3, r7, r3
 800c6ba:	0018      	movs	r0, r3
 800c6bc:	f7ff fb64 	bl	800bd88 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c6c0:	2327      	movs	r3, #39	; 0x27
 800c6c2:	18fb      	adds	r3, r7, r3
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	701a      	strb	r2, [r3, #0]
 800c6c8:	e014      	b.n	800c6f4 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c6ca:	2514      	movs	r5, #20
 800c6cc:	197b      	adds	r3, r7, r5
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	f7ff fcc2 	bl	800c058 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2427      	movs	r4, #39	; 0x27
 800c6d8:	193a      	adds	r2, r7, r4
 800c6da:	7812      	ldrb	r2, [r2, #0]
 800c6dc:	0112      	lsls	r2, r2, #4
 800c6de:	189a      	adds	r2, r3, r2
 800c6e0:	197b      	adds	r3, r7, r5
 800c6e2:	0011      	movs	r1, r2
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	f7ff fc06 	bl	800bef6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c6ea:	193b      	adds	r3, r7, r4
 800c6ec:	193a      	adds	r2, r7, r4
 800c6ee:	7812      	ldrb	r2, [r2, #0]
 800c6f0:	3201      	adds	r2, #1
 800c6f2:	701a      	strb	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	22f0      	movs	r2, #240	; 0xf0
 800c6f8:	5c9b      	ldrb	r3, [r3, r2]
 800c6fa:	2427      	movs	r4, #39	; 0x27
 800c6fc:	193a      	adds	r2, r7, r4
 800c6fe:	7812      	ldrb	r2, [r2, #0]
 800c700:	429a      	cmp	r2, r3
 800c702:	d3e2      	bcc.n	800c6ca <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c704:	2514      	movs	r5, #20
 800c706:	197b      	adds	r3, r7, r5
 800c708:	0018      	movs	r0, r3
 800c70a:	f7ff fc03 	bl	800bf14 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	193a      	adds	r2, r7, r4
 800c712:	7812      	ldrb	r2, [r2, #0]
 800c714:	0112      	lsls	r2, r2, #4
 800c716:	189a      	adds	r2, r3, r2
 800c718:	1979      	adds	r1, r7, r5
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	0018      	movs	r0, r3
 800c71e:	f7ff fb33 	bl	800bd88 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c722:	2300      	movs	r3, #0
 800c724:	e000      	b.n	800c728 <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800c726:	23ff      	movs	r3, #255	; 0xff
}
 800c728:	0018      	movs	r0, r3
 800c72a:	46bd      	mov	sp, r7
 800c72c:	b00a      	add	sp, #40	; 0x28
 800c72e:	bdb0      	pop	{r4, r5, r7, pc}

0800c730 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	0002      	movs	r2, r0
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	1dfb      	adds	r3, r7, #7
 800c73c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c73e:	230f      	movs	r3, #15
 800c740:	18fb      	adds	r3, r7, r3
 800c742:	2200      	movs	r2, #0
 800c744:	701a      	strb	r2, [r3, #0]
 800c746:	e020      	b.n	800c78a <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800c748:	200f      	movs	r0, #15
 800c74a:	183b      	adds	r3, r7, r0
 800c74c:	781a      	ldrb	r2, [r3, #0]
 800c74e:	4914      	ldr	r1, [pc, #80]	; (800c7a0 <GetKeyByID+0x70>)
 800c750:	0013      	movs	r3, r2
 800c752:	011b      	lsls	r3, r3, #4
 800c754:	189b      	adds	r3, r3, r2
 800c756:	18cb      	adds	r3, r1, r3
 800c758:	3310      	adds	r3, #16
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	1dfa      	adds	r2, r7, #7
 800c75e:	7812      	ldrb	r2, [r2, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d10c      	bne.n	800c77e <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800c764:	183b      	adds	r3, r7, r0
 800c766:	781a      	ldrb	r2, [r3, #0]
 800c768:	0013      	movs	r3, r2
 800c76a:	011b      	lsls	r3, r3, #4
 800c76c:	189b      	adds	r3, r3, r2
 800c76e:	3310      	adds	r3, #16
 800c770:	001a      	movs	r2, r3
 800c772:	4b0b      	ldr	r3, [pc, #44]	; (800c7a0 <GetKeyByID+0x70>)
 800c774:	18d2      	adds	r2, r2, r3
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800c77a:	2300      	movs	r3, #0
 800c77c:	e00b      	b.n	800c796 <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c77e:	210f      	movs	r1, #15
 800c780:	187b      	adds	r3, r7, r1
 800c782:	781a      	ldrb	r2, [r3, #0]
 800c784:	187b      	adds	r3, r7, r1
 800c786:	3201      	adds	r2, #1
 800c788:	701a      	strb	r2, [r3, #0]
 800c78a:	230f      	movs	r3, #15
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2b0d      	cmp	r3, #13
 800c792:	d9d9      	bls.n	800c748 <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c794:	2303      	movs	r3, #3
}
 800c796:	0018      	movs	r0, r3
 800c798:	46bd      	mov	sp, r7
 800c79a:	b004      	add	sp, #16
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	46c0      	nop			; (mov r8, r8)
 800c7a0:	2000007c 	.word	0x2000007c

0800c7a4 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	af00      	add	r7, sp, #0
  return;
 800c7a8:	46c0      	nop			; (mov r8, r8)
}
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800c7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7b2:	b0d1      	sub	sp, #324	; 0x144
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	0019      	movs	r1, r3
 800c7bc:	4b3c      	ldr	r3, [pc, #240]	; (800c8b0 <ComputeCmac+0x100>)
 800c7be:	20a0      	movs	r0, #160	; 0xa0
 800c7c0:	0040      	lsls	r0, r0, #1
 800c7c2:	181b      	adds	r3, r3, r0
 800c7c4:	19db      	adds	r3, r3, r7
 800c7c6:	801a      	strh	r2, [r3, #0]
 800c7c8:	4b3a      	ldr	r3, [pc, #232]	; (800c8b4 <ComputeCmac+0x104>)
 800c7ca:	181b      	adds	r3, r3, r0
 800c7cc:	19db      	adds	r3, r3, r7
 800c7ce:	1c0a      	adds	r2, r1, #0
 800c7d0:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c7d2:	2340      	movs	r3, #64	; 0x40
 800c7d4:	33ff      	adds	r3, #255	; 0xff
 800c7d6:	18fb      	adds	r3, r7, r3
 800c7d8:	2206      	movs	r2, #6
 800c7da:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d007      	beq.n	800c7f2 <ComputeCmac+0x42>
 800c7e2:	23a8      	movs	r3, #168	; 0xa8
 800c7e4:	005b      	lsls	r3, r3, #1
 800c7e6:	2208      	movs	r2, #8
 800c7e8:	189b      	adds	r3, r3, r2
 800c7ea:	19db      	adds	r3, r3, r7
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d101      	bne.n	800c7f6 <ComputeCmac+0x46>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	e057      	b.n	800c8a6 <ComputeCmac+0xf6>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800c7f6:	2514      	movs	r5, #20
 800c7f8:	197b      	adds	r3, r7, r5
 800c7fa:	0018      	movs	r0, r3
 800c7fc:	f7fe ff3e 	bl	800b67c <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800c800:	2640      	movs	r6, #64	; 0x40
 800c802:	36ff      	adds	r6, #255	; 0xff
 800c804:	19bc      	adds	r4, r7, r6
 800c806:	2310      	movs	r3, #16
 800c808:	18fa      	adds	r2, r7, r3
 800c80a:	4b2a      	ldr	r3, [pc, #168]	; (800c8b4 <ComputeCmac+0x104>)
 800c80c:	21a0      	movs	r1, #160	; 0xa0
 800c80e:	0049      	lsls	r1, r1, #1
 800c810:	185b      	adds	r3, r3, r1
 800c812:	19db      	adds	r3, r3, r7
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	0011      	movs	r1, r2
 800c818:	0018      	movs	r0, r3
 800c81a:	f7ff ff89 	bl	800c730 <GetKeyByID>
 800c81e:	0003      	movs	r3, r0
 800c820:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800c822:	19bb      	adds	r3, r7, r6
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d139      	bne.n	800c89e <ComputeCmac+0xee>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	1c5a      	adds	r2, r3, #1
 800c82e:	197b      	adds	r3, r7, r5
 800c830:	0011      	movs	r1, r2
 800c832:	0018      	movs	r0, r3
 800c834:	f7fe ff3c 	bl	800b6b0 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d005      	beq.n	800c84a <ComputeCmac+0x9a>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800c83e:	68f9      	ldr	r1, [r7, #12]
 800c840:	197b      	adds	r3, r7, r5
 800c842:	2210      	movs	r2, #16
 800c844:	0018      	movs	r0, r3
 800c846:	f7fe ff42 	bl	800b6ce <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800c84a:	4b19      	ldr	r3, [pc, #100]	; (800c8b0 <ComputeCmac+0x100>)
 800c84c:	22a0      	movs	r2, #160	; 0xa0
 800c84e:	0052      	lsls	r2, r2, #1
 800c850:	189b      	adds	r3, r3, r2
 800c852:	19db      	adds	r3, r3, r7
 800c854:	881a      	ldrh	r2, [r3, #0]
 800c856:	68b9      	ldr	r1, [r7, #8]
 800c858:	2414      	movs	r4, #20
 800c85a:	193b      	adds	r3, r7, r4
 800c85c:	0018      	movs	r0, r3
 800c85e:	f7fe ff36 	bl	800b6ce <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800c862:	193a      	adds	r2, r7, r4
 800c864:	2496      	movs	r4, #150	; 0x96
 800c866:	0064      	lsls	r4, r4, #1
 800c868:	193b      	adds	r3, r7, r4
 800c86a:	0011      	movs	r1, r2
 800c86c:	0018      	movs	r0, r3
 800c86e:	f7fe fff6 	bl	800b85e <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800c872:	0021      	movs	r1, r4
 800c874:	187b      	adds	r3, r7, r1
 800c876:	78db      	ldrb	r3, [r3, #3]
 800c878:	061a      	lsls	r2, r3, #24
 800c87a:	187b      	adds	r3, r7, r1
 800c87c:	789b      	ldrb	r3, [r3, #2]
 800c87e:	041b      	lsls	r3, r3, #16
 800c880:	431a      	orrs	r2, r3
 800c882:	187b      	adds	r3, r7, r1
 800c884:	785b      	ldrb	r3, [r3, #1]
 800c886:	021b      	lsls	r3, r3, #8
 800c888:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800c88a:	187a      	adds	r2, r7, r1
 800c88c:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800c88e:	431a      	orrs	r2, r3
 800c890:	23a8      	movs	r3, #168	; 0xa8
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	2108      	movs	r1, #8
 800c896:	185b      	adds	r3, r3, r1
 800c898:	19db      	adds	r3, r3, r7
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800c89e:	2340      	movs	r3, #64	; 0x40
 800c8a0:	33ff      	adds	r3, #255	; 0xff
 800c8a2:	18fb      	adds	r3, r7, r3
 800c8a4:	781b      	ldrb	r3, [r3, #0]
}
 800c8a6:	0018      	movs	r0, r3
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	b051      	add	sp, #324	; 0x144
 800c8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ae:	46c0      	nop			; (mov r8, r8)
 800c8b0:	fffffec6 	.word	0xfffffec6
 800c8b4:	fffffec5 	.word	0xfffffec5

0800c8b8 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800c8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ba:	46de      	mov	lr, fp
 800c8bc:	4657      	mov	r7, sl
 800c8be:	464e      	mov	r6, r9
 800c8c0:	4645      	mov	r5, r8
 800c8c2:	b5e0      	push	{r5, r6, r7, lr}
 800c8c4:	b099      	sub	sp, #100	; 0x64
 800c8c6:	af10      	add	r7, sp, #64	; 0x40
 800c8c8:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c8ca:	250f      	movs	r5, #15
 800c8cc:	2610      	movs	r6, #16
 800c8ce:	19ab      	adds	r3, r5, r6
 800c8d0:	19db      	adds	r3, r3, r7
 800c8d2:	2206      	movs	r2, #6
 800c8d4:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800c8d6:	497e      	ldr	r1, [pc, #504]	; (800cad0 <SecureElementInit+0x218>)
 800c8d8:	4b7e      	ldr	r3, [pc, #504]	; (800cad4 <SecureElementInit+0x21c>)
 800c8da:	22ee      	movs	r2, #238	; 0xee
 800c8dc:	0018      	movs	r0, r3
 800c8de:	f00c fb33 	bl	8018f48 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800c8e2:	19ab      	adds	r3, r5, r6
 800c8e4:	19dc      	adds	r4, r3, r7
 800c8e6:	2308      	movs	r3, #8
 800c8e8:	199b      	adds	r3, r3, r6
 800c8ea:	19db      	adds	r3, r3, r7
 800c8ec:	0019      	movs	r1, r3
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	f7ff ff1e 	bl	800c730 <GetKeyByID>
 800c8f4:	0003      	movs	r3, r0
 800c8f6:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "# Ключи для активации по OTAA \r\n");
 800c8f8:	4b77      	ldr	r3, [pc, #476]	; (800cad8 <SecureElementInit+0x220>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	2002      	movs	r0, #2
 800c900:	f00e ff60 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800c904:	19ab      	adds	r3, r5, r6
 800c906:	19db      	adds	r3, r3, r7
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d14f      	bne.n	800c9ae <SecureElementInit+0xf6>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "# AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	785b      	ldrb	r3, [r3, #1]
 800c912:	001d      	movs	r5, r3
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	789b      	ldrb	r3, [r3, #2]
 800c918:	001e      	movs	r6, r3
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	78db      	ldrb	r3, [r3, #3]
 800c91e:	469c      	mov	ip, r3
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	791b      	ldrb	r3, [r3, #4]
 800c924:	4698      	mov	r8, r3
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	795b      	ldrb	r3, [r3, #5]
 800c92a:	4699      	mov	r9, r3
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	799b      	ldrb	r3, [r3, #6]
 800c930:	469a      	mov	sl, r3
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	79db      	ldrb	r3, [r3, #7]
 800c936:	469b      	mov	fp, r3
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	7a1b      	ldrb	r3, [r3, #8]
 800c93c:	613b      	str	r3, [r7, #16]
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	7a5b      	ldrb	r3, [r3, #9]
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	7a9b      	ldrb	r3, [r3, #10]
 800c948:	60bb      	str	r3, [r7, #8]
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	7adb      	ldrb	r3, [r3, #11]
 800c94e:	607b      	str	r3, [r7, #4]
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	7b1b      	ldrb	r3, [r3, #12]
 800c954:	603b      	str	r3, [r7, #0]
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	7b5b      	ldrb	r3, [r3, #13]
 800c95a:	001c      	movs	r4, r3
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	7b9b      	ldrb	r3, [r3, #14]
 800c960:	0018      	movs	r0, r3
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	7bdb      	ldrb	r3, [r3, #15]
 800c966:	0019      	movs	r1, r3
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	7c1b      	ldrb	r3, [r3, #16]
 800c96c:	4a5b      	ldr	r2, [pc, #364]	; (800cadc <SecureElementInit+0x224>)
 800c96e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c970:	910e      	str	r1, [sp, #56]	; 0x38
 800c972:	900d      	str	r0, [sp, #52]	; 0x34
 800c974:	940c      	str	r4, [sp, #48]	; 0x30
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	910b      	str	r1, [sp, #44]	; 0x2c
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	910a      	str	r1, [sp, #40]	; 0x28
 800c97e:	68b9      	ldr	r1, [r7, #8]
 800c980:	9109      	str	r1, [sp, #36]	; 0x24
 800c982:	68f9      	ldr	r1, [r7, #12]
 800c984:	9108      	str	r1, [sp, #32]
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	9307      	str	r3, [sp, #28]
 800c98a:	465b      	mov	r3, fp
 800c98c:	9306      	str	r3, [sp, #24]
 800c98e:	4653      	mov	r3, sl
 800c990:	9305      	str	r3, [sp, #20]
 800c992:	464b      	mov	r3, r9
 800c994:	9304      	str	r3, [sp, #16]
 800c996:	4643      	mov	r3, r8
 800c998:	9303      	str	r3, [sp, #12]
 800c99a:	4663      	mov	r3, ip
 800c99c:	9302      	str	r3, [sp, #8]
 800c99e:	9601      	str	r6, [sp, #4]
 800c9a0:	9500      	str	r5, [sp, #0]
 800c9a2:	0013      	movs	r3, r2
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	2002      	movs	r0, #2
 800c9aa:	f00e ff0b 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800c9ae:	250f      	movs	r5, #15
 800c9b0:	2610      	movs	r6, #16
 800c9b2:	19ab      	adds	r3, r5, r6
 800c9b4:	19dc      	adds	r4, r3, r7
 800c9b6:	2308      	movs	r3, #8
 800c9b8:	199b      	adds	r3, r3, r6
 800c9ba:	19db      	adds	r3, r3, r7
 800c9bc:	0019      	movs	r1, r3
 800c9be:	2001      	movs	r0, #1
 800c9c0:	f7ff feb6 	bl	800c730 <GetKeyByID>
 800c9c4:	0003      	movs	r3, r0
 800c9c6:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800c9c8:	19ab      	adds	r3, r5, r6
 800c9ca:	19db      	adds	r3, r3, r7
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d14f      	bne.n	800ca72 <SecureElementInit+0x1ba>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "# NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	785b      	ldrb	r3, [r3, #1]
 800c9d6:	001d      	movs	r5, r3
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	789b      	ldrb	r3, [r3, #2]
 800c9dc:	001e      	movs	r6, r3
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	78db      	ldrb	r3, [r3, #3]
 800c9e2:	469c      	mov	ip, r3
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	791b      	ldrb	r3, [r3, #4]
 800c9e8:	4698      	mov	r8, r3
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	795b      	ldrb	r3, [r3, #5]
 800c9ee:	4699      	mov	r9, r3
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	799b      	ldrb	r3, [r3, #6]
 800c9f4:	469a      	mov	sl, r3
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	79db      	ldrb	r3, [r3, #7]
 800c9fa:	469b      	mov	fp, r3
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	7a1b      	ldrb	r3, [r3, #8]
 800ca00:	613b      	str	r3, [r7, #16]
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	7a5b      	ldrb	r3, [r3, #9]
 800ca06:	60fb      	str	r3, [r7, #12]
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	7a9b      	ldrb	r3, [r3, #10]
 800ca0c:	60bb      	str	r3, [r7, #8]
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	7adb      	ldrb	r3, [r3, #11]
 800ca12:	607b      	str	r3, [r7, #4]
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	7b1b      	ldrb	r3, [r3, #12]
 800ca18:	603b      	str	r3, [r7, #0]
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	7b5b      	ldrb	r3, [r3, #13]
 800ca1e:	001c      	movs	r4, r3
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	7b9b      	ldrb	r3, [r3, #14]
 800ca24:	0018      	movs	r0, r3
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	7bdb      	ldrb	r3, [r3, #15]
 800ca2a:	0019      	movs	r1, r3
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	7c1b      	ldrb	r3, [r3, #16]
 800ca30:	4a2b      	ldr	r2, [pc, #172]	; (800cae0 <SecureElementInit+0x228>)
 800ca32:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca34:	910e      	str	r1, [sp, #56]	; 0x38
 800ca36:	900d      	str	r0, [sp, #52]	; 0x34
 800ca38:	940c      	str	r4, [sp, #48]	; 0x30
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ca3e:	6879      	ldr	r1, [r7, #4]
 800ca40:	910a      	str	r1, [sp, #40]	; 0x28
 800ca42:	68b9      	ldr	r1, [r7, #8]
 800ca44:	9109      	str	r1, [sp, #36]	; 0x24
 800ca46:	68f9      	ldr	r1, [r7, #12]
 800ca48:	9108      	str	r1, [sp, #32]
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	9307      	str	r3, [sp, #28]
 800ca4e:	465b      	mov	r3, fp
 800ca50:	9306      	str	r3, [sp, #24]
 800ca52:	4653      	mov	r3, sl
 800ca54:	9305      	str	r3, [sp, #20]
 800ca56:	464b      	mov	r3, r9
 800ca58:	9304      	str	r3, [sp, #16]
 800ca5a:	4643      	mov	r3, r8
 800ca5c:	9303      	str	r3, [sp, #12]
 800ca5e:	4663      	mov	r3, ip
 800ca60:	9302      	str	r3, [sp, #8]
 800ca62:	9601      	str	r6, [sp, #4]
 800ca64:	9500      	str	r5, [sp, #0]
 800ca66:	0013      	movs	r3, r2
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	2002      	movs	r0, #2
 800ca6e:	f00e fea9 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
  }
//  KEY_LOG(TS_OFF, VLEVEL_M, "# Ключи для активации по ABP \r\n");
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800ca72:	250f      	movs	r5, #15
 800ca74:	2310      	movs	r3, #16
 800ca76:	18ea      	adds	r2, r5, r3
 800ca78:	19d4      	adds	r4, r2, r7
 800ca7a:	2608      	movs	r6, #8
 800ca7c:	18f2      	adds	r2, r6, r3
 800ca7e:	19d3      	adds	r3, r2, r7
 800ca80:	0019      	movs	r1, r3
 800ca82:	2008      	movs	r0, #8
 800ca84:	f7ff fe54 	bl	800c730 <GetKeyByID>
 800ca88:	0003      	movs	r3, r0
 800ca8a:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
  {
//    KEY_LOG(TS_OFF, VLEVEL_M, "# AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800ca8c:	2310      	movs	r3, #16
 800ca8e:	18ea      	adds	r2, r5, r3
 800ca90:	19d4      	adds	r4, r2, r7
 800ca92:	18f3      	adds	r3, r6, r3
 800ca94:	19db      	adds	r3, r3, r7
 800ca96:	0019      	movs	r1, r3
 800ca98:	2007      	movs	r0, #7
 800ca9a:	f7ff fe49 	bl	800c730 <GetKeyByID>
 800ca9e:	0003      	movs	r3, r0
 800caa0:	7023      	strb	r3, [r4, #0]
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d003      	beq.n	800cab0 <SecureElementInit+0x1f8>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800caa8:	4b0e      	ldr	r3, [pc, #56]	; (800cae4 <SecureElementInit+0x22c>)
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	e002      	b.n	800cab6 <SecureElementInit+0x1fe>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800cab0:	4b0c      	ldr	r3, [pc, #48]	; (800cae4 <SecureElementInit+0x22c>)
 800cab2:	4a0d      	ldr	r2, [pc, #52]	; (800cae8 <SecureElementInit+0x230>)
 800cab4:	601a      	str	r2, [r3, #0]
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800cab6:	4b0b      	ldr	r3, [pc, #44]	; (800cae4 <SecureElementInit+0x22c>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	0018      	movs	r0, r3
 800cac0:	46bd      	mov	sp, r7
 800cac2:	b009      	add	sp, #36	; 0x24
 800cac4:	bcf0      	pop	{r4, r5, r6, r7}
 800cac6:	46bb      	mov	fp, r7
 800cac8:	46b2      	mov	sl, r6
 800caca:	46a9      	mov	r9, r5
 800cacc:	46a0      	mov	r8, r4
 800cace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad0:	0801e460 	.word	0x0801e460
 800cad4:	2000008c 	.word	0x2000008c
 800cad8:	0801e550 	.word	0x0801e550
 800cadc:	0801e584 	.word	0x0801e584
 800cae0:	0801e5e4 	.word	0x0801e5e4
 800cae4:	200007fc 	.word	0x200007fc
 800cae8:	0800c7a5 	.word	0x0800c7a5

0800caec <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d007      	beq.n	800cb0a <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	4b05      	ldr	r3, [pc, #20]	; (800cb14 <SecureElementRestoreNvmCtx+0x28>)
 800cafe:	22fe      	movs	r2, #254	; 0xfe
 800cb00:	0018      	movs	r0, r3
 800cb02:	f00c fa21 	bl	8018f48 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e000      	b.n	800cb0c <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cb0a:	2302      	movs	r3, #2
  }
}
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	b002      	add	sp, #8
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	2000007c 	.word	0x2000007c

0800cb18 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	22fe      	movs	r2, #254	; 0xfe
 800cb24:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800cb26:	4b02      	ldr	r3, [pc, #8]	; (800cb30 <SecureElementGetNvmCtx+0x18>)
}
 800cb28:	0018      	movs	r0, r3
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	b002      	add	sp, #8
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	2000007c 	.word	0x2000007c

0800cb34 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800cb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb36:	b089      	sub	sp, #36	; 0x24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	0002      	movs	r2, r0
 800cb3c:	6039      	str	r1, [r7, #0]
 800cb3e:	1dfb      	adds	r3, r7, #7
 800cb40:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cb48:	2302      	movs	r3, #2
 800cb4a:	e064      	b.n	800cc16 <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cb4c:	231f      	movs	r3, #31
 800cb4e:	18fb      	adds	r3, r7, r3
 800cb50:	2200      	movs	r2, #0
 800cb52:	701a      	strb	r2, [r3, #0]
 800cb54:	e059      	b.n	800cc0a <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800cb56:	231f      	movs	r3, #31
 800cb58:	18fb      	adds	r3, r7, r3
 800cb5a:	781a      	ldrb	r2, [r3, #0]
 800cb5c:	4930      	ldr	r1, [pc, #192]	; (800cc20 <SecureElementSetKey+0xec>)
 800cb5e:	0013      	movs	r3, r2
 800cb60:	011b      	lsls	r3, r3, #4
 800cb62:	189b      	adds	r3, r3, r2
 800cb64:	18cb      	adds	r3, r1, r3
 800cb66:	3310      	adds	r3, #16
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	1dfa      	adds	r2, r7, #7
 800cb6c:	7812      	ldrb	r2, [r2, #0]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d145      	bne.n	800cbfe <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800cb72:	1dfb      	adds	r3, r7, #7
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	2b80      	cmp	r3, #128	; 0x80
 800cb78:	d12c      	bne.n	800cbd4 <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cb7a:	251e      	movs	r5, #30
 800cb7c:	197b      	adds	r3, r7, r5
 800cb7e:	2206      	movs	r2, #6
 800cb80:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800cb82:	260c      	movs	r6, #12
 800cb84:	19bb      	adds	r3, r7, r6
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	220c      	movs	r2, #12
 800cb8e:	2100      	movs	r1, #0
 800cb90:	0018      	movs	r0, r3
 800cb92:	f010 fea4 	bl	801d8de <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800cb96:	197c      	adds	r4, r7, r5
 800cb98:	19bb      	adds	r3, r7, r6
 800cb9a:	6838      	ldr	r0, [r7, #0]
 800cb9c:	227f      	movs	r2, #127	; 0x7f
 800cb9e:	2110      	movs	r1, #16
 800cba0:	f000 f8a5 	bl	800ccee <SecureElementAesEncrypt>
 800cba4:	0003      	movs	r3, r0
 800cba6:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800cba8:	231f      	movs	r3, #31
 800cbaa:	18fb      	adds	r3, r7, r3
 800cbac:	781a      	ldrb	r2, [r3, #0]
 800cbae:	0013      	movs	r3, r2
 800cbb0:	011b      	lsls	r3, r3, #4
 800cbb2:	189b      	adds	r3, r3, r2
 800cbb4:	3310      	adds	r3, #16
 800cbb6:	001a      	movs	r2, r3
 800cbb8:	4b19      	ldr	r3, [pc, #100]	; (800cc20 <SecureElementSetKey+0xec>)
 800cbba:	18d3      	adds	r3, r2, r3
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	19b9      	adds	r1, r7, r6
 800cbc0:	2210      	movs	r2, #16
 800cbc2:	0018      	movs	r0, r3
 800cbc4:	f00c f9c0 	bl	8018f48 <memcpy1>
        SeNvmCtxChanged();
 800cbc8:	4b16      	ldr	r3, [pc, #88]	; (800cc24 <SecureElementSetKey+0xf0>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4798      	blx	r3

        return retval;
 800cbce:	197b      	adds	r3, r7, r5
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	e020      	b.n	800cc16 <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800cbd4:	231f      	movs	r3, #31
 800cbd6:	18fb      	adds	r3, r7, r3
 800cbd8:	781a      	ldrb	r2, [r3, #0]
 800cbda:	0013      	movs	r3, r2
 800cbdc:	011b      	lsls	r3, r3, #4
 800cbde:	189b      	adds	r3, r3, r2
 800cbe0:	3310      	adds	r3, #16
 800cbe2:	001a      	movs	r2, r3
 800cbe4:	4b0e      	ldr	r3, [pc, #56]	; (800cc20 <SecureElementSetKey+0xec>)
 800cbe6:	18d3      	adds	r3, r2, r3
 800cbe8:	3301      	adds	r3, #1
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	2210      	movs	r2, #16
 800cbee:	0018      	movs	r0, r3
 800cbf0:	f00c f9aa 	bl	8018f48 <memcpy1>
        SeNvmCtxChanged();
 800cbf4:	4b0b      	ldr	r3, [pc, #44]	; (800cc24 <SecureElementSetKey+0xf0>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e00b      	b.n	800cc16 <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cbfe:	211f      	movs	r1, #31
 800cc00:	187b      	adds	r3, r7, r1
 800cc02:	781a      	ldrb	r2, [r3, #0]
 800cc04:	187b      	adds	r3, r7, r1
 800cc06:	3201      	adds	r2, #1
 800cc08:	701a      	strb	r2, [r3, #0]
 800cc0a:	231f      	movs	r3, #31
 800cc0c:	18fb      	adds	r3, r7, r3
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	2b0d      	cmp	r3, #13
 800cc12:	d9a0      	bls.n	800cb56 <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cc14:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800cc16:	0018      	movs	r0, r3
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	b009      	add	sp, #36	; 0x24
 800cc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc1e:	46c0      	nop			; (mov r8, r8)
 800cc20:	2000007c 	.word	0x2000007c
 800cc24:	200007fc 	.word	0x200007fc

0800cc28 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800cc28:	b590      	push	{r4, r7, lr}
 800cc2a:	b087      	sub	sp, #28
 800cc2c:	af02      	add	r7, sp, #8
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	0019      	movs	r1, r3
 800cc34:	1dbb      	adds	r3, r7, #6
 800cc36:	801a      	strh	r2, [r3, #0]
 800cc38:	1d7b      	adds	r3, r7, #5
 800cc3a:	1c0a      	adds	r2, r1, #0
 800cc3c:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800cc3e:	1d7b      	adds	r3, r7, #5
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2b7e      	cmp	r3, #126	; 0x7e
 800cc44:	d901      	bls.n	800cc4a <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e00b      	b.n	800cc62 <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800cc4a:	1d7b      	adds	r3, r7, #5
 800cc4c:	781c      	ldrb	r4, [r3, #0]
 800cc4e:	1dbb      	adds	r3, r7, #6
 800cc50:	881a      	ldrh	r2, [r3, #0]
 800cc52:	68b9      	ldr	r1, [r7, #8]
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	0023      	movs	r3, r4
 800cc5c:	f7ff fda8 	bl	800c7b0 <ComputeCmac>
 800cc60:	0003      	movs	r3, r0
}
 800cc62:	0018      	movs	r0, r3
 800cc64:	46bd      	mov	sp, r7
 800cc66:	b005      	add	sp, #20
 800cc68:	bd90      	pop	{r4, r7, pc}

0800cc6a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800cc6a:	b5b0      	push	{r4, r5, r7, lr}
 800cc6c:	b088      	sub	sp, #32
 800cc6e:	af02      	add	r7, sp, #8
 800cc70:	60f8      	str	r0, [r7, #12]
 800cc72:	0008      	movs	r0, r1
 800cc74:	607a      	str	r2, [r7, #4]
 800cc76:	0019      	movs	r1, r3
 800cc78:	230a      	movs	r3, #10
 800cc7a:	18fb      	adds	r3, r7, r3
 800cc7c:	1c02      	adds	r2, r0, #0
 800cc7e:	801a      	strh	r2, [r3, #0]
 800cc80:	2309      	movs	r3, #9
 800cc82:	18fb      	adds	r3, r7, r3
 800cc84:	1c0a      	adds	r2, r1, #0
 800cc86:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cc88:	2317      	movs	r3, #23
 800cc8a:	18fb      	adds	r3, r7, r3
 800cc8c:	2206      	movs	r2, #6
 800cc8e:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cc96:	2302      	movs	r3, #2
 800cc98:	e025      	b.n	800cce6 <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800cc9e:	2517      	movs	r5, #23
 800cca0:	197c      	adds	r4, r7, r5
 800cca2:	2309      	movs	r3, #9
 800cca4:	18fb      	adds	r3, r7, r3
 800cca6:	7818      	ldrb	r0, [r3, #0]
 800cca8:	230a      	movs	r3, #10
 800ccaa:	18fb      	adds	r3, r7, r3
 800ccac:	881a      	ldrh	r2, [r3, #0]
 800ccae:	68f9      	ldr	r1, [r7, #12]
 800ccb0:	2310      	movs	r3, #16
 800ccb2:	18fb      	adds	r3, r7, r3
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	0003      	movs	r3, r0
 800ccb8:	2000      	movs	r0, #0
 800ccba:	f7ff fd79 	bl	800c7b0 <ComputeCmac>
 800ccbe:	0003      	movs	r3, r0
 800ccc0:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800ccc2:	197b      	adds	r3, r7, r5
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800ccca:	197b      	adds	r3, r7, r5
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	e00a      	b.n	800cce6 <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d003      	beq.n	800cce0 <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800ccd8:	2317      	movs	r3, #23
 800ccda:	18fb      	adds	r3, r7, r3
 800ccdc:	2201      	movs	r2, #1
 800ccde:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800cce0:	2317      	movs	r3, #23
 800cce2:	18fb      	adds	r3, r7, r3
 800cce4:	781b      	ldrb	r3, [r3, #0]
}
 800cce6:	0018      	movs	r0, r3
 800cce8:	46bd      	mov	sp, r7
 800ccea:	b006      	add	sp, #24
 800ccec:	bdb0      	pop	{r4, r5, r7, pc}

0800ccee <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800ccee:	b5b0      	push	{r4, r5, r7, lr}
 800ccf0:	b0c2      	sub	sp, #264	; 0x108
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	0008      	movs	r0, r1
 800ccf8:	0011      	movs	r1, r2
 800ccfa:	607b      	str	r3, [r7, #4]
 800ccfc:	230a      	movs	r3, #10
 800ccfe:	18fb      	adds	r3, r7, r3
 800cd00:	1c02      	adds	r2, r0, #0
 800cd02:	801a      	strh	r2, [r3, #0]
 800cd04:	2309      	movs	r3, #9
 800cd06:	18fb      	adds	r3, r7, r3
 800cd08:	1c0a      	adds	r2, r1, #0
 800cd0a:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cd0c:	1dfb      	adds	r3, r7, #7
 800cd0e:	33ff      	adds	r3, #255	; 0xff
 800cd10:	2206      	movs	r2, #6
 800cd12:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <SecureElementAesEncrypt+0x32>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cd20:	2302      	movs	r3, #2
 800cd22:	e051      	b.n	800cdc8 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800cd24:	230a      	movs	r3, #10
 800cd26:	18fb      	adds	r3, r7, r3
 800cd28:	881b      	ldrh	r3, [r3, #0]
 800cd2a:	220f      	movs	r2, #15
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800cd34:	2305      	movs	r3, #5
 800cd36:	e047      	b.n	800cdc8 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800cd38:	2514      	movs	r5, #20
 800cd3a:	197b      	adds	r3, r7, r5
 800cd3c:	22f0      	movs	r2, #240	; 0xf0
 800cd3e:	2100      	movs	r1, #0
 800cd40:	0018      	movs	r0, r3
 800cd42:	f00c f93f 	bl	8018fc4 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800cd46:	1dfc      	adds	r4, r7, #7
 800cd48:	34ff      	adds	r4, #255	; 0xff
 800cd4a:	2310      	movs	r3, #16
 800cd4c:	18fa      	adds	r2, r7, r3
 800cd4e:	2309      	movs	r3, #9
 800cd50:	18fb      	adds	r3, r7, r3
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	0011      	movs	r1, r2
 800cd56:	0018      	movs	r0, r3
 800cd58:	f7ff fcea 	bl	800c730 <GetKeyByID>
 800cd5c:	0003      	movs	r3, r0
 800cd5e:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800cd60:	1dfb      	adds	r3, r7, #7
 800cd62:	33ff      	adds	r3, #255	; 0xff
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d12b      	bne.n	800cdc2 <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	197a      	adds	r2, r7, r5
 800cd70:	2110      	movs	r1, #16
 800cd72:	0018      	movs	r0, r3
 800cd74:	f7ff fb56 	bl	800c424 <lorawan_aes_set_key>

    uint8_t block = 0;
 800cd78:	2308      	movs	r3, #8
 800cd7a:	33ff      	adds	r3, #255	; 0xff
 800cd7c:	18fb      	adds	r3, r7, r3
 800cd7e:	2200      	movs	r2, #0
 800cd80:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800cd82:	e019      	b.n	800cdb8 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800cd84:	2408      	movs	r4, #8
 800cd86:	34ff      	adds	r4, #255	; 0xff
 800cd88:	193b      	adds	r3, r7, r4
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	18d0      	adds	r0, r2, r3
 800cd90:	193b      	adds	r3, r7, r4
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	18d3      	adds	r3, r2, r3
 800cd98:	2214      	movs	r2, #20
 800cd9a:	18ba      	adds	r2, r7, r2
 800cd9c:	0019      	movs	r1, r3
 800cd9e:	f7ff fc7d 	bl	800c69c <lorawan_aes_encrypt>
      block = block + 16;
 800cda2:	193b      	adds	r3, r7, r4
 800cda4:	193a      	adds	r2, r7, r4
 800cda6:	7812      	ldrb	r2, [r2, #0]
 800cda8:	3210      	adds	r2, #16
 800cdaa:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800cdac:	220a      	movs	r2, #10
 800cdae:	18bb      	adds	r3, r7, r2
 800cdb0:	18ba      	adds	r2, r7, r2
 800cdb2:	8812      	ldrh	r2, [r2, #0]
 800cdb4:	3a10      	subs	r2, #16
 800cdb6:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800cdb8:	230a      	movs	r3, #10
 800cdba:	18fb      	adds	r3, r7, r3
 800cdbc:	881b      	ldrh	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1e0      	bne.n	800cd84 <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800cdc2:	1dfb      	adds	r3, r7, #7
 800cdc4:	33ff      	adds	r3, #255	; 0xff
 800cdc6:	781b      	ldrb	r3, [r3, #0]
}
 800cdc8:	0018      	movs	r0, r3
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	b042      	add	sp, #264	; 0x108
 800cdce:	bdb0      	pop	{r4, r5, r7, pc}

0800cdd0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800cdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd2:	b08b      	sub	sp, #44	; 0x2c
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	0019      	movs	r1, r3
 800cddc:	1dfb      	adds	r3, r7, #7
 800cdde:	701a      	strb	r2, [r3, #0]
 800cde0:	1dbb      	adds	r3, r7, #6
 800cde2:	1c0a      	adds	r2, r1, #0
 800cde4:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cde6:	2327      	movs	r3, #39	; 0x27
 800cde8:	18fb      	adds	r3, r7, r3
 800cdea:	2206      	movs	r2, #6
 800cdec:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d101      	bne.n	800cdf8 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	e03c      	b.n	800ce72 <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800cdf8:	1dbb      	adds	r3, r7, #6
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	2b7f      	cmp	r3, #127	; 0x7f
 800cdfe:	d105      	bne.n	800ce0c <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800ce00:	1dfb      	adds	r3, r7, #7
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b09      	cmp	r3, #9
 800ce06:	d001      	beq.n	800ce0c <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e032      	b.n	800ce72 <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800ce0c:	2614      	movs	r6, #20
 800ce0e:	19bb      	adds	r3, r7, r6
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	3304      	adds	r3, #4
 800ce16:	220c      	movs	r2, #12
 800ce18:	2100      	movs	r1, #0
 800ce1a:	0018      	movs	r0, r3
 800ce1c:	f010 fd5f 	bl	801d8de <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800ce20:	2527      	movs	r5, #39	; 0x27
 800ce22:	197c      	adds	r4, r7, r5
 800ce24:	19b9      	adds	r1, r7, r6
 800ce26:	1dfb      	adds	r3, r7, #7
 800ce28:	781a      	ldrb	r2, [r3, #0]
 800ce2a:	68b8      	ldr	r0, [r7, #8]
 800ce2c:	000b      	movs	r3, r1
 800ce2e:	2110      	movs	r1, #16
 800ce30:	f7ff ff5d 	bl	800ccee <SecureElementAesEncrypt>
 800ce34:	0003      	movs	r3, r0
 800ce36:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800ce38:	197b      	adds	r3, r7, r5
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800ce40:	197b      	adds	r3, r7, r5
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	e015      	b.n	800ce72 <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800ce46:	2527      	movs	r5, #39	; 0x27
 800ce48:	197c      	adds	r4, r7, r5
 800ce4a:	2314      	movs	r3, #20
 800ce4c:	18fa      	adds	r2, r7, r3
 800ce4e:	1dbb      	adds	r3, r7, #6
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	0011      	movs	r1, r2
 800ce54:	0018      	movs	r0, r3
 800ce56:	f7ff fe6d 	bl	800cb34 <SecureElementSetKey>
 800ce5a:	0003      	movs	r3, r0
 800ce5c:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800ce5e:	197b      	adds	r3, r7, r5
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800ce66:	197b      	adds	r3, r7, r5
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	e002      	b.n	800ce72 <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800ce6c:	2327      	movs	r3, #39	; 0x27
 800ce6e:	18fb      	adds	r3, r7, r3
 800ce70:	781b      	ldrb	r3, [r3, #0]
}
 800ce72:	0018      	movs	r0, r3
 800ce74:	46bd      	mov	sp, r7
 800ce76:	b00b      	add	sp, #44	; 0x2c
 800ce78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce7a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800ce7a:	b5b0      	push	{r4, r5, r7, lr}
 800ce7c:	b096      	sub	sp, #88	; 0x58
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	0011      	movs	r1, r2
 800ce84:	607b      	str	r3, [r7, #4]
 800ce86:	230f      	movs	r3, #15
 800ce88:	18fb      	adds	r3, r7, r3
 800ce8a:	1c02      	adds	r2, r0, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	230c      	movs	r3, #12
 800ce90:	18fb      	adds	r3, r7, r3
 800ce92:	1c0a      	adds	r2, r1, #0
 800ce94:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d005      	beq.n	800cea8 <SecureElementProcessJoinAccept+0x2e>
 800ce9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <SecureElementProcessJoinAccept+0x2e>
 800cea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d101      	bne.n	800ceac <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cea8:	2302      	movs	r3, #2
 800ceaa:	e0e1      	b.n	800d070 <SecureElementProcessJoinAccept+0x1f6>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800ceac:	2368      	movs	r3, #104	; 0x68
 800ceae:	18fb      	adds	r3, r7, r3
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2b21      	cmp	r3, #33	; 0x21
 800ceb4:	d901      	bls.n	800ceba <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ceb6:	2305      	movs	r3, #5
 800ceb8:	e0da      	b.n	800d070 <SecureElementProcessJoinAccept+0x1f6>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800ceba:	2157      	movs	r1, #87	; 0x57
 800cebc:	187b      	adds	r3, r7, r1
 800cebe:	2201      	movs	r2, #1
 800cec0:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
  if (joinReqType != JOIN_REQ)
 800cec2:	230f      	movs	r3, #15
 800cec4:	18fb      	adds	r3, r7, r3
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	2bff      	cmp	r3, #255	; 0xff
 800ceca:	d002      	beq.n	800ced2 <SecureElementProcessJoinAccept+0x58>
  {
    encKeyID = J_S_ENC_KEY;
 800cecc:	187b      	adds	r3, r7, r1
 800cece:	2203      	movs	r2, #3
 800ced0:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800ced2:	2468      	movs	r4, #104	; 0x68
 800ced4:	193b      	adds	r3, r7, r4
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	6879      	ldr	r1, [r7, #4]
 800cedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cede:	0018      	movs	r0, r3
 800cee0:	f00c f832 	bl	8018f48 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	1c58      	adds	r0, r3, #1
 800cee8:	193b      	adds	r3, r7, r4
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	3b01      	subs	r3, #1
 800cef0:	b299      	uxth	r1, r3
 800cef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cef4:	1c5c      	adds	r4, r3, #1
 800cef6:	2357      	movs	r3, #87	; 0x57
 800cef8:	18fb      	adds	r3, r7, r3
 800cefa:	781a      	ldrb	r2, [r3, #0]
 800cefc:	0023      	movs	r3, r4
 800cefe:	f7ff fef6 	bl	800ccee <SecureElementAesEncrypt>
 800cf02:	1e03      	subs	r3, r0, #0
 800cf04:	d001      	beq.n	800cf0a <SecureElementProcessJoinAccept+0x90>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800cf06:	2307      	movs	r3, #7
 800cf08:	e0b2      	b.n	800d070 <SecureElementProcessJoinAccept+0x1f6>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800cf0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf0c:	330b      	adds	r3, #11
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	09db      	lsrs	r3, r3, #7
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf16:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	653b      	str	r3, [r7, #80]	; 0x50

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800cf1c:	2168      	movs	r1, #104	; 0x68
 800cf1e:	187b      	adds	r3, r7, r1
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	3b04      	subs	r3, #4
 800cf24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf26:	18d3      	adds	r3, r2, r3
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	653b      	str	r3, [r7, #80]	; 0x50
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800cf2c:	187b      	adds	r3, r7, r1
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	3b03      	subs	r3, #3
 800cf32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf34:	18d3      	adds	r3, r2, r3
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	021b      	lsls	r3, r3, #8
 800cf3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	653b      	str	r3, [r7, #80]	; 0x50
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800cf40:	187b      	adds	r3, r7, r1
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	3b02      	subs	r3, #2
 800cf46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf48:	18d3      	adds	r3, r2, r3
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	041b      	lsls	r3, r3, #16
 800cf4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf50:	4313      	orrs	r3, r2
 800cf52:	653b      	str	r3, [r7, #80]	; 0x50
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800cf54:	187b      	adds	r3, r7, r1
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf5c:	18d3      	adds	r3, r2, r3
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	061b      	lsls	r3, r3, #24
 800cf62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf64:	4313      	orrs	r3, r2
 800cf66:	653b      	str	r3, [r7, #80]	; 0x50
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800cf68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10e      	bne.n	800cf8e <SecureElementProcessJoinAccept+0x114>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800cf70:	187b      	adds	r3, r7, r1
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	3b04      	subs	r3, #4
 800cf78:	b299      	uxth	r1, r3
 800cf7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf7e:	2301      	movs	r3, #1
 800cf80:	f7ff fe73 	bl	800cc6a <SecureElementVerifyAesCmac>
 800cf84:	1e03      	subs	r3, r0, #0
 800cf86:	d100      	bne.n	800cf8a <SecureElementProcessJoinAccept+0x110>
 800cf88:	e071      	b.n	800d06e <SecureElementProcessJoinAccept+0x1f4>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e070      	b.n	800d070 <SecureElementProcessJoinAccept+0x1f6>
    }
  }
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
  else if (*versionMinor == 1)
 800cf8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d169      	bne.n	800d06a <SecureElementProcessJoinAccept+0x1f0>
  {
    uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
 800cf96:	2540      	movs	r5, #64	; 0x40
 800cf98:	197b      	adds	r3, r7, r5
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	2208      	movs	r2, #8
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	0018      	movs	r0, r3
 800cfa6:	f010 fc9a 	bl	801d8de <memset>
    uint16_t bufItr                                          = 0;
 800cfaa:	204e      	movs	r0, #78	; 0x4e
 800cfac:	183b      	adds	r3, r7, r0
 800cfae:	2200      	movs	r2, #0
 800cfb0:	801a      	strh	r2, [r3, #0]

    micHeader11[bufItr++] = (uint8_t) joinReqType;
 800cfb2:	183b      	adds	r3, r7, r0
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	183a      	adds	r2, r7, r0
 800cfb8:	1c59      	adds	r1, r3, #1
 800cfba:	8011      	strh	r1, [r2, #0]
 800cfbc:	0019      	movs	r1, r3
 800cfbe:	197b      	adds	r3, r7, r5
 800cfc0:	220f      	movs	r2, #15
 800cfc2:	18ba      	adds	r2, r7, r2
 800cfc4:	7812      	ldrb	r2, [r2, #0]
 800cfc6:	545a      	strb	r2, [r3, r1]

    memcpyr(micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE);
 800cfc8:	0004      	movs	r4, r0
 800cfca:	183b      	adds	r3, r7, r0
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	197a      	adds	r2, r7, r5
 800cfd0:	18d3      	adds	r3, r2, r3
 800cfd2:	68b9      	ldr	r1, [r7, #8]
 800cfd4:	2208      	movs	r2, #8
 800cfd6:	0018      	movs	r0, r3
 800cfd8:	f00b ffd2 	bl	8018f80 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800cfdc:	0020      	movs	r0, r4
 800cfde:	183b      	adds	r3, r7, r0
 800cfe0:	183a      	adds	r2, r7, r0
 800cfe2:	8812      	ldrh	r2, [r2, #0]
 800cfe4:	3208      	adds	r2, #8
 800cfe6:	801a      	strh	r2, [r3, #0]

    micHeader11[bufItr++] = devNonce & 0xFF;
 800cfe8:	183b      	adds	r3, r7, r0
 800cfea:	881b      	ldrh	r3, [r3, #0]
 800cfec:	183a      	adds	r2, r7, r0
 800cfee:	1c59      	adds	r1, r3, #1
 800cff0:	8011      	strh	r1, [r2, #0]
 800cff2:	001a      	movs	r2, r3
 800cff4:	240c      	movs	r4, #12
 800cff6:	193b      	adds	r3, r7, r4
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	b2d9      	uxtb	r1, r3
 800cffc:	197b      	adds	r3, r7, r5
 800cffe:	5499      	strb	r1, [r3, r2]
    micHeader11[bufItr++] = (devNonce >> 8) & 0xFF;
 800d000:	193b      	adds	r3, r7, r4
 800d002:	881b      	ldrh	r3, [r3, #0]
 800d004:	0a1b      	lsrs	r3, r3, #8
 800d006:	b299      	uxth	r1, r3
 800d008:	183b      	adds	r3, r7, r0
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	183a      	adds	r2, r7, r0
 800d00e:	1c58      	adds	r0, r3, #1
 800d010:	8010      	strh	r0, [r2, #0]
 800d012:	001a      	movs	r2, r3
 800d014:	b2c9      	uxtb	r1, r1
 800d016:	197b      	adds	r3, r7, r5
 800d018:	5499      	strb	r1, [r3, r2]

    /* For LoRaWAN 1.1.x and later:
     *   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr |
     *   DLSettings | RxDelay | CFList | CFListType)
     *   Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce) */
    uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
 800d01a:	2410      	movs	r4, #16
 800d01c:	193b      	adds	r3, r7, r4
 800d01e:	2200      	movs	r2, #0
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	3304      	adds	r3, #4
 800d024:	2229      	movs	r2, #41	; 0x29
 800d026:	2100      	movs	r1, #0
 800d028:	0018      	movs	r0, r3
 800d02a:	f010 fc58 	bl	801d8de <memset>

    memcpy1(localBuffer, micHeader11, JOIN_ACCEPT_MIC_COMPUTATION_OFFSET);
 800d02e:	1979      	adds	r1, r7, r5
 800d030:	193b      	adds	r3, r7, r4
 800d032:	220c      	movs	r2, #12
 800d034:	0018      	movs	r0, r3
 800d036:	f00b ff87 	bl	8018f48 <memcpy1>
    memcpy1(localBuffer + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET - 1, decJoinAccept, encJoinAcceptSize);
 800d03a:	193b      	adds	r3, r7, r4
 800d03c:	330b      	adds	r3, #11
 800d03e:	2568      	movs	r5, #104	; 0x68
 800d040:	197a      	adds	r2, r7, r5
 800d042:	7812      	ldrb	r2, [r2, #0]
 800d044:	b292      	uxth	r2, r2
 800d046:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d048:	0018      	movs	r0, r3
 800d04a:	f00b ff7d 	bl	8018f48 <memcpy1>

    if (SecureElementVerifyAesCmac(localBuffer,
 800d04e:	197b      	adds	r3, r7, r5
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	b29b      	uxth	r3, r3
 800d054:	3307      	adds	r3, #7
 800d056:	b299      	uxth	r1, r3
 800d058:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d05a:	1938      	adds	r0, r7, r4
 800d05c:	2302      	movs	r3, #2
 800d05e:	f7ff fe04 	bl	800cc6a <SecureElementVerifyAesCmac>
 800d062:	1e03      	subs	r3, r0, #0
 800d064:	d003      	beq.n	800d06e <SecureElementProcessJoinAccept+0x1f4>
                                   encJoinAcceptSize + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET -
                                   LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE,
                                   mic, J_S_INT_KEY) != SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800d066:	2301      	movs	r3, #1
 800d068:	e002      	b.n	800d070 <SecureElementProcessJoinAccept+0x1f6>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d06a:	2304      	movs	r3, #4
 800d06c:	e000      	b.n	800d070 <SecureElementProcessJoinAccept+0x1f6>
  }

  return SECURE_ELEMENT_SUCCESS;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	0018      	movs	r0, r3
 800d072:	46bd      	mov	sp, r7
 800d074:	b016      	add	sp, #88	; 0x58
 800d076:	bdb0      	pop	{r4, r5, r7, pc}

0800d078 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d086:	2302      	movs	r3, #2
 800d088:	e006      	b.n	800d098 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800d08a:	4b05      	ldr	r3, [pc, #20]	; (800d0a0 <SecureElementRandomNumber+0x28>)
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	4798      	blx	r3
 800d090:	0002      	movs	r2, r0
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800d096:	2300      	movs	r3, #0
}
 800d098:	0018      	movs	r0, r3
 800d09a:	46bd      	mov	sp, r7
 800d09c:	b002      	add	sp, #8
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	0801ec78 	.word	0x0801ec78

0800d0a4 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	e009      	b.n	800d0ca <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800d0b6:	6879      	ldr	r1, [r7, #4]
 800d0b8:	4b06      	ldr	r3, [pc, #24]	; (800d0d4 <SecureElementSetDevEui+0x30>)
 800d0ba:	2208      	movs	r2, #8
 800d0bc:	0018      	movs	r0, r3
 800d0be:	f00b ff43 	bl	8018f48 <memcpy1>
  SeNvmCtxChanged();
 800d0c2:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <SecureElementSetDevEui+0x34>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	b002      	add	sp, #8
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	46c0      	nop			; (mov r8, r8)
 800d0d4:	2000007c 	.word	0x2000007c
 800d0d8:	200007fc 	.word	0x200007fc

0800d0dc <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800d0e0:	4b01      	ldr	r3, [pc, #4]	; (800d0e8 <SecureElementGetDevEui+0xc>)
}
 800d0e2:	0018      	movs	r0, r3
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	2000007c 	.word	0x2000007c

0800d0ec <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	e009      	b.n	800d112 <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	4b06      	ldr	r3, [pc, #24]	; (800d11c <SecureElementSetJoinEui+0x30>)
 800d102:	2208      	movs	r2, #8
 800d104:	0018      	movs	r0, r3
 800d106:	f00b ff1f 	bl	8018f48 <memcpy1>
  SeNvmCtxChanged();
 800d10a:	4b05      	ldr	r3, [pc, #20]	; (800d120 <SecureElementSetJoinEui+0x34>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800d110:	2300      	movs	r3, #0
}
 800d112:	0018      	movs	r0, r3
 800d114:	46bd      	mov	sp, r7
 800d116:	b002      	add	sp, #8
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	46c0      	nop			; (mov r8, r8)
 800d11c:	20000084 	.word	0x20000084
 800d120:	200007fc 	.word	0x200007fc

0800d124 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800d128:	4b01      	ldr	r3, [pc, #4]	; (800d130 <SecureElementGetJoinEui+0xc>)
}
 800d12a:	0018      	movs	r0, r3
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	20000084 	.word	0x20000084

0800d134 <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800d13c:	6879      	ldr	r1, [r7, #4]
 800d13e:	4b17      	ldr	r3, [pc, #92]	; (800d19c <LmHandlerInit+0x68>)
 800d140:	2220      	movs	r2, #32
 800d142:	0018      	movs	r0, r3
 800d144:	f00e febe 	bl	801bec4 <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d148:	4b15      	ldr	r3, [pc, #84]	; (800d1a0 <LmHandlerInit+0x6c>)
 800d14a:	4a16      	ldr	r2, [pc, #88]	; (800d1a4 <LmHandlerInit+0x70>)
 800d14c:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d14e:	4b14      	ldr	r3, [pc, #80]	; (800d1a0 <LmHandlerInit+0x6c>)
 800d150:	4a15      	ldr	r2, [pc, #84]	; (800d1a8 <LmHandlerInit+0x74>)
 800d152:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d154:	4b12      	ldr	r3, [pc, #72]	; (800d1a0 <LmHandlerInit+0x6c>)
 800d156:	4a15      	ldr	r2, [pc, #84]	; (800d1ac <LmHandlerInit+0x78>)
 800d158:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d15a:	4b11      	ldr	r3, [pc, #68]	; (800d1a0 <LmHandlerInit+0x6c>)
 800d15c:	4a14      	ldr	r2, [pc, #80]	; (800d1b0 <LmHandlerInit+0x7c>)
 800d15e:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800d160:	4b0e      	ldr	r3, [pc, #56]	; (800d19c <LmHandlerInit+0x68>)
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	4b13      	ldr	r3, [pc, #76]	; (800d1b4 <LmHandlerInit+0x80>)
 800d166:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800d168:	4b0c      	ldr	r3, [pc, #48]	; (800d19c <LmHandlerInit+0x68>)
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	4b11      	ldr	r3, [pc, #68]	; (800d1b4 <LmHandlerInit+0x80>)
 800d16e:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800d170:	4b10      	ldr	r3, [pc, #64]	; (800d1b4 <LmHandlerInit+0x80>)
 800d172:	4a11      	ldr	r2, [pc, #68]	; (800d1b8 <LmHandlerInit+0x84>)
 800d174:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800d176:	4b09      	ldr	r3, [pc, #36]	; (800d19c <LmHandlerInit+0x68>)
 800d178:	689a      	ldr	r2, [r3, #8]
 800d17a:	4b0e      	ldr	r3, [pc, #56]	; (800d1b4 <LmHandlerInit+0x80>)
 800d17c:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d17e:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <LmHandlerInit+0x88>)
 800d180:	0019      	movs	r1, r3
 800d182:	2000      	movs	r0, #0
 800d184:	f000 fb4a 	bl	800d81c <LmHandlerPackageRegister>
 800d188:	1e03      	subs	r3, r0, #0
 800d18a:	d002      	beq.n	800d192 <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	425b      	negs	r3, r3
 800d190:	e000      	b.n	800d194 <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800d192:	2300      	movs	r3, #0
}
 800d194:	0018      	movs	r0, r3
 800d196:	46bd      	mov	sp, r7
 800d198:	b002      	add	sp, #8
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	20000a20 	.word	0x20000a20
 800d1a0:	20000a40 	.word	0x20000a40
 800d1a4:	0800d989 	.word	0x0800d989
 800d1a8:	0800d9f5 	.word	0x0800d9f5
 800d1ac:	0800dae1 	.word	0x0800dae1
 800d1b0:	0800db89 	.word	0x0800db89
 800d1b4:	20000a50 	.word	0x20000a50
 800d1b8:	0800e327 	.word	0x0800e327
 800d1bc:	20000194 	.word	0x20000194

0800d1c0 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800d1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1c2:	46ce      	mov	lr, r9
 800d1c4:	4647      	mov	r7, r8
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b099      	sub	sp, #100	; 0x64
 800d1ca:	af08      	add	r7, sp, #32
 800d1cc:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d1ce:	6879      	ldr	r1, [r7, #4]
 800d1d0:	4b66      	ldr	r3, [pc, #408]	; (800d36c <LmHandlerConfigure+0x1ac>)
 800d1d2:	2206      	movs	r2, #6
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	f00e fe75 	bl	801bec4 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800d1da:	f7f5 ffb7 	bl	800314c <LoraInfo_GetPtr>
 800d1de:	0003      	movs	r3, r0
 800d1e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d1e2:	4b62      	ldr	r3, [pc, #392]	; (800d36c <LmHandlerConfigure+0x1ac>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	001a      	movs	r2, r3
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	4093      	lsls	r3, r2
 800d1ec:	001a      	movs	r2, r3
 800d1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	d00b      	beq.n	800d20e <LmHandlerConfigure+0x4e>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d1f6:	4b5d      	ldr	r3, [pc, #372]	; (800d36c <LmHandlerConfigure+0x1ac>)
 800d1f8:	781a      	ldrb	r2, [r3, #0]
 800d1fa:	495d      	ldr	r1, [pc, #372]	; (800d370 <LmHandlerConfigure+0x1b0>)
 800d1fc:	4b5d      	ldr	r3, [pc, #372]	; (800d374 <LmHandlerConfigure+0x1b4>)
 800d1fe:	0018      	movs	r0, r3
 800d200:	f004 ffb4 	bl	801216c <LoRaMacInitialization>
 800d204:	1e03      	subs	r3, r0, #0
 800d206:	d009      	beq.n	800d21c <LmHandlerConfigure+0x5c>
    {
      return LORAMAC_HANDLER_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	425b      	negs	r3, r3
 800d20c:	e0a7      	b.n	800d35e <LmHandlerConfigure+0x19e>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d20e:	4b5a      	ldr	r3, [pc, #360]	; (800d378 <LmHandlerConfigure+0x1b8>)
 800d210:	2201      	movs	r2, #1
 800d212:	2100      	movs	r1, #0
 800d214:	2000      	movs	r0, #0
 800d216:	f00e fad5 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800d21a:	e7fe      	b.n	800d21a <LmHandlerConfigure+0x5a>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800d21c:	f001 f893 	bl	800e346 <NvmCtxMgmtRestore>
 800d220:	1e03      	subs	r3, r0, #0
 800d222:	d103      	bne.n	800d22c <LmHandlerConfigure+0x6c>
  {
    CtxRestoreDone = true;
 800d224:	4b55      	ldr	r3, [pc, #340]	; (800d37c <LmHandlerConfigure+0x1bc>)
 800d226:	2201      	movs	r2, #1
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	e021      	b.n	800d270 <LmHandlerConfigure+0xb0>
  }
  else
  {
    CtxRestoreDone = false;
 800d22c:	4b53      	ldr	r3, [pc, #332]	; (800d37c <LmHandlerConfigure+0x1bc>)
 800d22e:	2200      	movs	r2, #0
 800d230:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800d232:	2418      	movs	r4, #24
 800d234:	193b      	adds	r3, r7, r4
 800d236:	2202      	movs	r2, #2
 800d238:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800d23a:	193b      	adds	r3, r7, r4
 800d23c:	0018      	movs	r0, r3
 800d23e:	f005 fbf7 	bl	8012a30 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800d242:	193b      	adds	r3, r7, r4
 800d244:	6859      	ldr	r1, [r3, #4]
 800d246:	4b4e      	ldr	r3, [pc, #312]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d248:	2208      	movs	r2, #8
 800d24a:	0018      	movs	r0, r3
 800d24c:	f00b fe7c 	bl	8018f48 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d250:	0021      	movs	r1, r4
 800d252:	187b      	adds	r3, r7, r1
 800d254:	2203      	movs	r2, #3
 800d256:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800d258:	000c      	movs	r4, r1
 800d25a:	187b      	adds	r3, r7, r1
 800d25c:	0018      	movs	r0, r3
 800d25e:	f005 fbe7 	bl	8012a30 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800d262:	193b      	adds	r3, r7, r4
 800d264:	6859      	ldr	r1, [r3, #4]
 800d266:	4b47      	ldr	r3, [pc, #284]	; (800d384 <LmHandlerConfigure+0x1c4>)
 800d268:	2208      	movs	r2, #8
 800d26a:	0018      	movs	r0, r3
 800d26c:	f00b fe6c 	bl	8018f48 <memcpy1>
  }
  MW_LOG(TS_OFF, VLEVEL_M, "# DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800d270:	4b43      	ldr	r3, [pc, #268]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	001a      	movs	r2, r3
 800d276:	4b42      	ldr	r3, [pc, #264]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d278:	785b      	ldrb	r3, [r3, #1]
 800d27a:	0019      	movs	r1, r3
 800d27c:	4b40      	ldr	r3, [pc, #256]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d27e:	789b      	ldrb	r3, [r3, #2]
 800d280:	0018      	movs	r0, r3
 800d282:	4b3f      	ldr	r3, [pc, #252]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d284:	78db      	ldrb	r3, [r3, #3]
 800d286:	001c      	movs	r4, r3
 800d288:	4b3d      	ldr	r3, [pc, #244]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d28a:	791b      	ldrb	r3, [r3, #4]
 800d28c:	001d      	movs	r5, r3
 800d28e:	4b3c      	ldr	r3, [pc, #240]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d290:	795b      	ldrb	r3, [r3, #5]
 800d292:	001e      	movs	r6, r3
 800d294:	4b3a      	ldr	r3, [pc, #232]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d296:	799b      	ldrb	r3, [r3, #6]
 800d298:	469c      	mov	ip, r3
 800d29a:	4b39      	ldr	r3, [pc, #228]	; (800d380 <LmHandlerConfigure+0x1c0>)
 800d29c:	79db      	ldrb	r3, [r3, #7]
 800d29e:	4698      	mov	r8, r3
 800d2a0:	4b39      	ldr	r3, [pc, #228]	; (800d388 <LmHandlerConfigure+0x1c8>)
 800d2a2:	4699      	mov	r9, r3
 800d2a4:	4643      	mov	r3, r8
 800d2a6:	9307      	str	r3, [sp, #28]
 800d2a8:	4663      	mov	r3, ip
 800d2aa:	9306      	str	r3, [sp, #24]
 800d2ac:	9605      	str	r6, [sp, #20]
 800d2ae:	9504      	str	r5, [sp, #16]
 800d2b0:	9403      	str	r4, [sp, #12]
 800d2b2:	9002      	str	r0, [sp, #8]
 800d2b4:	9101      	str	r1, [sp, #4]
 800d2b6:	9200      	str	r2, [sp, #0]
 800d2b8:	464b      	mov	r3, r9
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	2100      	movs	r1, #0
 800d2be:	2002      	movs	r0, #2
 800d2c0:	f00e fa80 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "## KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800d2c4:	2118      	movs	r1, #24
 800d2c6:	187b      	adds	r3, r7, r1
 800d2c8:	2214      	movs	r2, #20
 800d2ca:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d2cc:	187b      	adds	r3, r7, r1
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d2d2:	000c      	movs	r4, r1
 800d2d4:	187b      	adds	r3, r7, r1
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	f005 fd08 	bl	8012cec <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800d2dc:	0021      	movs	r1, r4
 800d2de:	187b      	adds	r3, r7, r1
 800d2e0:	2215      	movs	r2, #21
 800d2e2:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d2e4:	187b      	adds	r3, r7, r1
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d2ea:	000c      	movs	r4, r1
 800d2ec:	187b      	adds	r3, r7, r1
 800d2ee:	0018      	movs	r0, r3
 800d2f0:	f005 fcfc 	bl	8012cec <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800d2f4:	0021      	movs	r1, r4
 800d2f6:	187b      	adds	r3, r7, r1
 800d2f8:	2204      	movs	r2, #4
 800d2fa:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d2fc:	4b1b      	ldr	r3, [pc, #108]	; (800d36c <LmHandlerConfigure+0x1ac>)
 800d2fe:	789a      	ldrb	r2, [r3, #2]
 800d300:	187b      	adds	r3, r7, r1
 800d302:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d304:	000c      	movs	r4, r1
 800d306:	187b      	adds	r3, r7, r1
 800d308:	0018      	movs	r0, r3
 800d30a:	f005 fcef 	bl	8012cec <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d30e:	0021      	movs	r1, r4
 800d310:	187b      	adds	r3, r7, r1
 800d312:	2227      	movs	r2, #39	; 0x27
 800d314:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800d316:	187b      	adds	r3, r7, r1
 800d318:	2214      	movs	r2, #20
 800d31a:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d31c:	187b      	adds	r3, r7, r1
 800d31e:	0018      	movs	r0, r3
 800d320:	f005 fce4 	bl	8012cec <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800d324:	2110      	movs	r1, #16
 800d326:	187b      	adds	r3, r7, r1
 800d328:	220f      	movs	r2, #15
 800d32a:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800d32c:	4b0f      	ldr	r3, [pc, #60]	; (800d36c <LmHandlerConfigure+0x1ac>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	187a      	adds	r2, r7, r1
 800d332:	0011      	movs	r1, r2
 800d334:	0018      	movs	r0, r3
 800d336:	f009 f984 	bl	8016642 <RegionGetPhyParam>
 800d33a:	0003      	movs	r3, r0
 800d33c:	001a      	movs	r2, r3
 800d33e:	210c      	movs	r1, #12
 800d340:	187b      	adds	r3, r7, r1
 800d342:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d344:	187b      	adds	r3, r7, r1
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	1e5a      	subs	r2, r3, #1
 800d34a:	4193      	sbcs	r3, r2
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	4b07      	ldr	r3, [pc, #28]	; (800d36c <LmHandlerConfigure+0x1ac>)
 800d350:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800d352:	4b06      	ldr	r3, [pc, #24]	; (800d36c <LmHandlerConfigure+0x1ac>)
 800d354:	791b      	ldrb	r3, [r3, #4]
 800d356:	0018      	movs	r0, r3
 800d358:	f006 fb5c 	bl	8013a14 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	0018      	movs	r0, r3
 800d360:	46bd      	mov	sp, r7
 800d362:	b011      	add	sp, #68	; 0x44
 800d364:	bcc0      	pop	{r6, r7}
 800d366:	46b9      	mov	r9, r7
 800d368:	46b0      	mov	r8, r6
 800d36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d36c:	20000a18 	.word	0x20000a18
 800d370:	20000a50 	.word	0x20000a50
 800d374:	20000a40 	.word	0x20000a40
 800d378:	0801e654 	.word	0x0801e654
 800d37c:	20000b6a 	.word	0x20000b6a
 800d380:	2000017c 	.word	0x2000017c
 800d384:	20000184 	.word	0x20000184
 800d388:	0801e6a0 	.word	0x0801e6a0

0800d38c <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800d392:	f004 fea5 	bl	80120e0 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800d396:	1dfb      	adds	r3, r7, #7
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]
 800d39c:	e027      	b.n	800d3ee <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800d39e:	1dfb      	adds	r3, r7, #7
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	569a      	ldrsb	r2, [r3, r2]
 800d3a4:	4b17      	ldr	r3, [pc, #92]	; (800d404 <LmHandlerProcess+0x78>)
 800d3a6:	0092      	lsls	r2, r2, #2
 800d3a8:	58d3      	ldr	r3, [r2, r3]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d017      	beq.n	800d3de <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800d3ae:	1dfb      	adds	r3, r7, #7
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	569a      	ldrsb	r2, [r3, r2]
 800d3b4:	4b13      	ldr	r3, [pc, #76]	; (800d404 <LmHandlerProcess+0x78>)
 800d3b6:	0092      	lsls	r2, r2, #2
 800d3b8:	58d3      	ldr	r3, [r2, r3]
 800d3ba:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00e      	beq.n	800d3de <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800d3c0:	1dfb      	adds	r3, r7, #7
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	f000 fbf1 	bl	800dbac <LmHandlerPackageIsInitialized>
 800d3ca:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800d3cc:	d007      	beq.n	800d3de <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800d3ce:	1dfb      	adds	r3, r7, #7
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	569a      	ldrsb	r2, [r3, r2]
 800d3d4:	4b0b      	ldr	r3, [pc, #44]	; (800d404 <LmHandlerProcess+0x78>)
 800d3d6:	0092      	lsls	r2, r2, #2
 800d3d8:	58d3      	ldr	r3, [r2, r3]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800d3de:	1dfb      	adds	r3, r7, #7
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	b25b      	sxtb	r3, r3
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	1dfb      	adds	r3, r7, #7
 800d3ec:	701a      	strb	r2, [r3, #0]
 800d3ee:	1dfb      	adds	r3, r7, #7
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	b25b      	sxtb	r3, r3
 800d3f4:	2b04      	cmp	r3, #4
 800d3f6:	ddd2      	ble.n	800d39e <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800d3f8:	f000 ff9f 	bl	800e33a <NvmCtxMgmtStore>
}
 800d3fc:	46c0      	nop			; (mov r8, r8)
 800d3fe:	46bd      	mov	sp, r7
 800d400:	b002      	add	sp, #8
 800d402:	bd80      	pop	{r7, pc}
 800d404:	20000a04 	.word	0x20000a04

0800d408 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800d408:	b5b0      	push	{r4, r5, r7, lr}
 800d40a:	b08a      	sub	sp, #40	; 0x28
 800d40c:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d40e:	003b      	movs	r3, r7
 800d410:	2201      	movs	r2, #1
 800d412:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800d414:	2527      	movs	r5, #39	; 0x27
 800d416:	197c      	adds	r4, r7, r5
 800d418:	003b      	movs	r3, r7
 800d41a:	0018      	movs	r0, r3
 800d41c:	f005 fb08 	bl	8012a30 <LoRaMacMibGetRequestConfirm>
 800d420:	0003      	movs	r3, r0
 800d422:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800d424:	197b      	adds	r3, r7, r5
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d107      	bne.n	800d43c <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800d42c:	003b      	movs	r3, r7
 800d42e:	791b      	ldrb	r3, [r3, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800d434:	2300      	movs	r3, #0
 800d436:	e002      	b.n	800d43e <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800d438:	2301      	movs	r3, #1
 800d43a:	e000      	b.n	800d43e <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800d43c:	2300      	movs	r3, #0
  }
}
 800d43e:	0018      	movs	r0, r3
 800d440:	46bd      	mov	sp, r7
 800d442:	b00a      	add	sp, #40	; 0x28
 800d444:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d448 <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800d448:	b590      	push	{r4, r7, lr}
 800d44a:	b093      	sub	sp, #76	; 0x4c
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	0002      	movs	r2, r0
 800d450:	1dfb      	adds	r3, r7, #7
 800d452:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800d454:	1dfb      	adds	r3, r7, #7
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d113      	bne.n	800d484 <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d45c:	4b37      	ldr	r3, [pc, #220]	; (800d53c <LmHandlerJoin+0xf4>)
 800d45e:	2202      	movs	r2, #2
 800d460:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800d462:	f005 fa2b 	bl	80128bc <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800d466:	2108      	movs	r1, #8
 800d468:	187b      	adds	r3, r7, r1
 800d46a:	2201      	movs	r2, #1
 800d46c:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d46e:	4b34      	ldr	r3, [pc, #208]	; (800d540 <LmHandlerJoin+0xf8>)
 800d470:	78db      	ldrb	r3, [r3, #3]
 800d472:	b25b      	sxtb	r3, r3
 800d474:	b2da      	uxtb	r2, r3
 800d476:	187b      	adds	r3, r7, r1
 800d478:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800d47a:	187b      	adds	r3, r7, r1
 800d47c:	0018      	movs	r0, r3
 800d47e:	f006 f823 	bl	80134c8 <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800d482:	e057      	b.n	800d534 <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d484:	4b2d      	ldr	r3, [pc, #180]	; (800d53c <LmHandlerJoin+0xf4>)
 800d486:	2201      	movs	r2, #1
 800d488:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d48a:	4b2c      	ldr	r3, [pc, #176]	; (800d53c <LmHandlerJoin+0xf4>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800d490:	4b2c      	ldr	r3, [pc, #176]	; (800d544 <LmHandlerJoin+0xfc>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2201      	movs	r2, #1
 800d496:	4053      	eors	r3, r2
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d033      	beq.n	800d506 <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d49e:	211c      	movs	r1, #28
 800d4a0:	187b      	adds	r3, r7, r1
 800d4a2:	222c      	movs	r2, #44	; 0x2c
 800d4a4:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d4a6:	187b      	adds	r3, r7, r1
 800d4a8:	4a27      	ldr	r2, [pc, #156]	; (800d548 <LmHandlerJoin+0x100>)
 800d4aa:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d4ac:	000c      	movs	r4, r1
 800d4ae:	187b      	adds	r3, r7, r1
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	f005 fc1b 	bl	8012cec <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800d4b6:	0021      	movs	r1, r4
 800d4b8:	187b      	adds	r3, r7, r1
 800d4ba:	2205      	movs	r2, #5
 800d4bc:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800d4be:	4b23      	ldr	r3, [pc, #140]	; (800d54c <LmHandlerJoin+0x104>)
 800d4c0:	691a      	ldr	r2, [r3, #16]
 800d4c2:	187b      	adds	r3, r7, r1
 800d4c4:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d4c6:	000c      	movs	r4, r1
 800d4c8:	187b      	adds	r3, r7, r1
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	f005 fc0e 	bl	8012cec <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800d4d0:	f7f6 ffe1 	bl	8004496 <GetDevAddr>
 800d4d4:	0002      	movs	r2, r0
 800d4d6:	4b1d      	ldr	r3, [pc, #116]	; (800d54c <LmHandlerJoin+0x104>)
 800d4d8:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800d4da:	0021      	movs	r1, r4
 800d4dc:	187b      	adds	r3, r7, r1
 800d4de:	2206      	movs	r2, #6
 800d4e0:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d4e2:	4b1a      	ldr	r3, [pc, #104]	; (800d54c <LmHandlerJoin+0x104>)
 800d4e4:	695a      	ldr	r2, [r3, #20]
 800d4e6:	187b      	adds	r3, r7, r1
 800d4e8:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d4ea:	187b      	adds	r3, r7, r1
 800d4ec:	0018      	movs	r0, r3
 800d4ee:	f005 fbfd 	bl	8012cec <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "# DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800d4f2:	4b16      	ldr	r3, [pc, #88]	; (800d54c <LmHandlerJoin+0x104>)
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	4a16      	ldr	r2, [pc, #88]	; (800d550 <LmHandlerJoin+0x108>)
 800d4f8:	9300      	str	r3, [sp, #0]
 800d4fa:	0013      	movs	r3, r2
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	2100      	movs	r1, #0
 800d500:	2002      	movs	r0, #2
 800d502:	f00e f95f 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800d506:	f005 f9d9 	bl	80128bc <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d50a:	211c      	movs	r1, #28
 800d50c:	187b      	adds	r3, r7, r1
 800d50e:	2201      	movs	r2, #1
 800d510:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d512:	187b      	adds	r3, r7, r1
 800d514:	2201      	movs	r2, #1
 800d516:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d518:	187b      	adds	r3, r7, r1
 800d51a:	0018      	movs	r0, r3
 800d51c:	f005 fbe6 	bl	8012cec <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800d520:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <LmHandlerJoin+0x10c>)
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	4a05      	ldr	r2, [pc, #20]	; (800d53c <LmHandlerJoin+0xf4>)
 800d526:	0010      	movs	r0, r2
 800d528:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d52a:	4b05      	ldr	r3, [pc, #20]	; (800d540 <LmHandlerJoin+0xf8>)
 800d52c:	785b      	ldrb	r3, [r3, #1]
 800d52e:	0018      	movs	r0, r3
 800d530:	f000 f8e4 	bl	800d6fc <LmHandlerRequestClass>
}
 800d534:	46c0      	nop			; (mov r8, r8)
 800d536:	46bd      	mov	sp, r7
 800d538:	b011      	add	sp, #68	; 0x44
 800d53a:	bd90      	pop	{r4, r7, pc}
 800d53c:	200001a0 	.word	0x200001a0
 800d540:	20000a18 	.word	0x20000a18
 800d544:	20000b6a 	.word	0x20000b6a
 800d548:	01000300 	.word	0x01000300
 800d54c:	2000017c 	.word	0x2000017c
 800d550:	0801e6d8 	.word	0x0801e6d8
 800d554:	20000a20 	.word	0x20000a20

0800d558 <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800d558:	b5b0      	push	{r4, r5, r7, lr}
 800d55a:	b08c      	sub	sp, #48	; 0x30
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	0008      	movs	r0, r1
 800d562:	607a      	str	r2, [r7, #4]
 800d564:	0019      	movs	r1, r3
 800d566:	230b      	movs	r3, #11
 800d568:	18fb      	adds	r3, r7, r3
 800d56a:	1c02      	adds	r2, r0, #0
 800d56c:	701a      	strb	r2, [r3, #0]
 800d56e:	230a      	movs	r3, #10
 800d570:	18fb      	adds	r3, r7, r3
 800d572:	1c0a      	adds	r2, r1, #0
 800d574:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d576:	232f      	movs	r3, #47	; 0x2f
 800d578:	18fb      	adds	r3, r7, r3
 800d57a:	22ff      	movs	r2, #255	; 0xff
 800d57c:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800d57e:	f004 fd97 	bl	80120b0 <LoRaMacIsBusy>
 800d582:	1e03      	subs	r3, r0, #0
 800d584:	d002      	beq.n	800d58c <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800d586:	2302      	movs	r3, #2
 800d588:	425b      	negs	r3, r3
 800d58a:	e0a9      	b.n	800d6e0 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d58c:	f7ff ff3c 	bl	800d408 <LmHandlerJoinStatus>
 800d590:	0003      	movs	r3, r0
 800d592:	2b01      	cmp	r3, #1
 800d594:	d007      	beq.n	800d5a6 <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800d596:	4b54      	ldr	r3, [pc, #336]	; (800d6e8 <LmHandlerSend+0x190>)
 800d598:	789b      	ldrb	r3, [r3, #2]
 800d59a:	0018      	movs	r0, r3
 800d59c:	f7ff ff54 	bl	800d448 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d5a0:	2303      	movs	r3, #3
 800d5a2:	425b      	negs	r3, r3
 800d5a4:	e09c      	b.n	800d6e0 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800d5a6:	4b51      	ldr	r3, [pc, #324]	; (800d6ec <LmHandlerSend+0x194>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	4798      	blx	r3
 800d5ae:	1e03      	subs	r3, r0, #0
 800d5b0:	d00d      	beq.n	800d5ce <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	781a      	ldrb	r2, [r3, #0]
 800d5b6:	4b4d      	ldr	r3, [pc, #308]	; (800d6ec <LmHandlerSend+0x194>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d006      	beq.n	800d5ce <LmHandlerSend+0x76>
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d002      	beq.n	800d5ce <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800d5c8:	2304      	movs	r3, #4
 800d5ca:	425b      	negs	r3, r3
 800d5cc:	e088      	b.n	800d6e0 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d5ce:	4b48      	ldr	r3, [pc, #288]	; (800d6f0 <LmHandlerSend+0x198>)
 800d5d0:	2203      	movs	r2, #3
 800d5d2:	569a      	ldrsb	r2, [r3, r2]
 800d5d4:	2418      	movs	r4, #24
 800d5d6:	193b      	adds	r3, r7, r4
 800d5d8:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	785b      	ldrb	r3, [r3, #1]
 800d5de:	2214      	movs	r2, #20
 800d5e0:	18ba      	adds	r2, r7, r2
 800d5e2:	0011      	movs	r1, r2
 800d5e4:	0018      	movs	r0, r3
 800d5e6:	f005 f977 	bl	80128d8 <LoRaMacQueryTxPossible>
 800d5ea:	1e03      	subs	r3, r0, #0
 800d5ec:	d00c      	beq.n	800d608 <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d5ee:	4b41      	ldr	r3, [pc, #260]	; (800d6f4 <LmHandlerSend+0x19c>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800d5f4:	193b      	adds	r3, r7, r4
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d5fa:	193b      	adds	r3, r7, r4
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d600:	193b      	adds	r3, r7, r4
 800d602:	2200      	movs	r2, #0
 800d604:	819a      	strh	r2, [r3, #12]
 800d606:	e021      	b.n	800d64c <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800d608:	4b3a      	ldr	r3, [pc, #232]	; (800d6f4 <LmHandlerSend+0x19c>)
 800d60a:	200b      	movs	r0, #11
 800d60c:	183a      	adds	r2, r7, r0
 800d60e:	7812      	ldrb	r2, [r2, #0]
 800d610:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	781a      	ldrb	r2, [r3, #0]
 800d616:	2118      	movs	r1, #24
 800d618:	187b      	adds	r3, r7, r1
 800d61a:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	785b      	ldrb	r3, [r3, #1]
 800d620:	b29a      	uxth	r2, r3
 800d622:	187b      	adds	r3, r7, r1
 800d624:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	187b      	adds	r3, r7, r1
 800d62c:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800d62e:	183b      	adds	r3, r7, r0
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d103      	bne.n	800d63e <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800d636:	187b      	adds	r3, r7, r1
 800d638:	2200      	movs	r2, #0
 800d63a:	701a      	strb	r2, [r3, #0]
 800d63c:	e006      	b.n	800d64c <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800d63e:	2118      	movs	r1, #24
 800d640:	187b      	adds	r3, r7, r1
 800d642:	2201      	movs	r2, #1
 800d644:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800d646:	187b      	adds	r3, r7, r1
 800d648:	2208      	movs	r2, #8
 800d64a:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800d64c:	4b29      	ldr	r3, [pc, #164]	; (800d6f4 <LmHandlerSend+0x19c>)
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	330c      	adds	r3, #12
 800d652:	ca03      	ldmia	r2!, {r0, r1}
 800d654:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d656:	4b26      	ldr	r3, [pc, #152]	; (800d6f0 <LmHandlerSend+0x198>)
 800d658:	2203      	movs	r2, #3
 800d65a:	569a      	ldrsb	r2, [r3, r2]
 800d65c:	4b25      	ldr	r3, [pc, #148]	; (800d6f4 <LmHandlerSend+0x19c>)
 800d65e:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d660:	232e      	movs	r3, #46	; 0x2e
 800d662:	18fc      	adds	r4, r7, r3
 800d664:	230a      	movs	r3, #10
 800d666:	18fb      	adds	r3, r7, r3
 800d668:	781a      	ldrb	r2, [r3, #0]
 800d66a:	2518      	movs	r5, #24
 800d66c:	197b      	adds	r3, r7, r5
 800d66e:	0011      	movs	r1, r2
 800d670:	0018      	movs	r0, r3
 800d672:	f006 f881 	bl	8013778 <LoRaMacMcpsRequest>
 800d676:	0003      	movs	r3, r0
 800d678:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d003      	beq.n	800d688 <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d680:	197b      	adds	r3, r7, r5
 800d682:	691a      	ldr	r2, [r3, #16]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800d688:	232e      	movs	r3, #46	; 0x2e
 800d68a:	18fb      	adds	r3, r7, r3
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b11      	cmp	r3, #17
 800d690:	d81d      	bhi.n	800d6ce <LmHandlerSend+0x176>
 800d692:	009a      	lsls	r2, r3, #2
 800d694:	4b18      	ldr	r3, [pc, #96]	; (800d6f8 <LmHandlerSend+0x1a0>)
 800d696:	18d3      	adds	r3, r2, r3
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d69c:	232f      	movs	r3, #47	; 0x2f
 800d69e:	18fb      	adds	r3, r7, r3
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	701a      	strb	r2, [r3, #0]
    break;
 800d6a4:	e018      	b.n	800d6d8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d6a6:	232f      	movs	r3, #47	; 0x2f
 800d6a8:	18fb      	adds	r3, r7, r3
 800d6aa:	22fe      	movs	r2, #254	; 0xfe
 800d6ac:	701a      	strb	r2, [r3, #0]
    break;
 800d6ae:	e013      	b.n	800d6d8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d6b0:	232f      	movs	r3, #47	; 0x2f
 800d6b2:	18fb      	adds	r3, r7, r3
 800d6b4:	22fd      	movs	r2, #253	; 0xfd
 800d6b6:	701a      	strb	r2, [r3, #0]
    break;
 800d6b8:	e00e      	b.n	800d6d8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d6ba:	232f      	movs	r3, #47	; 0x2f
 800d6bc:	18fb      	adds	r3, r7, r3
 800d6be:	22fb      	movs	r2, #251	; 0xfb
 800d6c0:	701a      	strb	r2, [r3, #0]
    break;
 800d6c2:	e009      	b.n	800d6d8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d6c4:	232f      	movs	r3, #47	; 0x2f
 800d6c6:	18fb      	adds	r3, r7, r3
 800d6c8:	22fa      	movs	r2, #250	; 0xfa
 800d6ca:	701a      	strb	r2, [r3, #0]
    break;
 800d6cc:	e004      	b.n	800d6d8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800d6ce:	232f      	movs	r3, #47	; 0x2f
 800d6d0:	18fb      	adds	r3, r7, r3
 800d6d2:	22ff      	movs	r2, #255	; 0xff
 800d6d4:	701a      	strb	r2, [r3, #0]
    break;
 800d6d6:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800d6d8:	232f      	movs	r3, #47	; 0x2f
 800d6da:	18fb      	adds	r3, r7, r3
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	b25b      	sxtb	r3, r3
}
 800d6e0:	0018      	movs	r0, r3
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	b00c      	add	sp, #48	; 0x30
 800d6e6:	bdb0      	pop	{r4, r5, r7, pc}
 800d6e8:	200001a0 	.word	0x200001a0
 800d6ec:	20000a04 	.word	0x20000a04
 800d6f0:	20000a18 	.word	0x20000a18
 800d6f4:	20000a60 	.word	0x20000a60
 800d6f8:	0801e6ec 	.word	0x0801e6ec

0800d6fc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08c      	sub	sp, #48	; 0x30
 800d700:	af00      	add	r7, sp, #0
 800d702:	0002      	movs	r2, r0
 800d704:	1dfb      	adds	r3, r7, #7
 800d706:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d708:	232f      	movs	r3, #47	; 0x2f
 800d70a:	18fb      	adds	r3, r7, r3
 800d70c:	2200      	movs	r2, #0
 800d70e:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d710:	f7ff fe7a 	bl	800d408 <LmHandlerJoinStatus>
 800d714:	0003      	movs	r3, r0
 800d716:	2b01      	cmp	r3, #1
 800d718:	d002      	beq.n	800d720 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d71a:	2303      	movs	r3, #3
 800d71c:	425b      	negs	r3, r3
 800d71e:	e077      	b.n	800d810 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800d720:	2108      	movs	r1, #8
 800d722:	187b      	adds	r3, r7, r1
 800d724:	2200      	movs	r2, #0
 800d726:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800d728:	187b      	adds	r3, r7, r1
 800d72a:	0018      	movs	r0, r3
 800d72c:	f005 f980 	bl	8012a30 <LoRaMacMibGetRequestConfirm>
 800d730:	1e03      	subs	r3, r0, #0
 800d732:	d002      	beq.n	800d73a <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	425b      	negs	r3, r3
 800d738:	e06a      	b.n	800d810 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800d73a:	212e      	movs	r1, #46	; 0x2e
 800d73c:	187b      	adds	r3, r7, r1
 800d73e:	2208      	movs	r2, #8
 800d740:	18ba      	adds	r2, r7, r2
 800d742:	7912      	ldrb	r2, [r2, #4]
 800d744:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800d746:	187a      	adds	r2, r7, r1
 800d748:	1dfb      	adds	r3, r7, #7
 800d74a:	7812      	ldrb	r2, [r2, #0]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d053      	beq.n	800d7fa <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800d752:	1dfb      	adds	r3, r7, #7
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	2b02      	cmp	r3, #2
 800d758:	d02a      	beq.n	800d7b0 <LmHandlerRequestClass+0xb4>
 800d75a:	dc50      	bgt.n	800d7fe <LmHandlerRequestClass+0x102>
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <LmHandlerRequestClass+0x6a>
 800d760:	2b01      	cmp	r3, #1
 800d762:	d020      	beq.n	800d7a6 <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800d764:	e04b      	b.n	800d7fe <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800d766:	232e      	movs	r3, #46	; 0x2e
 800d768:	18fb      	adds	r3, r7, r3
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d048      	beq.n	800d802 <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800d770:	2108      	movs	r1, #8
 800d772:	187b      	adds	r3, r7, r1
 800d774:	2200      	movs	r2, #0
 800d776:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800d778:	187b      	adds	r3, r7, r1
 800d77a:	0018      	movs	r0, r3
 800d77c:	f005 fab6 	bl	8012cec <LoRaMacMibSetRequestConfirm>
 800d780:	1e03      	subs	r3, r0, #0
 800d782:	d10b      	bne.n	800d79c <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800d784:	2000      	movs	r0, #0
 800d786:	f000 fac9 	bl	800dd1c <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800d78a:	4b23      	ldr	r3, [pc, #140]	; (800d818 <LmHandlerRequestClass+0x11c>)
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d037      	beq.n	800d802 <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800d792:	4b21      	ldr	r3, [pc, #132]	; (800d818 <LmHandlerRequestClass+0x11c>)
 800d794:	699b      	ldr	r3, [r3, #24]
 800d796:	2000      	movs	r0, #0
 800d798:	4798      	blx	r3
      break;
 800d79a:	e032      	b.n	800d802 <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800d79c:	232f      	movs	r3, #47	; 0x2f
 800d79e:	18fb      	adds	r3, r7, r3
 800d7a0:	22ff      	movs	r2, #255	; 0xff
 800d7a2:	701a      	strb	r2, [r3, #0]
      break;
 800d7a4:	e02d      	b.n	800d802 <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800d7a6:	232f      	movs	r3, #47	; 0x2f
 800d7a8:	18fb      	adds	r3, r7, r3
 800d7aa:	22ff      	movs	r2, #255	; 0xff
 800d7ac:	701a      	strb	r2, [r3, #0]
      break;
 800d7ae:	e02b      	b.n	800d808 <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800d7b0:	232e      	movs	r3, #46	; 0x2e
 800d7b2:	18fb      	adds	r3, r7, r3
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d004      	beq.n	800d7c4 <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800d7ba:	232f      	movs	r3, #47	; 0x2f
 800d7bc:	18fb      	adds	r3, r7, r3
 800d7be:	22ff      	movs	r2, #255	; 0xff
 800d7c0:	701a      	strb	r2, [r3, #0]
      break;
 800d7c2:	e020      	b.n	800d806 <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800d7c4:	2108      	movs	r1, #8
 800d7c6:	187b      	adds	r3, r7, r1
 800d7c8:	2202      	movs	r2, #2
 800d7ca:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800d7cc:	187b      	adds	r3, r7, r1
 800d7ce:	0018      	movs	r0, r3
 800d7d0:	f005 fa8c 	bl	8012cec <LoRaMacMibSetRequestConfirm>
 800d7d4:	1e03      	subs	r3, r0, #0
 800d7d6:	d10b      	bne.n	800d7f0 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800d7d8:	2002      	movs	r0, #2
 800d7da:	f000 fa9f 	bl	800dd1c <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800d7de:	4b0e      	ldr	r3, [pc, #56]	; (800d818 <LmHandlerRequestClass+0x11c>)
 800d7e0:	699b      	ldr	r3, [r3, #24]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00f      	beq.n	800d806 <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800d7e6:	4b0c      	ldr	r3, [pc, #48]	; (800d818 <LmHandlerRequestClass+0x11c>)
 800d7e8:	699b      	ldr	r3, [r3, #24]
 800d7ea:	2002      	movs	r0, #2
 800d7ec:	4798      	blx	r3
      break;
 800d7ee:	e00a      	b.n	800d806 <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800d7f0:	232f      	movs	r3, #47	; 0x2f
 800d7f2:	18fb      	adds	r3, r7, r3
 800d7f4:	22ff      	movs	r2, #255	; 0xff
 800d7f6:	701a      	strb	r2, [r3, #0]
      break;
 800d7f8:	e005      	b.n	800d806 <LmHandlerRequestClass+0x10a>
    }
  }
 800d7fa:	46c0      	nop			; (mov r8, r8)
 800d7fc:	e004      	b.n	800d808 <LmHandlerRequestClass+0x10c>
        break;
 800d7fe:	46c0      	nop			; (mov r8, r8)
 800d800:	e002      	b.n	800d808 <LmHandlerRequestClass+0x10c>
      break;
 800d802:	46c0      	nop			; (mov r8, r8)
 800d804:	e000      	b.n	800d808 <LmHandlerRequestClass+0x10c>
      break;
 800d806:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800d808:	232f      	movs	r3, #47	; 0x2f
 800d80a:	18fb      	adds	r3, r7, r3
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	b25b      	sxtb	r3, r3
}
 800d810:	0018      	movs	r0, r3
 800d812:	46bd      	mov	sp, r7
 800d814:	b00c      	add	sp, #48	; 0x30
 800d816:	bd80      	pop	{r7, pc}
 800d818:	20000a20 	.word	0x20000a20

0800d81c <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800d81c:	b590      	push	{r4, r7, lr}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	0002      	movs	r2, r0
 800d824:	6039      	str	r1, [r7, #0]
 800d826:	1dfb      	adds	r3, r7, #7
 800d828:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	60fb      	str	r3, [r7, #12]
  switch (id)
 800d82e:	1dfb      	adds	r3, r7, #7
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d104      	bne.n	800d840 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800d836:	f000 fa8b 	bl	800dd50 <LmphCompliancePackageFactory>
 800d83a:	0003      	movs	r3, r0
 800d83c:	60fb      	str	r3, [r7, #12]
      break;
 800d83e:	e000      	b.n	800d842 <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800d840:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d028      	beq.n	800d89a <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800d848:	1dfb      	adds	r3, r7, #7
 800d84a:	781a      	ldrb	r2, [r3, #0]
 800d84c:	4b16      	ldr	r3, [pc, #88]	; (800d8a8 <LmHandlerPackageRegister+0x8c>)
 800d84e:	0092      	lsls	r2, r2, #2
 800d850:	68f9      	ldr	r1, [r7, #12]
 800d852:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d854:	1dfb      	adds	r3, r7, #7
 800d856:	781a      	ldrb	r2, [r3, #0]
 800d858:	4b13      	ldr	r3, [pc, #76]	; (800d8a8 <LmHandlerPackageRegister+0x8c>)
 800d85a:	0092      	lsls	r2, r2, #2
 800d85c:	58d3      	ldr	r3, [r2, r3]
 800d85e:	4a13      	ldr	r2, [pc, #76]	; (800d8ac <LmHandlerPackageRegister+0x90>)
 800d860:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800d862:	1dfb      	adds	r3, r7, #7
 800d864:	781a      	ldrb	r2, [r3, #0]
 800d866:	4b10      	ldr	r3, [pc, #64]	; (800d8a8 <LmHandlerPackageRegister+0x8c>)
 800d868:	0092      	lsls	r2, r2, #2
 800d86a:	58d3      	ldr	r3, [r2, r3]
 800d86c:	4a10      	ldr	r2, [pc, #64]	; (800d8b0 <LmHandlerPackageRegister+0x94>)
 800d86e:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d870:	1dfb      	adds	r3, r7, #7
 800d872:	781a      	ldrb	r2, [r3, #0]
 800d874:	4b0c      	ldr	r3, [pc, #48]	; (800d8a8 <LmHandlerPackageRegister+0x8c>)
 800d876:	0092      	lsls	r2, r2, #2
 800d878:	58d3      	ldr	r3, [r2, r3]
 800d87a:	4a0e      	ldr	r2, [pc, #56]	; (800d8b4 <LmHandlerPackageRegister+0x98>)
 800d87c:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800d87e:	1dfb      	adds	r3, r7, #7
 800d880:	781a      	ldrb	r2, [r3, #0]
 800d882:	4b09      	ldr	r3, [pc, #36]	; (800d8a8 <LmHandlerPackageRegister+0x8c>)
 800d884:	0092      	lsls	r2, r2, #2
 800d886:	58d3      	ldr	r3, [r2, r3]
 800d888:	685c      	ldr	r4, [r3, #4]
 800d88a:	4b0b      	ldr	r3, [pc, #44]	; (800d8b8 <LmHandlerPackageRegister+0x9c>)
 800d88c:	6859      	ldr	r1, [r3, #4]
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	22f2      	movs	r2, #242	; 0xf2
 800d892:	0018      	movs	r0, r3
 800d894:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800d896:	2300      	movs	r3, #0
 800d898:	e001      	b.n	800d89e <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	425b      	negs	r3, r3
  }
}
 800d89e:	0018      	movs	r0, r3
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	b005      	add	sp, #20
 800d8a4:	bd90      	pop	{r4, r7, pc}
 800d8a6:	46c0      	nop			; (mov r8, r8)
 800d8a8:	20000a04 	.word	0x20000a04
 800d8ac:	0800d449 	.word	0x0800d449
 800d8b0:	0800d559 	.word	0x0800d559
 800d8b4:	0800d955 	.word	0x0800d955
 800d8b8:	200001b4 	.word	0x200001b4

0800d8bc <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b08c      	sub	sp, #48	; 0x30
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d102      	bne.n	800d8d0 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	425b      	negs	r3, r3
 800d8ce:	e012      	b.n	800d8f6 <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800d8d0:	210c      	movs	r1, #12
 800d8d2:	187b      	adds	r3, r7, r1
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800d8d8:	187b      	adds	r3, r7, r1
 800d8da:	0018      	movs	r0, r3
 800d8dc:	f005 f8a8 	bl	8012a30 <LoRaMacMibGetRequestConfirm>
 800d8e0:	1e03      	subs	r3, r0, #0
 800d8e2:	d002      	beq.n	800d8ea <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	425b      	negs	r3, r3
 800d8e8:	e005      	b.n	800d8f6 <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800d8ea:	230c      	movs	r3, #12
 800d8ec:	18fb      	adds	r3, r7, r3
 800d8ee:	791a      	ldrb	r2, [r3, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	0018      	movs	r0, r3
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	b00c      	add	sp, #48	; 0x30
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b08c      	sub	sp, #48	; 0x30
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d102      	bne.n	800d914 <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	425b      	negs	r3, r3
 800d912:	e018      	b.n	800d946 <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800d914:	210c      	movs	r1, #12
 800d916:	187b      	adds	r3, r7, r1
 800d918:	2224      	movs	r2, #36	; 0x24
 800d91a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800d91c:	187b      	adds	r3, r7, r1
 800d91e:	0018      	movs	r0, r3
 800d920:	f005 f886 	bl	8012a30 <LoRaMacMibGetRequestConfirm>
 800d924:	1e03      	subs	r3, r0, #0
 800d926:	d002      	beq.n	800d92e <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	425b      	negs	r3, r3
 800d92c:	e00b      	b.n	800d946 <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800d92e:	210c      	movs	r1, #12
 800d930:	187b      	adds	r3, r7, r1
 800d932:	2204      	movs	r2, #4
 800d934:	569a      	ldrsb	r2, [r3, r2]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800d93a:	187b      	adds	r3, r7, r1
 800d93c:	2204      	movs	r2, #4
 800d93e:	569a      	ldrsb	r2, [r3, r2]
 800d940:	4b03      	ldr	r3, [pc, #12]	; (800d950 <LmHandlerGetTxDatarate+0x50>)
 800d942:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800d944:	2300      	movs	r3, #0
}
 800d946:	0018      	movs	r0, r3
 800d948:	46bd      	mov	sp, r7
 800d94a:	b00c      	add	sp, #48	; 0x30
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	46c0      	nop			; (mov r8, r8)
 800d950:	20000a18 	.word	0x20000a18

0800d954 <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800d954:	b5b0      	push	{r4, r5, r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800d95a:	003b      	movs	r3, r7
 800d95c:	220a      	movs	r2, #10
 800d95e:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800d960:	2517      	movs	r5, #23
 800d962:	197c      	adds	r4, r7, r5
 800d964:	003b      	movs	r3, r7
 800d966:	0018      	movs	r0, r3
 800d968:	f005 fdae 	bl	80134c8 <LoRaMacMlmeRequest>
 800d96c:	0003      	movs	r3, r0
 800d96e:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800d970:	197b      	adds	r3, r7, r5
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d101      	bne.n	800d97c <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800d978:	2300      	movs	r3, #0
 800d97a:	e001      	b.n	800d980 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	425b      	negs	r3, r3
  }
}
 800d980:	0018      	movs	r0, r3
 800d982:	46bd      	mov	sp, r7
 800d984:	b006      	add	sp, #24
 800d986:	bdb0      	pop	{r4, r5, r7, pc}

0800d988 <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1; // Здесь выставляется будет ли подтверждение или нет
 800d990:	4b16      	ldr	r3, [pc, #88]	; (800d9ec <McpsConfirm+0x64>)
 800d992:	2201      	movs	r2, #1
 800d994:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	785a      	ldrb	r2, [r3, #1]
 800d99a:	4b14      	ldr	r3, [pc, #80]	; (800d9ec <McpsConfirm+0x64>)
 800d99c:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	789b      	ldrb	r3, [r3, #2]
 800d9a2:	b25a      	sxtb	r2, r3
 800d9a4:	4b11      	ldr	r3, [pc, #68]	; (800d9ec <McpsConfirm+0x64>)
 800d9a6:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68da      	ldr	r2, [r3, #12]
 800d9ac:	4b0f      	ldr	r3, [pc, #60]	; (800d9ec <McpsConfirm+0x64>)
 800d9ae:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2203      	movs	r2, #3
 800d9b4:	569a      	ldrsb	r2, [r3, r2]
 800d9b6:	4b0d      	ldr	r3, [pc, #52]	; (800d9ec <McpsConfirm+0x64>)
 800d9b8:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	4b0a      	ldr	r3, [pc, #40]	; (800d9ec <McpsConfirm+0x64>)
 800d9c2:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	791b      	ldrb	r3, [r3, #4]
 800d9c8:	001a      	movs	r2, r3
 800d9ca:	4b08      	ldr	r3, [pc, #32]	; (800d9ec <McpsConfirm+0x64>)
 800d9cc:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800d9ce:	4b08      	ldr	r3, [pc, #32]	; (800d9f0 <McpsConfirm+0x68>)
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	4a06      	ldr	r2, [pc, #24]	; (800d9ec <McpsConfirm+0x64>)
 800d9d4:	0010      	movs	r0, r2
 800d9d6:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	0019      	movs	r1, r3
 800d9dc:	2000      	movs	r0, #0
 800d9de:	f000 f907 	bl	800dbf0 <LmHandlerPackagesNotify>
}
 800d9e2:	46c0      	nop			; (mov r8, r8)
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	b002      	add	sp, #8
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	46c0      	nop			; (mov r8, r8)
 800d9ec:	20000a60 	.word	0x20000a60
 800d9f0:	20000a20 	.word	0x20000a20

0800d9f4 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800d9f4:	b590      	push	{r4, r7, lr}
 800d9f6:	b089      	sub	sp, #36	; 0x24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800d9fc:	4b36      	ldr	r3, [pc, #216]	; (800dad8 <McpsIndication+0xe4>)
 800d9fe:	2201      	movs	r2, #1
 800da00:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	785a      	ldrb	r2, [r3, #1]
 800da06:	4b34      	ldr	r3, [pc, #208]	; (800dad8 <McpsIndication+0xe4>)
 800da08:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800da0a:	4b33      	ldr	r3, [pc, #204]	; (800dad8 <McpsIndication+0xe4>)
 800da0c:	785b      	ldrb	r3, [r3, #1]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d15e      	bne.n	800dad0 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	7b1b      	ldrb	r3, [r3, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d02c      	beq.n	800da74 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	791b      	ldrb	r3, [r3, #4]
 800da1e:	b25a      	sxtb	r2, r3
 800da20:	4b2d      	ldr	r3, [pc, #180]	; (800dad8 <McpsIndication+0xe4>)
 800da22:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	220e      	movs	r2, #14
 800da28:	5e9b      	ldrsh	r3, [r3, r2]
 800da2a:	b25a      	sxtb	r2, r3
 800da2c:	4b2a      	ldr	r3, [pc, #168]	; (800dad8 <McpsIndication+0xe4>)
 800da2e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2210      	movs	r2, #16
 800da34:	569a      	ldrsb	r2, [r3, r2]
 800da36:	4b28      	ldr	r3, [pc, #160]	; (800dad8 <McpsIndication+0xe4>)
 800da38:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	695a      	ldr	r2, [r3, #20]
 800da3e:	4b26      	ldr	r3, [pc, #152]	; (800dad8 <McpsIndication+0xe4>)
 800da40:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	7c5b      	ldrb	r3, [r3, #17]
 800da46:	b25a      	sxtb	r2, r3
 800da48:	4b23      	ldr	r3, [pc, #140]	; (800dad8 <McpsIndication+0xe4>)
 800da4a:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	78da      	ldrb	r2, [r3, #3]
 800da50:	2118      	movs	r1, #24
 800da52:	187b      	adds	r3, r7, r1
 800da54:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	7b1a      	ldrb	r2, [r3, #12]
 800da5a:	187b      	adds	r3, r7, r1
 800da5c:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	689a      	ldr	r2, [r3, #8]
 800da62:	0008      	movs	r0, r1
 800da64:	187b      	adds	r3, r7, r1
 800da66:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800da68:	4b1c      	ldr	r3, [pc, #112]	; (800dadc <McpsIndication+0xe8>)
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	491a      	ldr	r1, [pc, #104]	; (800dad8 <McpsIndication+0xe4>)
 800da6e:	183a      	adds	r2, r7, r0
 800da70:	0010      	movs	r0, r2
 800da72:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	7f1b      	ldrb	r3, [r3, #28]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d006      	beq.n	800da8a <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800da7c:	4b17      	ldr	r3, [pc, #92]	; (800dadc <McpsIndication+0xe8>)
 800da7e:	69db      	ldr	r3, [r3, #28]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800da84:	4b15      	ldr	r3, [pc, #84]	; (800dadc <McpsIndication+0xe8>)
 800da86:	69db      	ldr	r3, [r3, #28]
 800da88:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	0019      	movs	r1, r3
 800da8e:	2001      	movs	r0, #1
 800da90:	f000 f8ae 	bl	800dbf0 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800da94:	2417      	movs	r4, #23
 800da96:	193b      	adds	r3, r7, r4
 800da98:	0018      	movs	r0, r3
 800da9a:	f7ff ff0f 	bl	800d8bc <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	795b      	ldrb	r3, [r3, #5]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d115      	bne.n	800dad2 <McpsIndication+0xde>
 800daa6:	193b      	adds	r3, r7, r4
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d111      	bne.n	800dad2 <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800daae:	210c      	movs	r1, #12
 800dab0:	187b      	adds	r3, r7, r1
 800dab2:	2200      	movs	r2, #0
 800dab4:	701a      	strb	r2, [r3, #0]
 800dab6:	187b      	adds	r3, r7, r1
 800dab8:	2200      	movs	r2, #0
 800daba:	705a      	strb	r2, [r3, #1]
 800dabc:	187b      	adds	r3, r7, r1
 800dabe:	2200      	movs	r2, #0
 800dac0:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800dac2:	1878      	adds	r0, r7, r1
 800dac4:	2301      	movs	r3, #1
 800dac6:	2200      	movs	r2, #0
 800dac8:	2100      	movs	r1, #0
 800daca:	f7ff fd45 	bl	800d558 <LmHandlerSend>
 800dace:	e000      	b.n	800dad2 <McpsIndication+0xde>
    return;
 800dad0:	46c0      	nop			; (mov r8, r8)
  }
}
 800dad2:	46bd      	mov	sp, r7
 800dad4:	b009      	add	sp, #36	; 0x24
 800dad6:	bd90      	pop	{r4, r7, pc}
 800dad8:	200001a4 	.word	0x200001a4
 800dadc:	20000a20 	.word	0x20000a20

0800dae0 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b08d      	sub	sp, #52	; 0x34
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800dae8:	4b22      	ldr	r3, [pc, #136]	; (800db74 <MlmeConfirm+0x94>)
 800daea:	2200      	movs	r2, #0
 800daec:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	785a      	ldrb	r2, [r3, #1]
 800daf2:	4b20      	ldr	r3, [pc, #128]	; (800db74 <MlmeConfirm+0x94>)
 800daf4:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	0019      	movs	r1, r3
 800dafa:	2002      	movs	r0, #2
 800dafc:	f000 f878 	bl	800dbf0 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	2b0a      	cmp	r3, #10
 800db06:	d02c      	beq.n	800db62 <MlmeConfirm+0x82>
 800db08:	dc2d      	bgt.n	800db66 <MlmeConfirm+0x86>
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d002      	beq.n	800db14 <MlmeConfirm+0x34>
 800db0e:	2b04      	cmp	r3, #4
 800db10:	d02b      	beq.n	800db6a <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800db12:	e028      	b.n	800db66 <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800db14:	210c      	movs	r1, #12
 800db16:	187b      	adds	r3, r7, r1
 800db18:	2206      	movs	r2, #6
 800db1a:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800db1c:	000c      	movs	r4, r1
 800db1e:	187b      	adds	r3, r7, r1
 800db20:	0018      	movs	r0, r3
 800db22:	f004 ff85 	bl	8012a30 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800db26:	193b      	adds	r3, r7, r4
 800db28:	685a      	ldr	r2, [r3, #4]
 800db2a:	4b13      	ldr	r3, [pc, #76]	; (800db78 <MlmeConfirm+0x98>)
 800db2c:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800db2e:	4b13      	ldr	r3, [pc, #76]	; (800db7c <MlmeConfirm+0x9c>)
 800db30:	0018      	movs	r0, r3
 800db32:	f7ff fee5 	bl	800d900 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	785b      	ldrb	r3, [r3, #1]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d108      	bne.n	800db50 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800db3e:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <MlmeConfirm+0x9c>)
 800db40:	2200      	movs	r2, #0
 800db42:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800db44:	4b0e      	ldr	r3, [pc, #56]	; (800db80 <MlmeConfirm+0xa0>)
 800db46:	785b      	ldrb	r3, [r3, #1]
 800db48:	0018      	movs	r0, r3
 800db4a:	f7ff fdd7 	bl	800d6fc <LmHandlerRequestClass>
 800db4e:	e002      	b.n	800db56 <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800db50:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <MlmeConfirm+0x9c>)
 800db52:	22ff      	movs	r2, #255	; 0xff
 800db54:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800db56:	4b0b      	ldr	r3, [pc, #44]	; (800db84 <MlmeConfirm+0xa4>)
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	4a08      	ldr	r2, [pc, #32]	; (800db7c <MlmeConfirm+0x9c>)
 800db5c:	0010      	movs	r0, r2
 800db5e:	4798      	blx	r3
    break;
 800db60:	e004      	b.n	800db6c <MlmeConfirm+0x8c>
    break;
 800db62:	46c0      	nop			; (mov r8, r8)
 800db64:	e002      	b.n	800db6c <MlmeConfirm+0x8c>
      break;
 800db66:	46c0      	nop			; (mov r8, r8)
 800db68:	e000      	b.n	800db6c <MlmeConfirm+0x8c>
    break;
 800db6a:	46c0      	nop			; (mov r8, r8)
  }
}
 800db6c:	46c0      	nop			; (mov r8, r8)
 800db6e:	46bd      	mov	sp, r7
 800db70:	b00d      	add	sp, #52	; 0x34
 800db72:	bd90      	pop	{r4, r7, pc}
 800db74:	20000a60 	.word	0x20000a60
 800db78:	2000017c 	.word	0x2000017c
 800db7c:	200001a0 	.word	0x200001a0
 800db80:	20000a18 	.word	0x20000a18
 800db84:	20000a20 	.word	0x20000a20

0800db88 <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800db90:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <MlmeIndication+0x20>)
 800db92:	2200      	movs	r2, #0
 800db94:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	785a      	ldrb	r2, [r3, #1]
 800db9a:	4b03      	ldr	r3, [pc, #12]	; (800dba8 <MlmeIndication+0x20>)
 800db9c:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800db9e:	46c0      	nop			; (mov r8, r8)
  }
}
 800dba0:	46c0      	nop			; (mov r8, r8)
 800dba2:	46bd      	mov	sp, r7
 800dba4:	b002      	add	sp, #8
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	200001a4 	.word	0x200001a4

0800dbac <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	0002      	movs	r2, r0
 800dbb4:	1dfb      	adds	r3, r7, #7
 800dbb6:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800dbb8:	1dfb      	adds	r3, r7, #7
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b04      	cmp	r3, #4
 800dbbe:	d810      	bhi.n	800dbe2 <LmHandlerPackageIsInitialized+0x36>
 800dbc0:	1dfb      	adds	r3, r7, #7
 800dbc2:	781a      	ldrb	r2, [r3, #0]
 800dbc4:	4b09      	ldr	r3, [pc, #36]	; (800dbec <LmHandlerPackageIsInitialized+0x40>)
 800dbc6:	0092      	lsls	r2, r2, #2
 800dbc8:	58d3      	ldr	r3, [r2, r3]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d008      	beq.n	800dbe2 <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800dbd0:	1dfb      	adds	r3, r7, #7
 800dbd2:	781a      	ldrb	r2, [r3, #0]
 800dbd4:	4b05      	ldr	r3, [pc, #20]	; (800dbec <LmHandlerPackageIsInitialized+0x40>)
 800dbd6:	0092      	lsls	r2, r2, #2
 800dbd8:	58d3      	ldr	r3, [r2, r3]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	4798      	blx	r3
 800dbde:	0003      	movs	r3, r0
 800dbe0:	e000      	b.n	800dbe4 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800dbe2:	2300      	movs	r3, #0
  }
}
 800dbe4:	0018      	movs	r0, r3
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	b002      	add	sp, #8
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20000a04 	.word	0x20000a04

0800dbf0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	0002      	movs	r2, r0
 800dbf8:	6039      	str	r1, [r7, #0]
 800dbfa:	1dfb      	adds	r3, r7, #7
 800dbfc:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800dbfe:	230f      	movs	r3, #15
 800dc00:	18fb      	adds	r3, r7, r3
 800dc02:	2200      	movs	r2, #0
 800dc04:	701a      	strb	r2, [r3, #0]
 800dc06:	e07b      	b.n	800dd00 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800dc08:	230f      	movs	r3, #15
 800dc0a:	18fb      	adds	r3, r7, r3
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	569a      	ldrsb	r2, [r3, r2]
 800dc10:	4b41      	ldr	r3, [pc, #260]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dc12:	0092      	lsls	r2, r2, #2
 800dc14:	58d3      	ldr	r3, [r2, r3]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d100      	bne.n	800dc1c <LmHandlerPackagesNotify+0x2c>
 800dc1a:	e05f      	b.n	800dcdc <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800dc1c:	1dfb      	adds	r3, r7, #7
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d046      	beq.n	800dcb2 <LmHandlerPackagesNotify+0xc2>
 800dc24:	dc5c      	bgt.n	800dce0 <LmHandlerPackagesNotify+0xf0>
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <LmHandlerPackagesNotify+0x40>
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d015      	beq.n	800dc5a <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800dc2e:	e057      	b.n	800dce0 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800dc30:	210f      	movs	r1, #15
 800dc32:	187b      	adds	r3, r7, r1
 800dc34:	2200      	movs	r2, #0
 800dc36:	569a      	ldrsb	r2, [r3, r2]
 800dc38:	4b37      	ldr	r3, [pc, #220]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dc3a:	0092      	lsls	r2, r2, #2
 800dc3c:	58d3      	ldr	r3, [r2, r3]
 800dc3e:	695b      	ldr	r3, [r3, #20]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d04f      	beq.n	800dce4 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800dc44:	187b      	adds	r3, r7, r1
 800dc46:	2200      	movs	r2, #0
 800dc48:	569a      	ldrsb	r2, [r3, r2]
 800dc4a:	4b33      	ldr	r3, [pc, #204]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dc4c:	0092      	lsls	r2, r2, #2
 800dc4e:	58d3      	ldr	r3, [r2, r3]
 800dc50:	695b      	ldr	r3, [r3, #20]
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	0010      	movs	r0, r2
 800dc56:	4798      	blx	r3
          break;
 800dc58:	e044      	b.n	800dce4 <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800dc5a:	210f      	movs	r1, #15
 800dc5c:	187b      	adds	r3, r7, r1
 800dc5e:	2200      	movs	r2, #0
 800dc60:	569a      	ldrsb	r2, [r3, r2]
 800dc62:	4b2d      	ldr	r3, [pc, #180]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dc64:	0092      	lsls	r2, r2, #2
 800dc66:	58d3      	ldr	r3, [r2, r3]
 800dc68:	699b      	ldr	r3, [r3, #24]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d03c      	beq.n	800dce8 <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800dc6e:	187b      	adds	r3, r7, r1
 800dc70:	2200      	movs	r2, #0
 800dc72:	569a      	ldrsb	r2, [r3, r2]
 800dc74:	4b28      	ldr	r3, [pc, #160]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dc76:	0092      	lsls	r2, r2, #2
 800dc78:	58d3      	ldr	r3, [r2, r3]
 800dc7a:	781a      	ldrb	r2, [r3, #0]
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d00a      	beq.n	800dc9a <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800dc84:	187b      	adds	r3, r7, r1
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	b25b      	sxtb	r3, r3
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d12c      	bne.n	800dce8 <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800dc8e:	4b22      	ldr	r3, [pc, #136]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	4798      	blx	r3
 800dc96:	1e03      	subs	r3, r0, #0
 800dc98:	d026      	beq.n	800dce8 <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800dc9a:	230f      	movs	r3, #15
 800dc9c:	18fb      	adds	r3, r7, r3
 800dc9e:	2200      	movs	r2, #0
 800dca0:	569a      	ldrsb	r2, [r3, r2]
 800dca2:	4b1d      	ldr	r3, [pc, #116]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dca4:	0092      	lsls	r2, r2, #2
 800dca6:	58d3      	ldr	r3, [r2, r3]
 800dca8:	699b      	ldr	r3, [r3, #24]
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	0010      	movs	r0, r2
 800dcae:	4798      	blx	r3
          break;
 800dcb0:	e01a      	b.n	800dce8 <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800dcb2:	210f      	movs	r1, #15
 800dcb4:	187b      	adds	r3, r7, r1
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	569a      	ldrsb	r2, [r3, r2]
 800dcba:	4b17      	ldr	r3, [pc, #92]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dcbc:	0092      	lsls	r2, r2, #2
 800dcbe:	58d3      	ldr	r3, [r2, r3]
 800dcc0:	69db      	ldr	r3, [r3, #28]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d012      	beq.n	800dcec <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800dcc6:	187b      	adds	r3, r7, r1
 800dcc8:	2200      	movs	r2, #0
 800dcca:	569a      	ldrsb	r2, [r3, r2]
 800dccc:	4b12      	ldr	r3, [pc, #72]	; (800dd18 <LmHandlerPackagesNotify+0x128>)
 800dcce:	0092      	lsls	r2, r2, #2
 800dcd0:	58d3      	ldr	r3, [r2, r3]
 800dcd2:	69db      	ldr	r3, [r3, #28]
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	0010      	movs	r0, r2
 800dcd8:	4798      	blx	r3
          break;
 800dcda:	e007      	b.n	800dcec <LmHandlerPackagesNotify+0xfc>
      }
    }
 800dcdc:	46c0      	nop			; (mov r8, r8)
 800dcde:	e006      	b.n	800dcee <LmHandlerPackagesNotify+0xfe>
          break;
 800dce0:	46c0      	nop			; (mov r8, r8)
 800dce2:	e004      	b.n	800dcee <LmHandlerPackagesNotify+0xfe>
          break;
 800dce4:	46c0      	nop			; (mov r8, r8)
 800dce6:	e002      	b.n	800dcee <LmHandlerPackagesNotify+0xfe>
          break;
 800dce8:	46c0      	nop			; (mov r8, r8)
 800dcea:	e000      	b.n	800dcee <LmHandlerPackagesNotify+0xfe>
          break;
 800dcec:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800dcee:	210f      	movs	r1, #15
 800dcf0:	187b      	adds	r3, r7, r1
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	b25b      	sxtb	r3, r3
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	187b      	adds	r3, r7, r1
 800dcfe:	701a      	strb	r2, [r3, #0]
 800dd00:	230f      	movs	r3, #15
 800dd02:	18fb      	adds	r3, r7, r3
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	b25b      	sxtb	r3, r3
 800dd08:	2b04      	cmp	r3, #4
 800dd0a:	dc00      	bgt.n	800dd0e <LmHandlerPackagesNotify+0x11e>
 800dd0c:	e77c      	b.n	800dc08 <LmHandlerPackagesNotify+0x18>
  }
}
 800dd0e:	46c0      	nop			; (mov r8, r8)
 800dd10:	46c0      	nop			; (mov r8, r8)
 800dd12:	46bd      	mov	sp, r7
 800dd14:	b004      	add	sp, #16
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	20000a04 	.word	0x20000a04

0800dd1c <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	0002      	movs	r2, r0
 800dd24:	1dfb      	adds	r3, r7, #7
 800dd26:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800dd28:	1dfb      	adds	r3, r7, #7
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	4a06      	ldr	r2, [pc, #24]	; (800dd48 <DisplayClassUpdate+0x2c>)
 800dd2e:	5cd3      	ldrb	r3, [r2, r3]
 800dd30:	001a      	movs	r2, r3
 800dd32:	4b06      	ldr	r3, [pc, #24]	; (800dd4c <DisplayClassUpdate+0x30>)
 800dd34:	9200      	str	r2, [sp, #0]
 800dd36:	2200      	movs	r2, #0
 800dd38:	2100      	movs	r1, #0
 800dd3a:	2002      	movs	r0, #2
 800dd3c:	f00d fd42 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800dd40:	46c0      	nop			; (mov r8, r8)
 800dd42:	46bd      	mov	sp, r7
 800dd44:	b002      	add	sp, #8
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	0801e750 	.word	0x0801e750
 800dd4c:	0801e734 	.word	0x0801e734

0800dd50 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800dd54:	4b01      	ldr	r3, [pc, #4]	; (800dd5c <LmphCompliancePackageFactory+0xc>)
}
 800dd56:	0018      	movs	r0, r3
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	200001bc 	.word	0x200001bc

0800dd60 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	1dfb      	adds	r3, r7, #7
 800dd6c:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d010      	beq.n	800dd96 <LmhpComplianceInit+0x36>
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00d      	beq.n	800dd96 <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800dd7a:	4b0c      	ldr	r3, [pc, #48]	; (800ddac <LmhpComplianceInit+0x4c>)
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800dd80:	4b0b      	ldr	r3, [pc, #44]	; (800ddb0 <LmhpComplianceInit+0x50>)
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800dd86:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <LmhpComplianceInit+0x50>)
 800dd88:	1dfa      	adds	r2, r7, #7
 800dd8a:	7812      	ldrb	r2, [r2, #0]
 800dd8c:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800dd8e:	4b08      	ldr	r3, [pc, #32]	; (800ddb0 <LmhpComplianceInit+0x50>)
 800dd90:	2201      	movs	r2, #1
 800dd92:	701a      	strb	r2, [r3, #0]
 800dd94:	e006      	b.n	800dda4 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800dd96:	4b05      	ldr	r3, [pc, #20]	; (800ddac <LmhpComplianceInit+0x4c>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800dd9c:	4b04      	ldr	r3, [pc, #16]	; (800ddb0 <LmhpComplianceInit+0x50>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	701a      	strb	r2, [r3, #0]
  }
}
 800dda2:	46c0      	nop			; (mov r8, r8)
 800dda4:	46c0      	nop			; (mov r8, r8)
 800dda6:	46bd      	mov	sp, r7
 800dda8:	b004      	add	sp, #16
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	20000b98 	.word	0x20000b98
 800ddb0:	20000b84 	.word	0x20000b84

0800ddb4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800ddb8:	4b02      	ldr	r3, [pc, #8]	; (800ddc4 <LmhpComplianceIsInitialized+0x10>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
}
 800ddbc:	0018      	movs	r0, r3
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	46c0      	nop			; (mov r8, r8)
 800ddc4:	20000b84 	.word	0x20000b84

0800ddc8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800ddcc:	4b06      	ldr	r3, [pc, #24]	; (800dde8 <LmhpComplianceIsRunning+0x20>)
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	4053      	eors	r3, r2
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800ddda:	2300      	movs	r3, #0
 800dddc:	e001      	b.n	800dde2 <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800ddde:	4b02      	ldr	r3, [pc, #8]	; (800dde8 <LmhpComplianceIsRunning+0x20>)
 800dde0:	785b      	ldrb	r3, [r3, #1]
}
 800dde2:	0018      	movs	r0, r3
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	20000b84 	.word	0x20000b84

0800ddec <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ddf4:	4b0e      	ldr	r3, [pc, #56]	; (800de30 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	4053      	eors	r3, r2
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d112      	bne.n	800de28 <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800de02:	4b0b      	ldr	r3, [pc, #44]	; (800de30 <LmhpComplianceOnMcpsConfirm+0x44>)
 800de04:	785b      	ldrb	r3, [r3, #1]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00f      	beq.n	800de2a <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d10b      	bne.n	800de2a <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800de16:	2b00      	cmp	r3, #0
 800de18:	d007      	beq.n	800de2a <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800de1a:	4b05      	ldr	r3, [pc, #20]	; (800de30 <LmhpComplianceOnMcpsConfirm+0x44>)
 800de1c:	899b      	ldrh	r3, [r3, #12]
 800de1e:	3301      	adds	r3, #1
 800de20:	b29a      	uxth	r2, r3
 800de22:	4b03      	ldr	r3, [pc, #12]	; (800de30 <LmhpComplianceOnMcpsConfirm+0x44>)
 800de24:	819a      	strh	r2, [r3, #12]
 800de26:	e000      	b.n	800de2a <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800de28:	46c0      	nop			; (mov r8, r8)
  }
}
 800de2a:	46bd      	mov	sp, r7
 800de2c:	b002      	add	sp, #8
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	20000b84 	.word	0x20000b84

0800de34 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800de3c:	4b0d      	ldr	r3, [pc, #52]	; (800de74 <LmhpComplianceOnMlmeConfirm+0x40>)
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2201      	movs	r2, #1
 800de42:	4053      	eors	r3, r2
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10f      	bne.n	800de6a <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b04      	cmp	r3, #4
 800de50:	d10c      	bne.n	800de6c <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800de52:	4b08      	ldr	r3, [pc, #32]	; (800de74 <LmhpComplianceOnMlmeConfirm+0x40>)
 800de54:	2201      	movs	r2, #1
 800de56:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	7a1a      	ldrb	r2, [r3, #8]
 800de5c:	4b05      	ldr	r3, [pc, #20]	; (800de74 <LmhpComplianceOnMlmeConfirm+0x40>)
 800de5e:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	7a5a      	ldrb	r2, [r3, #9]
 800de64:	4b03      	ldr	r3, [pc, #12]	; (800de74 <LmhpComplianceOnMlmeConfirm+0x40>)
 800de66:	741a      	strb	r2, [r3, #16]
 800de68:	e000      	b.n	800de6c <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800de6a:	46c0      	nop			; (mov r8, r8)
  }
}
 800de6c:	46bd      	mov	sp, r7
 800de6e:	b002      	add	sp, #8
 800de70:	bd80      	pop	{r7, pc}
 800de72:	46c0      	nop			; (mov r8, r8)
 800de74:	20000b84 	.word	0x20000b84

0800de78 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800de78:	b5b0      	push	{r4, r5, r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800de7e:	4b32      	ldr	r3, [pc, #200]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	2201      	movs	r2, #1
 800de84:	4053      	eors	r3, r2
 800de86:	b2db      	uxtb	r3, r3
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800de8c:	2301      	movs	r3, #1
 800de8e:	425b      	negs	r3, r3
 800de90:	e056      	b.n	800df40 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800de92:	4b2d      	ldr	r3, [pc, #180]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800de94:	7b9b      	ldrb	r3, [r3, #14]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d019      	beq.n	800dece <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800de9a:	4b2b      	ldr	r3, [pc, #172]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800dea0:	4b29      	ldr	r3, [pc, #164]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800dea2:	2203      	movs	r2, #3
 800dea4:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800dea6:	4b28      	ldr	r3, [pc, #160]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	2205      	movs	r2, #5
 800deac:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800deae:	4b26      	ldr	r3, [pc, #152]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	3301      	adds	r3, #1
 800deb4:	4a24      	ldr	r2, [pc, #144]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800deb6:	7bd2      	ldrb	r2, [r2, #15]
 800deb8:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800deba:	4b23      	ldr	r3, [pc, #140]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	3302      	adds	r3, #2
 800dec0:	4a21      	ldr	r2, [pc, #132]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800dec2:	7c12      	ldrb	r2, [r2, #16]
 800dec4:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800dec6:	4b20      	ldr	r3, [pc, #128]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800dec8:	2201      	movs	r2, #1
 800deca:	709a      	strb	r2, [r3, #2]
 800decc:	e01c      	b.n	800df08 <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800dece:	4b1e      	ldr	r3, [pc, #120]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800ded0:	789b      	ldrb	r3, [r3, #2]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d005      	beq.n	800dee2 <LmhpComplianceTxProcess+0x6a>
 800ded6:	2b04      	cmp	r3, #4
 800ded8:	d116      	bne.n	800df08 <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800deda:	4b1b      	ldr	r3, [pc, #108]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800dedc:	2201      	movs	r2, #1
 800dede:	709a      	strb	r2, [r3, #2]
        break;
 800dee0:	e012      	b.n	800df08 <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800dee2:	4b19      	ldr	r3, [pc, #100]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800dee4:	2202      	movs	r2, #2
 800dee6:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800dee8:	4b17      	ldr	r3, [pc, #92]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800deea:	899b      	ldrh	r3, [r3, #12]
 800deec:	0a1b      	lsrs	r3, r3, #8
 800deee:	b29a      	uxth	r2, r3
 800def0:	4b15      	ldr	r3, [pc, #84]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	b2d2      	uxtb	r2, r2
 800def6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800def8:	4b13      	ldr	r3, [pc, #76]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800defa:	899a      	ldrh	r2, [r3, #12]
 800defc:	4b12      	ldr	r3, [pc, #72]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	3301      	adds	r3, #1
 800df02:	b2d2      	uxtb	r2, r2
 800df04:	701a      	strb	r2, [r3, #0]
        break;
 800df06:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800df08:	2508      	movs	r5, #8
 800df0a:	197b      	adds	r3, r7, r5
 800df0c:	22e0      	movs	r2, #224	; 0xe0
 800df0e:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800df10:	4b0d      	ldr	r3, [pc, #52]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800df12:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800df14:	197b      	adds	r3, r7, r5
 800df16:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800df18:	4b0b      	ldr	r3, [pc, #44]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800df1a:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800df1c:	197b      	adds	r3, r7, r5
 800df1e:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800df24:	4b09      	ldr	r3, [pc, #36]	; (800df4c <LmhpComplianceTxProcess+0xd4>)
 800df26:	0018      	movs	r0, r3
 800df28:	f00e fb0e 	bl	801c548 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800df2c:	4b08      	ldr	r3, [pc, #32]	; (800df50 <LmhpComplianceTxProcess+0xd8>)
 800df2e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800df30:	4b05      	ldr	r3, [pc, #20]	; (800df48 <LmhpComplianceTxProcess+0xd0>)
 800df32:	791b      	ldrb	r3, [r3, #4]
 800df34:	0019      	movs	r1, r3
 800df36:	1d3a      	adds	r2, r7, #4
 800df38:	1978      	adds	r0, r7, r5
 800df3a:	2301      	movs	r3, #1
 800df3c:	47a0      	blx	r4
 800df3e:	0003      	movs	r3, r0
                                             true);
}
 800df40:	0018      	movs	r0, r3
 800df42:	46bd      	mov	sp, r7
 800df44:	b004      	add	sp, #16
 800df46:	bdb0      	pop	{r4, r5, r7, pc}
 800df48:	20000b84 	.word	0x20000b84
 800df4c:	20000b6c 	.word	0x20000b6c
 800df50:	200001bc 	.word	0x200001bc

0800df54 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b0a2      	sub	sp, #136	; 0x88
 800df58:	af02      	add	r7, sp, #8
 800df5a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800df5c:	4be1      	ldr	r3, [pc, #900]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2201      	movs	r2, #1
 800df62:	4053      	eors	r3, r2
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	d000      	beq.n	800df6c <LmhpComplianceOnMcpsIndication+0x18>
 800df6a:	e1b2      	b.n	800e2d2 <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7b5b      	ldrb	r3, [r3, #13]
 800df70:	2201      	movs	r2, #1
 800df72:	4053      	eors	r3, r2
 800df74:	b2db      	uxtb	r3, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	d000      	beq.n	800df7c <LmhpComplianceOnMcpsIndication+0x28>
 800df7a:	e1ac      	b.n	800e2d6 <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800df7c:	4bd9      	ldr	r3, [pc, #868]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800df7e:	785b      	ldrb	r3, [r3, #1]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00c      	beq.n	800df9e <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	7c9b      	ldrb	r3, [r3, #18]
 800df88:	2201      	movs	r2, #1
 800df8a:	4053      	eors	r3, r2
 800df8c:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d005      	beq.n	800df9e <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800df92:	4bd4      	ldr	r3, [pc, #848]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800df94:	899b      	ldrh	r3, [r3, #12]
 800df96:	3301      	adds	r3, #1
 800df98:	b29a      	uxth	r2, r3
 800df9a:	4bd2      	ldr	r3, [pc, #840]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800df9c:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	78db      	ldrb	r3, [r3, #3]
 800dfa2:	2be0      	cmp	r3, #224	; 0xe0
 800dfa4:	d000      	beq.n	800dfa8 <LmhpComplianceOnMcpsIndication+0x54>
 800dfa6:	e198      	b.n	800e2da <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800dfa8:	4bce      	ldr	r3, [pc, #824]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800dfaa:	785b      	ldrb	r3, [r3, #1]
 800dfac:	2201      	movs	r2, #1
 800dfae:	4053      	eors	r3, r2
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d063      	beq.n	800e07e <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	7b1b      	ldrb	r3, [r3, #12]
 800dfba:	2b04      	cmp	r3, #4
 800dfbc:	d000      	beq.n	800dfc0 <LmhpComplianceOnMcpsIndication+0x6c>
 800dfbe:	e1a0      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d000      	beq.n	800dfcc <LmhpComplianceOnMcpsIndication+0x78>
 800dfca:	e19a      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d000      	beq.n	800dfda <LmhpComplianceOnMcpsIndication+0x86>
 800dfd8:	e193      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	3302      	adds	r3, #2
 800dfe0:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d000      	beq.n	800dfe8 <LmhpComplianceOnMcpsIndication+0x94>
 800dfe6:	e18c      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	3303      	adds	r3, #3
 800dfee:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d000      	beq.n	800dff6 <LmhpComplianceOnMcpsIndication+0xa2>
 800dff4:	e185      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800dff6:	4bbb      	ldr	r3, [pc, #748]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800dffc:	4bb9      	ldr	r3, [pc, #740]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800dffe:	22e0      	movs	r2, #224	; 0xe0
 800e000:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800e002:	4bb8      	ldr	r3, [pc, #736]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e004:	2202      	movs	r2, #2
 800e006:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800e008:	4bb6      	ldr	r3, [pc, #728]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e00a:	2200      	movs	r2, #0
 800e00c:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800e00e:	4bb5      	ldr	r3, [pc, #724]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e010:	2200      	movs	r2, #0
 800e012:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800e014:	4bb3      	ldr	r3, [pc, #716]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e016:	2200      	movs	r2, #0
 800e018:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800e01a:	4bb2      	ldr	r3, [pc, #712]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800e020:	4bb0      	ldr	r3, [pc, #704]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e022:	2201      	movs	r2, #1
 800e024:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800e026:	4baf      	ldr	r3, [pc, #700]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e028:	2201      	movs	r2, #1
 800e02a:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800e02c:	2108      	movs	r1, #8
 800e02e:	187b      	adds	r3, r7, r1
 800e030:	2204      	movs	r2, #4
 800e032:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800e034:	187b      	adds	r3, r7, r1
 800e036:	2201      	movs	r2, #1
 800e038:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e03a:	187b      	adds	r3, r7, r1
 800e03c:	0018      	movs	r0, r3
 800e03e:	f004 fe55 	bl	8012cec <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800e042:	2000      	movs	r0, #0
 800e044:	f005 fce6 	bl	8013a14 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800e048:	4ba7      	ldr	r3, [pc, #668]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d003      	beq.n	800e05a <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800e052:	4ba5      	ldr	r3, [pc, #660]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800e05a:	4ba4      	ldr	r3, [pc, #656]	; (800e2ec <LmhpComplianceOnMcpsIndication+0x398>)
 800e05c:	2201      	movs	r2, #1
 800e05e:	4251      	negs	r1, r2
 800e060:	48a3      	ldr	r0, [pc, #652]	; (800e2f0 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e062:	2200      	movs	r2, #0
 800e064:	9200      	str	r2, [sp, #0]
 800e066:	2200      	movs	r2, #0
 800e068:	f00e fa36 	bl	801c4d8 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800e06c:	4aa1      	ldr	r2, [pc, #644]	; (800e2f4 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800e06e:	4ba0      	ldr	r3, [pc, #640]	; (800e2f0 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e070:	0011      	movs	r1, r2
 800e072:	0018      	movs	r0, r3
 800e074:	f00e fb58 	bl	801c728 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800e078:	f7ff fefe 	bl	800de78 <LmhpComplianceTxProcess>
 800e07c:	e141      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	781a      	ldrb	r2, [r3, #0]
 800e084:	4b97      	ldr	r3, [pc, #604]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e086:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800e088:	4b96      	ldr	r3, [pc, #600]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e08a:	789b      	ldrb	r3, [r3, #2]
 800e08c:	2b0a      	cmp	r3, #10
 800e08e:	d900      	bls.n	800e092 <LmhpComplianceOnMcpsIndication+0x13e>
 800e090:	e125      	b.n	800e2de <LmhpComplianceOnMcpsIndication+0x38a>
 800e092:	009a      	lsls	r2, r3, #2
 800e094:	4b98      	ldr	r3, [pc, #608]	; (800e2f8 <LmhpComplianceOnMcpsIndication+0x3a4>)
 800e096:	18d3      	adds	r3, r2, r3
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800e09c:	4b94      	ldr	r3, [pc, #592]	; (800e2f0 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e09e:	0018      	movs	r0, r3
 800e0a0:	f00e faca 	bl	801c638 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800e0a4:	4b8f      	ldr	r3, [pc, #572]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800e0aa:	4b8e      	ldr	r3, [pc, #568]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800e0b0:	2108      	movs	r1, #8
 800e0b2:	187b      	adds	r3, r7, r1
 800e0b4:	2204      	movs	r2, #4
 800e0b6:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e0b8:	4b8b      	ldr	r3, [pc, #556]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	781a      	ldrb	r2, [r3, #0]
 800e0be:	187b      	adds	r3, r7, r1
 800e0c0:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e0c2:	187b      	adds	r3, r7, r1
 800e0c4:	0018      	movs	r0, r3
 800e0c6:	f004 fe11 	bl	8012cec <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800e0ca:	4b87      	ldr	r3, [pc, #540]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	785b      	ldrb	r3, [r3, #1]
 800e0d0:	0018      	movs	r0, r3
 800e0d2:	f005 fc9f 	bl	8013a14 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800e0d6:	4b84      	ldr	r3, [pc, #528]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d100      	bne.n	800e0e2 <LmhpComplianceOnMcpsIndication+0x18e>
 800e0e0:	e10e      	b.n	800e300 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800e0e2:	4b81      	ldr	r3, [pc, #516]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	4798      	blx	r3
        }
      }
      break;
 800e0ea:	e109      	b.n	800e300 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800e0ec:	4b7d      	ldr	r3, [pc, #500]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	71da      	strb	r2, [r3, #7]
        break;
 800e0f2:	e106      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800e0f4:	4b7b      	ldr	r3, [pc, #492]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800e0fa:	4b7a      	ldr	r3, [pc, #488]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	709a      	strb	r2, [r3, #2]
        break;
 800e100:	e0ff      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800e102:	4b78      	ldr	r3, [pc, #480]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e104:	2200      	movs	r2, #0
 800e106:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800e108:	4b76      	ldr	r3, [pc, #472]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e10a:	2201      	movs	r2, #1
 800e10c:	709a      	strb	r2, [r3, #2]
        break;
 800e10e:	e0f8      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	7b1a      	ldrb	r2, [r3, #12]
 800e114:	4b73      	ldr	r3, [pc, #460]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e116:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800e118:	4b72      	ldr	r3, [pc, #456]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	2204      	movs	r2, #4
 800e11e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800e120:	237f      	movs	r3, #127	; 0x7f
 800e122:	18fb      	adds	r3, r7, r3
 800e124:	2201      	movs	r2, #1
 800e126:	701a      	strb	r2, [r3, #0]
 800e128:	e013      	b.n	800e152 <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	689a      	ldr	r2, [r3, #8]
 800e12e:	207f      	movs	r0, #127	; 0x7f
 800e130:	183b      	adds	r3, r7, r0
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	18d3      	adds	r3, r2, r3
 800e136:	781a      	ldrb	r2, [r3, #0]
 800e138:	4b6a      	ldr	r3, [pc, #424]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e13a:	6899      	ldr	r1, [r3, #8]
 800e13c:	183b      	adds	r3, r7, r0
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	18cb      	adds	r3, r1, r3
 800e142:	3201      	adds	r2, #1
 800e144:	b2d2      	uxtb	r2, r2
 800e146:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800e148:	183b      	adds	r3, r7, r0
 800e14a:	781a      	ldrb	r2, [r3, #0]
 800e14c:	183b      	adds	r3, r7, r0
 800e14e:	3201      	adds	r2, #1
 800e150:	701a      	strb	r2, [r3, #0]
 800e152:	4b64      	ldr	r3, [pc, #400]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e154:	799a      	ldrb	r2, [r3, #6]
 800e156:	4b63      	ldr	r3, [pc, #396]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e158:	79db      	ldrb	r3, [r3, #7]
 800e15a:	1c18      	adds	r0, r3, #0
 800e15c:	1c11      	adds	r1, r2, #0
 800e15e:	b2ca      	uxtb	r2, r1
 800e160:	b2c3      	uxtb	r3, r0
 800e162:	429a      	cmp	r2, r3
 800e164:	d900      	bls.n	800e168 <LmhpComplianceOnMcpsIndication+0x214>
 800e166:	1c01      	adds	r1, r0, #0
 800e168:	b2cb      	uxtb	r3, r1
 800e16a:	227f      	movs	r2, #127	; 0x7f
 800e16c:	18ba      	adds	r2, r7, r2
 800e16e:	7812      	ldrb	r2, [r2, #0]
 800e170:	429a      	cmp	r2, r3
 800e172:	d3da      	bcc.n	800e12a <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800e174:	e0c5      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800e176:	2168      	movs	r1, #104	; 0x68
 800e178:	187b      	adds	r3, r7, r1
 800e17a:	2204      	movs	r2, #4
 800e17c:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800e17e:	187b      	adds	r3, r7, r1
 800e180:	0018      	movs	r0, r3
 800e182:	f005 f9a1 	bl	80134c8 <LoRaMacMlmeRequest>
      }
      break;
 800e186:	e0bc      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800e188:	4b59      	ldr	r3, [pc, #356]	; (800e2f0 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e18a:	0018      	movs	r0, r3
 800e18c:	f00e fa54 	bl	801c638 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800e190:	4b54      	ldr	r3, [pc, #336]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e192:	2200      	movs	r2, #0
 800e194:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800e196:	4b53      	ldr	r3, [pc, #332]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e198:	2200      	movs	r2, #0
 800e19a:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800e19c:	2108      	movs	r1, #8
 800e19e:	187b      	adds	r3, r7, r1
 800e1a0:	2204      	movs	r2, #4
 800e1a2:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e1a4:	4b50      	ldr	r3, [pc, #320]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	781a      	ldrb	r2, [r3, #0]
 800e1aa:	187b      	adds	r3, r7, r1
 800e1ac:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e1ae:	187b      	adds	r3, r7, r1
 800e1b0:	0018      	movs	r0, r3
 800e1b2:	f004 fd9b 	bl	8012cec <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800e1b6:	4b4c      	ldr	r3, [pc, #304]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	785b      	ldrb	r3, [r3, #1]
 800e1bc:	0018      	movs	r0, r3
 800e1be:	f005 fc29 	bl	8013a14 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800e1c2:	4b49      	ldr	r3, [pc, #292]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d003      	beq.n	800e1d4 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800e1cc:	4b46      	ldr	r3, [pc, #280]	; (800e2e8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800e1d4:	4b49      	ldr	r3, [pc, #292]	; (800e2fc <LmhpComplianceOnMcpsIndication+0x3a8>)
 800e1d6:	6a1b      	ldr	r3, [r3, #32]
 800e1d8:	2002      	movs	r0, #2
 800e1da:	4798      	blx	r3
      }
      break;
 800e1dc:	e091      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	7b1b      	ldrb	r3, [r3, #12]
 800e1e2:	2b03      	cmp	r3, #3
 800e1e4:	d114      	bne.n	800e210 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800e1e6:	2154      	movs	r1, #84	; 0x54
 800e1e8:	187b      	adds	r3, r7, r1
 800e1ea:	2205      	movs	r2, #5
 800e1ec:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	021b      	lsls	r3, r3, #8
 800e1f8:	b21a      	sxth	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	3302      	adds	r3, #2
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	b21b      	sxth	r3, r3
 800e204:	4313      	orrs	r3, r2
 800e206:	b21b      	sxth	r3, r3
 800e208:	b29a      	uxth	r2, r3
 800e20a:	187b      	adds	r3, r7, r1
 800e20c:	809a      	strh	r2, [r3, #4]
 800e20e:	e031      	b.n	800e274 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	7b1b      	ldrb	r3, [r3, #12]
 800e214:	2b07      	cmp	r3, #7
 800e216:	d12d      	bne.n	800e274 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800e218:	2154      	movs	r1, #84	; 0x54
 800e21a:	187b      	adds	r3, r7, r1
 800e21c:	2206      	movs	r2, #6
 800e21e:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	3301      	adds	r3, #1
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	021b      	lsls	r3, r3, #8
 800e22a:	b21a      	sxth	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	689b      	ldr	r3, [r3, #8]
 800e230:	3302      	adds	r3, #2
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	b21b      	sxth	r3, r3
 800e236:	4313      	orrs	r3, r2
 800e238:	b21b      	sxth	r3, r3
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	187b      	adds	r3, r7, r1
 800e23e:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	3303      	adds	r3, #3
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	041a      	lsls	r2, r3, #16
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	689b      	ldr	r3, [r3, #8]
 800e24e:	3304      	adds	r3, #4
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	021b      	lsls	r3, r3, #8
 800e254:	431a      	orrs	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	3305      	adds	r3, #5
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	4313      	orrs	r3, r2
 800e260:	001a      	movs	r2, r3
 800e262:	2364      	movs	r3, #100	; 0x64
 800e264:	435a      	muls	r2, r3
 800e266:	187b      	adds	r3, r7, r1
 800e268:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	799a      	ldrb	r2, [r3, #6]
 800e270:	187b      	adds	r3, r7, r1
 800e272:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800e274:	2354      	movs	r3, #84	; 0x54
 800e276:	18fb      	adds	r3, r7, r3
 800e278:	0018      	movs	r0, r3
 800e27a:	f005 f925 	bl	80134c8 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800e27e:	4b19      	ldr	r3, [pc, #100]	; (800e2e4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e280:	2201      	movs	r2, #1
 800e282:	709a      	strb	r2, [r3, #2]
      }
      break;
 800e284:	e03d      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800e286:	2140      	movs	r1, #64	; 0x40
 800e288:	187b      	adds	r3, r7, r1
 800e28a:	220a      	movs	r2, #10
 800e28c:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800e28e:	187b      	adds	r3, r7, r1
 800e290:	0018      	movs	r0, r3
 800e292:	f005 f919 	bl	80134c8 <LoRaMacMlmeRequest>
      }
      break;
 800e296:	e034      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800e298:	2108      	movs	r1, #8
 800e29a:	187b      	adds	r3, r7, r1
 800e29c:	2200      	movs	r2, #0
 800e29e:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	781a      	ldrb	r2, [r3, #0]
 800e2a8:	187b      	adds	r3, r7, r1
 800e2aa:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e2ac:	187b      	adds	r3, r7, r1
 800e2ae:	0018      	movs	r0, r3
 800e2b0:	f004 fd1c 	bl	8012cec <LoRaMacMibSetRequestConfirm>
      }
      break;
 800e2b4:	e025      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e2b6:	212c      	movs	r1, #44	; 0x2c
 800e2b8:	187b      	adds	r3, r7, r1
 800e2ba:	220d      	movs	r2, #13
 800e2bc:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	785a      	ldrb	r2, [r3, #1]
 800e2c4:	187b      	adds	r3, r7, r1
 800e2c6:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800e2c8:	187b      	adds	r3, r7, r1
 800e2ca:	0018      	movs	r0, r3
 800e2cc:	f005 f8fc 	bl	80134c8 <LoRaMacMlmeRequest>
      }
      break;
 800e2d0:	e017      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e2d2:	46c0      	nop			; (mov r8, r8)
 800e2d4:	e015      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e2d6:	46c0      	nop			; (mov r8, r8)
 800e2d8:	e013      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e2da:	46c0      	nop			; (mov r8, r8)
 800e2dc:	e011      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800e2de:	46c0      	nop			; (mov r8, r8)
 800e2e0:	e00f      	b.n	800e302 <LmhpComplianceOnMcpsIndication+0x3ae>
 800e2e2:	46c0      	nop			; (mov r8, r8)
 800e2e4:	20000b84 	.word	0x20000b84
 800e2e8:	20000b98 	.word	0x20000b98
 800e2ec:	0800e313 	.word	0x0800e313
 800e2f0:	20000b6c 	.word	0x20000b6c
 800e2f4:	00004e20 	.word	0x00004e20
 800e2f8:	0801e764 	.word	0x0801e764
 800e2fc:	200001bc 	.word	0x200001bc
      break;
 800e300:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800e302:	46bd      	mov	sp, r7
 800e304:	b020      	add	sp, #128	; 0x80
 800e306:	bd80      	pop	{r7, pc}

0800e308 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800e30c:	46c0      	nop			; (mov r8, r8)
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b082      	sub	sp, #8
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800e31a:	f7ff fdad 	bl	800de78 <LmhpComplianceTxProcess>
}
 800e31e:	46c0      	nop			; (mov r8, r8)
 800e320:	46bd      	mov	sp, r7
 800e322:	b002      	add	sp, #8
 800e324:	bd80      	pop	{r7, pc}

0800e326 <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b082      	sub	sp, #8
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	0002      	movs	r2, r0
 800e32e:	1dfb      	adds	r3, r7, #7
 800e330:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e332:	46c0      	nop			; (mov r8, r8)
 800e334:	46bd      	mov	sp, r7
 800e336:	b002      	add	sp, #8
 800e338:	bd80      	pop	{r7, pc}

0800e33a <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800e33e:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e340:	0018      	movs	r0, r3
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800e34a:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e34c:	0018      	movs	r0, r3
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
	...

0800e354 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800e354:	b5b0      	push	{r4, r5, r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e35a:	f00e fa9d 	bl	801c898 <UTIL_TIMER_GetCurrentTime>
 800e35e:	0002      	movs	r2, r0
 800e360:	4b14      	ldr	r3, [pc, #80]	; (800e3b4 <OnRadioTxDone+0x60>)
 800e362:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e364:	4d14      	ldr	r5, [pc, #80]	; (800e3b8 <OnRadioTxDone+0x64>)
 800e366:	23ce      	movs	r3, #206	; 0xce
 800e368:	009c      	lsls	r4, r3, #2
 800e36a:	003b      	movs	r3, r7
 800e36c:	0018      	movs	r0, r3
 800e36e:	f00e f841 	bl	801c3f4 <SysTimeGet>
 800e372:	003a      	movs	r2, r7
 800e374:	192b      	adds	r3, r5, r4
 800e376:	ca03      	ldmia	r2!, {r0, r1}
 800e378:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e37a:	4b10      	ldr	r3, [pc, #64]	; (800e3bc <OnRadioTxDone+0x68>)
 800e37c:	781a      	ldrb	r2, [r3, #0]
 800e37e:	2110      	movs	r1, #16
 800e380:	430a      	orrs	r2, r1
 800e382:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e384:	4a0c      	ldr	r2, [pc, #48]	; (800e3b8 <OnRadioTxDone+0x64>)
 800e386:	23d2      	movs	r3, #210	; 0xd2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	58d3      	ldr	r3, [r2, r3]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00c      	beq.n	800e3aa <OnRadioTxDone+0x56>
 800e390:	4a09      	ldr	r2, [pc, #36]	; (800e3b8 <OnRadioTxDone+0x64>)
 800e392:	23d2      	movs	r3, #210	; 0xd2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	58d3      	ldr	r3, [r2, r3]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d005      	beq.n	800e3aa <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e39e:	4a06      	ldr	r2, [pc, #24]	; (800e3b8 <OnRadioTxDone+0x64>)
 800e3a0:	23d2      	movs	r3, #210	; 0xd2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	58d3      	ldr	r3, [r2, r3]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800e3aa:	46c0      	nop			; (mov r8, r8)
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	b002      	add	sp, #8
 800e3b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e3b2:	46c0      	nop			; (mov r8, r8)
 800e3b4:	20000b9c 	.word	0x20000b9c
 800e3b8:	20000bb0 	.word	0x20000bb0
 800e3bc:	200011e0 	.word	0x200011e0

0800e3c0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e3c0:	b5b0      	push	{r4, r5, r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	000c      	movs	r4, r1
 800e3ca:	0010      	movs	r0, r2
 800e3cc:	0019      	movs	r1, r3
 800e3ce:	250a      	movs	r5, #10
 800e3d0:	197b      	adds	r3, r7, r5
 800e3d2:	1c22      	adds	r2, r4, #0
 800e3d4:	801a      	strh	r2, [r3, #0]
 800e3d6:	2408      	movs	r4, #8
 800e3d8:	193b      	adds	r3, r7, r4
 800e3da:	1c02      	adds	r2, r0, #0
 800e3dc:	801a      	strh	r2, [r3, #0]
 800e3de:	1dfb      	adds	r3, r7, #7
 800e3e0:	1c0a      	adds	r2, r1, #0
 800e3e2:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e3e4:	f00e fa58 	bl	801c898 <UTIL_TIMER_GetCurrentTime>
 800e3e8:	0002      	movs	r2, r0
 800e3ea:	4b16      	ldr	r3, [pc, #88]	; (800e444 <OnRadioRxDone+0x84>)
 800e3ec:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800e3ee:	4b15      	ldr	r3, [pc, #84]	; (800e444 <OnRadioRxDone+0x84>)
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800e3f4:	4b13      	ldr	r3, [pc, #76]	; (800e444 <OnRadioRxDone+0x84>)
 800e3f6:	197a      	adds	r2, r7, r5
 800e3f8:	8812      	ldrh	r2, [r2, #0]
 800e3fa:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800e3fc:	4b11      	ldr	r3, [pc, #68]	; (800e444 <OnRadioRxDone+0x84>)
 800e3fe:	193a      	adds	r2, r7, r4
 800e400:	8812      	ldrh	r2, [r2, #0]
 800e402:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800e404:	4b0f      	ldr	r3, [pc, #60]	; (800e444 <OnRadioRxDone+0x84>)
 800e406:	1dfa      	adds	r2, r7, #7
 800e408:	7812      	ldrb	r2, [r2, #0]
 800e40a:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e40c:	4b0e      	ldr	r3, [pc, #56]	; (800e448 <OnRadioRxDone+0x88>)
 800e40e:	781a      	ldrb	r2, [r3, #0]
 800e410:	2108      	movs	r1, #8
 800e412:	430a      	orrs	r2, r1
 800e414:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e416:	4a0d      	ldr	r2, [pc, #52]	; (800e44c <OnRadioRxDone+0x8c>)
 800e418:	23d2      	movs	r3, #210	; 0xd2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	58d3      	ldr	r3, [r2, r3]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00c      	beq.n	800e43c <OnRadioRxDone+0x7c>
 800e422:	4a0a      	ldr	r2, [pc, #40]	; (800e44c <OnRadioRxDone+0x8c>)
 800e424:	23d2      	movs	r3, #210	; 0xd2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	58d3      	ldr	r3, [r2, r3]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d005      	beq.n	800e43c <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e430:	4a06      	ldr	r2, [pc, #24]	; (800e44c <OnRadioRxDone+0x8c>)
 800e432:	23d2      	movs	r3, #210	; 0xd2
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	58d3      	ldr	r3, [r2, r3]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800e43c:	46c0      	nop			; (mov r8, r8)
 800e43e:	46bd      	mov	sp, r7
 800e440:	b004      	add	sp, #16
 800e442:	bdb0      	pop	{r4, r5, r7, pc}
 800e444:	20000ba0 	.word	0x20000ba0
 800e448:	200011e0 	.word	0x200011e0
 800e44c:	20000bb0 	.word	0x20000bb0

0800e450 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e454:	4b0d      	ldr	r3, [pc, #52]	; (800e48c <OnRadioTxTimeout+0x3c>)
 800e456:	781a      	ldrb	r2, [r3, #0]
 800e458:	2104      	movs	r1, #4
 800e45a:	430a      	orrs	r2, r1
 800e45c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e45e:	4a0c      	ldr	r2, [pc, #48]	; (800e490 <OnRadioTxTimeout+0x40>)
 800e460:	23d2      	movs	r3, #210	; 0xd2
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	58d3      	ldr	r3, [r2, r3]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d00c      	beq.n	800e484 <OnRadioTxTimeout+0x34>
 800e46a:	4a09      	ldr	r2, [pc, #36]	; (800e490 <OnRadioTxTimeout+0x40>)
 800e46c:	23d2      	movs	r3, #210	; 0xd2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	58d3      	ldr	r3, [r2, r3]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d005      	beq.n	800e484 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e478:	4a05      	ldr	r2, [pc, #20]	; (800e490 <OnRadioTxTimeout+0x40>)
 800e47a:	23d2      	movs	r3, #210	; 0xd2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	58d3      	ldr	r3, [r2, r3]
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800e484:	46c0      	nop			; (mov r8, r8)
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	46c0      	nop			; (mov r8, r8)
 800e48c:	200011e0 	.word	0x200011e0
 800e490:	20000bb0 	.word	0x20000bb0

0800e494 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e498:	4b0d      	ldr	r3, [pc, #52]	; (800e4d0 <OnRadioRxError+0x3c>)
 800e49a:	781a      	ldrb	r2, [r3, #0]
 800e49c:	2102      	movs	r1, #2
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e4a2:	4a0c      	ldr	r2, [pc, #48]	; (800e4d4 <OnRadioRxError+0x40>)
 800e4a4:	23d2      	movs	r3, #210	; 0xd2
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	58d3      	ldr	r3, [r2, r3]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00c      	beq.n	800e4c8 <OnRadioRxError+0x34>
 800e4ae:	4a09      	ldr	r2, [pc, #36]	; (800e4d4 <OnRadioRxError+0x40>)
 800e4b0:	23d2      	movs	r3, #210	; 0xd2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	58d3      	ldr	r3, [r2, r3]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d005      	beq.n	800e4c8 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e4bc:	4a05      	ldr	r2, [pc, #20]	; (800e4d4 <OnRadioRxError+0x40>)
 800e4be:	23d2      	movs	r3, #210	; 0xd2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	58d3      	ldr	r3, [r2, r3]
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	4798      	blx	r3
    }
}
 800e4c8:	46c0      	nop			; (mov r8, r8)
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	46c0      	nop			; (mov r8, r8)
 800e4d0:	200011e0 	.word	0x200011e0
 800e4d4:	20000bb0 	.word	0x20000bb0

0800e4d8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e4dc:	4b0d      	ldr	r3, [pc, #52]	; (800e514 <OnRadioRxTimeout+0x3c>)
 800e4de:	781a      	ldrb	r2, [r3, #0]
 800e4e0:	2101      	movs	r1, #1
 800e4e2:	430a      	orrs	r2, r1
 800e4e4:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e4e6:	4a0c      	ldr	r2, [pc, #48]	; (800e518 <OnRadioRxTimeout+0x40>)
 800e4e8:	23d2      	movs	r3, #210	; 0xd2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	58d3      	ldr	r3, [r2, r3]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00c      	beq.n	800e50c <OnRadioRxTimeout+0x34>
 800e4f2:	4a09      	ldr	r2, [pc, #36]	; (800e518 <OnRadioRxTimeout+0x40>)
 800e4f4:	23d2      	movs	r3, #210	; 0xd2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	58d3      	ldr	r3, [r2, r3]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d005      	beq.n	800e50c <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e500:	4a05      	ldr	r2, [pc, #20]	; (800e518 <OnRadioRxTimeout+0x40>)
 800e502:	23d2      	movs	r3, #210	; 0xd2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	58d3      	ldr	r3, [r2, r3]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800e50c:	46c0      	nop			; (mov r8, r8)
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	46c0      	nop			; (mov r8, r8)
 800e514:	200011e0 	.word	0x200011e0
 800e518:	20000bb0 	.word	0x20000bb0

0800e51c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e520:	4b0a      	ldr	r3, [pc, #40]	; (800e54c <UpdateRxSlotIdleState+0x30>)
 800e522:	4a0b      	ldr	r2, [pc, #44]	; (800e550 <UpdateRxSlotIdleState+0x34>)
 800e524:	589b      	ldr	r3, [r3, r2]
 800e526:	227c      	movs	r2, #124	; 0x7c
 800e528:	5c9b      	ldrb	r3, [r3, r2]
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d005      	beq.n	800e53a <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e52e:	4a07      	ldr	r2, [pc, #28]	; (800e54c <UpdateRxSlotIdleState+0x30>)
 800e530:	2390      	movs	r3, #144	; 0x90
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	2106      	movs	r1, #6
 800e536:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e538:	e004      	b.n	800e544 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e53a:	4a04      	ldr	r2, [pc, #16]	; (800e54c <UpdateRxSlotIdleState+0x30>)
 800e53c:	2390      	movs	r3, #144	; 0x90
 800e53e:	00db      	lsls	r3, r3, #3
 800e540:	2102      	movs	r1, #2
 800e542:	54d1      	strb	r1, [r2, r3]
}
 800e544:	46c0      	nop			; (mov r8, r8)
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	46c0      	nop			; (mov r8, r8)
 800e54c:	20000bb0 	.word	0x20000bb0
 800e550:	00000484 	.word	0x00000484

0800e554 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e556:	b08f      	sub	sp, #60	; 0x3c
 800e558:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e55a:	4b59      	ldr	r3, [pc, #356]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e55c:	4a59      	ldr	r2, [pc, #356]	; (800e6c4 <ProcessRadioTxDone+0x170>)
 800e55e:	589b      	ldr	r3, [r3, r2]
 800e560:	227c      	movs	r2, #124	; 0x7c
 800e562:	5c9b      	ldrb	r3, [r3, r2]
 800e564:	2b02      	cmp	r3, #2
 800e566:	d002      	beq.n	800e56e <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800e568:	4b57      	ldr	r3, [pc, #348]	; (800e6c8 <ProcessRadioTxDone+0x174>)
 800e56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56c:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e56e:	4a54      	ldr	r2, [pc, #336]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e570:	23ec      	movs	r3, #236	; 0xec
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	58d2      	ldr	r2, [r2, r3]
 800e576:	4b55      	ldr	r3, [pc, #340]	; (800e6cc <ProcessRadioTxDone+0x178>)
 800e578:	0011      	movs	r1, r2
 800e57a:	0018      	movs	r0, r3
 800e57c:	f00e f8d4 	bl	801c728 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e580:	4b52      	ldr	r3, [pc, #328]	; (800e6cc <ProcessRadioTxDone+0x178>)
 800e582:	0018      	movs	r0, r3
 800e584:	f00d ffe0 	bl	801c548 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e588:	4a4d      	ldr	r2, [pc, #308]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e58a:	23ed      	movs	r3, #237	; 0xed
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	58d2      	ldr	r2, [r2, r3]
 800e590:	4b4f      	ldr	r3, [pc, #316]	; (800e6d0 <ProcessRadioTxDone+0x17c>)
 800e592:	0011      	movs	r1, r2
 800e594:	0018      	movs	r0, r3
 800e596:	f00e f8c7 	bl	801c728 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e59a:	4b4d      	ldr	r3, [pc, #308]	; (800e6d0 <ProcessRadioTxDone+0x17c>)
 800e59c:	0018      	movs	r0, r3
 800e59e:	f00d ffd3 	bl	801c548 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800e5a2:	4b47      	ldr	r3, [pc, #284]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e5a4:	4a47      	ldr	r2, [pc, #284]	; (800e6c4 <ProcessRadioTxDone+0x170>)
 800e5a6:	589b      	ldr	r3, [r3, r2]
 800e5a8:	227c      	movs	r2, #124	; 0x7c
 800e5aa:	5c9b      	ldrb	r3, [r3, r2]
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	d004      	beq.n	800e5ba <ProcessRadioTxDone+0x66>
 800e5b0:	4b43      	ldr	r3, [pc, #268]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e5b2:	4a48      	ldr	r2, [pc, #288]	; (800e6d4 <ProcessRadioTxDone+0x180>)
 800e5b4:	5c9b      	ldrb	r3, [r3, r2]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d021      	beq.n	800e5fe <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800e5ba:	2120      	movs	r1, #32
 800e5bc:	187b      	adds	r3, r7, r1
 800e5be:	2216      	movs	r2, #22
 800e5c0:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e5c2:	4b3f      	ldr	r3, [pc, #252]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e5c4:	4a3f      	ldr	r2, [pc, #252]	; (800e6c4 <ProcessRadioTxDone+0x170>)
 800e5c6:	589b      	ldr	r3, [r3, r2]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	187a      	adds	r2, r7, r1
 800e5cc:	0011      	movs	r1, r2
 800e5ce:	0018      	movs	r0, r3
 800e5d0:	f008 f837 	bl	8016642 <RegionGetPhyParam>
 800e5d4:	0003      	movs	r3, r0
 800e5d6:	001a      	movs	r2, r3
 800e5d8:	211c      	movs	r1, #28
 800e5da:	187b      	adds	r3, r7, r1
 800e5dc:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e5de:	4a38      	ldr	r2, [pc, #224]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e5e0:	23ed      	movs	r3, #237	; 0xed
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	58d2      	ldr	r2, [r2, r3]
 800e5e6:	187b      	adds	r3, r7, r1
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	18d2      	adds	r2, r2, r3
 800e5ec:	4b3a      	ldr	r3, [pc, #232]	; (800e6d8 <ProcessRadioTxDone+0x184>)
 800e5ee:	0011      	movs	r1, r2
 800e5f0:	0018      	movs	r0, r3
 800e5f2:	f00e f899 	bl	801c728 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800e5f6:	4b38      	ldr	r3, [pc, #224]	; (800e6d8 <ProcessRadioTxDone+0x184>)
 800e5f8:	0018      	movs	r0, r3
 800e5fa:	f00d ffa5 	bl	801c548 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800e5fe:	4b30      	ldr	r3, [pc, #192]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e600:	4a30      	ldr	r2, [pc, #192]	; (800e6c4 <ProcessRadioTxDone+0x170>)
 800e602:	589a      	ldr	r2, [r3, r2]
 800e604:	4b35      	ldr	r3, [pc, #212]	; (800e6dc <ProcessRadioTxDone+0x188>)
 800e606:	6819      	ldr	r1, [r3, #0]
 800e608:	23a8      	movs	r3, #168	; 0xa8
 800e60a:	005b      	lsls	r3, r3, #1
 800e60c:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e60e:	4b2c      	ldr	r3, [pc, #176]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e610:	4a33      	ldr	r2, [pc, #204]	; (800e6e0 <ProcessRadioTxDone+0x18c>)
 800e612:	5c9a      	ldrb	r2, [r3, r2]
 800e614:	2408      	movs	r4, #8
 800e616:	193b      	adds	r3, r7, r4
 800e618:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e61a:	4b30      	ldr	r3, [pc, #192]	; (800e6dc <ProcessRadioTxDone+0x188>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	193b      	adds	r3, r7, r4
 800e620:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800e622:	2328      	movs	r3, #40	; 0x28
 800e624:	18fb      	adds	r3, r7, r3
 800e626:	0018      	movs	r0, r3
 800e628:	f00d ff26 	bl	801c478 <SysTimeGetMcuTime>
 800e62c:	4b24      	ldr	r3, [pc, #144]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e62e:	4a25      	ldr	r2, [pc, #148]	; (800e6c4 <ProcessRadioTxDone+0x170>)
 800e630:	5898      	ldr	r0, [r3, r2]
 800e632:	193d      	adds	r5, r7, r4
 800e634:	003e      	movs	r6, r7
 800e636:	23ac      	movs	r3, #172	; 0xac
 800e638:	0059      	lsls	r1, r3, #1
 800e63a:	2328      	movs	r3, #40	; 0x28
 800e63c:	18fa      	adds	r2, r7, r3
 800e63e:	2404      	movs	r4, #4
 800e640:	1843      	adds	r3, r0, r1
 800e642:	191c      	adds	r4, r3, r4
 800e644:	466b      	mov	r3, sp
 800e646:	6824      	ldr	r4, [r4, #0]
 800e648:	601c      	str	r4, [r3, #0]
 800e64a:	5843      	ldr	r3, [r0, r1]
 800e64c:	6811      	ldr	r1, [r2, #0]
 800e64e:	6852      	ldr	r2, [r2, #4]
 800e650:	0030      	movs	r0, r6
 800e652:	f00d fe49 	bl	801c2e8 <SysTimeSub>
 800e656:	003a      	movs	r2, r7
 800e658:	002b      	movs	r3, r5
 800e65a:	330c      	adds	r3, #12
 800e65c:	ca21      	ldmia	r2!, {r0, r5}
 800e65e:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e660:	4a17      	ldr	r2, [pc, #92]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e662:	2383      	movs	r3, #131	; 0x83
 800e664:	00db      	lsls	r3, r3, #3
 800e666:	58d2      	ldr	r2, [r2, r3]
 800e668:	2108      	movs	r1, #8
 800e66a:	187b      	adds	r3, r7, r1
 800e66c:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800e66e:	187b      	adds	r3, r7, r1
 800e670:	2201      	movs	r2, #1
 800e672:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800e674:	4b12      	ldr	r3, [pc, #72]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e676:	4a13      	ldr	r2, [pc, #76]	; (800e6c4 <ProcessRadioTxDone+0x170>)
 800e678:	589a      	ldr	r2, [r3, r2]
 800e67a:	23b2      	movs	r3, #178	; 0xb2
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	5cd3      	ldrb	r3, [r2, r3]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d102      	bne.n	800e68a <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800e684:	187b      	adds	r3, r7, r1
 800e686:	2200      	movs	r2, #0
 800e688:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800e68a:	4b0d      	ldr	r3, [pc, #52]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e68c:	4a0d      	ldr	r2, [pc, #52]	; (800e6c4 <ProcessRadioTxDone+0x170>)
 800e68e:	589b      	ldr	r3, [r3, r2]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	2208      	movs	r2, #8
 800e694:	18ba      	adds	r2, r7, r2
 800e696:	0011      	movs	r1, r2
 800e698:	0018      	movs	r0, r3
 800e69a:	f007 fff9 	bl	8016690 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800e69e:	4b08      	ldr	r3, [pc, #32]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e6a0:	4a0c      	ldr	r2, [pc, #48]	; (800e6d4 <ProcessRadioTxDone+0x180>)
 800e6a2:	5c9b      	ldrb	r3, [r3, r2]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	4053      	eors	r3, r2
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e6ae:	4b04      	ldr	r3, [pc, #16]	; (800e6c0 <ProcessRadioTxDone+0x16c>)
 800e6b0:	4a0c      	ldr	r2, [pc, #48]	; (800e6e4 <ProcessRadioTxDone+0x190>)
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	5499      	strb	r1, [r3, r2]
    }
}
 800e6b6:	46c0      	nop			; (mov r8, r8)
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	b00d      	add	sp, #52	; 0x34
 800e6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6be:	46c0      	nop			; (mov r8, r8)
 800e6c0:	20000bb0 	.word	0x20000bb0
 800e6c4:	00000484 	.word	0x00000484
 800e6c8:	0801ec78 	.word	0x0801ec78
 800e6cc:	20000f30 	.word	0x20000f30
 800e6d0:	20000f48 	.word	0x20000f48
 800e6d4:	00000414 	.word	0x00000414
 800e6d8:	20000fa8 	.word	0x20000fa8
 800e6dc:	20000b9c 	.word	0x20000b9c
 800e6e0:	00000415 	.word	0x00000415
 800e6e4:	0000043d 	.word	0x0000043d

0800e6e8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e6ec:	4a11      	ldr	r2, [pc, #68]	; (800e734 <PrepareRxDoneAbort+0x4c>)
 800e6ee:	23d0      	movs	r3, #208	; 0xd0
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	58d3      	ldr	r3, [r2, r3]
 800e6f4:	2280      	movs	r2, #128	; 0x80
 800e6f6:	431a      	orrs	r2, r3
 800e6f8:	0011      	movs	r1, r2
 800e6fa:	4a0e      	ldr	r2, [pc, #56]	; (800e734 <PrepareRxDoneAbort+0x4c>)
 800e6fc:	23d0      	movs	r3, #208	; 0xd0
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800e702:	4b0c      	ldr	r3, [pc, #48]	; (800e734 <PrepareRxDoneAbort+0x4c>)
 800e704:	4a0c      	ldr	r2, [pc, #48]	; (800e738 <PrepareRxDoneAbort+0x50>)
 800e706:	5c9b      	ldrb	r3, [r3, r2]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800e70c:	2000      	movs	r0, #0
 800e70e:	f001 f98d 	bl	800fa2c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e712:	4b08      	ldr	r3, [pc, #32]	; (800e734 <PrepareRxDoneAbort+0x4c>)
 800e714:	4a09      	ldr	r2, [pc, #36]	; (800e73c <PrepareRxDoneAbort+0x54>)
 800e716:	5c99      	ldrb	r1, [r3, r2]
 800e718:	2002      	movs	r0, #2
 800e71a:	4301      	orrs	r1, r0
 800e71c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e71e:	4b05      	ldr	r3, [pc, #20]	; (800e734 <PrepareRxDoneAbort+0x4c>)
 800e720:	4a06      	ldr	r2, [pc, #24]	; (800e73c <PrepareRxDoneAbort+0x54>)
 800e722:	5c99      	ldrb	r1, [r3, r2]
 800e724:	2020      	movs	r0, #32
 800e726:	4301      	orrs	r1, r0
 800e728:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800e72a:	f7ff fef7 	bl	800e51c <UpdateRxSlotIdleState>
}
 800e72e:	46c0      	nop			; (mov r8, r8)
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20000bb0 	.word	0x20000bb0
 800e738:	00000414 	.word	0x00000414
 800e73c:	00000481 	.word	0x00000481

0800e740 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e742:	b0a7      	sub	sp, #156	; 0x9c
 800e744:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e746:	2380      	movs	r3, #128	; 0x80
 800e748:	18fb      	adds	r3, r7, r3
 800e74a:	2213      	movs	r2, #19
 800e74c:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e74e:	4bdf      	ldr	r3, [pc, #892]	; (800eacc <ProcessRadioRxDone+0x38c>)
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800e754:	267a      	movs	r6, #122	; 0x7a
 800e756:	19bb      	adds	r3, r7, r6
 800e758:	4adc      	ldr	r2, [pc, #880]	; (800eacc <ProcessRadioRxDone+0x38c>)
 800e75a:	8912      	ldrh	r2, [r2, #8]
 800e75c:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800e75e:	2478      	movs	r4, #120	; 0x78
 800e760:	193b      	adds	r3, r7, r4
 800e762:	4ada      	ldr	r2, [pc, #872]	; (800eacc <ProcessRadioRxDone+0x38c>)
 800e764:	8952      	ldrh	r2, [r2, #10]
 800e766:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800e768:	2577      	movs	r5, #119	; 0x77
 800e76a:	197b      	adds	r3, r7, r5
 800e76c:	4ad7      	ldr	r2, [pc, #860]	; (800eacc <ProcessRadioRxDone+0x38c>)
 800e76e:	7b12      	ldrb	r2, [r2, #12]
 800e770:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800e772:	2376      	movs	r3, #118	; 0x76
 800e774:	18fb      	adds	r3, r7, r3
 800e776:	2200      	movs	r2, #0
 800e778:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800e77a:	2300      	movs	r3, #0
 800e77c:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800e77e:	4bd4      	ldr	r3, [pc, #848]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e780:	4ad4      	ldr	r2, [pc, #848]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e782:	589b      	ldr	r3, [r3, r2]
 800e784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e786:	2284      	movs	r2, #132	; 0x84
 800e788:	18ba      	adds	r2, r7, r2
 800e78a:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800e78c:	2383      	movs	r3, #131	; 0x83
 800e78e:	18fb      	adds	r3, r7, r3
 800e790:	2200      	movs	r2, #0
 800e792:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e794:	2382      	movs	r3, #130	; 0x82
 800e796:	18fb      	adds	r3, r7, r3
 800e798:	2201      	movs	r2, #1
 800e79a:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800e79c:	4acc      	ldr	r2, [pc, #816]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e79e:	2388      	movs	r3, #136	; 0x88
 800e7a0:	00db      	lsls	r3, r3, #3
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800e7a6:	4bca      	ldr	r3, [pc, #808]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7a8:	193a      	adds	r2, r7, r4
 800e7aa:	49cb      	ldr	r1, [pc, #812]	; (800ead8 <ProcessRadioRxDone+0x398>)
 800e7ac:	8812      	ldrh	r2, [r2, #0]
 800e7ae:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800e7b0:	4bc7      	ldr	r3, [pc, #796]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7b2:	197a      	adds	r2, r7, r5
 800e7b4:	49c9      	ldr	r1, [pc, #804]	; (800eadc <ProcessRadioRxDone+0x39c>)
 800e7b6:	7812      	ldrb	r2, [r2, #0]
 800e7b8:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800e7ba:	4ac5      	ldr	r2, [pc, #788]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7bc:	2390      	movs	r3, #144	; 0x90
 800e7be:	00db      	lsls	r3, r3, #3
 800e7c0:	5cd1      	ldrb	r1, [r2, r3]
 800e7c2:	4bc3      	ldr	r3, [pc, #780]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7c4:	4ac6      	ldr	r2, [pc, #792]	; (800eae0 <ProcessRadioRxDone+0x3a0>)
 800e7c6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800e7c8:	4bc1      	ldr	r3, [pc, #772]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7ca:	4ac6      	ldr	r2, [pc, #792]	; (800eae4 <ProcessRadioRxDone+0x3a4>)
 800e7cc:	2100      	movs	r1, #0
 800e7ce:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800e7d0:	4bbf      	ldr	r3, [pc, #764]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7d2:	4ac5      	ldr	r2, [pc, #788]	; (800eae8 <ProcessRadioRxDone+0x3a8>)
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800e7d8:	4bbd      	ldr	r3, [pc, #756]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7da:	4ac4      	ldr	r2, [pc, #784]	; (800eaec <ProcessRadioRxDone+0x3ac>)
 800e7dc:	2100      	movs	r1, #0
 800e7de:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800e7e0:	4bbb      	ldr	r3, [pc, #748]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7e2:	4ac3      	ldr	r2, [pc, #780]	; (800eaf0 <ProcessRadioRxDone+0x3b0>)
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800e7e8:	4ab9      	ldr	r2, [pc, #740]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7ea:	2385      	movs	r3, #133	; 0x85
 800e7ec:	00db      	lsls	r3, r3, #3
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800e7f2:	4bb7      	ldr	r3, [pc, #732]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7f4:	4abf      	ldr	r2, [pc, #764]	; (800eaf4 <ProcessRadioRxDone+0x3b4>)
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800e7fa:	4bb5      	ldr	r3, [pc, #724]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e7fc:	4abe      	ldr	r2, [pc, #760]	; (800eaf8 <ProcessRadioRxDone+0x3b8>)
 800e7fe:	2100      	movs	r1, #0
 800e800:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e802:	4ab3      	ldr	r2, [pc, #716]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e804:	2386      	movs	r3, #134	; 0x86
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	2100      	movs	r1, #0
 800e80a:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e80c:	4bb0      	ldr	r3, [pc, #704]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e80e:	4abb      	ldr	r2, [pc, #748]	; (800eafc <ProcessRadioRxDone+0x3bc>)
 800e810:	2100      	movs	r1, #0
 800e812:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800e814:	4bae      	ldr	r3, [pc, #696]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e816:	4aba      	ldr	r2, [pc, #744]	; (800eb00 <ProcessRadioRxDone+0x3c0>)
 800e818:	2100      	movs	r1, #0
 800e81a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e81c:	4aac      	ldr	r2, [pc, #688]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e81e:	2387      	movs	r3, #135	; 0x87
 800e820:	00db      	lsls	r3, r3, #3
 800e822:	2100      	movs	r1, #0
 800e824:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800e826:	4bb7      	ldr	r3, [pc, #732]	; (800eb04 <ProcessRadioRxDone+0x3c4>)
 800e828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e82c:	4bb6      	ldr	r3, [pc, #728]	; (800eb08 <ProcessRadioRxDone+0x3c8>)
 800e82e:	0018      	movs	r0, r3
 800e830:	f00d ff02 	bl	801c638 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e834:	19bb      	adds	r3, r7, r6
 800e836:	881a      	ldrh	r2, [r3, #0]
 800e838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e83a:	0011      	movs	r1, r2
 800e83c:	0018      	movs	r0, r3
 800e83e:	f005 fa57 	bl	8013cf0 <LoRaMacClassBRxBeacon>
 800e842:	1e03      	subs	r3, r0, #0
 800e844:	d00c      	beq.n	800e860 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e846:	4ba2      	ldr	r3, [pc, #648]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e848:	193a      	adds	r2, r7, r4
 800e84a:	49b0      	ldr	r1, [pc, #704]	; (800eb0c <ProcessRadioRxDone+0x3cc>)
 800e84c:	8812      	ldrh	r2, [r2, #0]
 800e84e:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e850:	4a9f      	ldr	r2, [pc, #636]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e852:	1979      	adds	r1, r7, r5
 800e854:	238f      	movs	r3, #143	; 0x8f
 800e856:	00db      	lsls	r3, r3, #3
 800e858:	7809      	ldrb	r1, [r1, #0]
 800e85a:	54d1      	strb	r1, [r2, r3]
        return;
 800e85c:	f000 fc9e 	bl	800f19c <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800e860:	4b9b      	ldr	r3, [pc, #620]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e862:	4a9c      	ldr	r2, [pc, #624]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e864:	589b      	ldr	r3, [r3, r2]
 800e866:	227c      	movs	r2, #124	; 0x7c
 800e868:	5c9b      	ldrb	r3, [r3, r2]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d11c      	bne.n	800e8a8 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e86e:	f005 fa51 	bl	8013d14 <LoRaMacClassBIsPingExpected>
 800e872:	1e03      	subs	r3, r0, #0
 800e874:	d00a      	beq.n	800e88c <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e876:	2000      	movs	r0, #0
 800e878:	f005 fa08 	bl	8013c8c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e87c:	2000      	movs	r0, #0
 800e87e:	f005 fa27 	bl	8013cd0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e882:	4b93      	ldr	r3, [pc, #588]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e884:	4a96      	ldr	r2, [pc, #600]	; (800eae0 <ProcessRadioRxDone+0x3a0>)
 800e886:	2104      	movs	r1, #4
 800e888:	5499      	strb	r1, [r3, r2]
 800e88a:	e00d      	b.n	800e8a8 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e88c:	f005 fa48 	bl	8013d20 <LoRaMacClassBIsMulticastExpected>
 800e890:	1e03      	subs	r3, r0, #0
 800e892:	d009      	beq.n	800e8a8 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e894:	2000      	movs	r0, #0
 800e896:	f005 fa03 	bl	8013ca0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e89a:	2000      	movs	r0, #0
 800e89c:	f005 fa20 	bl	8013ce0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e8a0:	4b8b      	ldr	r3, [pc, #556]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e8a2:	4a8f      	ldr	r2, [pc, #572]	; (800eae0 <ProcessRadioRxDone+0x3a0>)
 800e8a4:	2105      	movs	r1, #5
 800e8a6:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e8a8:	2276      	movs	r2, #118	; 0x76
 800e8aa:	18bb      	adds	r3, r7, r2
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	18ba      	adds	r2, r7, r2
 800e8b0:	1c59      	adds	r1, r3, #1
 800e8b2:	7011      	strb	r1, [r2, #0]
 800e8b4:	001a      	movs	r2, r3
 800e8b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8b8:	189b      	adds	r3, r3, r2
 800e8ba:	781a      	ldrb	r2, [r3, #0]
 800e8bc:	2174      	movs	r1, #116	; 0x74
 800e8be:	187b      	adds	r3, r7, r1
 800e8c0:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800e8c2:	187b      	adds	r3, r7, r1
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	061b      	lsls	r3, r3, #24
 800e8c8:	0f5b      	lsrs	r3, r3, #29
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	2b07      	cmp	r3, #7
 800e8ce:	d101      	bne.n	800e8d4 <ProcessRadioRxDone+0x194>
 800e8d0:	f000 fc0c 	bl	800f0ec <ProcessRadioRxDone+0x9ac>
 800e8d4:	dd01      	ble.n	800e8da <ProcessRadioRxDone+0x19a>
 800e8d6:	f000 fc38 	bl	800f14a <ProcessRadioRxDone+0xa0a>
 800e8da:	2b05      	cmp	r3, #5
 800e8dc:	d100      	bne.n	800e8e0 <ProcessRadioRxDone+0x1a0>
 800e8de:	e119      	b.n	800eb14 <ProcessRadioRxDone+0x3d4>
 800e8e0:	dd01      	ble.n	800e8e6 <ProcessRadioRxDone+0x1a6>
 800e8e2:	f000 fc32 	bl	800f14a <ProcessRadioRxDone+0xa0a>
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d004      	beq.n	800e8f4 <ProcessRadioRxDone+0x1b4>
 800e8ea:	2b03      	cmp	r3, #3
 800e8ec:	d100      	bne.n	800e8f0 <ProcessRadioRxDone+0x1b0>
 800e8ee:	e115      	b.n	800eb1c <ProcessRadioRxDone+0x3dc>
 800e8f0:	f000 fc2b 	bl	800f14a <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e8f4:	237a      	movs	r3, #122	; 0x7a
 800e8f6:	18fb      	adds	r3, r7, r3
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	2b10      	cmp	r3, #16
 800e8fc:	d807      	bhi.n	800e90e <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8fe:	4b74      	ldr	r3, [pc, #464]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e900:	4a83      	ldr	r2, [pc, #524]	; (800eb10 <ProcessRadioRxDone+0x3d0>)
 800e902:	2101      	movs	r1, #1
 800e904:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800e906:	f7ff feef 	bl	800e6e8 <PrepareRxDoneAbort>
                return;
 800e90a:	f000 fc47 	bl	800f19c <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800e90e:	2108      	movs	r1, #8
 800e910:	187b      	adds	r3, r7, r1
 800e912:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e914:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800e916:	237a      	movs	r3, #122	; 0x7a
 800e918:	18fb      	adds	r3, r7, r3
 800e91a:	881b      	ldrh	r3, [r3, #0]
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	187b      	adds	r3, r7, r1
 800e920:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800e922:	4b6b      	ldr	r3, [pc, #428]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e924:	4a6b      	ldr	r2, [pc, #428]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e926:	589a      	ldr	r2, [r3, r2]
 800e928:	23b2      	movs	r3, #178	; 0xb2
 800e92a:	005b      	lsls	r3, r3, #1
 800e92c:	5cd3      	ldrb	r3, [r2, r3]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d007      	beq.n	800e942 <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e932:	4b67      	ldr	r3, [pc, #412]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e934:	4a76      	ldr	r2, [pc, #472]	; (800eb10 <ProcessRadioRxDone+0x3d0>)
 800e936:	2101      	movs	r1, #1
 800e938:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800e93a:	f7ff fed5 	bl	800e6e8 <PrepareRxDoneAbort>
                return;
 800e93e:	f000 fc2d 	bl	800f19c <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800e942:	f7fe fbef 	bl	800d124 <SecureElementGetJoinEui>
 800e946:	0001      	movs	r1, r0
 800e948:	2680      	movs	r6, #128	; 0x80
 800e94a:	19bc      	adds	r4, r7, r6
 800e94c:	2508      	movs	r5, #8
 800e94e:	197b      	adds	r3, r7, r5
 800e950:	001a      	movs	r2, r3
 800e952:	20ff      	movs	r0, #255	; 0xff
 800e954:	f006 ff3a 	bl	80157cc <LoRaMacCryptoHandleJoinAccept>
 800e958:	0003      	movs	r3, r0
 800e95a:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e95c:	19bb      	adds	r3, r7, r6
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d000      	beq.n	800e966 <ProcessRadioRxDone+0x226>
 800e964:	e0a7      	b.n	800eab6 <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e966:	002c      	movs	r4, r5
 800e968:	193b      	adds	r3, r7, r4
 800e96a:	7a59      	ldrb	r1, [r3, #9]
 800e96c:	4b58      	ldr	r3, [pc, #352]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e96e:	4a59      	ldr	r2, [pc, #356]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e970:	589b      	ldr	r3, [r3, r2]
 800e972:	000a      	movs	r2, r1
 800e974:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e976:	4b56      	ldr	r3, [pc, #344]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e978:	4a56      	ldr	r2, [pc, #344]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e97a:	589b      	ldr	r3, [r3, r2]
 800e97c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800e97e:	193b      	adds	r3, r7, r4
 800e980:	7a9b      	ldrb	r3, [r3, #10]
 800e982:	021a      	lsls	r2, r3, #8
 800e984:	4b52      	ldr	r3, [pc, #328]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e986:	4853      	ldr	r0, [pc, #332]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e988:	581b      	ldr	r3, [r3, r0]
 800e98a:	430a      	orrs	r2, r1
 800e98c:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e98e:	4b50      	ldr	r3, [pc, #320]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e990:	4a50      	ldr	r2, [pc, #320]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e992:	589b      	ldr	r3, [r3, r2]
 800e994:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800e996:	193b      	adds	r3, r7, r4
 800e998:	7adb      	ldrb	r3, [r3, #11]
 800e99a:	041a      	lsls	r2, r3, #16
 800e99c:	4b4c      	ldr	r3, [pc, #304]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e99e:	484d      	ldr	r0, [pc, #308]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e9a0:	581b      	ldr	r3, [r3, r0]
 800e9a2:	430a      	orrs	r2, r1
 800e9a4:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800e9a6:	4b4a      	ldr	r3, [pc, #296]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e9a8:	4a4a      	ldr	r2, [pc, #296]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e9aa:	589b      	ldr	r3, [r3, r2]
 800e9ac:	0020      	movs	r0, r4
 800e9ae:	183a      	adds	r2, r7, r0
 800e9b0:	68d2      	ldr	r2, [r2, #12]
 800e9b2:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e9b4:	183b      	adds	r3, r7, r0
 800e9b6:	7c1b      	ldrb	r3, [r3, #16]
 800e9b8:	065b      	lsls	r3, r3, #25
 800e9ba:	0f5b      	lsrs	r3, r3, #29
 800e9bc:	b2d9      	uxtb	r1, r3
 800e9be:	4b44      	ldr	r3, [pc, #272]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e9c0:	4a44      	ldr	r2, [pc, #272]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e9c2:	589b      	ldr	r3, [r3, r2]
 800e9c4:	22a5      	movs	r2, #165	; 0xa5
 800e9c6:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e9c8:	183b      	adds	r3, r7, r0
 800e9ca:	7c1b      	ldrb	r3, [r3, #16]
 800e9cc:	071b      	lsls	r3, r3, #28
 800e9ce:	0f1b      	lsrs	r3, r3, #28
 800e9d0:	b2d9      	uxtb	r1, r3
 800e9d2:	4b3f      	ldr	r3, [pc, #252]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e9d4:	4a3f      	ldr	r2, [pc, #252]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e9d6:	589b      	ldr	r3, [r3, r2]
 800e9d8:	22ac      	movs	r2, #172	; 0xac
 800e9da:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e9dc:	183b      	adds	r3, r7, r0
 800e9de:	7c1b      	ldrb	r3, [r3, #16]
 800e9e0:	071b      	lsls	r3, r3, #28
 800e9e2:	0f1b      	lsrs	r3, r3, #28
 800e9e4:	b2d9      	uxtb	r1, r3
 800e9e6:	4b3a      	ldr	r3, [pc, #232]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e9e8:	4a3a      	ldr	r2, [pc, #232]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e9ea:	589b      	ldr	r3, [r3, r2]
 800e9ec:	22b4      	movs	r2, #180	; 0xb4
 800e9ee:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e9f0:	183b      	adds	r3, r7, r0
 800e9f2:	7c59      	ldrb	r1, [r3, #17]
 800e9f4:	4b36      	ldr	r3, [pc, #216]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800e9f6:	4a37      	ldr	r2, [pc, #220]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800e9f8:	589b      	ldr	r3, [r3, r2]
 800e9fa:	2294      	movs	r2, #148	; 0x94
 800e9fc:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800e9fe:	4b34      	ldr	r3, [pc, #208]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea00:	4a34      	ldr	r2, [pc, #208]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea02:	589b      	ldr	r3, [r3, r2]
 800ea04:	2294      	movs	r2, #148	; 0x94
 800ea06:	589b      	ldr	r3, [r3, r2]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d105      	bne.n	800ea18 <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800ea0c:	4b30      	ldr	r3, [pc, #192]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea0e:	4a31      	ldr	r2, [pc, #196]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea10:	589b      	ldr	r3, [r3, r2]
 800ea12:	2294      	movs	r2, #148	; 0x94
 800ea14:	2101      	movs	r1, #1
 800ea16:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800ea18:	4b2d      	ldr	r3, [pc, #180]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea1a:	4a2e      	ldr	r2, [pc, #184]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea1c:	589b      	ldr	r3, [r3, r2]
 800ea1e:	2294      	movs	r2, #148	; 0x94
 800ea20:	589a      	ldr	r2, [r3, r2]
 800ea22:	4b2b      	ldr	r3, [pc, #172]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea24:	492b      	ldr	r1, [pc, #172]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea26:	5859      	ldr	r1, [r3, r1]
 800ea28:	0013      	movs	r3, r2
 800ea2a:	015b      	lsls	r3, r3, #5
 800ea2c:	1a9b      	subs	r3, r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	189b      	adds	r3, r3, r2
 800ea32:	00db      	lsls	r3, r3, #3
 800ea34:	001a      	movs	r2, r3
 800ea36:	2394      	movs	r3, #148	; 0x94
 800ea38:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800ea3a:	4b25      	ldr	r3, [pc, #148]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea3c:	4a25      	ldr	r2, [pc, #148]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea3e:	589b      	ldr	r3, [r3, r2]
 800ea40:	2294      	movs	r2, #148	; 0x94
 800ea42:	589b      	ldr	r3, [r3, r2]
 800ea44:	4a22      	ldr	r2, [pc, #136]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea46:	4923      	ldr	r1, [pc, #140]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea48:	5852      	ldr	r2, [r2, r1]
 800ea4a:	21fa      	movs	r1, #250	; 0xfa
 800ea4c:	0089      	lsls	r1, r1, #2
 800ea4e:	468c      	mov	ip, r1
 800ea50:	4463      	add	r3, ip
 800ea52:	2198      	movs	r1, #152	; 0x98
 800ea54:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800ea56:	4b1e      	ldr	r3, [pc, #120]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea58:	4a1e      	ldr	r2, [pc, #120]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea5a:	589a      	ldr	r2, [r3, r2]
 800ea5c:	23b1      	movs	r3, #177	; 0xb1
 800ea5e:	005b      	lsls	r3, r3, #1
 800ea60:	2100      	movs	r1, #0
 800ea62:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ea64:	216c      	movs	r1, #108	; 0x6c
 800ea66:	187b      	adds	r3, r7, r1
 800ea68:	2208      	movs	r2, #8
 800ea6a:	18ba      	adds	r2, r7, r2
 800ea6c:	3212      	adds	r2, #18
 800ea6e:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ea70:	237a      	movs	r3, #122	; 0x7a
 800ea72:	18fb      	adds	r3, r7, r3
 800ea74:	881b      	ldrh	r3, [r3, #0]
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	3b11      	subs	r3, #17
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	187b      	adds	r3, r7, r1
 800ea7e:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800ea80:	4b13      	ldr	r3, [pc, #76]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea82:	4a14      	ldr	r2, [pc, #80]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea84:	589b      	ldr	r3, [r3, r2]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	187a      	adds	r2, r7, r1
 800ea8a:	0011      	movs	r1, r2
 800ea8c:	0018      	movs	r0, r3
 800ea8e:	f007 fe5b 	bl	8016748 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ea92:	4b0f      	ldr	r3, [pc, #60]	; (800ead0 <ProcessRadioRxDone+0x390>)
 800ea94:	4a0f      	ldr	r2, [pc, #60]	; (800ead4 <ProcessRadioRxDone+0x394>)
 800ea96:	589a      	ldr	r2, [r3, r2]
 800ea98:	23b2      	movs	r3, #178	; 0xb2
 800ea9a:	005b      	lsls	r3, r3, #1
 800ea9c:	2102      	movs	r1, #2
 800ea9e:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eaa0:	2001      	movs	r0, #1
 800eaa2:	f005 feaf 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 800eaa6:	1e03      	subs	r3, r0, #0
 800eaa8:	d100      	bne.n	800eaac <ProcessRadioRxDone+0x36c>
 800eaaa:	e355      	b.n	800f158 <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800eaac:	2101      	movs	r1, #1
 800eaae:	2000      	movs	r0, #0
 800eab0:	f005 fe0c 	bl	80146cc <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800eab4:	e350      	b.n	800f158 <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eab6:	2001      	movs	r0, #1
 800eab8:	f005 fea4 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 800eabc:	1e03      	subs	r3, r0, #0
 800eabe:	d100      	bne.n	800eac2 <ProcessRadioRxDone+0x382>
 800eac0:	e34a      	b.n	800f158 <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800eac2:	2101      	movs	r1, #1
 800eac4:	2007      	movs	r0, #7
 800eac6:	f005 fe01 	bl	80146cc <LoRaMacConfirmQueueSetStatus>
            break;
 800eaca:	e345      	b.n	800f158 <ProcessRadioRxDone+0xa18>
 800eacc:	20000ba0 	.word	0x20000ba0
 800ead0:	20000bb0 	.word	0x20000bb0
 800ead4:	00000484 	.word	0x00000484
 800ead8:	0000042a 	.word	0x0000042a
 800eadc:	0000042c 	.word	0x0000042c
 800eae0:	0000042d 	.word	0x0000042d
 800eae4:	0000041f 	.word	0x0000041f
 800eae8:	0000041e 	.word	0x0000041e
 800eaec:	00000421 	.word	0x00000421
 800eaf0:	00000424 	.word	0x00000424
 800eaf4:	00000429 	.word	0x00000429
 800eaf8:	0000042e 	.word	0x0000042e
 800eafc:	0000041c 	.word	0x0000041c
 800eb00:	00000434 	.word	0x00000434
 800eb04:	0801ec78 	.word	0x0801ec78
 800eb08:	20000f48 	.word	0x20000f48
 800eb0c:	00000476 	.word	0x00000476
 800eb10:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800eb14:	4bd5      	ldr	r3, [pc, #852]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800eb16:	4ad6      	ldr	r2, [pc, #856]	; (800ee70 <ProcessRadioRxDone+0x730>)
 800eb18:	2101      	movs	r1, #1
 800eb1a:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800eb1c:	4bd3      	ldr	r3, [pc, #844]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800eb1e:	4ad5      	ldr	r2, [pc, #852]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800eb20:	589b      	ldr	r3, [r3, r2]
 800eb22:	22b9      	movs	r2, #185	; 0xb9
 800eb24:	5c9a      	ldrb	r2, [r3, r2]
 800eb26:	2164      	movs	r1, #100	; 0x64
 800eb28:	187b      	adds	r3, r7, r1
 800eb2a:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800eb2c:	4acf      	ldr	r2, [pc, #828]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800eb2e:	2384      	movs	r3, #132	; 0x84
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	5cd3      	ldrb	r3, [r2, r3]
 800eb34:	b25a      	sxtb	r2, r3
 800eb36:	187b      	adds	r3, r7, r1
 800eb38:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800eb3a:	187b      	adds	r3, r7, r1
 800eb3c:	220d      	movs	r2, #13
 800eb3e:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800eb40:	4bca      	ldr	r3, [pc, #808]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800eb42:	4acc      	ldr	r2, [pc, #816]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800eb44:	589b      	ldr	r3, [r3, r2]
 800eb46:	22ca      	movs	r2, #202	; 0xca
 800eb48:	5c9b      	ldrb	r3, [r3, r2]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800eb4e:	187b      	adds	r3, r7, r1
 800eb50:	220e      	movs	r2, #14
 800eb52:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800eb54:	4bc5      	ldr	r3, [pc, #788]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800eb56:	4ac7      	ldr	r2, [pc, #796]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800eb58:	589b      	ldr	r3, [r3, r2]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2264      	movs	r2, #100	; 0x64
 800eb5e:	18ba      	adds	r2, r7, r2
 800eb60:	0011      	movs	r1, r2
 800eb62:	0018      	movs	r0, r3
 800eb64:	f007 fd6d 	bl	8016642 <RegionGetPhyParam>
 800eb68:	0003      	movs	r3, r0
 800eb6a:	001a      	movs	r2, r3
 800eb6c:	2360      	movs	r3, #96	; 0x60
 800eb6e:	18fb      	adds	r3, r7, r3
 800eb70:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800eb72:	237a      	movs	r3, #122	; 0x7a
 800eb74:	18fb      	adds	r3, r7, r3
 800eb76:	881b      	ldrh	r3, [r3, #0]
 800eb78:	3b0d      	subs	r3, #13
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	b21b      	sxth	r3, r3
 800eb7e:	1c1a      	adds	r2, r3, #0
 800eb80:	b213      	sxth	r3, r2
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	da01      	bge.n	800eb8a <ProcessRadioRxDone+0x44a>
 800eb86:	2300      	movs	r3, #0
 800eb88:	1c1a      	adds	r2, r3, #0
 800eb8a:	b212      	sxth	r2, r2
 800eb8c:	2360      	movs	r3, #96	; 0x60
 800eb8e:	18fb      	adds	r3, r7, r3
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	b21b      	sxth	r3, r3
 800eb94:	429a      	cmp	r2, r3
 800eb96:	dc04      	bgt.n	800eba2 <ProcessRadioRxDone+0x462>
 800eb98:	237a      	movs	r3, #122	; 0x7a
 800eb9a:	18fb      	adds	r3, r7, r3
 800eb9c:	881b      	ldrh	r3, [r3, #0]
 800eb9e:	2b0b      	cmp	r3, #11
 800eba0:	d806      	bhi.n	800ebb0 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eba2:	4bb2      	ldr	r3, [pc, #712]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800eba4:	4ab4      	ldr	r2, [pc, #720]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800eba6:	2101      	movs	r1, #1
 800eba8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ebaa:	f7ff fd9d 	bl	800e6e8 <PrepareRxDoneAbort>
                return;
 800ebae:	e2f5      	b.n	800f19c <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800ebb0:	2130      	movs	r1, #48	; 0x30
 800ebb2:	187b      	adds	r3, r7, r1
 800ebb4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ebb6:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800ebb8:	237a      	movs	r3, #122	; 0x7a
 800ebba:	18fb      	adds	r3, r7, r3
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	187b      	adds	r3, r7, r1
 800ebc2:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ebc4:	187b      	adds	r3, r7, r1
 800ebc6:	4aad      	ldr	r2, [pc, #692]	; (800ee7c <ProcessRadioRxDone+0x73c>)
 800ebc8:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ebca:	0008      	movs	r0, r1
 800ebcc:	187b      	adds	r3, r7, r1
 800ebce:	2228      	movs	r2, #40	; 0x28
 800ebd0:	21ff      	movs	r1, #255	; 0xff
 800ebd2:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ebd4:	183b      	adds	r3, r7, r0
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f007 fa4c 	bl	8016074 <LoRaMacParserData>
 800ebdc:	1e03      	subs	r3, r0, #0
 800ebde:	d006      	beq.n	800ebee <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ebe0:	4ba2      	ldr	r3, [pc, #648]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ebe2:	4aa5      	ldr	r2, [pc, #660]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800ebe4:	2101      	movs	r1, #1
 800ebe6:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ebe8:	f7ff fd7e 	bl	800e6e8 <PrepareRxDoneAbort>
                return;
 800ebec:	e2d6      	b.n	800f19c <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ebee:	2030      	movs	r0, #48	; 0x30
 800ebf0:	183b      	adds	r3, r7, r0
 800ebf2:	689a      	ldr	r2, [r3, #8]
 800ebf4:	4b9d      	ldr	r3, [pc, #628]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ebf6:	49a2      	ldr	r1, [pc, #648]	; (800ee80 <ProcessRadioRxDone+0x740>)
 800ebf8:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ebfa:	1cba      	adds	r2, r7, #2
 800ebfc:	183b      	adds	r3, r7, r0
 800ebfe:	0011      	movs	r1, r2
 800ec00:	0018      	movs	r0, r3
 800ec02:	f003 f85f 	bl	8011cc4 <DetermineFrameType>
 800ec06:	1e03      	subs	r3, r0, #0
 800ec08:	d006      	beq.n	800ec18 <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec0a:	4b98      	ldr	r3, [pc, #608]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ec0c:	4a9a      	ldr	r2, [pc, #616]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800ec0e:	2101      	movs	r1, #1
 800ec10:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ec12:	f7ff fd69 	bl	800e6e8 <PrepareRxDoneAbort>
                return;
 800ec16:	e2c1      	b.n	800f19c <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ec18:	2383      	movs	r3, #131	; 0x83
 800ec1a:	18fb      	adds	r3, r7, r3
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec24:	2381      	movs	r3, #129	; 0x81
 800ec26:	18fb      	adds	r3, r7, r3
 800ec28:	2200      	movs	r2, #0
 800ec2a:	701a      	strb	r2, [r3, #0]
 800ec2c:	e05b      	b.n	800ece6 <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ec2e:	4b8f      	ldr	r3, [pc, #572]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ec30:	4a90      	ldr	r2, [pc, #576]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ec32:	589a      	ldr	r2, [r3, r2]
 800ec34:	2481      	movs	r4, #129	; 0x81
 800ec36:	193b      	adds	r3, r7, r4
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	212c      	movs	r1, #44	; 0x2c
 800ec3c:	434b      	muls	r3, r1
 800ec3e:	18d3      	adds	r3, r2, r3
 800ec40:	3354      	adds	r3, #84	; 0x54
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	2330      	movs	r3, #48	; 0x30
 800ec46:	18fb      	adds	r3, r7, r3
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d145      	bne.n	800ecda <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ec4e:	4b87      	ldr	r3, [pc, #540]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ec50:	4a88      	ldr	r2, [pc, #544]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ec52:	589a      	ldr	r2, [r3, r2]
 800ec54:	193b      	adds	r3, r7, r4
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	2152      	movs	r1, #82	; 0x52
 800ec5a:	202c      	movs	r0, #44	; 0x2c
 800ec5c:	4343      	muls	r3, r0
 800ec5e:	18d3      	adds	r3, r2, r3
 800ec60:	185b      	adds	r3, r3, r1
 800ec62:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d038      	beq.n	800ecda <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800ec68:	2383      	movs	r3, #131	; 0x83
 800ec6a:	18fb      	adds	r3, r7, r3
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800ec70:	4b7e      	ldr	r3, [pc, #504]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ec72:	4a80      	ldr	r2, [pc, #512]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ec74:	5899      	ldr	r1, [r3, r2]
 800ec76:	0025      	movs	r5, r4
 800ec78:	193b      	adds	r3, r7, r4
 800ec7a:	781a      	ldrb	r2, [r3, #0]
 800ec7c:	2382      	movs	r3, #130	; 0x82
 800ec7e:	18fb      	adds	r3, r7, r3
 800ec80:	2053      	movs	r0, #83	; 0x53
 800ec82:	242c      	movs	r4, #44	; 0x2c
 800ec84:	4362      	muls	r2, r4
 800ec86:	188a      	adds	r2, r1, r2
 800ec88:	1812      	adds	r2, r2, r0
 800ec8a:	7812      	ldrb	r2, [r2, #0]
 800ec8c:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800ec8e:	4b77      	ldr	r3, [pc, #476]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ec90:	4a78      	ldr	r2, [pc, #480]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ec92:	589a      	ldr	r2, [r3, r2]
 800ec94:	002c      	movs	r4, r5
 800ec96:	193b      	adds	r3, r7, r4
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	212c      	movs	r1, #44	; 0x2c
 800ec9c:	434b      	muls	r3, r1
 800ec9e:	18d3      	adds	r3, r2, r3
 800eca0:	3370      	adds	r3, #112	; 0x70
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800eca8:	4b70      	ldr	r3, [pc, #448]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ecaa:	4a72      	ldr	r2, [pc, #456]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ecac:	589a      	ldr	r2, [r3, r2]
 800ecae:	193b      	adds	r3, r7, r4
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	212c      	movs	r1, #44	; 0x2c
 800ecb4:	434b      	muls	r3, r1
 800ecb6:	18d3      	adds	r3, r2, r3
 800ecb8:	3354      	adds	r3, #84	; 0x54
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2284      	movs	r2, #132	; 0x84
 800ecbe:	18ba      	adds	r2, r7, r2
 800ecc0:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800ecc2:	4b6a      	ldr	r3, [pc, #424]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ecc4:	4a6b      	ldr	r2, [pc, #428]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ecc6:	589b      	ldr	r3, [r3, r2]
 800ecc8:	227c      	movs	r2, #124	; 0x7c
 800ecca:	5c9b      	ldrb	r3, [r3, r2]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d110      	bne.n	800ecf2 <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ecd0:	4b66      	ldr	r3, [pc, #408]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ecd2:	4a6c      	ldr	r2, [pc, #432]	; (800ee84 <ProcessRadioRxDone+0x744>)
 800ecd4:	2103      	movs	r1, #3
 800ecd6:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800ecd8:	e00b      	b.n	800ecf2 <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ecda:	2181      	movs	r1, #129	; 0x81
 800ecdc:	187b      	adds	r3, r7, r1
 800ecde:	781a      	ldrb	r2, [r3, #0]
 800ece0:	187b      	adds	r3, r7, r1
 800ece2:	3201      	adds	r2, #1
 800ece4:	701a      	strb	r2, [r3, #0]
 800ece6:	2381      	movs	r3, #129	; 0x81
 800ece8:	18fb      	adds	r3, r7, r3
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d09e      	beq.n	800ec2e <ProcessRadioRxDone+0x4ee>
 800ecf0:	e000      	b.n	800ecf4 <ProcessRadioRxDone+0x5b4>
                    break;
 800ecf2:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ecf4:	2383      	movs	r3, #131	; 0x83
 800ecf6:	18fb      	adds	r3, r7, r3
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d119      	bne.n	800ed32 <ProcessRadioRxDone+0x5f2>
 800ecfe:	1cbb      	adds	r3, r7, #2
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d10e      	bne.n	800ed24 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ed06:	2130      	movs	r1, #48	; 0x30
 800ed08:	187b      	adds	r3, r7, r1
 800ed0a:	7b1b      	ldrb	r3, [r3, #12]
 800ed0c:	2220      	movs	r2, #32
 800ed0e:	4013      	ands	r3, r2
 800ed10:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d106      	bne.n	800ed24 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ed16:	187b      	adds	r3, r7, r1
 800ed18:	7b1b      	ldrb	r3, [r3, #12]
 800ed1a:	2240      	movs	r2, #64	; 0x40
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d006      	beq.n	800ed32 <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed24:	4b51      	ldr	r3, [pc, #324]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ed26:	4a54      	ldr	r2, [pc, #336]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800ed28:	2101      	movs	r1, #1
 800ed2a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ed2c:	f7ff fcdc 	bl	800e6e8 <PrepareRxDoneAbort>
                return;
 800ed30:	e234      	b.n	800f19c <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ed32:	2164      	movs	r1, #100	; 0x64
 800ed34:	187b      	adds	r3, r7, r1
 800ed36:	2215      	movs	r2, #21
 800ed38:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ed3a:	4b4c      	ldr	r3, [pc, #304]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ed3c:	4a4d      	ldr	r2, [pc, #308]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ed3e:	589b      	ldr	r3, [r3, r2]
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	187a      	adds	r2, r7, r1
 800ed44:	0011      	movs	r1, r2
 800ed46:	0018      	movs	r0, r3
 800ed48:	f007 fc7b 	bl	8016642 <RegionGetPhyParam>
 800ed4c:	0003      	movs	r3, r0
 800ed4e:	001a      	movs	r2, r3
 800ed50:	2060      	movs	r0, #96	; 0x60
 800ed52:	183b      	adds	r3, r7, r0
 800ed54:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ed56:	1cbb      	adds	r3, r7, #2
 800ed58:	781d      	ldrb	r5, [r3, #0]
 800ed5a:	4b44      	ldr	r3, [pc, #272]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ed5c:	4a45      	ldr	r2, [pc, #276]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ed5e:	5899      	ldr	r1, [r3, r2]
 800ed60:	183b      	adds	r3, r7, r0
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	2280      	movs	r2, #128	; 0x80
 800ed68:	18bc      	adds	r4, r7, r2
 800ed6a:	22b0      	movs	r2, #176	; 0xb0
 800ed6c:	0052      	lsls	r2, r2, #1
 800ed6e:	588e      	ldr	r6, [r1, r2]
 800ed70:	2130      	movs	r1, #48	; 0x30
 800ed72:	1879      	adds	r1, r7, r1
 800ed74:	2082      	movs	r0, #130	; 0x82
 800ed76:	183a      	adds	r2, r7, r0
 800ed78:	7810      	ldrb	r0, [r2, #0]
 800ed7a:	1d3a      	adds	r2, r7, #4
 800ed7c:	9202      	str	r2, [sp, #8]
 800ed7e:	1cfa      	adds	r2, r7, #3
 800ed80:	9201      	str	r2, [sp, #4]
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	0033      	movs	r3, r6
 800ed86:	000a      	movs	r2, r1
 800ed88:	0029      	movs	r1, r5
 800ed8a:	f000 fe91 	bl	800fab0 <GetFCntDown>
 800ed8e:	0003      	movs	r3, r0
 800ed90:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ed92:	2280      	movs	r2, #128	; 0x80
 800ed94:	18bb      	adds	r3, r7, r2
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d040      	beq.n	800ee1e <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ed9c:	18bb      	adds	r3, r7, r2
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	2b07      	cmp	r3, #7
 800eda2:	d126      	bne.n	800edf2 <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800eda4:	4b31      	ldr	r3, [pc, #196]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800eda6:	4a34      	ldr	r2, [pc, #208]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800eda8:	2108      	movs	r1, #8
 800edaa:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800edac:	4b2f      	ldr	r3, [pc, #188]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800edae:	4a31      	ldr	r2, [pc, #196]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800edb0:	589a      	ldr	r2, [r3, r2]
 800edb2:	23b1      	movs	r3, #177	; 0xb1
 800edb4:	005b      	lsls	r3, r3, #1
 800edb6:	5cd3      	ldrb	r3, [r2, r3]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d128      	bne.n	800ee0e <ProcessRadioRxDone+0x6ce>
 800edbc:	2374      	movs	r3, #116	; 0x74
 800edbe:	18fb      	adds	r3, r7, r3
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	221f      	movs	r2, #31
 800edc4:	4393      	bics	r3, r2
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2ba0      	cmp	r3, #160	; 0xa0
 800edca:	d120      	bne.n	800ee0e <ProcessRadioRxDone+0x6ce>
 800edcc:	4b27      	ldr	r3, [pc, #156]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800edce:	4a29      	ldr	r2, [pc, #164]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800edd0:	589a      	ldr	r2, [r3, r2]
 800edd2:	23b4      	movs	r3, #180	; 0xb4
 800edd4:	005b      	lsls	r3, r3, #1
 800edd6:	58d2      	ldr	r2, [r2, r3]
 800edd8:	2130      	movs	r1, #48	; 0x30
 800edda:	187b      	adds	r3, r7, r1
 800eddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edde:	429a      	cmp	r2, r3
 800ede0:	d115      	bne.n	800ee0e <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800ede2:	4b22      	ldr	r3, [pc, #136]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ede4:	4a23      	ldr	r2, [pc, #140]	; (800ee74 <ProcessRadioRxDone+0x734>)
 800ede6:	589a      	ldr	r2, [r3, r2]
 800ede8:	234c      	movs	r3, #76	; 0x4c
 800edea:	33ff      	adds	r3, #255	; 0xff
 800edec:	2101      	movs	r1, #1
 800edee:	54d1      	strb	r1, [r2, r3]
 800edf0:	e00d      	b.n	800ee0e <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800edf2:	2380      	movs	r3, #128	; 0x80
 800edf4:	18fb      	adds	r3, r7, r3
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	2b08      	cmp	r3, #8
 800edfa:	d104      	bne.n	800ee06 <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800edfc:	4b1b      	ldr	r3, [pc, #108]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800edfe:	4a1e      	ldr	r2, [pc, #120]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800ee00:	210a      	movs	r1, #10
 800ee02:	5499      	strb	r1, [r3, r2]
 800ee04:	e003      	b.n	800ee0e <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee06:	4b19      	ldr	r3, [pc, #100]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ee08:	4a1b      	ldr	r2, [pc, #108]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800ee0a:	2101      	movs	r1, #1
 800ee0c:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ee0e:	6879      	ldr	r1, [r7, #4]
 800ee10:	4a16      	ldr	r2, [pc, #88]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ee12:	2386      	movs	r3, #134	; 0x86
 800ee14:	00db      	lsls	r3, r3, #3
 800ee16:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800ee18:	f7ff fc66 	bl	800e6e8 <PrepareRxDoneAbort>
                return;
 800ee1c:	e1be      	b.n	800f19c <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ee1e:	1cfb      	adds	r3, r7, #3
 800ee20:	781a      	ldrb	r2, [r3, #0]
 800ee22:	687d      	ldr	r5, [r7, #4]
 800ee24:	2680      	movs	r6, #128	; 0x80
 800ee26:	19bc      	adds	r4, r7, r6
 800ee28:	2384      	movs	r3, #132	; 0x84
 800ee2a:	18fb      	adds	r3, r7, r3
 800ee2c:	6819      	ldr	r1, [r3, #0]
 800ee2e:	2382      	movs	r3, #130	; 0x82
 800ee30:	18fb      	adds	r3, r7, r3
 800ee32:	7818      	ldrb	r0, [r3, #0]
 800ee34:	2330      	movs	r3, #48	; 0x30
 800ee36:	18fb      	adds	r3, r7, r3
 800ee38:	9300      	str	r3, [sp, #0]
 800ee3a:	002b      	movs	r3, r5
 800ee3c:	f006 fedc 	bl	8015bf8 <LoRaMacCryptoUnsecureMessage>
 800ee40:	0003      	movs	r3, r0
 800ee42:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ee44:	19bb      	adds	r3, r7, r6
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d01d      	beq.n	800ee88 <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ee4c:	19bb      	adds	r3, r7, r6
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	2b02      	cmp	r3, #2
 800ee52:	d104      	bne.n	800ee5e <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ee54:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ee56:	4a08      	ldr	r2, [pc, #32]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800ee58:	210b      	movs	r1, #11
 800ee5a:	5499      	strb	r1, [r3, r2]
 800ee5c:	e003      	b.n	800ee66 <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ee5e:	4b03      	ldr	r3, [pc, #12]	; (800ee6c <ProcessRadioRxDone+0x72c>)
 800ee60:	4a05      	ldr	r2, [pc, #20]	; (800ee78 <ProcessRadioRxDone+0x738>)
 800ee62:	210c      	movs	r1, #12
 800ee64:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800ee66:	f7ff fc3f 	bl	800e6e8 <PrepareRxDoneAbort>
                return;
 800ee6a:	e197      	b.n	800f19c <ProcessRadioRxDone+0xa5c>
 800ee6c:	20000bb0 	.word	0x20000bb0
 800ee70:	0000041c 	.word	0x0000041c
 800ee74:	00000484 	.word	0x00000484
 800ee78:	0000041d 	.word	0x0000041d
 800ee7c:	20000de8 	.word	0x20000de8
 800ee80:	00000434 	.word	0x00000434
 800ee84:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ee88:	4bc6      	ldr	r3, [pc, #792]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ee8a:	4ac7      	ldr	r2, [pc, #796]	; (800f1a8 <ProcessRadioRxDone+0xa68>)
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800ee90:	4bc4      	ldr	r3, [pc, #784]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ee92:	2283      	movs	r2, #131	; 0x83
 800ee94:	18ba      	adds	r2, r7, r2
 800ee96:	49c5      	ldr	r1, [pc, #788]	; (800f1ac <ProcessRadioRxDone+0xa6c>)
 800ee98:	7812      	ldrb	r2, [r2, #0]
 800ee9a:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ee9c:	2030      	movs	r0, #48	; 0x30
 800ee9e:	183b      	adds	r3, r7, r0
 800eea0:	7b1b      	ldrb	r3, [r3, #12]
 800eea2:	06db      	lsls	r3, r3, #27
 800eea4:	0fdb      	lsrs	r3, r3, #31
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	0019      	movs	r1, r3
 800eeaa:	4bbe      	ldr	r3, [pc, #760]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800eeac:	4ac0      	ldr	r2, [pc, #768]	; (800f1b0 <ProcessRadioRxDone+0xa70>)
 800eeae:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800eeb0:	4bbc      	ldr	r3, [pc, #752]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800eeb2:	4ac0      	ldr	r2, [pc, #768]	; (800f1b4 <ProcessRadioRxDone+0xa74>)
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800eeb8:	4aba      	ldr	r2, [pc, #744]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800eeba:	2385      	movs	r3, #133	; 0x85
 800eebc:	00db      	lsls	r3, r3, #3
 800eebe:	2100      	movs	r1, #0
 800eec0:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800eec2:	6879      	ldr	r1, [r7, #4]
 800eec4:	4ab7      	ldr	r2, [pc, #732]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800eec6:	2386      	movs	r3, #134	; 0x86
 800eec8:	00db      	lsls	r3, r3, #3
 800eeca:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800eecc:	183b      	adds	r3, r7, r0
 800eece:	7b1b      	ldrb	r3, [r3, #12]
 800eed0:	069b      	lsls	r3, r3, #26
 800eed2:	0fdb      	lsrs	r3, r3, #31
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	1e5a      	subs	r2, r3, #1
 800eed8:	4193      	sbcs	r3, r2
 800eeda:	b2d9      	uxtb	r1, r3
 800eedc:	4bb1      	ldr	r3, [pc, #708]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800eede:	4ab6      	ldr	r2, [pc, #728]	; (800f1b8 <ProcessRadioRxDone+0xa78>)
 800eee0:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eee2:	4bb0      	ldr	r3, [pc, #704]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800eee4:	4ab5      	ldr	r2, [pc, #724]	; (800f1bc <ProcessRadioRxDone+0xa7c>)
 800eee6:	2100      	movs	r1, #0
 800eee8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800eeea:	183b      	adds	r3, r7, r0
 800eeec:	7b1b      	ldrb	r3, [r3, #12]
 800eeee:	069b      	lsls	r3, r3, #26
 800eef0:	0fdb      	lsrs	r3, r3, #31
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	1e5a      	subs	r2, r3, #1
 800eef6:	4193      	sbcs	r3, r2
 800eef8:	b2d9      	uxtb	r1, r3
 800eefa:	4aaa      	ldr	r2, [pc, #680]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800eefc:	2388      	movs	r3, #136	; 0x88
 800eefe:	00db      	lsls	r3, r3, #3
 800ef00:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800ef02:	4ba8      	ldr	r3, [pc, #672]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef04:	4aae      	ldr	r2, [pc, #696]	; (800f1c0 <ProcessRadioRxDone+0xa80>)
 800ef06:	5c9b      	ldrb	r3, [r3, r2]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d004      	beq.n	800ef16 <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800ef0c:	4ba5      	ldr	r3, [pc, #660]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef0e:	4aac      	ldr	r2, [pc, #688]	; (800f1c0 <ProcessRadioRxDone+0xa80>)
 800ef10:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d105      	bne.n	800ef22 <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800ef16:	4ba3      	ldr	r3, [pc, #652]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef18:	4aaa      	ldr	r2, [pc, #680]	; (800f1c4 <ProcessRadioRxDone+0xa84>)
 800ef1a:	589b      	ldr	r3, [r3, r2]
 800ef1c:	2280      	movs	r2, #128	; 0x80
 800ef1e:	2100      	movs	r1, #0
 800ef20:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ef22:	2383      	movs	r3, #131	; 0x83
 800ef24:	18fb      	adds	r3, r7, r3
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d104      	bne.n	800ef36 <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ef2c:	4b9d      	ldr	r3, [pc, #628]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef2e:	4aa6      	ldr	r2, [pc, #664]	; (800f1c8 <ProcessRadioRxDone+0xa88>)
 800ef30:	2102      	movs	r1, #2
 800ef32:	5499      	strb	r1, [r3, r2]
 800ef34:	e02f      	b.n	800ef96 <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ef36:	2374      	movs	r3, #116	; 0x74
 800ef38:	18fb      	adds	r3, r7, r3
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	221f      	movs	r2, #31
 800ef3e:	4393      	bics	r3, r2
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2ba0      	cmp	r3, #160	; 0xa0
 800ef44:	d11c      	bne.n	800ef80 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800ef46:	4b97      	ldr	r3, [pc, #604]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef48:	4a9e      	ldr	r2, [pc, #632]	; (800f1c4 <ProcessRadioRxDone+0xa84>)
 800ef4a:	589a      	ldr	r2, [r3, r2]
 800ef4c:	234c      	movs	r3, #76	; 0x4c
 800ef4e:	33ff      	adds	r3, #255	; 0xff
 800ef50:	2101      	movs	r1, #1
 800ef52:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800ef54:	4b93      	ldr	r3, [pc, #588]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef56:	4a9b      	ldr	r2, [pc, #620]	; (800f1c4 <ProcessRadioRxDone+0xa84>)
 800ef58:	589a      	ldr	r2, [r3, r2]
 800ef5a:	23b1      	movs	r3, #177	; 0xb1
 800ef5c:	005b      	lsls	r3, r3, #1
 800ef5e:	5cd3      	ldrb	r3, [r2, r3]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d108      	bne.n	800ef76 <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800ef64:	4b8f      	ldr	r3, [pc, #572]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef66:	4a97      	ldr	r2, [pc, #604]	; (800f1c4 <ProcessRadioRxDone+0xa84>)
 800ef68:	589a      	ldr	r2, [r3, r2]
 800ef6a:	2330      	movs	r3, #48	; 0x30
 800ef6c:	18fb      	adds	r3, r7, r3
 800ef6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ef70:	23b4      	movs	r3, #180	; 0xb4
 800ef72:	005b      	lsls	r3, r3, #1
 800ef74:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ef76:	4b8b      	ldr	r3, [pc, #556]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef78:	4a93      	ldr	r2, [pc, #588]	; (800f1c8 <ProcessRadioRxDone+0xa88>)
 800ef7a:	2101      	movs	r1, #1
 800ef7c:	5499      	strb	r1, [r3, r2]
 800ef7e:	e00a      	b.n	800ef96 <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800ef80:	4b88      	ldr	r3, [pc, #544]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef82:	4a90      	ldr	r2, [pc, #576]	; (800f1c4 <ProcessRadioRxDone+0xa84>)
 800ef84:	589a      	ldr	r2, [r3, r2]
 800ef86:	234c      	movs	r3, #76	; 0x4c
 800ef88:	33ff      	adds	r3, #255	; 0xff
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ef8e:	4b85      	ldr	r3, [pc, #532]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef90:	4a8d      	ldr	r2, [pc, #564]	; (800f1c8 <ProcessRadioRxDone+0xa88>)
 800ef92:	2100      	movs	r1, #0
 800ef94:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ef96:	4b83      	ldr	r3, [pc, #524]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef98:	4a89      	ldr	r2, [pc, #548]	; (800f1c0 <ProcessRadioRxDone+0xa80>)
 800ef9a:	5c98      	ldrb	r0, [r3, r2]
 800ef9c:	4b81      	ldr	r3, [pc, #516]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800ef9e:	4a8b      	ldr	r2, [pc, #556]	; (800f1cc <ProcessRadioRxDone+0xa8c>)
 800efa0:	5c9a      	ldrb	r2, [r3, r2]
 800efa2:	2330      	movs	r3, #48	; 0x30
 800efa4:	18fb      	adds	r3, r7, r3
 800efa6:	7b1b      	ldrb	r3, [r3, #12]
 800efa8:	1c19      	adds	r1, r3, #0
 800efaa:	f002 f94d 	bl	8011248 <RemoveMacCommands>

            switch( fType )
 800efae:	1cbb      	adds	r3, r7, #2
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	2b03      	cmp	r3, #3
 800efb4:	d100      	bne.n	800efb8 <ProcessRadioRxDone+0x878>
 800efb6:	e073      	b.n	800f0a0 <ProcessRadioRxDone+0x960>
 800efb8:	dd00      	ble.n	800efbc <ProcessRadioRxDone+0x87c>
 800efba:	e089      	b.n	800f0d0 <ProcessRadioRxDone+0x990>
 800efbc:	2b02      	cmp	r3, #2
 800efbe:	d055      	beq.n	800f06c <ProcessRadioRxDone+0x92c>
 800efc0:	dd00      	ble.n	800efc4 <ProcessRadioRxDone+0x884>
 800efc2:	e085      	b.n	800f0d0 <ProcessRadioRxDone+0x990>
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <ProcessRadioRxDone+0x88e>
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d030      	beq.n	800f02e <ProcessRadioRxDone+0x8ee>
 800efcc:	e080      	b.n	800f0d0 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800efce:	2030      	movs	r0, #48	; 0x30
 800efd0:	183b      	adds	r3, r7, r0
 800efd2:	7b1b      	ldrb	r3, [r3, #12]
 800efd4:	071b      	lsls	r3, r3, #28
 800efd6:	0f1b      	lsrs	r3, r3, #28
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	001c      	movs	r4, r3
 800efdc:	4b71      	ldr	r3, [pc, #452]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800efde:	4a78      	ldr	r2, [pc, #480]	; (800f1c0 <ProcessRadioRxDone+0xa80>)
 800efe0:	5c9b      	ldrb	r3, [r3, r2]
 800efe2:	2277      	movs	r2, #119	; 0x77
 800efe4:	18ba      	adds	r2, r7, r2
 800efe6:	2100      	movs	r1, #0
 800efe8:	5651      	ldrsb	r1, [r2, r1]
 800efea:	0005      	movs	r5, r0
 800efec:	183a      	adds	r2, r7, r0
 800efee:	3210      	adds	r2, #16
 800eff0:	0010      	movs	r0, r2
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	000b      	movs	r3, r1
 800eff6:	0022      	movs	r2, r4
 800eff8:	2100      	movs	r1, #0
 800effa:	f000 ff4f 	bl	800fe9c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800effe:	0028      	movs	r0, r5
 800f000:	183b      	adds	r3, r7, r0
 800f002:	2220      	movs	r2, #32
 800f004:	5c99      	ldrb	r1, [r3, r2]
 800f006:	4b67      	ldr	r3, [pc, #412]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f008:	4a71      	ldr	r2, [pc, #452]	; (800f1d0 <ProcessRadioRxDone+0xa90>)
 800f00a:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f00c:	183b      	adds	r3, r7, r0
 800f00e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f010:	4b64      	ldr	r3, [pc, #400]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f012:	4968      	ldr	r1, [pc, #416]	; (800f1b4 <ProcessRadioRxDone+0xa74>)
 800f014:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f016:	183b      	adds	r3, r7, r0
 800f018:	2228      	movs	r2, #40	; 0x28
 800f01a:	5c99      	ldrb	r1, [r3, r2]
 800f01c:	4a61      	ldr	r2, [pc, #388]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f01e:	2385      	movs	r3, #133	; 0x85
 800f020:	00db      	lsls	r3, r3, #3
 800f022:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800f024:	4b5f      	ldr	r3, [pc, #380]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f026:	4a6b      	ldr	r2, [pc, #428]	; (800f1d4 <ProcessRadioRxDone+0xa94>)
 800f028:	2101      	movs	r1, #1
 800f02a:	5499      	strb	r1, [r3, r2]
                    break;
 800f02c:	e057      	b.n	800f0de <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800f02e:	2030      	movs	r0, #48	; 0x30
 800f030:	183b      	adds	r3, r7, r0
 800f032:	7b1b      	ldrb	r3, [r3, #12]
 800f034:	071b      	lsls	r3, r3, #28
 800f036:	0f1b      	lsrs	r3, r3, #28
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	001c      	movs	r4, r3
 800f03c:	4b59      	ldr	r3, [pc, #356]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f03e:	4a60      	ldr	r2, [pc, #384]	; (800f1c0 <ProcessRadioRxDone+0xa80>)
 800f040:	5c9b      	ldrb	r3, [r3, r2]
 800f042:	2277      	movs	r2, #119	; 0x77
 800f044:	18ba      	adds	r2, r7, r2
 800f046:	2100      	movs	r1, #0
 800f048:	5651      	ldrsb	r1, [r2, r1]
 800f04a:	0005      	movs	r5, r0
 800f04c:	183a      	adds	r2, r7, r0
 800f04e:	3210      	adds	r2, #16
 800f050:	0010      	movs	r0, r2
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	000b      	movs	r3, r1
 800f056:	0022      	movs	r2, r4
 800f058:	2100      	movs	r1, #0
 800f05a:	f000 ff1f 	bl	800fe9c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f05e:	197b      	adds	r3, r7, r5
 800f060:	2220      	movs	r2, #32
 800f062:	5c99      	ldrb	r1, [r3, r2]
 800f064:	4b4f      	ldr	r3, [pc, #316]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f066:	4a5a      	ldr	r2, [pc, #360]	; (800f1d0 <ProcessRadioRxDone+0xa90>)
 800f068:	5499      	strb	r1, [r3, r2]
                    break;
 800f06a:	e038      	b.n	800f0de <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800f06c:	2430      	movs	r4, #48	; 0x30
 800f06e:	193b      	adds	r3, r7, r4
 800f070:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f072:	193b      	adds	r3, r7, r4
 800f074:	2228      	movs	r2, #40	; 0x28
 800f076:	5c99      	ldrb	r1, [r3, r2]
 800f078:	4b4a      	ldr	r3, [pc, #296]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f07a:	4a51      	ldr	r2, [pc, #324]	; (800f1c0 <ProcessRadioRxDone+0xa80>)
 800f07c:	5c9b      	ldrb	r3, [r3, r2]
 800f07e:	2277      	movs	r2, #119	; 0x77
 800f080:	18ba      	adds	r2, r7, r2
 800f082:	7812      	ldrb	r2, [r2, #0]
 800f084:	b252      	sxtb	r2, r2
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	0013      	movs	r3, r2
 800f08a:	000a      	movs	r2, r1
 800f08c:	2100      	movs	r1, #0
 800f08e:	f000 ff05 	bl	800fe9c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f092:	193b      	adds	r3, r7, r4
 800f094:	2220      	movs	r2, #32
 800f096:	5c99      	ldrb	r1, [r3, r2]
 800f098:	4b42      	ldr	r3, [pc, #264]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f09a:	4a4d      	ldr	r2, [pc, #308]	; (800f1d0 <ProcessRadioRxDone+0xa90>)
 800f09c:	5499      	strb	r1, [r3, r2]
                    break;
 800f09e:	e01e      	b.n	800f0de <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f0a0:	2030      	movs	r0, #48	; 0x30
 800f0a2:	183b      	adds	r3, r7, r0
 800f0a4:	2220      	movs	r2, #32
 800f0a6:	5c99      	ldrb	r1, [r3, r2]
 800f0a8:	4b3e      	ldr	r3, [pc, #248]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f0aa:	4a49      	ldr	r2, [pc, #292]	; (800f1d0 <ProcessRadioRxDone+0xa90>)
 800f0ac:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f0ae:	183b      	adds	r3, r7, r0
 800f0b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0b2:	4b3c      	ldr	r3, [pc, #240]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f0b4:	493f      	ldr	r1, [pc, #252]	; (800f1b4 <ProcessRadioRxDone+0xa74>)
 800f0b6:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f0b8:	183b      	adds	r3, r7, r0
 800f0ba:	2228      	movs	r2, #40	; 0x28
 800f0bc:	5c99      	ldrb	r1, [r3, r2]
 800f0be:	4a39      	ldr	r2, [pc, #228]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f0c0:	2385      	movs	r3, #133	; 0x85
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800f0c6:	4b37      	ldr	r3, [pc, #220]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f0c8:	4a42      	ldr	r2, [pc, #264]	; (800f1d4 <ProcessRadioRxDone+0xa94>)
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	5499      	strb	r1, [r3, r2]
                    break;
 800f0ce:	e006      	b.n	800f0de <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f0d0:	4b34      	ldr	r3, [pc, #208]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f0d2:	4a35      	ldr	r2, [pc, #212]	; (800f1a8 <ProcessRadioRxDone+0xa68>)
 800f0d4:	2101      	movs	r1, #1
 800f0d6:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800f0d8:	f7ff fb06 	bl	800e6e8 <PrepareRxDoneAbort>
                    break;
 800f0dc:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f0de:	4b31      	ldr	r3, [pc, #196]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f0e0:	4a3d      	ldr	r2, [pc, #244]	; (800f1d8 <ProcessRadioRxDone+0xa98>)
 800f0e2:	5c99      	ldrb	r1, [r3, r2]
 800f0e4:	2002      	movs	r0, #2
 800f0e6:	4301      	orrs	r1, r0
 800f0e8:	5499      	strb	r1, [r3, r2]

            break;
 800f0ea:	e036      	b.n	800f15a <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f0ec:	2476      	movs	r4, #118	; 0x76
 800f0ee:	193b      	adds	r3, r7, r4
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0f4:	18d1      	adds	r1, r2, r3
 800f0f6:	193b      	adds	r3, r7, r4
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	257a      	movs	r5, #122	; 0x7a
 800f0fe:	197a      	adds	r2, r7, r5
 800f100:	8812      	ldrh	r2, [r2, #0]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	b29a      	uxth	r2, r3
 800f106:	4b35      	ldr	r3, [pc, #212]	; (800f1dc <ProcessRadioRxDone+0xa9c>)
 800f108:	0018      	movs	r0, r3
 800f10a:	f009 ff1d 	bl	8018f48 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f10e:	4b25      	ldr	r3, [pc, #148]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f110:	4a2d      	ldr	r2, [pc, #180]	; (800f1c8 <ProcessRadioRxDone+0xa88>)
 800f112:	2103      	movs	r1, #3
 800f114:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f116:	4b23      	ldr	r3, [pc, #140]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f118:	4a23      	ldr	r2, [pc, #140]	; (800f1a8 <ProcessRadioRxDone+0xa68>)
 800f11a:	2100      	movs	r1, #0
 800f11c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f11e:	4b21      	ldr	r3, [pc, #132]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f120:	4924      	ldr	r1, [pc, #144]	; (800f1b4 <ProcessRadioRxDone+0xa74>)
 800f122:	4a2e      	ldr	r2, [pc, #184]	; (800f1dc <ProcessRadioRxDone+0xa9c>)
 800f124:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f126:	197b      	adds	r3, r7, r5
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	193b      	adds	r3, r7, r4
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	b2d9      	uxtb	r1, r3
 800f134:	4a1b      	ldr	r2, [pc, #108]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f136:	2385      	movs	r3, #133	; 0x85
 800f138:	00db      	lsls	r3, r3, #3
 800f13a:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f13c:	4b19      	ldr	r3, [pc, #100]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f13e:	4a26      	ldr	r2, [pc, #152]	; (800f1d8 <ProcessRadioRxDone+0xa98>)
 800f140:	5c99      	ldrb	r1, [r3, r2]
 800f142:	2002      	movs	r0, #2
 800f144:	4301      	orrs	r1, r0
 800f146:	5499      	strb	r1, [r3, r2]
            break;
 800f148:	e007      	b.n	800f15a <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f14a:	4b16      	ldr	r3, [pc, #88]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f14c:	4a16      	ldr	r2, [pc, #88]	; (800f1a8 <ProcessRadioRxDone+0xa68>)
 800f14e:	2101      	movs	r1, #1
 800f150:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800f152:	f7ff fac9 	bl	800e6e8 <PrepareRxDoneAbort>
            break;
 800f156:	e000      	b.n	800f15a <ProcessRadioRxDone+0xa1a>
            break;
 800f158:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f15a:	4b12      	ldr	r3, [pc, #72]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f15c:	4a20      	ldr	r2, [pc, #128]	; (800f1e0 <ProcessRadioRxDone+0xaa0>)
 800f15e:	5c9b      	ldrb	r3, [r3, r2]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d009      	beq.n	800f178 <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f164:	4a0f      	ldr	r2, [pc, #60]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f166:	2388      	movs	r3, #136	; 0x88
 800f168:	00db      	lsls	r3, r3, #3
 800f16a:	5cd3      	ldrb	r3, [r2, r3]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d00d      	beq.n	800f18c <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f170:	2000      	movs	r0, #0
 800f172:	f000 fc5b 	bl	800fa2c <OnAckTimeoutTimerEvent>
 800f176:	e009      	b.n	800f18c <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f178:	4b0a      	ldr	r3, [pc, #40]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f17a:	4a12      	ldr	r2, [pc, #72]	; (800f1c4 <ProcessRadioRxDone+0xa84>)
 800f17c:	589b      	ldr	r3, [r3, r2]
 800f17e:	227c      	movs	r2, #124	; 0x7c
 800f180:	5c9b      	ldrb	r3, [r3, r2]
 800f182:	2b02      	cmp	r3, #2
 800f184:	d102      	bne.n	800f18c <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f186:	2000      	movs	r0, #0
 800f188:	f000 fc50 	bl	800fa2c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f18c:	4b05      	ldr	r3, [pc, #20]	; (800f1a4 <ProcessRadioRxDone+0xa64>)
 800f18e:	4a12      	ldr	r2, [pc, #72]	; (800f1d8 <ProcessRadioRxDone+0xa98>)
 800f190:	5c99      	ldrb	r1, [r3, r2]
 800f192:	2020      	movs	r0, #32
 800f194:	4301      	orrs	r1, r0
 800f196:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f198:	f7ff f9c0 	bl	800e51c <UpdateRxSlotIdleState>
}
 800f19c:	46bd      	mov	sp, r7
 800f19e:	b023      	add	sp, #140	; 0x8c
 800f1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1a2:	46c0      	nop			; (mov r8, r8)
 800f1a4:	20000bb0 	.word	0x20000bb0
 800f1a8:	0000041d 	.word	0x0000041d
 800f1ac:	0000041e 	.word	0x0000041e
 800f1b0:	00000421 	.word	0x00000421
 800f1b4:	00000424 	.word	0x00000424
 800f1b8:	0000042e 	.word	0x0000042e
 800f1bc:	0000043d 	.word	0x0000043d
 800f1c0:	0000042d 	.word	0x0000042d
 800f1c4:	00000484 	.word	0x00000484
 800f1c8:	0000041c 	.word	0x0000041c
 800f1cc:	0000043c 	.word	0x0000043c
 800f1d0:	0000041f 	.word	0x0000041f
 800f1d4:	00000429 	.word	0x00000429
 800f1d8:	00000481 	.word	0x00000481
 800f1dc:	20000de8 	.word	0x20000de8
 800f1e0:	00000414 	.word	0x00000414

0800f1e4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f1e8:	4b12      	ldr	r3, [pc, #72]	; (800f234 <ProcessRadioTxTimeout+0x50>)
 800f1ea:	4a13      	ldr	r2, [pc, #76]	; (800f238 <ProcessRadioTxTimeout+0x54>)
 800f1ec:	589b      	ldr	r3, [r3, r2]
 800f1ee:	227c      	movs	r2, #124	; 0x7c
 800f1f0:	5c9b      	ldrb	r3, [r3, r2]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d002      	beq.n	800f1fc <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800f1f6:	4b11      	ldr	r3, [pc, #68]	; (800f23c <ProcessRadioTxTimeout+0x58>)
 800f1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fa:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f1fc:	f7ff f98e 	bl	800e51c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f200:	4b0c      	ldr	r3, [pc, #48]	; (800f234 <ProcessRadioTxTimeout+0x50>)
 800f202:	4a0f      	ldr	r2, [pc, #60]	; (800f240 <ProcessRadioTxTimeout+0x5c>)
 800f204:	2102      	movs	r1, #2
 800f206:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f208:	2002      	movs	r0, #2
 800f20a:	f005 fac1 	bl	8014790 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f20e:	4b09      	ldr	r3, [pc, #36]	; (800f234 <ProcessRadioTxTimeout+0x50>)
 800f210:	4a0c      	ldr	r2, [pc, #48]	; (800f244 <ProcessRadioTxTimeout+0x60>)
 800f212:	5c9b      	ldrb	r3, [r3, r2]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d003      	beq.n	800f220 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800f218:	4b06      	ldr	r3, [pc, #24]	; (800f234 <ProcessRadioTxTimeout+0x50>)
 800f21a:	4a0b      	ldr	r2, [pc, #44]	; (800f248 <ProcessRadioTxTimeout+0x64>)
 800f21c:	2101      	movs	r1, #1
 800f21e:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f220:	4b04      	ldr	r3, [pc, #16]	; (800f234 <ProcessRadioTxTimeout+0x50>)
 800f222:	4a0a      	ldr	r2, [pc, #40]	; (800f24c <ProcessRadioTxTimeout+0x68>)
 800f224:	5c99      	ldrb	r1, [r3, r2]
 800f226:	2020      	movs	r0, #32
 800f228:	4301      	orrs	r1, r0
 800f22a:	5499      	strb	r1, [r3, r2]
}
 800f22c:	46c0      	nop			; (mov r8, r8)
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	46c0      	nop			; (mov r8, r8)
 800f234:	20000bb0 	.word	0x20000bb0
 800f238:	00000484 	.word	0x00000484
 800f23c:	0801ec78 	.word	0x0801ec78
 800f240:	0000043d 	.word	0x0000043d
 800f244:	00000414 	.word	0x00000414
 800f248:	00000413 	.word	0x00000413
 800f24c:	00000481 	.word	0x00000481

0800f250 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	0002      	movs	r2, r0
 800f258:	1dfb      	adds	r3, r7, #7
 800f25a:	701a      	strb	r2, [r3, #0]
 800f25c:	1dbb      	adds	r3, r7, #6
 800f25e:	1c0a      	adds	r2, r1, #0
 800f260:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800f262:	230f      	movs	r3, #15
 800f264:	18fb      	adds	r3, r7, r3
 800f266:	2200      	movs	r2, #0
 800f268:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f26a:	4b4a      	ldr	r3, [pc, #296]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f26c:	4a4a      	ldr	r2, [pc, #296]	; (800f398 <HandleRadioRxErrorTimeout+0x148>)
 800f26e:	589b      	ldr	r3, [r3, r2]
 800f270:	227c      	movs	r2, #124	; 0x7c
 800f272:	5c9b      	ldrb	r3, [r3, r2]
 800f274:	2b02      	cmp	r3, #2
 800f276:	d002      	beq.n	800f27e <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800f278:	4b48      	ldr	r3, [pc, #288]	; (800f39c <HandleRadioRxErrorTimeout+0x14c>)
 800f27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f27c:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f27e:	f004 fd43 	bl	8013d08 <LoRaMacClassBIsBeaconExpected>
 800f282:	1e03      	subs	r3, r0, #0
 800f284:	d009      	beq.n	800f29a <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f286:	2002      	movs	r0, #2
 800f288:	f004 fcf6 	bl	8013c78 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f28c:	2000      	movs	r0, #0
 800f28e:	f004 fd17 	bl	8013cc0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f292:	230f      	movs	r3, #15
 800f294:	18fb      	adds	r3, r7, r3
 800f296:	2201      	movs	r2, #1
 800f298:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f29a:	4b3e      	ldr	r3, [pc, #248]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f29c:	4a3e      	ldr	r2, [pc, #248]	; (800f398 <HandleRadioRxErrorTimeout+0x148>)
 800f29e:	589b      	ldr	r3, [r3, r2]
 800f2a0:	227c      	movs	r2, #124	; 0x7c
 800f2a2:	5c9b      	ldrb	r3, [r3, r2]
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d11b      	bne.n	800f2e0 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f2a8:	f004 fd34 	bl	8013d14 <LoRaMacClassBIsPingExpected>
 800f2ac:	1e03      	subs	r3, r0, #0
 800f2ae:	d009      	beq.n	800f2c4 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	f004 fceb 	bl	8013c8c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	f004 fd0a 	bl	8013cd0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f2bc:	230f      	movs	r3, #15
 800f2be:	18fb      	adds	r3, r7, r3
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f2c4:	f004 fd2c 	bl	8013d20 <LoRaMacClassBIsMulticastExpected>
 800f2c8:	1e03      	subs	r3, r0, #0
 800f2ca:	d009      	beq.n	800f2e0 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f2cc:	2000      	movs	r0, #0
 800f2ce:	f004 fce7 	bl	8013ca0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	f004 fd04 	bl	8013ce0 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f2d8:	230f      	movs	r3, #15
 800f2da:	18fb      	adds	r3, r7, r3
 800f2dc:	2201      	movs	r2, #1
 800f2de:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800f2e0:	230f      	movs	r3, #15
 800f2e2:	18fb      	adds	r3, r7, r3
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	4053      	eors	r3, r2
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d04b      	beq.n	800f388 <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f2f0:	4a28      	ldr	r2, [pc, #160]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f2f2:	2390      	movs	r3, #144	; 0x90
 800f2f4:	00db      	lsls	r3, r3, #3
 800f2f6:	5cd3      	ldrb	r3, [r2, r3]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d129      	bne.n	800f350 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 800f2fc:	4b25      	ldr	r3, [pc, #148]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f2fe:	4a28      	ldr	r2, [pc, #160]	; (800f3a0 <HandleRadioRxErrorTimeout+0x150>)
 800f300:	5c9b      	ldrb	r3, [r3, r2]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d004      	beq.n	800f310 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f306:	4b23      	ldr	r3, [pc, #140]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f308:	1dfa      	adds	r2, r7, #7
 800f30a:	4926      	ldr	r1, [pc, #152]	; (800f3a4 <HandleRadioRxErrorTimeout+0x154>)
 800f30c:	7812      	ldrb	r2, [r2, #0]
 800f30e:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f310:	1dfb      	adds	r3, r7, #7
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	0018      	movs	r0, r3
 800f316:	f005 fa3b 	bl	8014790 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f31a:	4b1e      	ldr	r3, [pc, #120]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f31c:	4a1e      	ldr	r2, [pc, #120]	; (800f398 <HandleRadioRxErrorTimeout+0x148>)
 800f31e:	589a      	ldr	r2, [r3, r2]
 800f320:	23a8      	movs	r3, #168	; 0xa8
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	58d3      	ldr	r3, [r2, r3]
 800f326:	0018      	movs	r0, r3
 800f328:	f00d faca 	bl	801c8c0 <UTIL_TIMER_GetElapsedTime>
 800f32c:	0001      	movs	r1, r0
 800f32e:	4a19      	ldr	r2, [pc, #100]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f330:	23ed      	movs	r3, #237	; 0xed
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	58d3      	ldr	r3, [r2, r3]
 800f336:	4299      	cmp	r1, r3
 800f338:	d326      	bcc.n	800f388 <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f33a:	4b1b      	ldr	r3, [pc, #108]	; (800f3a8 <HandleRadioRxErrorTimeout+0x158>)
 800f33c:	0018      	movs	r0, r3
 800f33e:	f00d f97b 	bl	801c638 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f342:	4b14      	ldr	r3, [pc, #80]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f344:	4a19      	ldr	r2, [pc, #100]	; (800f3ac <HandleRadioRxErrorTimeout+0x15c>)
 800f346:	5c99      	ldrb	r1, [r3, r2]
 800f348:	2020      	movs	r0, #32
 800f34a:	4301      	orrs	r1, r0
 800f34c:	5499      	strb	r1, [r3, r2]
 800f34e:	e01b      	b.n	800f388 <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f350:	4b10      	ldr	r3, [pc, #64]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f352:	4a13      	ldr	r2, [pc, #76]	; (800f3a0 <HandleRadioRxErrorTimeout+0x150>)
 800f354:	5c9b      	ldrb	r3, [r3, r2]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d004      	beq.n	800f364 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f35a:	4b0e      	ldr	r3, [pc, #56]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f35c:	1dba      	adds	r2, r7, #6
 800f35e:	4911      	ldr	r1, [pc, #68]	; (800f3a4 <HandleRadioRxErrorTimeout+0x154>)
 800f360:	7812      	ldrb	r2, [r2, #0]
 800f362:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f364:	1dbb      	adds	r3, r7, #6
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	0018      	movs	r0, r3
 800f36a:	f005 fa11 	bl	8014790 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f36e:	4b09      	ldr	r3, [pc, #36]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f370:	4a09      	ldr	r2, [pc, #36]	; (800f398 <HandleRadioRxErrorTimeout+0x148>)
 800f372:	589b      	ldr	r3, [r3, r2]
 800f374:	227c      	movs	r2, #124	; 0x7c
 800f376:	5c9b      	ldrb	r3, [r3, r2]
 800f378:	2b02      	cmp	r3, #2
 800f37a:	d005      	beq.n	800f388 <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f37c:	4b05      	ldr	r3, [pc, #20]	; (800f394 <HandleRadioRxErrorTimeout+0x144>)
 800f37e:	4a0b      	ldr	r2, [pc, #44]	; (800f3ac <HandleRadioRxErrorTimeout+0x15c>)
 800f380:	5c99      	ldrb	r1, [r3, r2]
 800f382:	2020      	movs	r0, #32
 800f384:	4301      	orrs	r1, r0
 800f386:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800f388:	f7ff f8c8 	bl	800e51c <UpdateRxSlotIdleState>
}
 800f38c:	46c0      	nop			; (mov r8, r8)
 800f38e:	46bd      	mov	sp, r7
 800f390:	b004      	add	sp, #16
 800f392:	bd80      	pop	{r7, pc}
 800f394:	20000bb0 	.word	0x20000bb0
 800f398:	00000484 	.word	0x00000484
 800f39c:	0801ec78 	.word	0x0801ec78
 800f3a0:	00000414 	.word	0x00000414
 800f3a4:	0000043d 	.word	0x0000043d
 800f3a8:	20000f48 	.word	0x20000f48
 800f3ac:	00000481 	.word	0x00000481

0800f3b0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f3b4:	2106      	movs	r1, #6
 800f3b6:	2005      	movs	r0, #5
 800f3b8:	f7ff ff4a 	bl	800f250 <HandleRadioRxErrorTimeout>
}
 800f3bc:	46c0      	nop			; (mov r8, r8)
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f3c6:	2104      	movs	r1, #4
 800f3c8:	2003      	movs	r0, #3
 800f3ca:	f7ff ff41 	bl	800f250 <HandleRadioRxErrorTimeout>
}
 800f3ce:	46c0      	nop			; (mov r8, r8)
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3da:	f3ef 8310 	mrs	r3, PRIMASK
 800f3de:	607b      	str	r3, [r7, #4]
  return(result);
 800f3e0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f3e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f3e4:	b672      	cpsid	i
}
 800f3e6:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 800f3e8:	4b1f      	ldr	r3, [pc, #124]	; (800f468 <LoRaMacHandleIrqEvents+0x94>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f3ee:	4b1e      	ldr	r3, [pc, #120]	; (800f468 <LoRaMacHandleIrqEvents+0x94>)
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	f383 8810 	msr	PRIMASK, r3
}
 800f3fe:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d02c      	beq.n	800f460 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 800f406:	003b      	movs	r3, r7
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	2210      	movs	r2, #16
 800f40c:	4013      	ands	r3, r2
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	2b00      	cmp	r3, #0
 800f412:	d001      	beq.n	800f418 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 800f414:	f7ff f89e 	bl	800e554 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f418:	003b      	movs	r3, r7
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	2208      	movs	r2, #8
 800f41e:	4013      	ands	r3, r2
 800f420:	b2db      	uxtb	r3, r3
 800f422:	2b00      	cmp	r3, #0
 800f424:	d001      	beq.n	800f42a <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 800f426:	f7ff f98b 	bl	800e740 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f42a:	003b      	movs	r3, r7
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	2204      	movs	r2, #4
 800f430:	4013      	ands	r3, r2
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	d001      	beq.n	800f43c <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 800f438:	f7ff fed4 	bl	800f1e4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f43c:	003b      	movs	r3, r7
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	2202      	movs	r2, #2
 800f442:	4013      	ands	r3, r2
 800f444:	b2db      	uxtb	r3, r3
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 800f44a:	f7ff ffb1 	bl	800f3b0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f44e:	003b      	movs	r3, r7
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	2201      	movs	r2, #1
 800f454:	4013      	ands	r3, r2
 800f456:	b2db      	uxtb	r3, r3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 800f45c:	f7ff ffb1 	bl	800f3c2 <ProcessRadioRxTimeout>
        }
    }
}
 800f460:	46c0      	nop			; (mov r8, r8)
 800f462:	46bd      	mov	sp, r7
 800f464:	b004      	add	sp, #16
 800f466:	bd80      	pop	{r7, pc}
 800f468:	200011e0 	.word	0x200011e0

0800f46c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	0002      	movs	r2, r0
 800f474:	1dfb      	adds	r3, r7, #7
 800f476:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800f478:	4b04      	ldr	r3, [pc, #16]	; (800f48c <LoRaMacEnableRequests+0x20>)
 800f47a:	1dfa      	adds	r2, r7, #7
 800f47c:	4904      	ldr	r1, [pc, #16]	; (800f490 <LoRaMacEnableRequests+0x24>)
 800f47e:	7812      	ldrb	r2, [r2, #0]
 800f480:	545a      	strb	r2, [r3, r1]
}
 800f482:	46c0      	nop			; (mov r8, r8)
 800f484:	46bd      	mov	sp, r7
 800f486:	b002      	add	sp, #8
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	46c0      	nop			; (mov r8, r8)
 800f48c:	20000bb0 	.word	0x20000bb0
 800f490:	00000482 	.word	0x00000482

0800f494 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f49a:	1d3b      	adds	r3, r7, #4
 800f49c:	4a2c      	ldr	r2, [pc, #176]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f49e:	492d      	ldr	r1, [pc, #180]	; (800f554 <LoRaMacHandleRequestEvents+0xc0>)
 800f4a0:	5c52      	ldrb	r2, [r2, r1]
 800f4a2:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f4a4:	4a2a      	ldr	r2, [pc, #168]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f4a6:	23d0      	movs	r3, #208	; 0xd0
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	58d3      	ldr	r3, [r2, r3]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d14a      	bne.n	800f546 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f4b0:	4b27      	ldr	r3, [pc, #156]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f4b2:	4a28      	ldr	r2, [pc, #160]	; (800f554 <LoRaMacHandleRequestEvents+0xc0>)
 800f4b4:	5c9b      	ldrb	r3, [r3, r2]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	4013      	ands	r3, r2
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d005      	beq.n	800f4cc <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f4c0:	4b23      	ldr	r3, [pc, #140]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f4c2:	4a24      	ldr	r2, [pc, #144]	; (800f554 <LoRaMacHandleRequestEvents+0xc0>)
 800f4c4:	5c99      	ldrb	r1, [r3, r2]
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	4381      	bics	r1, r0
 800f4ca:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f4cc:	4b20      	ldr	r3, [pc, #128]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f4ce:	4a21      	ldr	r2, [pc, #132]	; (800f554 <LoRaMacHandleRequestEvents+0xc0>)
 800f4d0:	5c9b      	ldrb	r3, [r3, r2]
 800f4d2:	2204      	movs	r2, #4
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d005      	beq.n	800f4e8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f4dc:	4b1c      	ldr	r3, [pc, #112]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f4de:	4a1d      	ldr	r2, [pc, #116]	; (800f554 <LoRaMacHandleRequestEvents+0xc0>)
 800f4e0:	5c99      	ldrb	r1, [r3, r2]
 800f4e2:	2004      	movs	r0, #4
 800f4e4:	4381      	bics	r1, r0
 800f4e6:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f4e8:	2001      	movs	r0, #1
 800f4ea:	f7ff ffbf 	bl	800f46c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f4ee:	1d3b      	adds	r3, r7, #4
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	4013      	ands	r3, r2
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d007      	beq.n	800f50c <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f4fc:	4a14      	ldr	r2, [pc, #80]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f4fe:	23d1      	movs	r3, #209	; 0xd1
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	58d3      	ldr	r3, [r2, r3]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4a14      	ldr	r2, [pc, #80]	; (800f558 <LoRaMacHandleRequestEvents+0xc4>)
 800f508:	0010      	movs	r0, r2
 800f50a:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f50c:	1d3b      	adds	r3, r7, #4
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	2204      	movs	r2, #4
 800f512:	4013      	ands	r3, r2
 800f514:	b2db      	uxtb	r3, r3
 800f516:	2b00      	cmp	r3, #0
 800f518:	d00d      	beq.n	800f536 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f51a:	4b10      	ldr	r3, [pc, #64]	; (800f55c <LoRaMacHandleRequestEvents+0xc8>)
 800f51c:	0018      	movs	r0, r3
 800f51e:	f005 f98b 	bl	8014838 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f522:	f005 f9eb 	bl	80148fc <LoRaMacConfirmQueueGetCnt>
 800f526:	1e03      	subs	r3, r0, #0
 800f528:	d005      	beq.n	800f536 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f52a:	4b09      	ldr	r3, [pc, #36]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f52c:	4a09      	ldr	r2, [pc, #36]	; (800f554 <LoRaMacHandleRequestEvents+0xc0>)
 800f52e:	5c99      	ldrb	r1, [r3, r2]
 800f530:	2004      	movs	r0, #4
 800f532:	4301      	orrs	r1, r0
 800f534:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f536:	f004 fc0e 	bl	8013d56 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f53a:	4b05      	ldr	r3, [pc, #20]	; (800f550 <LoRaMacHandleRequestEvents+0xbc>)
 800f53c:	4a05      	ldr	r2, [pc, #20]	; (800f554 <LoRaMacHandleRequestEvents+0xc0>)
 800f53e:	5c99      	ldrb	r1, [r3, r2]
 800f540:	2020      	movs	r0, #32
 800f542:	4381      	bics	r1, r0
 800f544:	5499      	strb	r1, [r3, r2]
    }
}
 800f546:	46c0      	nop			; (mov r8, r8)
 800f548:	46bd      	mov	sp, r7
 800f54a:	b002      	add	sp, #8
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	46c0      	nop			; (mov r8, r8)
 800f550:	20000bb0 	.word	0x20000bb0
 800f554:	00000481 	.word	0x00000481
 800f558:	20000fec 	.word	0x20000fec
 800f55c:	20001000 	.word	0x20001000

0800f560 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f566:	4a0b      	ldr	r2, [pc, #44]	; (800f594 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 800f568:	23d0      	movs	r3, #208	; 0xd0
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	58d3      	ldr	r3, [r2, r3]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d10c      	bne.n	800f58c <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f572:	1dfb      	adds	r3, r7, #7
 800f574:	2200      	movs	r2, #0
 800f576:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f578:	1dfb      	adds	r3, r7, #7
 800f57a:	0018      	movs	r0, r3
 800f57c:	f004 fefa 	bl	8014374 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800f580:	1dfb      	adds	r3, r7, #7
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d001      	beq.n	800f58c <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800f588:	f000 fc78 	bl	800fe7c <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800f58c:	46c0      	nop			; (mov r8, r8)
 800f58e:	46bd      	mov	sp, r7
 800f590:	b002      	add	sp, #8
 800f592:	bd80      	pop	{r7, pc}
 800f594:	20000bb0 	.word	0x20000bb0

0800f598 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b088      	sub	sp, #32
 800f59c:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f59e:	4b26      	ldr	r3, [pc, #152]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f5a0:	4a26      	ldr	r2, [pc, #152]	; (800f63c <LoRaMacHandleIndicationEvents+0xa4>)
 800f5a2:	5c9b      	ldrb	r3, [r3, r2]
 800f5a4:	2208      	movs	r2, #8
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00d      	beq.n	800f5ca <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f5ae:	4b22      	ldr	r3, [pc, #136]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f5b0:	4a22      	ldr	r2, [pc, #136]	; (800f63c <LoRaMacHandleIndicationEvents+0xa4>)
 800f5b2:	5c99      	ldrb	r1, [r3, r2]
 800f5b4:	2008      	movs	r0, #8
 800f5b6:	4381      	bics	r1, r0
 800f5b8:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800f5ba:	4a1f      	ldr	r2, [pc, #124]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f5bc:	23d1      	movs	r3, #209	; 0xd1
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	58d3      	ldr	r3, [r2, r3]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	4a1e      	ldr	r2, [pc, #120]	; (800f640 <LoRaMacHandleIndicationEvents+0xa8>)
 800f5c6:	0010      	movs	r0, r2
 800f5c8:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800f5ca:	4b1b      	ldr	r3, [pc, #108]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f5cc:	4a1b      	ldr	r2, [pc, #108]	; (800f63c <LoRaMacHandleIndicationEvents+0xa4>)
 800f5ce:	5c9b      	ldrb	r3, [r3, r2]
 800f5d0:	2210      	movs	r2, #16
 800f5d2:	4013      	ands	r3, r2
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d013      	beq.n	800f602 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f5da:	1d3b      	adds	r3, r7, #4
 800f5dc:	2207      	movs	r2, #7
 800f5de:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f5e0:	1d3b      	adds	r3, r7, #4
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800f5e6:	4a14      	ldr	r2, [pc, #80]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f5e8:	23d1      	movs	r3, #209	; 0xd1
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	58d3      	ldr	r3, [r2, r3]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	1d3a      	adds	r2, r7, #4
 800f5f2:	0010      	movs	r0, r2
 800f5f4:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800f5f6:	4b10      	ldr	r3, [pc, #64]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f5f8:	4a10      	ldr	r2, [pc, #64]	; (800f63c <LoRaMacHandleIndicationEvents+0xa4>)
 800f5fa:	5c99      	ldrb	r1, [r3, r2]
 800f5fc:	2010      	movs	r0, #16
 800f5fe:	4381      	bics	r1, r0
 800f600:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f602:	4b0d      	ldr	r3, [pc, #52]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f604:	4a0d      	ldr	r2, [pc, #52]	; (800f63c <LoRaMacHandleIndicationEvents+0xa4>)
 800f606:	5c9b      	ldrb	r3, [r3, r2]
 800f608:	2202      	movs	r2, #2
 800f60a:	4013      	ands	r3, r2
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00d      	beq.n	800f62e <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f612:	4b09      	ldr	r3, [pc, #36]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f614:	4a09      	ldr	r2, [pc, #36]	; (800f63c <LoRaMacHandleIndicationEvents+0xa4>)
 800f616:	5c99      	ldrb	r1, [r3, r2]
 800f618:	2002      	movs	r0, #2
 800f61a:	4381      	bics	r1, r0
 800f61c:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800f61e:	4a06      	ldr	r2, [pc, #24]	; (800f638 <LoRaMacHandleIndicationEvents+0xa0>)
 800f620:	23d1      	movs	r3, #209	; 0xd1
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	58d3      	ldr	r3, [r2, r3]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	4a06      	ldr	r2, [pc, #24]	; (800f644 <LoRaMacHandleIndicationEvents+0xac>)
 800f62a:	0010      	movs	r0, r2
 800f62c:	4798      	blx	r3
    }
}
 800f62e:	46c0      	nop			; (mov r8, r8)
 800f630:	46bd      	mov	sp, r7
 800f632:	b008      	add	sp, #32
 800f634:	bd80      	pop	{r7, pc}
 800f636:	46c0      	nop			; (mov r8, r8)
 800f638:	20000bb0 	.word	0x20000bb0
 800f63c:	00000481 	.word	0x00000481
 800f640:	20001014 	.word	0x20001014
 800f644:	20000fcc 	.word	0x20000fcc

0800f648 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f648:	b590      	push	{r4, r7, lr}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f64e:	4b39      	ldr	r3, [pc, #228]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f650:	4a39      	ldr	r2, [pc, #228]	; (800f738 <LoRaMacHandleMcpsRequest+0xf0>)
 800f652:	5c9b      	ldrb	r3, [r3, r2]
 800f654:	2201      	movs	r2, #1
 800f656:	4013      	ands	r3, r2
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d066      	beq.n	800f72c <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 800f65e:	1dfb      	adds	r3, r7, #7
 800f660:	2200      	movs	r2, #0
 800f662:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800f664:	1dbb      	adds	r3, r7, #6
 800f666:	2200      	movs	r2, #0
 800f668:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f66a:	4b32      	ldr	r3, [pc, #200]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f66c:	4a33      	ldr	r2, [pc, #204]	; (800f73c <LoRaMacHandleMcpsRequest+0xf4>)
 800f66e:	5c9b      	ldrb	r3, [r3, r2]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d004      	beq.n	800f67e <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f674:	4b2f      	ldr	r3, [pc, #188]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f676:	4a31      	ldr	r2, [pc, #196]	; (800f73c <LoRaMacHandleMcpsRequest+0xf4>)
 800f678:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f67a:	2b03      	cmp	r3, #3
 800f67c:	d105      	bne.n	800f68a <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f67e:	1dfc      	adds	r4, r7, #7
 800f680:	f002 fb6e 	bl	8011d60 <CheckRetransUnconfirmedUplink>
 800f684:	0003      	movs	r3, r0
 800f686:	7023      	strb	r3, [r4, #0]
 800f688:	e026      	b.n	800f6d8 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f68a:	4b2a      	ldr	r3, [pc, #168]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f68c:	4a2b      	ldr	r2, [pc, #172]	; (800f73c <LoRaMacHandleMcpsRequest+0xf4>)
 800f68e:	5c9b      	ldrb	r3, [r3, r2]
 800f690:	2b01      	cmp	r3, #1
 800f692:	d121      	bne.n	800f6d8 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800f694:	4b27      	ldr	r3, [pc, #156]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f696:	4a2a      	ldr	r2, [pc, #168]	; (800f740 <LoRaMacHandleMcpsRequest+0xf8>)
 800f698:	5c9b      	ldrb	r3, [r3, r2]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d019      	beq.n	800f6d2 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f69e:	1dfc      	adds	r4, r7, #7
 800f6a0:	f002 fb92 	bl	8011dc8 <CheckRetransConfirmedUplink>
 800f6a4:	0003      	movs	r3, r0
 800f6a6:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800f6a8:	4b22      	ldr	r3, [pc, #136]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f6aa:	4a26      	ldr	r2, [pc, #152]	; (800f744 <LoRaMacHandleMcpsRequest+0xfc>)
 800f6ac:	589a      	ldr	r2, [r3, r2]
 800f6ae:	23b1      	movs	r3, #177	; 0xb1
 800f6b0:	005b      	lsls	r3, r3, #1
 800f6b2:	5cd3      	ldrb	r3, [r2, r3]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d10f      	bne.n	800f6d8 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 800f6b8:	1dfb      	adds	r3, r7, #7
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	4053      	eors	r3, r2
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d002      	beq.n	800f6cc <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 800f6c6:	f002 fbf3 	bl	8011eb0 <AckTimeoutRetriesProcess>
 800f6ca:	e005      	b.n	800f6d8 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f6cc:	f002 fc3e 	bl	8011f4c <AckTimeoutRetriesFinalize>
 800f6d0:	e002      	b.n	800f6d8 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f6d2:	1dbb      	adds	r3, r7, #6
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800f6d8:	1dfb      	adds	r3, r7, #7
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d011      	beq.n	800f704 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f6e0:	4b19      	ldr	r3, [pc, #100]	; (800f748 <LoRaMacHandleMcpsRequest+0x100>)
 800f6e2:	0018      	movs	r0, r3
 800f6e4:	f00c ffa8 	bl	801c638 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f6e8:	4a12      	ldr	r2, [pc, #72]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f6ea:	23d0      	movs	r3, #208	; 0xd0
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	58d3      	ldr	r3, [r2, r3]
 800f6f0:	2220      	movs	r2, #32
 800f6f2:	4393      	bics	r3, r2
 800f6f4:	0019      	movs	r1, r3
 800f6f6:	4a0f      	ldr	r2, [pc, #60]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f6f8:	23d0      	movs	r3, #208	; 0xd0
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 800f6fe:	f002 fb8b 	bl	8011e18 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f702:	e013      	b.n	800f72c <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 800f704:	1dbb      	adds	r3, r7, #6
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2201      	movs	r2, #1
 800f70a:	4053      	eors	r3, r2
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d00c      	beq.n	800f72c <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f712:	4b08      	ldr	r3, [pc, #32]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f714:	4a08      	ldr	r2, [pc, #32]	; (800f738 <LoRaMacHandleMcpsRequest+0xf0>)
 800f716:	5c99      	ldrb	r1, [r3, r2]
 800f718:	2020      	movs	r0, #32
 800f71a:	4381      	bics	r1, r0
 800f71c:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 800f71e:	4b05      	ldr	r3, [pc, #20]	; (800f734 <LoRaMacHandleMcpsRequest+0xec>)
 800f720:	4a07      	ldr	r2, [pc, #28]	; (800f740 <LoRaMacHandleMcpsRequest+0xf8>)
 800f722:	2100      	movs	r1, #0
 800f724:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 800f726:	2000      	movs	r0, #0
 800f728:	f000 f8a2 	bl	800f870 <OnTxDelayedTimerEvent>
}
 800f72c:	46c0      	nop			; (mov r8, r8)
 800f72e:	46bd      	mov	sp, r7
 800f730:	b003      	add	sp, #12
 800f732:	bd90      	pop	{r4, r7, pc}
 800f734:	20000bb0 	.word	0x20000bb0
 800f738:	00000481 	.word	0x00000481
 800f73c:	0000043c 	.word	0x0000043c
 800f740:	00000413 	.word	0x00000413
 800f744:	00000484 	.word	0x00000484
 800f748:	20000f18 	.word	0x20000f18

0800f74c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f750:	4b1d      	ldr	r3, [pc, #116]	; (800f7c8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f752:	4a1e      	ldr	r2, [pc, #120]	; (800f7cc <LoRaMacHandleMlmeRequest+0x80>)
 800f754:	5c9b      	ldrb	r3, [r3, r2]
 800f756:	2204      	movs	r2, #4
 800f758:	4013      	ands	r3, r2
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d02f      	beq.n	800f7c0 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f760:	2001      	movs	r0, #1
 800f762:	f005 f84f 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 800f766:	1e03      	subs	r3, r0, #0
 800f768:	d015      	beq.n	800f796 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f76a:	2001      	movs	r0, #1
 800f76c:	f004 ffe2 	bl	8014734 <LoRaMacConfirmQueueGetStatus>
 800f770:	1e03      	subs	r3, r0, #0
 800f772:	d104      	bne.n	800f77e <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f774:	4a14      	ldr	r2, [pc, #80]	; (800f7c8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f776:	2382      	movs	r3, #130	; 0x82
 800f778:	00db      	lsls	r3, r3, #3
 800f77a:	2100      	movs	r1, #0
 800f77c:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f77e:	4a12      	ldr	r2, [pc, #72]	; (800f7c8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f780:	23d0      	movs	r3, #208	; 0xd0
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	58d3      	ldr	r3, [r2, r3]
 800f786:	2202      	movs	r2, #2
 800f788:	4393      	bics	r3, r2
 800f78a:	0019      	movs	r1, r3
 800f78c:	4a0e      	ldr	r2, [pc, #56]	; (800f7c8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f78e:	23d0      	movs	r3, #208	; 0xd0
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800f794:	e014      	b.n	800f7c0 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f796:	2005      	movs	r0, #5
 800f798:	f005 f834 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 800f79c:	1e03      	subs	r3, r0, #0
 800f79e:	d104      	bne.n	800f7aa <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f7a0:	2006      	movs	r0, #6
 800f7a2:	f005 f82f 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 800f7a6:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f7a8:	d00a      	beq.n	800f7c0 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f7aa:	4a07      	ldr	r2, [pc, #28]	; (800f7c8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f7ac:	23d0      	movs	r3, #208	; 0xd0
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	58d3      	ldr	r3, [r2, r3]
 800f7b2:	2202      	movs	r2, #2
 800f7b4:	4393      	bics	r3, r2
 800f7b6:	0019      	movs	r1, r3
 800f7b8:	4a03      	ldr	r2, [pc, #12]	; (800f7c8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f7ba:	23d0      	movs	r3, #208	; 0xd0
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	50d1      	str	r1, [r2, r3]
}
 800f7c0:	46c0      	nop			; (mov r8, r8)
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	46c0      	nop			; (mov r8, r8)
 800f7c8:	20000bb0 	.word	0x20000bb0
 800f7cc:	00000481 	.word	0x00000481

0800f7d0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f7d4:	200c      	movs	r0, #12
 800f7d6:	f005 f815 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 800f7da:	1e03      	subs	r3, r0, #0
 800f7dc:	d01c      	beq.n	800f818 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f7de:	4b10      	ldr	r3, [pc, #64]	; (800f820 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f7e0:	4a10      	ldr	r2, [pc, #64]	; (800f824 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800f7e2:	5c9b      	ldrb	r3, [r3, r2]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	4013      	ands	r3, r2
 800f7e8:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d114      	bne.n	800f818 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f7ee:	4b0c      	ldr	r3, [pc, #48]	; (800f820 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f7f0:	4a0c      	ldr	r2, [pc, #48]	; (800f824 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800f7f2:	5c9b      	ldrb	r3, [r3, r2]
 800f7f4:	2204      	movs	r2, #4
 800f7f6:	4013      	ands	r3, r2
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00c      	beq.n	800f818 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f7fe:	4a08      	ldr	r2, [pc, #32]	; (800f820 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f800:	23d0      	movs	r3, #208	; 0xd0
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	58d3      	ldr	r3, [r2, r3]
 800f806:	2202      	movs	r2, #2
 800f808:	4393      	bics	r3, r2
 800f80a:	0019      	movs	r1, r3
 800f80c:	4a04      	ldr	r2, [pc, #16]	; (800f820 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f80e:	23d0      	movs	r3, #208	; 0xd0
 800f810:	009b      	lsls	r3, r3, #2
 800f812:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800f814:	2301      	movs	r3, #1
 800f816:	e000      	b.n	800f81a <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	0018      	movs	r0, r3
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	20000bb0 	.word	0x20000bb0
 800f824:	00000481 	.word	0x00000481

0800f828 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f82c:	4a0f      	ldr	r2, [pc, #60]	; (800f86c <LoRaMacCheckForRxAbort+0x44>)
 800f82e:	23d0      	movs	r3, #208	; 0xd0
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	58d3      	ldr	r3, [r2, r3]
 800f834:	2280      	movs	r2, #128	; 0x80
 800f836:	4013      	ands	r3, r2
 800f838:	d015      	beq.n	800f866 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f83a:	4a0c      	ldr	r2, [pc, #48]	; (800f86c <LoRaMacCheckForRxAbort+0x44>)
 800f83c:	23d0      	movs	r3, #208	; 0xd0
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	58d3      	ldr	r3, [r2, r3]
 800f842:	2280      	movs	r2, #128	; 0x80
 800f844:	4393      	bics	r3, r2
 800f846:	0019      	movs	r1, r3
 800f848:	4a08      	ldr	r2, [pc, #32]	; (800f86c <LoRaMacCheckForRxAbort+0x44>)
 800f84a:	23d0      	movs	r3, #208	; 0xd0
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f850:	4a06      	ldr	r2, [pc, #24]	; (800f86c <LoRaMacCheckForRxAbort+0x44>)
 800f852:	23d0      	movs	r3, #208	; 0xd0
 800f854:	009b      	lsls	r3, r3, #2
 800f856:	58d3      	ldr	r3, [r2, r3]
 800f858:	2202      	movs	r2, #2
 800f85a:	4393      	bics	r3, r2
 800f85c:	0019      	movs	r1, r3
 800f85e:	4a03      	ldr	r2, [pc, #12]	; (800f86c <LoRaMacCheckForRxAbort+0x44>)
 800f860:	23d0      	movs	r3, #208	; 0xd0
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	50d1      	str	r1, [r2, r3]
    }
}
 800f866:	46c0      	nop			; (mov r8, r8)
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	20000bb0 	.word	0x20000bb0

0800f870 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f878:	4b19      	ldr	r3, [pc, #100]	; (800f8e0 <OnTxDelayedTimerEvent+0x70>)
 800f87a:	0018      	movs	r0, r3
 800f87c:	f00c fedc 	bl	801c638 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f880:	4a18      	ldr	r2, [pc, #96]	; (800f8e4 <OnTxDelayedTimerEvent+0x74>)
 800f882:	23d0      	movs	r3, #208	; 0xd0
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	58d3      	ldr	r3, [r2, r3]
 800f888:	2220      	movs	r2, #32
 800f88a:	4393      	bics	r3, r2
 800f88c:	0019      	movs	r1, r3
 800f88e:	4a15      	ldr	r2, [pc, #84]	; (800f8e4 <OnTxDelayedTimerEvent+0x74>)
 800f890:	23d0      	movs	r3, #208	; 0xd0
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f896:	2001      	movs	r0, #1
 800f898:	f001 fb58 	bl	8010f4c <ScheduleTx>
 800f89c:	1e03      	subs	r3, r0, #0
 800f89e:	d01a      	beq.n	800f8d6 <OnTxDelayedTimerEvent+0x66>
 800f8a0:	2b0b      	cmp	r3, #11
 800f8a2:	d018      	beq.n	800f8d6 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f8a4:	4b0f      	ldr	r3, [pc, #60]	; (800f8e4 <OnTxDelayedTimerEvent+0x74>)
 800f8a6:	4a10      	ldr	r2, [pc, #64]	; (800f8e8 <OnTxDelayedTimerEvent+0x78>)
 800f8a8:	589b      	ldr	r3, [r3, r2]
 800f8aa:	2285      	movs	r2, #133	; 0x85
 800f8ac:	569b      	ldrsb	r3, [r3, r2]
 800f8ae:	b2d9      	uxtb	r1, r3
 800f8b0:	4b0c      	ldr	r3, [pc, #48]	; (800f8e4 <OnTxDelayedTimerEvent+0x74>)
 800f8b2:	4a0e      	ldr	r2, [pc, #56]	; (800f8ec <OnTxDelayedTimerEvent+0x7c>)
 800f8b4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800f8b6:	4b0b      	ldr	r3, [pc, #44]	; (800f8e4 <OnTxDelayedTimerEvent+0x74>)
 800f8b8:	4a0d      	ldr	r2, [pc, #52]	; (800f8f0 <OnTxDelayedTimerEvent+0x80>)
 800f8ba:	5c99      	ldrb	r1, [r3, r2]
 800f8bc:	4b09      	ldr	r3, [pc, #36]	; (800f8e4 <OnTxDelayedTimerEvent+0x74>)
 800f8be:	4a0d      	ldr	r2, [pc, #52]	; (800f8f4 <OnTxDelayedTimerEvent+0x84>)
 800f8c0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f8c2:	4b08      	ldr	r3, [pc, #32]	; (800f8e4 <OnTxDelayedTimerEvent+0x74>)
 800f8c4:	4a0c      	ldr	r2, [pc, #48]	; (800f8f8 <OnTxDelayedTimerEvent+0x88>)
 800f8c6:	2109      	movs	r1, #9
 800f8c8:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f8ca:	2009      	movs	r0, #9
 800f8cc:	f004 ff60 	bl	8014790 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f8d0:	f002 faa2 	bl	8011e18 <StopRetransmission>
            break;
 800f8d4:	e000      	b.n	800f8d8 <OnTxDelayedTimerEvent+0x68>
            break;
 800f8d6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800f8d8:	46c0      	nop			; (mov r8, r8)
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	b002      	add	sp, #8
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	20000f18 	.word	0x20000f18
 800f8e4:	20000bb0 	.word	0x20000bb0
 800f8e8:	00000484 	.word	0x00000484
 800f8ec:	0000043e 	.word	0x0000043e
 800f8f0:	00000412 	.word	0x00000412
 800f8f4:	00000441 	.word	0x00000441
 800f8f8:	0000043d 	.word	0x0000043d

0800f8fc <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f904:	4b19      	ldr	r3, [pc, #100]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f906:	4a1a      	ldr	r2, [pc, #104]	; (800f970 <OnRxWindow1TimerEvent+0x74>)
 800f908:	5c99      	ldrb	r1, [r3, r2]
 800f90a:	4a18      	ldr	r2, [pc, #96]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f90c:	23ee      	movs	r3, #238	; 0xee
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800f912:	4b16      	ldr	r3, [pc, #88]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f914:	4a17      	ldr	r2, [pc, #92]	; (800f974 <OnRxWindow1TimerEvent+0x78>)
 800f916:	589b      	ldr	r3, [r3, r2]
 800f918:	22a5      	movs	r2, #165	; 0xa5
 800f91a:	5c9b      	ldrb	r3, [r3, r2]
 800f91c:	b259      	sxtb	r1, r3
 800f91e:	4b13      	ldr	r3, [pc, #76]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f920:	4a15      	ldr	r2, [pc, #84]	; (800f978 <OnRxWindow1TimerEvent+0x7c>)
 800f922:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f924:	4b11      	ldr	r3, [pc, #68]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f926:	4a13      	ldr	r2, [pc, #76]	; (800f974 <OnRxWindow1TimerEvent+0x78>)
 800f928:	589b      	ldr	r3, [r3, r2]
 800f92a:	22b9      	movs	r2, #185	; 0xb9
 800f92c:	5c99      	ldrb	r1, [r3, r2]
 800f92e:	4a0f      	ldr	r2, [pc, #60]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f930:	23f2      	movs	r3, #242	; 0xf2
 800f932:	009b      	lsls	r3, r3, #2
 800f934:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800f936:	4b0d      	ldr	r3, [pc, #52]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f938:	4a0e      	ldr	r2, [pc, #56]	; (800f974 <OnRxWindow1TimerEvent+0x78>)
 800f93a:	589b      	ldr	r3, [r3, r2]
 800f93c:	22ca      	movs	r2, #202	; 0xca
 800f93e:	5c99      	ldrb	r1, [r3, r2]
 800f940:	4b0a      	ldr	r3, [pc, #40]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f942:	4a0e      	ldr	r2, [pc, #56]	; (800f97c <OnRxWindow1TimerEvent+0x80>)
 800f944:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f946:	4b09      	ldr	r3, [pc, #36]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f948:	4a0d      	ldr	r2, [pc, #52]	; (800f980 <OnRxWindow1TimerEvent+0x84>)
 800f94a:	2100      	movs	r1, #0
 800f94c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f94e:	4b07      	ldr	r3, [pc, #28]	; (800f96c <OnRxWindow1TimerEvent+0x70>)
 800f950:	4a0c      	ldr	r2, [pc, #48]	; (800f984 <OnRxWindow1TimerEvent+0x88>)
 800f952:	2100      	movs	r1, #0
 800f954:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f956:	4a0c      	ldr	r2, [pc, #48]	; (800f988 <OnRxWindow1TimerEvent+0x8c>)
 800f958:	4b0c      	ldr	r3, [pc, #48]	; (800f98c <OnRxWindow1TimerEvent+0x90>)
 800f95a:	0011      	movs	r1, r2
 800f95c:	0018      	movs	r0, r3
 800f95e:	f001 fd9b 	bl	8011498 <RxWindowSetup>
}
 800f962:	46c0      	nop			; (mov r8, r8)
 800f964:	46bd      	mov	sp, r7
 800f966:	b002      	add	sp, #8
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	46c0      	nop			; (mov r8, r8)
 800f96c:	20000bb0 	.word	0x20000bb0
 800f970:	00000415 	.word	0x00000415
 800f974:	00000484 	.word	0x00000484
 800f978:	000003bb 	.word	0x000003bb
 800f97c:	000003c9 	.word	0x000003c9
 800f980:	000003ca 	.word	0x000003ca
 800f984:	000003cb 	.word	0x000003cb
 800f988:	20000f68 	.word	0x20000f68
 800f98c:	20000f30 	.word	0x20000f30

0800f990 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f998:	4a1c      	ldr	r2, [pc, #112]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f99a:	2390      	movs	r3, #144	; 0x90
 800f99c:	00db      	lsls	r3, r3, #3
 800f99e:	5cd3      	ldrb	r3, [r2, r3]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d02f      	beq.n	800fa04 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f9a4:	4b19      	ldr	r3, [pc, #100]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9a6:	4a1a      	ldr	r2, [pc, #104]	; (800fa10 <OnRxWindow2TimerEvent+0x80>)
 800f9a8:	5c99      	ldrb	r1, [r3, r2]
 800f9aa:	4a18      	ldr	r2, [pc, #96]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9ac:	23f3      	movs	r3, #243	; 0xf3
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800f9b2:	4b16      	ldr	r3, [pc, #88]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9b4:	4a17      	ldr	r2, [pc, #92]	; (800fa14 <OnRxWindow2TimerEvent+0x84>)
 800f9b6:	589b      	ldr	r3, [r3, r2]
 800f9b8:	22a8      	movs	r2, #168	; 0xa8
 800f9ba:	5899      	ldr	r1, [r3, r2]
 800f9bc:	4a13      	ldr	r2, [pc, #76]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9be:	23f4      	movs	r3, #244	; 0xf4
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f9c4:	4b11      	ldr	r3, [pc, #68]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9c6:	4a13      	ldr	r2, [pc, #76]	; (800fa14 <OnRxWindow2TimerEvent+0x84>)
 800f9c8:	589b      	ldr	r3, [r3, r2]
 800f9ca:	22b9      	movs	r2, #185	; 0xb9
 800f9cc:	5c99      	ldrb	r1, [r3, r2]
 800f9ce:	4a0f      	ldr	r2, [pc, #60]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9d0:	23f7      	movs	r3, #247	; 0xf7
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800f9d6:	4b0d      	ldr	r3, [pc, #52]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9d8:	4a0e      	ldr	r2, [pc, #56]	; (800fa14 <OnRxWindow2TimerEvent+0x84>)
 800f9da:	589b      	ldr	r3, [r3, r2]
 800f9dc:	22ca      	movs	r2, #202	; 0xca
 800f9de:	5c99      	ldrb	r1, [r3, r2]
 800f9e0:	4b0a      	ldr	r3, [pc, #40]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9e2:	4a0d      	ldr	r2, [pc, #52]	; (800fa18 <OnRxWindow2TimerEvent+0x88>)
 800f9e4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f9e6:	4b09      	ldr	r3, [pc, #36]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9e8:	4a0c      	ldr	r2, [pc, #48]	; (800fa1c <OnRxWindow2TimerEvent+0x8c>)
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f9ee:	4b07      	ldr	r3, [pc, #28]	; (800fa0c <OnRxWindow2TimerEvent+0x7c>)
 800f9f0:	4a0b      	ldr	r2, [pc, #44]	; (800fa20 <OnRxWindow2TimerEvent+0x90>)
 800f9f2:	2101      	movs	r1, #1
 800f9f4:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f9f6:	4a0b      	ldr	r2, [pc, #44]	; (800fa24 <OnRxWindow2TimerEvent+0x94>)
 800f9f8:	4b0b      	ldr	r3, [pc, #44]	; (800fa28 <OnRxWindow2TimerEvent+0x98>)
 800f9fa:	0011      	movs	r1, r2
 800f9fc:	0018      	movs	r0, r3
 800f9fe:	f001 fd4b 	bl	8011498 <RxWindowSetup>
 800fa02:	e000      	b.n	800fa06 <OnRxWindow2TimerEvent+0x76>
        return;
 800fa04:	46c0      	nop			; (mov r8, r8)
}
 800fa06:	46bd      	mov	sp, r7
 800fa08:	b002      	add	sp, #8
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	20000bb0 	.word	0x20000bb0
 800fa10:	00000415 	.word	0x00000415
 800fa14:	00000484 	.word	0x00000484
 800fa18:	000003dd 	.word	0x000003dd
 800fa1c:	000003de 	.word	0x000003de
 800fa20:	000003df 	.word	0x000003df
 800fa24:	20000f7c 	.word	0x20000f7c
 800fa28:	20000f48 	.word	0x20000f48

0800fa2c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800fa34:	4b18      	ldr	r3, [pc, #96]	; (800fa98 <OnAckTimeoutTimerEvent+0x6c>)
 800fa36:	0018      	movs	r0, r3
 800fa38:	f00c fdfe 	bl	801c638 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fa3c:	4b17      	ldr	r3, [pc, #92]	; (800fa9c <OnAckTimeoutTimerEvent+0x70>)
 800fa3e:	4a18      	ldr	r2, [pc, #96]	; (800faa0 <OnAckTimeoutTimerEvent+0x74>)
 800fa40:	5c9b      	ldrb	r3, [r3, r2]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d003      	beq.n	800fa4e <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 800fa46:	4b15      	ldr	r3, [pc, #84]	; (800fa9c <OnAckTimeoutTimerEvent+0x70>)
 800fa48:	4a16      	ldr	r2, [pc, #88]	; (800faa4 <OnAckTimeoutTimerEvent+0x78>)
 800fa4a:	2101      	movs	r1, #1
 800fa4c:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fa4e:	4b13      	ldr	r3, [pc, #76]	; (800fa9c <OnAckTimeoutTimerEvent+0x70>)
 800fa50:	4a15      	ldr	r2, [pc, #84]	; (800faa8 <OnAckTimeoutTimerEvent+0x7c>)
 800fa52:	589b      	ldr	r3, [r3, r2]
 800fa54:	227c      	movs	r2, #124	; 0x7c
 800fa56:	5c9b      	ldrb	r3, [r3, r2]
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d105      	bne.n	800fa68 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fa5c:	4b0f      	ldr	r3, [pc, #60]	; (800fa9c <OnAckTimeoutTimerEvent+0x70>)
 800fa5e:	4a13      	ldr	r2, [pc, #76]	; (800faac <OnAckTimeoutTimerEvent+0x80>)
 800fa60:	5c99      	ldrb	r1, [r3, r2]
 800fa62:	2020      	movs	r0, #32
 800fa64:	4301      	orrs	r1, r0
 800fa66:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fa68:	4a0c      	ldr	r2, [pc, #48]	; (800fa9c <OnAckTimeoutTimerEvent+0x70>)
 800fa6a:	23d2      	movs	r3, #210	; 0xd2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	58d3      	ldr	r3, [r2, r3]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d00c      	beq.n	800fa8e <OnAckTimeoutTimerEvent+0x62>
 800fa74:	4a09      	ldr	r2, [pc, #36]	; (800fa9c <OnAckTimeoutTimerEvent+0x70>)
 800fa76:	23d2      	movs	r3, #210	; 0xd2
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	58d3      	ldr	r3, [r2, r3]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d005      	beq.n	800fa8e <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fa82:	4a06      	ldr	r2, [pc, #24]	; (800fa9c <OnAckTimeoutTimerEvent+0x70>)
 800fa84:	23d2      	movs	r3, #210	; 0xd2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	58d3      	ldr	r3, [r2, r3]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	4798      	blx	r3
    }
}
 800fa8e:	46c0      	nop			; (mov r8, r8)
 800fa90:	46bd      	mov	sp, r7
 800fa92:	b002      	add	sp, #8
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	46c0      	nop			; (mov r8, r8)
 800fa98:	20000fa8 	.word	0x20000fa8
 800fa9c:	20000bb0 	.word	0x20000bb0
 800faa0:	00000414 	.word	0x00000414
 800faa4:	00000413 	.word	0x00000413
 800faa8:	00000484 	.word	0x00000484
 800faac:	00000481 	.word	0x00000481

0800fab0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fab0:	b590      	push	{r4, r7, lr}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60ba      	str	r2, [r7, #8]
 800fab8:	607b      	str	r3, [r7, #4]
 800faba:	230f      	movs	r3, #15
 800fabc:	18fb      	adds	r3, r7, r3
 800fabe:	1c02      	adds	r2, r0, #0
 800fac0:	701a      	strb	r2, [r3, #0]
 800fac2:	230e      	movs	r3, #14
 800fac4:	18fb      	adds	r3, r7, r3
 800fac6:	1c0a      	adds	r2, r1, #0
 800fac8:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	2b00      	cmp	r3, #0
 800face:	d005      	beq.n	800fadc <GetFCntDown+0x2c>
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d002      	beq.n	800fadc <GetFCntDown+0x2c>
 800fad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d101      	bne.n	800fae0 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fadc:	230a      	movs	r3, #10
 800fade:	e033      	b.n	800fb48 <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fae0:	230f      	movs	r3, #15
 800fae2:	18fb      	adds	r3, r7, r3
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d01a      	beq.n	800fb20 <GetFCntDown+0x70>
 800faea:	2b01      	cmp	r3, #1
 800faec:	d11c      	bne.n	800fb28 <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800faee:	1d3b      	adds	r3, r7, #4
 800faf0:	789b      	ldrb	r3, [r3, #2]
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d110      	bne.n	800fb18 <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800faf6:	220e      	movs	r2, #14
 800faf8:	18bb      	adds	r3, r7, r2
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d003      	beq.n	800fb08 <GetFCntDown+0x58>
 800fb00:	18bb      	adds	r3, r7, r2
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	2b03      	cmp	r3, #3
 800fb06:	d103      	bne.n	800fb10 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 800fb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0a:	2202      	movs	r2, #2
 800fb0c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fb0e:	e00d      	b.n	800fb2c <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 800fb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb12:	2201      	movs	r2, #1
 800fb14:	701a      	strb	r2, [r3, #0]
            break;
 800fb16:	e009      	b.n	800fb2c <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 800fb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1a:	2203      	movs	r2, #3
 800fb1c:	701a      	strb	r2, [r3, #0]
            break;
 800fb1e:	e005      	b.n	800fb2c <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	2204      	movs	r2, #4
 800fb24:	701a      	strb	r2, [r3, #0]
            break;
 800fb26:	e001      	b.n	800fb2c <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fb28:	2305      	movs	r3, #5
 800fb2a:	e00d      	b.n	800fb48 <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	7818      	ldrb	r0, [r3, #0]
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	89db      	ldrh	r3, [r3, #14]
 800fb34:	001c      	movs	r4, r3
 800fb36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb38:	2320      	movs	r3, #32
 800fb3a:	18fb      	adds	r3, r7, r3
 800fb3c:	8819      	ldrh	r1, [r3, #0]
 800fb3e:	0013      	movs	r3, r2
 800fb40:	0022      	movs	r2, r4
 800fb42:	f005 fd15 	bl	8015570 <LoRaMacCryptoGetFCntDown>
 800fb46:	0003      	movs	r3, r0
}
 800fb48:	0018      	movs	r0, r3
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	b005      	add	sp, #20
 800fb4e:	bd90      	pop	{r4, r7, pc}

0800fb50 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fb50:	b5b0      	push	{r4, r5, r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	0002      	movs	r2, r0
 800fb58:	1dfb      	adds	r3, r7, #7
 800fb5a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb5c:	230f      	movs	r3, #15
 800fb5e:	18fb      	adds	r3, r7, r3
 800fb60:	2203      	movs	r2, #3
 800fb62:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800fb64:	4b82      	ldr	r3, [pc, #520]	; (800fd70 <SwitchClass+0x220>)
 800fb66:	4a83      	ldr	r2, [pc, #524]	; (800fd74 <SwitchClass+0x224>)
 800fb68:	589b      	ldr	r3, [r3, r2]
 800fb6a:	227c      	movs	r2, #124	; 0x7c
 800fb6c:	5c9b      	ldrb	r3, [r3, r2]
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d100      	bne.n	800fb74 <SwitchClass+0x24>
 800fb72:	e0de      	b.n	800fd32 <SwitchClass+0x1e2>
 800fb74:	dd00      	ble.n	800fb78 <SwitchClass+0x28>
 800fb76:	e0f4      	b.n	800fd62 <SwitchClass+0x212>
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d003      	beq.n	800fb84 <SwitchClass+0x34>
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d100      	bne.n	800fb82 <SwitchClass+0x32>
 800fb80:	e0c2      	b.n	800fd08 <SwitchClass+0x1b8>
 800fb82:	e0ee      	b.n	800fd62 <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fb84:	1dfb      	adds	r3, r7, #7
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d10b      	bne.n	800fba4 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800fb8c:	4b78      	ldr	r3, [pc, #480]	; (800fd70 <SwitchClass+0x220>)
 800fb8e:	4a79      	ldr	r2, [pc, #484]	; (800fd74 <SwitchClass+0x224>)
 800fb90:	589a      	ldr	r2, [r3, r2]
 800fb92:	4b77      	ldr	r3, [pc, #476]	; (800fd70 <SwitchClass+0x220>)
 800fb94:	4977      	ldr	r1, [pc, #476]	; (800fd74 <SwitchClass+0x224>)
 800fb96:	585b      	ldr	r3, [r3, r1]
 800fb98:	20b0      	movs	r0, #176	; 0xb0
 800fb9a:	21a8      	movs	r1, #168	; 0xa8
 800fb9c:	181b      	adds	r3, r3, r0
 800fb9e:	1852      	adds	r2, r2, r1
 800fba0:	ca03      	ldmia	r2!, {r0, r1}
 800fba2:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800fba4:	1dfb      	adds	r3, r7, #7
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d113      	bne.n	800fbd4 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fbac:	250f      	movs	r5, #15
 800fbae:	197c      	adds	r4, r7, r5
 800fbb0:	1dfb      	adds	r3, r7, #7
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	0018      	movs	r0, r3
 800fbb6:	f004 f8d3 	bl	8013d60 <LoRaMacClassBSwitchClass>
 800fbba:	0003      	movs	r3, r0
 800fbbc:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800fbbe:	197b      	adds	r3, r7, r5
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d106      	bne.n	800fbd4 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fbc6:	4b6a      	ldr	r3, [pc, #424]	; (800fd70 <SwitchClass+0x220>)
 800fbc8:	4a6a      	ldr	r2, [pc, #424]	; (800fd74 <SwitchClass+0x224>)
 800fbca:	589b      	ldr	r3, [r3, r2]
 800fbcc:	1dfa      	adds	r2, r7, #7
 800fbce:	217c      	movs	r1, #124	; 0x7c
 800fbd0:	7812      	ldrb	r2, [r2, #0]
 800fbd2:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800fbd4:	1dfb      	adds	r3, r7, #7
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	d000      	beq.n	800fbde <SwitchClass+0x8e>
 800fbdc:	e0bc      	b.n	800fd58 <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fbde:	4b64      	ldr	r3, [pc, #400]	; (800fd70 <SwitchClass+0x220>)
 800fbe0:	4a64      	ldr	r2, [pc, #400]	; (800fd74 <SwitchClass+0x224>)
 800fbe2:	589b      	ldr	r3, [r3, r2]
 800fbe4:	1dfa      	adds	r2, r7, #7
 800fbe6:	217c      	movs	r1, #124	; 0x7c
 800fbe8:	7812      	ldrb	r2, [r2, #0]
 800fbea:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fbec:	4860      	ldr	r0, [pc, #384]	; (800fd70 <SwitchClass+0x220>)
 800fbee:	23f8      	movs	r3, #248	; 0xf8
 800fbf0:	009b      	lsls	r3, r3, #2
 800fbf2:	495f      	ldr	r1, [pc, #380]	; (800fd70 <SwitchClass+0x220>)
 800fbf4:	22f3      	movs	r2, #243	; 0xf3
 800fbf6:	0092      	lsls	r2, r2, #2
 800fbf8:	18c3      	adds	r3, r0, r3
 800fbfa:	188a      	adds	r2, r1, r2
 800fbfc:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fbfe:	c313      	stmia	r3!, {r0, r1, r4}
 800fc00:	ca03      	ldmia	r2!, {r0, r1}
 800fc02:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fc04:	4b5a      	ldr	r3, [pc, #360]	; (800fd70 <SwitchClass+0x220>)
 800fc06:	4a5c      	ldr	r2, [pc, #368]	; (800fd78 <SwitchClass+0x228>)
 800fc08:	2102      	movs	r1, #2
 800fc0a:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fc0c:	230e      	movs	r3, #14
 800fc0e:	18fb      	adds	r3, r7, r3
 800fc10:	2200      	movs	r2, #0
 800fc12:	701a      	strb	r2, [r3, #0]
 800fc14:	e064      	b.n	800fce0 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800fc16:	4b56      	ldr	r3, [pc, #344]	; (800fd70 <SwitchClass+0x220>)
 800fc18:	4a56      	ldr	r2, [pc, #344]	; (800fd74 <SwitchClass+0x224>)
 800fc1a:	589a      	ldr	r2, [r3, r2]
 800fc1c:	240e      	movs	r4, #14
 800fc1e:	193b      	adds	r3, r7, r4
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	b25b      	sxtb	r3, r3
 800fc24:	2152      	movs	r1, #82	; 0x52
 800fc26:	202c      	movs	r0, #44	; 0x2c
 800fc28:	4343      	muls	r3, r0
 800fc2a:	18d3      	adds	r3, r2, r3
 800fc2c:	185b      	adds	r3, r3, r1
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d04c      	beq.n	800fcce <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800fc34:	4b4e      	ldr	r3, [pc, #312]	; (800fd70 <SwitchClass+0x220>)
 800fc36:	4a4f      	ldr	r2, [pc, #316]	; (800fd74 <SwitchClass+0x224>)
 800fc38:	5899      	ldr	r1, [r3, r2]
 800fc3a:	193b      	adds	r3, r7, r4
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	4a4b      	ldr	r2, [pc, #300]	; (800fd70 <SwitchClass+0x220>)
 800fc42:	484c      	ldr	r0, [pc, #304]	; (800fd74 <SwitchClass+0x224>)
 800fc44:	5812      	ldr	r2, [r2, r0]
 800fc46:	202c      	movs	r0, #44	; 0x2c
 800fc48:	4343      	muls	r3, r0
 800fc4a:	18cb      	adds	r3, r1, r3
 800fc4c:	3368      	adds	r3, #104	; 0x68
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	21b0      	movs	r1, #176	; 0xb0
 800fc52:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800fc54:	4b46      	ldr	r3, [pc, #280]	; (800fd70 <SwitchClass+0x220>)
 800fc56:	4a47      	ldr	r2, [pc, #284]	; (800fd74 <SwitchClass+0x224>)
 800fc58:	589a      	ldr	r2, [r3, r2]
 800fc5a:	193b      	adds	r3, r7, r4
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	b25b      	sxtb	r3, r3
 800fc60:	216c      	movs	r1, #108	; 0x6c
 800fc62:	202c      	movs	r0, #44	; 0x2c
 800fc64:	4343      	muls	r3, r0
 800fc66:	18d3      	adds	r3, r2, r3
 800fc68:	185b      	adds	r3, r3, r1
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	5659      	ldrsb	r1, [r3, r1]
 800fc6e:	4b40      	ldr	r3, [pc, #256]	; (800fd70 <SwitchClass+0x220>)
 800fc70:	4a40      	ldr	r2, [pc, #256]	; (800fd74 <SwitchClass+0x224>)
 800fc72:	589b      	ldr	r3, [r3, r2]
 800fc74:	b2c9      	uxtb	r1, r1
 800fc76:	22b4      	movs	r2, #180	; 0xb4
 800fc78:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fc7a:	4b3d      	ldr	r3, [pc, #244]	; (800fd70 <SwitchClass+0x220>)
 800fc7c:	4a3f      	ldr	r2, [pc, #252]	; (800fd7c <SwitchClass+0x22c>)
 800fc7e:	5c99      	ldrb	r1, [r3, r2]
 800fc80:	4a3b      	ldr	r2, [pc, #236]	; (800fd70 <SwitchClass+0x220>)
 800fc82:	23f8      	movs	r3, #248	; 0xf8
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800fc88:	4b39      	ldr	r3, [pc, #228]	; (800fd70 <SwitchClass+0x220>)
 800fc8a:	4a3a      	ldr	r2, [pc, #232]	; (800fd74 <SwitchClass+0x224>)
 800fc8c:	589b      	ldr	r3, [r3, r2]
 800fc8e:	22b0      	movs	r2, #176	; 0xb0
 800fc90:	5899      	ldr	r1, [r3, r2]
 800fc92:	4a37      	ldr	r2, [pc, #220]	; (800fd70 <SwitchClass+0x220>)
 800fc94:	23f9      	movs	r3, #249	; 0xf9
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fc9a:	4b35      	ldr	r3, [pc, #212]	; (800fd70 <SwitchClass+0x220>)
 800fc9c:	4a35      	ldr	r2, [pc, #212]	; (800fd74 <SwitchClass+0x224>)
 800fc9e:	589b      	ldr	r3, [r3, r2]
 800fca0:	22b9      	movs	r2, #185	; 0xb9
 800fca2:	5c99      	ldrb	r1, [r3, r2]
 800fca4:	4a32      	ldr	r2, [pc, #200]	; (800fd70 <SwitchClass+0x220>)
 800fca6:	23fc      	movs	r3, #252	; 0xfc
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800fcac:	4b30      	ldr	r3, [pc, #192]	; (800fd70 <SwitchClass+0x220>)
 800fcae:	4a31      	ldr	r2, [pc, #196]	; (800fd74 <SwitchClass+0x224>)
 800fcb0:	589b      	ldr	r3, [r3, r2]
 800fcb2:	22ca      	movs	r2, #202	; 0xca
 800fcb4:	5c99      	ldrb	r1, [r3, r2]
 800fcb6:	4b2e      	ldr	r3, [pc, #184]	; (800fd70 <SwitchClass+0x220>)
 800fcb8:	4a31      	ldr	r2, [pc, #196]	; (800fd80 <SwitchClass+0x230>)
 800fcba:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fcbc:	4b2c      	ldr	r3, [pc, #176]	; (800fd70 <SwitchClass+0x220>)
 800fcbe:	4a2e      	ldr	r2, [pc, #184]	; (800fd78 <SwitchClass+0x228>)
 800fcc0:	2103      	movs	r1, #3
 800fcc2:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fcc4:	4b2a      	ldr	r3, [pc, #168]	; (800fd70 <SwitchClass+0x220>)
 800fcc6:	4a2f      	ldr	r2, [pc, #188]	; (800fd84 <SwitchClass+0x234>)
 800fcc8:	2101      	movs	r1, #1
 800fcca:	5499      	strb	r1, [r3, r2]
                        break;
 800fccc:	e00e      	b.n	800fcec <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fcce:	210e      	movs	r1, #14
 800fcd0:	187b      	adds	r3, r7, r1
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	b25b      	sxtb	r3, r3
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	3301      	adds	r3, #1
 800fcda:	b2da      	uxtb	r2, r3
 800fcdc:	187b      	adds	r3, r7, r1
 800fcde:	701a      	strb	r2, [r3, #0]
 800fce0:	230e      	movs	r3, #14
 800fce2:	18fb      	adds	r3, r7, r3
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	b25b      	sxtb	r3, r3
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	dd94      	ble.n	800fc16 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fcec:	4b20      	ldr	r3, [pc, #128]	; (800fd70 <SwitchClass+0x220>)
 800fcee:	4a26      	ldr	r2, [pc, #152]	; (800fd88 <SwitchClass+0x238>)
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fcf4:	4b25      	ldr	r3, [pc, #148]	; (800fd8c <SwitchClass+0x23c>)
 800fcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fcfa:	f001 fbff 	bl	80114fc <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800fcfe:	230f      	movs	r3, #15
 800fd00:	18fb      	adds	r3, r7, r3
 800fd02:	2200      	movs	r2, #0
 800fd04:	701a      	strb	r2, [r3, #0]
            }
            break;
 800fd06:	e027      	b.n	800fd58 <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fd08:	250f      	movs	r5, #15
 800fd0a:	197c      	adds	r4, r7, r5
 800fd0c:	1dfb      	adds	r3, r7, #7
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	0018      	movs	r0, r3
 800fd12:	f004 f825 	bl	8013d60 <LoRaMacClassBSwitchClass>
 800fd16:	0003      	movs	r3, r0
 800fd18:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800fd1a:	197b      	adds	r3, r7, r5
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d11c      	bne.n	800fd5c <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fd22:	4b13      	ldr	r3, [pc, #76]	; (800fd70 <SwitchClass+0x220>)
 800fd24:	4a13      	ldr	r2, [pc, #76]	; (800fd74 <SwitchClass+0x224>)
 800fd26:	589b      	ldr	r3, [r3, r2]
 800fd28:	1dfa      	adds	r2, r7, #7
 800fd2a:	217c      	movs	r1, #124	; 0x7c
 800fd2c:	7812      	ldrb	r2, [r2, #0]
 800fd2e:	545a      	strb	r2, [r3, r1]
            }
            break;
 800fd30:	e014      	b.n	800fd5c <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fd32:	1dfb      	adds	r3, r7, #7
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d112      	bne.n	800fd60 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fd3a:	4b0d      	ldr	r3, [pc, #52]	; (800fd70 <SwitchClass+0x220>)
 800fd3c:	4a0d      	ldr	r2, [pc, #52]	; (800fd74 <SwitchClass+0x224>)
 800fd3e:	589b      	ldr	r3, [r3, r2]
 800fd40:	1dfa      	adds	r2, r7, #7
 800fd42:	217c      	movs	r1, #124	; 0x7c
 800fd44:	7812      	ldrb	r2, [r2, #0]
 800fd46:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fd48:	4b10      	ldr	r3, [pc, #64]	; (800fd8c <SwitchClass+0x23c>)
 800fd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd4c:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fd4e:	230f      	movs	r3, #15
 800fd50:	18fb      	adds	r3, r7, r3
 800fd52:	2200      	movs	r2, #0
 800fd54:	701a      	strb	r2, [r3, #0]
            }
            break;
 800fd56:	e003      	b.n	800fd60 <SwitchClass+0x210>
            break;
 800fd58:	46c0      	nop			; (mov r8, r8)
 800fd5a:	e002      	b.n	800fd62 <SwitchClass+0x212>
            break;
 800fd5c:	46c0      	nop			; (mov r8, r8)
 800fd5e:	e000      	b.n	800fd62 <SwitchClass+0x212>
            break;
 800fd60:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 800fd62:	230f      	movs	r3, #15
 800fd64:	18fb      	adds	r3, r7, r3
 800fd66:	781b      	ldrb	r3, [r3, #0]
}
 800fd68:	0018      	movs	r0, r3
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	b004      	add	sp, #16
 800fd6e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd70:	20000bb0 	.word	0x20000bb0
 800fd74:	00000484 	.word	0x00000484
 800fd78:	000003f3 	.word	0x000003f3
 800fd7c:	00000415 	.word	0x00000415
 800fd80:	000003f1 	.word	0x000003f1
 800fd84:	000003f2 	.word	0x000003f2
 800fd88:	00000414 	.word	0x00000414
 800fd8c:	0801ec78 	.word	0x0801ec78

0800fd90 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	0002      	movs	r2, r0
 800fd98:	1dfb      	adds	r3, r7, #7
 800fd9a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800fd9c:	4b17      	ldr	r3, [pc, #92]	; (800fdfc <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800fd9e:	4a18      	ldr	r2, [pc, #96]	; (800fe00 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800fda0:	589b      	ldr	r3, [r3, r2]
 800fda2:	22b8      	movs	r2, #184	; 0xb8
 800fda4:	5c9a      	ldrb	r2, [r3, r2]
 800fda6:	2110      	movs	r1, #16
 800fda8:	187b      	adds	r3, r7, r1
 800fdaa:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800fdac:	187b      	adds	r3, r7, r1
 800fdae:	1dfa      	adds	r2, r7, #7
 800fdb0:	7812      	ldrb	r2, [r2, #0]
 800fdb2:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fdb4:	187b      	adds	r3, r7, r1
 800fdb6:	220d      	movs	r2, #13
 800fdb8:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800fdba:	4b10      	ldr	r3, [pc, #64]	; (800fdfc <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800fdbc:	4a10      	ldr	r2, [pc, #64]	; (800fe00 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800fdbe:	589b      	ldr	r3, [r3, r2]
 800fdc0:	22ca      	movs	r2, #202	; 0xca
 800fdc2:	5c9b      	ldrb	r3, [r3, r2]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d002      	beq.n	800fdce <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fdc8:	187b      	adds	r3, r7, r1
 800fdca:	220e      	movs	r2, #14
 800fdcc:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fdce:	4b0b      	ldr	r3, [pc, #44]	; (800fdfc <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800fdd0:	4a0b      	ldr	r2, [pc, #44]	; (800fe00 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800fdd2:	589b      	ldr	r3, [r3, r2]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	2210      	movs	r2, #16
 800fdd8:	18ba      	adds	r2, r7, r2
 800fdda:	0011      	movs	r1, r2
 800fddc:	0018      	movs	r0, r3
 800fdde:	f006 fc30 	bl	8016642 <RegionGetPhyParam>
 800fde2:	0003      	movs	r3, r0
 800fde4:	001a      	movs	r2, r3
 800fde6:	210c      	movs	r1, #12
 800fde8:	187b      	adds	r3, r7, r1
 800fdea:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800fdec:	187b      	adds	r3, r7, r1
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	b2db      	uxtb	r3, r3
}
 800fdf2:	0018      	movs	r0, r3
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	b006      	add	sp, #24
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	46c0      	nop			; (mov r8, r8)
 800fdfc:	20000bb0 	.word	0x20000bb0
 800fe00:	00000484 	.word	0x00000484

0800fe04 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fe04:	b5b0      	push	{r4, r5, r7, lr}
 800fe06:	b084      	sub	sp, #16
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	0004      	movs	r4, r0
 800fe0c:	0008      	movs	r0, r1
 800fe0e:	0011      	movs	r1, r2
 800fe10:	1dfb      	adds	r3, r7, #7
 800fe12:	1c22      	adds	r2, r4, #0
 800fe14:	701a      	strb	r2, [r3, #0]
 800fe16:	1dbb      	adds	r3, r7, #6
 800fe18:	1c02      	adds	r2, r0, #0
 800fe1a:	701a      	strb	r2, [r3, #0]
 800fe1c:	1d7b      	adds	r3, r7, #5
 800fe1e:	1c0a      	adds	r2, r1, #0
 800fe20:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800fe22:	250e      	movs	r5, #14
 800fe24:	197b      	adds	r3, r7, r5
 800fe26:	2200      	movs	r2, #0
 800fe28:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800fe2a:	240c      	movs	r4, #12
 800fe2c:	193b      	adds	r3, r7, r4
 800fe2e:	2200      	movs	r2, #0
 800fe30:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fe32:	1dbb      	adds	r3, r7, #6
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	b25b      	sxtb	r3, r3
 800fe38:	0018      	movs	r0, r3
 800fe3a:	f7ff ffa9 	bl	800fd90 <GetMaxAppPayloadWithoutFOptsLength>
 800fe3e:	0003      	movs	r3, r0
 800fe40:	001a      	movs	r2, r3
 800fe42:	0028      	movs	r0, r5
 800fe44:	183b      	adds	r3, r7, r0
 800fe46:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fe48:	1dfb      	adds	r3, r7, #7
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	b299      	uxth	r1, r3
 800fe4e:	1d7b      	adds	r3, r7, #5
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	193b      	adds	r3, r7, r4
 800fe56:	188a      	adds	r2, r1, r2
 800fe58:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fe5a:	193a      	adds	r2, r7, r4
 800fe5c:	183b      	adds	r3, r7, r0
 800fe5e:	8812      	ldrh	r2, [r2, #0]
 800fe60:	881b      	ldrh	r3, [r3, #0]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d805      	bhi.n	800fe72 <ValidatePayloadLength+0x6e>
 800fe66:	193b      	adds	r3, r7, r4
 800fe68:	881b      	ldrh	r3, [r3, #0]
 800fe6a:	2bff      	cmp	r3, #255	; 0xff
 800fe6c:	d801      	bhi.n	800fe72 <ValidatePayloadLength+0x6e>
    {
        return true;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e000      	b.n	800fe74 <ValidatePayloadLength+0x70>
    }
    return false;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	0018      	movs	r0, r3
 800fe76:	46bd      	mov	sp, r7
 800fe78:	b004      	add	sp, #16
 800fe7a:	bdb0      	pop	{r4, r5, r7, pc}

0800fe7c <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800fe80:	4b04      	ldr	r3, [pc, #16]	; (800fe94 <SetMlmeScheduleUplinkIndication+0x18>)
 800fe82:	4a05      	ldr	r2, [pc, #20]	; (800fe98 <SetMlmeScheduleUplinkIndication+0x1c>)
 800fe84:	5c99      	ldrb	r1, [r3, r2]
 800fe86:	2010      	movs	r0, #16
 800fe88:	4301      	orrs	r1, r0
 800fe8a:	5499      	strb	r1, [r3, r2]
}
 800fe8c:	46c0      	nop			; (mov r8, r8)
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	46c0      	nop			; (mov r8, r8)
 800fe94:	20000bb0 	.word	0x20000bb0
 800fe98:	00000481 	.word	0x00000481

0800fe9c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fe9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe9e:	b0a5      	sub	sp, #148	; 0x94
 800fea0:	af02      	add	r7, sp, #8
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	000c      	movs	r4, r1
 800fea6:	0010      	movs	r0, r2
 800fea8:	0019      	movs	r1, r3
 800feaa:	1cfb      	adds	r3, r7, #3
 800feac:	1c22      	adds	r2, r4, #0
 800feae:	701a      	strb	r2, [r3, #0]
 800feb0:	1cbb      	adds	r3, r7, #2
 800feb2:	1c02      	adds	r2, r0, #0
 800feb4:	701a      	strb	r2, [r3, #0]
 800feb6:	1c7b      	adds	r3, r7, #1
 800feb8:	1c0a      	adds	r2, r1, #0
 800feba:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800febc:	236b      	movs	r3, #107	; 0x6b
 800febe:	18fb      	adds	r3, r7, r3
 800fec0:	2200      	movs	r2, #0
 800fec2:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800fec4:	2387      	movs	r3, #135	; 0x87
 800fec6:	18fb      	adds	r3, r7, r3
 800fec8:	2200      	movs	r2, #0
 800feca:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fecc:	2368      	movs	r3, #104	; 0x68
 800fece:	18fb      	adds	r3, r7, r3
 800fed0:	2200      	movs	r2, #0
 800fed2:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 800fed4:	f000 fd58 	bl	8010988 <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fed8:	1cfb      	adds	r3, r7, #3
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	18d3      	adds	r3, r2, r3
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	0018      	movs	r0, r3
 800fee4:	f004 fa6c 	bl	80143c0 <LoRaMacCommandsGetCmdSize>
 800fee8:	0003      	movs	r3, r0
 800feea:	001a      	movs	r2, r3
 800feec:	1cfb      	adds	r3, r7, #3
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	18d2      	adds	r2, r2, r3
 800fef2:	1cbb      	adds	r3, r7, #2
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	dd01      	ble.n	800fefe <ProcessMacCommands+0x62>
 800fefa:	f000 fd4e 	bl	801099a <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800fefe:	1cfb      	adds	r3, r7, #3
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	1cfa      	adds	r2, r7, #3
 800ff04:	1c59      	adds	r1, r3, #1
 800ff06:	7011      	strb	r1, [r2, #0]
 800ff08:	001a      	movs	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	189b      	adds	r3, r3, r2
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	2b13      	cmp	r3, #19
 800ff12:	d901      	bls.n	800ff18 <ProcessMacCommands+0x7c>
 800ff14:	f000 fd43 	bl	801099e <ProcessMacCommands+0xb02>
 800ff18:	009a      	lsls	r2, r3, #2
 800ff1a:	4bee      	ldr	r3, [pc, #952]	; (80102d4 <ProcessMacCommands+0x438>)
 800ff1c:	18d3      	adds	r3, r2, r3
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ff22:	2004      	movs	r0, #4
 800ff24:	f004 fc6e 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 800ff28:	1e03      	subs	r3, r0, #0
 800ff2a:	d101      	bne.n	800ff30 <ProcessMacCommands+0x94>
 800ff2c:	f000 fd2c 	bl	8010988 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ff30:	2104      	movs	r1, #4
 800ff32:	2000      	movs	r0, #0
 800ff34:	f004 fbca 	bl	80146cc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ff38:	1cfb      	adds	r3, r7, #3
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	1cfa      	adds	r2, r7, #3
 800ff3e:	1c59      	adds	r1, r3, #1
 800ff40:	7011      	strb	r1, [r2, #0]
 800ff42:	001a      	movs	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	189b      	adds	r3, r3, r2
 800ff48:	7819      	ldrb	r1, [r3, #0]
 800ff4a:	4ae3      	ldr	r2, [pc, #908]	; (80102d8 <ProcessMacCommands+0x43c>)
 800ff4c:	238b      	movs	r3, #139	; 0x8b
 800ff4e:	00db      	lsls	r3, r3, #3
 800ff50:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800ff52:	1cfb      	adds	r3, r7, #3
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	1cfa      	adds	r2, r7, #3
 800ff58:	1c59      	adds	r1, r3, #1
 800ff5a:	7011      	strb	r1, [r2, #0]
 800ff5c:	001a      	movs	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	189b      	adds	r3, r3, r2
 800ff62:	7819      	ldrb	r1, [r3, #0]
 800ff64:	4bdc      	ldr	r3, [pc, #880]	; (80102d8 <ProcessMacCommands+0x43c>)
 800ff66:	4add      	ldr	r2, [pc, #884]	; (80102dc <ProcessMacCommands+0x440>)
 800ff68:	5499      	strb	r1, [r3, r2]
                }
                break;
 800ff6a:	f000 fd0d 	bl	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ff6e:	2657      	movs	r6, #87	; 0x57
 800ff70:	19bb      	adds	r3, r7, r6
 800ff72:	2200      	movs	r2, #0
 800ff74:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800ff76:	2456      	movs	r4, #86	; 0x56
 800ff78:	193b      	adds	r3, r7, r4
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800ff7e:	2555      	movs	r5, #85	; 0x55
 800ff80:	197b      	adds	r3, r7, r5
 800ff82:	2200      	movs	r2, #0
 800ff84:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800ff86:	2354      	movs	r3, #84	; 0x54
 800ff88:	18fb      	adds	r3, r7, r3
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800ff8e:	2187      	movs	r1, #135	; 0x87
 800ff90:	187b      	adds	r3, r7, r1
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2201      	movs	r2, #1
 800ff96:	4053      	eors	r3, r2
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d100      	bne.n	800ffa0 <ProcessMacCommands+0x104>
 800ff9e:	e09d      	b.n	80100dc <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 800ffa0:	187b      	adds	r3, r7, r1
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800ffa6:	1cfb      	adds	r3, r7, #3
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	18d2      	adds	r2, r2, r3
 800ffb0:	2158      	movs	r1, #88	; 0x58
 800ffb2:	187b      	adds	r3, r7, r1
 800ffb4:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ffb6:	1cba      	adds	r2, r7, #2
 800ffb8:	1cfb      	adds	r3, r7, #3
 800ffba:	7812      	ldrb	r2, [r2, #0]
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	b2da      	uxtb	r2, r3
 800ffc6:	000d      	movs	r5, r1
 800ffc8:	197b      	adds	r3, r7, r5
 800ffca:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800ffcc:	4bc2      	ldr	r3, [pc, #776]	; (80102d8 <ProcessMacCommands+0x43c>)
 800ffce:	4ac4      	ldr	r2, [pc, #784]	; (80102e0 <ProcessMacCommands+0x444>)
 800ffd0:	589b      	ldr	r3, [r3, r2]
 800ffd2:	227e      	movs	r2, #126	; 0x7e
 800ffd4:	5c9a      	ldrb	r2, [r3, r2]
 800ffd6:	197b      	adds	r3, r7, r5
 800ffd8:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ffda:	4bbf      	ldr	r3, [pc, #764]	; (80102d8 <ProcessMacCommands+0x43c>)
 800ffdc:	4ac0      	ldr	r2, [pc, #768]	; (80102e0 <ProcessMacCommands+0x444>)
 800ffde:	589b      	ldr	r3, [r3, r2]
 800ffe0:	22b8      	movs	r2, #184	; 0xb8
 800ffe2:	5c9a      	ldrb	r2, [r3, r2]
 800ffe4:	197b      	adds	r3, r7, r5
 800ffe6:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ffe8:	4bbb      	ldr	r3, [pc, #748]	; (80102d8 <ProcessMacCommands+0x43c>)
 800ffea:	4abd      	ldr	r2, [pc, #756]	; (80102e0 <ProcessMacCommands+0x444>)
 800ffec:	589b      	ldr	r3, [r3, r2]
 800ffee:	2285      	movs	r2, #133	; 0x85
 800fff0:	569a      	ldrsb	r2, [r3, r2]
 800fff2:	197b      	adds	r3, r7, r5
 800fff4:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800fff6:	4bb8      	ldr	r3, [pc, #736]	; (80102d8 <ProcessMacCommands+0x43c>)
 800fff8:	4ab9      	ldr	r2, [pc, #740]	; (80102e0 <ProcessMacCommands+0x444>)
 800fffa:	589b      	ldr	r3, [r3, r2]
 800fffc:	2284      	movs	r2, #132	; 0x84
 800fffe:	569a      	ldrsb	r2, [r3, r2]
 8010000:	197b      	adds	r3, r7, r5
 8010002:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010004:	4bb4      	ldr	r3, [pc, #720]	; (80102d8 <ProcessMacCommands+0x43c>)
 8010006:	4ab6      	ldr	r2, [pc, #728]	; (80102e0 <ProcessMacCommands+0x444>)
 8010008:	589b      	ldr	r3, [r3, r2]
 801000a:	22a4      	movs	r2, #164	; 0xa4
 801000c:	5c9a      	ldrb	r2, [r3, r2]
 801000e:	197b      	adds	r3, r7, r5
 8010010:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010012:	4bb1      	ldr	r3, [pc, #708]	; (80102d8 <ProcessMacCommands+0x43c>)
 8010014:	4ab2      	ldr	r2, [pc, #712]	; (80102e0 <ProcessMacCommands+0x444>)
 8010016:	5899      	ldr	r1, [r3, r2]
 8010018:	197b      	adds	r3, r7, r5
 801001a:	22b0      	movs	r2, #176	; 0xb0
 801001c:	0052      	lsls	r2, r2, #1
 801001e:	588a      	ldr	r2, [r1, r2]
 8010020:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010022:	4bad      	ldr	r3, [pc, #692]	; (80102d8 <ProcessMacCommands+0x43c>)
 8010024:	4aae      	ldr	r2, [pc, #696]	; (80102e0 <ProcessMacCommands+0x444>)
 8010026:	589b      	ldr	r3, [r3, r2]
 8010028:	7818      	ldrb	r0, [r3, #0]
 801002a:	193c      	adds	r4, r7, r4
 801002c:	19ba      	adds	r2, r7, r6
 801002e:	1979      	adds	r1, r7, r5
 8010030:	2354      	movs	r3, #84	; 0x54
 8010032:	18fb      	adds	r3, r7, r3
 8010034:	9301      	str	r3, [sp, #4]
 8010036:	2555      	movs	r5, #85	; 0x55
 8010038:	197b      	adds	r3, r7, r5
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	0023      	movs	r3, r4
 801003e:	f006 fc07 	bl	8016850 <RegionLinkAdrReq>
 8010042:	0003      	movs	r3, r0
 8010044:	001a      	movs	r2, r3
 8010046:	216b      	movs	r1, #107	; 0x6b
 8010048:	187b      	adds	r3, r7, r1
 801004a:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 801004c:	187b      	adds	r3, r7, r1
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	001a      	movs	r2, r3
 8010052:	2307      	movs	r3, #7
 8010054:	4013      	ands	r3, r2
 8010056:	2b07      	cmp	r3, #7
 8010058:	d117      	bne.n	801008a <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 801005a:	4b9f      	ldr	r3, [pc, #636]	; (80102d8 <ProcessMacCommands+0x43c>)
 801005c:	4aa0      	ldr	r2, [pc, #640]	; (80102e0 <ProcessMacCommands+0x444>)
 801005e:	589b      	ldr	r3, [r3, r2]
 8010060:	19ba      	adds	r2, r7, r6
 8010062:	2100      	movs	r1, #0
 8010064:	5651      	ldrsb	r1, [r2, r1]
 8010066:	2285      	movs	r2, #133	; 0x85
 8010068:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 801006a:	4b9b      	ldr	r3, [pc, #620]	; (80102d8 <ProcessMacCommands+0x43c>)
 801006c:	4a9c      	ldr	r2, [pc, #624]	; (80102e0 <ProcessMacCommands+0x444>)
 801006e:	589b      	ldr	r3, [r3, r2]
 8010070:	2456      	movs	r4, #86	; 0x56
 8010072:	193a      	adds	r2, r7, r4
 8010074:	2100      	movs	r1, #0
 8010076:	5651      	ldrsb	r1, [r2, r1]
 8010078:	2284      	movs	r2, #132	; 0x84
 801007a:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 801007c:	4b96      	ldr	r3, [pc, #600]	; (80102d8 <ProcessMacCommands+0x43c>)
 801007e:	4a98      	ldr	r2, [pc, #608]	; (80102e0 <ProcessMacCommands+0x444>)
 8010080:	589b      	ldr	r3, [r3, r2]
 8010082:	197a      	adds	r2, r7, r5
 8010084:	7811      	ldrb	r1, [r2, #0]
 8010086:	22a4      	movs	r2, #164	; 0xa4
 8010088:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801008a:	2386      	movs	r3, #134	; 0x86
 801008c:	18fb      	adds	r3, r7, r3
 801008e:	2200      	movs	r2, #0
 8010090:	701a      	strb	r2, [r3, #0]
 8010092:	e00c      	b.n	80100ae <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010094:	236b      	movs	r3, #107	; 0x6b
 8010096:	18fb      	adds	r3, r7, r3
 8010098:	2201      	movs	r2, #1
 801009a:	0019      	movs	r1, r3
 801009c:	2003      	movs	r0, #3
 801009e:	f004 f81f 	bl	80140e0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80100a2:	2186      	movs	r1, #134	; 0x86
 80100a4:	187b      	adds	r3, r7, r1
 80100a6:	781a      	ldrb	r2, [r3, #0]
 80100a8:	187b      	adds	r3, r7, r1
 80100aa:	3201      	adds	r2, #1
 80100ac:	701a      	strb	r2, [r3, #0]
 80100ae:	2454      	movs	r4, #84	; 0x54
 80100b0:	193b      	adds	r3, r7, r4
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	2105      	movs	r1, #5
 80100b6:	0018      	movs	r0, r3
 80100b8:	f7f0 f82e 	bl	8000118 <__udivsi3>
 80100bc:	0003      	movs	r3, r0
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	2286      	movs	r2, #134	; 0x86
 80100c2:	18ba      	adds	r2, r7, r2
 80100c4:	7812      	ldrb	r2, [r2, #0]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d3e4      	bcc.n	8010094 <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80100ca:	193b      	adds	r3, r7, r4
 80100cc:	781a      	ldrb	r2, [r3, #0]
 80100ce:	1cfb      	adds	r3, r7, #3
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	18d3      	adds	r3, r2, r3
 80100d4:	b2da      	uxtb	r2, r3
 80100d6:	1cfb      	adds	r3, r7, #3
 80100d8:	3a01      	subs	r2, #1
 80100da:	701a      	strb	r2, [r3, #0]
                }
                break;
 80100dc:	46c0      	nop			; (mov r8, r8)
 80100de:	f000 fc53 	bl	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80100e2:	1cfb      	adds	r3, r7, #3
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	1cfa      	adds	r2, r7, #3
 80100e8:	1c59      	adds	r1, r3, #1
 80100ea:	7011      	strb	r1, [r2, #0]
 80100ec:	001a      	movs	r2, r3
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	189b      	adds	r3, r3, r2
 80100f2:	781a      	ldrb	r2, [r3, #0]
 80100f4:	4b78      	ldr	r3, [pc, #480]	; (80102d8 <ProcessMacCommands+0x43c>)
 80100f6:	497a      	ldr	r1, [pc, #488]	; (80102e0 <ProcessMacCommands+0x444>)
 80100f8:	585b      	ldr	r3, [r3, r1]
 80100fa:	210f      	movs	r1, #15
 80100fc:	400a      	ands	r2, r1
 80100fe:	b2d1      	uxtb	r1, r2
 8010100:	22c8      	movs	r2, #200	; 0xc8
 8010102:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010104:	4b74      	ldr	r3, [pc, #464]	; (80102d8 <ProcessMacCommands+0x43c>)
 8010106:	4a76      	ldr	r2, [pc, #472]	; (80102e0 <ProcessMacCommands+0x444>)
 8010108:	589b      	ldr	r3, [r3, r2]
 801010a:	22c8      	movs	r2, #200	; 0xc8
 801010c:	5c9b      	ldrb	r3, [r3, r2]
 801010e:	001a      	movs	r2, r3
 8010110:	2301      	movs	r3, #1
 8010112:	4093      	lsls	r3, r2
 8010114:	0019      	movs	r1, r3
 8010116:	4b70      	ldr	r3, [pc, #448]	; (80102d8 <ProcessMacCommands+0x43c>)
 8010118:	4a71      	ldr	r2, [pc, #452]	; (80102e0 <ProcessMacCommands+0x444>)
 801011a:	589a      	ldr	r2, [r3, r2]
 801011c:	b289      	uxth	r1, r1
 801011e:	23a6      	movs	r3, #166	; 0xa6
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010124:	2368      	movs	r3, #104	; 0x68
 8010126:	18fb      	adds	r3, r7, r3
 8010128:	2200      	movs	r2, #0
 801012a:	0019      	movs	r1, r3
 801012c:	2004      	movs	r0, #4
 801012e:	f003 ffd7 	bl	80140e0 <LoRaMacCommandsAddCmd>
                break;
 8010132:	f000 fc29 	bl	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010136:	256b      	movs	r5, #107	; 0x6b
 8010138:	197b      	adds	r3, r7, r5
 801013a:	2207      	movs	r2, #7
 801013c:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801013e:	1cfb      	adds	r3, r7, #3
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	18d3      	adds	r3, r2, r3
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	091b      	lsrs	r3, r3, #4
 801014a:	b2db      	uxtb	r3, r3
 801014c:	b25b      	sxtb	r3, r3
 801014e:	2207      	movs	r2, #7
 8010150:	4013      	ands	r3, r2
 8010152:	b25a      	sxtb	r2, r3
 8010154:	204c      	movs	r0, #76	; 0x4c
 8010156:	183b      	adds	r3, r7, r0
 8010158:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801015a:	1cfb      	adds	r3, r7, #3
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	18d3      	adds	r3, r2, r3
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	b25b      	sxtb	r3, r3
 8010166:	220f      	movs	r2, #15
 8010168:	4013      	ands	r3, r2
 801016a:	b25a      	sxtb	r2, r3
 801016c:	183b      	adds	r3, r7, r0
 801016e:	701a      	strb	r2, [r3, #0]
                macIndex++;
 8010170:	1cfb      	adds	r3, r7, #3
 8010172:	781a      	ldrb	r2, [r3, #0]
 8010174:	1cfb      	adds	r3, r7, #3
 8010176:	3201      	adds	r2, #1
 8010178:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 801017a:	1cfb      	adds	r3, r7, #3
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	1cfa      	adds	r2, r7, #3
 8010180:	1c59      	adds	r1, r3, #1
 8010182:	7011      	strb	r1, [r2, #0]
 8010184:	001a      	movs	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	189b      	adds	r3, r3, r2
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	001a      	movs	r2, r3
 801018e:	183b      	adds	r3, r7, r0
 8010190:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010192:	1cfb      	adds	r3, r7, #3
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	1cfa      	adds	r2, r7, #3
 8010198:	1c59      	adds	r1, r3, #1
 801019a:	7011      	strb	r1, [r2, #0]
 801019c:	001a      	movs	r2, r3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	189b      	adds	r3, r3, r2
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	021a      	lsls	r2, r3, #8
 80101a6:	183b      	adds	r3, r7, r0
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	431a      	orrs	r2, r3
 80101ac:	183b      	adds	r3, r7, r0
 80101ae:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80101b0:	1cfb      	adds	r3, r7, #3
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	1cfa      	adds	r2, r7, #3
 80101b6:	1c59      	adds	r1, r3, #1
 80101b8:	7011      	strb	r1, [r2, #0]
 80101ba:	001a      	movs	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	189b      	adds	r3, r3, r2
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	041a      	lsls	r2, r3, #16
 80101c4:	183b      	adds	r3, r7, r0
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	431a      	orrs	r2, r3
 80101ca:	0004      	movs	r4, r0
 80101cc:	193b      	adds	r3, r7, r4
 80101ce:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 80101d0:	193b      	adds	r3, r7, r4
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	2264      	movs	r2, #100	; 0x64
 80101d6:	435a      	muls	r2, r3
 80101d8:	193b      	adds	r3, r7, r4
 80101da:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 80101dc:	4b3e      	ldr	r3, [pc, #248]	; (80102d8 <ProcessMacCommands+0x43c>)
 80101de:	4a40      	ldr	r2, [pc, #256]	; (80102e0 <ProcessMacCommands+0x444>)
 80101e0:	589b      	ldr	r3, [r3, r2]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	193a      	adds	r2, r7, r4
 80101e6:	0011      	movs	r1, r2
 80101e8:	0018      	movs	r0, r3
 80101ea:	f006 fb4f 	bl	801688c <RegionRxParamSetupReq>
 80101ee:	0003      	movs	r3, r0
 80101f0:	001a      	movs	r2, r3
 80101f2:	197b      	adds	r3, r7, r5
 80101f4:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 80101f6:	197b      	adds	r3, r7, r5
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	001a      	movs	r2, r3
 80101fc:	2307      	movs	r3, #7
 80101fe:	4013      	ands	r3, r2
 8010200:	2b07      	cmp	r3, #7
 8010202:	d128      	bne.n	8010256 <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010204:	193b      	adds	r3, r7, r4
 8010206:	2100      	movs	r1, #0
 8010208:	5659      	ldrsb	r1, [r3, r1]
 801020a:	4b33      	ldr	r3, [pc, #204]	; (80102d8 <ProcessMacCommands+0x43c>)
 801020c:	4a34      	ldr	r2, [pc, #208]	; (80102e0 <ProcessMacCommands+0x444>)
 801020e:	589b      	ldr	r3, [r3, r2]
 8010210:	b2c9      	uxtb	r1, r1
 8010212:	22ac      	movs	r2, #172	; 0xac
 8010214:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010216:	193b      	adds	r3, r7, r4
 8010218:	2100      	movs	r1, #0
 801021a:	5659      	ldrsb	r1, [r3, r1]
 801021c:	4b2e      	ldr	r3, [pc, #184]	; (80102d8 <ProcessMacCommands+0x43c>)
 801021e:	4a30      	ldr	r2, [pc, #192]	; (80102e0 <ProcessMacCommands+0x444>)
 8010220:	589b      	ldr	r3, [r3, r2]
 8010222:	b2c9      	uxtb	r1, r1
 8010224:	22b4      	movs	r2, #180	; 0xb4
 8010226:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010228:	4b2b      	ldr	r3, [pc, #172]	; (80102d8 <ProcessMacCommands+0x43c>)
 801022a:	4a2d      	ldr	r2, [pc, #180]	; (80102e0 <ProcessMacCommands+0x444>)
 801022c:	589a      	ldr	r2, [r3, r2]
 801022e:	193b      	adds	r3, r7, r4
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	21a8      	movs	r1, #168	; 0xa8
 8010234:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010236:	4b28      	ldr	r3, [pc, #160]	; (80102d8 <ProcessMacCommands+0x43c>)
 8010238:	4a29      	ldr	r2, [pc, #164]	; (80102e0 <ProcessMacCommands+0x444>)
 801023a:	589a      	ldr	r2, [r3, r2]
 801023c:	193b      	adds	r3, r7, r4
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	21b0      	movs	r1, #176	; 0xb0
 8010242:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010244:	193b      	adds	r3, r7, r4
 8010246:	2101      	movs	r1, #1
 8010248:	5659      	ldrsb	r1, [r3, r1]
 801024a:	4b23      	ldr	r3, [pc, #140]	; (80102d8 <ProcessMacCommands+0x43c>)
 801024c:	4a24      	ldr	r2, [pc, #144]	; (80102e0 <ProcessMacCommands+0x444>)
 801024e:	589b      	ldr	r3, [r3, r2]
 8010250:	b2c9      	uxtb	r1, r1
 8010252:	22a5      	movs	r2, #165	; 0xa5
 8010254:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010256:	236b      	movs	r3, #107	; 0x6b
 8010258:	18fb      	adds	r3, r7, r3
 801025a:	781a      	ldrb	r2, [r3, #0]
 801025c:	2168      	movs	r1, #104	; 0x68
 801025e:	187b      	adds	r3, r7, r1
 8010260:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010262:	187b      	adds	r3, r7, r1
 8010264:	2201      	movs	r2, #1
 8010266:	0019      	movs	r1, r3
 8010268:	2005      	movs	r0, #5
 801026a:	f003 ff39 	bl	80140e0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 801026e:	f7ff fe05 	bl	800fe7c <SetMlmeScheduleUplinkIndication>
                break;
 8010272:	46c0      	nop			; (mov r8, r8)
 8010274:	e388      	b.n	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010276:	2185      	movs	r1, #133	; 0x85
 8010278:	187b      	adds	r3, r7, r1
 801027a:	22ff      	movs	r2, #255	; 0xff
 801027c:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801027e:	4a16      	ldr	r2, [pc, #88]	; (80102d8 <ProcessMacCommands+0x43c>)
 8010280:	23d2      	movs	r3, #210	; 0xd2
 8010282:	009b      	lsls	r3, r3, #2
 8010284:	58d3      	ldr	r3, [r2, r3]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d00f      	beq.n	80102aa <ProcessMacCommands+0x40e>
 801028a:	4a13      	ldr	r2, [pc, #76]	; (80102d8 <ProcessMacCommands+0x43c>)
 801028c:	23d2      	movs	r3, #210	; 0xd2
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	58d3      	ldr	r3, [r2, r3]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d008      	beq.n	80102aa <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010298:	4a0f      	ldr	r2, [pc, #60]	; (80102d8 <ProcessMacCommands+0x43c>)
 801029a:	23d2      	movs	r3, #210	; 0xd2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	58d3      	ldr	r3, [r2, r3]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	187c      	adds	r4, r7, r1
 80102a4:	4798      	blx	r3
 80102a6:	0003      	movs	r3, r0
 80102a8:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 80102aa:	2168      	movs	r1, #104	; 0x68
 80102ac:	187b      	adds	r3, r7, r1
 80102ae:	2285      	movs	r2, #133	; 0x85
 80102b0:	18ba      	adds	r2, r7, r2
 80102b2:	7812      	ldrb	r2, [r2, #0]
 80102b4:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80102b6:	1c7b      	adds	r3, r7, #1
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	223f      	movs	r2, #63	; 0x3f
 80102bc:	4013      	ands	r3, r2
 80102be:	b2da      	uxtb	r2, r3
 80102c0:	187b      	adds	r3, r7, r1
 80102c2:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80102c4:	187b      	adds	r3, r7, r1
 80102c6:	2202      	movs	r2, #2
 80102c8:	0019      	movs	r1, r3
 80102ca:	2006      	movs	r0, #6
 80102cc:	f003 ff08 	bl	80140e0 <LoRaMacCommandsAddCmd>
                break;
 80102d0:	e35a      	b.n	8010988 <ProcessMacCommands+0xaec>
 80102d2:	46c0      	nop			; (mov r8, r8)
 80102d4:	0801e7a0 	.word	0x0801e7a0
 80102d8:	20000bb0 	.word	0x20000bb0
 80102dc:	00000459 	.word	0x00000459
 80102e0:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80102e4:	246b      	movs	r4, #107	; 0x6b
 80102e6:	193b      	adds	r3, r7, r4
 80102e8:	2203      	movs	r2, #3
 80102ea:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 80102ec:	1cfb      	adds	r3, r7, #3
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	1cfa      	adds	r2, r7, #3
 80102f2:	1c59      	adds	r1, r3, #1
 80102f4:	7011      	strb	r1, [r2, #0]
 80102f6:	001a      	movs	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	189b      	adds	r3, r3, r2
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	b25a      	sxtb	r2, r3
 8010300:	2544      	movs	r5, #68	; 0x44
 8010302:	197b      	adds	r3, r7, r5
 8010304:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 8010306:	197b      	adds	r3, r7, r5
 8010308:	2038      	movs	r0, #56	; 0x38
 801030a:	183a      	adds	r2, r7, r0
 801030c:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801030e:	1cfb      	adds	r3, r7, #3
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	1cfa      	adds	r2, r7, #3
 8010314:	1c59      	adds	r1, r3, #1
 8010316:	7011      	strb	r1, [r2, #0]
 8010318:	001a      	movs	r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	189b      	adds	r3, r3, r2
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	001a      	movs	r2, r3
 8010322:	183b      	adds	r3, r7, r0
 8010324:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010326:	1cfb      	adds	r3, r7, #3
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	1cfa      	adds	r2, r7, #3
 801032c:	1c59      	adds	r1, r3, #1
 801032e:	7011      	strb	r1, [r2, #0]
 8010330:	001a      	movs	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	189b      	adds	r3, r3, r2
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	021a      	lsls	r2, r3, #8
 801033a:	183b      	adds	r3, r7, r0
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	431a      	orrs	r2, r3
 8010340:	183b      	adds	r3, r7, r0
 8010342:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010344:	1cfb      	adds	r3, r7, #3
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	1cfa      	adds	r2, r7, #3
 801034a:	1c59      	adds	r1, r3, #1
 801034c:	7011      	strb	r1, [r2, #0]
 801034e:	001a      	movs	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	189b      	adds	r3, r3, r2
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	041a      	lsls	r2, r3, #16
 8010358:	183b      	adds	r3, r7, r0
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	431a      	orrs	r2, r3
 801035e:	183b      	adds	r3, r7, r0
 8010360:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 8010362:	183b      	adds	r3, r7, r0
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2264      	movs	r2, #100	; 0x64
 8010368:	435a      	muls	r2, r3
 801036a:	183b      	adds	r3, r7, r0
 801036c:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 801036e:	183b      	adds	r3, r7, r0
 8010370:	2200      	movs	r2, #0
 8010372:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 8010374:	1cfb      	adds	r3, r7, #3
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	1cfa      	adds	r2, r7, #3
 801037a:	1c59      	adds	r1, r3, #1
 801037c:	7011      	strb	r1, [r2, #0]
 801037e:	001a      	movs	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	189b      	adds	r3, r3, r2
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	b25a      	sxtb	r2, r3
 8010388:	183b      	adds	r3, r7, r0
 801038a:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 801038c:	4ba0      	ldr	r3, [pc, #640]	; (8010610 <ProcessMacCommands+0x774>)
 801038e:	4aa1      	ldr	r2, [pc, #644]	; (8010614 <ProcessMacCommands+0x778>)
 8010390:	589b      	ldr	r3, [r3, r2]
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	197a      	adds	r2, r7, r5
 8010396:	0011      	movs	r1, r2
 8010398:	0018      	movs	r0, r3
 801039a:	f006 fa8d 	bl	80168b8 <RegionNewChannelReq>
 801039e:	0003      	movs	r3, r0
 80103a0:	001a      	movs	r2, r3
 80103a2:	193b      	adds	r3, r7, r4
 80103a4:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 80103a6:	193b      	adds	r3, r7, r4
 80103a8:	781a      	ldrb	r2, [r3, #0]
 80103aa:	2168      	movs	r1, #104	; 0x68
 80103ac:	187b      	adds	r3, r7, r1
 80103ae:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80103b0:	187b      	adds	r3, r7, r1
 80103b2:	2201      	movs	r2, #1
 80103b4:	0019      	movs	r1, r3
 80103b6:	2007      	movs	r0, #7
 80103b8:	f003 fe92 	bl	80140e0 <LoRaMacCommandsAddCmd>
                break;
 80103bc:	46c0      	nop			; (mov r8, r8)
 80103be:	e2e3      	b.n	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80103c0:	1cfb      	adds	r3, r7, #3
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	1cfa      	adds	r2, r7, #3
 80103c6:	1c59      	adds	r1, r3, #1
 80103c8:	7011      	strb	r1, [r2, #0]
 80103ca:	001a      	movs	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	189b      	adds	r3, r3, r2
 80103d0:	781a      	ldrb	r2, [r3, #0]
 80103d2:	2084      	movs	r0, #132	; 0x84
 80103d4:	183b      	adds	r3, r7, r0
 80103d6:	210f      	movs	r1, #15
 80103d8:	400a      	ands	r2, r1
 80103da:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 80103dc:	183b      	adds	r3, r7, r0
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d104      	bne.n	80103ee <ProcessMacCommands+0x552>
                {
                    delay++;
 80103e4:	183b      	adds	r3, r7, r0
 80103e6:	781a      	ldrb	r2, [r3, #0]
 80103e8:	183b      	adds	r3, r7, r0
 80103ea:	3201      	adds	r2, #1
 80103ec:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 80103ee:	2384      	movs	r3, #132	; 0x84
 80103f0:	18fb      	adds	r3, r7, r3
 80103f2:	781a      	ldrb	r2, [r3, #0]
 80103f4:	0013      	movs	r3, r2
 80103f6:	015b      	lsls	r3, r3, #5
 80103f8:	1a9b      	subs	r3, r3, r2
 80103fa:	009b      	lsls	r3, r3, #2
 80103fc:	189b      	adds	r3, r3, r2
 80103fe:	00db      	lsls	r3, r3, #3
 8010400:	0019      	movs	r1, r3
 8010402:	4b83      	ldr	r3, [pc, #524]	; (8010610 <ProcessMacCommands+0x774>)
 8010404:	4a83      	ldr	r2, [pc, #524]	; (8010614 <ProcessMacCommands+0x778>)
 8010406:	589b      	ldr	r3, [r3, r2]
 8010408:	2294      	movs	r2, #148	; 0x94
 801040a:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 801040c:	4b80      	ldr	r3, [pc, #512]	; (8010610 <ProcessMacCommands+0x774>)
 801040e:	4a81      	ldr	r2, [pc, #516]	; (8010614 <ProcessMacCommands+0x778>)
 8010410:	589b      	ldr	r3, [r3, r2]
 8010412:	2294      	movs	r2, #148	; 0x94
 8010414:	589b      	ldr	r3, [r3, r2]
 8010416:	4a7e      	ldr	r2, [pc, #504]	; (8010610 <ProcessMacCommands+0x774>)
 8010418:	497e      	ldr	r1, [pc, #504]	; (8010614 <ProcessMacCommands+0x778>)
 801041a:	5852      	ldr	r2, [r2, r1]
 801041c:	21fa      	movs	r1, #250	; 0xfa
 801041e:	0089      	lsls	r1, r1, #2
 8010420:	468c      	mov	ip, r1
 8010422:	4463      	add	r3, ip
 8010424:	2198      	movs	r1, #152	; 0x98
 8010426:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010428:	2368      	movs	r3, #104	; 0x68
 801042a:	18fb      	adds	r3, r7, r3
 801042c:	2200      	movs	r2, #0
 801042e:	0019      	movs	r1, r3
 8010430:	2008      	movs	r0, #8
 8010432:	f003 fe55 	bl	80140e0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010436:	f7ff fd21 	bl	800fe7c <SetMlmeScheduleUplinkIndication>
                break;
 801043a:	e2a5      	b.n	8010988 <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801043c:	1cfb      	adds	r3, r7, #3
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	1cfa      	adds	r2, r7, #3
 8010442:	1c59      	adds	r1, r3, #1
 8010444:	7011      	strb	r1, [r2, #0]
 8010446:	001a      	movs	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	189a      	adds	r2, r3, r2
 801044c:	2076      	movs	r0, #118	; 0x76
 801044e:	183b      	adds	r3, r7, r0
 8010450:	7812      	ldrb	r2, [r2, #0]
 8010452:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 8010454:	2134      	movs	r1, #52	; 0x34
 8010456:	187b      	adds	r3, r7, r1
 8010458:	2200      	movs	r2, #0
 801045a:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 801045c:	187b      	adds	r3, r7, r1
 801045e:	2200      	movs	r2, #0
 8010460:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010462:	183b      	adds	r3, r7, r0
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2220      	movs	r2, #32
 8010468:	4013      	ands	r3, r2
 801046a:	d002      	beq.n	8010472 <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 801046c:	187b      	adds	r3, r7, r1
 801046e:	2201      	movs	r2, #1
 8010470:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010472:	2376      	movs	r3, #118	; 0x76
 8010474:	18fb      	adds	r3, r7, r3
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	2210      	movs	r2, #16
 801047a:	4013      	ands	r3, r2
 801047c:	d003      	beq.n	8010486 <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801047e:	2334      	movs	r3, #52	; 0x34
 8010480:	18fb      	adds	r3, r7, r3
 8010482:	2201      	movs	r2, #1
 8010484:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010486:	2376      	movs	r3, #118	; 0x76
 8010488:	18fb      	adds	r3, r7, r3
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	220f      	movs	r2, #15
 801048e:	4013      	ands	r3, r2
 8010490:	b2da      	uxtb	r2, r3
 8010492:	2434      	movs	r4, #52	; 0x34
 8010494:	193b      	adds	r3, r7, r4
 8010496:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8010498:	4b5d      	ldr	r3, [pc, #372]	; (8010610 <ProcessMacCommands+0x774>)
 801049a:	4a5e      	ldr	r2, [pc, #376]	; (8010614 <ProcessMacCommands+0x778>)
 801049c:	589b      	ldr	r3, [r3, r2]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	193a      	adds	r2, r7, r4
 80104a2:	0011      	movs	r1, r2
 80104a4:	0018      	movs	r0, r3
 80104a6:	f006 fa1d 	bl	80168e4 <RegionTxParamSetupReq>
 80104aa:	0003      	movs	r3, r0
 80104ac:	3301      	adds	r3, #1
 80104ae:	d050      	beq.n	8010552 <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80104b0:	4b57      	ldr	r3, [pc, #348]	; (8010610 <ProcessMacCommands+0x774>)
 80104b2:	4a58      	ldr	r2, [pc, #352]	; (8010614 <ProcessMacCommands+0x778>)
 80104b4:	589b      	ldr	r3, [r3, r2]
 80104b6:	193a      	adds	r2, r7, r4
 80104b8:	7811      	ldrb	r1, [r2, #0]
 80104ba:	22b8      	movs	r2, #184	; 0xb8
 80104bc:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80104be:	4b54      	ldr	r3, [pc, #336]	; (8010610 <ProcessMacCommands+0x774>)
 80104c0:	4a54      	ldr	r2, [pc, #336]	; (8010614 <ProcessMacCommands+0x778>)
 80104c2:	589b      	ldr	r3, [r3, r2]
 80104c4:	193a      	adds	r2, r7, r4
 80104c6:	7851      	ldrb	r1, [r2, #1]
 80104c8:	22b9      	movs	r2, #185	; 0xb9
 80104ca:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80104cc:	193b      	adds	r3, r7, r4
 80104ce:	789b      	ldrb	r3, [r3, #2]
 80104d0:	001a      	movs	r2, r3
 80104d2:	4b51      	ldr	r3, [pc, #324]	; (8010618 <ProcessMacCommands+0x77c>)
 80104d4:	5c9a      	ldrb	r2, [r3, r2]
 80104d6:	4b4e      	ldr	r3, [pc, #312]	; (8010610 <ProcessMacCommands+0x774>)
 80104d8:	494e      	ldr	r1, [pc, #312]	; (8010614 <ProcessMacCommands+0x778>)
 80104da:	585c      	ldr	r4, [r3, r1]
 80104dc:	0010      	movs	r0, r2
 80104de:	f7f0 faf7 	bl	8000ad0 <__aeabi_ui2f>
 80104e2:	1c03      	adds	r3, r0, #0
 80104e4:	22bc      	movs	r2, #188	; 0xbc
 80104e6:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80104e8:	212c      	movs	r1, #44	; 0x2c
 80104ea:	187b      	adds	r3, r7, r1
 80104ec:	2202      	movs	r2, #2
 80104ee:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80104f0:	4b47      	ldr	r3, [pc, #284]	; (8010610 <ProcessMacCommands+0x774>)
 80104f2:	4a48      	ldr	r2, [pc, #288]	; (8010614 <ProcessMacCommands+0x778>)
 80104f4:	589b      	ldr	r3, [r3, r2]
 80104f6:	22b8      	movs	r2, #184	; 0xb8
 80104f8:	5c9a      	ldrb	r2, [r3, r2]
 80104fa:	187b      	adds	r3, r7, r1
 80104fc:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80104fe:	4b44      	ldr	r3, [pc, #272]	; (8010610 <ProcessMacCommands+0x774>)
 8010500:	4a44      	ldr	r2, [pc, #272]	; (8010614 <ProcessMacCommands+0x778>)
 8010502:	589b      	ldr	r3, [r3, r2]
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	187a      	adds	r2, r7, r1
 8010508:	0011      	movs	r1, r2
 801050a:	0018      	movs	r0, r3
 801050c:	f006 f899 	bl	8016642 <RegionGetPhyParam>
 8010510:	0003      	movs	r3, r0
 8010512:	001a      	movs	r2, r3
 8010514:	2128      	movs	r1, #40	; 0x28
 8010516:	187b      	adds	r3, r7, r1
 8010518:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 801051a:	187b      	adds	r3, r7, r1
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	b259      	sxtb	r1, r3
 8010520:	4b3b      	ldr	r3, [pc, #236]	; (8010610 <ProcessMacCommands+0x774>)
 8010522:	4a3c      	ldr	r2, [pc, #240]	; (8010614 <ProcessMacCommands+0x778>)
 8010524:	589b      	ldr	r3, [r3, r2]
 8010526:	2285      	movs	r2, #133	; 0x85
 8010528:	5698      	ldrsb	r0, [r3, r2]
 801052a:	4b39      	ldr	r3, [pc, #228]	; (8010610 <ProcessMacCommands+0x774>)
 801052c:	4a39      	ldr	r2, [pc, #228]	; (8010614 <ProcessMacCommands+0x778>)
 801052e:	589b      	ldr	r3, [r3, r2]
 8010530:	1c04      	adds	r4, r0, #0
 8010532:	1c08      	adds	r0, r1, #0
 8010534:	b241      	sxtb	r1, r0
 8010536:	b262      	sxtb	r2, r4
 8010538:	4291      	cmp	r1, r2
 801053a:	da00      	bge.n	801053e <ProcessMacCommands+0x6a2>
 801053c:	1c20      	adds	r0, r4, #0
 801053e:	b241      	sxtb	r1, r0
 8010540:	2285      	movs	r2, #133	; 0x85
 8010542:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010544:	2368      	movs	r3, #104	; 0x68
 8010546:	18fb      	adds	r3, r7, r3
 8010548:	2200      	movs	r2, #0
 801054a:	0019      	movs	r1, r3
 801054c:	2009      	movs	r0, #9
 801054e:	f003 fdc7 	bl	80140e0 <LoRaMacCommandsAddCmd>
                }
                break;
 8010552:	46c0      	nop			; (mov r8, r8)
 8010554:	e218      	b.n	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010556:	246b      	movs	r4, #107	; 0x6b
 8010558:	193b      	adds	r3, r7, r4
 801055a:	2203      	movs	r2, #3
 801055c:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 801055e:	1cfb      	adds	r3, r7, #3
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	1cfa      	adds	r2, r7, #3
 8010564:	1c59      	adds	r1, r3, #1
 8010566:	7011      	strb	r1, [r2, #0]
 8010568:	001a      	movs	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	189b      	adds	r3, r3, r2
 801056e:	781a      	ldrb	r2, [r3, #0]
 8010570:	2020      	movs	r0, #32
 8010572:	183b      	adds	r3, r7, r0
 8010574:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010576:	1cfb      	adds	r3, r7, #3
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	1cfa      	adds	r2, r7, #3
 801057c:	1c59      	adds	r1, r3, #1
 801057e:	7011      	strb	r1, [r2, #0]
 8010580:	001a      	movs	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	189b      	adds	r3, r3, r2
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	001a      	movs	r2, r3
 801058a:	183b      	adds	r3, r7, r0
 801058c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801058e:	1cfb      	adds	r3, r7, #3
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	1cfa      	adds	r2, r7, #3
 8010594:	1c59      	adds	r1, r3, #1
 8010596:	7011      	strb	r1, [r2, #0]
 8010598:	001a      	movs	r2, r3
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	189b      	adds	r3, r3, r2
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	021a      	lsls	r2, r3, #8
 80105a2:	183b      	adds	r3, r7, r0
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	431a      	orrs	r2, r3
 80105a8:	183b      	adds	r3, r7, r0
 80105aa:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80105ac:	1cfb      	adds	r3, r7, #3
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	1cfa      	adds	r2, r7, #3
 80105b2:	1c59      	adds	r1, r3, #1
 80105b4:	7011      	strb	r1, [r2, #0]
 80105b6:	001a      	movs	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	189b      	adds	r3, r3, r2
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	041a      	lsls	r2, r3, #16
 80105c0:	183b      	adds	r3, r7, r0
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	431a      	orrs	r2, r3
 80105c6:	0001      	movs	r1, r0
 80105c8:	187b      	adds	r3, r7, r1
 80105ca:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 80105cc:	187b      	adds	r3, r7, r1
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	2264      	movs	r2, #100	; 0x64
 80105d2:	435a      	muls	r2, r3
 80105d4:	187b      	adds	r3, r7, r1
 80105d6:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80105d8:	4b0d      	ldr	r3, [pc, #52]	; (8010610 <ProcessMacCommands+0x774>)
 80105da:	4a0e      	ldr	r2, [pc, #56]	; (8010614 <ProcessMacCommands+0x778>)
 80105dc:	589b      	ldr	r3, [r3, r2]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	187a      	adds	r2, r7, r1
 80105e2:	0011      	movs	r1, r2
 80105e4:	0018      	movs	r0, r3
 80105e6:	f006 f993 	bl	8016910 <RegionDlChannelReq>
 80105ea:	0003      	movs	r3, r0
 80105ec:	001a      	movs	r2, r3
 80105ee:	193b      	adds	r3, r7, r4
 80105f0:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 80105f2:	193b      	adds	r3, r7, r4
 80105f4:	781a      	ldrb	r2, [r3, #0]
 80105f6:	2168      	movs	r1, #104	; 0x68
 80105f8:	187b      	adds	r3, r7, r1
 80105fa:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80105fc:	187b      	adds	r3, r7, r1
 80105fe:	2201      	movs	r2, #1
 8010600:	0019      	movs	r1, r3
 8010602:	200a      	movs	r0, #10
 8010604:	f003 fd6c 	bl	80140e0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010608:	f7ff fc38 	bl	800fe7c <SetMlmeScheduleUplinkIndication>
                break;
 801060c:	46c0      	nop			; (mov r8, r8)
 801060e:	e1bb      	b.n	8010988 <ProcessMacCommands+0xaec>
 8010610:	20000bb0 	.word	0x20000bb0
 8010614:	00000484 	.word	0x00000484
 8010618:	0801e790 	.word	0x0801e790
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 801061c:	200a      	movs	r0, #10
 801061e:	f004 f8f1 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 8010622:	1e03      	subs	r3, r0, #0
 8010624:	d100      	bne.n	8010628 <ProcessMacCommands+0x78c>
 8010626:	e1af      	b.n	8010988 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010628:	210a      	movs	r1, #10
 801062a:	2000      	movs	r0, #0
 801062c:	f004 f84e 	bl	80146cc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8010630:	2418      	movs	r4, #24
 8010632:	193b      	adds	r3, r7, r4
 8010634:	0018      	movs	r0, r3
 8010636:	2308      	movs	r3, #8
 8010638:	001a      	movs	r2, r3
 801063a:	2100      	movs	r1, #0
 801063c:	f00d f94f 	bl	801d8de <memset>
                    SysTime_t sysTime = { 0 };
 8010640:	2510      	movs	r5, #16
 8010642:	197b      	adds	r3, r7, r5
 8010644:	0018      	movs	r0, r3
 8010646:	2308      	movs	r3, #8
 8010648:	001a      	movs	r2, r3
 801064a:	2100      	movs	r1, #0
 801064c:	f00d f947 	bl	801d8de <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 8010650:	2608      	movs	r6, #8
 8010652:	19bb      	adds	r3, r7, r6
 8010654:	0018      	movs	r0, r3
 8010656:	2308      	movs	r3, #8
 8010658:	001a      	movs	r2, r3
 801065a:	2100      	movs	r1, #0
 801065c:	f00d f93f 	bl	801d8de <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010660:	1cfb      	adds	r3, r7, #3
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	1cfa      	adds	r2, r7, #3
 8010666:	1c59      	adds	r1, r3, #1
 8010668:	7011      	strb	r1, [r2, #0]
 801066a:	001a      	movs	r2, r3
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	189b      	adds	r3, r3, r2
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	001a      	movs	r2, r3
 8010674:	193b      	adds	r3, r7, r4
 8010676:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010678:	1cfb      	adds	r3, r7, #3
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	1cfa      	adds	r2, r7, #3
 801067e:	1c59      	adds	r1, r3, #1
 8010680:	7011      	strb	r1, [r2, #0]
 8010682:	001a      	movs	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	189b      	adds	r3, r3, r2
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	021a      	lsls	r2, r3, #8
 801068c:	193b      	adds	r3, r7, r4
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	431a      	orrs	r2, r3
 8010692:	0020      	movs	r0, r4
 8010694:	193b      	adds	r3, r7, r4
 8010696:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010698:	1cfb      	adds	r3, r7, #3
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	1cfa      	adds	r2, r7, #3
 801069e:	1c59      	adds	r1, r3, #1
 80106a0:	7011      	strb	r1, [r2, #0]
 80106a2:	001a      	movs	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	189b      	adds	r3, r3, r2
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	041a      	lsls	r2, r3, #16
 80106ac:	183b      	adds	r3, r7, r0
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	431a      	orrs	r2, r3
 80106b2:	183b      	adds	r3, r7, r0
 80106b4:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80106b6:	1cfb      	adds	r3, r7, #3
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	1cfa      	adds	r2, r7, #3
 80106bc:	1c59      	adds	r1, r3, #1
 80106be:	7011      	strb	r1, [r2, #0]
 80106c0:	001a      	movs	r2, r3
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	189b      	adds	r3, r3, r2
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	061a      	lsls	r2, r3, #24
 80106ca:	183b      	adds	r3, r7, r0
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	431a      	orrs	r2, r3
 80106d0:	183b      	adds	r3, r7, r0
 80106d2:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80106d4:	1cfb      	adds	r3, r7, #3
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	1cfa      	adds	r2, r7, #3
 80106da:	1c59      	adds	r1, r3, #1
 80106dc:	7011      	strb	r1, [r2, #0]
 80106de:	001a      	movs	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	189b      	adds	r3, r3, r2
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	b21a      	sxth	r2, r3
 80106e8:	183b      	adds	r3, r7, r0
 80106ea:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80106ec:	0001      	movs	r1, r0
 80106ee:	183b      	adds	r3, r7, r0
 80106f0:	2204      	movs	r2, #4
 80106f2:	5e9b      	ldrsh	r3, [r3, r2]
 80106f4:	001a      	movs	r2, r3
 80106f6:	0013      	movs	r3, r2
 80106f8:	015b      	lsls	r3, r3, #5
 80106fa:	1a9b      	subs	r3, r3, r2
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	189b      	adds	r3, r3, r2
 8010700:	00db      	lsls	r3, r3, #3
 8010702:	121b      	asrs	r3, r3, #8
 8010704:	b21a      	sxth	r2, r3
 8010706:	187b      	adds	r3, r7, r1
 8010708:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801070a:	197a      	adds	r2, r7, r5
 801070c:	187b      	adds	r3, r7, r1
 801070e:	0010      	movs	r0, r2
 8010710:	0019      	movs	r1, r3
 8010712:	2308      	movs	r3, #8
 8010714:	001a      	movs	r2, r3
 8010716:	f00d f8d9 	bl	801d8cc <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801071a:	197b      	adds	r3, r7, r5
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4aa2      	ldr	r2, [pc, #648]	; (80109a8 <ProcessMacCommands+0xb0c>)
 8010720:	189a      	adds	r2, r3, r2
 8010722:	002c      	movs	r4, r5
 8010724:	197b      	adds	r3, r7, r5
 8010726:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010728:	19bb      	adds	r3, r7, r6
 801072a:	0018      	movs	r0, r3
 801072c:	f00b fe62 	bl	801c3f4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010730:	236c      	movs	r3, #108	; 0x6c
 8010732:	18fd      	adds	r5, r7, r3
 8010734:	489d      	ldr	r0, [pc, #628]	; (80109ac <ProcessMacCommands+0xb10>)
 8010736:	23ce      	movs	r3, #206	; 0xce
 8010738:	0099      	lsls	r1, r3, #2
 801073a:	0026      	movs	r6, r4
 801073c:	193a      	adds	r2, r7, r4
 801073e:	2404      	movs	r4, #4
 8010740:	1843      	adds	r3, r0, r1
 8010742:	191c      	adds	r4, r3, r4
 8010744:	466b      	mov	r3, sp
 8010746:	6824      	ldr	r4, [r4, #0]
 8010748:	601c      	str	r4, [r3, #0]
 801074a:	5843      	ldr	r3, [r0, r1]
 801074c:	6811      	ldr	r1, [r2, #0]
 801074e:	6852      	ldr	r2, [r2, #4]
 8010750:	0028      	movs	r0, r5
 8010752:	f00b fdc9 	bl	801c2e8 <SysTimeSub>
 8010756:	0035      	movs	r5, r6
 8010758:	197c      	adds	r4, r7, r5
 801075a:	236c      	movs	r3, #108	; 0x6c
 801075c:	18fb      	adds	r3, r7, r3
 801075e:	2608      	movs	r6, #8
 8010760:	19ba      	adds	r2, r7, r6
 8010762:	4669      	mov	r1, sp
 8010764:	6858      	ldr	r0, [r3, #4]
 8010766:	6008      	str	r0, [r1, #0]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	6811      	ldr	r1, [r2, #0]
 801076c:	6852      	ldr	r2, [r2, #4]
 801076e:	0020      	movs	r0, r4
 8010770:	f00b fd68 	bl	801c244 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010774:	197b      	adds	r3, r7, r5
 8010776:	6818      	ldr	r0, [r3, #0]
 8010778:	6859      	ldr	r1, [r3, #4]
 801077a:	f00b fe03 	bl	801c384 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801077e:	f003 fb2b 	bl	8013dd8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010782:	4a8a      	ldr	r2, [pc, #552]	; (80109ac <ProcessMacCommands+0xb10>)
 8010784:	2387      	movs	r3, #135	; 0x87
 8010786:	00db      	lsls	r3, r3, #3
 8010788:	2101      	movs	r1, #1
 801078a:	54d1      	strb	r1, [r2, r3]
                }
                break;
 801078c:	e0fc      	b.n	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801078e:	200d      	movs	r0, #13
 8010790:	f004 f838 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 8010794:	1e03      	subs	r3, r0, #0
 8010796:	d100      	bne.n	801079a <ProcessMacCommands+0x8fe>
 8010798:	e0f6      	b.n	8010988 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801079a:	210d      	movs	r1, #13
 801079c:	2000      	movs	r0, #0
 801079e:	f003 ff95 	bl	80146cc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80107a2:	4a82      	ldr	r2, [pc, #520]	; (80109ac <ProcessMacCommands+0xb10>)
 80107a4:	2390      	movs	r3, #144	; 0x90
 80107a6:	00db      	lsls	r3, r3, #3
 80107a8:	5cd3      	ldrb	r3, [r2, r3]
 80107aa:	2b04      	cmp	r3, #4
 80107ac:	d100      	bne.n	80107b0 <ProcessMacCommands+0x914>
 80107ae:	e0eb      	b.n	8010988 <ProcessMacCommands+0xaec>
 80107b0:	4a7e      	ldr	r2, [pc, #504]	; (80109ac <ProcessMacCommands+0xb10>)
 80107b2:	2390      	movs	r3, #144	; 0x90
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	5cd3      	ldrb	r3, [r2, r3]
 80107b8:	2b05      	cmp	r3, #5
 80107ba:	d100      	bne.n	80107be <ProcessMacCommands+0x922>
 80107bc:	e0e4      	b.n	8010988 <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80107be:	f003 faec 	bl	8013d9a <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80107c2:	e0e1      	b.n	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80107c4:	207c      	movs	r0, #124	; 0x7c
 80107c6:	183b      	adds	r3, r7, r0
 80107c8:	2203      	movs	r2, #3
 80107ca:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 80107cc:	2300      	movs	r3, #0
 80107ce:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80107d0:	1cfb      	adds	r3, r7, #3
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	1cfa      	adds	r2, r7, #3
 80107d6:	1c59      	adds	r1, r3, #1
 80107d8:	7011      	strb	r1, [r2, #0]
 80107da:	001a      	movs	r2, r3
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	189b      	adds	r3, r3, r2
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80107e4:	1cfb      	adds	r3, r7, #3
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	1cfa      	adds	r2, r7, #3
 80107ea:	1c59      	adds	r1, r3, #1
 80107ec:	7011      	strb	r1, [r2, #0]
 80107ee:	001a      	movs	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	189b      	adds	r3, r3, r2
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	021b      	lsls	r3, r3, #8
 80107f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80107fa:	4313      	orrs	r3, r2
 80107fc:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80107fe:	1cfb      	adds	r3, r7, #3
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	1cfa      	adds	r2, r7, #3
 8010804:	1c59      	adds	r1, r3, #1
 8010806:	7011      	strb	r1, [r2, #0]
 8010808:	001a      	movs	r2, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	189b      	adds	r3, r3, r2
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	041b      	lsls	r3, r3, #16
 8010812:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010814:	4313      	orrs	r3, r2
 8010816:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8010818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801081a:	2264      	movs	r2, #100	; 0x64
 801081c:	4353      	muls	r3, r2
 801081e:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010820:	1cfb      	adds	r3, r7, #3
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	1cfa      	adds	r2, r7, #3
 8010826:	1c59      	adds	r1, r3, #1
 8010828:	7011      	strb	r1, [r2, #0]
 801082a:	001a      	movs	r2, r3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	189b      	adds	r3, r3, r2
 8010830:	781a      	ldrb	r2, [r3, #0]
 8010832:	2677      	movs	r6, #119	; 0x77
 8010834:	19bb      	adds	r3, r7, r6
 8010836:	210f      	movs	r1, #15
 8010838:	400a      	ands	r2, r1
 801083a:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801083c:	0005      	movs	r5, r0
 801083e:	183c      	adds	r4, r7, r0
 8010840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010842:	19bb      	adds	r3, r7, r6
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	0011      	movs	r1, r2
 8010848:	0018      	movs	r0, r3
 801084a:	f003 faab 	bl	8013da4 <LoRaMacClassBPingSlotChannelReq>
 801084e:	0003      	movs	r3, r0
 8010850:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8010852:	2168      	movs	r1, #104	; 0x68
 8010854:	187b      	adds	r3, r7, r1
 8010856:	197a      	adds	r2, r7, r5
 8010858:	7812      	ldrb	r2, [r2, #0]
 801085a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801085c:	187b      	adds	r3, r7, r1
 801085e:	2201      	movs	r2, #1
 8010860:	0019      	movs	r1, r3
 8010862:	2011      	movs	r0, #17
 8010864:	f003 fc3c 	bl	80140e0 <LoRaMacCommandsAddCmd>
                break;
 8010868:	e08e      	b.n	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801086a:	200e      	movs	r0, #14
 801086c:	f003 ffca 	bl	8014804 <LoRaMacConfirmQueueIsCmdActive>
 8010870:	1e03      	subs	r3, r0, #0
 8010872:	d100      	bne.n	8010876 <ProcessMacCommands+0x9da>
 8010874:	e088      	b.n	8010988 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010876:	210e      	movs	r1, #14
 8010878:	2000      	movs	r0, #0
 801087a:	f003 ff27 	bl	80146cc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801087e:	207e      	movs	r0, #126	; 0x7e
 8010880:	183b      	adds	r3, r7, r0
 8010882:	2200      	movs	r2, #0
 8010884:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 8010886:	247d      	movs	r4, #125	; 0x7d
 8010888:	193b      	adds	r3, r7, r4
 801088a:	2200      	movs	r2, #0
 801088c:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801088e:	1cfb      	adds	r3, r7, #3
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	1cfa      	adds	r2, r7, #3
 8010894:	1c59      	adds	r1, r3, #1
 8010896:	7011      	strb	r1, [r2, #0]
 8010898:	001a      	movs	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	189b      	adds	r3, r3, r2
 801089e:	781a      	ldrb	r2, [r3, #0]
 80108a0:	183b      	adds	r3, r7, r0
 80108a2:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80108a4:	1cfb      	adds	r3, r7, #3
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	1cfa      	adds	r2, r7, #3
 80108aa:	1c59      	adds	r1, r3, #1
 80108ac:	7011      	strb	r1, [r2, #0]
 80108ae:	001a      	movs	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	189b      	adds	r3, r3, r2
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	021b      	lsls	r3, r3, #8
 80108b8:	b21a      	sxth	r2, r3
 80108ba:	183b      	adds	r3, r7, r0
 80108bc:	2100      	movs	r1, #0
 80108be:	5e5b      	ldrsh	r3, [r3, r1]
 80108c0:	4313      	orrs	r3, r2
 80108c2:	b21a      	sxth	r2, r3
 80108c4:	183b      	adds	r3, r7, r0
 80108c6:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 80108c8:	1cfb      	adds	r3, r7, #3
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	1cfa      	adds	r2, r7, #3
 80108ce:	1c59      	adds	r1, r3, #1
 80108d0:	7011      	strb	r1, [r2, #0]
 80108d2:	001a      	movs	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	189a      	adds	r2, r3, r2
 80108d8:	193b      	adds	r3, r7, r4
 80108da:	7812      	ldrb	r2, [r2, #0]
 80108dc:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80108de:	4b34      	ldr	r3, [pc, #208]	; (80109b0 <ProcessMacCommands+0xb14>)
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	193b      	adds	r3, r7, r4
 80108e4:	7819      	ldrb	r1, [r3, #0]
 80108e6:	183b      	adds	r3, r7, r0
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	0018      	movs	r0, r3
 80108ec:	f003 fa66 	bl	8013dbc <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80108f0:	e04a      	b.n	8010988 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80108f2:	2300      	movs	r3, #0
 80108f4:	2080      	movs	r0, #128	; 0x80
 80108f6:	183a      	adds	r2, r7, r0
 80108f8:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 80108fa:	1cfb      	adds	r3, r7, #3
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	1cfa      	adds	r2, r7, #3
 8010900:	1c59      	adds	r1, r3, #1
 8010902:	7011      	strb	r1, [r2, #0]
 8010904:	001a      	movs	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	189b      	adds	r3, r3, r2
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	183a      	adds	r2, r7, r0
 801090e:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010910:	1cfb      	adds	r3, r7, #3
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	1cfa      	adds	r2, r7, #3
 8010916:	1c59      	adds	r1, r3, #1
 8010918:	7011      	strb	r1, [r2, #0]
 801091a:	001a      	movs	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	189b      	adds	r3, r3, r2
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	021b      	lsls	r3, r3, #8
 8010924:	183a      	adds	r2, r7, r0
 8010926:	6812      	ldr	r2, [r2, #0]
 8010928:	4313      	orrs	r3, r2
 801092a:	183a      	adds	r2, r7, r0
 801092c:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801092e:	1cfb      	adds	r3, r7, #3
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	1cfa      	adds	r2, r7, #3
 8010934:	1c59      	adds	r1, r3, #1
 8010936:	7011      	strb	r1, [r2, #0]
 8010938:	001a      	movs	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	189b      	adds	r3, r3, r2
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	041b      	lsls	r3, r3, #16
 8010942:	183a      	adds	r2, r7, r0
 8010944:	6812      	ldr	r2, [r2, #0]
 8010946:	4313      	orrs	r3, r2
 8010948:	183a      	adds	r2, r7, r0
 801094a:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 801094c:	183b      	adds	r3, r7, r0
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2264      	movs	r2, #100	; 0x64
 8010952:	4353      	muls	r3, r2
 8010954:	183a      	adds	r2, r7, r0
 8010956:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010958:	183b      	adds	r3, r7, r0
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	0018      	movs	r0, r3
 801095e:	f003 fa40 	bl	8013de2 <LoRaMacClassBBeaconFreqReq>
 8010962:	1e03      	subs	r3, r0, #0
 8010964:	d004      	beq.n	8010970 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 8010966:	2368      	movs	r3, #104	; 0x68
 8010968:	18fb      	adds	r3, r7, r3
 801096a:	2201      	movs	r2, #1
 801096c:	701a      	strb	r2, [r3, #0]
 801096e:	e003      	b.n	8010978 <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010970:	2368      	movs	r3, #104	; 0x68
 8010972:	18fb      	adds	r3, r7, r3
 8010974:	2200      	movs	r2, #0
 8010976:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010978:	2368      	movs	r3, #104	; 0x68
 801097a:	18fb      	adds	r3, r7, r3
 801097c:	2201      	movs	r2, #1
 801097e:	0019      	movs	r1, r3
 8010980:	2013      	movs	r0, #19
 8010982:	f003 fbad 	bl	80140e0 <LoRaMacCommandsAddCmd>
                }
                break;
 8010986:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8010988:	1cfa      	adds	r2, r7, #3
 801098a:	1cbb      	adds	r3, r7, #2
 801098c:	7812      	ldrb	r2, [r2, #0]
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	429a      	cmp	r2, r3
 8010992:	d201      	bcs.n	8010998 <ProcessMacCommands+0xafc>
 8010994:	f7ff faa0 	bl	800fed8 <ProcessMacCommands+0x3c>
 8010998:	e002      	b.n	80109a0 <ProcessMacCommands+0xb04>
            return;
 801099a:	46c0      	nop			; (mov r8, r8)
 801099c:	e000      	b.n	80109a0 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801099e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80109a0:	46bd      	mov	sp, r7
 80109a2:	b023      	add	sp, #140	; 0x8c
 80109a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109a6:	46c0      	nop			; (mov r8, r8)
 80109a8:	12d53d80 	.word	0x12d53d80
 80109ac:	20000bb0 	.word	0x20000bb0
 80109b0:	20000ba0 	.word	0x20000ba0

080109b4 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80109b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109b6:	b08f      	sub	sp, #60	; 0x3c
 80109b8:	af02      	add	r7, sp, #8
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	0008      	movs	r0, r1
 80109be:	607a      	str	r2, [r7, #4]
 80109c0:	0019      	movs	r1, r3
 80109c2:	230b      	movs	r3, #11
 80109c4:	18fb      	adds	r3, r7, r3
 80109c6:	1c02      	adds	r2, r0, #0
 80109c8:	701a      	strb	r2, [r3, #0]
 80109ca:	2308      	movs	r3, #8
 80109cc:	18fb      	adds	r3, r7, r3
 80109ce:	1c0a      	adds	r2, r1, #0
 80109d0:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109d2:	232f      	movs	r3, #47	; 0x2f
 80109d4:	18fb      	adds	r3, r7, r3
 80109d6:	2203      	movs	r2, #3
 80109d8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80109da:	4b8f      	ldr	r3, [pc, #572]	; (8010c18 <Send+0x264>)
 80109dc:	4a8f      	ldr	r2, [pc, #572]	; (8010c1c <Send+0x268>)
 80109de:	589a      	ldr	r2, [r3, r2]
 80109e0:	232e      	movs	r3, #46	; 0x2e
 80109e2:	18fb      	adds	r3, r7, r3
 80109e4:	2185      	movs	r1, #133	; 0x85
 80109e6:	5c52      	ldrb	r2, [r2, r1]
 80109e8:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80109ea:	4b8b      	ldr	r3, [pc, #556]	; (8010c18 <Send+0x264>)
 80109ec:	4a8b      	ldr	r2, [pc, #556]	; (8010c1c <Send+0x268>)
 80109ee:	589a      	ldr	r2, [r3, r2]
 80109f0:	232d      	movs	r3, #45	; 0x2d
 80109f2:	18fb      	adds	r3, r7, r3
 80109f4:	2184      	movs	r1, #132	; 0x84
 80109f6:	5c52      	ldrb	r2, [r2, r1]
 80109f8:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80109fa:	4b87      	ldr	r3, [pc, #540]	; (8010c18 <Send+0x264>)
 80109fc:	4a87      	ldr	r2, [pc, #540]	; (8010c1c <Send+0x268>)
 80109fe:	589b      	ldr	r3, [r3, r2]
 8010a00:	2280      	movs	r2, #128	; 0x80
 8010a02:	589b      	ldr	r3, [r3, r2]
 8010a04:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8010a06:	4b84      	ldr	r3, [pc, #528]	; (8010c18 <Send+0x264>)
 8010a08:	4a84      	ldr	r2, [pc, #528]	; (8010c1c <Send+0x268>)
 8010a0a:	589a      	ldr	r2, [r3, r2]
 8010a0c:	23b2      	movs	r3, #178	; 0xb2
 8010a0e:	005b      	lsls	r3, r3, #1
 8010a10:	5cd3      	ldrb	r3, [r2, r3]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d101      	bne.n	8010a1a <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010a16:	2307      	movs	r3, #7
 8010a18:	e0fa      	b.n	8010c10 <Send+0x25c>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8010a1a:	4b7f      	ldr	r3, [pc, #508]	; (8010c18 <Send+0x264>)
 8010a1c:	4a7f      	ldr	r2, [pc, #508]	; (8010c1c <Send+0x268>)
 8010a1e:	589b      	ldr	r3, [r3, r2]
 8010a20:	22c8      	movs	r2, #200	; 0xc8
 8010a22:	5c9b      	ldrb	r3, [r3, r2]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d106      	bne.n	8010a36 <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8010a28:	4b7b      	ldr	r3, [pc, #492]	; (8010c18 <Send+0x264>)
 8010a2a:	4a7c      	ldr	r2, [pc, #496]	; (8010c1c <Send+0x268>)
 8010a2c:	589a      	ldr	r2, [r3, r2]
 8010a2e:	23aa      	movs	r3, #170	; 0xaa
 8010a30:	005b      	lsls	r3, r3, #1
 8010a32:	2100      	movs	r1, #0
 8010a34:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 8010a36:	242c      	movs	r4, #44	; 0x2c
 8010a38:	193b      	adds	r3, r7, r4
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8010a3e:	193b      	adds	r3, r7, r4
 8010a40:	781a      	ldrb	r2, [r3, #0]
 8010a42:	210f      	movs	r1, #15
 8010a44:	438a      	bics	r2, r1
 8010a46:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8010a48:	4b73      	ldr	r3, [pc, #460]	; (8010c18 <Send+0x264>)
 8010a4a:	4a74      	ldr	r2, [pc, #464]	; (8010c1c <Send+0x268>)
 8010a4c:	589b      	ldr	r3, [r3, r2]
 8010a4e:	227e      	movs	r2, #126	; 0x7e
 8010a50:	5c9a      	ldrb	r2, [r3, r2]
 8010a52:	193b      	adds	r3, r7, r4
 8010a54:	01d0      	lsls	r0, r2, #7
 8010a56:	781a      	ldrb	r2, [r3, #0]
 8010a58:	217f      	movs	r1, #127	; 0x7f
 8010a5a:	400a      	ands	r2, r1
 8010a5c:	1c11      	adds	r1, r2, #0
 8010a5e:	1c02      	adds	r2, r0, #0
 8010a60:	430a      	orrs	r2, r1
 8010a62:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010a64:	4b6c      	ldr	r3, [pc, #432]	; (8010c18 <Send+0x264>)
 8010a66:	4a6d      	ldr	r2, [pc, #436]	; (8010c1c <Send+0x268>)
 8010a68:	589b      	ldr	r3, [r3, r2]
 8010a6a:	227c      	movs	r2, #124	; 0x7c
 8010a6c:	5c9b      	ldrb	r3, [r3, r2]
 8010a6e:	2b01      	cmp	r3, #1
 8010a70:	d105      	bne.n	8010a7e <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 8010a72:	193b      	adds	r3, r7, r4
 8010a74:	781a      	ldrb	r2, [r3, #0]
 8010a76:	2110      	movs	r1, #16
 8010a78:	430a      	orrs	r2, r1
 8010a7a:	701a      	strb	r2, [r3, #0]
 8010a7c:	e005      	b.n	8010a8a <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010a7e:	232c      	movs	r3, #44	; 0x2c
 8010a80:	18fb      	adds	r3, r7, r3
 8010a82:	781a      	ldrb	r2, [r3, #0]
 8010a84:	2110      	movs	r1, #16
 8010a86:	438a      	bics	r2, r1
 8010a88:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8010a8a:	4b63      	ldr	r3, [pc, #396]	; (8010c18 <Send+0x264>)
 8010a8c:	4a63      	ldr	r2, [pc, #396]	; (8010c1c <Send+0x268>)
 8010a8e:	589a      	ldr	r2, [r3, r2]
 8010a90:	234c      	movs	r3, #76	; 0x4c
 8010a92:	33ff      	adds	r3, #255	; 0xff
 8010a94:	5cd3      	ldrb	r3, [r2, r3]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d005      	beq.n	8010aa6 <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 8010a9a:	232c      	movs	r3, #44	; 0x2c
 8010a9c:	18fb      	adds	r3, r7, r3
 8010a9e:	781a      	ldrb	r2, [r3, #0]
 8010aa0:	2120      	movs	r1, #32
 8010aa2:	430a      	orrs	r2, r1
 8010aa4:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8010aa6:	4b5c      	ldr	r3, [pc, #368]	; (8010c18 <Send+0x264>)
 8010aa8:	4a5c      	ldr	r2, [pc, #368]	; (8010c1c <Send+0x268>)
 8010aaa:	5899      	ldr	r1, [r3, r2]
 8010aac:	2014      	movs	r0, #20
 8010aae:	183b      	adds	r3, r7, r0
 8010ab0:	22b0      	movs	r2, #176	; 0xb0
 8010ab2:	0052      	lsls	r2, r2, #1
 8010ab4:	588a      	ldr	r2, [r1, r2]
 8010ab6:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8010ab8:	0001      	movs	r1, r0
 8010aba:	187b      	adds	r3, r7, r1
 8010abc:	2201      	movs	r2, #1
 8010abe:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010ac0:	242c      	movs	r4, #44	; 0x2c
 8010ac2:	193b      	adds	r3, r7, r4
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	061b      	lsls	r3, r3, #24
 8010ac8:	0fdb      	lsrs	r3, r3, #31
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	1e5a      	subs	r2, r3, #1
 8010ace:	4193      	sbcs	r3, r2
 8010ad0:	b2da      	uxtb	r2, r3
 8010ad2:	187b      	adds	r3, r7, r1
 8010ad4:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010ad6:	4b50      	ldr	r3, [pc, #320]	; (8010c18 <Send+0x264>)
 8010ad8:	4a50      	ldr	r2, [pc, #320]	; (8010c1c <Send+0x268>)
 8010ada:	589b      	ldr	r3, [r3, r2]
 8010adc:	2280      	movs	r2, #128	; 0x80
 8010ade:	589a      	ldr	r2, [r3, r2]
 8010ae0:	0008      	movs	r0, r1
 8010ae2:	183b      	adds	r3, r7, r0
 8010ae4:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010ae6:	4a4c      	ldr	r2, [pc, #304]	; (8010c18 <Send+0x264>)
 8010ae8:	23fd      	movs	r3, #253	; 0xfd
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	5ad2      	ldrh	r2, [r2, r3]
 8010aee:	183b      	adds	r3, r7, r0
 8010af0:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010af2:	4b49      	ldr	r3, [pc, #292]	; (8010c18 <Send+0x264>)
 8010af4:	4a4a      	ldr	r2, [pc, #296]	; (8010c20 <Send+0x26c>)
 8010af6:	5a9a      	ldrh	r2, [r3, r2]
 8010af8:	183b      	adds	r3, r7, r0
 8010afa:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010afc:	4b46      	ldr	r3, [pc, #280]	; (8010c18 <Send+0x264>)
 8010afe:	4a47      	ldr	r2, [pc, #284]	; (8010c1c <Send+0x268>)
 8010b00:	589b      	ldr	r3, [r3, r2]
 8010b02:	2285      	movs	r2, #133	; 0x85
 8010b04:	569a      	ldrsb	r2, [r3, r2]
 8010b06:	183b      	adds	r3, r7, r0
 8010b08:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010b0a:	4b43      	ldr	r3, [pc, #268]	; (8010c18 <Send+0x264>)
 8010b0c:	4a43      	ldr	r2, [pc, #268]	; (8010c1c <Send+0x268>)
 8010b0e:	589b      	ldr	r3, [r3, r2]
 8010b10:	2284      	movs	r2, #132	; 0x84
 8010b12:	569a      	ldrsb	r2, [r3, r2]
 8010b14:	183b      	adds	r3, r7, r0
 8010b16:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010b18:	4b3f      	ldr	r3, [pc, #252]	; (8010c18 <Send+0x264>)
 8010b1a:	4a40      	ldr	r2, [pc, #256]	; (8010c1c <Send+0x268>)
 8010b1c:	589b      	ldr	r3, [r3, r2]
 8010b1e:	22b8      	movs	r2, #184	; 0xb8
 8010b20:	5c9a      	ldrb	r2, [r3, r2]
 8010b22:	183b      	adds	r3, r7, r0
 8010b24:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8010b26:	4b3c      	ldr	r3, [pc, #240]	; (8010c18 <Send+0x264>)
 8010b28:	4a3c      	ldr	r2, [pc, #240]	; (8010c1c <Send+0x268>)
 8010b2a:	589b      	ldr	r3, [r3, r2]
 8010b2c:	781a      	ldrb	r2, [r3, #0]
 8010b2e:	183b      	adds	r3, r7, r0
 8010b30:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010b32:	4b39      	ldr	r3, [pc, #228]	; (8010c18 <Send+0x264>)
 8010b34:	4a39      	ldr	r2, [pc, #228]	; (8010c1c <Send+0x268>)
 8010b36:	589b      	ldr	r3, [r3, r2]
 8010b38:	3385      	adds	r3, #133	; 0x85
 8010b3a:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 8010b3c:	4b36      	ldr	r3, [pc, #216]	; (8010c18 <Send+0x264>)
 8010b3e:	4a37      	ldr	r2, [pc, #220]	; (8010c1c <Send+0x268>)
 8010b40:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010b42:	3384      	adds	r3, #132	; 0x84
 8010b44:	001a      	movs	r2, r3
 8010b46:	2328      	movs	r3, #40	; 0x28
 8010b48:	18fb      	adds	r3, r7, r3
 8010b4a:	1838      	adds	r0, r7, r0
 8010b4c:	f003 f85d 	bl	8013c0a <LoRaMacAdrCalcNext>
 8010b50:	0003      	movs	r3, r0
 8010b52:	0019      	movs	r1, r3
 8010b54:	0026      	movs	r6, r4
 8010b56:	193b      	adds	r3, r7, r4
 8010b58:	2201      	movs	r2, #1
 8010b5a:	400a      	ands	r2, r1
 8010b5c:	0190      	lsls	r0, r2, #6
 8010b5e:	781a      	ldrb	r2, [r3, #0]
 8010b60:	2140      	movs	r1, #64	; 0x40
 8010b62:	438a      	bics	r2, r1
 8010b64:	1c11      	adds	r1, r2, #0
 8010b66:	1c02      	adds	r2, r0, #0
 8010b68:	430a      	orrs	r2, r1
 8010b6a:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010b6c:	222f      	movs	r2, #47	; 0x2f
 8010b6e:	18bc      	adds	r4, r7, r2
 8010b70:	687d      	ldr	r5, [r7, #4]
 8010b72:	230b      	movs	r3, #11
 8010b74:	18fb      	adds	r3, r7, r3
 8010b76:	781a      	ldrb	r2, [r3, #0]
 8010b78:	19b9      	adds	r1, r7, r6
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	2308      	movs	r3, #8
 8010b7e:	18fb      	adds	r3, r7, r3
 8010b80:	881b      	ldrh	r3, [r3, #0]
 8010b82:	9300      	str	r3, [sp, #0]
 8010b84:	002b      	movs	r3, r5
 8010b86:	f000 fd05 	bl	8011594 <PrepareFrame>
 8010b8a:	0003      	movs	r3, r0
 8010b8c:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010b8e:	222f      	movs	r2, #47	; 0x2f
 8010b90:	18bb      	adds	r3, r7, r2
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d003      	beq.n	8010ba0 <Send+0x1ec>
 8010b98:	18bb      	adds	r3, r7, r2
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	2b0a      	cmp	r3, #10
 8010b9e:	d10b      	bne.n	8010bb8 <Send+0x204>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8010ba0:	232f      	movs	r3, #47	; 0x2f
 8010ba2:	18fc      	adds	r4, r7, r3
 8010ba4:	2340      	movs	r3, #64	; 0x40
 8010ba6:	2208      	movs	r2, #8
 8010ba8:	189b      	adds	r3, r3, r2
 8010baa:	19db      	adds	r3, r3, r7
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	0018      	movs	r0, r3
 8010bb0:	f000 f9cc 	bl	8010f4c <ScheduleTx>
 8010bb4:	0003      	movs	r3, r0
 8010bb6:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010bb8:	232f      	movs	r3, #47	; 0x2f
 8010bba:	18fb      	adds	r3, r7, r3
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d010      	beq.n	8010be4 <Send+0x230>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8010bc2:	4b15      	ldr	r3, [pc, #84]	; (8010c18 <Send+0x264>)
 8010bc4:	4a15      	ldr	r2, [pc, #84]	; (8010c1c <Send+0x268>)
 8010bc6:	589b      	ldr	r3, [r3, r2]
 8010bc8:	222e      	movs	r2, #46	; 0x2e
 8010bca:	18ba      	adds	r2, r7, r2
 8010bcc:	2185      	movs	r1, #133	; 0x85
 8010bce:	7812      	ldrb	r2, [r2, #0]
 8010bd0:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8010bd2:	4b11      	ldr	r3, [pc, #68]	; (8010c18 <Send+0x264>)
 8010bd4:	4a11      	ldr	r2, [pc, #68]	; (8010c1c <Send+0x268>)
 8010bd6:	589b      	ldr	r3, [r3, r2]
 8010bd8:	222d      	movs	r2, #45	; 0x2d
 8010bda:	18ba      	adds	r2, r7, r2
 8010bdc:	2184      	movs	r1, #132	; 0x84
 8010bde:	7812      	ldrb	r2, [r2, #0]
 8010be0:	545a      	strb	r2, [r3, r1]
 8010be2:	e012      	b.n	8010c0a <Send+0x256>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 8010be4:	4b0c      	ldr	r3, [pc, #48]	; (8010c18 <Send+0x264>)
 8010be6:	4a0d      	ldr	r2, [pc, #52]	; (8010c1c <Send+0x268>)
 8010be8:	589a      	ldr	r2, [r3, r2]
 8010bea:	234c      	movs	r3, #76	; 0x4c
 8010bec:	33ff      	adds	r3, #255	; 0xff
 8010bee:	2100      	movs	r1, #0
 8010bf0:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8010bf2:	4b09      	ldr	r3, [pc, #36]	; (8010c18 <Send+0x264>)
 8010bf4:	4a09      	ldr	r2, [pc, #36]	; (8010c1c <Send+0x268>)
 8010bf6:	589b      	ldr	r3, [r3, r2]
 8010bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bfa:	2180      	movs	r1, #128	; 0x80
 8010bfc:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010bfe:	f003 faf9 	bl	80141f4 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010c02:	1e03      	subs	r3, r0, #0
 8010c04:	d001      	beq.n	8010c0a <Send+0x256>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c06:	2313      	movs	r3, #19
 8010c08:	e002      	b.n	8010c10 <Send+0x25c>
        }
    }
    return status;
 8010c0a:	232f      	movs	r3, #47	; 0x2f
 8010c0c:	18fb      	adds	r3, r7, r3
 8010c0e:	781b      	ldrb	r3, [r3, #0]
}
 8010c10:	0018      	movs	r0, r3
 8010c12:	46bd      	mov	sp, r7
 8010c14:	b00d      	add	sp, #52	; 0x34
 8010c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c18:	20000bb0 	.word	0x20000bb0
 8010c1c:	00000484 	.word	0x00000484
 8010c20:	000003f6 	.word	0x000003f6

08010c24 <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 8010c24:	b5b0      	push	{r4, r5, r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	0002      	movs	r2, r0
 8010c2c:	1dfb      	adds	r3, r7, #7
 8010c2e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010c30:	230e      	movs	r3, #14
 8010c32:	18fb      	adds	r3, r7, r3
 8010c34:	2200      	movs	r2, #0
 8010c36:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 8010c38:	240c      	movs	r4, #12
 8010c3a:	193b      	adds	r3, r7, r4
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8010c40:	250f      	movs	r5, #15
 8010c42:	197b      	adds	r3, r7, r5
 8010c44:	2201      	movs	r2, #1
 8010c46:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8010c48:	1dfb      	adds	r3, r7, #7
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	2bff      	cmp	r3, #255	; 0xff
 8010c4e:	d130      	bne.n	8010cb2 <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010c50:	2000      	movs	r0, #0
 8010c52:	f7fe ff7d 	bl	800fb50 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010c56:	4a21      	ldr	r2, [pc, #132]	; (8010cdc <SendReJoinReq+0xb8>)
 8010c58:	2382      	movs	r3, #130	; 0x82
 8010c5a:	005b      	lsls	r3, r3, #1
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010c60:	4a1e      	ldr	r2, [pc, #120]	; (8010cdc <SendReJoinReq+0xb8>)
 8010c62:	2384      	movs	r3, #132	; 0x84
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	491e      	ldr	r1, [pc, #120]	; (8010ce0 <SendReJoinReq+0xbc>)
 8010c68:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010c6a:	4a1c      	ldr	r2, [pc, #112]	; (8010cdc <SendReJoinReq+0xb8>)
 8010c6c:	2386      	movs	r3, #134	; 0x86
 8010c6e:	005b      	lsls	r3, r3, #1
 8010c70:	21ff      	movs	r1, #255	; 0xff
 8010c72:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010c74:	193b      	adds	r3, r7, r4
 8010c76:	781a      	ldrb	r2, [r3, #0]
 8010c78:	211f      	movs	r1, #31
 8010c7a:	400a      	ands	r2, r1
 8010c7c:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010c7e:	193b      	adds	r3, r7, r4
 8010c80:	7819      	ldrb	r1, [r3, #0]
 8010c82:	4a16      	ldr	r2, [pc, #88]	; (8010cdc <SendReJoinReq+0xb8>)
 8010c84:	230e      	movs	r3, #14
 8010c86:	33ff      	adds	r3, #255	; 0xff
 8010c88:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010c8a:	f7fc fa4b 	bl	800d124 <SecureElementGetJoinEui>
 8010c8e:	0001      	movs	r1, r0
 8010c90:	4b14      	ldr	r3, [pc, #80]	; (8010ce4 <SendReJoinReq+0xc0>)
 8010c92:	2208      	movs	r2, #8
 8010c94:	0018      	movs	r0, r3
 8010c96:	f008 f957 	bl	8018f48 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010c9a:	f7fc fa1f 	bl	800d0dc <SecureElementGetDevEui>
 8010c9e:	0001      	movs	r1, r0
 8010ca0:	4b11      	ldr	r3, [pc, #68]	; (8010ce8 <SendReJoinReq+0xc4>)
 8010ca2:	2208      	movs	r2, #8
 8010ca4:	0018      	movs	r0, r3
 8010ca6:	f008 f94f 	bl	8018f48 <memcpy1>

            allowDelayedTx = false;
 8010caa:	197b      	adds	r3, r7, r5
 8010cac:	2200      	movs	r2, #0
 8010cae:	701a      	strb	r2, [r3, #0]

            break;
 8010cb0:	e004      	b.n	8010cbc <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010cb2:	230e      	movs	r3, #14
 8010cb4:	18fb      	adds	r3, r7, r3
 8010cb6:	2202      	movs	r2, #2
 8010cb8:	701a      	strb	r2, [r3, #0]
            break;
 8010cba:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010cbc:	250e      	movs	r5, #14
 8010cbe:	197c      	adds	r4, r7, r5
 8010cc0:	230f      	movs	r3, #15
 8010cc2:	18fb      	adds	r3, r7, r3
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	0018      	movs	r0, r3
 8010cc8:	f000 f940 	bl	8010f4c <ScheduleTx>
 8010ccc:	0003      	movs	r3, r0
 8010cce:	7023      	strb	r3, [r4, #0]
    return status;
 8010cd0:	197b      	adds	r3, r7, r5
 8010cd2:	781b      	ldrb	r3, [r3, #0]
}
 8010cd4:	0018      	movs	r0, r3
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	b004      	add	sp, #16
 8010cda:	bdb0      	pop	{r4, r5, r7, pc}
 8010cdc:	20000bb0 	.word	0x20000bb0
 8010ce0:	20000bb2 	.word	0x20000bb2
 8010ce4:	20000cbe 	.word	0x20000cbe
 8010ce8:	20000cc6 	.word	0x20000cc6

08010cec <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010cf0:	f003 f80a 	bl	8013d08 <LoRaMacClassBIsBeaconExpected>
 8010cf4:	1e03      	subs	r3, r0, #0
 8010cf6:	d001      	beq.n	8010cfc <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010cf8:	230e      	movs	r3, #14
 8010cfa:	e013      	b.n	8010d24 <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010cfc:	4b0b      	ldr	r3, [pc, #44]	; (8010d2c <CheckForClassBCollision+0x40>)
 8010cfe:	4a0c      	ldr	r2, [pc, #48]	; (8010d30 <CheckForClassBCollision+0x44>)
 8010d00:	589b      	ldr	r3, [r3, r2]
 8010d02:	227c      	movs	r2, #124	; 0x7c
 8010d04:	5c9b      	ldrb	r3, [r3, r2]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d10b      	bne.n	8010d22 <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010d0a:	f003 f803 	bl	8013d14 <LoRaMacClassBIsPingExpected>
 8010d0e:	1e03      	subs	r3, r0, #0
 8010d10:	d001      	beq.n	8010d16 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010d12:	230f      	movs	r3, #15
 8010d14:	e006      	b.n	8010d24 <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010d16:	f003 f803 	bl	8013d20 <LoRaMacClassBIsMulticastExpected>
 8010d1a:	1e03      	subs	r3, r0, #0
 8010d1c:	d001      	beq.n	8010d22 <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010d1e:	230f      	movs	r3, #15
 8010d20:	e000      	b.n	8010d24 <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 8010d22:	2300      	movs	r3, #0
}
 8010d24:	0018      	movs	r0, r3
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	46c0      	nop			; (mov r8, r8)
 8010d2c:	20000bb0 	.word	0x20000bb0
 8010d30:	00000484 	.word	0x00000484

08010d34 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010d34:	b5b0      	push	{r4, r5, r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010d3a:	4b44      	ldr	r3, [pc, #272]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d3c:	4a44      	ldr	r2, [pc, #272]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d3e:	589b      	ldr	r3, [r3, r2]
 8010d40:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010d42:	4b42      	ldr	r3, [pc, #264]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d44:	4a42      	ldr	r2, [pc, #264]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d46:	589b      	ldr	r3, [r3, r2]
 8010d48:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 8010d4a:	4b40      	ldr	r3, [pc, #256]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d4c:	4a40      	ldr	r2, [pc, #256]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d4e:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010d50:	22b9      	movs	r2, #185	; 0xb9
 8010d52:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010d54:	4b3d      	ldr	r3, [pc, #244]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d56:	4a3e      	ldr	r2, [pc, #248]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d58:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010d5a:	2285      	movs	r2, #133	; 0x85
 8010d5c:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8010d5e:	4b3b      	ldr	r3, [pc, #236]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d60:	4d3b      	ldr	r5, [pc, #236]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d62:	595b      	ldr	r3, [r3, r5]
 8010d64:	25a5      	movs	r5, #165	; 0xa5
 8010d66:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010d68:	b25b      	sxtb	r3, r3
 8010d6a:	f005 fe3a 	bl	80169e2 <RegionApplyDrOffset>
 8010d6e:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010d70:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010d72:	4b36      	ldr	r3, [pc, #216]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d74:	4a36      	ldr	r2, [pc, #216]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d76:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010d78:	228c      	movs	r2, #140	; 0x8c
 8010d7a:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8010d7c:	4b33      	ldr	r3, [pc, #204]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d7e:	4834      	ldr	r0, [pc, #208]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d80:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010d82:	2088      	movs	r0, #136	; 0x88
 8010d84:	5818      	ldr	r0, [r3, r0]
 8010d86:	4b33      	ldr	r3, [pc, #204]	; (8010e54 <ComputeRxWindowParameters+0x120>)
 8010d88:	9300      	str	r3, [sp, #0]
 8010d8a:	0003      	movs	r3, r0
 8010d8c:	0020      	movs	r0, r4
 8010d8e:	f005 fd06 	bl	801679e <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010d92:	4b2e      	ldr	r3, [pc, #184]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d94:	4a2e      	ldr	r2, [pc, #184]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d96:	589b      	ldr	r3, [r3, r2]
 8010d98:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8010d9a:	4b2c      	ldr	r3, [pc, #176]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010d9c:	4a2c      	ldr	r2, [pc, #176]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010d9e:	589b      	ldr	r3, [r3, r2]
 8010da0:	22ac      	movs	r2, #172	; 0xac
 8010da2:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010da4:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010da6:	4b29      	ldr	r3, [pc, #164]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010da8:	4a29      	ldr	r2, [pc, #164]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010daa:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010dac:	228c      	movs	r2, #140	; 0x8c
 8010dae:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8010db0:	4b26      	ldr	r3, [pc, #152]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010db2:	4c27      	ldr	r4, [pc, #156]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010db4:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010db6:	2488      	movs	r4, #136	; 0x88
 8010db8:	591c      	ldr	r4, [r3, r4]
 8010dba:	4b27      	ldr	r3, [pc, #156]	; (8010e58 <ComputeRxWindowParameters+0x124>)
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	0023      	movs	r3, r4
 8010dc0:	f005 fced 	bl	801679e <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010dc4:	4b21      	ldr	r3, [pc, #132]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010dc6:	4a22      	ldr	r2, [pc, #136]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010dc8:	589b      	ldr	r3, [r3, r2]
 8010dca:	2294      	movs	r2, #148	; 0x94
 8010dcc:	589b      	ldr	r3, [r3, r2]
 8010dce:	491f      	ldr	r1, [pc, #124]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010dd0:	22f1      	movs	r2, #241	; 0xf1
 8010dd2:	0092      	lsls	r2, r2, #2
 8010dd4:	588a      	ldr	r2, [r1, r2]
 8010dd6:	1899      	adds	r1, r3, r2
 8010dd8:	4a1c      	ldr	r2, [pc, #112]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010dda:	23ec      	movs	r3, #236	; 0xec
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010de0:	4b1a      	ldr	r3, [pc, #104]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010de2:	4a1b      	ldr	r2, [pc, #108]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010de4:	589b      	ldr	r3, [r3, r2]
 8010de6:	2298      	movs	r2, #152	; 0x98
 8010de8:	589b      	ldr	r3, [r3, r2]
 8010dea:	4918      	ldr	r1, [pc, #96]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010dec:	22f6      	movs	r2, #246	; 0xf6
 8010dee:	0092      	lsls	r2, r2, #2
 8010df0:	588a      	ldr	r2, [r1, r2]
 8010df2:	1899      	adds	r1, r3, r2
 8010df4:	4a15      	ldr	r2, [pc, #84]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010df6:	23ed      	movs	r3, #237	; 0xed
 8010df8:	009b      	lsls	r3, r3, #2
 8010dfa:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8010dfc:	4b13      	ldr	r3, [pc, #76]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010dfe:	4a14      	ldr	r2, [pc, #80]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010e00:	589a      	ldr	r2, [r3, r2]
 8010e02:	23b2      	movs	r3, #178	; 0xb2
 8010e04:	005b      	lsls	r3, r3, #1
 8010e06:	5cd3      	ldrb	r3, [r2, r3]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d11b      	bne.n	8010e44 <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010e0c:	4b0f      	ldr	r3, [pc, #60]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010e0e:	4a10      	ldr	r2, [pc, #64]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010e10:	589b      	ldr	r3, [r3, r2]
 8010e12:	229c      	movs	r2, #156	; 0x9c
 8010e14:	589b      	ldr	r3, [r3, r2]
 8010e16:	490d      	ldr	r1, [pc, #52]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010e18:	22f1      	movs	r2, #241	; 0xf1
 8010e1a:	0092      	lsls	r2, r2, #2
 8010e1c:	588a      	ldr	r2, [r1, r2]
 8010e1e:	1899      	adds	r1, r3, r2
 8010e20:	4a0a      	ldr	r2, [pc, #40]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010e22:	23ec      	movs	r3, #236	; 0xec
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010e28:	4b08      	ldr	r3, [pc, #32]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010e2a:	4a09      	ldr	r2, [pc, #36]	; (8010e50 <ComputeRxWindowParameters+0x11c>)
 8010e2c:	589b      	ldr	r3, [r3, r2]
 8010e2e:	22a0      	movs	r2, #160	; 0xa0
 8010e30:	589b      	ldr	r3, [r3, r2]
 8010e32:	4906      	ldr	r1, [pc, #24]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010e34:	22f6      	movs	r2, #246	; 0xf6
 8010e36:	0092      	lsls	r2, r2, #2
 8010e38:	588a      	ldr	r2, [r1, r2]
 8010e3a:	1899      	adds	r1, r3, r2
 8010e3c:	4a03      	ldr	r2, [pc, #12]	; (8010e4c <ComputeRxWindowParameters+0x118>)
 8010e3e:	23ed      	movs	r3, #237	; 0xed
 8010e40:	009b      	lsls	r3, r3, #2
 8010e42:	50d1      	str	r1, [r2, r3]
    }
}
 8010e44:	46c0      	nop			; (mov r8, r8)
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bdb0      	pop	{r4, r5, r7, pc}
 8010e4a:	46c0      	nop			; (mov r8, r8)
 8010e4c:	20000bb0 	.word	0x20000bb0
 8010e50:	00000484 	.word	0x00000484
 8010e54:	20000f68 	.word	0x20000f68
 8010e58:	20000f7c 	.word	0x20000f7c

08010e5c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8010e66:	4b15      	ldr	r3, [pc, #84]	; (8010ebc <VerifyTxFrame+0x60>)
 8010e68:	4a15      	ldr	r2, [pc, #84]	; (8010ec0 <VerifyTxFrame+0x64>)
 8010e6a:	589a      	ldr	r2, [r3, r2]
 8010e6c:	23b2      	movs	r3, #178	; 0xb2
 8010e6e:	005b      	lsls	r3, r3, #1
 8010e70:	5cd3      	ldrb	r3, [r2, r3]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d01d      	beq.n	8010eb2 <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010e76:	1d3b      	adds	r3, r7, #4
 8010e78:	0018      	movs	r0, r3
 8010e7a:	f003 fa07 	bl	801428c <LoRaMacCommandsGetSizeSerializedCmds>
 8010e7e:	1e03      	subs	r3, r0, #0
 8010e80:	d001      	beq.n	8010e86 <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e82:	2313      	movs	r3, #19
 8010e84:	e016      	b.n	8010eb4 <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8010e86:	4b0d      	ldr	r3, [pc, #52]	; (8010ebc <VerifyTxFrame+0x60>)
 8010e88:	4a0e      	ldr	r2, [pc, #56]	; (8010ec4 <VerifyTxFrame+0x68>)
 8010e8a:	5c98      	ldrb	r0, [r3, r2]
 8010e8c:	4b0b      	ldr	r3, [pc, #44]	; (8010ebc <VerifyTxFrame+0x60>)
 8010e8e:	4a0c      	ldr	r2, [pc, #48]	; (8010ec0 <VerifyTxFrame+0x64>)
 8010e90:	589b      	ldr	r3, [r3, r2]
 8010e92:	2285      	movs	r2, #133	; 0x85
 8010e94:	569b      	ldrsb	r3, [r3, r2]
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	b2d2      	uxtb	r2, r2
 8010e9a:	0019      	movs	r1, r3
 8010e9c:	f7fe ffb2 	bl	800fe04 <ValidatePayloadLength>
 8010ea0:	0003      	movs	r3, r0
 8010ea2:	001a      	movs	r2, r3
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	4053      	eors	r3, r2
 8010ea8:	b2db      	uxtb	r3, r3
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d001      	beq.n	8010eb2 <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010eae:	2308      	movs	r3, #8
 8010eb0:	e000      	b.n	8010eb4 <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8010eb2:	2300      	movs	r3, #0
}
 8010eb4:	0018      	movs	r0, r3
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	b002      	add	sp, #8
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	20000bb0 	.word	0x20000bb0
 8010ec0:	00000484 	.word	0x00000484
 8010ec4:	00000237 	.word	0x00000237

08010ec8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010ec8:	b590      	push	{r4, r7, lr}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010ece:	4a1d      	ldr	r2, [pc, #116]	; (8010f44 <SerializeTxFrame+0x7c>)
 8010ed0:	2382      	movs	r3, #130	; 0x82
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	5cd3      	ldrb	r3, [r2, r3]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d002      	beq.n	8010ee0 <SerializeTxFrame+0x18>
 8010eda:	2b04      	cmp	r3, #4
 8010edc:	d015      	beq.n	8010f0a <SerializeTxFrame+0x42>
 8010ede:	e029      	b.n	8010f34 <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010ee0:	1dfc      	adds	r4, r7, #7
 8010ee2:	4b19      	ldr	r3, [pc, #100]	; (8010f48 <SerializeTxFrame+0x80>)
 8010ee4:	0018      	movs	r0, r3
 8010ee6:	f005 f9d5 	bl	8016294 <LoRaMacSerializerJoinRequest>
 8010eea:	0003      	movs	r3, r0
 8010eec:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010eee:	1dfb      	adds	r3, r7, #7
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d001      	beq.n	8010efa <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ef6:	2311      	movs	r3, #17
 8010ef8:	e01f      	b.n	8010f3a <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010efa:	4a12      	ldr	r2, [pc, #72]	; (8010f44 <SerializeTxFrame+0x7c>)
 8010efc:	2386      	movs	r3, #134	; 0x86
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	5cd3      	ldrb	r3, [r2, r3]
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	4b0f      	ldr	r3, [pc, #60]	; (8010f44 <SerializeTxFrame+0x7c>)
 8010f06:	801a      	strh	r2, [r3, #0]
            break;
 8010f08:	e016      	b.n	8010f38 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010f0a:	1dfc      	adds	r4, r7, #7
 8010f0c:	4b0e      	ldr	r3, [pc, #56]	; (8010f48 <SerializeTxFrame+0x80>)
 8010f0e:	0018      	movs	r0, r3
 8010f10:	f005 fa5b 	bl	80163ca <LoRaMacSerializerData>
 8010f14:	0003      	movs	r3, r0
 8010f16:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010f18:	1dfb      	adds	r3, r7, #7
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d001      	beq.n	8010f24 <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f20:	2311      	movs	r3, #17
 8010f22:	e00a      	b.n	8010f3a <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010f24:	4a07      	ldr	r2, [pc, #28]	; (8010f44 <SerializeTxFrame+0x7c>)
 8010f26:	2386      	movs	r3, #134	; 0x86
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	5cd3      	ldrb	r3, [r2, r3]
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	4b05      	ldr	r3, [pc, #20]	; (8010f44 <SerializeTxFrame+0x7c>)
 8010f30:	801a      	strh	r2, [r3, #0]
            break;
 8010f32:	e001      	b.n	8010f38 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f34:	2303      	movs	r3, #3
 8010f36:	e000      	b.n	8010f3a <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	0018      	movs	r0, r3
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	b003      	add	sp, #12
 8010f40:	bd90      	pop	{r4, r7, pc}
 8010f42:	46c0      	nop			; (mov r8, r8)
 8010f44:	20000bb0 	.word	0x20000bb0
 8010f48:	20000cb8 	.word	0x20000cb8

08010f4c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f4e:	b091      	sub	sp, #68	; 0x44
 8010f50:	af02      	add	r7, sp, #8
 8010f52:	0002      	movs	r2, r0
 8010f54:	230f      	movs	r3, #15
 8010f56:	18fb      	adds	r3, r7, r3
 8010f58:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f5a:	2537      	movs	r5, #55	; 0x37
 8010f5c:	197b      	adds	r3, r7, r5
 8010f5e:	2203      	movs	r2, #3
 8010f60:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010f62:	197c      	adds	r4, r7, r5
 8010f64:	f7ff fec2 	bl	8010cec <CheckForClassBCollision>
 8010f68:	0003      	movs	r3, r0
 8010f6a:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8010f6c:	002a      	movs	r2, r5
 8010f6e:	18bb      	adds	r3, r7, r2
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d002      	beq.n	8010f7c <ScheduleTx+0x30>
    {
        return status;
 8010f76:	18bb      	adds	r3, r7, r2
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	e0c3      	b.n	8011104 <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 8010f7c:	f000 f940 	bl	8011200 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010f80:	2537      	movs	r5, #55	; 0x37
 8010f82:	197c      	adds	r4, r7, r5
 8010f84:	f7ff ffa0 	bl	8010ec8 <SerializeTxFrame>
 8010f88:	0003      	movs	r3, r0
 8010f8a:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8010f8c:	002a      	movs	r2, r5
 8010f8e:	18bb      	adds	r3, r7, r2
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d002      	beq.n	8010f9c <ScheduleTx+0x50>
    {
        return status;
 8010f96:	18bb      	adds	r3, r7, r2
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	e0b3      	b.n	8011104 <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8010f9c:	4b5b      	ldr	r3, [pc, #364]	; (801110c <ScheduleTx+0x1c0>)
 8010f9e:	4a5c      	ldr	r2, [pc, #368]	; (8011110 <ScheduleTx+0x1c4>)
 8010fa0:	589a      	ldr	r2, [r3, r2]
 8010fa2:	23aa      	movs	r3, #170	; 0xaa
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	58d2      	ldr	r2, [r2, r3]
 8010fa8:	2414      	movs	r4, #20
 8010faa:	193b      	adds	r3, r7, r4
 8010fac:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010fae:	4b57      	ldr	r3, [pc, #348]	; (801110c <ScheduleTx+0x1c0>)
 8010fb0:	4a57      	ldr	r2, [pc, #348]	; (8011110 <ScheduleTx+0x1c4>)
 8010fb2:	589b      	ldr	r3, [r3, r2]
 8010fb4:	2285      	movs	r2, #133	; 0x85
 8010fb6:	569a      	ldrsb	r2, [r3, r2]
 8010fb8:	193b      	adds	r3, r7, r4
 8010fba:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8010fbc:	4b53      	ldr	r3, [pc, #332]	; (801110c <ScheduleTx+0x1c0>)
 8010fbe:	4a54      	ldr	r2, [pc, #336]	; (8011110 <ScheduleTx+0x1c4>)
 8010fc0:	589b      	ldr	r3, [r3, r2]
 8010fc2:	22c9      	movs	r2, #201	; 0xc9
 8010fc4:	5c9a      	ldrb	r2, [r3, r2]
 8010fc6:	193b      	adds	r3, r7, r4
 8010fc8:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8010fca:	232c      	movs	r3, #44	; 0x2c
 8010fcc:	18fb      	adds	r3, r7, r3
 8010fce:	0018      	movs	r0, r3
 8010fd0:	f00b fa52 	bl	801c478 <SysTimeGetMcuTime>
 8010fd4:	4b4d      	ldr	r3, [pc, #308]	; (801110c <ScheduleTx+0x1c0>)
 8010fd6:	4a4e      	ldr	r2, [pc, #312]	; (8011110 <ScheduleTx+0x1c4>)
 8010fd8:	5898      	ldr	r0, [r3, r2]
 8010fda:	193d      	adds	r5, r7, r4
 8010fdc:	003e      	movs	r6, r7
 8010fde:	23ac      	movs	r3, #172	; 0xac
 8010fe0:	0059      	lsls	r1, r3, #1
 8010fe2:	232c      	movs	r3, #44	; 0x2c
 8010fe4:	18fa      	adds	r2, r7, r3
 8010fe6:	2404      	movs	r4, #4
 8010fe8:	1843      	adds	r3, r0, r1
 8010fea:	191c      	adds	r4, r3, r4
 8010fec:	466b      	mov	r3, sp
 8010fee:	6824      	ldr	r4, [r4, #0]
 8010ff0:	601c      	str	r4, [r3, #0]
 8010ff2:	5843      	ldr	r3, [r0, r1]
 8010ff4:	6811      	ldr	r1, [r2, #0]
 8010ff6:	6852      	ldr	r2, [r2, #4]
 8010ff8:	0030      	movs	r0, r6
 8010ffa:	f00b f975 	bl	801c2e8 <SysTimeSub>
 8010ffe:	003a      	movs	r2, r7
 8011000:	002b      	movs	r3, r5
 8011002:	330c      	adds	r3, #12
 8011004:	ca21      	ldmia	r2!, {r0, r5}
 8011006:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011008:	4b40      	ldr	r3, [pc, #256]	; (801110c <ScheduleTx+0x1c0>)
 801100a:	4a41      	ldr	r2, [pc, #260]	; (8011110 <ScheduleTx+0x1c4>)
 801100c:	589a      	ldr	r2, [r3, r2]
 801100e:	23a8      	movs	r3, #168	; 0xa8
 8011010:	005b      	lsls	r3, r3, #1
 8011012:	58d2      	ldr	r2, [r2, r3]
 8011014:	2114      	movs	r1, #20
 8011016:	187b      	adds	r3, r7, r1
 8011018:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 801101a:	187b      	adds	r3, r7, r1
 801101c:	2200      	movs	r2, #0
 801101e:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011020:	187b      	adds	r3, r7, r1
 8011022:	2201      	movs	r2, #1
 8011024:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011026:	4b39      	ldr	r3, [pc, #228]	; (801110c <ScheduleTx+0x1c0>)
 8011028:	881a      	ldrh	r2, [r3, #0]
 801102a:	187b      	adds	r3, r7, r1
 801102c:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 801102e:	4b37      	ldr	r3, [pc, #220]	; (801110c <ScheduleTx+0x1c0>)
 8011030:	4a37      	ldr	r2, [pc, #220]	; (8011110 <ScheduleTx+0x1c4>)
 8011032:	589a      	ldr	r2, [r3, r2]
 8011034:	23b2      	movs	r3, #178	; 0xb2
 8011036:	005b      	lsls	r3, r3, #1
 8011038:	5cd3      	ldrb	r3, [r2, r3]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d105      	bne.n	801104a <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 801103e:	187b      	adds	r3, r7, r1
 8011040:	2201      	movs	r2, #1
 8011042:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 8011044:	187b      	adds	r3, r7, r1
 8011046:	2200      	movs	r2, #0
 8011048:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 801104a:	4b30      	ldr	r3, [pc, #192]	; (801110c <ScheduleTx+0x1c0>)
 801104c:	4a30      	ldr	r2, [pc, #192]	; (8011110 <ScheduleTx+0x1c4>)
 801104e:	589b      	ldr	r3, [r3, r2]
 8011050:	7818      	ldrb	r0, [r3, #0]
 8011052:	4b2e      	ldr	r3, [pc, #184]	; (801110c <ScheduleTx+0x1c0>)
 8011054:	4a2e      	ldr	r2, [pc, #184]	; (8011110 <ScheduleTx+0x1c4>)
 8011056:	589b      	ldr	r3, [r3, r2]
 8011058:	3355      	adds	r3, #85	; 0x55
 801105a:	33ff      	adds	r3, #255	; 0xff
 801105c:	2637      	movs	r6, #55	; 0x37
 801105e:	19bc      	adds	r4, r7, r6
 8011060:	4d2c      	ldr	r5, [pc, #176]	; (8011114 <ScheduleTx+0x1c8>)
 8011062:	4a2d      	ldr	r2, [pc, #180]	; (8011118 <ScheduleTx+0x1cc>)
 8011064:	2114      	movs	r1, #20
 8011066:	1879      	adds	r1, r7, r1
 8011068:	9300      	str	r3, [sp, #0]
 801106a:	002b      	movs	r3, r5
 801106c:	f005 fc89 	bl	8016982 <RegionNextChannel>
 8011070:	0003      	movs	r3, r0
 8011072:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8011074:	19bb      	adds	r3, r7, r6
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d02c      	beq.n	80110d6 <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 801107c:	19bb      	adds	r3, r7, r6
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	2b0b      	cmp	r3, #11
 8011082:	d124      	bne.n	80110ce <ScheduleTx+0x182>
 8011084:	230f      	movs	r3, #15
 8011086:	18fb      	adds	r3, r7, r3
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d01f      	beq.n	80110ce <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801108e:	4a1f      	ldr	r2, [pc, #124]	; (801110c <ScheduleTx+0x1c0>)
 8011090:	2391      	movs	r3, #145	; 0x91
 8011092:	00db      	lsls	r3, r3, #3
 8011094:	58d3      	ldr	r3, [r2, r3]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d017      	beq.n	80110ca <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 801109a:	4a1c      	ldr	r2, [pc, #112]	; (801110c <ScheduleTx+0x1c0>)
 801109c:	23d0      	movs	r3, #208	; 0xd0
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	58d3      	ldr	r3, [r2, r3]
 80110a2:	2220      	movs	r2, #32
 80110a4:	431a      	orrs	r2, r3
 80110a6:	0011      	movs	r1, r2
 80110a8:	4a18      	ldr	r2, [pc, #96]	; (801110c <ScheduleTx+0x1c0>)
 80110aa:	23d0      	movs	r3, #208	; 0xd0
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80110b0:	4a16      	ldr	r2, [pc, #88]	; (801110c <ScheduleTx+0x1c0>)
 80110b2:	2391      	movs	r3, #145	; 0x91
 80110b4:	00db      	lsls	r3, r3, #3
 80110b6:	58d2      	ldr	r2, [r2, r3]
 80110b8:	4b18      	ldr	r3, [pc, #96]	; (801111c <ScheduleTx+0x1d0>)
 80110ba:	0011      	movs	r1, r2
 80110bc:	0018      	movs	r0, r3
 80110be:	f00b fb33 	bl	801c728 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80110c2:	4b16      	ldr	r3, [pc, #88]	; (801111c <ScheduleTx+0x1d0>)
 80110c4:	0018      	movs	r0, r3
 80110c6:	f00b fa3f 	bl	801c548 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 80110ca:	2300      	movs	r3, #0
 80110cc:	e01a      	b.n	8011104 <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80110ce:	2337      	movs	r3, #55	; 0x37
 80110d0:	18fb      	adds	r3, r7, r3
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	e016      	b.n	8011104 <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80110d6:	f7ff fe2d 	bl	8010d34 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80110da:	2537      	movs	r5, #55	; 0x37
 80110dc:	197c      	adds	r4, r7, r5
 80110de:	f7ff febd 	bl	8010e5c <VerifyTxFrame>
 80110e2:	0003      	movs	r3, r0
 80110e4:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80110e6:	002a      	movs	r2, r5
 80110e8:	18bb      	adds	r3, r7, r2
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d002      	beq.n	80110f6 <ScheduleTx+0x1aa>
    {
        return status;
 80110f0:	18bb      	adds	r3, r7, r2
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	e006      	b.n	8011104 <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80110f6:	4b05      	ldr	r3, [pc, #20]	; (801110c <ScheduleTx+0x1c0>)
 80110f8:	4a09      	ldr	r2, [pc, #36]	; (8011120 <ScheduleTx+0x1d4>)
 80110fa:	5c9b      	ldrb	r3, [r3, r2]
 80110fc:	0018      	movs	r0, r3
 80110fe:	f000 fb99 	bl	8011834 <SendFrameOnChannel>
 8011102:	0003      	movs	r3, r0
}
 8011104:	0018      	movs	r0, r3
 8011106:	46bd      	mov	sp, r7
 8011108:	b00f      	add	sp, #60	; 0x3c
 801110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801110c:	20000bb0 	.word	0x20000bb0
 8011110:	00000484 	.word	0x00000484
 8011114:	20001038 	.word	0x20001038
 8011118:	20000fc5 	.word	0x20000fc5
 801111c:	20000f18 	.word	0x20000f18
 8011120:	00000415 	.word	0x00000415

08011124 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011126:	b085      	sub	sp, #20
 8011128:	af00      	add	r7, sp, #0
 801112a:	0002      	movs	r2, r0
 801112c:	1dfb      	adds	r3, r7, #7
 801112e:	701a      	strb	r2, [r3, #0]
 8011130:	1dbb      	adds	r3, r7, #6
 8011132:	1c0a      	adds	r2, r1, #0
 8011134:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011136:	230f      	movs	r3, #15
 8011138:	18fb      	adds	r3, r7, r3
 801113a:	2213      	movs	r2, #19
 801113c:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 801113e:	2300      	movs	r3, #0
 8011140:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011142:	4a2c      	ldr	r2, [pc, #176]	; (80111f4 <SecureFrame+0xd0>)
 8011144:	2382      	movs	r3, #130	; 0x82
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	5cd3      	ldrb	r3, [r2, r3]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d002      	beq.n	8011154 <SecureFrame+0x30>
 801114e:	2b04      	cmp	r3, #4
 8011150:	d016      	beq.n	8011180 <SecureFrame+0x5c>
 8011152:	e047      	b.n	80111e4 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011154:	250f      	movs	r5, #15
 8011156:	197c      	adds	r4, r7, r5
 8011158:	4b27      	ldr	r3, [pc, #156]	; (80111f8 <SecureFrame+0xd4>)
 801115a:	0018      	movs	r0, r3
 801115c:	f004 fad8 	bl	8015710 <LoRaMacCryptoPrepareJoinRequest>
 8011160:	0003      	movs	r3, r0
 8011162:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011164:	197b      	adds	r3, r7, r5
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d001      	beq.n	8011170 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801116c:	2311      	movs	r3, #17
 801116e:	e03c      	b.n	80111ea <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011170:	4a20      	ldr	r2, [pc, #128]	; (80111f4 <SecureFrame+0xd0>)
 8011172:	2386      	movs	r3, #134	; 0x86
 8011174:	005b      	lsls	r3, r3, #1
 8011176:	5cd3      	ldrb	r3, [r2, r3]
 8011178:	b29a      	uxth	r2, r3
 801117a:	4b1e      	ldr	r3, [pc, #120]	; (80111f4 <SecureFrame+0xd0>)
 801117c:	801a      	strh	r2, [r3, #0]
            break;
 801117e:	e033      	b.n	80111e8 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011180:	2308      	movs	r3, #8
 8011182:	18fb      	adds	r3, r7, r3
 8011184:	0018      	movs	r0, r3
 8011186:	f004 f9dd 	bl	8015544 <LoRaMacCryptoGetFCntUp>
 801118a:	1e03      	subs	r3, r0, #0
 801118c:	d001      	beq.n	8011192 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801118e:	2312      	movs	r3, #18
 8011190:	e02b      	b.n	80111ea <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011192:	4a18      	ldr	r2, [pc, #96]	; (80111f4 <SecureFrame+0xd0>)
 8011194:	2382      	movs	r3, #130	; 0x82
 8011196:	00db      	lsls	r3, r3, #3
 8011198:	5cd3      	ldrb	r3, [r2, r3]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d104      	bne.n	80111a8 <SecureFrame+0x84>
 801119e:	4b15      	ldr	r3, [pc, #84]	; (80111f4 <SecureFrame+0xd0>)
 80111a0:	4a16      	ldr	r2, [pc, #88]	; (80111fc <SecureFrame+0xd8>)
 80111a2:	5c9b      	ldrb	r3, [r3, r2]
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d902      	bls.n	80111ae <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	3b01      	subs	r3, #1
 80111ac:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80111ae:	68b8      	ldr	r0, [r7, #8]
 80111b0:	260f      	movs	r6, #15
 80111b2:	19bc      	adds	r4, r7, r6
 80111b4:	4d10      	ldr	r5, [pc, #64]	; (80111f8 <SecureFrame+0xd4>)
 80111b6:	1dbb      	adds	r3, r7, #6
 80111b8:	781a      	ldrb	r2, [r3, #0]
 80111ba:	1dfb      	adds	r3, r7, #7
 80111bc:	7819      	ldrb	r1, [r3, #0]
 80111be:	002b      	movs	r3, r5
 80111c0:	f004 fbfc 	bl	80159bc <LoRaMacCryptoSecureMessage>
 80111c4:	0003      	movs	r3, r0
 80111c6:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80111c8:	19bb      	adds	r3, r7, r6
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d001      	beq.n	80111d4 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80111d0:	2311      	movs	r3, #17
 80111d2:	e00a      	b.n	80111ea <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80111d4:	4a07      	ldr	r2, [pc, #28]	; (80111f4 <SecureFrame+0xd0>)
 80111d6:	2386      	movs	r3, #134	; 0x86
 80111d8:	005b      	lsls	r3, r3, #1
 80111da:	5cd3      	ldrb	r3, [r2, r3]
 80111dc:	b29a      	uxth	r2, r3
 80111de:	4b05      	ldr	r3, [pc, #20]	; (80111f4 <SecureFrame+0xd0>)
 80111e0:	801a      	strh	r2, [r3, #0]
            break;
 80111e2:	e001      	b.n	80111e8 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80111e4:	2303      	movs	r3, #3
 80111e6:	e000      	b.n	80111ea <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 80111e8:	2300      	movs	r3, #0
}
 80111ea:	0018      	movs	r0, r3
 80111ec:	46bd      	mov	sp, r7
 80111ee:	b005      	add	sp, #20
 80111f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111f2:	46c0      	nop			; (mov r8, r8)
 80111f4:	20000bb0 	.word	0x20000bb0
 80111f8:	20000cb8 	.word	0x20000cb8
 80111fc:	00000412 	.word	0x00000412

08011200 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011200:	b580      	push	{r7, lr}
 8011202:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8011204:	4b0e      	ldr	r3, [pc, #56]	; (8011240 <CalculateBackOff+0x40>)
 8011206:	4a0f      	ldr	r2, [pc, #60]	; (8011244 <CalculateBackOff+0x44>)
 8011208:	589a      	ldr	r2, [r3, r2]
 801120a:	23aa      	movs	r3, #170	; 0xaa
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	58d3      	ldr	r3, [r2, r3]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d111      	bne.n	8011238 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011214:	4b0a      	ldr	r3, [pc, #40]	; (8011240 <CalculateBackOff+0x40>)
 8011216:	4a0b      	ldr	r2, [pc, #44]	; (8011244 <CalculateBackOff+0x44>)
 8011218:	589a      	ldr	r2, [r3, r2]
 801121a:	23a6      	movs	r3, #166	; 0xa6
 801121c:	005b      	lsls	r3, r3, #1
 801121e:	5ad3      	ldrh	r3, [r2, r3]
 8011220:	3b01      	subs	r3, #1
 8011222:	4907      	ldr	r1, [pc, #28]	; (8011240 <CalculateBackOff+0x40>)
 8011224:	2283      	movs	r2, #131	; 0x83
 8011226:	00d2      	lsls	r2, r2, #3
 8011228:	5889      	ldr	r1, [r1, r2]
 801122a:	4a05      	ldr	r2, [pc, #20]	; (8011240 <CalculateBackOff+0x40>)
 801122c:	4805      	ldr	r0, [pc, #20]	; (8011244 <CalculateBackOff+0x44>)
 801122e:	5812      	ldr	r2, [r2, r0]
 8011230:	4359      	muls	r1, r3
 8011232:	23aa      	movs	r3, #170	; 0xaa
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	50d1      	str	r1, [r2, r3]
    }
}
 8011238:	46c0      	nop			; (mov r8, r8)
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
 801123e:	46c0      	nop			; (mov r8, r8)
 8011240:	20000bb0 	.word	0x20000bb0
 8011244:	00000484 	.word	0x00000484

08011248 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	1d3b      	adds	r3, r7, #4
 8011250:	7019      	strb	r1, [r3, #0]
 8011252:	0011      	movs	r1, r2
 8011254:	1dfb      	adds	r3, r7, #7
 8011256:	1c02      	adds	r2, r0, #0
 8011258:	701a      	strb	r2, [r3, #0]
 801125a:	1dbb      	adds	r3, r7, #6
 801125c:	1c0a      	adds	r2, r1, #0
 801125e:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011260:	1dfb      	adds	r3, r7, #7
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d003      	beq.n	8011270 <RemoveMacCommands+0x28>
 8011268:	1dfb      	adds	r3, r7, #7
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	2b01      	cmp	r3, #1
 801126e:	d10f      	bne.n	8011290 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011270:	1dbb      	adds	r3, r7, #6
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	2b01      	cmp	r3, #1
 8011276:	d109      	bne.n	801128c <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011278:	1d3b      	adds	r3, r7, #4
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	2220      	movs	r2, #32
 801127e:	4013      	ands	r3, r2
 8011280:	b2db      	uxtb	r3, r3
 8011282:	2b00      	cmp	r3, #0
 8011284:	d004      	beq.n	8011290 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011286:	f002 ffdd 	bl	8014244 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801128a:	e001      	b.n	8011290 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801128c:	f002 ffda 	bl	8014244 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011290:	46c0      	nop			; (mov r8, r8)
 8011292:	46bd      	mov	sp, r7
 8011294:	b002      	add	sp, #8
 8011296:	bd80      	pop	{r7, pc}

08011298 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011298:	b590      	push	{r4, r7, lr}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 801129e:	4b72      	ldr	r3, [pc, #456]	; (8011468 <ResetMacParameters+0x1d0>)
 80112a0:	4a72      	ldr	r2, [pc, #456]	; (801146c <ResetMacParameters+0x1d4>)
 80112a2:	589a      	ldr	r2, [r3, r2]
 80112a4:	23b2      	movs	r3, #178	; 0xb2
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	2100      	movs	r1, #0
 80112aa:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 80112ac:	4b6e      	ldr	r3, [pc, #440]	; (8011468 <ResetMacParameters+0x1d0>)
 80112ae:	4a6f      	ldr	r2, [pc, #444]	; (801146c <ResetMacParameters+0x1d4>)
 80112b0:	589b      	ldr	r3, [r3, r2]
 80112b2:	2280      	movs	r2, #128	; 0x80
 80112b4:	2100      	movs	r1, #0
 80112b6:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 80112b8:	4a6b      	ldr	r2, [pc, #428]	; (8011468 <ResetMacParameters+0x1d0>)
 80112ba:	2382      	movs	r3, #130	; 0x82
 80112bc:	00db      	lsls	r3, r3, #3
 80112be:	2100      	movs	r1, #0
 80112c0:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 80112c2:	4b69      	ldr	r3, [pc, #420]	; (8011468 <ResetMacParameters+0x1d0>)
 80112c4:	4a6a      	ldr	r2, [pc, #424]	; (8011470 <ResetMacParameters+0x1d8>)
 80112c6:	2101      	movs	r1, #1
 80112c8:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 80112ca:	4b67      	ldr	r3, [pc, #412]	; (8011468 <ResetMacParameters+0x1d0>)
 80112cc:	4a69      	ldr	r2, [pc, #420]	; (8011474 <ResetMacParameters+0x1dc>)
 80112ce:	2101      	movs	r1, #1
 80112d0:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 80112d2:	4b65      	ldr	r3, [pc, #404]	; (8011468 <ResetMacParameters+0x1d0>)
 80112d4:	4a68      	ldr	r2, [pc, #416]	; (8011478 <ResetMacParameters+0x1e0>)
 80112d6:	2100      	movs	r1, #0
 80112d8:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 80112da:	4b63      	ldr	r3, [pc, #396]	; (8011468 <ResetMacParameters+0x1d0>)
 80112dc:	4a63      	ldr	r2, [pc, #396]	; (801146c <ResetMacParameters+0x1d4>)
 80112de:	589b      	ldr	r3, [r3, r2]
 80112e0:	22c8      	movs	r2, #200	; 0xc8
 80112e2:	2100      	movs	r1, #0
 80112e4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 80112e6:	4b60      	ldr	r3, [pc, #384]	; (8011468 <ResetMacParameters+0x1d0>)
 80112e8:	4a60      	ldr	r2, [pc, #384]	; (801146c <ResetMacParameters+0x1d4>)
 80112ea:	589a      	ldr	r2, [r3, r2]
 80112ec:	23a6      	movs	r3, #166	; 0xa6
 80112ee:	005b      	lsls	r3, r3, #1
 80112f0:	2101      	movs	r1, #1
 80112f2:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80112f4:	4b5c      	ldr	r3, [pc, #368]	; (8011468 <ResetMacParameters+0x1d0>)
 80112f6:	4a5d      	ldr	r2, [pc, #372]	; (801146c <ResetMacParameters+0x1d4>)
 80112f8:	589a      	ldr	r2, [r3, r2]
 80112fa:	4b5b      	ldr	r3, [pc, #364]	; (8011468 <ResetMacParameters+0x1d0>)
 80112fc:	495b      	ldr	r1, [pc, #364]	; (801146c <ResetMacParameters+0x1d4>)
 80112fe:	585b      	ldr	r3, [r3, r1]
 8011300:	2104      	movs	r1, #4
 8011302:	5651      	ldrsb	r1, [r2, r1]
 8011304:	2284      	movs	r2, #132	; 0x84
 8011306:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011308:	4b57      	ldr	r3, [pc, #348]	; (8011468 <ResetMacParameters+0x1d0>)
 801130a:	4a58      	ldr	r2, [pc, #352]	; (801146c <ResetMacParameters+0x1d4>)
 801130c:	589a      	ldr	r2, [r3, r2]
 801130e:	4b56      	ldr	r3, [pc, #344]	; (8011468 <ResetMacParameters+0x1d0>)
 8011310:	4956      	ldr	r1, [pc, #344]	; (801146c <ResetMacParameters+0x1d4>)
 8011312:	585b      	ldr	r3, [r3, r1]
 8011314:	2105      	movs	r1, #5
 8011316:	5651      	ldrsb	r1, [r2, r1]
 8011318:	2285      	movs	r2, #133	; 0x85
 801131a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 801131c:	4b52      	ldr	r3, [pc, #328]	; (8011468 <ResetMacParameters+0x1d0>)
 801131e:	4a53      	ldr	r2, [pc, #332]	; (801146c <ResetMacParameters+0x1d4>)
 8011320:	589a      	ldr	r2, [r3, r2]
 8011322:	4b51      	ldr	r3, [pc, #324]	; (8011468 <ResetMacParameters+0x1d0>)
 8011324:	4951      	ldr	r1, [pc, #324]	; (801146c <ResetMacParameters+0x1d4>)
 8011326:	585b      	ldr	r3, [r3, r1]
 8011328:	2125      	movs	r1, #37	; 0x25
 801132a:	5c51      	ldrb	r1, [r2, r1]
 801132c:	22a5      	movs	r2, #165	; 0xa5
 801132e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011330:	4b4d      	ldr	r3, [pc, #308]	; (8011468 <ResetMacParameters+0x1d0>)
 8011332:	4a4e      	ldr	r2, [pc, #312]	; (801146c <ResetMacParameters+0x1d4>)
 8011334:	589a      	ldr	r2, [r3, r2]
 8011336:	4b4c      	ldr	r3, [pc, #304]	; (8011468 <ResetMacParameters+0x1d0>)
 8011338:	494c      	ldr	r1, [pc, #304]	; (801146c <ResetMacParameters+0x1d4>)
 801133a:	585b      	ldr	r3, [r3, r1]
 801133c:	21a8      	movs	r1, #168	; 0xa8
 801133e:	185b      	adds	r3, r3, r1
 8011340:	3228      	adds	r2, #40	; 0x28
 8011342:	ca03      	ldmia	r2!, {r0, r1}
 8011344:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8011346:	4b48      	ldr	r3, [pc, #288]	; (8011468 <ResetMacParameters+0x1d0>)
 8011348:	4a48      	ldr	r2, [pc, #288]	; (801146c <ResetMacParameters+0x1d4>)
 801134a:	589a      	ldr	r2, [r3, r2]
 801134c:	4b46      	ldr	r3, [pc, #280]	; (8011468 <ResetMacParameters+0x1d0>)
 801134e:	4947      	ldr	r1, [pc, #284]	; (801146c <ResetMacParameters+0x1d4>)
 8011350:	585b      	ldr	r3, [r3, r1]
 8011352:	21b0      	movs	r1, #176	; 0xb0
 8011354:	185b      	adds	r3, r3, r1
 8011356:	3230      	adds	r2, #48	; 0x30
 8011358:	ca03      	ldmia	r2!, {r0, r1}
 801135a:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 801135c:	4b42      	ldr	r3, [pc, #264]	; (8011468 <ResetMacParameters+0x1d0>)
 801135e:	4a43      	ldr	r2, [pc, #268]	; (801146c <ResetMacParameters+0x1d4>)
 8011360:	589a      	ldr	r2, [r3, r2]
 8011362:	4b41      	ldr	r3, [pc, #260]	; (8011468 <ResetMacParameters+0x1d0>)
 8011364:	4941      	ldr	r1, [pc, #260]	; (801146c <ResetMacParameters+0x1d4>)
 8011366:	585b      	ldr	r3, [r3, r1]
 8011368:	2138      	movs	r1, #56	; 0x38
 801136a:	5c51      	ldrb	r1, [r2, r1]
 801136c:	22b8      	movs	r2, #184	; 0xb8
 801136e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8011370:	4b3d      	ldr	r3, [pc, #244]	; (8011468 <ResetMacParameters+0x1d0>)
 8011372:	4a3e      	ldr	r2, [pc, #248]	; (801146c <ResetMacParameters+0x1d4>)
 8011374:	589a      	ldr	r2, [r3, r2]
 8011376:	4b3c      	ldr	r3, [pc, #240]	; (8011468 <ResetMacParameters+0x1d0>)
 8011378:	493c      	ldr	r1, [pc, #240]	; (801146c <ResetMacParameters+0x1d4>)
 801137a:	585b      	ldr	r3, [r3, r1]
 801137c:	2139      	movs	r1, #57	; 0x39
 801137e:	5c51      	ldrb	r1, [r2, r1]
 8011380:	22b9      	movs	r2, #185	; 0xb9
 8011382:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8011384:	4b38      	ldr	r3, [pc, #224]	; (8011468 <ResetMacParameters+0x1d0>)
 8011386:	4a39      	ldr	r2, [pc, #228]	; (801146c <ResetMacParameters+0x1d4>)
 8011388:	589b      	ldr	r3, [r3, r2]
 801138a:	4a37      	ldr	r2, [pc, #220]	; (8011468 <ResetMacParameters+0x1d0>)
 801138c:	4937      	ldr	r1, [pc, #220]	; (801146c <ResetMacParameters+0x1d4>)
 801138e:	5852      	ldr	r2, [r2, r1]
 8011390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011392:	21bc      	movs	r1, #188	; 0xbc
 8011394:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8011396:	4b34      	ldr	r3, [pc, #208]	; (8011468 <ResetMacParameters+0x1d0>)
 8011398:	4a34      	ldr	r2, [pc, #208]	; (801146c <ResetMacParameters+0x1d4>)
 801139a:	589b      	ldr	r3, [r3, r2]
 801139c:	4a32      	ldr	r2, [pc, #200]	; (8011468 <ResetMacParameters+0x1d0>)
 801139e:	4933      	ldr	r1, [pc, #204]	; (801146c <ResetMacParameters+0x1d4>)
 80113a0:	5852      	ldr	r2, [r2, r1]
 80113a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113a4:	21c0      	movs	r1, #192	; 0xc0
 80113a6:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 80113a8:	4b2f      	ldr	r3, [pc, #188]	; (8011468 <ResetMacParameters+0x1d0>)
 80113aa:	4a34      	ldr	r2, [pc, #208]	; (801147c <ResetMacParameters+0x1e4>)
 80113ac:	2100      	movs	r1, #0
 80113ae:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80113b0:	4b2d      	ldr	r3, [pc, #180]	; (8011468 <ResetMacParameters+0x1d0>)
 80113b2:	4a2e      	ldr	r2, [pc, #184]	; (801146c <ResetMacParameters+0x1d4>)
 80113b4:	589a      	ldr	r2, [r3, r2]
 80113b6:	234c      	movs	r3, #76	; 0x4c
 80113b8:	33ff      	adds	r3, #255	; 0xff
 80113ba:	2100      	movs	r1, #0
 80113bc:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80113be:	003b      	movs	r3, r7
 80113c0:	2201      	movs	r2, #1
 80113c2:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80113c4:	003b      	movs	r3, r7
 80113c6:	2200      	movs	r2, #0
 80113c8:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80113ca:	4b27      	ldr	r3, [pc, #156]	; (8011468 <ResetMacParameters+0x1d0>)
 80113cc:	4a27      	ldr	r2, [pc, #156]	; (801146c <ResetMacParameters+0x1d4>)
 80113ce:	589b      	ldr	r3, [r3, r2]
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	003a      	movs	r2, r7
 80113d4:	0011      	movs	r1, r2
 80113d6:	0018      	movs	r0, r3
 80113d8:	f005 f96e 	bl	80166b8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80113dc:	4b22      	ldr	r3, [pc, #136]	; (8011468 <ResetMacParameters+0x1d0>)
 80113de:	4a28      	ldr	r2, [pc, #160]	; (8011480 <ResetMacParameters+0x1e8>)
 80113e0:	2100      	movs	r1, #0
 80113e2:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80113e4:	4b20      	ldr	r3, [pc, #128]	; (8011468 <ResetMacParameters+0x1d0>)
 80113e6:	4a26      	ldr	r2, [pc, #152]	; (8011480 <ResetMacParameters+0x1e8>)
 80113e8:	5c99      	ldrb	r1, [r3, r2]
 80113ea:	4a1f      	ldr	r2, [pc, #124]	; (8011468 <ResetMacParameters+0x1d0>)
 80113ec:	23f3      	movs	r3, #243	; 0xf3
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80113f2:	4b1d      	ldr	r3, [pc, #116]	; (8011468 <ResetMacParameters+0x1d0>)
 80113f4:	4a1d      	ldr	r2, [pc, #116]	; (801146c <ResetMacParameters+0x1d4>)
 80113f6:	589b      	ldr	r3, [r3, r2]
 80113f8:	22a8      	movs	r2, #168	; 0xa8
 80113fa:	5899      	ldr	r1, [r3, r2]
 80113fc:	4a1a      	ldr	r2, [pc, #104]	; (8011468 <ResetMacParameters+0x1d0>)
 80113fe:	23f4      	movs	r3, #244	; 0xf4
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011404:	4b18      	ldr	r3, [pc, #96]	; (8011468 <ResetMacParameters+0x1d0>)
 8011406:	4a19      	ldr	r2, [pc, #100]	; (801146c <ResetMacParameters+0x1d4>)
 8011408:	589b      	ldr	r3, [r3, r2]
 801140a:	22b9      	movs	r2, #185	; 0xb9
 801140c:	5c99      	ldrb	r1, [r3, r2]
 801140e:	4a16      	ldr	r2, [pc, #88]	; (8011468 <ResetMacParameters+0x1d0>)
 8011410:	23f7      	movs	r3, #247	; 0xf7
 8011412:	009b      	lsls	r3, r3, #2
 8011414:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011416:	4b14      	ldr	r3, [pc, #80]	; (8011468 <ResetMacParameters+0x1d0>)
 8011418:	4a14      	ldr	r2, [pc, #80]	; (801146c <ResetMacParameters+0x1d4>)
 801141a:	589b      	ldr	r3, [r3, r2]
 801141c:	22ca      	movs	r2, #202	; 0xca
 801141e:	5c99      	ldrb	r1, [r3, r2]
 8011420:	4b11      	ldr	r3, [pc, #68]	; (8011468 <ResetMacParameters+0x1d0>)
 8011422:	4a18      	ldr	r2, [pc, #96]	; (8011484 <ResetMacParameters+0x1ec>)
 8011424:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011426:	4b10      	ldr	r3, [pc, #64]	; (8011468 <ResetMacParameters+0x1d0>)
 8011428:	4a17      	ldr	r2, [pc, #92]	; (8011488 <ResetMacParameters+0x1f0>)
 801142a:	2100      	movs	r1, #0
 801142c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801142e:	4b0e      	ldr	r3, [pc, #56]	; (8011468 <ResetMacParameters+0x1d0>)
 8011430:	4a16      	ldr	r2, [pc, #88]	; (801148c <ResetMacParameters+0x1f4>)
 8011432:	2101      	movs	r1, #1
 8011434:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011436:	480c      	ldr	r0, [pc, #48]	; (8011468 <ResetMacParameters+0x1d0>)
 8011438:	23f8      	movs	r3, #248	; 0xf8
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	490a      	ldr	r1, [pc, #40]	; (8011468 <ResetMacParameters+0x1d0>)
 801143e:	22f3      	movs	r2, #243	; 0xf3
 8011440:	0092      	lsls	r2, r2, #2
 8011442:	18c3      	adds	r3, r0, r3
 8011444:	188a      	adds	r2, r1, r2
 8011446:	ca13      	ldmia	r2!, {r0, r1, r4}
 8011448:	c313      	stmia	r3!, {r0, r1, r4}
 801144a:	ca03      	ldmia	r2!, {r0, r1}
 801144c:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801144e:	4b06      	ldr	r3, [pc, #24]	; (8011468 <ResetMacParameters+0x1d0>)
 8011450:	4a0f      	ldr	r2, [pc, #60]	; (8011490 <ResetMacParameters+0x1f8>)
 8011452:	2101      	movs	r1, #1
 8011454:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011456:	4b04      	ldr	r3, [pc, #16]	; (8011468 <ResetMacParameters+0x1d0>)
 8011458:	4a0e      	ldr	r2, [pc, #56]	; (8011494 <ResetMacParameters+0x1fc>)
 801145a:	2102      	movs	r1, #2
 801145c:	5499      	strb	r1, [r3, r2]

}
 801145e:	46c0      	nop			; (mov r8, r8)
 8011460:	46bd      	mov	sp, r7
 8011462:	b003      	add	sp, #12
 8011464:	bd90      	pop	{r4, r7, pc}
 8011466:	46c0      	nop			; (mov r8, r8)
 8011468:	20000bb0 	.word	0x20000bb0
 801146c:	00000484 	.word	0x00000484
 8011470:	00000411 	.word	0x00000411
 8011474:	00000412 	.word	0x00000412
 8011478:	00000413 	.word	0x00000413
 801147c:	00000414 	.word	0x00000414
 8011480:	00000415 	.word	0x00000415
 8011484:	000003dd 	.word	0x000003dd
 8011488:	000003de 	.word	0x000003de
 801148c:	000003df 	.word	0x000003df
 8011490:	000003f2 	.word	0x000003f2
 8011494:	000003f3 	.word	0x000003f3

08011498 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	0018      	movs	r0, r3
 80114a6:	f00b f8c7 	bl	801c638 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80114aa:	4b10      	ldr	r3, [pc, #64]	; (80114ec <RxWindowSetup+0x54>)
 80114ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114ae:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80114b0:	4b0f      	ldr	r3, [pc, #60]	; (80114f0 <RxWindowSetup+0x58>)
 80114b2:	4a10      	ldr	r2, [pc, #64]	; (80114f4 <RxWindowSetup+0x5c>)
 80114b4:	589b      	ldr	r3, [r3, r2]
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	4a0f      	ldr	r2, [pc, #60]	; (80114f8 <RxWindowSetup+0x60>)
 80114ba:	6839      	ldr	r1, [r7, #0]
 80114bc:	0018      	movs	r0, r3
 80114be:	f005 f992 	bl	80167e6 <RegionRxConfig>
 80114c2:	1e03      	subs	r3, r0, #0
 80114c4:	d00e      	beq.n	80114e4 <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80114c6:	4b09      	ldr	r3, [pc, #36]	; (80114ec <RxWindowSetup+0x54>)
 80114c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114ca:	4a09      	ldr	r2, [pc, #36]	; (80114f0 <RxWindowSetup+0x58>)
 80114cc:	4909      	ldr	r1, [pc, #36]	; (80114f4 <RxWindowSetup+0x5c>)
 80114ce:	5852      	ldr	r2, [r2, r1]
 80114d0:	2190      	movs	r1, #144	; 0x90
 80114d2:	5852      	ldr	r2, [r2, r1]
 80114d4:	0010      	movs	r0, r2
 80114d6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	7cd9      	ldrb	r1, [r3, #19]
 80114dc:	4a04      	ldr	r2, [pc, #16]	; (80114f0 <RxWindowSetup+0x58>)
 80114de:	2390      	movs	r3, #144	; 0x90
 80114e0:	00db      	lsls	r3, r3, #3
 80114e2:	54d1      	strb	r1, [r2, r3]
    }
}
 80114e4:	46c0      	nop			; (mov r8, r8)
 80114e6:	46bd      	mov	sp, r7
 80114e8:	b002      	add	sp, #8
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	0801ec78 	.word	0x0801ec78
 80114f0:	20000bb0 	.word	0x20000bb0
 80114f4:	00000484 	.word	0x00000484
 80114f8:	20000fd0 	.word	0x20000fd0

080114fc <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80114fc:	b590      	push	{r4, r7, lr}
 80114fe:	b083      	sub	sp, #12
 8011500:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011502:	4b1d      	ldr	r3, [pc, #116]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 8011504:	4a1d      	ldr	r2, [pc, #116]	; (801157c <OpenContinuousRxCWindow+0x80>)
 8011506:	589b      	ldr	r3, [r3, r2]
 8011508:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 801150a:	4b1b      	ldr	r3, [pc, #108]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 801150c:	4a1b      	ldr	r2, [pc, #108]	; (801157c <OpenContinuousRxCWindow+0x80>)
 801150e:	589b      	ldr	r3, [r3, r2]
 8011510:	22b4      	movs	r2, #180	; 0xb4
 8011512:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011514:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011516:	4b18      	ldr	r3, [pc, #96]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 8011518:	4a18      	ldr	r2, [pc, #96]	; (801157c <OpenContinuousRxCWindow+0x80>)
 801151a:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801151c:	228c      	movs	r2, #140	; 0x8c
 801151e:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011520:	4b15      	ldr	r3, [pc, #84]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 8011522:	4c16      	ldr	r4, [pc, #88]	; (801157c <OpenContinuousRxCWindow+0x80>)
 8011524:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011526:	2488      	movs	r4, #136	; 0x88
 8011528:	591c      	ldr	r4, [r3, r4]
 801152a:	4b15      	ldr	r3, [pc, #84]	; (8011580 <OpenContinuousRxCWindow+0x84>)
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	0023      	movs	r3, r4
 8011530:	f005 f935 	bl	801679e <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011534:	4b10      	ldr	r3, [pc, #64]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 8011536:	4a13      	ldr	r2, [pc, #76]	; (8011584 <OpenContinuousRxCWindow+0x88>)
 8011538:	2102      	movs	r1, #2
 801153a:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801153c:	4b0e      	ldr	r3, [pc, #56]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 801153e:	4a12      	ldr	r2, [pc, #72]	; (8011588 <OpenContinuousRxCWindow+0x8c>)
 8011540:	2101      	movs	r1, #1
 8011542:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011544:	4b0c      	ldr	r3, [pc, #48]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 8011546:	4a0d      	ldr	r2, [pc, #52]	; (801157c <OpenContinuousRxCWindow+0x80>)
 8011548:	589b      	ldr	r3, [r3, r2]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	4a0f      	ldr	r2, [pc, #60]	; (801158c <OpenContinuousRxCWindow+0x90>)
 801154e:	490c      	ldr	r1, [pc, #48]	; (8011580 <OpenContinuousRxCWindow+0x84>)
 8011550:	0018      	movs	r0, r3
 8011552:	f005 f948 	bl	80167e6 <RegionRxConfig>
 8011556:	1e03      	subs	r3, r0, #0
 8011558:	d00a      	beq.n	8011570 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 801155a:	4b0d      	ldr	r3, [pc, #52]	; (8011590 <OpenContinuousRxCWindow+0x94>)
 801155c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801155e:	2000      	movs	r0, #0
 8011560:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011562:	4b05      	ldr	r3, [pc, #20]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 8011564:	4a07      	ldr	r2, [pc, #28]	; (8011584 <OpenContinuousRxCWindow+0x88>)
 8011566:	5c99      	ldrb	r1, [r3, r2]
 8011568:	4a03      	ldr	r2, [pc, #12]	; (8011578 <OpenContinuousRxCWindow+0x7c>)
 801156a:	2390      	movs	r3, #144	; 0x90
 801156c:	00db      	lsls	r3, r3, #3
 801156e:	54d1      	strb	r1, [r2, r3]
    }
}
 8011570:	46c0      	nop			; (mov r8, r8)
 8011572:	46bd      	mov	sp, r7
 8011574:	b001      	add	sp, #4
 8011576:	bd90      	pop	{r4, r7, pc}
 8011578:	20000bb0 	.word	0x20000bb0
 801157c:	00000484 	.word	0x00000484
 8011580:	20000f90 	.word	0x20000f90
 8011584:	000003f3 	.word	0x000003f3
 8011588:	000003f2 	.word	0x000003f2
 801158c:	20000fd0 	.word	0x20000fd0
 8011590:	0801ec78 	.word	0x0801ec78

08011594 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011594:	b590      	push	{r4, r7, lr}
 8011596:	b089      	sub	sp, #36	; 0x24
 8011598:	af00      	add	r7, sp, #0
 801159a:	60f8      	str	r0, [r7, #12]
 801159c:	60b9      	str	r1, [r7, #8]
 801159e:	603b      	str	r3, [r7, #0]
 80115a0:	1dfb      	adds	r3, r7, #7
 80115a2:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 80115a4:	4b9a      	ldr	r3, [pc, #616]	; (8011810 <PrepareFrame+0x27c>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80115aa:	4b99      	ldr	r3, [pc, #612]	; (8011810 <PrepareFrame+0x27c>)
 80115ac:	4a99      	ldr	r2, [pc, #612]	; (8011814 <PrepareFrame+0x280>)
 80115ae:	2100      	movs	r1, #0
 80115b0:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 80115b2:	2300      	movs	r3, #0
 80115b4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80115ba:	231f      	movs	r3, #31
 80115bc:	18fb      	adds	r3, r7, r3
 80115be:	2200      	movs	r2, #0
 80115c0:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d103      	bne.n	80115d0 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 80115c8:	2330      	movs	r3, #48	; 0x30
 80115ca:	18fb      	adds	r3, r7, r3
 80115cc:	2200      	movs	r2, #0
 80115ce:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80115d0:	2430      	movs	r4, #48	; 0x30
 80115d2:	193b      	adds	r3, r7, r4
 80115d4:	881a      	ldrh	r2, [r3, #0]
 80115d6:	6839      	ldr	r1, [r7, #0]
 80115d8:	4b8f      	ldr	r3, [pc, #572]	; (8011818 <PrepareFrame+0x284>)
 80115da:	0018      	movs	r0, r3
 80115dc:	f007 fcb4 	bl	8018f48 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80115e0:	193b      	adds	r3, r7, r4
 80115e2:	881b      	ldrh	r3, [r3, #0]
 80115e4:	b2d9      	uxtb	r1, r3
 80115e6:	4b8a      	ldr	r3, [pc, #552]	; (8011810 <PrepareFrame+0x27c>)
 80115e8:	4a8c      	ldr	r2, [pc, #560]	; (801181c <PrepareFrame+0x288>)
 80115ea:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	781a      	ldrb	r2, [r3, #0]
 80115f0:	4b87      	ldr	r3, [pc, #540]	; (8011810 <PrepareFrame+0x27c>)
 80115f2:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	061b      	lsls	r3, r3, #24
 80115fa:	0f5b      	lsrs	r3, r3, #29
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b07      	cmp	r3, #7
 8011600:	d100      	bne.n	8011604 <PrepareFrame+0x70>
 8011602:	e0e0      	b.n	80117c6 <PrepareFrame+0x232>
 8011604:	dd00      	ble.n	8011608 <PrepareFrame+0x74>
 8011606:	e0f8      	b.n	80117fa <PrepareFrame+0x266>
 8011608:	2b02      	cmp	r3, #2
 801160a:	d006      	beq.n	801161a <PrepareFrame+0x86>
 801160c:	2b04      	cmp	r3, #4
 801160e:	d000      	beq.n	8011612 <PrepareFrame+0x7e>
 8011610:	e0f3      	b.n	80117fa <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011612:	4b7f      	ldr	r3, [pc, #508]	; (8011810 <PrepareFrame+0x27c>)
 8011614:	4a7f      	ldr	r2, [pc, #508]	; (8011814 <PrepareFrame+0x280>)
 8011616:	2101      	movs	r1, #1
 8011618:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801161a:	4a7d      	ldr	r2, [pc, #500]	; (8011810 <PrepareFrame+0x27c>)
 801161c:	2382      	movs	r3, #130	; 0x82
 801161e:	005b      	lsls	r3, r3, #1
 8011620:	2104      	movs	r1, #4
 8011622:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011624:	4a7a      	ldr	r2, [pc, #488]	; (8011810 <PrepareFrame+0x27c>)
 8011626:	2384      	movs	r3, #132	; 0x84
 8011628:	005b      	lsls	r3, r3, #1
 801162a:	497d      	ldr	r1, [pc, #500]	; (8011820 <PrepareFrame+0x28c>)
 801162c:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801162e:	4a78      	ldr	r2, [pc, #480]	; (8011810 <PrepareFrame+0x27c>)
 8011630:	2386      	movs	r3, #134	; 0x86
 8011632:	005b      	lsls	r3, r3, #1
 8011634:	21ff      	movs	r1, #255	; 0xff
 8011636:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	7819      	ldrb	r1, [r3, #0]
 801163c:	4a74      	ldr	r2, [pc, #464]	; (8011810 <PrepareFrame+0x27c>)
 801163e:	230e      	movs	r3, #14
 8011640:	33ff      	adds	r3, #255	; 0xff
 8011642:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011644:	4a72      	ldr	r2, [pc, #456]	; (8011810 <PrepareFrame+0x27c>)
 8011646:	1df9      	adds	r1, r7, #7
 8011648:	2394      	movs	r3, #148	; 0x94
 801164a:	005b      	lsls	r3, r3, #1
 801164c:	7809      	ldrb	r1, [r1, #0]
 801164e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8011650:	4b6f      	ldr	r3, [pc, #444]	; (8011810 <PrepareFrame+0x27c>)
 8011652:	4a74      	ldr	r2, [pc, #464]	; (8011824 <PrepareFrame+0x290>)
 8011654:	589b      	ldr	r3, [r3, r2]
 8011656:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011658:	4a6d      	ldr	r2, [pc, #436]	; (8011810 <PrepareFrame+0x27c>)
 801165a:	2388      	movs	r3, #136	; 0x88
 801165c:	005b      	lsls	r3, r3, #1
 801165e:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	7819      	ldrb	r1, [r3, #0]
 8011664:	4a6a      	ldr	r2, [pc, #424]	; (8011810 <PrepareFrame+0x27c>)
 8011666:	238a      	movs	r3, #138	; 0x8a
 8011668:	005b      	lsls	r3, r3, #1
 801166a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801166c:	4b68      	ldr	r3, [pc, #416]	; (8011810 <PrepareFrame+0x27c>)
 801166e:	4a6b      	ldr	r2, [pc, #428]	; (801181c <PrepareFrame+0x288>)
 8011670:	5c99      	ldrb	r1, [r3, r2]
 8011672:	4a67      	ldr	r2, [pc, #412]	; (8011810 <PrepareFrame+0x27c>)
 8011674:	2398      	movs	r3, #152	; 0x98
 8011676:	005b      	lsls	r3, r3, #1
 8011678:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801167a:	4a65      	ldr	r2, [pc, #404]	; (8011810 <PrepareFrame+0x27c>)
 801167c:	2396      	movs	r3, #150	; 0x96
 801167e:	005b      	lsls	r3, r3, #1
 8011680:	4965      	ldr	r1, [pc, #404]	; (8011818 <PrepareFrame+0x284>)
 8011682:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011684:	2318      	movs	r3, #24
 8011686:	18fb      	adds	r3, r7, r3
 8011688:	0018      	movs	r0, r3
 801168a:	f003 ff5b 	bl	8015544 <LoRaMacCryptoGetFCntUp>
 801168e:	1e03      	subs	r3, r0, #0
 8011690:	d001      	beq.n	8011696 <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011692:	2312      	movs	r3, #18
 8011694:	e0b7      	b.n	8011806 <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	b299      	uxth	r1, r3
 801169a:	4a5d      	ldr	r2, [pc, #372]	; (8011810 <PrepareFrame+0x27c>)
 801169c:	238b      	movs	r3, #139	; 0x8b
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80116a2:	4b5b      	ldr	r3, [pc, #364]	; (8011810 <PrepareFrame+0x27c>)
 80116a4:	4a60      	ldr	r2, [pc, #384]	; (8011828 <PrepareFrame+0x294>)
 80116a6:	2100      	movs	r1, #0
 80116a8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 80116aa:	4a59      	ldr	r2, [pc, #356]	; (8011810 <PrepareFrame+0x27c>)
 80116ac:	2388      	movs	r3, #136	; 0x88
 80116ae:	00db      	lsls	r3, r3, #3
 80116b0:	2100      	movs	r1, #0
 80116b2:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80116b4:	69b9      	ldr	r1, [r7, #24]
 80116b6:	4a56      	ldr	r2, [pc, #344]	; (8011810 <PrepareFrame+0x27c>)
 80116b8:	2389      	movs	r3, #137	; 0x89
 80116ba:	00db      	lsls	r3, r3, #3
 80116bc:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80116be:	2314      	movs	r3, #20
 80116c0:	18fb      	adds	r3, r7, r3
 80116c2:	0018      	movs	r0, r3
 80116c4:	f002 fde2 	bl	801428c <LoRaMacCommandsGetSizeSerializedCmds>
 80116c8:	1e03      	subs	r3, r0, #0
 80116ca:	d001      	beq.n	80116d0 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80116cc:	2313      	movs	r3, #19
 80116ce:	e09a      	b.n	8011806 <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d100      	bne.n	80116d8 <PrepareFrame+0x144>
 80116d6:	e092      	b.n	80117fe <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 80116d8:	4b4d      	ldr	r3, [pc, #308]	; (8011810 <PrepareFrame+0x27c>)
 80116da:	4a52      	ldr	r2, [pc, #328]	; (8011824 <PrepareFrame+0x290>)
 80116dc:	589b      	ldr	r3, [r3, r2]
 80116de:	2285      	movs	r2, #133	; 0x85
 80116e0:	569b      	ldrsb	r3, [r3, r2]
 80116e2:	221f      	movs	r2, #31
 80116e4:	18bc      	adds	r4, r7, r2
 80116e6:	0018      	movs	r0, r3
 80116e8:	f7fe fb52 	bl	800fd90 <GetMaxAppPayloadWithoutFOptsLength>
 80116ec:	0003      	movs	r3, r0
 80116ee:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80116f0:	4b47      	ldr	r3, [pc, #284]	; (8011810 <PrepareFrame+0x27c>)
 80116f2:	4a4a      	ldr	r2, [pc, #296]	; (801181c <PrepareFrame+0x288>)
 80116f4:	5c9b      	ldrb	r3, [r3, r2]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d024      	beq.n	8011744 <PrepareFrame+0x1b0>
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	2b0f      	cmp	r3, #15
 80116fe:	d821      	bhi.n	8011744 <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011700:	4a4a      	ldr	r2, [pc, #296]	; (801182c <PrepareFrame+0x298>)
 8011702:	2314      	movs	r3, #20
 8011704:	18fb      	adds	r3, r7, r3
 8011706:	0019      	movs	r1, r3
 8011708:	200f      	movs	r0, #15
 801170a:	f002 fdd5 	bl	80142b8 <LoRaMacCommandsSerializeCmds>
 801170e:	1e03      	subs	r3, r0, #0
 8011710:	d001      	beq.n	8011716 <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011712:	2313      	movs	r3, #19
 8011714:	e077      	b.n	8011806 <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	1c1a      	adds	r2, r3, #0
 801171a:	230f      	movs	r3, #15
 801171c:	4013      	ands	r3, r2
 801171e:	b2da      	uxtb	r2, r3
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	210f      	movs	r1, #15
 8011724:	400a      	ands	r2, r1
 8011726:	0010      	movs	r0, r2
 8011728:	781a      	ldrb	r2, [r3, #0]
 801172a:	210f      	movs	r1, #15
 801172c:	438a      	bics	r2, r1
 801172e:	1c11      	adds	r1, r2, #0
 8011730:	1c02      	adds	r2, r0, #0
 8011732:	430a      	orrs	r2, r1
 8011734:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	7819      	ldrb	r1, [r3, #0]
 801173a:	4a35      	ldr	r2, [pc, #212]	; (8011810 <PrepareFrame+0x27c>)
 801173c:	238a      	movs	r3, #138	; 0x8a
 801173e:	005b      	lsls	r3, r3, #1
 8011740:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011742:	e05c      	b.n	80117fe <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011744:	4b32      	ldr	r3, [pc, #200]	; (8011810 <PrepareFrame+0x27c>)
 8011746:	4a35      	ldr	r2, [pc, #212]	; (801181c <PrepareFrame+0x288>)
 8011748:	5c9b      	ldrb	r3, [r3, r2]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d015      	beq.n	801177a <PrepareFrame+0x1e6>
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	2b0f      	cmp	r3, #15
 8011752:	d912      	bls.n	801177a <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011754:	231f      	movs	r3, #31
 8011756:	18fb      	adds	r3, r7, r3
 8011758:	7818      	ldrb	r0, [r3, #0]
 801175a:	4b2d      	ldr	r3, [pc, #180]	; (8011810 <PrepareFrame+0x27c>)
 801175c:	4a31      	ldr	r2, [pc, #196]	; (8011824 <PrepareFrame+0x290>)
 801175e:	589b      	ldr	r3, [r3, r2]
 8011760:	33cb      	adds	r3, #203	; 0xcb
 8011762:	001a      	movs	r2, r3
 8011764:	2314      	movs	r3, #20
 8011766:	18fb      	adds	r3, r7, r3
 8011768:	0019      	movs	r1, r3
 801176a:	f002 fda5 	bl	80142b8 <LoRaMacCommandsSerializeCmds>
 801176e:	1e03      	subs	r3, r0, #0
 8011770:	d001      	beq.n	8011776 <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011772:	2313      	movs	r3, #19
 8011774:	e047      	b.n	8011806 <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011776:	230a      	movs	r3, #10
 8011778:	e045      	b.n	8011806 <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801177a:	231f      	movs	r3, #31
 801177c:	18fb      	adds	r3, r7, r3
 801177e:	7818      	ldrb	r0, [r3, #0]
 8011780:	4b23      	ldr	r3, [pc, #140]	; (8011810 <PrepareFrame+0x27c>)
 8011782:	4a28      	ldr	r2, [pc, #160]	; (8011824 <PrepareFrame+0x290>)
 8011784:	589b      	ldr	r3, [r3, r2]
 8011786:	33cb      	adds	r3, #203	; 0xcb
 8011788:	001a      	movs	r2, r3
 801178a:	2314      	movs	r3, #20
 801178c:	18fb      	adds	r3, r7, r3
 801178e:	0019      	movs	r1, r3
 8011790:	f002 fd92 	bl	80142b8 <LoRaMacCommandsSerializeCmds>
 8011794:	1e03      	subs	r3, r0, #0
 8011796:	d001      	beq.n	801179c <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011798:	2313      	movs	r3, #19
 801179a:	e034      	b.n	8011806 <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801179c:	4a1c      	ldr	r2, [pc, #112]	; (8011810 <PrepareFrame+0x27c>)
 801179e:	2394      	movs	r3, #148	; 0x94
 80117a0:	005b      	lsls	r3, r3, #1
 80117a2:	2100      	movs	r1, #0
 80117a4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 80117a6:	4b1a      	ldr	r3, [pc, #104]	; (8011810 <PrepareFrame+0x27c>)
 80117a8:	4a1e      	ldr	r2, [pc, #120]	; (8011824 <PrepareFrame+0x290>)
 80117aa:	589b      	ldr	r3, [r3, r2]
 80117ac:	33cb      	adds	r3, #203	; 0xcb
 80117ae:	0019      	movs	r1, r3
 80117b0:	4a17      	ldr	r2, [pc, #92]	; (8011810 <PrepareFrame+0x27c>)
 80117b2:	2396      	movs	r3, #150	; 0x96
 80117b4:	005b      	lsls	r3, r3, #1
 80117b6:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	b2d9      	uxtb	r1, r3
 80117bc:	4a14      	ldr	r2, [pc, #80]	; (8011810 <PrepareFrame+0x27c>)
 80117be:	2398      	movs	r3, #152	; 0x98
 80117c0:	005b      	lsls	r3, r3, #1
 80117c2:	54d1      	strb	r1, [r2, r3]
            break;
 80117c4:	e01b      	b.n	80117fe <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d01a      	beq.n	8011802 <PrepareFrame+0x26e>
 80117cc:	4b10      	ldr	r3, [pc, #64]	; (8011810 <PrepareFrame+0x27c>)
 80117ce:	4a13      	ldr	r2, [pc, #76]	; (801181c <PrepareFrame+0x288>)
 80117d0:	5c9b      	ldrb	r3, [r3, r2]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d015      	beq.n	8011802 <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80117d6:	4816      	ldr	r0, [pc, #88]	; (8011830 <PrepareFrame+0x29c>)
 80117d8:	4b0d      	ldr	r3, [pc, #52]	; (8011810 <PrepareFrame+0x27c>)
 80117da:	4a10      	ldr	r2, [pc, #64]	; (801181c <PrepareFrame+0x288>)
 80117dc:	5c9b      	ldrb	r3, [r3, r2]
 80117de:	b29a      	uxth	r2, r3
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	0019      	movs	r1, r3
 80117e4:	f007 fbb0 	bl	8018f48 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80117e8:	4b09      	ldr	r3, [pc, #36]	; (8011810 <PrepareFrame+0x27c>)
 80117ea:	4a0c      	ldr	r2, [pc, #48]	; (801181c <PrepareFrame+0x288>)
 80117ec:	5c9b      	ldrb	r3, [r3, r2]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	3301      	adds	r3, #1
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	4b06      	ldr	r3, [pc, #24]	; (8011810 <PrepareFrame+0x27c>)
 80117f6:	801a      	strh	r2, [r3, #0]
            }
            break;
 80117f8:	e003      	b.n	8011802 <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80117fa:	2302      	movs	r3, #2
 80117fc:	e003      	b.n	8011806 <PrepareFrame+0x272>
            break;
 80117fe:	46c0      	nop			; (mov r8, r8)
 8011800:	e000      	b.n	8011804 <PrepareFrame+0x270>
            break;
 8011802:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 8011804:	2300      	movs	r3, #0
}
 8011806:	0018      	movs	r0, r3
 8011808:	46bd      	mov	sp, r7
 801180a:	b009      	add	sp, #36	; 0x24
 801180c:	bd90      	pop	{r4, r7, pc}
 801180e:	46c0      	nop			; (mov r8, r8)
 8011810:	20000bb0 	.word	0x20000bb0
 8011814:	00000414 	.word	0x00000414
 8011818:	20000ce8 	.word	0x20000ce8
 801181c:	00000237 	.word	0x00000237
 8011820:	20000bb2 	.word	0x20000bb2
 8011824:	00000484 	.word	0x00000484
 8011828:	00000441 	.word	0x00000441
 801182c:	20000cc8 	.word	0x20000cc8
 8011830:	20000bb3 	.word	0x20000bb3

08011834 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011834:	b5b0      	push	{r4, r5, r7, lr}
 8011836:	b08a      	sub	sp, #40	; 0x28
 8011838:	af00      	add	r7, sp, #0
 801183a:	0002      	movs	r2, r0
 801183c:	1dfb      	adds	r3, r7, #7
 801183e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011840:	2327      	movs	r3, #39	; 0x27
 8011842:	18fb      	adds	r3, r7, r3
 8011844:	2203      	movs	r2, #3
 8011846:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 8011848:	240f      	movs	r4, #15
 801184a:	193b      	adds	r3, r7, r4
 801184c:	220a      	movs	r2, #10
 801184e:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8011850:	2110      	movs	r1, #16
 8011852:	187b      	adds	r3, r7, r1
 8011854:	1dfa      	adds	r2, r7, #7
 8011856:	7812      	ldrb	r2, [r2, #0]
 8011858:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801185a:	4b57      	ldr	r3, [pc, #348]	; (80119b8 <SendFrameOnChannel+0x184>)
 801185c:	4a57      	ldr	r2, [pc, #348]	; (80119bc <SendFrameOnChannel+0x188>)
 801185e:	589b      	ldr	r3, [r3, r2]
 8011860:	2285      	movs	r2, #133	; 0x85
 8011862:	569a      	ldrsb	r2, [r3, r2]
 8011864:	187b      	adds	r3, r7, r1
 8011866:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011868:	4b53      	ldr	r3, [pc, #332]	; (80119b8 <SendFrameOnChannel+0x184>)
 801186a:	4a54      	ldr	r2, [pc, #336]	; (80119bc <SendFrameOnChannel+0x188>)
 801186c:	589b      	ldr	r3, [r3, r2]
 801186e:	2284      	movs	r2, #132	; 0x84
 8011870:	569a      	ldrsb	r2, [r3, r2]
 8011872:	187b      	adds	r3, r7, r1
 8011874:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8011876:	4b50      	ldr	r3, [pc, #320]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011878:	4a50      	ldr	r2, [pc, #320]	; (80119bc <SendFrameOnChannel+0x188>)
 801187a:	589b      	ldr	r3, [r3, r2]
 801187c:	22bc      	movs	r2, #188	; 0xbc
 801187e:	589a      	ldr	r2, [r3, r2]
 8011880:	187b      	adds	r3, r7, r1
 8011882:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8011884:	4b4c      	ldr	r3, [pc, #304]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011886:	4a4d      	ldr	r2, [pc, #308]	; (80119bc <SendFrameOnChannel+0x188>)
 8011888:	589b      	ldr	r3, [r3, r2]
 801188a:	22c0      	movs	r2, #192	; 0xc0
 801188c:	589a      	ldr	r2, [r3, r2]
 801188e:	187b      	adds	r3, r7, r1
 8011890:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011892:	4b49      	ldr	r3, [pc, #292]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011894:	881a      	ldrh	r2, [r3, #0]
 8011896:	187b      	adds	r3, r7, r1
 8011898:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801189a:	4b47      	ldr	r3, [pc, #284]	; (80119b8 <SendFrameOnChannel+0x184>)
 801189c:	4a47      	ldr	r2, [pc, #284]	; (80119bc <SendFrameOnChannel+0x188>)
 801189e:	589b      	ldr	r3, [r3, r2]
 80118a0:	7818      	ldrb	r0, [r3, #0]
 80118a2:	4b47      	ldr	r3, [pc, #284]	; (80119c0 <SendFrameOnChannel+0x18c>)
 80118a4:	193a      	adds	r2, r7, r4
 80118a6:	1879      	adds	r1, r7, r1
 80118a8:	f004 ffb7 	bl	801681a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118ac:	4b42      	ldr	r3, [pc, #264]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118ae:	4a45      	ldr	r2, [pc, #276]	; (80119c4 <SendFrameOnChannel+0x190>)
 80118b0:	2101      	movs	r1, #1
 80118b2:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80118b4:	4b40      	ldr	r3, [pc, #256]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118b6:	4a41      	ldr	r2, [pc, #260]	; (80119bc <SendFrameOnChannel+0x188>)
 80118b8:	589b      	ldr	r3, [r3, r2]
 80118ba:	2285      	movs	r2, #133	; 0x85
 80118bc:	569b      	ldrsb	r3, [r3, r2]
 80118be:	b2d9      	uxtb	r1, r3
 80118c0:	4b3d      	ldr	r3, [pc, #244]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118c2:	4a41      	ldr	r2, [pc, #260]	; (80119c8 <SendFrameOnChannel+0x194>)
 80118c4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 80118c6:	193b      	adds	r3, r7, r4
 80118c8:	2100      	movs	r1, #0
 80118ca:	5659      	ldrsb	r1, [r3, r1]
 80118cc:	4b3a      	ldr	r3, [pc, #232]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118ce:	4a3f      	ldr	r2, [pc, #252]	; (80119cc <SendFrameOnChannel+0x198>)
 80118d0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 80118d2:	1dfb      	adds	r3, r7, #7
 80118d4:	781a      	ldrb	r2, [r3, #0]
 80118d6:	4b38      	ldr	r3, [pc, #224]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118d8:	493d      	ldr	r1, [pc, #244]	; (80119d0 <SendFrameOnChannel+0x19c>)
 80118da:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80118dc:	4a36      	ldr	r2, [pc, #216]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118de:	2383      	movs	r3, #131	; 0x83
 80118e0:	00db      	lsls	r3, r3, #3
 80118e2:	58d2      	ldr	r2, [r2, r3]
 80118e4:	4b34      	ldr	r3, [pc, #208]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118e6:	493b      	ldr	r1, [pc, #236]	; (80119d4 <SendFrameOnChannel+0x1a0>)
 80118e8:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80118ea:	4a33      	ldr	r2, [pc, #204]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118ec:	2383      	movs	r3, #131	; 0x83
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	58d2      	ldr	r2, [r2, r3]
 80118f2:	4b31      	ldr	r3, [pc, #196]	; (80119b8 <SendFrameOnChannel+0x184>)
 80118f4:	4938      	ldr	r1, [pc, #224]	; (80119d8 <SendFrameOnChannel+0x1a4>)
 80118f6:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80118f8:	f002 fa18 	bl	8013d2c <LoRaMacClassBIsBeaconModeActive>
 80118fc:	1e03      	subs	r3, r0, #0
 80118fe:	d00d      	beq.n	801191c <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011900:	4a2d      	ldr	r2, [pc, #180]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011902:	2383      	movs	r3, #131	; 0x83
 8011904:	00db      	lsls	r3, r3, #3
 8011906:	58d3      	ldr	r3, [r2, r3]
 8011908:	0018      	movs	r0, r3
 801190a:	f002 fa73 	bl	8013df4 <LoRaMacClassBIsUplinkCollision>
 801190e:	0003      	movs	r3, r0
 8011910:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 8011912:	6a3b      	ldr	r3, [r7, #32]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d001      	beq.n	801191c <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011918:	2310      	movs	r3, #16
 801191a:	e048      	b.n	80119ae <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 801191c:	4b26      	ldr	r3, [pc, #152]	; (80119b8 <SendFrameOnChannel+0x184>)
 801191e:	4a27      	ldr	r2, [pc, #156]	; (80119bc <SendFrameOnChannel+0x188>)
 8011920:	589b      	ldr	r3, [r3, r2]
 8011922:	227c      	movs	r2, #124	; 0x7c
 8011924:	5c9b      	ldrb	r3, [r3, r2]
 8011926:	2b01      	cmp	r3, #1
 8011928:	d101      	bne.n	801192e <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801192a:	f002 fa6c 	bl	8013e06 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801192e:	f002 fa0d 	bl	8013d4c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8011932:	4b21      	ldr	r3, [pc, #132]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011934:	4a21      	ldr	r2, [pc, #132]	; (80119bc <SendFrameOnChannel+0x188>)
 8011936:	589b      	ldr	r3, [r3, r2]
 8011938:	2285      	movs	r2, #133	; 0x85
 801193a:	569b      	ldrsb	r3, [r3, r2]
 801193c:	b2da      	uxtb	r2, r3
 801193e:	4b1e      	ldr	r3, [pc, #120]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011940:	4926      	ldr	r1, [pc, #152]	; (80119dc <SendFrameOnChannel+0x1a8>)
 8011942:	5c5b      	ldrb	r3, [r3, r1]
 8011944:	2527      	movs	r5, #39	; 0x27
 8011946:	197c      	adds	r4, r7, r5
 8011948:	0019      	movs	r1, r3
 801194a:	0010      	movs	r0, r2
 801194c:	f7ff fbea 	bl	8011124 <SecureFrame>
 8011950:	0003      	movs	r3, r0
 8011952:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011954:	197b      	adds	r3, r7, r5
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d002      	beq.n	8011962 <SendFrameOnChannel+0x12e>
    {
        return status;
 801195c:	197b      	adds	r3, r7, r5
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	e025      	b.n	80119ae <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011962:	4a15      	ldr	r2, [pc, #84]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011964:	23d0      	movs	r3, #208	; 0xd0
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	58d3      	ldr	r3, [r2, r3]
 801196a:	2202      	movs	r2, #2
 801196c:	431a      	orrs	r2, r3
 801196e:	0011      	movs	r1, r2
 8011970:	4a11      	ldr	r2, [pc, #68]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011972:	23d0      	movs	r3, #208	; 0xd0
 8011974:	009b      	lsls	r3, r3, #2
 8011976:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8011978:	4b0f      	ldr	r3, [pc, #60]	; (80119b8 <SendFrameOnChannel+0x184>)
 801197a:	4a19      	ldr	r2, [pc, #100]	; (80119e0 <SendFrameOnChannel+0x1ac>)
 801197c:	5c9b      	ldrb	r3, [r3, r2]
 801197e:	2201      	movs	r2, #1
 8011980:	4053      	eors	r3, r2
 8011982:	b2db      	uxtb	r3, r3
 8011984:	2b00      	cmp	r3, #0
 8011986:	d009      	beq.n	801199c <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8011988:	4a0b      	ldr	r2, [pc, #44]	; (80119b8 <SendFrameOnChannel+0x184>)
 801198a:	2382      	movs	r3, #130	; 0x82
 801198c:	00db      	lsls	r3, r3, #3
 801198e:	5cd3      	ldrb	r3, [r2, r3]
 8011990:	3301      	adds	r3, #1
 8011992:	b2d9      	uxtb	r1, r3
 8011994:	4a08      	ldr	r2, [pc, #32]	; (80119b8 <SendFrameOnChannel+0x184>)
 8011996:	2382      	movs	r3, #130	; 0x82
 8011998:	00db      	lsls	r3, r3, #3
 801199a:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 801199c:	4b11      	ldr	r3, [pc, #68]	; (80119e4 <SendFrameOnChannel+0x1b0>)
 801199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119a0:	4a05      	ldr	r2, [pc, #20]	; (80119b8 <SendFrameOnChannel+0x184>)
 80119a2:	8812      	ldrh	r2, [r2, #0]
 80119a4:	b2d1      	uxtb	r1, r2
 80119a6:	4a10      	ldr	r2, [pc, #64]	; (80119e8 <SendFrameOnChannel+0x1b4>)
 80119a8:	0010      	movs	r0, r2
 80119aa:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	0018      	movs	r0, r3
 80119b0:	46bd      	mov	sp, r7
 80119b2:	b00a      	add	sp, #40	; 0x28
 80119b4:	bdb0      	pop	{r4, r5, r7, pc}
 80119b6:	46c0      	nop			; (mov r8, r8)
 80119b8:	20000bb0 	.word	0x20000bb0
 80119bc:	00000484 	.word	0x00000484
 80119c0:	20000fc8 	.word	0x20000fc8
 80119c4:	0000043d 	.word	0x0000043d
 80119c8:	0000043e 	.word	0x0000043e
 80119cc:	0000043f 	.word	0x0000043f
 80119d0:	0000044c 	.word	0x0000044c
 80119d4:	00000444 	.word	0x00000444
 80119d8:	00000454 	.word	0x00000454
 80119dc:	00000415 	.word	0x00000415
 80119e0:	00000414 	.word	0x00000414
 80119e4:	0801ec78 	.word	0x0801ec78
 80119e8:	20000bb2 	.word	0x20000bb2

080119ec <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b086      	sub	sp, #24
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	0002      	movs	r2, r0
 80119f4:	1dbb      	adds	r3, r7, #6
 80119f6:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80119f8:	4b1f      	ldr	r3, [pc, #124]	; (8011a78 <SetTxContinuousWave+0x8c>)
 80119fa:	4a20      	ldr	r2, [pc, #128]	; (8011a7c <SetTxContinuousWave+0x90>)
 80119fc:	5c9a      	ldrb	r2, [r3, r2]
 80119fe:	2108      	movs	r1, #8
 8011a00:	187b      	adds	r3, r7, r1
 8011a02:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011a04:	4b1c      	ldr	r3, [pc, #112]	; (8011a78 <SetTxContinuousWave+0x8c>)
 8011a06:	4a1e      	ldr	r2, [pc, #120]	; (8011a80 <SetTxContinuousWave+0x94>)
 8011a08:	589b      	ldr	r3, [r3, r2]
 8011a0a:	2285      	movs	r2, #133	; 0x85
 8011a0c:	569a      	ldrsb	r2, [r3, r2]
 8011a0e:	187b      	adds	r3, r7, r1
 8011a10:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011a12:	4b19      	ldr	r3, [pc, #100]	; (8011a78 <SetTxContinuousWave+0x8c>)
 8011a14:	4a1a      	ldr	r2, [pc, #104]	; (8011a80 <SetTxContinuousWave+0x94>)
 8011a16:	589b      	ldr	r3, [r3, r2]
 8011a18:	2284      	movs	r2, #132	; 0x84
 8011a1a:	569a      	ldrsb	r2, [r3, r2]
 8011a1c:	187b      	adds	r3, r7, r1
 8011a1e:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8011a20:	4b15      	ldr	r3, [pc, #84]	; (8011a78 <SetTxContinuousWave+0x8c>)
 8011a22:	4a17      	ldr	r2, [pc, #92]	; (8011a80 <SetTxContinuousWave+0x94>)
 8011a24:	589b      	ldr	r3, [r3, r2]
 8011a26:	22bc      	movs	r2, #188	; 0xbc
 8011a28:	589a      	ldr	r2, [r3, r2]
 8011a2a:	187b      	adds	r3, r7, r1
 8011a2c:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8011a2e:	4b12      	ldr	r3, [pc, #72]	; (8011a78 <SetTxContinuousWave+0x8c>)
 8011a30:	4a13      	ldr	r2, [pc, #76]	; (8011a80 <SetTxContinuousWave+0x94>)
 8011a32:	589b      	ldr	r3, [r3, r2]
 8011a34:	22c0      	movs	r2, #192	; 0xc0
 8011a36:	589a      	ldr	r2, [r3, r2]
 8011a38:	187b      	adds	r3, r7, r1
 8011a3a:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8011a3c:	187b      	adds	r3, r7, r1
 8011a3e:	1dba      	adds	r2, r7, #6
 8011a40:	8812      	ldrh	r2, [r2, #0]
 8011a42:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8011a44:	4b0c      	ldr	r3, [pc, #48]	; (8011a78 <SetTxContinuousWave+0x8c>)
 8011a46:	4a0e      	ldr	r2, [pc, #56]	; (8011a80 <SetTxContinuousWave+0x94>)
 8011a48:	589b      	ldr	r3, [r3, r2]
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	187a      	adds	r2, r7, r1
 8011a4e:	0011      	movs	r1, r2
 8011a50:	0018      	movs	r0, r3
 8011a52:	f004 ffb1 	bl	80169b8 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011a56:	4a08      	ldr	r2, [pc, #32]	; (8011a78 <SetTxContinuousWave+0x8c>)
 8011a58:	23d0      	movs	r3, #208	; 0xd0
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	58d3      	ldr	r3, [r2, r3]
 8011a5e:	2202      	movs	r2, #2
 8011a60:	431a      	orrs	r2, r3
 8011a62:	0011      	movs	r1, r2
 8011a64:	4a04      	ldr	r2, [pc, #16]	; (8011a78 <SetTxContinuousWave+0x8c>)
 8011a66:	23d0      	movs	r3, #208	; 0xd0
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8011a6c:	2300      	movs	r3, #0
}
 8011a6e:	0018      	movs	r0, r3
 8011a70:	46bd      	mov	sp, r7
 8011a72:	b006      	add	sp, #24
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	46c0      	nop			; (mov r8, r8)
 8011a78:	20000bb0 	.word	0x20000bb0
 8011a7c:	00000415 	.word	0x00000415
 8011a80:	00000484 	.word	0x00000484

08011a84 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6039      	str	r1, [r7, #0]
 8011a8c:	0011      	movs	r1, r2
 8011a8e:	1dbb      	adds	r3, r7, #6
 8011a90:	1c02      	adds	r2, r0, #0
 8011a92:	801a      	strh	r2, [r3, #0]
 8011a94:	1d7b      	adds	r3, r7, #5
 8011a96:	1c0a      	adds	r2, r1, #0
 8011a98:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011a9a:	4b0c      	ldr	r3, [pc, #48]	; (8011acc <SetTxContinuousWave1+0x48>)
 8011a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a9e:	1d7a      	adds	r2, r7, #5
 8011aa0:	2100      	movs	r1, #0
 8011aa2:	5651      	ldrsb	r1, [r2, r1]
 8011aa4:	1dba      	adds	r2, r7, #6
 8011aa6:	8812      	ldrh	r2, [r2, #0]
 8011aa8:	6838      	ldr	r0, [r7, #0]
 8011aaa:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011aac:	4a08      	ldr	r2, [pc, #32]	; (8011ad0 <SetTxContinuousWave1+0x4c>)
 8011aae:	23d0      	movs	r3, #208	; 0xd0
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	58d3      	ldr	r3, [r2, r3]
 8011ab4:	2202      	movs	r2, #2
 8011ab6:	431a      	orrs	r2, r3
 8011ab8:	0011      	movs	r1, r2
 8011aba:	4a05      	ldr	r2, [pc, #20]	; (8011ad0 <SetTxContinuousWave1+0x4c>)
 8011abc:	23d0      	movs	r3, #208	; 0xd0
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8011ac2:	2300      	movs	r3, #0
}
 8011ac4:	0018      	movs	r0, r3
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	b002      	add	sp, #8
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	0801ec78 	.word	0x0801ec78
 8011ad0:	20000bb0 	.word	0x20000bb0

08011ad4 <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8011ada:	4b20      	ldr	r3, [pc, #128]	; (8011b5c <GetCtxs+0x88>)
 8011adc:	4a20      	ldr	r2, [pc, #128]	; (8011b60 <GetCtxs+0x8c>)
 8011ade:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8011ae0:	4b1e      	ldr	r3, [pc, #120]	; (8011b5c <GetCtxs+0x88>)
 8011ae2:	22b6      	movs	r2, #182	; 0xb6
 8011ae4:	0052      	lsls	r2, r2, #1
 8011ae6:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8011ae8:	4b1e      	ldr	r3, [pc, #120]	; (8011b64 <GetCtxs+0x90>)
 8011aea:	0018      	movs	r0, r3
 8011aec:	f003 fd1c 	bl	8015528 <LoRaMacCryptoGetNvmCtx>
 8011af0:	0002      	movs	r2, r0
 8011af2:	4b1a      	ldr	r3, [pc, #104]	; (8011b5c <GetCtxs+0x88>)
 8011af4:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 8011af6:	2300      	movs	r3, #0
 8011af8:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8011afa:	4b1b      	ldr	r3, [pc, #108]	; (8011b68 <GetCtxs+0x94>)
 8011afc:	4a1b      	ldr	r2, [pc, #108]	; (8011b6c <GetCtxs+0x98>)
 8011afe:	589b      	ldr	r3, [r3, r2]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	1d3a      	adds	r2, r7, #4
 8011b04:	0011      	movs	r1, r2
 8011b06:	0018      	movs	r0, r3
 8011b08:	f004 fdeb 	bl	80166e2 <RegionGetNvmCtx>
 8011b0c:	0002      	movs	r2, r0
 8011b0e:	4b13      	ldr	r3, [pc, #76]	; (8011b5c <GetCtxs+0x88>)
 8011b10:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8011b12:	687a      	ldr	r2, [r7, #4]
 8011b14:	4b11      	ldr	r3, [pc, #68]	; (8011b5c <GetCtxs+0x88>)
 8011b16:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8011b18:	4b15      	ldr	r3, [pc, #84]	; (8011b70 <GetCtxs+0x9c>)
 8011b1a:	0018      	movs	r0, r3
 8011b1c:	f7fa fffc 	bl	800cb18 <SecureElementGetNvmCtx>
 8011b20:	0002      	movs	r2, r0
 8011b22:	4b0e      	ldr	r3, [pc, #56]	; (8011b5c <GetCtxs+0x88>)
 8011b24:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8011b26:	4b13      	ldr	r3, [pc, #76]	; (8011b74 <GetCtxs+0xa0>)
 8011b28:	0018      	movs	r0, r3
 8011b2a:	f002 facb 	bl	80140c4 <LoRaMacCommandsGetNvmCtx>
 8011b2e:	0002      	movs	r2, r0
 8011b30:	4b0a      	ldr	r3, [pc, #40]	; (8011b5c <GetCtxs+0x88>)
 8011b32:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8011b34:	4b10      	ldr	r3, [pc, #64]	; (8011b78 <GetCtxs+0xa4>)
 8011b36:	0018      	movs	r0, r3
 8011b38:	f002 f892 	bl	8013c60 <LoRaMacClassBGetNvmCtx>
 8011b3c:	0002      	movs	r2, r0
 8011b3e:	4b07      	ldr	r3, [pc, #28]	; (8011b5c <GetCtxs+0x88>)
 8011b40:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8011b42:	4b0e      	ldr	r3, [pc, #56]	; (8011b7c <GetCtxs+0xa8>)
 8011b44:	0018      	movs	r0, r3
 8011b46:	f002 fd5d 	bl	8014604 <LoRaMacConfirmQueueGetNvmCtx>
 8011b4a:	0002      	movs	r2, r0
 8011b4c:	4b03      	ldr	r3, [pc, #12]	; (8011b5c <GetCtxs+0x88>)
 8011b4e:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8011b50:	4b02      	ldr	r3, [pc, #8]	; (8011b5c <GetCtxs+0x88>)
}
 8011b52:	0018      	movs	r0, r3
 8011b54:	46bd      	mov	sp, r7
 8011b56:	b002      	add	sp, #8
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	46c0      	nop			; (mov r8, r8)
 8011b5c:	200011a8 	.word	0x200011a8
 8011b60:	2000103c 	.word	0x2000103c
 8011b64:	200011bc 	.word	0x200011bc
 8011b68:	20000bb0 	.word	0x20000bb0
 8011b6c:	00000484 	.word	0x00000484
 8011b70:	200011c4 	.word	0x200011c4
 8011b74:	200011cc 	.word	0x200011cc
 8011b78:	200011d4 	.word	0x200011d4
 8011b7c:	200011dc 	.word	0x200011dc

08011b80 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b8e:	2303      	movs	r3, #3
 8011b90:	e086      	b.n	8011ca0 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011b92:	4a45      	ldr	r2, [pc, #276]	; (8011ca8 <RestoreCtxs+0x128>)
 8011b94:	23d0      	movs	r3, #208	; 0xd0
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	58d3      	ldr	r3, [r2, r3]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d001      	beq.n	8011ba2 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	e07e      	b.n	8011ca0 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d008      	beq.n	8011bbc <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6819      	ldr	r1, [r3, #0]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	4b3d      	ldr	r3, [pc, #244]	; (8011cac <RestoreCtxs+0x12c>)
 8011bb6:	0018      	movs	r0, r3
 8011bb8:	f007 f9c6 	bl	8018f48 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8011bbc:	2108      	movs	r1, #8
 8011bbe:	187b      	adds	r3, r7, r1
 8011bc0:	2203      	movs	r2, #3
 8011bc2:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	689a      	ldr	r2, [r3, #8]
 8011bc8:	187b      	adds	r3, r7, r1
 8011bca:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011bcc:	4b36      	ldr	r3, [pc, #216]	; (8011ca8 <RestoreCtxs+0x128>)
 8011bce:	4a38      	ldr	r2, [pc, #224]	; (8011cb0 <RestoreCtxs+0x130>)
 8011bd0:	589b      	ldr	r3, [r3, r2]
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	187a      	adds	r2, r7, r1
 8011bd6:	0011      	movs	r1, r2
 8011bd8:	0018      	movs	r0, r3
 8011bda:	f004 fd6d 	bl	80166b8 <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011bde:	4b32      	ldr	r3, [pc, #200]	; (8011ca8 <RestoreCtxs+0x128>)
 8011be0:	4a34      	ldr	r2, [pc, #208]	; (8011cb4 <RestoreCtxs+0x134>)
 8011be2:	5c99      	ldrb	r1, [r3, r2]
 8011be4:	4a30      	ldr	r2, [pc, #192]	; (8011ca8 <RestoreCtxs+0x128>)
 8011be6:	23f8      	movs	r3, #248	; 0xf8
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8011bec:	4b2e      	ldr	r3, [pc, #184]	; (8011ca8 <RestoreCtxs+0x128>)
 8011bee:	4a30      	ldr	r2, [pc, #192]	; (8011cb0 <RestoreCtxs+0x130>)
 8011bf0:	589b      	ldr	r3, [r3, r2]
 8011bf2:	22b0      	movs	r2, #176	; 0xb0
 8011bf4:	5899      	ldr	r1, [r3, r2]
 8011bf6:	4a2c      	ldr	r2, [pc, #176]	; (8011ca8 <RestoreCtxs+0x128>)
 8011bf8:	23f9      	movs	r3, #249	; 0xf9
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011bfe:	4b2a      	ldr	r3, [pc, #168]	; (8011ca8 <RestoreCtxs+0x128>)
 8011c00:	4a2b      	ldr	r2, [pc, #172]	; (8011cb0 <RestoreCtxs+0x130>)
 8011c02:	589b      	ldr	r3, [r3, r2]
 8011c04:	22b9      	movs	r2, #185	; 0xb9
 8011c06:	5c99      	ldrb	r1, [r3, r2]
 8011c08:	4a27      	ldr	r2, [pc, #156]	; (8011ca8 <RestoreCtxs+0x128>)
 8011c0a:	23fc      	movs	r3, #252	; 0xfc
 8011c0c:	009b      	lsls	r3, r3, #2
 8011c0e:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011c10:	4b25      	ldr	r3, [pc, #148]	; (8011ca8 <RestoreCtxs+0x128>)
 8011c12:	4a27      	ldr	r2, [pc, #156]	; (8011cb0 <RestoreCtxs+0x130>)
 8011c14:	589b      	ldr	r3, [r3, r2]
 8011c16:	22ca      	movs	r2, #202	; 0xca
 8011c18:	5c99      	ldrb	r1, [r3, r2]
 8011c1a:	4b23      	ldr	r3, [pc, #140]	; (8011ca8 <RestoreCtxs+0x128>)
 8011c1c:	4a26      	ldr	r2, [pc, #152]	; (8011cb8 <RestoreCtxs+0x138>)
 8011c1e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011c20:	4b21      	ldr	r3, [pc, #132]	; (8011ca8 <RestoreCtxs+0x128>)
 8011c22:	4a26      	ldr	r2, [pc, #152]	; (8011cbc <RestoreCtxs+0x13c>)
 8011c24:	2101      	movs	r1, #1
 8011c26:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011c28:	4b1f      	ldr	r3, [pc, #124]	; (8011ca8 <RestoreCtxs+0x128>)
 8011c2a:	4a25      	ldr	r2, [pc, #148]	; (8011cc0 <RestoreCtxs+0x140>)
 8011c2c:	2102      	movs	r1, #2
 8011c2e:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	699b      	ldr	r3, [r3, #24]
 8011c34:	0018      	movs	r0, r3
 8011c36:	f7fa ff59 	bl	800caec <SecureElementRestoreNvmCtx>
 8011c3a:	1e03      	subs	r3, r0, #0
 8011c3c:	d001      	beq.n	8011c42 <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c3e:	2311      	movs	r3, #17
 8011c40:	e02e      	b.n	8011ca0 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	691b      	ldr	r3, [r3, #16]
 8011c46:	0018      	movs	r0, r3
 8011c48:	f003 fc58 	bl	80154fc <LoRaMacCryptoRestoreNvmCtx>
 8011c4c:	1e03      	subs	r3, r0, #0
 8011c4e:	d001      	beq.n	8011c54 <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c50:	2311      	movs	r3, #17
 8011c52:	e025      	b.n	8011ca0 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6a1b      	ldr	r3, [r3, #32]
 8011c58:	0018      	movs	r0, r3
 8011c5a:	f002 fa1d 	bl	8014098 <LoRaMacCommandsRestoreNvmCtx>
 8011c5e:	1e03      	subs	r3, r0, #0
 8011c60:	d001      	beq.n	8011c66 <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011c62:	2313      	movs	r3, #19
 8011c64:	e01c      	b.n	8011ca0 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c6a:	0018      	movs	r0, r3
 8011c6c:	f001 ffef 	bl	8013c4e <LoRaMacClassBRestoreNvmCtx>
 8011c70:	0003      	movs	r3, r0
 8011c72:	001a      	movs	r2, r3
 8011c74:	2301      	movs	r3, #1
 8011c76:	4053      	eors	r3, r2
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d001      	beq.n	8011c82 <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8011c7e:	2314      	movs	r3, #20
 8011c80:	e00e      	b.n	8011ca0 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c86:	0018      	movs	r0, r3
 8011c88:	f002 fca6 	bl	80145d8 <LoRaMacConfirmQueueRestoreNvmCtx>
 8011c8c:	0003      	movs	r3, r0
 8011c8e:	001a      	movs	r2, r3
 8011c90:	2301      	movs	r3, #1
 8011c92:	4053      	eors	r3, r2
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d001      	beq.n	8011c9e <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8011c9a:	2315      	movs	r3, #21
 8011c9c:	e000      	b.n	8011ca0 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 8011c9e:	2300      	movs	r3, #0
}
 8011ca0:	0018      	movs	r0, r3
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	b004      	add	sp, #16
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	20000bb0 	.word	0x20000bb0
 8011cac:	2000103c 	.word	0x2000103c
 8011cb0:	00000484 	.word	0x00000484
 8011cb4:	00000415 	.word	0x00000415
 8011cb8:	000003f1 	.word	0x000003f1
 8011cbc:	000003f2 	.word	0x000003f2
 8011cc0:	000003f3 	.word	0x000003f3

08011cc4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d002      	beq.n	8011cda <DetermineFrameType+0x16>
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d101      	bne.n	8011cde <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011cda:	2303      	movs	r3, #3
 8011cdc:	e03b      	b.n	8011d56 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	7b1b      	ldrb	r3, [r3, #12]
 8011ce2:	220f      	movs	r2, #15
 8011ce4:	4013      	ands	r3, r2
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d008      	beq.n	8011cfe <DetermineFrameType+0x3a>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2220      	movs	r2, #32
 8011cf0:	5c9b      	ldrb	r3, [r3, r2]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d003      	beq.n	8011cfe <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	701a      	strb	r2, [r3, #0]
 8011cfc:	e02a      	b.n	8011d54 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2228      	movs	r2, #40	; 0x28
 8011d02:	5c9b      	ldrb	r3, [r3, r2]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d103      	bne.n	8011d10 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	2201      	movs	r2, #1
 8011d0c:	701a      	strb	r2, [r3, #0]
 8011d0e:	e021      	b.n	8011d54 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	7b1b      	ldrb	r3, [r3, #12]
 8011d14:	220f      	movs	r2, #15
 8011d16:	4013      	ands	r3, r2
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d108      	bne.n	8011d30 <DetermineFrameType+0x6c>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2220      	movs	r2, #32
 8011d22:	5c9b      	ldrb	r3, [r3, r2]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d103      	bne.n	8011d30 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	2202      	movs	r2, #2
 8011d2c:	701a      	strb	r2, [r3, #0]
 8011d2e:	e011      	b.n	8011d54 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	7b1b      	ldrb	r3, [r3, #12]
 8011d34:	220f      	movs	r2, #15
 8011d36:	4013      	ands	r3, r2
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d108      	bne.n	8011d50 <DetermineFrameType+0x8c>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2220      	movs	r2, #32
 8011d42:	5c9b      	ldrb	r3, [r3, r2]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d003      	beq.n	8011d50 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2203      	movs	r2, #3
 8011d4c:	701a      	strb	r2, [r3, #0]
 8011d4e:	e001      	b.n	8011d54 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011d50:	2317      	movs	r3, #23
 8011d52:	e000      	b.n	8011d56 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011d54:	2300      	movs	r3, #0
}
 8011d56:	0018      	movs	r0, r3
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	b002      	add	sp, #8
 8011d5c:	bd80      	pop	{r7, pc}
	...

08011d60 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8011d64:	4a14      	ldr	r2, [pc, #80]	; (8011db8 <CheckRetransUnconfirmedUplink+0x58>)
 8011d66:	2382      	movs	r3, #130	; 0x82
 8011d68:	00db      	lsls	r3, r3, #3
 8011d6a:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8011d6c:	4b12      	ldr	r3, [pc, #72]	; (8011db8 <CheckRetransUnconfirmedUplink+0x58>)
 8011d6e:	4913      	ldr	r1, [pc, #76]	; (8011dbc <CheckRetransUnconfirmedUplink+0x5c>)
 8011d70:	585b      	ldr	r3, [r3, r1]
 8011d72:	21a4      	movs	r1, #164	; 0xa4
 8011d74:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d301      	bcc.n	8011d7e <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	e018      	b.n	8011db0 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011d7e:	4b0e      	ldr	r3, [pc, #56]	; (8011db8 <CheckRetransUnconfirmedUplink+0x58>)
 8011d80:	4a0f      	ldr	r2, [pc, #60]	; (8011dc0 <CheckRetransUnconfirmedUplink+0x60>)
 8011d82:	5c9b      	ldrb	r3, [r3, r2]
 8011d84:	2202      	movs	r2, #2
 8011d86:	4013      	ands	r3, r2
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00f      	beq.n	8011dae <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8011d8e:	4b0a      	ldr	r3, [pc, #40]	; (8011db8 <CheckRetransUnconfirmedUplink+0x58>)
 8011d90:	4a0a      	ldr	r2, [pc, #40]	; (8011dbc <CheckRetransUnconfirmedUplink+0x5c>)
 8011d92:	589b      	ldr	r3, [r3, r2]
 8011d94:	227c      	movs	r2, #124	; 0x7c
 8011d96:	5c9b      	ldrb	r3, [r3, r2]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d101      	bne.n	8011da0 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	e007      	b.n	8011db0 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8011da0:	4b05      	ldr	r3, [pc, #20]	; (8011db8 <CheckRetransUnconfirmedUplink+0x58>)
 8011da2:	4a08      	ldr	r2, [pc, #32]	; (8011dc4 <CheckRetransUnconfirmedUplink+0x64>)
 8011da4:	5c9b      	ldrb	r3, [r3, r2]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 8011daa:	2301      	movs	r3, #1
 8011dac:	e000      	b.n	8011db0 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8011dae:	2300      	movs	r3, #0
}
 8011db0:	0018      	movs	r0, r3
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	46c0      	nop			; (mov r8, r8)
 8011db8:	20000bb0 	.word	0x20000bb0
 8011dbc:	00000484 	.word	0x00000484
 8011dc0:	00000481 	.word	0x00000481
 8011dc4:	0000042d 	.word	0x0000042d

08011dc8 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011dcc:	4b0e      	ldr	r3, [pc, #56]	; (8011e08 <CheckRetransConfirmedUplink+0x40>)
 8011dce:	4a0f      	ldr	r2, [pc, #60]	; (8011e0c <CheckRetransConfirmedUplink+0x44>)
 8011dd0:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8011dd2:	4b0d      	ldr	r3, [pc, #52]	; (8011e08 <CheckRetransConfirmedUplink+0x40>)
 8011dd4:	490e      	ldr	r1, [pc, #56]	; (8011e10 <CheckRetransConfirmedUplink+0x48>)
 8011dd6:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d301      	bcc.n	8011de0 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	e010      	b.n	8011e02 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011de0:	4b09      	ldr	r3, [pc, #36]	; (8011e08 <CheckRetransConfirmedUplink+0x40>)
 8011de2:	4a0c      	ldr	r2, [pc, #48]	; (8011e14 <CheckRetransConfirmedUplink+0x4c>)
 8011de4:	5c9b      	ldrb	r3, [r3, r2]
 8011de6:	2202      	movs	r2, #2
 8011de8:	4013      	ands	r3, r2
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d007      	beq.n	8011e00 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011df0:	4a05      	ldr	r2, [pc, #20]	; (8011e08 <CheckRetransConfirmedUplink+0x40>)
 8011df2:	2388      	movs	r3, #136	; 0x88
 8011df4:	00db      	lsls	r3, r3, #3
 8011df6:	5cd3      	ldrb	r3, [r2, r3]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d001      	beq.n	8011e00 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e000      	b.n	8011e02 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	0018      	movs	r0, r3
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	20000bb0 	.word	0x20000bb0
 8011e0c:	00000412 	.word	0x00000412
 8011e10:	00000411 	.word	0x00000411
 8011e14:	00000481 	.word	0x00000481

08011e18 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011e1c:	4b1e      	ldr	r3, [pc, #120]	; (8011e98 <StopRetransmission+0x80>)
 8011e1e:	4a1f      	ldr	r2, [pc, #124]	; (8011e9c <StopRetransmission+0x84>)
 8011e20:	5c9b      	ldrb	r3, [r3, r2]
 8011e22:	2202      	movs	r2, #2
 8011e24:	4013      	ands	r3, r2
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d009      	beq.n	8011e40 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8011e2c:	4b1a      	ldr	r3, [pc, #104]	; (8011e98 <StopRetransmission+0x80>)
 8011e2e:	4a1c      	ldr	r2, [pc, #112]	; (8011ea0 <StopRetransmission+0x88>)
 8011e30:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d013      	beq.n	8011e5e <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011e36:	4b18      	ldr	r3, [pc, #96]	; (8011e98 <StopRetransmission+0x80>)
 8011e38:	4a19      	ldr	r2, [pc, #100]	; (8011ea0 <StopRetransmission+0x88>)
 8011e3a:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d00e      	beq.n	8011e5e <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8011e40:	4b15      	ldr	r3, [pc, #84]	; (8011e98 <StopRetransmission+0x80>)
 8011e42:	4a18      	ldr	r2, [pc, #96]	; (8011ea4 <StopRetransmission+0x8c>)
 8011e44:	589b      	ldr	r3, [r3, r2]
 8011e46:	227e      	movs	r2, #126	; 0x7e
 8011e48:	5c9b      	ldrb	r3, [r3, r2]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d007      	beq.n	8011e5e <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8011e4e:	4b12      	ldr	r3, [pc, #72]	; (8011e98 <StopRetransmission+0x80>)
 8011e50:	4a14      	ldr	r2, [pc, #80]	; (8011ea4 <StopRetransmission+0x8c>)
 8011e52:	589b      	ldr	r3, [r3, r2]
 8011e54:	2280      	movs	r2, #128	; 0x80
 8011e56:	589a      	ldr	r2, [r3, r2]
 8011e58:	3201      	adds	r2, #1
 8011e5a:	2180      	movs	r1, #128	; 0x80
 8011e5c:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011e5e:	4a0e      	ldr	r2, [pc, #56]	; (8011e98 <StopRetransmission+0x80>)
 8011e60:	2382      	movs	r3, #130	; 0x82
 8011e62:	00db      	lsls	r3, r3, #3
 8011e64:	2100      	movs	r1, #0
 8011e66:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8011e68:	4b0b      	ldr	r3, [pc, #44]	; (8011e98 <StopRetransmission+0x80>)
 8011e6a:	4a0f      	ldr	r2, [pc, #60]	; (8011ea8 <StopRetransmission+0x90>)
 8011e6c:	2100      	movs	r1, #0
 8011e6e:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011e70:	4b09      	ldr	r3, [pc, #36]	; (8011e98 <StopRetransmission+0x80>)
 8011e72:	4a0e      	ldr	r2, [pc, #56]	; (8011eac <StopRetransmission+0x94>)
 8011e74:	2100      	movs	r1, #0
 8011e76:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e78:	4a07      	ldr	r2, [pc, #28]	; (8011e98 <StopRetransmission+0x80>)
 8011e7a:	23d0      	movs	r3, #208	; 0xd0
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	58d3      	ldr	r3, [r2, r3]
 8011e80:	2202      	movs	r2, #2
 8011e82:	4393      	bics	r3, r2
 8011e84:	0019      	movs	r1, r3
 8011e86:	4a04      	ldr	r2, [pc, #16]	; (8011e98 <StopRetransmission+0x80>)
 8011e88:	23d0      	movs	r3, #208	; 0xd0
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	50d1      	str	r1, [r2, r3]

    return true;
 8011e8e:	2301      	movs	r3, #1
}
 8011e90:	0018      	movs	r0, r3
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	46c0      	nop			; (mov r8, r8)
 8011e98:	20000bb0 	.word	0x20000bb0
 8011e9c:	00000481 	.word	0x00000481
 8011ea0:	0000042d 	.word	0x0000042d
 8011ea4:	00000484 	.word	0x00000484
 8011ea8:	00000414 	.word	0x00000414
 8011eac:	00000413 	.word	0x00000413

08011eb0 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8011eb6:	4b21      	ldr	r3, [pc, #132]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011eb8:	4a21      	ldr	r2, [pc, #132]	; (8011f40 <AckTimeoutRetriesProcess+0x90>)
 8011eba:	5c9a      	ldrb	r2, [r3, r2]
 8011ebc:	4b1f      	ldr	r3, [pc, #124]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011ebe:	4921      	ldr	r1, [pc, #132]	; (8011f44 <AckTimeoutRetriesProcess+0x94>)
 8011ec0:	5c5b      	ldrb	r3, [r3, r1]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d236      	bcs.n	8011f34 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8011ec6:	4b1d      	ldr	r3, [pc, #116]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011ec8:	4a1d      	ldr	r2, [pc, #116]	; (8011f40 <AckTimeoutRetriesProcess+0x90>)
 8011eca:	5c9b      	ldrb	r3, [r3, r2]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	b2d9      	uxtb	r1, r3
 8011ed0:	4b1a      	ldr	r3, [pc, #104]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011ed2:	4a1b      	ldr	r2, [pc, #108]	; (8011f40 <AckTimeoutRetriesProcess+0x90>)
 8011ed4:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8011ed6:	4b19      	ldr	r3, [pc, #100]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011ed8:	4a19      	ldr	r2, [pc, #100]	; (8011f40 <AckTimeoutRetriesProcess+0x90>)
 8011eda:	5c9b      	ldrb	r3, [r3, r2]
 8011edc:	2201      	movs	r2, #1
 8011ede:	4013      	ands	r3, r2
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d026      	beq.n	8011f34 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011ee6:	2108      	movs	r1, #8
 8011ee8:	187b      	adds	r3, r7, r1
 8011eea:	2222      	movs	r2, #34	; 0x22
 8011eec:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011eee:	4b13      	ldr	r3, [pc, #76]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011ef0:	4a15      	ldr	r2, [pc, #84]	; (8011f48 <AckTimeoutRetriesProcess+0x98>)
 8011ef2:	589b      	ldr	r3, [r3, r2]
 8011ef4:	22b8      	movs	r2, #184	; 0xb8
 8011ef6:	5c9a      	ldrb	r2, [r3, r2]
 8011ef8:	187b      	adds	r3, r7, r1
 8011efa:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011efc:	4b0f      	ldr	r3, [pc, #60]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011efe:	4a12      	ldr	r2, [pc, #72]	; (8011f48 <AckTimeoutRetriesProcess+0x98>)
 8011f00:	589b      	ldr	r3, [r3, r2]
 8011f02:	2285      	movs	r2, #133	; 0x85
 8011f04:	569a      	ldrsb	r2, [r3, r2]
 8011f06:	187b      	adds	r3, r7, r1
 8011f08:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011f0a:	4b0c      	ldr	r3, [pc, #48]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011f0c:	4a0e      	ldr	r2, [pc, #56]	; (8011f48 <AckTimeoutRetriesProcess+0x98>)
 8011f0e:	589b      	ldr	r3, [r3, r2]
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	187a      	adds	r2, r7, r1
 8011f14:	0011      	movs	r1, r2
 8011f16:	0018      	movs	r0, r3
 8011f18:	f004 fb93 	bl	8016642 <RegionGetPhyParam>
 8011f1c:	0003      	movs	r3, r0
 8011f1e:	001a      	movs	r2, r3
 8011f20:	1d3b      	adds	r3, r7, #4
 8011f22:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8011f24:	1d3b      	adds	r3, r7, #4
 8011f26:	6819      	ldr	r1, [r3, #0]
 8011f28:	4b04      	ldr	r3, [pc, #16]	; (8011f3c <AckTimeoutRetriesProcess+0x8c>)
 8011f2a:	4a07      	ldr	r2, [pc, #28]	; (8011f48 <AckTimeoutRetriesProcess+0x98>)
 8011f2c:	589b      	ldr	r3, [r3, r2]
 8011f2e:	b249      	sxtb	r1, r1
 8011f30:	2285      	movs	r2, #133	; 0x85
 8011f32:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8011f34:	46c0      	nop			; (mov r8, r8)
 8011f36:	46bd      	mov	sp, r7
 8011f38:	b004      	add	sp, #16
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	20000bb0 	.word	0x20000bb0
 8011f40:	00000412 	.word	0x00000412
 8011f44:	00000411 	.word	0x00000411
 8011f48:	00000484 	.word	0x00000484

08011f4c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8011f52:	4a16      	ldr	r2, [pc, #88]	; (8011fac <AckTimeoutRetriesFinalize+0x60>)
 8011f54:	2388      	movs	r3, #136	; 0x88
 8011f56:	00db      	lsls	r3, r3, #3
 8011f58:	5cd3      	ldrb	r3, [r2, r3]
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	4053      	eors	r3, r2
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d018      	beq.n	8011f96 <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011f64:	003b      	movs	r3, r7
 8011f66:	2202      	movs	r2, #2
 8011f68:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8011f6a:	4b11      	ldr	r3, [pc, #68]	; (8011fb0 <AckTimeoutRetriesFinalize+0x64>)
 8011f6c:	689a      	ldr	r2, [r3, #8]
 8011f6e:	003b      	movs	r3, r7
 8011f70:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011f72:	4b0e      	ldr	r3, [pc, #56]	; (8011fac <AckTimeoutRetriesFinalize+0x60>)
 8011f74:	4a0f      	ldr	r2, [pc, #60]	; (8011fb4 <AckTimeoutRetriesFinalize+0x68>)
 8011f76:	589b      	ldr	r3, [r3, r2]
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	003a      	movs	r2, r7
 8011f7c:	0011      	movs	r1, r2
 8011f7e:	0018      	movs	r0, r3
 8011f80:	f004 fb9a 	bl	80166b8 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8011f84:	4b09      	ldr	r3, [pc, #36]	; (8011fac <AckTimeoutRetriesFinalize+0x60>)
 8011f86:	4a0c      	ldr	r2, [pc, #48]	; (8011fb8 <AckTimeoutRetriesFinalize+0x6c>)
 8011f88:	2100      	movs	r1, #0
 8011f8a:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8011f8c:	4a07      	ldr	r2, [pc, #28]	; (8011fac <AckTimeoutRetriesFinalize+0x60>)
 8011f8e:	2388      	movs	r3, #136	; 0x88
 8011f90:	00db      	lsls	r3, r3, #3
 8011f92:	2100      	movs	r1, #0
 8011f94:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011f96:	4b05      	ldr	r3, [pc, #20]	; (8011fac <AckTimeoutRetriesFinalize+0x60>)
 8011f98:	4a08      	ldr	r2, [pc, #32]	; (8011fbc <AckTimeoutRetriesFinalize+0x70>)
 8011f9a:	5c99      	ldrb	r1, [r3, r2]
 8011f9c:	4b03      	ldr	r3, [pc, #12]	; (8011fac <AckTimeoutRetriesFinalize+0x60>)
 8011f9e:	4a08      	ldr	r2, [pc, #32]	; (8011fc0 <AckTimeoutRetriesFinalize+0x74>)
 8011fa0:	5499      	strb	r1, [r3, r2]
}
 8011fa2:	46c0      	nop			; (mov r8, r8)
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	b002      	add	sp, #8
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	46c0      	nop			; (mov r8, r8)
 8011fac:	20000bb0 	.word	0x20000bb0
 8011fb0:	200011a8 	.word	0x200011a8
 8011fb4:	00000484 	.word	0x00000484
 8011fb8:	00000414 	.word	0x00000414
 8011fbc:	00000412 	.word	0x00000412
 8011fc0:	00000441 	.word	0x00000441

08011fc4 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	0002      	movs	r2, r0
 8011fcc:	1dfb      	adds	r3, r7, #7
 8011fce:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8011fd0:	4a0c      	ldr	r2, [pc, #48]	; (8012004 <CallNvmCtxCallback+0x40>)
 8011fd2:	23d2      	movs	r3, #210	; 0xd2
 8011fd4:	009b      	lsls	r3, r3, #2
 8011fd6:	58d3      	ldr	r3, [r2, r3]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00f      	beq.n	8011ffc <CallNvmCtxCallback+0x38>
 8011fdc:	4a09      	ldr	r2, [pc, #36]	; (8012004 <CallNvmCtxCallback+0x40>)
 8011fde:	23d2      	movs	r3, #210	; 0xd2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	58d3      	ldr	r3, [r2, r3]
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d008      	beq.n	8011ffc <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8011fea:	4a06      	ldr	r2, [pc, #24]	; (8012004 <CallNvmCtxCallback+0x40>)
 8011fec:	23d2      	movs	r3, #210	; 0xd2
 8011fee:	009b      	lsls	r3, r3, #2
 8011ff0:	58d3      	ldr	r3, [r2, r3]
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	1dfa      	adds	r2, r7, #7
 8011ff6:	7812      	ldrb	r2, [r2, #0]
 8011ff8:	0010      	movs	r0, r2
 8011ffa:	4798      	blx	r3
    }
}
 8011ffc:	46c0      	nop			; (mov r8, r8)
 8011ffe:	46bd      	mov	sp, r7
 8012000:	b002      	add	sp, #8
 8012002:	bd80      	pop	{r7, pc}
 8012004:	20000bb0 	.word	0x20000bb0

08012008 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 801200c:	2000      	movs	r0, #0
 801200e:	f7ff ffd9 	bl	8011fc4 <CallNvmCtxCallback>
}
 8012012:	46c0      	nop			; (mov r8, r8)
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012018:	b580      	push	{r7, lr}
 801201a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 801201c:	2001      	movs	r0, #1
 801201e:	f7ff ffd1 	bl	8011fc4 <CallNvmCtxCallback>
}
 8012022:	46c0      	nop			; (mov r8, r8)
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012028:	b580      	push	{r7, lr}
 801202a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 801202c:	2002      	movs	r0, #2
 801202e:	f7ff ffc9 	bl	8011fc4 <CallNvmCtxCallback>
}
 8012032:	46c0      	nop			; (mov r8, r8)
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012038:	b580      	push	{r7, lr}
 801203a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 801203c:	2003      	movs	r0, #3
 801203e:	f7ff ffc1 	bl	8011fc4 <CallNvmCtxCallback>
}
 8012042:	46c0      	nop			; (mov r8, r8)
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012048:	b580      	push	{r7, lr}
 801204a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 801204c:	2004      	movs	r0, #4
 801204e:	f7ff ffb9 	bl	8011fc4 <CallNvmCtxCallback>
}
 8012052:	46c0      	nop			; (mov r8, r8)
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 801205c:	2005      	movs	r0, #5
 801205e:	f7ff ffb1 	bl	8011fc4 <CallNvmCtxCallback>
}
 8012062:	46c0      	nop			; (mov r8, r8)
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8012068:	b580      	push	{r7, lr}
 801206a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 801206c:	2006      	movs	r0, #6
 801206e:	f7ff ffa9 	bl	8011fc4 <CallNvmCtxCallback>
}
 8012072:	46c0      	nop			; (mov r8, r8)
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8012078:	b580      	push	{r7, lr}
 801207a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801207c:	4b0a      	ldr	r3, [pc, #40]	; (80120a8 <IsRequestPending+0x30>)
 801207e:	4a0b      	ldr	r2, [pc, #44]	; (80120ac <IsRequestPending+0x34>)
 8012080:	5c9b      	ldrb	r3, [r3, r2]
 8012082:	2204      	movs	r2, #4
 8012084:	4013      	ands	r3, r2
 8012086:	b2db      	uxtb	r3, r3
 8012088:	2b00      	cmp	r3, #0
 801208a:	d107      	bne.n	801209c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 801208c:	4b06      	ldr	r3, [pc, #24]	; (80120a8 <IsRequestPending+0x30>)
 801208e:	4a07      	ldr	r2, [pc, #28]	; (80120ac <IsRequestPending+0x34>)
 8012090:	5c9b      	ldrb	r3, [r3, r2]
 8012092:	2201      	movs	r2, #1
 8012094:	4013      	ands	r3, r2
 8012096:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012098:	2b00      	cmp	r3, #0
 801209a:	d001      	beq.n	80120a0 <IsRequestPending+0x28>
    {
        return 1;
 801209c:	2301      	movs	r3, #1
 801209e:	e000      	b.n	80120a2 <IsRequestPending+0x2a>
    }
    return 0;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	0018      	movs	r0, r3
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	20000bb0 	.word	0x20000bb0
 80120ac:	00000481 	.word	0x00000481

080120b0 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80120b4:	4a08      	ldr	r2, [pc, #32]	; (80120d8 <LoRaMacIsBusy+0x28>)
 80120b6:	23d0      	movs	r3, #208	; 0xd0
 80120b8:	009b      	lsls	r3, r3, #2
 80120ba:	58d3      	ldr	r3, [r2, r3]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d106      	bne.n	80120ce <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80120c0:	4b05      	ldr	r3, [pc, #20]	; (80120d8 <LoRaMacIsBusy+0x28>)
 80120c2:	4a06      	ldr	r2, [pc, #24]	; (80120dc <LoRaMacIsBusy+0x2c>)
 80120c4:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80120c6:	2b01      	cmp	r3, #1
 80120c8:	d101      	bne.n	80120ce <LoRaMacIsBusy+0x1e>
    {
        return false;
 80120ca:	2300      	movs	r3, #0
 80120cc:	e000      	b.n	80120d0 <LoRaMacIsBusy+0x20>
    }
    return true;
 80120ce:	2301      	movs	r3, #1
}
 80120d0:	0018      	movs	r0, r3
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	46c0      	nop			; (mov r8, r8)
 80120d8:	20000bb0 	.word	0x20000bb0
 80120dc:	00000482 	.word	0x00000482

080120e0 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 80120e6:	1dfb      	adds	r3, r7, #7
 80120e8:	2200      	movs	r2, #0
 80120ea:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 80120ec:	f7fd f972 	bl	800f3d4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80120f0:	f001 fe8e 	bl	8013e10 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80120f4:	4b1b      	ldr	r3, [pc, #108]	; (8012164 <LoRaMacProcess+0x84>)
 80120f6:	4a1c      	ldr	r2, [pc, #112]	; (8012168 <LoRaMacProcess+0x88>)
 80120f8:	5c9b      	ldrb	r3, [r3, r2]
 80120fa:	2220      	movs	r2, #32
 80120fc:	4013      	ands	r3, r2
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	2b00      	cmp	r3, #0
 8012102:	d020      	beq.n	8012146 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012104:	2000      	movs	r0, #0
 8012106:	f7fd f9b1 	bl	800f46c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 801210a:	f7fd fb8d 	bl	800f828 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 801210e:	f7ff ffb3 	bl	8012078 <IsRequestPending>
 8012112:	1e03      	subs	r3, r0, #0
 8012114:	d008      	beq.n	8012128 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012116:	f7fd fb5b 	bl	800f7d0 <LoRaMacCheckForBeaconAcquisition>
 801211a:	0003      	movs	r3, r0
 801211c:	0019      	movs	r1, r3
 801211e:	1dfb      	adds	r3, r7, #7
 8012120:	1dfa      	adds	r2, r7, #7
 8012122:	7812      	ldrb	r2, [r2, #0]
 8012124:	430a      	orrs	r2, r1
 8012126:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012128:	1dfb      	adds	r3, r7, #7
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d103      	bne.n	8012138 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012130:	f7fd fb0c 	bl	800f74c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012134:	f7fd fa88 	bl	800f648 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012138:	f7fd f9ac 	bl	800f494 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 801213c:	f7fd fa10 	bl	800f560 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012140:	2001      	movs	r0, #1
 8012142:	f7fd f993 	bl	800f46c <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012146:	f7fd fa27 	bl	800f598 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801214a:	4a06      	ldr	r2, [pc, #24]	; (8012164 <LoRaMacProcess+0x84>)
 801214c:	2390      	movs	r3, #144	; 0x90
 801214e:	00db      	lsls	r3, r3, #3
 8012150:	5cd3      	ldrb	r3, [r2, r3]
 8012152:	2b02      	cmp	r3, #2
 8012154:	d101      	bne.n	801215a <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8012156:	f7ff f9d1 	bl	80114fc <OpenContinuousRxCWindow>
    }
}
 801215a:	46c0      	nop			; (mov r8, r8)
 801215c:	46bd      	mov	sp, r7
 801215e:	b002      	add	sp, #8
 8012160:	bd80      	pop	{r7, pc}
 8012162:	46c0      	nop			; (mov r8, r8)
 8012164:	20000bb0 	.word	0x20000bb0
 8012168:	00000481 	.word	0x00000481

0801216c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801216c:	b5b0      	push	{r4, r5, r7, lr}
 801216e:	b098      	sub	sp, #96	; 0x60
 8012170:	af02      	add	r7, sp, #8
 8012172:	6178      	str	r0, [r7, #20]
 8012174:	6139      	str	r1, [r7, #16]
 8012176:	230f      	movs	r3, #15
 8012178:	18fb      	adds	r3, r7, r3
 801217a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d002      	beq.n	8012188 <LoRaMacInitialization+0x1c>
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d101      	bne.n	801218c <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012188:	2303      	movs	r3, #3
 801218a:	e35e      	b.n	801284a <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d00b      	beq.n	80121ac <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012198:	2b00      	cmp	r3, #0
 801219a:	d007      	beq.n	80121ac <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d003      	beq.n	80121ac <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d101      	bne.n	80121b0 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80121ac:	2303      	movs	r3, #3
 80121ae:	e34c      	b.n	801284a <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80121b0:	230f      	movs	r3, #15
 80121b2:	18fb      	adds	r3, r7, r3
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	0018      	movs	r0, r3
 80121b8:	f004 fa32 	bl	8016620 <RegionIsActive>
 80121bc:	0003      	movs	r3, r0
 80121be:	001a      	movs	r2, r3
 80121c0:	2301      	movs	r3, #1
 80121c2:	4053      	eors	r3, r2
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d001      	beq.n	80121ce <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80121ca:	2309      	movs	r3, #9
 80121cc:	e33d      	b.n	801284a <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 80121ce:	4afd      	ldr	r2, [pc, #1012]	; (80125c4 <LoRaMacInitialization+0x458>)
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	0011      	movs	r1, r2
 80121d4:	0018      	movs	r0, r3
 80121d6:	f002 f9cf 	bl	8014578 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 80121da:	23b6      	movs	r3, #182	; 0xb6
 80121dc:	005a      	lsls	r2, r3, #1
 80121de:	4bfa      	ldr	r3, [pc, #1000]	; (80125c8 <LoRaMacInitialization+0x45c>)
 80121e0:	2100      	movs	r1, #0
 80121e2:	0018      	movs	r0, r3
 80121e4:	f006 feee 	bl	8018fc4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80121e8:	4af8      	ldr	r2, [pc, #992]	; (80125cc <LoRaMacInitialization+0x460>)
 80121ea:	4bf9      	ldr	r3, [pc, #996]	; (80125d0 <LoRaMacInitialization+0x464>)
 80121ec:	2100      	movs	r1, #0
 80121ee:	0018      	movs	r0, r3
 80121f0:	f006 fee8 	bl	8018fc4 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 80121f4:	4bf6      	ldr	r3, [pc, #984]	; (80125d0 <LoRaMacInitialization+0x464>)
 80121f6:	49f7      	ldr	r1, [pc, #988]	; (80125d4 <LoRaMacInitialization+0x468>)
 80121f8:	4af3      	ldr	r2, [pc, #972]	; (80125c8 <LoRaMacInitialization+0x45c>)
 80121fa:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80121fc:	4bf4      	ldr	r3, [pc, #976]	; (80125d0 <LoRaMacInitialization+0x464>)
 80121fe:	4af6      	ldr	r2, [pc, #984]	; (80125d8 <LoRaMacInitialization+0x46c>)
 8012200:	2101      	movs	r1, #1
 8012202:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8012204:	4bf2      	ldr	r3, [pc, #968]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012206:	4af5      	ldr	r2, [pc, #980]	; (80125dc <LoRaMacInitialization+0x470>)
 8012208:	2101      	movs	r1, #1
 801220a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 801220c:	4bf0      	ldr	r3, [pc, #960]	; (80125d0 <LoRaMacInitialization+0x464>)
 801220e:	4af1      	ldr	r2, [pc, #964]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012210:	589b      	ldr	r3, [r3, r2]
 8012212:	220f      	movs	r2, #15
 8012214:	18ba      	adds	r2, r7, r2
 8012216:	7812      	ldrb	r2, [r2, #0]
 8012218:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 801221a:	4bed      	ldr	r3, [pc, #948]	; (80125d0 <LoRaMacInitialization+0x464>)
 801221c:	4aed      	ldr	r2, [pc, #948]	; (80125d4 <LoRaMacInitialization+0x468>)
 801221e:	589b      	ldr	r3, [r3, r2]
 8012220:	227c      	movs	r2, #124	; 0x7c
 8012222:	2100      	movs	r1, #0
 8012224:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8012226:	4bea      	ldr	r3, [pc, #936]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012228:	4aea      	ldr	r2, [pc, #936]	; (80125d4 <LoRaMacInitialization+0x468>)
 801222a:	589b      	ldr	r3, [r3, r2]
 801222c:	22ca      	movs	r2, #202	; 0xca
 801222e:	2100      	movs	r1, #0
 8012230:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012232:	4be7      	ldr	r3, [pc, #924]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012234:	4ae7      	ldr	r2, [pc, #924]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012236:	589a      	ldr	r2, [r3, r2]
 8012238:	23b0      	movs	r3, #176	; 0xb0
 801223a:	005b      	lsls	r3, r3, #1
 801223c:	49e8      	ldr	r1, [pc, #928]	; (80125e0 <LoRaMacInitialization+0x474>)
 801223e:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012240:	2550      	movs	r5, #80	; 0x50
 8012242:	197b      	adds	r3, r7, r5
 8012244:	220f      	movs	r2, #15
 8012246:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012248:	4be1      	ldr	r3, [pc, #900]	; (80125d0 <LoRaMacInitialization+0x464>)
 801224a:	4ae2      	ldr	r2, [pc, #904]	; (80125d4 <LoRaMacInitialization+0x468>)
 801224c:	589b      	ldr	r3, [r3, r2]
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	197a      	adds	r2, r7, r5
 8012252:	0011      	movs	r1, r2
 8012254:	0018      	movs	r0, r3
 8012256:	f004 f9f4 	bl	8016642 <RegionGetPhyParam>
 801225a:	0003      	movs	r3, r0
 801225c:	001a      	movs	r2, r3
 801225e:	244c      	movs	r4, #76	; 0x4c
 8012260:	193b      	adds	r3, r7, r4
 8012262:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8012264:	193b      	adds	r3, r7, r4
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	4bd9      	ldr	r3, [pc, #868]	; (80125d0 <LoRaMacInitialization+0x464>)
 801226a:	49da      	ldr	r1, [pc, #872]	; (80125d4 <LoRaMacInitialization+0x468>)
 801226c:	585b      	ldr	r3, [r3, r1]
 801226e:	1e51      	subs	r1, r2, #1
 8012270:	418a      	sbcs	r2, r1
 8012272:	b2d1      	uxtb	r1, r2
 8012274:	22c9      	movs	r2, #201	; 0xc9
 8012276:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012278:	197b      	adds	r3, r7, r5
 801227a:	220a      	movs	r2, #10
 801227c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801227e:	4bd4      	ldr	r3, [pc, #848]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012280:	4ad4      	ldr	r2, [pc, #848]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012282:	589b      	ldr	r3, [r3, r2]
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	197a      	adds	r2, r7, r5
 8012288:	0011      	movs	r1, r2
 801228a:	0018      	movs	r0, r3
 801228c:	f004 f9d9 	bl	8016642 <RegionGetPhyParam>
 8012290:	0003      	movs	r3, r0
 8012292:	001a      	movs	r2, r3
 8012294:	193b      	adds	r3, r7, r4
 8012296:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8012298:	193b      	adds	r3, r7, r4
 801229a:	6819      	ldr	r1, [r3, #0]
 801229c:	4bcc      	ldr	r3, [pc, #816]	; (80125d0 <LoRaMacInitialization+0x464>)
 801229e:	4acd      	ldr	r2, [pc, #820]	; (80125d4 <LoRaMacInitialization+0x468>)
 80122a0:	589b      	ldr	r3, [r3, r2]
 80122a2:	b24a      	sxtb	r2, r1
 80122a4:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 80122a6:	197b      	adds	r3, r7, r5
 80122a8:	2206      	movs	r2, #6
 80122aa:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80122ac:	4bc8      	ldr	r3, [pc, #800]	; (80125d0 <LoRaMacInitialization+0x464>)
 80122ae:	4ac9      	ldr	r2, [pc, #804]	; (80125d4 <LoRaMacInitialization+0x468>)
 80122b0:	589b      	ldr	r3, [r3, r2]
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	197a      	adds	r2, r7, r5
 80122b6:	0011      	movs	r1, r2
 80122b8:	0018      	movs	r0, r3
 80122ba:	f004 f9c2 	bl	8016642 <RegionGetPhyParam>
 80122be:	0003      	movs	r3, r0
 80122c0:	001a      	movs	r2, r3
 80122c2:	193b      	adds	r3, r7, r4
 80122c4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 80122c6:	193b      	adds	r3, r7, r4
 80122c8:	6819      	ldr	r1, [r3, #0]
 80122ca:	4bc1      	ldr	r3, [pc, #772]	; (80125d0 <LoRaMacInitialization+0x464>)
 80122cc:	4ac1      	ldr	r2, [pc, #772]	; (80125d4 <LoRaMacInitialization+0x468>)
 80122ce:	589b      	ldr	r3, [r3, r2]
 80122d0:	b24a      	sxtb	r2, r1
 80122d2:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80122d4:	197b      	adds	r3, r7, r5
 80122d6:	2210      	movs	r2, #16
 80122d8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80122da:	4bbd      	ldr	r3, [pc, #756]	; (80125d0 <LoRaMacInitialization+0x464>)
 80122dc:	4abd      	ldr	r2, [pc, #756]	; (80125d4 <LoRaMacInitialization+0x468>)
 80122de:	589b      	ldr	r3, [r3, r2]
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	197a      	adds	r2, r7, r5
 80122e4:	0011      	movs	r1, r2
 80122e6:	0018      	movs	r0, r3
 80122e8:	f004 f9ab 	bl	8016642 <RegionGetPhyParam>
 80122ec:	0003      	movs	r3, r0
 80122ee:	001a      	movs	r2, r3
 80122f0:	193b      	adds	r3, r7, r4
 80122f2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80122f4:	4bb6      	ldr	r3, [pc, #728]	; (80125d0 <LoRaMacInitialization+0x464>)
 80122f6:	4ab7      	ldr	r2, [pc, #732]	; (80125d4 <LoRaMacInitialization+0x468>)
 80122f8:	589b      	ldr	r3, [r3, r2]
 80122fa:	193a      	adds	r2, r7, r4
 80122fc:	6812      	ldr	r2, [r2, #0]
 80122fe:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012300:	197b      	adds	r3, r7, r5
 8012302:	2211      	movs	r2, #17
 8012304:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012306:	4bb2      	ldr	r3, [pc, #712]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012308:	4ab2      	ldr	r2, [pc, #712]	; (80125d4 <LoRaMacInitialization+0x468>)
 801230a:	589b      	ldr	r3, [r3, r2]
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	197a      	adds	r2, r7, r5
 8012310:	0011      	movs	r1, r2
 8012312:	0018      	movs	r0, r3
 8012314:	f004 f995 	bl	8016642 <RegionGetPhyParam>
 8012318:	0003      	movs	r3, r0
 801231a:	001a      	movs	r2, r3
 801231c:	193b      	adds	r3, r7, r4
 801231e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012320:	4bab      	ldr	r3, [pc, #684]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012322:	4aac      	ldr	r2, [pc, #688]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012324:	589b      	ldr	r3, [r3, r2]
 8012326:	193a      	adds	r2, r7, r4
 8012328:	6812      	ldr	r2, [r2, #0]
 801232a:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801232c:	197b      	adds	r3, r7, r5
 801232e:	2212      	movs	r2, #18
 8012330:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012332:	4ba7      	ldr	r3, [pc, #668]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012334:	4aa7      	ldr	r2, [pc, #668]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012336:	589b      	ldr	r3, [r3, r2]
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	197a      	adds	r2, r7, r5
 801233c:	0011      	movs	r1, r2
 801233e:	0018      	movs	r0, r3
 8012340:	f004 f97f 	bl	8016642 <RegionGetPhyParam>
 8012344:	0003      	movs	r3, r0
 8012346:	001a      	movs	r2, r3
 8012348:	193b      	adds	r3, r7, r4
 801234a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801234c:	4ba0      	ldr	r3, [pc, #640]	; (80125d0 <LoRaMacInitialization+0x464>)
 801234e:	4aa1      	ldr	r2, [pc, #644]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012350:	589b      	ldr	r3, [r3, r2]
 8012352:	193a      	adds	r2, r7, r4
 8012354:	6812      	ldr	r2, [r2, #0]
 8012356:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012358:	197b      	adds	r3, r7, r5
 801235a:	2213      	movs	r2, #19
 801235c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801235e:	4b9c      	ldr	r3, [pc, #624]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012360:	4a9c      	ldr	r2, [pc, #624]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012362:	589b      	ldr	r3, [r3, r2]
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	197a      	adds	r2, r7, r5
 8012368:	0011      	movs	r1, r2
 801236a:	0018      	movs	r0, r3
 801236c:	f004 f969 	bl	8016642 <RegionGetPhyParam>
 8012370:	0003      	movs	r3, r0
 8012372:	001a      	movs	r2, r3
 8012374:	193b      	adds	r3, r7, r4
 8012376:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012378:	4b95      	ldr	r3, [pc, #596]	; (80125d0 <LoRaMacInitialization+0x464>)
 801237a:	4a96      	ldr	r2, [pc, #600]	; (80125d4 <LoRaMacInitialization+0x468>)
 801237c:	589b      	ldr	r3, [r3, r2]
 801237e:	193a      	adds	r2, r7, r4
 8012380:	6812      	ldr	r2, [r2, #0]
 8012382:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012384:	197b      	adds	r3, r7, r5
 8012386:	2214      	movs	r2, #20
 8012388:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801238a:	4b91      	ldr	r3, [pc, #580]	; (80125d0 <LoRaMacInitialization+0x464>)
 801238c:	4a91      	ldr	r2, [pc, #580]	; (80125d4 <LoRaMacInitialization+0x468>)
 801238e:	589b      	ldr	r3, [r3, r2]
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	197a      	adds	r2, r7, r5
 8012394:	0011      	movs	r1, r2
 8012396:	0018      	movs	r0, r3
 8012398:	f004 f953 	bl	8016642 <RegionGetPhyParam>
 801239c:	0003      	movs	r3, r0
 801239e:	001a      	movs	r2, r3
 80123a0:	193b      	adds	r3, r7, r4
 80123a2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80123a4:	4b8a      	ldr	r3, [pc, #552]	; (80125d0 <LoRaMacInitialization+0x464>)
 80123a6:	4a8b      	ldr	r2, [pc, #556]	; (80125d4 <LoRaMacInitialization+0x468>)
 80123a8:	589b      	ldr	r3, [r3, r2]
 80123aa:	193a      	adds	r2, r7, r4
 80123ac:	6812      	ldr	r2, [r2, #0]
 80123ae:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80123b0:	197b      	adds	r3, r7, r5
 80123b2:	2217      	movs	r2, #23
 80123b4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80123b6:	4b86      	ldr	r3, [pc, #536]	; (80125d0 <LoRaMacInitialization+0x464>)
 80123b8:	4a86      	ldr	r2, [pc, #536]	; (80125d4 <LoRaMacInitialization+0x468>)
 80123ba:	589b      	ldr	r3, [r3, r2]
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	197a      	adds	r2, r7, r5
 80123c0:	0011      	movs	r1, r2
 80123c2:	0018      	movs	r0, r3
 80123c4:	f004 f93d 	bl	8016642 <RegionGetPhyParam>
 80123c8:	0003      	movs	r3, r0
 80123ca:	001a      	movs	r2, r3
 80123cc:	193b      	adds	r3, r7, r4
 80123ce:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80123d0:	193b      	adds	r3, r7, r4
 80123d2:	6819      	ldr	r1, [r3, #0]
 80123d4:	4b7e      	ldr	r3, [pc, #504]	; (80125d0 <LoRaMacInitialization+0x464>)
 80123d6:	4a7f      	ldr	r2, [pc, #508]	; (80125d4 <LoRaMacInitialization+0x468>)
 80123d8:	589b      	ldr	r3, [r3, r2]
 80123da:	b2c9      	uxtb	r1, r1
 80123dc:	2225      	movs	r2, #37	; 0x25
 80123de:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80123e0:	197b      	adds	r3, r7, r5
 80123e2:	2218      	movs	r2, #24
 80123e4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80123e6:	4b7a      	ldr	r3, [pc, #488]	; (80125d0 <LoRaMacInitialization+0x464>)
 80123e8:	4a7a      	ldr	r2, [pc, #488]	; (80125d4 <LoRaMacInitialization+0x468>)
 80123ea:	589b      	ldr	r3, [r3, r2]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	197a      	adds	r2, r7, r5
 80123f0:	0011      	movs	r1, r2
 80123f2:	0018      	movs	r0, r3
 80123f4:	f004 f925 	bl	8016642 <RegionGetPhyParam>
 80123f8:	0003      	movs	r3, r0
 80123fa:	001a      	movs	r2, r3
 80123fc:	193b      	adds	r3, r7, r4
 80123fe:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012400:	4b73      	ldr	r3, [pc, #460]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012402:	4a74      	ldr	r2, [pc, #464]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012404:	589b      	ldr	r3, [r3, r2]
 8012406:	193a      	adds	r2, r7, r4
 8012408:	6812      	ldr	r2, [r2, #0]
 801240a:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801240c:	4b70      	ldr	r3, [pc, #448]	; (80125d0 <LoRaMacInitialization+0x464>)
 801240e:	4a71      	ldr	r2, [pc, #452]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012410:	589b      	ldr	r3, [r3, r2]
 8012412:	193a      	adds	r2, r7, r4
 8012414:	6812      	ldr	r2, [r2, #0]
 8012416:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012418:	197b      	adds	r3, r7, r5
 801241a:	2219      	movs	r2, #25
 801241c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801241e:	4b6c      	ldr	r3, [pc, #432]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012420:	4a6c      	ldr	r2, [pc, #432]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012422:	589b      	ldr	r3, [r3, r2]
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	197a      	adds	r2, r7, r5
 8012428:	0011      	movs	r1, r2
 801242a:	0018      	movs	r0, r3
 801242c:	f004 f909 	bl	8016642 <RegionGetPhyParam>
 8012430:	0003      	movs	r3, r0
 8012432:	001a      	movs	r2, r3
 8012434:	193b      	adds	r3, r7, r4
 8012436:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012438:	193b      	adds	r3, r7, r4
 801243a:	6819      	ldr	r1, [r3, #0]
 801243c:	4b64      	ldr	r3, [pc, #400]	; (80125d0 <LoRaMacInitialization+0x464>)
 801243e:	4a65      	ldr	r2, [pc, #404]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012440:	589b      	ldr	r3, [r3, r2]
 8012442:	b2c9      	uxtb	r1, r1
 8012444:	222c      	movs	r2, #44	; 0x2c
 8012446:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012448:	193b      	adds	r3, r7, r4
 801244a:	6819      	ldr	r1, [r3, #0]
 801244c:	4b60      	ldr	r3, [pc, #384]	; (80125d0 <LoRaMacInitialization+0x464>)
 801244e:	4a61      	ldr	r2, [pc, #388]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012450:	589b      	ldr	r3, [r3, r2]
 8012452:	b2c9      	uxtb	r1, r1
 8012454:	2234      	movs	r2, #52	; 0x34
 8012456:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012458:	197b      	adds	r3, r7, r5
 801245a:	221e      	movs	r2, #30
 801245c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801245e:	4b5c      	ldr	r3, [pc, #368]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012460:	4a5c      	ldr	r2, [pc, #368]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012462:	589b      	ldr	r3, [r3, r2]
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	197a      	adds	r2, r7, r5
 8012468:	0011      	movs	r1, r2
 801246a:	0018      	movs	r0, r3
 801246c:	f004 f8e9 	bl	8016642 <RegionGetPhyParam>
 8012470:	0003      	movs	r3, r0
 8012472:	001a      	movs	r2, r3
 8012474:	193b      	adds	r3, r7, r4
 8012476:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012478:	193b      	adds	r3, r7, r4
 801247a:	6819      	ldr	r1, [r3, #0]
 801247c:	4b54      	ldr	r3, [pc, #336]	; (80125d0 <LoRaMacInitialization+0x464>)
 801247e:	4a55      	ldr	r2, [pc, #340]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012480:	589b      	ldr	r3, [r3, r2]
 8012482:	b2c9      	uxtb	r1, r1
 8012484:	2238      	movs	r2, #56	; 0x38
 8012486:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012488:	197b      	adds	r3, r7, r5
 801248a:	221f      	movs	r2, #31
 801248c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801248e:	4b50      	ldr	r3, [pc, #320]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012490:	4a50      	ldr	r2, [pc, #320]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012492:	589b      	ldr	r3, [r3, r2]
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	197a      	adds	r2, r7, r5
 8012498:	0011      	movs	r1, r2
 801249a:	0018      	movs	r0, r3
 801249c:	f004 f8d1 	bl	8016642 <RegionGetPhyParam>
 80124a0:	0003      	movs	r3, r0
 80124a2:	001a      	movs	r2, r3
 80124a4:	193b      	adds	r3, r7, r4
 80124a6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80124a8:	193b      	adds	r3, r7, r4
 80124aa:	6819      	ldr	r1, [r3, #0]
 80124ac:	4b48      	ldr	r3, [pc, #288]	; (80125d0 <LoRaMacInitialization+0x464>)
 80124ae:	4a49      	ldr	r2, [pc, #292]	; (80125d4 <LoRaMacInitialization+0x468>)
 80124b0:	589b      	ldr	r3, [r3, r2]
 80124b2:	b2c9      	uxtb	r1, r1
 80124b4:	2239      	movs	r2, #57	; 0x39
 80124b6:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80124b8:	197b      	adds	r3, r7, r5
 80124ba:	2220      	movs	r2, #32
 80124bc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80124be:	4b44      	ldr	r3, [pc, #272]	; (80125d0 <LoRaMacInitialization+0x464>)
 80124c0:	4a44      	ldr	r2, [pc, #272]	; (80125d4 <LoRaMacInitialization+0x468>)
 80124c2:	589b      	ldr	r3, [r3, r2]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	197a      	adds	r2, r7, r5
 80124c8:	0011      	movs	r1, r2
 80124ca:	0018      	movs	r0, r3
 80124cc:	f004 f8b9 	bl	8016642 <RegionGetPhyParam>
 80124d0:	0003      	movs	r3, r0
 80124d2:	001a      	movs	r2, r3
 80124d4:	193b      	adds	r3, r7, r4
 80124d6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 80124d8:	4b3d      	ldr	r3, [pc, #244]	; (80125d0 <LoRaMacInitialization+0x464>)
 80124da:	4a3e      	ldr	r2, [pc, #248]	; (80125d4 <LoRaMacInitialization+0x468>)
 80124dc:	589b      	ldr	r3, [r3, r2]
 80124de:	193a      	adds	r2, r7, r4
 80124e0:	6812      	ldr	r2, [r2, #0]
 80124e2:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80124e4:	197b      	adds	r3, r7, r5
 80124e6:	2221      	movs	r2, #33	; 0x21
 80124e8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80124ea:	4b39      	ldr	r3, [pc, #228]	; (80125d0 <LoRaMacInitialization+0x464>)
 80124ec:	4a39      	ldr	r2, [pc, #228]	; (80125d4 <LoRaMacInitialization+0x468>)
 80124ee:	589b      	ldr	r3, [r3, r2]
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	197a      	adds	r2, r7, r5
 80124f4:	0011      	movs	r1, r2
 80124f6:	0018      	movs	r0, r3
 80124f8:	f004 f8a3 	bl	8016642 <RegionGetPhyParam>
 80124fc:	0003      	movs	r3, r0
 80124fe:	001a      	movs	r2, r3
 8012500:	193b      	adds	r3, r7, r4
 8012502:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012504:	4b32      	ldr	r3, [pc, #200]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012506:	4a33      	ldr	r2, [pc, #204]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012508:	589b      	ldr	r3, [r3, r2]
 801250a:	193a      	adds	r2, r7, r4
 801250c:	6812      	ldr	r2, [r2, #0]
 801250e:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012510:	197b      	adds	r3, r7, r5
 8012512:	220b      	movs	r2, #11
 8012514:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012516:	4b2e      	ldr	r3, [pc, #184]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012518:	4a2e      	ldr	r2, [pc, #184]	; (80125d4 <LoRaMacInitialization+0x468>)
 801251a:	589b      	ldr	r3, [r3, r2]
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	197a      	adds	r2, r7, r5
 8012520:	0011      	movs	r1, r2
 8012522:	0018      	movs	r0, r3
 8012524:	f004 f88d 	bl	8016642 <RegionGetPhyParam>
 8012528:	0003      	movs	r3, r0
 801252a:	001a      	movs	r2, r3
 801252c:	193b      	adds	r3, r7, r4
 801252e:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8012530:	193b      	adds	r3, r7, r4
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	b299      	uxth	r1, r3
 8012536:	4a26      	ldr	r2, [pc, #152]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012538:	23fd      	movs	r3, #253	; 0xfd
 801253a:	009b      	lsls	r3, r3, #2
 801253c:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801253e:	197b      	adds	r3, r7, r5
 8012540:	220c      	movs	r2, #12
 8012542:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012544:	4b22      	ldr	r3, [pc, #136]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012546:	4a23      	ldr	r2, [pc, #140]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012548:	589b      	ldr	r3, [r3, r2]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	197a      	adds	r2, r7, r5
 801254e:	0011      	movs	r1, r2
 8012550:	0018      	movs	r0, r3
 8012552:	f004 f876 	bl	8016642 <RegionGetPhyParam>
 8012556:	0003      	movs	r3, r0
 8012558:	001a      	movs	r2, r3
 801255a:	193b      	adds	r3, r7, r4
 801255c:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 801255e:	193b      	adds	r3, r7, r4
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	b299      	uxth	r1, r3
 8012564:	4b1a      	ldr	r3, [pc, #104]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012566:	4a1f      	ldr	r2, [pc, #124]	; (80125e4 <LoRaMacInitialization+0x478>)
 8012568:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 801256a:	4b19      	ldr	r3, [pc, #100]	; (80125d0 <LoRaMacInitialization+0x464>)
 801256c:	4a19      	ldr	r2, [pc, #100]	; (80125d4 <LoRaMacInitialization+0x468>)
 801256e:	589b      	ldr	r3, [r3, r2]
 8012570:	2224      	movs	r2, #36	; 0x24
 8012572:	2101      	movs	r1, #1
 8012574:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8012576:	4b16      	ldr	r3, [pc, #88]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012578:	4a16      	ldr	r2, [pc, #88]	; (80125d4 <LoRaMacInitialization+0x468>)
 801257a:	589b      	ldr	r3, [r3, r2]
 801257c:	220a      	movs	r2, #10
 801257e:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8012580:	4b13      	ldr	r3, [pc, #76]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012582:	4a14      	ldr	r2, [pc, #80]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012584:	589b      	ldr	r3, [r3, r2]
 8012586:	2206      	movs	r2, #6
 8012588:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 801258a:	4b11      	ldr	r3, [pc, #68]	; (80125d0 <LoRaMacInitialization+0x464>)
 801258c:	4a11      	ldr	r2, [pc, #68]	; (80125d4 <LoRaMacInitialization+0x468>)
 801258e:	589b      	ldr	r3, [r3, r2]
 8012590:	4a0f      	ldr	r2, [pc, #60]	; (80125d0 <LoRaMacInitialization+0x464>)
 8012592:	4910      	ldr	r1, [pc, #64]	; (80125d4 <LoRaMacInitialization+0x468>)
 8012594:	5852      	ldr	r2, [r2, r1]
 8012596:	689b      	ldr	r3, [r3, #8]
 8012598:	2188      	movs	r1, #136	; 0x88
 801259a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 801259c:	4b0c      	ldr	r3, [pc, #48]	; (80125d0 <LoRaMacInitialization+0x464>)
 801259e:	4a0d      	ldr	r2, [pc, #52]	; (80125d4 <LoRaMacInitialization+0x468>)
 80125a0:	589a      	ldr	r2, [r3, r2]
 80125a2:	4b0b      	ldr	r3, [pc, #44]	; (80125d0 <LoRaMacInitialization+0x464>)
 80125a4:	490b      	ldr	r1, [pc, #44]	; (80125d4 <LoRaMacInitialization+0x468>)
 80125a6:	585b      	ldr	r3, [r3, r1]
 80125a8:	7b11      	ldrb	r1, [r2, #12]
 80125aa:	228c      	movs	r2, #140	; 0x8c
 80125ac:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 80125ae:	4b08      	ldr	r3, [pc, #32]	; (80125d0 <LoRaMacInitialization+0x464>)
 80125b0:	4a08      	ldr	r2, [pc, #32]	; (80125d4 <LoRaMacInitialization+0x468>)
 80125b2:	589b      	ldr	r3, [r3, r2]
 80125b4:	4a06      	ldr	r2, [pc, #24]	; (80125d0 <LoRaMacInitialization+0x464>)
 80125b6:	4907      	ldr	r1, [pc, #28]	; (80125d4 <LoRaMacInitialization+0x468>)
 80125b8:	5852      	ldr	r2, [r2, r1]
 80125ba:	691b      	ldr	r3, [r3, #16]
 80125bc:	2190      	movs	r1, #144	; 0x90
 80125be:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 80125c0:	4b03      	ldr	r3, [pc, #12]	; (80125d0 <LoRaMacInitialization+0x464>)
 80125c2:	e011      	b.n	80125e8 <LoRaMacInitialization+0x47c>
 80125c4:	08012069 	.word	0x08012069
 80125c8:	2000103c 	.word	0x2000103c
 80125cc:	0000048c 	.word	0x0000048c
 80125d0:	20000bb0 	.word	0x20000bb0
 80125d4:	00000484 	.word	0x00000484
 80125d8:	00000412 	.word	0x00000412
 80125dc:	00000411 	.word	0x00000411
 80125e0:	01000300 	.word	0x01000300
 80125e4:	000003f6 	.word	0x000003f6
 80125e8:	4a9a      	ldr	r2, [pc, #616]	; (8012854 <LoRaMacInitialization+0x6e8>)
 80125ea:	589b      	ldr	r3, [r3, r2]
 80125ec:	4a9a      	ldr	r2, [pc, #616]	; (8012858 <LoRaMacInitialization+0x6ec>)
 80125ee:	4999      	ldr	r1, [pc, #612]	; (8012854 <LoRaMacInitialization+0x6e8>)
 80125f0:	5852      	ldr	r2, [r2, r1]
 80125f2:	695b      	ldr	r3, [r3, #20]
 80125f4:	2194      	movs	r1, #148	; 0x94
 80125f6:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 80125f8:	4b97      	ldr	r3, [pc, #604]	; (8012858 <LoRaMacInitialization+0x6ec>)
 80125fa:	4a96      	ldr	r2, [pc, #600]	; (8012854 <LoRaMacInitialization+0x6e8>)
 80125fc:	589b      	ldr	r3, [r3, r2]
 80125fe:	4a96      	ldr	r2, [pc, #600]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012600:	4994      	ldr	r1, [pc, #592]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012602:	5852      	ldr	r2, [r2, r1]
 8012604:	699b      	ldr	r3, [r3, #24]
 8012606:	2198      	movs	r1, #152	; 0x98
 8012608:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 801260a:	4b93      	ldr	r3, [pc, #588]	; (8012858 <LoRaMacInitialization+0x6ec>)
 801260c:	4a91      	ldr	r2, [pc, #580]	; (8012854 <LoRaMacInitialization+0x6e8>)
 801260e:	589b      	ldr	r3, [r3, r2]
 8012610:	4a91      	ldr	r2, [pc, #580]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012612:	4990      	ldr	r1, [pc, #576]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012614:	5852      	ldr	r2, [r2, r1]
 8012616:	69db      	ldr	r3, [r3, #28]
 8012618:	219c      	movs	r1, #156	; 0x9c
 801261a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 801261c:	4b8e      	ldr	r3, [pc, #568]	; (8012858 <LoRaMacInitialization+0x6ec>)
 801261e:	4a8d      	ldr	r2, [pc, #564]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012620:	589b      	ldr	r3, [r3, r2]
 8012622:	4a8d      	ldr	r2, [pc, #564]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012624:	498b      	ldr	r1, [pc, #556]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012626:	5852      	ldr	r2, [r2, r1]
 8012628:	6a1b      	ldr	r3, [r3, #32]
 801262a:	21a0      	movs	r1, #160	; 0xa0
 801262c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 801262e:	4b8a      	ldr	r3, [pc, #552]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012630:	4a88      	ldr	r2, [pc, #544]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012632:	589a      	ldr	r2, [r3, r2]
 8012634:	4b88      	ldr	r3, [pc, #544]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012636:	4987      	ldr	r1, [pc, #540]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012638:	585b      	ldr	r3, [r3, r1]
 801263a:	2124      	movs	r1, #36	; 0x24
 801263c:	5c51      	ldrb	r1, [r2, r1]
 801263e:	22a4      	movs	r2, #164	; 0xa4
 8012640:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012642:	211c      	movs	r1, #28
 8012644:	187b      	adds	r3, r7, r1
 8012646:	2200      	movs	r2, #0
 8012648:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 801264a:	187b      	adds	r3, r7, r1
 801264c:	2200      	movs	r2, #0
 801264e:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012650:	4b81      	ldr	r3, [pc, #516]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012652:	4a80      	ldr	r2, [pc, #512]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012654:	589b      	ldr	r3, [r3, r2]
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	187a      	adds	r2, r7, r1
 801265a:	0011      	movs	r1, r2
 801265c:	0018      	movs	r0, r3
 801265e:	f004 f82b 	bl	80166b8 <RegionInitDefaults>

    ResetMacParameters( );
 8012662:	f7fe fe19 	bl	8011298 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8012666:	4b7c      	ldr	r3, [pc, #496]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012668:	4a7a      	ldr	r2, [pc, #488]	; (8012854 <LoRaMacInitialization+0x6e8>)
 801266a:	589b      	ldr	r3, [r3, r2]
 801266c:	227d      	movs	r2, #125	; 0x7d
 801266e:	2101      	movs	r1, #1
 8012670:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 8012672:	4a79      	ldr	r2, [pc, #484]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012674:	23d1      	movs	r3, #209	; 0xd1
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	6979      	ldr	r1, [r7, #20]
 801267a:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 801267c:	4a76      	ldr	r2, [pc, #472]	; (8012858 <LoRaMacInitialization+0x6ec>)
 801267e:	23d2      	movs	r3, #210	; 0xd2
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	6939      	ldr	r1, [r7, #16]
 8012684:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 8012686:	4b74      	ldr	r3, [pc, #464]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012688:	4a74      	ldr	r2, [pc, #464]	; (801285c <LoRaMacInitialization+0x6f0>)
 801268a:	2100      	movs	r1, #0
 801268c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 801268e:	4a72      	ldr	r2, [pc, #456]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012690:	23d0      	movs	r3, #208	; 0xd0
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	2101      	movs	r1, #1
 8012696:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8012698:	4b6f      	ldr	r3, [pc, #444]	; (8012858 <LoRaMacInitialization+0x6ec>)
 801269a:	4a6e      	ldr	r2, [pc, #440]	; (8012854 <LoRaMacInitialization+0x6e8>)
 801269c:	589a      	ldr	r2, [r3, r2]
 801269e:	23a8      	movs	r3, #168	; 0xa8
 80126a0:	005b      	lsls	r3, r3, #1
 80126a2:	2100      	movs	r1, #0
 80126a4:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80126a6:	4b6c      	ldr	r3, [pc, #432]	; (8012858 <LoRaMacInitialization+0x6ec>)
 80126a8:	4a6a      	ldr	r2, [pc, #424]	; (8012854 <LoRaMacInitialization+0x6e8>)
 80126aa:	589a      	ldr	r2, [r3, r2]
 80126ac:	23aa      	movs	r3, #170	; 0xaa
 80126ae:	005b      	lsls	r3, r3, #1
 80126b0:	2100      	movs	r1, #0
 80126b2:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80126b4:	4b6a      	ldr	r3, [pc, #424]	; (8012860 <LoRaMacInitialization+0x6f4>)
 80126b6:	2201      	movs	r2, #1
 80126b8:	4251      	negs	r1, r2
 80126ba:	486a      	ldr	r0, [pc, #424]	; (8012864 <LoRaMacInitialization+0x6f8>)
 80126bc:	2200      	movs	r2, #0
 80126be:	9200      	str	r2, [sp, #0]
 80126c0:	2200      	movs	r2, #0
 80126c2:	f009 ff09 	bl	801c4d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80126c6:	4b68      	ldr	r3, [pc, #416]	; (8012868 <LoRaMacInitialization+0x6fc>)
 80126c8:	2201      	movs	r2, #1
 80126ca:	4251      	negs	r1, r2
 80126cc:	4867      	ldr	r0, [pc, #412]	; (801286c <LoRaMacInitialization+0x700>)
 80126ce:	2200      	movs	r2, #0
 80126d0:	9200      	str	r2, [sp, #0]
 80126d2:	2200      	movs	r2, #0
 80126d4:	f009 ff00 	bl	801c4d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80126d8:	4b65      	ldr	r3, [pc, #404]	; (8012870 <LoRaMacInitialization+0x704>)
 80126da:	2201      	movs	r2, #1
 80126dc:	4251      	negs	r1, r2
 80126de:	4865      	ldr	r0, [pc, #404]	; (8012874 <LoRaMacInitialization+0x708>)
 80126e0:	2200      	movs	r2, #0
 80126e2:	9200      	str	r2, [sp, #0]
 80126e4:	2200      	movs	r2, #0
 80126e6:	f009 fef7 	bl	801c4d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80126ea:	4b63      	ldr	r3, [pc, #396]	; (8012878 <LoRaMacInitialization+0x70c>)
 80126ec:	2201      	movs	r2, #1
 80126ee:	4251      	negs	r1, r2
 80126f0:	4862      	ldr	r0, [pc, #392]	; (801287c <LoRaMacInitialization+0x710>)
 80126f2:	2200      	movs	r2, #0
 80126f4:	9200      	str	r2, [sp, #0]
 80126f6:	2200      	movs	r2, #0
 80126f8:	f009 feee 	bl	801c4d8 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 80126fc:	4b56      	ldr	r3, [pc, #344]	; (8012858 <LoRaMacInitialization+0x6ec>)
 80126fe:	4a55      	ldr	r2, [pc, #340]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012700:	589d      	ldr	r5, [r3, r2]
 8012702:	23ac      	movs	r3, #172	; 0xac
 8012704:	005c      	lsls	r4, r3, #1
 8012706:	003b      	movs	r3, r7
 8012708:	0018      	movs	r0, r3
 801270a:	f009 feb5 	bl	801c478 <SysTimeGetMcuTime>
 801270e:	003a      	movs	r2, r7
 8012710:	192b      	adds	r3, r5, r4
 8012712:	ca03      	ldmia	r2!, {r0, r1}
 8012714:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012716:	4a50      	ldr	r2, [pc, #320]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012718:	23d3      	movs	r3, #211	; 0xd3
 801271a:	009b      	lsls	r3, r3, #2
 801271c:	4958      	ldr	r1, [pc, #352]	; (8012880 <LoRaMacInitialization+0x714>)
 801271e:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012720:	4a4d      	ldr	r2, [pc, #308]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012722:	23d5      	movs	r3, #213	; 0xd5
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4957      	ldr	r1, [pc, #348]	; (8012884 <LoRaMacInitialization+0x718>)
 8012728:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801272a:	4a4b      	ldr	r2, [pc, #300]	; (8012858 <LoRaMacInitialization+0x6ec>)
 801272c:	23d7      	movs	r3, #215	; 0xd7
 801272e:	009b      	lsls	r3, r3, #2
 8012730:	4955      	ldr	r1, [pc, #340]	; (8012888 <LoRaMacInitialization+0x71c>)
 8012732:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012734:	4a48      	ldr	r2, [pc, #288]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012736:	23d4      	movs	r3, #212	; 0xd4
 8012738:	009b      	lsls	r3, r3, #2
 801273a:	4954      	ldr	r1, [pc, #336]	; (801288c <LoRaMacInitialization+0x720>)
 801273c:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801273e:	4a46      	ldr	r2, [pc, #280]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012740:	23d6      	movs	r3, #214	; 0xd6
 8012742:	009b      	lsls	r3, r3, #2
 8012744:	4952      	ldr	r1, [pc, #328]	; (8012890 <LoRaMacInitialization+0x724>)
 8012746:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8012748:	4b52      	ldr	r3, [pc, #328]	; (8012894 <LoRaMacInitialization+0x728>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	4a52      	ldr	r2, [pc, #328]	; (8012898 <LoRaMacInitialization+0x72c>)
 801274e:	0010      	movs	r0, r2
 8012750:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8012752:	4b52      	ldr	r3, [pc, #328]	; (801289c <LoRaMacInitialization+0x730>)
 8012754:	0018      	movs	r0, r3
 8012756:	f7fa f8af 	bl	800c8b8 <SecureElementInit>
 801275a:	1e03      	subs	r3, r0, #0
 801275c:	d001      	beq.n	8012762 <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801275e:	2311      	movs	r3, #17
 8012760:	e073      	b.n	801284a <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8012762:	4b4f      	ldr	r3, [pc, #316]	; (80128a0 <LoRaMacInitialization+0x734>)
 8012764:	0018      	movs	r0, r3
 8012766:	f002 fe83 	bl	8015470 <LoRaMacCryptoInit>
 801276a:	1e03      	subs	r3, r0, #0
 801276c:	d001      	beq.n	8012772 <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801276e:	2311      	movs	r3, #17
 8012770:	e06b      	b.n	801284a <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8012772:	4b4c      	ldr	r3, [pc, #304]	; (80128a4 <LoRaMacInitialization+0x738>)
 8012774:	0018      	movs	r0, r3
 8012776:	f001 fc75 	bl	8014064 <LoRaMacCommandsInit>
 801277a:	1e03      	subs	r3, r0, #0
 801277c:	d001      	beq.n	8012782 <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801277e:	2313      	movs	r3, #19
 8012780:	e063      	b.n	801284a <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012782:	4b35      	ldr	r3, [pc, #212]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012784:	4a33      	ldr	r2, [pc, #204]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012786:	589b      	ldr	r3, [r3, r2]
 8012788:	3350      	adds	r3, #80	; 0x50
 801278a:	0018      	movs	r0, r3
 801278c:	f002 ff7e 	bl	801568c <LoRaMacCryptoSetMulticastReference>
 8012790:	1e03      	subs	r3, r0, #0
 8012792:	d001      	beq.n	8012798 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012794:	2311      	movs	r3, #17
 8012796:	e058      	b.n	801284a <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012798:	4b3e      	ldr	r3, [pc, #248]	; (8012894 <LoRaMacInitialization+0x728>)
 801279a:	695b      	ldr	r3, [r3, #20]
 801279c:	4798      	blx	r3
 801279e:	0003      	movs	r3, r0
 80127a0:	0018      	movs	r0, r3
 80127a2:	f006 fbad 	bl	8018f00 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80127a6:	4b3b      	ldr	r3, [pc, #236]	; (8012894 <LoRaMacInitialization+0x728>)
 80127a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127aa:	4a2b      	ldr	r2, [pc, #172]	; (8012858 <LoRaMacInitialization+0x6ec>)
 80127ac:	4929      	ldr	r1, [pc, #164]	; (8012854 <LoRaMacInitialization+0x6e8>)
 80127ae:	5852      	ldr	r2, [r2, r1]
 80127b0:	217d      	movs	r1, #125	; 0x7d
 80127b2:	5c52      	ldrb	r2, [r2, r1]
 80127b4:	0010      	movs	r0, r2
 80127b6:	4798      	blx	r3
    Radio.Sleep( );
 80127b8:	4b36      	ldr	r3, [pc, #216]	; (8012894 <LoRaMacInitialization+0x728>)
 80127ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127bc:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80127be:	2144      	movs	r1, #68	; 0x44
 80127c0:	187b      	adds	r3, r7, r1
 80127c2:	2200      	movs	r2, #0
 80127c4:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 80127c6:	187b      	adds	r3, r7, r1
 80127c8:	2200      	movs	r2, #0
 80127ca:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d007      	beq.n	80127e2 <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	685a      	ldr	r2, [r3, #4]
 80127d6:	187b      	adds	r3, r7, r1
 80127d8:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	68da      	ldr	r2, [r3, #12]
 80127de:	187b      	adds	r3, r7, r1
 80127e0:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80127e2:	2124      	movs	r1, #36	; 0x24
 80127e4:	187b      	adds	r3, r7, r1
 80127e6:	4a30      	ldr	r2, [pc, #192]	; (80128a8 <LoRaMacInitialization+0x73c>)
 80127e8:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80127ea:	187b      	adds	r3, r7, r1
 80127ec:	4a2f      	ldr	r2, [pc, #188]	; (80128ac <LoRaMacInitialization+0x740>)
 80127ee:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80127f0:	187b      	adds	r3, r7, r1
 80127f2:	4a2f      	ldr	r2, [pc, #188]	; (80128b0 <LoRaMacInitialization+0x744>)
 80127f4:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80127f6:	187b      	adds	r3, r7, r1
 80127f8:	4a2e      	ldr	r2, [pc, #184]	; (80128b4 <LoRaMacInitialization+0x748>)
 80127fa:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80127fc:	4b16      	ldr	r3, [pc, #88]	; (8012858 <LoRaMacInitialization+0x6ec>)
 80127fe:	4a15      	ldr	r2, [pc, #84]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012800:	589b      	ldr	r3, [r3, r2]
 8012802:	334c      	adds	r3, #76	; 0x4c
 8012804:	001a      	movs	r2, r3
 8012806:	187b      	adds	r3, r7, r1
 8012808:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 801280a:	4b13      	ldr	r3, [pc, #76]	; (8012858 <LoRaMacInitialization+0x6ec>)
 801280c:	4a11      	ldr	r2, [pc, #68]	; (8012854 <LoRaMacInitialization+0x6e8>)
 801280e:	589b      	ldr	r3, [r3, r2]
 8012810:	001a      	movs	r2, r3
 8012812:	187b      	adds	r3, r7, r1
 8012814:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8012816:	4b10      	ldr	r3, [pc, #64]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012818:	4a0e      	ldr	r2, [pc, #56]	; (8012854 <LoRaMacInitialization+0x6e8>)
 801281a:	589b      	ldr	r3, [r3, r2]
 801281c:	3384      	adds	r3, #132	; 0x84
 801281e:	001a      	movs	r2, r3
 8012820:	187b      	adds	r3, r7, r1
 8012822:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8012824:	4b0c      	ldr	r3, [pc, #48]	; (8012858 <LoRaMacInitialization+0x6ec>)
 8012826:	4a0b      	ldr	r2, [pc, #44]	; (8012854 <LoRaMacInitialization+0x6e8>)
 8012828:	589b      	ldr	r3, [r3, r2]
 801282a:	3350      	adds	r3, #80	; 0x50
 801282c:	001a      	movs	r2, r3
 801282e:	0008      	movs	r0, r1
 8012830:	187b      	adds	r3, r7, r1
 8012832:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8012834:	4a20      	ldr	r2, [pc, #128]	; (80128b8 <LoRaMacInitialization+0x74c>)
 8012836:	2344      	movs	r3, #68	; 0x44
 8012838:	18f9      	adds	r1, r7, r3
 801283a:	183b      	adds	r3, r7, r0
 801283c:	0018      	movs	r0, r3
 801283e:	f001 f9fc 	bl	8013c3a <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012842:	2001      	movs	r0, #1
 8012844:	f7fc fe12 	bl	800f46c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012848:	2300      	movs	r3, #0
}
 801284a:	0018      	movs	r0, r3
 801284c:	46bd      	mov	sp, r7
 801284e:	b016      	add	sp, #88	; 0x58
 8012850:	bdb0      	pop	{r4, r5, r7, pc}
 8012852:	46c0      	nop			; (mov r8, r8)
 8012854:	00000484 	.word	0x00000484
 8012858:	20000bb0 	.word	0x20000bb0
 801285c:	00000481 	.word	0x00000481
 8012860:	0800f871 	.word	0x0800f871
 8012864:	20000f18 	.word	0x20000f18
 8012868:	0800f8fd 	.word	0x0800f8fd
 801286c:	20000f30 	.word	0x20000f30
 8012870:	0800f991 	.word	0x0800f991
 8012874:	20000f48 	.word	0x20000f48
 8012878:	0800fa2d 	.word	0x0800fa2d
 801287c:	20000fa8 	.word	0x20000fa8
 8012880:	0800e355 	.word	0x0800e355
 8012884:	0800e3c1 	.word	0x0800e3c1
 8012888:	0800e495 	.word	0x0800e495
 801288c:	0800e451 	.word	0x0800e451
 8012890:	0800e4d9 	.word	0x0800e4d9
 8012894:	0801ec78 	.word	0x0801ec78
 8012898:	20000efc 	.word	0x20000efc
 801289c:	08012039 	.word	0x08012039
 80128a0:	08012029 	.word	0x08012029
 80128a4:	08012049 	.word	0x08012049
 80128a8:	20001014 	.word	0x20001014
 80128ac:	20000fcc 	.word	0x20000fcc
 80128b0:	20001000 	.word	0x20001000
 80128b4:	20001031 	.word	0x20001031
 80128b8:	08012059 	.word	0x08012059

080128bc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80128c0:	4a04      	ldr	r2, [pc, #16]	; (80128d4 <LoRaMacStart+0x18>)
 80128c2:	23d0      	movs	r3, #208	; 0xd0
 80128c4:	009b      	lsls	r3, r3, #2
 80128c6:	2100      	movs	r1, #0
 80128c8:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 80128ca:	2300      	movs	r3, #0
}
 80128cc:	0018      	movs	r0, r3
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	46c0      	nop			; (mov r8, r8)
 80128d4:	20000bb0 	.word	0x20000bb0

080128d8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80128d8:	b590      	push	{r4, r7, lr}
 80128da:	b08b      	sub	sp, #44	; 0x2c
 80128dc:	af00      	add	r7, sp, #0
 80128de:	0002      	movs	r2, r0
 80128e0:	6039      	str	r1, [r7, #0]
 80128e2:	1dfb      	adds	r3, r7, #7
 80128e4:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80128e6:	4b4f      	ldr	r3, [pc, #316]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 80128e8:	4a4f      	ldr	r2, [pc, #316]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 80128ea:	589b      	ldr	r3, [r3, r2]
 80128ec:	2280      	movs	r2, #128	; 0x80
 80128ee:	589b      	ldr	r3, [r3, r2]
 80128f0:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80128f2:	4b4c      	ldr	r3, [pc, #304]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 80128f4:	4a4c      	ldr	r2, [pc, #304]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 80128f6:	589b      	ldr	r3, [r3, r2]
 80128f8:	2205      	movs	r2, #5
 80128fa:	569a      	ldrsb	r2, [r3, r2]
 80128fc:	230f      	movs	r3, #15
 80128fe:	18fb      	adds	r3, r7, r3
 8012900:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012902:	4b48      	ldr	r3, [pc, #288]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 8012904:	4a48      	ldr	r2, [pc, #288]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 8012906:	589b      	ldr	r3, [r3, r2]
 8012908:	2204      	movs	r2, #4
 801290a:	569a      	ldrsb	r2, [r3, r2]
 801290c:	230e      	movs	r3, #14
 801290e:	18fb      	adds	r3, r7, r3
 8012910:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 8012912:	2300      	movs	r3, #0
 8012914:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d101      	bne.n	8012920 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801291c:	2303      	movs	r3, #3
 801291e:	e07d      	b.n	8012a1c <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8012920:	4b40      	ldr	r3, [pc, #256]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 8012922:	4a41      	ldr	r2, [pc, #260]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 8012924:	5899      	ldr	r1, [r3, r2]
 8012926:	2014      	movs	r0, #20
 8012928:	183b      	adds	r3, r7, r0
 801292a:	22b0      	movs	r2, #176	; 0xb0
 801292c:	0052      	lsls	r2, r2, #1
 801292e:	588a      	ldr	r2, [r1, r2]
 8012930:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 8012932:	183b      	adds	r3, r7, r0
 8012934:	2200      	movs	r2, #0
 8012936:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8012938:	4b3a      	ldr	r3, [pc, #232]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 801293a:	4a3b      	ldr	r2, [pc, #236]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 801293c:	589b      	ldr	r3, [r3, r2]
 801293e:	227e      	movs	r2, #126	; 0x7e
 8012940:	5c9a      	ldrb	r2, [r3, r2]
 8012942:	183b      	adds	r3, r7, r0
 8012944:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8012946:	4b37      	ldr	r3, [pc, #220]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 8012948:	4a37      	ldr	r2, [pc, #220]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 801294a:	589b      	ldr	r3, [r3, r2]
 801294c:	2280      	movs	r2, #128	; 0x80
 801294e:	589a      	ldr	r2, [r3, r2]
 8012950:	183b      	adds	r3, r7, r0
 8012952:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012954:	4a33      	ldr	r2, [pc, #204]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 8012956:	23fd      	movs	r3, #253	; 0xfd
 8012958:	009b      	lsls	r3, r3, #2
 801295a:	5ad2      	ldrh	r2, [r2, r3]
 801295c:	183b      	adds	r3, r7, r0
 801295e:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012960:	4b30      	ldr	r3, [pc, #192]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 8012962:	4a32      	ldr	r2, [pc, #200]	; (8012a2c <LoRaMacQueryTxPossible+0x154>)
 8012964:	5a9a      	ldrh	r2, [r3, r2]
 8012966:	183b      	adds	r3, r7, r0
 8012968:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801296a:	4b2e      	ldr	r3, [pc, #184]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 801296c:	4a2e      	ldr	r2, [pc, #184]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 801296e:	589b      	ldr	r3, [r3, r2]
 8012970:	2285      	movs	r2, #133	; 0x85
 8012972:	569a      	ldrsb	r2, [r3, r2]
 8012974:	183b      	adds	r3, r7, r0
 8012976:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012978:	4b2a      	ldr	r3, [pc, #168]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 801297a:	4a2b      	ldr	r2, [pc, #172]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 801297c:	589b      	ldr	r3, [r3, r2]
 801297e:	2284      	movs	r2, #132	; 0x84
 8012980:	569a      	ldrsb	r2, [r3, r2]
 8012982:	183b      	adds	r3, r7, r0
 8012984:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012986:	4b27      	ldr	r3, [pc, #156]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 8012988:	4a27      	ldr	r2, [pc, #156]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 801298a:	589b      	ldr	r3, [r3, r2]
 801298c:	22b8      	movs	r2, #184	; 0xb8
 801298e:	5c9a      	ldrb	r2, [r3, r2]
 8012990:	183b      	adds	r3, r7, r0
 8012992:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8012994:	4b23      	ldr	r3, [pc, #140]	; (8012a24 <LoRaMacQueryTxPossible+0x14c>)
 8012996:	4a24      	ldr	r2, [pc, #144]	; (8012a28 <LoRaMacQueryTxPossible+0x150>)
 8012998:	589b      	ldr	r3, [r3, r2]
 801299a:	781a      	ldrb	r2, [r3, #0]
 801299c:	183b      	adds	r3, r7, r0
 801299e:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80129a0:	2310      	movs	r3, #16
 80129a2:	18fb      	adds	r3, r7, r3
 80129a4:	220e      	movs	r2, #14
 80129a6:	18ba      	adds	r2, r7, r2
 80129a8:	240f      	movs	r4, #15
 80129aa:	1939      	adds	r1, r7, r4
 80129ac:	1838      	adds	r0, r7, r0
 80129ae:	f001 f92c 	bl	8013c0a <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80129b2:	193b      	adds	r3, r7, r4
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	b25b      	sxtb	r3, r3
 80129b8:	0018      	movs	r0, r3
 80129ba:	f7fd f9e9 	bl	800fd90 <GetMaxAppPayloadWithoutFOptsLength>
 80129be:	0003      	movs	r3, r0
 80129c0:	001a      	movs	r2, r3
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80129c6:	2308      	movs	r3, #8
 80129c8:	18fb      	adds	r3, r7, r3
 80129ca:	0018      	movs	r0, r3
 80129cc:	f001 fc5e 	bl	801428c <LoRaMacCommandsGetSizeSerializedCmds>
 80129d0:	1e03      	subs	r3, r0, #0
 80129d2:	d001      	beq.n	80129d8 <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80129d4:	2313      	movs	r3, #19
 80129d6:	e021      	b.n	8012a1c <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	2b0f      	cmp	r3, #15
 80129dc:	d81a      	bhi.n	8012a14 <LoRaMacQueryTxPossible+0x13c>
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	785b      	ldrb	r3, [r3, #1]
 80129e2:	001a      	movs	r2, r3
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d314      	bcc.n	8012a14 <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	785a      	ldrb	r2, [r3, #1]
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	1ad3      	subs	r3, r2, r3
 80129f4:	b2da      	uxtb	r2, r3
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	785b      	ldrb	r3, [r3, #1]
 80129fe:	0019      	movs	r1, r3
 8012a00:	1dfb      	adds	r3, r7, #7
 8012a02:	781a      	ldrb	r2, [r3, #0]
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	18d3      	adds	r3, r2, r3
 8012a08:	4299      	cmp	r1, r3
 8012a0a:	d301      	bcc.n	8012a10 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e005      	b.n	8012a1c <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012a10:	2308      	movs	r3, #8
 8012a12:	e003      	b.n	8012a1c <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2200      	movs	r2, #0
 8012a18:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012a1a:	2308      	movs	r3, #8
    }
}
 8012a1c:	0018      	movs	r0, r3
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	b00b      	add	sp, #44	; 0x2c
 8012a22:	bd90      	pop	{r4, r7, pc}
 8012a24:	20000bb0 	.word	0x20000bb0
 8012a28:	00000484 	.word	0x00000484
 8012a2c:	000003f6 	.word	0x000003f6

08012a30 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012a30:	b590      	push	{r4, r7, lr}
 8012a32:	b087      	sub	sp, #28
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012a38:	2317      	movs	r3, #23
 8012a3a:	18fb      	adds	r3, r7, r3
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d101      	bne.n	8012a4a <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a46:	2303      	movs	r3, #3
 8012a48:	e146      	b.n	8012cd8 <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	2b2d      	cmp	r3, #45	; 0x2d
 8012a50:	d900      	bls.n	8012a54 <LoRaMacMibGetRequestConfirm+0x24>
 8012a52:	e135      	b.n	8012cc0 <LoRaMacMibGetRequestConfirm+0x290>
 8012a54:	009a      	lsls	r2, r3, #2
 8012a56:	4ba2      	ldr	r3, [pc, #648]	; (8012ce0 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8012a58:	18d3      	adds	r3, r2, r3
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8012a5e:	4ba1      	ldr	r3, [pc, #644]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012a60:	4aa1      	ldr	r2, [pc, #644]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012a62:	589b      	ldr	r3, [r3, r2]
 8012a64:	227c      	movs	r2, #124	; 0x7c
 8012a66:	5c9a      	ldrb	r2, [r3, r2]
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	711a      	strb	r2, [r3, #4]
            break;
 8012a6c:	e131      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8012a6e:	4b9d      	ldr	r3, [pc, #628]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012a70:	4a9d      	ldr	r2, [pc, #628]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012a72:	589a      	ldr	r2, [r3, r2]
 8012a74:	23b2      	movs	r3, #178	; 0xb2
 8012a76:	005b      	lsls	r3, r3, #1
 8012a78:	5cd2      	ldrb	r2, [r2, r3]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	711a      	strb	r2, [r3, #4]
            break;
 8012a7e:	e128      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8012a80:	f7fa fb2c 	bl	800d0dc <SecureElementGetDevEui>
 8012a84:	0002      	movs	r2, r0
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	605a      	str	r2, [r3, #4]
            break;
 8012a8a:	e122      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8012a8c:	f7fa fb4a 	bl	800d124 <SecureElementGetJoinEui>
 8012a90:	0002      	movs	r2, r0
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	605a      	str	r2, [r3, #4]
            break;
 8012a96:	e11c      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8012a98:	4b92      	ldr	r3, [pc, #584]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012a9a:	4a93      	ldr	r2, [pc, #588]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012a9c:	589b      	ldr	r3, [r3, r2]
 8012a9e:	227e      	movs	r2, #126	; 0x7e
 8012aa0:	5c9a      	ldrb	r2, [r3, r2]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	711a      	strb	r2, [r3, #4]
            break;
 8012aa6:	e114      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8012aa8:	4b8e      	ldr	r3, [pc, #568]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012aaa:	4a8f      	ldr	r2, [pc, #572]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012aac:	589b      	ldr	r3, [r3, r2]
 8012aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	605a      	str	r2, [r3, #4]
            break;
 8012ab4:	e10d      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8012ab6:	4b8b      	ldr	r3, [pc, #556]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012ab8:	4a8b      	ldr	r2, [pc, #556]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012aba:	589b      	ldr	r3, [r3, r2]
 8012abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	605a      	str	r2, [r3, #4]
            break;
 8012ac2:	e106      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8012ac4:	4b87      	ldr	r3, [pc, #540]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012ac6:	4a88      	ldr	r2, [pc, #544]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012ac8:	589b      	ldr	r3, [r3, r2]
 8012aca:	227d      	movs	r2, #125	; 0x7d
 8012acc:	5c9a      	ldrb	r2, [r3, r2]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	711a      	strb	r2, [r3, #4]
            break;
 8012ad2:	e0fe      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8012ad4:	4b83      	ldr	r3, [pc, #524]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012ad6:	4a84      	ldr	r2, [pc, #528]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012ad8:	589b      	ldr	r3, [r3, r2]
 8012ada:	22ca      	movs	r2, #202	; 0xca
 8012adc:	5c9a      	ldrb	r2, [r3, r2]
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	711a      	strb	r2, [r3, #4]
            break;
 8012ae2:	e0f6      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012ae4:	2110      	movs	r1, #16
 8012ae6:	187b      	adds	r3, r7, r1
 8012ae8:	221d      	movs	r2, #29
 8012aea:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012aec:	4b7d      	ldr	r3, [pc, #500]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012aee:	4a7e      	ldr	r2, [pc, #504]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012af0:	589b      	ldr	r3, [r3, r2]
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	187a      	adds	r2, r7, r1
 8012af6:	0011      	movs	r1, r2
 8012af8:	0018      	movs	r0, r3
 8012afa:	f003 fda2 	bl	8016642 <RegionGetPhyParam>
 8012afe:	0003      	movs	r3, r0
 8012b00:	001a      	movs	r2, r3
 8012b02:	210c      	movs	r1, #12
 8012b04:	187b      	adds	r3, r7, r1
 8012b06:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012b08:	187b      	adds	r3, r7, r1
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	605a      	str	r2, [r3, #4]
            break;
 8012b10:	e0df      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8012b12:	4b74      	ldr	r3, [pc, #464]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b14:	4a74      	ldr	r2, [pc, #464]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b16:	589a      	ldr	r2, [r3, r2]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	21a8      	movs	r1, #168	; 0xa8
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	1852      	adds	r2, r2, r1
 8012b20:	ca03      	ldmia	r2!, {r0, r1}
 8012b22:	c303      	stmia	r3!, {r0, r1}
            break;
 8012b24:	e0d5      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8012b26:	4b6f      	ldr	r3, [pc, #444]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b28:	4a6f      	ldr	r2, [pc, #444]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b2a:	589a      	ldr	r2, [r3, r2]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	3304      	adds	r3, #4
 8012b30:	3228      	adds	r2, #40	; 0x28
 8012b32:	ca03      	ldmia	r2!, {r0, r1}
 8012b34:	c303      	stmia	r3!, {r0, r1}
            break;
 8012b36:	e0cc      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8012b38:	4b6a      	ldr	r3, [pc, #424]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b3a:	4a6b      	ldr	r2, [pc, #428]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b3c:	589a      	ldr	r2, [r3, r2]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	21b0      	movs	r1, #176	; 0xb0
 8012b42:	3304      	adds	r3, #4
 8012b44:	1852      	adds	r2, r2, r1
 8012b46:	ca03      	ldmia	r2!, {r0, r1}
 8012b48:	c303      	stmia	r3!, {r0, r1}
            break;
 8012b4a:	e0c2      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8012b4c:	4b65      	ldr	r3, [pc, #404]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b4e:	4a66      	ldr	r2, [pc, #408]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b50:	589a      	ldr	r2, [r3, r2]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	3304      	adds	r3, #4
 8012b56:	3230      	adds	r2, #48	; 0x30
 8012b58:	ca03      	ldmia	r2!, {r0, r1}
 8012b5a:	c303      	stmia	r3!, {r0, r1}
            break;
 8012b5c:	e0b9      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012b5e:	2110      	movs	r1, #16
 8012b60:	187b      	adds	r3, r7, r1
 8012b62:	221b      	movs	r2, #27
 8012b64:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012b66:	4b5f      	ldr	r3, [pc, #380]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b68:	4a5f      	ldr	r2, [pc, #380]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b6a:	589b      	ldr	r3, [r3, r2]
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	187a      	adds	r2, r7, r1
 8012b70:	0011      	movs	r1, r2
 8012b72:	0018      	movs	r0, r3
 8012b74:	f003 fd65 	bl	8016642 <RegionGetPhyParam>
 8012b78:	0003      	movs	r3, r0
 8012b7a:	001a      	movs	r2, r3
 8012b7c:	210c      	movs	r1, #12
 8012b7e:	187b      	adds	r3, r7, r1
 8012b80:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012b82:	187b      	adds	r3, r7, r1
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	605a      	str	r2, [r3, #4]
            break;
 8012b8a:	e0a2      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012b8c:	2110      	movs	r1, #16
 8012b8e:	187b      	adds	r3, r7, r1
 8012b90:	221a      	movs	r2, #26
 8012b92:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012b94:	4b53      	ldr	r3, [pc, #332]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b96:	4a54      	ldr	r2, [pc, #336]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b98:	589b      	ldr	r3, [r3, r2]
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	187a      	adds	r2, r7, r1
 8012b9e:	0011      	movs	r1, r2
 8012ba0:	0018      	movs	r0, r3
 8012ba2:	f003 fd4e 	bl	8016642 <RegionGetPhyParam>
 8012ba6:	0003      	movs	r3, r0
 8012ba8:	001a      	movs	r2, r3
 8012baa:	210c      	movs	r1, #12
 8012bac:	187b      	adds	r3, r7, r1
 8012bae:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012bb0:	187b      	adds	r3, r7, r1
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	605a      	str	r2, [r3, #4]
            break;
 8012bb8:	e08b      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8012bba:	4b4a      	ldr	r3, [pc, #296]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bbc:	4a4a      	ldr	r2, [pc, #296]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bbe:	589b      	ldr	r3, [r3, r2]
 8012bc0:	22a4      	movs	r2, #164	; 0xa4
 8012bc2:	5c9a      	ldrb	r2, [r3, r2]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	711a      	strb	r2, [r3, #4]
            break;
 8012bc8:	e083      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8012bca:	4b46      	ldr	r3, [pc, #280]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bcc:	4a46      	ldr	r2, [pc, #280]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bce:	589b      	ldr	r3, [r3, r2]
 8012bd0:	2290      	movs	r2, #144	; 0x90
 8012bd2:	589a      	ldr	r2, [r3, r2]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	605a      	str	r2, [r3, #4]
            break;
 8012bd8:	e07b      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8012bda:	4b42      	ldr	r3, [pc, #264]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bdc:	4a42      	ldr	r2, [pc, #264]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bde:	589b      	ldr	r3, [r3, r2]
 8012be0:	2294      	movs	r2, #148	; 0x94
 8012be2:	589a      	ldr	r2, [r3, r2]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	605a      	str	r2, [r3, #4]
            break;
 8012be8:	e073      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8012bea:	4b3e      	ldr	r3, [pc, #248]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bec:	4a3e      	ldr	r2, [pc, #248]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bee:	589b      	ldr	r3, [r3, r2]
 8012bf0:	2298      	movs	r2, #152	; 0x98
 8012bf2:	589a      	ldr	r2, [r3, r2]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	605a      	str	r2, [r3, #4]
            break;
 8012bf8:	e06b      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8012bfa:	4b3a      	ldr	r3, [pc, #232]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bfc:	4a3a      	ldr	r2, [pc, #232]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bfe:	589b      	ldr	r3, [r3, r2]
 8012c00:	229c      	movs	r2, #156	; 0x9c
 8012c02:	589a      	ldr	r2, [r3, r2]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	605a      	str	r2, [r3, #4]
            break;
 8012c08:	e063      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8012c0a:	4b36      	ldr	r3, [pc, #216]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c0c:	4a36      	ldr	r2, [pc, #216]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c0e:	589b      	ldr	r3, [r3, r2]
 8012c10:	22a0      	movs	r2, #160	; 0xa0
 8012c12:	589a      	ldr	r2, [r3, r2]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	605a      	str	r2, [r3, #4]
            break;
 8012c18:	e05b      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8012c1a:	4b32      	ldr	r3, [pc, #200]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c1c:	4a32      	ldr	r2, [pc, #200]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c1e:	589b      	ldr	r3, [r3, r2]
 8012c20:	2205      	movs	r2, #5
 8012c22:	569a      	ldrsb	r2, [r3, r2]
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	711a      	strb	r2, [r3, #4]
            break;
 8012c28:	e053      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012c2a:	4b2e      	ldr	r3, [pc, #184]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c2c:	4a2e      	ldr	r2, [pc, #184]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c2e:	589b      	ldr	r3, [r3, r2]
 8012c30:	2285      	movs	r2, #133	; 0x85
 8012c32:	569a      	ldrsb	r2, [r3, r2]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	711a      	strb	r2, [r3, #4]
            break;
 8012c38:	e04b      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012c3a:	4b2a      	ldr	r3, [pc, #168]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c3c:	4a2a      	ldr	r2, [pc, #168]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c3e:	589b      	ldr	r3, [r3, r2]
 8012c40:	2204      	movs	r2, #4
 8012c42:	569a      	ldrsb	r2, [r3, r2]
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	711a      	strb	r2, [r3, #4]
            break;
 8012c48:	e043      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012c4a:	4b26      	ldr	r3, [pc, #152]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c4c:	4a26      	ldr	r2, [pc, #152]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c4e:	589b      	ldr	r3, [r3, r2]
 8012c50:	2284      	movs	r2, #132	; 0x84
 8012c52:	569a      	ldrsb	r2, [r3, r2]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	711a      	strb	r2, [r3, #4]
            break;
 8012c58:	e03b      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8012c5a:	4b22      	ldr	r3, [pc, #136]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c5c:	4a22      	ldr	r2, [pc, #136]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c5e:	589b      	ldr	r3, [r3, r2]
 8012c60:	2288      	movs	r2, #136	; 0x88
 8012c62:	589a      	ldr	r2, [r3, r2]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	605a      	str	r2, [r3, #4]
            break;
 8012c68:	e033      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8012c6a:	4b1e      	ldr	r3, [pc, #120]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c6c:	4a1e      	ldr	r2, [pc, #120]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c6e:	589b      	ldr	r3, [r3, r2]
 8012c70:	228c      	movs	r2, #140	; 0x8c
 8012c72:	5c9a      	ldrb	r2, [r3, r2]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	711a      	strb	r2, [r3, #4]
            break;
 8012c78:	e02b      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012c7a:	4b1a      	ldr	r3, [pc, #104]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c7c:	4a1a      	ldr	r2, [pc, #104]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c7e:	589b      	ldr	r3, [r3, r2]
 8012c80:	22c0      	movs	r2, #192	; 0xc0
 8012c82:	589a      	ldr	r2, [r3, r2]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	605a      	str	r2, [r3, #4]
            break;
 8012c88:	e023      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8012c8a:	f7fe ff23 	bl	8011ad4 <GetCtxs>
 8012c8e:	0002      	movs	r2, r0
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	605a      	str	r2, [r3, #4]
            break;
 8012c94:	e01d      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8012c96:	4b13      	ldr	r3, [pc, #76]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c98:	4a13      	ldr	r2, [pc, #76]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c9a:	589b      	ldr	r3, [r3, r2]
 8012c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	605a      	str	r2, [r3, #4]
            break;
 8012ca2:	e016      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 8012ca4:	4b0f      	ldr	r3, [pc, #60]	; (8012ce4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012ca6:	4a10      	ldr	r2, [pc, #64]	; (8012ce8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012ca8:	5899      	ldr	r1, [r3, r2]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	22b0      	movs	r2, #176	; 0xb0
 8012cae:	0052      	lsls	r2, r2, #1
 8012cb0:	588a      	ldr	r2, [r1, r2]
 8012cb2:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012cb4:	687c      	ldr	r4, [r7, #4]
 8012cb6:	f003 febf 	bl	8016a38 <RegionGetVersion>
 8012cba:	0003      	movs	r3, r0
 8012cbc:	60a3      	str	r3, [r4, #8]
            break;
 8012cbe:	e008      	b.n	8012cd2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012cc0:	2317      	movs	r3, #23
 8012cc2:	18fc      	adds	r4, r7, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	0018      	movs	r0, r3
 8012cc8:	f001 f855 	bl	8013d76 <LoRaMacClassBMibGetRequestConfirm>
 8012ccc:	0003      	movs	r3, r0
 8012cce:	7023      	strb	r3, [r4, #0]
            break;
 8012cd0:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 8012cd2:	2317      	movs	r3, #23
 8012cd4:	18fb      	adds	r3, r7, r3
 8012cd6:	781b      	ldrb	r3, [r3, #0]
}
 8012cd8:	0018      	movs	r0, r3
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	b007      	add	sp, #28
 8012cde:	bd90      	pop	{r4, r7, pc}
 8012ce0:	0801e7f0 	.word	0x0801e7f0
 8012ce4:	20000bb0 	.word	0x20000bb0
 8012ce8:	00000484 	.word	0x00000484

08012cec <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012cec:	b590      	push	{r4, r7, lr}
 8012cee:	b087      	sub	sp, #28
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012cf4:	2317      	movs	r3, #23
 8012cf6:	18fb      	adds	r3, r7, r3
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d102      	bne.n	8012d08 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012d02:	2303      	movs	r3, #3
 8012d04:	f000 fbd8 	bl	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012d08:	4acc      	ldr	r2, [pc, #816]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8012d0a:	23d0      	movs	r3, #208	; 0xd0
 8012d0c:	009b      	lsls	r3, r3, #2
 8012d0e:	58d3      	ldr	r3, [r2, r3]
 8012d10:	2202      	movs	r2, #2
 8012d12:	4013      	ands	r3, r2
 8012d14:	d002      	beq.n	8012d1c <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012d16:	2301      	movs	r3, #1
 8012d18:	f000 fbce 	bl	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
    }

    switch( mibSet->Type )
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	2b2c      	cmp	r3, #44	; 0x2c
 8012d22:	d901      	bls.n	8012d28 <LoRaMacMibSetRequestConfirm+0x3c>
 8012d24:	f000 fb95 	bl	8013452 <LoRaMacMibSetRequestConfirm+0x766>
 8012d28:	009a      	lsls	r2, r3, #2
 8012d2a:	4bc5      	ldr	r3, [pc, #788]	; (8013040 <LoRaMacMibSetRequestConfirm+0x354>)
 8012d2c:	18d3      	adds	r3, r2, r3
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	791b      	ldrb	r3, [r3, #4]
 8012d36:	2217      	movs	r2, #23
 8012d38:	18bc      	adds	r4, r7, r2
 8012d3a:	0018      	movs	r0, r3
 8012d3c:	f7fc ff08 	bl	800fb50 <SwitchClass>
 8012d40:	0003      	movs	r3, r0
 8012d42:	7023      	strb	r3, [r4, #0]
            break;
 8012d44:	f000 fbb1 	bl	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	791b      	ldrb	r3, [r3, #4]
 8012d4c:	2b02      	cmp	r3, #2
 8012d4e:	d009      	beq.n	8012d64 <LoRaMacMibSetRequestConfirm+0x78>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8012d50:	4bba      	ldr	r3, [pc, #744]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8012d52:	4abc      	ldr	r2, [pc, #752]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8012d54:	589a      	ldr	r2, [r3, r2]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	7919      	ldrb	r1, [r3, #4]
 8012d5a:	23b2      	movs	r3, #178	; 0xb2
 8012d5c:	005b      	lsls	r3, r3, #1
 8012d5e:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012d60:	f000 fba3 	bl	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d64:	2317      	movs	r3, #23
 8012d66:	18fb      	adds	r3, r7, r3
 8012d68:	2203      	movs	r2, #3
 8012d6a:	701a      	strb	r2, [r3, #0]
            break;
 8012d6c:	f000 fb9d 	bl	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	0018      	movs	r0, r3
 8012d76:	f7fa f995 	bl	800d0a4 <SecureElementSetDevEui>
 8012d7a:	1e03      	subs	r3, r0, #0
 8012d7c:	d101      	bne.n	8012d82 <LoRaMacMibSetRequestConfirm+0x96>
 8012d7e:	f000 fb71 	bl	8013464 <LoRaMacMibSetRequestConfirm+0x778>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d82:	2317      	movs	r3, #23
 8012d84:	18fb      	adds	r3, r7, r3
 8012d86:	2203      	movs	r2, #3
 8012d88:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012d8a:	f000 fb6b 	bl	8013464 <LoRaMacMibSetRequestConfirm+0x778>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	0018      	movs	r0, r3
 8012d94:	f7fa f9aa 	bl	800d0ec <SecureElementSetJoinEui>
 8012d98:	1e03      	subs	r3, r0, #0
 8012d9a:	d101      	bne.n	8012da0 <LoRaMacMibSetRequestConfirm+0xb4>
 8012d9c:	f000 fb64 	bl	8013468 <LoRaMacMibSetRequestConfirm+0x77c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012da0:	2317      	movs	r3, #23
 8012da2:	18fb      	adds	r3, r7, r3
 8012da4:	2203      	movs	r2, #3
 8012da6:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012da8:	f000 fb5e 	bl	8013468 <LoRaMacMibSetRequestConfirm+0x77c>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8012dac:	4ba3      	ldr	r3, [pc, #652]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8012dae:	4aa5      	ldr	r2, [pc, #660]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8012db0:	589b      	ldr	r3, [r3, r2]
 8012db2:	687a      	ldr	r2, [r7, #4]
 8012db4:	7911      	ldrb	r1, [r2, #4]
 8012db6:	227e      	movs	r2, #126	; 0x7e
 8012db8:	5499      	strb	r1, [r3, r2]
            break;
 8012dba:	f000 fb76 	bl	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8012dbe:	4b9f      	ldr	r3, [pc, #636]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8012dc0:	4aa0      	ldr	r2, [pc, #640]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8012dc2:	589b      	ldr	r3, [r3, r2]
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	6852      	ldr	r2, [r2, #4]
 8012dc8:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8012dca:	f000 fb6e 	bl	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8012dce:	4b9b      	ldr	r3, [pc, #620]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8012dd0:	4a9c      	ldr	r2, [pc, #624]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8012dd2:	589b      	ldr	r3, [r3, r2]
 8012dd4:	687a      	ldr	r2, [r7, #4]
 8012dd6:	6852      	ldr	r2, [r2, #4]
 8012dd8:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8012dda:	f000 fb66 	bl	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00b      	beq.n	8012dfe <LoRaMacMibSetRequestConfirm+0x112>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	0019      	movs	r1, r3
 8012dec:	2000      	movs	r0, #0
 8012dee:	f002 fc63 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012df2:	1e03      	subs	r3, r0, #0
 8012df4:	d100      	bne.n	8012df8 <LoRaMacMibSetRequestConfirm+0x10c>
 8012df6:	e339      	b.n	801346c <LoRaMacMibSetRequestConfirm+0x780>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012df8:	2311      	movs	r3, #17
 8012dfa:	f000 fb5d 	bl	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012dfe:	2317      	movs	r3, #23
 8012e00:	18fb      	adds	r3, r7, r3
 8012e02:	2203      	movs	r2, #3
 8012e04:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012e06:	e331      	b.n	801346c <LoRaMacMibSetRequestConfirm+0x780>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00a      	beq.n	8012e26 <LoRaMacMibSetRequestConfirm+0x13a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	685b      	ldr	r3, [r3, #4]
 8012e14:	0019      	movs	r1, r3
 8012e16:	2001      	movs	r0, #1
 8012e18:	f002 fc4e 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012e1c:	1e03      	subs	r3, r0, #0
 8012e1e:	d100      	bne.n	8012e22 <LoRaMacMibSetRequestConfirm+0x136>
 8012e20:	e326      	b.n	8013470 <LoRaMacMibSetRequestConfirm+0x784>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e22:	2311      	movs	r3, #17
 8012e24:	e348      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e26:	2317      	movs	r3, #23
 8012e28:	18fb      	adds	r3, r7, r3
 8012e2a:	2203      	movs	r2, #3
 8012e2c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012e2e:	e31f      	b.n	8013470 <LoRaMacMibSetRequestConfirm+0x784>
        }
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d00a      	beq.n	8012e4e <LoRaMacMibSetRequestConfirm+0x162>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	0019      	movs	r1, r3
 8012e3e:	2002      	movs	r0, #2
 8012e40:	f002 fc3a 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012e44:	1e03      	subs	r3, r0, #0
 8012e46:	d100      	bne.n	8012e4a <LoRaMacMibSetRequestConfirm+0x15e>
 8012e48:	e314      	b.n	8013474 <LoRaMacMibSetRequestConfirm+0x788>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e4a:	2311      	movs	r3, #17
 8012e4c:	e334      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e4e:	2317      	movs	r3, #23
 8012e50:	18fb      	adds	r3, r7, r3
 8012e52:	2203      	movs	r2, #3
 8012e54:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012e56:	e30d      	b.n	8013474 <LoRaMacMibSetRequestConfirm+0x788>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d00a      	beq.n	8012e76 <LoRaMacMibSetRequestConfirm+0x18a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	0019      	movs	r1, r3
 8012e66:	2003      	movs	r0, #3
 8012e68:	f002 fc26 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012e6c:	1e03      	subs	r3, r0, #0
 8012e6e:	d100      	bne.n	8012e72 <LoRaMacMibSetRequestConfirm+0x186>
 8012e70:	e302      	b.n	8013478 <LoRaMacMibSetRequestConfirm+0x78c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e72:	2311      	movs	r3, #17
 8012e74:	e320      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e76:	2317      	movs	r3, #23
 8012e78:	18fb      	adds	r3, r7, r3
 8012e7a:	2203      	movs	r2, #3
 8012e7c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012e7e:	e2fb      	b.n	8013478 <LoRaMacMibSetRequestConfirm+0x78c>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00a      	beq.n	8012e9e <LoRaMacMibSetRequestConfirm+0x1b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	0019      	movs	r1, r3
 8012e8e:	2004      	movs	r0, #4
 8012e90:	f002 fc12 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012e94:	1e03      	subs	r3, r0, #0
 8012e96:	d100      	bne.n	8012e9a <LoRaMacMibSetRequestConfirm+0x1ae>
 8012e98:	e2f0      	b.n	801347c <LoRaMacMibSetRequestConfirm+0x790>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e9a:	2311      	movs	r3, #17
 8012e9c:	e30c      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e9e:	2317      	movs	r3, #23
 8012ea0:	18fb      	adds	r3, r7, r3
 8012ea2:	2203      	movs	r2, #3
 8012ea4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ea6:	e2e9      	b.n	801347c <LoRaMacMibSetRequestConfirm+0x790>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d00a      	beq.n	8012ec6 <LoRaMacMibSetRequestConfirm+0x1da>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	0019      	movs	r1, r3
 8012eb6:	2005      	movs	r0, #5
 8012eb8:	f002 fbfe 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012ebc:	1e03      	subs	r3, r0, #0
 8012ebe:	d100      	bne.n	8012ec2 <LoRaMacMibSetRequestConfirm+0x1d6>
 8012ec0:	e2de      	b.n	8013480 <LoRaMacMibSetRequestConfirm+0x794>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012ec2:	2311      	movs	r3, #17
 8012ec4:	e2f8      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ec6:	2317      	movs	r3, #23
 8012ec8:	18fb      	adds	r3, r7, r3
 8012eca:	2203      	movs	r2, #3
 8012ecc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ece:	e2d7      	b.n	8013480 <LoRaMacMibSetRequestConfirm+0x794>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d00a      	beq.n	8012eee <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	0019      	movs	r1, r3
 8012ede:	2006      	movs	r0, #6
 8012ee0:	f002 fbea 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012ee4:	1e03      	subs	r3, r0, #0
 8012ee6:	d100      	bne.n	8012eea <LoRaMacMibSetRequestConfirm+0x1fe>
 8012ee8:	e2cc      	b.n	8013484 <LoRaMacMibSetRequestConfirm+0x798>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012eea:	2311      	movs	r3, #17
 8012eec:	e2e4      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012eee:	2317      	movs	r3, #23
 8012ef0:	18fb      	adds	r3, r7, r3
 8012ef2:	2203      	movs	r2, #3
 8012ef4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ef6:	e2c5      	b.n	8013484 <LoRaMacMibSetRequestConfirm+0x798>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d00a      	beq.n	8012f16 <LoRaMacMibSetRequestConfirm+0x22a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	0019      	movs	r1, r3
 8012f06:	2008      	movs	r0, #8
 8012f08:	f002 fbd6 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012f0c:	1e03      	subs	r3, r0, #0
 8012f0e:	d100      	bne.n	8012f12 <LoRaMacMibSetRequestConfirm+0x226>
 8012f10:	e2ba      	b.n	8013488 <LoRaMacMibSetRequestConfirm+0x79c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f12:	2311      	movs	r3, #17
 8012f14:	e2d0      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f16:	2317      	movs	r3, #23
 8012f18:	18fb      	adds	r3, r7, r3
 8012f1a:	2203      	movs	r2, #3
 8012f1c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f1e:	e2b3      	b.n	8013488 <LoRaMacMibSetRequestConfirm+0x79c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	685b      	ldr	r3, [r3, #4]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00a      	beq.n	8012f3e <LoRaMacMibSetRequestConfirm+0x252>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	0019      	movs	r1, r3
 8012f2e:	207f      	movs	r0, #127	; 0x7f
 8012f30:	f002 fbc2 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012f34:	1e03      	subs	r3, r0, #0
 8012f36:	d100      	bne.n	8012f3a <LoRaMacMibSetRequestConfirm+0x24e>
 8012f38:	e2a8      	b.n	801348c <LoRaMacMibSetRequestConfirm+0x7a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f3a:	2311      	movs	r3, #17
 8012f3c:	e2bc      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f3e:	2317      	movs	r3, #23
 8012f40:	18fb      	adds	r3, r7, r3
 8012f42:	2203      	movs	r2, #3
 8012f44:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f46:	e2a1      	b.n	801348c <LoRaMacMibSetRequestConfirm+0x7a0>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00a      	beq.n	8012f66 <LoRaMacMibSetRequestConfirm+0x27a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	0019      	movs	r1, r3
 8012f56:	2080      	movs	r0, #128	; 0x80
 8012f58:	f002 fbae 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012f5c:	1e03      	subs	r3, r0, #0
 8012f5e:	d100      	bne.n	8012f62 <LoRaMacMibSetRequestConfirm+0x276>
 8012f60:	e296      	b.n	8013490 <LoRaMacMibSetRequestConfirm+0x7a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f62:	2311      	movs	r3, #17
 8012f64:	e2a8      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f66:	2317      	movs	r3, #23
 8012f68:	18fb      	adds	r3, r7, r3
 8012f6a:	2203      	movs	r2, #3
 8012f6c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f6e:	e28f      	b.n	8013490 <LoRaMacMibSetRequestConfirm+0x7a4>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d00a      	beq.n	8012f8e <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	685b      	ldr	r3, [r3, #4]
 8012f7c:	0019      	movs	r1, r3
 8012f7e:	2081      	movs	r0, #129	; 0x81
 8012f80:	f002 fb9a 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012f84:	1e03      	subs	r3, r0, #0
 8012f86:	d100      	bne.n	8012f8a <LoRaMacMibSetRequestConfirm+0x29e>
 8012f88:	e284      	b.n	8013494 <LoRaMacMibSetRequestConfirm+0x7a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f8a:	2311      	movs	r3, #17
 8012f8c:	e294      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f8e:	2317      	movs	r3, #23
 8012f90:	18fb      	adds	r3, r7, r3
 8012f92:	2203      	movs	r2, #3
 8012f94:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f96:	e27d      	b.n	8013494 <LoRaMacMibSetRequestConfirm+0x7a8>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d00a      	beq.n	8012fb6 <LoRaMacMibSetRequestConfirm+0x2ca>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	0019      	movs	r1, r3
 8012fa6:	2082      	movs	r0, #130	; 0x82
 8012fa8:	f002 fb86 	bl	80156b8 <LoRaMacCryptoSetKey>
 8012fac:	1e03      	subs	r3, r0, #0
 8012fae:	d100      	bne.n	8012fb2 <LoRaMacMibSetRequestConfirm+0x2c6>
 8012fb0:	e272      	b.n	8013498 <LoRaMacMibSetRequestConfirm+0x7ac>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fb2:	2311      	movs	r3, #17
 8012fb4:	e280      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fb6:	2317      	movs	r3, #23
 8012fb8:	18fb      	adds	r3, r7, r3
 8012fba:	2203      	movs	r2, #3
 8012fbc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012fbe:	e26b      	b.n	8013498 <LoRaMacMibSetRequestConfirm+0x7ac>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012fc0:	4b1e      	ldr	r3, [pc, #120]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8012fc2:	4a20      	ldr	r2, [pc, #128]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8012fc4:	589b      	ldr	r3, [r3, r2]
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	7911      	ldrb	r1, [r2, #4]
 8012fca:	227d      	movs	r2, #125	; 0x7d
 8012fcc:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8012fce:	4b1e      	ldr	r3, [pc, #120]	; (8013048 <LoRaMacMibSetRequestConfirm+0x35c>)
 8012fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fd2:	4a1a      	ldr	r2, [pc, #104]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8012fd4:	491b      	ldr	r1, [pc, #108]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8012fd6:	5852      	ldr	r2, [r2, r1]
 8012fd8:	217d      	movs	r1, #125	; 0x7d
 8012fda:	5c52      	ldrb	r2, [r2, r1]
 8012fdc:	0010      	movs	r0, r2
 8012fde:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8012fe0:	4b19      	ldr	r3, [pc, #100]	; (8013048 <LoRaMacMibSetRequestConfirm+0x35c>)
 8012fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fe4:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012fe6:	e260      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012fe8:	4b14      	ldr	r3, [pc, #80]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8012fea:	4a16      	ldr	r2, [pc, #88]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8012fec:	589b      	ldr	r3, [r3, r2]
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	7911      	ldrb	r1, [r2, #4]
 8012ff2:	22ca      	movs	r2, #202	; 0xca
 8012ff4:	5499      	strb	r1, [r3, r2]
            break;
 8012ff6:	e258      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	7a1b      	ldrb	r3, [r3, #8]
 8012ffc:	b25a      	sxtb	r2, r3
 8012ffe:	2108      	movs	r1, #8
 8013000:	187b      	adds	r3, r7, r1
 8013002:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013004:	4b0d      	ldr	r3, [pc, #52]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8013006:	4a0f      	ldr	r2, [pc, #60]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8013008:	589b      	ldr	r3, [r3, r2]
 801300a:	22b9      	movs	r2, #185	; 0xb9
 801300c:	5c9a      	ldrb	r2, [r3, r2]
 801300e:	187b      	adds	r3, r7, r1
 8013010:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8013012:	4b0a      	ldr	r3, [pc, #40]	; (801303c <LoRaMacMibSetRequestConfirm+0x350>)
 8013014:	4a0b      	ldr	r2, [pc, #44]	; (8013044 <LoRaMacMibSetRequestConfirm+0x358>)
 8013016:	589b      	ldr	r3, [r3, r2]
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	1879      	adds	r1, r7, r1
 801301c:	2207      	movs	r2, #7
 801301e:	0018      	movs	r0, r3
 8013020:	f003 fb75 	bl	801670e <RegionVerify>
 8013024:	0003      	movs	r3, r0
 8013026:	001a      	movs	r2, r3
 8013028:	2301      	movs	r3, #1
 801302a:	4053      	eors	r3, r2
 801302c:	b2db      	uxtb	r3, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00c      	beq.n	801304c <LoRaMacMibSetRequestConfirm+0x360>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013032:	2317      	movs	r3, #23
 8013034:	18fb      	adds	r3, r7, r3
 8013036:	2203      	movs	r2, #3
 8013038:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801303a:	e236      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
 801303c:	20000bb0 	.word	0x20000bb0
 8013040:	0801e8a8 	.word	0x0801e8a8
 8013044:	00000484 	.word	0x00000484
 8013048:	0801ec78 	.word	0x0801ec78
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	685a      	ldr	r2, [r3, #4]
 8013050:	2108      	movs	r1, #8
 8013052:	187b      	adds	r3, r7, r1
 8013054:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8013056:	4bd7      	ldr	r3, [pc, #860]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013058:	4ad7      	ldr	r2, [pc, #860]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801305a:	589b      	ldr	r3, [r3, r2]
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	1879      	adds	r1, r7, r1
 8013060:	2200      	movs	r2, #0
 8013062:	0018      	movs	r0, r3
 8013064:	f003 fb53 	bl	801670e <RegionVerify>
 8013068:	0003      	movs	r3, r0
 801306a:	001a      	movs	r2, r3
 801306c:	2301      	movs	r3, #1
 801306e:	4053      	eors	r3, r2
 8013070:	b2db      	uxtb	r3, r3
 8013072:	2b00      	cmp	r3, #0
 8013074:	d004      	beq.n	8013080 <LoRaMacMibSetRequestConfirm+0x394>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013076:	2317      	movs	r3, #23
 8013078:	18fb      	adds	r3, r7, r3
 801307a:	2203      	movs	r2, #3
 801307c:	701a      	strb	r2, [r3, #0]
            break;
 801307e:	e214      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013080:	4bcc      	ldr	r3, [pc, #816]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013082:	4acd      	ldr	r2, [pc, #820]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013084:	589b      	ldr	r3, [r3, r2]
 8013086:	21a8      	movs	r1, #168	; 0xa8
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	185b      	adds	r3, r3, r1
 801308c:	3204      	adds	r2, #4
 801308e:	ca03      	ldmia	r2!, {r0, r1}
 8013090:	c303      	stmia	r3!, {r0, r1}
            break;
 8013092:	e20a      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	7a1b      	ldrb	r3, [r3, #8]
 8013098:	b25a      	sxtb	r2, r3
 801309a:	2108      	movs	r1, #8
 801309c:	187b      	adds	r3, r7, r1
 801309e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80130a0:	4bc4      	ldr	r3, [pc, #784]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80130a2:	4ac5      	ldr	r2, [pc, #788]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80130a4:	589b      	ldr	r3, [r3, r2]
 80130a6:	22b9      	movs	r2, #185	; 0xb9
 80130a8:	5c9a      	ldrb	r2, [r3, r2]
 80130aa:	187b      	adds	r3, r7, r1
 80130ac:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80130ae:	4bc1      	ldr	r3, [pc, #772]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80130b0:	4ac1      	ldr	r2, [pc, #772]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80130b2:	589b      	ldr	r3, [r3, r2]
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	1879      	adds	r1, r7, r1
 80130b8:	2207      	movs	r2, #7
 80130ba:	0018      	movs	r0, r3
 80130bc:	f003 fb27 	bl	801670e <RegionVerify>
 80130c0:	1e03      	subs	r3, r0, #0
 80130c2:	d008      	beq.n	80130d6 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80130c4:	4bbb      	ldr	r3, [pc, #748]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80130c6:	4abc      	ldr	r2, [pc, #752]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80130c8:	589b      	ldr	r3, [r3, r2]
 80130ca:	687a      	ldr	r2, [r7, #4]
 80130cc:	3328      	adds	r3, #40	; 0x28
 80130ce:	3204      	adds	r2, #4
 80130d0:	ca03      	ldmia	r2!, {r0, r1}
 80130d2:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80130d4:	e1e9      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130d6:	2317      	movs	r3, #23
 80130d8:	18fb      	adds	r3, r7, r3
 80130da:	2203      	movs	r2, #3
 80130dc:	701a      	strb	r2, [r3, #0]
            break;
 80130de:	e1e4      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	7a1b      	ldrb	r3, [r3, #8]
 80130e4:	b25a      	sxtb	r2, r3
 80130e6:	2108      	movs	r1, #8
 80130e8:	187b      	adds	r3, r7, r1
 80130ea:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80130ec:	4bb1      	ldr	r3, [pc, #708]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80130ee:	4ab2      	ldr	r2, [pc, #712]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80130f0:	589b      	ldr	r3, [r3, r2]
 80130f2:	22b9      	movs	r2, #185	; 0xb9
 80130f4:	5c9a      	ldrb	r2, [r3, r2]
 80130f6:	187b      	adds	r3, r7, r1
 80130f8:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80130fa:	4bae      	ldr	r3, [pc, #696]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80130fc:	4aae      	ldr	r2, [pc, #696]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80130fe:	589b      	ldr	r3, [r3, r2]
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	1879      	adds	r1, r7, r1
 8013104:	2207      	movs	r2, #7
 8013106:	0018      	movs	r0, r3
 8013108:	f003 fb01 	bl	801670e <RegionVerify>
 801310c:	1e03      	subs	r3, r0, #0
 801310e:	d01f      	beq.n	8013150 <LoRaMacMibSetRequestConfirm+0x464>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013110:	4ba8      	ldr	r3, [pc, #672]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013112:	4aa9      	ldr	r2, [pc, #676]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013114:	589b      	ldr	r3, [r3, r2]
 8013116:	21b0      	movs	r1, #176	; 0xb0
 8013118:	687a      	ldr	r2, [r7, #4]
 801311a:	185b      	adds	r3, r3, r1
 801311c:	3204      	adds	r2, #4
 801311e:	ca03      	ldmia	r2!, {r0, r1}
 8013120:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013122:	4ba4      	ldr	r3, [pc, #656]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013124:	4aa4      	ldr	r2, [pc, #656]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013126:	589b      	ldr	r3, [r3, r2]
 8013128:	227c      	movs	r2, #124	; 0x7c
 801312a:	5c9b      	ldrb	r3, [r3, r2]
 801312c:	2b02      	cmp	r3, #2
 801312e:	d000      	beq.n	8013132 <LoRaMacMibSetRequestConfirm+0x446>
 8013130:	e1b4      	b.n	801349c <LoRaMacMibSetRequestConfirm+0x7b0>
 8013132:	4ba0      	ldr	r3, [pc, #640]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013134:	4aa0      	ldr	r2, [pc, #640]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013136:	589a      	ldr	r2, [r3, r2]
 8013138:	23b2      	movs	r3, #178	; 0xb2
 801313a:	005b      	lsls	r3, r3, #1
 801313c:	5cd3      	ldrb	r3, [r2, r3]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d100      	bne.n	8013144 <LoRaMacMibSetRequestConfirm+0x458>
 8013142:	e1ab      	b.n	801349c <LoRaMacMibSetRequestConfirm+0x7b0>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013144:	4b9d      	ldr	r3, [pc, #628]	; (80133bc <LoRaMacMibSetRequestConfirm+0x6d0>)
 8013146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013148:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801314a:	f7fe f9d7 	bl	80114fc <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801314e:	e1a5      	b.n	801349c <LoRaMacMibSetRequestConfirm+0x7b0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013150:	2317      	movs	r3, #23
 8013152:	18fb      	adds	r3, r7, r3
 8013154:	2203      	movs	r2, #3
 8013156:	701a      	strb	r2, [r3, #0]
            break;
 8013158:	e1a0      	b.n	801349c <LoRaMacMibSetRequestConfirm+0x7b0>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	7a1b      	ldrb	r3, [r3, #8]
 801315e:	b25a      	sxtb	r2, r3
 8013160:	2108      	movs	r1, #8
 8013162:	187b      	adds	r3, r7, r1
 8013164:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013166:	4b93      	ldr	r3, [pc, #588]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013168:	4a93      	ldr	r2, [pc, #588]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801316a:	589b      	ldr	r3, [r3, r2]
 801316c:	22b9      	movs	r2, #185	; 0xb9
 801316e:	5c9a      	ldrb	r2, [r3, r2]
 8013170:	187b      	adds	r3, r7, r1
 8013172:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013174:	4b8f      	ldr	r3, [pc, #572]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013176:	4a90      	ldr	r2, [pc, #576]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013178:	589b      	ldr	r3, [r3, r2]
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	1879      	adds	r1, r7, r1
 801317e:	2207      	movs	r2, #7
 8013180:	0018      	movs	r0, r3
 8013182:	f003 fac4 	bl	801670e <RegionVerify>
 8013186:	1e03      	subs	r3, r0, #0
 8013188:	d008      	beq.n	801319c <LoRaMacMibSetRequestConfirm+0x4b0>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801318a:	4b8a      	ldr	r3, [pc, #552]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801318c:	4a8a      	ldr	r2, [pc, #552]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801318e:	589b      	ldr	r3, [r3, r2]
 8013190:	687a      	ldr	r2, [r7, #4]
 8013192:	3330      	adds	r3, #48	; 0x30
 8013194:	3204      	adds	r2, #4
 8013196:	ca03      	ldmia	r2!, {r0, r1}
 8013198:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801319a:	e186      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801319c:	2317      	movs	r3, #23
 801319e:	18fb      	adds	r3, r7, r3
 80131a0:	2203      	movs	r2, #3
 80131a2:	701a      	strb	r2, [r3, #0]
            break;
 80131a4:	e181      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	685a      	ldr	r2, [r3, #4]
 80131aa:	210c      	movs	r1, #12
 80131ac:	187b      	adds	r3, r7, r1
 80131ae:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80131b0:	187b      	adds	r3, r7, r1
 80131b2:	2201      	movs	r2, #1
 80131b4:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 80131b6:	4b7f      	ldr	r3, [pc, #508]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80131b8:	4a7f      	ldr	r2, [pc, #508]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80131ba:	589b      	ldr	r3, [r3, r2]
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	187a      	adds	r2, r7, r1
 80131c0:	0011      	movs	r1, r2
 80131c2:	0018      	movs	r0, r3
 80131c4:	f003 fad5 	bl	8016772 <RegionChanMaskSet>
 80131c8:	0003      	movs	r3, r0
 80131ca:	001a      	movs	r2, r3
 80131cc:	2301      	movs	r3, #1
 80131ce:	4053      	eors	r3, r2
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d100      	bne.n	80131d8 <LoRaMacMibSetRequestConfirm+0x4ec>
 80131d6:	e163      	b.n	80134a0 <LoRaMacMibSetRequestConfirm+0x7b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131d8:	2317      	movs	r3, #23
 80131da:	18fb      	adds	r3, r7, r3
 80131dc:	2203      	movs	r2, #3
 80131de:	701a      	strb	r2, [r3, #0]
            }
            break;
 80131e0:	e15e      	b.n	80134a0 <LoRaMacMibSetRequestConfirm+0x7b4>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	685a      	ldr	r2, [r3, #4]
 80131e6:	210c      	movs	r1, #12
 80131e8:	187b      	adds	r3, r7, r1
 80131ea:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80131ec:	187b      	adds	r3, r7, r1
 80131ee:	2200      	movs	r2, #0
 80131f0:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 80131f2:	4b70      	ldr	r3, [pc, #448]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80131f4:	4a70      	ldr	r2, [pc, #448]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80131f6:	589b      	ldr	r3, [r3, r2]
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	187a      	adds	r2, r7, r1
 80131fc:	0011      	movs	r1, r2
 80131fe:	0018      	movs	r0, r3
 8013200:	f003 fab7 	bl	8016772 <RegionChanMaskSet>
 8013204:	0003      	movs	r3, r0
 8013206:	001a      	movs	r2, r3
 8013208:	2301      	movs	r3, #1
 801320a:	4053      	eors	r3, r2
 801320c:	b2db      	uxtb	r3, r3
 801320e:	2b00      	cmp	r3, #0
 8013210:	d100      	bne.n	8013214 <LoRaMacMibSetRequestConfirm+0x528>
 8013212:	e147      	b.n	80134a4 <LoRaMacMibSetRequestConfirm+0x7b8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013214:	2317      	movs	r3, #23
 8013216:	18fb      	adds	r3, r7, r3
 8013218:	2203      	movs	r2, #3
 801321a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801321c:	e142      	b.n	80134a4 <LoRaMacMibSetRequestConfirm+0x7b8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	791b      	ldrb	r3, [r3, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d00b      	beq.n	801323e <LoRaMacMibSetRequestConfirm+0x552>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801322a:	2b0f      	cmp	r3, #15
 801322c:	d807      	bhi.n	801323e <LoRaMacMibSetRequestConfirm+0x552>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801322e:	4b61      	ldr	r3, [pc, #388]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013230:	4a61      	ldr	r2, [pc, #388]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013232:	589b      	ldr	r3, [r3, r2]
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	7911      	ldrb	r1, [r2, #4]
 8013238:	22a4      	movs	r2, #164	; 0xa4
 801323a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801323c:	e135      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801323e:	2317      	movs	r3, #23
 8013240:	18fb      	adds	r3, r7, r3
 8013242:	2203      	movs	r2, #3
 8013244:	701a      	strb	r2, [r3, #0]
            break;
 8013246:	e130      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013248:	4b5a      	ldr	r3, [pc, #360]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801324a:	4a5b      	ldr	r2, [pc, #364]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801324c:	589a      	ldr	r2, [r3, r2]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	2190      	movs	r1, #144	; 0x90
 8013254:	5053      	str	r3, [r2, r1]
            break;
 8013256:	e128      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013258:	4b56      	ldr	r3, [pc, #344]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801325a:	4a57      	ldr	r2, [pc, #348]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801325c:	589a      	ldr	r2, [r3, r2]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	2194      	movs	r1, #148	; 0x94
 8013264:	5053      	str	r3, [r2, r1]
            break;
 8013266:	e120      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013268:	4b52      	ldr	r3, [pc, #328]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801326a:	4a53      	ldr	r2, [pc, #332]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801326c:	589a      	ldr	r2, [r3, r2]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	2198      	movs	r1, #152	; 0x98
 8013274:	5053      	str	r3, [r2, r1]
            break;
 8013276:	e118      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013278:	4b4e      	ldr	r3, [pc, #312]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801327a:	4a4f      	ldr	r2, [pc, #316]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801327c:	589a      	ldr	r2, [r3, r2]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	219c      	movs	r1, #156	; 0x9c
 8013284:	5053      	str	r3, [r2, r1]
            break;
 8013286:	e110      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013288:	4b4a      	ldr	r3, [pc, #296]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801328a:	4a4b      	ldr	r2, [pc, #300]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801328c:	589a      	ldr	r2, [r3, r2]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	685b      	ldr	r3, [r3, #4]
 8013292:	21a0      	movs	r1, #160	; 0xa0
 8013294:	5053      	str	r3, [r2, r1]
            break;
 8013296:	e108      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2204      	movs	r2, #4
 801329c:	569a      	ldrsb	r2, [r3, r2]
 801329e:	2408      	movs	r4, #8
 80132a0:	193b      	adds	r3, r7, r4
 80132a2:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 80132a4:	4b43      	ldr	r3, [pc, #268]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80132a6:	4a44      	ldr	r2, [pc, #272]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80132a8:	589b      	ldr	r3, [r3, r2]
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	1939      	adds	r1, r7, r4
 80132ae:	2206      	movs	r2, #6
 80132b0:	0018      	movs	r0, r3
 80132b2:	f003 fa2c 	bl	801670e <RegionVerify>
 80132b6:	1e03      	subs	r3, r0, #0
 80132b8:	d007      	beq.n	80132ca <LoRaMacMibSetRequestConfirm+0x5de>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 80132ba:	4b3e      	ldr	r3, [pc, #248]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80132bc:	4a3e      	ldr	r2, [pc, #248]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80132be:	589b      	ldr	r3, [r3, r2]
 80132c0:	193a      	adds	r2, r7, r4
 80132c2:	7812      	ldrb	r2, [r2, #0]
 80132c4:	b252      	sxtb	r2, r2
 80132c6:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80132c8:	e0ef      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132ca:	2317      	movs	r3, #23
 80132cc:	18fb      	adds	r3, r7, r3
 80132ce:	2203      	movs	r2, #3
 80132d0:	701a      	strb	r2, [r3, #0]
            break;
 80132d2:	e0ea      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2204      	movs	r2, #4
 80132d8:	569a      	ldrsb	r2, [r3, r2]
 80132da:	2408      	movs	r4, #8
 80132dc:	193b      	adds	r3, r7, r4
 80132de:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80132e0:	4b34      	ldr	r3, [pc, #208]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80132e2:	4a35      	ldr	r2, [pc, #212]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80132e4:	589b      	ldr	r3, [r3, r2]
 80132e6:	22b8      	movs	r2, #184	; 0xb8
 80132e8:	5c9a      	ldrb	r2, [r3, r2]
 80132ea:	193b      	adds	r3, r7, r4
 80132ec:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 80132ee:	4b31      	ldr	r3, [pc, #196]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80132f0:	4a31      	ldr	r2, [pc, #196]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80132f2:	589b      	ldr	r3, [r3, r2]
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	1939      	adds	r1, r7, r4
 80132f8:	2205      	movs	r2, #5
 80132fa:	0018      	movs	r0, r3
 80132fc:	f003 fa07 	bl	801670e <RegionVerify>
 8013300:	1e03      	subs	r3, r0, #0
 8013302:	d008      	beq.n	8013316 <LoRaMacMibSetRequestConfirm+0x62a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013304:	4b2b      	ldr	r3, [pc, #172]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013306:	4a2c      	ldr	r2, [pc, #176]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013308:	589b      	ldr	r3, [r3, r2]
 801330a:	193a      	adds	r2, r7, r4
 801330c:	2100      	movs	r1, #0
 801330e:	5651      	ldrsb	r1, [r2, r1]
 8013310:	2285      	movs	r2, #133	; 0x85
 8013312:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013314:	e0c9      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013316:	2317      	movs	r3, #23
 8013318:	18fb      	adds	r3, r7, r3
 801331a:	2203      	movs	r2, #3
 801331c:	701a      	strb	r2, [r3, #0]
            break;
 801331e:	e0c4      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2204      	movs	r2, #4
 8013324:	569a      	ldrsb	r2, [r3, r2]
 8013326:	2408      	movs	r4, #8
 8013328:	193b      	adds	r3, r7, r4
 801332a:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 801332c:	4b21      	ldr	r3, [pc, #132]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801332e:	4a22      	ldr	r2, [pc, #136]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013330:	589b      	ldr	r3, [r3, r2]
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	1939      	adds	r1, r7, r4
 8013336:	220a      	movs	r2, #10
 8013338:	0018      	movs	r0, r3
 801333a:	f003 f9e8 	bl	801670e <RegionVerify>
 801333e:	1e03      	subs	r3, r0, #0
 8013340:	d007      	beq.n	8013352 <LoRaMacMibSetRequestConfirm+0x666>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8013342:	4b1c      	ldr	r3, [pc, #112]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013344:	4a1c      	ldr	r2, [pc, #112]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013346:	589b      	ldr	r3, [r3, r2]
 8013348:	193a      	adds	r2, r7, r4
 801334a:	7812      	ldrb	r2, [r2, #0]
 801334c:	b252      	sxtb	r2, r2
 801334e:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013350:	e0ab      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013352:	2317      	movs	r3, #23
 8013354:	18fb      	adds	r3, r7, r3
 8013356:	2203      	movs	r2, #3
 8013358:	701a      	strb	r2, [r3, #0]
            break;
 801335a:	e0a6      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2204      	movs	r2, #4
 8013360:	569a      	ldrsb	r2, [r3, r2]
 8013362:	2408      	movs	r4, #8
 8013364:	193b      	adds	r3, r7, r4
 8013366:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8013368:	4b12      	ldr	r3, [pc, #72]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801336a:	4a13      	ldr	r2, [pc, #76]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801336c:	589b      	ldr	r3, [r3, r2]
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	1939      	adds	r1, r7, r4
 8013372:	2209      	movs	r2, #9
 8013374:	0018      	movs	r0, r3
 8013376:	f003 f9ca 	bl	801670e <RegionVerify>
 801337a:	1e03      	subs	r3, r0, #0
 801337c:	d008      	beq.n	8013390 <LoRaMacMibSetRequestConfirm+0x6a4>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 801337e:	4b0d      	ldr	r3, [pc, #52]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 8013380:	4a0d      	ldr	r2, [pc, #52]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 8013382:	589b      	ldr	r3, [r3, r2]
 8013384:	193a      	adds	r2, r7, r4
 8013386:	2100      	movs	r1, #0
 8013388:	5651      	ldrsb	r1, [r2, r1]
 801338a:	2284      	movs	r2, #132	; 0x84
 801338c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801338e:	e08c      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013390:	2317      	movs	r3, #23
 8013392:	18fb      	adds	r3, r7, r3
 8013394:	2203      	movs	r2, #3
 8013396:	701a      	strb	r2, [r3, #0]
            break;
 8013398:	e087      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801339a:	4b06      	ldr	r3, [pc, #24]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 801339c:	4a06      	ldr	r2, [pc, #24]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 801339e:	589b      	ldr	r3, [r3, r2]
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	6852      	ldr	r2, [r2, #4]
 80133a4:	609a      	str	r2, [r3, #8]
 80133a6:	4a03      	ldr	r2, [pc, #12]	; (80133b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
 80133a8:	4903      	ldr	r1, [pc, #12]	; (80133b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
 80133aa:	5852      	ldr	r2, [r2, r1]
 80133ac:	689b      	ldr	r3, [r3, #8]
 80133ae:	2188      	movs	r1, #136	; 0x88
 80133b0:	5053      	str	r3, [r2, r1]
            break;
 80133b2:	e07a      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
 80133b4:	20000bb0 	.word	0x20000bb0
 80133b8:	00000484 	.word	0x00000484
 80133bc:	0801ec78 	.word	0x0801ec78
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80133c0:	4b3f      	ldr	r3, [pc, #252]	; (80134c0 <LoRaMacMibSetRequestConfirm+0x7d4>)
 80133c2:	4a40      	ldr	r2, [pc, #256]	; (80134c4 <LoRaMacMibSetRequestConfirm+0x7d8>)
 80133c4:	589b      	ldr	r3, [r3, r2]
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	7912      	ldrb	r2, [r2, #4]
 80133ca:	731a      	strb	r2, [r3, #12]
 80133cc:	4a3c      	ldr	r2, [pc, #240]	; (80134c0 <LoRaMacMibSetRequestConfirm+0x7d4>)
 80133ce:	493d      	ldr	r1, [pc, #244]	; (80134c4 <LoRaMacMibSetRequestConfirm+0x7d8>)
 80133d0:	5852      	ldr	r2, [r2, r1]
 80133d2:	7b19      	ldrb	r1, [r3, #12]
 80133d4:	238c      	movs	r3, #140	; 0x8c
 80133d6:	54d1      	strb	r1, [r2, r3]
            break;
 80133d8:	e067      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80133da:	4b39      	ldr	r3, [pc, #228]	; (80134c0 <LoRaMacMibSetRequestConfirm+0x7d4>)
 80133dc:	4a39      	ldr	r2, [pc, #228]	; (80134c4 <LoRaMacMibSetRequestConfirm+0x7d8>)
 80133de:	589a      	ldr	r2, [r3, r2]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	21c0      	movs	r1, #192	; 0xc0
 80133e6:	5053      	str	r3, [r2, r1]
            break;
 80133e8:	e05f      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80133ea:	4b35      	ldr	r3, [pc, #212]	; (80134c0 <LoRaMacMibSetRequestConfirm+0x7d4>)
 80133ec:	4a35      	ldr	r2, [pc, #212]	; (80134c4 <LoRaMacMibSetRequestConfirm+0x7d8>)
 80133ee:	589b      	ldr	r3, [r3, r2]
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	6852      	ldr	r2, [r2, #4]
 80133f4:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 80133f6:	e058      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d009      	beq.n	8013414 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	2217      	movs	r2, #23
 8013406:	18bc      	adds	r4, r7, r2
 8013408:	0018      	movs	r0, r3
 801340a:	f7fe fbb9 	bl	8011b80 <RestoreCtxs>
 801340e:	0003      	movs	r3, r0
 8013410:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013412:	e04a      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013414:	2317      	movs	r3, #23
 8013416:	18fb      	adds	r3, r7, r3
 8013418:	2203      	movs	r2, #3
 801341a:	701a      	strb	r2, [r3, #0]
            break;
 801341c:	e045      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	799b      	ldrb	r3, [r3, #6]
 8013422:	2b01      	cmp	r3, #1
 8013424:	d810      	bhi.n	8013448 <LoRaMacMibSetRequestConfirm+0x75c>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8013426:	4b26      	ldr	r3, [pc, #152]	; (80134c0 <LoRaMacMibSetRequestConfirm+0x7d4>)
 8013428:	4a26      	ldr	r2, [pc, #152]	; (80134c4 <LoRaMacMibSetRequestConfirm+0x7d8>)
 801342a:	5899      	ldr	r1, [r3, r2]
 801342c:	23b0      	movs	r3, #176	; 0xb0
 801342e:	005a      	lsls	r2, r3, #1
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	0018      	movs	r0, r3
 801343c:	f002 f84e 	bl	80154dc <LoRaMacCryptoSetLrWanVersion>
 8013440:	1e03      	subs	r3, r0, #0
 8013442:	d031      	beq.n	80134a8 <LoRaMacMibSetRequestConfirm+0x7bc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013444:	2311      	movs	r3, #17
 8013446:	e037      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x7cc>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013448:	2317      	movs	r3, #23
 801344a:	18fb      	adds	r3, r7, r3
 801344c:	2203      	movs	r2, #3
 801344e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013450:	e02a      	b.n	80134a8 <LoRaMacMibSetRequestConfirm+0x7bc>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013452:	2317      	movs	r3, #23
 8013454:	18fc      	adds	r4, r7, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	0018      	movs	r0, r3
 801345a:	f000 fc95 	bl	8013d88 <LoRaMacMibClassBSetRequestConfirm>
 801345e:	0003      	movs	r3, r0
 8013460:	7023      	strb	r3, [r4, #0]
            break;
 8013462:	e022      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013464:	46c0      	nop			; (mov r8, r8)
 8013466:	e020      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013468:	46c0      	nop			; (mov r8, r8)
 801346a:	e01e      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 801346c:	46c0      	nop			; (mov r8, r8)
 801346e:	e01c      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013470:	46c0      	nop			; (mov r8, r8)
 8013472:	e01a      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013474:	46c0      	nop			; (mov r8, r8)
 8013476:	e018      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013478:	46c0      	nop			; (mov r8, r8)
 801347a:	e016      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 801347c:	46c0      	nop			; (mov r8, r8)
 801347e:	e014      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013480:	46c0      	nop			; (mov r8, r8)
 8013482:	e012      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013484:	46c0      	nop			; (mov r8, r8)
 8013486:	e010      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013488:	46c0      	nop			; (mov r8, r8)
 801348a:	e00e      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 801348c:	46c0      	nop			; (mov r8, r8)
 801348e:	e00c      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013490:	46c0      	nop			; (mov r8, r8)
 8013492:	e00a      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013494:	46c0      	nop			; (mov r8, r8)
 8013496:	e008      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 8013498:	46c0      	nop			; (mov r8, r8)
 801349a:	e006      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 801349c:	46c0      	nop			; (mov r8, r8)
 801349e:	e004      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 80134a0:	46c0      	nop			; (mov r8, r8)
 80134a2:	e002      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 80134a4:	46c0      	nop			; (mov r8, r8)
 80134a6:	e000      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x7be>
            break;
 80134a8:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 80134aa:	f7fe fdb5 	bl	8012018 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 80134ae:	f7fe fdab 	bl	8012008 <EventMacNvmCtxChanged>
    return status;
 80134b2:	2317      	movs	r3, #23
 80134b4:	18fb      	adds	r3, r7, r3
 80134b6:	781b      	ldrb	r3, [r3, #0]
}
 80134b8:	0018      	movs	r0, r3
 80134ba:	46bd      	mov	sp, r7
 80134bc:	b007      	add	sp, #28
 80134be:	bd90      	pop	{r4, r7, pc}
 80134c0:	20000bb0 	.word	0x20000bb0
 80134c4:	00000484 	.word	0x00000484

080134c8 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80134c8:	b5b0      	push	{r4, r5, r7, lr}
 80134ca:	b086      	sub	sp, #24
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134d0:	2317      	movs	r3, #23
 80134d2:	18fb      	adds	r3, r7, r3
 80134d4:	2202      	movs	r2, #2
 80134d6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80134d8:	230c      	movs	r3, #12
 80134da:	18fb      	adds	r3, r7, r3
 80134dc:	2200      	movs	r2, #0
 80134de:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d101      	bne.n	80134ea <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80134e6:	2303      	movs	r3, #3
 80134e8:	e133      	b.n	8013752 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 80134ea:	f7fe fde1 	bl	80120b0 <LoRaMacIsBusy>
 80134ee:	1e03      	subs	r3, r0, #0
 80134f0:	d001      	beq.n	80134f6 <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 80134f2:	2301      	movs	r3, #1
 80134f4:	e12d      	b.n	8013752 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80134f6:	f001 fa0b 	bl	8014910 <LoRaMacConfirmQueueIsFull>
 80134fa:	1e03      	subs	r3, r0, #0
 80134fc:	d001      	beq.n	8013502 <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 80134fe:	2301      	movs	r3, #1
 8013500:	e127      	b.n	8013752 <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013502:	f001 f9fb 	bl	80148fc <LoRaMacConfirmQueueGetCnt>
 8013506:	1e03      	subs	r3, r0, #0
 8013508:	d105      	bne.n	8013516 <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801350a:	4b94      	ldr	r3, [pc, #592]	; (801375c <LoRaMacMlmeRequest+0x294>)
 801350c:	2214      	movs	r2, #20
 801350e:	2100      	movs	r1, #0
 8013510:	0018      	movs	r0, r3
 8013512:	f005 fd57 	bl	8018fc4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013516:	4b92      	ldr	r3, [pc, #584]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 8013518:	4a92      	ldr	r2, [pc, #584]	; (8013764 <LoRaMacMlmeRequest+0x29c>)
 801351a:	2101      	movs	r1, #1
 801351c:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801351e:	4b90      	ldr	r3, [pc, #576]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 8013520:	4a91      	ldr	r2, [pc, #580]	; (8013768 <LoRaMacMlmeRequest+0x2a0>)
 8013522:	5c99      	ldrb	r1, [r3, r2]
 8013524:	2004      	movs	r0, #4
 8013526:	4301      	orrs	r1, r0
 8013528:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	781a      	ldrb	r2, [r3, #0]
 801352e:	2110      	movs	r1, #16
 8013530:	187b      	adds	r3, r7, r1
 8013532:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013534:	187b      	adds	r3, r7, r1
 8013536:	2201      	movs	r2, #1
 8013538:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 801353a:	187b      	adds	r3, r7, r1
 801353c:	2200      	movs	r2, #0
 801353e:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	2b0e      	cmp	r3, #14
 8013546:	d900      	bls.n	801354a <LoRaMacMlmeRequest+0x82>
 8013548:	e0d4      	b.n	80136f4 <LoRaMacMlmeRequest+0x22c>
 801354a:	009a      	lsls	r2, r3, #2
 801354c:	4b87      	ldr	r3, [pc, #540]	; (801376c <LoRaMacMlmeRequest+0x2a4>)
 801354e:	18d3      	adds	r3, r2, r3
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013554:	4a82      	ldr	r2, [pc, #520]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 8013556:	23d0      	movs	r3, #208	; 0xd0
 8013558:	009b      	lsls	r3, r3, #2
 801355a:	58d3      	ldr	r3, [r2, r3]
 801355c:	2220      	movs	r2, #32
 801355e:	4013      	ands	r3, r2
 8013560:	d001      	beq.n	8013566 <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 8013562:	2301      	movs	r3, #1
 8013564:	e0f5      	b.n	8013752 <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 8013566:	f7fd fe97 	bl	8011298 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801356a:	4b7d      	ldr	r3, [pc, #500]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 801356c:	4a80      	ldr	r2, [pc, #512]	; (8013770 <LoRaMacMlmeRequest+0x2a8>)
 801356e:	589b      	ldr	r3, [r3, r2]
 8013570:	7818      	ldrb	r0, [r3, #0]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	791b      	ldrb	r3, [r3, #4]
 8013576:	b259      	sxtb	r1, r3
 8013578:	4b79      	ldr	r3, [pc, #484]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 801357a:	4a7d      	ldr	r2, [pc, #500]	; (8013770 <LoRaMacMlmeRequest+0x2a8>)
 801357c:	589c      	ldr	r4, [r3, r2]
 801357e:	2200      	movs	r2, #0
 8013580:	f003 f9dc 	bl	801693c <RegionAlternateDr>
 8013584:	0003      	movs	r3, r0
 8013586:	001a      	movs	r2, r3
 8013588:	2385      	movs	r3, #133	; 0x85
 801358a:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801358c:	2310      	movs	r3, #16
 801358e:	18fb      	adds	r3, r7, r3
 8013590:	2207      	movs	r2, #7
 8013592:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 8013594:	2517      	movs	r5, #23
 8013596:	197c      	adds	r4, r7, r5
 8013598:	20ff      	movs	r0, #255	; 0xff
 801359a:	f7fd fb43 	bl	8010c24 <SendReJoinReq>
 801359e:	0003      	movs	r3, r0
 80135a0:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 80135a2:	197b      	adds	r3, r7, r5
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d100      	bne.n	80135ac <LoRaMacMlmeRequest+0xe4>
 80135aa:	e0a5      	b.n	80136f8 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80135ac:	4b6c      	ldr	r3, [pc, #432]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 80135ae:	4a70      	ldr	r2, [pc, #448]	; (8013770 <LoRaMacMlmeRequest+0x2a8>)
 80135b0:	589b      	ldr	r3, [r3, r2]
 80135b2:	7818      	ldrb	r0, [r3, #0]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	791b      	ldrb	r3, [r3, #4]
 80135b8:	b259      	sxtb	r1, r3
 80135ba:	4b69      	ldr	r3, [pc, #420]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 80135bc:	4a6c      	ldr	r2, [pc, #432]	; (8013770 <LoRaMacMlmeRequest+0x2a8>)
 80135be:	589c      	ldr	r4, [r3, r2]
 80135c0:	2201      	movs	r2, #1
 80135c2:	f003 f9bb 	bl	801693c <RegionAlternateDr>
 80135c6:	0003      	movs	r3, r0
 80135c8:	001a      	movs	r2, r3
 80135ca:	2385      	movs	r3, #133	; 0x85
 80135cc:	54e2      	strb	r2, [r4, r3]
            }
            break;
 80135ce:	e093      	b.n	80136f8 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80135d0:	2417      	movs	r4, #23
 80135d2:	193b      	adds	r3, r7, r4
 80135d4:	2200      	movs	r2, #0
 80135d6:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80135d8:	230c      	movs	r3, #12
 80135da:	18fb      	adds	r3, r7, r3
 80135dc:	2200      	movs	r2, #0
 80135de:	0019      	movs	r1, r3
 80135e0:	2002      	movs	r0, #2
 80135e2:	f000 fd7d 	bl	80140e0 <LoRaMacCommandsAddCmd>
 80135e6:	1e03      	subs	r3, r0, #0
 80135e8:	d100      	bne.n	80135ec <LoRaMacMlmeRequest+0x124>
 80135ea:	e087      	b.n	80136fc <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80135ec:	193b      	adds	r3, r7, r4
 80135ee:	2213      	movs	r2, #19
 80135f0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80135f2:	e083      	b.n	80136fc <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	889b      	ldrh	r3, [r3, #4]
 80135f8:	2217      	movs	r2, #23
 80135fa:	18bc      	adds	r4, r7, r2
 80135fc:	0018      	movs	r0, r3
 80135fe:	f7fe f9f5 	bl	80119ec <SetTxContinuousWave>
 8013602:	0003      	movs	r3, r0
 8013604:	7023      	strb	r3, [r4, #0]
            break;
 8013606:	e080      	b.n	801370a <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	8898      	ldrh	r0, [r3, #4]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6899      	ldr	r1, [r3, #8]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	7b1b      	ldrb	r3, [r3, #12]
 8013614:	2217      	movs	r2, #23
 8013616:	18bc      	adds	r4, r7, r2
 8013618:	001a      	movs	r2, r3
 801361a:	f7fe fa33 	bl	8011a84 <SetTxContinuousWave1>
 801361e:	0003      	movs	r3, r0
 8013620:	7023      	strb	r3, [r4, #0]
            break;
 8013622:	e072      	b.n	801370a <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013624:	2417      	movs	r4, #23
 8013626:	193b      	adds	r3, r7, r4
 8013628:	2200      	movs	r2, #0
 801362a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801362c:	230c      	movs	r3, #12
 801362e:	18fb      	adds	r3, r7, r3
 8013630:	2200      	movs	r2, #0
 8013632:	0019      	movs	r1, r3
 8013634:	200d      	movs	r0, #13
 8013636:	f000 fd53 	bl	80140e0 <LoRaMacCommandsAddCmd>
 801363a:	1e03      	subs	r3, r0, #0
 801363c:	d060      	beq.n	8013700 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801363e:	193b      	adds	r3, r7, r4
 8013640:	2213      	movs	r2, #19
 8013642:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013644:	e05c      	b.n	8013700 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8013646:	4b46      	ldr	r3, [pc, #280]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 8013648:	4a49      	ldr	r2, [pc, #292]	; (8013770 <LoRaMacMlmeRequest+0x2a8>)
 801364a:	589b      	ldr	r3, [r3, r2]
 801364c:	227c      	movs	r2, #124	; 0x7c
 801364e:	5c9b      	ldrb	r3, [r3, r2]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d157      	bne.n	8013704 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013654:	2416      	movs	r4, #22
 8013656:	193b      	adds	r3, r7, r4
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	7912      	ldrb	r2, [r2, #4]
 801365c:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	791b      	ldrb	r3, [r3, #4]
 8013662:	075b      	lsls	r3, r3, #29
 8013664:	0f5b      	lsrs	r3, r3, #29
 8013666:	b2db      	uxtb	r3, r3
 8013668:	0018      	movs	r0, r3
 801366a:	f000 fb65 	bl	8013d38 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801366e:	210c      	movs	r1, #12
 8013670:	187b      	adds	r3, r7, r1
 8013672:	193a      	adds	r2, r7, r4
 8013674:	7812      	ldrb	r2, [r2, #0]
 8013676:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8013678:	2417      	movs	r4, #23
 801367a:	193b      	adds	r3, r7, r4
 801367c:	2200      	movs	r2, #0
 801367e:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013680:	187b      	adds	r3, r7, r1
 8013682:	2201      	movs	r2, #1
 8013684:	0019      	movs	r1, r3
 8013686:	2010      	movs	r0, #16
 8013688:	f000 fd2a 	bl	80140e0 <LoRaMacCommandsAddCmd>
 801368c:	1e03      	subs	r3, r0, #0
 801368e:	d039      	beq.n	8013704 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013690:	193b      	adds	r3, r7, r4
 8013692:	2213      	movs	r2, #19
 8013694:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8013696:	e035      	b.n	8013704 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013698:	2417      	movs	r4, #23
 801369a:	193b      	adds	r3, r7, r4
 801369c:	2200      	movs	r2, #0
 801369e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80136a0:	230c      	movs	r3, #12
 80136a2:	18fb      	adds	r3, r7, r3
 80136a4:	2200      	movs	r2, #0
 80136a6:	0019      	movs	r1, r3
 80136a8:	2012      	movs	r0, #18
 80136aa:	f000 fd19 	bl	80140e0 <LoRaMacCommandsAddCmd>
 80136ae:	1e03      	subs	r3, r0, #0
 80136b0:	d02a      	beq.n	8013708 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80136b2:	193b      	adds	r3, r7, r4
 80136b4:	2213      	movs	r2, #19
 80136b6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80136b8:	e026      	b.n	8013708 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80136ba:	2310      	movs	r3, #16
 80136bc:	18fb      	adds	r3, r7, r3
 80136be:	2201      	movs	r2, #1
 80136c0:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80136c2:	f000 faf7 	bl	8013cb4 <LoRaMacClassBIsAcquisitionInProgress>
 80136c6:	0003      	movs	r3, r0
 80136c8:	001a      	movs	r2, r3
 80136ca:	2301      	movs	r3, #1
 80136cc:	4053      	eors	r3, r2
 80136ce:	b2db      	uxtb	r3, r3
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d00a      	beq.n	80136ea <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80136d4:	2000      	movs	r0, #0
 80136d6:	f000 facf 	bl	8013c78 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80136da:	2000      	movs	r0, #0
 80136dc:	f000 faf0 	bl	8013cc0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80136e0:	2317      	movs	r3, #23
 80136e2:	18fb      	adds	r3, r7, r3
 80136e4:	2200      	movs	r2, #0
 80136e6:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80136e8:	e00f      	b.n	801370a <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 80136ea:	2317      	movs	r3, #23
 80136ec:	18fb      	adds	r3, r7, r3
 80136ee:	2201      	movs	r2, #1
 80136f0:	701a      	strb	r2, [r3, #0]
            break;
 80136f2:	e00a      	b.n	801370a <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 80136f4:	46c0      	nop			; (mov r8, r8)
 80136f6:	e008      	b.n	801370a <LoRaMacMlmeRequest+0x242>
            break;
 80136f8:	46c0      	nop			; (mov r8, r8)
 80136fa:	e006      	b.n	801370a <LoRaMacMlmeRequest+0x242>
            break;
 80136fc:	46c0      	nop			; (mov r8, r8)
 80136fe:	e004      	b.n	801370a <LoRaMacMlmeRequest+0x242>
            break;
 8013700:	46c0      	nop			; (mov r8, r8)
 8013702:	e002      	b.n	801370a <LoRaMacMlmeRequest+0x242>
            break;
 8013704:	46c0      	nop			; (mov r8, r8)
 8013706:	e000      	b.n	801370a <LoRaMacMlmeRequest+0x242>
            break;
 8013708:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801370a:	4a15      	ldr	r2, [pc, #84]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 801370c:	2391      	movs	r3, #145	; 0x91
 801370e:	00db      	lsls	r3, r3, #3
 8013710:	58d2      	ldr	r2, [r2, r3]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013716:	2317      	movs	r3, #23
 8013718:	18fb      	adds	r3, r7, r3
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d00e      	beq.n	801373e <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013720:	f001 f8ec 	bl	80148fc <LoRaMacConfirmQueueGetCnt>
 8013724:	1e03      	subs	r3, r0, #0
 8013726:	d111      	bne.n	801374c <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 8013728:	4b0d      	ldr	r3, [pc, #52]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 801372a:	4a12      	ldr	r2, [pc, #72]	; (8013774 <LoRaMacMlmeRequest+0x2ac>)
 801372c:	2100      	movs	r1, #0
 801372e:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013730:	4b0b      	ldr	r3, [pc, #44]	; (8013760 <LoRaMacMlmeRequest+0x298>)
 8013732:	4a0d      	ldr	r2, [pc, #52]	; (8013768 <LoRaMacMlmeRequest+0x2a0>)
 8013734:	5c99      	ldrb	r1, [r3, r2]
 8013736:	2004      	movs	r0, #4
 8013738:	4381      	bics	r1, r0
 801373a:	5499      	strb	r1, [r3, r2]
 801373c:	e006      	b.n	801374c <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801373e:	2310      	movs	r3, #16
 8013740:	18fb      	adds	r3, r7, r3
 8013742:	0018      	movs	r0, r3
 8013744:	f000 ff6c 	bl	8014620 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8013748:	f7fe fc5e 	bl	8012008 <EventMacNvmCtxChanged>
    }
    return status;
 801374c:	2317      	movs	r3, #23
 801374e:	18fb      	adds	r3, r7, r3
 8013750:	781b      	ldrb	r3, [r3, #0]
}
 8013752:	0018      	movs	r0, r3
 8013754:	46bd      	mov	sp, r7
 8013756:	b006      	add	sp, #24
 8013758:	bdb0      	pop	{r4, r5, r7, pc}
 801375a:	46c0      	nop			; (mov r8, r8)
 801375c:	20001000 	.word	0x20001000
 8013760:	20000bb0 	.word	0x20000bb0
 8013764:	00000451 	.word	0x00000451
 8013768:	00000481 	.word	0x00000481
 801376c:	0801e95c 	.word	0x0801e95c
 8013770:	00000484 	.word	0x00000484
 8013774:	00000414 	.word	0x00000414

08013778 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801377a:	b08d      	sub	sp, #52	; 0x34
 801377c:	af02      	add	r7, sp, #8
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	000a      	movs	r2, r1
 8013782:	1cfb      	adds	r3, r7, #3
 8013784:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013786:	2327      	movs	r3, #39	; 0x27
 8013788:	18fb      	adds	r3, r7, r3
 801378a:	2202      	movs	r2, #2
 801378c:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801378e:	2326      	movs	r3, #38	; 0x26
 8013790:	18fb      	adds	r3, r7, r3
 8013792:	2200      	movs	r2, #0
 8013794:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8013796:	231d      	movs	r3, #29
 8013798:	18fb      	adds	r3, r7, r3
 801379a:	2200      	movs	r2, #0
 801379c:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 801379e:	231c      	movs	r3, #28
 80137a0:	18fb      	adds	r3, r7, r3
 80137a2:	2200      	movs	r2, #0
 80137a4:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d101      	bne.n	80137b0 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80137ac:	2303      	movs	r3, #3
 80137ae:	e11b      	b.n	80139e8 <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 80137b0:	f7fe fc7e 	bl	80120b0 <LoRaMacIsBusy>
 80137b4:	1e03      	subs	r3, r0, #0
 80137b6:	d001      	beq.n	80137bc <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 80137b8:	2301      	movs	r3, #1
 80137ba:	e115      	b.n	80139e8 <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 80137bc:	230c      	movs	r3, #12
 80137be:	18fb      	adds	r3, r7, r3
 80137c0:	2200      	movs	r2, #0
 80137c2:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80137c4:	4b8a      	ldr	r3, [pc, #552]	; (80139f0 <LoRaMacMcpsRequest+0x278>)
 80137c6:	2214      	movs	r2, #20
 80137c8:	2100      	movs	r1, #0
 80137ca:	0018      	movs	r0, r3
 80137cc:	f005 fbfa 	bl	8018fc4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80137d0:	4b88      	ldr	r3, [pc, #544]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80137d2:	4a89      	ldr	r2, [pc, #548]	; (80139f8 <LoRaMacMcpsRequest+0x280>)
 80137d4:	2101      	movs	r1, #1
 80137d6:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80137d8:	4b86      	ldr	r3, [pc, #536]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80137da:	4a88      	ldr	r2, [pc, #544]	; (80139fc <LoRaMacMcpsRequest+0x284>)
 80137dc:	2101      	movs	r1, #1
 80137de:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	2b03      	cmp	r3, #3
 80137e6:	d056      	beq.n	8013896 <LoRaMacMcpsRequest+0x11e>
 80137e8:	dc72      	bgt.n	80138d0 <LoRaMacMcpsRequest+0x158>
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d002      	beq.n	80137f4 <LoRaMacMcpsRequest+0x7c>
 80137ee:	2b01      	cmp	r3, #1
 80137f0:	d024      	beq.n	801383c <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80137f2:	e06d      	b.n	80138d0 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 80137f4:	231c      	movs	r3, #28
 80137f6:	18fb      	adds	r3, r7, r3
 80137f8:	2201      	movs	r2, #1
 80137fa:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 80137fc:	4b7d      	ldr	r3, [pc, #500]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80137fe:	4a80      	ldr	r2, [pc, #512]	; (8013a00 <LoRaMacMcpsRequest+0x288>)
 8013800:	2101      	movs	r1, #1
 8013802:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013804:	230c      	movs	r3, #12
 8013806:	18fb      	adds	r3, r7, r3
 8013808:	781a      	ldrb	r2, [r3, #0]
 801380a:	211f      	movs	r1, #31
 801380c:	400a      	ands	r2, r1
 801380e:	1c11      	adds	r1, r2, #0
 8013810:	2240      	movs	r2, #64	; 0x40
 8013812:	430a      	orrs	r2, r1
 8013814:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8013816:	2326      	movs	r3, #38	; 0x26
 8013818:	18fb      	adds	r3, r7, r3
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	7912      	ldrb	r2, [r2, #4]
 801381e:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	689b      	ldr	r3, [r3, #8]
 8013824:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8013826:	231e      	movs	r3, #30
 8013828:	18fb      	adds	r3, r7, r3
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	8992      	ldrh	r2, [r2, #12]
 801382e:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8013830:	231d      	movs	r3, #29
 8013832:	18fb      	adds	r3, r7, r3
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	7b92      	ldrb	r2, [r2, #14]
 8013838:	701a      	strb	r2, [r3, #0]
            break;
 801383a:	e04a      	b.n	80138d2 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 801383c:	231c      	movs	r3, #28
 801383e:	18fb      	adds	r3, r7, r3
 8013840:	2201      	movs	r2, #1
 8013842:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	7bdb      	ldrb	r3, [r3, #15]
 8013848:	1c1a      	adds	r2, r3, #0
 801384a:	b2d3      	uxtb	r3, r2
 801384c:	2b08      	cmp	r3, #8
 801384e:	d901      	bls.n	8013854 <LoRaMacMcpsRequest+0xdc>
 8013850:	2308      	movs	r3, #8
 8013852:	1c1a      	adds	r2, r3, #0
 8013854:	b2d1      	uxtb	r1, r2
 8013856:	4b67      	ldr	r3, [pc, #412]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 8013858:	4a69      	ldr	r2, [pc, #420]	; (8013a00 <LoRaMacMcpsRequest+0x288>)
 801385a:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801385c:	230c      	movs	r3, #12
 801385e:	18fb      	adds	r3, r7, r3
 8013860:	781a      	ldrb	r2, [r3, #0]
 8013862:	211f      	movs	r1, #31
 8013864:	400a      	ands	r2, r1
 8013866:	1c11      	adds	r1, r2, #0
 8013868:	2280      	movs	r2, #128	; 0x80
 801386a:	4252      	negs	r2, r2
 801386c:	430a      	orrs	r2, r1
 801386e:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8013870:	2326      	movs	r3, #38	; 0x26
 8013872:	18fb      	adds	r3, r7, r3
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	7912      	ldrb	r2, [r2, #4]
 8013878:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	689b      	ldr	r3, [r3, #8]
 801387e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8013880:	231e      	movs	r3, #30
 8013882:	18fb      	adds	r3, r7, r3
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	8992      	ldrh	r2, [r2, #12]
 8013888:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 801388a:	231d      	movs	r3, #29
 801388c:	18fb      	adds	r3, r7, r3
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	7b92      	ldrb	r2, [r2, #14]
 8013892:	701a      	strb	r2, [r3, #0]
            break;
 8013894:	e01d      	b.n	80138d2 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8013896:	231c      	movs	r3, #28
 8013898:	18fb      	adds	r3, r7, r3
 801389a:	2201      	movs	r2, #1
 801389c:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 801389e:	4b55      	ldr	r3, [pc, #340]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80138a0:	4a57      	ldr	r2, [pc, #348]	; (8013a00 <LoRaMacMcpsRequest+0x288>)
 80138a2:	2101      	movs	r1, #1
 80138a4:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80138a6:	230c      	movs	r3, #12
 80138a8:	18fb      	adds	r3, r7, r3
 80138aa:	781a      	ldrb	r2, [r3, #0]
 80138ac:	2120      	movs	r1, #32
 80138ae:	4249      	negs	r1, r1
 80138b0:	430a      	orrs	r2, r1
 80138b2:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80138ba:	231e      	movs	r3, #30
 80138bc:	18fb      	adds	r3, r7, r3
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	8912      	ldrh	r2, [r2, #8]
 80138c2:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80138c4:	231d      	movs	r3, #29
 80138c6:	18fb      	adds	r3, r7, r3
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	7a92      	ldrb	r2, [r2, #10]
 80138cc:	701a      	strb	r2, [r3, #0]
            break;
 80138ce:	e000      	b.n	80138d2 <LoRaMacMcpsRequest+0x15a>
            break;
 80138d0:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80138d2:	2114      	movs	r1, #20
 80138d4:	187b      	adds	r3, r7, r1
 80138d6:	2202      	movs	r2, #2
 80138d8:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80138da:	4b46      	ldr	r3, [pc, #280]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80138dc:	4a49      	ldr	r2, [pc, #292]	; (8013a04 <LoRaMacMcpsRequest+0x28c>)
 80138de:	589b      	ldr	r3, [r3, r2]
 80138e0:	22b8      	movs	r2, #184	; 0xb8
 80138e2:	5c9a      	ldrb	r2, [r3, r2]
 80138e4:	187b      	adds	r3, r7, r1
 80138e6:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80138e8:	4b42      	ldr	r3, [pc, #264]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80138ea:	4a46      	ldr	r2, [pc, #280]	; (8013a04 <LoRaMacMcpsRequest+0x28c>)
 80138ec:	589b      	ldr	r3, [r3, r2]
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	187a      	adds	r2, r7, r1
 80138f2:	0011      	movs	r1, r2
 80138f4:	0018      	movs	r0, r3
 80138f6:	f002 fea4 	bl	8016642 <RegionGetPhyParam>
 80138fa:	0003      	movs	r3, r0
 80138fc:	001a      	movs	r2, r3
 80138fe:	2110      	movs	r1, #16
 8013900:	187b      	adds	r3, r7, r1
 8013902:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013904:	187b      	adds	r3, r7, r1
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	b259      	sxtb	r1, r3
 801390a:	231d      	movs	r3, #29
 801390c:	18fa      	adds	r2, r7, r3
 801390e:	18fb      	adds	r3, r7, r3
 8013910:	1c0c      	adds	r4, r1, #0
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	b258      	sxtb	r0, r3
 8013916:	b261      	sxtb	r1, r4
 8013918:	4288      	cmp	r0, r1
 801391a:	da00      	bge.n	801391e <LoRaMacMcpsRequest+0x1a6>
 801391c:	1c23      	adds	r3, r4, #0
 801391e:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8013920:	231c      	movs	r3, #28
 8013922:	18fb      	adds	r3, r7, r3
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d055      	beq.n	80139d6 <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 801392a:	4b32      	ldr	r3, [pc, #200]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 801392c:	4a35      	ldr	r2, [pc, #212]	; (8013a04 <LoRaMacMcpsRequest+0x28c>)
 801392e:	589b      	ldr	r3, [r3, r2]
 8013930:	227e      	movs	r2, #126	; 0x7e
 8013932:	5c9b      	ldrb	r3, [r3, r2]
 8013934:	2201      	movs	r2, #1
 8013936:	4053      	eors	r3, r2
 8013938:	b2db      	uxtb	r3, r3
 801393a:	2b00      	cmp	r3, #0
 801393c:	d022      	beq.n	8013984 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 801393e:	2408      	movs	r4, #8
 8013940:	193b      	adds	r3, r7, r4
 8013942:	221d      	movs	r2, #29
 8013944:	18ba      	adds	r2, r7, r2
 8013946:	7812      	ldrb	r2, [r2, #0]
 8013948:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801394a:	4b2a      	ldr	r3, [pc, #168]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 801394c:	4a2d      	ldr	r2, [pc, #180]	; (8013a04 <LoRaMacMcpsRequest+0x28c>)
 801394e:	589b      	ldr	r3, [r3, r2]
 8013950:	22b8      	movs	r2, #184	; 0xb8
 8013952:	5c9a      	ldrb	r2, [r3, r2]
 8013954:	193b      	adds	r3, r7, r4
 8013956:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013958:	4b26      	ldr	r3, [pc, #152]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 801395a:	4a2a      	ldr	r2, [pc, #168]	; (8013a04 <LoRaMacMcpsRequest+0x28c>)
 801395c:	589b      	ldr	r3, [r3, r2]
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	1939      	adds	r1, r7, r4
 8013962:	2205      	movs	r2, #5
 8013964:	0018      	movs	r0, r3
 8013966:	f002 fed2 	bl	801670e <RegionVerify>
 801396a:	1e03      	subs	r3, r0, #0
 801396c:	d008      	beq.n	8013980 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801396e:	4b21      	ldr	r3, [pc, #132]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 8013970:	4a24      	ldr	r2, [pc, #144]	; (8013a04 <LoRaMacMcpsRequest+0x28c>)
 8013972:	589b      	ldr	r3, [r3, r2]
 8013974:	193a      	adds	r2, r7, r4
 8013976:	2100      	movs	r1, #0
 8013978:	5651      	ldrsb	r1, [r2, r1]
 801397a:	2285      	movs	r2, #133	; 0x85
 801397c:	5499      	strb	r1, [r3, r2]
 801397e:	e001      	b.n	8013984 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013980:	2303      	movs	r3, #3
 8013982:	e031      	b.n	80139e8 <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8013984:	2627      	movs	r6, #39	; 0x27
 8013986:	19bc      	adds	r4, r7, r6
 8013988:	231e      	movs	r3, #30
 801398a:	18fb      	adds	r3, r7, r3
 801398c:	881d      	ldrh	r5, [r3, #0]
 801398e:	6a3a      	ldr	r2, [r7, #32]
 8013990:	2326      	movs	r3, #38	; 0x26
 8013992:	18fb      	adds	r3, r7, r3
 8013994:	7819      	ldrb	r1, [r3, #0]
 8013996:	230c      	movs	r3, #12
 8013998:	18f8      	adds	r0, r7, r3
 801399a:	1cfb      	adds	r3, r7, #3
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	9300      	str	r3, [sp, #0]
 80139a0:	002b      	movs	r3, r5
 80139a2:	f7fd f807 	bl	80109b4 <Send>
 80139a6:	0003      	movs	r3, r0
 80139a8:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 80139aa:	19bb      	adds	r3, r7, r6
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d10d      	bne.n	80139ce <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	7819      	ldrb	r1, [r3, #0]
 80139b6:	4b0f      	ldr	r3, [pc, #60]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80139b8:	4a13      	ldr	r2, [pc, #76]	; (8013a08 <LoRaMacMcpsRequest+0x290>)
 80139ba:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80139bc:	4b0d      	ldr	r3, [pc, #52]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80139be:	4a13      	ldr	r2, [pc, #76]	; (8013a0c <LoRaMacMcpsRequest+0x294>)
 80139c0:	5c99      	ldrb	r1, [r3, r2]
 80139c2:	2001      	movs	r0, #1
 80139c4:	4301      	orrs	r1, r0
 80139c6:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 80139c8:	f7fe fb1e 	bl	8012008 <EventMacNvmCtxChanged>
 80139cc:	e003      	b.n	80139d6 <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80139ce:	4b09      	ldr	r3, [pc, #36]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80139d0:	4a0f      	ldr	r2, [pc, #60]	; (8013a10 <LoRaMacMcpsRequest+0x298>)
 80139d2:	2100      	movs	r1, #0
 80139d4:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80139d6:	4a07      	ldr	r2, [pc, #28]	; (80139f4 <LoRaMacMcpsRequest+0x27c>)
 80139d8:	2391      	movs	r3, #145	; 0x91
 80139da:	00db      	lsls	r3, r3, #3
 80139dc:	58d2      	ldr	r2, [r2, r3]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	611a      	str	r2, [r3, #16]

    return status;
 80139e2:	2327      	movs	r3, #39	; 0x27
 80139e4:	18fb      	adds	r3, r7, r3
 80139e6:	781b      	ldrb	r3, [r3, #0]
}
 80139e8:	0018      	movs	r0, r3
 80139ea:	46bd      	mov	sp, r7
 80139ec:	b00b      	add	sp, #44	; 0x2c
 80139ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139f0:	20000fec 	.word	0x20000fec
 80139f4:	20000bb0 	.word	0x20000bb0
 80139f8:	0000043d 	.word	0x0000043d
 80139fc:	00000412 	.word	0x00000412
 8013a00:	00000411 	.word	0x00000411
 8013a04:	00000484 	.word	0x00000484
 8013a08:	0000043c 	.word	0x0000043c
 8013a0c:	00000481 	.word	0x00000481
 8013a10:	00000414 	.word	0x00000414

08013a14 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b084      	sub	sp, #16
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	0002      	movs	r2, r0
 8013a1c:	1dfb      	adds	r3, r7, #7
 8013a1e:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013a20:	210c      	movs	r1, #12
 8013a22:	187b      	adds	r3, r7, r1
 8013a24:	1dfa      	adds	r2, r7, #7
 8013a26:	7812      	ldrb	r2, [r2, #0]
 8013a28:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013a2a:	4b0b      	ldr	r3, [pc, #44]	; (8013a58 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013a2c:	4a0b      	ldr	r2, [pc, #44]	; (8013a5c <LoRaMacTestSetDutyCycleOn+0x48>)
 8013a2e:	589b      	ldr	r3, [r3, r2]
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	1879      	adds	r1, r7, r1
 8013a34:	220f      	movs	r2, #15
 8013a36:	0018      	movs	r0, r3
 8013a38:	f002 fe69 	bl	801670e <RegionVerify>
 8013a3c:	1e03      	subs	r3, r0, #0
 8013a3e:	d006      	beq.n	8013a4e <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8013a40:	4b05      	ldr	r3, [pc, #20]	; (8013a58 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013a42:	4a06      	ldr	r2, [pc, #24]	; (8013a5c <LoRaMacTestSetDutyCycleOn+0x48>)
 8013a44:	589b      	ldr	r3, [r3, r2]
 8013a46:	1dfa      	adds	r2, r7, #7
 8013a48:	21c9      	movs	r1, #201	; 0xc9
 8013a4a:	7812      	ldrb	r2, [r2, #0]
 8013a4c:	545a      	strb	r2, [r3, r1]
    }
}
 8013a4e:	46c0      	nop			; (mov r8, r8)
 8013a50:	46bd      	mov	sp, r7
 8013a52:	b004      	add	sp, #16
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	46c0      	nop			; (mov r8, r8)
 8013a58:	20000bb0 	.word	0x20000bb0
 8013a5c:	00000484 	.word	0x00000484

08013a60 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a62:	b08b      	sub	sp, #44	; 0x2c
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	607a      	str	r2, [r7, #4]
 8013a6c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013a6e:	2327      	movs	r3, #39	; 0x27
 8013a70:	18fb      	adds	r3, r7, r3
 8013a72:	2200      	movs	r2, #0
 8013a74:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8013a76:	2426      	movs	r4, #38	; 0x26
 8013a78:	193b      	adds	r3, r7, r4
 8013a7a:	68fa      	ldr	r2, [r7, #12]
 8013a7c:	7c12      	ldrb	r2, [r2, #16]
 8013a7e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8013a80:	2325      	movs	r3, #37	; 0x25
 8013a82:	18fb      	adds	r3, r7, r3
 8013a84:	68fa      	ldr	r2, [r7, #12]
 8013a86:	7c52      	ldrb	r2, [r2, #17]
 8013a88:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	689a      	ldr	r2, [r3, #8]
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	795b      	ldrb	r3, [r3, #5]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d100      	bne.n	8013a9c <CalcNextV10X+0x3c>
 8013a9a:	e0a5      	b.n	8013be8 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013a9c:	211c      	movs	r1, #28
 8013a9e:	187b      	adds	r3, r7, r1
 8013aa0:	2202      	movs	r2, #2
 8013aa2:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	7c9a      	ldrb	r2, [r3, #18]
 8013aa8:	187b      	adds	r3, r7, r1
 8013aaa:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	7cdb      	ldrb	r3, [r3, #19]
 8013ab0:	187a      	adds	r2, r7, r1
 8013ab2:	0011      	movs	r1, r2
 8013ab4:	0018      	movs	r0, r3
 8013ab6:	f002 fdc4 	bl	8016642 <RegionGetPhyParam>
 8013aba:	0003      	movs	r3, r0
 8013abc:	001a      	movs	r2, r3
 8013abe:	2118      	movs	r1, #24
 8013ac0:	187b      	adds	r3, r7, r1
 8013ac2:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8013ac4:	187b      	adds	r3, r7, r1
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	2124      	movs	r1, #36	; 0x24
 8013aca:	187b      	adds	r3, r7, r1
 8013acc:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8013ace:	193a      	adds	r2, r7, r4
 8013ad0:	187b      	adds	r3, r7, r1
 8013ad2:	1939      	adds	r1, r7, r4
 8013ad4:	780c      	ldrb	r4, [r1, #0]
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	b258      	sxtb	r0, r3
 8013ada:	b261      	sxtb	r1, r4
 8013adc:	4288      	cmp	r0, r1
 8013ade:	da00      	bge.n	8013ae2 <CalcNextV10X+0x82>
 8013ae0:	1c23      	adds	r3, r4, #0
 8013ae2:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 8013ae4:	2326      	movs	r3, #38	; 0x26
 8013ae6:	18fa      	adds	r2, r7, r3
 8013ae8:	2324      	movs	r3, #36	; 0x24
 8013aea:	18fb      	adds	r3, r7, r3
 8013aec:	7812      	ldrb	r2, [r2, #0]
 8013aee:	b252      	sxtb	r2, r2
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	b25b      	sxtb	r3, r3
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d107      	bne.n	8013b08 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	2200      	movs	r2, #0
 8013afc:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8013afe:	2327      	movs	r3, #39	; 0x27
 8013b00:	18fb      	adds	r3, r7, r3
 8013b02:	2200      	movs	r2, #0
 8013b04:	701a      	strb	r2, [r3, #0]
 8013b06:	e06f      	b.n	8013be8 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	68fa      	ldr	r2, [r7, #12]
 8013b0e:	8992      	ldrh	r2, [r2, #12]
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d304      	bcc.n	8013b1e <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 8013b14:	2327      	movs	r3, #39	; 0x27
 8013b16:	18fb      	adds	r3, r7, r3
 8013b18:	2201      	movs	r2, #1
 8013b1a:	701a      	strb	r2, [r3, #0]
 8013b1c:	e003      	b.n	8013b26 <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 8013b1e:	2327      	movs	r3, #39	; 0x27
 8013b20:	18fb      	adds	r3, r7, r3
 8013b22:	2200      	movs	r2, #0
 8013b24:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	689b      	ldr	r3, [r3, #8]
 8013b2a:	68fa      	ldr	r2, [r7, #12]
 8013b2c:	8992      	ldrh	r2, [r2, #12]
 8013b2e:	0011      	movs	r1, r2
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	89d2      	ldrh	r2, [r2, #14]
 8013b34:	188a      	adds	r2, r1, r2
 8013b36:	4293      	cmp	r3, r2
 8013b38:	d356      	bcc.n	8013be8 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8013b3a:	241c      	movs	r4, #28
 8013b3c:	193b      	adds	r3, r7, r4
 8013b3e:	2208      	movs	r2, #8
 8013b40:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	7cdb      	ldrb	r3, [r3, #19]
 8013b46:	193a      	adds	r2, r7, r4
 8013b48:	0011      	movs	r1, r2
 8013b4a:	0018      	movs	r0, r3
 8013b4c:	f002 fd79 	bl	8016642 <RegionGetPhyParam>
 8013b50:	0003      	movs	r3, r0
 8013b52:	001a      	movs	r2, r3
 8013b54:	2518      	movs	r5, #24
 8013b56:	197b      	adds	r3, r7, r5
 8013b58:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8013b5a:	197b      	adds	r3, r7, r5
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	2325      	movs	r3, #37	; 0x25
 8013b60:	18fb      	adds	r3, r7, r3
 8013b62:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	689a      	ldr	r2, [r3, #8]
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	89db      	ldrh	r3, [r3, #14]
 8013b6c:	0019      	movs	r1, r3
 8013b6e:	0010      	movs	r0, r2
 8013b70:	f7ec fb58 	bl	8000224 <__aeabi_uidivmod>
 8013b74:	000b      	movs	r3, r1
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d136      	bne.n	8013be8 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013b7a:	193b      	adds	r3, r7, r4
 8013b7c:	2222      	movs	r2, #34	; 0x22
 8013b7e:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8013b80:	193b      	adds	r3, r7, r4
 8013b82:	2626      	movs	r6, #38	; 0x26
 8013b84:	19ba      	adds	r2, r7, r6
 8013b86:	7812      	ldrb	r2, [r2, #0]
 8013b88:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	7c9a      	ldrb	r2, [r3, #18]
 8013b8e:	193b      	adds	r3, r7, r4
 8013b90:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	7cdb      	ldrb	r3, [r3, #19]
 8013b96:	193a      	adds	r2, r7, r4
 8013b98:	0011      	movs	r1, r2
 8013b9a:	0018      	movs	r0, r3
 8013b9c:	f002 fd51 	bl	8016642 <RegionGetPhyParam>
 8013ba0:	0003      	movs	r3, r0
 8013ba2:	001a      	movs	r2, r3
 8013ba4:	197b      	adds	r3, r7, r5
 8013ba6:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8013ba8:	197b      	adds	r3, r7, r5
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	19bb      	adds	r3, r7, r6
 8013bae:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8013bb0:	19ba      	adds	r2, r7, r6
 8013bb2:	2324      	movs	r3, #36	; 0x24
 8013bb4:	18fb      	adds	r3, r7, r3
 8013bb6:	7812      	ldrb	r2, [r2, #0]
 8013bb8:	b252      	sxtb	r2, r2
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	b25b      	sxtb	r3, r3
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d112      	bne.n	8013be8 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8013bc2:	2327      	movs	r3, #39	; 0x27
 8013bc4:	18fb      	adds	r3, r7, r3
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	791b      	ldrb	r3, [r3, #4]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d00a      	beq.n	8013be8 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013bd2:	2110      	movs	r1, #16
 8013bd4:	187b      	adds	r3, r7, r1
 8013bd6:	2202      	movs	r2, #2
 8013bd8:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	7cdb      	ldrb	r3, [r3, #19]
 8013bde:	187a      	adds	r2, r7, r1
 8013be0:	0011      	movs	r1, r2
 8013be2:	0018      	movs	r0, r3
 8013be4:	f002 fd68 	bl	80166b8 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	2226      	movs	r2, #38	; 0x26
 8013bec:	18ba      	adds	r2, r7, r2
 8013bee:	7812      	ldrb	r2, [r2, #0]
 8013bf0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2225      	movs	r2, #37	; 0x25
 8013bf6:	18ba      	adds	r2, r7, r2
 8013bf8:	7812      	ldrb	r2, [r2, #0]
 8013bfa:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013bfc:	2327      	movs	r3, #39	; 0x27
 8013bfe:	18fb      	adds	r3, r7, r3
 8013c00:	781b      	ldrb	r3, [r3, #0]
}
 8013c02:	0018      	movs	r0, r3
 8013c04:	46bd      	mov	sp, r7
 8013c06:	b00b      	add	sp, #44	; 0x2c
 8013c08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c0a <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013c0a:	b580      	push	{r7, lr}
 8013c0c:	b084      	sub	sp, #16
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	60f8      	str	r0, [r7, #12]
 8013c12:	60b9      	str	r1, [r7, #8]
 8013c14:	607a      	str	r2, [r7, #4]
 8013c16:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	789b      	ldrb	r3, [r3, #2]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d107      	bne.n	8013c30 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	68b9      	ldr	r1, [r7, #8]
 8013c26:	68f8      	ldr	r0, [r7, #12]
 8013c28:	f7ff ff1a 	bl	8013a60 <CalcNextV10X>
 8013c2c:	0003      	movs	r3, r0
 8013c2e:	e000      	b.n	8013c32 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8013c30:	2300      	movs	r3, #0
}
 8013c32:	0018      	movs	r0, r3
 8013c34:	46bd      	mov	sp, r7
 8013c36:	b004      	add	sp, #16
 8013c38:	bd80      	pop	{r7, pc}

08013c3a <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 8013c3a:	b580      	push	{r7, lr}
 8013c3c:	b084      	sub	sp, #16
 8013c3e:	af00      	add	r7, sp, #0
 8013c40:	60f8      	str	r0, [r7, #12]
 8013c42:	60b9      	str	r1, [r7, #8]
 8013c44:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013c46:	46c0      	nop			; (mov r8, r8)
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	b004      	add	sp, #16
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 8013c4e:	b580      	push	{r7, lr}
 8013c50:	b082      	sub	sp, #8
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8013c56:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8013c58:	0018      	movs	r0, r3
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	b002      	add	sp, #8
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	601a      	str	r2, [r3, #0]
    return NULL;
 8013c6e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013c70:	0018      	movs	r0, r3
 8013c72:	46bd      	mov	sp, r7
 8013c74:	b002      	add	sp, #8
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	0002      	movs	r2, r0
 8013c80:	1dfb      	adds	r3, r7, #7
 8013c82:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013c84:	46c0      	nop			; (mov r8, r8)
 8013c86:	46bd      	mov	sp, r7
 8013c88:	b002      	add	sp, #8
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	0002      	movs	r2, r0
 8013c94:	1dfb      	adds	r3, r7, #7
 8013c96:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013c98:	46c0      	nop			; (mov r8, r8)
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	b002      	add	sp, #8
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	0002      	movs	r2, r0
 8013ca8:	1dfb      	adds	r3, r7, #7
 8013caa:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cac:	46c0      	nop			; (mov r8, r8)
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	b002      	add	sp, #8
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013cb8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cba:	0018      	movs	r0, r3
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cc8:	46c0      	nop			; (mov r8, r8)
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	b002      	add	sp, #8
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cd8:	46c0      	nop			; (mov r8, r8)
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	b002      	add	sp, #8
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013ce8:	46c0      	nop			; (mov r8, r8)
 8013cea:	46bd      	mov	sp, r7
 8013cec:	b002      	add	sp, #8
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	000a      	movs	r2, r1
 8013cfa:	1cbb      	adds	r3, r7, #2
 8013cfc:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013cfe:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d00:	0018      	movs	r0, r3
 8013d02:	46bd      	mov	sp, r7
 8013d04:	b002      	add	sp, #8
 8013d06:	bd80      	pop	{r7, pc}

08013d08 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d0c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d0e:	0018      	movs	r0, r3
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d18:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d1a:	0018      	movs	r0, r3
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d24:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d26:	0018      	movs	r0, r3
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d30:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d32:	0018      	movs	r0, r3
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	0002      	movs	r2, r0
 8013d40:	1dfb      	adds	r3, r7, #7
 8013d42:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d44:	46c0      	nop			; (mov r8, r8)
 8013d46:	46bd      	mov	sp, r7
 8013d48:	b002      	add	sp, #8
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d50:	46c0      	nop			; (mov r8, r8)
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}

08013d56 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013d56:	b580      	push	{r7, lr}
 8013d58:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d5a:	46c0      	nop			; (mov r8, r8)
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	0002      	movs	r2, r0
 8013d68:	1dfb      	adds	r3, r7, #7
 8013d6a:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d6c:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d6e:	0018      	movs	r0, r3
 8013d70:	46bd      	mov	sp, r7
 8013d72:	b002      	add	sp, #8
 8013d74:	bd80      	pop	{r7, pc}

08013d76 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013d76:	b580      	push	{r7, lr}
 8013d78:	b082      	sub	sp, #8
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d7e:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d80:	0018      	movs	r0, r3
 8013d82:	46bd      	mov	sp, r7
 8013d84:	b002      	add	sp, #8
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d90:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d92:	0018      	movs	r0, r3
 8013d94:	46bd      	mov	sp, r7
 8013d96:	b002      	add	sp, #8
 8013d98:	bd80      	pop	{r7, pc}

08013d9a <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013d9a:	b580      	push	{r7, lr}
 8013d9c:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d9e:	46c0      	nop			; (mov r8, r8)
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	0002      	movs	r2, r0
 8013dac:	6039      	str	r1, [r7, #0]
 8013dae:	1dfb      	adds	r3, r7, #7
 8013db0:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8013db2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013db4:	0018      	movs	r0, r3
 8013db6:	46bd      	mov	sp, r7
 8013db8:	b002      	add	sp, #8
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	603a      	str	r2, [r7, #0]
 8013dc4:	1dbb      	adds	r3, r7, #6
 8013dc6:	1c02      	adds	r2, r0, #0
 8013dc8:	801a      	strh	r2, [r3, #0]
 8013dca:	1d7b      	adds	r3, r7, #5
 8013dcc:	1c0a      	adds	r2, r1, #0
 8013dce:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013dd0:	46c0      	nop			; (mov r8, r8)
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	b002      	add	sp, #8
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013ddc:	46c0      	nop			; (mov r8, r8)
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b082      	sub	sp, #8
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8013dea:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013dec:	0018      	movs	r0, r3
 8013dee:	46bd      	mov	sp, r7
 8013df0:	b002      	add	sp, #8
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013dfc:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013dfe:	0018      	movs	r0, r3
 8013e00:	46bd      	mov	sp, r7
 8013e02:	b002      	add	sp, #8
 8013e04:	bd80      	pop	{r7, pc}

08013e06 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013e06:	b580      	push	{r7, lr}
 8013e08:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e0a:	46c0      	nop			; (mov r8, r8)
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e14:	46c0      	nop			; (mov r8, r8)
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}

08013e1a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013e1a:	b580      	push	{r7, lr}
 8013e1c:	b084      	sub	sp, #16
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e26:	230e      	movs	r3, #14
 8013e28:	18fb      	adds	r3, r7, r3
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	801a      	strh	r2, [r3, #0]
 8013e2e:	e00f      	b.n	8013e50 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 8013e30:	230e      	movs	r3, #14
 8013e32:	18fb      	adds	r3, r7, r3
 8013e34:	881b      	ldrh	r3, [r3, #0]
 8013e36:	68ba      	ldr	r2, [r7, #8]
 8013e38:	18d3      	adds	r3, r2, r3
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d001      	beq.n	8013e44 <IsSlotFree+0x2a>
        {
            return false;
 8013e40:	2300      	movs	r3, #0
 8013e42:	e00b      	b.n	8013e5c <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e44:	210e      	movs	r1, #14
 8013e46:	187b      	adds	r3, r7, r1
 8013e48:	881a      	ldrh	r2, [r3, #0]
 8013e4a:	187b      	adds	r3, r7, r1
 8013e4c:	3201      	adds	r2, #1
 8013e4e:	801a      	strh	r2, [r3, #0]
 8013e50:	230e      	movs	r3, #14
 8013e52:	18fb      	adds	r3, r7, r3
 8013e54:	881b      	ldrh	r3, [r3, #0]
 8013e56:	2b0f      	cmp	r3, #15
 8013e58:	d9ea      	bls.n	8013e30 <IsSlotFree+0x16>
        }
    }
    return true;
 8013e5a:	2301      	movs	r3, #1
}
 8013e5c:	0018      	movs	r0, r3
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	b004      	add	sp, #16
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013e6a:	1dfb      	adds	r3, r7, #7
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8013e70:	e00a      	b.n	8013e88 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8013e72:	1dfb      	adds	r3, r7, #7
 8013e74:	781a      	ldrb	r2, [r3, #0]
 8013e76:	1dfb      	adds	r3, r7, #7
 8013e78:	3201      	adds	r2, #1
 8013e7a:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013e7c:	1dfb      	adds	r3, r7, #7
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	2b0f      	cmp	r3, #15
 8013e82:	d101      	bne.n	8013e88 <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8013e84:	2300      	movs	r3, #0
 8013e86:	e017      	b.n	8013eb8 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8013e88:	1dfb      	adds	r3, r7, #7
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	011b      	lsls	r3, r3, #4
 8013e8e:	3308      	adds	r3, #8
 8013e90:	001a      	movs	r2, r3
 8013e92:	4b0b      	ldr	r3, [pc, #44]	; (8013ec0 <MallocNewMacCommandSlot+0x5c>)
 8013e94:	18d3      	adds	r3, r2, r3
 8013e96:	0018      	movs	r0, r3
 8013e98:	f7ff ffbf 	bl	8013e1a <IsSlotFree>
 8013e9c:	0003      	movs	r3, r0
 8013e9e:	001a      	movs	r2, r3
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	4053      	eors	r3, r2
 8013ea4:	b2db      	uxtb	r3, r3
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d1e3      	bne.n	8013e72 <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8013eaa:	1dfb      	adds	r3, r7, #7
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	011b      	lsls	r3, r3, #4
 8013eb0:	3308      	adds	r3, #8
 8013eb2:	001a      	movs	r2, r3
 8013eb4:	4b02      	ldr	r3, [pc, #8]	; (8013ec0 <MallocNewMacCommandSlot+0x5c>)
 8013eb6:	18d3      	adds	r3, r2, r3
}
 8013eb8:	0018      	movs	r0, r3
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	b002      	add	sp, #8
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	200011e8 	.word	0x200011e8

08013ec4 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d101      	bne.n	8013ed6 <FreeMacCommandSlot+0x12>
    {
        return false;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	e006      	b.n	8013ee4 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2210      	movs	r2, #16
 8013eda:	2100      	movs	r1, #0
 8013edc:	0018      	movs	r0, r3
 8013ede:	f005 f871 	bl	8018fc4 <memset1>

    return true;
 8013ee2:	2301      	movs	r3, #1
}
 8013ee4:	0018      	movs	r0, r3
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	b002      	add	sp, #8
 8013eea:	bd80      	pop	{r7, pc}

08013eec <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d101      	bne.n	8013efe <LinkedListInit+0x12>
    {
        return false;
 8013efa:	2300      	movs	r3, #0
 8013efc:	e006      	b.n	8013f0c <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2200      	movs	r2, #0
 8013f02:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	605a      	str	r2, [r3, #4]

    return true;
 8013f0a:	2301      	movs	r3, #1
}
 8013f0c:	0018      	movs	r0, r3
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	b002      	add	sp, #8
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d002      	beq.n	8013f2a <LinkedListAdd+0x16>
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d101      	bne.n	8013f2e <LinkedListAdd+0x1a>
    {
        return false;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	e015      	b.n	8013f5a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d102      	bne.n	8013f3c <LinkedListAdd+0x28>
    {
        list->First = element;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	683a      	ldr	r2, [r7, #0]
 8013f3a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d003      	beq.n	8013f4c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	683a      	ldr	r2, [r7, #0]
 8013f4a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	2200      	movs	r2, #0
 8013f50:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	683a      	ldr	r2, [r7, #0]
 8013f56:	605a      	str	r2, [r3, #4]

    return true;
 8013f58:	2301      	movs	r3, #1
}
 8013f5a:	0018      	movs	r0, r3
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	b002      	add	sp, #8
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b084      	sub	sp, #16
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
 8013f6a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d002      	beq.n	8013f78 <LinkedListGetPrevious+0x16>
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d101      	bne.n	8013f7c <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	e016      	b.n	8013faa <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013f82:	683a      	ldr	r2, [r7, #0]
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d00c      	beq.n	8013fa4 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013f8a:	e002      	b.n	8013f92 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d007      	beq.n	8013fa8 <LinkedListGetPrevious+0x46>
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	683a      	ldr	r2, [r7, #0]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d1f4      	bne.n	8013f8c <LinkedListGetPrevious+0x2a>
 8013fa2:	e001      	b.n	8013fa8 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
}
 8013faa:	0018      	movs	r0, r3
 8013fac:	46bd      	mov	sp, r7
 8013fae:	b004      	add	sp, #16
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	b084      	sub	sp, #16
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
 8013fba:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d002      	beq.n	8013fc8 <LinkedListRemove+0x16>
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d101      	bne.n	8013fcc <LinkedListRemove+0x1a>
    {
        return false;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	e023      	b.n	8014014 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013fcc:	683a      	ldr	r2, [r7, #0]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	0011      	movs	r1, r2
 8013fd2:	0018      	movs	r0, r3
 8013fd4:	f7ff ffc5 	bl	8013f62 <LinkedListGetPrevious>
 8013fd8:	0003      	movs	r3, r0
 8013fda:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	683a      	ldr	r2, [r7, #0]
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d103      	bne.n	8013fee <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	681a      	ldr	r2, [r3, #0]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	683a      	ldr	r2, [r7, #0]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d102      	bne.n	8013ffe <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	68fa      	ldr	r2, [r7, #12]
 8013ffc:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d003      	beq.n	801400c <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	2200      	movs	r2, #0
 8014010:	601a      	str	r2, [r3, #0]

    return true;
 8014012:	2301      	movs	r3, #1
}
 8014014:	0018      	movs	r0, r3
 8014016:	46bd      	mov	sp, r7
 8014018:	b004      	add	sp, #16
 801401a:	bd80      	pop	{r7, pc}

0801401c <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b082      	sub	sp, #8
 8014020:	af00      	add	r7, sp, #0
 8014022:	0002      	movs	r2, r0
 8014024:	1dfb      	adds	r3, r7, #7
 8014026:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8014028:	1dfb      	adds	r3, r7, #7
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	2b05      	cmp	r3, #5
 801402e:	d003      	beq.n	8014038 <IsSticky+0x1c>
 8014030:	db04      	blt.n	801403c <IsSticky+0x20>
 8014032:	3b08      	subs	r3, #8
 8014034:	2b02      	cmp	r3, #2
 8014036:	d801      	bhi.n	801403c <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8014038:	2301      	movs	r3, #1
 801403a:	e000      	b.n	801403e <IsSticky+0x22>
        default:
            return false;
 801403c:	2300      	movs	r3, #0
    }
}
 801403e:	0018      	movs	r0, r3
 8014040:	46bd      	mov	sp, r7
 8014042:	b002      	add	sp, #8
 8014044:	bd80      	pop	{r7, pc}
	...

08014048 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8014048:	b580      	push	{r7, lr}
 801404a:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 801404c:	4b04      	ldr	r3, [pc, #16]	; (8014060 <NvmCtxCallback+0x18>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d002      	beq.n	801405a <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8014054:	4b02      	ldr	r3, [pc, #8]	; (8014060 <NvmCtxCallback+0x18>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	4798      	blx	r3
    }
}
 801405a:	46c0      	nop			; (mov r8, r8)
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}
 8014060:	200011e4 	.word	0x200011e4

08014064 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 801406c:	4b08      	ldr	r3, [pc, #32]	; (8014090 <LoRaMacCommandsInit+0x2c>)
 801406e:	22fc      	movs	r2, #252	; 0xfc
 8014070:	2100      	movs	r1, #0
 8014072:	0018      	movs	r0, r3
 8014074:	f004 ffa6 	bl	8018fc4 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8014078:	4b05      	ldr	r3, [pc, #20]	; (8014090 <LoRaMacCommandsInit+0x2c>)
 801407a:	0018      	movs	r0, r3
 801407c:	f7ff ff36 	bl	8013eec <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8014080:	4b04      	ldr	r3, [pc, #16]	; (8014094 <LoRaMacCommandsInit+0x30>)
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8014086:	2300      	movs	r3, #0
}
 8014088:	0018      	movs	r0, r3
 801408a:	46bd      	mov	sp, r7
 801408c:	b002      	add	sp, #8
 801408e:	bd80      	pop	{r7, pc}
 8014090:	200011e8 	.word	0x200011e8
 8014094:	200011e4 	.word	0x200011e4

08014098 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b082      	sub	sp, #8
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d007      	beq.n	80140b6 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 80140a6:	6879      	ldr	r1, [r7, #4]
 80140a8:	4b05      	ldr	r3, [pc, #20]	; (80140c0 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 80140aa:	22fc      	movs	r2, #252	; 0xfc
 80140ac:	0018      	movs	r0, r3
 80140ae:	f004 ff4b 	bl	8018f48 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 80140b2:	2300      	movs	r3, #0
 80140b4:	e000      	b.n	80140b8 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80140b6:	2301      	movs	r3, #1
    }
}
 80140b8:	0018      	movs	r0, r3
 80140ba:	46bd      	mov	sp, r7
 80140bc:	b002      	add	sp, #8
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	200011e8 	.word	0x200011e8

080140c4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	22fc      	movs	r2, #252	; 0xfc
 80140d0:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80140d2:	4b02      	ldr	r3, [pc, #8]	; (80140dc <LoRaMacCommandsGetNvmCtx+0x18>)
}
 80140d4:	0018      	movs	r0, r3
 80140d6:	46bd      	mov	sp, r7
 80140d8:	b002      	add	sp, #8
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	200011e8 	.word	0x200011e8

080140e0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80140e0:	b590      	push	{r4, r7, lr}
 80140e2:	b087      	sub	sp, #28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60b9      	str	r1, [r7, #8]
 80140e8:	607a      	str	r2, [r7, #4]
 80140ea:	230f      	movs	r3, #15
 80140ec:	18fb      	adds	r3, r7, r3
 80140ee:	1c02      	adds	r2, r0, #0
 80140f0:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d101      	bne.n	80140fc <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80140f8:	2301      	movs	r3, #1
 80140fa:	e03c      	b.n	8014176 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80140fc:	f7ff feb2 	bl	8013e64 <MallocNewMacCommandSlot>
 8014100:	0003      	movs	r3, r0
 8014102:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d101      	bne.n	801410e <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801410a:	2302      	movs	r3, #2
 801410c:	e033      	b.n	8014176 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 801410e:	697a      	ldr	r2, [r7, #20]
 8014110:	4b1b      	ldr	r3, [pc, #108]	; (8014180 <LoRaMacCommandsAddCmd+0xa0>)
 8014112:	0011      	movs	r1, r2
 8014114:	0018      	movs	r0, r3
 8014116:	f7ff fefd 	bl	8013f14 <LinkedListAdd>
 801411a:	0003      	movs	r3, r0
 801411c:	001a      	movs	r2, r3
 801411e:	2301      	movs	r3, #1
 8014120:	4053      	eors	r3, r2
 8014122:	b2db      	uxtb	r3, r3
 8014124:	2b00      	cmp	r3, #0
 8014126:	d001      	beq.n	801412c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014128:	2305      	movs	r3, #5
 801412a:	e024      	b.n	8014176 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	240f      	movs	r4, #15
 8014130:	193a      	adds	r2, r7, r4
 8014132:	7812      	ldrb	r2, [r2, #0]
 8014134:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	3305      	adds	r3, #5
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	b292      	uxth	r2, r2
 8014144:	68b9      	ldr	r1, [r7, #8]
 8014146:	0018      	movs	r0, r3
 8014148:	f004 fefe 	bl	8018f48 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801414c:	193b      	adds	r3, r7, r4
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	0018      	movs	r0, r3
 8014152:	f7ff ff63 	bl	801401c <IsSticky>
 8014156:	0003      	movs	r3, r0
 8014158:	001a      	movs	r2, r3
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801415e:	4b08      	ldr	r3, [pc, #32]	; (8014180 <LoRaMacCommandsAddCmd+0xa0>)
 8014160:	22f8      	movs	r2, #248	; 0xf8
 8014162:	589a      	ldr	r2, [r3, r2]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	18d3      	adds	r3, r2, r3
 8014168:	1c5a      	adds	r2, r3, #1
 801416a:	4b05      	ldr	r3, [pc, #20]	; (8014180 <LoRaMacCommandsAddCmd+0xa0>)
 801416c:	21f8      	movs	r1, #248	; 0xf8
 801416e:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8014170:	f7ff ff6a 	bl	8014048 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014174:	2300      	movs	r3, #0
}
 8014176:	0018      	movs	r0, r3
 8014178:	46bd      	mov	sp, r7
 801417a:	b007      	add	sp, #28
 801417c:	bd90      	pop	{r4, r7, pc}
 801417e:	46c0      	nop			; (mov r8, r8)
 8014180:	200011e8 	.word	0x200011e8

08014184 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d101      	bne.n	8014196 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014192:	2301      	movs	r3, #1
 8014194:	e028      	b.n	80141e8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	4b15      	ldr	r3, [pc, #84]	; (80141f0 <LoRaMacCommandsRemoveCmd+0x6c>)
 801419a:	0011      	movs	r1, r2
 801419c:	0018      	movs	r0, r3
 801419e:	f7ff ff08 	bl	8013fb2 <LinkedListRemove>
 80141a2:	0003      	movs	r3, r0
 80141a4:	001a      	movs	r2, r3
 80141a6:	2301      	movs	r3, #1
 80141a8:	4053      	eors	r3, r2
 80141aa:	b2db      	uxtb	r3, r3
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d001      	beq.n	80141b4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80141b0:	2303      	movs	r3, #3
 80141b2:	e019      	b.n	80141e8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80141b4:	4b0e      	ldr	r3, [pc, #56]	; (80141f0 <LoRaMacCommandsRemoveCmd+0x6c>)
 80141b6:	22f8      	movs	r2, #248	; 0xf8
 80141b8:	589a      	ldr	r2, [r3, r2]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	689b      	ldr	r3, [r3, #8]
 80141be:	1ad3      	subs	r3, r2, r3
 80141c0:	1e5a      	subs	r2, r3, #1
 80141c2:	4b0b      	ldr	r3, [pc, #44]	; (80141f0 <LoRaMacCommandsRemoveCmd+0x6c>)
 80141c4:	21f8      	movs	r1, #248	; 0xf8
 80141c6:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	0018      	movs	r0, r3
 80141cc:	f7ff fe7a 	bl	8013ec4 <FreeMacCommandSlot>
 80141d0:	0003      	movs	r3, r0
 80141d2:	001a      	movs	r2, r3
 80141d4:	2301      	movs	r3, #1
 80141d6:	4053      	eors	r3, r2
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d001      	beq.n	80141e2 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 80141de:	2305      	movs	r3, #5
 80141e0:	e002      	b.n	80141e8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 80141e2:	f7ff ff31 	bl	8014048 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80141e6:	2300      	movs	r3, #0
}
 80141e8:	0018      	movs	r0, r3
 80141ea:	46bd      	mov	sp, r7
 80141ec:	b002      	add	sp, #8
 80141ee:	bd80      	pop	{r7, pc}
 80141f0:	200011e8 	.word	0x200011e8

080141f4 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 80141fa:	4b11      	ldr	r3, [pc, #68]	; (8014240 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014200:	e013      	b.n	801422a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	7b1b      	ldrb	r3, [r3, #12]
 8014206:	2201      	movs	r2, #1
 8014208:	4053      	eors	r3, r2
 801420a:	b2db      	uxtb	r3, r3
 801420c:	2b00      	cmp	r3, #0
 801420e:	d009      	beq.n	8014224 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	0018      	movs	r0, r3
 801421a:	f7ff ffb3 	bl	8014184 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	607b      	str	r3, [r7, #4]
 8014222:	e002      	b.n	801422a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d1e8      	bne.n	8014202 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8014230:	f7ff ff0a 	bl	8014048 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014234:	2300      	movs	r3, #0
}
 8014236:	0018      	movs	r0, r3
 8014238:	46bd      	mov	sp, r7
 801423a:	b002      	add	sp, #8
 801423c:	bd80      	pop	{r7, pc}
 801423e:	46c0      	nop			; (mov r8, r8)
 8014240:	200011e8 	.word	0x200011e8

08014244 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801424a:	4b0f      	ldr	r3, [pc, #60]	; (8014288 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014250:	e00f      	b.n	8014272 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	791b      	ldrb	r3, [r3, #4]
 801425c:	0018      	movs	r0, r3
 801425e:	f7ff fedd 	bl	801401c <IsSticky>
 8014262:	1e03      	subs	r3, r0, #0
 8014264:	d003      	beq.n	801426e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	0018      	movs	r0, r3
 801426a:	f7ff ff8b 	bl	8014184 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d1ec      	bne.n	8014252 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8014278:	f7ff fee6 	bl	8014048 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801427c:	2300      	movs	r3, #0
}
 801427e:	0018      	movs	r0, r3
 8014280:	46bd      	mov	sp, r7
 8014282:	b002      	add	sp, #8
 8014284:	bd80      	pop	{r7, pc}
 8014286:	46c0      	nop			; (mov r8, r8)
 8014288:	200011e8 	.word	0x200011e8

0801428c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d101      	bne.n	801429e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801429a:	2301      	movs	r3, #1
 801429c:	e005      	b.n	80142aa <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 801429e:	4b05      	ldr	r3, [pc, #20]	; (80142b4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80142a0:	22f8      	movs	r2, #248	; 0xf8
 80142a2:	589a      	ldr	r2, [r3, r2]
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80142a8:	2300      	movs	r3, #0
}
 80142aa:	0018      	movs	r0, r3
 80142ac:	46bd      	mov	sp, r7
 80142ae:	b002      	add	sp, #8
 80142b0:	bd80      	pop	{r7, pc}
 80142b2:	46c0      	nop			; (mov r8, r8)
 80142b4:	200011e8 	.word	0x200011e8

080142b8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80142b8:	b590      	push	{r4, r7, lr}
 80142ba:	b089      	sub	sp, #36	; 0x24
 80142bc:	af00      	add	r7, sp, #0
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 80142c4:	4b2a      	ldr	r3, [pc, #168]	; (8014370 <LoRaMacCommandsSerializeCmds+0xb8>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80142ca:	231b      	movs	r3, #27
 80142cc:	18fb      	adds	r3, r7, r3
 80142ce:	2200      	movs	r2, #0
 80142d0:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d002      	beq.n	80142de <LoRaMacCommandsSerializeCmds+0x26>
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d12d      	bne.n	801433a <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80142de:	2301      	movs	r3, #1
 80142e0:	e042      	b.n	8014368 <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80142e2:	241b      	movs	r4, #27
 80142e4:	193b      	adds	r3, r7, r4
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	68fa      	ldr	r2, [r7, #12]
 80142ea:	1ad2      	subs	r2, r2, r3
 80142ec:	69fb      	ldr	r3, [r7, #28]
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	3301      	adds	r3, #1
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d325      	bcc.n	8014342 <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 80142f6:	193b      	adds	r3, r7, r4
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	193a      	adds	r2, r7, r4
 80142fc:	1c59      	adds	r1, r3, #1
 80142fe:	7011      	strb	r1, [r2, #0]
 8014300:	001a      	movs	r2, r3
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	189b      	adds	r3, r3, r2
 8014306:	69fa      	ldr	r2, [r7, #28]
 8014308:	7912      	ldrb	r2, [r2, #4]
 801430a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801430c:	193b      	adds	r3, r7, r4
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	687a      	ldr	r2, [r7, #4]
 8014312:	18d0      	adds	r0, r2, r3
 8014314:	69fb      	ldr	r3, [r7, #28]
 8014316:	1d59      	adds	r1, r3, #5
 8014318:	69fb      	ldr	r3, [r7, #28]
 801431a:	689b      	ldr	r3, [r3, #8]
 801431c:	b29b      	uxth	r3, r3
 801431e:	001a      	movs	r2, r3
 8014320:	f004 fe12 	bl	8018f48 <memcpy1>
            itr += curElement->PayloadSize;
 8014324:	69fb      	ldr	r3, [r7, #28]
 8014326:	689b      	ldr	r3, [r3, #8]
 8014328:	b2d9      	uxtb	r1, r3
 801432a:	193b      	adds	r3, r7, r4
 801432c:	193a      	adds	r2, r7, r4
 801432e:	7812      	ldrb	r2, [r2, #0]
 8014330:	188a      	adds	r2, r1, r2
 8014332:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014334:	69fb      	ldr	r3, [r7, #28]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d1d0      	bne.n	80142e2 <LoRaMacCommandsSerializeCmds+0x2a>
 8014340:	e00a      	b.n	8014358 <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 8014342:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014344:	e008      	b.n	8014358 <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014346:	69fb      	ldr	r3, [r7, #28]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	0018      	movs	r0, r3
 8014350:	f7ff ff18 	bl	8014184 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d1f3      	bne.n	8014346 <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	0018      	movs	r0, r3
 8014362:	f7ff ff93 	bl	801428c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014366:	2300      	movs	r3, #0
}
 8014368:	0018      	movs	r0, r3
 801436a:	46bd      	mov	sp, r7
 801436c:	b009      	add	sp, #36	; 0x24
 801436e:	bd90      	pop	{r4, r7, pc}
 8014370:	200011e8 	.word	0x200011e8

08014374 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d101      	bne.n	8014386 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014382:	2301      	movs	r3, #1
 8014384:	e016      	b.n	80143b4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8014386:	4b0d      	ldr	r3, [pc, #52]	; (80143bc <LoRaMacCommandsStickyCmdsPending+0x48>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2200      	movs	r2, #0
 8014390:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014392:	e00b      	b.n	80143ac <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	7b1b      	ldrb	r3, [r3, #12]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d004      	beq.n	80143a6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2201      	movs	r2, #1
 80143a0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80143a2:	2300      	movs	r3, #0
 80143a4:	e006      	b.n	80143b4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d1f0      	bne.n	8014394 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80143b2:	2300      	movs	r3, #0
}
 80143b4:	0018      	movs	r0, r3
 80143b6:	46bd      	mov	sp, r7
 80143b8:	b004      	add	sp, #16
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	200011e8 	.word	0x200011e8

080143c0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	0002      	movs	r2, r0
 80143c8:	1dfb      	adds	r3, r7, #7
 80143ca:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 80143cc:	230f      	movs	r3, #15
 80143ce:	18fb      	adds	r3, r7, r3
 80143d0:	2200      	movs	r2, #0
 80143d2:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 80143d4:	1dfb      	adds	r3, r7, #7
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	2b13      	cmp	r3, #19
 80143da:	d84a      	bhi.n	8014472 <LoRaMacCommandsGetCmdSize+0xb2>
 80143dc:	009a      	lsls	r2, r3, #2
 80143de:	4b29      	ldr	r3, [pc, #164]	; (8014484 <LoRaMacCommandsGetCmdSize+0xc4>)
 80143e0:	18d3      	adds	r3, r2, r3
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80143e6:	230f      	movs	r3, #15
 80143e8:	18fb      	adds	r3, r7, r3
 80143ea:	2203      	movs	r2, #3
 80143ec:	701a      	strb	r2, [r3, #0]
            break;
 80143ee:	e041      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80143f0:	230f      	movs	r3, #15
 80143f2:	18fb      	adds	r3, r7, r3
 80143f4:	2205      	movs	r2, #5
 80143f6:	701a      	strb	r2, [r3, #0]
            break;
 80143f8:	e03c      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80143fa:	230f      	movs	r3, #15
 80143fc:	18fb      	adds	r3, r7, r3
 80143fe:	2202      	movs	r2, #2
 8014400:	701a      	strb	r2, [r3, #0]
            break;
 8014402:	e037      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014404:	230f      	movs	r3, #15
 8014406:	18fb      	adds	r3, r7, r3
 8014408:	2205      	movs	r2, #5
 801440a:	701a      	strb	r2, [r3, #0]
            break;
 801440c:	e032      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801440e:	230f      	movs	r3, #15
 8014410:	18fb      	adds	r3, r7, r3
 8014412:	2201      	movs	r2, #1
 8014414:	701a      	strb	r2, [r3, #0]
            break;
 8014416:	e02d      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014418:	230f      	movs	r3, #15
 801441a:	18fb      	adds	r3, r7, r3
 801441c:	2206      	movs	r2, #6
 801441e:	701a      	strb	r2, [r3, #0]
            break;
 8014420:	e028      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014422:	230f      	movs	r3, #15
 8014424:	18fb      	adds	r3, r7, r3
 8014426:	2202      	movs	r2, #2
 8014428:	701a      	strb	r2, [r3, #0]
            break;
 801442a:	e023      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801442c:	230f      	movs	r3, #15
 801442e:	18fb      	adds	r3, r7, r3
 8014430:	2202      	movs	r2, #2
 8014432:	701a      	strb	r2, [r3, #0]
            break;
 8014434:	e01e      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014436:	230f      	movs	r3, #15
 8014438:	18fb      	adds	r3, r7, r3
 801443a:	2205      	movs	r2, #5
 801443c:	701a      	strb	r2, [r3, #0]
            break;
 801443e:	e019      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014440:	230f      	movs	r3, #15
 8014442:	18fb      	adds	r3, r7, r3
 8014444:	2206      	movs	r2, #6
 8014446:	701a      	strb	r2, [r3, #0]
            break;
 8014448:	e014      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801444a:	230f      	movs	r3, #15
 801444c:	18fb      	adds	r3, r7, r3
 801444e:	2201      	movs	r2, #1
 8014450:	701a      	strb	r2, [r3, #0]
            break;
 8014452:	e00f      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014454:	230f      	movs	r3, #15
 8014456:	18fb      	adds	r3, r7, r3
 8014458:	2205      	movs	r2, #5
 801445a:	701a      	strb	r2, [r3, #0]
            break;
 801445c:	e00a      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801445e:	230f      	movs	r3, #15
 8014460:	18fb      	adds	r3, r7, r3
 8014462:	2204      	movs	r2, #4
 8014464:	701a      	strb	r2, [r3, #0]
            break;
 8014466:	e005      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014468:	230f      	movs	r3, #15
 801446a:	18fb      	adds	r3, r7, r3
 801446c:	2204      	movs	r2, #4
 801446e:	701a      	strb	r2, [r3, #0]
            break;
 8014470:	e000      	b.n	8014474 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014472:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 8014474:	230f      	movs	r3, #15
 8014476:	18fb      	adds	r3, r7, r3
 8014478:	781b      	ldrb	r3, [r3, #0]
}
 801447a:	0018      	movs	r0, r3
 801447c:	46bd      	mov	sp, r7
 801447e:	b004      	add	sp, #16
 8014480:	bd80      	pop	{r7, pc}
 8014482:	46c0      	nop			; (mov r8, r8)
 8014484:	0801e9a8 	.word	0x0801e9a8

08014488 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014490:	4b08      	ldr	r3, [pc, #32]	; (80144b4 <IncreaseBufferPointer+0x2c>)
 8014492:	691b      	ldr	r3, [r3, #16]
 8014494:	3310      	adds	r3, #16
 8014496:	687a      	ldr	r2, [r7, #4]
 8014498:	429a      	cmp	r2, r3
 801449a:	d103      	bne.n	80144a4 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801449c:	4b05      	ldr	r3, [pc, #20]	; (80144b4 <IncreaseBufferPointer+0x2c>)
 801449e:	691b      	ldr	r3, [r3, #16]
 80144a0:	607b      	str	r3, [r7, #4]
 80144a2:	e002      	b.n	80144aa <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	3304      	adds	r3, #4
 80144a8:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80144aa:	687b      	ldr	r3, [r7, #4]
}
 80144ac:	0018      	movs	r0, r3
 80144ae:	46bd      	mov	sp, r7
 80144b0:	b002      	add	sp, #8
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	200012fc 	.word	0x200012fc

080144b8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	0002      	movs	r2, r0
 80144c0:	1dfb      	adds	r3, r7, #7
 80144c2:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 80144c4:	1dfb      	adds	r3, r7, #7
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d101      	bne.n	80144d0 <IsListEmpty+0x18>
    {
        return true;
 80144cc:	2301      	movs	r3, #1
 80144ce:	e000      	b.n	80144d2 <IsListEmpty+0x1a>
    }
    return false;
 80144d0:	2300      	movs	r3, #0
}
 80144d2:	0018      	movs	r0, r3
 80144d4:	46bd      	mov	sp, r7
 80144d6:	b002      	add	sp, #8
 80144d8:	bd80      	pop	{r7, pc}

080144da <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80144da:	b580      	push	{r7, lr}
 80144dc:	b082      	sub	sp, #8
 80144de:	af00      	add	r7, sp, #0
 80144e0:	0002      	movs	r2, r0
 80144e2:	1dfb      	adds	r3, r7, #7
 80144e4:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80144e6:	1dfb      	adds	r3, r7, #7
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	2b04      	cmp	r3, #4
 80144ec:	d901      	bls.n	80144f2 <IsListFull+0x18>
    {
        return true;
 80144ee:	2301      	movs	r3, #1
 80144f0:	e000      	b.n	80144f4 <IsListFull+0x1a>
    }
    return false;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	0018      	movs	r0, r3
 80144f6:	46bd      	mov	sp, r7
 80144f8:	b002      	add	sp, #8
 80144fa:	bd80      	pop	{r7, pc}

080144fc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b086      	sub	sp, #24
 8014500:	af00      	add	r7, sp, #0
 8014502:	60b9      	str	r1, [r7, #8]
 8014504:	607a      	str	r2, [r7, #4]
 8014506:	230f      	movs	r3, #15
 8014508:	18fb      	adds	r3, r7, r3
 801450a:	1c02      	adds	r2, r0, #0
 801450c:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014512:	4b18      	ldr	r3, [pc, #96]	; (8014574 <GetElement+0x78>)
 8014514:	691b      	ldr	r3, [r3, #16]
 8014516:	7d1b      	ldrb	r3, [r3, #20]
 8014518:	0018      	movs	r0, r3
 801451a:	f7ff ffcd 	bl	80144b8 <IsListEmpty>
 801451e:	1e03      	subs	r3, r0, #0
 8014520:	d001      	beq.n	8014526 <GetElement+0x2a>
    {
        return NULL;
 8014522:	2300      	movs	r3, #0
 8014524:	e022      	b.n	801456c <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8014526:	2313      	movs	r3, #19
 8014528:	18fb      	adds	r3, r7, r3
 801452a:	2200      	movs	r2, #0
 801452c:	701a      	strb	r2, [r3, #0]
 801452e:	e014      	b.n	801455a <GetElement+0x5e>
    {
        if( element->Request == request )
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	220f      	movs	r2, #15
 8014536:	18ba      	adds	r2, r7, r2
 8014538:	7812      	ldrb	r2, [r2, #0]
 801453a:	429a      	cmp	r2, r3
 801453c:	d101      	bne.n	8014542 <GetElement+0x46>
        {
            // We have found the element
            return element;
 801453e:	697b      	ldr	r3, [r7, #20]
 8014540:	e014      	b.n	801456c <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	0018      	movs	r0, r3
 8014546:	f7ff ff9f 	bl	8014488 <IncreaseBufferPointer>
 801454a:	0003      	movs	r3, r0
 801454c:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 801454e:	2113      	movs	r1, #19
 8014550:	187b      	adds	r3, r7, r1
 8014552:	781a      	ldrb	r2, [r3, #0]
 8014554:	187b      	adds	r3, r7, r1
 8014556:	3201      	adds	r2, #1
 8014558:	701a      	strb	r2, [r3, #0]
 801455a:	4b06      	ldr	r3, [pc, #24]	; (8014574 <GetElement+0x78>)
 801455c:	691b      	ldr	r3, [r3, #16]
 801455e:	7d1b      	ldrb	r3, [r3, #20]
 8014560:	2213      	movs	r2, #19
 8014562:	18ba      	adds	r2, r7, r2
 8014564:	7812      	ldrb	r2, [r2, #0]
 8014566:	429a      	cmp	r2, r3
 8014568:	d3e2      	bcc.n	8014530 <GetElement+0x34>
    }

    return NULL;
 801456a:	2300      	movs	r3, #0
}
 801456c:	0018      	movs	r0, r3
 801456e:	46bd      	mov	sp, r7
 8014570:	b006      	add	sp, #24
 8014572:	bd80      	pop	{r7, pc}
 8014574:	200012fc 	.word	0x200012fc

08014578 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8014582:	4b13      	ldr	r3, [pc, #76]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8014588:	4b11      	ldr	r3, [pc, #68]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 801458a:	4a12      	ldr	r2, [pc, #72]	; (80145d4 <LoRaMacConfirmQueueInit+0x5c>)
 801458c:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 801458e:	4b10      	ldr	r3, [pc, #64]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 8014590:	691b      	ldr	r3, [r3, #16]
 8014592:	2200      	movs	r2, #0
 8014594:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014596:	4b0e      	ldr	r3, [pc, #56]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 8014598:	691b      	ldr	r3, [r3, #16]
 801459a:	001a      	movs	r2, r3
 801459c:	4b0c      	ldr	r3, [pc, #48]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 801459e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80145a0:	4b0b      	ldr	r3, [pc, #44]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 80145a2:	691b      	ldr	r3, [r3, #16]
 80145a4:	001a      	movs	r2, r3
 80145a6:	4b0a      	ldr	r3, [pc, #40]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 80145a8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 80145aa:	4b09      	ldr	r3, [pc, #36]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 80145ac:	691b      	ldr	r3, [r3, #16]
 80145ae:	2214      	movs	r2, #20
 80145b0:	21ff      	movs	r1, #255	; 0xff
 80145b2:	0018      	movs	r0, r3
 80145b4:	f004 fd06 	bl	8018fc4 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80145b8:	4b05      	ldr	r3, [pc, #20]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 80145ba:	691b      	ldr	r3, [r3, #16]
 80145bc:	2201      	movs	r2, #1
 80145be:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 80145c0:	4b03      	ldr	r3, [pc, #12]	; (80145d0 <LoRaMacConfirmQueueInit+0x58>)
 80145c2:	683a      	ldr	r2, [r7, #0]
 80145c4:	60da      	str	r2, [r3, #12]
}
 80145c6:	46c0      	nop			; (mov r8, r8)
 80145c8:	46bd      	mov	sp, r7
 80145ca:	b002      	add	sp, #8
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	46c0      	nop			; (mov r8, r8)
 80145d0:	200012fc 	.word	0x200012fc
 80145d4:	200012e4 	.word	0x200012e4

080145d8 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d007      	beq.n	80145f6 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80145e6:	6879      	ldr	r1, [r7, #4]
 80145e8:	4b05      	ldr	r3, [pc, #20]	; (8014600 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80145ea:	2216      	movs	r2, #22
 80145ec:	0018      	movs	r0, r3
 80145ee:	f004 fcab 	bl	8018f48 <memcpy1>
        return true;
 80145f2:	2301      	movs	r3, #1
 80145f4:	e000      	b.n	80145f8 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 80145f6:	2300      	movs	r3, #0
    }
}
 80145f8:	0018      	movs	r0, r3
 80145fa:	46bd      	mov	sp, r7
 80145fc:	b002      	add	sp, #8
 80145fe:	bd80      	pop	{r7, pc}
 8014600:	200012e4 	.word	0x200012e4

08014604 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2216      	movs	r2, #22
 8014610:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8014612:	4b02      	ldr	r3, [pc, #8]	; (801461c <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8014614:	0018      	movs	r0, r3
 8014616:	46bd      	mov	sp, r7
 8014618:	b002      	add	sp, #8
 801461a:	bd80      	pop	{r7, pc}
 801461c:	200012e4 	.word	0x200012e4

08014620 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014628:	4b17      	ldr	r3, [pc, #92]	; (8014688 <LoRaMacConfirmQueueAdd+0x68>)
 801462a:	691b      	ldr	r3, [r3, #16]
 801462c:	7d1b      	ldrb	r3, [r3, #20]
 801462e:	0018      	movs	r0, r3
 8014630:	f7ff ff53 	bl	80144da <IsListFull>
 8014634:	1e03      	subs	r3, r0, #0
 8014636:	d001      	beq.n	801463c <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 8014638:	2300      	movs	r3, #0
 801463a:	e021      	b.n	8014680 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801463c:	4b12      	ldr	r3, [pc, #72]	; (8014688 <LoRaMacConfirmQueueAdd+0x68>)
 801463e:	689b      	ldr	r3, [r3, #8]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	7812      	ldrb	r2, [r2, #0]
 8014644:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014646:	4b10      	ldr	r3, [pc, #64]	; (8014688 <LoRaMacConfirmQueueAdd+0x68>)
 8014648:	689b      	ldr	r3, [r3, #8]
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	7852      	ldrb	r2, [r2, #1]
 801464e:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014650:	4b0d      	ldr	r3, [pc, #52]	; (8014688 <LoRaMacConfirmQueueAdd+0x68>)
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	687a      	ldr	r2, [r7, #4]
 8014656:	78d2      	ldrb	r2, [r2, #3]
 8014658:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 801465a:	4b0b      	ldr	r3, [pc, #44]	; (8014688 <LoRaMacConfirmQueueAdd+0x68>)
 801465c:	689b      	ldr	r3, [r3, #8]
 801465e:	2200      	movs	r2, #0
 8014660:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8014662:	4b09      	ldr	r3, [pc, #36]	; (8014688 <LoRaMacConfirmQueueAdd+0x68>)
 8014664:	691b      	ldr	r3, [r3, #16]
 8014666:	7d1a      	ldrb	r2, [r3, #20]
 8014668:	3201      	adds	r2, #1
 801466a:	b2d2      	uxtb	r2, r2
 801466c:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801466e:	4b06      	ldr	r3, [pc, #24]	; (8014688 <LoRaMacConfirmQueueAdd+0x68>)
 8014670:	689b      	ldr	r3, [r3, #8]
 8014672:	0018      	movs	r0, r3
 8014674:	f7ff ff08 	bl	8014488 <IncreaseBufferPointer>
 8014678:	0002      	movs	r2, r0
 801467a:	4b03      	ldr	r3, [pc, #12]	; (8014688 <LoRaMacConfirmQueueAdd+0x68>)
 801467c:	609a      	str	r2, [r3, #8]

    return true;
 801467e:	2301      	movs	r3, #1
}
 8014680:	0018      	movs	r0, r3
 8014682:	46bd      	mov	sp, r7
 8014684:	b002      	add	sp, #8
 8014686:	bd80      	pop	{r7, pc}
 8014688:	200012fc 	.word	0x200012fc

0801468c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801468c:	b580      	push	{r7, lr}
 801468e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014690:	4b0d      	ldr	r3, [pc, #52]	; (80146c8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8014692:	691b      	ldr	r3, [r3, #16]
 8014694:	7d1b      	ldrb	r3, [r3, #20]
 8014696:	0018      	movs	r0, r3
 8014698:	f7ff ff0e 	bl	80144b8 <IsListEmpty>
 801469c:	1e03      	subs	r3, r0, #0
 801469e:	d001      	beq.n	80146a4 <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 80146a0:	2300      	movs	r3, #0
 80146a2:	e00e      	b.n	80146c2 <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 80146a4:	4b08      	ldr	r3, [pc, #32]	; (80146c8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80146a6:	691b      	ldr	r3, [r3, #16]
 80146a8:	7d1a      	ldrb	r2, [r3, #20]
 80146aa:	3a01      	subs	r2, #1
 80146ac:	b2d2      	uxtb	r2, r2
 80146ae:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80146b0:	4b05      	ldr	r3, [pc, #20]	; (80146c8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	0018      	movs	r0, r3
 80146b6:	f7ff fee7 	bl	8014488 <IncreaseBufferPointer>
 80146ba:	0002      	movs	r2, r0
 80146bc:	4b02      	ldr	r3, [pc, #8]	; (80146c8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80146be:	605a      	str	r2, [r3, #4]

    return true;
 80146c0:	2301      	movs	r3, #1
}
 80146c2:	0018      	movs	r0, r3
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}
 80146c8:	200012fc 	.word	0x200012fc

080146cc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	0002      	movs	r2, r0
 80146d4:	1dfb      	adds	r3, r7, #7
 80146d6:	701a      	strb	r2, [r3, #0]
 80146d8:	1dbb      	adds	r3, r7, #6
 80146da:	1c0a      	adds	r2, r1, #0
 80146dc:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80146de:	2300      	movs	r3, #0
 80146e0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 80146e2:	4b13      	ldr	r3, [pc, #76]	; (8014730 <LoRaMacConfirmQueueSetStatus+0x64>)
 80146e4:	691b      	ldr	r3, [r3, #16]
 80146e6:	7d1b      	ldrb	r3, [r3, #20]
 80146e8:	0018      	movs	r0, r3
 80146ea:	f7ff fee5 	bl	80144b8 <IsListEmpty>
 80146ee:	0003      	movs	r3, r0
 80146f0:	001a      	movs	r2, r3
 80146f2:	2301      	movs	r3, #1
 80146f4:	4053      	eors	r3, r2
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d014      	beq.n	8014726 <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80146fc:	4b0c      	ldr	r3, [pc, #48]	; (8014730 <LoRaMacConfirmQueueSetStatus+0x64>)
 80146fe:	6859      	ldr	r1, [r3, #4]
 8014700:	4b0b      	ldr	r3, [pc, #44]	; (8014730 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014702:	689a      	ldr	r2, [r3, #8]
 8014704:	1dbb      	adds	r3, r7, #6
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	0018      	movs	r0, r3
 801470a:	f7ff fef7 	bl	80144fc <GetElement>
 801470e:	0003      	movs	r3, r0
 8014710:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d006      	beq.n	8014726 <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	1dfa      	adds	r2, r7, #7
 801471c:	7812      	ldrb	r2, [r2, #0]
 801471e:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2201      	movs	r2, #1
 8014724:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014726:	46c0      	nop			; (mov r8, r8)
 8014728:	46bd      	mov	sp, r7
 801472a:	b004      	add	sp, #16
 801472c:	bd80      	pop	{r7, pc}
 801472e:	46c0      	nop			; (mov r8, r8)
 8014730:	200012fc 	.word	0x200012fc

08014734 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	0002      	movs	r2, r0
 801473c:	1dfb      	adds	r3, r7, #7
 801473e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8014740:	2300      	movs	r3, #0
 8014742:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8014744:	4b11      	ldr	r3, [pc, #68]	; (801478c <LoRaMacConfirmQueueGetStatus+0x58>)
 8014746:	691b      	ldr	r3, [r3, #16]
 8014748:	7d1b      	ldrb	r3, [r3, #20]
 801474a:	0018      	movs	r0, r3
 801474c:	f7ff feb4 	bl	80144b8 <IsListEmpty>
 8014750:	0003      	movs	r3, r0
 8014752:	001a      	movs	r2, r3
 8014754:	2301      	movs	r3, #1
 8014756:	4053      	eors	r3, r2
 8014758:	b2db      	uxtb	r3, r3
 801475a:	2b00      	cmp	r3, #0
 801475c:	d010      	beq.n	8014780 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801475e:	4b0b      	ldr	r3, [pc, #44]	; (801478c <LoRaMacConfirmQueueGetStatus+0x58>)
 8014760:	6859      	ldr	r1, [r3, #4]
 8014762:	4b0a      	ldr	r3, [pc, #40]	; (801478c <LoRaMacConfirmQueueGetStatus+0x58>)
 8014764:	689a      	ldr	r2, [r3, #8]
 8014766:	1dfb      	adds	r3, r7, #7
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	0018      	movs	r0, r3
 801476c:	f7ff fec6 	bl	80144fc <GetElement>
 8014770:	0003      	movs	r3, r0
 8014772:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d002      	beq.n	8014780 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	785b      	ldrb	r3, [r3, #1]
 801477e:	e000      	b.n	8014782 <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014780:	2301      	movs	r3, #1
}
 8014782:	0018      	movs	r0, r3
 8014784:	46bd      	mov	sp, r7
 8014786:	b004      	add	sp, #16
 8014788:	bd80      	pop	{r7, pc}
 801478a:	46c0      	nop			; (mov r8, r8)
 801478c:	200012fc 	.word	0x200012fc

08014790 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b084      	sub	sp, #16
 8014794:	af00      	add	r7, sp, #0
 8014796:	0002      	movs	r2, r0
 8014798:	1dfb      	adds	r3, r7, #7
 801479a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801479c:	4b18      	ldr	r3, [pc, #96]	; (8014800 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801479e:	685b      	ldr	r3, [r3, #4]
 80147a0:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 80147a2:	4b17      	ldr	r3, [pc, #92]	; (8014800 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80147a4:	691b      	ldr	r3, [r3, #16]
 80147a6:	1dfa      	adds	r2, r7, #7
 80147a8:	7812      	ldrb	r2, [r2, #0]
 80147aa:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 80147ac:	4b14      	ldr	r3, [pc, #80]	; (8014800 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80147ae:	691b      	ldr	r3, [r3, #16]
 80147b0:	7d1b      	ldrb	r3, [r3, #20]
 80147b2:	0018      	movs	r0, r3
 80147b4:	f7ff fe80 	bl	80144b8 <IsListEmpty>
 80147b8:	0003      	movs	r3, r0
 80147ba:	001a      	movs	r2, r3
 80147bc:	2301      	movs	r3, #1
 80147be:	4053      	eors	r3, r2
 80147c0:	b2db      	uxtb	r3, r3
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d018      	beq.n	80147f8 <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	1dfa      	adds	r2, r7, #7
 80147ca:	7812      	ldrb	r2, [r2, #0]
 80147cc:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	78db      	ldrb	r3, [r3, #3]
 80147d2:	2201      	movs	r2, #1
 80147d4:	4053      	eors	r3, r2
 80147d6:	b2db      	uxtb	r3, r3
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d002      	beq.n	80147e2 <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	2201      	movs	r2, #1
 80147e0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	0018      	movs	r0, r3
 80147e6:	f7ff fe4f 	bl	8014488 <IncreaseBufferPointer>
 80147ea:	0003      	movs	r3, r0
 80147ec:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80147ee:	4b04      	ldr	r3, [pc, #16]	; (8014800 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80147f0:	689b      	ldr	r3, [r3, #8]
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d1e6      	bne.n	80147c6 <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 80147f8:	46c0      	nop			; (mov r8, r8)
 80147fa:	46bd      	mov	sp, r7
 80147fc:	b004      	add	sp, #16
 80147fe:	bd80      	pop	{r7, pc}
 8014800:	200012fc 	.word	0x200012fc

08014804 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	0002      	movs	r2, r0
 801480c:	1dfb      	adds	r3, r7, #7
 801480e:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014810:	4b08      	ldr	r3, [pc, #32]	; (8014834 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014812:	6859      	ldr	r1, [r3, #4]
 8014814:	4b07      	ldr	r3, [pc, #28]	; (8014834 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014816:	689a      	ldr	r2, [r3, #8]
 8014818:	1dfb      	adds	r3, r7, #7
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	0018      	movs	r0, r3
 801481e:	f7ff fe6d 	bl	80144fc <GetElement>
 8014822:	1e03      	subs	r3, r0, #0
 8014824:	d001      	beq.n	801482a <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8014826:	2301      	movs	r3, #1
 8014828:	e000      	b.n	801482c <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 801482a:	2300      	movs	r3, #0
}
 801482c:	0018      	movs	r0, r3
 801482e:	46bd      	mov	sp, r7
 8014830:	b002      	add	sp, #8
 8014832:	bd80      	pop	{r7, pc}
 8014834:	200012fc 	.word	0x200012fc

08014838 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b084      	sub	sp, #16
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8014840:	4b2d      	ldr	r3, [pc, #180]	; (80148f8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014842:	691a      	ldr	r2, [r3, #16]
 8014844:	230e      	movs	r3, #14
 8014846:	18fb      	adds	r3, r7, r3
 8014848:	7d12      	ldrb	r2, [r2, #20]
 801484a:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 801484c:	230d      	movs	r3, #13
 801484e:	18fb      	adds	r3, r7, r3
 8014850:	2200      	movs	r2, #0
 8014852:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014854:	230f      	movs	r3, #15
 8014856:	18fb      	adds	r3, r7, r3
 8014858:	2200      	movs	r2, #0
 801485a:	701a      	strb	r2, [r3, #0]
 801485c:	e03f      	b.n	80148de <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801485e:	4b26      	ldr	r3, [pc, #152]	; (80148f8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	781a      	ldrb	r2, [r3, #0]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014868:	4b23      	ldr	r3, [pc, #140]	; (80148f8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801486a:	685b      	ldr	r3, [r3, #4]
 801486c:	785a      	ldrb	r2, [r3, #1]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014872:	4b21      	ldr	r3, [pc, #132]	; (80148f8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014874:	685a      	ldr	r2, [r3, #4]
 8014876:	210d      	movs	r1, #13
 8014878:	187b      	adds	r3, r7, r1
 801487a:	7892      	ldrb	r2, [r2, #2]
 801487c:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 801487e:	187b      	adds	r3, r7, r1
 8014880:	781b      	ldrb	r3, [r3, #0]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d006      	beq.n	8014894 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014886:	4b1c      	ldr	r3, [pc, #112]	; (80148f8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	687a      	ldr	r2, [r7, #4]
 801488e:	0010      	movs	r0, r2
 8014890:	4798      	blx	r3
 8014892:	e00f      	b.n	80148b4 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014894:	4b18      	ldr	r3, [pc, #96]	; (80148f8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014896:	685b      	ldr	r3, [r3, #4]
 8014898:	781a      	ldrb	r2, [r3, #0]
 801489a:	2108      	movs	r1, #8
 801489c:	187b      	adds	r3, r7, r1
 801489e:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80148a0:	4b15      	ldr	r3, [pc, #84]	; (80148f8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	785a      	ldrb	r2, [r3, #1]
 80148a6:	187b      	adds	r3, r7, r1
 80148a8:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80148aa:	4b13      	ldr	r3, [pc, #76]	; (80148f8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	78da      	ldrb	r2, [r3, #3]
 80148b0:	187b      	adds	r3, r7, r1
 80148b2:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80148b4:	f7ff feea 	bl	801468c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80148b8:	230d      	movs	r3, #13
 80148ba:	18fb      	adds	r3, r7, r3
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	2201      	movs	r2, #1
 80148c0:	4053      	eors	r3, r2
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d004      	beq.n	80148d2 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80148c8:	2308      	movs	r3, #8
 80148ca:	18fb      	adds	r3, r7, r3
 80148cc:	0018      	movs	r0, r3
 80148ce:	f7ff fea7 	bl	8014620 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80148d2:	210f      	movs	r1, #15
 80148d4:	187b      	adds	r3, r7, r1
 80148d6:	781a      	ldrb	r2, [r3, #0]
 80148d8:	187b      	adds	r3, r7, r1
 80148da:	3201      	adds	r2, #1
 80148dc:	701a      	strb	r2, [r3, #0]
 80148de:	230f      	movs	r3, #15
 80148e0:	18fa      	adds	r2, r7, r3
 80148e2:	230e      	movs	r3, #14
 80148e4:	18fb      	adds	r3, r7, r3
 80148e6:	7812      	ldrb	r2, [r2, #0]
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d3b7      	bcc.n	801485e <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80148ee:	46c0      	nop			; (mov r8, r8)
 80148f0:	46c0      	nop			; (mov r8, r8)
 80148f2:	46bd      	mov	sp, r7
 80148f4:	b004      	add	sp, #16
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	200012fc 	.word	0x200012fc

080148fc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8014900:	4b02      	ldr	r3, [pc, #8]	; (801490c <LoRaMacConfirmQueueGetCnt+0x10>)
 8014902:	691b      	ldr	r3, [r3, #16]
 8014904:	7d1b      	ldrb	r3, [r3, #20]
}
 8014906:	0018      	movs	r0, r3
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}
 801490c:	200012fc 	.word	0x200012fc

08014910 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014910:	b580      	push	{r7, lr}
 8014912:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014914:	4b06      	ldr	r3, [pc, #24]	; (8014930 <LoRaMacConfirmQueueIsFull+0x20>)
 8014916:	691b      	ldr	r3, [r3, #16]
 8014918:	7d1b      	ldrb	r3, [r3, #20]
 801491a:	0018      	movs	r0, r3
 801491c:	f7ff fddd 	bl	80144da <IsListFull>
 8014920:	1e03      	subs	r3, r0, #0
 8014922:	d001      	beq.n	8014928 <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 8014924:	2301      	movs	r3, #1
 8014926:	e000      	b.n	801492a <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 8014928:	2300      	movs	r3, #0
    }
}
 801492a:	0018      	movs	r0, r3
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}
 8014930:	200012fc 	.word	0x200012fc

08014934 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014934:	b590      	push	{r4, r7, lr}
 8014936:	b08f      	sub	sp, #60	; 0x3c
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	0008      	movs	r0, r1
 801493e:	0011      	movs	r1, r2
 8014940:	607b      	str	r3, [r7, #4]
 8014942:	230a      	movs	r3, #10
 8014944:	18fb      	adds	r3, r7, r3
 8014946:	1c02      	adds	r2, r0, #0
 8014948:	801a      	strh	r2, [r3, #0]
 801494a:	2309      	movs	r3, #9
 801494c:	18fb      	adds	r3, r7, r3
 801494e:	1c0a      	adds	r2, r1, #0
 8014950:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d101      	bne.n	801495c <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014958:	230a      	movs	r3, #10
 801495a:	e0ad      	b.n	8014ab8 <PayloadEncrypt+0x184>
    }

    uint8_t bufferIndex = 0;
 801495c:	2337      	movs	r3, #55	; 0x37
 801495e:	18fb      	adds	r3, r7, r3
 8014960:	2200      	movs	r2, #0
 8014962:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8014964:	2334      	movs	r3, #52	; 0x34
 8014966:	18fb      	adds	r3, r7, r3
 8014968:	2201      	movs	r2, #1
 801496a:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 801496c:	2320      	movs	r3, #32
 801496e:	18fb      	adds	r3, r7, r3
 8014970:	2200      	movs	r2, #0
 8014972:	601a      	str	r2, [r3, #0]
 8014974:	3304      	adds	r3, #4
 8014976:	220c      	movs	r2, #12
 8014978:	2100      	movs	r1, #0
 801497a:	0018      	movs	r0, r3
 801497c:	f008 ffaf 	bl	801d8de <memset>
    uint8_t aBlock[16] = { 0 };
 8014980:	2410      	movs	r4, #16
 8014982:	193b      	adds	r3, r7, r4
 8014984:	2200      	movs	r2, #0
 8014986:	601a      	str	r2, [r3, #0]
 8014988:	3304      	adds	r3, #4
 801498a:	220c      	movs	r2, #12
 801498c:	2100      	movs	r1, #0
 801498e:	0018      	movs	r0, r3
 8014990:	f008 ffa5 	bl	801d8de <memset>

    aBlock[0] = 0x01;
 8014994:	0021      	movs	r1, r4
 8014996:	187b      	adds	r3, r7, r1
 8014998:	2201      	movs	r2, #1
 801499a:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 801499c:	187a      	adds	r2, r7, r1
 801499e:	2340      	movs	r3, #64	; 0x40
 80149a0:	2008      	movs	r0, #8
 80149a2:	181b      	adds	r3, r3, r0
 80149a4:	19db      	adds	r3, r3, r7
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	b2da      	uxtb	r2, r3
 80149ae:	187b      	adds	r3, r7, r1
 80149b0:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	0a1b      	lsrs	r3, r3, #8
 80149b6:	b2da      	uxtb	r2, r3
 80149b8:	187b      	adds	r3, r7, r1
 80149ba:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	0c1b      	lsrs	r3, r3, #16
 80149c0:	b2da      	uxtb	r2, r3
 80149c2:	187b      	adds	r3, r7, r1
 80149c4:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	0e1b      	lsrs	r3, r3, #24
 80149ca:	b2da      	uxtb	r2, r3
 80149cc:	187b      	adds	r3, r7, r1
 80149ce:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 80149d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149d2:	b2da      	uxtb	r2, r3
 80149d4:	187b      	adds	r3, r7, r1
 80149d6:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80149d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149da:	0a1b      	lsrs	r3, r3, #8
 80149dc:	b2da      	uxtb	r2, r3
 80149de:	187b      	adds	r3, r7, r1
 80149e0:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80149e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149e4:	0c1b      	lsrs	r3, r3, #16
 80149e6:	b2da      	uxtb	r2, r3
 80149e8:	187b      	adds	r3, r7, r1
 80149ea:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80149ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149ee:	0e1b      	lsrs	r3, r3, #24
 80149f0:	b2da      	uxtb	r2, r3
 80149f2:	187b      	adds	r3, r7, r1
 80149f4:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 80149f6:	e058      	b.n	8014aaa <PayloadEncrypt+0x176>
    {
        aBlock[15] = ctr & 0xFF;
 80149f8:	2134      	movs	r1, #52	; 0x34
 80149fa:	187b      	adds	r3, r7, r1
 80149fc:	881b      	ldrh	r3, [r3, #0]
 80149fe:	b2da      	uxtb	r2, r3
 8014a00:	2010      	movs	r0, #16
 8014a02:	183b      	adds	r3, r7, r0
 8014a04:	73da      	strb	r2, [r3, #15]
        ctr++;
 8014a06:	187b      	adds	r3, r7, r1
 8014a08:	881a      	ldrh	r2, [r3, #0]
 8014a0a:	187b      	adds	r3, r7, r1
 8014a0c:	3201      	adds	r2, #1
 8014a0e:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014a10:	2320      	movs	r3, #32
 8014a12:	18f9      	adds	r1, r7, r3
 8014a14:	2309      	movs	r3, #9
 8014a16:	18fb      	adds	r3, r7, r3
 8014a18:	781a      	ldrb	r2, [r3, #0]
 8014a1a:	1838      	adds	r0, r7, r0
 8014a1c:	000b      	movs	r3, r1
 8014a1e:	2110      	movs	r1, #16
 8014a20:	f7f8 f965 	bl	800ccee <SecureElementAesEncrypt>
 8014a24:	1e03      	subs	r3, r0, #0
 8014a26:	d001      	beq.n	8014a2c <PayloadEncrypt+0xf8>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a28:	230f      	movs	r3, #15
 8014a2a:	e045      	b.n	8014ab8 <PayloadEncrypt+0x184>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014a2c:	2333      	movs	r3, #51	; 0x33
 8014a2e:	18fb      	adds	r3, r7, r3
 8014a30:	2200      	movs	r2, #0
 8014a32:	701a      	strb	r2, [r3, #0]
 8014a34:	e01f      	b.n	8014a76 <PayloadEncrypt+0x142>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014a36:	2037      	movs	r0, #55	; 0x37
 8014a38:	183b      	adds	r3, r7, r0
 8014a3a:	781a      	ldrb	r2, [r3, #0]
 8014a3c:	2433      	movs	r4, #51	; 0x33
 8014a3e:	193b      	adds	r3, r7, r4
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	18d3      	adds	r3, r2, r3
 8014a44:	001a      	movs	r2, r3
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	189b      	adds	r3, r3, r2
 8014a4a:	7819      	ldrb	r1, [r3, #0]
 8014a4c:	193b      	adds	r3, r7, r4
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	2220      	movs	r2, #32
 8014a52:	18ba      	adds	r2, r7, r2
 8014a54:	5cd2      	ldrb	r2, [r2, r3]
 8014a56:	183b      	adds	r3, r7, r0
 8014a58:	7818      	ldrb	r0, [r3, #0]
 8014a5a:	193b      	adds	r3, r7, r4
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	18c3      	adds	r3, r0, r3
 8014a60:	0018      	movs	r0, r3
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	181b      	adds	r3, r3, r0
 8014a66:	404a      	eors	r2, r1
 8014a68:	b2d2      	uxtb	r2, r2
 8014a6a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014a6c:	193b      	adds	r3, r7, r4
 8014a6e:	781a      	ldrb	r2, [r3, #0]
 8014a70:	193b      	adds	r3, r7, r4
 8014a72:	3201      	adds	r2, #1
 8014a74:	701a      	strb	r2, [r3, #0]
 8014a76:	2333      	movs	r3, #51	; 0x33
 8014a78:	18fb      	adds	r3, r7, r3
 8014a7a:	781a      	ldrb	r2, [r3, #0]
 8014a7c:	230a      	movs	r3, #10
 8014a7e:	18fb      	adds	r3, r7, r3
 8014a80:	881b      	ldrh	r3, [r3, #0]
 8014a82:	b219      	sxth	r1, r3
 8014a84:	2910      	cmp	r1, #16
 8014a86:	dd00      	ble.n	8014a8a <PayloadEncrypt+0x156>
 8014a88:	2310      	movs	r3, #16
 8014a8a:	b21b      	sxth	r3, r3
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	dbd2      	blt.n	8014a36 <PayloadEncrypt+0x102>
        }
        size -= 16;
 8014a90:	210a      	movs	r1, #10
 8014a92:	187b      	adds	r3, r7, r1
 8014a94:	881b      	ldrh	r3, [r3, #0]
 8014a96:	3b10      	subs	r3, #16
 8014a98:	b29a      	uxth	r2, r3
 8014a9a:	187b      	adds	r3, r7, r1
 8014a9c:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8014a9e:	2237      	movs	r2, #55	; 0x37
 8014aa0:	18bb      	adds	r3, r7, r2
 8014aa2:	18ba      	adds	r2, r7, r2
 8014aa4:	7812      	ldrb	r2, [r2, #0]
 8014aa6:	3210      	adds	r2, #16
 8014aa8:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8014aaa:	230a      	movs	r3, #10
 8014aac:	18fb      	adds	r3, r7, r3
 8014aae:	2200      	movs	r2, #0
 8014ab0:	5e9b      	ldrsh	r3, [r3, r2]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	dca0      	bgt.n	80149f8 <PayloadEncrypt+0xc4>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014ab6:	2300      	movs	r3, #0
}
 8014ab8:	0018      	movs	r0, r3
 8014aba:	46bd      	mov	sp, r7
 8014abc:	b00f      	add	sp, #60	; 0x3c
 8014abe:	bd90      	pop	{r4, r7, pc}

08014ac0 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
 8014ac0:	b590      	push	{r4, r7, lr}
 8014ac2:	b08d      	sub	sp, #52	; 0x34
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	0004      	movs	r4, r0
 8014ac8:	6039      	str	r1, [r7, #0]
 8014aca:	0010      	movs	r0, r2
 8014acc:	0019      	movs	r1, r3
 8014ace:	1dbb      	adds	r3, r7, #6
 8014ad0:	1c22      	adds	r2, r4, #0
 8014ad2:	801a      	strh	r2, [r3, #0]
 8014ad4:	1d7b      	adds	r3, r7, #5
 8014ad6:	1c02      	adds	r2, r0, #0
 8014ad8:	701a      	strb	r2, [r3, #0]
 8014ada:	1d3b      	adds	r3, r7, #4
 8014adc:	1c0a      	adds	r2, r1, #0
 8014ade:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8014ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d101      	bne.n	8014aea <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ae6:	230a      	movs	r3, #10
 8014ae8:	e0ae      	b.n	8014c48 <FOptsEncrypt+0x188>
    }

    uint8_t bufferIndex = 0;
 8014aea:	232e      	movs	r3, #46	; 0x2e
 8014aec:	18fb      	adds	r3, r7, r3
 8014aee:	2200      	movs	r2, #0
 8014af0:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8014af2:	231c      	movs	r3, #28
 8014af4:	18fb      	adds	r3, r7, r3
 8014af6:	2200      	movs	r2, #0
 8014af8:	601a      	str	r2, [r3, #0]
 8014afa:	3304      	adds	r3, #4
 8014afc:	220c      	movs	r2, #12
 8014afe:	2100      	movs	r1, #0
 8014b00:	0018      	movs	r0, r3
 8014b02:	f008 feec 	bl	801d8de <memset>
    uint8_t aBlock[16] = { 0 };
 8014b06:	240c      	movs	r4, #12
 8014b08:	193b      	adds	r3, r7, r4
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	601a      	str	r2, [r3, #0]
 8014b0e:	3304      	adds	r3, #4
 8014b10:	220c      	movs	r2, #12
 8014b12:	2100      	movs	r1, #0
 8014b14:	0018      	movs	r0, r3
 8014b16:	f008 fee2 	bl	801d8de <memset>

    aBlock[0] = 0x01;
 8014b1a:	193b      	adds	r3, r7, r4
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	701a      	strb	r2, [r3, #0]

    if( CryptoCtx.NvmCtx->LrWanVersion.Value > 0x01010000 )
 8014b20:	4b4b      	ldr	r3, [pc, #300]	; (8014c50 <FOptsEncrypt+0x190>)
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	4a4b      	ldr	r2, [pc, #300]	; (8014c54 <FOptsEncrypt+0x194>)
 8014b28:	4293      	cmp	r3, r2
 8014b2a:	d91a      	bls.n	8014b62 <FOptsEncrypt+0xa2>
    {
        // Introduced in LoRaWAN 1.1.1 specification
        switch( fCntID )
 8014b2c:	1d3b      	adds	r3, r7, #4
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	2b02      	cmp	r3, #2
 8014b32:	d00f      	beq.n	8014b54 <FOptsEncrypt+0x94>
 8014b34:	dc13      	bgt.n	8014b5e <FOptsEncrypt+0x9e>
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d002      	beq.n	8014b40 <FOptsEncrypt+0x80>
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	d005      	beq.n	8014b4a <FOptsEncrypt+0x8a>
 8014b3e:	e00e      	b.n	8014b5e <FOptsEncrypt+0x9e>
        {
            case FCNT_UP:
            {
                aBlock[4] = 0x01;
 8014b40:	230c      	movs	r3, #12
 8014b42:	18fb      	adds	r3, r7, r3
 8014b44:	2201      	movs	r2, #1
 8014b46:	711a      	strb	r2, [r3, #4]
                break;
 8014b48:	e00c      	b.n	8014b64 <FOptsEncrypt+0xa4>
            }
            case N_FCNT_DOWN:
            {
                aBlock[4] = 0x01;
 8014b4a:	230c      	movs	r3, #12
 8014b4c:	18fb      	adds	r3, r7, r3
 8014b4e:	2201      	movs	r2, #1
 8014b50:	711a      	strb	r2, [r3, #4]
                break;
 8014b52:	e007      	b.n	8014b64 <FOptsEncrypt+0xa4>
            }
            case A_FCNT_DOWN:
            {
                aBlock[4] = 0x02;
 8014b54:	230c      	movs	r3, #12
 8014b56:	18fb      	adds	r3, r7, r3
 8014b58:	2202      	movs	r2, #2
 8014b5a:	711a      	strb	r2, [r3, #4]
                break;
 8014b5c:	e002      	b.n	8014b64 <FOptsEncrypt+0xa4>
            }
            default:
                return LORAMAC_CRYPTO_FAIL_PARAM;
 8014b5e:	2309      	movs	r3, #9
 8014b60:	e072      	b.n	8014c48 <FOptsEncrypt+0x188>
        }
    }
 8014b62:	46c0      	nop			; (mov r8, r8)

    aBlock[5] = dir;
 8014b64:	210c      	movs	r1, #12
 8014b66:	187b      	adds	r3, r7, r1
 8014b68:	1d7a      	adds	r2, r7, #5
 8014b6a:	7812      	ldrb	r2, [r2, #0]
 8014b6c:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	b2da      	uxtb	r2, r3
 8014b72:	187b      	adds	r3, r7, r1
 8014b74:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	0a1b      	lsrs	r3, r3, #8
 8014b7a:	b2da      	uxtb	r2, r3
 8014b7c:	187b      	adds	r3, r7, r1
 8014b7e:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	0c1b      	lsrs	r3, r3, #16
 8014b84:	b2da      	uxtb	r2, r3
 8014b86:	187b      	adds	r3, r7, r1
 8014b88:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	0e1b      	lsrs	r3, r3, #24
 8014b8e:	b2da      	uxtb	r2, r3
 8014b90:	187b      	adds	r3, r7, r1
 8014b92:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8014b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b96:	b2da      	uxtb	r2, r3
 8014b98:	187b      	adds	r3, r7, r1
 8014b9a:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b9e:	0a1b      	lsrs	r3, r3, #8
 8014ba0:	b2da      	uxtb	r2, r3
 8014ba2:	187b      	adds	r3, r7, r1
 8014ba4:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ba8:	0c1b      	lsrs	r3, r3, #16
 8014baa:	b2da      	uxtb	r2, r3
 8014bac:	187b      	adds	r3, r7, r1
 8014bae:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bb2:	0e1b      	lsrs	r3, r3, #24
 8014bb4:	b2da      	uxtb	r2, r3
 8014bb6:	187b      	adds	r3, r7, r1
 8014bb8:	735a      	strb	r2, [r3, #13]

    if( CryptoCtx.NvmCtx->LrWanVersion.Value > 0x01010000 )
 8014bba:	4b25      	ldr	r3, [pc, #148]	; (8014c50 <FOptsEncrypt+0x190>)
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	4a24      	ldr	r2, [pc, #144]	; (8014c54 <FOptsEncrypt+0x194>)
 8014bc2:	4293      	cmp	r3, r2
 8014bc4:	d902      	bls.n	8014bcc <FOptsEncrypt+0x10c>
    {
        // Introduced in LoRaWAN 1.1.1 specification
        aBlock[15] = 0x01;
 8014bc6:	187b      	adds	r3, r7, r1
 8014bc8:	2201      	movs	r2, #1
 8014bca:	73da      	strb	r2, [r3, #15]
    }

    if( size > 0 )
 8014bcc:	1dbb      	adds	r3, r7, #6
 8014bce:	881b      	ldrh	r3, [r3, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d038      	beq.n	8014c46 <FOptsEncrypt+0x186>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014bd4:	231c      	movs	r3, #28
 8014bd6:	18fb      	adds	r3, r7, r3
 8014bd8:	220c      	movs	r2, #12
 8014bda:	18b8      	adds	r0, r7, r2
 8014bdc:	2206      	movs	r2, #6
 8014bde:	2110      	movs	r1, #16
 8014be0:	f7f8 f885 	bl	800ccee <SecureElementAesEncrypt>
 8014be4:	1e03      	subs	r3, r0, #0
 8014be6:	d001      	beq.n	8014bec <FOptsEncrypt+0x12c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014be8:	230f      	movs	r3, #15
 8014bea:	e02d      	b.n	8014c48 <FOptsEncrypt+0x188>
        }
        for( uint8_t i = 0; i < size; i++ )
 8014bec:	232f      	movs	r3, #47	; 0x2f
 8014bee:	18fb      	adds	r3, r7, r3
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	701a      	strb	r2, [r3, #0]
 8014bf4:	e01f      	b.n	8014c36 <FOptsEncrypt+0x176>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014bf6:	202e      	movs	r0, #46	; 0x2e
 8014bf8:	183b      	adds	r3, r7, r0
 8014bfa:	781a      	ldrb	r2, [r3, #0]
 8014bfc:	242f      	movs	r4, #47	; 0x2f
 8014bfe:	193b      	adds	r3, r7, r4
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	18d3      	adds	r3, r2, r3
 8014c04:	001a      	movs	r2, r3
 8014c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c08:	189b      	adds	r3, r3, r2
 8014c0a:	7819      	ldrb	r1, [r3, #0]
 8014c0c:	193b      	adds	r3, r7, r4
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	221c      	movs	r2, #28
 8014c12:	18ba      	adds	r2, r7, r2
 8014c14:	5cd2      	ldrb	r2, [r2, r3]
 8014c16:	183b      	adds	r3, r7, r0
 8014c18:	7818      	ldrb	r0, [r3, #0]
 8014c1a:	193b      	adds	r3, r7, r4
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	18c3      	adds	r3, r0, r3
 8014c20:	0018      	movs	r0, r3
 8014c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c24:	181b      	adds	r3, r3, r0
 8014c26:	404a      	eors	r2, r1
 8014c28:	b2d2      	uxtb	r2, r2
 8014c2a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 8014c2c:	193b      	adds	r3, r7, r4
 8014c2e:	781a      	ldrb	r2, [r3, #0]
 8014c30:	193b      	adds	r3, r7, r4
 8014c32:	3201      	adds	r2, #1
 8014c34:	701a      	strb	r2, [r3, #0]
 8014c36:	232f      	movs	r3, #47	; 0x2f
 8014c38:	18fb      	adds	r3, r7, r3
 8014c3a:	781b      	ldrb	r3, [r3, #0]
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	1dba      	adds	r2, r7, #6
 8014c40:	8812      	ldrh	r2, [r2, #0]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d8d7      	bhi.n	8014bf6 <FOptsEncrypt+0x136>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014c46:	2300      	movs	r3, #0
}
 8014c48:	0018      	movs	r0, r3
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	b00d      	add	sp, #52	; 0x34
 8014c4e:	bd90      	pop	{r4, r7, pc}
 8014c50:	20001310 	.word	0x20001310
 8014c54:	01010000 	.word	0x01010000

08014c58 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014c58:	b5b0      	push	{r4, r5, r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	0005      	movs	r5, r0
 8014c60:	000c      	movs	r4, r1
 8014c62:	0010      	movs	r0, r2
 8014c64:	0019      	movs	r1, r3
 8014c66:	1dbb      	adds	r3, r7, #6
 8014c68:	1c2a      	adds	r2, r5, #0
 8014c6a:	801a      	strh	r2, [r3, #0]
 8014c6c:	1d7b      	adds	r3, r7, #5
 8014c6e:	1c22      	adds	r2, r4, #0
 8014c70:	701a      	strb	r2, [r3, #0]
 8014c72:	1d3b      	adds	r3, r7, #4
 8014c74:	1c02      	adds	r2, r0, #0
 8014c76:	701a      	strb	r2, [r3, #0]
 8014c78:	1cfb      	adds	r3, r7, #3
 8014c7a:	1c0a      	adds	r2, r1, #0
 8014c7c:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8014c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d101      	bne.n	8014c88 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c84:	230a      	movs	r3, #10
 8014c86:	e070      	b.n	8014d6a <PrepareB0+0x112>
    }

    b0[0] = 0x49;
 8014c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c8a:	2249      	movs	r2, #73	; 0x49
 8014c8c:	701a      	strb	r2, [r3, #0]
/* ST_WORAROUND_BEGIN: These bytes are only used for the LRWAN 1.1.x */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8014c8e:	1d3b      	adds	r3, r7, #4
 8014c90:	781b      	ldrb	r3, [r3, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d01b      	beq.n	8014cce <PrepareB0+0x76>
 8014c96:	1cfb      	adds	r3, r7, #3
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d117      	bne.n	8014cce <PrepareB0+0x76>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 8014c9e:	210e      	movs	r1, #14
 8014ca0:	187b      	adds	r3, r7, r1
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	801a      	strh	r2, [r3, #0]

        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 8014ca6:	4b33      	ldr	r3, [pc, #204]	; (8014d74 <PrepareB0+0x11c>)
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	68da      	ldr	r2, [r3, #12]
 8014cac:	187b      	adds	r3, r7, r1
 8014cae:	801a      	strh	r2, [r3, #0]

        b0[1] = confFCnt & 0xFF;
 8014cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	187a      	adds	r2, r7, r1
 8014cb6:	8812      	ldrh	r2, [r2, #0]
 8014cb8:	b2d2      	uxtb	r2, r2
 8014cba:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8014cbc:	187b      	adds	r3, r7, r1
 8014cbe:	881b      	ldrh	r3, [r3, #0]
 8014cc0:	0a1b      	lsrs	r3, r3, #8
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc6:	3302      	adds	r3, #2
 8014cc8:	b2d2      	uxtb	r2, r2
 8014cca:	701a      	strb	r2, [r3, #0]
    {
 8014ccc:	e007      	b.n	8014cde <PrepareB0+0x86>
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd8:	3302      	adds	r3, #2
 8014cda:	2200      	movs	r2, #0
 8014cdc:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ce0:	3303      	adds	r3, #3
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ce8:	3304      	adds	r3, #4
 8014cea:	2200      	movs	r2, #0
 8014cec:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf0:	3305      	adds	r3, #5
 8014cf2:	1cfa      	adds	r2, r7, #3
 8014cf4:	7812      	ldrb	r2, [r2, #0]
 8014cf6:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cfa:	3306      	adds	r3, #6
 8014cfc:	6a3a      	ldr	r2, [r7, #32]
 8014cfe:	b2d2      	uxtb	r2, r2
 8014d00:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014d02:	6a3b      	ldr	r3, [r7, #32]
 8014d04:	0a1a      	lsrs	r2, r3, #8
 8014d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d08:	3307      	adds	r3, #7
 8014d0a:	b2d2      	uxtb	r2, r2
 8014d0c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014d0e:	6a3b      	ldr	r3, [r7, #32]
 8014d10:	0c1a      	lsrs	r2, r3, #16
 8014d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d14:	3308      	adds	r3, #8
 8014d16:	b2d2      	uxtb	r2, r2
 8014d18:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014d1a:	6a3b      	ldr	r3, [r7, #32]
 8014d1c:	0e1a      	lsrs	r2, r3, #24
 8014d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d20:	3309      	adds	r3, #9
 8014d22:	b2d2      	uxtb	r2, r2
 8014d24:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d28:	330a      	adds	r3, #10
 8014d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d2c:	b2d2      	uxtb	r2, r2
 8014d2e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d32:	0a1a      	lsrs	r2, r3, #8
 8014d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d36:	330b      	adds	r3, #11
 8014d38:	b2d2      	uxtb	r2, r2
 8014d3a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3e:	0c1a      	lsrs	r2, r3, #16
 8014d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d42:	330c      	adds	r3, #12
 8014d44:	b2d2      	uxtb	r2, r2
 8014d46:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4a:	0e1a      	lsrs	r2, r3, #24
 8014d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d4e:	330d      	adds	r3, #13
 8014d50:	b2d2      	uxtb	r2, r2
 8014d52:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d56:	330e      	adds	r3, #14
 8014d58:	2200      	movs	r2, #0
 8014d5a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d5e:	330f      	adds	r3, #15
 8014d60:	1dba      	adds	r2, r7, #6
 8014d62:	8812      	ldrh	r2, [r2, #0]
 8014d64:	b2d2      	uxtb	r2, r2
 8014d66:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014d68:	2300      	movs	r3, #0
}
 8014d6a:	0018      	movs	r0, r3
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	b004      	add	sp, #16
 8014d70:	bdb0      	pop	{r4, r5, r7, pc}
 8014d72:	46c0      	nop			; (mov r8, r8)
 8014d74:	20001310 	.word	0x20001310

08014d78 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014d78:	b5b0      	push	{r4, r5, r7, lr}
 8014d7a:	b08a      	sub	sp, #40	; 0x28
 8014d7c:	af04      	add	r7, sp, #16
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	000c      	movs	r4, r1
 8014d82:	0010      	movs	r0, r2
 8014d84:	0019      	movs	r1, r3
 8014d86:	1cbb      	adds	r3, r7, #2
 8014d88:	1c22      	adds	r2, r4, #0
 8014d8a:	801a      	strh	r2, [r3, #0]
 8014d8c:	1c7b      	adds	r3, r7, #1
 8014d8e:	1c02      	adds	r2, r0, #0
 8014d90:	701a      	strb	r2, [r3, #0]
 8014d92:	003b      	movs	r3, r7
 8014d94:	1c0a      	adds	r2, r1, #0
 8014d96:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d002      	beq.n	8014da4 <ComputeCmacB0+0x2c>
 8014d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d101      	bne.n	8014da8 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014da4:	230a      	movs	r3, #10
 8014da6:	e02a      	b.n	8014dfe <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014da8:	1cbb      	adds	r3, r7, #2
 8014daa:	881a      	ldrh	r2, [r3, #0]
 8014dac:	2380      	movs	r3, #128	; 0x80
 8014dae:	005b      	lsls	r3, r3, #1
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d901      	bls.n	8014db8 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014db4:	230e      	movs	r3, #14
 8014db6:	e022      	b.n	8014dfe <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014db8:	2328      	movs	r3, #40	; 0x28
 8014dba:	18fb      	adds	r3, r7, r3
 8014dbc:	781c      	ldrb	r4, [r3, #0]
 8014dbe:	003b      	movs	r3, r7
 8014dc0:	781a      	ldrb	r2, [r3, #0]
 8014dc2:	1c7b      	adds	r3, r7, #1
 8014dc4:	7819      	ldrb	r1, [r3, #0]
 8014dc6:	1cbb      	adds	r3, r7, #2
 8014dc8:	8818      	ldrh	r0, [r3, #0]
 8014dca:	2508      	movs	r5, #8
 8014dcc:	197b      	adds	r3, r7, r5
 8014dce:	9302      	str	r3, [sp, #8]
 8014dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd2:	9301      	str	r3, [sp, #4]
 8014dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd6:	9300      	str	r3, [sp, #0]
 8014dd8:	0023      	movs	r3, r4
 8014dda:	f7ff ff3d 	bl	8014c58 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014dde:	1c7b      	adds	r3, r7, #1
 8014de0:	781c      	ldrb	r4, [r3, #0]
 8014de2:	1cbb      	adds	r3, r7, #2
 8014de4:	881a      	ldrh	r2, [r3, #0]
 8014de6:	6879      	ldr	r1, [r7, #4]
 8014de8:	1978      	adds	r0, r7, r5
 8014dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dec:	9300      	str	r3, [sp, #0]
 8014dee:	0023      	movs	r3, r4
 8014df0:	f7f7 ff1a 	bl	800cc28 <SecureElementComputeAesCmac>
 8014df4:	1e03      	subs	r3, r0, #0
 8014df6:	d001      	beq.n	8014dfc <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014df8:	230f      	movs	r3, #15
 8014dfa:	e000      	b.n	8014dfe <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014dfc:	2300      	movs	r3, #0
}
 8014dfe:	0018      	movs	r0, r3
 8014e00:	46bd      	mov	sp, r7
 8014e02:	b006      	add	sp, #24
 8014e04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014e08 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e0a:	b0cd      	sub	sp, #308	; 0x134
 8014e0c:	af04      	add	r7, sp, #16
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	000c      	movs	r4, r1
 8014e12:	0010      	movs	r0, r2
 8014e14:	0019      	movs	r1, r3
 8014e16:	4b46      	ldr	r3, [pc, #280]	; (8014f30 <VerifyCmacB0+0x128>)
 8014e18:	2590      	movs	r5, #144	; 0x90
 8014e1a:	006d      	lsls	r5, r5, #1
 8014e1c:	195b      	adds	r3, r3, r5
 8014e1e:	19db      	adds	r3, r3, r7
 8014e20:	1c22      	adds	r2, r4, #0
 8014e22:	801a      	strh	r2, [r3, #0]
 8014e24:	4b43      	ldr	r3, [pc, #268]	; (8014f34 <VerifyCmacB0+0x12c>)
 8014e26:	002c      	movs	r4, r5
 8014e28:	191b      	adds	r3, r3, r4
 8014e2a:	19db      	adds	r3, r3, r7
 8014e2c:	1c02      	adds	r2, r0, #0
 8014e2e:	701a      	strb	r2, [r3, #0]
 8014e30:	4b41      	ldr	r3, [pc, #260]	; (8014f38 <VerifyCmacB0+0x130>)
 8014e32:	191b      	adds	r3, r3, r4
 8014e34:	19db      	adds	r3, r3, r7
 8014e36:	1c0a      	adds	r2, r1, #0
 8014e38:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d101      	bne.n	8014e44 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e40:	230a      	movs	r3, #10
 8014e42:	e070      	b.n	8014f26 <VerifyCmacB0+0x11e>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014e44:	4b3a      	ldr	r3, [pc, #232]	; (8014f30 <VerifyCmacB0+0x128>)
 8014e46:	2290      	movs	r2, #144	; 0x90
 8014e48:	0052      	lsls	r2, r2, #1
 8014e4a:	189b      	adds	r3, r3, r2
 8014e4c:	19db      	adds	r3, r3, r7
 8014e4e:	881a      	ldrh	r2, [r3, #0]
 8014e50:	2380      	movs	r3, #128	; 0x80
 8014e52:	005b      	lsls	r3, r3, #1
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d901      	bls.n	8014e5c <VerifyCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014e58:	230e      	movs	r3, #14
 8014e5a:	e064      	b.n	8014f26 <VerifyCmacB0+0x11e>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014e5c:	2388      	movs	r3, #136	; 0x88
 8014e5e:	005a      	lsls	r2, r3, #1
 8014e60:	260c      	movs	r6, #12
 8014e62:	19bb      	adds	r3, r7, r6
 8014e64:	2100      	movs	r1, #0
 8014e66:	0018      	movs	r0, r3
 8014e68:	f004 f8ac 	bl	8018fc4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014e6c:	2398      	movs	r3, #152	; 0x98
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	2008      	movs	r0, #8
 8014e72:	181b      	adds	r3, r3, r0
 8014e74:	19db      	adds	r3, r3, r7
 8014e76:	781c      	ldrb	r4, [r3, #0]
 8014e78:	4b2f      	ldr	r3, [pc, #188]	; (8014f38 <VerifyCmacB0+0x130>)
 8014e7a:	2590      	movs	r5, #144	; 0x90
 8014e7c:	006d      	lsls	r5, r5, #1
 8014e7e:	195b      	adds	r3, r3, r5
 8014e80:	19db      	adds	r3, r3, r7
 8014e82:	781a      	ldrb	r2, [r3, #0]
 8014e84:	4b2b      	ldr	r3, [pc, #172]	; (8014f34 <VerifyCmacB0+0x12c>)
 8014e86:	195b      	adds	r3, r3, r5
 8014e88:	19db      	adds	r3, r3, r7
 8014e8a:	7819      	ldrb	r1, [r3, #0]
 8014e8c:	4b28      	ldr	r3, [pc, #160]	; (8014f30 <VerifyCmacB0+0x128>)
 8014e8e:	195b      	adds	r3, r3, r5
 8014e90:	19db      	adds	r3, r3, r7
 8014e92:	881b      	ldrh	r3, [r3, #0]
 8014e94:	469c      	mov	ip, r3
 8014e96:	19bb      	adds	r3, r7, r6
 8014e98:	9302      	str	r3, [sp, #8]
 8014e9a:	239c      	movs	r3, #156	; 0x9c
 8014e9c:	005b      	lsls	r3, r3, #1
 8014e9e:	181b      	adds	r3, r3, r0
 8014ea0:	19db      	adds	r3, r3, r7
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	9301      	str	r3, [sp, #4]
 8014ea6:	239a      	movs	r3, #154	; 0x9a
 8014ea8:	005b      	lsls	r3, r3, #1
 8014eaa:	181b      	adds	r3, r3, r0
 8014eac:	19db      	adds	r3, r3, r7
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	0023      	movs	r3, r4
 8014eb4:	4660      	mov	r0, ip
 8014eb6:	f7ff fecf 	bl	8014c58 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014eba:	19bb      	adds	r3, r7, r6
 8014ebc:	3310      	adds	r3, #16
 8014ebe:	4a1c      	ldr	r2, [pc, #112]	; (8014f30 <VerifyCmacB0+0x128>)
 8014ec0:	1952      	adds	r2, r2, r5
 8014ec2:	19d2      	adds	r2, r2, r7
 8014ec4:	8812      	ldrh	r2, [r2, #0]
 8014ec6:	6879      	ldr	r1, [r7, #4]
 8014ec8:	0018      	movs	r0, r3
 8014eca:	f004 f83d 	bl	8018f48 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014ece:	2020      	movs	r0, #32
 8014ed0:	30ff      	adds	r0, #255	; 0xff
 8014ed2:	183b      	adds	r3, r7, r0
 8014ed4:	2206      	movs	r2, #6
 8014ed6:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014ed8:	4b15      	ldr	r3, [pc, #84]	; (8014f30 <VerifyCmacB0+0x128>)
 8014eda:	195b      	adds	r3, r3, r5
 8014edc:	19db      	adds	r3, r3, r7
 8014ede:	881b      	ldrh	r3, [r3, #0]
 8014ee0:	3310      	adds	r3, #16
 8014ee2:	b299      	uxth	r1, r3
 8014ee4:	183c      	adds	r4, r7, r0
 8014ee6:	4b13      	ldr	r3, [pc, #76]	; (8014f34 <VerifyCmacB0+0x12c>)
 8014ee8:	195b      	adds	r3, r3, r5
 8014eea:	19db      	adds	r3, r3, r7
 8014eec:	781b      	ldrb	r3, [r3, #0]
 8014eee:	229e      	movs	r2, #158	; 0x9e
 8014ef0:	0052      	lsls	r2, r2, #1
 8014ef2:	2008      	movs	r0, #8
 8014ef4:	1812      	adds	r2, r2, r0
 8014ef6:	19d2      	adds	r2, r2, r7
 8014ef8:	6812      	ldr	r2, [r2, #0]
 8014efa:	19b8      	adds	r0, r7, r6
 8014efc:	f7f7 feb5 	bl	800cc6a <SecureElementVerifyAesCmac>
 8014f00:	0003      	movs	r3, r0
 8014f02:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014f04:	2020      	movs	r0, #32
 8014f06:	30ff      	adds	r0, #255	; 0xff
 8014f08:	183b      	adds	r3, r7, r0
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d101      	bne.n	8014f14 <VerifyCmacB0+0x10c>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014f10:	2300      	movs	r3, #0
 8014f12:	e008      	b.n	8014f26 <VerifyCmacB0+0x11e>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014f14:	2320      	movs	r3, #32
 8014f16:	33ff      	adds	r3, #255	; 0xff
 8014f18:	18fb      	adds	r3, r7, r3
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	2b01      	cmp	r3, #1
 8014f1e:	d101      	bne.n	8014f24 <VerifyCmacB0+0x11c>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014f20:	2301      	movs	r3, #1
 8014f22:	e000      	b.n	8014f26 <VerifyCmacB0+0x11e>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014f24:	230f      	movs	r3, #15
}
 8014f26:	0018      	movs	r0, r3
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	b049      	add	sp, #292	; 0x124
 8014f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f2e:	46c0      	nop			; (mov r8, r8)
 8014f30:	fffffee2 	.word	0xfffffee2
 8014f34:	fffffee1 	.word	0xfffffee1
 8014f38:	fffffee0 	.word	0xfffffee0

08014f3c <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 8014f3c:	b5b0      	push	{r4, r5, r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	0005      	movs	r5, r0
 8014f44:	000c      	movs	r4, r1
 8014f46:	0010      	movs	r0, r2
 8014f48:	0019      	movs	r1, r3
 8014f4a:	1dbb      	adds	r3, r7, #6
 8014f4c:	1c2a      	adds	r2, r5, #0
 8014f4e:	801a      	strh	r2, [r3, #0]
 8014f50:	1d7b      	adds	r3, r7, #5
 8014f52:	1c22      	adds	r2, r4, #0
 8014f54:	701a      	strb	r2, [r3, #0]
 8014f56:	1d3b      	adds	r3, r7, #4
 8014f58:	1c02      	adds	r2, r0, #0
 8014f5a:	701a      	strb	r2, [r3, #0]
 8014f5c:	1cfb      	adds	r3, r7, #3
 8014f5e:	1c0a      	adds	r2, r1, #0
 8014f60:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
 8014f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d101      	bne.n	8014f6c <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f68:	230a      	movs	r3, #10
 8014f6a:	e06c      	b.n	8015046 <PrepareB1+0x10a>
    }

    b1[0] = 0x49;
 8014f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f6e:	2249      	movs	r2, #73	; 0x49
 8014f70:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 8014f72:	1d3b      	adds	r3, r7, #4
 8014f74:	781b      	ldrb	r3, [r3, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d015      	beq.n	8014fa6 <PrepareB1+0x6a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 8014f7a:	4b35      	ldr	r3, [pc, #212]	; (8015050 <PrepareB1+0x114>)
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f80:	681a      	ldr	r2, [r3, #0]
 8014f82:	210e      	movs	r1, #14
 8014f84:	187b      	adds	r3, r7, r1
 8014f86:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 8014f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	187a      	adds	r2, r7, r1
 8014f8e:	8812      	ldrh	r2, [r2, #0]
 8014f90:	b2d2      	uxtb	r2, r2
 8014f92:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 8014f94:	187b      	adds	r3, r7, r1
 8014f96:	881b      	ldrh	r3, [r3, #0]
 8014f98:	0a1b      	lsrs	r3, r3, #8
 8014f9a:	b29a      	uxth	r2, r3
 8014f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f9e:	3302      	adds	r3, #2
 8014fa0:	b2d2      	uxtb	r2, r2
 8014fa2:	701a      	strb	r2, [r3, #0]
 8014fa4:	e007      	b.n	8014fb6 <PrepareB1+0x7a>
    }
    else
    {
        b1[1] = 0x00;
 8014fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa8:	3301      	adds	r3, #1
 8014faa:	2200      	movs	r2, #0
 8014fac:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
 8014fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb0:	3302      	adds	r3, #2
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
 8014fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb8:	3303      	adds	r3, #3
 8014fba:	1cfa      	adds	r2, r7, #3
 8014fbc:	7812      	ldrb	r2, [r2, #0]
 8014fbe:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
 8014fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc2:	1d1a      	adds	r2, r3, #4
 8014fc4:	2320      	movs	r3, #32
 8014fc6:	18fb      	adds	r3, r7, r3
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	7013      	strb	r3, [r2, #0]
    b1[5] = UPLINK;  // dir = Uplink
 8014fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fce:	3305      	adds	r3, #5
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
 8014fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd6:	3306      	adds	r3, #6
 8014fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fda:	b2d2      	uxtb	r2, r2
 8014fdc:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 8014fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe0:	0a1a      	lsrs	r2, r3, #8
 8014fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe4:	3307      	adds	r3, #7
 8014fe6:	b2d2      	uxtb	r2, r2
 8014fe8:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 8014fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fec:	0c1a      	lsrs	r2, r3, #16
 8014fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff0:	3308      	adds	r3, #8
 8014ff2:	b2d2      	uxtb	r2, r2
 8014ff4:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 8014ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff8:	0e1a      	lsrs	r2, r3, #24
 8014ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffc:	3309      	adds	r3, #9
 8014ffe:	b2d2      	uxtb	r2, r2
 8015000:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
 8015002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015004:	330a      	adds	r3, #10
 8015006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015008:	b2d2      	uxtb	r2, r2
 801500a:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 801500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801500e:	0a1a      	lsrs	r2, r3, #8
 8015010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015012:	330b      	adds	r3, #11
 8015014:	b2d2      	uxtb	r2, r2
 8015016:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 8015018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801501a:	0c1a      	lsrs	r2, r3, #16
 801501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801501e:	330c      	adds	r3, #12
 8015020:	b2d2      	uxtb	r2, r2
 8015022:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 8015024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015026:	0e1a      	lsrs	r2, r3, #24
 8015028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502a:	330d      	adds	r3, #13
 801502c:	b2d2      	uxtb	r2, r2
 801502e:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
 8015030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015032:	330e      	adds	r3, #14
 8015034:	2200      	movs	r2, #0
 8015036:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
 8015038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801503a:	330f      	adds	r3, #15
 801503c:	1dba      	adds	r2, r7, #6
 801503e:	8812      	ldrh	r2, [r2, #0]
 8015040:	b2d2      	uxtb	r2, r2
 8015042:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015044:	2300      	movs	r3, #0
}
 8015046:	0018      	movs	r0, r3
 8015048:	46bd      	mov	sp, r7
 801504a:	b004      	add	sp, #16
 801504c:	bdb0      	pop	{r4, r5, r7, pc}
 801504e:	46c0      	nop			; (mov r8, r8)
 8015050:	20001310 	.word	0x20001310

08015054 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
 8015054:	b5b0      	push	{r4, r5, r7, lr}
 8015056:	b08a      	sub	sp, #40	; 0x28
 8015058:	af04      	add	r7, sp, #16
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	000c      	movs	r4, r1
 801505e:	0010      	movs	r0, r2
 8015060:	0019      	movs	r1, r3
 8015062:	1cbb      	adds	r3, r7, #2
 8015064:	1c22      	adds	r2, r4, #0
 8015066:	801a      	strh	r2, [r3, #0]
 8015068:	1c7b      	adds	r3, r7, #1
 801506a:	1c02      	adds	r2, r0, #0
 801506c:	701a      	strb	r2, [r3, #0]
 801506e:	003b      	movs	r3, r7
 8015070:	1c0a      	adds	r2, r1, #0
 8015072:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d002      	beq.n	8015080 <ComputeCmacB1+0x2c>
 801507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801507c:	2b00      	cmp	r3, #0
 801507e:	d101      	bne.n	8015084 <ComputeCmacB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015080:	230a      	movs	r3, #10
 8015082:	e02e      	b.n	80150e2 <ComputeCmacB1+0x8e>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015084:	1cbb      	adds	r3, r7, #2
 8015086:	881a      	ldrh	r2, [r3, #0]
 8015088:	2380      	movs	r3, #128	; 0x80
 801508a:	005b      	lsls	r3, r3, #1
 801508c:	429a      	cmp	r2, r3
 801508e:	d901      	bls.n	8015094 <ComputeCmacB1+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015090:	230e      	movs	r3, #14
 8015092:	e026      	b.n	80150e2 <ComputeCmacB1+0x8e>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 8015094:	2328      	movs	r3, #40	; 0x28
 8015096:	18fb      	adds	r3, r7, r3
 8015098:	781c      	ldrb	r4, [r3, #0]
 801509a:	003b      	movs	r3, r7
 801509c:	781a      	ldrb	r2, [r3, #0]
 801509e:	1c7b      	adds	r3, r7, #1
 80150a0:	7819      	ldrb	r1, [r3, #0]
 80150a2:	1cbb      	adds	r3, r7, #2
 80150a4:	8818      	ldrh	r0, [r3, #0]
 80150a6:	2508      	movs	r5, #8
 80150a8:	197b      	adds	r3, r7, r5
 80150aa:	9303      	str	r3, [sp, #12]
 80150ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ae:	9302      	str	r3, [sp, #8]
 80150b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b2:	9301      	str	r3, [sp, #4]
 80150b4:	232c      	movs	r3, #44	; 0x2c
 80150b6:	18fb      	adds	r3, r7, r3
 80150b8:	781b      	ldrb	r3, [r3, #0]
 80150ba:	9300      	str	r3, [sp, #0]
 80150bc:	0023      	movs	r3, r4
 80150be:	f7ff ff3d 	bl	8014f3c <PrepareB1>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80150c2:	1c7b      	adds	r3, r7, #1
 80150c4:	781c      	ldrb	r4, [r3, #0]
 80150c6:	1cbb      	adds	r3, r7, #2
 80150c8:	881a      	ldrh	r2, [r3, #0]
 80150ca:	6879      	ldr	r1, [r7, #4]
 80150cc:	1978      	adds	r0, r7, r5
 80150ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d0:	9300      	str	r3, [sp, #0]
 80150d2:	0023      	movs	r3, r4
 80150d4:	f7f7 fda8 	bl	800cc28 <SecureElementComputeAesCmac>
 80150d8:	1e03      	subs	r3, r0, #0
 80150da:	d001      	beq.n	80150e0 <ComputeCmacB1+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80150dc:	230f      	movs	r3, #15
 80150de:	e000      	b.n	80150e2 <ComputeCmacB1+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80150e0:	2300      	movs	r3, #0
}
 80150e2:	0018      	movs	r0, r3
 80150e4:	46bd      	mov	sp, r7
 80150e6:	b006      	add	sp, #24
 80150e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080150ec <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	0002      	movs	r2, r0
 80150f4:	6039      	str	r1, [r7, #0]
 80150f6:	1dfb      	adds	r3, r7, #7
 80150f8:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80150fa:	230f      	movs	r3, #15
 80150fc:	18fb      	adds	r3, r7, r3
 80150fe:	2200      	movs	r2, #0
 8015100:	701a      	strb	r2, [r3, #0]
 8015102:	e018      	b.n	8015136 <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015104:	210f      	movs	r1, #15
 8015106:	187b      	adds	r3, r7, r1
 8015108:	781a      	ldrb	r2, [r3, #0]
 801510a:	4b10      	ldr	r3, [pc, #64]	; (801514c <GetKeyAddrItem+0x60>)
 801510c:	0092      	lsls	r2, r2, #2
 801510e:	5cd3      	ldrb	r3, [r2, r3]
 8015110:	1dfa      	adds	r2, r7, #7
 8015112:	7812      	ldrb	r2, [r2, #0]
 8015114:	429a      	cmp	r2, r3
 8015116:	d108      	bne.n	801512a <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8015118:	187b      	adds	r3, r7, r1
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	009a      	lsls	r2, r3, #2
 801511e:	4b0b      	ldr	r3, [pc, #44]	; (801514c <GetKeyAddrItem+0x60>)
 8015120:	18d2      	adds	r2, r2, r3
 8015122:	683b      	ldr	r3, [r7, #0]
 8015124:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015126:	2300      	movs	r3, #0
 8015128:	e00b      	b.n	8015142 <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801512a:	210f      	movs	r1, #15
 801512c:	187b      	adds	r3, r7, r1
 801512e:	781a      	ldrb	r2, [r3, #0]
 8015130:	187b      	adds	r3, r7, r1
 8015132:	3201      	adds	r2, #1
 8015134:	701a      	strb	r2, [r3, #0]
 8015136:	230f      	movs	r3, #15
 8015138:	18fb      	adds	r3, r7, r3
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	2b01      	cmp	r3, #1
 801513e:	d9e1      	bls.n	8015104 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015140:	230c      	movs	r3, #12
}
 8015142:	0018      	movs	r0, r3
 8015144:	46bd      	mov	sp, r7
 8015146:	b004      	add	sp, #16
 8015148:	bd80      	pop	{r7, pc}
 801514a:	46c0      	nop			; (mov r8, r8)
 801514c:	200001e8 	.word	0x200001e8

08015150 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
 8015150:	b5b0      	push	{r4, r5, r7, lr}
 8015152:	b08a      	sub	sp, #40	; 0x28
 8015154:	af00      	add	r7, sp, #0
 8015156:	60b9      	str	r1, [r7, #8]
 8015158:	607a      	str	r2, [r7, #4]
 801515a:	603b      	str	r3, [r7, #0]
 801515c:	230f      	movs	r3, #15
 801515e:	18fb      	adds	r3, r7, r3
 8015160:	1c02      	adds	r2, r0, #0
 8015162:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d005      	beq.n	8015176 <DeriveSessionKey11x+0x26>
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d002      	beq.n	8015176 <DeriveSessionKey11x+0x26>
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d101      	bne.n	801517a <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015176:	230a      	movs	r3, #10
 8015178:	e05d      	b.n	8015236 <DeriveSessionKey11x+0xe6>
    }

    uint8_t compBase[16] = { 0 };
 801517a:	2314      	movs	r3, #20
 801517c:	18fb      	adds	r3, r7, r3
 801517e:	2200      	movs	r2, #0
 8015180:	601a      	str	r2, [r3, #0]
 8015182:	3304      	adds	r3, #4
 8015184:	220c      	movs	r2, #12
 8015186:	2100      	movs	r1, #0
 8015188:	0018      	movs	r0, r3
 801518a:	f008 fba8 	bl	801d8de <memset>
    KeyIdentifier_t rootKeyId = NWK_KEY;
 801518e:	2327      	movs	r3, #39	; 0x27
 8015190:	18fb      	adds	r3, r7, r3
 8015192:	2201      	movs	r2, #1
 8015194:	701a      	strb	r2, [r3, #0]

    switch( keyID )
 8015196:	230f      	movs	r3, #15
 8015198:	18fb      	adds	r3, r7, r3
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	2b08      	cmp	r3, #8
 801519e:	d017      	beq.n	80151d0 <DeriveSessionKey11x+0x80>
 80151a0:	dc1f      	bgt.n	80151e2 <DeriveSessionKey11x+0x92>
 80151a2:	2b06      	cmp	r3, #6
 80151a4:	d00f      	beq.n	80151c6 <DeriveSessionKey11x+0x76>
 80151a6:	dc1c      	bgt.n	80151e2 <DeriveSessionKey11x+0x92>
 80151a8:	2b04      	cmp	r3, #4
 80151aa:	d002      	beq.n	80151b2 <DeriveSessionKey11x+0x62>
 80151ac:	2b05      	cmp	r3, #5
 80151ae:	d005      	beq.n	80151bc <DeriveSessionKey11x+0x6c>
 80151b0:	e017      	b.n	80151e2 <DeriveSessionKey11x+0x92>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
 80151b2:	2314      	movs	r3, #20
 80151b4:	18fb      	adds	r3, r7, r3
 80151b6:	2201      	movs	r2, #1
 80151b8:	701a      	strb	r2, [r3, #0]
            break;
 80151ba:	e014      	b.n	80151e6 <DeriveSessionKey11x+0x96>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
 80151bc:	2314      	movs	r3, #20
 80151be:	18fb      	adds	r3, r7, r3
 80151c0:	2203      	movs	r2, #3
 80151c2:	701a      	strb	r2, [r3, #0]
            break;
 80151c4:	e00f      	b.n	80151e6 <DeriveSessionKey11x+0x96>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
 80151c6:	2314      	movs	r3, #20
 80151c8:	18fb      	adds	r3, r7, r3
 80151ca:	2204      	movs	r2, #4
 80151cc:	701a      	strb	r2, [r3, #0]
            break;
 80151ce:	e00a      	b.n	80151e6 <DeriveSessionKey11x+0x96>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
 80151d0:	2327      	movs	r3, #39	; 0x27
 80151d2:	18fb      	adds	r3, r7, r3
 80151d4:	2200      	movs	r2, #0
 80151d6:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
 80151d8:	2314      	movs	r3, #20
 80151da:	18fb      	adds	r3, r7, r3
 80151dc:	2202      	movs	r2, #2
 80151de:	701a      	strb	r2, [r3, #0]
            break;
 80151e0:	e001      	b.n	80151e6 <DeriveSessionKey11x+0x96>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80151e2:	230b      	movs	r3, #11
 80151e4:	e027      	b.n	8015236 <DeriveSessionKey11x+0xe6>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80151e6:	2514      	movs	r5, #20
 80151e8:	197b      	adds	r3, r7, r5
 80151ea:	3301      	adds	r3, #1
 80151ec:	68b9      	ldr	r1, [r7, #8]
 80151ee:	2203      	movs	r2, #3
 80151f0:	0018      	movs	r0, r3
 80151f2:	f003 fea9 	bl	8018f48 <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 80151f6:	197b      	adds	r3, r7, r5
 80151f8:	3304      	adds	r3, #4
 80151fa:	6879      	ldr	r1, [r7, #4]
 80151fc:	2208      	movs	r2, #8
 80151fe:	0018      	movs	r0, r3
 8015200:	f003 febe 	bl	8018f80 <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 8015204:	197b      	adds	r3, r7, r5
 8015206:	330c      	adds	r3, #12
 8015208:	6839      	ldr	r1, [r7, #0]
 801520a:	2202      	movs	r2, #2
 801520c:	0018      	movs	r0, r3
 801520e:	f003 fe9b 	bl	8018f48 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015212:	4b0b      	ldr	r3, [pc, #44]	; (8015240 <DeriveSessionKey11x+0xf0>)
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	220f      	movs	r2, #15
 8015218:	18ba      	adds	r2, r7, r2
 801521a:	7814      	ldrb	r4, [r2, #0]
 801521c:	2227      	movs	r2, #39	; 0x27
 801521e:	18ba      	adds	r2, r7, r2
 8015220:	7812      	ldrb	r2, [r2, #0]
 8015222:	1979      	adds	r1, r7, r5
 8015224:	6818      	ldr	r0, [r3, #0]
 8015226:	0023      	movs	r3, r4
 8015228:	f7f7 fdd2 	bl	800cdd0 <SecureElementDeriveAndStoreKey>
 801522c:	1e03      	subs	r3, r0, #0
 801522e:	d001      	beq.n	8015234 <DeriveSessionKey11x+0xe4>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015230:	230f      	movs	r3, #15
 8015232:	e000      	b.n	8015236 <DeriveSessionKey11x+0xe6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015234:	2300      	movs	r3, #0
}
 8015236:	0018      	movs	r0, r3
 8015238:	46bd      	mov	sp, r7
 801523a:	b00a      	add	sp, #40	; 0x28
 801523c:	bdb0      	pop	{r4, r5, r7, pc}
 801523e:	46c0      	nop			; (mov r8, r8)
 8015240:	20001310 	.word	0x20001310

08015244 <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
 8015244:	b590      	push	{r4, r7, lr}
 8015246:	b087      	sub	sp, #28
 8015248:	af00      	add	r7, sp, #0
 801524a:	0002      	movs	r2, r0
 801524c:	6039      	str	r1, [r7, #0]
 801524e:	1dfb      	adds	r3, r7, #7
 8015250:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
 8015252:	683b      	ldr	r3, [r7, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d101      	bne.n	801525c <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015258:	230a      	movs	r3, #10
 801525a:	e033      	b.n	80152c4 <DeriveLifeTimeSessionKey+0x80>
    }

    uint8_t compBase[16] = { 0 };
 801525c:	2308      	movs	r3, #8
 801525e:	18fb      	adds	r3, r7, r3
 8015260:	2200      	movs	r2, #0
 8015262:	601a      	str	r2, [r3, #0]
 8015264:	3304      	adds	r3, #4
 8015266:	220c      	movs	r2, #12
 8015268:	2100      	movs	r1, #0
 801526a:	0018      	movs	r0, r3
 801526c:	f008 fb37 	bl	801d8de <memset>

    switch( keyID )
 8015270:	1dfb      	adds	r3, r7, #7
 8015272:	781b      	ldrb	r3, [r3, #0]
 8015274:	2b02      	cmp	r3, #2
 8015276:	d002      	beq.n	801527e <DeriveLifeTimeSessionKey+0x3a>
 8015278:	2b03      	cmp	r3, #3
 801527a:	d005      	beq.n	8015288 <DeriveLifeTimeSessionKey+0x44>
 801527c:	e009      	b.n	8015292 <DeriveLifeTimeSessionKey+0x4e>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
 801527e:	2308      	movs	r3, #8
 8015280:	18fb      	adds	r3, r7, r3
 8015282:	2206      	movs	r2, #6
 8015284:	701a      	strb	r2, [r3, #0]
            break;
 8015286:	e006      	b.n	8015296 <DeriveLifeTimeSessionKey+0x52>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
 8015288:	2308      	movs	r3, #8
 801528a:	18fb      	adds	r3, r7, r3
 801528c:	2205      	movs	r2, #5
 801528e:	701a      	strb	r2, [r3, #0]
            break;
 8015290:	e001      	b.n	8015296 <DeriveLifeTimeSessionKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015292:	230b      	movs	r3, #11
 8015294:	e016      	b.n	80152c4 <DeriveLifeTimeSessionKey+0x80>
    }

    memcpyr( compBase + 1, devEUI, 8 );
 8015296:	2408      	movs	r4, #8
 8015298:	193b      	adds	r3, r7, r4
 801529a:	3301      	adds	r3, #1
 801529c:	6839      	ldr	r1, [r7, #0]
 801529e:	2208      	movs	r2, #8
 80152a0:	0018      	movs	r0, r3
 80152a2:	f003 fe6d 	bl	8018f80 <memcpyr>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80152a6:	4b09      	ldr	r3, [pc, #36]	; (80152cc <DeriveLifeTimeSessionKey+0x88>)
 80152a8:	685b      	ldr	r3, [r3, #4]
 80152aa:	1dfa      	adds	r2, r7, #7
 80152ac:	7812      	ldrb	r2, [r2, #0]
 80152ae:	1939      	adds	r1, r7, r4
 80152b0:	6818      	ldr	r0, [r3, #0]
 80152b2:	0013      	movs	r3, r2
 80152b4:	2201      	movs	r2, #1
 80152b6:	f7f7 fd8b 	bl	800cdd0 <SecureElementDeriveAndStoreKey>
 80152ba:	1e03      	subs	r3, r0, #0
 80152bc:	d001      	beq.n	80152c2 <DeriveLifeTimeSessionKey+0x7e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80152be:	230f      	movs	r3, #15
 80152c0:	e000      	b.n	80152c4 <DeriveLifeTimeSessionKey+0x80>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80152c2:	2300      	movs	r3, #0
}
 80152c4:	0018      	movs	r0, r3
 80152c6:	46bd      	mov	sp, r7
 80152c8:	b007      	add	sp, #28
 80152ca:	bd90      	pop	{r4, r7, pc}
 80152cc:	20001310 	.word	0x20001310

080152d0 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	0002      	movs	r2, r0
 80152d8:	6039      	str	r1, [r7, #0]
 80152da:	1dfb      	adds	r3, r7, #7
 80152dc:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d101      	bne.n	80152e8 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152e4:	230a      	movs	r3, #10
 80152e6:	e039      	b.n	801535c <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 80152e8:	1dfb      	adds	r3, r7, #7
 80152ea:	781b      	ldrb	r3, [r3, #0]
 80152ec:	2b04      	cmp	r3, #4
 80152ee:	d02c      	beq.n	801534a <GetLastFcntDown+0x7a>
 80152f0:	dc31      	bgt.n	8015356 <GetLastFcntDown+0x86>
 80152f2:	2b03      	cmp	r3, #3
 80152f4:	d01d      	beq.n	8015332 <GetLastFcntDown+0x62>
 80152f6:	dc2e      	bgt.n	8015356 <GetLastFcntDown+0x86>
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d002      	beq.n	8015302 <GetLastFcntDown+0x32>
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	d00c      	beq.n	801531a <GetLastFcntDown+0x4a>
 8015300:	e029      	b.n	8015356 <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015302:	4b18      	ldr	r3, [pc, #96]	; (8015364 <GetLastFcntDown+0x94>)
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	691a      	ldr	r2, [r3, #16]
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 801530c:	4b15      	ldr	r3, [pc, #84]	; (8015364 <GetLastFcntDown+0x94>)
 801530e:	685a      	ldr	r2, [r3, #4]
 8015310:	4b14      	ldr	r3, [pc, #80]	; (8015364 <GetLastFcntDown+0x94>)
 8015312:	685b      	ldr	r3, [r3, #4]
 8015314:	3210      	adds	r2, #16
 8015316:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8015318:	e01f      	b.n	801535a <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 801531a:	4b12      	ldr	r3, [pc, #72]	; (8015364 <GetLastFcntDown+0x94>)
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	695a      	ldr	r2, [r3, #20]
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015324:	4b0f      	ldr	r3, [pc, #60]	; (8015364 <GetLastFcntDown+0x94>)
 8015326:	685a      	ldr	r2, [r3, #4]
 8015328:	4b0e      	ldr	r3, [pc, #56]	; (8015364 <GetLastFcntDown+0x94>)
 801532a:	685b      	ldr	r3, [r3, #4]
 801532c:	3214      	adds	r2, #20
 801532e:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8015330:	e013      	b.n	801535a <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015332:	4b0c      	ldr	r3, [pc, #48]	; (8015364 <GetLastFcntDown+0x94>)
 8015334:	685b      	ldr	r3, [r3, #4]
 8015336:	699a      	ldr	r2, [r3, #24]
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 801533c:	4b09      	ldr	r3, [pc, #36]	; (8015364 <GetLastFcntDown+0x94>)
 801533e:	685a      	ldr	r2, [r3, #4]
 8015340:	4b08      	ldr	r3, [pc, #32]	; (8015364 <GetLastFcntDown+0x94>)
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	3218      	adds	r2, #24
 8015346:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8015348:	e007      	b.n	801535a <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 801534a:	4b06      	ldr	r3, [pc, #24]	; (8015364 <GetLastFcntDown+0x94>)
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	69da      	ldr	r2, [r3, #28]
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	601a      	str	r2, [r3, #0]
            break;
 8015354:	e001      	b.n	801535a <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015356:	2305      	movs	r3, #5
 8015358:	e000      	b.n	801535c <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801535a:	2300      	movs	r3, #0
}
 801535c:	0018      	movs	r0, r3
 801535e:	46bd      	mov	sp, r7
 8015360:	b002      	add	sp, #8
 8015362:	bd80      	pop	{r7, pc}
 8015364:	20001310 	.word	0x20001310

08015368 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	0002      	movs	r2, r0
 8015370:	6039      	str	r1, [r7, #0]
 8015372:	1dfb      	adds	r3, r7, #7
 8015374:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015376:	2300      	movs	r3, #0
 8015378:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801537a:	230c      	movs	r3, #12
 801537c:	18fa      	adds	r2, r7, r3
 801537e:	1dfb      	adds	r3, r7, #7
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	0011      	movs	r1, r2
 8015384:	0018      	movs	r0, r3
 8015386:	f7ff ffa3 	bl	80152d0 <GetLastFcntDown>
 801538a:	1e03      	subs	r3, r0, #0
 801538c:	d001      	beq.n	8015392 <CheckFCntDown+0x2a>
    {
        return false;
 801538e:	2300      	movs	r3, #0
 8015390:	e009      	b.n	80153a6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	683a      	ldr	r2, [r7, #0]
 8015396:	429a      	cmp	r2, r3
 8015398:	d802      	bhi.n	80153a0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 801539a:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801539c:	3301      	adds	r3, #1
 801539e:	d101      	bne.n	80153a4 <CheckFCntDown+0x3c>
    {
        return true;
 80153a0:	2301      	movs	r3, #1
 80153a2:	e000      	b.n	80153a6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80153a4:	2300      	movs	r3, #0
    }
}
 80153a6:	0018      	movs	r0, r3
 80153a8:	46bd      	mov	sp, r7
 80153aa:	b004      	add	sp, #16
 80153ac:	bd80      	pop	{r7, pc}
	...

080153b0 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	0002      	movs	r2, r0
 80153b8:	6039      	str	r1, [r7, #0]
 80153ba:	1dfb      	adds	r3, r7, #7
 80153bc:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 80153be:	1dfb      	adds	r3, r7, #7
 80153c0:	781b      	ldrb	r3, [r3, #0]
 80153c2:	2b04      	cmp	r3, #4
 80153c4:	d017      	beq.n	80153f6 <UpdateFCntDown+0x46>
 80153c6:	dc1b      	bgt.n	8015400 <UpdateFCntDown+0x50>
 80153c8:	2b03      	cmp	r3, #3
 80153ca:	d00f      	beq.n	80153ec <UpdateFCntDown+0x3c>
 80153cc:	dc18      	bgt.n	8015400 <UpdateFCntDown+0x50>
 80153ce:	2b01      	cmp	r3, #1
 80153d0:	d002      	beq.n	80153d8 <UpdateFCntDown+0x28>
 80153d2:	2b02      	cmp	r3, #2
 80153d4:	d005      	beq.n	80153e2 <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 80153d6:	e013      	b.n	8015400 <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 80153d8:	4b0d      	ldr	r3, [pc, #52]	; (8015410 <UpdateFCntDown+0x60>)
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	683a      	ldr	r2, [r7, #0]
 80153de:	611a      	str	r2, [r3, #16]
            break;
 80153e0:	e00f      	b.n	8015402 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 80153e2:	4b0b      	ldr	r3, [pc, #44]	; (8015410 <UpdateFCntDown+0x60>)
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	683a      	ldr	r2, [r7, #0]
 80153e8:	615a      	str	r2, [r3, #20]
            break;
 80153ea:	e00a      	b.n	8015402 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 80153ec:	4b08      	ldr	r3, [pc, #32]	; (8015410 <UpdateFCntDown+0x60>)
 80153ee:	685b      	ldr	r3, [r3, #4]
 80153f0:	683a      	ldr	r2, [r7, #0]
 80153f2:	619a      	str	r2, [r3, #24]
            break;
 80153f4:	e005      	b.n	8015402 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 80153f6:	4b06      	ldr	r3, [pc, #24]	; (8015410 <UpdateFCntDown+0x60>)
 80153f8:	685b      	ldr	r3, [r3, #4]
 80153fa:	683a      	ldr	r2, [r7, #0]
 80153fc:	61da      	str	r2, [r3, #28]
            break;
 80153fe:	e000      	b.n	8015402 <UpdateFCntDown+0x52>
            break;
 8015400:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015402:	4b03      	ldr	r3, [pc, #12]	; (8015410 <UpdateFCntDown+0x60>)
 8015404:	689b      	ldr	r3, [r3, #8]
 8015406:	4798      	blx	r3
}
 8015408:	46c0      	nop			; (mov r8, r8)
 801540a:	46bd      	mov	sp, r7
 801540c:	b002      	add	sp, #8
 801540e:	bd80      	pop	{r7, pc}
 8015410:	20001310 	.word	0x20001310

08015414 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015414:	b580      	push	{r7, lr}
 8015416:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015418:	4b11      	ldr	r3, [pc, #68]	; (8015460 <ResetFCnts+0x4c>)
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	2200      	movs	r2, #0
 801541e:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015420:	4b0f      	ldr	r3, [pc, #60]	; (8015460 <ResetFCnts+0x4c>)
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	2201      	movs	r2, #1
 8015426:	4252      	negs	r2, r2
 8015428:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801542a:	4b0d      	ldr	r3, [pc, #52]	; (8015460 <ResetFCnts+0x4c>)
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	2201      	movs	r2, #1
 8015430:	4252      	negs	r2, r2
 8015432:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015434:	4b0a      	ldr	r3, [pc, #40]	; (8015460 <ResetFCnts+0x4c>)
 8015436:	685b      	ldr	r3, [r3, #4]
 8015438:	2201      	movs	r2, #1
 801543a:	4252      	negs	r2, r2
 801543c:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 801543e:	4b08      	ldr	r3, [pc, #32]	; (8015460 <ResetFCnts+0x4c>)
 8015440:	685a      	ldr	r2, [r3, #4]
 8015442:	4b07      	ldr	r3, [pc, #28]	; (8015460 <ResetFCnts+0x4c>)
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	3218      	adds	r2, #24
 8015448:	625a      	str	r2, [r3, #36]	; 0x24

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 801544a:	4b05      	ldr	r3, [pc, #20]	; (8015460 <ResetFCnts+0x4c>)
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	2201      	movs	r2, #1
 8015450:	4252      	negs	r2, r2
 8015452:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015454:	4b02      	ldr	r3, [pc, #8]	; (8015460 <ResetFCnts+0x4c>)
 8015456:	689b      	ldr	r3, [r3, #8]
 8015458:	4798      	blx	r3
}
 801545a:	46c0      	nop			; (mov r8, r8)
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	20001310 	.word	0x20001310

08015464 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015464:	b580      	push	{r7, lr}
 8015466:	af00      	add	r7, sp, #0
    return;
 8015468:	46c0      	nop			; (mov r8, r8)
}
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
	...

08015470 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8015478:	4b15      	ldr	r3, [pc, #84]	; (80154d0 <LoRaMacCryptoInit+0x60>)
 801547a:	4a16      	ldr	r2, [pc, #88]	; (80154d4 <LoRaMacCryptoInit+0x64>)
 801547c:	605a      	str	r2, [r3, #4]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d003      	beq.n	801548c <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8015484:	4b12      	ldr	r3, [pc, #72]	; (80154d0 <LoRaMacCryptoInit+0x60>)
 8015486:	687a      	ldr	r2, [r7, #4]
 8015488:	609a      	str	r2, [r3, #8]
 801548a:	e002      	b.n	8015492 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 801548c:	4b10      	ldr	r3, [pc, #64]	; (80154d0 <LoRaMacCryptoInit+0x60>)
 801548e:	4a12      	ldr	r2, [pc, #72]	; (80154d8 <LoRaMacCryptoInit+0x68>)
 8015490:	609a      	str	r2, [r3, #8]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8015492:	4b0f      	ldr	r3, [pc, #60]	; (80154d0 <LoRaMacCryptoInit+0x60>)
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	2228      	movs	r2, #40	; 0x28
 8015498:	2100      	movs	r1, #0
 801549a:	0018      	movs	r0, r3
 801549c:	f003 fd92 	bl	8018fc4 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 80154a0:	4b0b      	ldr	r3, [pc, #44]	; (80154d0 <LoRaMacCryptoInit+0x60>)
 80154a2:	685b      	ldr	r3, [r3, #4]
 80154a4:	2201      	movs	r2, #1
 80154a6:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80154a8:	4b09      	ldr	r3, [pc, #36]	; (80154d0 <LoRaMacCryptoInit+0x60>)
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	2201      	movs	r2, #1
 80154ae:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 80154b0:	4b07      	ldr	r3, [pc, #28]	; (80154d0 <LoRaMacCryptoInit+0x60>)
 80154b2:	685b      	ldr	r3, [r3, #4]
 80154b4:	2201      	movs	r2, #1
 80154b6:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 80154b8:	4b05      	ldr	r3, [pc, #20]	; (80154d0 <LoRaMacCryptoInit+0x60>)
 80154ba:	685b      	ldr	r3, [r3, #4]
 80154bc:	2200      	movs	r2, #0
 80154be:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80154c0:	f7ff ffa8 	bl	8015414 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80154c4:	2300      	movs	r3, #0
}
 80154c6:	0018      	movs	r0, r3
 80154c8:	46bd      	mov	sp, r7
 80154ca:	b002      	add	sp, #8
 80154cc:	bd80      	pop	{r7, pc}
 80154ce:	46c0      	nop			; (mov r8, r8)
 80154d0:	20001310 	.word	0x20001310
 80154d4:	2000131c 	.word	0x2000131c
 80154d8:	08015465 	.word	0x08015465

080154dc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b082      	sub	sp, #8
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 80154e4:	4b04      	ldr	r3, [pc, #16]	; (80154f8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80154e6:	685b      	ldr	r3, [r3, #4]
 80154e8:	687a      	ldr	r2, [r7, #4]
 80154ea:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80154ec:	2300      	movs	r3, #0
}
 80154ee:	0018      	movs	r0, r3
 80154f0:	46bd      	mov	sp, r7
 80154f2:	b002      	add	sp, #8
 80154f4:	bd80      	pop	{r7, pc}
 80154f6:	46c0      	nop			; (mov r8, r8)
 80154f8:	20001310 	.word	0x20001310

080154fc <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d007      	beq.n	801551a <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 801550a:	6879      	ldr	r1, [r7, #4]
 801550c:	4b05      	ldr	r3, [pc, #20]	; (8015524 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 801550e:	2228      	movs	r2, #40	; 0x28
 8015510:	0018      	movs	r0, r3
 8015512:	f003 fd19 	bl	8018f48 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8015516:	2300      	movs	r3, #0
 8015518:	e000      	b.n	801551c <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801551a:	230a      	movs	r3, #10
    }
}
 801551c:	0018      	movs	r0, r3
 801551e:	46bd      	mov	sp, r7
 8015520:	b002      	add	sp, #8
 8015522:	bd80      	pop	{r7, pc}
 8015524:	2000131c 	.word	0x2000131c

08015528 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2228      	movs	r2, #40	; 0x28
 8015534:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015536:	4b02      	ldr	r3, [pc, #8]	; (8015540 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015538:	0018      	movs	r0, r3
 801553a:	46bd      	mov	sp, r7
 801553c:	b002      	add	sp, #8
 801553e:	bd80      	pop	{r7, pc}
 8015540:	2000131c 	.word	0x2000131c

08015544 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b082      	sub	sp, #8
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015552:	230a      	movs	r3, #10
 8015554:	e006      	b.n	8015564 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8015556:	4b05      	ldr	r3, [pc, #20]	; (801556c <LoRaMacCryptoGetFCntUp+0x28>)
 8015558:	685b      	ldr	r3, [r3, #4]
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	1c5a      	adds	r2, r3, #1
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015562:	2300      	movs	r3, #0
}
 8015564:	0018      	movs	r0, r3
 8015566:	46bd      	mov	sp, r7
 8015568:	b002      	add	sp, #8
 801556a:	bd80      	pop	{r7, pc}
 801556c:	20001310 	.word	0x20001310

08015570 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015572:	b08d      	sub	sp, #52	; 0x34
 8015574:	af00      	add	r7, sp, #0
 8015576:	61ba      	str	r2, [r7, #24]
 8015578:	617b      	str	r3, [r7, #20]
 801557a:	230f      	movs	r3, #15
 801557c:	2610      	movs	r6, #16
 801557e:	199b      	adds	r3, r3, r6
 8015580:	19db      	adds	r3, r3, r7
 8015582:	1c02      	adds	r2, r0, #0
 8015584:	701a      	strb	r2, [r3, #0]
 8015586:	230c      	movs	r3, #12
 8015588:	0030      	movs	r0, r6
 801558a:	181b      	adds	r3, r3, r0
 801558c:	19db      	adds	r3, r3, r7
 801558e:	1c0a      	adds	r2, r1, #0
 8015590:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015592:	2300      	movs	r3, #0
 8015594:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8015596:	2300      	movs	r3, #0
 8015598:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801559a:	231b      	movs	r3, #27
 801559c:	181b      	adds	r3, r3, r0
 801559e:	19db      	adds	r3, r3, r7
 80155a0:	2213      	movs	r2, #19
 80155a2:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d101      	bne.n	80155ae <LoRaMacCryptoGetFCntDown+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80155aa:	230a      	movs	r3, #10
 80155ac:	e068      	b.n	8015680 <LoRaMacCryptoGetFCntDown+0x110>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80155ae:	221b      	movs	r2, #27
 80155b0:	2110      	movs	r1, #16
 80155b2:	1853      	adds	r3, r2, r1
 80155b4:	19de      	adds	r6, r3, r7
 80155b6:	2314      	movs	r3, #20
 80155b8:	185b      	adds	r3, r3, r1
 80155ba:	19da      	adds	r2, r3, r7
 80155bc:	230f      	movs	r3, #15
 80155be:	185b      	adds	r3, r3, r1
 80155c0:	19db      	adds	r3, r3, r7
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	0011      	movs	r1, r2
 80155c6:	0018      	movs	r0, r3
 80155c8:	f7ff fe82 	bl	80152d0 <GetLastFcntDown>
 80155cc:	0003      	movs	r3, r0
 80155ce:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80155d0:	221b      	movs	r2, #27
 80155d2:	2110      	movs	r1, #16
 80155d4:	1853      	adds	r3, r2, r1
 80155d6:	19db      	adds	r3, r3, r7
 80155d8:	781b      	ldrb	r3, [r3, #0]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d003      	beq.n	80155e6 <LoRaMacCryptoGetFCntDown+0x76>
    {
        return cryptoStatus;
 80155de:	1853      	adds	r3, r2, r1
 80155e0:	19db      	adds	r3, r3, r7
 80155e2:	781b      	ldrb	r3, [r3, #0]
 80155e4:	e04c      	b.n	8015680 <LoRaMacCryptoGetFCntDown+0x110>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80155e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e8:	3301      	adds	r3, #1
 80155ea:	d103      	bne.n	80155f4 <LoRaMacCryptoGetFCntDown+0x84>
    {
        *currentDown = frameFcnt;
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	69ba      	ldr	r2, [r7, #24]
 80155f0:	601a      	str	r2, [r3, #0]
 80155f2:	e020      	b.n	8015636 <LoRaMacCryptoGetFCntDown+0xc6>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	041b      	lsls	r3, r3, #16
 80155f8:	0c1b      	lsrs	r3, r3, #16
 80155fa:	69ba      	ldr	r2, [r7, #24]
 80155fc:	1ad3      	subs	r3, r2, r3
 80155fe:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8015600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015602:	2b00      	cmp	r3, #0
 8015604:	dd05      	ble.n	8015612 <LoRaMacCryptoGetFCntDown+0xa2>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560a:	18d2      	adds	r2, r2, r3
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	601a      	str	r2, [r3, #0]
 8015610:	e011      	b.n	8015636 <LoRaMacCryptoGetFCntDown+0xc6>
        }
        else if( fCntDiff == 0 )
 8015612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015614:	2b00      	cmp	r3, #0
 8015616:	d104      	bne.n	8015622 <LoRaMacCryptoGetFCntDown+0xb2>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801561e:	2307      	movs	r3, #7
 8015620:	e02e      	b.n	8015680 <LoRaMacCryptoGetFCntDown+0x110>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015624:	0c1b      	lsrs	r3, r3, #16
 8015626:	041a      	lsls	r2, r3, #16
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	18d3      	adds	r3, r2, r3
 801562c:	2280      	movs	r2, #128	; 0x80
 801562e:	0252      	lsls	r2, r2, #9
 8015630:	189a      	adds	r2, r3, r2
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015636:	4b14      	ldr	r3, [pc, #80]	; (8015688 <LoRaMacCryptoGetFCntDown+0x118>)
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	789b      	ldrb	r3, [r3, #2]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d11e      	bne.n	801567e <LoRaMacCryptoGetFCntDown+0x10e>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	60bb      	str	r3, [r7, #8]
 8015646:	2300      	movs	r3, #0
 8015648:	60fb      	str	r3, [r7, #12]
 801564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564c:	603b      	str	r3, [r7, #0]
 801564e:	2300      	movs	r3, #0
 8015650:	607b      	str	r3, [r7, #4]
 8015652:	68ba      	ldr	r2, [r7, #8]
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	6838      	ldr	r0, [r7, #0]
 8015658:	6879      	ldr	r1, [r7, #4]
 801565a:	1a12      	subs	r2, r2, r0
 801565c:	418b      	sbcs	r3, r1
 801565e:	210c      	movs	r1, #12
 8015660:	2010      	movs	r0, #16
 8015662:	1809      	adds	r1, r1, r0
 8015664:	19c9      	adds	r1, r1, r7
 8015666:	8809      	ldrh	r1, [r1, #0]
 8015668:	b289      	uxth	r1, r1
 801566a:	000c      	movs	r4, r1
 801566c:	2100      	movs	r1, #0
 801566e:	000d      	movs	r5, r1
 8015670:	429d      	cmp	r5, r3
 8015672:	dc04      	bgt.n	801567e <LoRaMacCryptoGetFCntDown+0x10e>
 8015674:	d101      	bne.n	801567a <LoRaMacCryptoGetFCntDown+0x10a>
 8015676:	4294      	cmp	r4, r2
 8015678:	d801      	bhi.n	801567e <LoRaMacCryptoGetFCntDown+0x10e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801567a:	2308      	movs	r3, #8
 801567c:	e000      	b.n	8015680 <LoRaMacCryptoGetFCntDown+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801567e:	2300      	movs	r3, #0
}
 8015680:	0018      	movs	r0, r3
 8015682:	46bd      	mov	sp, r7
 8015684:	b00d      	add	sp, #52	; 0x34
 8015686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015688:	20001310 	.word	0x20001310

0801568c <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b082      	sub	sp, #8
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d101      	bne.n	801569e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801569a:	230a      	movs	r3, #10
 801569c:	e006      	b.n	80156ac <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 801569e:	4b05      	ldr	r3, [pc, #20]	; (80156b4 <LoRaMacCryptoSetMulticastReference+0x28>)
 80156a0:	685b      	ldr	r3, [r3, #4]
 80156a2:	331c      	adds	r3, #28
 80156a4:	001a      	movs	r2, r3
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 80156aa:	2300      	movs	r3, #0
}
 80156ac:	0018      	movs	r0, r3
 80156ae:	46bd      	mov	sp, r7
 80156b0:	b002      	add	sp, #8
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	20001310 	.word	0x20001310

080156b8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	0002      	movs	r2, r0
 80156c0:	6039      	str	r1, [r7, #0]
 80156c2:	1dfb      	adds	r3, r7, #7
 80156c4:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80156c6:	683a      	ldr	r2, [r7, #0]
 80156c8:	1dfb      	adds	r3, r7, #7
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	0011      	movs	r1, r2
 80156ce:	0018      	movs	r0, r3
 80156d0:	f7f7 fa30 	bl	800cb34 <SecureElementSetKey>
 80156d4:	1e03      	subs	r3, r0, #0
 80156d6:	d001      	beq.n	80156dc <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80156d8:	230f      	movs	r3, #15
 80156da:	e014      	b.n	8015706 <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 80156dc:	1dfb      	adds	r3, r7, #7
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d10f      	bne.n	8015704 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80156e4:	1dfb      	adds	r3, r7, #7
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	0018      	movs	r0, r3
 80156ea:	f000 fb75 	bl	8015dd8 <LoRaMacCryptoDeriveMcRootKey>
 80156ee:	1e03      	subs	r3, r0, #0
 80156f0:	d001      	beq.n	80156f6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80156f2:	230f      	movs	r3, #15
 80156f4:	e007      	b.n	8015706 <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80156f6:	2009      	movs	r0, #9
 80156f8:	f000 fba2 	bl	8015e40 <LoRaMacCryptoDeriveMcKEKey>
 80156fc:	1e03      	subs	r3, r0, #0
 80156fe:	d001      	beq.n	8015704 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015700:	230f      	movs	r3, #15
 8015702:	e000      	b.n	8015706 <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015704:	2300      	movs	r3, #0
}
 8015706:	0018      	movs	r0, r3
 8015708:	46bd      	mov	sp, r7
 801570a:	b002      	add	sp, #8
 801570c:	bd80      	pop	{r7, pc}
	...

08015710 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b086      	sub	sp, #24
 8015714:	af02      	add	r7, sp, #8
 8015716:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d101      	bne.n	8015722 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801571e:	230a      	movs	r3, #10
 8015720:	e04d      	b.n	80157be <LoRaMacCryptoPrepareJoinRequest+0xae>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015722:	230f      	movs	r3, #15
 8015724:	18fb      	adds	r3, r7, r3
 8015726:	2201      	movs	r2, #1
 8015728:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801572a:	2300      	movs	r3, #0
 801572c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801572e:	2308      	movs	r3, #8
 8015730:	18fb      	adds	r3, r7, r3
 8015732:	0018      	movs	r0, r3
 8015734:	f7f7 fca0 	bl	800d078 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8015738:	68ba      	ldr	r2, [r7, #8]
 801573a:	4b23      	ldr	r3, [pc, #140]	; (80157c8 <LoRaMacCryptoPrepareJoinRequest+0xb8>)
 801573c:	685b      	ldr	r3, [r3, #4]
 801573e:	b292      	uxth	r2, r2
 8015740:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015742:	4b21      	ldr	r3, [pc, #132]	; (80157c8 <LoRaMacCryptoPrepareJoinRequest+0xb8>)
 8015744:	689b      	ldr	r3, [r3, #8]
 8015746:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8015748:	4b1f      	ldr	r3, [pc, #124]	; (80157c8 <LoRaMacCryptoPrepareJoinRequest+0xb8>)
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	889a      	ldrh	r2, [r3, #4]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	82da      	strh	r2, [r3, #22]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    // Derive lifetime session keys
    if( DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI ) != LORAMAC_CRYPTO_SUCCESS )
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	330e      	adds	r3, #14
 8015756:	0019      	movs	r1, r3
 8015758:	2002      	movs	r0, #2
 801575a:	f7ff fd73 	bl	8015244 <DeriveLifeTimeSessionKey>
 801575e:	1e03      	subs	r3, r0, #0
 8015760:	d001      	beq.n	8015766 <LoRaMacCryptoPrepareJoinRequest+0x56>
    {
        return LORAMAC_CRYPTO_ERROR;
 8015762:	2313      	movs	r3, #19
 8015764:	e02b      	b.n	80157be <LoRaMacCryptoPrepareJoinRequest+0xae>
    }
    if( DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI ) != LORAMAC_CRYPTO_SUCCESS )
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	330e      	adds	r3, #14
 801576a:	0019      	movs	r1, r3
 801576c:	2003      	movs	r0, #3
 801576e:	f7ff fd69 	bl	8015244 <DeriveLifeTimeSessionKey>
 8015772:	1e03      	subs	r3, r0, #0
 8015774:	d001      	beq.n	801577a <LoRaMacCryptoPrepareJoinRequest+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR;
 8015776:	2313      	movs	r3, #19
 8015778:	e021      	b.n	80157be <LoRaMacCryptoPrepareJoinRequest+0xae>
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	0018      	movs	r0, r3
 801577e:	f000 fd89 	bl	8016294 <LoRaMacSerializerJoinRequest>
 8015782:	1e03      	subs	r3, r0, #0
 8015784:	d001      	beq.n	801578a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015786:	2311      	movs	r3, #17
 8015788:	e019      	b.n	80157be <LoRaMacCryptoPrepareJoinRequest+0xae>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6819      	ldr	r1, [r3, #0]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	3318      	adds	r3, #24
 8015792:	220f      	movs	r2, #15
 8015794:	18ba      	adds	r2, r7, r2
 8015796:	7812      	ldrb	r2, [r2, #0]
 8015798:	9300      	str	r3, [sp, #0]
 801579a:	0013      	movs	r3, r2
 801579c:	2213      	movs	r2, #19
 801579e:	2000      	movs	r0, #0
 80157a0:	f7f7 fa42 	bl	800cc28 <SecureElementComputeAesCmac>
 80157a4:	1e03      	subs	r3, r0, #0
 80157a6:	d001      	beq.n	80157ac <LoRaMacCryptoPrepareJoinRequest+0x9c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80157a8:	230f      	movs	r3, #15
 80157aa:	e008      	b.n	80157be <LoRaMacCryptoPrepareJoinRequest+0xae>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	0018      	movs	r0, r3
 80157b0:	f000 fd70 	bl	8016294 <LoRaMacSerializerJoinRequest>
 80157b4:	1e03      	subs	r3, r0, #0
 80157b6:	d001      	beq.n	80157bc <LoRaMacCryptoPrepareJoinRequest+0xac>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80157b8:	2311      	movs	r3, #17
 80157ba:	e000      	b.n	80157be <LoRaMacCryptoPrepareJoinRequest+0xae>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80157bc:	2300      	movs	r3, #0
}
 80157be:	0018      	movs	r0, r3
 80157c0:	46bd      	mov	sp, r7
 80157c2:	b004      	add	sp, #16
 80157c4:	bd80      	pop	{r7, pc}
 80157c6:	46c0      	nop			; (mov r8, r8)
 80157c8:	20001310 	.word	0x20001310

080157cc <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80157cc:	b5b0      	push	{r4, r5, r7, lr}
 80157ce:	b094      	sub	sp, #80	; 0x50
 80157d0:	af04      	add	r7, sp, #16
 80157d2:	60b9      	str	r1, [r7, #8]
 80157d4:	607a      	str	r2, [r7, #4]
 80157d6:	230f      	movs	r3, #15
 80157d8:	18fb      	adds	r3, r7, r3
 80157da:	1c02      	adds	r2, r0, #0
 80157dc:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d002      	beq.n	80157ea <LoRaMacCryptoHandleJoinAccept+0x1e>
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d101      	bne.n	80157ee <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157ea:	230a      	movs	r3, #10
 80157ec:	e0e0      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80157ee:	233b      	movs	r3, #59	; 0x3b
 80157f0:	18fb      	adds	r3, r7, r3
 80157f2:	2213      	movs	r2, #19
 80157f4:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80157f6:	2318      	movs	r3, #24
 80157f8:	18fb      	adds	r3, r7, r3
 80157fa:	2200      	movs	r2, #0
 80157fc:	601a      	str	r2, [r3, #0]
 80157fe:	3304      	adds	r3, #4
 8015800:	221d      	movs	r2, #29
 8015802:	2100      	movs	r1, #0
 8015804:	0018      	movs	r0, r3
 8015806:	f008 f86a 	bl	801d8de <memset>
    uint8_t versionMinor         = 0;
 801580a:	2317      	movs	r3, #23
 801580c:	18fb      	adds	r3, r7, r3
 801580e:	2200      	movs	r2, #0
 8015810:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8015812:	4b69      	ldr	r3, [pc, #420]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 8015814:	685b      	ldr	r3, [r3, #4]
 8015816:	3304      	adds	r3, #4
 8015818:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Nonce selection depending on JoinReqType
    // JOIN_REQ     : CryptoCtx.NvmCtx->DevNonce
    // REJOIN_REQ_0 : CryptoCtx.RJcount0
    // REJOIN_REQ_1 : CryptoCtx.RJcount1
    // REJOIN_REQ_2 : CryptoCtx.RJcount0
    if( joinReqType == JOIN_REQ )
 801581a:	220f      	movs	r2, #15
 801581c:	18bb      	adds	r3, r7, r2
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	2bff      	cmp	r3, #255	; 0xff
 8015822:	d00e      	beq.n	8015842 <LoRaMacCryptoHandleJoinAccept+0x76>
    }
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    else
    {
        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 8015824:	18bb      	adds	r3, r7, r2
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d003      	beq.n	8015834 <LoRaMacCryptoHandleJoinAccept+0x68>
 801582c:	18bb      	adds	r3, r7, r2
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	2b02      	cmp	r3, #2
 8015832:	d102      	bne.n	801583a <LoRaMacCryptoHandleJoinAccept+0x6e>
        {
            nonce = ( uint8_t* )&CryptoCtx.RJcount0;
 8015834:	4b60      	ldr	r3, [pc, #384]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 8015836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015838:	e003      	b.n	8015842 <LoRaMacCryptoHandleJoinAccept+0x76>
        }
        else
        {
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
 801583a:	4b5f      	ldr	r3, [pc, #380]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 801583c:	685b      	ldr	r3, [r3, #4]
 801583e:	3320      	adds	r3, #32
 8015840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 8015842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	b29c      	uxth	r4, r3
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681d      	ldr	r5, [r3, #0]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	791b      	ldrb	r3, [r3, #4]
 8015850:	68b9      	ldr	r1, [r7, #8]
 8015852:	220f      	movs	r2, #15
 8015854:	18ba      	adds	r2, r7, r2
 8015856:	7810      	ldrb	r0, [r2, #0]
 8015858:	2217      	movs	r2, #23
 801585a:	18ba      	adds	r2, r7, r2
 801585c:	9202      	str	r2, [sp, #8]
 801585e:	2218      	movs	r2, #24
 8015860:	18ba      	adds	r2, r7, r2
 8015862:	9201      	str	r2, [sp, #4]
 8015864:	9300      	str	r3, [sp, #0]
 8015866:	002b      	movs	r3, r5
 8015868:	0022      	movs	r2, r4
 801586a:	f7f7 fb06 	bl	800ce7a <SecureElementProcessJoinAccept>
 801586e:	1e03      	subs	r3, r0, #0
 8015870:	d001      	beq.n	8015876 <LoRaMacCryptoHandleJoinAccept+0xaa>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015872:	230f      	movs	r3, #15
 8015874:	e09c      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	6818      	ldr	r0, [r3, #0]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	791b      	ldrb	r3, [r3, #4]
 801587e:	b29a      	uxth	r2, r3
 8015880:	2318      	movs	r3, #24
 8015882:	18fb      	adds	r3, r7, r3
 8015884:	0019      	movs	r1, r3
 8015886:	f003 fb5f 	bl	8018f48 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	0018      	movs	r0, r3
 801588e:	f000 fb01 	bl	8015e94 <LoRaMacParserJoinAccept>
 8015892:	1e03      	subs	r3, r0, #0
 8015894:	d001      	beq.n	801589a <LoRaMacCryptoHandleJoinAccept+0xce>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015896:	2310      	movs	r3, #16
 8015898:	e08a      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }
#endif

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( versionMinor == 1 )
 801589a:	2317      	movs	r3, #23
 801589c:	18fb      	adds	r3, r7, r3
 801589e:	781b      	ldrb	r3, [r3, #0]
 80158a0:	2b01      	cmp	r3, #1
 80158a2:	d165      	bne.n	8015970 <LoRaMacCryptoHandleJoinAccept+0x1a4>
    {
        // Operating in LoRaWAN 1.1.x mode
        // Derive lifetime keys
        retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 80158a4:	253b      	movs	r5, #59	; 0x3b
 80158a6:	197c      	adds	r4, r7, r5
 80158a8:	2000      	movs	r0, #0
 80158aa:	f000 fa95 	bl	8015dd8 <LoRaMacCryptoDeriveMcRootKey>
 80158ae:	0003      	movs	r3, r0
 80158b0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80158b2:	002a      	movs	r2, r5
 80158b4:	18bb      	adds	r3, r7, r2
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d002      	beq.n	80158c2 <LoRaMacCryptoHandleJoinAccept+0xf6>
        {
            return retval;
 80158bc:	18bb      	adds	r3, r7, r2
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	e076      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
        }

        retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80158c2:	253b      	movs	r5, #59	; 0x3b
 80158c4:	197c      	adds	r4, r7, r5
 80158c6:	2009      	movs	r0, #9
 80158c8:	f000 faba 	bl	8015e40 <LoRaMacCryptoDeriveMcKEKey>
 80158cc:	0003      	movs	r3, r0
 80158ce:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80158d0:	002a      	movs	r2, r5
 80158d2:	18bb      	adds	r3, r7, r2
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d002      	beq.n	80158e0 <LoRaMacCryptoHandleJoinAccept+0x114>
        {
            return retval;
 80158da:	18bb      	adds	r3, r7, r2
 80158dc:	781b      	ldrb	r3, [r3, #0]
 80158de:	e067      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
        }

        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, nonce );
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	1d99      	adds	r1, r3, #6
 80158e4:	253b      	movs	r5, #59	; 0x3b
 80158e6:	197c      	adds	r4, r7, r5
 80158e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158ea:	68ba      	ldr	r2, [r7, #8]
 80158ec:	2004      	movs	r0, #4
 80158ee:	f7ff fc2f 	bl	8015150 <DeriveSessionKey11x>
 80158f2:	0003      	movs	r3, r0
 80158f4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80158f6:	197b      	adds	r3, r7, r5
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d002      	beq.n	8015904 <LoRaMacCryptoHandleJoinAccept+0x138>
        {
            return retval;
 80158fe:	197b      	adds	r3, r7, r5
 8015900:	781b      	ldrb	r3, [r3, #0]
 8015902:	e055      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, nonce );
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	1d99      	adds	r1, r3, #6
 8015908:	253b      	movs	r5, #59	; 0x3b
 801590a:	197c      	adds	r4, r7, r5
 801590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801590e:	68ba      	ldr	r2, [r7, #8]
 8015910:	2005      	movs	r0, #5
 8015912:	f7ff fc1d 	bl	8015150 <DeriveSessionKey11x>
 8015916:	0003      	movs	r3, r0
 8015918:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801591a:	197b      	adds	r3, r7, r5
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d002      	beq.n	8015928 <LoRaMacCryptoHandleJoinAccept+0x15c>
        {
            return retval;
 8015922:	197b      	adds	r3, r7, r5
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	e043      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, nonce );
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	1d99      	adds	r1, r3, #6
 801592c:	253b      	movs	r5, #59	; 0x3b
 801592e:	197c      	adds	r4, r7, r5
 8015930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015932:	68ba      	ldr	r2, [r7, #8]
 8015934:	2006      	movs	r0, #6
 8015936:	f7ff fc0b 	bl	8015150 <DeriveSessionKey11x>
 801593a:	0003      	movs	r3, r0
 801593c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801593e:	197b      	adds	r3, r7, r5
 8015940:	781b      	ldrb	r3, [r3, #0]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d002      	beq.n	801594c <LoRaMacCryptoHandleJoinAccept+0x180>
        {
            return retval;
 8015946:	197b      	adds	r3, r7, r5
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	e031      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, nonce );
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	1d99      	adds	r1, r3, #6
 8015950:	253b      	movs	r5, #59	; 0x3b
 8015952:	197c      	adds	r4, r7, r5
 8015954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015956:	68ba      	ldr	r2, [r7, #8]
 8015958:	2008      	movs	r0, #8
 801595a:	f7ff fbf9 	bl	8015150 <DeriveSessionKey11x>
 801595e:	0003      	movs	r3, r0
 8015960:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015962:	197b      	adds	r3, r7, r5
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d002      	beq.n	8015970 <LoRaMacCryptoHandleJoinAccept+0x1a4>
        {
            return retval;
 801596a:	197b      	adds	r3, r7, r5
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	e01f      	b.n	80159b0 <LoRaMacCryptoHandleJoinAccept+0x1e4>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 8015970:	4b11      	ldr	r3, [pc, #68]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	2217      	movs	r2, #23
 8015976:	18ba      	adds	r2, r7, r2
 8015978:	7812      	ldrb	r2, [r2, #0]
 801597a:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
 801597c:	4b0e      	ldr	r3, [pc, #56]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 801597e:	2200      	movs	r2, #0
 8015980:	801a      	strh	r2, [r3, #0]
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015982:	4b0d      	ldr	r3, [pc, #52]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 8015984:	685b      	ldr	r3, [r3, #4]
 8015986:	2200      	movs	r2, #0
 8015988:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801598a:	4b0b      	ldr	r3, [pc, #44]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	2201      	movs	r2, #1
 8015990:	4252      	negs	r2, r2
 8015992:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015994:	4b08      	ldr	r3, [pc, #32]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	2201      	movs	r2, #1
 801599a:	4252      	negs	r2, r2
 801599c:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801599e:	4b06      	ldr	r3, [pc, #24]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	2201      	movs	r2, #1
 80159a4:	4252      	negs	r2, r2
 80159a6:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 80159a8:	4b03      	ldr	r3, [pc, #12]	; (80159b8 <LoRaMacCryptoHandleJoinAccept+0x1ec>)
 80159aa:	689b      	ldr	r3, [r3, #8]
 80159ac:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80159ae:	2300      	movs	r3, #0
}
 80159b0:	0018      	movs	r0, r3
 80159b2:	46bd      	mov	sp, r7
 80159b4:	b010      	add	sp, #64	; 0x40
 80159b6:	bdb0      	pop	{r4, r5, r7, pc}
 80159b8:	20001310 	.word	0x20001310

080159bc <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80159bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159be:	b08f      	sub	sp, #60	; 0x3c
 80159c0:	af06      	add	r7, sp, #24
 80159c2:	60f8      	str	r0, [r7, #12]
 80159c4:	0008      	movs	r0, r1
 80159c6:	0011      	movs	r1, r2
 80159c8:	607b      	str	r3, [r7, #4]
 80159ca:	230b      	movs	r3, #11
 80159cc:	18fb      	adds	r3, r7, r3
 80159ce:	1c02      	adds	r2, r0, #0
 80159d0:	701a      	strb	r2, [r3, #0]
 80159d2:	230a      	movs	r3, #10
 80159d4:	18fb      	adds	r3, r7, r3
 80159d6:	1c0a      	adds	r2, r1, #0
 80159d8:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80159da:	231e      	movs	r3, #30
 80159dc:	18fb      	adds	r3, r7, r3
 80159de:	2213      	movs	r2, #19
 80159e0:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80159e2:	231f      	movs	r3, #31
 80159e4:	18fb      	adds	r3, r7, r3
 80159e6:	2208      	movs	r2, #8
 80159e8:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80159f0:	230a      	movs	r3, #10
 80159f2:	e0fb      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 80159f4:	4b7f      	ldr	r3, [pc, #508]	; (8015bf4 <LoRaMacCryptoSecureMessage+0x238>)
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	68db      	ldr	r3, [r3, #12]
 80159fa:	68fa      	ldr	r2, [r7, #12]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d201      	bcs.n	8015a04 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015a00:	2306      	movs	r3, #6
 8015a02:	e0f3      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2220      	movs	r2, #32
 8015a08:	5c9b      	ldrb	r3, [r3, r2]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d103      	bne.n	8015a16 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8015a0e:	231f      	movs	r3, #31
 8015a10:	18fb      	adds	r3, r7, r3
 8015a12:	2206      	movs	r2, #6
 8015a14:	701a      	strb	r2, [r3, #0]
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8015a16:	4b77      	ldr	r3, [pc, #476]	; (8015bf4 <LoRaMacCryptoSecureMessage+0x238>)
 8015a18:	685b      	ldr	r3, [r3, #4]
 8015a1a:	68db      	ldr	r3, [r3, #12]
 8015a1c:	68fa      	ldr	r2, [r7, #12]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d93d      	bls.n	8015a9e <LoRaMacCryptoSecureMessage+0xe2>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2228      	movs	r2, #40	; 0x28
 8015a2a:	5c9b      	ldrb	r3, [r3, r2]
 8015a2c:	b219      	sxth	r1, r3
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	689d      	ldr	r5, [r3, #8]
 8015a32:	261e      	movs	r6, #30
 8015a34:	19bc      	adds	r4, r7, r6
 8015a36:	231f      	movs	r3, #31
 8015a38:	18fb      	adds	r3, r7, r3
 8015a3a:	781a      	ldrb	r2, [r3, #0]
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	9301      	str	r3, [sp, #4]
 8015a40:	2300      	movs	r3, #0
 8015a42:	9300      	str	r3, [sp, #0]
 8015a44:	002b      	movs	r3, r5
 8015a46:	f7fe ff75 	bl	8014934 <PayloadEncrypt>
 8015a4a:	0003      	movs	r3, r0
 8015a4c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a4e:	19bb      	adds	r3, r7, r6
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d002      	beq.n	8015a5c <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 8015a56:	19bb      	adds	r3, r7, r6
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	e0c7      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
        }

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8015a5c:	4b65      	ldr	r3, [pc, #404]	; (8015bf4 <LoRaMacCryptoSecureMessage+0x238>)
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	789b      	ldrb	r3, [r3, #2]
 8015a62:	2b01      	cmp	r3, #1
 8015a64:	d11b      	bne.n	8015a9e <LoRaMacCryptoSecureMessage+0xe2>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP, fCntUp, macMsg->FHDR.FOpts );
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	7b1b      	ldrb	r3, [r3, #12]
 8015a6a:	071b      	lsls	r3, r3, #28
 8015a6c:	0f1b      	lsrs	r3, r3, #28
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	b298      	uxth	r0, r3
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6899      	ldr	r1, [r3, #8]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	3310      	adds	r3, #16
 8015a7a:	251e      	movs	r5, #30
 8015a7c:	197c      	adds	r4, r7, r5
 8015a7e:	9301      	str	r3, [sp, #4]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	9300      	str	r3, [sp, #0]
 8015a84:	2300      	movs	r3, #0
 8015a86:	2200      	movs	r2, #0
 8015a88:	f7ff f81a 	bl	8014ac0 <FOptsEncrypt>
 8015a8c:	0003      	movs	r3, r0
 8015a8e:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a90:	197b      	adds	r3, r7, r5
 8015a92:	781b      	ldrb	r3, [r3, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d002      	beq.n	8015a9e <LoRaMacCryptoSecureMessage+0xe2>
            {
                return retval;
 8015a98:	197b      	adds	r3, r7, r5
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	e0a6      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	0018      	movs	r0, r3
 8015aa2:	f000 fc92 	bl	80163ca <LoRaMacSerializerData>
 8015aa6:	1e03      	subs	r3, r0, #0
 8015aa8:	d001      	beq.n	8015aae <LoRaMacCryptoSecureMessage+0xf2>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015aaa:	2311      	movs	r3, #17
 8015aac:	e09e      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
    }

    // Compute mic
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8015aae:	4b51      	ldr	r3, [pc, #324]	; (8015bf4 <LoRaMacCryptoSecureMessage+0x238>)
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	789b      	ldrb	r3, [r3, #2]
 8015ab4:	2b01      	cmp	r3, #1
 8015ab6:	d162      	bne.n	8015b7e <LoRaMacCryptoSecureMessage+0x1c2>
    {
        uint32_t cmacS = 0;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
 8015abc:	2300      	movs	r3, #0
 8015abe:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	6818      	ldr	r0, [r3, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	791b      	ldrb	r3, [r3, #4]
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	3b04      	subs	r3, #4
 8015acc:	b299      	uxth	r1, r3
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	7b1b      	ldrb	r3, [r3, #12]
 8015ad2:	069b      	lsls	r3, r3, #26
 8015ad4:	0fdb      	lsrs	r3, r3, #31
 8015ad6:	b2db      	uxtb	r3, r3
 8015ad8:	1e5a      	subs	r2, r3, #1
 8015ada:	4193      	sbcs	r3, r2
 8015adc:	b2dd      	uxtb	r5, r3
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	689b      	ldr	r3, [r3, #8]
 8015ae2:	261e      	movs	r6, #30
 8015ae4:	19bc      	adds	r4, r7, r6
 8015ae6:	2218      	movs	r2, #24
 8015ae8:	18ba      	adds	r2, r7, r2
 8015aea:	9204      	str	r2, [sp, #16]
 8015aec:	68fa      	ldr	r2, [r7, #12]
 8015aee:	9203      	str	r2, [sp, #12]
 8015af0:	9302      	str	r3, [sp, #8]
 8015af2:	230a      	movs	r3, #10
 8015af4:	18fb      	adds	r3, r7, r3
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	9301      	str	r3, [sp, #4]
 8015afa:	230b      	movs	r3, #11
 8015afc:	18fb      	adds	r3, r7, r3
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	9300      	str	r3, [sp, #0]
 8015b02:	002b      	movs	r3, r5
 8015b04:	2205      	movs	r2, #5
 8015b06:	f7ff faa5 	bl	8015054 <ComputeCmacB1>
 8015b0a:	0003      	movs	r3, r0
 8015b0c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b0e:	19bb      	adds	r3, r7, r6
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d002      	beq.n	8015b1c <LoRaMacCryptoSecureMessage+0x160>
        {
            return retval;
 8015b16:	19bb      	adds	r3, r7, r6
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	e067      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &cmacF );
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6818      	ldr	r0, [r3, #0]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	791b      	ldrb	r3, [r3, #4]
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	3b04      	subs	r3, #4
 8015b28:	b299      	uxth	r1, r3
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	7b1b      	ldrb	r3, [r3, #12]
 8015b2e:	069b      	lsls	r3, r3, #26
 8015b30:	0fdb      	lsrs	r3, r3, #31
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	1e5a      	subs	r2, r3, #1
 8015b36:	4193      	sbcs	r3, r2
 8015b38:	b2dd      	uxtb	r5, r3
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	689b      	ldr	r3, [r3, #8]
 8015b3e:	261e      	movs	r6, #30
 8015b40:	19bc      	adds	r4, r7, r6
 8015b42:	2214      	movs	r2, #20
 8015b44:	18ba      	adds	r2, r7, r2
 8015b46:	9203      	str	r2, [sp, #12]
 8015b48:	68fa      	ldr	r2, [r7, #12]
 8015b4a:	9202      	str	r2, [sp, #8]
 8015b4c:	9301      	str	r3, [sp, #4]
 8015b4e:	2300      	movs	r3, #0
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	002b      	movs	r3, r5
 8015b54:	2204      	movs	r2, #4
 8015b56:	f7ff f90f 	bl	8014d78 <ComputeCmacB0>
 8015b5a:	0003      	movs	r3, r0
 8015b5c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b5e:	19bb      	adds	r3, r7, r6
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d002      	beq.n	8015b6c <LoRaMacCryptoSecureMessage+0x1b0>
        {
            return retval;
 8015b66:	19bb      	adds	r3, r7, r6
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	e03f      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	041a      	lsls	r2, r3, #16
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	041b      	lsls	r3, r3, #16
 8015b74:	0c1b      	lsrs	r3, r3, #16
 8015b76:	431a      	orrs	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8015b7c:	e026      	b.n	8015bcc <LoRaMacCryptoSecureMessage+0x210>
    }
    else
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8015b7e:	211f      	movs	r1, #31
 8015b80:	187b      	adds	r3, r7, r1
 8015b82:	2206      	movs	r2, #6
 8015b84:	701a      	strb	r2, [r3, #0]
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	6818      	ldr	r0, [r3, #0]
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	791b      	ldrb	r3, [r3, #4]
 8015b8e:	b29b      	uxth	r3, r3
 8015b90:	3b04      	subs	r3, #4
 8015b92:	b29d      	uxth	r5, r3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	689b      	ldr	r3, [r3, #8]
 8015b98:	687a      	ldr	r2, [r7, #4]
 8015b9a:	322c      	adds	r2, #44	; 0x2c
 8015b9c:	261e      	movs	r6, #30
 8015b9e:	19bc      	adds	r4, r7, r6
 8015ba0:	1879      	adds	r1, r7, r1
 8015ba2:	7809      	ldrb	r1, [r1, #0]
 8015ba4:	9203      	str	r2, [sp, #12]
 8015ba6:	68fa      	ldr	r2, [r7, #12]
 8015ba8:	9202      	str	r2, [sp, #8]
 8015baa:	9301      	str	r3, [sp, #4]
 8015bac:	2300      	movs	r3, #0
 8015bae:	9300      	str	r3, [sp, #0]
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	000a      	movs	r2, r1
 8015bb4:	0029      	movs	r1, r5
 8015bb6:	f7ff f8df 	bl	8014d78 <ComputeCmacB0>
 8015bba:	0003      	movs	r3, r0
 8015bbc:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015bbe:	19bb      	adds	r3, r7, r6
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d002      	beq.n	8015bcc <LoRaMacCryptoSecureMessage+0x210>
        {
            return retval;
 8015bc6:	19bb      	adds	r3, r7, r6
 8015bc8:	781b      	ldrb	r3, [r3, #0]
 8015bca:	e00f      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	0018      	movs	r0, r3
 8015bd0:	f000 fbfb 	bl	80163ca <LoRaMacSerializerData>
 8015bd4:	1e03      	subs	r3, r0, #0
 8015bd6:	d001      	beq.n	8015bdc <LoRaMacCryptoSecureMessage+0x220>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015bd8:	2311      	movs	r3, #17
 8015bda:	e007      	b.n	8015bec <LoRaMacCryptoSecureMessage+0x230>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8015bdc:	4b05      	ldr	r3, [pc, #20]	; (8015bf4 <LoRaMacCryptoSecureMessage+0x238>)
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	68fa      	ldr	r2, [r7, #12]
 8015be2:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015be4:	4b03      	ldr	r3, [pc, #12]	; (8015bf4 <LoRaMacCryptoSecureMessage+0x238>)
 8015be6:	689b      	ldr	r3, [r3, #8]
 8015be8:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015bea:	2300      	movs	r3, #0
}
 8015bec:	0018      	movs	r0, r3
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	b009      	add	sp, #36	; 0x24
 8015bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bf4:	20001310 	.word	0x20001310

08015bf8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bfa:	b08b      	sub	sp, #44	; 0x2c
 8015bfc:	af04      	add	r7, sp, #16
 8015bfe:	60b9      	str	r1, [r7, #8]
 8015c00:	0011      	movs	r1, r2
 8015c02:	607b      	str	r3, [r7, #4]
 8015c04:	230f      	movs	r3, #15
 8015c06:	18fb      	adds	r3, r7, r3
 8015c08:	1c02      	adds	r2, r0, #0
 8015c0a:	701a      	strb	r2, [r3, #0]
 8015c0c:	230e      	movs	r3, #14
 8015c0e:	18fb      	adds	r3, r7, r3
 8015c10:	1c0a      	adds	r2, r1, #0
 8015c12:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8015c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d101      	bne.n	8015c1e <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015c1a:	230a      	movs	r3, #10
 8015c1c:	e0d6      	b.n	8015dcc <LoRaMacCryptoUnsecureMessage+0x1d4>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015c1e:	687a      	ldr	r2, [r7, #4]
 8015c20:	230e      	movs	r3, #14
 8015c22:	18fb      	adds	r3, r7, r3
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	0011      	movs	r1, r2
 8015c28:	0018      	movs	r0, r3
 8015c2a:	f7ff fb9d 	bl	8015368 <CheckFCntDown>
 8015c2e:	0003      	movs	r3, r0
 8015c30:	001a      	movs	r2, r3
 8015c32:	2301      	movs	r3, #1
 8015c34:	4053      	eors	r3, r2
 8015c36:	b2db      	uxtb	r3, r3
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d001      	beq.n	8015c40 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015c3c:	2306      	movs	r3, #6
 8015c3e:	e0c5      	b.n	8015dcc <LoRaMacCryptoUnsecureMessage+0x1d4>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015c40:	2315      	movs	r3, #21
 8015c42:	18fb      	adds	r3, r7, r3
 8015c44:	2213      	movs	r2, #19
 8015c46:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015c48:	2317      	movs	r3, #23
 8015c4a:	18fb      	adds	r3, r7, r3
 8015c4c:	2208      	movs	r2, #8
 8015c4e:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8015c50:	2314      	movs	r3, #20
 8015c52:	18fb      	adds	r3, r7, r3
 8015c54:	2205      	movs	r2, #5
 8015c56:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5a:	0018      	movs	r0, r3
 8015c5c:	f000 fa0a 	bl	8016074 <LoRaMacParserData>
 8015c60:	1e03      	subs	r3, r0, #0
 8015c62:	d001      	beq.n	8015c68 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015c64:	2310      	movs	r3, #16
 8015c66:	e0b1      	b.n	8015dcc <LoRaMacCryptoUnsecureMessage+0x1d4>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015c68:	2515      	movs	r5, #21
 8015c6a:	197c      	adds	r4, r7, r5
 8015c6c:	2310      	movs	r3, #16
 8015c6e:	18fa      	adds	r2, r7, r3
 8015c70:	230f      	movs	r3, #15
 8015c72:	18fb      	adds	r3, r7, r3
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	0011      	movs	r1, r2
 8015c78:	0018      	movs	r0, r3
 8015c7a:	f7ff fa37 	bl	80150ec <GetKeyAddrItem>
 8015c7e:	0003      	movs	r3, r0
 8015c80:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015c82:	197b      	adds	r3, r7, r5
 8015c84:	781b      	ldrb	r3, [r3, #0]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d002      	beq.n	8015c90 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 8015c8a:	197b      	adds	r3, r7, r5
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	e09d      	b.n	8015dcc <LoRaMacCryptoUnsecureMessage+0x1d4>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015c90:	693a      	ldr	r2, [r7, #16]
 8015c92:	2317      	movs	r3, #23
 8015c94:	18fb      	adds	r3, r7, r3
 8015c96:	7852      	ldrb	r2, [r2, #1]
 8015c98:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8015c9a:	693a      	ldr	r2, [r7, #16]
 8015c9c:	2314      	movs	r3, #20
 8015c9e:	18fb      	adds	r3, r7, r3
 8015ca0:	7892      	ldrb	r2, [r2, #2]
 8015ca2:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca6:	689b      	ldr	r3, [r3, #8]
 8015ca8:	68ba      	ldr	r2, [r7, #8]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d001      	beq.n	8015cb2 <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015cae:	2302      	movs	r3, #2
 8015cb0:	e08c      	b.n	8015dcc <LoRaMacCryptoUnsecureMessage+0x1d4>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb4:	7b1b      	ldrb	r3, [r3, #12]
 8015cb6:	069b      	lsls	r3, r3, #26
 8015cb8:	0fdb      	lsrs	r3, r3, #31
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	001a      	movs	r2, r3
 8015cbe:	2016      	movs	r0, #22
 8015cc0:	183b      	adds	r3, r7, r0
 8015cc2:	1e51      	subs	r1, r2, #1
 8015cc4:	418a      	sbcs	r2, r1
 8015cc6:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015cc8:	4b42      	ldr	r3, [pc, #264]	; (8015dd4 <LoRaMacCryptoUnsecureMessage+0x1dc>)
 8015cca:	685b      	ldr	r3, [r3, #4]
 8015ccc:	789b      	ldrb	r3, [r3, #2]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d102      	bne.n	8015cd8 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015cd2:	183b      	adds	r3, r7, r0
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cda:	6818      	ldr	r0, [r3, #0]
 8015cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cde:	791b      	ldrb	r3, [r3, #4]
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	3b04      	subs	r3, #4
 8015ce4:	b299      	uxth	r1, r3
 8015ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cea:	2615      	movs	r6, #21
 8015cec:	19bc      	adds	r4, r7, r6
 8015cee:	2216      	movs	r2, #22
 8015cf0:	18ba      	adds	r2, r7, r2
 8015cf2:	7815      	ldrb	r5, [r2, #0]
 8015cf4:	2214      	movs	r2, #20
 8015cf6:	18ba      	adds	r2, r7, r2
 8015cf8:	7812      	ldrb	r2, [r2, #0]
 8015cfa:	9303      	str	r3, [sp, #12]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	9302      	str	r3, [sp, #8]
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	9301      	str	r3, [sp, #4]
 8015d04:	2301      	movs	r3, #1
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	002b      	movs	r3, r5
 8015d0a:	f7ff f87d 	bl	8014e08 <VerifyCmacB0>
 8015d0e:	0003      	movs	r3, r0
 8015d10:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d12:	19bb      	adds	r3, r7, r6
 8015d14:	781b      	ldrb	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d002      	beq.n	8015d20 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 8015d1a:	19bb      	adds	r3, r7, r6
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	e055      	b.n	8015dcc <LoRaMacCryptoUnsecureMessage+0x1d4>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d22:	2220      	movs	r2, #32
 8015d24:	5c9b      	ldrb	r3, [r3, r2]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d103      	bne.n	8015d32 <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8015d2a:	2317      	movs	r3, #23
 8015d2c:	18fb      	adds	r3, r7, r3
 8015d2e:	2206      	movs	r2, #6
 8015d30:	701a      	strb	r2, [r3, #0]
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d38:	2228      	movs	r2, #40	; 0x28
 8015d3a:	5c9b      	ldrb	r3, [r3, r2]
 8015d3c:	b219      	sxth	r1, r3
 8015d3e:	2615      	movs	r6, #21
 8015d40:	19bc      	adds	r4, r7, r6
 8015d42:	68bd      	ldr	r5, [r7, #8]
 8015d44:	2317      	movs	r3, #23
 8015d46:	18fb      	adds	r3, r7, r3
 8015d48:	781a      	ldrb	r2, [r3, #0]
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	9301      	str	r3, [sp, #4]
 8015d4e:	2301      	movs	r3, #1
 8015d50:	9300      	str	r3, [sp, #0]
 8015d52:	002b      	movs	r3, r5
 8015d54:	f7fe fdee 	bl	8014934 <PayloadEncrypt>
 8015d58:	0003      	movs	r3, r0
 8015d5a:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d5c:	19bb      	adds	r3, r7, r6
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d002      	beq.n	8015d6a <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 8015d64:	19bb      	adds	r3, r7, r6
 8015d66:	781b      	ldrb	r3, [r3, #0]
 8015d68:	e030      	b.n	8015dcc <LoRaMacCryptoUnsecureMessage+0x1d4>
    }

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8015d6a:	4b1a      	ldr	r3, [pc, #104]	; (8015dd4 <LoRaMacCryptoUnsecureMessage+0x1dc>)
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	789b      	ldrb	r3, [r3, #2]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d122      	bne.n	8015dba <LoRaMacCryptoUnsecureMessage+0x1c2>
    {
        if( addrID == UNICAST_DEV_ADDR )
 8015d74:	230f      	movs	r3, #15
 8015d76:	18fb      	adds	r3, r7, r3
 8015d78:	781b      	ldrb	r3, [r3, #0]
 8015d7a:	2b01      	cmp	r3, #1
 8015d7c:	d11d      	bne.n	8015dba <LoRaMacCryptoUnsecureMessage+0x1c2>
        {
            // Decrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 8015d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d80:	7b1b      	ldrb	r3, [r3, #12]
 8015d82:	071b      	lsls	r3, r3, #28
 8015d84:	0f1b      	lsrs	r3, r3, #28
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	b298      	uxth	r0, r3
 8015d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d8c:	3310      	adds	r3, #16
 8015d8e:	2515      	movs	r5, #21
 8015d90:	197c      	adds	r4, r7, r5
 8015d92:	220e      	movs	r2, #14
 8015d94:	18ba      	adds	r2, r7, r2
 8015d96:	7812      	ldrb	r2, [r2, #0]
 8015d98:	68b9      	ldr	r1, [r7, #8]
 8015d9a:	9301      	str	r3, [sp, #4]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	9300      	str	r3, [sp, #0]
 8015da0:	0013      	movs	r3, r2
 8015da2:	2201      	movs	r2, #1
 8015da4:	f7fe fe8c 	bl	8014ac0 <FOptsEncrypt>
 8015da8:	0003      	movs	r3, r0
 8015daa:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015dac:	197b      	adds	r3, r7, r5
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d002      	beq.n	8015dba <LoRaMacCryptoUnsecureMessage+0x1c2>
            {
                return retval;
 8015db4:	197b      	adds	r3, r7, r5
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	e008      	b.n	8015dcc <LoRaMacCryptoUnsecureMessage+0x1d4>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8015dba:	687a      	ldr	r2, [r7, #4]
 8015dbc:	230e      	movs	r3, #14
 8015dbe:	18fb      	adds	r3, r7, r3
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	0011      	movs	r1, r2
 8015dc4:	0018      	movs	r0, r3
 8015dc6:	f7ff faf3 	bl	80153b0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015dca:	2300      	movs	r3, #0
}
 8015dcc:	0018      	movs	r0, r3
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	b007      	add	sp, #28
 8015dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dd4:	20001310 	.word	0x20001310

08015dd8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8015dd8:	b590      	push	{r4, r7, lr}
 8015dda:	b087      	sub	sp, #28
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	0002      	movs	r2, r0
 8015de0:	1dfb      	adds	r3, r7, #7
 8015de2:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8015de4:	1dfb      	adds	r3, r7, #7
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d001      	beq.n	8015df0 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015dec:	230b      	movs	r3, #11
 8015dee:	e020      	b.n	8015e32 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 8015df0:	2408      	movs	r4, #8
 8015df2:	193b      	adds	r3, r7, r4
 8015df4:	2200      	movs	r2, #0
 8015df6:	601a      	str	r2, [r3, #0]
 8015df8:	3304      	adds	r3, #4
 8015dfa:	220c      	movs	r2, #12
 8015dfc:	2100      	movs	r1, #0
 8015dfe:	0018      	movs	r0, r3
 8015e00:	f007 fd6d 	bl	801d8de <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8015e04:	4b0d      	ldr	r3, [pc, #52]	; (8015e3c <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	789b      	ldrb	r3, [r3, #2]
 8015e0a:	2b01      	cmp	r3, #1
 8015e0c:	d102      	bne.n	8015e14 <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 8015e0e:	193b      	adds	r3, r7, r4
 8015e10:	2220      	movs	r2, #32
 8015e12:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015e14:	4b09      	ldr	r3, [pc, #36]	; (8015e3c <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	1dfa      	adds	r2, r7, #7
 8015e1a:	7812      	ldrb	r2, [r2, #0]
 8015e1c:	2108      	movs	r1, #8
 8015e1e:	1879      	adds	r1, r7, r1
 8015e20:	6818      	ldr	r0, [r3, #0]
 8015e22:	2309      	movs	r3, #9
 8015e24:	f7f6 ffd4 	bl	800cdd0 <SecureElementDeriveAndStoreKey>
 8015e28:	1e03      	subs	r3, r0, #0
 8015e2a:	d001      	beq.n	8015e30 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015e2c:	230f      	movs	r3, #15
 8015e2e:	e000      	b.n	8015e32 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e30:	2300      	movs	r3, #0
}
 8015e32:	0018      	movs	r0, r3
 8015e34:	46bd      	mov	sp, r7
 8015e36:	b007      	add	sp, #28
 8015e38:	bd90      	pop	{r4, r7, pc}
 8015e3a:	46c0      	nop			; (mov r8, r8)
 8015e3c:	20001310 	.word	0x20001310

08015e40 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8015e40:	b590      	push	{r4, r7, lr}
 8015e42:	b087      	sub	sp, #28
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	0002      	movs	r2, r0
 8015e48:	1dfb      	adds	r3, r7, #7
 8015e4a:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8015e4c:	1dfb      	adds	r3, r7, #7
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	2b09      	cmp	r3, #9
 8015e52:	d001      	beq.n	8015e58 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015e54:	230b      	movs	r3, #11
 8015e56:	e017      	b.n	8015e88 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8015e58:	2408      	movs	r4, #8
 8015e5a:	193b      	adds	r3, r7, r4
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	601a      	str	r2, [r3, #0]
 8015e60:	3304      	adds	r3, #4
 8015e62:	220c      	movs	r2, #12
 8015e64:	2100      	movs	r1, #0
 8015e66:	0018      	movs	r0, r3
 8015e68:	f007 fd39 	bl	801d8de <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015e6c:	4b08      	ldr	r3, [pc, #32]	; (8015e90 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	1dfa      	adds	r2, r7, #7
 8015e72:	7812      	ldrb	r2, [r2, #0]
 8015e74:	1939      	adds	r1, r7, r4
 8015e76:	6818      	ldr	r0, [r3, #0]
 8015e78:	237f      	movs	r3, #127	; 0x7f
 8015e7a:	f7f6 ffa9 	bl	800cdd0 <SecureElementDeriveAndStoreKey>
 8015e7e:	1e03      	subs	r3, r0, #0
 8015e80:	d001      	beq.n	8015e86 <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015e82:	230f      	movs	r3, #15
 8015e84:	e000      	b.n	8015e88 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	0018      	movs	r0, r3
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	b007      	add	sp, #28
 8015e8e:	bd90      	pop	{r4, r7, pc}
 8015e90:	20001310 	.word	0x20001310

08015e94 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015e94:	b590      	push	{r4, r7, lr}
 8015e96:	b085      	sub	sp, #20
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d003      	beq.n	8015eaa <LoRaMacParserJoinAccept+0x16>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d101      	bne.n	8015eae <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015eaa:	2302      	movs	r3, #2
 8015eac:	e0de      	b.n	801606c <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8015eae:	240e      	movs	r4, #14
 8015eb0:	193b      	adds	r3, r7, r4
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	193b      	adds	r3, r7, r4
 8015ebc:	881b      	ldrh	r3, [r3, #0]
 8015ebe:	1939      	adds	r1, r7, r4
 8015ec0:	1c58      	adds	r0, r3, #1
 8015ec2:	8008      	strh	r0, [r1, #0]
 8015ec4:	18d3      	adds	r3, r2, r3
 8015ec6:	781a      	ldrb	r2, [r3, #0]
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	1d98      	adds	r0, r3, #6
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681a      	ldr	r2, [r3, #0]
 8015ed4:	193b      	adds	r3, r7, r4
 8015ed6:	881b      	ldrh	r3, [r3, #0]
 8015ed8:	18d3      	adds	r3, r2, r3
 8015eda:	2203      	movs	r2, #3
 8015edc:	0019      	movs	r1, r3
 8015ede:	f003 f833 	bl	8018f48 <memcpy1>
    bufItr = bufItr + 3;
 8015ee2:	193b      	adds	r3, r7, r4
 8015ee4:	193a      	adds	r2, r7, r4
 8015ee6:	8812      	ldrh	r2, [r2, #0]
 8015ee8:	3203      	adds	r2, #3
 8015eea:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	3309      	adds	r3, #9
 8015ef0:	0018      	movs	r0, r3
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681a      	ldr	r2, [r3, #0]
 8015ef6:	193b      	adds	r3, r7, r4
 8015ef8:	881b      	ldrh	r3, [r3, #0]
 8015efa:	18d3      	adds	r3, r2, r3
 8015efc:	2203      	movs	r2, #3
 8015efe:	0019      	movs	r1, r3
 8015f00:	f003 f822 	bl	8018f48 <memcpy1>
    bufItr = bufItr + 3;
 8015f04:	193b      	adds	r3, r7, r4
 8015f06:	193a      	adds	r2, r7, r4
 8015f08:	8812      	ldrh	r2, [r2, #0]
 8015f0a:	3203      	adds	r2, #3
 8015f0c:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681a      	ldr	r2, [r3, #0]
 8015f12:	193b      	adds	r3, r7, r4
 8015f14:	881b      	ldrh	r3, [r3, #0]
 8015f16:	1939      	adds	r1, r7, r4
 8015f18:	1c58      	adds	r0, r3, #1
 8015f1a:	8008      	strh	r0, [r1, #0]
 8015f1c:	18d3      	adds	r3, r2, r3
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	001a      	movs	r2, r3
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	193b      	adds	r3, r7, r4
 8015f2c:	881b      	ldrh	r3, [r3, #0]
 8015f2e:	1939      	adds	r1, r7, r4
 8015f30:	1c58      	adds	r0, r3, #1
 8015f32:	8008      	strh	r0, [r1, #0]
 8015f34:	18d3      	adds	r3, r2, r3
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	021a      	lsls	r2, r3, #8
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	431a      	orrs	r2, r3
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681a      	ldr	r2, [r3, #0]
 8015f48:	193b      	adds	r3, r7, r4
 8015f4a:	881b      	ldrh	r3, [r3, #0]
 8015f4c:	1939      	adds	r1, r7, r4
 8015f4e:	1c58      	adds	r0, r3, #1
 8015f50:	8008      	strh	r0, [r1, #0]
 8015f52:	18d3      	adds	r3, r2, r3
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	041a      	lsls	r2, r3, #16
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	68db      	ldr	r3, [r3, #12]
 8015f5c:	431a      	orrs	r2, r3
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	193b      	adds	r3, r7, r4
 8015f68:	881b      	ldrh	r3, [r3, #0]
 8015f6a:	1939      	adds	r1, r7, r4
 8015f6c:	1c58      	adds	r0, r3, #1
 8015f6e:	8008      	strh	r0, [r1, #0]
 8015f70:	18d3      	adds	r3, r2, r3
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	061a      	lsls	r2, r3, #24
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	431a      	orrs	r2, r3
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681a      	ldr	r2, [r3, #0]
 8015f84:	193b      	adds	r3, r7, r4
 8015f86:	881b      	ldrh	r3, [r3, #0]
 8015f88:	1939      	adds	r1, r7, r4
 8015f8a:	1c58      	adds	r0, r3, #1
 8015f8c:	8008      	strh	r0, [r1, #0]
 8015f8e:	18d3      	adds	r3, r2, r3
 8015f90:	781a      	ldrb	r2, [r3, #0]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	193b      	adds	r3, r7, r4
 8015f9c:	881b      	ldrh	r3, [r3, #0]
 8015f9e:	1939      	adds	r1, r7, r4
 8015fa0:	1c58      	adds	r0, r3, #1
 8015fa2:	8008      	strh	r0, [r1, #0]
 8015fa4:	18d3      	adds	r3, r2, r3
 8015fa6:	781a      	ldrb	r2, [r3, #0]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	791b      	ldrb	r3, [r3, #4]
 8015fb0:	1f1a      	subs	r2, r3, #4
 8015fb2:	193b      	adds	r3, r7, r4
 8015fb4:	881b      	ldrh	r3, [r3, #0]
 8015fb6:	1ad3      	subs	r3, r2, r3
 8015fb8:	2b10      	cmp	r3, #16
 8015fba:	d111      	bne.n	8015fe0 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	3312      	adds	r3, #18
 8015fc0:	0018      	movs	r0, r3
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681a      	ldr	r2, [r3, #0]
 8015fc6:	193b      	adds	r3, r7, r4
 8015fc8:	881b      	ldrh	r3, [r3, #0]
 8015fca:	18d3      	adds	r3, r2, r3
 8015fcc:	2210      	movs	r2, #16
 8015fce:	0019      	movs	r1, r3
 8015fd0:	f002 ffba 	bl	8018f48 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015fd4:	193b      	adds	r3, r7, r4
 8015fd6:	193a      	adds	r2, r7, r4
 8015fd8:	8812      	ldrh	r2, [r2, #0]
 8015fda:	3210      	adds	r2, #16
 8015fdc:	801a      	strh	r2, [r3, #0]
 8015fde:	e00a      	b.n	8015ff6 <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	791b      	ldrb	r3, [r3, #4]
 8015fe4:	1f1a      	subs	r2, r3, #4
 8015fe6:	230e      	movs	r3, #14
 8015fe8:	18fb      	adds	r3, r7, r3
 8015fea:	881b      	ldrh	r3, [r3, #0]
 8015fec:	1ad3      	subs	r3, r2, r3
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	dd01      	ble.n	8015ff6 <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	e03a      	b.n	801606c <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681a      	ldr	r2, [r3, #0]
 8015ffa:	240e      	movs	r4, #14
 8015ffc:	193b      	adds	r3, r7, r4
 8015ffe:	881b      	ldrh	r3, [r3, #0]
 8016000:	1939      	adds	r1, r7, r4
 8016002:	1c58      	adds	r0, r3, #1
 8016004:	8008      	strh	r0, [r1, #0]
 8016006:	18d3      	adds	r3, r2, r3
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	001a      	movs	r2, r3
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681a      	ldr	r2, [r3, #0]
 8016014:	193b      	adds	r3, r7, r4
 8016016:	881b      	ldrh	r3, [r3, #0]
 8016018:	1939      	adds	r1, r7, r4
 801601a:	1c58      	adds	r0, r3, #1
 801601c:	8008      	strh	r0, [r1, #0]
 801601e:	18d3      	adds	r3, r2, r3
 8016020:	781b      	ldrb	r3, [r3, #0]
 8016022:	021a      	lsls	r2, r3, #8
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016028:	431a      	orrs	r2, r3
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681a      	ldr	r2, [r3, #0]
 8016032:	193b      	adds	r3, r7, r4
 8016034:	881b      	ldrh	r3, [r3, #0]
 8016036:	1939      	adds	r1, r7, r4
 8016038:	1c58      	adds	r0, r3, #1
 801603a:	8008      	strh	r0, [r1, #0]
 801603c:	18d3      	adds	r3, r2, r3
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	041a      	lsls	r2, r3, #16
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016046:	431a      	orrs	r2, r3
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681a      	ldr	r2, [r3, #0]
 8016050:	193b      	adds	r3, r7, r4
 8016052:	881b      	ldrh	r3, [r3, #0]
 8016054:	1939      	adds	r1, r7, r4
 8016056:	1c58      	adds	r0, r3, #1
 8016058:	8008      	strh	r0, [r1, #0]
 801605a:	18d3      	adds	r3, r2, r3
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	061a      	lsls	r2, r3, #24
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016064:	431a      	orrs	r2, r3
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801606a:	2300      	movs	r3, #0
}
 801606c:	0018      	movs	r0, r3
 801606e:	46bd      	mov	sp, r7
 8016070:	b005      	add	sp, #20
 8016072:	bd90      	pop	{r4, r7, pc}

08016074 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016074:	b590      	push	{r4, r7, lr}
 8016076:	b085      	sub	sp, #20
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d003      	beq.n	801608a <LoRaMacParserData+0x16>
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d101      	bne.n	801608e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801608a:	2302      	movs	r3, #2
 801608c:	e0fe      	b.n	801628c <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 801608e:	240e      	movs	r4, #14
 8016090:	193b      	adds	r3, r7, r4
 8016092:	2200      	movs	r2, #0
 8016094:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	193b      	adds	r3, r7, r4
 801609c:	881b      	ldrh	r3, [r3, #0]
 801609e:	1939      	adds	r1, r7, r4
 80160a0:	1c58      	adds	r0, r3, #1
 80160a2:	8008      	strh	r0, [r1, #0]
 80160a4:	18d3      	adds	r3, r2, r3
 80160a6:	781a      	ldrb	r2, [r3, #0]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	681a      	ldr	r2, [r3, #0]
 80160b0:	193b      	adds	r3, r7, r4
 80160b2:	881b      	ldrh	r3, [r3, #0]
 80160b4:	1939      	adds	r1, r7, r4
 80160b6:	1c58      	adds	r0, r3, #1
 80160b8:	8008      	strh	r0, [r1, #0]
 80160ba:	18d3      	adds	r3, r2, r3
 80160bc:	781b      	ldrb	r3, [r3, #0]
 80160be:	001a      	movs	r2, r3
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681a      	ldr	r2, [r3, #0]
 80160c8:	193b      	adds	r3, r7, r4
 80160ca:	881b      	ldrh	r3, [r3, #0]
 80160cc:	1939      	adds	r1, r7, r4
 80160ce:	1c58      	adds	r0, r3, #1
 80160d0:	8008      	strh	r0, [r1, #0]
 80160d2:	18d3      	adds	r3, r2, r3
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	021a      	lsls	r2, r3, #8
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	689b      	ldr	r3, [r3, #8]
 80160dc:	431a      	orrs	r2, r3
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681a      	ldr	r2, [r3, #0]
 80160e6:	193b      	adds	r3, r7, r4
 80160e8:	881b      	ldrh	r3, [r3, #0]
 80160ea:	1939      	adds	r1, r7, r4
 80160ec:	1c58      	adds	r0, r3, #1
 80160ee:	8008      	strh	r0, [r1, #0]
 80160f0:	18d3      	adds	r3, r2, r3
 80160f2:	781b      	ldrb	r3, [r3, #0]
 80160f4:	041a      	lsls	r2, r3, #16
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	689b      	ldr	r3, [r3, #8]
 80160fa:	431a      	orrs	r2, r3
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	193b      	adds	r3, r7, r4
 8016106:	881b      	ldrh	r3, [r3, #0]
 8016108:	1939      	adds	r1, r7, r4
 801610a:	1c58      	adds	r0, r3, #1
 801610c:	8008      	strh	r0, [r1, #0]
 801610e:	18d3      	adds	r3, r2, r3
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	061a      	lsls	r2, r3, #24
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	689b      	ldr	r3, [r3, #8]
 8016118:	431a      	orrs	r2, r3
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681a      	ldr	r2, [r3, #0]
 8016122:	193b      	adds	r3, r7, r4
 8016124:	881b      	ldrh	r3, [r3, #0]
 8016126:	1939      	adds	r1, r7, r4
 8016128:	1c58      	adds	r0, r3, #1
 801612a:	8008      	strh	r0, [r1, #0]
 801612c:	18d3      	adds	r3, r2, r3
 801612e:	781a      	ldrb	r2, [r3, #0]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	193b      	adds	r3, r7, r4
 801613a:	881b      	ldrh	r3, [r3, #0]
 801613c:	1939      	adds	r1, r7, r4
 801613e:	1c58      	adds	r0, r3, #1
 8016140:	8008      	strh	r0, [r1, #0]
 8016142:	18d3      	adds	r3, r2, r3
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	b29a      	uxth	r2, r3
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	193b      	adds	r3, r7, r4
 8016152:	881b      	ldrh	r3, [r3, #0]
 8016154:	1939      	adds	r1, r7, r4
 8016156:	1c58      	adds	r0, r3, #1
 8016158:	8008      	strh	r0, [r1, #0]
 801615a:	18d3      	adds	r3, r2, r3
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	0219      	lsls	r1, r3, #8
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	89db      	ldrh	r3, [r3, #14]
 8016164:	b21a      	sxth	r2, r3
 8016166:	b20b      	sxth	r3, r1
 8016168:	4313      	orrs	r3, r2
 801616a:	b21b      	sxth	r3, r3
 801616c:	b29a      	uxth	r2, r3
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	3310      	adds	r3, #16
 8016176:	0018      	movs	r0, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681a      	ldr	r2, [r3, #0]
 801617c:	193b      	adds	r3, r7, r4
 801617e:	881b      	ldrh	r3, [r3, #0]
 8016180:	18d1      	adds	r1, r2, r3
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	7b1b      	ldrb	r3, [r3, #12]
 8016186:	071b      	lsls	r3, r3, #28
 8016188:	0f1b      	lsrs	r3, r3, #28
 801618a:	b2db      	uxtb	r3, r3
 801618c:	b29b      	uxth	r3, r3
 801618e:	001a      	movs	r2, r3
 8016190:	f002 feda 	bl	8018f48 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	7b1b      	ldrb	r3, [r3, #12]
 8016198:	071b      	lsls	r3, r3, #28
 801619a:	0f1b      	lsrs	r3, r3, #28
 801619c:	b2db      	uxtb	r3, r3
 801619e:	b299      	uxth	r1, r3
 80161a0:	193b      	adds	r3, r7, r4
 80161a2:	193a      	adds	r2, r7, r4
 80161a4:	8812      	ldrh	r2, [r2, #0]
 80161a6:	188a      	adds	r2, r1, r2
 80161a8:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2220      	movs	r2, #32
 80161ae:	2100      	movs	r1, #0
 80161b0:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2228      	movs	r2, #40	; 0x28
 80161b6:	2100      	movs	r1, #0
 80161b8:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	791b      	ldrb	r3, [r3, #4]
 80161be:	001a      	movs	r2, r3
 80161c0:	193b      	adds	r3, r7, r4
 80161c2:	881b      	ldrh	r3, [r3, #0]
 80161c4:	1ad3      	subs	r3, r2, r3
 80161c6:	2b04      	cmp	r3, #4
 80161c8:	dd2e      	ble.n	8016228 <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681a      	ldr	r2, [r3, #0]
 80161ce:	193b      	adds	r3, r7, r4
 80161d0:	881b      	ldrh	r3, [r3, #0]
 80161d2:	1939      	adds	r1, r7, r4
 80161d4:	1c58      	adds	r0, r3, #1
 80161d6:	8008      	strh	r0, [r1, #0]
 80161d8:	18d3      	adds	r3, r2, r3
 80161da:	7819      	ldrb	r1, [r3, #0]
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2220      	movs	r2, #32
 80161e0:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	791a      	ldrb	r2, [r3, #4]
 80161e6:	193b      	adds	r3, r7, r4
 80161e8:	881b      	ldrh	r3, [r3, #0]
 80161ea:	b2db      	uxtb	r3, r3
 80161ec:	1ad3      	subs	r3, r2, r3
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	3b04      	subs	r3, #4
 80161f2:	b2d9      	uxtb	r1, r3
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2228      	movs	r2, #40	; 0x28
 80161f8:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681a      	ldr	r2, [r3, #0]
 8016202:	193b      	adds	r3, r7, r4
 8016204:	881b      	ldrh	r3, [r3, #0]
 8016206:	18d1      	adds	r1, r2, r3
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2228      	movs	r2, #40	; 0x28
 801620c:	5c9b      	ldrb	r3, [r3, r2]
 801620e:	b29b      	uxth	r3, r3
 8016210:	001a      	movs	r2, r3
 8016212:	f002 fe99 	bl	8018f48 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2228      	movs	r2, #40	; 0x28
 801621a:	5c9b      	ldrb	r3, [r3, r2]
 801621c:	b299      	uxth	r1, r3
 801621e:	193b      	adds	r3, r7, r4
 8016220:	193a      	adds	r2, r7, r4
 8016222:	8812      	ldrh	r2, [r2, #0]
 8016224:	188a      	adds	r2, r1, r2
 8016226:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	791b      	ldrb	r3, [r3, #4]
 8016230:	3b04      	subs	r3, #4
 8016232:	18d3      	adds	r3, r2, r3
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	001a      	movs	r2, r3
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6819      	ldr	r1, [r3, #0]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	791b      	ldrb	r3, [r3, #4]
 8016248:	3b03      	subs	r3, #3
 801624a:	18cb      	adds	r3, r1, r3
 801624c:	781b      	ldrb	r3, [r3, #0]
 801624e:	021b      	lsls	r3, r3, #8
 8016250:	431a      	orrs	r2, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6819      	ldr	r1, [r3, #0]
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	791b      	ldrb	r3, [r3, #4]
 8016262:	3b02      	subs	r3, #2
 8016264:	18cb      	adds	r3, r1, r3
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	041b      	lsls	r3, r3, #16
 801626a:	431a      	orrs	r2, r3
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	6819      	ldr	r1, [r3, #0]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	791b      	ldrb	r3, [r3, #4]
 801627c:	3b01      	subs	r3, #1
 801627e:	18cb      	adds	r3, r1, r3
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	061b      	lsls	r3, r3, #24
 8016284:	431a      	orrs	r2, r3
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801628a:	2300      	movs	r3, #0
}
 801628c:	0018      	movs	r0, r3
 801628e:	46bd      	mov	sp, r7
 8016290:	b005      	add	sp, #20
 8016292:	bd90      	pop	{r4, r7, pc}

08016294 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016294:	b5b0      	push	{r4, r5, r7, lr}
 8016296:	b084      	sub	sp, #16
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d003      	beq.n	80162aa <LoRaMacSerializerJoinRequest+0x16>
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d101      	bne.n	80162ae <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80162aa:	2301      	movs	r3, #1
 80162ac:	e089      	b.n	80163c2 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 80162ae:	230e      	movs	r3, #14
 80162b0:	18fb      	adds	r3, r7, r3
 80162b2:	2200      	movs	r2, #0
 80162b4:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	791b      	ldrb	r3, [r3, #4]
 80162ba:	2b16      	cmp	r3, #22
 80162bc:	d801      	bhi.n	80162c2 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80162be:	2302      	movs	r3, #2
 80162c0:	e07f      	b.n	80163c2 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	240e      	movs	r4, #14
 80162c8:	193b      	adds	r3, r7, r4
 80162ca:	881b      	ldrh	r3, [r3, #0]
 80162cc:	1939      	adds	r1, r7, r4
 80162ce:	1c58      	adds	r0, r3, #1
 80162d0:	8008      	strh	r0, [r1, #0]
 80162d2:	18d3      	adds	r3, r2, r3
 80162d4:	687a      	ldr	r2, [r7, #4]
 80162d6:	7952      	ldrb	r2, [r2, #5]
 80162d8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	193b      	adds	r3, r7, r4
 80162e0:	881b      	ldrh	r3, [r3, #0]
 80162e2:	18d0      	adds	r0, r2, r3
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	3306      	adds	r3, #6
 80162e8:	2208      	movs	r2, #8
 80162ea:	0019      	movs	r1, r3
 80162ec:	f002 fe48 	bl	8018f80 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80162f0:	193b      	adds	r3, r7, r4
 80162f2:	193a      	adds	r2, r7, r4
 80162f4:	8812      	ldrh	r2, [r2, #0]
 80162f6:	3208      	adds	r2, #8
 80162f8:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	193b      	adds	r3, r7, r4
 8016300:	881b      	ldrh	r3, [r3, #0]
 8016302:	18d0      	adds	r0, r2, r3
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	330e      	adds	r3, #14
 8016308:	2208      	movs	r2, #8
 801630a:	0019      	movs	r1, r3
 801630c:	f002 fe38 	bl	8018f80 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016310:	193b      	adds	r3, r7, r4
 8016312:	0025      	movs	r5, r4
 8016314:	193a      	adds	r2, r7, r4
 8016316:	8812      	ldrh	r2, [r2, #0]
 8016318:	3208      	adds	r2, #8
 801631a:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	8ad8      	ldrh	r0, [r3, #22]
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681a      	ldr	r2, [r3, #0]
 8016324:	197b      	adds	r3, r7, r5
 8016326:	881b      	ldrh	r3, [r3, #0]
 8016328:	1979      	adds	r1, r7, r5
 801632a:	1c5c      	adds	r4, r3, #1
 801632c:	800c      	strh	r4, [r1, #0]
 801632e:	18d3      	adds	r3, r2, r3
 8016330:	b2c2      	uxtb	r2, r0
 8016332:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	8adb      	ldrh	r3, [r3, #22]
 8016338:	0a1b      	lsrs	r3, r3, #8
 801633a:	b298      	uxth	r0, r3
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681a      	ldr	r2, [r3, #0]
 8016340:	197b      	adds	r3, r7, r5
 8016342:	881b      	ldrh	r3, [r3, #0]
 8016344:	1979      	adds	r1, r7, r5
 8016346:	1c5c      	adds	r4, r3, #1
 8016348:	800c      	strh	r4, [r1, #0]
 801634a:	18d3      	adds	r3, r2, r3
 801634c:	b2c2      	uxtb	r2, r0
 801634e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	6998      	ldr	r0, [r3, #24]
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	197b      	adds	r3, r7, r5
 801635a:	881b      	ldrh	r3, [r3, #0]
 801635c:	1979      	adds	r1, r7, r5
 801635e:	1c5c      	adds	r4, r3, #1
 8016360:	800c      	strh	r4, [r1, #0]
 8016362:	18d3      	adds	r3, r2, r3
 8016364:	b2c2      	uxtb	r2, r0
 8016366:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	699b      	ldr	r3, [r3, #24]
 801636c:	0a18      	lsrs	r0, r3, #8
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	197b      	adds	r3, r7, r5
 8016374:	881b      	ldrh	r3, [r3, #0]
 8016376:	1979      	adds	r1, r7, r5
 8016378:	1c5c      	adds	r4, r3, #1
 801637a:	800c      	strh	r4, [r1, #0]
 801637c:	18d3      	adds	r3, r2, r3
 801637e:	b2c2      	uxtb	r2, r0
 8016380:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	699b      	ldr	r3, [r3, #24]
 8016386:	0c18      	lsrs	r0, r3, #16
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	197b      	adds	r3, r7, r5
 801638e:	881b      	ldrh	r3, [r3, #0]
 8016390:	1979      	adds	r1, r7, r5
 8016392:	1c5c      	adds	r4, r3, #1
 8016394:	800c      	strh	r4, [r1, #0]
 8016396:	18d3      	adds	r3, r2, r3
 8016398:	b2c2      	uxtb	r2, r0
 801639a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	699b      	ldr	r3, [r3, #24]
 80163a0:	0e18      	lsrs	r0, r3, #24
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681a      	ldr	r2, [r3, #0]
 80163a6:	197b      	adds	r3, r7, r5
 80163a8:	881b      	ldrh	r3, [r3, #0]
 80163aa:	1979      	adds	r1, r7, r5
 80163ac:	1c5c      	adds	r4, r3, #1
 80163ae:	800c      	strh	r4, [r1, #0]
 80163b0:	18d3      	adds	r3, r2, r3
 80163b2:	b2c2      	uxtb	r2, r0
 80163b4:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80163b6:	197b      	adds	r3, r7, r5
 80163b8:	881b      	ldrh	r3, [r3, #0]
 80163ba:	b2da      	uxtb	r2, r3
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80163c0:	2300      	movs	r3, #0
}
 80163c2:	0018      	movs	r0, r3
 80163c4:	46bd      	mov	sp, r7
 80163c6:	b004      	add	sp, #16
 80163c8:	bdb0      	pop	{r4, r5, r7, pc}

080163ca <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80163ca:	b5b0      	push	{r4, r5, r7, lr}
 80163cc:	b084      	sub	sp, #16
 80163ce:	af00      	add	r7, sp, #0
 80163d0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d003      	beq.n	80163e0 <LoRaMacSerializerData+0x16>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d101      	bne.n	80163e4 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80163e0:	2301      	movs	r3, #1
 80163e2:	e119      	b.n	8016618 <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 80163e4:	230e      	movs	r3, #14
 80163e6:	18fb      	adds	r3, r7, r3
 80163e8:	2200      	movs	r2, #0
 80163ea:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80163ec:	200c      	movs	r0, #12
 80163ee:	183b      	adds	r3, r7, r0
 80163f0:	2208      	movs	r2, #8
 80163f2:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	7b1b      	ldrb	r3, [r3, #12]
 80163f8:	071b      	lsls	r3, r3, #28
 80163fa:	0f1b      	lsrs	r3, r3, #28
 80163fc:	b2db      	uxtb	r3, r3
 80163fe:	b299      	uxth	r1, r3
 8016400:	183b      	adds	r3, r7, r0
 8016402:	183a      	adds	r2, r7, r0
 8016404:	8812      	ldrh	r2, [r2, #0]
 8016406:	188a      	adds	r2, r1, r2
 8016408:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	2228      	movs	r2, #40	; 0x28
 801640e:	5c9b      	ldrb	r3, [r3, r2]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d004      	beq.n	801641e <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016414:	183b      	adds	r3, r7, r0
 8016416:	183a      	adds	r2, r7, r0
 8016418:	8812      	ldrh	r2, [r2, #0]
 801641a:	3201      	adds	r2, #1
 801641c:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2228      	movs	r2, #40	; 0x28
 8016422:	5c9b      	ldrb	r3, [r3, r2]
 8016424:	b299      	uxth	r1, r3
 8016426:	200c      	movs	r0, #12
 8016428:	183b      	adds	r3, r7, r0
 801642a:	183a      	adds	r2, r7, r0
 801642c:	8812      	ldrh	r2, [r2, #0]
 801642e:	188a      	adds	r2, r1, r2
 8016430:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8016432:	0001      	movs	r1, r0
 8016434:	187b      	adds	r3, r7, r1
 8016436:	187a      	adds	r2, r7, r1
 8016438:	8812      	ldrh	r2, [r2, #0]
 801643a:	3204      	adds	r2, #4
 801643c:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	791b      	ldrb	r3, [r3, #4]
 8016442:	b29b      	uxth	r3, r3
 8016444:	187a      	adds	r2, r7, r1
 8016446:	8812      	ldrh	r2, [r2, #0]
 8016448:	429a      	cmp	r2, r3
 801644a:	d901      	bls.n	8016450 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801644c:	2302      	movs	r3, #2
 801644e:	e0e3      	b.n	8016618 <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681a      	ldr	r2, [r3, #0]
 8016454:	250e      	movs	r5, #14
 8016456:	197b      	adds	r3, r7, r5
 8016458:	881b      	ldrh	r3, [r3, #0]
 801645a:	1979      	adds	r1, r7, r5
 801645c:	1c58      	adds	r0, r3, #1
 801645e:	8008      	strh	r0, [r1, #0]
 8016460:	18d3      	adds	r3, r2, r3
 8016462:	687a      	ldr	r2, [r7, #4]
 8016464:	7952      	ldrb	r2, [r2, #5]
 8016466:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6898      	ldr	r0, [r3, #8]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681a      	ldr	r2, [r3, #0]
 8016470:	197b      	adds	r3, r7, r5
 8016472:	881b      	ldrh	r3, [r3, #0]
 8016474:	1979      	adds	r1, r7, r5
 8016476:	1c5c      	adds	r4, r3, #1
 8016478:	800c      	strh	r4, [r1, #0]
 801647a:	18d3      	adds	r3, r2, r3
 801647c:	b2c2      	uxtb	r2, r0
 801647e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	689b      	ldr	r3, [r3, #8]
 8016484:	0a18      	lsrs	r0, r3, #8
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681a      	ldr	r2, [r3, #0]
 801648a:	197b      	adds	r3, r7, r5
 801648c:	881b      	ldrh	r3, [r3, #0]
 801648e:	1979      	adds	r1, r7, r5
 8016490:	1c5c      	adds	r4, r3, #1
 8016492:	800c      	strh	r4, [r1, #0]
 8016494:	18d3      	adds	r3, r2, r3
 8016496:	b2c2      	uxtb	r2, r0
 8016498:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	689b      	ldr	r3, [r3, #8]
 801649e:	0c18      	lsrs	r0, r3, #16
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681a      	ldr	r2, [r3, #0]
 80164a4:	197b      	adds	r3, r7, r5
 80164a6:	881b      	ldrh	r3, [r3, #0]
 80164a8:	1979      	adds	r1, r7, r5
 80164aa:	1c5c      	adds	r4, r3, #1
 80164ac:	800c      	strh	r4, [r1, #0]
 80164ae:	18d3      	adds	r3, r2, r3
 80164b0:	b2c2      	uxtb	r2, r0
 80164b2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	689b      	ldr	r3, [r3, #8]
 80164b8:	0e18      	lsrs	r0, r3, #24
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681a      	ldr	r2, [r3, #0]
 80164be:	197b      	adds	r3, r7, r5
 80164c0:	881b      	ldrh	r3, [r3, #0]
 80164c2:	1979      	adds	r1, r7, r5
 80164c4:	1c5c      	adds	r4, r3, #1
 80164c6:	800c      	strh	r4, [r1, #0]
 80164c8:	18d3      	adds	r3, r2, r3
 80164ca:	b2c2      	uxtb	r2, r0
 80164cc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681a      	ldr	r2, [r3, #0]
 80164d2:	197b      	adds	r3, r7, r5
 80164d4:	881b      	ldrh	r3, [r3, #0]
 80164d6:	1979      	adds	r1, r7, r5
 80164d8:	1c58      	adds	r0, r3, #1
 80164da:	8008      	strh	r0, [r1, #0]
 80164dc:	18d3      	adds	r3, r2, r3
 80164de:	687a      	ldr	r2, [r7, #4]
 80164e0:	7b12      	ldrb	r2, [r2, #12]
 80164e2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	89d8      	ldrh	r0, [r3, #14]
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681a      	ldr	r2, [r3, #0]
 80164ec:	197b      	adds	r3, r7, r5
 80164ee:	881b      	ldrh	r3, [r3, #0]
 80164f0:	1979      	adds	r1, r7, r5
 80164f2:	1c5c      	adds	r4, r3, #1
 80164f4:	800c      	strh	r4, [r1, #0]
 80164f6:	18d3      	adds	r3, r2, r3
 80164f8:	b2c2      	uxtb	r2, r0
 80164fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	89db      	ldrh	r3, [r3, #14]
 8016500:	0a1b      	lsrs	r3, r3, #8
 8016502:	b298      	uxth	r0, r3
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	197b      	adds	r3, r7, r5
 801650a:	881b      	ldrh	r3, [r3, #0]
 801650c:	1979      	adds	r1, r7, r5
 801650e:	1c5c      	adds	r4, r3, #1
 8016510:	800c      	strh	r4, [r1, #0]
 8016512:	18d3      	adds	r3, r2, r3
 8016514:	b2c2      	uxtb	r2, r0
 8016516:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	002c      	movs	r4, r5
 801651e:	197b      	adds	r3, r7, r5
 8016520:	881b      	ldrh	r3, [r3, #0]
 8016522:	18d0      	adds	r0, r2, r3
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	3310      	adds	r3, #16
 8016528:	0019      	movs	r1, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	7b1b      	ldrb	r3, [r3, #12]
 801652e:	071b      	lsls	r3, r3, #28
 8016530:	0f1b      	lsrs	r3, r3, #28
 8016532:	b2db      	uxtb	r3, r3
 8016534:	b29b      	uxth	r3, r3
 8016536:	001a      	movs	r2, r3
 8016538:	f002 fd06 	bl	8018f48 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	7b1b      	ldrb	r3, [r3, #12]
 8016540:	071b      	lsls	r3, r3, #28
 8016542:	0f1b      	lsrs	r3, r3, #28
 8016544:	b2db      	uxtb	r3, r3
 8016546:	b299      	uxth	r1, r3
 8016548:	193b      	adds	r3, r7, r4
 801654a:	193a      	adds	r2, r7, r4
 801654c:	8812      	ldrh	r2, [r2, #0]
 801654e:	188a      	adds	r2, r1, r2
 8016550:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2228      	movs	r2, #40	; 0x28
 8016556:	5c9b      	ldrb	r3, [r3, r2]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d00b      	beq.n	8016574 <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	681a      	ldr	r2, [r3, #0]
 8016560:	193b      	adds	r3, r7, r4
 8016562:	881b      	ldrh	r3, [r3, #0]
 8016564:	1939      	adds	r1, r7, r4
 8016566:	1c58      	adds	r0, r3, #1
 8016568:	8008      	strh	r0, [r1, #0]
 801656a:	18d3      	adds	r3, r2, r3
 801656c:	687a      	ldr	r2, [r7, #4]
 801656e:	2120      	movs	r1, #32
 8016570:	5c52      	ldrb	r2, [r2, r1]
 8016572:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681a      	ldr	r2, [r3, #0]
 8016578:	240e      	movs	r4, #14
 801657a:	193b      	adds	r3, r7, r4
 801657c:	881b      	ldrh	r3, [r3, #0]
 801657e:	18d0      	adds	r0, r2, r3
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2228      	movs	r2, #40	; 0x28
 8016588:	5c9b      	ldrb	r3, [r3, r2]
 801658a:	b29b      	uxth	r3, r3
 801658c:	001a      	movs	r2, r3
 801658e:	f002 fcdb 	bl	8018f48 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2228      	movs	r2, #40	; 0x28
 8016596:	5c9b      	ldrb	r3, [r3, r2]
 8016598:	b299      	uxth	r1, r3
 801659a:	193b      	adds	r3, r7, r4
 801659c:	193a      	adds	r2, r7, r4
 801659e:	8812      	ldrh	r2, [r2, #0]
 80165a0:	188a      	adds	r2, r1, r2
 80165a2:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	193b      	adds	r3, r7, r4
 80165ae:	881b      	ldrh	r3, [r3, #0]
 80165b0:	0025      	movs	r5, r4
 80165b2:	1939      	adds	r1, r7, r4
 80165b4:	1c5c      	adds	r4, r3, #1
 80165b6:	800c      	strh	r4, [r1, #0]
 80165b8:	18d3      	adds	r3, r2, r3
 80165ba:	b2c2      	uxtb	r2, r0
 80165bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165c2:	0a18      	lsrs	r0, r3, #8
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681a      	ldr	r2, [r3, #0]
 80165c8:	197b      	adds	r3, r7, r5
 80165ca:	881b      	ldrh	r3, [r3, #0]
 80165cc:	1979      	adds	r1, r7, r5
 80165ce:	1c5c      	adds	r4, r3, #1
 80165d0:	800c      	strh	r4, [r1, #0]
 80165d2:	18d3      	adds	r3, r2, r3
 80165d4:	b2c2      	uxtb	r2, r0
 80165d6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165dc:	0c18      	lsrs	r0, r3, #16
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681a      	ldr	r2, [r3, #0]
 80165e2:	197b      	adds	r3, r7, r5
 80165e4:	881b      	ldrh	r3, [r3, #0]
 80165e6:	1979      	adds	r1, r7, r5
 80165e8:	1c5c      	adds	r4, r3, #1
 80165ea:	800c      	strh	r4, [r1, #0]
 80165ec:	18d3      	adds	r3, r2, r3
 80165ee:	b2c2      	uxtb	r2, r0
 80165f0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165f6:	0e18      	lsrs	r0, r3, #24
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681a      	ldr	r2, [r3, #0]
 80165fc:	197b      	adds	r3, r7, r5
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	1979      	adds	r1, r7, r5
 8016602:	1c5c      	adds	r4, r3, #1
 8016604:	800c      	strh	r4, [r1, #0]
 8016606:	18d3      	adds	r3, r2, r3
 8016608:	b2c2      	uxtb	r2, r0
 801660a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801660c:	197b      	adds	r3, r7, r5
 801660e:	881b      	ldrh	r3, [r3, #0]
 8016610:	b2da      	uxtb	r2, r3
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016616:	2300      	movs	r3, #0
}
 8016618:	0018      	movs	r0, r3
 801661a:	46bd      	mov	sp, r7
 801661c:	b004      	add	sp, #16
 801661e:	bdb0      	pop	{r4, r5, r7, pc}

08016620 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
 8016626:	0002      	movs	r2, r0
 8016628:	1dfb      	adds	r3, r7, #7
 801662a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801662c:	1dfb      	adds	r3, r7, #7
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	2b05      	cmp	r3, #5
 8016632:	d101      	bne.n	8016638 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016634:	2301      	movs	r3, #1
 8016636:	e000      	b.n	801663a <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016638:	2300      	movs	r3, #0
        }
    }
}
 801663a:	0018      	movs	r0, r3
 801663c:	46bd      	mov	sp, r7
 801663e:	b002      	add	sp, #8
 8016640:	bd80      	pop	{r7, pc}

08016642 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016642:	b580      	push	{r7, lr}
 8016644:	b084      	sub	sp, #16
 8016646:	af00      	add	r7, sp, #0
 8016648:	0002      	movs	r2, r0
 801664a:	6039      	str	r1, [r7, #0]
 801664c:	1dfb      	adds	r3, r7, #7
 801664e:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016650:	2308      	movs	r3, #8
 8016652:	18fb      	adds	r3, r7, r3
 8016654:	2200      	movs	r2, #0
 8016656:	601a      	str	r2, [r3, #0]
    switch( region )
 8016658:	1dfb      	adds	r3, r7, #7
 801665a:	781b      	ldrb	r3, [r3, #0]
 801665c:	2b05      	cmp	r3, #5
 801665e:	d109      	bne.n	8016674 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	0018      	movs	r0, r3
 8016664:	f001 fa52 	bl	8017b0c <RegionEU868GetPhyParam>
 8016668:	0003      	movs	r3, r0
 801666a:	001a      	movs	r2, r3
 801666c:	230c      	movs	r3, #12
 801666e:	18fb      	adds	r3, r7, r3
 8016670:	601a      	str	r2, [r3, #0]
 8016672:	e005      	b.n	8016680 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016674:	230c      	movs	r3, #12
 8016676:	18fb      	adds	r3, r7, r3
 8016678:	2208      	movs	r2, #8
 801667a:	18ba      	adds	r2, r7, r2
 801667c:	6812      	ldr	r2, [r2, #0]
 801667e:	601a      	str	r2, [r3, #0]
        }
    }
}
 8016680:	230c      	movs	r3, #12
 8016682:	18fb      	adds	r3, r7, r3
 8016684:	681a      	ldr	r2, [r3, #0]
 8016686:	0013      	movs	r3, r2
 8016688:	0018      	movs	r0, r3
 801668a:	46bd      	mov	sp, r7
 801668c:	b004      	add	sp, #16
 801668e:	bd80      	pop	{r7, pc}

08016690 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b082      	sub	sp, #8
 8016694:	af00      	add	r7, sp, #0
 8016696:	0002      	movs	r2, r0
 8016698:	6039      	str	r1, [r7, #0]
 801669a:	1dfb      	adds	r3, r7, #7
 801669c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801669e:	1dfb      	adds	r3, r7, #7
 80166a0:	781b      	ldrb	r3, [r3, #0]
 80166a2:	2b05      	cmp	r3, #5
 80166a4:	d104      	bne.n	80166b0 <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	0018      	movs	r0, r3
 80166aa:	f001 fb4f 	bl	8017d4c <RegionEU868SetBandTxDone>
 80166ae:	e000      	b.n	80166b2 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80166b0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80166b2:	46bd      	mov	sp, r7
 80166b4:	b002      	add	sp, #8
 80166b6:	bd80      	pop	{r7, pc}

080166b8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
 80166be:	0002      	movs	r2, r0
 80166c0:	6039      	str	r1, [r7, #0]
 80166c2:	1dfb      	adds	r3, r7, #7
 80166c4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80166c6:	1dfb      	adds	r3, r7, #7
 80166c8:	781b      	ldrb	r3, [r3, #0]
 80166ca:	2b05      	cmp	r3, #5
 80166cc:	d104      	bne.n	80166d8 <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80166ce:	683b      	ldr	r3, [r7, #0]
 80166d0:	0018      	movs	r0, r3
 80166d2:	f001 fb67 	bl	8017da4 <RegionEU868InitDefaults>
 80166d6:	e000      	b.n	80166da <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80166d8:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80166da:	46c0      	nop			; (mov r8, r8)
 80166dc:	46bd      	mov	sp, r7
 80166de:	b002      	add	sp, #8
 80166e0:	bd80      	pop	{r7, pc}

080166e2 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 80166e2:	b580      	push	{r7, lr}
 80166e4:	b082      	sub	sp, #8
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	0002      	movs	r2, r0
 80166ea:	6039      	str	r1, [r7, #0]
 80166ec:	1dfb      	adds	r3, r7, #7
 80166ee:	701a      	strb	r2, [r3, #0]
    switch( region )
 80166f0:	1dfb      	adds	r3, r7, #7
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	2b05      	cmp	r3, #5
 80166f6:	d105      	bne.n	8016704 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	0018      	movs	r0, r3
 80166fc:	f001 fbe6 	bl	8017ecc <RegionEU868GetNvmCtx>
 8016700:	0003      	movs	r3, r0
 8016702:	e000      	b.n	8016706 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8016704:	2300      	movs	r3, #0
        }
    }
}
 8016706:	0018      	movs	r0, r3
 8016708:	46bd      	mov	sp, r7
 801670a:	b002      	add	sp, #8
 801670c:	bd80      	pop	{r7, pc}

0801670e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801670e:	b580      	push	{r7, lr}
 8016710:	b082      	sub	sp, #8
 8016712:	af00      	add	r7, sp, #0
 8016714:	6039      	str	r1, [r7, #0]
 8016716:	0011      	movs	r1, r2
 8016718:	1dfb      	adds	r3, r7, #7
 801671a:	1c02      	adds	r2, r0, #0
 801671c:	701a      	strb	r2, [r3, #0]
 801671e:	1dbb      	adds	r3, r7, #6
 8016720:	1c0a      	adds	r2, r1, #0
 8016722:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016724:	1dfb      	adds	r3, r7, #7
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	2b05      	cmp	r3, #5
 801672a:	d108      	bne.n	801673e <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801672c:	1dbb      	adds	r3, r7, #6
 801672e:	781a      	ldrb	r2, [r3, #0]
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	0011      	movs	r1, r2
 8016734:	0018      	movs	r0, r3
 8016736:	f001 fbd9 	bl	8017eec <RegionEU868Verify>
 801673a:	0003      	movs	r3, r0
 801673c:	e000      	b.n	8016740 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801673e:	2300      	movs	r3, #0
        }
    }
}
 8016740:	0018      	movs	r0, r3
 8016742:	46bd      	mov	sp, r7
 8016744:	b002      	add	sp, #8
 8016746:	bd80      	pop	{r7, pc}

08016748 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	0002      	movs	r2, r0
 8016750:	6039      	str	r1, [r7, #0]
 8016752:	1dfb      	adds	r3, r7, #7
 8016754:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016756:	1dfb      	adds	r3, r7, #7
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	2b05      	cmp	r3, #5
 801675c:	d104      	bne.n	8016768 <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	0018      	movs	r0, r3
 8016762:	f001 fc1d 	bl	8017fa0 <RegionEU868ApplyCFList>
 8016766:	e000      	b.n	801676a <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016768:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801676a:	46c0      	nop			; (mov r8, r8)
 801676c:	46bd      	mov	sp, r7
 801676e:	b002      	add	sp, #8
 8016770:	bd80      	pop	{r7, pc}

08016772 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016772:	b580      	push	{r7, lr}
 8016774:	b082      	sub	sp, #8
 8016776:	af00      	add	r7, sp, #0
 8016778:	0002      	movs	r2, r0
 801677a:	6039      	str	r1, [r7, #0]
 801677c:	1dfb      	adds	r3, r7, #7
 801677e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016780:	1dfb      	adds	r3, r7, #7
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	2b05      	cmp	r3, #5
 8016786:	d105      	bne.n	8016794 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	0018      	movs	r0, r3
 801678c:	f001 fc98 	bl	80180c0 <RegionEU868ChanMaskSet>
 8016790:	0003      	movs	r3, r0
 8016792:	e000      	b.n	8016796 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016794:	2300      	movs	r3, #0
        }
    }
}
 8016796:	0018      	movs	r0, r3
 8016798:	46bd      	mov	sp, r7
 801679a:	b002      	add	sp, #8
 801679c:	bd80      	pop	{r7, pc}

0801679e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801679e:	b590      	push	{r4, r7, lr}
 80167a0:	b083      	sub	sp, #12
 80167a2:	af00      	add	r7, sp, #0
 80167a4:	0004      	movs	r4, r0
 80167a6:	0008      	movs	r0, r1
 80167a8:	0011      	movs	r1, r2
 80167aa:	603b      	str	r3, [r7, #0]
 80167ac:	1dfb      	adds	r3, r7, #7
 80167ae:	1c22      	adds	r2, r4, #0
 80167b0:	701a      	strb	r2, [r3, #0]
 80167b2:	1dbb      	adds	r3, r7, #6
 80167b4:	1c02      	adds	r2, r0, #0
 80167b6:	701a      	strb	r2, [r3, #0]
 80167b8:	1d7b      	adds	r3, r7, #5
 80167ba:	1c0a      	adds	r2, r1, #0
 80167bc:	701a      	strb	r2, [r3, #0]
    switch( region )
 80167be:	1dfb      	adds	r3, r7, #7
 80167c0:	781b      	ldrb	r3, [r3, #0]
 80167c2:	2b05      	cmp	r3, #5
 80167c4:	d10a      	bne.n	80167dc <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80167c6:	69bc      	ldr	r4, [r7, #24]
 80167c8:	683a      	ldr	r2, [r7, #0]
 80167ca:	1d7b      	adds	r3, r7, #5
 80167cc:	7819      	ldrb	r1, [r3, #0]
 80167ce:	1dbb      	adds	r3, r7, #6
 80167d0:	2000      	movs	r0, #0
 80167d2:	5618      	ldrsb	r0, [r3, r0]
 80167d4:	0023      	movs	r3, r4
 80167d6:	f001 fc99 	bl	801810c <RegionEU868ComputeRxWindowParameters>
 80167da:	e000      	b.n	80167de <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80167dc:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80167de:	46c0      	nop			; (mov r8, r8)
 80167e0:	46bd      	mov	sp, r7
 80167e2:	b003      	add	sp, #12
 80167e4:	bd90      	pop	{r4, r7, pc}

080167e6 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80167e6:	b580      	push	{r7, lr}
 80167e8:	b084      	sub	sp, #16
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	60b9      	str	r1, [r7, #8]
 80167ee:	607a      	str	r2, [r7, #4]
 80167f0:	210f      	movs	r1, #15
 80167f2:	187b      	adds	r3, r7, r1
 80167f4:	1c02      	adds	r2, r0, #0
 80167f6:	701a      	strb	r2, [r3, #0]
    switch( region )
 80167f8:	187b      	adds	r3, r7, r1
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	2b05      	cmp	r3, #5
 80167fe:	d107      	bne.n	8016810 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016800:	687a      	ldr	r2, [r7, #4]
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	0011      	movs	r1, r2
 8016806:	0018      	movs	r0, r3
 8016808:	f001 fce2 	bl	80181d0 <RegionEU868RxConfig>
 801680c:	0003      	movs	r3, r0
 801680e:	e000      	b.n	8016812 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016810:	2300      	movs	r3, #0
        }
    }
}
 8016812:	0018      	movs	r0, r3
 8016814:	46bd      	mov	sp, r7
 8016816:	b004      	add	sp, #16
 8016818:	bd80      	pop	{r7, pc}

0801681a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801681a:	b580      	push	{r7, lr}
 801681c:	b084      	sub	sp, #16
 801681e:	af00      	add	r7, sp, #0
 8016820:	60b9      	str	r1, [r7, #8]
 8016822:	607a      	str	r2, [r7, #4]
 8016824:	603b      	str	r3, [r7, #0]
 8016826:	210f      	movs	r1, #15
 8016828:	187b      	adds	r3, r7, r1
 801682a:	1c02      	adds	r2, r0, #0
 801682c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801682e:	187b      	adds	r3, r7, r1
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	2b05      	cmp	r3, #5
 8016834:	d107      	bne.n	8016846 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016836:	683a      	ldr	r2, [r7, #0]
 8016838:	6879      	ldr	r1, [r7, #4]
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	0018      	movs	r0, r3
 801683e:	f001 fdbb 	bl	80183b8 <RegionEU868TxConfig>
 8016842:	0003      	movs	r3, r0
 8016844:	e000      	b.n	8016848 <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016846:	2300      	movs	r3, #0
        }
    }
}
 8016848:	0018      	movs	r0, r3
 801684a:	46bd      	mov	sp, r7
 801684c:	b004      	add	sp, #16
 801684e:	bd80      	pop	{r7, pc}

08016850 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016850:	b590      	push	{r4, r7, lr}
 8016852:	b087      	sub	sp, #28
 8016854:	af02      	add	r7, sp, #8
 8016856:	60b9      	str	r1, [r7, #8]
 8016858:	607a      	str	r2, [r7, #4]
 801685a:	603b      	str	r3, [r7, #0]
 801685c:	210f      	movs	r1, #15
 801685e:	187b      	adds	r3, r7, r1
 8016860:	1c02      	adds	r2, r0, #0
 8016862:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016864:	187b      	adds	r3, r7, r1
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	2b05      	cmp	r3, #5
 801686a:	d10a      	bne.n	8016882 <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801686c:	6a3c      	ldr	r4, [r7, #32]
 801686e:	683a      	ldr	r2, [r7, #0]
 8016870:	6879      	ldr	r1, [r7, #4]
 8016872:	68b8      	ldr	r0, [r7, #8]
 8016874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016876:	9300      	str	r3, [sp, #0]
 8016878:	0023      	movs	r3, r4
 801687a:	f001 fe89 	bl	8018590 <RegionEU868LinkAdrReq>
 801687e:	0003      	movs	r3, r0
 8016880:	e000      	b.n	8016884 <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016882:	2300      	movs	r3, #0
        }
    }
}
 8016884:	0018      	movs	r0, r3
 8016886:	46bd      	mov	sp, r7
 8016888:	b005      	add	sp, #20
 801688a:	bd90      	pop	{r4, r7, pc}

0801688c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	0002      	movs	r2, r0
 8016894:	6039      	str	r1, [r7, #0]
 8016896:	1dfb      	adds	r3, r7, #7
 8016898:	701a      	strb	r2, [r3, #0]
    switch( region )
 801689a:	1dfb      	adds	r3, r7, #7
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	2b05      	cmp	r3, #5
 80168a0:	d105      	bne.n	80168ae <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	0018      	movs	r0, r3
 80168a6:	f001 ffcb 	bl	8018840 <RegionEU868RxParamSetupReq>
 80168aa:	0003      	movs	r3, r0
 80168ac:	e000      	b.n	80168b0 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80168ae:	2300      	movs	r3, #0
        }
    }
}
 80168b0:	0018      	movs	r0, r3
 80168b2:	46bd      	mov	sp, r7
 80168b4:	b002      	add	sp, #8
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	0002      	movs	r2, r0
 80168c0:	6039      	str	r1, [r7, #0]
 80168c2:	1dfb      	adds	r3, r7, #7
 80168c4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80168c6:	1dfb      	adds	r3, r7, #7
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	2b05      	cmp	r3, #5
 80168cc:	d105      	bne.n	80168da <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	0018      	movs	r0, r3
 80168d2:	f001 fffe 	bl	80188d2 <RegionEU868NewChannelReq>
 80168d6:	0003      	movs	r3, r0
 80168d8:	e000      	b.n	80168dc <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80168da:	2300      	movs	r3, #0
        }
    }
}
 80168dc:	0018      	movs	r0, r3
 80168de:	46bd      	mov	sp, r7
 80168e0:	b002      	add	sp, #8
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	0002      	movs	r2, r0
 80168ec:	6039      	str	r1, [r7, #0]
 80168ee:	1dfb      	adds	r3, r7, #7
 80168f0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80168f2:	1dfb      	adds	r3, r7, #7
 80168f4:	781b      	ldrb	r3, [r3, #0]
 80168f6:	2b05      	cmp	r3, #5
 80168f8:	d105      	bne.n	8016906 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	0018      	movs	r0, r3
 80168fe:	f002 f850 	bl	80189a2 <RegionEU868TxParamSetupReq>
 8016902:	0003      	movs	r3, r0
 8016904:	e000      	b.n	8016908 <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016906:	2300      	movs	r3, #0
        }
    }
}
 8016908:	0018      	movs	r0, r3
 801690a:	46bd      	mov	sp, r7
 801690c:	b002      	add	sp, #8
 801690e:	bd80      	pop	{r7, pc}

08016910 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	0002      	movs	r2, r0
 8016918:	6039      	str	r1, [r7, #0]
 801691a:	1dfb      	adds	r3, r7, #7
 801691c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801691e:	1dfb      	adds	r3, r7, #7
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	2b05      	cmp	r3, #5
 8016924:	d105      	bne.n	8016932 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	0018      	movs	r0, r3
 801692a:	f002 f845 	bl	80189b8 <RegionEU868DlChannelReq>
 801692e:	0003      	movs	r3, r0
 8016930:	e000      	b.n	8016934 <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016932:	2300      	movs	r3, #0
        }
    }
}
 8016934:	0018      	movs	r0, r3
 8016936:	46bd      	mov	sp, r7
 8016938:	b002      	add	sp, #8
 801693a:	bd80      	pop	{r7, pc}

0801693c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801693c:	b590      	push	{r4, r7, lr}
 801693e:	b083      	sub	sp, #12
 8016940:	af00      	add	r7, sp, #0
 8016942:	0004      	movs	r4, r0
 8016944:	0008      	movs	r0, r1
 8016946:	0011      	movs	r1, r2
 8016948:	1dfb      	adds	r3, r7, #7
 801694a:	1c22      	adds	r2, r4, #0
 801694c:	701a      	strb	r2, [r3, #0]
 801694e:	1dbb      	adds	r3, r7, #6
 8016950:	1c02      	adds	r2, r0, #0
 8016952:	701a      	strb	r2, [r3, #0]
 8016954:	1d7b      	adds	r3, r7, #5
 8016956:	1c0a      	adds	r2, r1, #0
 8016958:	701a      	strb	r2, [r3, #0]
    switch( region )
 801695a:	1dfb      	adds	r3, r7, #7
 801695c:	781b      	ldrb	r3, [r3, #0]
 801695e:	2b05      	cmp	r3, #5
 8016960:	d10a      	bne.n	8016978 <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016962:	1d7b      	adds	r3, r7, #5
 8016964:	781a      	ldrb	r2, [r3, #0]
 8016966:	1dbb      	adds	r3, r7, #6
 8016968:	781b      	ldrb	r3, [r3, #0]
 801696a:	b25b      	sxtb	r3, r3
 801696c:	0011      	movs	r1, r2
 801696e:	0018      	movs	r0, r3
 8016970:	f002 f870 	bl	8018a54 <RegionEU868AlternateDr>
 8016974:	0003      	movs	r3, r0
 8016976:	e000      	b.n	801697a <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016978:	2300      	movs	r3, #0
        }
    }
}
 801697a:	0018      	movs	r0, r3
 801697c:	46bd      	mov	sp, r7
 801697e:	b003      	add	sp, #12
 8016980:	bd90      	pop	{r4, r7, pc}

08016982 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016982:	b580      	push	{r7, lr}
 8016984:	b084      	sub	sp, #16
 8016986:	af00      	add	r7, sp, #0
 8016988:	60b9      	str	r1, [r7, #8]
 801698a:	607a      	str	r2, [r7, #4]
 801698c:	603b      	str	r3, [r7, #0]
 801698e:	210f      	movs	r1, #15
 8016990:	187b      	adds	r3, r7, r1
 8016992:	1c02      	adds	r2, r0, #0
 8016994:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016996:	187b      	adds	r3, r7, r1
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b05      	cmp	r3, #5
 801699c:	d107      	bne.n	80169ae <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801699e:	69bb      	ldr	r3, [r7, #24]
 80169a0:	683a      	ldr	r2, [r7, #0]
 80169a2:	6879      	ldr	r1, [r7, #4]
 80169a4:	68b8      	ldr	r0, [r7, #8]
 80169a6:	f002 f865 	bl	8018a74 <RegionEU868NextChannel>
 80169aa:	0003      	movs	r3, r0
 80169ac:	e000      	b.n	80169b0 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80169ae:	2309      	movs	r3, #9
        }
    }
}
 80169b0:	0018      	movs	r0, r3
 80169b2:	46bd      	mov	sp, r7
 80169b4:	b004      	add	sp, #16
 80169b6:	bd80      	pop	{r7, pc}

080169b8 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b082      	sub	sp, #8
 80169bc:	af00      	add	r7, sp, #0
 80169be:	0002      	movs	r2, r0
 80169c0:	6039      	str	r1, [r7, #0]
 80169c2:	1dfb      	adds	r3, r7, #7
 80169c4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80169c6:	1dfb      	adds	r3, r7, #7
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	2b05      	cmp	r3, #5
 80169cc:	d104      	bne.n	80169d8 <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	0018      	movs	r0, r3
 80169d2:	f002 f9f9 	bl	8018dc8 <RegionEU868SetContinuousWave>
 80169d6:	e000      	b.n	80169da <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80169d8:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80169da:	46c0      	nop			; (mov r8, r8)
 80169dc:	46bd      	mov	sp, r7
 80169de:	b002      	add	sp, #8
 80169e0:	bd80      	pop	{r7, pc}

080169e2 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80169e2:	b5b0      	push	{r4, r5, r7, lr}
 80169e4:	b082      	sub	sp, #8
 80169e6:	af00      	add	r7, sp, #0
 80169e8:	0005      	movs	r5, r0
 80169ea:	000c      	movs	r4, r1
 80169ec:	0010      	movs	r0, r2
 80169ee:	0019      	movs	r1, r3
 80169f0:	1dfb      	adds	r3, r7, #7
 80169f2:	1c2a      	adds	r2, r5, #0
 80169f4:	701a      	strb	r2, [r3, #0]
 80169f6:	1dbb      	adds	r3, r7, #6
 80169f8:	1c22      	adds	r2, r4, #0
 80169fa:	701a      	strb	r2, [r3, #0]
 80169fc:	1d7b      	adds	r3, r7, #5
 80169fe:	1c02      	adds	r2, r0, #0
 8016a00:	701a      	strb	r2, [r3, #0]
 8016a02:	1d3b      	adds	r3, r7, #4
 8016a04:	1c0a      	adds	r2, r1, #0
 8016a06:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016a08:	1dfb      	adds	r3, r7, #7
 8016a0a:	781b      	ldrb	r3, [r3, #0]
 8016a0c:	2b05      	cmp	r3, #5
 8016a0e:	d10c      	bne.n	8016a2a <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016a10:	1d3b      	adds	r3, r7, #4
 8016a12:	2200      	movs	r2, #0
 8016a14:	569a      	ldrsb	r2, [r3, r2]
 8016a16:	1d7b      	adds	r3, r7, #5
 8016a18:	2100      	movs	r1, #0
 8016a1a:	5659      	ldrsb	r1, [r3, r1]
 8016a1c:	1dbb      	adds	r3, r7, #6
 8016a1e:	781b      	ldrb	r3, [r3, #0]
 8016a20:	0018      	movs	r0, r3
 8016a22:	f002 fa29 	bl	8018e78 <RegionEU868ApplyDrOffset>
 8016a26:	0003      	movs	r3, r0
 8016a28:	e001      	b.n	8016a2e <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016a2a:	1d7b      	adds	r3, r7, #5
 8016a2c:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8016a2e:	0018      	movs	r0, r3
 8016a30:	46bd      	mov	sp, r7
 8016a32:	b002      	add	sp, #8
 8016a34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016a38 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016a3e:	4b03      	ldr	r3, [pc, #12]	; (8016a4c <RegionGetVersion+0x14>)
 8016a40:	607b      	str	r3, [r7, #4]

    return version;
 8016a42:	687b      	ldr	r3, [r7, #4]
}
 8016a44:	0018      	movs	r0, r3
 8016a46:	46bd      	mov	sp, r7
 8016a48:	b002      	add	sp, #8
 8016a4a:	bd80      	pop	{r7, pc}
 8016a4c:	01000300 	.word	0x01000300

08016a50 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a52:	b087      	sub	sp, #28
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	0008      	movs	r0, r1
 8016a5a:	0039      	movs	r1, r7
 8016a5c:	600a      	str	r2, [r1, #0]
 8016a5e:	604b      	str	r3, [r1, #4]
 8016a60:	230b      	movs	r3, #11
 8016a62:	18fb      	adds	r3, r7, r3
 8016a64:	1c02      	adds	r2, r0, #0
 8016a66:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016a68:	2514      	movs	r5, #20
 8016a6a:	197c      	adds	r4, r7, r5
 8016a6c:	003b      	movs	r3, r7
 8016a6e:	6818      	ldr	r0, [r3, #0]
 8016a70:	6859      	ldr	r1, [r3, #4]
 8016a72:	f000 f91b 	bl	8016cac <RegionCommonGetJoinDc>
 8016a76:	0003      	movs	r3, r0
 8016a78:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 8016a7a:	2616      	movs	r6, #22
 8016a7c:	19bb      	adds	r3, r7, r6
 8016a7e:	68fa      	ldr	r2, [r7, #12]
 8016a80:	8812      	ldrh	r2, [r2, #0]
 8016a82:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 8016a84:	230b      	movs	r3, #11
 8016a86:	18fb      	adds	r3, r7, r3
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	2201      	movs	r2, #1
 8016a8c:	4053      	eors	r3, r2
 8016a8e:	b2db      	uxtb	r3, r3
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d012      	beq.n	8016aba <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016a94:	197c      	adds	r4, r7, r5
 8016a96:	003b      	movs	r3, r7
 8016a98:	6818      	ldr	r0, [r3, #0]
 8016a9a:	6859      	ldr	r1, [r3, #4]
 8016a9c:	f000 f906 	bl	8016cac <RegionCommonGetJoinDc>
 8016aa0:	0003      	movs	r3, r0
 8016aa2:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016aa4:	19ba      	adds	r2, r7, r6
 8016aa6:	197b      	adds	r3, r7, r5
 8016aa8:	19b9      	adds	r1, r7, r6
 8016aaa:	880c      	ldrh	r4, [r1, #0]
 8016aac:	881b      	ldrh	r3, [r3, #0]
 8016aae:	b298      	uxth	r0, r3
 8016ab0:	b2a1      	uxth	r1, r4
 8016ab2:	4288      	cmp	r0, r1
 8016ab4:	d200      	bcs.n	8016ab8 <GetDutyCycle+0x68>
 8016ab6:	1c23      	adds	r3, r4, #0
 8016ab8:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016aba:	2216      	movs	r2, #22
 8016abc:	18bb      	adds	r3, r7, r2
 8016abe:	881b      	ldrh	r3, [r3, #0]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d102      	bne.n	8016aca <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 8016ac4:	18bb      	adds	r3, r7, r2
 8016ac6:	2201      	movs	r2, #1
 8016ac8:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 8016aca:	2316      	movs	r3, #22
 8016acc:	18fb      	adds	r3, r7, r3
 8016ace:	881b      	ldrh	r3, [r3, #0]
}
 8016ad0:	0018      	movs	r0, r3
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	b007      	add	sp, #28
 8016ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ad8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ada:	b087      	sub	sp, #28
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	60f8      	str	r0, [r7, #12]
 8016ae0:	0008      	movs	r0, r1
 8016ae2:	0039      	movs	r1, r7
 8016ae4:	600a      	str	r2, [r1, #0]
 8016ae6:	604b      	str	r3, [r1, #4]
 8016ae8:	210b      	movs	r1, #11
 8016aea:	187b      	adds	r3, r7, r1
 8016aec:	1c02      	adds	r2, r0, #0
 8016aee:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 8016af0:	2614      	movs	r6, #20
 8016af2:	19bb      	adds	r3, r7, r6
 8016af4:	68fa      	ldr	r2, [r7, #12]
 8016af6:	8812      	ldrh	r2, [r2, #0]
 8016af8:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 8016afa:	2317      	movs	r3, #23
 8016afc:	18fb      	adds	r3, r7, r3
 8016afe:	2201      	movs	r2, #1
 8016b00:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016b02:	19bc      	adds	r4, r7, r6
 8016b04:	003b      	movs	r3, r7
 8016b06:	000d      	movs	r5, r1
 8016b08:	187a      	adds	r2, r7, r1
 8016b0a:	7811      	ldrb	r1, [r2, #0]
 8016b0c:	68f8      	ldr	r0, [r7, #12]
 8016b0e:	681a      	ldr	r2, [r3, #0]
 8016b10:	685b      	ldr	r3, [r3, #4]
 8016b12:	f7ff ff9d 	bl	8016a50 <GetDutyCycle>
 8016b16:	0003      	movs	r3, r0
 8016b18:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016b1a:	197b      	adds	r3, r7, r5
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	2201      	movs	r2, #1
 8016b20:	4053      	eors	r3, r2
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d00a      	beq.n	8016b3e <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8016b28:	19bb      	adds	r3, r7, r6
 8016b2a:	881b      	ldrh	r3, [r3, #0]
 8016b2c:	2164      	movs	r1, #100	; 0x64
 8016b2e:	0018      	movs	r0, r3
 8016b30:	f7e9 faf2 	bl	8000118 <__udivsi3>
 8016b34:	0003      	movs	r3, r0
 8016b36:	b29a      	uxth	r2, r3
 8016b38:	2317      	movs	r3, #23
 8016b3a:	18fb      	adds	r3, r7, r3
 8016b3c:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 8016b3e:	2317      	movs	r3, #23
 8016b40:	18fb      	adds	r3, r7, r3
 8016b42:	781b      	ldrb	r3, [r3, #0]
 8016b44:	4a09      	ldr	r2, [pc, #36]	; (8016b6c <SetMaxTimeCredits+0x94>)
 8016b46:	4353      	muls	r3, r2
 8016b48:	001a      	movs	r2, r3
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	685b      	ldr	r3, [r3, #4]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d103      	bne.n	8016b5e <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	68da      	ldr	r2, [r3, #12]
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 8016b5e:	2314      	movs	r3, #20
 8016b60:	18fb      	adds	r3, r7, r3
 8016b62:	881b      	ldrh	r3, [r3, #0]
}
 8016b64:	0018      	movs	r0, r3
 8016b66:	46bd      	mov	sp, r7
 8016b68:	b007      	add	sp, #28
 8016b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b6c:	0036ee80 	.word	0x0036ee80

08016b70 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016b70:	b590      	push	{r4, r7, lr}
 8016b72:	b085      	sub	sp, #20
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
 8016b78:	000c      	movs	r4, r1
 8016b7a:	0010      	movs	r0, r2
 8016b7c:	0019      	movs	r1, r3
 8016b7e:	1cfb      	adds	r3, r7, #3
 8016b80:	1c22      	adds	r2, r4, #0
 8016b82:	701a      	strb	r2, [r3, #0]
 8016b84:	1cbb      	adds	r3, r7, #2
 8016b86:	1c02      	adds	r2, r0, #0
 8016b88:	701a      	strb	r2, [r3, #0]
 8016b8a:	1c7b      	adds	r3, r7, #1
 8016b8c:	1c0a      	adds	r2, r1, #0
 8016b8e:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8016b90:	230e      	movs	r3, #14
 8016b92:	18fc      	adds	r4, r7, r3
 8016b94:	2320      	movs	r3, #32
 8016b96:	18fb      	adds	r3, r7, r3
 8016b98:	1cfa      	adds	r2, r7, #3
 8016b9a:	7811      	ldrb	r1, [r2, #0]
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	681a      	ldr	r2, [r3, #0]
 8016ba0:	685b      	ldr	r3, [r3, #4]
 8016ba2:	f7ff ff99 	bl	8016ad8 <SetMaxTimeCredits>
 8016ba6:	0003      	movs	r3, r0
 8016ba8:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016baa:	1cfb      	adds	r3, r7, #3
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	2201      	movs	r2, #1
 8016bb0:	4053      	eors	r3, r2
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d012      	beq.n	8016bde <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8016bb8:	1cbb      	adds	r3, r7, #2
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	2201      	movs	r2, #1
 8016bbe:	4053      	eors	r3, r2
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d016      	beq.n	8016bf4 <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 8016bc6:	1c7b      	adds	r3, r7, #1
 8016bc8:	781b      	ldrb	r3, [r3, #0]
 8016bca:	2201      	movs	r2, #1
 8016bcc:	4053      	eors	r3, r2
 8016bce:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d00f      	beq.n	8016bf4 <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	68da      	ldr	r2, [r3, #12]
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	609a      	str	r2, [r3, #8]
 8016bdc:	e00a      	b.n	8016bf4 <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016bde:	1cbb      	adds	r3, r7, #2
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	2201      	movs	r2, #1
 8016be4:	4053      	eors	r3, r2
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d003      	beq.n	8016bf4 <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	68da      	ldr	r2, [r3, #12]
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	685b      	ldr	r3, [r3, #4]
 8016bf8:	0018      	movs	r0, r3
 8016bfa:	f005 fe61 	bl	801c8c0 <UTIL_TIMER_GetElapsedTime>
 8016bfe:	0002      	movs	r2, r0
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	689b      	ldr	r3, [r3, #8]
 8016c04:	18d2      	adds	r2, r2, r3
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	689a      	ldr	r2, [r3, #8]
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	68db      	ldr	r3, [r3, #12]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d903      	bls.n	8016c1e <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	68da      	ldr	r2, [r3, #12]
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c22:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016c24:	230e      	movs	r3, #14
 8016c26:	18fb      	adds	r3, r7, r3
 8016c28:	881b      	ldrh	r3, [r3, #0]
}
 8016c2a:	0018      	movs	r0, r3
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	b005      	add	sp, #20
 8016c30:	bd90      	pop	{r4, r7, pc}

08016c32 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016c32:	b580      	push	{r7, lr}
 8016c34:	b084      	sub	sp, #16
 8016c36:	af00      	add	r7, sp, #0
 8016c38:	0002      	movs	r2, r0
 8016c3a:	1dbb      	adds	r3, r7, #6
 8016c3c:	801a      	strh	r2, [r3, #0]
 8016c3e:	1d7b      	adds	r3, r7, #5
 8016c40:	1c0a      	adds	r2, r1, #0
 8016c42:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8016c44:	230f      	movs	r3, #15
 8016c46:	18fb      	adds	r3, r7, r3
 8016c48:	2200      	movs	r2, #0
 8016c4a:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016c4c:	230e      	movs	r3, #14
 8016c4e:	18fb      	adds	r3, r7, r3
 8016c50:	2200      	movs	r2, #0
 8016c52:	701a      	strb	r2, [r3, #0]
 8016c54:	e01b      	b.n	8016c8e <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016c56:	1dbb      	adds	r3, r7, #6
 8016c58:	881b      	ldrh	r3, [r3, #0]
 8016c5a:	200e      	movs	r0, #14
 8016c5c:	183a      	adds	r2, r7, r0
 8016c5e:	7812      	ldrb	r2, [r2, #0]
 8016c60:	2101      	movs	r1, #1
 8016c62:	4091      	lsls	r1, r2
 8016c64:	000a      	movs	r2, r1
 8016c66:	401a      	ands	r2, r3
 8016c68:	183b      	adds	r3, r7, r0
 8016c6a:	781b      	ldrb	r3, [r3, #0]
 8016c6c:	2101      	movs	r1, #1
 8016c6e:	4099      	lsls	r1, r3
 8016c70:	000b      	movs	r3, r1
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d105      	bne.n	8016c82 <CountChannels+0x50>
        {
            nbActiveBits++;
 8016c76:	210f      	movs	r1, #15
 8016c78:	187b      	adds	r3, r7, r1
 8016c7a:	781a      	ldrb	r2, [r3, #0]
 8016c7c:	187b      	adds	r3, r7, r1
 8016c7e:	3201      	adds	r2, #1
 8016c80:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016c82:	210e      	movs	r1, #14
 8016c84:	187b      	adds	r3, r7, r1
 8016c86:	781a      	ldrb	r2, [r3, #0]
 8016c88:	187b      	adds	r3, r7, r1
 8016c8a:	3201      	adds	r2, #1
 8016c8c:	701a      	strb	r2, [r3, #0]
 8016c8e:	230e      	movs	r3, #14
 8016c90:	18fa      	adds	r2, r7, r3
 8016c92:	1d7b      	adds	r3, r7, #5
 8016c94:	7812      	ldrb	r2, [r2, #0]
 8016c96:	781b      	ldrb	r3, [r3, #0]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d3dc      	bcc.n	8016c56 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8016c9c:	230f      	movs	r3, #15
 8016c9e:	18fb      	adds	r3, r7, r3
 8016ca0:	781b      	ldrb	r3, [r3, #0]
}
 8016ca2:	0018      	movs	r0, r3
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	b004      	add	sp, #16
 8016ca8:	bd80      	pop	{r7, pc}
	...

08016cac <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b084      	sub	sp, #16
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	003b      	movs	r3, r7
 8016cb4:	6018      	str	r0, [r3, #0]
 8016cb6:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 8016cb8:	210e      	movs	r1, #14
 8016cba:	187b      	adds	r3, r7, r1
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 8016cc0:	003b      	movs	r3, r7
 8016cc2:	681a      	ldr	r2, [r3, #0]
 8016cc4:	23e1      	movs	r3, #225	; 0xe1
 8016cc6:	011b      	lsls	r3, r3, #4
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d203      	bcs.n	8016cd4 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8016ccc:	187b      	adds	r3, r7, r1
 8016cce:	2264      	movs	r2, #100	; 0x64
 8016cd0:	801a      	strh	r2, [r3, #0]
 8016cd2:	e00e      	b.n	8016cf2 <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 8016cd4:	003b      	movs	r3, r7
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	4a09      	ldr	r2, [pc, #36]	; (8016d00 <RegionCommonGetJoinDc+0x54>)
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	d805      	bhi.n	8016cea <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8016cde:	230e      	movs	r3, #14
 8016ce0:	18fb      	adds	r3, r7, r3
 8016ce2:	22fa      	movs	r2, #250	; 0xfa
 8016ce4:	0092      	lsls	r2, r2, #2
 8016ce6:	801a      	strh	r2, [r3, #0]
 8016ce8:	e003      	b.n	8016cf2 <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8016cea:	230e      	movs	r3, #14
 8016cec:	18fb      	adds	r3, r7, r3
 8016cee:	4a05      	ldr	r2, [pc, #20]	; (8016d04 <RegionCommonGetJoinDc+0x58>)
 8016cf0:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8016cf2:	230e      	movs	r3, #14
 8016cf4:	18fb      	adds	r3, r7, r3
 8016cf6:	881b      	ldrh	r3, [r3, #0]
}
 8016cf8:	0018      	movs	r0, r3
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	b004      	add	sp, #16
 8016cfe:	bd80      	pop	{r7, pc}
 8016d00:	00009aaf 	.word	0x00009aaf
 8016d04:	00002710 	.word	0x00002710

08016d08 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016d08:	b590      	push	{r4, r7, lr}
 8016d0a:	b085      	sub	sp, #20
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	0004      	movs	r4, r0
 8016d10:	6039      	str	r1, [r7, #0]
 8016d12:	0010      	movs	r0, r2
 8016d14:	0019      	movs	r1, r3
 8016d16:	1dfb      	adds	r3, r7, #7
 8016d18:	1c22      	adds	r2, r4, #0
 8016d1a:	701a      	strb	r2, [r3, #0]
 8016d1c:	1dbb      	adds	r3, r7, #6
 8016d1e:	1c02      	adds	r2, r0, #0
 8016d20:	701a      	strb	r2, [r3, #0]
 8016d22:	1d7b      	adds	r3, r7, #5
 8016d24:	1c0a      	adds	r2, r1, #0
 8016d26:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016d28:	2320      	movs	r3, #32
 8016d2a:	18fb      	adds	r3, r7, r3
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	569a      	ldrsb	r2, [r3, r2]
 8016d30:	1d7b      	adds	r3, r7, #5
 8016d32:	2100      	movs	r1, #0
 8016d34:	5659      	ldrsb	r1, [r3, r1]
 8016d36:	1dbb      	adds	r3, r7, #6
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	b25b      	sxtb	r3, r3
 8016d3c:	0018      	movs	r0, r3
 8016d3e:	f000 f87c 	bl	8016e3a <RegionCommonValueInRange>
 8016d42:	1e03      	subs	r3, r0, #0
 8016d44:	d101      	bne.n	8016d4a <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8016d46:	2300      	movs	r3, #0
 8016d48:	e073      	b.n	8016e32 <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016d4a:	230f      	movs	r3, #15
 8016d4c:	18fb      	adds	r3, r7, r3
 8016d4e:	2200      	movs	r2, #0
 8016d50:	701a      	strb	r2, [r3, #0]
 8016d52:	230e      	movs	r3, #14
 8016d54:	18fb      	adds	r3, r7, r3
 8016d56:	2200      	movs	r2, #0
 8016d58:	701a      	strb	r2, [r3, #0]
 8016d5a:	e062      	b.n	8016e22 <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016d5c:	230d      	movs	r3, #13
 8016d5e:	18fb      	adds	r3, r7, r3
 8016d60:	2200      	movs	r2, #0
 8016d62:	701a      	strb	r2, [r3, #0]
 8016d64:	e04c      	b.n	8016e00 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016d66:	230e      	movs	r3, #14
 8016d68:	18fb      	adds	r3, r7, r3
 8016d6a:	781b      	ldrb	r3, [r3, #0]
 8016d6c:	005b      	lsls	r3, r3, #1
 8016d6e:	683a      	ldr	r2, [r7, #0]
 8016d70:	18d3      	adds	r3, r2, r3
 8016d72:	881b      	ldrh	r3, [r3, #0]
 8016d74:	001a      	movs	r2, r3
 8016d76:	200d      	movs	r0, #13
 8016d78:	183b      	adds	r3, r7, r0
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	411a      	asrs	r2, r3
 8016d7e:	0013      	movs	r3, r2
 8016d80:	2201      	movs	r2, #1
 8016d82:	4013      	ands	r3, r2
 8016d84:	d036      	beq.n	8016df4 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016d86:	240f      	movs	r4, #15
 8016d88:	193b      	adds	r3, r7, r4
 8016d8a:	781a      	ldrb	r2, [r3, #0]
 8016d8c:	183b      	adds	r3, r7, r0
 8016d8e:	781b      	ldrb	r3, [r3, #0]
 8016d90:	18d3      	adds	r3, r2, r3
 8016d92:	001a      	movs	r2, r3
 8016d94:	0013      	movs	r3, r2
 8016d96:	005b      	lsls	r3, r3, #1
 8016d98:	189b      	adds	r3, r3, r2
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	001a      	movs	r2, r3
 8016d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da0:	189b      	adds	r3, r3, r2
 8016da2:	7a1b      	ldrb	r3, [r3, #8]
 8016da4:	011b      	lsls	r3, r3, #4
 8016da6:	b25b      	sxtb	r3, r3
 8016da8:	111b      	asrs	r3, r3, #4
 8016daa:	b25b      	sxtb	r3, r3
 8016dac:	001a      	movs	r2, r3
 8016dae:	230f      	movs	r3, #15
 8016db0:	4013      	ands	r3, r2
 8016db2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016db4:	193b      	adds	r3, r7, r4
 8016db6:	781a      	ldrb	r2, [r3, #0]
 8016db8:	183b      	adds	r3, r7, r0
 8016dba:	781b      	ldrb	r3, [r3, #0]
 8016dbc:	18d3      	adds	r3, r2, r3
 8016dbe:	001a      	movs	r2, r3
 8016dc0:	0013      	movs	r3, r2
 8016dc2:	005b      	lsls	r3, r3, #1
 8016dc4:	189b      	adds	r3, r3, r2
 8016dc6:	009b      	lsls	r3, r3, #2
 8016dc8:	001a      	movs	r2, r3
 8016dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dcc:	189b      	adds	r3, r3, r2
 8016dce:	7a1b      	ldrb	r3, [r3, #8]
 8016dd0:	b25b      	sxtb	r3, r3
 8016dd2:	111b      	asrs	r3, r3, #4
 8016dd4:	b25b      	sxtb	r3, r3
 8016dd6:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016dd8:	230f      	movs	r3, #15
 8016dda:	4013      	ands	r3, r2
 8016ddc:	b25a      	sxtb	r2, r3
 8016dde:	1dbb      	adds	r3, r7, #6
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	b25b      	sxtb	r3, r3
 8016de4:	0018      	movs	r0, r3
 8016de6:	f000 f828 	bl	8016e3a <RegionCommonValueInRange>
 8016dea:	0003      	movs	r3, r0
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	d101      	bne.n	8016df4 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016df0:	2301      	movs	r3, #1
 8016df2:	e01e      	b.n	8016e32 <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 8016df4:	210d      	movs	r1, #13
 8016df6:	187b      	adds	r3, r7, r1
 8016df8:	781a      	ldrb	r2, [r3, #0]
 8016dfa:	187b      	adds	r3, r7, r1
 8016dfc:	3201      	adds	r2, #1
 8016dfe:	701a      	strb	r2, [r3, #0]
 8016e00:	230d      	movs	r3, #13
 8016e02:	18fb      	adds	r3, r7, r3
 8016e04:	781b      	ldrb	r3, [r3, #0]
 8016e06:	2b0f      	cmp	r3, #15
 8016e08:	d9ad      	bls.n	8016d66 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016e0a:	220f      	movs	r2, #15
 8016e0c:	18bb      	adds	r3, r7, r2
 8016e0e:	18ba      	adds	r2, r7, r2
 8016e10:	7812      	ldrb	r2, [r2, #0]
 8016e12:	3210      	adds	r2, #16
 8016e14:	701a      	strb	r2, [r3, #0]
 8016e16:	210e      	movs	r1, #14
 8016e18:	187b      	adds	r3, r7, r1
 8016e1a:	781a      	ldrb	r2, [r3, #0]
 8016e1c:	187b      	adds	r3, r7, r1
 8016e1e:	3201      	adds	r2, #1
 8016e20:	701a      	strb	r2, [r3, #0]
 8016e22:	230f      	movs	r3, #15
 8016e24:	18fa      	adds	r2, r7, r3
 8016e26:	1dfb      	adds	r3, r7, #7
 8016e28:	7812      	ldrb	r2, [r2, #0]
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	d395      	bcc.n	8016d5c <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8016e30:	2300      	movs	r3, #0
}
 8016e32:	0018      	movs	r0, r3
 8016e34:	46bd      	mov	sp, r7
 8016e36:	b005      	add	sp, #20
 8016e38:	bd90      	pop	{r4, r7, pc}

08016e3a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016e3a:	b590      	push	{r4, r7, lr}
 8016e3c:	b083      	sub	sp, #12
 8016e3e:	af00      	add	r7, sp, #0
 8016e40:	0004      	movs	r4, r0
 8016e42:	0008      	movs	r0, r1
 8016e44:	0011      	movs	r1, r2
 8016e46:	1dfb      	adds	r3, r7, #7
 8016e48:	1c22      	adds	r2, r4, #0
 8016e4a:	701a      	strb	r2, [r3, #0]
 8016e4c:	1dbb      	adds	r3, r7, #6
 8016e4e:	1c02      	adds	r2, r0, #0
 8016e50:	701a      	strb	r2, [r3, #0]
 8016e52:	1d7b      	adds	r3, r7, #5
 8016e54:	1c0a      	adds	r2, r1, #0
 8016e56:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8016e58:	1dfa      	adds	r2, r7, #7
 8016e5a:	1dbb      	adds	r3, r7, #6
 8016e5c:	7812      	ldrb	r2, [r2, #0]
 8016e5e:	b252      	sxtb	r2, r2
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	b25b      	sxtb	r3, r3
 8016e64:	429a      	cmp	r2, r3
 8016e66:	db09      	blt.n	8016e7c <RegionCommonValueInRange+0x42>
 8016e68:	1dfa      	adds	r2, r7, #7
 8016e6a:	1d7b      	adds	r3, r7, #5
 8016e6c:	7812      	ldrb	r2, [r2, #0]
 8016e6e:	b252      	sxtb	r2, r2
 8016e70:	781b      	ldrb	r3, [r3, #0]
 8016e72:	b25b      	sxtb	r3, r3
 8016e74:	429a      	cmp	r2, r3
 8016e76:	dc01      	bgt.n	8016e7c <RegionCommonValueInRange+0x42>
    {
        return 1;
 8016e78:	2301      	movs	r3, #1
 8016e7a:	e000      	b.n	8016e7e <RegionCommonValueInRange+0x44>
    }
    return 0;
 8016e7c:	2300      	movs	r3, #0
}
 8016e7e:	0018      	movs	r0, r3
 8016e80:	46bd      	mov	sp, r7
 8016e82:	b003      	add	sp, #12
 8016e84:	bd90      	pop	{r4, r7, pc}

08016e86 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016e86:	b580      	push	{r7, lr}
 8016e88:	b084      	sub	sp, #16
 8016e8a:	af00      	add	r7, sp, #0
 8016e8c:	6078      	str	r0, [r7, #4]
 8016e8e:	0008      	movs	r0, r1
 8016e90:	0011      	movs	r1, r2
 8016e92:	1cfb      	adds	r3, r7, #3
 8016e94:	1c02      	adds	r2, r0, #0
 8016e96:	701a      	strb	r2, [r3, #0]
 8016e98:	1cbb      	adds	r3, r7, #2
 8016e9a:	1c0a      	adds	r2, r1, #0
 8016e9c:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8016e9e:	210f      	movs	r1, #15
 8016ea0:	187b      	adds	r3, r7, r1
 8016ea2:	1cfa      	adds	r2, r7, #3
 8016ea4:	7812      	ldrb	r2, [r2, #0]
 8016ea6:	0912      	lsrs	r2, r2, #4
 8016ea8:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016eaa:	1cbb      	adds	r3, r7, #2
 8016eac:	781b      	ldrb	r3, [r3, #0]
 8016eae:	091b      	lsrs	r3, r3, #4
 8016eb0:	b2db      	uxtb	r3, r3
 8016eb2:	187a      	adds	r2, r7, r1
 8016eb4:	7812      	ldrb	r2, [r2, #0]
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d805      	bhi.n	8016ec6 <RegionCommonChanDisable+0x40>
 8016eba:	1cfa      	adds	r2, r7, #3
 8016ebc:	1cbb      	adds	r3, r7, #2
 8016ebe:	7812      	ldrb	r2, [r2, #0]
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	d301      	bcc.n	8016eca <RegionCommonChanDisable+0x44>
    {
        return false;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	e01b      	b.n	8016f02 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016eca:	200f      	movs	r0, #15
 8016ecc:	183b      	adds	r3, r7, r0
 8016ece:	781b      	ldrb	r3, [r3, #0]
 8016ed0:	005b      	lsls	r3, r3, #1
 8016ed2:	687a      	ldr	r2, [r7, #4]
 8016ed4:	18d3      	adds	r3, r2, r3
 8016ed6:	881b      	ldrh	r3, [r3, #0]
 8016ed8:	b21b      	sxth	r3, r3
 8016eda:	1cfa      	adds	r2, r7, #3
 8016edc:	7812      	ldrb	r2, [r2, #0]
 8016ede:	210f      	movs	r1, #15
 8016ee0:	400a      	ands	r2, r1
 8016ee2:	2101      	movs	r1, #1
 8016ee4:	4091      	lsls	r1, r2
 8016ee6:	000a      	movs	r2, r1
 8016ee8:	b212      	sxth	r2, r2
 8016eea:	43d2      	mvns	r2, r2
 8016eec:	b212      	sxth	r2, r2
 8016eee:	4013      	ands	r3, r2
 8016ef0:	b219      	sxth	r1, r3
 8016ef2:	183b      	adds	r3, r7, r0
 8016ef4:	781b      	ldrb	r3, [r3, #0]
 8016ef6:	005b      	lsls	r3, r3, #1
 8016ef8:	687a      	ldr	r2, [r7, #4]
 8016efa:	18d3      	adds	r3, r2, r3
 8016efc:	b28a      	uxth	r2, r1
 8016efe:	801a      	strh	r2, [r3, #0]

    return true;
 8016f00:	2301      	movs	r3, #1
}
 8016f02:	0018      	movs	r0, r3
 8016f04:	46bd      	mov	sp, r7
 8016f06:	b004      	add	sp, #16
 8016f08:	bd80      	pop	{r7, pc}

08016f0a <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016f0a:	b590      	push	{r4, r7, lr}
 8016f0c:	b085      	sub	sp, #20
 8016f0e:	af00      	add	r7, sp, #0
 8016f10:	6078      	str	r0, [r7, #4]
 8016f12:	0008      	movs	r0, r1
 8016f14:	0011      	movs	r1, r2
 8016f16:	1cfb      	adds	r3, r7, #3
 8016f18:	1c02      	adds	r2, r0, #0
 8016f1a:	701a      	strb	r2, [r3, #0]
 8016f1c:	1cbb      	adds	r3, r7, #2
 8016f1e:	1c0a      	adds	r2, r1, #0
 8016f20:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8016f22:	230f      	movs	r3, #15
 8016f24:	18fb      	adds	r3, r7, r3
 8016f26:	2200      	movs	r2, #0
 8016f28:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d101      	bne.n	8016f34 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8016f30:	2300      	movs	r3, #0
 8016f32:	e027      	b.n	8016f84 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016f34:	230e      	movs	r3, #14
 8016f36:	18fb      	adds	r3, r7, r3
 8016f38:	1cfa      	adds	r2, r7, #3
 8016f3a:	7812      	ldrb	r2, [r2, #0]
 8016f3c:	701a      	strb	r2, [r3, #0]
 8016f3e:	e017      	b.n	8016f70 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016f40:	240e      	movs	r4, #14
 8016f42:	193b      	adds	r3, r7, r4
 8016f44:	781b      	ldrb	r3, [r3, #0]
 8016f46:	005b      	lsls	r3, r3, #1
 8016f48:	687a      	ldr	r2, [r7, #4]
 8016f4a:	18d3      	adds	r3, r2, r3
 8016f4c:	881b      	ldrh	r3, [r3, #0]
 8016f4e:	2110      	movs	r1, #16
 8016f50:	0018      	movs	r0, r3
 8016f52:	f7ff fe6e 	bl	8016c32 <CountChannels>
 8016f56:	0003      	movs	r3, r0
 8016f58:	0019      	movs	r1, r3
 8016f5a:	220f      	movs	r2, #15
 8016f5c:	18bb      	adds	r3, r7, r2
 8016f5e:	18ba      	adds	r2, r7, r2
 8016f60:	7812      	ldrb	r2, [r2, #0]
 8016f62:	188a      	adds	r2, r1, r2
 8016f64:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016f66:	193b      	adds	r3, r7, r4
 8016f68:	781a      	ldrb	r2, [r3, #0]
 8016f6a:	193b      	adds	r3, r7, r4
 8016f6c:	3201      	adds	r2, #1
 8016f6e:	701a      	strb	r2, [r3, #0]
 8016f70:	230e      	movs	r3, #14
 8016f72:	18fa      	adds	r2, r7, r3
 8016f74:	1cbb      	adds	r3, r7, #2
 8016f76:	7812      	ldrb	r2, [r2, #0]
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	429a      	cmp	r2, r3
 8016f7c:	d3e0      	bcc.n	8016f40 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8016f7e:	230f      	movs	r3, #15
 8016f80:	18fb      	adds	r3, r7, r3
 8016f82:	781b      	ldrb	r3, [r3, #0]
}
 8016f84:	0018      	movs	r0, r3
 8016f86:	46bd      	mov	sp, r7
 8016f88:	b005      	add	sp, #20
 8016f8a:	bd90      	pop	{r4, r7, pc}

08016f8c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b086      	sub	sp, #24
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	60f8      	str	r0, [r7, #12]
 8016f94:	60b9      	str	r1, [r7, #8]
 8016f96:	1dfb      	adds	r3, r7, #7
 8016f98:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d020      	beq.n	8016fe2 <RegionCommonChanMaskCopy+0x56>
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d01d      	beq.n	8016fe2 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016fa6:	2317      	movs	r3, #23
 8016fa8:	18fb      	adds	r3, r7, r3
 8016faa:	2200      	movs	r2, #0
 8016fac:	701a      	strb	r2, [r3, #0]
 8016fae:	e011      	b.n	8016fd4 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016fb0:	2017      	movs	r0, #23
 8016fb2:	183b      	adds	r3, r7, r0
 8016fb4:	781b      	ldrb	r3, [r3, #0]
 8016fb6:	005b      	lsls	r3, r3, #1
 8016fb8:	68ba      	ldr	r2, [r7, #8]
 8016fba:	18d2      	adds	r2, r2, r3
 8016fbc:	183b      	adds	r3, r7, r0
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	005b      	lsls	r3, r3, #1
 8016fc2:	68f9      	ldr	r1, [r7, #12]
 8016fc4:	18cb      	adds	r3, r1, r3
 8016fc6:	8812      	ldrh	r2, [r2, #0]
 8016fc8:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016fca:	183b      	adds	r3, r7, r0
 8016fcc:	781a      	ldrb	r2, [r3, #0]
 8016fce:	183b      	adds	r3, r7, r0
 8016fd0:	3201      	adds	r2, #1
 8016fd2:	701a      	strb	r2, [r3, #0]
 8016fd4:	2317      	movs	r3, #23
 8016fd6:	18fa      	adds	r2, r7, r3
 8016fd8:	1dfb      	adds	r3, r7, #7
 8016fda:	7812      	ldrb	r2, [r2, #0]
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	429a      	cmp	r2, r3
 8016fe0:	d3e6      	bcc.n	8016fb0 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8016fe2:	46c0      	nop			; (mov r8, r8)
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	b006      	add	sp, #24
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016fea:	b082      	sub	sp, #8
 8016fec:	b5b0      	push	{r4, r5, r7, lr}
 8016fee:	b086      	sub	sp, #24
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	60f8      	str	r0, [r7, #12]
 8016ff4:	60b9      	str	r1, [r7, #8]
 8016ff6:	0011      	movs	r1, r2
 8016ff8:	2204      	movs	r2, #4
 8016ffa:	2028      	movs	r0, #40	; 0x28
 8016ffc:	1812      	adds	r2, r2, r0
 8016ffe:	19d2      	adds	r2, r2, r7
 8017000:	6013      	str	r3, [r2, #0]
 8017002:	1dfb      	adds	r3, r7, #7
 8017004:	1c0a      	adds	r2, r1, #0
 8017006:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017008:	2516      	movs	r5, #22
 801700a:	197c      	adds	r4, r7, r5
 801700c:	2304      	movs	r3, #4
 801700e:	181b      	adds	r3, r3, r0
 8017010:	19db      	adds	r3, r3, r7
 8017012:	1dfa      	adds	r2, r7, #7
 8017014:	7811      	ldrb	r1, [r2, #0]
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	681a      	ldr	r2, [r3, #0]
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	f7ff fd18 	bl	8016a50 <GetDutyCycle>
 8017020:	0003      	movs	r3, r0
 8017022:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	689a      	ldr	r2, [r3, #8]
 8017028:	197b      	adds	r3, r7, r5
 801702a:	881b      	ldrh	r3, [r3, #0]
 801702c:	68b9      	ldr	r1, [r7, #8]
 801702e:	434b      	muls	r3, r1
 8017030:	429a      	cmp	r2, r3
 8017032:	d909      	bls.n	8017048 <RegionCommonSetBandTxDone+0x5e>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	689a      	ldr	r2, [r3, #8]
 8017038:	197b      	adds	r3, r7, r5
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	68b9      	ldr	r1, [r7, #8]
 801703e:	434b      	muls	r3, r1
 8017040:	1ad2      	subs	r2, r2, r3
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017046:	e002      	b.n	801704e <RegionCommonSetBandTxDone+0x64>
        band->TimeCredits = 0;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	2200      	movs	r2, #0
 801704c:	609a      	str	r2, [r3, #8]
}
 801704e:	46c0      	nop			; (mov r8, r8)
 8017050:	46bd      	mov	sp, r7
 8017052:	b006      	add	sp, #24
 8017054:	bcb0      	pop	{r4, r5, r7}
 8017056:	bc08      	pop	{r3}
 8017058:	b002      	add	sp, #8
 801705a:	4718      	bx	r3

0801705c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801705c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801705e:	46c6      	mov	lr, r8
 8017060:	b500      	push	{lr}
 8017062:	b08c      	sub	sp, #48	; 0x30
 8017064:	af04      	add	r7, sp, #16
 8017066:	0004      	movs	r4, r0
 8017068:	6039      	str	r1, [r7, #0]
 801706a:	0010      	movs	r0, r2
 801706c:	0019      	movs	r1, r3
 801706e:	1dfb      	adds	r3, r7, #7
 8017070:	1c22      	adds	r2, r4, #0
 8017072:	701a      	strb	r2, [r3, #0]
 8017074:	1dbb      	adds	r3, r7, #6
 8017076:	1c02      	adds	r2, r0, #0
 8017078:	701a      	strb	r2, [r3, #0]
 801707a:	1d7b      	adds	r3, r7, #5
 801707c:	1c0a      	adds	r2, r1, #0
 801707e:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017080:	2301      	movs	r3, #1
 8017082:	425b      	negs	r3, r3
 8017084:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017086:	f005 fc07 	bl	801c898 <UTIL_TIMER_GetCurrentTime>
 801708a:	0003      	movs	r3, r0
 801708c:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 801708e:	2300      	movs	r3, #0
 8017090:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 8017092:	230e      	movs	r3, #14
 8017094:	18fb      	adds	r3, r7, r3
 8017096:	2201      	movs	r2, #1
 8017098:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 801709a:	231b      	movs	r3, #27
 801709c:	18fb      	adds	r3, r7, r3
 801709e:	2200      	movs	r2, #0
 80170a0:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 80170a2:	231a      	movs	r3, #26
 80170a4:	18fb      	adds	r3, r7, r3
 80170a6:	2200      	movs	r2, #0
 80170a8:	701a      	strb	r2, [r3, #0]
 80170aa:	e089      	b.n	80171c0 <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80170ac:	231a      	movs	r3, #26
 80170ae:	18fb      	adds	r3, r7, r3
 80170b0:	781a      	ldrb	r2, [r3, #0]
 80170b2:	0013      	movs	r3, r2
 80170b4:	009b      	lsls	r3, r3, #2
 80170b6:	189b      	adds	r3, r3, r2
 80170b8:	009b      	lsls	r3, r3, #2
 80170ba:	001a      	movs	r2, r3
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	469c      	mov	ip, r3
 80170c0:	4494      	add	ip, r2
 80170c2:	220e      	movs	r2, #14
 80170c4:	18bc      	adds	r4, r7, r2
 80170c6:	2138      	movs	r1, #56	; 0x38
 80170c8:	000a      	movs	r2, r1
 80170ca:	187b      	adds	r3, r7, r1
 80170cc:	781e      	ldrb	r6, [r3, #0]
 80170ce:	1d7b      	adds	r3, r7, #5
 80170d0:	781d      	ldrb	r5, [r3, #0]
 80170d2:	1dfb      	adds	r3, r7, #7
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	4698      	mov	r8, r3
 80170d8:	697b      	ldr	r3, [r7, #20]
 80170da:	9302      	str	r3, [sp, #8]
 80170dc:	2304      	movs	r3, #4
 80170de:	189b      	adds	r3, r3, r2
 80170e0:	19da      	adds	r2, r3, r7
 80170e2:	466b      	mov	r3, sp
 80170e4:	ca03      	ldmia	r2!, {r0, r1}
 80170e6:	c303      	stmia	r3!, {r0, r1}
 80170e8:	0033      	movs	r3, r6
 80170ea:	002a      	movs	r2, r5
 80170ec:	4641      	mov	r1, r8
 80170ee:	4660      	mov	r0, ip
 80170f0:	f7ff fd3e 	bl	8016b70 <UpdateTimeCredits>
 80170f4:	0003      	movs	r3, r0
 80170f6:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80170f8:	220e      	movs	r2, #14
 80170fa:	18bb      	adds	r3, r7, r2
 80170fc:	881a      	ldrh	r2, [r3, #0]
 80170fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017100:	4353      	muls	r3, r2
 8017102:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017104:	231a      	movs	r3, #26
 8017106:	18fb      	adds	r3, r7, r3
 8017108:	781a      	ldrb	r2, [r3, #0]
 801710a:	0013      	movs	r3, r2
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	189b      	adds	r3, r3, r2
 8017110:	009b      	lsls	r3, r3, #2
 8017112:	001a      	movs	r2, r3
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	189b      	adds	r3, r3, r2
 8017118:	689b      	ldr	r3, [r3, #8]
 801711a:	693a      	ldr	r2, [r7, #16]
 801711c:	429a      	cmp	r2, r3
 801711e:	d306      	bcc.n	801712e <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 8017120:	1d7b      	adds	r3, r7, #5
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	2201      	movs	r2, #1
 8017126:	4053      	eors	r3, r2
 8017128:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801712a:	2b00      	cmp	r3, #0
 801712c:	d012      	beq.n	8017154 <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 801712e:	231a      	movs	r3, #26
 8017130:	18fb      	adds	r3, r7, r3
 8017132:	781a      	ldrb	r2, [r3, #0]
 8017134:	0013      	movs	r3, r2
 8017136:	009b      	lsls	r3, r3, #2
 8017138:	189b      	adds	r3, r3, r2
 801713a:	009b      	lsls	r3, r3, #2
 801713c:	001a      	movs	r2, r3
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	189b      	adds	r3, r3, r2
 8017142:	2201      	movs	r2, #1
 8017144:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017146:	211b      	movs	r1, #27
 8017148:	187b      	adds	r3, r7, r1
 801714a:	781a      	ldrb	r2, [r3, #0]
 801714c:	187b      	adds	r3, r7, r1
 801714e:	3201      	adds	r2, #1
 8017150:	701a      	strb	r2, [r3, #0]
 8017152:	e02f      	b.n	80171b4 <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017154:	211a      	movs	r1, #26
 8017156:	187b      	adds	r3, r7, r1
 8017158:	781a      	ldrb	r2, [r3, #0]
 801715a:	0013      	movs	r3, r2
 801715c:	009b      	lsls	r3, r3, #2
 801715e:	189b      	adds	r3, r3, r2
 8017160:	009b      	lsls	r3, r3, #2
 8017162:	001a      	movs	r2, r3
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	189b      	adds	r3, r3, r2
 8017168:	2200      	movs	r2, #0
 801716a:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 801716c:	187b      	adds	r3, r7, r1
 801716e:	781a      	ldrb	r2, [r3, #0]
 8017170:	0013      	movs	r3, r2
 8017172:	009b      	lsls	r3, r3, #2
 8017174:	189b      	adds	r3, r3, r2
 8017176:	009b      	lsls	r3, r3, #2
 8017178:	001a      	movs	r2, r3
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	189b      	adds	r3, r3, r2
 801717e:	68db      	ldr	r3, [r3, #12]
 8017180:	693a      	ldr	r2, [r7, #16]
 8017182:	429a      	cmp	r2, r3
 8017184:	d216      	bcs.n	80171b4 <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017186:	187b      	adds	r3, r7, r1
 8017188:	781a      	ldrb	r2, [r3, #0]
 801718a:	0013      	movs	r3, r2
 801718c:	009b      	lsls	r3, r3, #2
 801718e:	189b      	adds	r3, r3, r2
 8017190:	009b      	lsls	r3, r3, #2
 8017192:	001a      	movs	r2, r3
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	189b      	adds	r3, r3, r2
 8017198:	689b      	ldr	r3, [r3, #8]
 801719a:	693a      	ldr	r2, [r7, #16]
 801719c:	1ad2      	subs	r2, r2, r3
 801719e:	69fb      	ldr	r3, [r7, #28]
 80171a0:	4293      	cmp	r3, r2
 80171a2:	d900      	bls.n	80171a6 <RegionCommonUpdateBandTimeOff+0x14a>
 80171a4:	0013      	movs	r3, r2
 80171a6:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80171a8:	211b      	movs	r1, #27
 80171aa:	187b      	adds	r3, r7, r1
 80171ac:	781a      	ldrb	r2, [r3, #0]
 80171ae:	187b      	adds	r3, r7, r1
 80171b0:	3201      	adds	r2, #1
 80171b2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 80171b4:	211a      	movs	r1, #26
 80171b6:	187b      	adds	r3, r7, r1
 80171b8:	781a      	ldrb	r2, [r3, #0]
 80171ba:	187b      	adds	r3, r7, r1
 80171bc:	3201      	adds	r2, #1
 80171be:	701a      	strb	r2, [r3, #0]
 80171c0:	231a      	movs	r3, #26
 80171c2:	18fa      	adds	r2, r7, r3
 80171c4:	1dbb      	adds	r3, r7, #6
 80171c6:	7812      	ldrb	r2, [r2, #0]
 80171c8:	781b      	ldrb	r3, [r3, #0]
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d200      	bcs.n	80171d0 <RegionCommonUpdateBandTimeOff+0x174>
 80171ce:	e76d      	b.n	80170ac <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 80171d0:	231b      	movs	r3, #27
 80171d2:	18fb      	adds	r3, r7, r3
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d102      	bne.n	80171e0 <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80171da:	2301      	movs	r3, #1
 80171dc:	425b      	negs	r3, r3
 80171de:	e000      	b.n	80171e2 <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 80171e0:	69fb      	ldr	r3, [r7, #28]
}
 80171e2:	0018      	movs	r0, r3
 80171e4:	46bd      	mov	sp, r7
 80171e6:	b008      	add	sp, #32
 80171e8:	bc80      	pop	{r7}
 80171ea:	46b8      	mov	r8, r7
 80171ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080171ee <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80171ee:	b580      	push	{r7, lr}
 80171f0:	b084      	sub	sp, #16
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	6078      	str	r0, [r7, #4]
 80171f6:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80171f8:	210f      	movs	r1, #15
 80171fa:	187b      	adds	r3, r7, r1
 80171fc:	2200      	movs	r2, #0
 80171fe:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	2b03      	cmp	r3, #3
 8017206:	d140      	bne.n	801728a <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	3301      	adds	r3, #1
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	b25a      	sxtb	r2, r3
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	785b      	ldrb	r3, [r3, #1]
 8017218:	b25b      	sxtb	r3, r3
 801721a:	220f      	movs	r2, #15
 801721c:	4013      	ands	r3, r2
 801721e:	b25a      	sxtb	r2, r3
 8017220:	683b      	ldr	r3, [r7, #0]
 8017222:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	785b      	ldrb	r3, [r3, #1]
 8017228:	b25b      	sxtb	r3, r3
 801722a:	b2db      	uxtb	r3, r3
 801722c:	091b      	lsrs	r3, r3, #4
 801722e:	b2db      	uxtb	r3, r3
 8017230:	b25a      	sxtb	r2, r3
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	3302      	adds	r3, #2
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	b29a      	uxth	r2, r3
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	889b      	ldrh	r3, [r3, #4]
 8017246:	b21a      	sxth	r2, r3
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	3303      	adds	r3, #3
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	021b      	lsls	r3, r3, #8
 8017250:	b21b      	sxth	r3, r3
 8017252:	4313      	orrs	r3, r2
 8017254:	b21b      	sxth	r3, r3
 8017256:	b29a      	uxth	r2, r3
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	791a      	ldrb	r2, [r3, #4]
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	781b      	ldrb	r3, [r3, #0]
 8017268:	091b      	lsrs	r3, r3, #4
 801726a:	b2db      	uxtb	r3, r3
 801726c:	2207      	movs	r2, #7
 801726e:	4013      	ands	r3, r2
 8017270:	b2da      	uxtb	r2, r3
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	781b      	ldrb	r3, [r3, #0]
 801727a:	220f      	movs	r2, #15
 801727c:	4013      	ands	r3, r2
 801727e:	b2da      	uxtb	r2, r3
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017284:	187b      	adds	r3, r7, r1
 8017286:	2205      	movs	r2, #5
 8017288:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 801728a:	230f      	movs	r3, #15
 801728c:	18fb      	adds	r3, r7, r3
 801728e:	781b      	ldrb	r3, [r3, #0]
}
 8017290:	0018      	movs	r0, r3
 8017292:	46bd      	mov	sp, r7
 8017294:	b004      	add	sp, #16
 8017296:	bd80      	pop	{r7, pc}

08017298 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801729a:	b089      	sub	sp, #36	; 0x24
 801729c:	af02      	add	r7, sp, #8
 801729e:	60f8      	str	r0, [r7, #12]
 80172a0:	60b9      	str	r1, [r7, #8]
 80172a2:	607a      	str	r2, [r7, #4]
 80172a4:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80172a6:	2317      	movs	r3, #23
 80172a8:	18fb      	adds	r3, r7, r3
 80172aa:	68fa      	ldr	r2, [r7, #12]
 80172ac:	7912      	ldrb	r2, [r2, #4]
 80172ae:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 80172b0:	2116      	movs	r1, #22
 80172b2:	187b      	adds	r3, r7, r1
 80172b4:	68fa      	ldr	r2, [r7, #12]
 80172b6:	7992      	ldrb	r2, [r2, #6]
 80172b8:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 80172ba:	2015      	movs	r0, #21
 80172bc:	183b      	adds	r3, r7, r0
 80172be:	68fa      	ldr	r2, [r7, #12]
 80172c0:	79d2      	ldrb	r2, [r2, #7]
 80172c2:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	7a1a      	ldrb	r2, [r3, #8]
 80172c8:	2414      	movs	r4, #20
 80172ca:	193b      	adds	r3, r7, r4
 80172cc:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	795b      	ldrb	r3, [r3, #5]
 80172d2:	2201      	movs	r2, #1
 80172d4:	4053      	eors	r3, r2
 80172d6:	b2db      	uxtb	r3, r3
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d00b      	beq.n	80172f4 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80172dc:	193b      	adds	r3, r7, r4
 80172de:	68fa      	ldr	r2, [r7, #12]
 80172e0:	7ad2      	ldrb	r2, [r2, #11]
 80172e2:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 80172e4:	187b      	adds	r3, r7, r1
 80172e6:	68fa      	ldr	r2, [r7, #12]
 80172e8:	7a52      	ldrb	r2, [r2, #9]
 80172ea:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 80172ec:	183b      	adds	r3, r7, r0
 80172ee:	68fa      	ldr	r2, [r7, #12]
 80172f0:	7a92      	ldrb	r2, [r2, #10]
 80172f2:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 80172f4:	2617      	movs	r6, #23
 80172f6:	19bb      	adds	r3, r7, r6
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d046      	beq.n	801738c <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	7b18      	ldrb	r0, [r3, #12]
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	691c      	ldr	r4, [r3, #16]
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	2514      	movs	r5, #20
 801730a:	575d      	ldrsb	r5, [r3, r5]
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	2215      	movs	r2, #21
 8017310:	569a      	ldrsb	r2, [r3, r2]
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	699b      	ldr	r3, [r3, #24]
 8017316:	2116      	movs	r1, #22
 8017318:	1879      	adds	r1, r7, r1
 801731a:	7809      	ldrb	r1, [r1, #0]
 801731c:	b249      	sxtb	r1, r1
 801731e:	9301      	str	r3, [sp, #4]
 8017320:	9200      	str	r2, [sp, #0]
 8017322:	002b      	movs	r3, r5
 8017324:	000a      	movs	r2, r1
 8017326:	0021      	movs	r1, r4
 8017328:	f7ff fcee 	bl	8016d08 <RegionCommonChanVerifyDr>
 801732c:	0003      	movs	r3, r0
 801732e:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017330:	2301      	movs	r3, #1
 8017332:	4053      	eors	r3, r2
 8017334:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017336:	2b00      	cmp	r3, #0
 8017338:	d005      	beq.n	8017346 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 801733a:	19bb      	adds	r3, r7, r6
 801733c:	19ba      	adds	r2, r7, r6
 801733e:	7812      	ldrb	r2, [r2, #0]
 8017340:	2102      	movs	r1, #2
 8017342:	438a      	bics	r2, r1
 8017344:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	211d      	movs	r1, #29
 801734a:	5659      	ldrsb	r1, [r3, r1]
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	221c      	movs	r2, #28
 8017350:	569a      	ldrsb	r2, [r3, r2]
 8017352:	2415      	movs	r4, #21
 8017354:	193b      	adds	r3, r7, r4
 8017356:	781b      	ldrb	r3, [r3, #0]
 8017358:	b25b      	sxtb	r3, r3
 801735a:	0018      	movs	r0, r3
 801735c:	f7ff fd6d 	bl	8016e3a <RegionCommonValueInRange>
 8017360:	1e03      	subs	r3, r0, #0
 8017362:	d113      	bne.n	801738c <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
//        	verifyParams->MaxTxPower = 20;
            // Verify if the maximum TX power is exceeded Проверьте, не превышена ли максимальная мощность TX
            if( verifyParams->MaxTxPower > txPower )
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	7f5b      	ldrb	r3, [r3, #29]
 8017368:	b25b      	sxtb	r3, r3
 801736a:	193a      	adds	r2, r7, r4
 801736c:	7812      	ldrb	r2, [r2, #0]
 801736e:	b252      	sxtb	r2, r2
 8017370:	429a      	cmp	r2, r3
 8017372:	da04      	bge.n	801737e <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017374:	193b      	adds	r3, r7, r4
 8017376:	68fa      	ldr	r2, [r7, #12]
 8017378:	7f52      	ldrb	r2, [r2, #29]
 801737a:	701a      	strb	r2, [r3, #0]
 801737c:	e006      	b.n	801738c <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801737e:	2217      	movs	r2, #23
 8017380:	18bb      	adds	r3, r7, r2
 8017382:	18ba      	adds	r2, r7, r2
 8017384:	7812      	ldrb	r2, [r2, #0]
 8017386:	2104      	movs	r1, #4
 8017388:	438a      	bics	r2, r1
 801738a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801738c:	2317      	movs	r3, #23
 801738e:	18fb      	adds	r3, r7, r3
 8017390:	781b      	ldrb	r3, [r3, #0]
 8017392:	2b07      	cmp	r3, #7
 8017394:	d108      	bne.n	80173a8 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8017396:	2214      	movs	r2, #20
 8017398:	18bb      	adds	r3, r7, r2
 801739a:	781b      	ldrb	r3, [r3, #0]
 801739c:	b25b      	sxtb	r3, r3
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d102      	bne.n	80173a8 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80173a2:	18bb      	adds	r3, r7, r2
 80173a4:	2201      	movs	r2, #1
 80173a6:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	2216      	movs	r2, #22
 80173ac:	18ba      	adds	r2, r7, r2
 80173ae:	7812      	ldrb	r2, [r2, #0]
 80173b0:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2215      	movs	r2, #21
 80173b6:	18ba      	adds	r2, r7, r2
 80173b8:	7812      	ldrb	r2, [r2, #0]
 80173ba:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80173bc:	2314      	movs	r3, #20
 80173be:	18fb      	adds	r3, r7, r3
 80173c0:	781a      	ldrb	r2, [r3, #0]
 80173c2:	683b      	ldr	r3, [r7, #0]
 80173c4:	701a      	strb	r2, [r3, #0]

    return status;
 80173c6:	2317      	movs	r3, #23
 80173c8:	18fb      	adds	r3, r7, r3
 80173ca:	781b      	ldrb	r3, [r3, #0]
}
 80173cc:	0018      	movs	r0, r3
 80173ce:	46bd      	mov	sp, r7
 80173d0:	b007      	add	sp, #28
 80173d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080173d4 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b082      	sub	sp, #8
 80173d8:	af00      	add	r7, sp, #0
 80173da:	0002      	movs	r2, r0
 80173dc:	6039      	str	r1, [r7, #0]
 80173de:	1dfb      	adds	r3, r7, #7
 80173e0:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 80173e2:	6839      	ldr	r1, [r7, #0]
 80173e4:	4806      	ldr	r0, [pc, #24]	; (8017400 <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 80173e6:	f7e8 fe97 	bl	8000118 <__udivsi3>
 80173ea:	0003      	movs	r3, r0
 80173ec:	001a      	movs	r2, r3
 80173ee:	1dfb      	adds	r3, r7, #7
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	409a      	lsls	r2, r3
 80173f4:	0013      	movs	r3, r2
}
 80173f6:	0018      	movs	r0, r3
 80173f8:	46bd      	mov	sp, r7
 80173fa:	b002      	add	sp, #8
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	46c0      	nop			; (mov r8, r8)
 8017400:	3b9aca00 	.word	0x3b9aca00

08017404 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b082      	sub	sp, #8
 8017408:	af00      	add	r7, sp, #0
 801740a:	0002      	movs	r2, r0
 801740c:	1dfb      	adds	r3, r7, #7
 801740e:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 8017410:	4b02      	ldr	r3, [pc, #8]	; (801741c <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 8017412:	0018      	movs	r0, r3
 8017414:	46bd      	mov	sp, r7
 8017416:	b002      	add	sp, #8
 8017418:	bd80      	pop	{r7, pc}
 801741a:	46c0      	nop			; (mov r8, r8)
 801741c:	00027100 	.word	0x00027100

08017420 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8017420:	b5b0      	push	{r4, r5, r7, lr}
 8017422:	b084      	sub	sp, #16
 8017424:	af00      	add	r7, sp, #0
 8017426:	60f8      	str	r0, [r7, #12]
 8017428:	607a      	str	r2, [r7, #4]
 801742a:	603b      	str	r3, [r7, #0]
 801742c:	200b      	movs	r0, #11
 801742e:	183b      	adds	r3, r7, r0
 8017430:	1c0a      	adds	r2, r1, #0
 8017432:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 8017434:	0002      	movs	r2, r0
 8017436:	18bb      	adds	r3, r7, r2
 8017438:	781d      	ldrb	r5, [r3, #0]
 801743a:	18bb      	adds	r3, r7, r2
 801743c:	781b      	ldrb	r3, [r3, #0]
 801743e:	4a1c      	ldr	r2, [pc, #112]	; (80174b0 <RegionCommonComputeRxWindowParameters+0x90>)
 8017440:	4694      	mov	ip, r2
 8017442:	4463      	add	r3, ip
 8017444:	005c      	lsls	r4, r3, #1
 8017446:	6879      	ldr	r1, [r7, #4]
 8017448:	000a      	movs	r2, r1
 801744a:	0152      	lsls	r2, r2, #5
 801744c:	1a52      	subs	r2, r2, r1
 801744e:	0193      	lsls	r3, r2, #6
 8017450:	1a9b      	subs	r3, r3, r2
 8017452:	00db      	lsls	r3, r3, #3
 8017454:	185b      	adds	r3, r3, r1
 8017456:	01db      	lsls	r3, r3, #7
 8017458:	001a      	movs	r2, r3
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	18d3      	adds	r3, r2, r3
 801745e:	3b01      	subs	r3, #1
 8017460:	68f9      	ldr	r1, [r7, #12]
 8017462:	0018      	movs	r0, r3
 8017464:	f7e8 fe58 	bl	8000118 <__udivsi3>
 8017468:	0003      	movs	r3, r0
 801746a:	18e2      	adds	r2, r4, r3
 801746c:	002b      	movs	r3, r5
 801746e:	4293      	cmp	r3, r2
 8017470:	d200      	bcs.n	8017474 <RegionCommonComputeRxWindowParameters+0x54>
 8017472:	0013      	movs	r3, r2
 8017474:	6a3a      	ldr	r2, [r7, #32]
 8017476:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	009a      	lsls	r2, r3, #2
 801747c:	6a3b      	ldr	r3, [r7, #32]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	68f9      	ldr	r1, [r7, #12]
 8017482:	434b      	muls	r3, r1
 8017484:	085b      	lsrs	r3, r3, #1
 8017486:	1ad3      	subs	r3, r2, r3
 8017488:	4a0a      	ldr	r2, [pc, #40]	; (80174b4 <RegionCommonComputeRxWindowParameters+0x94>)
 801748a:	4694      	mov	ip, r2
 801748c:	4463      	add	r3, ip
 801748e:	490a      	ldr	r1, [pc, #40]	; (80174b8 <RegionCommonComputeRxWindowParameters+0x98>)
 8017490:	0018      	movs	r0, r3
 8017492:	f7e8 fecb 	bl	800022c <__divsi3>
 8017496:	0003      	movs	r3, r0
 8017498:	001a      	movs	r2, r3
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	1ad3      	subs	r3, r2, r3
 801749e:	3b01      	subs	r3, #1
 80174a0:	001a      	movs	r2, r3
 80174a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174a4:	601a      	str	r2, [r3, #0]
}
 80174a6:	46c0      	nop			; (mov r8, r8)
 80174a8:	46bd      	mov	sp, r7
 80174aa:	b004      	add	sp, #16
 80174ac:	bdb0      	pop	{r4, r5, r7, pc}
 80174ae:	46c0      	nop			; (mov r8, r8)
 80174b0:	7ffffffc 	.word	0x7ffffffc
 80174b4:	000f423f 	.word	0x000f423f
 80174b8:	000f4240 	.word	0x000f4240

080174bc <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80174bc:	b5b0      	push	{r4, r5, r7, lr}
 80174be:	b086      	sub	sp, #24
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	60b9      	str	r1, [r7, #8]
 80174c4:	607a      	str	r2, [r7, #4]
 80174c6:	210f      	movs	r1, #15
 80174c8:	187b      	adds	r3, r7, r1
 80174ca:	1c02      	adds	r2, r0, #0
 80174cc:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 14;
 80174ce:	2417      	movs	r4, #23
 80174d0:	193b      	adds	r3, r7, r4
 80174d2:	220e      	movs	r2, #14
 80174d4:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80174d6:	187b      	adds	r3, r7, r1
 80174d8:	781b      	ldrb	r3, [r3, #0]
 80174da:	b25b      	sxtb	r3, r3
 80174dc:	005b      	lsls	r3, r3, #1
 80174de:	0018      	movs	r0, r3
 80174e0:	f7e9 faf6 	bl	8000ad0 <__aeabi_ui2f>
 80174e4:	1c03      	adds	r3, r0, #0
 80174e6:	1c19      	adds	r1, r3, #0
 80174e8:	68b8      	ldr	r0, [r7, #8]
 80174ea:	f7e9 f943 	bl	8000774 <__aeabi_fsub>
 80174ee:	1c03      	adds	r3, r0, #0
 80174f0:	6879      	ldr	r1, [r7, #4]
 80174f2:	1c18      	adds	r0, r3, #0
 80174f4:	f7e9 f93e 	bl	8000774 <__aeabi_fsub>
 80174f8:	1c03      	adds	r3, r0, #0
 80174fa:	1c18      	adds	r0, r3, #0
 80174fc:	f7eb f8f2 	bl	80026e4 <__aeabi_f2d>
 8017500:	0002      	movs	r2, r0
 8017502:	000b      	movs	r3, r1
 8017504:	0010      	movs	r0, r2
 8017506:	0019      	movs	r1, r3
 8017508:	f006 f9f2 	bl	801d8f0 <floor>
 801750c:	0002      	movs	r2, r0
 801750e:	000b      	movs	r3, r1
 8017510:	0025      	movs	r5, r4
 8017512:	193c      	adds	r4, r7, r4
 8017514:	0010      	movs	r0, r2
 8017516:	0019      	movs	r1, r3
 8017518:	f7eb f858 	bl	80025cc <__aeabi_d2iz>
 801751c:	0003      	movs	r3, r0
 801751e:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8017520:	197b      	adds	r3, r7, r5
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	b25b      	sxtb	r3, r3
}
 8017526:	0018      	movs	r0, r3
 8017528:	46bd      	mov	sp, r7
 801752a:	b006      	add	sp, #24
 801752c:	bdb0      	pop	{r4, r5, r7, pc}

0801752e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801752e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017530:	b087      	sub	sp, #28
 8017532:	af00      	add	r7, sp, #0
 8017534:	60f8      	str	r0, [r7, #12]
 8017536:	60b9      	str	r1, [r7, #8]
 8017538:	607a      	str	r2, [r7, #4]
 801753a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801753c:	2317      	movs	r3, #23
 801753e:	18fb      	adds	r3, r7, r3
 8017540:	2200      	movs	r2, #0
 8017542:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8017544:	2316      	movs	r3, #22
 8017546:	18fb      	adds	r3, r7, r3
 8017548:	2200      	movs	r2, #0
 801754a:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801754c:	2315      	movs	r3, #21
 801754e:	18fb      	adds	r3, r7, r3
 8017550:	2200      	movs	r2, #0
 8017552:	701a      	strb	r2, [r3, #0]
 8017554:	2314      	movs	r3, #20
 8017556:	18fb      	adds	r3, r7, r3
 8017558:	2200      	movs	r2, #0
 801755a:	701a      	strb	r2, [r3, #0]
 801755c:	e0bf      	b.n	80176de <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801755e:	2313      	movs	r3, #19
 8017560:	18fb      	adds	r3, r7, r3
 8017562:	2200      	movs	r2, #0
 8017564:	701a      	strb	r2, [r3, #0]
 8017566:	e0a8      	b.n	80176ba <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	685a      	ldr	r2, [r3, #4]
 801756c:	2314      	movs	r3, #20
 801756e:	18fb      	adds	r3, r7, r3
 8017570:	781b      	ldrb	r3, [r3, #0]
 8017572:	005b      	lsls	r3, r3, #1
 8017574:	18d3      	adds	r3, r2, r3
 8017576:	881b      	ldrh	r3, [r3, #0]
 8017578:	001a      	movs	r2, r3
 801757a:	2013      	movs	r0, #19
 801757c:	183b      	adds	r3, r7, r0
 801757e:	781b      	ldrb	r3, [r3, #0]
 8017580:	411a      	asrs	r2, r3
 8017582:	0013      	movs	r3, r2
 8017584:	2201      	movs	r2, #1
 8017586:	4013      	ands	r3, r2
 8017588:	d100      	bne.n	801758c <RegionCommonCountNbOfEnabledChannels+0x5e>
 801758a:	e090      	b.n	80176ae <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	689a      	ldr	r2, [r3, #8]
 8017590:	2315      	movs	r3, #21
 8017592:	18fb      	adds	r3, r7, r3
 8017594:	7819      	ldrb	r1, [r3, #0]
 8017596:	183b      	adds	r3, r7, r0
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	18cb      	adds	r3, r1, r3
 801759c:	0019      	movs	r1, r3
 801759e:	000b      	movs	r3, r1
 80175a0:	005b      	lsls	r3, r3, #1
 80175a2:	185b      	adds	r3, r3, r1
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	18d3      	adds	r3, r2, r3
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d100      	bne.n	80175b0 <RegionCommonCountNbOfEnabledChannels+0x82>
 80175ae:	e079      	b.n	80176a4 <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	2201      	movs	r2, #1
 80175b6:	4053      	eors	r3, r2
 80175b8:	b2db      	uxtb	r3, r3
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d00d      	beq.n	80175da <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d009      	beq.n	80175da <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	8a5b      	ldrh	r3, [r3, #18]
 80175ca:	001a      	movs	r2, r3
 80175cc:	183b      	adds	r3, r7, r0
 80175ce:	781b      	ldrb	r3, [r3, #0]
 80175d0:	411a      	asrs	r2, r3
 80175d2:	0013      	movs	r3, r2
 80175d4:	2201      	movs	r2, #1
 80175d6:	4013      	ands	r3, r2
 80175d8:	d066      	beq.n	80176a8 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	785b      	ldrb	r3, [r3, #1]
 80175de:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	689a      	ldr	r2, [r3, #8]
 80175e4:	2515      	movs	r5, #21
 80175e6:	197b      	adds	r3, r7, r5
 80175e8:	7819      	ldrb	r1, [r3, #0]
 80175ea:	2613      	movs	r6, #19
 80175ec:	19bb      	adds	r3, r7, r6
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	18cb      	adds	r3, r1, r3
 80175f2:	0019      	movs	r1, r3
 80175f4:	000b      	movs	r3, r1
 80175f6:	005b      	lsls	r3, r3, #1
 80175f8:	185b      	adds	r3, r3, r1
 80175fa:	009b      	lsls	r3, r3, #2
 80175fc:	18d3      	adds	r3, r2, r3
 80175fe:	7a1b      	ldrb	r3, [r3, #8]
 8017600:	011b      	lsls	r3, r3, #4
 8017602:	b25b      	sxtb	r3, r3
 8017604:	111b      	asrs	r3, r3, #4
 8017606:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017608:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	689a      	ldr	r2, [r3, #8]
 801760e:	197b      	adds	r3, r7, r5
 8017610:	7819      	ldrb	r1, [r3, #0]
 8017612:	19bb      	adds	r3, r7, r6
 8017614:	781b      	ldrb	r3, [r3, #0]
 8017616:	18cb      	adds	r3, r1, r3
 8017618:	0019      	movs	r1, r3
 801761a:	000b      	movs	r3, r1
 801761c:	005b      	lsls	r3, r3, #1
 801761e:	185b      	adds	r3, r3, r1
 8017620:	009b      	lsls	r3, r3, #2
 8017622:	18d3      	adds	r3, r2, r3
 8017624:	7a1b      	ldrb	r3, [r3, #8]
 8017626:	b25b      	sxtb	r3, r3
 8017628:	111b      	asrs	r3, r3, #4
 801762a:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801762c:	001a      	movs	r2, r3
 801762e:	0021      	movs	r1, r4
 8017630:	f7ff fc03 	bl	8016e3a <RegionCommonValueInRange>
 8017634:	1e03      	subs	r3, r0, #0
 8017636:	d039      	beq.n	80176ac <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	68da      	ldr	r2, [r3, #12]
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	6899      	ldr	r1, [r3, #8]
 8017640:	197b      	adds	r3, r7, r5
 8017642:	7818      	ldrb	r0, [r3, #0]
 8017644:	19bb      	adds	r3, r7, r6
 8017646:	781b      	ldrb	r3, [r3, #0]
 8017648:	18c3      	adds	r3, r0, r3
 801764a:	0018      	movs	r0, r3
 801764c:	0003      	movs	r3, r0
 801764e:	005b      	lsls	r3, r3, #1
 8017650:	181b      	adds	r3, r3, r0
 8017652:	009b      	lsls	r3, r3, #2
 8017654:	18cb      	adds	r3, r1, r3
 8017656:	7a5b      	ldrb	r3, [r3, #9]
 8017658:	0019      	movs	r1, r3
 801765a:	000b      	movs	r3, r1
 801765c:	009b      	lsls	r3, r3, #2
 801765e:	185b      	adds	r3, r3, r1
 8017660:	009b      	lsls	r3, r3, #2
 8017662:	18d3      	adds	r3, r2, r3
 8017664:	7c1b      	ldrb	r3, [r3, #16]
 8017666:	2201      	movs	r2, #1
 8017668:	4053      	eors	r3, r2
 801766a:	b2db      	uxtb	r3, r3
 801766c:	2b00      	cmp	r3, #0
 801766e:	d006      	beq.n	801767e <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017670:	2116      	movs	r1, #22
 8017672:	187b      	adds	r3, r7, r1
 8017674:	781a      	ldrb	r2, [r3, #0]
 8017676:	187b      	adds	r3, r7, r1
 8017678:	3201      	adds	r2, #1
 801767a:	701a      	strb	r2, [r3, #0]
                    continue;
 801767c:	e017      	b.n	80176ae <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801767e:	2217      	movs	r2, #23
 8017680:	18bb      	adds	r3, r7, r2
 8017682:	781b      	ldrb	r3, [r3, #0]
 8017684:	18ba      	adds	r2, r7, r2
 8017686:	1c59      	adds	r1, r3, #1
 8017688:	7011      	strb	r1, [r2, #0]
 801768a:	001a      	movs	r2, r3
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	189b      	adds	r3, r3, r2
 8017690:	2215      	movs	r2, #21
 8017692:	18b9      	adds	r1, r7, r2
 8017694:	2213      	movs	r2, #19
 8017696:	18ba      	adds	r2, r7, r2
 8017698:	7809      	ldrb	r1, [r1, #0]
 801769a:	7812      	ldrb	r2, [r2, #0]
 801769c:	188a      	adds	r2, r1, r2
 801769e:	b2d2      	uxtb	r2, r2
 80176a0:	701a      	strb	r2, [r3, #0]
 80176a2:	e004      	b.n	80176ae <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 80176a4:	46c0      	nop			; (mov r8, r8)
 80176a6:	e002      	b.n	80176ae <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 80176a8:	46c0      	nop			; (mov r8, r8)
 80176aa:	e000      	b.n	80176ae <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 80176ac:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 80176ae:	2113      	movs	r1, #19
 80176b0:	187b      	adds	r3, r7, r1
 80176b2:	781a      	ldrb	r2, [r3, #0]
 80176b4:	187b      	adds	r3, r7, r1
 80176b6:	3201      	adds	r2, #1
 80176b8:	701a      	strb	r2, [r3, #0]
 80176ba:	2313      	movs	r3, #19
 80176bc:	18fb      	adds	r3, r7, r3
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	2b0f      	cmp	r3, #15
 80176c2:	d800      	bhi.n	80176c6 <RegionCommonCountNbOfEnabledChannels+0x198>
 80176c4:	e750      	b.n	8017568 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80176c6:	2215      	movs	r2, #21
 80176c8:	18bb      	adds	r3, r7, r2
 80176ca:	18ba      	adds	r2, r7, r2
 80176cc:	7812      	ldrb	r2, [r2, #0]
 80176ce:	3210      	adds	r2, #16
 80176d0:	701a      	strb	r2, [r3, #0]
 80176d2:	2114      	movs	r1, #20
 80176d4:	187b      	adds	r3, r7, r1
 80176d6:	781a      	ldrb	r2, [r3, #0]
 80176d8:	187b      	adds	r3, r7, r1
 80176da:	3201      	adds	r2, #1
 80176dc:	701a      	strb	r2, [r3, #0]
 80176de:	2315      	movs	r3, #21
 80176e0:	18fb      	adds	r3, r7, r3
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	b29a      	uxth	r2, r3
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	8a1b      	ldrh	r3, [r3, #16]
 80176ea:	429a      	cmp	r2, r3
 80176ec:	d200      	bcs.n	80176f0 <RegionCommonCountNbOfEnabledChannels+0x1c2>
 80176ee:	e736      	b.n	801755e <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2217      	movs	r2, #23
 80176f4:	18ba      	adds	r2, r7, r2
 80176f6:	7812      	ldrb	r2, [r2, #0]
 80176f8:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	2216      	movs	r2, #22
 80176fe:	18ba      	adds	r2, r7, r2
 8017700:	7812      	ldrb	r2, [r2, #0]
 8017702:	701a      	strb	r2, [r3, #0]
}
 8017704:	46c0      	nop			; (mov r8, r8)
 8017706:	46bd      	mov	sp, r7
 8017708:	b007      	add	sp, #28
 801770a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801770c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801770c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801770e:	46c6      	mov	lr, r8
 8017710:	b500      	push	{lr}
 8017712:	b08a      	sub	sp, #40	; 0x28
 8017714:	af04      	add	r7, sp, #16
 8017716:	60f8      	str	r0, [r7, #12]
 8017718:	60b9      	str	r1, [r7, #8]
 801771a:	607a      	str	r2, [r7, #4]
 801771c:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	685b      	ldr	r3, [r3, #4]
 8017722:	0018      	movs	r0, r3
 8017724:	f005 f8cc 	bl	801c8c0 <UTIL_TIMER_GetElapsedTime>
 8017728:	0003      	movs	r3, r0
 801772a:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	697b      	ldr	r3, [r7, #20]
 8017732:	1ad2      	subs	r2, r2, r3
 8017734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017736:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773a:	2201      	movs	r2, #1
 801773c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	2200      	movs	r2, #0
 8017742:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	685b      	ldr	r3, [r3, #4]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d004      	beq.n	8017756 <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017750:	697a      	ldr	r2, [r7, #20]
 8017752:	429a      	cmp	r2, r3
 8017754:	d32b      	bcc.n	80177ae <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017756:	68bb      	ldr	r3, [r7, #8]
 8017758:	2200      	movs	r2, #0
 801775a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	69db      	ldr	r3, [r3, #28]
 8017760:	781b      	ldrb	r3, [r3, #0]
 8017762:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017768:	68dc      	ldr	r4, [r3, #12]
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	7a5d      	ldrb	r5, [r3, #9]
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	7a1e      	ldrb	r6, [r3, #8]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	7d1b      	ldrb	r3, [r3, #20]
 8017776:	4698      	mov	r8, r3
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	699b      	ldr	r3, [r3, #24]
 801777c:	9303      	str	r3, [sp, #12]
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	2204      	movs	r2, #4
 8017782:	446a      	add	r2, sp
 8017784:	330c      	adds	r3, #12
 8017786:	cb03      	ldmia	r3!, {r0, r1}
 8017788:	c203      	stmia	r2!, {r0, r1}
 801778a:	4643      	mov	r3, r8
 801778c:	9300      	str	r3, [sp, #0]
 801778e:	0033      	movs	r3, r6
 8017790:	002a      	movs	r2, r5
 8017792:	0021      	movs	r1, r4
 8017794:	4660      	mov	r0, ip
 8017796:	f7ff fc61 	bl	801705c <RegionCommonUpdateBandTimeOff>
 801779a:	0002      	movs	r2, r0
 801779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801779e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	69d8      	ldr	r0, [r3, #28]
 80177a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177a6:	683a      	ldr	r2, [r7, #0]
 80177a8:	6879      	ldr	r1, [r7, #4]
 80177aa:	f7ff fec0 	bl	801752e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	781b      	ldrb	r3, [r3, #0]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d004      	beq.n	80177c0 <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 80177b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177b8:	2200      	movs	r2, #0
 80177ba:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80177bc:	2300      	movs	r3, #0
 80177be:	e006      	b.n	80177ce <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 80177c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177c2:	781b      	ldrb	r3, [r3, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d001      	beq.n	80177cc <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80177c8:	230b      	movs	r3, #11
 80177ca:	e000      	b.n	80177ce <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80177cc:	230c      	movs	r3, #12
    }
}
 80177ce:	0018      	movs	r0, r3
 80177d0:	46bd      	mov	sp, r7
 80177d2:	b006      	add	sp, #24
 80177d4:	bc80      	pop	{r7}
 80177d6:	46b8      	mov	r8, r7
 80177d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080177dc <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80177dc:	b590      	push	{r4, r7, lr}
 80177de:	b089      	sub	sp, #36	; 0x24
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6039      	str	r1, [r7, #0]
 80177e4:	0011      	movs	r1, r2
 80177e6:	1dfb      	adds	r3, r7, #7
 80177e8:	1c02      	adds	r2, r0, #0
 80177ea:	701a      	strb	r2, [r3, #0]
 80177ec:	1dbb      	adds	r3, r7, #6
 80177ee:	1c0a      	adds	r2, r1, #0
 80177f0:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 80177f2:	2308      	movs	r3, #8
 80177f4:	18fb      	adds	r3, r7, r3
 80177f6:	4a04      	ldr	r2, [pc, #16]	; (8017808 <RegionCommonRxConfigPrint+0x2c>)
 80177f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80177fa:	c313      	stmia	r3!, {r0, r1, r4}
 80177fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80177fe:	c313      	stmia	r3!, {r0, r1, r4}
    }
    else
    {
//        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017800:	46c0      	nop			; (mov r8, r8)
 8017802:	46bd      	mov	sp, r7
 8017804:	b009      	add	sp, #36	; 0x24
 8017806:	bd90      	pop	{r4, r7, pc}
 8017808:	0801ea48 	.word	0x0801ea48

0801780c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b086      	sub	sp, #24
 8017810:	af02      	add	r7, sp, #8
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	000a      	movs	r2, r1
 8017816:	1cfb      	adds	r3, r7, #3
 8017818:	701a      	strb	r2, [r3, #0]
	uint32_t freq_mhz = frequency / 1000000; // Конвертируем частоту в мегагерцы
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	4915      	ldr	r1, [pc, #84]	; (8017874 <RegionCommonTxConfigPrint+0x68>)
 801781e:	0018      	movs	r0, r3
 8017820:	f7e8 fc7a 	bl	8000118 <__udivsi3>
 8017824:	0003      	movs	r3, r0
 8017826:	60fb      	str	r3, [r7, #12]
	uint32_t freq_decimal = (frequency % 1000000) / 100000; // Получаем 1-ю цифру после запятой
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	4912      	ldr	r1, [pc, #72]	; (8017874 <RegionCommonTxConfigPrint+0x68>)
 801782c:	0018      	movs	r0, r3
 801782e:	f7e8 fcf9 	bl	8000224 <__aeabi_uidivmod>
 8017832:	000b      	movs	r3, r1
 8017834:	4910      	ldr	r1, [pc, #64]	; (8017878 <RegionCommonTxConfigPrint+0x6c>)
 8017836:	0018      	movs	r0, r3
 8017838:	f7e8 fc6e 	bl	8000118 <__udivsi3>
 801783c:	0003      	movs	r3, r0
 801783e:	60bb      	str	r3, [r7, #8]
//	float freq_mhz2 = frequency / 1000000.0f; // Конвертируем частоту в мегагерцы
//    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
//    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n » Отправка на частоте %d.%d МГц по каналу скорости передачи DR%d\r\n", freq_mhz, freq_decimal, dr );
    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n »  Передача данных на частоте: %d.%d МГц", freq_mhz, freq_decimal);
 8017840:	4a0e      	ldr	r2, [pc, #56]	; (801787c <RegionCommonTxConfigPrint+0x70>)
 8017842:	68bb      	ldr	r3, [r7, #8]
 8017844:	9301      	str	r3, [sp, #4]
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	9300      	str	r3, [sp, #0]
 801784a:	0013      	movs	r3, r2
 801784c:	2200      	movs	r2, #0
 801784e:	2100      	movs	r1, #0
 8017850:	2002      	movs	r0, #2
 8017852:	f003 ffb7 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n     Канал скорости передачи: DR%d\r\n",  dr );
 8017856:	1cfb      	adds	r3, r7, #3
 8017858:	781b      	ldrb	r3, [r3, #0]
 801785a:	b25b      	sxtb	r3, r3
 801785c:	4a08      	ldr	r2, [pc, #32]	; (8017880 <RegionCommonTxConfigPrint+0x74>)
 801785e:	9300      	str	r3, [sp, #0]
 8017860:	0013      	movs	r3, r2
 8017862:	2200      	movs	r2, #0
 8017864:	2100      	movs	r1, #0
 8017866:	2002      	movs	r0, #2
 8017868:	f003 ffac 	bl	801b7c4 <UTIL_ADV_TRACE_COND_FSend>
}
 801786c:	46c0      	nop			; (mov r8, r8)
 801786e:	46bd      	mov	sp, r7
 8017870:	b004      	add	sp, #16
 8017872:	bd80      	pop	{r7, pc}
 8017874:	000f4240 	.word	0x000f4240
 8017878:	000186a0 	.word	0x000186a0
 801787c:	0801ea60 	.word	0x0801ea60
 8017880:	0801eaa8 	.word	0x0801eaa8

08017884 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0
 801788a:	0002      	movs	r2, r0
 801788c:	1dfb      	adds	r3, r7, #7
 801788e:	701a      	strb	r2, [r3, #0]
 8017890:	1dbb      	adds	r3, r7, #6
 8017892:	1c0a      	adds	r2, r1, #0
 8017894:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017896:	210f      	movs	r1, #15
 8017898:	187b      	adds	r3, r7, r1
 801789a:	2200      	movs	r2, #0
 801789c:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 801789e:	1dfa      	adds	r2, r7, #7
 80178a0:	1dbb      	adds	r3, r7, #6
 80178a2:	7812      	ldrb	r2, [r2, #0]
 80178a4:	b252      	sxtb	r2, r2
 80178a6:	781b      	ldrb	r3, [r3, #0]
 80178a8:	b25b      	sxtb	r3, r3
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d104      	bne.n	80178b8 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 80178ae:	187b      	adds	r3, r7, r1
 80178b0:	1dba      	adds	r2, r7, #6
 80178b2:	7812      	ldrb	r2, [r2, #0]
 80178b4:	701a      	strb	r2, [r3, #0]
 80178b6:	e005      	b.n	80178c4 <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 80178b8:	1dfb      	adds	r3, r7, #7
 80178ba:	781a      	ldrb	r2, [r3, #0]
 80178bc:	230f      	movs	r3, #15
 80178be:	18fb      	adds	r3, r7, r3
 80178c0:	3a01      	subs	r2, #1
 80178c2:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80178c4:	230f      	movs	r3, #15
 80178c6:	18fb      	adds	r3, r7, r3
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	b25b      	sxtb	r3, r3
}
 80178cc:	0018      	movs	r0, r3
 80178ce:	46bd      	mov	sp, r7
 80178d0:	b004      	add	sp, #16
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b082      	sub	sp, #8
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 80178dc:	4b09      	ldr	r3, [pc, #36]	; (8017904 <GetBandwidth+0x30>)
 80178de:	687a      	ldr	r2, [r7, #4]
 80178e0:	0092      	lsls	r2, r2, #2
 80178e2:	58d3      	ldr	r3, [r2, r3]
 80178e4:	4a08      	ldr	r2, [pc, #32]	; (8017908 <GetBandwidth+0x34>)
 80178e6:	4293      	cmp	r3, r2
 80178e8:	d004      	beq.n	80178f4 <GetBandwidth+0x20>
 80178ea:	4a08      	ldr	r2, [pc, #32]	; (801790c <GetBandwidth+0x38>)
 80178ec:	4293      	cmp	r3, r2
 80178ee:	d003      	beq.n	80178f8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80178f0:	2300      	movs	r3, #0
 80178f2:	e002      	b.n	80178fa <GetBandwidth+0x26>
        case 250000:
            return 1;
 80178f4:	2301      	movs	r3, #1
 80178f6:	e000      	b.n	80178fa <GetBandwidth+0x26>
        case 500000:
            return 2;
 80178f8:	2302      	movs	r3, #2
    }
}
 80178fa:	0018      	movs	r0, r3
 80178fc:	46bd      	mov	sp, r7
 80178fe:	b002      	add	sp, #8
 8017900:	bd80      	pop	{r7, pc}
 8017902:	46c0      	nop			; (mov r8, r8)
 8017904:	0801eafc 	.word	0x0801eafc
 8017908:	0003d090 	.word	0x0003d090
 801790c:	0007a120 	.word	0x0007a120

08017910 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017910:	b590      	push	{r4, r7, lr}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	0004      	movs	r4, r0
 8017918:	0008      	movs	r0, r1
 801791a:	0011      	movs	r1, r2
 801791c:	603b      	str	r3, [r7, #0]
 801791e:	1dfb      	adds	r3, r7, #7
 8017920:	1c22      	adds	r2, r4, #0
 8017922:	701a      	strb	r2, [r3, #0]
 8017924:	1dbb      	adds	r3, r7, #6
 8017926:	1c02      	adds	r2, r0, #0
 8017928:	701a      	strb	r2, [r3, #0]
 801792a:	1d7b      	adds	r3, r7, #5
 801792c:	1c0a      	adds	r2, r1, #0
 801792e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017930:	210f      	movs	r1, #15
 8017932:	187b      	adds	r3, r7, r1
 8017934:	1dfa      	adds	r2, r7, #7
 8017936:	7812      	ldrb	r2, [r2, #0]
 8017938:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 801793a:	187a      	adds	r2, r7, r1
 801793c:	1dbb      	adds	r3, r7, #6
 801793e:	1df9      	adds	r1, r7, #7
 8017940:	780c      	ldrb	r4, [r1, #0]
 8017942:	781b      	ldrb	r3, [r3, #0]
 8017944:	b258      	sxtb	r0, r3
 8017946:	b261      	sxtb	r1, r4
 8017948:	4288      	cmp	r0, r1
 801794a:	da00      	bge.n	801794e <LimitTxPower+0x3e>
 801794c:	1c23      	adds	r3, r4, #0
 801794e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017950:	230f      	movs	r3, #15
 8017952:	18fb      	adds	r3, r7, r3
 8017954:	781b      	ldrb	r3, [r3, #0]
 8017956:	b25b      	sxtb	r3, r3
}
 8017958:	0018      	movs	r0, r3
 801795a:	46bd      	mov	sp, r7
 801795c:	b005      	add	sp, #20
 801795e:	bd90      	pop	{r4, r7, pc}

08017960 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
 8017968:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801796a:	4b2e      	ldr	r3, [pc, #184]	; (8017a24 <VerifyRfFreq+0xc4>)
 801796c:	6a1b      	ldr	r3, [r3, #32]
 801796e:	687a      	ldr	r2, [r7, #4]
 8017970:	0010      	movs	r0, r2
 8017972:	4798      	blx	r3
 8017974:	0003      	movs	r3, r0
 8017976:	001a      	movs	r2, r3
 8017978:	2301      	movs	r3, #1
 801797a:	4053      	eors	r3, r2
 801797c:	b2db      	uxtb	r3, r3
 801797e:	2b00      	cmp	r3, #0
 8017980:	d001      	beq.n	8017986 <VerifyRfFreq+0x26>
    {
        return false;
 8017982:	2300      	movs	r3, #0
 8017984:	e04a      	b.n	8017a1c <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	4a27      	ldr	r2, [pc, #156]	; (8017a28 <VerifyRfFreq+0xc8>)
 801798a:	4293      	cmp	r3, r2
 801798c:	d907      	bls.n	801799e <VerifyRfFreq+0x3e>
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	4a26      	ldr	r2, [pc, #152]	; (8017a2c <VerifyRfFreq+0xcc>)
 8017992:	4293      	cmp	r3, r2
 8017994:	d803      	bhi.n	801799e <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8017996:	683b      	ldr	r3, [r7, #0]
 8017998:	2202      	movs	r2, #2
 801799a:	701a      	strb	r2, [r3, #0]
 801799c:	e03d      	b.n	8017a1a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	4a22      	ldr	r2, [pc, #136]	; (8017a2c <VerifyRfFreq+0xcc>)
 80179a2:	4293      	cmp	r3, r2
 80179a4:	d907      	bls.n	80179b6 <VerifyRfFreq+0x56>
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	4a21      	ldr	r2, [pc, #132]	; (8017a30 <VerifyRfFreq+0xd0>)
 80179aa:	4293      	cmp	r3, r2
 80179ac:	d803      	bhi.n	80179b6 <VerifyRfFreq+0x56>
    {
        *band = 0;
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	2200      	movs	r2, #0
 80179b2:	701a      	strb	r2, [r3, #0]
 80179b4:	e031      	b.n	8017a1a <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	4a1d      	ldr	r2, [pc, #116]	; (8017a30 <VerifyRfFreq+0xd0>)
 80179ba:	4293      	cmp	r3, r2
 80179bc:	d907      	bls.n	80179ce <VerifyRfFreq+0x6e>
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	4a1c      	ldr	r2, [pc, #112]	; (8017a34 <VerifyRfFreq+0xd4>)
 80179c2:	4293      	cmp	r3, r2
 80179c4:	d803      	bhi.n	80179ce <VerifyRfFreq+0x6e>
    {
        *band = 1;
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	2201      	movs	r2, #1
 80179ca:	701a      	strb	r2, [r3, #0]
 80179cc:	e025      	b.n	8017a1a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	4a19      	ldr	r2, [pc, #100]	; (8017a38 <VerifyRfFreq+0xd8>)
 80179d2:	4293      	cmp	r3, r2
 80179d4:	d907      	bls.n	80179e6 <VerifyRfFreq+0x86>
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	4a18      	ldr	r2, [pc, #96]	; (8017a3c <VerifyRfFreq+0xdc>)
 80179da:	4293      	cmp	r3, r2
 80179dc:	d803      	bhi.n	80179e6 <VerifyRfFreq+0x86>
    {
        *band = 5;
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	2205      	movs	r2, #5
 80179e2:	701a      	strb	r2, [r3, #0]
 80179e4:	e019      	b.n	8017a1a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	4a15      	ldr	r2, [pc, #84]	; (8017a40 <VerifyRfFreq+0xe0>)
 80179ea:	4293      	cmp	r3, r2
 80179ec:	d907      	bls.n	80179fe <VerifyRfFreq+0x9e>
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	4a14      	ldr	r2, [pc, #80]	; (8017a44 <VerifyRfFreq+0xe4>)
 80179f2:	4293      	cmp	r3, r2
 80179f4:	d803      	bhi.n	80179fe <VerifyRfFreq+0x9e>
    {
        *band = 3;
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	2203      	movs	r2, #3
 80179fa:	701a      	strb	r2, [r3, #0]
 80179fc:	e00d      	b.n	8017a1a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	4a11      	ldr	r2, [pc, #68]	; (8017a48 <VerifyRfFreq+0xe8>)
 8017a02:	4293      	cmp	r3, r2
 8017a04:	d907      	bls.n	8017a16 <VerifyRfFreq+0xb6>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	4a10      	ldr	r2, [pc, #64]	; (8017a4c <VerifyRfFreq+0xec>)
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d803      	bhi.n	8017a16 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 8017a0e:	683b      	ldr	r3, [r7, #0]
 8017a10:	2204      	movs	r2, #4
 8017a12:	701a      	strb	r2, [r3, #0]
 8017a14:	e001      	b.n	8017a1a <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8017a16:	2300      	movs	r3, #0
 8017a18:	e000      	b.n	8017a1c <VerifyRfFreq+0xbc>
    }
    return true;
 8017a1a:	2301      	movs	r3, #1
}
 8017a1c:	0018      	movs	r0, r3
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	b002      	add	sp, #8
 8017a22:	bd80      	pop	{r7, pc}
 8017a24:	0801ec78 	.word	0x0801ec78
 8017a28:	337055bf 	.word	0x337055bf
 8017a2c:	338eda3f 	.word	0x338eda3f
 8017a30:	33bca100 	.word	0x33bca100
 8017a34:	33c5c8c0 	.word	0x33c5c8c0
 8017a38:	33c74f5f 	.word	0x33c74f5f
 8017a3c:	33cef080 	.word	0x33cef080
 8017a40:	33d1fdbf 	.word	0x33d1fdbf
 8017a44:	33d5ce50 	.word	0x33d5ce50
 8017a48:	33d6919f 	.word	0x33d6919f
 8017a4c:	33db2580 	.word	0x33db2580

08017a50 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017a50:	b5b0      	push	{r4, r5, r7, lr}
 8017a52:	b08a      	sub	sp, #40	; 0x28
 8017a54:	af04      	add	r7, sp, #16
 8017a56:	0002      	movs	r2, r0
 8017a58:	1dfb      	adds	r3, r7, #7
 8017a5a:	701a      	strb	r2, [r3, #0]
 8017a5c:	1d3b      	adds	r3, r7, #4
 8017a5e:	1c0a      	adds	r2, r1, #0
 8017a60:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 8017a62:	1dfb      	adds	r3, r7, #7
 8017a64:	781b      	ldrb	r3, [r3, #0]
 8017a66:	b25b      	sxtb	r3, r3
 8017a68:	4a26      	ldr	r2, [pc, #152]	; (8017b04 <GetTimeOnAir+0xb4>)
 8017a6a:	5cd2      	ldrb	r2, [r2, r3]
 8017a6c:	2513      	movs	r5, #19
 8017a6e:	197b      	adds	r3, r7, r5
 8017a70:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 8017a72:	1dfb      	adds	r3, r7, #7
 8017a74:	781b      	ldrb	r3, [r3, #0]
 8017a76:	b25b      	sxtb	r3, r3
 8017a78:	0018      	movs	r0, r3
 8017a7a:	f7ff ff2b 	bl	80178d4 <GetBandwidth>
 8017a7e:	0003      	movs	r3, r0
 8017a80:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017a82:	2300      	movs	r3, #0
 8017a84:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017a86:	1dfb      	adds	r3, r7, #7
 8017a88:	781b      	ldrb	r3, [r3, #0]
 8017a8a:	b25b      	sxtb	r3, r3
 8017a8c:	2b07      	cmp	r3, #7
 8017a8e:	d11d      	bne.n	8017acc <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017a90:	4b1d      	ldr	r3, [pc, #116]	; (8017b08 <GetTimeOnAir+0xb8>)
 8017a92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017a94:	197b      	adds	r3, r7, r5
 8017a96:	2200      	movs	r2, #0
 8017a98:	569a      	ldrsb	r2, [r3, r2]
 8017a9a:	0013      	movs	r3, r2
 8017a9c:	015b      	lsls	r3, r3, #5
 8017a9e:	1a9b      	subs	r3, r3, r2
 8017aa0:	009b      	lsls	r3, r3, #2
 8017aa2:	189b      	adds	r3, r3, r2
 8017aa4:	00db      	lsls	r3, r3, #3
 8017aa6:	0018      	movs	r0, r3
 8017aa8:	1d3b      	adds	r3, r7, #4
 8017aaa:	881b      	ldrh	r3, [r3, #0]
 8017aac:	b2db      	uxtb	r3, r3
 8017aae:	68f9      	ldr	r1, [r7, #12]
 8017ab0:	2201      	movs	r2, #1
 8017ab2:	9203      	str	r2, [sp, #12]
 8017ab4:	9302      	str	r3, [sp, #8]
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	9301      	str	r3, [sp, #4]
 8017aba:	2305      	movs	r3, #5
 8017abc:	9300      	str	r3, [sp, #0]
 8017abe:	2300      	movs	r3, #0
 8017ac0:	0002      	movs	r2, r0
 8017ac2:	2000      	movs	r0, #0
 8017ac4:	47a0      	blx	r4
 8017ac6:	0003      	movs	r3, r0
 8017ac8:	617b      	str	r3, [r7, #20]
 8017aca:	e015      	b.n	8017af8 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017acc:	4b0e      	ldr	r3, [pc, #56]	; (8017b08 <GetTimeOnAir+0xb8>)
 8017ace:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017ad0:	2313      	movs	r3, #19
 8017ad2:	18fb      	adds	r3, r7, r3
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	569a      	ldrsb	r2, [r3, r2]
 8017ad8:	1d3b      	adds	r3, r7, #4
 8017ada:	881b      	ldrh	r3, [r3, #0]
 8017adc:	b2db      	uxtb	r3, r3
 8017ade:	68f9      	ldr	r1, [r7, #12]
 8017ae0:	2001      	movs	r0, #1
 8017ae2:	9003      	str	r0, [sp, #12]
 8017ae4:	9302      	str	r3, [sp, #8]
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	9301      	str	r3, [sp, #4]
 8017aea:	2308      	movs	r3, #8
 8017aec:	9300      	str	r3, [sp, #0]
 8017aee:	2301      	movs	r3, #1
 8017af0:	2001      	movs	r0, #1
 8017af2:	47a0      	blx	r4
 8017af4:	0003      	movs	r3, r0
 8017af6:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 8017af8:	697b      	ldr	r3, [r7, #20]
}
 8017afa:	0018      	movs	r0, r3
 8017afc:	46bd      	mov	sp, r7
 8017afe:	b006      	add	sp, #24
 8017b00:	bdb0      	pop	{r4, r5, r7, pc}
 8017b02:	46c0      	nop			; (mov r8, r8)
 8017b04:	0801eaf4 	.word	0x0801eaf4
 8017b08:	0801ec78 	.word	0x0801ec78

08017b0c <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b084      	sub	sp, #16
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017b14:	2308      	movs	r3, #8
 8017b16:	18fb      	adds	r3, r7, r3
 8017b18:	2200      	movs	r2, #0
 8017b1a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	2b39      	cmp	r3, #57	; 0x39
 8017b22:	d900      	bls.n	8017b26 <RegionEU868GetPhyParam+0x1a>
 8017b24:	e0e9      	b.n	8017cfa <RegionEU868GetPhyParam+0x1ee>
 8017b26:	009a      	lsls	r2, r3, #2
 8017b28:	4b7b      	ldr	r3, [pc, #492]	; (8017d18 <RegionEU868GetPhyParam+0x20c>)
 8017b2a:	18d3      	adds	r3, r2, r3
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017b30:	2308      	movs	r3, #8
 8017b32:	18fb      	adds	r3, r7, r3
 8017b34:	2200      	movs	r2, #0
 8017b36:	601a      	str	r2, [r3, #0]
            break;
 8017b38:	e0e0      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017b3a:	2308      	movs	r3, #8
 8017b3c:	18fb      	adds	r3, r7, r3
 8017b3e:	2200      	movs	r2, #0
 8017b40:	601a      	str	r2, [r3, #0]
            break;
 8017b42:	e0db      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017b44:	2308      	movs	r3, #8
 8017b46:	18fb      	adds	r3, r7, r3
 8017b48:	2200      	movs	r2, #0
 8017b4a:	601a      	str	r2, [r3, #0]
            break;
 8017b4c:	e0d6      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	785b      	ldrb	r3, [r3, #1]
 8017b52:	b25b      	sxtb	r3, r3
 8017b54:	2100      	movs	r1, #0
 8017b56:	0018      	movs	r0, r3
 8017b58:	f7ff fe94 	bl	8017884 <GetNextLowerTxDr>
 8017b5c:	0003      	movs	r3, r0
 8017b5e:	001a      	movs	r2, r3
 8017b60:	2308      	movs	r3, #8
 8017b62:	18fb      	adds	r3, r7, r3
 8017b64:	601a      	str	r2, [r3, #0]
            break;
 8017b66:	e0c9      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017b68:	2308      	movs	r3, #8
 8017b6a:	18fb      	adds	r3, r7, r3
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	601a      	str	r2, [r3, #0]
            break;
 8017b70:	e0c4      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017b72:	2308      	movs	r3, #8
 8017b74:	18fb      	adds	r3, r7, r3
 8017b76:	2200      	movs	r2, #0
 8017b78:	601a      	str	r2, [r3, #0]
            break;
 8017b7a:	e0bf      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8017b7c:	2308      	movs	r3, #8
 8017b7e:	18fb      	adds	r3, r7, r3
 8017b80:	2240      	movs	r2, #64	; 0x40
 8017b82:	601a      	str	r2, [r3, #0]
            break;
 8017b84:	e0ba      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8017b86:	2308      	movs	r3, #8
 8017b88:	18fb      	adds	r3, r7, r3
 8017b8a:	2220      	movs	r2, #32
 8017b8c:	601a      	str	r2, [r3, #0]
            break;
 8017b8e:	e0b5      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	785b      	ldrb	r3, [r3, #1]
 8017b94:	b25b      	sxtb	r3, r3
 8017b96:	001a      	movs	r2, r3
 8017b98:	4b60      	ldr	r3, [pc, #384]	; (8017d1c <RegionEU868GetPhyParam+0x210>)
 8017b9a:	5c9b      	ldrb	r3, [r3, r2]
 8017b9c:	001a      	movs	r2, r3
 8017b9e:	2308      	movs	r3, #8
 8017ba0:	18fb      	adds	r3, r7, r3
 8017ba2:	601a      	str	r2, [r3, #0]
            break;
 8017ba4:	e0aa      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	785b      	ldrb	r3, [r3, #1]
 8017baa:	b25b      	sxtb	r3, r3
 8017bac:	001a      	movs	r2, r3
 8017bae:	4b5c      	ldr	r3, [pc, #368]	; (8017d20 <RegionEU868GetPhyParam+0x214>)
 8017bb0:	5c9b      	ldrb	r3, [r3, r2]
 8017bb2:	001a      	movs	r2, r3
 8017bb4:	2308      	movs	r3, #8
 8017bb6:	18fb      	adds	r3, r7, r3
 8017bb8:	601a      	str	r2, [r3, #0]
            break;
 8017bba:	e09f      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017bbc:	2308      	movs	r3, #8
 8017bbe:	18fb      	adds	r3, r7, r3
 8017bc0:	2201      	movs	r2, #1
 8017bc2:	601a      	str	r2, [r3, #0]
            break;
 8017bc4:	e09a      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017bc6:	2308      	movs	r3, #8
 8017bc8:	18fb      	adds	r3, r7, r3
 8017bca:	4a56      	ldr	r2, [pc, #344]	; (8017d24 <RegionEU868GetPhyParam+0x218>)
 8017bcc:	601a      	str	r2, [r3, #0]
            break;
 8017bce:	e095      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8017bd0:	2308      	movs	r3, #8
 8017bd2:	18fb      	adds	r3, r7, r3
 8017bd4:	22fa      	movs	r2, #250	; 0xfa
 8017bd6:	0092      	lsls	r2, r2, #2
 8017bd8:	601a      	str	r2, [r3, #0]
            break;
 8017bda:	e08f      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8017bdc:	2308      	movs	r3, #8
 8017bde:	18fb      	adds	r3, r7, r3
 8017be0:	22fa      	movs	r2, #250	; 0xfa
 8017be2:	00d2      	lsls	r2, r2, #3
 8017be4:	601a      	str	r2, [r3, #0]
            break;
 8017be6:	e089      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8017be8:	2308      	movs	r3, #8
 8017bea:	18fb      	adds	r3, r7, r3
 8017bec:	4a4e      	ldr	r2, [pc, #312]	; (8017d28 <RegionEU868GetPhyParam+0x21c>)
 8017bee:	601a      	str	r2, [r3, #0]
            break;
 8017bf0:	e084      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8017bf2:	2308      	movs	r3, #8
 8017bf4:	18fb      	adds	r3, r7, r3
 8017bf6:	4a4d      	ldr	r2, [pc, #308]	; (8017d2c <RegionEU868GetPhyParam+0x220>)
 8017bf8:	601a      	str	r2, [r3, #0]
            break;
 8017bfa:	e07f      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8017bfc:	2308      	movs	r3, #8
 8017bfe:	18fb      	adds	r3, r7, r3
 8017c00:	2280      	movs	r2, #128	; 0x80
 8017c02:	01d2      	lsls	r2, r2, #7
 8017c04:	601a      	str	r2, [r3, #0]
            break;
 8017c06:	e079      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8017c08:	23fa      	movs	r3, #250	; 0xfa
 8017c0a:	009b      	lsls	r3, r3, #2
 8017c0c:	4a48      	ldr	r2, [pc, #288]	; (8017d30 <RegionEU868GetPhyParam+0x224>)
 8017c0e:	0019      	movs	r1, r3
 8017c10:	0010      	movs	r0, r2
 8017c12:	f001 f983 	bl	8018f1c <randr>
 8017c16:	0003      	movs	r3, r0
 8017c18:	22fa      	movs	r2, #250	; 0xfa
 8017c1a:	00d2      	lsls	r2, r2, #3
 8017c1c:	4694      	mov	ip, r2
 8017c1e:	4463      	add	r3, ip
 8017c20:	001a      	movs	r2, r3
 8017c22:	2308      	movs	r3, #8
 8017c24:	18fb      	adds	r3, r7, r3
 8017c26:	601a      	str	r2, [r3, #0]
            break;
 8017c28:	e068      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8017c2a:	2308      	movs	r3, #8
 8017c2c:	18fb      	adds	r3, r7, r3
 8017c2e:	2200      	movs	r2, #0
 8017c30:	601a      	str	r2, [r3, #0]
            break;
 8017c32:	e063      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017c34:	2308      	movs	r3, #8
 8017c36:	18fb      	adds	r3, r7, r3
 8017c38:	4a3e      	ldr	r2, [pc, #248]	; (8017d34 <RegionEU868GetPhyParam+0x228>)
 8017c3a:	601a      	str	r2, [r3, #0]
            break;
 8017c3c:	e05e      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017c3e:	2308      	movs	r3, #8
 8017c40:	18fb      	adds	r3, r7, r3
 8017c42:	2200      	movs	r2, #0
 8017c44:	601a      	str	r2, [r3, #0]
            break;
 8017c46:	e059      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8017c48:	2308      	movs	r3, #8
 8017c4a:	18fb      	adds	r3, r7, r3
 8017c4c:	4a3a      	ldr	r2, [pc, #232]	; (8017d38 <RegionEU868GetPhyParam+0x22c>)
 8017c4e:	601a      	str	r2, [r3, #0]
            break;
 8017c50:	e054      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8017c52:	2308      	movs	r3, #8
 8017c54:	18fb      	adds	r3, r7, r3
 8017c56:	4a39      	ldr	r2, [pc, #228]	; (8017d3c <RegionEU868GetPhyParam+0x230>)
 8017c58:	601a      	str	r2, [r3, #0]
            break;
 8017c5a:	e04f      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017c5c:	2308      	movs	r3, #8
 8017c5e:	18fb      	adds	r3, r7, r3
 8017c60:	2210      	movs	r2, #16
 8017c62:	601a      	str	r2, [r3, #0]
            break;
 8017c64:	e04a      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8017c66:	2308      	movs	r3, #8
 8017c68:	18fb      	adds	r3, r7, r3
 8017c6a:	4a35      	ldr	r2, [pc, #212]	; (8017d40 <RegionEU868GetPhyParam+0x234>)
 8017c6c:	601a      	str	r2, [r3, #0]
            break;
 8017c6e:	e045      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8017c70:	2308      	movs	r3, #8
 8017c72:	18fb      	adds	r3, r7, r3
 8017c74:	2200      	movs	r2, #0
 8017c76:	601a      	str	r2, [r3, #0]
            break;
 8017c78:	e040      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017c7a:	2308      	movs	r3, #8
 8017c7c:	18fb      	adds	r3, r7, r3
 8017c7e:	2283      	movs	r2, #131	; 0x83
 8017c80:	05d2      	lsls	r2, r2, #23
 8017c82:	601a      	str	r2, [r3, #0]
            break;
 8017c84:	e03a      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017c86:	2308      	movs	r3, #8
 8017c88:	18fb      	adds	r3, r7, r3
 8017c8a:	4a2e      	ldr	r2, [pc, #184]	; (8017d44 <RegionEU868GetPhyParam+0x238>)
 8017c8c:	601a      	str	r2, [r3, #0]
            break;
 8017c8e:	e035      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017c90:	2308      	movs	r3, #8
 8017c92:	18fb      	adds	r3, r7, r3
 8017c94:	4a27      	ldr	r2, [pc, #156]	; (8017d34 <RegionEU868GetPhyParam+0x228>)
 8017c96:	601a      	str	r2, [r3, #0]
            break;
 8017c98:	e030      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017c9a:	2108      	movs	r1, #8
 8017c9c:	187b      	adds	r3, r7, r1
 8017c9e:	2211      	movs	r2, #17
 8017ca0:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017ca2:	187b      	adds	r3, r7, r1
 8017ca4:	2202      	movs	r2, #2
 8017ca6:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017ca8:	187b      	adds	r3, r7, r1
 8017caa:	2200      	movs	r2, #0
 8017cac:	709a      	strb	r2, [r3, #2]
            break;
 8017cae:	e025      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017cb0:	2308      	movs	r3, #8
 8017cb2:	18fb      	adds	r3, r7, r3
 8017cb4:	2203      	movs	r2, #3
 8017cb6:	601a      	str	r2, [r3, #0]
            break;
 8017cb8:	e020      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017cba:	2308      	movs	r3, #8
 8017cbc:	18fb      	adds	r3, r7, r3
 8017cbe:	4a1d      	ldr	r2, [pc, #116]	; (8017d34 <RegionEU868GetPhyParam+0x228>)
 8017cc0:	601a      	str	r2, [r3, #0]
            break;
 8017cc2:	e01b      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017cc4:	2308      	movs	r3, #8
 8017cc6:	18fb      	adds	r3, r7, r3
 8017cc8:	2203      	movs	r2, #3
 8017cca:	601a      	str	r2, [r3, #0]
            break;
 8017ccc:	e016      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	785b      	ldrb	r3, [r3, #1]
 8017cd2:	b25b      	sxtb	r3, r3
 8017cd4:	001a      	movs	r2, r3
 8017cd6:	4b1c      	ldr	r3, [pc, #112]	; (8017d48 <RegionEU868GetPhyParam+0x23c>)
 8017cd8:	5c9b      	ldrb	r3, [r3, r2]
 8017cda:	001a      	movs	r2, r3
 8017cdc:	2308      	movs	r3, #8
 8017cde:	18fb      	adds	r3, r7, r3
 8017ce0:	601a      	str	r2, [r3, #0]
            break;
 8017ce2:	e00b      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	785b      	ldrb	r3, [r3, #1]
 8017ce8:	b25b      	sxtb	r3, r3
 8017cea:	0018      	movs	r0, r3
 8017cec:	f7ff fdf2 	bl	80178d4 <GetBandwidth>
 8017cf0:	0002      	movs	r2, r0
 8017cf2:	2308      	movs	r3, #8
 8017cf4:	18fb      	adds	r3, r7, r3
 8017cf6:	601a      	str	r2, [r3, #0]
            break;
 8017cf8:	e000      	b.n	8017cfc <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 8017cfa:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8017cfc:	210c      	movs	r1, #12
 8017cfe:	187b      	adds	r3, r7, r1
 8017d00:	2208      	movs	r2, #8
 8017d02:	18ba      	adds	r2, r7, r2
 8017d04:	6812      	ldr	r2, [r2, #0]
 8017d06:	601a      	str	r2, [r3, #0]
 8017d08:	187b      	adds	r3, r7, r1
 8017d0a:	681a      	ldr	r2, [r3, #0]
 8017d0c:	0013      	movs	r3, r2
}
 8017d0e:	0018      	movs	r0, r3
 8017d10:	46bd      	mov	sp, r7
 8017d12:	b004      	add	sp, #16
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	46c0      	nop			; (mov r8, r8)
 8017d18:	0801eb2c 	.word	0x0801eb2c
 8017d1c:	0801eb1c 	.word	0x0801eb1c
 8017d20:	0801eb24 	.word	0x0801eb24
 8017d24:	00000bb8 	.word	0x00000bb8
 8017d28:	00001388 	.word	0x00001388
 8017d2c:	00001770 	.word	0x00001770
 8017d30:	fffffc18 	.word	0xfffffc18
 8017d34:	33d3e608 	.word	0x33d3e608
 8017d38:	2000147c 	.word	0x2000147c
 8017d3c:	2000147e 	.word	0x2000147e
 8017d40:	20001344 	.word	0x20001344
 8017d44:	4009999a 	.word	0x4009999a
 8017d48:	0801eaf4 	.word	0x0801eaf4

08017d4c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017d4c:	b5b0      	push	{r4, r5, r7, lr}
 8017d4e:	b084      	sub	sp, #16
 8017d50:	af02      	add	r7, sp, #8
 8017d52:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	0019      	movs	r1, r3
 8017d5a:	4a11      	ldr	r2, [pc, #68]	; (8017da0 <RegionEU868SetBandTxDone+0x54>)
 8017d5c:	000b      	movs	r3, r1
 8017d5e:	005b      	lsls	r3, r3, #1
 8017d60:	185b      	adds	r3, r3, r1
 8017d62:	009b      	lsls	r3, r3, #2
 8017d64:	18d3      	adds	r3, r2, r3
 8017d66:	3309      	adds	r3, #9
 8017d68:	781b      	ldrb	r3, [r3, #0]
 8017d6a:	001a      	movs	r2, r3
 8017d6c:	0013      	movs	r3, r2
 8017d6e:	009b      	lsls	r3, r3, #2
 8017d70:	189b      	adds	r3, r3, r2
 8017d72:	009b      	lsls	r3, r3, #2
 8017d74:	33c0      	adds	r3, #192	; 0xc0
 8017d76:	001a      	movs	r2, r3
 8017d78:	4b09      	ldr	r3, [pc, #36]	; (8017da0 <RegionEU868SetBandTxDone+0x54>)
 8017d7a:	18d0      	adds	r0, r2, r3
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	689c      	ldr	r4, [r3, #8]
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	785d      	ldrb	r5, [r3, #1]
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	466a      	mov	r2, sp
 8017d88:	6919      	ldr	r1, [r3, #16]
 8017d8a:	6011      	str	r1, [r2, #0]
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	002a      	movs	r2, r5
 8017d90:	0021      	movs	r1, r4
 8017d92:	f7ff f92a 	bl	8016fea <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8017d96:	46c0      	nop			; (mov r8, r8)
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	b002      	add	sp, #8
 8017d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8017d9e:	46c0      	nop			; (mov r8, r8)
 8017da0:	20001344 	.word	0x20001344

08017da4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017da4:	b590      	push	{r4, r7, lr}
 8017da6:	b0ab      	sub	sp, #172	; 0xac
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017dac:	2430      	movs	r4, #48	; 0x30
 8017dae:	193b      	adds	r3, r7, r4
 8017db0:	0018      	movs	r0, r3
 8017db2:	2378      	movs	r3, #120	; 0x78
 8017db4:	001a      	movs	r2, r3
 8017db6:	2100      	movs	r1, #0
 8017db8:	f005 fd91 	bl	801d8de <memset>
 8017dbc:	0021      	movs	r1, r4
 8017dbe:	187b      	adds	r3, r7, r1
 8017dc0:	2264      	movs	r2, #100	; 0x64
 8017dc2:	801a      	strh	r2, [r3, #0]
 8017dc4:	187b      	adds	r3, r7, r1
 8017dc6:	2264      	movs	r2, #100	; 0x64
 8017dc8:	829a      	strh	r2, [r3, #20]
 8017dca:	187b      	adds	r3, r7, r1
 8017dcc:	22fa      	movs	r2, #250	; 0xfa
 8017dce:	0092      	lsls	r2, r2, #2
 8017dd0:	851a      	strh	r2, [r3, #40]	; 0x28
 8017dd2:	187b      	adds	r3, r7, r1
 8017dd4:	220a      	movs	r2, #10
 8017dd6:	879a      	strh	r2, [r3, #60]	; 0x3c
 8017dd8:	0008      	movs	r0, r1
 8017dda:	187b      	adds	r3, r7, r1
 8017ddc:	2250      	movs	r2, #80	; 0x50
 8017dde:	2164      	movs	r1, #100	; 0x64
 8017de0:	5299      	strh	r1, [r3, r2]
 8017de2:	183b      	adds	r3, r7, r0
 8017de4:	2264      	movs	r2, #100	; 0x64
 8017de6:	21fa      	movs	r1, #250	; 0xfa
 8017de8:	0089      	lsls	r1, r1, #2
 8017dea:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	791b      	ldrb	r3, [r3, #4]
 8017df0:	2b03      	cmp	r3, #3
 8017df2:	d048      	beq.n	8017e86 <RegionEU868InitDefaults+0xe2>
 8017df4:	dc54      	bgt.n	8017ea0 <RegionEU868InitDefaults+0xfc>
 8017df6:	2b02      	cmp	r3, #2
 8017df8:	d036      	beq.n	8017e68 <RegionEU868InitDefaults+0xc4>
 8017dfa:	dc51      	bgt.n	8017ea0 <RegionEU868InitDefaults+0xfc>
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d002      	beq.n	8017e06 <RegionEU868InitDefaults+0x62>
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	d021      	beq.n	8017e48 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 8017e04:	e04c      	b.n	8017ea0 <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017e06:	2330      	movs	r3, #48	; 0x30
 8017e08:	18f9      	adds	r1, r7, r3
 8017e0a:	4b29      	ldr	r3, [pc, #164]	; (8017eb0 <RegionEU868InitDefaults+0x10c>)
 8017e0c:	2278      	movs	r2, #120	; 0x78
 8017e0e:	0018      	movs	r0, r3
 8017e10:	f001 f89a 	bl	8018f48 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017e14:	4b27      	ldr	r3, [pc, #156]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e16:	4a28      	ldr	r2, [pc, #160]	; (8017eb8 <RegionEU868InitDefaults+0x114>)
 8017e18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017e1a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017e1c:	4b25      	ldr	r3, [pc, #148]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e1e:	4a27      	ldr	r2, [pc, #156]	; (8017ebc <RegionEU868InitDefaults+0x118>)
 8017e20:	330c      	adds	r3, #12
 8017e22:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017e24:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017e26:	4b23      	ldr	r3, [pc, #140]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e28:	4a25      	ldr	r2, [pc, #148]	; (8017ec0 <RegionEU868InitDefaults+0x11c>)
 8017e2a:	3318      	adds	r3, #24
 8017e2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017e2e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017e30:	4a20      	ldr	r2, [pc, #128]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e32:	239d      	movs	r3, #157	; 0x9d
 8017e34:	005b      	lsls	r3, r3, #1
 8017e36:	2107      	movs	r1, #7
 8017e38:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017e3a:	4922      	ldr	r1, [pc, #136]	; (8017ec4 <RegionEU868InitDefaults+0x120>)
 8017e3c:	4b22      	ldr	r3, [pc, #136]	; (8017ec8 <RegionEU868InitDefaults+0x124>)
 8017e3e:	2201      	movs	r2, #1
 8017e40:	0018      	movs	r0, r3
 8017e42:	f7ff f8a3 	bl	8016f8c <RegionCommonChanMaskCopy>
            break;
 8017e46:	e02e      	b.n	8017ea6 <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8017e48:	4b1a      	ldr	r3, [pc, #104]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 8017e4e:	4b19      	ldr	r3, [pc, #100]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e50:	2200      	movs	r2, #0
 8017e52:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8017e54:	4b17      	ldr	r3, [pc, #92]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e56:	2200      	movs	r2, #0
 8017e58:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017e5a:	491a      	ldr	r1, [pc, #104]	; (8017ec4 <RegionEU868InitDefaults+0x120>)
 8017e5c:	4b1a      	ldr	r3, [pc, #104]	; (8017ec8 <RegionEU868InitDefaults+0x124>)
 8017e5e:	2201      	movs	r2, #1
 8017e60:	0018      	movs	r0, r3
 8017e62:	f7ff f893 	bl	8016f8c <RegionCommonChanMaskCopy>
            break;
 8017e66:	e01e      	b.n	8017ea6 <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8017e68:	4a12      	ldr	r2, [pc, #72]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e6a:	239c      	movs	r3, #156	; 0x9c
 8017e6c:	005b      	lsls	r3, r3, #1
 8017e6e:	5ad2      	ldrh	r2, [r2, r3]
 8017e70:	4910      	ldr	r1, [pc, #64]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e72:	239d      	movs	r3, #157	; 0x9d
 8017e74:	005b      	lsls	r3, r3, #1
 8017e76:	5acb      	ldrh	r3, [r1, r3]
 8017e78:	4313      	orrs	r3, r2
 8017e7a:	b299      	uxth	r1, r3
 8017e7c:	4a0d      	ldr	r2, [pc, #52]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e7e:	239c      	movs	r3, #156	; 0x9c
 8017e80:	005b      	lsls	r3, r3, #1
 8017e82:	52d1      	strh	r1, [r2, r3]
            break;
 8017e84:	e00f      	b.n	8017ea6 <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d00a      	beq.n	8017ea4 <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	6819      	ldr	r1, [r3, #0]
 8017e92:	239e      	movs	r3, #158	; 0x9e
 8017e94:	005a      	lsls	r2, r3, #1
 8017e96:	4b07      	ldr	r3, [pc, #28]	; (8017eb4 <RegionEU868InitDefaults+0x110>)
 8017e98:	0018      	movs	r0, r3
 8017e9a:	f001 f855 	bl	8018f48 <memcpy1>
            break;
 8017e9e:	e001      	b.n	8017ea4 <RegionEU868InitDefaults+0x100>
            break;
 8017ea0:	46c0      	nop			; (mov r8, r8)
 8017ea2:	e000      	b.n	8017ea6 <RegionEU868InitDefaults+0x102>
            break;
 8017ea4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017ea6:	46c0      	nop			; (mov r8, r8)
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	b02b      	add	sp, #172	; 0xac
 8017eac:	bd90      	pop	{r4, r7, pc}
 8017eae:	46c0      	nop			; (mov r8, r8)
 8017eb0:	20001404 	.word	0x20001404
 8017eb4:	20001344 	.word	0x20001344
 8017eb8:	0801ec14 	.word	0x0801ec14
 8017ebc:	0801ec20 	.word	0x0801ec20
 8017ec0:	0801ec2c 	.word	0x0801ec2c
 8017ec4:	2000147e 	.word	0x2000147e
 8017ec8:	2000147c 	.word	0x2000147c

08017ecc <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	229e      	movs	r2, #158	; 0x9e
 8017ed8:	0052      	lsls	r2, r2, #1
 8017eda:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8017edc:	4b02      	ldr	r3, [pc, #8]	; (8017ee8 <RegionEU868GetNvmCtx+0x1c>)
}
 8017ede:	0018      	movs	r0, r3
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	b002      	add	sp, #8
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	46c0      	nop			; (mov r8, r8)
 8017ee8:	20001344 	.word	0x20001344

08017eec <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b084      	sub	sp, #16
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
 8017ef4:	000a      	movs	r2, r1
 8017ef6:	1cfb      	adds	r3, r7, #3
 8017ef8:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8017efa:	1cfb      	adds	r3, r7, #3
 8017efc:	781b      	ldrb	r3, [r3, #0]
 8017efe:	2b0f      	cmp	r3, #15
 8017f00:	d847      	bhi.n	8017f92 <RegionEU868Verify+0xa6>
 8017f02:	009a      	lsls	r2, r3, #2
 8017f04:	4b25      	ldr	r3, [pc, #148]	; (8017f9c <RegionEU868Verify+0xb0>)
 8017f06:	18d3      	adds	r3, r2, r3
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017f0c:	210f      	movs	r1, #15
 8017f0e:	187b      	adds	r3, r7, r1
 8017f10:	2200      	movs	r2, #0
 8017f12:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	187a      	adds	r2, r7, r1
 8017f1a:	0011      	movs	r1, r2
 8017f1c:	0018      	movs	r0, r3
 8017f1e:	f7ff fd1f 	bl	8017960 <VerifyRfFreq>
 8017f22:	0003      	movs	r3, r0
 8017f24:	e036      	b.n	8017f94 <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	781b      	ldrb	r3, [r3, #0]
 8017f2a:	b25b      	sxtb	r3, r3
 8017f2c:	2207      	movs	r2, #7
 8017f2e:	2100      	movs	r1, #0
 8017f30:	0018      	movs	r0, r3
 8017f32:	f7fe ff82 	bl	8016e3a <RegionCommonValueInRange>
 8017f36:	0003      	movs	r3, r0
 8017f38:	1e5a      	subs	r2, r3, #1
 8017f3a:	4193      	sbcs	r3, r2
 8017f3c:	b2db      	uxtb	r3, r3
 8017f3e:	e029      	b.n	8017f94 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	781b      	ldrb	r3, [r3, #0]
 8017f44:	b25b      	sxtb	r3, r3
 8017f46:	2205      	movs	r2, #5
 8017f48:	2100      	movs	r1, #0
 8017f4a:	0018      	movs	r0, r3
 8017f4c:	f7fe ff75 	bl	8016e3a <RegionCommonValueInRange>
 8017f50:	0003      	movs	r3, r0
 8017f52:	1e5a      	subs	r2, r3, #1
 8017f54:	4193      	sbcs	r3, r2
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	e01c      	b.n	8017f94 <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	781b      	ldrb	r3, [r3, #0]
 8017f5e:	b25b      	sxtb	r3, r3
 8017f60:	2207      	movs	r2, #7
 8017f62:	2100      	movs	r1, #0
 8017f64:	0018      	movs	r0, r3
 8017f66:	f7fe ff68 	bl	8016e3a <RegionCommonValueInRange>
 8017f6a:	0003      	movs	r3, r0
 8017f6c:	1e5a      	subs	r2, r3, #1
 8017f6e:	4193      	sbcs	r3, r2
 8017f70:	b2db      	uxtb	r3, r3
 8017f72:	e00f      	b.n	8017f94 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	b25b      	sxtb	r3, r3
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	2100      	movs	r1, #0
 8017f7e:	0018      	movs	r0, r3
 8017f80:	f7fe ff5b 	bl	8016e3a <RegionCommonValueInRange>
 8017f84:	0003      	movs	r3, r0
 8017f86:	1e5a      	subs	r2, r3, #1
 8017f88:	4193      	sbcs	r3, r2
 8017f8a:	b2db      	uxtb	r3, r3
 8017f8c:	e002      	b.n	8017f94 <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017f8e:	2301      	movs	r3, #1
 8017f90:	e000      	b.n	8017f94 <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 8017f92:	2300      	movs	r3, #0
    }
}
 8017f94:	0018      	movs	r0, r3
 8017f96:	46bd      	mov	sp, r7
 8017f98:	b004      	add	sp, #16
 8017f9a:	bd80      	pop	{r7, pc}
 8017f9c:	0801ec38 	.word	0x0801ec38

08017fa0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017fa0:	b590      	push	{r4, r7, lr}
 8017fa2:	b08b      	sub	sp, #44	; 0x2c
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017fa8:	2318      	movs	r3, #24
 8017faa:	18fb      	adds	r3, r7, r3
 8017fac:	2250      	movs	r2, #80	; 0x50
 8017fae:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	791b      	ldrb	r3, [r3, #4]
 8017fb4:	2b10      	cmp	r3, #16
 8017fb6:	d000      	beq.n	8017fba <RegionEU868ApplyCFList+0x1a>
 8017fb8:	e07c      	b.n	80180b4 <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	330f      	adds	r3, #15
 8017fc0:	781b      	ldrb	r3, [r3, #0]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d000      	beq.n	8017fc8 <RegionEU868ApplyCFList+0x28>
 8017fc6:	e077      	b.n	80180b8 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017fc8:	2327      	movs	r3, #39	; 0x27
 8017fca:	18fb      	adds	r3, r7, r3
 8017fcc:	2200      	movs	r2, #0
 8017fce:	701a      	strb	r2, [r3, #0]
 8017fd0:	2326      	movs	r3, #38	; 0x26
 8017fd2:	18fb      	adds	r3, r7, r3
 8017fd4:	2203      	movs	r2, #3
 8017fd6:	701a      	strb	r2, [r3, #0]
 8017fd8:	e066      	b.n	80180a8 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017fda:	2326      	movs	r3, #38	; 0x26
 8017fdc:	18fb      	adds	r3, r7, r3
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	2b07      	cmp	r3, #7
 8017fe2:	d82e      	bhi.n	8018042 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	681a      	ldr	r2, [r3, #0]
 8017fe8:	2427      	movs	r4, #39	; 0x27
 8017fea:	193b      	adds	r3, r7, r4
 8017fec:	781b      	ldrb	r3, [r3, #0]
 8017fee:	18d3      	adds	r3, r2, r3
 8017ff0:	781b      	ldrb	r3, [r3, #0]
 8017ff2:	001a      	movs	r2, r3
 8017ff4:	2018      	movs	r0, #24
 8017ff6:	183b      	adds	r3, r7, r0
 8017ff8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017ffa:	183b      	adds	r3, r7, r0
 8017ffc:	681a      	ldr	r2, [r3, #0]
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	6819      	ldr	r1, [r3, #0]
 8018002:	193b      	adds	r3, r7, r4
 8018004:	781b      	ldrb	r3, [r3, #0]
 8018006:	3301      	adds	r3, #1
 8018008:	18cb      	adds	r3, r1, r3
 801800a:	781b      	ldrb	r3, [r3, #0]
 801800c:	021b      	lsls	r3, r3, #8
 801800e:	431a      	orrs	r2, r3
 8018010:	183b      	adds	r3, r7, r0
 8018012:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018014:	183b      	adds	r3, r7, r0
 8018016:	681a      	ldr	r2, [r3, #0]
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	6819      	ldr	r1, [r3, #0]
 801801c:	193b      	adds	r3, r7, r4
 801801e:	781b      	ldrb	r3, [r3, #0]
 8018020:	3302      	adds	r3, #2
 8018022:	18cb      	adds	r3, r1, r3
 8018024:	781b      	ldrb	r3, [r3, #0]
 8018026:	041b      	lsls	r3, r3, #16
 8018028:	431a      	orrs	r2, r3
 801802a:	183b      	adds	r3, r7, r0
 801802c:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 801802e:	183b      	adds	r3, r7, r0
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	2264      	movs	r2, #100	; 0x64
 8018034:	435a      	muls	r2, r3
 8018036:	183b      	adds	r3, r7, r0
 8018038:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801803a:	183b      	adds	r3, r7, r0
 801803c:	2200      	movs	r2, #0
 801803e:	605a      	str	r2, [r3, #4]
 8018040:	e009      	b.n	8018056 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8018042:	2118      	movs	r1, #24
 8018044:	187b      	adds	r3, r7, r1
 8018046:	2200      	movs	r2, #0
 8018048:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 801804a:	187b      	adds	r3, r7, r1
 801804c:	2200      	movs	r2, #0
 801804e:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8018050:	187b      	adds	r3, r7, r1
 8018052:	2200      	movs	r2, #0
 8018054:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8018056:	2218      	movs	r2, #24
 8018058:	18bb      	adds	r3, r7, r2
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d00d      	beq.n	801807c <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8018060:	2110      	movs	r1, #16
 8018062:	187b      	adds	r3, r7, r1
 8018064:	18ba      	adds	r2, r7, r2
 8018066:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8018068:	187b      	adds	r3, r7, r1
 801806a:	2226      	movs	r2, #38	; 0x26
 801806c:	18ba      	adds	r2, r7, r2
 801806e:	7812      	ldrb	r2, [r2, #0]
 8018070:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018072:	187b      	adds	r3, r7, r1
 8018074:	0018      	movs	r0, r3
 8018076:	f000 fdb5 	bl	8018be4 <RegionEU868ChannelAdd>
 801807a:	e009      	b.n	8018090 <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801807c:	210c      	movs	r1, #12
 801807e:	187b      	adds	r3, r7, r1
 8018080:	2226      	movs	r2, #38	; 0x26
 8018082:	18ba      	adds	r2, r7, r2
 8018084:	7812      	ldrb	r2, [r2, #0]
 8018086:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8018088:	187b      	adds	r3, r7, r1
 801808a:	0018      	movs	r0, r3
 801808c:	f000 fe6e 	bl	8018d6c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018090:	2227      	movs	r2, #39	; 0x27
 8018092:	18bb      	adds	r3, r7, r2
 8018094:	18ba      	adds	r2, r7, r2
 8018096:	7812      	ldrb	r2, [r2, #0]
 8018098:	3203      	adds	r2, #3
 801809a:	701a      	strb	r2, [r3, #0]
 801809c:	2126      	movs	r1, #38	; 0x26
 801809e:	187b      	adds	r3, r7, r1
 80180a0:	781a      	ldrb	r2, [r3, #0]
 80180a2:	187b      	adds	r3, r7, r1
 80180a4:	3201      	adds	r2, #1
 80180a6:	701a      	strb	r2, [r3, #0]
 80180a8:	2326      	movs	r3, #38	; 0x26
 80180aa:	18fb      	adds	r3, r7, r3
 80180ac:	781b      	ldrb	r3, [r3, #0]
 80180ae:	2b0f      	cmp	r3, #15
 80180b0:	d993      	bls.n	8017fda <RegionEU868ApplyCFList+0x3a>
 80180b2:	e002      	b.n	80180ba <RegionEU868ApplyCFList+0x11a>
        return;
 80180b4:	46c0      	nop			; (mov r8, r8)
 80180b6:	e000      	b.n	80180ba <RegionEU868ApplyCFList+0x11a>
        return;
 80180b8:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80180ba:	46bd      	mov	sp, r7
 80180bc:	b00b      	add	sp, #44	; 0x2c
 80180be:	bd90      	pop	{r4, r7, pc}

080180c0 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	791b      	ldrb	r3, [r3, #4]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d002      	beq.n	80180d6 <RegionEU868ChanMaskSet+0x16>
 80180d0:	2b01      	cmp	r3, #1
 80180d2:	d008      	beq.n	80180e6 <RegionEU868ChanMaskSet+0x26>
 80180d4:	e00f      	b.n	80180f6 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6819      	ldr	r1, [r3, #0]
 80180da:	4b0a      	ldr	r3, [pc, #40]	; (8018104 <RegionEU868ChanMaskSet+0x44>)
 80180dc:	2201      	movs	r2, #1
 80180de:	0018      	movs	r0, r3
 80180e0:	f7fe ff54 	bl	8016f8c <RegionCommonChanMaskCopy>
            break;
 80180e4:	e009      	b.n	80180fa <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	6819      	ldr	r1, [r3, #0]
 80180ea:	4b07      	ldr	r3, [pc, #28]	; (8018108 <RegionEU868ChanMaskSet+0x48>)
 80180ec:	2201      	movs	r2, #1
 80180ee:	0018      	movs	r0, r3
 80180f0:	f7fe ff4c 	bl	8016f8c <RegionCommonChanMaskCopy>
            break;
 80180f4:	e001      	b.n	80180fa <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 80180f6:	2300      	movs	r3, #0
 80180f8:	e000      	b.n	80180fc <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 80180fa:	2301      	movs	r3, #1
}
 80180fc:	0018      	movs	r0, r3
 80180fe:	46bd      	mov	sp, r7
 8018100:	b002      	add	sp, #8
 8018102:	bd80      	pop	{r7, pc}
 8018104:	2000147c 	.word	0x2000147c
 8018108:	2000147e 	.word	0x2000147e

0801810c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801810c:	b5b0      	push	{r4, r5, r7, lr}
 801810e:	b088      	sub	sp, #32
 8018110:	af02      	add	r7, sp, #8
 8018112:	60ba      	str	r2, [r7, #8]
 8018114:	607b      	str	r3, [r7, #4]
 8018116:	240f      	movs	r4, #15
 8018118:	193b      	adds	r3, r7, r4
 801811a:	1c02      	adds	r2, r0, #0
 801811c:	701a      	strb	r2, [r3, #0]
 801811e:	230e      	movs	r3, #14
 8018120:	18fb      	adds	r3, r7, r3
 8018122:	1c0a      	adds	r2, r1, #0
 8018124:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 8018126:	2300      	movs	r3, #0
 8018128:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801812a:	193b      	adds	r3, r7, r4
 801812c:	781b      	ldrb	r3, [r3, #0]
 801812e:	b25a      	sxtb	r2, r3
 8018130:	2a07      	cmp	r2, #7
 8018132:	dd00      	ble.n	8018136 <RegionEU868ComputeRxWindowParameters+0x2a>
 8018134:	2307      	movs	r3, #7
 8018136:	b25a      	sxtb	r2, r3
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	785b      	ldrb	r3, [r3, #1]
 8018140:	b25b      	sxtb	r3, r3
 8018142:	0018      	movs	r0, r3
 8018144:	f7ff fbc6 	bl	80178d4 <GetBandwidth>
 8018148:	0003      	movs	r3, r0
 801814a:	b2da      	uxtb	r2, r3
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	785b      	ldrb	r3, [r3, #1]
 8018154:	b25b      	sxtb	r3, r3
 8018156:	2b07      	cmp	r3, #7
 8018158:	d10b      	bne.n	8018172 <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	785b      	ldrb	r3, [r3, #1]
 801815e:	b25b      	sxtb	r3, r3
 8018160:	001a      	movs	r2, r3
 8018162:	4b18      	ldr	r3, [pc, #96]	; (80181c4 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018164:	5c9b      	ldrb	r3, [r3, r2]
 8018166:	0018      	movs	r0, r3
 8018168:	f7ff f94c 	bl	8017404 <RegionCommonComputeSymbolTimeFsk>
 801816c:	0003      	movs	r3, r0
 801816e:	617b      	str	r3, [r7, #20]
 8018170:	e011      	b.n	8018196 <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	785b      	ldrb	r3, [r3, #1]
 8018176:	b25b      	sxtb	r3, r3
 8018178:	001a      	movs	r2, r3
 801817a:	4b12      	ldr	r3, [pc, #72]	; (80181c4 <RegionEU868ComputeRxWindowParameters+0xb8>)
 801817c:	5c98      	ldrb	r0, [r3, r2]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	785b      	ldrb	r3, [r3, #1]
 8018182:	b25b      	sxtb	r3, r3
 8018184:	001a      	movs	r2, r3
 8018186:	4b10      	ldr	r3, [pc, #64]	; (80181c8 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8018188:	0092      	lsls	r2, r2, #2
 801818a:	58d3      	ldr	r3, [r2, r3]
 801818c:	0019      	movs	r1, r3
 801818e:	f7ff f921 	bl	80173d4 <RegionCommonComputeSymbolTimeLoRa>
 8018192:	0003      	movs	r3, r0
 8018194:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018196:	4b0d      	ldr	r3, [pc, #52]	; (80181cc <RegionEU868ComputeRxWindowParameters+0xc0>)
 8018198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801819a:	4798      	blx	r3
 801819c:	0005      	movs	r5, r0
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	3308      	adds	r3, #8
 80181a2:	687a      	ldr	r2, [r7, #4]
 80181a4:	320c      	adds	r2, #12
 80181a6:	68bc      	ldr	r4, [r7, #8]
 80181a8:	210e      	movs	r1, #14
 80181aa:	1879      	adds	r1, r7, r1
 80181ac:	7809      	ldrb	r1, [r1, #0]
 80181ae:	6978      	ldr	r0, [r7, #20]
 80181b0:	9201      	str	r2, [sp, #4]
 80181b2:	9300      	str	r3, [sp, #0]
 80181b4:	002b      	movs	r3, r5
 80181b6:	0022      	movs	r2, r4
 80181b8:	f7ff f932 	bl	8017420 <RegionCommonComputeRxWindowParameters>
}
 80181bc:	46c0      	nop			; (mov r8, r8)
 80181be:	46bd      	mov	sp, r7
 80181c0:	b006      	add	sp, #24
 80181c2:	bdb0      	pop	{r4, r5, r7, pc}
 80181c4:	0801eaf4 	.word	0x0801eaf4
 80181c8:	0801eafc 	.word	0x0801eafc
 80181cc:	0801ec78 	.word	0x0801ec78

080181d0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80181d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181d2:	b091      	sub	sp, #68	; 0x44
 80181d4:	af0a      	add	r7, sp, #40	; 0x28
 80181d6:	6078      	str	r0, [r7, #4]
 80181d8:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80181da:	230f      	movs	r3, #15
 80181dc:	18fb      	adds	r3, r7, r3
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	7852      	ldrb	r2, [r2, #1]
 80181e2:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80181e4:	2316      	movs	r3, #22
 80181e6:	18fb      	adds	r3, r7, r3
 80181e8:	2200      	movs	r2, #0
 80181ea:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80181ec:	230e      	movs	r3, #14
 80181ee:	18fb      	adds	r3, r7, r3
 80181f0:	2200      	movs	r2, #0
 80181f2:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	685b      	ldr	r3, [r3, #4]
 80181f8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80181fa:	4b68      	ldr	r3, [pc, #416]	; (801839c <RegionEU868RxConfig+0x1cc>)
 80181fc:	685b      	ldr	r3, [r3, #4]
 80181fe:	4798      	blx	r3
 8018200:	1e03      	subs	r3, r0, #0
 8018202:	d001      	beq.n	8018208 <RegionEU868RxConfig+0x38>
    {
        return false;
 8018204:	2300      	movs	r3, #0
 8018206:	e0c4      	b.n	8018392 <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	7cdb      	ldrb	r3, [r3, #19]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d122      	bne.n	8018256 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	781b      	ldrb	r3, [r3, #0]
 8018214:	0019      	movs	r1, r3
 8018216:	4a62      	ldr	r2, [pc, #392]	; (80183a0 <RegionEU868RxConfig+0x1d0>)
 8018218:	000b      	movs	r3, r1
 801821a:	005b      	lsls	r3, r3, #1
 801821c:	185b      	adds	r3, r3, r1
 801821e:	009b      	lsls	r3, r3, #2
 8018220:	589b      	ldr	r3, [r3, r2]
 8018222:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	0019      	movs	r1, r3
 801822a:	4a5d      	ldr	r2, [pc, #372]	; (80183a0 <RegionEU868RxConfig+0x1d0>)
 801822c:	000b      	movs	r3, r1
 801822e:	005b      	lsls	r3, r3, #1
 8018230:	185b      	adds	r3, r3, r1
 8018232:	009b      	lsls	r3, r3, #2
 8018234:	18d3      	adds	r3, r2, r3
 8018236:	3304      	adds	r3, #4
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d00b      	beq.n	8018256 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	781b      	ldrb	r3, [r3, #0]
 8018242:	0019      	movs	r1, r3
 8018244:	4a56      	ldr	r2, [pc, #344]	; (80183a0 <RegionEU868RxConfig+0x1d0>)
 8018246:	000b      	movs	r3, r1
 8018248:	005b      	lsls	r3, r3, #1
 801824a:	185b      	adds	r3, r3, r1
 801824c:	009b      	lsls	r3, r3, #2
 801824e:	18d3      	adds	r3, r2, r3
 8018250:	3304      	adds	r3, #4
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018256:	240f      	movs	r4, #15
 8018258:	193b      	adds	r3, r7, r4
 801825a:	781b      	ldrb	r3, [r3, #0]
 801825c:	b25b      	sxtb	r3, r3
 801825e:	4a51      	ldr	r2, [pc, #324]	; (80183a4 <RegionEU868RxConfig+0x1d4>)
 8018260:	5cd2      	ldrb	r2, [r2, r3]
 8018262:	250e      	movs	r5, #14
 8018264:	197b      	adds	r3, r7, r5
 8018266:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8018268:	4b4c      	ldr	r3, [pc, #304]	; (801839c <RegionEU868RxConfig+0x1cc>)
 801826a:	68db      	ldr	r3, [r3, #12]
 801826c:	693a      	ldr	r2, [r7, #16]
 801826e:	0010      	movs	r0, r2
 8018270:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018272:	193b      	adds	r3, r7, r4
 8018274:	781b      	ldrb	r3, [r3, #0]
 8018276:	b25b      	sxtb	r3, r3
 8018278:	2b07      	cmp	r3, #7
 801827a:	d12e      	bne.n	80182da <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 801827c:	2117      	movs	r1, #23
 801827e:	187b      	adds	r3, r7, r1
 8018280:	2200      	movs	r2, #0
 8018282:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018284:	4b45      	ldr	r3, [pc, #276]	; (801839c <RegionEU868RxConfig+0x1cc>)
 8018286:	699c      	ldr	r4, [r3, #24]
 8018288:	197b      	adds	r3, r7, r5
 801828a:	2200      	movs	r2, #0
 801828c:	569a      	ldrsb	r2, [r3, r2]
 801828e:	0013      	movs	r3, r2
 8018290:	015b      	lsls	r3, r3, #5
 8018292:	1a9b      	subs	r3, r3, r2
 8018294:	009b      	lsls	r3, r3, #2
 8018296:	189b      	adds	r3, r3, r2
 8018298:	00db      	lsls	r3, r3, #3
 801829a:	001e      	movs	r6, r3
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	689b      	ldr	r3, [r3, #8]
 80182a0:	b29b      	uxth	r3, r3
 80182a2:	687a      	ldr	r2, [r7, #4]
 80182a4:	7c92      	ldrb	r2, [r2, #18]
 80182a6:	4d40      	ldr	r5, [pc, #256]	; (80183a8 <RegionEU868RxConfig+0x1d8>)
 80182a8:	1879      	adds	r1, r7, r1
 80182aa:	7808      	ldrb	r0, [r1, #0]
 80182ac:	9209      	str	r2, [sp, #36]	; 0x24
 80182ae:	2200      	movs	r2, #0
 80182b0:	9208      	str	r2, [sp, #32]
 80182b2:	2200      	movs	r2, #0
 80182b4:	9207      	str	r2, [sp, #28]
 80182b6:	2200      	movs	r2, #0
 80182b8:	9206      	str	r2, [sp, #24]
 80182ba:	2201      	movs	r2, #1
 80182bc:	9205      	str	r2, [sp, #20]
 80182be:	2200      	movs	r2, #0
 80182c0:	9204      	str	r2, [sp, #16]
 80182c2:	2200      	movs	r2, #0
 80182c4:	9203      	str	r2, [sp, #12]
 80182c6:	9302      	str	r3, [sp, #8]
 80182c8:	2305      	movs	r3, #5
 80182ca:	9301      	str	r3, [sp, #4]
 80182cc:	4b37      	ldr	r3, [pc, #220]	; (80183ac <RegionEU868RxConfig+0x1dc>)
 80182ce:	9300      	str	r3, [sp, #0]
 80182d0:	2300      	movs	r3, #0
 80182d2:	0032      	movs	r2, r6
 80182d4:	0029      	movs	r1, r5
 80182d6:	47a0      	blx	r4
 80182d8:	e029      	b.n	801832e <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 80182da:	2117      	movs	r1, #23
 80182dc:	187b      	adds	r3, r7, r1
 80182de:	2201      	movs	r2, #1
 80182e0:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80182e2:	4b2e      	ldr	r3, [pc, #184]	; (801839c <RegionEU868RxConfig+0x1cc>)
 80182e4:	699c      	ldr	r4, [r3, #24]
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	789b      	ldrb	r3, [r3, #2]
 80182ea:	001e      	movs	r6, r3
 80182ec:	230e      	movs	r3, #14
 80182ee:	18fb      	adds	r3, r7, r3
 80182f0:	2500      	movs	r5, #0
 80182f2:	575d      	ldrsb	r5, [r3, r5]
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	689b      	ldr	r3, [r3, #8]
 80182f8:	b29b      	uxth	r3, r3
 80182fa:	687a      	ldr	r2, [r7, #4]
 80182fc:	7c92      	ldrb	r2, [r2, #18]
 80182fe:	1879      	adds	r1, r7, r1
 8018300:	7808      	ldrb	r0, [r1, #0]
 8018302:	9209      	str	r2, [sp, #36]	; 0x24
 8018304:	2201      	movs	r2, #1
 8018306:	9208      	str	r2, [sp, #32]
 8018308:	2200      	movs	r2, #0
 801830a:	9207      	str	r2, [sp, #28]
 801830c:	2200      	movs	r2, #0
 801830e:	9206      	str	r2, [sp, #24]
 8018310:	2200      	movs	r2, #0
 8018312:	9205      	str	r2, [sp, #20]
 8018314:	2200      	movs	r2, #0
 8018316:	9204      	str	r2, [sp, #16]
 8018318:	2200      	movs	r2, #0
 801831a:	9203      	str	r2, [sp, #12]
 801831c:	9302      	str	r3, [sp, #8]
 801831e:	2308      	movs	r3, #8
 8018320:	9301      	str	r3, [sp, #4]
 8018322:	2300      	movs	r3, #0
 8018324:	9300      	str	r3, [sp, #0]
 8018326:	2301      	movs	r3, #1
 8018328:	002a      	movs	r2, r5
 801832a:	0031      	movs	r1, r6
 801832c:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	7c5b      	ldrb	r3, [r3, #17]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d009      	beq.n	801834a <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018336:	230f      	movs	r3, #15
 8018338:	18fb      	adds	r3, r7, r3
 801833a:	2200      	movs	r2, #0
 801833c:	569a      	ldrsb	r2, [r3, r2]
 801833e:	2316      	movs	r3, #22
 8018340:	18fb      	adds	r3, r7, r3
 8018342:	491b      	ldr	r1, [pc, #108]	; (80183b0 <RegionEU868RxConfig+0x1e0>)
 8018344:	5c8a      	ldrb	r2, [r1, r2]
 8018346:	701a      	strb	r2, [r3, #0]
 8018348:	e008      	b.n	801835c <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801834a:	230f      	movs	r3, #15
 801834c:	18fb      	adds	r3, r7, r3
 801834e:	2200      	movs	r2, #0
 8018350:	569a      	ldrsb	r2, [r3, r2]
 8018352:	2316      	movs	r3, #22
 8018354:	18fb      	adds	r3, r7, r3
 8018356:	4917      	ldr	r1, [pc, #92]	; (80183b4 <RegionEU868RxConfig+0x1e4>)
 8018358:	5c8a      	ldrb	r2, [r1, r2]
 801835a:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801835c:	4b0f      	ldr	r3, [pc, #60]	; (801839c <RegionEU868RxConfig+0x1cc>)
 801835e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018360:	2216      	movs	r2, #22
 8018362:	18ba      	adds	r2, r7, r2
 8018364:	7812      	ldrb	r2, [r2, #0]
 8018366:	320d      	adds	r2, #13
 8018368:	b2d1      	uxtb	r1, r2
 801836a:	2217      	movs	r2, #23
 801836c:	18ba      	adds	r2, r7, r2
 801836e:	7812      	ldrb	r2, [r2, #0]
 8018370:	0010      	movs	r0, r2
 8018372:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	7cd8      	ldrb	r0, [r3, #19]
 8018378:	240f      	movs	r4, #15
 801837a:	193b      	adds	r3, r7, r4
 801837c:	2200      	movs	r2, #0
 801837e:	569a      	ldrsb	r2, [r3, r2]
 8018380:	693b      	ldr	r3, [r7, #16]
 8018382:	0019      	movs	r1, r3
 8018384:	f7ff fa2a 	bl	80177dc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	193a      	adds	r2, r7, r4
 801838c:	7812      	ldrb	r2, [r2, #0]
 801838e:	701a      	strb	r2, [r3, #0]
    return true;
 8018390:	2301      	movs	r3, #1
}
 8018392:	0018      	movs	r0, r3
 8018394:	46bd      	mov	sp, r7
 8018396:	b007      	add	sp, #28
 8018398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801839a:	46c0      	nop			; (mov r8, r8)
 801839c:	0801ec78 	.word	0x0801ec78
 80183a0:	20001344 	.word	0x20001344
 80183a4:	0801eaf4 	.word	0x0801eaf4
 80183a8:	0000c350 	.word	0x0000c350
 80183ac:	00014585 	.word	0x00014585
 80183b0:	0801eb24 	.word	0x0801eb24
 80183b4:	0801eb1c 	.word	0x0801eb1c

080183b8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80183b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183ba:	b093      	sub	sp, #76	; 0x4c
 80183bc:	af0a      	add	r7, sp, #40	; 0x28
 80183be:	60f8      	str	r0, [r7, #12]
 80183c0:	60b9      	str	r1, [r7, #8]
 80183c2:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	785b      	ldrb	r3, [r3, #1]
 80183c8:	b25b      	sxtb	r3, r3
 80183ca:	001a      	movs	r2, r3
 80183cc:	4b6b      	ldr	r3, [pc, #428]	; (801857c <RegionEU868TxConfig+0x1c4>)
 80183ce:	5c9a      	ldrb	r2, [r3, r2]
 80183d0:	251e      	movs	r5, #30
 80183d2:	197b      	adds	r3, r7, r5
 80183d4:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	2002      	movs	r0, #2
 80183da:	5618      	ldrsb	r0, [r3, r0]
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	781b      	ldrb	r3, [r3, #0]
 80183e0:	0019      	movs	r1, r3
 80183e2:	4a67      	ldr	r2, [pc, #412]	; (8018580 <RegionEU868TxConfig+0x1c8>)
 80183e4:	000b      	movs	r3, r1
 80183e6:	005b      	lsls	r3, r3, #1
 80183e8:	185b      	adds	r3, r3, r1
 80183ea:	009b      	lsls	r3, r3, #2
 80183ec:	18d3      	adds	r3, r2, r3
 80183ee:	3309      	adds	r3, #9
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	001c      	movs	r4, r3
 80183f4:	4a62      	ldr	r2, [pc, #392]	; (8018580 <RegionEU868TxConfig+0x1c8>)
 80183f6:	21c2      	movs	r1, #194	; 0xc2
 80183f8:	0023      	movs	r3, r4
 80183fa:	009b      	lsls	r3, r3, #2
 80183fc:	191b      	adds	r3, r3, r4
 80183fe:	009b      	lsls	r3, r3, #2
 8018400:	18d3      	adds	r3, r2, r3
 8018402:	185b      	adds	r3, r3, r1
 8018404:	2100      	movs	r1, #0
 8018406:	5659      	ldrsb	r1, [r3, r1]
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	2201      	movs	r2, #1
 801840c:	569a      	ldrsb	r2, [r3, r2]
 801840e:	261d      	movs	r6, #29
 8018410:	19bc      	adds	r4, r7, r6
 8018412:	4b5c      	ldr	r3, [pc, #368]	; (8018584 <RegionEU868TxConfig+0x1cc>)
 8018414:	f7ff fa7c 	bl	8017910 <LimitTxPower>
 8018418:	0003      	movs	r3, r0
 801841a:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	785b      	ldrb	r3, [r3, #1]
 8018420:	b25b      	sxtb	r3, r3
 8018422:	0018      	movs	r0, r3
 8018424:	f7ff fa56 	bl	80178d4 <GetBandwidth>
 8018428:	0003      	movs	r3, r0
 801842a:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 801842c:	2017      	movs	r0, #23
 801842e:	183b      	adds	r3, r7, r0
 8018430:	2200      	movs	r2, #0
 8018432:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	6859      	ldr	r1, [r3, #4]
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	689a      	ldr	r2, [r3, #8]
 801843c:	183c      	adds	r4, r7, r0
 801843e:	19bb      	adds	r3, r7, r6
 8018440:	781b      	ldrb	r3, [r3, #0]
 8018442:	b25b      	sxtb	r3, r3
 8018444:	0018      	movs	r0, r3
 8018446:	f7ff f839 	bl	80174bc <RegionCommonComputeTxPower>
 801844a:	0003      	movs	r3, r0
 801844c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801844e:	4b4e      	ldr	r3, [pc, #312]	; (8018588 <RegionEU868TxConfig+0x1d0>)
 8018450:	68da      	ldr	r2, [r3, #12]
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	0018      	movs	r0, r3
 8018458:	4949      	ldr	r1, [pc, #292]	; (8018580 <RegionEU868TxConfig+0x1c8>)
 801845a:	0003      	movs	r3, r0
 801845c:	005b      	lsls	r3, r3, #1
 801845e:	181b      	adds	r3, r3, r0
 8018460:	009b      	lsls	r3, r3, #2
 8018462:	585b      	ldr	r3, [r3, r1]
 8018464:	0018      	movs	r0, r3
 8018466:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	785b      	ldrb	r3, [r3, #1]
 801846c:	b25b      	sxtb	r3, r3
 801846e:	2b07      	cmp	r3, #7
 8018470:	d12e      	bne.n	80184d0 <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018472:	231f      	movs	r3, #31
 8018474:	18fb      	adds	r3, r7, r3
 8018476:	2200      	movs	r2, #0
 8018478:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801847a:	4b43      	ldr	r3, [pc, #268]	; (8018588 <RegionEU868TxConfig+0x1d0>)
 801847c:	69dc      	ldr	r4, [r3, #28]
 801847e:	197b      	adds	r3, r7, r5
 8018480:	2200      	movs	r2, #0
 8018482:	569a      	ldrsb	r2, [r3, r2]
 8018484:	0013      	movs	r3, r2
 8018486:	015b      	lsls	r3, r3, #5
 8018488:	1a9b      	subs	r3, r3, r2
 801848a:	009b      	lsls	r3, r3, #2
 801848c:	189b      	adds	r3, r3, r2
 801848e:	00db      	lsls	r3, r3, #3
 8018490:	001e      	movs	r6, r3
 8018492:	69ba      	ldr	r2, [r7, #24]
 8018494:	4d3d      	ldr	r5, [pc, #244]	; (801858c <RegionEU868TxConfig+0x1d4>)
 8018496:	2017      	movs	r0, #23
 8018498:	183b      	adds	r3, r7, r0
 801849a:	2100      	movs	r1, #0
 801849c:	5659      	ldrsb	r1, [r3, r1]
 801849e:	231f      	movs	r3, #31
 80184a0:	18fb      	adds	r3, r7, r3
 80184a2:	7818      	ldrb	r0, [r3, #0]
 80184a4:	23fa      	movs	r3, #250	; 0xfa
 80184a6:	011b      	lsls	r3, r3, #4
 80184a8:	9308      	str	r3, [sp, #32]
 80184aa:	2300      	movs	r3, #0
 80184ac:	9307      	str	r3, [sp, #28]
 80184ae:	2300      	movs	r3, #0
 80184b0:	9306      	str	r3, [sp, #24]
 80184b2:	2300      	movs	r3, #0
 80184b4:	9305      	str	r3, [sp, #20]
 80184b6:	2301      	movs	r3, #1
 80184b8:	9304      	str	r3, [sp, #16]
 80184ba:	2300      	movs	r3, #0
 80184bc:	9303      	str	r3, [sp, #12]
 80184be:	2305      	movs	r3, #5
 80184c0:	9302      	str	r3, [sp, #8]
 80184c2:	2300      	movs	r3, #0
 80184c4:	9301      	str	r3, [sp, #4]
 80184c6:	9600      	str	r6, [sp, #0]
 80184c8:	0013      	movs	r3, r2
 80184ca:	002a      	movs	r2, r5
 80184cc:	47a0      	blx	r4
 80184ce:	e025      	b.n	801851c <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 80184d0:	201f      	movs	r0, #31
 80184d2:	183b      	adds	r3, r7, r0
 80184d4:	2201      	movs	r2, #1
 80184d6:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80184d8:	4b2b      	ldr	r3, [pc, #172]	; (8018588 <RegionEU868TxConfig+0x1d0>)
 80184da:	69dc      	ldr	r4, [r3, #28]
 80184dc:	231e      	movs	r3, #30
 80184de:	18fb      	adds	r3, r7, r3
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	b25b      	sxtb	r3, r3
 80184e4:	69bd      	ldr	r5, [r7, #24]
 80184e6:	2217      	movs	r2, #23
 80184e8:	18ba      	adds	r2, r7, r2
 80184ea:	2100      	movs	r1, #0
 80184ec:	5651      	ldrsb	r1, [r2, r1]
 80184ee:	183a      	adds	r2, r7, r0
 80184f0:	7810      	ldrb	r0, [r2, #0]
 80184f2:	22fa      	movs	r2, #250	; 0xfa
 80184f4:	0112      	lsls	r2, r2, #4
 80184f6:	9208      	str	r2, [sp, #32]
 80184f8:	2200      	movs	r2, #0
 80184fa:	9207      	str	r2, [sp, #28]
 80184fc:	2200      	movs	r2, #0
 80184fe:	9206      	str	r2, [sp, #24]
 8018500:	2200      	movs	r2, #0
 8018502:	9205      	str	r2, [sp, #20]
 8018504:	2201      	movs	r2, #1
 8018506:	9204      	str	r2, [sp, #16]
 8018508:	2200      	movs	r2, #0
 801850a:	9203      	str	r2, [sp, #12]
 801850c:	2208      	movs	r2, #8
 801850e:	9202      	str	r2, [sp, #8]
 8018510:	2201      	movs	r2, #1
 8018512:	9201      	str	r2, [sp, #4]
 8018514:	9300      	str	r3, [sp, #0]
 8018516:	002b      	movs	r3, r5
 8018518:	2200      	movs	r2, #0
 801851a:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	0019      	movs	r1, r3
 8018522:	4a17      	ldr	r2, [pc, #92]	; (8018580 <RegionEU868TxConfig+0x1c8>)
 8018524:	000b      	movs	r3, r1
 8018526:	005b      	lsls	r3, r3, #1
 8018528:	185b      	adds	r3, r3, r1
 801852a:	009b      	lsls	r3, r3, #2
 801852c:	589a      	ldr	r2, [r3, r2]
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	785b      	ldrb	r3, [r3, #1]
 8018532:	b25b      	sxtb	r3, r3
 8018534:	0019      	movs	r1, r3
 8018536:	0010      	movs	r0, r2
 8018538:	f7ff f968 	bl	801780c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	2201      	movs	r2, #1
 8018540:	569a      	ldrsb	r2, [r3, r2]
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	899b      	ldrh	r3, [r3, #12]
 8018546:	0019      	movs	r1, r3
 8018548:	0010      	movs	r0, r2
 801854a:	f7ff fa81 	bl	8017a50 <GetTimeOnAir>
 801854e:	0002      	movs	r2, r0
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018554:	4b0c      	ldr	r3, [pc, #48]	; (8018588 <RegionEU868TxConfig+0x1d0>)
 8018556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018558:	68fa      	ldr	r2, [r7, #12]
 801855a:	8992      	ldrh	r2, [r2, #12]
 801855c:	b2d1      	uxtb	r1, r2
 801855e:	221f      	movs	r2, #31
 8018560:	18ba      	adds	r2, r7, r2
 8018562:	7812      	ldrb	r2, [r2, #0]
 8018564:	0010      	movs	r0, r2
 8018566:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018568:	68bb      	ldr	r3, [r7, #8]
 801856a:	221d      	movs	r2, #29
 801856c:	18ba      	adds	r2, r7, r2
 801856e:	7812      	ldrb	r2, [r2, #0]
 8018570:	701a      	strb	r2, [r3, #0]
    return true;
 8018572:	2301      	movs	r3, #1
}
 8018574:	0018      	movs	r0, r3
 8018576:	46bd      	mov	sp, r7
 8018578:	b009      	add	sp, #36	; 0x24
 801857a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801857c:	0801eaf4 	.word	0x0801eaf4
 8018580:	20001344 	.word	0x20001344
 8018584:	2000147c 	.word	0x2000147c
 8018588:	0801ec78 	.word	0x0801ec78
 801858c:	000061a8 	.word	0x000061a8

08018590 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018592:	b093      	sub	sp, #76	; 0x4c
 8018594:	af00      	add	r7, sp, #0
 8018596:	60f8      	str	r0, [r7, #12]
 8018598:	60b9      	str	r1, [r7, #8]
 801859a:	607a      	str	r2, [r7, #4]
 801859c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801859e:	2347      	movs	r3, #71	; 0x47
 80185a0:	18fb      	adds	r3, r7, r3
 80185a2:	2207      	movs	r2, #7
 80185a4:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80185a6:	233c      	movs	r3, #60	; 0x3c
 80185a8:	18fb      	adds	r3, r7, r3
 80185aa:	0018      	movs	r0, r3
 80185ac:	2306      	movs	r3, #6
 80185ae:	001a      	movs	r2, r3
 80185b0:	2100      	movs	r1, #0
 80185b2:	f005 f994 	bl	801d8de <memset>
    uint8_t nextIndex = 0;
 80185b6:	2344      	movs	r3, #68	; 0x44
 80185b8:	18fb      	adds	r3, r7, r3
 80185ba:	2200      	movs	r2, #0
 80185bc:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 80185be:	2346      	movs	r3, #70	; 0x46
 80185c0:	18fb      	adds	r3, r7, r3
 80185c2:	2200      	movs	r2, #0
 80185c4:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 80185c6:	233a      	movs	r3, #58	; 0x3a
 80185c8:	18fb      	adds	r3, r7, r3
 80185ca:	2200      	movs	r2, #0
 80185cc:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80185ce:	e098      	b.n	8018702 <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	685a      	ldr	r2, [r3, #4]
 80185d4:	2546      	movs	r5, #70	; 0x46
 80185d6:	197b      	adds	r3, r7, r5
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	18d3      	adds	r3, r2, r3
 80185dc:	2644      	movs	r6, #68	; 0x44
 80185de:	19bc      	adds	r4, r7, r6
 80185e0:	203c      	movs	r0, #60	; 0x3c
 80185e2:	183a      	adds	r2, r7, r0
 80185e4:	0011      	movs	r1, r2
 80185e6:	0018      	movs	r0, r3
 80185e8:	f7fe fe01 	bl	80171ee <RegionCommonParseLinkAdrReq>
 80185ec:	0003      	movs	r3, r0
 80185ee:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 80185f0:	0032      	movs	r2, r6
 80185f2:	18bb      	adds	r3, r7, r2
 80185f4:	781b      	ldrb	r3, [r3, #0]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d100      	bne.n	80185fc <RegionEU868LinkAdrReq+0x6c>
 80185fa:	e08b      	b.n	8018714 <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80185fc:	197b      	adds	r3, r7, r5
 80185fe:	1979      	adds	r1, r7, r5
 8018600:	18ba      	adds	r2, r7, r2
 8018602:	7809      	ldrb	r1, [r1, #0]
 8018604:	7812      	ldrb	r2, [r2, #0]
 8018606:	188a      	adds	r2, r1, r2
 8018608:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801860a:	2147      	movs	r1, #71	; 0x47
 801860c:	187b      	adds	r3, r7, r1
 801860e:	2207      	movs	r2, #7
 8018610:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018612:	203c      	movs	r0, #60	; 0x3c
 8018614:	183b      	adds	r3, r7, r0
 8018616:	889a      	ldrh	r2, [r3, #4]
 8018618:	243a      	movs	r4, #58	; 0x3a
 801861a:	193b      	adds	r3, r7, r4
 801861c:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801861e:	183b      	adds	r3, r7, r0
 8018620:	78db      	ldrb	r3, [r3, #3]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d10a      	bne.n	801863c <RegionEU868LinkAdrReq+0xac>
 8018626:	193b      	adds	r3, r7, r4
 8018628:	881b      	ldrh	r3, [r3, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d106      	bne.n	801863c <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 801862e:	187b      	adds	r3, r7, r1
 8018630:	187a      	adds	r2, r7, r1
 8018632:	7812      	ldrb	r2, [r2, #0]
 8018634:	2101      	movs	r1, #1
 8018636:	438a      	bics	r2, r1
 8018638:	701a      	strb	r2, [r3, #0]
 801863a:	e062      	b.n	8018702 <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801863c:	223c      	movs	r2, #60	; 0x3c
 801863e:	18bb      	adds	r3, r7, r2
 8018640:	78db      	ldrb	r3, [r3, #3]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d003      	beq.n	801864e <RegionEU868LinkAdrReq+0xbe>
 8018646:	18bb      	adds	r3, r7, r2
 8018648:	78db      	ldrb	r3, [r3, #3]
 801864a:	2b05      	cmp	r3, #5
 801864c:	d904      	bls.n	8018658 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801864e:	233c      	movs	r3, #60	; 0x3c
 8018650:	18fb      	adds	r3, r7, r3
 8018652:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018654:	2b06      	cmp	r3, #6
 8018656:	d907      	bls.n	8018668 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018658:	2247      	movs	r2, #71	; 0x47
 801865a:	18bb      	adds	r3, r7, r2
 801865c:	18ba      	adds	r2, r7, r2
 801865e:	7812      	ldrb	r2, [r2, #0]
 8018660:	2101      	movs	r1, #1
 8018662:	438a      	bics	r2, r1
 8018664:	701a      	strb	r2, [r3, #0]
 8018666:	e04c      	b.n	8018702 <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018668:	2345      	movs	r3, #69	; 0x45
 801866a:	18fb      	adds	r3, r7, r3
 801866c:	2200      	movs	r2, #0
 801866e:	701a      	strb	r2, [r3, #0]
 8018670:	e042      	b.n	80186f8 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018672:	233c      	movs	r3, #60	; 0x3c
 8018674:	18fb      	adds	r3, r7, r3
 8018676:	78db      	ldrb	r3, [r3, #3]
 8018678:	2b06      	cmp	r3, #6
 801867a:	d11a      	bne.n	80186b2 <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 801867c:	2045      	movs	r0, #69	; 0x45
 801867e:	183b      	adds	r3, r7, r0
 8018680:	781a      	ldrb	r2, [r3, #0]
 8018682:	496d      	ldr	r1, [pc, #436]	; (8018838 <RegionEU868LinkAdrReq+0x2a8>)
 8018684:	0013      	movs	r3, r2
 8018686:	005b      	lsls	r3, r3, #1
 8018688:	189b      	adds	r3, r3, r2
 801868a:	009b      	lsls	r3, r3, #2
 801868c:	585b      	ldr	r3, [r3, r1]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d02c      	beq.n	80186ec <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 8018692:	183b      	adds	r3, r7, r0
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	2201      	movs	r2, #1
 8018698:	409a      	lsls	r2, r3
 801869a:	0013      	movs	r3, r2
 801869c:	b21a      	sxth	r2, r3
 801869e:	213a      	movs	r1, #58	; 0x3a
 80186a0:	187b      	adds	r3, r7, r1
 80186a2:	881b      	ldrh	r3, [r3, #0]
 80186a4:	b21b      	sxth	r3, r3
 80186a6:	4313      	orrs	r3, r2
 80186a8:	b21b      	sxth	r3, r3
 80186aa:	b29a      	uxth	r2, r3
 80186ac:	187b      	adds	r3, r7, r1
 80186ae:	801a      	strh	r2, [r3, #0]
 80186b0:	e01c      	b.n	80186ec <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80186b2:	233a      	movs	r3, #58	; 0x3a
 80186b4:	18fb      	adds	r3, r7, r3
 80186b6:	881b      	ldrh	r3, [r3, #0]
 80186b8:	001a      	movs	r2, r3
 80186ba:	2145      	movs	r1, #69	; 0x45
 80186bc:	187b      	adds	r3, r7, r1
 80186be:	781b      	ldrb	r3, [r3, #0]
 80186c0:	411a      	asrs	r2, r3
 80186c2:	0013      	movs	r3, r2
 80186c4:	2201      	movs	r2, #1
 80186c6:	4013      	ands	r3, r2
 80186c8:	d010      	beq.n	80186ec <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 80186ca:	187b      	adds	r3, r7, r1
 80186cc:	781a      	ldrb	r2, [r3, #0]
 80186ce:	495a      	ldr	r1, [pc, #360]	; (8018838 <RegionEU868LinkAdrReq+0x2a8>)
 80186d0:	0013      	movs	r3, r2
 80186d2:	005b      	lsls	r3, r3, #1
 80186d4:	189b      	adds	r3, r3, r2
 80186d6:	009b      	lsls	r3, r3, #2
 80186d8:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d106      	bne.n	80186ec <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80186de:	2247      	movs	r2, #71	; 0x47
 80186e0:	18bb      	adds	r3, r7, r2
 80186e2:	18ba      	adds	r2, r7, r2
 80186e4:	7812      	ldrb	r2, [r2, #0]
 80186e6:	2101      	movs	r1, #1
 80186e8:	438a      	bics	r2, r1
 80186ea:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80186ec:	2145      	movs	r1, #69	; 0x45
 80186ee:	187b      	adds	r3, r7, r1
 80186f0:	781a      	ldrb	r2, [r3, #0]
 80186f2:	187b      	adds	r3, r7, r1
 80186f4:	3201      	adds	r2, #1
 80186f6:	701a      	strb	r2, [r3, #0]
 80186f8:	2345      	movs	r3, #69	; 0x45
 80186fa:	18fb      	adds	r3, r7, r3
 80186fc:	781b      	ldrb	r3, [r3, #0]
 80186fe:	2b0f      	cmp	r3, #15
 8018700:	d9b7      	bls.n	8018672 <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	7a1b      	ldrb	r3, [r3, #8]
 8018706:	2246      	movs	r2, #70	; 0x46
 8018708:	18ba      	adds	r2, r7, r2
 801870a:	7812      	ldrb	r2, [r2, #0]
 801870c:	429a      	cmp	r2, r3
 801870e:	d200      	bcs.n	8018712 <RegionEU868LinkAdrReq+0x182>
 8018710:	e75e      	b.n	80185d0 <RegionEU868LinkAdrReq+0x40>
 8018712:	e000      	b.n	8018716 <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 8018714:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018716:	2134      	movs	r1, #52	; 0x34
 8018718:	187b      	adds	r3, r7, r1
 801871a:	2202      	movs	r2, #2
 801871c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	7a5a      	ldrb	r2, [r3, #9]
 8018722:	187b      	adds	r3, r7, r1
 8018724:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018726:	187b      	adds	r3, r7, r1
 8018728:	0018      	movs	r0, r3
 801872a:	f7ff f9ef 	bl	8017b0c <RegionEU868GetPhyParam>
 801872e:	0003      	movs	r3, r0
 8018730:	001a      	movs	r2, r3
 8018732:	2030      	movs	r0, #48	; 0x30
 8018734:	183b      	adds	r3, r7, r0
 8018736:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018738:	2110      	movs	r1, #16
 801873a:	187b      	adds	r3, r7, r1
 801873c:	2447      	movs	r4, #71	; 0x47
 801873e:	193a      	adds	r2, r7, r4
 8018740:	7812      	ldrb	r2, [r2, #0]
 8018742:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	7a9a      	ldrb	r2, [r3, #10]
 8018748:	187b      	adds	r3, r7, r1
 801874a:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801874c:	253c      	movs	r5, #60	; 0x3c
 801874e:	197b      	adds	r3, r7, r5
 8018750:	2201      	movs	r2, #1
 8018752:	569a      	ldrsb	r2, [r3, r2]
 8018754:	187b      	adds	r3, r7, r1
 8018756:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018758:	197b      	adds	r3, r7, r5
 801875a:	2202      	movs	r2, #2
 801875c:	569a      	ldrsb	r2, [r3, r2]
 801875e:	187b      	adds	r3, r7, r1
 8018760:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018762:	197b      	adds	r3, r7, r5
 8018764:	781a      	ldrb	r2, [r3, #0]
 8018766:	187b      	adds	r3, r7, r1
 8018768:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	220b      	movs	r2, #11
 801876e:	569a      	ldrsb	r2, [r3, r2]
 8018770:	187b      	adds	r3, r7, r1
 8018772:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	220c      	movs	r2, #12
 8018778:	569a      	ldrsb	r2, [r3, r2]
 801877a:	187b      	adds	r3, r7, r1
 801877c:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	7b5b      	ldrb	r3, [r3, #13]
 8018782:	b25a      	sxtb	r2, r3
 8018784:	187b      	adds	r3, r7, r1
 8018786:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018788:	187b      	adds	r3, r7, r1
 801878a:	2210      	movs	r2, #16
 801878c:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801878e:	187b      	adds	r3, r7, r1
 8018790:	223a      	movs	r2, #58	; 0x3a
 8018792:	18ba      	adds	r2, r7, r2
 8018794:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018796:	183b      	adds	r3, r7, r0
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	b25a      	sxtb	r2, r3
 801879c:	0008      	movs	r0, r1
 801879e:	183b      	adds	r3, r7, r0
 80187a0:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80187a2:	183b      	adds	r3, r7, r0
 80187a4:	2207      	movs	r2, #7
 80187a6:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 80187a8:	183b      	adds	r3, r7, r0
 80187aa:	4a23      	ldr	r2, [pc, #140]	; (8018838 <RegionEU868LinkAdrReq+0x2a8>)
 80187ac:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80187ae:	183b      	adds	r3, r7, r0
 80187b0:	2200      	movs	r2, #0
 80187b2:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80187b4:	183b      	adds	r3, r7, r0
 80187b6:	2200      	movs	r2, #0
 80187b8:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80187ba:	183b      	adds	r3, r7, r0
 80187bc:	68fa      	ldr	r2, [r7, #12]
 80187be:	6812      	ldr	r2, [r2, #0]
 80187c0:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80187c2:	0026      	movs	r6, r4
 80187c4:	193c      	adds	r4, r7, r4
 80187c6:	0029      	movs	r1, r5
 80187c8:	187d      	adds	r5, r7, r1
 80187ca:	187b      	adds	r3, r7, r1
 80187cc:	1c9a      	adds	r2, r3, #2
 80187ce:	187b      	adds	r3, r7, r1
 80187d0:	1c59      	adds	r1, r3, #1
 80187d2:	1838      	adds	r0, r7, r0
 80187d4:	002b      	movs	r3, r5
 80187d6:	f7fe fd5f 	bl	8017298 <RegionCommonLinkAdrReqVerifyParams>
 80187da:	0003      	movs	r3, r0
 80187dc:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80187de:	19bb      	adds	r3, r7, r6
 80187e0:	781b      	ldrb	r3, [r3, #0]
 80187e2:	2b07      	cmp	r3, #7
 80187e4:	d10c      	bne.n	8018800 <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 80187e6:	4b15      	ldr	r3, [pc, #84]	; (801883c <RegionEU868LinkAdrReq+0x2ac>)
 80187e8:	2202      	movs	r2, #2
 80187ea:	2100      	movs	r1, #0
 80187ec:	0018      	movs	r0, r3
 80187ee:	f000 fbe9 	bl	8018fc4 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80187f2:	223a      	movs	r2, #58	; 0x3a
 80187f4:	18bb      	adds	r3, r7, r2
 80187f6:	8819      	ldrh	r1, [r3, #0]
 80187f8:	4a0f      	ldr	r2, [pc, #60]	; (8018838 <RegionEU868LinkAdrReq+0x2a8>)
 80187fa:	239c      	movs	r3, #156	; 0x9c
 80187fc:	005b      	lsls	r3, r3, #1
 80187fe:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018800:	213c      	movs	r1, #60	; 0x3c
 8018802:	187b      	adds	r3, r7, r1
 8018804:	2201      	movs	r2, #1
 8018806:	569a      	ldrsb	r2, [r3, r2]
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801880c:	187b      	adds	r3, r7, r1
 801880e:	2202      	movs	r2, #2
 8018810:	569a      	ldrsb	r2, [r3, r2]
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018816:	187b      	adds	r3, r7, r1
 8018818:	781a      	ldrb	r2, [r3, #0]
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801881e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018820:	2246      	movs	r2, #70	; 0x46
 8018822:	18ba      	adds	r2, r7, r2
 8018824:	7812      	ldrb	r2, [r2, #0]
 8018826:	701a      	strb	r2, [r3, #0]

    return status;
 8018828:	2347      	movs	r3, #71	; 0x47
 801882a:	18fb      	adds	r3, r7, r3
 801882c:	781b      	ldrb	r3, [r3, #0]
}
 801882e:	0018      	movs	r0, r3
 8018830:	46bd      	mov	sp, r7
 8018832:	b013      	add	sp, #76	; 0x4c
 8018834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018836:	46c0      	nop			; (mov r8, r8)
 8018838:	20001344 	.word	0x20001344
 801883c:	2000147c 	.word	0x2000147c

08018840 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018840:	b590      	push	{r4, r7, lr}
 8018842:	b085      	sub	sp, #20
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018848:	240f      	movs	r4, #15
 801884a:	193b      	adds	r3, r7, r4
 801884c:	2207      	movs	r2, #7
 801884e:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018850:	210e      	movs	r1, #14
 8018852:	187b      	adds	r3, r7, r1
 8018854:	2200      	movs	r2, #0
 8018856:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	685b      	ldr	r3, [r3, #4]
 801885c:	187a      	adds	r2, r7, r1
 801885e:	0011      	movs	r1, r2
 8018860:	0018      	movs	r0, r3
 8018862:	f7ff f87d 	bl	8017960 <VerifyRfFreq>
 8018866:	0003      	movs	r3, r0
 8018868:	001a      	movs	r2, r3
 801886a:	2301      	movs	r3, #1
 801886c:	4053      	eors	r3, r2
 801886e:	b2db      	uxtb	r3, r3
 8018870:	2b00      	cmp	r3, #0
 8018872:	d005      	beq.n	8018880 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018874:	193b      	adds	r3, r7, r4
 8018876:	193a      	adds	r2, r7, r4
 8018878:	7812      	ldrb	r2, [r2, #0]
 801887a:	2101      	movs	r1, #1
 801887c:	438a      	bics	r2, r1
 801887e:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	781b      	ldrb	r3, [r3, #0]
 8018884:	b25b      	sxtb	r3, r3
 8018886:	2207      	movs	r2, #7
 8018888:	2100      	movs	r1, #0
 801888a:	0018      	movs	r0, r3
 801888c:	f7fe fad5 	bl	8016e3a <RegionCommonValueInRange>
 8018890:	1e03      	subs	r3, r0, #0
 8018892:	d106      	bne.n	80188a2 <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 8018894:	220f      	movs	r2, #15
 8018896:	18bb      	adds	r3, r7, r2
 8018898:	18ba      	adds	r2, r7, r2
 801889a:	7812      	ldrb	r2, [r2, #0]
 801889c:	2102      	movs	r1, #2
 801889e:	438a      	bics	r2, r1
 80188a0:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	785b      	ldrb	r3, [r3, #1]
 80188a6:	b25b      	sxtb	r3, r3
 80188a8:	2205      	movs	r2, #5
 80188aa:	2100      	movs	r1, #0
 80188ac:	0018      	movs	r0, r3
 80188ae:	f7fe fac4 	bl	8016e3a <RegionCommonValueInRange>
 80188b2:	1e03      	subs	r3, r0, #0
 80188b4:	d106      	bne.n	80188c4 <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80188b6:	220f      	movs	r2, #15
 80188b8:	18bb      	adds	r3, r7, r2
 80188ba:	18ba      	adds	r2, r7, r2
 80188bc:	7812      	ldrb	r2, [r2, #0]
 80188be:	2104      	movs	r1, #4
 80188c0:	438a      	bics	r2, r1
 80188c2:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80188c4:	230f      	movs	r3, #15
 80188c6:	18fb      	adds	r3, r7, r3
 80188c8:	781b      	ldrb	r3, [r3, #0]
}
 80188ca:	0018      	movs	r0, r3
 80188cc:	46bd      	mov	sp, r7
 80188ce:	b005      	add	sp, #20
 80188d0:	bd90      	pop	{r4, r7, pc}

080188d2 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80188d2:	b590      	push	{r4, r7, lr}
 80188d4:	b087      	sub	sp, #28
 80188d6:	af00      	add	r7, sp, #0
 80188d8:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80188da:	2417      	movs	r4, #23
 80188dc:	193b      	adds	r3, r7, r4
 80188de:	2203      	movs	r2, #3
 80188e0:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d118      	bne.n	801891e <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	791b      	ldrb	r3, [r3, #4]
 80188f0:	b25b      	sxtb	r3, r3
 80188f2:	b2da      	uxtb	r2, r3
 80188f4:	2108      	movs	r1, #8
 80188f6:	187b      	adds	r3, r7, r1
 80188f8:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80188fa:	187b      	adds	r3, r7, r1
 80188fc:	0018      	movs	r0, r3
 80188fe:	f000 fa35 	bl	8018d6c <RegionEU868ChannelsRemove>
 8018902:	0003      	movs	r3, r0
 8018904:	001a      	movs	r2, r3
 8018906:	2301      	movs	r3, #1
 8018908:	4053      	eors	r3, r2
 801890a:	b2db      	uxtb	r3, r3
 801890c:	2b00      	cmp	r3, #0
 801890e:	d041      	beq.n	8018994 <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 8018910:	193b      	adds	r3, r7, r4
 8018912:	193a      	adds	r2, r7, r4
 8018914:	7812      	ldrb	r2, [r2, #0]
 8018916:	2103      	movs	r1, #3
 8018918:	438a      	bics	r2, r1
 801891a:	701a      	strb	r2, [r3, #0]
 801891c:	e03a      	b.n	8018994 <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681a      	ldr	r2, [r3, #0]
 8018922:	210c      	movs	r1, #12
 8018924:	187b      	adds	r3, r7, r1
 8018926:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	791b      	ldrb	r3, [r3, #4]
 801892c:	b25b      	sxtb	r3, r3
 801892e:	b2da      	uxtb	r2, r3
 8018930:	187b      	adds	r3, r7, r1
 8018932:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018934:	187b      	adds	r3, r7, r1
 8018936:	0018      	movs	r0, r3
 8018938:	f000 f954 	bl	8018be4 <RegionEU868ChannelAdd>
 801893c:	0003      	movs	r3, r0
 801893e:	2b06      	cmp	r3, #6
 8018940:	d017      	beq.n	8018972 <RegionEU868NewChannelReq+0xa0>
 8018942:	dc1e      	bgt.n	8018982 <RegionEU868NewChannelReq+0xb0>
 8018944:	2b05      	cmp	r3, #5
 8018946:	d00c      	beq.n	8018962 <RegionEU868NewChannelReq+0x90>
 8018948:	dc1b      	bgt.n	8018982 <RegionEU868NewChannelReq+0xb0>
 801894a:	2b00      	cmp	r3, #0
 801894c:	d021      	beq.n	8018992 <RegionEU868NewChannelReq+0xc0>
 801894e:	2b04      	cmp	r3, #4
 8018950:	d117      	bne.n	8018982 <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018952:	2217      	movs	r2, #23
 8018954:	18bb      	adds	r3, r7, r2
 8018956:	18ba      	adds	r2, r7, r2
 8018958:	7812      	ldrb	r2, [r2, #0]
 801895a:	2101      	movs	r1, #1
 801895c:	438a      	bics	r2, r1
 801895e:	701a      	strb	r2, [r3, #0]
                break;
 8018960:	e018      	b.n	8018994 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018962:	2217      	movs	r2, #23
 8018964:	18bb      	adds	r3, r7, r2
 8018966:	18ba      	adds	r2, r7, r2
 8018968:	7812      	ldrb	r2, [r2, #0]
 801896a:	2102      	movs	r1, #2
 801896c:	438a      	bics	r2, r1
 801896e:	701a      	strb	r2, [r3, #0]
                break;
 8018970:	e010      	b.n	8018994 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018972:	2217      	movs	r2, #23
 8018974:	18bb      	adds	r3, r7, r2
 8018976:	18ba      	adds	r2, r7, r2
 8018978:	7812      	ldrb	r2, [r2, #0]
 801897a:	2103      	movs	r1, #3
 801897c:	438a      	bics	r2, r1
 801897e:	701a      	strb	r2, [r3, #0]
                break;
 8018980:	e008      	b.n	8018994 <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 8018982:	2217      	movs	r2, #23
 8018984:	18bb      	adds	r3, r7, r2
 8018986:	18ba      	adds	r2, r7, r2
 8018988:	7812      	ldrb	r2, [r2, #0]
 801898a:	2103      	movs	r1, #3
 801898c:	438a      	bics	r2, r1
 801898e:	701a      	strb	r2, [r3, #0]
                break;
 8018990:	e000      	b.n	8018994 <RegionEU868NewChannelReq+0xc2>
                break;
 8018992:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8018994:	2317      	movs	r3, #23
 8018996:	18fb      	adds	r3, r7, r3
 8018998:	781b      	ldrb	r3, [r3, #0]
}
 801899a:	0018      	movs	r0, r3
 801899c:	46bd      	mov	sp, r7
 801899e:	b007      	add	sp, #28
 80189a0:	bd90      	pop	{r4, r7, pc}

080189a2 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80189a2:	b580      	push	{r7, lr}
 80189a4:	b082      	sub	sp, #8
 80189a6:	af00      	add	r7, sp, #0
 80189a8:	6078      	str	r0, [r7, #4]
    return -1;
 80189aa:	2301      	movs	r3, #1
 80189ac:	425b      	negs	r3, r3
}
 80189ae:	0018      	movs	r0, r3
 80189b0:	46bd      	mov	sp, r7
 80189b2:	b002      	add	sp, #8
 80189b4:	bd80      	pop	{r7, pc}
	...

080189b8 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80189b8:	b590      	push	{r4, r7, lr}
 80189ba:	b085      	sub	sp, #20
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80189c0:	240f      	movs	r4, #15
 80189c2:	193b      	adds	r3, r7, r4
 80189c4:	2203      	movs	r2, #3
 80189c6:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 80189c8:	210e      	movs	r1, #14
 80189ca:	187b      	adds	r3, r7, r1
 80189cc:	2200      	movs	r2, #0
 80189ce:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	685b      	ldr	r3, [r3, #4]
 80189d4:	187a      	adds	r2, r7, r1
 80189d6:	0011      	movs	r1, r2
 80189d8:	0018      	movs	r0, r3
 80189da:	f7fe ffc1 	bl	8017960 <VerifyRfFreq>
 80189de:	0003      	movs	r3, r0
 80189e0:	001a      	movs	r2, r3
 80189e2:	2301      	movs	r3, #1
 80189e4:	4053      	eors	r3, r2
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d005      	beq.n	80189f8 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80189ec:	193b      	adds	r3, r7, r4
 80189ee:	193a      	adds	r2, r7, r4
 80189f0:	7812      	ldrb	r2, [r2, #0]
 80189f2:	2101      	movs	r1, #1
 80189f4:	438a      	bics	r2, r1
 80189f6:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	781b      	ldrb	r3, [r3, #0]
 80189fc:	0019      	movs	r1, r3
 80189fe:	4a14      	ldr	r2, [pc, #80]	; (8018a50 <RegionEU868DlChannelReq+0x98>)
 8018a00:	000b      	movs	r3, r1
 8018a02:	005b      	lsls	r3, r3, #1
 8018a04:	185b      	adds	r3, r3, r1
 8018a06:	009b      	lsls	r3, r3, #2
 8018a08:	589b      	ldr	r3, [r3, r2]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d106      	bne.n	8018a1c <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 8018a0e:	220f      	movs	r2, #15
 8018a10:	18bb      	adds	r3, r7, r2
 8018a12:	18ba      	adds	r2, r7, r2
 8018a14:	7812      	ldrb	r2, [r2, #0]
 8018a16:	2102      	movs	r1, #2
 8018a18:	438a      	bics	r2, r1
 8018a1a:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018a1c:	230f      	movs	r3, #15
 8018a1e:	18fb      	adds	r3, r7, r3
 8018a20:	781b      	ldrb	r3, [r3, #0]
 8018a22:	2b03      	cmp	r3, #3
 8018a24:	d10c      	bne.n	8018a40 <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	781b      	ldrb	r3, [r3, #0]
 8018a2a:	0018      	movs	r0, r3
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	685a      	ldr	r2, [r3, #4]
 8018a30:	4907      	ldr	r1, [pc, #28]	; (8018a50 <RegionEU868DlChannelReq+0x98>)
 8018a32:	0003      	movs	r3, r0
 8018a34:	005b      	lsls	r3, r3, #1
 8018a36:	181b      	adds	r3, r3, r0
 8018a38:	009b      	lsls	r3, r3, #2
 8018a3a:	18cb      	adds	r3, r1, r3
 8018a3c:	3304      	adds	r3, #4
 8018a3e:	601a      	str	r2, [r3, #0]
    }

    return status;
 8018a40:	230f      	movs	r3, #15
 8018a42:	18fb      	adds	r3, r7, r3
 8018a44:	781b      	ldrb	r3, [r3, #0]
}
 8018a46:	0018      	movs	r0, r3
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	b005      	add	sp, #20
 8018a4c:	bd90      	pop	{r4, r7, pc}
 8018a4e:	46c0      	nop			; (mov r8, r8)
 8018a50:	20001344 	.word	0x20001344

08018a54 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b082      	sub	sp, #8
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	0002      	movs	r2, r0
 8018a5c:	1dfb      	adds	r3, r7, #7
 8018a5e:	701a      	strb	r2, [r3, #0]
 8018a60:	1dbb      	adds	r3, r7, #6
 8018a62:	1c0a      	adds	r2, r1, #0
 8018a64:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8018a66:	1dfb      	adds	r3, r7, #7
 8018a68:	781b      	ldrb	r3, [r3, #0]
 8018a6a:	b25b      	sxtb	r3, r3
}
 8018a6c:	0018      	movs	r0, r3
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	b002      	add	sp, #8
 8018a72:	bd80      	pop	{r7, pc}

08018a74 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a76:	b099      	sub	sp, #100	; 0x64
 8018a78:	af02      	add	r7, sp, #8
 8018a7a:	60f8      	str	r0, [r7, #12]
 8018a7c:	60b9      	str	r1, [r7, #8]
 8018a7e:	607a      	str	r2, [r7, #4]
 8018a80:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8018a82:	2356      	movs	r3, #86	; 0x56
 8018a84:	18fb      	adds	r3, r7, r3
 8018a86:	2200      	movs	r2, #0
 8018a88:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8018a8a:	2355      	movs	r3, #85	; 0x55
 8018a8c:	18fb      	adds	r3, r7, r3
 8018a8e:	2200      	movs	r2, #0
 8018a90:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018a92:	2344      	movs	r3, #68	; 0x44
 8018a94:	18fb      	adds	r3, r7, r3
 8018a96:	2200      	movs	r2, #0
 8018a98:	601a      	str	r2, [r3, #0]
 8018a9a:	3304      	adds	r3, #4
 8018a9c:	220c      	movs	r2, #12
 8018a9e:	2100      	movs	r1, #0
 8018aa0:	0018      	movs	r0, r3
 8018aa2:	f004 ff1c 	bl	801d8de <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018aa6:	2357      	movs	r3, #87	; 0x57
 8018aa8:	18fb      	adds	r3, r7, r3
 8018aaa:	220c      	movs	r2, #12
 8018aac:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8018aae:	4b4a      	ldr	r3, [pc, #296]	; (8018bd8 <RegionEU868NextChannel+0x164>)
 8018ab0:	2201      	movs	r2, #1
 8018ab2:	2100      	movs	r1, #0
 8018ab4:	0018      	movs	r0, r3
 8018ab6:	f7fe fa28 	bl	8016f0a <RegionCommonCountChannels>
 8018aba:	1e03      	subs	r3, r0, #0
 8018abc:	d10a      	bne.n	8018ad4 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018abe:	4a47      	ldr	r2, [pc, #284]	; (8018bdc <RegionEU868NextChannel+0x168>)
 8018ac0:	239c      	movs	r3, #156	; 0x9c
 8018ac2:	005b      	lsls	r3, r3, #1
 8018ac4:	5ad3      	ldrh	r3, [r2, r3]
 8018ac6:	2207      	movs	r2, #7
 8018ac8:	4313      	orrs	r3, r2
 8018aca:	b299      	uxth	r1, r3
 8018acc:	4a43      	ldr	r2, [pc, #268]	; (8018bdc <RegionEU868NextChannel+0x168>)
 8018ace:	239c      	movs	r3, #156	; 0x9c
 8018ad0:	005b      	lsls	r3, r3, #1
 8018ad2:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	7a5a      	ldrb	r2, [r3, #9]
 8018ad8:	2110      	movs	r1, #16
 8018ada:	187b      	adds	r3, r7, r1
 8018adc:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	7a1b      	ldrb	r3, [r3, #8]
 8018ae2:	b25b      	sxtb	r3, r3
 8018ae4:	b2da      	uxtb	r2, r3
 8018ae6:	187b      	adds	r3, r7, r1
 8018ae8:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 8018aea:	000d      	movs	r5, r1
 8018aec:	197b      	adds	r3, r7, r5
 8018aee:	4a3a      	ldr	r2, [pc, #232]	; (8018bd8 <RegionEU868NextChannel+0x164>)
 8018af0:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 8018af2:	197b      	adds	r3, r7, r5
 8018af4:	4a39      	ldr	r2, [pc, #228]	; (8018bdc <RegionEU868NextChannel+0x168>)
 8018af6:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 8018af8:	197b      	adds	r3, r7, r5
 8018afa:	4a39      	ldr	r2, [pc, #228]	; (8018be0 <RegionEU868NextChannel+0x16c>)
 8018afc:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018afe:	197b      	adds	r3, r7, r5
 8018b00:	2210      	movs	r2, #16
 8018b02:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 8018b04:	197b      	adds	r3, r7, r5
 8018b06:	2207      	movs	r2, #7
 8018b08:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	681a      	ldr	r2, [r3, #0]
 8018b0e:	2424      	movs	r4, #36	; 0x24
 8018b10:	193b      	adds	r3, r7, r4
 8018b12:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	685a      	ldr	r2, [r3, #4]
 8018b18:	193b      	adds	r3, r7, r4
 8018b1a:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	7a9a      	ldrb	r2, [r3, #10]
 8018b20:	193b      	adds	r3, r7, r4
 8018b22:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018b24:	193b      	adds	r3, r7, r4
 8018b26:	2206      	movs	r2, #6
 8018b28:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018b2a:	193b      	adds	r3, r7, r4
 8018b2c:	68fa      	ldr	r2, [r7, #12]
 8018b2e:	330c      	adds	r3, #12
 8018b30:	320c      	adds	r2, #12
 8018b32:	ca03      	ldmia	r2!, {r0, r1}
 8018b34:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	7d1a      	ldrb	r2, [r3, #20]
 8018b3a:	193b      	adds	r3, r7, r4
 8018b3c:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	2208      	movs	r2, #8
 8018b42:	569a      	ldrsb	r2, [r3, r2]
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	8adb      	ldrh	r3, [r3, #22]
 8018b48:	0019      	movs	r1, r3
 8018b4a:	0010      	movs	r0, r2
 8018b4c:	f7fe ff80 	bl	8017a50 <GetTimeOnAir>
 8018b50:	0002      	movs	r2, r0
 8018b52:	0020      	movs	r0, r4
 8018b54:	183b      	adds	r3, r7, r0
 8018b56:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018b58:	183b      	adds	r3, r7, r0
 8018b5a:	197a      	adds	r2, r7, r5
 8018b5c:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018b5e:	2657      	movs	r6, #87	; 0x57
 8018b60:	19bc      	adds	r4, r7, r6
 8018b62:	2356      	movs	r3, #86	; 0x56
 8018b64:	18fd      	adds	r5, r7, r3
 8018b66:	2244      	movs	r2, #68	; 0x44
 8018b68:	18ba      	adds	r2, r7, r2
 8018b6a:	6839      	ldr	r1, [r7, #0]
 8018b6c:	1838      	adds	r0, r7, r0
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	9301      	str	r3, [sp, #4]
 8018b72:	2355      	movs	r3, #85	; 0x55
 8018b74:	18fb      	adds	r3, r7, r3
 8018b76:	9300      	str	r3, [sp, #0]
 8018b78:	002b      	movs	r3, r5
 8018b7a:	f7fe fdc7 	bl	801770c <RegionCommonIdentifyChannels>
 8018b7e:	0003      	movs	r3, r0
 8018b80:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018b82:	19bb      	adds	r3, r7, r6
 8018b84:	781b      	ldrb	r3, [r3, #0]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d10e      	bne.n	8018ba8 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018b8a:	2356      	movs	r3, #86	; 0x56
 8018b8c:	18fb      	adds	r3, r7, r3
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	3b01      	subs	r3, #1
 8018b92:	0019      	movs	r1, r3
 8018b94:	2000      	movs	r0, #0
 8018b96:	f000 f9c1 	bl	8018f1c <randr>
 8018b9a:	0002      	movs	r2, r0
 8018b9c:	2344      	movs	r3, #68	; 0x44
 8018b9e:	18fb      	adds	r3, r7, r3
 8018ba0:	5c9a      	ldrb	r2, [r3, r2]
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	701a      	strb	r2, [r3, #0]
 8018ba6:	e00f      	b.n	8018bc8 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018ba8:	2357      	movs	r3, #87	; 0x57
 8018baa:	18fb      	adds	r3, r7, r3
 8018bac:	781b      	ldrb	r3, [r3, #0]
 8018bae:	2b0c      	cmp	r3, #12
 8018bb0:	d10a      	bne.n	8018bc8 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018bb2:	4a0a      	ldr	r2, [pc, #40]	; (8018bdc <RegionEU868NextChannel+0x168>)
 8018bb4:	239c      	movs	r3, #156	; 0x9c
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	5ad3      	ldrh	r3, [r2, r3]
 8018bba:	2207      	movs	r2, #7
 8018bbc:	4313      	orrs	r3, r2
 8018bbe:	b299      	uxth	r1, r3
 8018bc0:	4a06      	ldr	r2, [pc, #24]	; (8018bdc <RegionEU868NextChannel+0x168>)
 8018bc2:	239c      	movs	r3, #156	; 0x9c
 8018bc4:	005b      	lsls	r3, r3, #1
 8018bc6:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8018bc8:	2357      	movs	r3, #87	; 0x57
 8018bca:	18fb      	adds	r3, r7, r3
 8018bcc:	781b      	ldrb	r3, [r3, #0]
}
 8018bce:	0018      	movs	r0, r3
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	b017      	add	sp, #92	; 0x5c
 8018bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bd6:	46c0      	nop			; (mov r8, r8)
 8018bd8:	2000147c 	.word	0x2000147c
 8018bdc:	20001344 	.word	0x20001344
 8018be0:	20001404 	.word	0x20001404

08018be4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018be4:	b590      	push	{r4, r7, lr}
 8018be6:	b085      	sub	sp, #20
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8018bec:	230c      	movs	r3, #12
 8018bee:	18fb      	adds	r3, r7, r3
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8018bf4:	230f      	movs	r3, #15
 8018bf6:	18fb      	adds	r3, r7, r3
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8018bfc:	230e      	movs	r3, #14
 8018bfe:	18fb      	adds	r3, r7, r3
 8018c00:	2200      	movs	r2, #0
 8018c02:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8018c04:	210d      	movs	r1, #13
 8018c06:	187b      	adds	r3, r7, r1
 8018c08:	687a      	ldr	r2, [r7, #4]
 8018c0a:	7912      	ldrb	r2, [r2, #4]
 8018c0c:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018c0e:	187b      	adds	r3, r7, r1
 8018c10:	781b      	ldrb	r3, [r3, #0]
 8018c12:	2b02      	cmp	r3, #2
 8018c14:	d801      	bhi.n	8018c1a <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018c16:	2306      	movs	r3, #6
 8018c18:	e0a1      	b.n	8018d5e <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018c1a:	230d      	movs	r3, #13
 8018c1c:	18fb      	adds	r3, r7, r3
 8018c1e:	781b      	ldrb	r3, [r3, #0]
 8018c20:	2b0f      	cmp	r3, #15
 8018c22:	d901      	bls.n	8018c28 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018c24:	2303      	movs	r3, #3
 8018c26:	e09a      	b.n	8018d5e <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	7a1b      	ldrb	r3, [r3, #8]
 8018c2e:	011b      	lsls	r3, r3, #4
 8018c30:	b25b      	sxtb	r3, r3
 8018c32:	111b      	asrs	r3, r3, #4
 8018c34:	b25b      	sxtb	r3, r3
 8018c36:	2207      	movs	r2, #7
 8018c38:	2100      	movs	r1, #0
 8018c3a:	0018      	movs	r0, r3
 8018c3c:	f7fe f8fd 	bl	8016e3a <RegionCommonValueInRange>
 8018c40:	1e03      	subs	r3, r0, #0
 8018c42:	d103      	bne.n	8018c4c <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8018c44:	230f      	movs	r3, #15
 8018c46:	18fb      	adds	r3, r7, r3
 8018c48:	2201      	movs	r2, #1
 8018c4a:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	7a1b      	ldrb	r3, [r3, #8]
 8018c52:	b25b      	sxtb	r3, r3
 8018c54:	111b      	asrs	r3, r3, #4
 8018c56:	b25b      	sxtb	r3, r3
 8018c58:	2207      	movs	r2, #7
 8018c5a:	2100      	movs	r1, #0
 8018c5c:	0018      	movs	r0, r3
 8018c5e:	f7fe f8ec 	bl	8016e3a <RegionCommonValueInRange>
 8018c62:	1e03      	subs	r3, r0, #0
 8018c64:	d103      	bne.n	8018c6e <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8018c66:	230f      	movs	r3, #15
 8018c68:	18fb      	adds	r3, r7, r3
 8018c6a:	2201      	movs	r2, #1
 8018c6c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	7a1b      	ldrb	r3, [r3, #8]
 8018c74:	011b      	lsls	r3, r3, #4
 8018c76:	b25b      	sxtb	r3, r3
 8018c78:	111b      	asrs	r3, r3, #4
 8018c7a:	b25a      	sxtb	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	7a1b      	ldrb	r3, [r3, #8]
 8018c82:	b25b      	sxtb	r3, r3
 8018c84:	111b      	asrs	r3, r3, #4
 8018c86:	b25b      	sxtb	r3, r3
 8018c88:	429a      	cmp	r2, r3
 8018c8a:	dd03      	ble.n	8018c94 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8018c8c:	230f      	movs	r3, #15
 8018c8e:	18fb      	adds	r3, r7, r3
 8018c90:	2201      	movs	r2, #1
 8018c92:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8018c94:	240e      	movs	r4, #14
 8018c96:	193b      	adds	r3, r7, r4
 8018c98:	781b      	ldrb	r3, [r3, #0]
 8018c9a:	2201      	movs	r2, #1
 8018c9c:	4053      	eors	r3, r2
 8018c9e:	b2db      	uxtb	r3, r3
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d012      	beq.n	8018cca <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	220c      	movs	r2, #12
 8018cac:	18ba      	adds	r2, r7, r2
 8018cae:	0011      	movs	r1, r2
 8018cb0:	0018      	movs	r0, r3
 8018cb2:	f7fe fe55 	bl	8017960 <VerifyRfFreq>
 8018cb6:	0003      	movs	r3, r0
 8018cb8:	001a      	movs	r2, r3
 8018cba:	2301      	movs	r3, #1
 8018cbc:	4053      	eors	r3, r2
 8018cbe:	b2db      	uxtb	r3, r3
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d002      	beq.n	8018cca <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 8018cc4:	193b      	adds	r3, r7, r4
 8018cc6:	2201      	movs	r2, #1
 8018cc8:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018cca:	230f      	movs	r3, #15
 8018ccc:	18fb      	adds	r3, r7, r3
 8018cce:	781b      	ldrb	r3, [r3, #0]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d006      	beq.n	8018ce2 <RegionEU868ChannelAdd+0xfe>
 8018cd4:	230e      	movs	r3, #14
 8018cd6:	18fb      	adds	r3, r7, r3
 8018cd8:	781b      	ldrb	r3, [r3, #0]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d001      	beq.n	8018ce2 <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018cde:	2306      	movs	r3, #6
 8018ce0:	e03d      	b.n	8018d5e <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 8018ce2:	230f      	movs	r3, #15
 8018ce4:	18fb      	adds	r3, r7, r3
 8018ce6:	781b      	ldrb	r3, [r3, #0]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d001      	beq.n	8018cf0 <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018cec:	2305      	movs	r3, #5
 8018cee:	e036      	b.n	8018d5e <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 8018cf0:	230e      	movs	r3, #14
 8018cf2:	18fb      	adds	r3, r7, r3
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d001      	beq.n	8018cfe <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018cfa:	2304      	movs	r3, #4
 8018cfc:	e02f      	b.n	8018d5e <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8018cfe:	240d      	movs	r4, #13
 8018d00:	193b      	adds	r3, r7, r4
 8018d02:	781a      	ldrb	r2, [r3, #0]
 8018d04:	0013      	movs	r3, r2
 8018d06:	005b      	lsls	r3, r3, #1
 8018d08:	189b      	adds	r3, r3, r2
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	4a16      	ldr	r2, [pc, #88]	; (8018d68 <RegionEU868ChannelAdd+0x184>)
 8018d0e:	1898      	adds	r0, r3, r2
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	220c      	movs	r2, #12
 8018d16:	0019      	movs	r1, r3
 8018d18:	f000 f916 	bl	8018f48 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8018d1c:	193b      	adds	r3, r7, r4
 8018d1e:	781a      	ldrb	r2, [r3, #0]
 8018d20:	230c      	movs	r3, #12
 8018d22:	18fb      	adds	r3, r7, r3
 8018d24:	7818      	ldrb	r0, [r3, #0]
 8018d26:	4910      	ldr	r1, [pc, #64]	; (8018d68 <RegionEU868ChannelAdd+0x184>)
 8018d28:	0013      	movs	r3, r2
 8018d2a:	005b      	lsls	r3, r3, #1
 8018d2c:	189b      	adds	r3, r3, r2
 8018d2e:	009b      	lsls	r3, r3, #2
 8018d30:	18cb      	adds	r3, r1, r3
 8018d32:	3309      	adds	r3, #9
 8018d34:	1c02      	adds	r2, r0, #0
 8018d36:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8018d38:	4a0b      	ldr	r2, [pc, #44]	; (8018d68 <RegionEU868ChannelAdd+0x184>)
 8018d3a:	239c      	movs	r3, #156	; 0x9c
 8018d3c:	005b      	lsls	r3, r3, #1
 8018d3e:	5ad3      	ldrh	r3, [r2, r3]
 8018d40:	b21a      	sxth	r2, r3
 8018d42:	193b      	adds	r3, r7, r4
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	2101      	movs	r1, #1
 8018d48:	4099      	lsls	r1, r3
 8018d4a:	000b      	movs	r3, r1
 8018d4c:	b21b      	sxth	r3, r3
 8018d4e:	4313      	orrs	r3, r2
 8018d50:	b21b      	sxth	r3, r3
 8018d52:	b299      	uxth	r1, r3
 8018d54:	4a04      	ldr	r2, [pc, #16]	; (8018d68 <RegionEU868ChannelAdd+0x184>)
 8018d56:	239c      	movs	r3, #156	; 0x9c
 8018d58:	005b      	lsls	r3, r3, #1
 8018d5a:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8018d5c:	2300      	movs	r3, #0
}
 8018d5e:	0018      	movs	r0, r3
 8018d60:	46bd      	mov	sp, r7
 8018d62:	b005      	add	sp, #20
 8018d64:	bd90      	pop	{r4, r7, pc}
 8018d66:	46c0      	nop			; (mov r8, r8)
 8018d68:	20001344 	.word	0x20001344

08018d6c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018d6c:	b590      	push	{r4, r7, lr}
 8018d6e:	b087      	sub	sp, #28
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8018d74:	2117      	movs	r1, #23
 8018d76:	187b      	adds	r3, r7, r1
 8018d78:	687a      	ldr	r2, [r7, #4]
 8018d7a:	7812      	ldrb	r2, [r2, #0]
 8018d7c:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018d7e:	187b      	adds	r3, r7, r1
 8018d80:	781b      	ldrb	r3, [r3, #0]
 8018d82:	2b02      	cmp	r3, #2
 8018d84:	d801      	bhi.n	8018d8a <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8018d86:	2300      	movs	r3, #0
 8018d88:	e015      	b.n	8018db6 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018d8a:	2417      	movs	r4, #23
 8018d8c:	193b      	adds	r3, r7, r4
 8018d8e:	781a      	ldrb	r2, [r3, #0]
 8018d90:	490b      	ldr	r1, [pc, #44]	; (8018dc0 <RegionEU868ChannelsRemove+0x54>)
 8018d92:	0013      	movs	r3, r2
 8018d94:	005b      	lsls	r3, r3, #1
 8018d96:	189b      	adds	r3, r3, r2
 8018d98:	009b      	lsls	r3, r3, #2
 8018d9a:	18cb      	adds	r3, r1, r3
 8018d9c:	220c      	movs	r2, #12
 8018d9e:	2100      	movs	r1, #0
 8018da0:	0018      	movs	r0, r3
 8018da2:	f004 fd9c 	bl	801d8de <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018da6:	193b      	adds	r3, r7, r4
 8018da8:	7819      	ldrb	r1, [r3, #0]
 8018daa:	4b06      	ldr	r3, [pc, #24]	; (8018dc4 <RegionEU868ChannelsRemove+0x58>)
 8018dac:	2210      	movs	r2, #16
 8018dae:	0018      	movs	r0, r3
 8018db0:	f7fe f869 	bl	8016e86 <RegionCommonChanDisable>
 8018db4:	0003      	movs	r3, r0
}
 8018db6:	0018      	movs	r0, r3
 8018db8:	46bd      	mov	sp, r7
 8018dba:	b007      	add	sp, #28
 8018dbc:	bd90      	pop	{r4, r7, pc}
 8018dbe:	46c0      	nop			; (mov r8, r8)
 8018dc0:	20001344 	.word	0x20001344
 8018dc4:	2000147c 	.word	0x2000147c

08018dc8 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dca:	b085      	sub	sp, #20
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	2002      	movs	r0, #2
 8018dd4:	5618      	ldrsb	r0, [r3, r0]
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	781b      	ldrb	r3, [r3, #0]
 8018dda:	0019      	movs	r1, r3
 8018ddc:	4a23      	ldr	r2, [pc, #140]	; (8018e6c <RegionEU868SetContinuousWave+0xa4>)
 8018dde:	000b      	movs	r3, r1
 8018de0:	005b      	lsls	r3, r3, #1
 8018de2:	185b      	adds	r3, r3, r1
 8018de4:	009b      	lsls	r3, r3, #2
 8018de6:	18d3      	adds	r3, r2, r3
 8018de8:	3309      	adds	r3, #9
 8018dea:	781b      	ldrb	r3, [r3, #0]
 8018dec:	001c      	movs	r4, r3
 8018dee:	4a1f      	ldr	r2, [pc, #124]	; (8018e6c <RegionEU868SetContinuousWave+0xa4>)
 8018df0:	21c2      	movs	r1, #194	; 0xc2
 8018df2:	0023      	movs	r3, r4
 8018df4:	009b      	lsls	r3, r3, #2
 8018df6:	191b      	adds	r3, r3, r4
 8018df8:	009b      	lsls	r3, r3, #2
 8018dfa:	18d3      	adds	r3, r2, r3
 8018dfc:	185b      	adds	r3, r3, r1
 8018dfe:	2100      	movs	r1, #0
 8018e00:	5659      	ldrsb	r1, [r3, r1]
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	2201      	movs	r2, #1
 8018e06:	569a      	ldrsb	r2, [r3, r2]
 8018e08:	260f      	movs	r6, #15
 8018e0a:	19bc      	adds	r4, r7, r6
 8018e0c:	4b18      	ldr	r3, [pc, #96]	; (8018e70 <RegionEU868SetContinuousWave+0xa8>)
 8018e0e:	f7fe fd7f 	bl	8017910 <LimitTxPower>
 8018e12:	0003      	movs	r3, r0
 8018e14:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8018e16:	200e      	movs	r0, #14
 8018e18:	183b      	adds	r3, r7, r0
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	781b      	ldrb	r3, [r3, #0]
 8018e22:	0019      	movs	r1, r3
 8018e24:	4a11      	ldr	r2, [pc, #68]	; (8018e6c <RegionEU868SetContinuousWave+0xa4>)
 8018e26:	000b      	movs	r3, r1
 8018e28:	005b      	lsls	r3, r3, #1
 8018e2a:	185b      	adds	r3, r3, r1
 8018e2c:	009b      	lsls	r3, r3, #2
 8018e2e:	589b      	ldr	r3, [r3, r2]
 8018e30:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6859      	ldr	r1, [r3, #4]
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	689a      	ldr	r2, [r3, #8]
 8018e3a:	0005      	movs	r5, r0
 8018e3c:	183c      	adds	r4, r7, r0
 8018e3e:	19bb      	adds	r3, r7, r6
 8018e40:	781b      	ldrb	r3, [r3, #0]
 8018e42:	b25b      	sxtb	r3, r3
 8018e44:	0018      	movs	r0, r3
 8018e46:	f7fe fb39 	bl	80174bc <RegionCommonComputeTxPower>
 8018e4a:	0003      	movs	r3, r0
 8018e4c:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018e4e:	4b09      	ldr	r3, [pc, #36]	; (8018e74 <RegionEU868SetContinuousWave+0xac>)
 8018e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e52:	687a      	ldr	r2, [r7, #4]
 8018e54:	8994      	ldrh	r4, [r2, #12]
 8018e56:	197a      	adds	r2, r7, r5
 8018e58:	2100      	movs	r1, #0
 8018e5a:	5651      	ldrsb	r1, [r2, r1]
 8018e5c:	68b8      	ldr	r0, [r7, #8]
 8018e5e:	0022      	movs	r2, r4
 8018e60:	4798      	blx	r3
}
 8018e62:	46c0      	nop			; (mov r8, r8)
 8018e64:	46bd      	mov	sp, r7
 8018e66:	b005      	add	sp, #20
 8018e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e6a:	46c0      	nop			; (mov r8, r8)
 8018e6c:	20001344 	.word	0x20001344
 8018e70:	2000147c 	.word	0x2000147c
 8018e74:	0801ec78 	.word	0x0801ec78

08018e78 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018e78:	b590      	push	{r4, r7, lr}
 8018e7a:	b085      	sub	sp, #20
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	0004      	movs	r4, r0
 8018e80:	0008      	movs	r0, r1
 8018e82:	0011      	movs	r1, r2
 8018e84:	1dfb      	adds	r3, r7, #7
 8018e86:	1c22      	adds	r2, r4, #0
 8018e88:	701a      	strb	r2, [r3, #0]
 8018e8a:	1dbb      	adds	r3, r7, #6
 8018e8c:	1c02      	adds	r2, r0, #0
 8018e8e:	701a      	strb	r2, [r3, #0]
 8018e90:	1d7b      	adds	r3, r7, #5
 8018e92:	1c0a      	adds	r2, r1, #0
 8018e94:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8018e96:	1dbb      	adds	r3, r7, #6
 8018e98:	781a      	ldrb	r2, [r3, #0]
 8018e9a:	1d7b      	adds	r3, r7, #5
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	1ad3      	subs	r3, r2, r3
 8018ea0:	b2da      	uxtb	r2, r3
 8018ea2:	210f      	movs	r1, #15
 8018ea4:	187b      	adds	r3, r7, r1
 8018ea6:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8018ea8:	000a      	movs	r2, r1
 8018eaa:	18bb      	adds	r3, r7, r2
 8018eac:	781b      	ldrb	r3, [r3, #0]
 8018eae:	2b7f      	cmp	r3, #127	; 0x7f
 8018eb0:	d902      	bls.n	8018eb8 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8018eb2:	18bb      	adds	r3, r7, r2
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8018eb8:	230f      	movs	r3, #15
 8018eba:	18fb      	adds	r3, r7, r3
 8018ebc:	781b      	ldrb	r3, [r3, #0]
}
 8018ebe:	0018      	movs	r0, r3
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	b005      	add	sp, #20
 8018ec4:	bd90      	pop	{r4, r7, pc}
	...

08018ec8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018ecc:	4b08      	ldr	r3, [pc, #32]	; (8018ef0 <rand1+0x28>)
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	4a08      	ldr	r2, [pc, #32]	; (8018ef4 <rand1+0x2c>)
 8018ed2:	4353      	muls	r3, r2
 8018ed4:	4a08      	ldr	r2, [pc, #32]	; (8018ef8 <rand1+0x30>)
 8018ed6:	189a      	adds	r2, r3, r2
 8018ed8:	4b05      	ldr	r3, [pc, #20]	; (8018ef0 <rand1+0x28>)
 8018eda:	601a      	str	r2, [r3, #0]
 8018edc:	4b04      	ldr	r3, [pc, #16]	; (8018ef0 <rand1+0x28>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	4906      	ldr	r1, [pc, #24]	; (8018efc <rand1+0x34>)
 8018ee2:	0018      	movs	r0, r3
 8018ee4:	f7e7 f99e 	bl	8000224 <__aeabi_uidivmod>
 8018ee8:	000b      	movs	r3, r1
}
 8018eea:	0018      	movs	r0, r3
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}
 8018ef0:	200001f0 	.word	0x200001f0
 8018ef4:	41c64e6d 	.word	0x41c64e6d
 8018ef8:	00003039 	.word	0x00003039
 8018efc:	7fffffff 	.word	0x7fffffff

08018f00 <srand1>:

void srand1( uint32_t seed )
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b082      	sub	sp, #8
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
    next = seed;
 8018f08:	4b03      	ldr	r3, [pc, #12]	; (8018f18 <srand1+0x18>)
 8018f0a:	687a      	ldr	r2, [r7, #4]
 8018f0c:	601a      	str	r2, [r3, #0]
}
 8018f0e:	46c0      	nop			; (mov r8, r8)
 8018f10:	46bd      	mov	sp, r7
 8018f12:	b002      	add	sp, #8
 8018f14:	bd80      	pop	{r7, pc}
 8018f16:	46c0      	nop			; (mov r8, r8)
 8018f18:	200001f0 	.word	0x200001f0

08018f1c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b082      	sub	sp, #8
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
 8018f24:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018f26:	f7ff ffcf 	bl	8018ec8 <rand1>
 8018f2a:	683a      	ldr	r2, [r7, #0]
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	1ad3      	subs	r3, r2, r3
 8018f30:	3301      	adds	r3, #1
 8018f32:	0019      	movs	r1, r3
 8018f34:	f7e7 fa60 	bl	80003f8 <__aeabi_idivmod>
 8018f38:	000b      	movs	r3, r1
 8018f3a:	001a      	movs	r2, r3
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	18d3      	adds	r3, r2, r3
}
 8018f40:	0018      	movs	r0, r3
 8018f42:	46bd      	mov	sp, r7
 8018f44:	b002      	add	sp, #8
 8018f46:	bd80      	pop	{r7, pc}

08018f48 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b084      	sub	sp, #16
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	60f8      	str	r0, [r7, #12]
 8018f50:	60b9      	str	r1, [r7, #8]
 8018f52:	1dbb      	adds	r3, r7, #6
 8018f54:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8018f56:	e007      	b.n	8018f68 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018f58:	68ba      	ldr	r2, [r7, #8]
 8018f5a:	1c53      	adds	r3, r2, #1
 8018f5c:	60bb      	str	r3, [r7, #8]
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	1c59      	adds	r1, r3, #1
 8018f62:	60f9      	str	r1, [r7, #12]
 8018f64:	7812      	ldrb	r2, [r2, #0]
 8018f66:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f68:	1dbb      	adds	r3, r7, #6
 8018f6a:	881b      	ldrh	r3, [r3, #0]
 8018f6c:	1dba      	adds	r2, r7, #6
 8018f6e:	1e59      	subs	r1, r3, #1
 8018f70:	8011      	strh	r1, [r2, #0]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d1f0      	bne.n	8018f58 <memcpy1+0x10>
    }
}
 8018f76:	46c0      	nop			; (mov r8, r8)
 8018f78:	46c0      	nop			; (mov r8, r8)
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	b004      	add	sp, #16
 8018f7e:	bd80      	pop	{r7, pc}

08018f80 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	1dbb      	adds	r3, r7, #6
 8018f8c:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8018f8e:	1dbb      	adds	r3, r7, #6
 8018f90:	881b      	ldrh	r3, [r3, #0]
 8018f92:	3b01      	subs	r3, #1
 8018f94:	68fa      	ldr	r2, [r7, #12]
 8018f96:	18d3      	adds	r3, r2, r3
 8018f98:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018f9a:	e007      	b.n	8018fac <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8018f9c:	68ba      	ldr	r2, [r7, #8]
 8018f9e:	1c53      	adds	r3, r2, #1
 8018fa0:	60bb      	str	r3, [r7, #8]
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	1e59      	subs	r1, r3, #1
 8018fa6:	60f9      	str	r1, [r7, #12]
 8018fa8:	7812      	ldrb	r2, [r2, #0]
 8018faa:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018fac:	1dbb      	adds	r3, r7, #6
 8018fae:	881b      	ldrh	r3, [r3, #0]
 8018fb0:	1dba      	adds	r2, r7, #6
 8018fb2:	1e59      	subs	r1, r3, #1
 8018fb4:	8011      	strh	r1, [r2, #0]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d1f0      	bne.n	8018f9c <memcpyr+0x1c>
    }
}
 8018fba:	46c0      	nop			; (mov r8, r8)
 8018fbc:	46c0      	nop			; (mov r8, r8)
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	b004      	add	sp, #16
 8018fc2:	bd80      	pop	{r7, pc}

08018fc4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b082      	sub	sp, #8
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	6078      	str	r0, [r7, #4]
 8018fcc:	0008      	movs	r0, r1
 8018fce:	0011      	movs	r1, r2
 8018fd0:	1cfb      	adds	r3, r7, #3
 8018fd2:	1c02      	adds	r2, r0, #0
 8018fd4:	701a      	strb	r2, [r3, #0]
 8018fd6:	003b      	movs	r3, r7
 8018fd8:	1c0a      	adds	r2, r1, #0
 8018fda:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8018fdc:	e005      	b.n	8018fea <memset1+0x26>
    {
        *dst++ = value;
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	1c5a      	adds	r2, r3, #1
 8018fe2:	607a      	str	r2, [r7, #4]
 8018fe4:	1cfa      	adds	r2, r7, #3
 8018fe6:	7812      	ldrb	r2, [r2, #0]
 8018fe8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018fea:	003b      	movs	r3, r7
 8018fec:	881b      	ldrh	r3, [r3, #0]
 8018fee:	003a      	movs	r2, r7
 8018ff0:	1e59      	subs	r1, r3, #1
 8018ff2:	8011      	strh	r1, [r2, #0]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d1f2      	bne.n	8018fde <memset1+0x1a>
    }
}
 8018ff8:	46c0      	nop			; (mov r8, r8)
 8018ffa:	46c0      	nop			; (mov r8, r8)
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	b002      	add	sp, #8
 8019000:	bd80      	pop	{r7, pc}
	...

08019004 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 8019004:	b590      	push	{r4, r7, lr}
 8019006:	b087      	sub	sp, #28
 8019008:	af02      	add	r7, sp, #8
 801900a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 801900c:	4b34      	ldr	r3, [pc, #208]	; (80190e0 <SX1276Init+0xdc>)
 801900e:	687a      	ldr	r2, [r7, #4]
 8019010:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8019012:	4b34      	ldr	r3, [pc, #208]	; (80190e4 <SX1276Init+0xe0>)
 8019014:	2201      	movs	r2, #1
 8019016:	4251      	negs	r1, r2
 8019018:	4833      	ldr	r0, [pc, #204]	; (80190e8 <SX1276Init+0xe4>)
 801901a:	2200      	movs	r2, #0
 801901c:	9200      	str	r2, [sp, #0]
 801901e:	2200      	movs	r2, #0
 8019020:	f003 fa5a 	bl	801c4d8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8019024:	4b2f      	ldr	r3, [pc, #188]	; (80190e4 <SX1276Init+0xe0>)
 8019026:	2201      	movs	r2, #1
 8019028:	4251      	negs	r1, r2
 801902a:	4830      	ldr	r0, [pc, #192]	; (80190ec <SX1276Init+0xe8>)
 801902c:	2200      	movs	r2, #0
 801902e:	9200      	str	r2, [sp, #0]
 8019030:	2200      	movs	r2, #0
 8019032:	f003 fa51 	bl	801c4d8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8019036:	4b2b      	ldr	r3, [pc, #172]	; (80190e4 <SX1276Init+0xe0>)
 8019038:	2201      	movs	r2, #1
 801903a:	4251      	negs	r1, r2
 801903c:	482c      	ldr	r0, [pc, #176]	; (80190f0 <SX1276Init+0xec>)
 801903e:	2200      	movs	r2, #0
 8019040:	9200      	str	r2, [sp, #0]
 8019042:	2200      	movs	r2, #0
 8019044:	f003 fa48 	bl	801c4d8 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 8019048:	2001      	movs	r0, #1
 801904a:	f7ec f94b 	bl	80052e4 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 801904e:	f001 fbbb 	bl	801a7c8 <SX1276Reset>

    RxChainCalibration( );
 8019052:	f000 f937 	bl	80192c4 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8019056:	2000      	movs	r0, #0
 8019058:	f001 fbbd 	bl	801a7d6 <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 801905c:	4b25      	ldr	r3, [pc, #148]	; (80190f4 <SX1276Init+0xf0>)
 801905e:	0018      	movs	r0, r3
 8019060:	f7ec faa0 	bl	80055a4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019064:	230f      	movs	r3, #15
 8019066:	18fb      	adds	r3, r7, r3
 8019068:	2200      	movs	r2, #0
 801906a:	701a      	strb	r2, [r3, #0]
 801906c:	e025      	b.n	80190ba <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 801906e:	240f      	movs	r4, #15
 8019070:	193b      	adds	r3, r7, r4
 8019072:	781a      	ldrb	r2, [r3, #0]
 8019074:	4920      	ldr	r1, [pc, #128]	; (80190f8 <SX1276Init+0xf4>)
 8019076:	0013      	movs	r3, r2
 8019078:	005b      	lsls	r3, r3, #1
 801907a:	189b      	adds	r3, r3, r2
 801907c:	5c5b      	ldrb	r3, [r3, r1]
 801907e:	0018      	movs	r0, r3
 8019080:	f001 fc16 	bl	801a8b0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8019084:	193b      	adds	r3, r7, r4
 8019086:	781a      	ldrb	r2, [r3, #0]
 8019088:	491b      	ldr	r1, [pc, #108]	; (80190f8 <SX1276Init+0xf4>)
 801908a:	0013      	movs	r3, r2
 801908c:	005b      	lsls	r3, r3, #1
 801908e:	189b      	adds	r3, r3, r2
 8019090:	18cb      	adds	r3, r1, r3
 8019092:	3301      	adds	r3, #1
 8019094:	781b      	ldrb	r3, [r3, #0]
 8019096:	0018      	movs	r0, r3
 8019098:	193b      	adds	r3, r7, r4
 801909a:	781a      	ldrb	r2, [r3, #0]
 801909c:	4916      	ldr	r1, [pc, #88]	; (80190f8 <SX1276Init+0xf4>)
 801909e:	0013      	movs	r3, r2
 80190a0:	005b      	lsls	r3, r3, #1
 80190a2:	189b      	adds	r3, r3, r2
 80190a4:	18cb      	adds	r3, r1, r3
 80190a6:	3302      	adds	r3, #2
 80190a8:	781b      	ldrb	r3, [r3, #0]
 80190aa:	0019      	movs	r1, r3
 80190ac:	f001 fc5a 	bl	801a964 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80190b0:	193b      	adds	r3, r7, r4
 80190b2:	781a      	ldrb	r2, [r3, #0]
 80190b4:	193b      	adds	r3, r7, r4
 80190b6:	3201      	adds	r2, #1
 80190b8:	701a      	strb	r2, [r3, #0]
 80190ba:	230f      	movs	r3, #15
 80190bc:	18fb      	adds	r3, r7, r3
 80190be:	781b      	ldrb	r3, [r3, #0]
 80190c0:	2b0f      	cmp	r3, #15
 80190c2:	d9d4      	bls.n	801906e <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 80190c4:	2000      	movs	r0, #0
 80190c6:	f001 fbf3 	bl	801a8b0 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 80190ca:	4b0c      	ldr	r3, [pc, #48]	; (80190fc <SX1276Init+0xf8>)
 80190cc:	2200      	movs	r2, #0
 80190ce:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80190d0:	f7ec f902 	bl	80052d8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 80190d4:	0003      	movs	r3, r0
 80190d6:	3302      	adds	r3, #2
}
 80190d8:	0018      	movs	r0, r3
 80190da:	46bd      	mov	sp, r7
 80190dc:	b005      	add	sp, #20
 80190de:	bd90      	pop	{r4, r7, pc}
 80190e0:	20001480 	.word	0x20001480
 80190e4:	0801addd 	.word	0x0801addd
 80190e8:	200015ec 	.word	0x200015ec
 80190ec:	20001604 	.word	0x20001604
 80190f0:	2000161c 	.word	0x2000161c
 80190f4:	200001f4 	.word	0x200001f4
 80190f8:	0801ece4 	.word	0x0801ece4
 80190fc:	20001584 	.word	0x20001584

08019100 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8019100:	b580      	push	{r7, lr}
 8019102:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8019104:	4b02      	ldr	r3, [pc, #8]	; (8019110 <SX1276GetStatus+0x10>)
 8019106:	791b      	ldrb	r3, [r3, #4]
}
 8019108:	0018      	movs	r0, r3
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
 801910e:	46c0      	nop			; (mov r8, r8)
 8019110:	20001584 	.word	0x20001584

08019114 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8019114:	b590      	push	{r4, r7, lr}
 8019116:	b087      	sub	sp, #28
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 801911c:	4b1d      	ldr	r3, [pc, #116]	; (8019194 <SX1276SetChannel+0x80>)
 801911e:	687a      	ldr	r2, [r7, #4]
 8019120:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	491c      	ldr	r1, [pc, #112]	; (8019198 <SX1276SetChannel+0x84>)
 8019126:	0018      	movs	r0, r3
 8019128:	f7e6 fff6 	bl	8000118 <__udivsi3>
 801912c:	0003      	movs	r3, r0
 801912e:	617b      	str	r3, [r7, #20]
 8019130:	6979      	ldr	r1, [r7, #20]
 8019132:	000b      	movs	r3, r1
 8019134:	015b      	lsls	r3, r3, #5
 8019136:	1a5b      	subs	r3, r3, r1
 8019138:	019a      	lsls	r2, r3, #6
 801913a:	1ad2      	subs	r2, r2, r3
 801913c:	00d2      	lsls	r2, r2, #3
 801913e:	1853      	adds	r3, r2, r1
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	1ad3      	subs	r3, r2, r3
 8019144:	613b      	str	r3, [r7, #16]
 8019146:	697b      	ldr	r3, [r7, #20]
 8019148:	021c      	lsls	r4, r3, #8
 801914a:	693b      	ldr	r3, [r7, #16]
 801914c:	021b      	lsls	r3, r3, #8
 801914e:	4a13      	ldr	r2, [pc, #76]	; (801919c <SX1276SetChannel+0x88>)
 8019150:	4694      	mov	ip, r2
 8019152:	4463      	add	r3, ip
 8019154:	4910      	ldr	r1, [pc, #64]	; (8019198 <SX1276SetChannel+0x84>)
 8019156:	0018      	movs	r0, r3
 8019158:	f7e6 ffde 	bl	8000118 <__udivsi3>
 801915c:	0003      	movs	r3, r0
 801915e:	18e3      	adds	r3, r4, r3
 8019160:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	0c1b      	lsrs	r3, r3, #16
 8019166:	b2db      	uxtb	r3, r3
 8019168:	0019      	movs	r1, r3
 801916a:	2006      	movs	r0, #6
 801916c:	f001 fbfa 	bl	801a964 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	0a1b      	lsrs	r3, r3, #8
 8019174:	b2db      	uxtb	r3, r3
 8019176:	0019      	movs	r1, r3
 8019178:	2007      	movs	r0, #7
 801917a:	f001 fbf3 	bl	801a964 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	b2db      	uxtb	r3, r3
 8019182:	0019      	movs	r1, r3
 8019184:	2008      	movs	r0, #8
 8019186:	f001 fbed 	bl	801a964 <SX1276Write>
}
 801918a:	46c0      	nop			; (mov r8, r8)
 801918c:	46bd      	mov	sp, r7
 801918e:	b007      	add	sp, #28
 8019190:	bd90      	pop	{r4, r7, pc}
 8019192:	46c0      	nop			; (mov r8, r8)
 8019194:	20001584 	.word	0x20001584
 8019198:	00003d09 	.word	0x00003d09
 801919c:	00001e84 	.word	0x00001e84

080191a0 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80191a0:	b5b0      	push	{r4, r5, r7, lr}
 80191a2:	b086      	sub	sp, #24
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	60f8      	str	r0, [r7, #12]
 80191a8:	60b9      	str	r1, [r7, #8]
 80191aa:	603b      	str	r3, [r7, #0]
 80191ac:	1dbb      	adds	r3, r7, #6
 80191ae:	801a      	strh	r2, [r3, #0]
    bool status = true;
 80191b0:	2317      	movs	r3, #23
 80191b2:	18fb      	adds	r3, r7, r3
 80191b4:	2201      	movs	r2, #1
 80191b6:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 80191b8:	2314      	movs	r3, #20
 80191ba:	18fb      	adds	r3, r7, r3
 80191bc:	2200      	movs	r2, #0
 80191be:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 80191c0:	2300      	movs	r3, #0
 80191c2:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 80191c4:	f000 ffd6 	bl	801a174 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 80191c8:	2000      	movs	r0, #0
 80191ca:	f001 fb71 	bl	801a8b0 <SX1276SetModem>

    SX1276SetChannel( freq );
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	0018      	movs	r0, r3
 80191d2:	f7ff ff9f 	bl	8019114 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80191d6:	68bb      	ldr	r3, [r7, #8]
 80191d8:	0018      	movs	r0, r3
 80191da:	f001 fcd1 	bl	801ab80 <GetFskBandwidthRegValue>
 80191de:	0003      	movs	r3, r0
 80191e0:	0019      	movs	r1, r3
 80191e2:	2012      	movs	r0, #18
 80191e4:	f001 fbbe 	bl	801a964 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80191e8:	68bb      	ldr	r3, [r7, #8]
 80191ea:	0018      	movs	r0, r3
 80191ec:	f001 fcc8 	bl	801ab80 <GetFskBandwidthRegValue>
 80191f0:	0003      	movs	r3, r0
 80191f2:	0019      	movs	r1, r3
 80191f4:	2013      	movs	r0, #19
 80191f6:	f001 fbb5 	bl	801a964 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80191fa:	2005      	movs	r0, #5
 80191fc:	f001 faeb 	bl	801a7d6 <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 8019200:	2001      	movs	r0, #1
 8019202:	f7eb fa40 	bl	8004686 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019206:	f003 fb47 	bl	801c898 <UTIL_TIMER_GetCurrentTime>
 801920a:	0003      	movs	r3, r0
 801920c:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801920e:	e013      	b.n	8019238 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 8019210:	2514      	movs	r5, #20
 8019212:	197c      	adds	r4, r7, r5
 8019214:	2000      	movs	r0, #0
 8019216:	f001 fa8b 	bl	801a730 <SX1276ReadRssi>
 801921a:	0003      	movs	r3, r0
 801921c:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 801921e:	197a      	adds	r2, r7, r5
 8019220:	1dbb      	adds	r3, r7, #6
 8019222:	2100      	movs	r1, #0
 8019224:	5e52      	ldrsh	r2, [r2, r1]
 8019226:	2100      	movs	r1, #0
 8019228:	5e5b      	ldrsh	r3, [r3, r1]
 801922a:	429a      	cmp	r2, r3
 801922c:	dd04      	ble.n	8019238 <SX1276IsChannelFree+0x98>
        {
            status = false;
 801922e:	2317      	movs	r3, #23
 8019230:	18fb      	adds	r3, r7, r3
 8019232:	2200      	movs	r2, #0
 8019234:	701a      	strb	r2, [r3, #0]
            break;
 8019236:	e007      	b.n	8019248 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019238:	693b      	ldr	r3, [r7, #16]
 801923a:	0018      	movs	r0, r3
 801923c:	f003 fb40 	bl	801c8c0 <UTIL_TIMER_GetElapsedTime>
 8019240:	0002      	movs	r2, r0
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	4293      	cmp	r3, r2
 8019246:	d8e3      	bhi.n	8019210 <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 8019248:	f000 ff94 	bl	801a174 <SX1276SetSleep>
    return status;
 801924c:	2317      	movs	r3, #23
 801924e:	18fb      	adds	r3, r7, r3
 8019250:	781b      	ldrb	r3, [r3, #0]
}
 8019252:	0018      	movs	r0, r3
 8019254:	46bd      	mov	sp, r7
 8019256:	b006      	add	sp, #24
 8019258:	bdb0      	pop	{r4, r5, r7, pc}

0801925a <SX1276Random>:

uint32_t SX1276Random( void )
{
 801925a:	b580      	push	{r7, lr}
 801925c:	b082      	sub	sp, #8
 801925e:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8019260:	2300      	movs	r3, #0
 8019262:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8019264:	2001      	movs	r0, #1
 8019266:	f001 fb23 	bl	801a8b0 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801926a:	21ff      	movs	r1, #255	; 0xff
 801926c:	2011      	movs	r0, #17
 801926e:	f001 fb79 	bl	801a964 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8019272:	2005      	movs	r0, #5
 8019274:	f001 faaf 	bl	801a7d6 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8019278:	1dfb      	adds	r3, r7, #7
 801927a:	2200      	movs	r2, #0
 801927c:	701a      	strb	r2, [r3, #0]
 801927e:	e015      	b.n	80192ac <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 8019280:	2001      	movs	r0, #1
 8019282:	f7eb fa00 	bl	8004686 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8019286:	202c      	movs	r0, #44	; 0x2c
 8019288:	f001 fb7d 	bl	801a986 <SX1276Read>
 801928c:	0003      	movs	r3, r0
 801928e:	001a      	movs	r2, r3
 8019290:	2301      	movs	r3, #1
 8019292:	401a      	ands	r2, r3
 8019294:	1dfb      	adds	r3, r7, #7
 8019296:	781b      	ldrb	r3, [r3, #0]
 8019298:	409a      	lsls	r2, r3
 801929a:	0013      	movs	r3, r2
 801929c:	683a      	ldr	r2, [r7, #0]
 801929e:	4313      	orrs	r3, r2
 80192a0:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80192a2:	1dfb      	adds	r3, r7, #7
 80192a4:	781a      	ldrb	r2, [r3, #0]
 80192a6:	1dfb      	adds	r3, r7, #7
 80192a8:	3201      	adds	r2, #1
 80192aa:	701a      	strb	r2, [r3, #0]
 80192ac:	1dfb      	adds	r3, r7, #7
 80192ae:	781b      	ldrb	r3, [r3, #0]
 80192b0:	2b1f      	cmp	r3, #31
 80192b2:	d9e5      	bls.n	8019280 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 80192b4:	f000 ff5e 	bl	801a174 <SX1276SetSleep>

    return rnd;
 80192b8:	683b      	ldr	r3, [r7, #0]
}
 80192ba:	0018      	movs	r0, r3
 80192bc:	46bd      	mov	sp, r7
 80192be:	b002      	add	sp, #8
 80192c0:	bd80      	pop	{r7, pc}
	...

080192c4 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 80192c4:	b590      	push	{r4, r7, lr}
 80192c6:	b087      	sub	sp, #28
 80192c8:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80192ca:	2317      	movs	r3, #23
 80192cc:	18fc      	adds	r4, r7, r3
 80192ce:	2009      	movs	r0, #9
 80192d0:	f001 fb59 	bl	801a986 <SX1276Read>
 80192d4:	0003      	movs	r3, r0
 80192d6:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80192d8:	2006      	movs	r0, #6
 80192da:	f001 fb54 	bl	801a986 <SX1276Read>
 80192de:	0003      	movs	r3, r0
 80192e0:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80192e2:	2007      	movs	r0, #7
 80192e4:	f001 fb4f 	bl	801a986 <SX1276Read>
 80192e8:	0003      	movs	r3, r0
 80192ea:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80192ec:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80192ee:	2008      	movs	r0, #8
 80192f0:	f001 fb49 	bl	801a986 <SX1276Read>
 80192f4:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80192f6:	4323      	orrs	r3, r4
 80192f8:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80192fa:	693b      	ldr	r3, [r7, #16]
 80192fc:	0a1b      	lsrs	r3, r3, #8
 80192fe:	60fb      	str	r3, [r7, #12]
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	021b      	lsls	r3, r3, #8
 8019304:	693a      	ldr	r2, [r7, #16]
 8019306:	1ad3      	subs	r3, r2, r3
 8019308:	60bb      	str	r3, [r7, #8]
 801930a:	68f9      	ldr	r1, [r7, #12]
 801930c:	000b      	movs	r3, r1
 801930e:	015b      	lsls	r3, r3, #5
 8019310:	1a5b      	subs	r3, r3, r1
 8019312:	019a      	lsls	r2, r3, #6
 8019314:	1ad2      	subs	r2, r2, r3
 8019316:	00d2      	lsls	r2, r2, #3
 8019318:	1850      	adds	r0, r2, r1
 801931a:	68b9      	ldr	r1, [r7, #8]
 801931c:	000b      	movs	r3, r1
 801931e:	015b      	lsls	r3, r3, #5
 8019320:	1a5b      	subs	r3, r3, r1
 8019322:	019a      	lsls	r2, r3, #6
 8019324:	1ad2      	subs	r2, r2, r3
 8019326:	00d2      	lsls	r2, r2, #3
 8019328:	1853      	adds	r3, r2, r1
 801932a:	3380      	adds	r3, #128	; 0x80
 801932c:	0a1b      	lsrs	r3, r3, #8
 801932e:	18c3      	adds	r3, r0, r3
 8019330:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8019332:	2100      	movs	r1, #0
 8019334:	2009      	movs	r0, #9
 8019336:	f001 fb15 	bl	801a964 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801933a:	203b      	movs	r0, #59	; 0x3b
 801933c:	f001 fb23 	bl	801a986 <SX1276Read>
 8019340:	0003      	movs	r3, r0
 8019342:	001a      	movs	r2, r3
 8019344:	2340      	movs	r3, #64	; 0x40
 8019346:	4313      	orrs	r3, r2
 8019348:	b2db      	uxtb	r3, r3
 801934a:	0019      	movs	r1, r3
 801934c:	203b      	movs	r0, #59	; 0x3b
 801934e:	f001 fb09 	bl	801a964 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019352:	46c0      	nop			; (mov r8, r8)
 8019354:	203b      	movs	r0, #59	; 0x3b
 8019356:	f001 fb16 	bl	801a986 <SX1276Read>
 801935a:	0003      	movs	r3, r0
 801935c:	001a      	movs	r2, r3
 801935e:	2320      	movs	r3, #32
 8019360:	4013      	ands	r3, r2
 8019362:	2b20      	cmp	r3, #32
 8019364:	d0f6      	beq.n	8019354 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8019366:	4b14      	ldr	r3, [pc, #80]	; (80193b8 <RxChainCalibration+0xf4>)
 8019368:	0018      	movs	r0, r3
 801936a:	f7ff fed3 	bl	8019114 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801936e:	203b      	movs	r0, #59	; 0x3b
 8019370:	f001 fb09 	bl	801a986 <SX1276Read>
 8019374:	0003      	movs	r3, r0
 8019376:	001a      	movs	r2, r3
 8019378:	2340      	movs	r3, #64	; 0x40
 801937a:	4313      	orrs	r3, r2
 801937c:	b2db      	uxtb	r3, r3
 801937e:	0019      	movs	r1, r3
 8019380:	203b      	movs	r0, #59	; 0x3b
 8019382:	f001 faef 	bl	801a964 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019386:	46c0      	nop			; (mov r8, r8)
 8019388:	203b      	movs	r0, #59	; 0x3b
 801938a:	f001 fafc 	bl	801a986 <SX1276Read>
 801938e:	0003      	movs	r3, r0
 8019390:	001a      	movs	r2, r3
 8019392:	2320      	movs	r3, #32
 8019394:	4013      	ands	r3, r2
 8019396:	2b20      	cmp	r3, #32
 8019398:	d0f6      	beq.n	8019388 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 801939a:	2317      	movs	r3, #23
 801939c:	18fb      	adds	r3, r7, r3
 801939e:	781b      	ldrb	r3, [r3, #0]
 80193a0:	0019      	movs	r1, r3
 80193a2:	2009      	movs	r0, #9
 80193a4:	f001 fade 	bl	801a964 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	0018      	movs	r0, r3
 80193ac:	f7ff feb2 	bl	8019114 <SX1276SetChannel>
}
 80193b0:	46c0      	nop			; (mov r8, r8)
 80193b2:	46bd      	mov	sp, r7
 80193b4:	b007      	add	sp, #28
 80193b6:	bd90      	pop	{r4, r7, pc}
 80193b8:	33bca100 	.word	0x33bca100

080193bc <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 80193bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193be:	b085      	sub	sp, #20
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	60b9      	str	r1, [r7, #8]
 80193c4:	607a      	str	r2, [r7, #4]
 80193c6:	0019      	movs	r1, r3
 80193c8:	240f      	movs	r4, #15
 80193ca:	193b      	adds	r3, r7, r4
 80193cc:	1c02      	adds	r2, r0, #0
 80193ce:	701a      	strb	r2, [r3, #0]
 80193d0:	230e      	movs	r3, #14
 80193d2:	18fb      	adds	r3, r7, r3
 80193d4:	1c0a      	adds	r2, r1, #0
 80193d6:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 80193d8:	193b      	adds	r3, r7, r4
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	0018      	movs	r0, r3
 80193de:	f001 fa67 	bl	801a8b0 <SX1276SetModem>

    switch( modem )
 80193e2:	193b      	adds	r3, r7, r4
 80193e4:	781b      	ldrb	r3, [r3, #0]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d003      	beq.n	80193f2 <SX1276SetRxConfig+0x36>
 80193ea:	2b01      	cmp	r3, #1
 80193ec:	d100      	bne.n	80193f0 <SX1276SetRxConfig+0x34>
 80193ee:	e0ef      	b.n	80195d0 <SX1276SetRxConfig+0x214>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80193f0:	e250      	b.n	8019894 <SX1276SetRxConfig+0x4d8>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80193f2:	4bb0      	ldr	r3, [pc, #704]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 80193f4:	68ba      	ldr	r2, [r7, #8]
 80193f6:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80193f8:	4bae      	ldr	r3, [pc, #696]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 80193fa:	687a      	ldr	r2, [r7, #4]
 80193fc:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80193fe:	4bad      	ldr	r3, [pc, #692]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019402:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019404:	4bab      	ldr	r3, [pc, #684]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019406:	222c      	movs	r2, #44	; 0x2c
 8019408:	2508      	movs	r5, #8
 801940a:	1952      	adds	r2, r2, r5
 801940c:	19d2      	adds	r2, r2, r7
 801940e:	2122      	movs	r1, #34	; 0x22
 8019410:	7812      	ldrb	r2, [r2, #0]
 8019412:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8019414:	4ba7      	ldr	r3, [pc, #668]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019416:	2130      	movs	r1, #48	; 0x30
 8019418:	194a      	adds	r2, r1, r5
 801941a:	19d2      	adds	r2, r2, r7
 801941c:	2123      	movs	r1, #35	; 0x23
 801941e:	7812      	ldrb	r2, [r2, #0]
 8019420:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019422:	4ba4      	ldr	r3, [pc, #656]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019424:	2034      	movs	r0, #52	; 0x34
 8019426:	1942      	adds	r2, r0, r5
 8019428:	19d2      	adds	r2, r2, r7
 801942a:	2124      	movs	r1, #36	; 0x24
 801942c:	7812      	ldrb	r2, [r2, #0]
 801942e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019430:	4ba0      	ldr	r3, [pc, #640]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019432:	2220      	movs	r2, #32
 8019434:	2020      	movs	r0, #32
 8019436:	1814      	adds	r4, r2, r0
 8019438:	197a      	adds	r2, r7, r5
 801943a:	18a2      	adds	r2, r4, r2
 801943c:	2125      	movs	r1, #37	; 0x25
 801943e:	7812      	ldrb	r2, [r2, #0]
 8019440:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8019442:	4b9c      	ldr	r3, [pc, #624]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019444:	2224      	movs	r2, #36	; 0x24
 8019446:	1810      	adds	r0, r2, r0
 8019448:	002c      	movs	r4, r5
 801944a:	193a      	adds	r2, r7, r4
 801944c:	1882      	adds	r2, r0, r2
 801944e:	2126      	movs	r1, #38	; 0x26
 8019450:	7812      	ldrb	r2, [r2, #0]
 8019452:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019454:	4b97      	ldr	r3, [pc, #604]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019456:	2624      	movs	r6, #36	; 0x24
 8019458:	1932      	adds	r2, r6, r4
 801945a:	19d2      	adds	r2, r2, r7
 801945c:	8812      	ldrh	r2, [r2, #0]
 801945e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8019460:	2328      	movs	r3, #40	; 0x28
 8019462:	191b      	adds	r3, r3, r4
 8019464:	19db      	adds	r3, r3, r7
 8019466:	881b      	ldrh	r3, [r3, #0]
 8019468:	0018      	movs	r0, r3
 801946a:	f7e9 f8e5 	bl	8002638 <__aeabi_i2d>
 801946e:	0004      	movs	r4, r0
 8019470:	000d      	movs	r5, r1
 8019472:	6878      	ldr	r0, [r7, #4]
 8019474:	f7e9 f910 	bl	8002698 <__aeabi_ui2d>
 8019478:	0002      	movs	r2, r0
 801947a:	000b      	movs	r3, r1
 801947c:	2000      	movs	r0, #0
 801947e:	498e      	ldr	r1, [pc, #568]	; (80196b8 <SX1276SetRxConfig+0x2fc>)
 8019480:	f7e7 fea4 	bl	80011cc <__aeabi_ddiv>
 8019484:	0002      	movs	r2, r0
 8019486:	000b      	movs	r3, r1
 8019488:	0010      	movs	r0, r2
 801948a:	0019      	movs	r1, r3
 801948c:	2200      	movs	r2, #0
 801948e:	4b8b      	ldr	r3, [pc, #556]	; (80196bc <SX1276SetRxConfig+0x300>)
 8019490:	f7e8 fa9e 	bl	80019d0 <__aeabi_dmul>
 8019494:	0002      	movs	r2, r0
 8019496:	000b      	movs	r3, r1
 8019498:	0020      	movs	r0, r4
 801949a:	0029      	movs	r1, r5
 801949c:	f7e8 fa98 	bl	80019d0 <__aeabi_dmul>
 80194a0:	0002      	movs	r2, r0
 80194a2:	000b      	movs	r3, r1
 80194a4:	0010      	movs	r0, r2
 80194a6:	0019      	movs	r1, r3
 80194a8:	2200      	movs	r2, #0
 80194aa:	4b85      	ldr	r3, [pc, #532]	; (80196c0 <SX1276SetRxConfig+0x304>)
 80194ac:	f7e8 fa90 	bl	80019d0 <__aeabi_dmul>
 80194b0:	0002      	movs	r2, r0
 80194b2:	000b      	movs	r3, r1
 80194b4:	0010      	movs	r0, r2
 80194b6:	0019      	movs	r1, r3
 80194b8:	f7e7 f854 	bl	8000564 <__aeabi_d2uiz>
 80194bc:	0002      	movs	r2, r0
 80194be:	4b7d      	ldr	r3, [pc, #500]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 80194c0:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f7e9 f8e8 	bl	8002698 <__aeabi_ui2d>
 80194c8:	0002      	movs	r2, r0
 80194ca:	000b      	movs	r3, r1
 80194cc:	2000      	movs	r0, #0
 80194ce:	497d      	ldr	r1, [pc, #500]	; (80196c4 <SX1276SetRxConfig+0x308>)
 80194d0:	f7e7 fe7c 	bl	80011cc <__aeabi_ddiv>
 80194d4:	0002      	movs	r2, r0
 80194d6:	000b      	movs	r3, r1
 80194d8:	0010      	movs	r0, r2
 80194da:	0019      	movs	r1, r3
 80194dc:	f7e7 f842 	bl	8000564 <__aeabi_d2uiz>
 80194e0:	0003      	movs	r3, r0
 80194e2:	b29b      	uxth	r3, r3
 80194e4:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	0a1b      	lsrs	r3, r3, #8
 80194ea:	b2db      	uxtb	r3, r3
 80194ec:	0019      	movs	r1, r3
 80194ee:	2002      	movs	r0, #2
 80194f0:	f001 fa38 	bl	801a964 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	0019      	movs	r1, r3
 80194fa:	2003      	movs	r0, #3
 80194fc:	f001 fa32 	bl	801a964 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8019500:	68bb      	ldr	r3, [r7, #8]
 8019502:	0018      	movs	r0, r3
 8019504:	f001 fb3c 	bl	801ab80 <GetFskBandwidthRegValue>
 8019508:	0003      	movs	r3, r0
 801950a:	0019      	movs	r1, r3
 801950c:	2012      	movs	r0, #18
 801950e:	f001 fa29 	bl	801a964 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8019512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019514:	0018      	movs	r0, r3
 8019516:	f001 fb33 	bl	801ab80 <GetFskBandwidthRegValue>
 801951a:	0003      	movs	r3, r0
 801951c:	0019      	movs	r1, r3
 801951e:	2013      	movs	r0, #19
 8019520:	f001 fa20 	bl	801a964 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019524:	2408      	movs	r4, #8
 8019526:	1933      	adds	r3, r6, r4
 8019528:	19db      	adds	r3, r3, r7
 801952a:	881b      	ldrh	r3, [r3, #0]
 801952c:	0a1b      	lsrs	r3, r3, #8
 801952e:	b29b      	uxth	r3, r3
 8019530:	b2db      	uxtb	r3, r3
 8019532:	0019      	movs	r1, r3
 8019534:	2025      	movs	r0, #37	; 0x25
 8019536:	f001 fa15 	bl	801a964 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801953a:	1933      	adds	r3, r6, r4
 801953c:	19db      	adds	r3, r3, r7
 801953e:	881b      	ldrh	r3, [r3, #0]
 8019540:	b2db      	uxtb	r3, r3
 8019542:	0019      	movs	r1, r3
 8019544:	2026      	movs	r0, #38	; 0x26
 8019546:	f001 fa0d 	bl	801a964 <SX1276Write>
            if( fixLen == 1 )
 801954a:	222c      	movs	r2, #44	; 0x2c
 801954c:	1913      	adds	r3, r2, r4
 801954e:	19db      	adds	r3, r3, r7
 8019550:	781b      	ldrb	r3, [r3, #0]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d008      	beq.n	8019568 <SX1276SetRxConfig+0x1ac>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8019556:	2130      	movs	r1, #48	; 0x30
 8019558:	190b      	adds	r3, r1, r4
 801955a:	19db      	adds	r3, r3, r7
 801955c:	781b      	ldrb	r3, [r3, #0]
 801955e:	0019      	movs	r1, r3
 8019560:	2032      	movs	r0, #50	; 0x32
 8019562:	f001 f9ff 	bl	801a964 <SX1276Write>
 8019566:	e003      	b.n	8019570 <SX1276SetRxConfig+0x1b4>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8019568:	21ff      	movs	r1, #255	; 0xff
 801956a:	2032      	movs	r0, #50	; 0x32
 801956c:	f001 f9fa 	bl	801a964 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019570:	2030      	movs	r0, #48	; 0x30
 8019572:	f001 fa08 	bl	801a986 <SX1276Read>
 8019576:	0003      	movs	r3, r0
 8019578:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801957a:	226f      	movs	r2, #111	; 0x6f
 801957c:	4013      	ands	r3, r2
 801957e:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019580:	232c      	movs	r3, #44	; 0x2c
 8019582:	2108      	movs	r1, #8
 8019584:	185b      	adds	r3, r3, r1
 8019586:	19db      	adds	r3, r3, r7
 8019588:	781b      	ldrb	r3, [r3, #0]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d001      	beq.n	8019592 <SX1276SetRxConfig+0x1d6>
 801958e:	2300      	movs	r3, #0
 8019590:	e001      	b.n	8019596 <SX1276SetRxConfig+0x1da>
 8019592:	2380      	movs	r3, #128	; 0x80
 8019594:	425b      	negs	r3, r3
 8019596:	4313      	orrs	r3, r2
 8019598:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801959a:	2334      	movs	r3, #52	; 0x34
 801959c:	2108      	movs	r1, #8
 801959e:	185b      	adds	r3, r3, r1
 80195a0:	19db      	adds	r3, r3, r7
 80195a2:	781b      	ldrb	r3, [r3, #0]
 80195a4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80195a6:	b25b      	sxtb	r3, r3
 80195a8:	4313      	orrs	r3, r2
 80195aa:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80195ac:	b2db      	uxtb	r3, r3
 80195ae:	0019      	movs	r1, r3
 80195b0:	2030      	movs	r0, #48	; 0x30
 80195b2:	f001 f9d7 	bl	801a964 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80195b6:	2031      	movs	r0, #49	; 0x31
 80195b8:	f001 f9e5 	bl	801a986 <SX1276Read>
 80195bc:	0003      	movs	r3, r0
 80195be:	001a      	movs	r2, r3
 80195c0:	2340      	movs	r3, #64	; 0x40
 80195c2:	4313      	orrs	r3, r2
 80195c4:	b2db      	uxtb	r3, r3
 80195c6:	0019      	movs	r1, r3
 80195c8:	2031      	movs	r0, #49	; 0x31
 80195ca:	f001 f9cb 	bl	801a964 <SX1276Write>
        break;
 80195ce:	e161      	b.n	8019894 <SX1276SetRxConfig+0x4d8>
            if( bandwidth > 2 )
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	2b02      	cmp	r3, #2
 80195d4:	d900      	bls.n	80195d8 <SX1276SetRxConfig+0x21c>
                while( 1 );
 80195d6:	e7fe      	b.n	80195d6 <SX1276SetRxConfig+0x21a>
            bandwidth += 7;
 80195d8:	68bb      	ldr	r3, [r7, #8]
 80195da:	3307      	adds	r3, #7
 80195dc:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80195de:	4b35      	ldr	r3, [pc, #212]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 80195e0:	68ba      	ldr	r2, [r7, #8]
 80195e2:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80195e4:	4b33      	ldr	r3, [pc, #204]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 80195e6:	687a      	ldr	r2, [r7, #4]
 80195e8:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80195ea:	4b32      	ldr	r3, [pc, #200]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 80195ec:	220e      	movs	r2, #14
 80195ee:	18ba      	adds	r2, r7, r2
 80195f0:	214d      	movs	r1, #77	; 0x4d
 80195f2:	7812      	ldrb	r2, [r2, #0]
 80195f4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80195f6:	4b2f      	ldr	r3, [pc, #188]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 80195f8:	2224      	movs	r2, #36	; 0x24
 80195fa:	2008      	movs	r0, #8
 80195fc:	1812      	adds	r2, r2, r0
 80195fe:	19d2      	adds	r2, r2, r7
 8019600:	214e      	movs	r1, #78	; 0x4e
 8019602:	8812      	ldrh	r2, [r2, #0]
 8019604:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019606:	4b2b      	ldr	r3, [pc, #172]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019608:	222c      	movs	r2, #44	; 0x2c
 801960a:	1812      	adds	r2, r2, r0
 801960c:	19d2      	adds	r2, r2, r7
 801960e:	2150      	movs	r1, #80	; 0x50
 8019610:	7812      	ldrb	r2, [r2, #0]
 8019612:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8019614:	4b27      	ldr	r3, [pc, #156]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019616:	2230      	movs	r2, #48	; 0x30
 8019618:	1812      	adds	r2, r2, r0
 801961a:	19d2      	adds	r2, r2, r7
 801961c:	2151      	movs	r1, #81	; 0x51
 801961e:	7812      	ldrb	r2, [r2, #0]
 8019620:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019622:	4b24      	ldr	r3, [pc, #144]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019624:	2234      	movs	r2, #52	; 0x34
 8019626:	1812      	adds	r2, r2, r0
 8019628:	19d2      	adds	r2, r2, r7
 801962a:	2152      	movs	r1, #82	; 0x52
 801962c:	7812      	ldrb	r2, [r2, #0]
 801962e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019630:	4b20      	ldr	r3, [pc, #128]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019632:	2238      	movs	r2, #56	; 0x38
 8019634:	1812      	adds	r2, r2, r0
 8019636:	19d2      	adds	r2, r2, r7
 8019638:	2153      	movs	r1, #83	; 0x53
 801963a:	7812      	ldrb	r2, [r2, #0]
 801963c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801963e:	4b1d      	ldr	r3, [pc, #116]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019640:	223c      	movs	r2, #60	; 0x3c
 8019642:	1812      	adds	r2, r2, r0
 8019644:	19d2      	adds	r2, r2, r7
 8019646:	2154      	movs	r1, #84	; 0x54
 8019648:	7812      	ldrb	r2, [r2, #0]
 801964a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801964c:	4b19      	ldr	r3, [pc, #100]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 801964e:	2220      	movs	r2, #32
 8019650:	2020      	movs	r0, #32
 8019652:	1812      	adds	r2, r2, r0
 8019654:	2108      	movs	r1, #8
 8019656:	468c      	mov	ip, r1
 8019658:	44bc      	add	ip, r7
 801965a:	4462      	add	r2, ip
 801965c:	2155      	movs	r1, #85	; 0x55
 801965e:	7812      	ldrb	r2, [r2, #0]
 8019660:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019662:	4b14      	ldr	r3, [pc, #80]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 8019664:	2224      	movs	r2, #36	; 0x24
 8019666:	1812      	adds	r2, r2, r0
 8019668:	2108      	movs	r1, #8
 801966a:	468c      	mov	ip, r1
 801966c:	44bc      	add	ip, r7
 801966e:	4462      	add	r2, ip
 8019670:	2156      	movs	r1, #86	; 0x56
 8019672:	7812      	ldrb	r2, [r2, #0]
 8019674:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	2b0c      	cmp	r3, #12
 801967a:	d902      	bls.n	8019682 <SX1276SetRxConfig+0x2c6>
                datarate = 12;
 801967c:	230c      	movs	r3, #12
 801967e:	607b      	str	r3, [r7, #4]
 8019680:	e004      	b.n	801968c <SX1276SetRxConfig+0x2d0>
            else if( datarate < 6 )
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2b05      	cmp	r3, #5
 8019686:	d801      	bhi.n	801968c <SX1276SetRxConfig+0x2d0>
                datarate = 6;
 8019688:	2306      	movs	r3, #6
 801968a:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801968c:	68bb      	ldr	r3, [r7, #8]
 801968e:	2b07      	cmp	r3, #7
 8019690:	d105      	bne.n	801969e <SX1276SetRxConfig+0x2e2>
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	2b0b      	cmp	r3, #11
 8019696:	d008      	beq.n	80196aa <SX1276SetRxConfig+0x2ee>
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	2b0c      	cmp	r3, #12
 801969c:	d005      	beq.n	80196aa <SX1276SetRxConfig+0x2ee>
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	2b08      	cmp	r3, #8
 80196a2:	d111      	bne.n	80196c8 <SX1276SetRxConfig+0x30c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	2b0c      	cmp	r3, #12
 80196a8:	d10e      	bne.n	80196c8 <SX1276SetRxConfig+0x30c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80196aa:	4b02      	ldr	r3, [pc, #8]	; (80196b4 <SX1276SetRxConfig+0x2f8>)
 80196ac:	224c      	movs	r2, #76	; 0x4c
 80196ae:	2101      	movs	r1, #1
 80196b0:	5499      	strb	r1, [r3, r2]
 80196b2:	e00d      	b.n	80196d0 <SX1276SetRxConfig+0x314>
 80196b4:	20001584 	.word	0x20001584
 80196b8:	3ff00000 	.word	0x3ff00000
 80196bc:	40200000 	.word	0x40200000
 80196c0:	408f4000 	.word	0x408f4000
 80196c4:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80196c8:	4b74      	ldr	r3, [pc, #464]	; (801989c <SX1276SetRxConfig+0x4e0>)
 80196ca:	224c      	movs	r2, #76	; 0x4c
 80196cc:	2100      	movs	r1, #0
 80196ce:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80196d0:	201d      	movs	r0, #29
 80196d2:	f001 f958 	bl	801a986 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80196d6:	68bb      	ldr	r3, [r7, #8]
 80196d8:	b2db      	uxtb	r3, r3
 80196da:	011b      	lsls	r3, r3, #4
 80196dc:	b2da      	uxtb	r2, r3
 80196de:	230e      	movs	r3, #14
 80196e0:	18fb      	adds	r3, r7, r3
 80196e2:	781b      	ldrb	r3, [r3, #0]
 80196e4:	18db      	adds	r3, r3, r3
 80196e6:	b2db      	uxtb	r3, r3
 80196e8:	4313      	orrs	r3, r2
 80196ea:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80196ec:	242c      	movs	r4, #44	; 0x2c
 80196ee:	2608      	movs	r6, #8
 80196f0:	19a3      	adds	r3, r4, r6
 80196f2:	19db      	adds	r3, r3, r7
 80196f4:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80196f6:	4313      	orrs	r3, r2
 80196f8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80196fa:	0019      	movs	r1, r3
 80196fc:	201d      	movs	r0, #29
 80196fe:	f001 f931 	bl	801a964 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019702:	201e      	movs	r0, #30
 8019704:	f001 f93f 	bl	801a986 <SX1276Read>
 8019708:	0003      	movs	r3, r0
 801970a:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 801970c:	2308      	movs	r3, #8
 801970e:	4013      	ands	r3, r2
 8019710:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	b2db      	uxtb	r3, r3
 8019716:	011b      	lsls	r3, r3, #4
 8019718:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 801971a:	4313      	orrs	r3, r2
 801971c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801971e:	2334      	movs	r3, #52	; 0x34
 8019720:	199b      	adds	r3, r3, r6
 8019722:	19db      	adds	r3, r3, r7
 8019724:	781b      	ldrb	r3, [r3, #0]
 8019726:	009b      	lsls	r3, r3, #2
 8019728:	b2db      	uxtb	r3, r3
 801972a:	4313      	orrs	r3, r2
 801972c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 801972e:	2528      	movs	r5, #40	; 0x28
 8019730:	19ab      	adds	r3, r5, r6
 8019732:	19db      	adds	r3, r3, r7
 8019734:	881b      	ldrh	r3, [r3, #0]
 8019736:	0a1b      	lsrs	r3, r3, #8
 8019738:	b29b      	uxth	r3, r3
 801973a:	b2db      	uxtb	r3, r3
 801973c:	2103      	movs	r1, #3
 801973e:	400b      	ands	r3, r1
 8019740:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019742:	4313      	orrs	r3, r2
 8019744:	b2db      	uxtb	r3, r3
 8019746:	0019      	movs	r1, r3
 8019748:	201e      	movs	r0, #30
 801974a:	f001 f90b 	bl	801a964 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801974e:	2026      	movs	r0, #38	; 0x26
 8019750:	f001 f919 	bl	801a986 <SX1276Read>
 8019754:	0003      	movs	r3, r0
 8019756:	b25b      	sxtb	r3, r3
 8019758:	2208      	movs	r2, #8
 801975a:	4393      	bics	r3, r2
 801975c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801975e:	4b4f      	ldr	r3, [pc, #316]	; (801989c <SX1276SetRxConfig+0x4e0>)
 8019760:	214c      	movs	r1, #76	; 0x4c
 8019762:	5c5b      	ldrb	r3, [r3, r1]
 8019764:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019766:	b25b      	sxtb	r3, r3
 8019768:	4313      	orrs	r3, r2
 801976a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801976c:	b2db      	uxtb	r3, r3
 801976e:	0019      	movs	r1, r3
 8019770:	2026      	movs	r0, #38	; 0x26
 8019772:	f001 f8f7 	bl	801a964 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8019776:	19ab      	adds	r3, r5, r6
 8019778:	19db      	adds	r3, r3, r7
 801977a:	881b      	ldrh	r3, [r3, #0]
 801977c:	b2db      	uxtb	r3, r3
 801977e:	0019      	movs	r1, r3
 8019780:	201f      	movs	r0, #31
 8019782:	f001 f8ef 	bl	801a964 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019786:	2524      	movs	r5, #36	; 0x24
 8019788:	19ab      	adds	r3, r5, r6
 801978a:	19db      	adds	r3, r3, r7
 801978c:	881b      	ldrh	r3, [r3, #0]
 801978e:	0a1b      	lsrs	r3, r3, #8
 8019790:	b29b      	uxth	r3, r3
 8019792:	b2db      	uxtb	r3, r3
 8019794:	0019      	movs	r1, r3
 8019796:	2020      	movs	r0, #32
 8019798:	f001 f8e4 	bl	801a964 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801979c:	19ab      	adds	r3, r5, r6
 801979e:	19db      	adds	r3, r3, r7
 80197a0:	881b      	ldrh	r3, [r3, #0]
 80197a2:	b2db      	uxtb	r3, r3
 80197a4:	0019      	movs	r1, r3
 80197a6:	2021      	movs	r0, #33	; 0x21
 80197a8:	f001 f8dc 	bl	801a964 <SX1276Write>
            if( fixLen == 1 )
 80197ac:	19a3      	adds	r3, r4, r6
 80197ae:	19db      	adds	r3, r3, r7
 80197b0:	781b      	ldrb	r3, [r3, #0]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d007      	beq.n	80197c6 <SX1276SetRxConfig+0x40a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80197b6:	2330      	movs	r3, #48	; 0x30
 80197b8:	199b      	adds	r3, r3, r6
 80197ba:	19db      	adds	r3, r3, r7
 80197bc:	781b      	ldrb	r3, [r3, #0]
 80197be:	0019      	movs	r1, r3
 80197c0:	2022      	movs	r0, #34	; 0x22
 80197c2:	f001 f8cf 	bl	801a964 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80197c6:	4b35      	ldr	r3, [pc, #212]	; (801989c <SX1276SetRxConfig+0x4e0>)
 80197c8:	2253      	movs	r2, #83	; 0x53
 80197ca:	5c9b      	ldrb	r3, [r3, r2]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d013      	beq.n	80197f8 <SX1276SetRxConfig+0x43c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80197d0:	2044      	movs	r0, #68	; 0x44
 80197d2:	f001 f8d8 	bl	801a986 <SX1276Read>
 80197d6:	0003      	movs	r3, r0
 80197d8:	001a      	movs	r2, r3
 80197da:	2380      	movs	r3, #128	; 0x80
 80197dc:	425b      	negs	r3, r3
 80197de:	4313      	orrs	r3, r2
 80197e0:	b2db      	uxtb	r3, r3
 80197e2:	0019      	movs	r1, r3
 80197e4:	2044      	movs	r0, #68	; 0x44
 80197e6:	f001 f8bd 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80197ea:	4b2c      	ldr	r3, [pc, #176]	; (801989c <SX1276SetRxConfig+0x4e0>)
 80197ec:	2254      	movs	r2, #84	; 0x54
 80197ee:	5c9b      	ldrb	r3, [r3, r2]
 80197f0:	0019      	movs	r1, r3
 80197f2:	2024      	movs	r0, #36	; 0x24
 80197f4:	f001 f8b6 	bl	801a964 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	2b09      	cmp	r3, #9
 80197fc:	d10d      	bne.n	801981a <SX1276SetRxConfig+0x45e>
 80197fe:	4b27      	ldr	r3, [pc, #156]	; (801989c <SX1276SetRxConfig+0x4e0>)
 8019800:	689b      	ldr	r3, [r3, #8]
 8019802:	4a27      	ldr	r2, [pc, #156]	; (80198a0 <SX1276SetRxConfig+0x4e4>)
 8019804:	4293      	cmp	r3, r2
 8019806:	d908      	bls.n	801981a <SX1276SetRxConfig+0x45e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019808:	2102      	movs	r1, #2
 801980a:	2036      	movs	r0, #54	; 0x36
 801980c:	f001 f8aa 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8019810:	2164      	movs	r1, #100	; 0x64
 8019812:	203a      	movs	r0, #58	; 0x3a
 8019814:	f001 f8a6 	bl	801a964 <SX1276Write>
 8019818:	e00f      	b.n	801983a <SX1276SetRxConfig+0x47e>
            else if( bandwidth == 9 )
 801981a:	68bb      	ldr	r3, [r7, #8]
 801981c:	2b09      	cmp	r3, #9
 801981e:	d108      	bne.n	8019832 <SX1276SetRxConfig+0x476>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019820:	2102      	movs	r1, #2
 8019822:	2036      	movs	r0, #54	; 0x36
 8019824:	f001 f89e 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8019828:	217f      	movs	r1, #127	; 0x7f
 801982a:	203a      	movs	r0, #58	; 0x3a
 801982c:	f001 f89a 	bl	801a964 <SX1276Write>
 8019830:	e003      	b.n	801983a <SX1276SetRxConfig+0x47e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8019832:	2103      	movs	r1, #3
 8019834:	2036      	movs	r0, #54	; 0x36
 8019836:	f001 f895 	bl	801a964 <SX1276Write>
            if( datarate == 6 )
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	2b06      	cmp	r3, #6
 801983e:	d114      	bne.n	801986a <SX1276SetRxConfig+0x4ae>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019840:	2031      	movs	r0, #49	; 0x31
 8019842:	f001 f8a0 	bl	801a986 <SX1276Read>
 8019846:	0003      	movs	r3, r0
 8019848:	b25b      	sxtb	r3, r3
 801984a:	2207      	movs	r2, #7
 801984c:	4393      	bics	r3, r2
 801984e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019850:	2205      	movs	r2, #5
 8019852:	4313      	orrs	r3, r2
 8019854:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019856:	b2db      	uxtb	r3, r3
 8019858:	0019      	movs	r1, r3
 801985a:	2031      	movs	r0, #49	; 0x31
 801985c:	f001 f882 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019860:	210c      	movs	r1, #12
 8019862:	2037      	movs	r0, #55	; 0x37
 8019864:	f001 f87e 	bl	801a964 <SX1276Write>
        break;
 8019868:	e013      	b.n	8019892 <SX1276SetRxConfig+0x4d6>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801986a:	2031      	movs	r0, #49	; 0x31
 801986c:	f001 f88b 	bl	801a986 <SX1276Read>
 8019870:	0003      	movs	r3, r0
 8019872:	b25b      	sxtb	r3, r3
 8019874:	2207      	movs	r2, #7
 8019876:	4393      	bics	r3, r2
 8019878:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801987a:	2203      	movs	r2, #3
 801987c:	4313      	orrs	r3, r2
 801987e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019880:	b2db      	uxtb	r3, r3
 8019882:	0019      	movs	r1, r3
 8019884:	2031      	movs	r0, #49	; 0x31
 8019886:	f001 f86d 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801988a:	210a      	movs	r1, #10
 801988c:	2037      	movs	r0, #55	; 0x37
 801988e:	f001 f869 	bl	801a964 <SX1276Write>
        break;
 8019892:	46c0      	nop			; (mov r8, r8)
}
 8019894:	46c0      	nop			; (mov r8, r8)
 8019896:	46bd      	mov	sp, r7
 8019898:	b005      	add	sp, #20
 801989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801989c:	20001584 	.word	0x20001584
 80198a0:	1f4add40 	.word	0x1f4add40

080198a4 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80198a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198a6:	b085      	sub	sp, #20
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	60ba      	str	r2, [r7, #8]
 80198ac:	607b      	str	r3, [r7, #4]
 80198ae:	240f      	movs	r4, #15
 80198b0:	193b      	adds	r3, r7, r4
 80198b2:	1c02      	adds	r2, r0, #0
 80198b4:	701a      	strb	r2, [r3, #0]
 80198b6:	230e      	movs	r3, #14
 80198b8:	18fb      	adds	r3, r7, r3
 80198ba:	1c0a      	adds	r2, r1, #0
 80198bc:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 80198be:	4bb1      	ldr	r3, [pc, #708]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 80198c0:	791b      	ldrb	r3, [r3, #4]
 80198c2:	2b01      	cmp	r3, #1
 80198c4:	d108      	bne.n	80198d8 <SX1276SetTxConfig+0x34>
 80198c6:	193b      	adds	r3, r7, r4
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d104      	bne.n	80198d8 <SX1276SetTxConfig+0x34>
    {
        SX1276SetSleep( );
 80198ce:	f000 fc51 	bl	801a174 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 80198d2:	2001      	movs	r0, #1
 80198d4:	f7ea fed7 	bl	8004686 <HAL_Delay>
    }

    SX1276SetModem( modem );
 80198d8:	240f      	movs	r4, #15
 80198da:	193b      	adds	r3, r7, r4
 80198dc:	781b      	ldrb	r3, [r3, #0]
 80198de:	0018      	movs	r0, r3
 80198e0:	f000 ffe6 	bl	801a8b0 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 80198e4:	250e      	movs	r5, #14
 80198e6:	197b      	adds	r3, r7, r5
 80198e8:	781b      	ldrb	r3, [r3, #0]
 80198ea:	b25b      	sxtb	r3, r3
 80198ec:	0018      	movs	r0, r3
 80198ee:	f000 fb2f 	bl	8019f50 <SX1276SetRfTxPower>
    power = 0;  // Изменение параметра мощности передачи
 80198f2:	197b      	adds	r3, r7, r5
 80198f4:	2200      	movs	r2, #0
 80198f6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80198f8:	193b      	adds	r3, r7, r4
 80198fa:	781b      	ldrb	r3, [r3, #0]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d003      	beq.n	8019908 <SX1276SetTxConfig+0x64>
 8019900:	2b01      	cmp	r3, #1
 8019902:	d100      	bne.n	8019906 <SX1276SetTxConfig+0x62>
 8019904:	e0c1      	b.n	8019a8a <SX1276SetTxConfig+0x1e6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019906:	e1f7      	b.n	8019cf8 <SX1276SetTxConfig+0x454>
            SX1276.Settings.Fsk.Power = power;
 8019908:	4b9e      	ldr	r3, [pc, #632]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 801990a:	220e      	movs	r2, #14
 801990c:	18ba      	adds	r2, r7, r2
 801990e:	7812      	ldrb	r2, [r2, #0]
 8019910:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8019912:	4b9c      	ldr	r3, [pc, #624]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019914:	68ba      	ldr	r2, [r7, #8]
 8019916:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019918:	4b9a      	ldr	r3, [pc, #616]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 801991a:	687a      	ldr	r2, [r7, #4]
 801991c:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 801991e:	4b99      	ldr	r3, [pc, #612]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019922:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019924:	4b97      	ldr	r3, [pc, #604]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019926:	2420      	movs	r4, #32
 8019928:	2608      	movs	r6, #8
 801992a:	19a2      	adds	r2, r4, r6
 801992c:	2108      	movs	r1, #8
 801992e:	468c      	mov	ip, r1
 8019930:	44bc      	add	ip, r7
 8019932:	4462      	add	r2, ip
 8019934:	8812      	ldrh	r2, [r2, #0]
 8019936:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019938:	4b92      	ldr	r3, [pc, #584]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 801993a:	2524      	movs	r5, #36	; 0x24
 801993c:	19aa      	adds	r2, r5, r6
 801993e:	2108      	movs	r1, #8
 8019940:	468c      	mov	ip, r1
 8019942:	44bc      	add	ip, r7
 8019944:	4462      	add	r2, ip
 8019946:	2122      	movs	r1, #34	; 0x22
 8019948:	7812      	ldrb	r2, [r2, #0]
 801994a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801994c:	4b8d      	ldr	r3, [pc, #564]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 801994e:	2228      	movs	r2, #40	; 0x28
 8019950:	1992      	adds	r2, r2, r6
 8019952:	2108      	movs	r1, #8
 8019954:	468c      	mov	ip, r1
 8019956:	44bc      	add	ip, r7
 8019958:	4462      	add	r2, ip
 801995a:	2124      	movs	r1, #36	; 0x24
 801995c:	7812      	ldrb	r2, [r2, #0]
 801995e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019960:	4b88      	ldr	r3, [pc, #544]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019962:	2234      	movs	r2, #52	; 0x34
 8019964:	1992      	adds	r2, r2, r6
 8019966:	2108      	movs	r1, #8
 8019968:	468c      	mov	ip, r1
 801996a:	44bc      	add	ip, r7
 801996c:	4462      	add	r2, ip
 801996e:	2125      	movs	r1, #37	; 0x25
 8019970:	7812      	ldrb	r2, [r2, #0]
 8019972:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8019974:	4b83      	ldr	r3, [pc, #524]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019978:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 801997a:	68b8      	ldr	r0, [r7, #8]
 801997c:	f7e8 fe8c 	bl	8002698 <__aeabi_ui2d>
 8019980:	2200      	movs	r2, #0
 8019982:	4b81      	ldr	r3, [pc, #516]	; (8019b88 <SX1276SetTxConfig+0x2e4>)
 8019984:	f7e7 fc22 	bl	80011cc <__aeabi_ddiv>
 8019988:	0002      	movs	r2, r0
 801998a:	000b      	movs	r3, r1
 801998c:	0010      	movs	r0, r2
 801998e:	0019      	movs	r1, r3
 8019990:	f7e6 fde8 	bl	8000564 <__aeabi_d2uiz>
 8019994:	0003      	movs	r3, r0
 8019996:	b29b      	uxth	r3, r3
 8019998:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 801999a:	68bb      	ldr	r3, [r7, #8]
 801999c:	0a1b      	lsrs	r3, r3, #8
 801999e:	b2db      	uxtb	r3, r3
 80199a0:	0019      	movs	r1, r3
 80199a2:	2004      	movs	r0, #4
 80199a4:	f000 ffde 	bl	801a964 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80199a8:	68bb      	ldr	r3, [r7, #8]
 80199aa:	b2db      	uxtb	r3, r3
 80199ac:	0019      	movs	r1, r3
 80199ae:	2005      	movs	r0, #5
 80199b0:	f000 ffd8 	bl	801a964 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80199b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80199b6:	f7e8 fe6f 	bl	8002698 <__aeabi_ui2d>
 80199ba:	0002      	movs	r2, r0
 80199bc:	000b      	movs	r3, r1
 80199be:	2000      	movs	r0, #0
 80199c0:	4972      	ldr	r1, [pc, #456]	; (8019b8c <SX1276SetTxConfig+0x2e8>)
 80199c2:	f7e7 fc03 	bl	80011cc <__aeabi_ddiv>
 80199c6:	0002      	movs	r2, r0
 80199c8:	000b      	movs	r3, r1
 80199ca:	0010      	movs	r0, r2
 80199cc:	0019      	movs	r1, r3
 80199ce:	f7e6 fdc9 	bl	8000564 <__aeabi_d2uiz>
 80199d2:	0003      	movs	r3, r0
 80199d4:	b29b      	uxth	r3, r3
 80199d6:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80199d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199da:	0a1b      	lsrs	r3, r3, #8
 80199dc:	b2db      	uxtb	r3, r3
 80199de:	0019      	movs	r1, r3
 80199e0:	2002      	movs	r0, #2
 80199e2:	f000 ffbf 	bl	801a964 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80199e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199e8:	b2db      	uxtb	r3, r3
 80199ea:	0019      	movs	r1, r3
 80199ec:	2003      	movs	r0, #3
 80199ee:	f000 ffb9 	bl	801a964 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80199f2:	19a3      	adds	r3, r4, r6
 80199f4:	2208      	movs	r2, #8
 80199f6:	4694      	mov	ip, r2
 80199f8:	44bc      	add	ip, r7
 80199fa:	4463      	add	r3, ip
 80199fc:	881b      	ldrh	r3, [r3, #0]
 80199fe:	0a1b      	lsrs	r3, r3, #8
 8019a00:	b29b      	uxth	r3, r3
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	0019      	movs	r1, r3
 8019a06:	2025      	movs	r0, #37	; 0x25
 8019a08:	f000 ffac 	bl	801a964 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8019a0c:	19a3      	adds	r3, r4, r6
 8019a0e:	2208      	movs	r2, #8
 8019a10:	4694      	mov	ip, r2
 8019a12:	44bc      	add	ip, r7
 8019a14:	4463      	add	r3, ip
 8019a16:	881b      	ldrh	r3, [r3, #0]
 8019a18:	b2db      	uxtb	r3, r3
 8019a1a:	0019      	movs	r1, r3
 8019a1c:	2026      	movs	r0, #38	; 0x26
 8019a1e:	f000 ffa1 	bl	801a964 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019a22:	2030      	movs	r0, #48	; 0x30
 8019a24:	f000 ffaf 	bl	801a986 <SX1276Read>
 8019a28:	0003      	movs	r3, r0
 8019a2a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019a2c:	226f      	movs	r2, #111	; 0x6f
 8019a2e:	4013      	ands	r3, r2
 8019a30:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019a32:	19ab      	adds	r3, r5, r6
 8019a34:	2108      	movs	r1, #8
 8019a36:	468c      	mov	ip, r1
 8019a38:	44bc      	add	ip, r7
 8019a3a:	4463      	add	r3, ip
 8019a3c:	781b      	ldrb	r3, [r3, #0]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d001      	beq.n	8019a46 <SX1276SetTxConfig+0x1a2>
 8019a42:	2300      	movs	r3, #0
 8019a44:	e001      	b.n	8019a4a <SX1276SetTxConfig+0x1a6>
 8019a46:	2380      	movs	r3, #128	; 0x80
 8019a48:	425b      	negs	r3, r3
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019a4e:	2328      	movs	r3, #40	; 0x28
 8019a50:	2108      	movs	r1, #8
 8019a52:	185b      	adds	r3, r3, r1
 8019a54:	2108      	movs	r1, #8
 8019a56:	468c      	mov	ip, r1
 8019a58:	44bc      	add	ip, r7
 8019a5a:	4463      	add	r3, ip
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019a60:	b25b      	sxtb	r3, r3
 8019a62:	4313      	orrs	r3, r2
 8019a64:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019a66:	b2db      	uxtb	r3, r3
 8019a68:	0019      	movs	r1, r3
 8019a6a:	2030      	movs	r0, #48	; 0x30
 8019a6c:	f000 ff7a 	bl	801a964 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019a70:	2031      	movs	r0, #49	; 0x31
 8019a72:	f000 ff88 	bl	801a986 <SX1276Read>
 8019a76:	0003      	movs	r3, r0
 8019a78:	001a      	movs	r2, r3
 8019a7a:	2340      	movs	r3, #64	; 0x40
 8019a7c:	4313      	orrs	r3, r2
 8019a7e:	b2db      	uxtb	r3, r3
 8019a80:	0019      	movs	r1, r3
 8019a82:	2031      	movs	r0, #49	; 0x31
 8019a84:	f000 ff6e 	bl	801a964 <SX1276Write>
        break;
 8019a88:	e136      	b.n	8019cf8 <SX1276SetTxConfig+0x454>
            SX1276.Settings.LoRa.Power = power;
 8019a8a:	4b3e      	ldr	r3, [pc, #248]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019a8c:	220e      	movs	r2, #14
 8019a8e:	18ba      	adds	r2, r7, r2
 8019a90:	2140      	movs	r1, #64	; 0x40
 8019a92:	7812      	ldrb	r2, [r2, #0]
 8019a94:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	2b02      	cmp	r3, #2
 8019a9a:	d900      	bls.n	8019a9e <SX1276SetTxConfig+0x1fa>
                while( 1 );
 8019a9c:	e7fe      	b.n	8019a9c <SX1276SetTxConfig+0x1f8>
            bandwidth += 7;
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	3307      	adds	r3, #7
 8019aa2:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019aa4:	4b37      	ldr	r3, [pc, #220]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019aa6:	687a      	ldr	r2, [r7, #4]
 8019aa8:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019aaa:	4b36      	ldr	r3, [pc, #216]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019aae:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019ab0:	4b34      	ldr	r3, [pc, #208]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019ab2:	221c      	movs	r2, #28
 8019ab4:	2008      	movs	r0, #8
 8019ab6:	1812      	adds	r2, r2, r0
 8019ab8:	2108      	movs	r1, #8
 8019aba:	468c      	mov	ip, r1
 8019abc:	44bc      	add	ip, r7
 8019abe:	4462      	add	r2, ip
 8019ac0:	214d      	movs	r1, #77	; 0x4d
 8019ac2:	7812      	ldrb	r2, [r2, #0]
 8019ac4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019ac6:	4b2f      	ldr	r3, [pc, #188]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019ac8:	2220      	movs	r2, #32
 8019aca:	1812      	adds	r2, r2, r0
 8019acc:	2108      	movs	r1, #8
 8019ace:	468c      	mov	ip, r1
 8019ad0:	44bc      	add	ip, r7
 8019ad2:	4462      	add	r2, ip
 8019ad4:	214e      	movs	r1, #78	; 0x4e
 8019ad6:	8812      	ldrh	r2, [r2, #0]
 8019ad8:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019ada:	4b2a      	ldr	r3, [pc, #168]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019adc:	2224      	movs	r2, #36	; 0x24
 8019ade:	1812      	adds	r2, r2, r0
 8019ae0:	2108      	movs	r1, #8
 8019ae2:	468c      	mov	ip, r1
 8019ae4:	44bc      	add	ip, r7
 8019ae6:	4462      	add	r2, ip
 8019ae8:	2150      	movs	r1, #80	; 0x50
 8019aea:	7812      	ldrb	r2, [r2, #0]
 8019aec:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019aee:	4b25      	ldr	r3, [pc, #148]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019af0:	222c      	movs	r2, #44	; 0x2c
 8019af2:	1812      	adds	r2, r2, r0
 8019af4:	2108      	movs	r1, #8
 8019af6:	468c      	mov	ip, r1
 8019af8:	44bc      	add	ip, r7
 8019afa:	4462      	add	r2, ip
 8019afc:	2153      	movs	r1, #83	; 0x53
 8019afe:	7812      	ldrb	r2, [r2, #0]
 8019b00:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019b02:	4b20      	ldr	r3, [pc, #128]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019b04:	2230      	movs	r2, #48	; 0x30
 8019b06:	1812      	adds	r2, r2, r0
 8019b08:	2108      	movs	r1, #8
 8019b0a:	468c      	mov	ip, r1
 8019b0c:	44bc      	add	ip, r7
 8019b0e:	4462      	add	r2, ip
 8019b10:	2154      	movs	r1, #84	; 0x54
 8019b12:	7812      	ldrb	r2, [r2, #0]
 8019b14:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019b16:	4b1b      	ldr	r3, [pc, #108]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019b18:	2228      	movs	r2, #40	; 0x28
 8019b1a:	1812      	adds	r2, r2, r0
 8019b1c:	2108      	movs	r1, #8
 8019b1e:	468c      	mov	ip, r1
 8019b20:	44bc      	add	ip, r7
 8019b22:	4462      	add	r2, ip
 8019b24:	2152      	movs	r1, #82	; 0x52
 8019b26:	7812      	ldrb	r2, [r2, #0]
 8019b28:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019b2a:	4b16      	ldr	r3, [pc, #88]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019b2c:	2234      	movs	r2, #52	; 0x34
 8019b2e:	1812      	adds	r2, r2, r0
 8019b30:	2108      	movs	r1, #8
 8019b32:	468c      	mov	ip, r1
 8019b34:	44bc      	add	ip, r7
 8019b36:	4462      	add	r2, ip
 8019b38:	2155      	movs	r1, #85	; 0x55
 8019b3a:	7812      	ldrb	r2, [r2, #0]
 8019b3c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8019b3e:	4b11      	ldr	r3, [pc, #68]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019b42:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8019b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b46:	2b0c      	cmp	r3, #12
 8019b48:	d902      	bls.n	8019b50 <SX1276SetTxConfig+0x2ac>
                datarate = 12;
 8019b4a:	230c      	movs	r3, #12
 8019b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8019b4e:	e004      	b.n	8019b5a <SX1276SetTxConfig+0x2b6>
            else if( datarate < 6 )
 8019b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b52:	2b05      	cmp	r3, #5
 8019b54:	d801      	bhi.n	8019b5a <SX1276SetTxConfig+0x2b6>
                datarate = 6;
 8019b56:	2306      	movs	r3, #6
 8019b58:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	2b07      	cmp	r3, #7
 8019b5e:	d105      	bne.n	8019b6c <SX1276SetTxConfig+0x2c8>
 8019b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b62:	2b0b      	cmp	r3, #11
 8019b64:	d008      	beq.n	8019b78 <SX1276SetTxConfig+0x2d4>
 8019b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b68:	2b0c      	cmp	r3, #12
 8019b6a:	d005      	beq.n	8019b78 <SX1276SetTxConfig+0x2d4>
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	2b08      	cmp	r3, #8
 8019b70:	d10e      	bne.n	8019b90 <SX1276SetTxConfig+0x2ec>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b74:	2b0c      	cmp	r3, #12
 8019b76:	d10b      	bne.n	8019b90 <SX1276SetTxConfig+0x2ec>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019b78:	4b02      	ldr	r3, [pc, #8]	; (8019b84 <SX1276SetTxConfig+0x2e0>)
 8019b7a:	224c      	movs	r2, #76	; 0x4c
 8019b7c:	2101      	movs	r1, #1
 8019b7e:	5499      	strb	r1, [r3, r2]
 8019b80:	e00a      	b.n	8019b98 <SX1276SetTxConfig+0x2f4>
 8019b82:	46c0      	nop			; (mov r8, r8)
 8019b84:	20001584 	.word	0x20001584
 8019b88:	404e8480 	.word	0x404e8480
 8019b8c:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019b90:	4b5b      	ldr	r3, [pc, #364]	; (8019d00 <SX1276SetTxConfig+0x45c>)
 8019b92:	224c      	movs	r2, #76	; 0x4c
 8019b94:	2100      	movs	r1, #0
 8019b96:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019b98:	4b59      	ldr	r3, [pc, #356]	; (8019d00 <SX1276SetTxConfig+0x45c>)
 8019b9a:	2253      	movs	r2, #83	; 0x53
 8019b9c:	5c9b      	ldrb	r3, [r3, r2]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d013      	beq.n	8019bca <SX1276SetTxConfig+0x326>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019ba2:	2044      	movs	r0, #68	; 0x44
 8019ba4:	f000 feef 	bl	801a986 <SX1276Read>
 8019ba8:	0003      	movs	r3, r0
 8019baa:	001a      	movs	r2, r3
 8019bac:	2380      	movs	r3, #128	; 0x80
 8019bae:	425b      	negs	r3, r3
 8019bb0:	4313      	orrs	r3, r2
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	0019      	movs	r1, r3
 8019bb6:	2044      	movs	r0, #68	; 0x44
 8019bb8:	f000 fed4 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019bbc:	4b50      	ldr	r3, [pc, #320]	; (8019d00 <SX1276SetTxConfig+0x45c>)
 8019bbe:	2254      	movs	r2, #84	; 0x54
 8019bc0:	5c9b      	ldrb	r3, [r3, r2]
 8019bc2:	0019      	movs	r1, r3
 8019bc4:	2024      	movs	r0, #36	; 0x24
 8019bc6:	f000 fecd 	bl	801a964 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019bca:	201d      	movs	r0, #29
 8019bcc:	f000 fedb 	bl	801a986 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	011b      	lsls	r3, r3, #4
 8019bd6:	b2da      	uxtb	r2, r3
 8019bd8:	231c      	movs	r3, #28
 8019bda:	2508      	movs	r5, #8
 8019bdc:	195b      	adds	r3, r3, r5
 8019bde:	2108      	movs	r1, #8
 8019be0:	468c      	mov	ip, r1
 8019be2:	44bc      	add	ip, r7
 8019be4:	4463      	add	r3, ip
 8019be6:	781b      	ldrb	r3, [r3, #0]
 8019be8:	18db      	adds	r3, r3, r3
 8019bea:	b2db      	uxtb	r3, r3
 8019bec:	4313      	orrs	r3, r2
 8019bee:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019bf0:	2324      	movs	r3, #36	; 0x24
 8019bf2:	195b      	adds	r3, r3, r5
 8019bf4:	2108      	movs	r1, #8
 8019bf6:	468c      	mov	ip, r1
 8019bf8:	44bc      	add	ip, r7
 8019bfa:	4463      	add	r3, ip
 8019bfc:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019bfe:	4313      	orrs	r3, r2
 8019c00:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019c02:	0019      	movs	r1, r3
 8019c04:	201d      	movs	r0, #29
 8019c06:	f000 fead 	bl	801a964 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019c0a:	201e      	movs	r0, #30
 8019c0c:	f000 febb 	bl	801a986 <SX1276Read>
 8019c10:	0003      	movs	r3, r0
 8019c12:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8019c14:	230b      	movs	r3, #11
 8019c16:	4013      	ands	r3, r2
 8019c18:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8019c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c1c:	b2db      	uxtb	r3, r3
 8019c1e:	011b      	lsls	r3, r3, #4
 8019c20:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8019c22:	4313      	orrs	r3, r2
 8019c24:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8019c26:	2328      	movs	r3, #40	; 0x28
 8019c28:	195b      	adds	r3, r3, r5
 8019c2a:	2108      	movs	r1, #8
 8019c2c:	468c      	mov	ip, r1
 8019c2e:	44bc      	add	ip, r7
 8019c30:	4463      	add	r3, ip
 8019c32:	781b      	ldrb	r3, [r3, #0]
 8019c34:	009b      	lsls	r3, r3, #2
 8019c36:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019c38:	4313      	orrs	r3, r2
 8019c3a:	b2db      	uxtb	r3, r3
 8019c3c:	0019      	movs	r1, r3
 8019c3e:	201e      	movs	r0, #30
 8019c40:	f000 fe90 	bl	801a964 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019c44:	2026      	movs	r0, #38	; 0x26
 8019c46:	f000 fe9e 	bl	801a986 <SX1276Read>
 8019c4a:	0003      	movs	r3, r0
 8019c4c:	b25b      	sxtb	r3, r3
 8019c4e:	2208      	movs	r2, #8
 8019c50:	4393      	bics	r3, r2
 8019c52:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019c54:	4b2a      	ldr	r3, [pc, #168]	; (8019d00 <SX1276SetTxConfig+0x45c>)
 8019c56:	214c      	movs	r1, #76	; 0x4c
 8019c58:	5c5b      	ldrb	r3, [r3, r1]
 8019c5a:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019c5c:	b25b      	sxtb	r3, r3
 8019c5e:	4313      	orrs	r3, r2
 8019c60:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019c62:	b2db      	uxtb	r3, r3
 8019c64:	0019      	movs	r1, r3
 8019c66:	2026      	movs	r0, #38	; 0x26
 8019c68:	f000 fe7c 	bl	801a964 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8019c6c:	2420      	movs	r4, #32
 8019c6e:	1963      	adds	r3, r4, r5
 8019c70:	2208      	movs	r2, #8
 8019c72:	4694      	mov	ip, r2
 8019c74:	44bc      	add	ip, r7
 8019c76:	4463      	add	r3, ip
 8019c78:	881b      	ldrh	r3, [r3, #0]
 8019c7a:	0a1b      	lsrs	r3, r3, #8
 8019c7c:	b29b      	uxth	r3, r3
 8019c7e:	b2db      	uxtb	r3, r3
 8019c80:	0019      	movs	r1, r3
 8019c82:	2020      	movs	r0, #32
 8019c84:	f000 fe6e 	bl	801a964 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8019c88:	1963      	adds	r3, r4, r5
 8019c8a:	2208      	movs	r2, #8
 8019c8c:	4694      	mov	ip, r2
 8019c8e:	44bc      	add	ip, r7
 8019c90:	4463      	add	r3, ip
 8019c92:	881b      	ldrh	r3, [r3, #0]
 8019c94:	b2db      	uxtb	r3, r3
 8019c96:	0019      	movs	r1, r3
 8019c98:	2021      	movs	r0, #33	; 0x21
 8019c9a:	f000 fe63 	bl	801a964 <SX1276Write>
            if( datarate == 6 )
 8019c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ca0:	2b06      	cmp	r3, #6
 8019ca2:	d114      	bne.n	8019cce <SX1276SetTxConfig+0x42a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019ca4:	2031      	movs	r0, #49	; 0x31
 8019ca6:	f000 fe6e 	bl	801a986 <SX1276Read>
 8019caa:	0003      	movs	r3, r0
 8019cac:	b25b      	sxtb	r3, r3
 8019cae:	2207      	movs	r2, #7
 8019cb0:	4393      	bics	r3, r2
 8019cb2:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019cb4:	2205      	movs	r2, #5
 8019cb6:	4313      	orrs	r3, r2
 8019cb8:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019cba:	b2db      	uxtb	r3, r3
 8019cbc:	0019      	movs	r1, r3
 8019cbe:	2031      	movs	r0, #49	; 0x31
 8019cc0:	f000 fe50 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019cc4:	210c      	movs	r1, #12
 8019cc6:	2037      	movs	r0, #55	; 0x37
 8019cc8:	f000 fe4c 	bl	801a964 <SX1276Write>
        break;
 8019ccc:	e013      	b.n	8019cf6 <SX1276SetTxConfig+0x452>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019cce:	2031      	movs	r0, #49	; 0x31
 8019cd0:	f000 fe59 	bl	801a986 <SX1276Read>
 8019cd4:	0003      	movs	r3, r0
 8019cd6:	b25b      	sxtb	r3, r3
 8019cd8:	2207      	movs	r2, #7
 8019cda:	4393      	bics	r3, r2
 8019cdc:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019cde:	2203      	movs	r2, #3
 8019ce0:	4313      	orrs	r3, r2
 8019ce2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019ce4:	b2db      	uxtb	r3, r3
 8019ce6:	0019      	movs	r1, r3
 8019ce8:	2031      	movs	r0, #49	; 0x31
 8019cea:	f000 fe3b 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019cee:	210a      	movs	r1, #10
 8019cf0:	2037      	movs	r0, #55	; 0x37
 8019cf2:	f000 fe37 	bl	801a964 <SX1276Write>
        break;
 8019cf6:	46c0      	nop			; (mov r8, r8)
}
 8019cf8:	46c0      	nop			; (mov r8, r8)
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	b005      	add	sp, #20
 8019cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d00:	20001584 	.word	0x20001584

08019d04 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8019d04:	b590      	push	{r4, r7, lr}
 8019d06:	b08b      	sub	sp, #44	; 0x2c
 8019d08:	af04      	add	r7, sp, #16
 8019d0a:	60b9      	str	r1, [r7, #8]
 8019d0c:	607a      	str	r2, [r7, #4]
 8019d0e:	0019      	movs	r1, r3
 8019d10:	240f      	movs	r4, #15
 8019d12:	193b      	adds	r3, r7, r4
 8019d14:	1c02      	adds	r2, r0, #0
 8019d16:	701a      	strb	r2, [r3, #0]
 8019d18:	230e      	movs	r3, #14
 8019d1a:	18fb      	adds	r3, r7, r3
 8019d1c:	1c0a      	adds	r2, r1, #0
 8019d1e:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 8019d20:	2300      	movs	r3, #0
 8019d22:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019d24:	2301      	movs	r3, #1
 8019d26:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019d28:	193b      	adds	r3, r7, r4
 8019d2a:	781b      	ldrb	r3, [r3, #0]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d002      	beq.n	8019d36 <SX1276GetTimeOnAir+0x32>
 8019d30:	2b01      	cmp	r3, #1
 8019d32:	d01a      	beq.n	8019d6a <SX1276GetTimeOnAir+0x66>
 8019d34:	e03f      	b.n	8019db6 <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8019d36:	2334      	movs	r3, #52	; 0x34
 8019d38:	18fb      	adds	r3, r7, r3
 8019d3a:	781c      	ldrb	r4, [r3, #0]
 8019d3c:	2330      	movs	r3, #48	; 0x30
 8019d3e:	18fb      	adds	r3, r7, r3
 8019d40:	781a      	ldrb	r2, [r3, #0]
 8019d42:	232c      	movs	r3, #44	; 0x2c
 8019d44:	18fb      	adds	r3, r7, r3
 8019d46:	7819      	ldrb	r1, [r3, #0]
 8019d48:	2328      	movs	r3, #40	; 0x28
 8019d4a:	18fb      	adds	r3, r7, r3
 8019d4c:	8818      	ldrh	r0, [r3, #0]
 8019d4e:	0023      	movs	r3, r4
 8019d50:	f000 ff7e 	bl	801ac50 <SX1276GetGfskTimeOnAirNumerator>
 8019d54:	0002      	movs	r2, r0
 8019d56:	0013      	movs	r3, r2
 8019d58:	015b      	lsls	r3, r3, #5
 8019d5a:	1a9b      	subs	r3, r3, r2
 8019d5c:	009b      	lsls	r3, r3, #2
 8019d5e:	189b      	adds	r3, r3, r2
 8019d60:	00db      	lsls	r3, r3, #3
 8019d62:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	613b      	str	r3, [r7, #16]
        }
        break;
 8019d68:	e025      	b.n	8019db6 <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8019d6a:	2328      	movs	r3, #40	; 0x28
 8019d6c:	18fb      	adds	r3, r7, r3
 8019d6e:	881c      	ldrh	r4, [r3, #0]
 8019d70:	230e      	movs	r3, #14
 8019d72:	18fb      	adds	r3, r7, r3
 8019d74:	781a      	ldrb	r2, [r3, #0]
 8019d76:	6879      	ldr	r1, [r7, #4]
 8019d78:	68b8      	ldr	r0, [r7, #8]
 8019d7a:	2334      	movs	r3, #52	; 0x34
 8019d7c:	18fb      	adds	r3, r7, r3
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	9302      	str	r3, [sp, #8]
 8019d82:	2330      	movs	r3, #48	; 0x30
 8019d84:	18fb      	adds	r3, r7, r3
 8019d86:	781b      	ldrb	r3, [r3, #0]
 8019d88:	9301      	str	r3, [sp, #4]
 8019d8a:	232c      	movs	r3, #44	; 0x2c
 8019d8c:	18fb      	adds	r3, r7, r3
 8019d8e:	781b      	ldrb	r3, [r3, #0]
 8019d90:	9300      	str	r3, [sp, #0]
 8019d92:	0023      	movs	r3, r4
 8019d94:	f000 ff96 	bl	801acc4 <SX1276GetLoRaTimeOnAirNumerator>
 8019d98:	0002      	movs	r2, r0
 8019d9a:	0013      	movs	r3, r2
 8019d9c:	015b      	lsls	r3, r3, #5
 8019d9e:	1a9b      	subs	r3, r3, r2
 8019da0:	009b      	lsls	r3, r3, #2
 8019da2:	189b      	adds	r3, r3, r2
 8019da4:	00db      	lsls	r3, r3, #3
 8019da6:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 8019da8:	68bb      	ldr	r3, [r7, #8]
 8019daa:	0018      	movs	r0, r3
 8019dac:	f000 ff1e 	bl	801abec <SX1276GetLoRaBandwidthInHz>
 8019db0:	0003      	movs	r3, r0
 8019db2:	613b      	str	r3, [r7, #16]
        }
        break;
 8019db4:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 8019db6:	697a      	ldr	r2, [r7, #20]
 8019db8:	693b      	ldr	r3, [r7, #16]
 8019dba:	18d3      	adds	r3, r2, r3
 8019dbc:	3b01      	subs	r3, #1
 8019dbe:	6939      	ldr	r1, [r7, #16]
 8019dc0:	0018      	movs	r0, r3
 8019dc2:	f7e6 f9a9 	bl	8000118 <__udivsi3>
 8019dc6:	0003      	movs	r3, r0
}
 8019dc8:	0018      	movs	r0, r3
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	b007      	add	sp, #28
 8019dce:	bd90      	pop	{r4, r7, pc}

08019dd0 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b084      	sub	sp, #16
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	6078      	str	r0, [r7, #4]
 8019dd8:	000a      	movs	r2, r1
 8019dda:	1cfb      	adds	r3, r7, #3
 8019ddc:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 8019dde:	2300      	movs	r3, #0
 8019de0:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8019de2:	4b59      	ldr	r3, [pc, #356]	; (8019f48 <SX1276Send+0x178>)
 8019de4:	795b      	ldrb	r3, [r3, #5]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d002      	beq.n	8019df0 <SX1276Send+0x20>
 8019dea:	2b01      	cmp	r3, #1
 8019dec:	d04c      	beq.n	8019e88 <SX1276Send+0xb8>
 8019dee:	e0a2      	b.n	8019f36 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8019df0:	4b55      	ldr	r3, [pc, #340]	; (8019f48 <SX1276Send+0x178>)
 8019df2:	2200      	movs	r2, #0
 8019df4:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8019df6:	1cfb      	adds	r3, r7, #3
 8019df8:	781b      	ldrb	r3, [r3, #0]
 8019dfa:	b29a      	uxth	r2, r3
 8019dfc:	4b52      	ldr	r3, [pc, #328]	; (8019f48 <SX1276Send+0x178>)
 8019dfe:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8019e00:	4b51      	ldr	r3, [pc, #324]	; (8019f48 <SX1276Send+0x178>)
 8019e02:	2222      	movs	r2, #34	; 0x22
 8019e04:	5c9b      	ldrb	r3, [r3, r2]
 8019e06:	2201      	movs	r2, #1
 8019e08:	4053      	eors	r3, r2
 8019e0a:	b2db      	uxtb	r3, r3
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d005      	beq.n	8019e1c <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8019e10:	1cfb      	adds	r3, r7, #3
 8019e12:	2101      	movs	r1, #1
 8019e14:	0018      	movs	r0, r3
 8019e16:	f000 fe31 	bl	801aa7c <SX1276WriteFifo>
 8019e1a:	e005      	b.n	8019e28 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8019e1c:	1cfb      	adds	r3, r7, #3
 8019e1e:	781b      	ldrb	r3, [r3, #0]
 8019e20:	0019      	movs	r1, r3
 8019e22:	2032      	movs	r0, #50	; 0x32
 8019e24:	f000 fd9e 	bl	801a964 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8019e28:	1cfb      	adds	r3, r7, #3
 8019e2a:	781b      	ldrb	r3, [r3, #0]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d009      	beq.n	8019e44 <SX1276Send+0x74>
 8019e30:	1cfb      	adds	r3, r7, #3
 8019e32:	781b      	ldrb	r3, [r3, #0]
 8019e34:	2b40      	cmp	r3, #64	; 0x40
 8019e36:	d805      	bhi.n	8019e44 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8019e38:	1cfb      	adds	r3, r7, #3
 8019e3a:	7819      	ldrb	r1, [r3, #0]
 8019e3c:	4b42      	ldr	r3, [pc, #264]	; (8019f48 <SX1276Send+0x178>)
 8019e3e:	223f      	movs	r2, #63	; 0x3f
 8019e40:	5499      	strb	r1, [r3, r2]
 8019e42:	e00b      	b.n	8019e5c <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8019e44:	1cfb      	adds	r3, r7, #3
 8019e46:	781b      	ldrb	r3, [r3, #0]
 8019e48:	b29a      	uxth	r2, r3
 8019e4a:	6879      	ldr	r1, [r7, #4]
 8019e4c:	4b3f      	ldr	r3, [pc, #252]	; (8019f4c <SX1276Send+0x17c>)
 8019e4e:	0018      	movs	r0, r3
 8019e50:	f002 f838 	bl	801bec4 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8019e54:	4b3c      	ldr	r3, [pc, #240]	; (8019f48 <SX1276Send+0x178>)
 8019e56:	223f      	movs	r2, #63	; 0x3f
 8019e58:	2120      	movs	r1, #32
 8019e5a:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8019e5c:	4b3a      	ldr	r3, [pc, #232]	; (8019f48 <SX1276Send+0x178>)
 8019e5e:	223f      	movs	r2, #63	; 0x3f
 8019e60:	5c9a      	ldrb	r2, [r3, r2]
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	0011      	movs	r1, r2
 8019e66:	0018      	movs	r0, r3
 8019e68:	f000 fe08 	bl	801aa7c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8019e6c:	4b36      	ldr	r3, [pc, #216]	; (8019f48 <SX1276Send+0x178>)
 8019e6e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8019e70:	4b35      	ldr	r3, [pc, #212]	; (8019f48 <SX1276Send+0x178>)
 8019e72:	213f      	movs	r1, #63	; 0x3f
 8019e74:	5c5b      	ldrb	r3, [r3, r1]
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	18d3      	adds	r3, r2, r3
 8019e7a:	b29a      	uxth	r2, r3
 8019e7c:	4b32      	ldr	r3, [pc, #200]	; (8019f48 <SX1276Send+0x178>)
 8019e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8019e80:	4b31      	ldr	r3, [pc, #196]	; (8019f48 <SX1276Send+0x178>)
 8019e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e84:	60fb      	str	r3, [r7, #12]
        }
        break;
 8019e86:	e056      	b.n	8019f36 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8019e88:	4b2f      	ldr	r3, [pc, #188]	; (8019f48 <SX1276Send+0x178>)
 8019e8a:	2255      	movs	r2, #85	; 0x55
 8019e8c:	5c9b      	ldrb	r3, [r3, r2]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d011      	beq.n	8019eb6 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8019e92:	2033      	movs	r0, #51	; 0x33
 8019e94:	f000 fd77 	bl	801a986 <SX1276Read>
 8019e98:	0003      	movs	r3, r0
 8019e9a:	001a      	movs	r2, r3
 8019e9c:	2341      	movs	r3, #65	; 0x41
 8019e9e:	439a      	bics	r2, r3
 8019ea0:	0013      	movs	r3, r2
 8019ea2:	b2db      	uxtb	r3, r3
 8019ea4:	0019      	movs	r1, r3
 8019ea6:	2033      	movs	r0, #51	; 0x33
 8019ea8:	f000 fd5c 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8019eac:	2119      	movs	r1, #25
 8019eae:	203b      	movs	r0, #59	; 0x3b
 8019eb0:	f000 fd58 	bl	801a964 <SX1276Write>
 8019eb4:	e013      	b.n	8019ede <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8019eb6:	2033      	movs	r0, #51	; 0x33
 8019eb8:	f000 fd65 	bl	801a986 <SX1276Read>
 8019ebc:	0003      	movs	r3, r0
 8019ebe:	b25b      	sxtb	r3, r3
 8019ec0:	2241      	movs	r2, #65	; 0x41
 8019ec2:	4393      	bics	r3, r2
 8019ec4:	b25b      	sxtb	r3, r3
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	4313      	orrs	r3, r2
 8019eca:	b25b      	sxtb	r3, r3
 8019ecc:	b2db      	uxtb	r3, r3
 8019ece:	0019      	movs	r1, r3
 8019ed0:	2033      	movs	r0, #51	; 0x33
 8019ed2:	f000 fd47 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8019ed6:	211d      	movs	r1, #29
 8019ed8:	203b      	movs	r0, #59	; 0x3b
 8019eda:	f000 fd43 	bl	801a964 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8019ede:	1cfb      	adds	r3, r7, #3
 8019ee0:	7819      	ldrb	r1, [r3, #0]
 8019ee2:	4b19      	ldr	r3, [pc, #100]	; (8019f48 <SX1276Send+0x178>)
 8019ee4:	2264      	movs	r2, #100	; 0x64
 8019ee6:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8019ee8:	1cfb      	adds	r3, r7, #3
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	0019      	movs	r1, r3
 8019eee:	2022      	movs	r0, #34	; 0x22
 8019ef0:	f000 fd38 	bl	801a964 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8019ef4:	2100      	movs	r1, #0
 8019ef6:	200e      	movs	r0, #14
 8019ef8:	f000 fd34 	bl	801a964 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8019efc:	2100      	movs	r1, #0
 8019efe:	200d      	movs	r0, #13
 8019f00:	f000 fd30 	bl	801a964 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8019f04:	2001      	movs	r0, #1
 8019f06:	f000 fd3e 	bl	801a986 <SX1276Read>
 8019f0a:	0003      	movs	r3, r0
 8019f0c:	001a      	movs	r2, r3
 8019f0e:	23f8      	movs	r3, #248	; 0xf8
 8019f10:	439a      	bics	r2, r3
 8019f12:	1e13      	subs	r3, r2, #0
 8019f14:	d104      	bne.n	8019f20 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8019f16:	f000 f94f 	bl	801a1b8 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 8019f1a:	2001      	movs	r0, #1
 8019f1c:	f7ea fbb3 	bl	8004686 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8019f20:	1cfb      	adds	r3, r7, #3
 8019f22:	781a      	ldrb	r2, [r3, #0]
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	0011      	movs	r1, r2
 8019f28:	0018      	movs	r0, r3
 8019f2a:	f000 fda7 	bl	801aa7c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8019f2e:	4b06      	ldr	r3, [pc, #24]	; (8019f48 <SX1276Send+0x178>)
 8019f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f32:	60fb      	str	r3, [r7, #12]
        }
        break;
 8019f34:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	0018      	movs	r0, r3
 8019f3a:	f000 faf3 	bl	801a524 <SX1276SetTx>
}
 8019f3e:	46c0      	nop			; (mov r8, r8)
 8019f40:	46bd      	mov	sp, r7
 8019f42:	b004      	add	sp, #16
 8019f44:	bd80      	pop	{r7, pc}
 8019f46:	46c0      	nop			; (mov r8, r8)
 8019f48:	20001584 	.word	0x20001584
 8019f4c:	20001484 	.word	0x20001484

08019f50 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 8019f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f52:	b085      	sub	sp, #20
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	0002      	movs	r2, r0
 8019f58:	1dfb      	adds	r3, r7, #7
 8019f5a:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8019f5c:	210f      	movs	r1, #15
 8019f5e:	187b      	adds	r3, r7, r1
 8019f60:	2200      	movs	r2, #0
 8019f62:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8019f64:	250e      	movs	r5, #14
 8019f66:	197b      	adds	r3, r7, r5
 8019f68:	2200      	movs	r2, #0
 8019f6a:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 8019f6c:	260d      	movs	r6, #13
 8019f6e:	19bb      	adds	r3, r7, r6
 8019f70:	2200      	movs	r2, #0
 8019f72:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8019f74:	187c      	adds	r4, r7, r1
 8019f76:	2009      	movs	r0, #9
 8019f78:	f000 fd05 	bl	801a986 <SX1276Read>
 8019f7c:	0003      	movs	r3, r0
 8019f7e:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8019f80:	197c      	adds	r4, r7, r5
 8019f82:	204d      	movs	r0, #77	; 0x4d
 8019f84:	f000 fcff 	bl	801a986 <SX1276Read>
 8019f88:	0003      	movs	r3, r0
 8019f8a:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8019f8c:	4b78      	ldr	r3, [pc, #480]	; (801a170 <SX1276SetRfTxPower+0x220>)
 8019f8e:	689b      	ldr	r3, [r3, #8]
 8019f90:	0018      	movs	r0, r3
 8019f92:	f7eb fb5b 	bl	800564c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 8019f96:	0003      	movs	r3, r0
 8019f98:	2b03      	cmp	r3, #3
 8019f9a:	d01f      	beq.n	8019fdc <SX1276SetRfTxPower+0x8c>
 8019f9c:	dc23      	bgt.n	8019fe6 <SX1276SetRfTxPower+0x96>
 8019f9e:	2b02      	cmp	r3, #2
 8019fa0:	d008      	beq.n	8019fb4 <SX1276SetRfTxPower+0x64>
 8019fa2:	dc20      	bgt.n	8019fe6 <SX1276SetRfTxPower+0x96>
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d00a      	beq.n	8019fbe <SX1276SetRfTxPower+0x6e>
 8019fa8:	2b01      	cmp	r3, #1
 8019faa:	d11c      	bne.n	8019fe6 <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 8019fac:	19bb      	adds	r3, r7, r6
 8019fae:	2200      	movs	r2, #0
 8019fb0:	701a      	strb	r2, [r3, #0]
        break;
 8019fb2:	e019      	b.n	8019fe8 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 8019fb4:	230d      	movs	r3, #13
 8019fb6:	18fb      	adds	r3, r7, r3
 8019fb8:	2280      	movs	r2, #128	; 0x80
 8019fba:	701a      	strb	r2, [r3, #0]
        break;
 8019fbc:	e014      	b.n	8019fe8 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 8019fbe:	1dfb      	adds	r3, r7, #7
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	b25b      	sxtb	r3, r3
 8019fc4:	2b0e      	cmp	r3, #14
 8019fc6:	dd04      	ble.n	8019fd2 <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 8019fc8:	230d      	movs	r3, #13
 8019fca:	18fb      	adds	r3, r7, r3
 8019fcc:	2280      	movs	r2, #128	; 0x80
 8019fce:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 8019fd0:	e00a      	b.n	8019fe8 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 8019fd2:	230d      	movs	r3, #13
 8019fd4:	18fb      	adds	r3, r7, r3
 8019fd6:	2200      	movs	r2, #0
 8019fd8:	701a      	strb	r2, [r3, #0]
        break;
 8019fda:	e005      	b.n	8019fe8 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 8019fdc:	230d      	movs	r3, #13
 8019fde:	18fb      	adds	r3, r7, r3
 8019fe0:	2280      	movs	r2, #128	; 0x80
 8019fe2:	701a      	strb	r2, [r3, #0]
          break;
 8019fe4:	e000      	b.n	8019fe8 <SX1276SetRfTxPower+0x98>
        default:
        break;
 8019fe6:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8019fe8:	210f      	movs	r1, #15
 8019fea:	187b      	adds	r3, r7, r1
 8019fec:	781b      	ldrb	r3, [r3, #0]
 8019fee:	b25b      	sxtb	r3, r3
 8019ff0:	227f      	movs	r2, #127	; 0x7f
 8019ff2:	4013      	ands	r3, r2
 8019ff4:	b25a      	sxtb	r2, r3
 8019ff6:	230d      	movs	r3, #13
 8019ff8:	18fb      	adds	r3, r7, r3
 8019ffa:	781b      	ldrb	r3, [r3, #0]
 8019ffc:	b25b      	sxtb	r3, r3
 8019ffe:	4313      	orrs	r3, r2
 801a000:	b25a      	sxtb	r2, r3
 801a002:	187b      	adds	r3, r7, r1
 801a004:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a006:	187b      	adds	r3, r7, r1
 801a008:	781b      	ldrb	r3, [r3, #0]
 801a00a:	b25b      	sxtb	r3, r3
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	da67      	bge.n	801a0e0 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801a010:	1dfb      	adds	r3, r7, #7
 801a012:	781b      	ldrb	r3, [r3, #0]
 801a014:	b25b      	sxtb	r3, r3
 801a016:	2b11      	cmp	r3, #17
 801a018:	dd07      	ble.n	801a02a <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801a01a:	220e      	movs	r2, #14
 801a01c:	18bb      	adds	r3, r7, r2
 801a01e:	18ba      	adds	r2, r7, r2
 801a020:	7812      	ldrb	r2, [r2, #0]
 801a022:	2107      	movs	r1, #7
 801a024:	430a      	orrs	r2, r1
 801a026:	701a      	strb	r2, [r3, #0]
 801a028:	e00b      	b.n	801a042 <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801a02a:	210e      	movs	r1, #14
 801a02c:	187b      	adds	r3, r7, r1
 801a02e:	781b      	ldrb	r3, [r3, #0]
 801a030:	b25b      	sxtb	r3, r3
 801a032:	2207      	movs	r2, #7
 801a034:	4393      	bics	r3, r2
 801a036:	b25b      	sxtb	r3, r3
 801a038:	2204      	movs	r2, #4
 801a03a:	4313      	orrs	r3, r2
 801a03c:	b25a      	sxtb	r2, r3
 801a03e:	187b      	adds	r3, r7, r1
 801a040:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801a042:	230e      	movs	r3, #14
 801a044:	18fb      	adds	r3, r7, r3
 801a046:	781b      	ldrb	r3, [r3, #0]
 801a048:	2207      	movs	r2, #7
 801a04a:	4013      	ands	r3, r2
 801a04c:	2b07      	cmp	r3, #7
 801a04e:	d123      	bne.n	801a098 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801a050:	1dfb      	adds	r3, r7, #7
 801a052:	781b      	ldrb	r3, [r3, #0]
 801a054:	b25b      	sxtb	r3, r3
 801a056:	2b04      	cmp	r3, #4
 801a058:	dc02      	bgt.n	801a060 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801a05a:	1dfb      	adds	r3, r7, #7
 801a05c:	2205      	movs	r2, #5
 801a05e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801a060:	1dfb      	adds	r3, r7, #7
 801a062:	781b      	ldrb	r3, [r3, #0]
 801a064:	b25b      	sxtb	r3, r3
 801a066:	2b14      	cmp	r3, #20
 801a068:	dd02      	ble.n	801a070 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801a06a:	1dfb      	adds	r3, r7, #7
 801a06c:	2214      	movs	r2, #20
 801a06e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801a070:	200f      	movs	r0, #15
 801a072:	183b      	adds	r3, r7, r0
 801a074:	781b      	ldrb	r3, [r3, #0]
 801a076:	b25b      	sxtb	r3, r3
 801a078:	220f      	movs	r2, #15
 801a07a:	4393      	bics	r3, r2
 801a07c:	b25a      	sxtb	r2, r3
 801a07e:	1dfb      	adds	r3, r7, #7
 801a080:	781b      	ldrb	r3, [r3, #0]
 801a082:	3b05      	subs	r3, #5
 801a084:	b2db      	uxtb	r3, r3
 801a086:	b25b      	sxtb	r3, r3
 801a088:	210f      	movs	r1, #15
 801a08a:	400b      	ands	r3, r1
 801a08c:	b25b      	sxtb	r3, r3
 801a08e:	4313      	orrs	r3, r2
 801a090:	b25a      	sxtb	r2, r3
 801a092:	183b      	adds	r3, r7, r0
 801a094:	701a      	strb	r2, [r3, #0]
 801a096:	e059      	b.n	801a14c <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801a098:	1dfb      	adds	r3, r7, #7
 801a09a:	781b      	ldrb	r3, [r3, #0]
 801a09c:	b25b      	sxtb	r3, r3
 801a09e:	2b01      	cmp	r3, #1
 801a0a0:	dc02      	bgt.n	801a0a8 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801a0a2:	1dfb      	adds	r3, r7, #7
 801a0a4:	2202      	movs	r2, #2
 801a0a6:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801a0a8:	1dfb      	adds	r3, r7, #7
 801a0aa:	781b      	ldrb	r3, [r3, #0]
 801a0ac:	b25b      	sxtb	r3, r3
 801a0ae:	2b11      	cmp	r3, #17
 801a0b0:	dd02      	ble.n	801a0b8 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801a0b2:	1dfb      	adds	r3, r7, #7
 801a0b4:	2211      	movs	r2, #17
 801a0b6:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801a0b8:	200f      	movs	r0, #15
 801a0ba:	183b      	adds	r3, r7, r0
 801a0bc:	781b      	ldrb	r3, [r3, #0]
 801a0be:	b25b      	sxtb	r3, r3
 801a0c0:	220f      	movs	r2, #15
 801a0c2:	4393      	bics	r3, r2
 801a0c4:	b25a      	sxtb	r2, r3
 801a0c6:	1dfb      	adds	r3, r7, #7
 801a0c8:	781b      	ldrb	r3, [r3, #0]
 801a0ca:	3b02      	subs	r3, #2
 801a0cc:	b2db      	uxtb	r3, r3
 801a0ce:	b25b      	sxtb	r3, r3
 801a0d0:	210f      	movs	r1, #15
 801a0d2:	400b      	ands	r3, r1
 801a0d4:	b25b      	sxtb	r3, r3
 801a0d6:	4313      	orrs	r3, r2
 801a0d8:	b25a      	sxtb	r2, r3
 801a0da:	183b      	adds	r3, r7, r0
 801a0dc:	701a      	strb	r2, [r3, #0]
 801a0de:	e035      	b.n	801a14c <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801a0e0:	1dfb      	adds	r3, r7, #7
 801a0e2:	781b      	ldrb	r3, [r3, #0]
 801a0e4:	b25b      	sxtb	r3, r3
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	dd18      	ble.n	801a11c <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801a0ea:	1dfb      	adds	r3, r7, #7
 801a0ec:	781b      	ldrb	r3, [r3, #0]
 801a0ee:	b25b      	sxtb	r3, r3
 801a0f0:	2b0f      	cmp	r3, #15
 801a0f2:	dd02      	ble.n	801a0fa <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801a0f4:	1dfb      	adds	r3, r7, #7
 801a0f6:	220f      	movs	r2, #15
 801a0f8:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801a0fa:	210f      	movs	r1, #15
 801a0fc:	187b      	adds	r3, r7, r1
 801a0fe:	781b      	ldrb	r3, [r3, #0]
 801a100:	b25b      	sxtb	r3, r3
 801a102:	227f      	movs	r2, #127	; 0x7f
 801a104:	4393      	bics	r3, r2
 801a106:	b25b      	sxtb	r3, r3
 801a108:	2270      	movs	r2, #112	; 0x70
 801a10a:	4313      	orrs	r3, r2
 801a10c:	b25a      	sxtb	r2, r3
 801a10e:	1dfb      	adds	r3, r7, #7
 801a110:	781b      	ldrb	r3, [r3, #0]
 801a112:	4313      	orrs	r3, r2
 801a114:	b25a      	sxtb	r2, r3
 801a116:	187b      	adds	r3, r7, r1
 801a118:	701a      	strb	r2, [r3, #0]
 801a11a:	e017      	b.n	801a14c <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801a11c:	1dfb      	adds	r3, r7, #7
 801a11e:	781b      	ldrb	r3, [r3, #0]
 801a120:	b25b      	sxtb	r3, r3
 801a122:	3304      	adds	r3, #4
 801a124:	da02      	bge.n	801a12c <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801a126:	1dfb      	adds	r3, r7, #7
 801a128:	22fc      	movs	r2, #252	; 0xfc
 801a12a:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801a12c:	210f      	movs	r1, #15
 801a12e:	187b      	adds	r3, r7, r1
 801a130:	781b      	ldrb	r3, [r3, #0]
 801a132:	b25b      	sxtb	r3, r3
 801a134:	227f      	movs	r2, #127	; 0x7f
 801a136:	4393      	bics	r3, r2
 801a138:	b25a      	sxtb	r2, r3
 801a13a:	1dfb      	adds	r3, r7, #7
 801a13c:	781b      	ldrb	r3, [r3, #0]
 801a13e:	3304      	adds	r3, #4
 801a140:	b2db      	uxtb	r3, r3
 801a142:	b25b      	sxtb	r3, r3
 801a144:	4313      	orrs	r3, r2
 801a146:	b25a      	sxtb	r2, r3
 801a148:	187b      	adds	r3, r7, r1
 801a14a:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801a14c:	230f      	movs	r3, #15
 801a14e:	18fb      	adds	r3, r7, r3
 801a150:	781b      	ldrb	r3, [r3, #0]
 801a152:	0019      	movs	r1, r3
 801a154:	2009      	movs	r0, #9
 801a156:	f000 fc05 	bl	801a964 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801a15a:	230e      	movs	r3, #14
 801a15c:	18fb      	adds	r3, r7, r3
 801a15e:	781b      	ldrb	r3, [r3, #0]
 801a160:	0019      	movs	r1, r3
 801a162:	204d      	movs	r0, #77	; 0x4d
 801a164:	f000 fbfe 	bl	801a964 <SX1276Write>
}
 801a168:	46c0      	nop			; (mov r8, r8)
 801a16a:	46bd      	mov	sp, r7
 801a16c:	b005      	add	sp, #20
 801a16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a170:	20001584 	.word	0x20001584

0801a174 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801a174:	b580      	push	{r7, lr}
 801a176:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801a178:	4b0b      	ldr	r3, [pc, #44]	; (801a1a8 <SX1276SetSleep+0x34>)
 801a17a:	0018      	movs	r0, r3
 801a17c:	f002 fa5c 	bl	801c638 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a180:	4b0a      	ldr	r3, [pc, #40]	; (801a1ac <SX1276SetSleep+0x38>)
 801a182:	0018      	movs	r0, r3
 801a184:	f002 fa58 	bl	801c638 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a188:	4b09      	ldr	r3, [pc, #36]	; (801a1b0 <SX1276SetSleep+0x3c>)
 801a18a:	0018      	movs	r0, r3
 801a18c:	f002 fa54 	bl	801c638 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a190:	2000      	movs	r0, #0
 801a192:	f000 fb20 	bl	801a7d6 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801a196:	2000      	movs	r0, #0
 801a198:	f7eb f8a4 	bl	80052e4 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801a19c:	4b05      	ldr	r3, [pc, #20]	; (801a1b4 <SX1276SetSleep+0x40>)
 801a19e:	2200      	movs	r2, #0
 801a1a0:	711a      	strb	r2, [r3, #4]
}
 801a1a2:	46c0      	nop			; (mov r8, r8)
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}
 801a1a8:	20001604 	.word	0x20001604
 801a1ac:	200015ec 	.word	0x200015ec
 801a1b0:	2000161c 	.word	0x2000161c
 801a1b4:	20001584 	.word	0x20001584

0801a1b8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801a1bc:	4b0a      	ldr	r3, [pc, #40]	; (801a1e8 <SX1276SetStby+0x30>)
 801a1be:	0018      	movs	r0, r3
 801a1c0:	f002 fa3a 	bl	801c638 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a1c4:	4b09      	ldr	r3, [pc, #36]	; (801a1ec <SX1276SetStby+0x34>)
 801a1c6:	0018      	movs	r0, r3
 801a1c8:	f002 fa36 	bl	801c638 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a1cc:	4b08      	ldr	r3, [pc, #32]	; (801a1f0 <SX1276SetStby+0x38>)
 801a1ce:	0018      	movs	r0, r3
 801a1d0:	f002 fa32 	bl	801c638 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801a1d4:	2001      	movs	r0, #1
 801a1d6:	f000 fafe 	bl	801a7d6 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801a1da:	4b06      	ldr	r3, [pc, #24]	; (801a1f4 <SX1276SetStby+0x3c>)
 801a1dc:	2200      	movs	r2, #0
 801a1de:	711a      	strb	r2, [r3, #4]
}
 801a1e0:	46c0      	nop			; (mov r8, r8)
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	bd80      	pop	{r7, pc}
 801a1e6:	46c0      	nop			; (mov r8, r8)
 801a1e8:	20001604 	.word	0x20001604
 801a1ec:	200015ec 	.word	0x200015ec
 801a1f0:	2000161c 	.word	0x2000161c
 801a1f4:	20001584 	.word	0x20001584

0801a1f8 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b084      	sub	sp, #16
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801a200:	230f      	movs	r3, #15
 801a202:	18fb      	adds	r3, r7, r3
 801a204:	2200      	movs	r2, #0
 801a206:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801a208:	4bba      	ldr	r3, [pc, #744]	; (801a4f4 <SX1276SetRx+0x2fc>)
 801a20a:	0018      	movs	r0, r3
 801a20c:	f002 fa14 	bl	801c638 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801a210:	4bb9      	ldr	r3, [pc, #740]	; (801a4f8 <SX1276SetRx+0x300>)
 801a212:	795b      	ldrb	r3, [r3, #5]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d002      	beq.n	801a21e <SX1276SetRx+0x26>
 801a218:	2b01      	cmp	r3, #1
 801a21a:	d041      	beq.n	801a2a0 <SX1276SetRx+0xa8>
 801a21c:	e127      	b.n	801a46e <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801a21e:	230f      	movs	r3, #15
 801a220:	18fb      	adds	r3, r7, r3
 801a222:	4ab5      	ldr	r2, [pc, #724]	; (801a4f8 <SX1276SetRx+0x300>)
 801a224:	2126      	movs	r1, #38	; 0x26
 801a226:	5c52      	ldrb	r2, [r2, r1]
 801a228:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a22a:	2040      	movs	r0, #64	; 0x40
 801a22c:	f000 fbab 	bl	801a986 <SX1276Read>
 801a230:	0003      	movs	r3, r0
 801a232:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801a234:	2203      	movs	r2, #3
 801a236:	4013      	ands	r3, r2
 801a238:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801a23a:	220c      	movs	r2, #12
 801a23c:	4313      	orrs	r3, r2
 801a23e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a240:	b2db      	uxtb	r3, r3
 801a242:	0019      	movs	r1, r3
 801a244:	2040      	movs	r0, #64	; 0x40
 801a246:	f000 fb8d 	bl	801a964 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a24a:	2041      	movs	r0, #65	; 0x41
 801a24c:	f000 fb9b 	bl	801a986 <SX1276Read>
 801a250:	0003      	movs	r3, r0
 801a252:	001a      	movs	r2, r3
 801a254:	233f      	movs	r3, #63	; 0x3f
 801a256:	425b      	negs	r3, r3
 801a258:	4313      	orrs	r3, r2
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	0019      	movs	r1, r3
 801a25e:	2041      	movs	r0, #65	; 0x41
 801a260:	f000 fb80 	bl	801a964 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a264:	2035      	movs	r0, #53	; 0x35
 801a266:	f000 fb8e 	bl	801a986 <SX1276Read>
 801a26a:	0003      	movs	r3, r0
 801a26c:	001a      	movs	r2, r3
 801a26e:	233f      	movs	r3, #63	; 0x3f
 801a270:	4013      	ands	r3, r2
 801a272:	b2d9      	uxtb	r1, r3
 801a274:	4ba0      	ldr	r3, [pc, #640]	; (801a4f8 <SX1276SetRx+0x300>)
 801a276:	223e      	movs	r2, #62	; 0x3e
 801a278:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801a27a:	211e      	movs	r1, #30
 801a27c:	200d      	movs	r0, #13
 801a27e:	f000 fb71 	bl	801a964 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a282:	4b9d      	ldr	r3, [pc, #628]	; (801a4f8 <SX1276SetRx+0x300>)
 801a284:	2230      	movs	r2, #48	; 0x30
 801a286:	2100      	movs	r1, #0
 801a288:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a28a:	4b9b      	ldr	r3, [pc, #620]	; (801a4f8 <SX1276SetRx+0x300>)
 801a28c:	2231      	movs	r2, #49	; 0x31
 801a28e:	2100      	movs	r1, #0
 801a290:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a292:	4b99      	ldr	r3, [pc, #612]	; (801a4f8 <SX1276SetRx+0x300>)
 801a294:	2200      	movs	r2, #0
 801a296:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a298:	4b97      	ldr	r3, [pc, #604]	; (801a4f8 <SX1276SetRx+0x300>)
 801a29a:	2200      	movs	r2, #0
 801a29c:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801a29e:	e0e6      	b.n	801a46e <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a2a0:	4b95      	ldr	r3, [pc, #596]	; (801a4f8 <SX1276SetRx+0x300>)
 801a2a2:	2255      	movs	r2, #85	; 0x55
 801a2a4:	5c9b      	ldrb	r3, [r3, r2]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d010      	beq.n	801a2cc <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801a2aa:	2033      	movs	r0, #51	; 0x33
 801a2ac:	f000 fb6b 	bl	801a986 <SX1276Read>
 801a2b0:	0003      	movs	r3, r0
 801a2b2:	001a      	movs	r2, r3
 801a2b4:	2341      	movs	r3, #65	; 0x41
 801a2b6:	4313      	orrs	r3, r2
 801a2b8:	b2db      	uxtb	r3, r3
 801a2ba:	0019      	movs	r1, r3
 801a2bc:	2033      	movs	r0, #51	; 0x33
 801a2be:	f000 fb51 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a2c2:	2119      	movs	r1, #25
 801a2c4:	203b      	movs	r0, #59	; 0x3b
 801a2c6:	f000 fb4d 	bl	801a964 <SX1276Write>
 801a2ca:	e013      	b.n	801a2f4 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a2cc:	2033      	movs	r0, #51	; 0x33
 801a2ce:	f000 fb5a 	bl	801a986 <SX1276Read>
 801a2d2:	0003      	movs	r3, r0
 801a2d4:	b25b      	sxtb	r3, r3
 801a2d6:	2241      	movs	r2, #65	; 0x41
 801a2d8:	4393      	bics	r3, r2
 801a2da:	b25b      	sxtb	r3, r3
 801a2dc:	2201      	movs	r2, #1
 801a2de:	4313      	orrs	r3, r2
 801a2e0:	b25b      	sxtb	r3, r3
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	0019      	movs	r1, r3
 801a2e6:	2033      	movs	r0, #51	; 0x33
 801a2e8:	f000 fb3c 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a2ec:	211d      	movs	r1, #29
 801a2ee:	203b      	movs	r0, #59	; 0x3b
 801a2f0:	f000 fb38 	bl	801a964 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801a2f4:	4b80      	ldr	r3, [pc, #512]	; (801a4f8 <SX1276SetRx+0x300>)
 801a2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a2f8:	2b08      	cmp	r3, #8
 801a2fa:	d900      	bls.n	801a2fe <SX1276SetRx+0x106>
 801a2fc:	e075      	b.n	801a3ea <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801a2fe:	2031      	movs	r0, #49	; 0x31
 801a300:	f000 fb41 	bl	801a986 <SX1276Read>
 801a304:	0003      	movs	r3, r0
 801a306:	001a      	movs	r2, r3
 801a308:	237f      	movs	r3, #127	; 0x7f
 801a30a:	4013      	ands	r3, r2
 801a30c:	b2db      	uxtb	r3, r3
 801a30e:	0019      	movs	r1, r3
 801a310:	2031      	movs	r0, #49	; 0x31
 801a312:	f000 fb27 	bl	801a964 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801a316:	2100      	movs	r1, #0
 801a318:	2030      	movs	r0, #48	; 0x30
 801a31a:	f000 fb23 	bl	801a964 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801a31e:	4b76      	ldr	r3, [pc, #472]	; (801a4f8 <SX1276SetRx+0x300>)
 801a320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a322:	2b08      	cmp	r3, #8
 801a324:	d86e      	bhi.n	801a404 <SX1276SetRx+0x20c>
 801a326:	009a      	lsls	r2, r3, #2
 801a328:	4b74      	ldr	r3, [pc, #464]	; (801a4fc <SX1276SetRx+0x304>)
 801a32a:	18d3      	adds	r3, r2, r3
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801a330:	2148      	movs	r1, #72	; 0x48
 801a332:	202f      	movs	r0, #47	; 0x2f
 801a334:	f000 fb16 	bl	801a964 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801a338:	4b6f      	ldr	r3, [pc, #444]	; (801a4f8 <SX1276SetRx+0x300>)
 801a33a:	689b      	ldr	r3, [r3, #8]
 801a33c:	4a70      	ldr	r2, [pc, #448]	; (801a500 <SX1276SetRx+0x308>)
 801a33e:	4694      	mov	ip, r2
 801a340:	4463      	add	r3, ip
 801a342:	0018      	movs	r0, r3
 801a344:	f7fe fee6 	bl	8019114 <SX1276SetChannel>
                    break;
 801a348:	e05c      	b.n	801a404 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a34a:	2144      	movs	r1, #68	; 0x44
 801a34c:	202f      	movs	r0, #47	; 0x2f
 801a34e:	f000 fb09 	bl	801a964 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801a352:	4b69      	ldr	r3, [pc, #420]	; (801a4f8 <SX1276SetRx+0x300>)
 801a354:	689b      	ldr	r3, [r3, #8]
 801a356:	4a6b      	ldr	r2, [pc, #428]	; (801a504 <SX1276SetRx+0x30c>)
 801a358:	4694      	mov	ip, r2
 801a35a:	4463      	add	r3, ip
 801a35c:	0018      	movs	r0, r3
 801a35e:	f7fe fed9 	bl	8019114 <SX1276SetChannel>
                    break;
 801a362:	e04f      	b.n	801a404 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a364:	2144      	movs	r1, #68	; 0x44
 801a366:	202f      	movs	r0, #47	; 0x2f
 801a368:	f000 fafc 	bl	801a964 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801a36c:	4b62      	ldr	r3, [pc, #392]	; (801a4f8 <SX1276SetRx+0x300>)
 801a36e:	689b      	ldr	r3, [r3, #8]
 801a370:	4a65      	ldr	r2, [pc, #404]	; (801a508 <SX1276SetRx+0x310>)
 801a372:	4694      	mov	ip, r2
 801a374:	4463      	add	r3, ip
 801a376:	0018      	movs	r0, r3
 801a378:	f7fe fecc 	bl	8019114 <SX1276SetChannel>
                    break;
 801a37c:	e042      	b.n	801a404 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a37e:	2144      	movs	r1, #68	; 0x44
 801a380:	202f      	movs	r0, #47	; 0x2f
 801a382:	f000 faef 	bl	801a964 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801a386:	4b5c      	ldr	r3, [pc, #368]	; (801a4f8 <SX1276SetRx+0x300>)
 801a388:	689b      	ldr	r3, [r3, #8]
 801a38a:	4a60      	ldr	r2, [pc, #384]	; (801a50c <SX1276SetRx+0x314>)
 801a38c:	4694      	mov	ip, r2
 801a38e:	4463      	add	r3, ip
 801a390:	0018      	movs	r0, r3
 801a392:	f7fe febf 	bl	8019114 <SX1276SetChannel>
                    break;
 801a396:	e035      	b.n	801a404 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a398:	2144      	movs	r1, #68	; 0x44
 801a39a:	202f      	movs	r0, #47	; 0x2f
 801a39c:	f000 fae2 	bl	801a964 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801a3a0:	4b55      	ldr	r3, [pc, #340]	; (801a4f8 <SX1276SetRx+0x300>)
 801a3a2:	689b      	ldr	r3, [r3, #8]
 801a3a4:	4a5a      	ldr	r2, [pc, #360]	; (801a510 <SX1276SetRx+0x318>)
 801a3a6:	4694      	mov	ip, r2
 801a3a8:	4463      	add	r3, ip
 801a3aa:	0018      	movs	r0, r3
 801a3ac:	f7fe feb2 	bl	8019114 <SX1276SetChannel>
                    break;
 801a3b0:	e028      	b.n	801a404 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a3b2:	2144      	movs	r1, #68	; 0x44
 801a3b4:	202f      	movs	r0, #47	; 0x2f
 801a3b6:	f000 fad5 	bl	801a964 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801a3ba:	4b4f      	ldr	r3, [pc, #316]	; (801a4f8 <SX1276SetRx+0x300>)
 801a3bc:	689b      	ldr	r3, [r3, #8]
 801a3be:	4a55      	ldr	r2, [pc, #340]	; (801a514 <SX1276SetRx+0x31c>)
 801a3c0:	4694      	mov	ip, r2
 801a3c2:	4463      	add	r3, ip
 801a3c4:	0018      	movs	r0, r3
 801a3c6:	f7fe fea5 	bl	8019114 <SX1276SetChannel>
                    break;
 801a3ca:	e01b      	b.n	801a404 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a3cc:	2140      	movs	r1, #64	; 0x40
 801a3ce:	202f      	movs	r0, #47	; 0x2f
 801a3d0:	f000 fac8 	bl	801a964 <SX1276Write>
                    break;
 801a3d4:	e016      	b.n	801a404 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a3d6:	2140      	movs	r1, #64	; 0x40
 801a3d8:	202f      	movs	r0, #47	; 0x2f
 801a3da:	f000 fac3 	bl	801a964 <SX1276Write>
                    break;
 801a3de:	e011      	b.n	801a404 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a3e0:	2140      	movs	r1, #64	; 0x40
 801a3e2:	202f      	movs	r0, #47	; 0x2f
 801a3e4:	f000 fabe 	bl	801a964 <SX1276Write>
                    break;
 801a3e8:	e00c      	b.n	801a404 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801a3ea:	2031      	movs	r0, #49	; 0x31
 801a3ec:	f000 facb 	bl	801a986 <SX1276Read>
 801a3f0:	0003      	movs	r3, r0
 801a3f2:	001a      	movs	r2, r3
 801a3f4:	2380      	movs	r3, #128	; 0x80
 801a3f6:	425b      	negs	r3, r3
 801a3f8:	4313      	orrs	r3, r2
 801a3fa:	b2db      	uxtb	r3, r3
 801a3fc:	0019      	movs	r1, r3
 801a3fe:	2031      	movs	r0, #49	; 0x31
 801a400:	f000 fab0 	bl	801a964 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801a404:	230f      	movs	r3, #15
 801a406:	18fb      	adds	r3, r7, r3
 801a408:	4a3b      	ldr	r2, [pc, #236]	; (801a4f8 <SX1276SetRx+0x300>)
 801a40a:	2156      	movs	r1, #86	; 0x56
 801a40c:	5c52      	ldrb	r2, [r2, r1]
 801a40e:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a410:	4b39      	ldr	r3, [pc, #228]	; (801a4f8 <SX1276SetRx+0x300>)
 801a412:	2253      	movs	r2, #83	; 0x53
 801a414:	5c9b      	ldrb	r3, [r3, r2]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d010      	beq.n	801a43c <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801a41a:	211d      	movs	r1, #29
 801a41c:	2011      	movs	r0, #17
 801a41e:	f000 faa1 	bl	801a964 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801a422:	2040      	movs	r0, #64	; 0x40
 801a424:	f000 faaf 	bl	801a986 <SX1276Read>
 801a428:	0003      	movs	r3, r0
 801a42a:	001a      	movs	r2, r3
 801a42c:	2333      	movs	r3, #51	; 0x33
 801a42e:	4013      	ands	r3, r2
 801a430:	b2db      	uxtb	r3, r3
 801a432:	0019      	movs	r1, r3
 801a434:	2040      	movs	r0, #64	; 0x40
 801a436:	f000 fa95 	bl	801a964 <SX1276Write>
 801a43a:	e00f      	b.n	801a45c <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801a43c:	211f      	movs	r1, #31
 801a43e:	2011      	movs	r0, #17
 801a440:	f000 fa90 	bl	801a964 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801a444:	2040      	movs	r0, #64	; 0x40
 801a446:	f000 fa9e 	bl	801a986 <SX1276Read>
 801a44a:	0003      	movs	r3, r0
 801a44c:	001a      	movs	r2, r3
 801a44e:	233f      	movs	r3, #63	; 0x3f
 801a450:	4013      	ands	r3, r2
 801a452:	b2db      	uxtb	r3, r3
 801a454:	0019      	movs	r1, r3
 801a456:	2040      	movs	r0, #64	; 0x40
 801a458:	f000 fa84 	bl	801a964 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801a45c:	2100      	movs	r1, #0
 801a45e:	200f      	movs	r0, #15
 801a460:	f000 fa80 	bl	801a964 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a464:	2100      	movs	r1, #0
 801a466:	200d      	movs	r0, #13
 801a468:	f000 fa7c 	bl	801a964 <SX1276Write>
        }
        break;
 801a46c:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801a46e:	2380      	movs	r3, #128	; 0x80
 801a470:	005a      	lsls	r2, r3, #1
 801a472:	4b29      	ldr	r3, [pc, #164]	; (801a518 <SX1276SetRx+0x320>)
 801a474:	2100      	movs	r1, #0
 801a476:	0018      	movs	r0, r3
 801a478:	f003 fa31 	bl	801d8de <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801a47c:	4b1e      	ldr	r3, [pc, #120]	; (801a4f8 <SX1276SetRx+0x300>)
 801a47e:	2201      	movs	r2, #1
 801a480:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d009      	beq.n	801a49c <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a488:	687a      	ldr	r2, [r7, #4]
 801a48a:	4b24      	ldr	r3, [pc, #144]	; (801a51c <SX1276SetRx+0x324>)
 801a48c:	0011      	movs	r1, r2
 801a48e:	0018      	movs	r0, r3
 801a490:	f002 f94a 	bl	801c728 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a494:	4b21      	ldr	r3, [pc, #132]	; (801a51c <SX1276SetRx+0x324>)
 801a496:	0018      	movs	r0, r3
 801a498:	f002 f856 	bl	801c548 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801a49c:	4b16      	ldr	r3, [pc, #88]	; (801a4f8 <SX1276SetRx+0x300>)
 801a49e:	795b      	ldrb	r3, [r3, #5]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d116      	bne.n	801a4d2 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801a4a4:	2005      	movs	r0, #5
 801a4a6:	f000 f996 	bl	801a7d6 <SX1276SetOpMode>

        if( rxContinuous == false )
 801a4aa:	230f      	movs	r3, #15
 801a4ac:	18fb      	adds	r3, r7, r3
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	2201      	movs	r2, #1
 801a4b2:	4053      	eors	r3, r2
 801a4b4:	b2db      	uxtb	r3, r3
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d017      	beq.n	801a4ea <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801a4ba:	4b0f      	ldr	r3, [pc, #60]	; (801a4f8 <SX1276SetRx+0x300>)
 801a4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a4be:	4b18      	ldr	r3, [pc, #96]	; (801a520 <SX1276SetRx+0x328>)
 801a4c0:	0011      	movs	r1, r2
 801a4c2:	0018      	movs	r0, r3
 801a4c4:	f002 f930 	bl	801c728 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801a4c8:	4b15      	ldr	r3, [pc, #84]	; (801a520 <SX1276SetRx+0x328>)
 801a4ca:	0018      	movs	r0, r3
 801a4cc:	f002 f83c 	bl	801c548 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801a4d0:	e00b      	b.n	801a4ea <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801a4d2:	230f      	movs	r3, #15
 801a4d4:	18fb      	adds	r3, r7, r3
 801a4d6:	781b      	ldrb	r3, [r3, #0]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d003      	beq.n	801a4e4 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801a4dc:	2005      	movs	r0, #5
 801a4de:	f000 f97a 	bl	801a7d6 <SX1276SetOpMode>
}
 801a4e2:	e002      	b.n	801a4ea <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801a4e4:	2006      	movs	r0, #6
 801a4e6:	f000 f976 	bl	801a7d6 <SX1276SetOpMode>
}
 801a4ea:	46c0      	nop			; (mov r8, r8)
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	b004      	add	sp, #16
 801a4f0:	bd80      	pop	{r7, pc}
 801a4f2:	46c0      	nop			; (mov r8, r8)
 801a4f4:	200015ec 	.word	0x200015ec
 801a4f8:	20001584 	.word	0x20001584
 801a4fc:	0801edc4 	.word	0x0801edc4
 801a500:	00001e82 	.word	0x00001e82
 801a504:	000028b4 	.word	0x000028b4
 801a508:	00003d04 	.word	0x00003d04
 801a50c:	0000515e 	.word	0x0000515e
 801a510:	00007a12 	.word	0x00007a12
 801a514:	0000a2c6 	.word	0x0000a2c6
 801a518:	20001484 	.word	0x20001484
 801a51c:	20001604 	.word	0x20001604
 801a520:	2000161c 	.word	0x2000161c

0801a524 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801a524:	b580      	push	{r7, lr}
 801a526:	b082      	sub	sp, #8
 801a528:	af00      	add	r7, sp, #0
 801a52a:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801a52c:	4b38      	ldr	r3, [pc, #224]	; (801a610 <SX1276SetTx+0xec>)
 801a52e:	0018      	movs	r0, r3
 801a530:	f002 f882 	bl	801c638 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a534:	687a      	ldr	r2, [r7, #4]
 801a536:	4b37      	ldr	r3, [pc, #220]	; (801a614 <SX1276SetTx+0xf0>)
 801a538:	0011      	movs	r1, r2
 801a53a:	0018      	movs	r0, r3
 801a53c:	f002 f8f4 	bl	801c728 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801a540:	4b35      	ldr	r3, [pc, #212]	; (801a618 <SX1276SetTx+0xf4>)
 801a542:	795b      	ldrb	r3, [r3, #5]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d002      	beq.n	801a54e <SX1276SetTx+0x2a>
 801a548:	2b01      	cmp	r3, #1
 801a54a:	d024      	beq.n	801a596 <SX1276SetTx+0x72>
 801a54c:	e052      	b.n	801a5f4 <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a54e:	2040      	movs	r0, #64	; 0x40
 801a550:	f000 fa19 	bl	801a986 <SX1276Read>
 801a554:	0003      	movs	r3, r0
 801a556:	001a      	movs	r2, r3
 801a558:	2303      	movs	r3, #3
 801a55a:	4013      	ands	r3, r2
 801a55c:	b2db      	uxtb	r3, r3
 801a55e:	0019      	movs	r1, r3
 801a560:	2040      	movs	r0, #64	; 0x40
 801a562:	f000 f9ff 	bl	801a964 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a566:	2041      	movs	r0, #65	; 0x41
 801a568:	f000 fa0d 	bl	801a986 <SX1276Read>
 801a56c:	0003      	movs	r3, r0
 801a56e:	001a      	movs	r2, r3
 801a570:	233e      	movs	r3, #62	; 0x3e
 801a572:	4013      	ands	r3, r2
 801a574:	b2db      	uxtb	r3, r3
 801a576:	0019      	movs	r1, r3
 801a578:	2041      	movs	r0, #65	; 0x41
 801a57a:	f000 f9f3 	bl	801a964 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a57e:	2035      	movs	r0, #53	; 0x35
 801a580:	f000 fa01 	bl	801a986 <SX1276Read>
 801a584:	0003      	movs	r3, r0
 801a586:	001a      	movs	r2, r3
 801a588:	233f      	movs	r3, #63	; 0x3f
 801a58a:	4013      	ands	r3, r2
 801a58c:	b2d9      	uxtb	r1, r3
 801a58e:	4b22      	ldr	r3, [pc, #136]	; (801a618 <SX1276SetTx+0xf4>)
 801a590:	223e      	movs	r2, #62	; 0x3e
 801a592:	5499      	strb	r1, [r3, r2]
        }
        break;
 801a594:	e02e      	b.n	801a5f4 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a596:	4b20      	ldr	r3, [pc, #128]	; (801a618 <SX1276SetTx+0xf4>)
 801a598:	2253      	movs	r2, #83	; 0x53
 801a59a:	5c9b      	ldrb	r3, [r3, r2]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d014      	beq.n	801a5ca <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a5a0:	21f5      	movs	r1, #245	; 0xf5
 801a5a2:	2011      	movs	r0, #17
 801a5a4:	f000 f9de 	bl	801a964 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801a5a8:	2040      	movs	r0, #64	; 0x40
 801a5aa:	f000 f9ec 	bl	801a986 <SX1276Read>
 801a5ae:	0003      	movs	r3, r0
 801a5b0:	b25b      	sxtb	r3, r3
 801a5b2:	2233      	movs	r2, #51	; 0x33
 801a5b4:	4013      	ands	r3, r2
 801a5b6:	b25b      	sxtb	r3, r3
 801a5b8:	2240      	movs	r2, #64	; 0x40
 801a5ba:	4313      	orrs	r3, r2
 801a5bc:	b25b      	sxtb	r3, r3
 801a5be:	b2db      	uxtb	r3, r3
 801a5c0:	0019      	movs	r1, r3
 801a5c2:	2040      	movs	r0, #64	; 0x40
 801a5c4:	f000 f9ce 	bl	801a964 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801a5c8:	e013      	b.n	801a5f2 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a5ca:	21f7      	movs	r1, #247	; 0xf7
 801a5cc:	2011      	movs	r0, #17
 801a5ce:	f000 f9c9 	bl	801a964 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801a5d2:	2040      	movs	r0, #64	; 0x40
 801a5d4:	f000 f9d7 	bl	801a986 <SX1276Read>
 801a5d8:	0003      	movs	r3, r0
 801a5da:	b25b      	sxtb	r3, r3
 801a5dc:	223f      	movs	r2, #63	; 0x3f
 801a5de:	4013      	ands	r3, r2
 801a5e0:	b25b      	sxtb	r3, r3
 801a5e2:	2240      	movs	r2, #64	; 0x40
 801a5e4:	4313      	orrs	r3, r2
 801a5e6:	b25b      	sxtb	r3, r3
 801a5e8:	b2db      	uxtb	r3, r3
 801a5ea:	0019      	movs	r1, r3
 801a5ec:	2040      	movs	r0, #64	; 0x40
 801a5ee:	f000 f9b9 	bl	801a964 <SX1276Write>
        break;
 801a5f2:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801a5f4:	4b08      	ldr	r3, [pc, #32]	; (801a618 <SX1276SetTx+0xf4>)
 801a5f6:	2202      	movs	r2, #2
 801a5f8:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801a5fa:	4b06      	ldr	r3, [pc, #24]	; (801a614 <SX1276SetTx+0xf0>)
 801a5fc:	0018      	movs	r0, r3
 801a5fe:	f001 ffa3 	bl	801c548 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801a602:	2003      	movs	r0, #3
 801a604:	f000 f8e7 	bl	801a7d6 <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801a608:	46c0      	nop			; (mov r8, r8)
 801a60a:	46bd      	mov	sp, r7
 801a60c:	b002      	add	sp, #8
 801a60e:	bd80      	pop	{r7, pc}
 801a610:	20001604 	.word	0x20001604
 801a614:	200015ec 	.word	0x200015ec
 801a618:	20001584 	.word	0x20001584

0801a61c <SX1276StartCad>:

void SX1276StartCad( void )
{
 801a61c:	b580      	push	{r7, lr}
 801a61e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801a620:	4b11      	ldr	r3, [pc, #68]	; (801a668 <SX1276StartCad+0x4c>)
 801a622:	795b      	ldrb	r3, [r3, #5]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d01a      	beq.n	801a65e <SX1276StartCad+0x42>
 801a628:	2b01      	cmp	r3, #1
 801a62a:	d000      	beq.n	801a62e <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801a62c:	e018      	b.n	801a660 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a62e:	21fa      	movs	r1, #250	; 0xfa
 801a630:	2011      	movs	r0, #17
 801a632:	f000 f997 	bl	801a964 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801a636:	2040      	movs	r0, #64	; 0x40
 801a638:	f000 f9a5 	bl	801a986 <SX1276Read>
 801a63c:	0003      	movs	r3, r0
 801a63e:	001a      	movs	r2, r3
 801a640:	2303      	movs	r3, #3
 801a642:	439a      	bics	r2, r3
 801a644:	0013      	movs	r3, r2
 801a646:	b2db      	uxtb	r3, r3
 801a648:	0019      	movs	r1, r3
 801a64a:	2040      	movs	r0, #64	; 0x40
 801a64c:	f000 f98a 	bl	801a964 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801a650:	4b05      	ldr	r3, [pc, #20]	; (801a668 <SX1276StartCad+0x4c>)
 801a652:	2203      	movs	r2, #3
 801a654:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801a656:	2007      	movs	r0, #7
 801a658:	f000 f8bd 	bl	801a7d6 <SX1276SetOpMode>
        break;
 801a65c:	e000      	b.n	801a660 <SX1276StartCad+0x44>
        break;
 801a65e:	46c0      	nop			; (mov r8, r8)
    }
}
 801a660:	46c0      	nop			; (mov r8, r8)
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}
 801a666:	46c0      	nop			; (mov r8, r8)
 801a668:	20001584 	.word	0x20001584

0801a66c <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b08e      	sub	sp, #56	; 0x38
 801a670:	af0a      	add	r7, sp, #40	; 0x28
 801a672:	6078      	str	r0, [r7, #4]
 801a674:	0008      	movs	r0, r1
 801a676:	0011      	movs	r1, r2
 801a678:	1cfb      	adds	r3, r7, #3
 801a67a:	1c02      	adds	r2, r0, #0
 801a67c:	701a      	strb	r2, [r3, #0]
 801a67e:	003b      	movs	r3, r7
 801a680:	1c0a      	adds	r2, r1, #0
 801a682:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801a684:	003b      	movs	r3, r7
 801a686:	881a      	ldrh	r2, [r3, #0]
 801a688:	0013      	movs	r3, r2
 801a68a:	015b      	lsls	r3, r3, #5
 801a68c:	1a9b      	subs	r3, r3, r2
 801a68e:	009b      	lsls	r3, r3, #2
 801a690:	189b      	adds	r3, r3, r2
 801a692:	00db      	lsls	r3, r3, #3
 801a694:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	0018      	movs	r0, r3
 801a69a:	f7fe fd3b 	bl	8019114 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801a69e:	1cfb      	adds	r3, r7, #3
 801a6a0:	2100      	movs	r1, #0
 801a6a2:	5659      	ldrsb	r1, [r3, r1]
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	9308      	str	r3, [sp, #32]
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	9307      	str	r3, [sp, #28]
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	9306      	str	r3, [sp, #24]
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	9305      	str	r3, [sp, #20]
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	9304      	str	r3, [sp, #16]
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	9303      	str	r3, [sp, #12]
 801a6bc:	2305      	movs	r3, #5
 801a6be:	9302      	str	r3, [sp, #8]
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	9301      	str	r3, [sp, #4]
 801a6c4:	2396      	movs	r3, #150	; 0x96
 801a6c6:	015b      	lsls	r3, r3, #5
 801a6c8:	9300      	str	r3, [sp, #0]
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	2000      	movs	r0, #0
 801a6d0:	f7ff f8e8 	bl	80198a4 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801a6d4:	2031      	movs	r0, #49	; 0x31
 801a6d6:	f000 f956 	bl	801a986 <SX1276Read>
 801a6da:	0003      	movs	r3, r0
 801a6dc:	001a      	movs	r2, r3
 801a6de:	2340      	movs	r3, #64	; 0x40
 801a6e0:	439a      	bics	r2, r3
 801a6e2:	0013      	movs	r3, r2
 801a6e4:	b2db      	uxtb	r3, r3
 801a6e6:	0019      	movs	r1, r3
 801a6e8:	2031      	movs	r0, #49	; 0x31
 801a6ea:	f000 f93b 	bl	801a964 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801a6ee:	21f0      	movs	r1, #240	; 0xf0
 801a6f0:	2040      	movs	r0, #64	; 0x40
 801a6f2:	f000 f937 	bl	801a964 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801a6f6:	21a0      	movs	r1, #160	; 0xa0
 801a6f8:	2041      	movs	r0, #65	; 0x41
 801a6fa:	f000 f933 	bl	801a964 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a6fe:	68fa      	ldr	r2, [r7, #12]
 801a700:	4b09      	ldr	r3, [pc, #36]	; (801a728 <SX1276SetTxContinuousWave+0xbc>)
 801a702:	0011      	movs	r1, r2
 801a704:	0018      	movs	r0, r3
 801a706:	f002 f80f 	bl	801c728 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801a70a:	4b08      	ldr	r3, [pc, #32]	; (801a72c <SX1276SetTxContinuousWave+0xc0>)
 801a70c:	2202      	movs	r2, #2
 801a70e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801a710:	4b05      	ldr	r3, [pc, #20]	; (801a728 <SX1276SetTxContinuousWave+0xbc>)
 801a712:	0018      	movs	r0, r3
 801a714:	f001 ff18 	bl	801c548 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801a718:	2003      	movs	r0, #3
 801a71a:	f000 f85c 	bl	801a7d6 <SX1276SetOpMode>
}
 801a71e:	46c0      	nop			; (mov r8, r8)
 801a720:	46bd      	mov	sp, r7
 801a722:	b004      	add	sp, #16
 801a724:	bd80      	pop	{r7, pc}
 801a726:	46c0      	nop			; (mov r8, r8)
 801a728:	200015ec 	.word	0x200015ec
 801a72c:	20001584 	.word	0x20001584

0801a730 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b084      	sub	sp, #16
 801a734:	af00      	add	r7, sp, #0
 801a736:	0002      	movs	r2, r0
 801a738:	1dfb      	adds	r3, r7, #7
 801a73a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801a73c:	230e      	movs	r3, #14
 801a73e:	18fb      	adds	r3, r7, r3
 801a740:	2200      	movs	r2, #0
 801a742:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801a744:	1dfb      	adds	r3, r7, #7
 801a746:	781b      	ldrb	r3, [r3, #0]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d002      	beq.n	801a752 <SX1276ReadRssi+0x22>
 801a74c:	2b01      	cmp	r3, #1
 801a74e:	d00d      	beq.n	801a76c <SX1276ReadRssi+0x3c>
 801a750:	e027      	b.n	801a7a2 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801a752:	2011      	movs	r0, #17
 801a754:	f000 f917 	bl	801a986 <SX1276Read>
 801a758:	0003      	movs	r3, r0
 801a75a:	085b      	lsrs	r3, r3, #1
 801a75c:	b2db      	uxtb	r3, r3
 801a75e:	b29b      	uxth	r3, r3
 801a760:	425b      	negs	r3, r3
 801a762:	b29a      	uxth	r2, r3
 801a764:	230e      	movs	r3, #14
 801a766:	18fb      	adds	r3, r7, r3
 801a768:	801a      	strh	r2, [r3, #0]
        break;
 801a76a:	e020      	b.n	801a7ae <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801a76c:	4b14      	ldr	r3, [pc, #80]	; (801a7c0 <SX1276ReadRssi+0x90>)
 801a76e:	689b      	ldr	r3, [r3, #8]
 801a770:	4a14      	ldr	r2, [pc, #80]	; (801a7c4 <SX1276ReadRssi+0x94>)
 801a772:	4293      	cmp	r3, r2
 801a774:	d90a      	bls.n	801a78c <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801a776:	201b      	movs	r0, #27
 801a778:	f000 f905 	bl	801a986 <SX1276Read>
 801a77c:	0003      	movs	r3, r0
 801a77e:	b29b      	uxth	r3, r3
 801a780:	3b9d      	subs	r3, #157	; 0x9d
 801a782:	b29a      	uxth	r2, r3
 801a784:	230e      	movs	r3, #14
 801a786:	18fb      	adds	r3, r7, r3
 801a788:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801a78a:	e010      	b.n	801a7ae <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801a78c:	201b      	movs	r0, #27
 801a78e:	f000 f8fa 	bl	801a986 <SX1276Read>
 801a792:	0003      	movs	r3, r0
 801a794:	b29b      	uxth	r3, r3
 801a796:	3ba4      	subs	r3, #164	; 0xa4
 801a798:	b29a      	uxth	r2, r3
 801a79a:	230e      	movs	r3, #14
 801a79c:	18fb      	adds	r3, r7, r3
 801a79e:	801a      	strh	r2, [r3, #0]
        break;
 801a7a0:	e005      	b.n	801a7ae <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801a7a2:	230e      	movs	r3, #14
 801a7a4:	18fb      	adds	r3, r7, r3
 801a7a6:	2201      	movs	r2, #1
 801a7a8:	4252      	negs	r2, r2
 801a7aa:	801a      	strh	r2, [r3, #0]
        break;
 801a7ac:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801a7ae:	230e      	movs	r3, #14
 801a7b0:	18fb      	adds	r3, r7, r3
 801a7b2:	2200      	movs	r2, #0
 801a7b4:	5e9b      	ldrsh	r3, [r3, r2]
}
 801a7b6:	0018      	movs	r0, r3
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	b004      	add	sp, #16
 801a7bc:	bd80      	pop	{r7, pc}
 801a7be:	46c0      	nop			; (mov r8, r8)
 801a7c0:	20001584 	.word	0x20001584
 801a7c4:	1f4add40 	.word	0x1f4add40

0801a7c8 <SX1276Reset>:

static void SX1276Reset( void )
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801a7cc:	f7ea ffa8 	bl	8005720 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801a7d0:	46c0      	nop			; (mov r8, r8)
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}

0801a7d6 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801a7d6:	b5b0      	push	{r4, r5, r7, lr}
 801a7d8:	b084      	sub	sp, #16
 801a7da:	af00      	add	r7, sp, #0
 801a7dc:	0002      	movs	r2, r0
 801a7de:	1dfb      	adds	r3, r7, #7
 801a7e0:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801a7e2:	1dfb      	adds	r3, r7, #7
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d118      	bne.n	801a81c <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a7ea:	2001      	movs	r0, #1
 801a7ec:	f000 f8cb 	bl	801a986 <SX1276Read>
 801a7f0:	0003      	movs	r3, r0
 801a7f2:	b25b      	sxtb	r3, r3
 801a7f4:	2207      	movs	r2, #7
 801a7f6:	4393      	bics	r3, r2
 801a7f8:	b25a      	sxtb	r2, r3
 801a7fa:	1dfb      	adds	r3, r7, #7
 801a7fc:	781b      	ldrb	r3, [r3, #0]
 801a7fe:	b25b      	sxtb	r3, r3
 801a800:	4313      	orrs	r3, r2
 801a802:	b25b      	sxtb	r3, r3
 801a804:	b2db      	uxtb	r3, r3
 801a806:	0019      	movs	r1, r3
 801a808:	2001      	movs	r0, #1
 801a80a:	f000 f8ab 	bl	801a964 <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801a80e:	2000      	movs	r0, #0
 801a810:	f7ea ff26 	bl	8005660 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801a814:	2000      	movs	r0, #0
 801a816:	f7ea fd65 	bl	80052e4 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801a81a:	e044      	b.n	801a8a6 <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801a81c:	1dfb      	adds	r3, r7, #7
 801a81e:	781b      	ldrb	r3, [r3, #0]
 801a820:	2b05      	cmp	r3, #5
 801a822:	d118      	bne.n	801a856 <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801a824:	2001      	movs	r0, #1
 801a826:	f7ea fd5d 	bl	80052e4 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801a82a:	2001      	movs	r0, #1
 801a82c:	f7ea ff18 	bl	8005660 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a830:	2001      	movs	r0, #1
 801a832:	f000 f8a8 	bl	801a986 <SX1276Read>
 801a836:	0003      	movs	r3, r0
 801a838:	b25b      	sxtb	r3, r3
 801a83a:	2207      	movs	r2, #7
 801a83c:	4393      	bics	r3, r2
 801a83e:	b25a      	sxtb	r2, r3
 801a840:	1dfb      	adds	r3, r7, #7
 801a842:	781b      	ldrb	r3, [r3, #0]
 801a844:	b25b      	sxtb	r3, r3
 801a846:	4313      	orrs	r3, r2
 801a848:	b25b      	sxtb	r3, r3
 801a84a:	b2db      	uxtb	r3, r3
 801a84c:	0019      	movs	r1, r3
 801a84e:	2001      	movs	r0, #1
 801a850:	f000 f888 	bl	801a964 <SX1276Write>
}
 801a854:	e027      	b.n	801a8a6 <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801a856:	250f      	movs	r5, #15
 801a858:	197c      	adds	r4, r7, r5
 801a85a:	2009      	movs	r0, #9
 801a85c:	f000 f893 	bl	801a986 <SX1276Read>
 801a860:	0003      	movs	r3, r0
 801a862:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801a864:	2001      	movs	r0, #1
 801a866:	f7ea fd3d 	bl	80052e4 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a86a:	197b      	adds	r3, r7, r5
 801a86c:	781b      	ldrb	r3, [r3, #0]
 801a86e:	b25b      	sxtb	r3, r3
 801a870:	2b00      	cmp	r3, #0
 801a872:	da03      	bge.n	801a87c <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801a874:	2003      	movs	r0, #3
 801a876:	f7ea fef3 	bl	8005660 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801a87a:	e002      	b.n	801a882 <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801a87c:	2002      	movs	r0, #2
 801a87e:	f7ea feef 	bl	8005660 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a882:	2001      	movs	r0, #1
 801a884:	f000 f87f 	bl	801a986 <SX1276Read>
 801a888:	0003      	movs	r3, r0
 801a88a:	b25b      	sxtb	r3, r3
 801a88c:	2207      	movs	r2, #7
 801a88e:	4393      	bics	r3, r2
 801a890:	b25a      	sxtb	r2, r3
 801a892:	1dfb      	adds	r3, r7, #7
 801a894:	781b      	ldrb	r3, [r3, #0]
 801a896:	b25b      	sxtb	r3, r3
 801a898:	4313      	orrs	r3, r2
 801a89a:	b25b      	sxtb	r3, r3
 801a89c:	b2db      	uxtb	r3, r3
 801a89e:	0019      	movs	r1, r3
 801a8a0:	2001      	movs	r0, #1
 801a8a2:	f000 f85f 	bl	801a964 <SX1276Write>
}
 801a8a6:	46c0      	nop			; (mov r8, r8)
 801a8a8:	46bd      	mov	sp, r7
 801a8aa:	b004      	add	sp, #16
 801a8ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a8b0 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b082      	sub	sp, #8
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	0002      	movs	r2, r0
 801a8b8:	1dfb      	adds	r3, r7, #7
 801a8ba:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801a8bc:	2001      	movs	r0, #1
 801a8be:	f000 f862 	bl	801a986 <SX1276Read>
 801a8c2:	0003      	movs	r3, r0
 801a8c4:	b25b      	sxtb	r3, r3
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	da03      	bge.n	801a8d2 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801a8ca:	4b25      	ldr	r3, [pc, #148]	; (801a960 <SX1276SetModem+0xb0>)
 801a8cc:	2201      	movs	r2, #1
 801a8ce:	715a      	strb	r2, [r3, #5]
 801a8d0:	e002      	b.n	801a8d8 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801a8d2:	4b23      	ldr	r3, [pc, #140]	; (801a960 <SX1276SetModem+0xb0>)
 801a8d4:	2200      	movs	r2, #0
 801a8d6:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801a8d8:	4b21      	ldr	r3, [pc, #132]	; (801a960 <SX1276SetModem+0xb0>)
 801a8da:	795b      	ldrb	r3, [r3, #5]
 801a8dc:	1dfa      	adds	r2, r7, #7
 801a8de:	7812      	ldrb	r2, [r2, #0]
 801a8e0:	429a      	cmp	r2, r3
 801a8e2:	d038      	beq.n	801a956 <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801a8e4:	4b1e      	ldr	r3, [pc, #120]	; (801a960 <SX1276SetModem+0xb0>)
 801a8e6:	1dfa      	adds	r2, r7, #7
 801a8e8:	7812      	ldrb	r2, [r2, #0]
 801a8ea:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801a8ec:	4b1c      	ldr	r3, [pc, #112]	; (801a960 <SX1276SetModem+0xb0>)
 801a8ee:	795b      	ldrb	r3, [r3, #5]
 801a8f0:	2b01      	cmp	r3, #1
 801a8f2:	d017      	beq.n	801a924 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a8f4:	2000      	movs	r0, #0
 801a8f6:	f7ff ff6e 	bl	801a7d6 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801a8fa:	2001      	movs	r0, #1
 801a8fc:	f000 f843 	bl	801a986 <SX1276Read>
 801a900:	0003      	movs	r3, r0
 801a902:	001a      	movs	r2, r3
 801a904:	237f      	movs	r3, #127	; 0x7f
 801a906:	4013      	ands	r3, r2
 801a908:	b2db      	uxtb	r3, r3
 801a90a:	0019      	movs	r1, r3
 801a90c:	2001      	movs	r0, #1
 801a90e:	f000 f829 	bl	801a964 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801a912:	2100      	movs	r1, #0
 801a914:	2040      	movs	r0, #64	; 0x40
 801a916:	f000 f825 	bl	801a964 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801a91a:	2130      	movs	r1, #48	; 0x30
 801a91c:	2041      	movs	r0, #65	; 0x41
 801a91e:	f000 f821 	bl	801a964 <SX1276Write>
        break;
 801a922:	e019      	b.n	801a958 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a924:	2000      	movs	r0, #0
 801a926:	f7ff ff56 	bl	801a7d6 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801a92a:	2001      	movs	r0, #1
 801a92c:	f000 f82b 	bl	801a986 <SX1276Read>
 801a930:	0003      	movs	r3, r0
 801a932:	001a      	movs	r2, r3
 801a934:	2380      	movs	r3, #128	; 0x80
 801a936:	425b      	negs	r3, r3
 801a938:	4313      	orrs	r3, r2
 801a93a:	b2db      	uxtb	r3, r3
 801a93c:	0019      	movs	r1, r3
 801a93e:	2001      	movs	r0, #1
 801a940:	f000 f810 	bl	801a964 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801a944:	2100      	movs	r1, #0
 801a946:	2040      	movs	r0, #64	; 0x40
 801a948:	f000 f80c 	bl	801a964 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801a94c:	2100      	movs	r1, #0
 801a94e:	2041      	movs	r0, #65	; 0x41
 801a950:	f000 f808 	bl	801a964 <SX1276Write>
        break;
 801a954:	e000      	b.n	801a958 <SX1276SetModem+0xa8>
        return;
 801a956:	46c0      	nop			; (mov r8, r8)
    }
}
 801a958:	46bd      	mov	sp, r7
 801a95a:	b002      	add	sp, #8
 801a95c:	bd80      	pop	{r7, pc}
 801a95e:	46c0      	nop			; (mov r8, r8)
 801a960:	20001584 	.word	0x20001584

0801a964 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b082      	sub	sp, #8
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
 801a96c:	000a      	movs	r2, r1
 801a96e:	1cfb      	adds	r3, r7, #3
 801a970:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801a972:	1cf9      	adds	r1, r7, #3
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	2201      	movs	r2, #1
 801a978:	0018      	movs	r0, r3
 801a97a:	f000 f815 	bl	801a9a8 <SX1276WriteBuffer>
}
 801a97e:	46c0      	nop			; (mov r8, r8)
 801a980:	46bd      	mov	sp, r7
 801a982:	b002      	add	sp, #8
 801a984:	bd80      	pop	{r7, pc}

0801a986 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801a986:	b590      	push	{r4, r7, lr}
 801a988:	b085      	sub	sp, #20
 801a98a:	af00      	add	r7, sp, #0
 801a98c:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801a98e:	240f      	movs	r4, #15
 801a990:	1939      	adds	r1, r7, r4
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	2201      	movs	r2, #1
 801a996:	0018      	movs	r0, r3
 801a998:	f000 f83a 	bl	801aa10 <SX1276ReadBuffer>
    return data;
 801a99c:	193b      	adds	r3, r7, r4
 801a99e:	781b      	ldrb	r3, [r3, #0]
}
 801a9a0:	0018      	movs	r0, r3
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	b005      	add	sp, #20
 801a9a6:	bd90      	pop	{r4, r7, pc}

0801a9a8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801a9a8:	b590      	push	{r4, r7, lr}
 801a9aa:	b087      	sub	sp, #28
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	60f8      	str	r0, [r7, #12]
 801a9b0:	60b9      	str	r1, [r7, #8]
 801a9b2:	1dfb      	adds	r3, r7, #7
 801a9b4:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801a9b6:	2000      	movs	r0, #0
 801a9b8:	f7ea ff04 	bl	80057c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	b29b      	uxth	r3, r3
 801a9c0:	2280      	movs	r2, #128	; 0x80
 801a9c2:	4313      	orrs	r3, r2
 801a9c4:	b29b      	uxth	r3, r3
 801a9c6:	0018      	movs	r0, r3
 801a9c8:	f7ea fee9 	bl	800579e <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801a9cc:	2317      	movs	r3, #23
 801a9ce:	18fb      	adds	r3, r7, r3
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	701a      	strb	r2, [r3, #0]
 801a9d4:	e00e      	b.n	801a9f4 <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801a9d6:	2417      	movs	r4, #23
 801a9d8:	193b      	adds	r3, r7, r4
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	68ba      	ldr	r2, [r7, #8]
 801a9de:	18d3      	adds	r3, r2, r3
 801a9e0:	781b      	ldrb	r3, [r3, #0]
 801a9e2:	b29b      	uxth	r3, r3
 801a9e4:	0018      	movs	r0, r3
 801a9e6:	f7ea feda 	bl	800579e <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801a9ea:	193b      	adds	r3, r7, r4
 801a9ec:	781a      	ldrb	r2, [r3, #0]
 801a9ee:	193b      	adds	r3, r7, r4
 801a9f0:	3201      	adds	r2, #1
 801a9f2:	701a      	strb	r2, [r3, #0]
 801a9f4:	2317      	movs	r3, #23
 801a9f6:	18fa      	adds	r2, r7, r3
 801a9f8:	1dfb      	adds	r3, r7, #7
 801a9fa:	7812      	ldrb	r2, [r2, #0]
 801a9fc:	781b      	ldrb	r3, [r3, #0]
 801a9fe:	429a      	cmp	r2, r3
 801aa00:	d3e9      	bcc.n	801a9d6 <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801aa02:	2001      	movs	r0, #1
 801aa04:	f7ea fede 	bl	80057c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801aa08:	46c0      	nop			; (mov r8, r8)
 801aa0a:	46bd      	mov	sp, r7
 801aa0c:	b007      	add	sp, #28
 801aa0e:	bd90      	pop	{r4, r7, pc}

0801aa10 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b086      	sub	sp, #24
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	60f8      	str	r0, [r7, #12]
 801aa18:	60b9      	str	r1, [r7, #8]
 801aa1a:	1dfb      	adds	r3, r7, #7
 801aa1c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801aa1e:	2000      	movs	r0, #0
 801aa20:	f7ea fed0 	bl	80057c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	b29b      	uxth	r3, r3
 801aa28:	227f      	movs	r2, #127	; 0x7f
 801aa2a:	4013      	ands	r3, r2
 801aa2c:	b29b      	uxth	r3, r3
 801aa2e:	0018      	movs	r0, r3
 801aa30:	f7ea feb5 	bl	800579e <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801aa34:	2317      	movs	r3, #23
 801aa36:	18fb      	adds	r3, r7, r3
 801aa38:	2200      	movs	r2, #0
 801aa3a:	701a      	strb	r2, [r3, #0]
 801aa3c:	e010      	b.n	801aa60 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801aa3e:	2000      	movs	r0, #0
 801aa40:	f7ea fead 	bl	800579e <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801aa44:	0003      	movs	r3, r0
 801aa46:	0019      	movs	r1, r3
 801aa48:	2017      	movs	r0, #23
 801aa4a:	183b      	adds	r3, r7, r0
 801aa4c:	781b      	ldrb	r3, [r3, #0]
 801aa4e:	68ba      	ldr	r2, [r7, #8]
 801aa50:	18d3      	adds	r3, r2, r3
 801aa52:	b2ca      	uxtb	r2, r1
 801aa54:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801aa56:	183b      	adds	r3, r7, r0
 801aa58:	781a      	ldrb	r2, [r3, #0]
 801aa5a:	183b      	adds	r3, r7, r0
 801aa5c:	3201      	adds	r2, #1
 801aa5e:	701a      	strb	r2, [r3, #0]
 801aa60:	2317      	movs	r3, #23
 801aa62:	18fa      	adds	r2, r7, r3
 801aa64:	1dfb      	adds	r3, r7, #7
 801aa66:	7812      	ldrb	r2, [r2, #0]
 801aa68:	781b      	ldrb	r3, [r3, #0]
 801aa6a:	429a      	cmp	r2, r3
 801aa6c:	d3e7      	bcc.n	801aa3e <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801aa6e:	2001      	movs	r0, #1
 801aa70:	f7ea fea8 	bl	80057c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801aa74:	46c0      	nop			; (mov r8, r8)
 801aa76:	46bd      	mov	sp, r7
 801aa78:	b006      	add	sp, #24
 801aa7a:	bd80      	pop	{r7, pc}

0801aa7c <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b082      	sub	sp, #8
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	000a      	movs	r2, r1
 801aa86:	1cfb      	adds	r3, r7, #3
 801aa88:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801aa8a:	1cfb      	adds	r3, r7, #3
 801aa8c:	781a      	ldrb	r2, [r3, #0]
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	0019      	movs	r1, r3
 801aa92:	2000      	movs	r0, #0
 801aa94:	f7ff ff88 	bl	801a9a8 <SX1276WriteBuffer>
}
 801aa98:	46c0      	nop			; (mov r8, r8)
 801aa9a:	46bd      	mov	sp, r7
 801aa9c:	b002      	add	sp, #8
 801aa9e:	bd80      	pop	{r7, pc}

0801aaa0 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	000a      	movs	r2, r1
 801aaaa:	1cfb      	adds	r3, r7, #3
 801aaac:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801aaae:	1cfb      	adds	r3, r7, #3
 801aab0:	781a      	ldrb	r2, [r3, #0]
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	0019      	movs	r1, r3
 801aab6:	2000      	movs	r0, #0
 801aab8:	f7ff ffaa 	bl	801aa10 <SX1276ReadBuffer>
}
 801aabc:	46c0      	nop			; (mov r8, r8)
 801aabe:	46bd      	mov	sp, r7
 801aac0:	b002      	add	sp, #8
 801aac2:	bd80      	pop	{r7, pc}

0801aac4 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b082      	sub	sp, #8
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	0002      	movs	r2, r0
 801aacc:	1dfb      	adds	r3, r7, #7
 801aace:	701a      	strb	r2, [r3, #0]
 801aad0:	1dbb      	adds	r3, r7, #6
 801aad2:	1c0a      	adds	r2, r1, #0
 801aad4:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801aad6:	1dfb      	adds	r3, r7, #7
 801aad8:	781b      	ldrb	r3, [r3, #0]
 801aada:	0018      	movs	r0, r3
 801aadc:	f7ff fee8 	bl	801a8b0 <SX1276SetModem>

    switch( modem )
 801aae0:	1dfb      	adds	r3, r7, #7
 801aae2:	781b      	ldrb	r3, [r3, #0]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d002      	beq.n	801aaee <SX1276SetMaxPayloadLength+0x2a>
 801aae8:	2b01      	cmp	r3, #1
 801aaea:	d00f      	beq.n	801ab0c <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801aaec:	e016      	b.n	801ab1c <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801aaee:	4b0d      	ldr	r3, [pc, #52]	; (801ab24 <SX1276SetMaxPayloadLength+0x60>)
 801aaf0:	2222      	movs	r2, #34	; 0x22
 801aaf2:	5c9b      	ldrb	r3, [r3, r2]
 801aaf4:	2201      	movs	r2, #1
 801aaf6:	4053      	eors	r3, r2
 801aaf8:	b2db      	uxtb	r3, r3
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d00d      	beq.n	801ab1a <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801aafe:	1dbb      	adds	r3, r7, #6
 801ab00:	781b      	ldrb	r3, [r3, #0]
 801ab02:	0019      	movs	r1, r3
 801ab04:	2032      	movs	r0, #50	; 0x32
 801ab06:	f7ff ff2d 	bl	801a964 <SX1276Write>
        break;
 801ab0a:	e006      	b.n	801ab1a <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801ab0c:	1dbb      	adds	r3, r7, #6
 801ab0e:	781b      	ldrb	r3, [r3, #0]
 801ab10:	0019      	movs	r1, r3
 801ab12:	2023      	movs	r0, #35	; 0x23
 801ab14:	f7ff ff26 	bl	801a964 <SX1276Write>
        break;
 801ab18:	e000      	b.n	801ab1c <SX1276SetMaxPayloadLength+0x58>
        break;
 801ab1a:	46c0      	nop			; (mov r8, r8)
}
 801ab1c:	46c0      	nop			; (mov r8, r8)
 801ab1e:	46bd      	mov	sp, r7
 801ab20:	b002      	add	sp, #8
 801ab22:	bd80      	pop	{r7, pc}
 801ab24:	20001584 	.word	0x20001584

0801ab28 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b082      	sub	sp, #8
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	0002      	movs	r2, r0
 801ab30:	1dfb      	adds	r3, r7, #7
 801ab32:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801ab34:	2001      	movs	r0, #1
 801ab36:	f7ff febb 	bl	801a8b0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801ab3a:	4b0b      	ldr	r3, [pc, #44]	; (801ab68 <SX1276SetPublicNetwork+0x40>)
 801ab3c:	1dfa      	adds	r2, r7, #7
 801ab3e:	215c      	movs	r1, #92	; 0x5c
 801ab40:	7812      	ldrb	r2, [r2, #0]
 801ab42:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801ab44:	1dfb      	adds	r3, r7, #7
 801ab46:	781b      	ldrb	r3, [r3, #0]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d004      	beq.n	801ab56 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801ab4c:	2134      	movs	r1, #52	; 0x34
 801ab4e:	2039      	movs	r0, #57	; 0x39
 801ab50:	f7ff ff08 	bl	801a964 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801ab54:	e003      	b.n	801ab5e <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801ab56:	2112      	movs	r1, #18
 801ab58:	2039      	movs	r0, #57	; 0x39
 801ab5a:	f7ff ff03 	bl	801a964 <SX1276Write>
}
 801ab5e:	46c0      	nop			; (mov r8, r8)
 801ab60:	46bd      	mov	sp, r7
 801ab62:	b002      	add	sp, #8
 801ab64:	bd80      	pop	{r7, pc}
 801ab66:	46c0      	nop			; (mov r8, r8)
 801ab68:	20001584 	.word	0x20001584

0801ab6c <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801ab70:	f7ea fbb2 	bl	80052d8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801ab74:	0003      	movs	r3, r0
 801ab76:	3302      	adds	r3, #2
}
 801ab78:	0018      	movs	r0, r3
 801ab7a:	46bd      	mov	sp, r7
 801ab7c:	bd80      	pop	{r7, pc}
	...

0801ab80 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801ab80:	b580      	push	{r7, lr}
 801ab82:	b084      	sub	sp, #16
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801ab88:	230f      	movs	r3, #15
 801ab8a:	18fb      	adds	r3, r7, r3
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	701a      	strb	r2, [r3, #0]
 801ab90:	e01f      	b.n	801abd2 <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801ab92:	210f      	movs	r1, #15
 801ab94:	187b      	adds	r3, r7, r1
 801ab96:	781a      	ldrb	r2, [r3, #0]
 801ab98:	4b13      	ldr	r3, [pc, #76]	; (801abe8 <GetFskBandwidthRegValue+0x68>)
 801ab9a:	00d2      	lsls	r2, r2, #3
 801ab9c:	58d3      	ldr	r3, [r2, r3]
 801ab9e:	687a      	ldr	r2, [r7, #4]
 801aba0:	429a      	cmp	r2, r3
 801aba2:	d310      	bcc.n	801abc6 <GetFskBandwidthRegValue+0x46>
 801aba4:	187b      	adds	r3, r7, r1
 801aba6:	781b      	ldrb	r3, [r3, #0]
 801aba8:	1c5a      	adds	r2, r3, #1
 801abaa:	4b0f      	ldr	r3, [pc, #60]	; (801abe8 <GetFskBandwidthRegValue+0x68>)
 801abac:	00d2      	lsls	r2, r2, #3
 801abae:	58d3      	ldr	r3, [r2, r3]
 801abb0:	687a      	ldr	r2, [r7, #4]
 801abb2:	429a      	cmp	r2, r3
 801abb4:	d207      	bcs.n	801abc6 <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801abb6:	187b      	adds	r3, r7, r1
 801abb8:	781b      	ldrb	r3, [r3, #0]
 801abba:	4a0b      	ldr	r2, [pc, #44]	; (801abe8 <GetFskBandwidthRegValue+0x68>)
 801abbc:	00db      	lsls	r3, r3, #3
 801abbe:	18d3      	adds	r3, r2, r3
 801abc0:	3304      	adds	r3, #4
 801abc2:	781b      	ldrb	r3, [r3, #0]
 801abc4:	e00b      	b.n	801abde <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801abc6:	210f      	movs	r1, #15
 801abc8:	187b      	adds	r3, r7, r1
 801abca:	781a      	ldrb	r2, [r3, #0]
 801abcc:	187b      	adds	r3, r7, r1
 801abce:	3201      	adds	r2, #1
 801abd0:	701a      	strb	r2, [r3, #0]
 801abd2:	230f      	movs	r3, #15
 801abd4:	18fb      	adds	r3, r7, r3
 801abd6:	781b      	ldrb	r3, [r3, #0]
 801abd8:	2b14      	cmp	r3, #20
 801abda:	d9da      	bls.n	801ab92 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801abdc:	e7fe      	b.n	801abdc <GetFskBandwidthRegValue+0x5c>
}
 801abde:	0018      	movs	r0, r3
 801abe0:	46bd      	mov	sp, r7
 801abe2:	b004      	add	sp, #16
 801abe4:	bd80      	pop	{r7, pc}
 801abe6:	46c0      	nop			; (mov r8, r8)
 801abe8:	0801ed14 	.word	0x0801ed14

0801abec <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b084      	sub	sp, #16
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801abf4:	2300      	movs	r3, #0
 801abf6:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2b03      	cmp	r3, #3
 801abfc:	d018      	beq.n	801ac30 <SX1276GetLoRaBandwidthInHz+0x44>
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	2b03      	cmp	r3, #3
 801ac02:	d818      	bhi.n	801ac36 <SX1276GetLoRaBandwidthInHz+0x4a>
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	2b02      	cmp	r3, #2
 801ac08:	d00f      	beq.n	801ac2a <SX1276GetLoRaBandwidthInHz+0x3e>
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2b02      	cmp	r3, #2
 801ac0e:	d812      	bhi.n	801ac36 <SX1276GetLoRaBandwidthInHz+0x4a>
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d003      	beq.n	801ac1e <SX1276GetLoRaBandwidthInHz+0x32>
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	2b01      	cmp	r3, #1
 801ac1a:	d003      	beq.n	801ac24 <SX1276GetLoRaBandwidthInHz+0x38>
 801ac1c:	e00b      	b.n	801ac36 <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801ac1e:	4b08      	ldr	r3, [pc, #32]	; (801ac40 <SX1276GetLoRaBandwidthInHz+0x54>)
 801ac20:	60fb      	str	r3, [r7, #12]
        break;
 801ac22:	e008      	b.n	801ac36 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801ac24:	4b07      	ldr	r3, [pc, #28]	; (801ac44 <SX1276GetLoRaBandwidthInHz+0x58>)
 801ac26:	60fb      	str	r3, [r7, #12]
        break;
 801ac28:	e005      	b.n	801ac36 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801ac2a:	4b07      	ldr	r3, [pc, #28]	; (801ac48 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801ac2c:	60fb      	str	r3, [r7, #12]
        break;
 801ac2e:	e002      	b.n	801ac36 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801ac30:	4b06      	ldr	r3, [pc, #24]	; (801ac4c <SX1276GetLoRaBandwidthInHz+0x60>)
 801ac32:	60fb      	str	r3, [r7, #12]
            break;
 801ac34:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801ac36:	68fb      	ldr	r3, [r7, #12]
}
 801ac38:	0018      	movs	r0, r3
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	b004      	add	sp, #16
 801ac3e:	bd80      	pop	{r7, pc}
 801ac40:	0001e848 	.word	0x0001e848
 801ac44:	0003d090 	.word	0x0003d090
 801ac48:	0007a120 	.word	0x0007a120
 801ac4c:	0000f424 	.word	0x0000f424

0801ac50 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801ac50:	b5b0      	push	{r4, r5, r7, lr}
 801ac52:	b084      	sub	sp, #16
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	0005      	movs	r5, r0
 801ac58:	000c      	movs	r4, r1
 801ac5a:	0010      	movs	r0, r2
 801ac5c:	0019      	movs	r1, r3
 801ac5e:	1dbb      	adds	r3, r7, #6
 801ac60:	1c2a      	adds	r2, r5, #0
 801ac62:	801a      	strh	r2, [r3, #0]
 801ac64:	1d7b      	adds	r3, r7, #5
 801ac66:	1c22      	adds	r2, r4, #0
 801ac68:	701a      	strb	r2, [r3, #0]
 801ac6a:	1d3b      	adds	r3, r7, #4
 801ac6c:	1c02      	adds	r2, r0, #0
 801ac6e:	701a      	strb	r2, [r3, #0]
 801ac70:	1cfb      	adds	r3, r7, #3
 801ac72:	1c0a      	adds	r2, r1, #0
 801ac74:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801ac76:	230f      	movs	r3, #15
 801ac78:	18fb      	adds	r3, r7, r3
 801ac7a:	2203      	movs	r2, #3
 801ac7c:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801ac7e:	1dbb      	adds	r3, r7, #6
 801ac80:	881b      	ldrh	r3, [r3, #0]
 801ac82:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801ac84:	1d7b      	adds	r3, r7, #5
 801ac86:	781b      	ldrb	r3, [r3, #0]
 801ac88:	2101      	movs	r1, #1
 801ac8a:	404b      	eors	r3, r1
 801ac8c:	b2db      	uxtb	r3, r3
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d001      	beq.n	801ac96 <SX1276GetGfskTimeOnAirNumerator+0x46>
 801ac92:	2308      	movs	r3, #8
 801ac94:	e000      	b.n	801ac98 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801ac96:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801ac98:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801ac9a:	230f      	movs	r3, #15
 801ac9c:	18fb      	adds	r3, r7, r3
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801aca2:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801aca4:	1d3b      	adds	r3, r7, #4
 801aca6:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801aca8:	1cfb      	adds	r3, r7, #3
 801acaa:	781b      	ldrb	r3, [r3, #0]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d001      	beq.n	801acb4 <SX1276GetGfskTimeOnAirNumerator+0x64>
 801acb0:	2302      	movs	r3, #2
 801acb2:	e000      	b.n	801acb6 <SX1276GetGfskTimeOnAirNumerator+0x66>
 801acb4:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801acb6:	185b      	adds	r3, r3, r1
               ) << 3 
 801acb8:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801acba:	18d3      	adds	r3, r2, r3
             );
}
 801acbc:	0018      	movs	r0, r3
 801acbe:	46bd      	mov	sp, r7
 801acc0:	b004      	add	sp, #16
 801acc2:	bdb0      	pop	{r4, r5, r7, pc}

0801acc4 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b08a      	sub	sp, #40	; 0x28
 801acc8:	af00      	add	r7, sp, #0
 801acca:	60f8      	str	r0, [r7, #12]
 801accc:	60b9      	str	r1, [r7, #8]
 801acce:	0019      	movs	r1, r3
 801acd0:	1dfb      	adds	r3, r7, #7
 801acd2:	701a      	strb	r2, [r3, #0]
 801acd4:	1d3b      	adds	r3, r7, #4
 801acd6:	1c0a      	adds	r2, r1, #0
 801acd8:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801acda:	1dfb      	adds	r3, r7, #7
 801acdc:	781b      	ldrb	r3, [r3, #0]
 801acde:	3304      	adds	r3, #4
 801ace0:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801ace2:	2327      	movs	r3, #39	; 0x27
 801ace4:	18fb      	adds	r3, r7, r3
 801ace6:	2200      	movs	r2, #0
 801ace8:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801acea:	68bb      	ldr	r3, [r7, #8]
 801acec:	2b05      	cmp	r3, #5
 801acee:	d002      	beq.n	801acf6 <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801acf0:	68bb      	ldr	r3, [r7, #8]
 801acf2:	2b06      	cmp	r3, #6
 801acf4:	d106      	bne.n	801ad04 <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801acf6:	1d3b      	adds	r3, r7, #4
 801acf8:	881b      	ldrh	r3, [r3, #0]
 801acfa:	2b0b      	cmp	r3, #11
 801acfc:	d802      	bhi.n	801ad04 <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801acfe:	1d3b      	adds	r3, r7, #4
 801ad00:	220c      	movs	r2, #12
 801ad02:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d105      	bne.n	801ad16 <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801ad0a:	68bb      	ldr	r3, [r7, #8]
 801ad0c:	2b0b      	cmp	r3, #11
 801ad0e:	d008      	beq.n	801ad22 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801ad10:	68bb      	ldr	r3, [r7, #8]
 801ad12:	2b0c      	cmp	r3, #12
 801ad14:	d005      	beq.n	801ad22 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	2b01      	cmp	r3, #1
 801ad1a:	d106      	bne.n	801ad2a <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ad1c:	68bb      	ldr	r3, [r7, #8]
 801ad1e:	2b0c      	cmp	r3, #12
 801ad20:	d103      	bne.n	801ad2a <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801ad22:	2327      	movs	r3, #39	; 0x27
 801ad24:	18fb      	adds	r3, r7, r3
 801ad26:	2201      	movs	r2, #1
 801ad28:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ad2a:	2334      	movs	r3, #52	; 0x34
 801ad2c:	18fb      	adds	r3, r7, r3
 801ad2e:	781b      	ldrb	r3, [r3, #0]
 801ad30:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801ad32:	2338      	movs	r3, #56	; 0x38
 801ad34:	18fb      	adds	r3, r7, r3
 801ad36:	781b      	ldrb	r3, [r3, #0]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d001      	beq.n	801ad40 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801ad3c:	2310      	movs	r3, #16
 801ad3e:	e000      	b.n	801ad42 <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801ad40:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ad42:	189b      	adds	r3, r3, r2
 801ad44:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801ad46:	68bb      	ldr	r3, [r7, #8]
 801ad48:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801ad4a:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801ad4c:	2330      	movs	r3, #48	; 0x30
 801ad4e:	18fb      	adds	r3, r7, r3
 801ad50:	781b      	ldrb	r3, [r3, #0]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d001      	beq.n	801ad5a <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801ad56:	2300      	movs	r3, #0
 801ad58:	e000      	b.n	801ad5c <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801ad5a:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801ad5c:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ad5e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801ad60:	68bb      	ldr	r3, [r7, #8]
 801ad62:	2b06      	cmp	r3, #6
 801ad64:	d803      	bhi.n	801ad6e <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801ad66:	68bb      	ldr	r3, [r7, #8]
 801ad68:	009b      	lsls	r3, r3, #2
 801ad6a:	623b      	str	r3, [r7, #32]
 801ad6c:	e00f      	b.n	801ad8e <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801ad6e:	69fb      	ldr	r3, [r7, #28]
 801ad70:	3308      	adds	r3, #8
 801ad72:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801ad74:	2327      	movs	r3, #39	; 0x27
 801ad76:	18fb      	adds	r3, r7, r3
 801ad78:	781b      	ldrb	r3, [r3, #0]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d004      	beq.n	801ad88 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801ad7e:	68bb      	ldr	r3, [r7, #8]
 801ad80:	3b02      	subs	r3, #2
 801ad82:	009b      	lsls	r3, r3, #2
 801ad84:	623b      	str	r3, [r7, #32]
 801ad86:	e002      	b.n	801ad8e <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801ad88:	68bb      	ldr	r3, [r7, #8]
 801ad8a:	009b      	lsls	r3, r3, #2
 801ad8c:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801ad8e:	69fb      	ldr	r3, [r7, #28]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	da01      	bge.n	801ad98 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801ad94:	2300      	movs	r3, #0
 801ad96:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801ad98:	69fa      	ldr	r2, [r7, #28]
 801ad9a:	6a3b      	ldr	r3, [r7, #32]
 801ad9c:	18d3      	adds	r3, r2, r3
 801ad9e:	3b01      	subs	r3, #1
 801ada0:	6a39      	ldr	r1, [r7, #32]
 801ada2:	0018      	movs	r0, r3
 801ada4:	f7e5 fa42 	bl	800022c <__divsi3>
 801ada8:	0003      	movs	r3, r0
 801adaa:	001a      	movs	r2, r3
 801adac:	697b      	ldr	r3, [r7, #20]
 801adae:	435a      	muls	r2, r3
 801adb0:	1d3b      	adds	r3, r7, #4
 801adb2:	881b      	ldrh	r3, [r3, #0]
 801adb4:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801adb6:	330c      	adds	r3, #12
 801adb8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801adba:	68bb      	ldr	r3, [r7, #8]
 801adbc:	2b06      	cmp	r3, #6
 801adbe:	d802      	bhi.n	801adc6 <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801adc0:	69bb      	ldr	r3, [r7, #24]
 801adc2:	3302      	adds	r3, #2
 801adc4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801adc6:	69bb      	ldr	r3, [r7, #24]
 801adc8:	009b      	lsls	r3, r3, #2
 801adca:	1c5a      	adds	r2, r3, #1
 801adcc:	68bb      	ldr	r3, [r7, #8]
 801adce:	3b02      	subs	r3, #2
 801add0:	409a      	lsls	r2, r3
 801add2:	0013      	movs	r3, r2
}
 801add4:	0018      	movs	r0, r3
 801add6:	46bd      	mov	sp, r7
 801add8:	b00a      	add	sp, #40	; 0x28
 801adda:	bd80      	pop	{r7, pc}

0801addc <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801addc:	b590      	push	{r4, r7, lr}
 801adde:	b085      	sub	sp, #20
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801ade4:	4b4f      	ldr	r3, [pc, #316]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801ade6:	791b      	ldrb	r3, [r3, #4]
 801ade8:	2b01      	cmp	r3, #1
 801adea:	d002      	beq.n	801adf2 <SX1276OnTimeoutIrq+0x16>
 801adec:	2b02      	cmp	r3, #2
 801adee:	d041      	beq.n	801ae74 <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801adf0:	e094      	b.n	801af1c <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801adf2:	4b4c      	ldr	r3, [pc, #304]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801adf4:	795b      	ldrb	r3, [r3, #5]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d12e      	bne.n	801ae58 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801adfa:	4b4a      	ldr	r3, [pc, #296]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801adfc:	2230      	movs	r2, #48	; 0x30
 801adfe:	2100      	movs	r1, #0
 801ae00:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801ae02:	4b48      	ldr	r3, [pc, #288]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801ae04:	2231      	movs	r2, #49	; 0x31
 801ae06:	2100      	movs	r1, #0
 801ae08:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801ae0a:	4b46      	ldr	r3, [pc, #280]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801ae0c:	2200      	movs	r2, #0
 801ae0e:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801ae10:	4b44      	ldr	r3, [pc, #272]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801ae12:	2200      	movs	r2, #0
 801ae14:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801ae16:	210b      	movs	r1, #11
 801ae18:	203e      	movs	r0, #62	; 0x3e
 801ae1a:	f7ff fda3 	bl	801a964 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801ae1e:	2110      	movs	r1, #16
 801ae20:	203f      	movs	r0, #63	; 0x3f
 801ae22:	f7ff fd9f 	bl	801a964 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801ae26:	4b3f      	ldr	r3, [pc, #252]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801ae28:	2226      	movs	r2, #38	; 0x26
 801ae2a:	5c9b      	ldrb	r3, [r3, r2]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d00c      	beq.n	801ae4a <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801ae30:	200d      	movs	r0, #13
 801ae32:	f7ff fda8 	bl	801a986 <SX1276Read>
 801ae36:	0003      	movs	r3, r0
 801ae38:	001a      	movs	r2, r3
 801ae3a:	2340      	movs	r3, #64	; 0x40
 801ae3c:	4313      	orrs	r3, r2
 801ae3e:	b2db      	uxtb	r3, r3
 801ae40:	0019      	movs	r1, r3
 801ae42:	200d      	movs	r0, #13
 801ae44:	f7ff fd8e 	bl	801a964 <SX1276Write>
 801ae48:	e006      	b.n	801ae58 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801ae4a:	4b36      	ldr	r3, [pc, #216]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801ae4c:	2200      	movs	r2, #0
 801ae4e:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801ae50:	4b35      	ldr	r3, [pc, #212]	; (801af28 <SX1276OnTimeoutIrq+0x14c>)
 801ae52:	0018      	movs	r0, r3
 801ae54:	f001 fbf0 	bl	801c638 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ae58:	4b34      	ldr	r3, [pc, #208]	; (801af2c <SX1276OnTimeoutIrq+0x150>)
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d05a      	beq.n	801af16 <SX1276OnTimeoutIrq+0x13a>
 801ae60:	4b32      	ldr	r3, [pc, #200]	; (801af2c <SX1276OnTimeoutIrq+0x150>)
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	68db      	ldr	r3, [r3, #12]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d055      	beq.n	801af16 <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801ae6a:	4b30      	ldr	r3, [pc, #192]	; (801af2c <SX1276OnTimeoutIrq+0x150>)
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	68db      	ldr	r3, [r3, #12]
 801ae70:	4798      	blx	r3
        break;
 801ae72:	e050      	b.n	801af16 <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801ae74:	f7ff fca8 	bl	801a7c8 <SX1276Reset>
        RxChainCalibration( );
 801ae78:	f7fe fa24 	bl	80192c4 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801ae7c:	2000      	movs	r0, #0
 801ae7e:	f7ff fcaa 	bl	801a7d6 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801ae82:	230f      	movs	r3, #15
 801ae84:	18fb      	adds	r3, r7, r3
 801ae86:	2200      	movs	r2, #0
 801ae88:	701a      	strb	r2, [r3, #0]
 801ae8a:	e025      	b.n	801aed8 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801ae8c:	240f      	movs	r4, #15
 801ae8e:	193b      	adds	r3, r7, r4
 801ae90:	781a      	ldrb	r2, [r3, #0]
 801ae92:	4927      	ldr	r1, [pc, #156]	; (801af30 <SX1276OnTimeoutIrq+0x154>)
 801ae94:	0013      	movs	r3, r2
 801ae96:	005b      	lsls	r3, r3, #1
 801ae98:	189b      	adds	r3, r3, r2
 801ae9a:	5c5b      	ldrb	r3, [r3, r1]
 801ae9c:	0018      	movs	r0, r3
 801ae9e:	f7ff fd07 	bl	801a8b0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801aea2:	193b      	adds	r3, r7, r4
 801aea4:	781a      	ldrb	r2, [r3, #0]
 801aea6:	4922      	ldr	r1, [pc, #136]	; (801af30 <SX1276OnTimeoutIrq+0x154>)
 801aea8:	0013      	movs	r3, r2
 801aeaa:	005b      	lsls	r3, r3, #1
 801aeac:	189b      	adds	r3, r3, r2
 801aeae:	18cb      	adds	r3, r1, r3
 801aeb0:	3301      	adds	r3, #1
 801aeb2:	781b      	ldrb	r3, [r3, #0]
 801aeb4:	0018      	movs	r0, r3
 801aeb6:	193b      	adds	r3, r7, r4
 801aeb8:	781a      	ldrb	r2, [r3, #0]
 801aeba:	491d      	ldr	r1, [pc, #116]	; (801af30 <SX1276OnTimeoutIrq+0x154>)
 801aebc:	0013      	movs	r3, r2
 801aebe:	005b      	lsls	r3, r3, #1
 801aec0:	189b      	adds	r3, r3, r2
 801aec2:	18cb      	adds	r3, r1, r3
 801aec4:	3302      	adds	r3, #2
 801aec6:	781b      	ldrb	r3, [r3, #0]
 801aec8:	0019      	movs	r1, r3
 801aeca:	f7ff fd4b 	bl	801a964 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801aece:	193b      	adds	r3, r7, r4
 801aed0:	781a      	ldrb	r2, [r3, #0]
 801aed2:	193b      	adds	r3, r7, r4
 801aed4:	3201      	adds	r2, #1
 801aed6:	701a      	strb	r2, [r3, #0]
 801aed8:	230f      	movs	r3, #15
 801aeda:	18fb      	adds	r3, r7, r3
 801aedc:	781b      	ldrb	r3, [r3, #0]
 801aede:	2b0f      	cmp	r3, #15
 801aee0:	d9d4      	bls.n	801ae8c <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801aee2:	2000      	movs	r0, #0
 801aee4:	f7ff fce4 	bl	801a8b0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801aee8:	4b0e      	ldr	r3, [pc, #56]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801aeea:	225c      	movs	r2, #92	; 0x5c
 801aeec:	5c9b      	ldrb	r3, [r3, r2]
 801aeee:	0018      	movs	r0, r3
 801aef0:	f7ff fe1a 	bl	801ab28 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801aef4:	4b0b      	ldr	r3, [pc, #44]	; (801af24 <SX1276OnTimeoutIrq+0x148>)
 801aef6:	2200      	movs	r2, #0
 801aef8:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801aefa:	4b0c      	ldr	r3, [pc, #48]	; (801af2c <SX1276OnTimeoutIrq+0x150>)
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d00b      	beq.n	801af1a <SX1276OnTimeoutIrq+0x13e>
 801af02:	4b0a      	ldr	r3, [pc, #40]	; (801af2c <SX1276OnTimeoutIrq+0x150>)
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	685b      	ldr	r3, [r3, #4]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d006      	beq.n	801af1a <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801af0c:	4b07      	ldr	r3, [pc, #28]	; (801af2c <SX1276OnTimeoutIrq+0x150>)
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	685b      	ldr	r3, [r3, #4]
 801af12:	4798      	blx	r3
        break;
 801af14:	e001      	b.n	801af1a <SX1276OnTimeoutIrq+0x13e>
        break;
 801af16:	46c0      	nop			; (mov r8, r8)
 801af18:	e000      	b.n	801af1c <SX1276OnTimeoutIrq+0x140>
        break;
 801af1a:	46c0      	nop			; (mov r8, r8)
    }
}
 801af1c:	46c0      	nop			; (mov r8, r8)
 801af1e:	46bd      	mov	sp, r7
 801af20:	b005      	add	sp, #20
 801af22:	bd90      	pop	{r4, r7, pc}
 801af24:	20001584 	.word	0x20001584
 801af28:	2000161c 	.word	0x2000161c
 801af2c:	20001480 	.word	0x20001480
 801af30:	0801ece4 	.word	0x0801ece4

0801af34 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801af34:	b590      	push	{r4, r7, lr}
 801af36:	b083      	sub	sp, #12
 801af38:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801af3a:	1d7b      	adds	r3, r7, #5
 801af3c:	2200      	movs	r2, #0
 801af3e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801af40:	4bc3      	ldr	r3, [pc, #780]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801af42:	791b      	ldrb	r3, [r3, #4]
 801af44:	2b01      	cmp	r3, #1
 801af46:	d003      	beq.n	801af50 <SX1276OnDio0Irq+0x1c>
 801af48:	2b02      	cmp	r3, #2
 801af4a:	d100      	bne.n	801af4e <SX1276OnDio0Irq+0x1a>
 801af4c:	e1e2      	b.n	801b314 <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801af4e:	e1ff      	b.n	801b350 <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801af50:	4bbf      	ldr	r3, [pc, #764]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801af52:	795b      	ldrb	r3, [r3, #5]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d003      	beq.n	801af60 <SX1276OnDio0Irq+0x2c>
 801af58:	2b01      	cmp	r3, #1
 801af5a:	d100      	bne.n	801af5e <SX1276OnDio0Irq+0x2a>
 801af5c:	e0e2      	b.n	801b124 <SX1276OnDio0Irq+0x1f0>
                break;
 801af5e:	e1d8      	b.n	801b312 <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801af60:	4bbb      	ldr	r3, [pc, #748]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801af62:	2224      	movs	r2, #36	; 0x24
 801af64:	5c9b      	ldrb	r3, [r3, r2]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d052      	beq.n	801b010 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801af6a:	203f      	movs	r0, #63	; 0x3f
 801af6c:	f7ff fd0b 	bl	801a986 <SX1276Read>
 801af70:	0003      	movs	r3, r0
 801af72:	001a      	movs	r2, r3
 801af74:	1d7b      	adds	r3, r7, #5
 801af76:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801af78:	1d7b      	adds	r3, r7, #5
 801af7a:	781b      	ldrb	r3, [r3, #0]
 801af7c:	b2db      	uxtb	r3, r3
 801af7e:	001a      	movs	r2, r3
 801af80:	2302      	movs	r3, #2
 801af82:	4013      	ands	r3, r2
 801af84:	2b02      	cmp	r3, #2
 801af86:	d043      	beq.n	801b010 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801af88:	210b      	movs	r1, #11
 801af8a:	203e      	movs	r0, #62	; 0x3e
 801af8c:	f7ff fcea 	bl	801a964 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801af90:	2110      	movs	r1, #16
 801af92:	203f      	movs	r0, #63	; 0x3f
 801af94:	f7ff fce6 	bl	801a964 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801af98:	4bae      	ldr	r3, [pc, #696]	; (801b254 <SX1276OnDio0Irq+0x320>)
 801af9a:	0018      	movs	r0, r3
 801af9c:	f001 fb4c 	bl	801c638 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801afa0:	4bab      	ldr	r3, [pc, #684]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801afa2:	2226      	movs	r2, #38	; 0x26
 801afa4:	5c9b      	ldrb	r3, [r3, r2]
 801afa6:	2201      	movs	r2, #1
 801afa8:	4053      	eors	r3, r2
 801afaa:	b2db      	uxtb	r3, r3
 801afac:	2b00      	cmp	r3, #0
 801afae:	d007      	beq.n	801afc0 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801afb0:	4ba9      	ldr	r3, [pc, #676]	; (801b258 <SX1276OnDio0Irq+0x324>)
 801afb2:	0018      	movs	r0, r3
 801afb4:	f001 fb40 	bl	801c638 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801afb8:	4ba5      	ldr	r3, [pc, #660]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801afba:	2200      	movs	r2, #0
 801afbc:	711a      	strb	r2, [r3, #4]
 801afbe:	e00b      	b.n	801afd8 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801afc0:	200d      	movs	r0, #13
 801afc2:	f7ff fce0 	bl	801a986 <SX1276Read>
 801afc6:	0003      	movs	r3, r0
 801afc8:	001a      	movs	r2, r3
 801afca:	2340      	movs	r3, #64	; 0x40
 801afcc:	4313      	orrs	r3, r2
 801afce:	b2db      	uxtb	r3, r3
 801afd0:	0019      	movs	r1, r3
 801afd2:	200d      	movs	r0, #13
 801afd4:	f7ff fcc6 	bl	801a964 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801afd8:	4ba0      	ldr	r3, [pc, #640]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d008      	beq.n	801aff2 <SX1276OnDio0Irq+0xbe>
 801afe0:	4b9e      	ldr	r3, [pc, #632]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	691b      	ldr	r3, [r3, #16]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d003      	beq.n	801aff2 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801afea:	4b9c      	ldr	r3, [pc, #624]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	691b      	ldr	r3, [r3, #16]
 801aff0:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801aff2:	4b97      	ldr	r3, [pc, #604]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801aff4:	2230      	movs	r2, #48	; 0x30
 801aff6:	2100      	movs	r1, #0
 801aff8:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801affa:	4b95      	ldr	r3, [pc, #596]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801affc:	2231      	movs	r2, #49	; 0x31
 801affe:	2100      	movs	r1, #0
 801b000:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b002:	4b93      	ldr	r3, [pc, #588]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b004:	2200      	movs	r2, #0
 801b006:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801b008:	4b91      	ldr	r3, [pc, #580]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b00a:	2200      	movs	r2, #0
 801b00c:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801b00e:	e180      	b.n	801b312 <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b010:	4b8f      	ldr	r3, [pc, #572]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b012:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b014:	2b00      	cmp	r3, #0
 801b016:	d12d      	bne.n	801b074 <SX1276OnDio0Irq+0x140>
 801b018:	4b8d      	ldr	r3, [pc, #564]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b01a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d129      	bne.n	801b074 <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b020:	4b8b      	ldr	r3, [pc, #556]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b022:	2222      	movs	r2, #34	; 0x22
 801b024:	5c9b      	ldrb	r3, [r3, r2]
 801b026:	2201      	movs	r2, #1
 801b028:	4053      	eors	r3, r2
 801b02a:	b2db      	uxtb	r3, r3
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d005      	beq.n	801b03c <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b030:	4b8b      	ldr	r3, [pc, #556]	; (801b260 <SX1276OnDio0Irq+0x32c>)
 801b032:	2101      	movs	r1, #1
 801b034:	0018      	movs	r0, r3
 801b036:	f7ff fd33 	bl	801aaa0 <SX1276ReadFifo>
 801b03a:	e006      	b.n	801b04a <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b03c:	2032      	movs	r0, #50	; 0x32
 801b03e:	f7ff fca2 	bl	801a986 <SX1276Read>
 801b042:	0003      	movs	r3, r0
 801b044:	b29a      	uxth	r2, r3
 801b046:	4b82      	ldr	r3, [pc, #520]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b048:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b04a:	4b81      	ldr	r3, [pc, #516]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b04c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b04e:	001a      	movs	r2, r3
 801b050:	4b84      	ldr	r3, [pc, #528]	; (801b264 <SX1276OnDio0Irq+0x330>)
 801b052:	18d0      	adds	r0, r2, r3
 801b054:	4b7e      	ldr	r3, [pc, #504]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b056:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b058:	b2da      	uxtb	r2, r3
 801b05a:	4b7d      	ldr	r3, [pc, #500]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b05c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b05e:	b2db      	uxtb	r3, r3
 801b060:	1ad3      	subs	r3, r2, r3
 801b062:	b2db      	uxtb	r3, r3
 801b064:	0019      	movs	r1, r3
 801b066:	f7ff fd1b 	bl	801aaa0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b06a:	4b79      	ldr	r3, [pc, #484]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b06c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b06e:	4b78      	ldr	r3, [pc, #480]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b070:	879a      	strh	r2, [r3, #60]	; 0x3c
 801b072:	e013      	b.n	801b09c <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b074:	4b76      	ldr	r3, [pc, #472]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b076:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b078:	001a      	movs	r2, r3
 801b07a:	4b7a      	ldr	r3, [pc, #488]	; (801b264 <SX1276OnDio0Irq+0x330>)
 801b07c:	18d0      	adds	r0, r2, r3
 801b07e:	4b74      	ldr	r3, [pc, #464]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b080:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b082:	b2da      	uxtb	r2, r3
 801b084:	4b72      	ldr	r3, [pc, #456]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b086:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b088:	b2db      	uxtb	r3, r3
 801b08a:	1ad3      	subs	r3, r2, r3
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	0019      	movs	r1, r3
 801b090:	f7ff fd06 	bl	801aaa0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b094:	4b6e      	ldr	r3, [pc, #440]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b096:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b098:	4b6d      	ldr	r3, [pc, #436]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b09a:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801b09c:	4b6d      	ldr	r3, [pc, #436]	; (801b254 <SX1276OnDio0Irq+0x320>)
 801b09e:	0018      	movs	r0, r3
 801b0a0:	f001 faca 	bl	801c638 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801b0a4:	4b6a      	ldr	r3, [pc, #424]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b0a6:	2226      	movs	r2, #38	; 0x26
 801b0a8:	5c9b      	ldrb	r3, [r3, r2]
 801b0aa:	2201      	movs	r2, #1
 801b0ac:	4053      	eors	r3, r2
 801b0ae:	b2db      	uxtb	r3, r3
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d007      	beq.n	801b0c4 <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801b0b4:	4b66      	ldr	r3, [pc, #408]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801b0ba:	4b67      	ldr	r3, [pc, #412]	; (801b258 <SX1276OnDio0Irq+0x324>)
 801b0bc:	0018      	movs	r0, r3
 801b0be:	f001 fabb 	bl	801c638 <UTIL_TIMER_Stop>
 801b0c2:	e00b      	b.n	801b0dc <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b0c4:	200d      	movs	r0, #13
 801b0c6:	f7ff fc5e 	bl	801a986 <SX1276Read>
 801b0ca:	0003      	movs	r3, r0
 801b0cc:	001a      	movs	r2, r3
 801b0ce:	2340      	movs	r3, #64	; 0x40
 801b0d0:	4313      	orrs	r3, r2
 801b0d2:	b2db      	uxtb	r3, r3
 801b0d4:	0019      	movs	r1, r3
 801b0d6:	200d      	movs	r0, #13
 801b0d8:	f7ff fc44 	bl	801a964 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b0dc:	4b5f      	ldr	r3, [pc, #380]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d010      	beq.n	801b106 <SX1276OnDio0Irq+0x1d2>
 801b0e4:	4b5d      	ldr	r3, [pc, #372]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	689b      	ldr	r3, [r3, #8]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d00b      	beq.n	801b106 <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801b0ee:	4b5b      	ldr	r3, [pc, #364]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	689c      	ldr	r4, [r3, #8]
 801b0f4:	4b56      	ldr	r3, [pc, #344]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b0f6:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801b0f8:	4b55      	ldr	r3, [pc, #340]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b0fa:	2232      	movs	r2, #50	; 0x32
 801b0fc:	569b      	ldrsb	r3, [r3, r2]
 801b0fe:	b21a      	sxth	r2, r3
 801b100:	4858      	ldr	r0, [pc, #352]	; (801b264 <SX1276OnDio0Irq+0x330>)
 801b102:	2300      	movs	r3, #0
 801b104:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b106:	4b52      	ldr	r3, [pc, #328]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b108:	2230      	movs	r2, #48	; 0x30
 801b10a:	2100      	movs	r1, #0
 801b10c:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b10e:	4b50      	ldr	r3, [pc, #320]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b110:	2231      	movs	r2, #49	; 0x31
 801b112:	2100      	movs	r1, #0
 801b114:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b116:	4b4e      	ldr	r3, [pc, #312]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b118:	2200      	movs	r2, #0
 801b11a:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801b11c:	4b4c      	ldr	r3, [pc, #304]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b11e:	2200      	movs	r2, #0
 801b120:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801b122:	e0f6      	b.n	801b312 <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801b124:	2140      	movs	r1, #64	; 0x40
 801b126:	2012      	movs	r0, #18
 801b128:	f7ff fc1c 	bl	801a964 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801b12c:	2012      	movs	r0, #18
 801b12e:	f7ff fc2a 	bl	801a986 <SX1276Read>
 801b132:	0003      	movs	r3, r0
 801b134:	001a      	movs	r2, r3
 801b136:	1d7b      	adds	r3, r7, #5
 801b138:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801b13a:	1d7b      	adds	r3, r7, #5
 801b13c:	781b      	ldrb	r3, [r3, #0]
 801b13e:	b2db      	uxtb	r3, r3
 801b140:	001a      	movs	r2, r3
 801b142:	2320      	movs	r3, #32
 801b144:	4013      	ands	r3, r2
 801b146:	2b20      	cmp	r3, #32
 801b148:	d122      	bne.n	801b190 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801b14a:	2120      	movs	r1, #32
 801b14c:	2012      	movs	r0, #18
 801b14e:	f7ff fc09 	bl	801a964 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801b152:	4b3f      	ldr	r3, [pc, #252]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b154:	2256      	movs	r2, #86	; 0x56
 801b156:	5c9b      	ldrb	r3, [r3, r2]
 801b158:	2201      	movs	r2, #1
 801b15a:	4053      	eors	r3, r2
 801b15c:	b2db      	uxtb	r3, r3
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d002      	beq.n	801b168 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801b162:	4b3b      	ldr	r3, [pc, #236]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b164:	2200      	movs	r2, #0
 801b166:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801b168:	4b3a      	ldr	r3, [pc, #232]	; (801b254 <SX1276OnDio0Irq+0x320>)
 801b16a:	0018      	movs	r0, r3
 801b16c:	f001 fa64 	bl	801c638 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b170:	4b3a      	ldr	r3, [pc, #232]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d100      	bne.n	801b17a <SX1276OnDio0Irq+0x246>
 801b178:	e0c8      	b.n	801b30c <SX1276OnDio0Irq+0x3d8>
 801b17a:	4b38      	ldr	r3, [pc, #224]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	691b      	ldr	r3, [r3, #16]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d100      	bne.n	801b186 <SX1276OnDio0Irq+0x252>
 801b184:	e0c2      	b.n	801b30c <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801b186:	4b35      	ldr	r3, [pc, #212]	; (801b25c <SX1276OnDio0Irq+0x328>)
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	691b      	ldr	r3, [r3, #16]
 801b18c:	4798      	blx	r3
                        break;
 801b18e:	e0bd      	b.n	801b30c <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801b190:	2019      	movs	r0, #25
 801b192:	f7ff fbf8 	bl	801a986 <SX1276Read>
 801b196:	0003      	movs	r3, r0
 801b198:	b25b      	sxtb	r3, r3
 801b19a:	3302      	adds	r3, #2
 801b19c:	109b      	asrs	r3, r3, #2
 801b19e:	b259      	sxtb	r1, r3
 801b1a0:	4b2b      	ldr	r3, [pc, #172]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b1a2:	2260      	movs	r2, #96	; 0x60
 801b1a4:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801b1a6:	201a      	movs	r0, #26
 801b1a8:	f7ff fbed 	bl	801a986 <SX1276Read>
 801b1ac:	0003      	movs	r3, r0
 801b1ae:	001a      	movs	r2, r3
 801b1b0:	1dbb      	adds	r3, r7, #6
 801b1b2:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801b1b4:	4b26      	ldr	r3, [pc, #152]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b1b6:	2260      	movs	r2, #96	; 0x60
 801b1b8:	569b      	ldrsb	r3, [r3, r2]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	da32      	bge.n	801b224 <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b1be:	4b24      	ldr	r3, [pc, #144]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b1c0:	689b      	ldr	r3, [r3, #8]
 801b1c2:	4a29      	ldr	r2, [pc, #164]	; (801b268 <SX1276OnDio0Irq+0x334>)
 801b1c4:	4293      	cmp	r3, r2
 801b1c6:	d916      	bls.n	801b1f6 <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b1c8:	1dbb      	adds	r3, r7, #6
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	5e9b      	ldrsh	r3, [r3, r2]
 801b1ce:	111b      	asrs	r3, r3, #4
 801b1d0:	b21b      	sxth	r3, r3
 801b1d2:	b29a      	uxth	r2, r3
 801b1d4:	1dbb      	adds	r3, r7, #6
 801b1d6:	881b      	ldrh	r3, [r3, #0]
 801b1d8:	18d3      	adds	r3, r2, r3
 801b1da:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b1dc:	4b1c      	ldr	r3, [pc, #112]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b1de:	2160      	movs	r1, #96	; 0x60
 801b1e0:	565b      	ldrsb	r3, [r3, r1]
 801b1e2:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b1e4:	18d3      	adds	r3, r2, r3
 801b1e6:	b29b      	uxth	r3, r3
 801b1e8:	3b9d      	subs	r3, #157	; 0x9d
 801b1ea:	b29b      	uxth	r3, r3
 801b1ec:	b219      	sxth	r1, r3
 801b1ee:	4b18      	ldr	r3, [pc, #96]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b1f0:	2262      	movs	r2, #98	; 0x62
 801b1f2:	5299      	strh	r1, [r3, r2]
 801b1f4:	e04a      	b.n	801b28c <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b1f6:	1dbb      	adds	r3, r7, #6
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	5e9b      	ldrsh	r3, [r3, r2]
 801b1fc:	111b      	asrs	r3, r3, #4
 801b1fe:	b21b      	sxth	r3, r3
 801b200:	b29a      	uxth	r2, r3
 801b202:	1dbb      	adds	r3, r7, #6
 801b204:	881b      	ldrh	r3, [r3, #0]
 801b206:	18d3      	adds	r3, r2, r3
 801b208:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b20a:	4b11      	ldr	r3, [pc, #68]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b20c:	2160      	movs	r1, #96	; 0x60
 801b20e:	565b      	ldrsb	r3, [r3, r1]
 801b210:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b212:	18d3      	adds	r3, r2, r3
 801b214:	b29b      	uxth	r3, r3
 801b216:	3ba4      	subs	r3, #164	; 0xa4
 801b218:	b29b      	uxth	r3, r3
 801b21a:	b219      	sxth	r1, r3
 801b21c:	4b0c      	ldr	r3, [pc, #48]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b21e:	2262      	movs	r2, #98	; 0x62
 801b220:	5299      	strh	r1, [r3, r2]
 801b222:	e033      	b.n	801b28c <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b224:	4b0a      	ldr	r3, [pc, #40]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b226:	689b      	ldr	r3, [r3, #8]
 801b228:	4a0f      	ldr	r2, [pc, #60]	; (801b268 <SX1276OnDio0Irq+0x334>)
 801b22a:	4293      	cmp	r3, r2
 801b22c:	d91e      	bls.n	801b26c <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801b22e:	1dbb      	adds	r3, r7, #6
 801b230:	2200      	movs	r2, #0
 801b232:	5e9b      	ldrsh	r3, [r3, r2]
 801b234:	111b      	asrs	r3, r3, #4
 801b236:	b21b      	sxth	r3, r3
 801b238:	b29a      	uxth	r2, r3
 801b23a:	1dbb      	adds	r3, r7, #6
 801b23c:	881b      	ldrh	r3, [r3, #0]
 801b23e:	18d3      	adds	r3, r2, r3
 801b240:	b29b      	uxth	r3, r3
 801b242:	3b9d      	subs	r3, #157	; 0x9d
 801b244:	b29b      	uxth	r3, r3
 801b246:	b219      	sxth	r1, r3
 801b248:	4b01      	ldr	r3, [pc, #4]	; (801b250 <SX1276OnDio0Irq+0x31c>)
 801b24a:	2262      	movs	r2, #98	; 0x62
 801b24c:	5299      	strh	r1, [r3, r2]
 801b24e:	e01d      	b.n	801b28c <SX1276OnDio0Irq+0x358>
 801b250:	20001584 	.word	0x20001584
 801b254:	20001604 	.word	0x20001604
 801b258:	2000161c 	.word	0x2000161c
 801b25c:	20001480 	.word	0x20001480
 801b260:	200015be 	.word	0x200015be
 801b264:	20001484 	.word	0x20001484
 801b268:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801b26c:	1dbb      	adds	r3, r7, #6
 801b26e:	2200      	movs	r2, #0
 801b270:	5e9b      	ldrsh	r3, [r3, r2]
 801b272:	111b      	asrs	r3, r3, #4
 801b274:	b21b      	sxth	r3, r3
 801b276:	b29a      	uxth	r2, r3
 801b278:	1dbb      	adds	r3, r7, #6
 801b27a:	881b      	ldrh	r3, [r3, #0]
 801b27c:	18d3      	adds	r3, r2, r3
 801b27e:	b29b      	uxth	r3, r3
 801b280:	3ba4      	subs	r3, #164	; 0xa4
 801b282:	b29b      	uxth	r3, r3
 801b284:	b219      	sxth	r1, r3
 801b286:	4b34      	ldr	r3, [pc, #208]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b288:	2262      	movs	r2, #98	; 0x62
 801b28a:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801b28c:	2013      	movs	r0, #19
 801b28e:	f7ff fb7a 	bl	801a986 <SX1276Read>
 801b292:	0003      	movs	r3, r0
 801b294:	0019      	movs	r1, r3
 801b296:	4b30      	ldr	r3, [pc, #192]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b298:	2264      	movs	r2, #100	; 0x64
 801b29a:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801b29c:	2010      	movs	r0, #16
 801b29e:	f7ff fb72 	bl	801a986 <SX1276Read>
 801b2a2:	0003      	movs	r3, r0
 801b2a4:	0019      	movs	r1, r3
 801b2a6:	200d      	movs	r0, #13
 801b2a8:	f7ff fb5c 	bl	801a964 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801b2ac:	4b2a      	ldr	r3, [pc, #168]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b2ae:	2264      	movs	r2, #100	; 0x64
 801b2b0:	5c9a      	ldrb	r2, [r3, r2]
 801b2b2:	4b2a      	ldr	r3, [pc, #168]	; (801b35c <SX1276OnDio0Irq+0x428>)
 801b2b4:	0011      	movs	r1, r2
 801b2b6:	0018      	movs	r0, r3
 801b2b8:	f7ff fbf2 	bl	801aaa0 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801b2bc:	4b26      	ldr	r3, [pc, #152]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b2be:	2256      	movs	r2, #86	; 0x56
 801b2c0:	5c9b      	ldrb	r3, [r3, r2]
 801b2c2:	2201      	movs	r2, #1
 801b2c4:	4053      	eors	r3, r2
 801b2c6:	b2db      	uxtb	r3, r3
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d002      	beq.n	801b2d2 <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801b2cc:	4b22      	ldr	r3, [pc, #136]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801b2d2:	4b23      	ldr	r3, [pc, #140]	; (801b360 <SX1276OnDio0Irq+0x42c>)
 801b2d4:	0018      	movs	r0, r3
 801b2d6:	f001 f9af 	bl	801c638 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b2da:	4b22      	ldr	r3, [pc, #136]	; (801b364 <SX1276OnDio0Irq+0x430>)
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d016      	beq.n	801b310 <SX1276OnDio0Irq+0x3dc>
 801b2e2:	4b20      	ldr	r3, [pc, #128]	; (801b364 <SX1276OnDio0Irq+0x430>)
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	689b      	ldr	r3, [r3, #8]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d011      	beq.n	801b310 <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801b2ec:	4b1d      	ldr	r3, [pc, #116]	; (801b364 <SX1276OnDio0Irq+0x430>)
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	689c      	ldr	r4, [r3, #8]
 801b2f2:	4b19      	ldr	r3, [pc, #100]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b2f4:	2264      	movs	r2, #100	; 0x64
 801b2f6:	5c9b      	ldrb	r3, [r3, r2]
 801b2f8:	b299      	uxth	r1, r3
 801b2fa:	4b17      	ldr	r3, [pc, #92]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b2fc:	2262      	movs	r2, #98	; 0x62
 801b2fe:	5e9a      	ldrsh	r2, [r3, r2]
 801b300:	4b15      	ldr	r3, [pc, #84]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b302:	2060      	movs	r0, #96	; 0x60
 801b304:	561b      	ldrsb	r3, [r3, r0]
 801b306:	4815      	ldr	r0, [pc, #84]	; (801b35c <SX1276OnDio0Irq+0x428>)
 801b308:	47a0      	blx	r4
                break;
 801b30a:	e001      	b.n	801b310 <SX1276OnDio0Irq+0x3dc>
                        break;
 801b30c:	46c0      	nop			; (mov r8, r8)
 801b30e:	e01f      	b.n	801b350 <SX1276OnDio0Irq+0x41c>
                break;
 801b310:	46c0      	nop			; (mov r8, r8)
            break;
 801b312:	e01d      	b.n	801b350 <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801b314:	4b14      	ldr	r3, [pc, #80]	; (801b368 <SX1276OnDio0Irq+0x434>)
 801b316:	0018      	movs	r0, r3
 801b318:	f001 f98e 	bl	801c638 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801b31c:	4b0e      	ldr	r3, [pc, #56]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b31e:	795b      	ldrb	r3, [r3, #5]
 801b320:	2b01      	cmp	r3, #1
 801b322:	d103      	bne.n	801b32c <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801b324:	2108      	movs	r1, #8
 801b326:	2012      	movs	r0, #18
 801b328:	f7ff fb1c 	bl	801a964 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b32c:	4b0a      	ldr	r3, [pc, #40]	; (801b358 <SX1276OnDio0Irq+0x424>)
 801b32e:	2200      	movs	r2, #0
 801b330:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b332:	4b0c      	ldr	r3, [pc, #48]	; (801b364 <SX1276OnDio0Irq+0x430>)
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d008      	beq.n	801b34c <SX1276OnDio0Irq+0x418>
 801b33a:	4b0a      	ldr	r3, [pc, #40]	; (801b364 <SX1276OnDio0Irq+0x430>)
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d003      	beq.n	801b34c <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801b344:	4b07      	ldr	r3, [pc, #28]	; (801b364 <SX1276OnDio0Irq+0x430>)
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	4798      	blx	r3
                break;
 801b34c:	46c0      	nop			; (mov r8, r8)
            break;
 801b34e:	46c0      	nop			; (mov r8, r8)
    }
}
 801b350:	46c0      	nop			; (mov r8, r8)
 801b352:	46bd      	mov	sp, r7
 801b354:	b003      	add	sp, #12
 801b356:	bd90      	pop	{r4, r7, pc}
 801b358:	20001584 	.word	0x20001584
 801b35c:	20001484 	.word	0x20001484
 801b360:	20001604 	.word	0x20001604
 801b364:	20001480 	.word	0x20001480
 801b368:	200015ec 	.word	0x200015ec

0801b36c <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801b36c:	b580      	push	{r7, lr}
 801b36e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801b370:	4b6c      	ldr	r3, [pc, #432]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b372:	791b      	ldrb	r3, [r3, #4]
 801b374:	2b01      	cmp	r3, #1
 801b376:	d003      	beq.n	801b380 <SX1276OnDio1Irq+0x14>
 801b378:	2b02      	cmp	r3, #2
 801b37a:	d100      	bne.n	801b37e <SX1276OnDio1Irq+0x12>
 801b37c:	e08b      	b.n	801b496 <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801b37e:	e0ce      	b.n	801b51e <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b380:	4b68      	ldr	r3, [pc, #416]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b382:	795b      	ldrb	r3, [r3, #5]
 801b384:	2b00      	cmp	r3, #0
 801b386:	d002      	beq.n	801b38e <SX1276OnDio1Irq+0x22>
 801b388:	2b01      	cmp	r3, #1
 801b38a:	d061      	beq.n	801b450 <SX1276OnDio1Irq+0xe4>
                break;
 801b38c:	e082      	b.n	801b494 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b38e:	f7ea fa35 	bl	80057fc <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b392:	1e03      	subs	r3, r0, #0
 801b394:	d100      	bne.n	801b398 <SX1276OnDio1Irq+0x2c>
 801b396:	e078      	b.n	801b48a <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801b398:	4b63      	ldr	r3, [pc, #396]	; (801b528 <SX1276OnDio1Irq+0x1bc>)
 801b39a:	0018      	movs	r0, r3
 801b39c:	f001 f94c 	bl	801c638 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b3a0:	4b60      	ldr	r3, [pc, #384]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d118      	bne.n	801b3da <SX1276OnDio1Irq+0x6e>
 801b3a8:	4b5e      	ldr	r3, [pc, #376]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3aa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d114      	bne.n	801b3da <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b3b0:	4b5c      	ldr	r3, [pc, #368]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3b2:	2222      	movs	r2, #34	; 0x22
 801b3b4:	5c9b      	ldrb	r3, [r3, r2]
 801b3b6:	2201      	movs	r2, #1
 801b3b8:	4053      	eors	r3, r2
 801b3ba:	b2db      	uxtb	r3, r3
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d005      	beq.n	801b3cc <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b3c0:	4b5a      	ldr	r3, [pc, #360]	; (801b52c <SX1276OnDio1Irq+0x1c0>)
 801b3c2:	2101      	movs	r1, #1
 801b3c4:	0018      	movs	r0, r3
 801b3c6:	f7ff fb6b 	bl	801aaa0 <SX1276ReadFifo>
 801b3ca:	e006      	b.n	801b3da <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b3cc:	2032      	movs	r0, #50	; 0x32
 801b3ce:	f7ff fada 	bl	801a986 <SX1276Read>
 801b3d2:	0003      	movs	r3, r0
 801b3d4:	b29a      	uxth	r2, r3
 801b3d6:	4b53      	ldr	r3, [pc, #332]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3d8:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801b3da:	4b52      	ldr	r3, [pc, #328]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3dc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b3de:	001a      	movs	r2, r3
 801b3e0:	4b50      	ldr	r3, [pc, #320]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b3e4:	1ad3      	subs	r3, r2, r3
 801b3e6:	4a4f      	ldr	r2, [pc, #316]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3e8:	213e      	movs	r1, #62	; 0x3e
 801b3ea:	5c52      	ldrb	r2, [r2, r1]
 801b3ec:	4293      	cmp	r3, r2
 801b3ee:	db1a      	blt.n	801b426 <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801b3f0:	4b4c      	ldr	r3, [pc, #304]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b3f4:	001a      	movs	r2, r3
 801b3f6:	4b4e      	ldr	r3, [pc, #312]	; (801b530 <SX1276OnDio1Irq+0x1c4>)
 801b3f8:	18d2      	adds	r2, r2, r3
 801b3fa:	4b4a      	ldr	r3, [pc, #296]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b3fc:	213e      	movs	r1, #62	; 0x3e
 801b3fe:	5c5b      	ldrb	r3, [r3, r1]
 801b400:	3b01      	subs	r3, #1
 801b402:	b2db      	uxtb	r3, r3
 801b404:	0019      	movs	r1, r3
 801b406:	0010      	movs	r0, r2
 801b408:	f7ff fb4a 	bl	801aaa0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801b40c:	4b45      	ldr	r3, [pc, #276]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b40e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b410:	4b44      	ldr	r3, [pc, #272]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b412:	213e      	movs	r1, #62	; 0x3e
 801b414:	5c5b      	ldrb	r3, [r3, r1]
 801b416:	b29b      	uxth	r3, r3
 801b418:	18d3      	adds	r3, r2, r3
 801b41a:	b29b      	uxth	r3, r3
 801b41c:	3b01      	subs	r3, #1
 801b41e:	b29a      	uxth	r2, r3
 801b420:	4b40      	ldr	r3, [pc, #256]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b422:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b424:	e036      	b.n	801b494 <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b426:	4b3f      	ldr	r3, [pc, #252]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b428:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b42a:	001a      	movs	r2, r3
 801b42c:	4b40      	ldr	r3, [pc, #256]	; (801b530 <SX1276OnDio1Irq+0x1c4>)
 801b42e:	18d0      	adds	r0, r2, r3
 801b430:	4b3c      	ldr	r3, [pc, #240]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b432:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b434:	b2da      	uxtb	r2, r3
 801b436:	4b3b      	ldr	r3, [pc, #236]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b438:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b43a:	b2db      	uxtb	r3, r3
 801b43c:	1ad3      	subs	r3, r2, r3
 801b43e:	b2db      	uxtb	r3, r3
 801b440:	0019      	movs	r1, r3
 801b442:	f7ff fb2d 	bl	801aaa0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b446:	4b37      	ldr	r3, [pc, #220]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b448:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b44a:	4b36      	ldr	r3, [pc, #216]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b44c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b44e:	e021      	b.n	801b494 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b450:	f7ea f9d4 	bl	80057fc <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b454:	1e03      	subs	r3, r0, #0
 801b456:	d01a      	beq.n	801b48e <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801b458:	4b36      	ldr	r3, [pc, #216]	; (801b534 <SX1276OnDio1Irq+0x1c8>)
 801b45a:	0018      	movs	r0, r3
 801b45c:	f001 f8ec 	bl	801c638 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801b460:	2180      	movs	r1, #128	; 0x80
 801b462:	2012      	movs	r0, #18
 801b464:	f7ff fa7e 	bl	801a964 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b468:	4b2e      	ldr	r3, [pc, #184]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b46a:	2200      	movs	r2, #0
 801b46c:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b46e:	4b32      	ldr	r3, [pc, #200]	; (801b538 <SX1276OnDio1Irq+0x1cc>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d00d      	beq.n	801b492 <SX1276OnDio1Irq+0x126>
 801b476:	4b30      	ldr	r3, [pc, #192]	; (801b538 <SX1276OnDio1Irq+0x1cc>)
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	68db      	ldr	r3, [r3, #12]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d008      	beq.n	801b492 <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801b480:	4b2d      	ldr	r3, [pc, #180]	; (801b538 <SX1276OnDio1Irq+0x1cc>)
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	68db      	ldr	r3, [r3, #12]
 801b486:	4798      	blx	r3
                break;
 801b488:	e003      	b.n	801b492 <SX1276OnDio1Irq+0x126>
                    break;
 801b48a:	46c0      	nop			; (mov r8, r8)
 801b48c:	e047      	b.n	801b51e <SX1276OnDio1Irq+0x1b2>
                    break;
 801b48e:	46c0      	nop			; (mov r8, r8)
 801b490:	e045      	b.n	801b51e <SX1276OnDio1Irq+0x1b2>
                break;
 801b492:	46c0      	nop			; (mov r8, r8)
            break;
 801b494:	e043      	b.n	801b51e <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b496:	4b23      	ldr	r3, [pc, #140]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b498:	795b      	ldrb	r3, [r3, #5]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d13b      	bne.n	801b516 <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801b49e:	f7ea f9ad 	bl	80057fc <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b4a2:	0003      	movs	r3, r0
 801b4a4:	2b01      	cmp	r3, #1
 801b4a6:	d038      	beq.n	801b51a <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801b4a8:	4b1e      	ldr	r3, [pc, #120]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4aa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b4ac:	001a      	movs	r2, r3
 801b4ae:	4b1d      	ldr	r3, [pc, #116]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4b2:	1ad3      	subs	r3, r2, r3
 801b4b4:	4a1b      	ldr	r2, [pc, #108]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4b6:	213f      	movs	r1, #63	; 0x3f
 801b4b8:	5c52      	ldrb	r2, [r2, r1]
 801b4ba:	4293      	cmp	r3, r2
 801b4bc:	dd16      	ble.n	801b4ec <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801b4be:	4b19      	ldr	r3, [pc, #100]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4c2:	001a      	movs	r2, r3
 801b4c4:	4b1a      	ldr	r3, [pc, #104]	; (801b530 <SX1276OnDio1Irq+0x1c4>)
 801b4c6:	18d2      	adds	r2, r2, r3
 801b4c8:	4b16      	ldr	r3, [pc, #88]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4ca:	213f      	movs	r1, #63	; 0x3f
 801b4cc:	5c5b      	ldrb	r3, [r3, r1]
 801b4ce:	0019      	movs	r1, r3
 801b4d0:	0010      	movs	r0, r2
 801b4d2:	f7ff fad3 	bl	801aa7c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801b4d6:	4b13      	ldr	r3, [pc, #76]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4d8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b4da:	4b12      	ldr	r3, [pc, #72]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4dc:	213f      	movs	r1, #63	; 0x3f
 801b4de:	5c5b      	ldrb	r3, [r3, r1]
 801b4e0:	b29b      	uxth	r3, r3
 801b4e2:	18d3      	adds	r3, r2, r3
 801b4e4:	b29a      	uxth	r2, r3
 801b4e6:	4b0f      	ldr	r3, [pc, #60]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4e8:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b4ea:	e017      	b.n	801b51c <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b4ec:	4b0d      	ldr	r3, [pc, #52]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4f0:	001a      	movs	r2, r3
 801b4f2:	4b0f      	ldr	r3, [pc, #60]	; (801b530 <SX1276OnDio1Irq+0x1c4>)
 801b4f4:	18d0      	adds	r0, r2, r3
 801b4f6:	4b0b      	ldr	r3, [pc, #44]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4f8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b4fa:	b2da      	uxtb	r2, r3
 801b4fc:	4b09      	ldr	r3, [pc, #36]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b4fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b500:	b2db      	uxtb	r3, r3
 801b502:	1ad3      	subs	r3, r2, r3
 801b504:	b2db      	uxtb	r3, r3
 801b506:	0019      	movs	r1, r3
 801b508:	f7ff fab8 	bl	801aa7c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801b50c:	4b05      	ldr	r3, [pc, #20]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b50e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b510:	4b04      	ldr	r3, [pc, #16]	; (801b524 <SX1276OnDio1Irq+0x1b8>)
 801b512:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b514:	e002      	b.n	801b51c <SX1276OnDio1Irq+0x1b0>
                break;
 801b516:	46c0      	nop			; (mov r8, r8)
 801b518:	e000      	b.n	801b51c <SX1276OnDio1Irq+0x1b0>
                    break;
 801b51a:	46c0      	nop			; (mov r8, r8)
            break;
 801b51c:	46c0      	nop			; (mov r8, r8)
    }
}
 801b51e:	46c0      	nop			; (mov r8, r8)
 801b520:	46bd      	mov	sp, r7
 801b522:	bd80      	pop	{r7, pc}
 801b524:	20001584 	.word	0x20001584
 801b528:	2000161c 	.word	0x2000161c
 801b52c:	200015be 	.word	0x200015be
 801b530:	20001484 	.word	0x20001484
 801b534:	20001604 	.word	0x20001604
 801b538:	20001480 	.word	0x20001480

0801b53c <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801b53c:	b590      	push	{r4, r7, lr}
 801b53e:	b085      	sub	sp, #20
 801b540:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801b542:	2300      	movs	r3, #0
 801b544:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801b546:	4b5d      	ldr	r3, [pc, #372]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b548:	791b      	ldrb	r3, [r3, #4]
 801b54a:	2b01      	cmp	r3, #1
 801b54c:	d003      	beq.n	801b556 <SX1276OnDio2Irq+0x1a>
 801b54e:	2b02      	cmp	r3, #2
 801b550:	d100      	bne.n	801b554 <SX1276OnDio2Irq+0x18>
 801b552:	e083      	b.n	801b65c <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801b554:	e0ae      	b.n	801b6b4 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801b556:	4b59      	ldr	r3, [pc, #356]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b558:	795b      	ldrb	r3, [r3, #5]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d002      	beq.n	801b564 <SX1276OnDio2Irq+0x28>
 801b55e:	2b01      	cmp	r3, #1
 801b560:	d058      	beq.n	801b614 <SX1276OnDio2Irq+0xd8>
                break;
 801b562:	e07a      	b.n	801b65a <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801b564:	4b55      	ldr	r3, [pc, #340]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b566:	2230      	movs	r2, #48	; 0x30
 801b568:	2101      	movs	r1, #1
 801b56a:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801b56c:	4b53      	ldr	r3, [pc, #332]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b56e:	2230      	movs	r2, #48	; 0x30
 801b570:	5c9b      	ldrb	r3, [r3, r2]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d06e      	beq.n	801b654 <SX1276OnDio2Irq+0x118>
 801b576:	4b51      	ldr	r3, [pc, #324]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b578:	2231      	movs	r2, #49	; 0x31
 801b57a:	5c9b      	ldrb	r3, [r3, r2]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d169      	bne.n	801b654 <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801b580:	4b4f      	ldr	r3, [pc, #316]	; (801b6c0 <SX1276OnDio2Irq+0x184>)
 801b582:	0018      	movs	r0, r3
 801b584:	f001 f858 	bl	801c638 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801b588:	4b4c      	ldr	r3, [pc, #304]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b58a:	2231      	movs	r2, #49	; 0x31
 801b58c:	2101      	movs	r1, #1
 801b58e:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801b590:	2011      	movs	r0, #17
 801b592:	f7ff f9f8 	bl	801a986 <SX1276Read>
 801b596:	0003      	movs	r3, r0
 801b598:	085b      	lsrs	r3, r3, #1
 801b59a:	b2db      	uxtb	r3, r3
 801b59c:	425b      	negs	r3, r3
 801b59e:	b2db      	uxtb	r3, r3
 801b5a0:	b259      	sxtb	r1, r3
 801b5a2:	4b46      	ldr	r3, [pc, #280]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b5a4:	2232      	movs	r2, #50	; 0x32
 801b5a6:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801b5a8:	201b      	movs	r0, #27
 801b5aa:	f7ff f9ec 	bl	801a986 <SX1276Read>
 801b5ae:	0003      	movs	r3, r0
 801b5b0:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801b5b2:	201c      	movs	r0, #28
 801b5b4:	f7ff f9e7 	bl	801a986 <SX1276Read>
 801b5b8:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801b5ba:	4323      	orrs	r3, r4
 801b5bc:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	0a1b      	lsrs	r3, r3, #8
 801b5c2:	60bb      	str	r3, [r7, #8]
 801b5c4:	68bb      	ldr	r3, [r7, #8]
 801b5c6:	021b      	lsls	r3, r3, #8
 801b5c8:	68fa      	ldr	r2, [r7, #12]
 801b5ca:	1ad3      	subs	r3, r2, r3
 801b5cc:	607b      	str	r3, [r7, #4]
 801b5ce:	68b9      	ldr	r1, [r7, #8]
 801b5d0:	000b      	movs	r3, r1
 801b5d2:	015b      	lsls	r3, r3, #5
 801b5d4:	1a5b      	subs	r3, r3, r1
 801b5d6:	019a      	lsls	r2, r3, #6
 801b5d8:	1ad2      	subs	r2, r2, r3
 801b5da:	00d2      	lsls	r2, r2, #3
 801b5dc:	1850      	adds	r0, r2, r1
 801b5de:	6879      	ldr	r1, [r7, #4]
 801b5e0:	000b      	movs	r3, r1
 801b5e2:	015b      	lsls	r3, r3, #5
 801b5e4:	1a5b      	subs	r3, r3, r1
 801b5e6:	019a      	lsls	r2, r3, #6
 801b5e8:	1ad2      	subs	r2, r2, r3
 801b5ea:	00d2      	lsls	r2, r2, #3
 801b5ec:	1853      	adds	r3, r2, r1
 801b5ee:	3380      	adds	r3, #128	; 0x80
 801b5f0:	0a1b      	lsrs	r3, r3, #8
 801b5f2:	18c3      	adds	r3, r0, r3
 801b5f4:	001a      	movs	r2, r3
 801b5f6:	4b31      	ldr	r3, [pc, #196]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b5f8:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801b5fa:	200c      	movs	r0, #12
 801b5fc:	f7ff f9c3 	bl	801a986 <SX1276Read>
 801b600:	0003      	movs	r3, r0
 801b602:	095b      	lsrs	r3, r3, #5
 801b604:	b2db      	uxtb	r3, r3
 801b606:	2207      	movs	r2, #7
 801b608:	4013      	ands	r3, r2
 801b60a:	b2d9      	uxtb	r1, r3
 801b60c:	4b2b      	ldr	r3, [pc, #172]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b60e:	2238      	movs	r2, #56	; 0x38
 801b610:	5499      	strb	r1, [r3, r2]
                break;
 801b612:	e01f      	b.n	801b654 <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b614:	4b29      	ldr	r3, [pc, #164]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b616:	2253      	movs	r2, #83	; 0x53
 801b618:	5c9b      	ldrb	r3, [r3, r2]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d01c      	beq.n	801b658 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801b61e:	2102      	movs	r1, #2
 801b620:	2012      	movs	r0, #18
 801b622:	f7ff f99f 	bl	801a964 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801b626:	4b27      	ldr	r3, [pc, #156]	; (801b6c4 <SX1276OnDio2Irq+0x188>)
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d014      	beq.n	801b658 <SX1276OnDio2Irq+0x11c>
 801b62e:	4b25      	ldr	r3, [pc, #148]	; (801b6c4 <SX1276OnDio2Irq+0x188>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	695b      	ldr	r3, [r3, #20]
 801b634:	2b00      	cmp	r3, #0
 801b636:	d00f      	beq.n	801b658 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801b638:	4b22      	ldr	r3, [pc, #136]	; (801b6c4 <SX1276OnDio2Irq+0x188>)
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	695c      	ldr	r4, [r3, #20]
 801b63e:	201c      	movs	r0, #28
 801b640:	f7ff f9a1 	bl	801a986 <SX1276Read>
 801b644:	0003      	movs	r3, r0
 801b646:	001a      	movs	r2, r3
 801b648:	233f      	movs	r3, #63	; 0x3f
 801b64a:	4013      	ands	r3, r2
 801b64c:	b2db      	uxtb	r3, r3
 801b64e:	0018      	movs	r0, r3
 801b650:	47a0      	blx	r4
                break;
 801b652:	e001      	b.n	801b658 <SX1276OnDio2Irq+0x11c>
                break;
 801b654:	46c0      	nop			; (mov r8, r8)
 801b656:	e02d      	b.n	801b6b4 <SX1276OnDio2Irq+0x178>
                break;
 801b658:	46c0      	nop			; (mov r8, r8)
            break;
 801b65a:	e02b      	b.n	801b6b4 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801b65c:	4b17      	ldr	r3, [pc, #92]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b65e:	795b      	ldrb	r3, [r3, #5]
 801b660:	2b00      	cmp	r3, #0
 801b662:	d021      	beq.n	801b6a8 <SX1276OnDio2Irq+0x16c>
 801b664:	2b01      	cmp	r3, #1
 801b666:	d121      	bne.n	801b6ac <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b668:	4b14      	ldr	r3, [pc, #80]	; (801b6bc <SX1276OnDio2Irq+0x180>)
 801b66a:	2253      	movs	r2, #83	; 0x53
 801b66c:	5c9b      	ldrb	r3, [r3, r2]
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d01e      	beq.n	801b6b0 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801b672:	2102      	movs	r1, #2
 801b674:	2012      	movs	r0, #18
 801b676:	f7ff f975 	bl	801a964 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801b67a:	4b12      	ldr	r3, [pc, #72]	; (801b6c4 <SX1276OnDio2Irq+0x188>)
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d016      	beq.n	801b6b0 <SX1276OnDio2Irq+0x174>
 801b682:	4b10      	ldr	r3, [pc, #64]	; (801b6c4 <SX1276OnDio2Irq+0x188>)
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	695b      	ldr	r3, [r3, #20]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d011      	beq.n	801b6b0 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801b68c:	4b0d      	ldr	r3, [pc, #52]	; (801b6c4 <SX1276OnDio2Irq+0x188>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	695c      	ldr	r4, [r3, #20]
 801b692:	201c      	movs	r0, #28
 801b694:	f7ff f977 	bl	801a986 <SX1276Read>
 801b698:	0003      	movs	r3, r0
 801b69a:	001a      	movs	r2, r3
 801b69c:	233f      	movs	r3, #63	; 0x3f
 801b69e:	4013      	ands	r3, r2
 801b6a0:	b2db      	uxtb	r3, r3
 801b6a2:	0018      	movs	r0, r3
 801b6a4:	47a0      	blx	r4
                break;
 801b6a6:	e003      	b.n	801b6b0 <SX1276OnDio2Irq+0x174>
                break;
 801b6a8:	46c0      	nop			; (mov r8, r8)
 801b6aa:	e002      	b.n	801b6b2 <SX1276OnDio2Irq+0x176>
                break;
 801b6ac:	46c0      	nop			; (mov r8, r8)
 801b6ae:	e000      	b.n	801b6b2 <SX1276OnDio2Irq+0x176>
                break;
 801b6b0:	46c0      	nop			; (mov r8, r8)
            break;
 801b6b2:	46c0      	nop			; (mov r8, r8)
    }
}
 801b6b4:	46c0      	nop			; (mov r8, r8)
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	b005      	add	sp, #20
 801b6ba:	bd90      	pop	{r4, r7, pc}
 801b6bc:	20001584 	.word	0x20001584
 801b6c0:	2000161c 	.word	0x2000161c
 801b6c4:	20001480 	.word	0x20001480

0801b6c8 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b6cc:	4b1d      	ldr	r3, [pc, #116]	; (801b744 <SX1276OnDio3Irq+0x7c>)
 801b6ce:	795b      	ldrb	r3, [r3, #5]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d031      	beq.n	801b738 <SX1276OnDio3Irq+0x70>
 801b6d4:	2b01      	cmp	r3, #1
 801b6d6:	d000      	beq.n	801b6da <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801b6d8:	e031      	b.n	801b73e <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801b6da:	2012      	movs	r0, #18
 801b6dc:	f7ff f953 	bl	801a986 <SX1276Read>
 801b6e0:	0003      	movs	r3, r0
 801b6e2:	001a      	movs	r2, r3
 801b6e4:	2301      	movs	r3, #1
 801b6e6:	4013      	ands	r3, r2
 801b6e8:	2b01      	cmp	r3, #1
 801b6ea:	d112      	bne.n	801b712 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801b6ec:	2105      	movs	r1, #5
 801b6ee:	2012      	movs	r0, #18
 801b6f0:	f7ff f938 	bl	801a964 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b6f4:	4b14      	ldr	r3, [pc, #80]	; (801b748 <SX1276OnDio3Irq+0x80>)
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d01f      	beq.n	801b73c <SX1276OnDio3Irq+0x74>
 801b6fc:	4b12      	ldr	r3, [pc, #72]	; (801b748 <SX1276OnDio3Irq+0x80>)
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	699b      	ldr	r3, [r3, #24]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d01a      	beq.n	801b73c <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801b706:	4b10      	ldr	r3, [pc, #64]	; (801b748 <SX1276OnDio3Irq+0x80>)
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	699b      	ldr	r3, [r3, #24]
 801b70c:	2001      	movs	r0, #1
 801b70e:	4798      	blx	r3
        break;
 801b710:	e014      	b.n	801b73c <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801b712:	2104      	movs	r1, #4
 801b714:	2012      	movs	r0, #18
 801b716:	f7ff f925 	bl	801a964 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b71a:	4b0b      	ldr	r3, [pc, #44]	; (801b748 <SX1276OnDio3Irq+0x80>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d00c      	beq.n	801b73c <SX1276OnDio3Irq+0x74>
 801b722:	4b09      	ldr	r3, [pc, #36]	; (801b748 <SX1276OnDio3Irq+0x80>)
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	699b      	ldr	r3, [r3, #24]
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d007      	beq.n	801b73c <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801b72c:	4b06      	ldr	r3, [pc, #24]	; (801b748 <SX1276OnDio3Irq+0x80>)
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	699b      	ldr	r3, [r3, #24]
 801b732:	2000      	movs	r0, #0
 801b734:	4798      	blx	r3
        break;
 801b736:	e001      	b.n	801b73c <SX1276OnDio3Irq+0x74>
        break;
 801b738:	46c0      	nop			; (mov r8, r8)
 801b73a:	e000      	b.n	801b73e <SX1276OnDio3Irq+0x76>
        break;
 801b73c:	46c0      	nop			; (mov r8, r8)
    }
}
 801b73e:	46c0      	nop			; (mov r8, r8)
 801b740:	46bd      	mov	sp, r7
 801b742:	bd80      	pop	{r7, pc}
 801b744:	20001584 	.word	0x20001584
 801b748:	20001480 	.word	0x20001480

0801b74c <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801b74c:	b580      	push	{r7, lr}
 801b74e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b750:	4b0b      	ldr	r3, [pc, #44]	; (801b780 <SX1276OnDio4Irq+0x34>)
 801b752:	795b      	ldrb	r3, [r3, #5]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d002      	beq.n	801b75e <SX1276OnDio4Irq+0x12>
 801b758:	2b01      	cmp	r3, #1
 801b75a:	d00a      	beq.n	801b772 <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801b75c:	e00c      	b.n	801b778 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801b75e:	4b08      	ldr	r3, [pc, #32]	; (801b780 <SX1276OnDio4Irq+0x34>)
 801b760:	2230      	movs	r2, #48	; 0x30
 801b762:	5c9b      	ldrb	r3, [r3, r2]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d106      	bne.n	801b776 <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801b768:	4b05      	ldr	r3, [pc, #20]	; (801b780 <SX1276OnDio4Irq+0x34>)
 801b76a:	2230      	movs	r2, #48	; 0x30
 801b76c:	2101      	movs	r1, #1
 801b76e:	5499      	strb	r1, [r3, r2]
        break;
 801b770:	e001      	b.n	801b776 <SX1276OnDio4Irq+0x2a>
        break;
 801b772:	46c0      	nop			; (mov r8, r8)
 801b774:	e000      	b.n	801b778 <SX1276OnDio4Irq+0x2c>
        break;
 801b776:	46c0      	nop			; (mov r8, r8)
    }
}
 801b778:	46c0      	nop			; (mov r8, r8)
 801b77a:	46bd      	mov	sp, r7
 801b77c:	bd80      	pop	{r7, pc}
 801b77e:	46c0      	nop			; (mov r8, r8)
 801b780:	20001584 	.word	0x20001584

0801b784 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b784:	b580      	push	{r7, lr}
 801b786:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b788:	4b0a      	ldr	r3, [pc, #40]	; (801b7b4 <UTIL_ADV_TRACE_Init+0x30>)
 801b78a:	2218      	movs	r2, #24
 801b78c:	2100      	movs	r1, #0
 801b78e:	0018      	movs	r0, r3
 801b790:	f000 fbb8 	bl	801bf04 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b794:	2380      	movs	r3, #128	; 0x80
 801b796:	009a      	lsls	r2, r3, #2
 801b798:	4b07      	ldr	r3, [pc, #28]	; (801b7b8 <UTIL_ADV_TRACE_Init+0x34>)
 801b79a:	2100      	movs	r1, #0
 801b79c:	0018      	movs	r0, r3
 801b79e:	f000 fbb1 	bl	801bf04 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b7a2:	4b06      	ldr	r3, [pc, #24]	; (801b7bc <UTIL_ADV_TRACE_Init+0x38>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	4a06      	ldr	r2, [pc, #24]	; (801b7c0 <UTIL_ADV_TRACE_Init+0x3c>)
 801b7a8:	0010      	movs	r0, r2
 801b7aa:	4798      	blx	r3
 801b7ac:	0003      	movs	r3, r0
}
 801b7ae:	0018      	movs	r0, r3
 801b7b0:	46bd      	mov	sp, r7
 801b7b2:	bd80      	pop	{r7, pc}
 801b7b4:	20001634 	.word	0x20001634
 801b7b8:	2000164c 	.word	0x2000164c
 801b7bc:	0801e064 	.word	0x0801e064
 801b7c0:	0801ba45 	.word	0x0801ba45

0801b7c4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b7c4:	b408      	push	{r3}
 801b7c6:	b590      	push	{r4, r7, lr}
 801b7c8:	b08c      	sub	sp, #48	; 0x30
 801b7ca:	af00      	add	r7, sp, #0
 801b7cc:	60f8      	str	r0, [r7, #12]
 801b7ce:	60b9      	str	r1, [r7, #8]
 801b7d0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b7d2:	2316      	movs	r3, #22
 801b7d4:	18fb      	adds	r3, r7, r3
 801b7d6:	2200      	movs	r2, #0
 801b7d8:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b7da:	232c      	movs	r3, #44	; 0x2c
 801b7dc:	18fb      	adds	r3, r7, r3
 801b7de:	2200      	movs	r2, #0
 801b7e0:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b7e2:	4b41      	ldr	r3, [pc, #260]	; (801b8e8 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b7e4:	7a1b      	ldrb	r3, [r3, #8]
 801b7e6:	001a      	movs	r2, r3
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	4293      	cmp	r3, r2
 801b7ec:	d902      	bls.n	801b7f4 <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b7ee:	2305      	movs	r3, #5
 801b7f0:	425b      	negs	r3, r3
 801b7f2:	e072      	b.n	801b8da <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b7f4:	4b3c      	ldr	r3, [pc, #240]	; (801b8e8 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b7f6:	68db      	ldr	r3, [r3, #12]
 801b7f8:	68ba      	ldr	r2, [r7, #8]
 801b7fa:	4013      	ands	r3, r2
 801b7fc:	68ba      	ldr	r2, [r7, #8]
 801b7fe:	429a      	cmp	r2, r3
 801b800:	d002      	beq.n	801b808 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b802:	2306      	movs	r3, #6
 801b804:	425b      	negs	r3, r3
 801b806:	e068      	b.n	801b8da <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b808:	4b37      	ldr	r3, [pc, #220]	; (801b8e8 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b80a:	685b      	ldr	r3, [r3, #4]
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d00a      	beq.n	801b826 <UTIL_ADV_TRACE_COND_FSend+0x62>
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d007      	beq.n	801b826 <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b816:	4b34      	ldr	r3, [pc, #208]	; (801b8e8 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b818:	685b      	ldr	r3, [r3, #4]
 801b81a:	2216      	movs	r2, #22
 801b81c:	18b9      	adds	r1, r7, r2
 801b81e:	2218      	movs	r2, #24
 801b820:	18ba      	adds	r2, r7, r2
 801b822:	0010      	movs	r0, r2
 801b824:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b826:	2340      	movs	r3, #64	; 0x40
 801b828:	18fb      	adds	r3, r7, r3
 801b82a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b82e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b830:	2180      	movs	r1, #128	; 0x80
 801b832:	0049      	lsls	r1, r1, #1
 801b834:	482d      	ldr	r0, [pc, #180]	; (801b8ec <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801b836:	f001 fa09 	bl	801cc4c <tiny_vsnprintf_like>
 801b83a:	0002      	movs	r2, r0
 801b83c:	242c      	movs	r4, #44	; 0x2c
 801b83e:	193b      	adds	r3, r7, r4
 801b840:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801b842:	f000 fa23 	bl	801bc8c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b846:	2316      	movs	r3, #22
 801b848:	18fb      	adds	r3, r7, r3
 801b84a:	881a      	ldrh	r2, [r3, #0]
 801b84c:	193b      	adds	r3, r7, r4
 801b84e:	881b      	ldrh	r3, [r3, #0]
 801b850:	18d3      	adds	r3, r2, r3
 801b852:	b29b      	uxth	r3, r3
 801b854:	2214      	movs	r2, #20
 801b856:	18ba      	adds	r2, r7, r2
 801b858:	0011      	movs	r1, r2
 801b85a:	0018      	movs	r0, r3
 801b85c:	f000 f97c 	bl	801bb58 <TRACE_AllocateBufer>
 801b860:	0003      	movs	r3, r0
 801b862:	3301      	adds	r3, #1
 801b864:	d035      	beq.n	801b8d2 <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b866:	232e      	movs	r3, #46	; 0x2e
 801b868:	18fb      	adds	r3, r7, r3
 801b86a:	2200      	movs	r2, #0
 801b86c:	801a      	strh	r2, [r3, #0]
 801b86e:	e016      	b.n	801b89e <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b870:	202e      	movs	r0, #46	; 0x2e
 801b872:	183b      	adds	r3, r7, r0
 801b874:	881b      	ldrh	r3, [r3, #0]
 801b876:	2414      	movs	r4, #20
 801b878:	193a      	adds	r2, r7, r4
 801b87a:	8812      	ldrh	r2, [r2, #0]
 801b87c:	0011      	movs	r1, r2
 801b87e:	2218      	movs	r2, #24
 801b880:	18ba      	adds	r2, r7, r2
 801b882:	5cd2      	ldrb	r2, [r2, r3]
 801b884:	4b1a      	ldr	r3, [pc, #104]	; (801b8f0 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801b886:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801b888:	193b      	adds	r3, r7, r4
 801b88a:	881b      	ldrh	r3, [r3, #0]
 801b88c:	3301      	adds	r3, #1
 801b88e:	b29a      	uxth	r2, r3
 801b890:	193b      	adds	r3, r7, r4
 801b892:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b894:	183b      	adds	r3, r7, r0
 801b896:	881a      	ldrh	r2, [r3, #0]
 801b898:	183b      	adds	r3, r7, r0
 801b89a:	3201      	adds	r2, #1
 801b89c:	801a      	strh	r2, [r3, #0]
 801b89e:	2316      	movs	r3, #22
 801b8a0:	18fb      	adds	r3, r7, r3
 801b8a2:	881b      	ldrh	r3, [r3, #0]
 801b8a4:	222e      	movs	r2, #46	; 0x2e
 801b8a6:	18ba      	adds	r2, r7, r2
 801b8a8:	8812      	ldrh	r2, [r2, #0]
 801b8aa:	429a      	cmp	r2, r3
 801b8ac:	d3e0      	bcc.n	801b870 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b8ae:	2314      	movs	r3, #20
 801b8b0:	18fb      	adds	r3, r7, r3
 801b8b2:	881b      	ldrh	r3, [r3, #0]
 801b8b4:	001a      	movs	r2, r3
 801b8b6:	4b0e      	ldr	r3, [pc, #56]	; (801b8f0 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801b8b8:	18d0      	adds	r0, r2, r3
 801b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b8be:	2180      	movs	r1, #128	; 0x80
 801b8c0:	0049      	lsls	r1, r1, #1
 801b8c2:	f001 f9c3 	bl	801cc4c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b8c6:	f000 f9fd 	bl	801bcc4 <TRACE_UnLock>

    return TRACE_Send();
 801b8ca:	f000 f831 	bl	801b930 <TRACE_Send>
 801b8ce:	0003      	movs	r3, r0
 801b8d0:	e003      	b.n	801b8da <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b8d2:	f000 f9f7 	bl	801bcc4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b8d6:	2303      	movs	r3, #3
 801b8d8:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b8da:	0018      	movs	r0, r3
 801b8dc:	46bd      	mov	sp, r7
 801b8de:	b00c      	add	sp, #48	; 0x30
 801b8e0:	bc90      	pop	{r4, r7}
 801b8e2:	bc08      	pop	{r3}
 801b8e4:	b001      	add	sp, #4
 801b8e6:	4718      	bx	r3
 801b8e8:	20001634 	.word	0x20001634
 801b8ec:	2000184c 	.word	0x2000184c
 801b8f0:	2000164c 	.word	0x2000164c

0801b8f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b082      	sub	sp, #8
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801b8fc:	4b03      	ldr	r3, [pc, #12]	; (801b90c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b8fe:	687a      	ldr	r2, [r7, #4]
 801b900:	605a      	str	r2, [r3, #4]
}
 801b902:	46c0      	nop			; (mov r8, r8)
 801b904:	46bd      	mov	sp, r7
 801b906:	b002      	add	sp, #8
 801b908:	bd80      	pop	{r7, pc}
 801b90a:	46c0      	nop			; (mov r8, r8)
 801b90c:	20001634 	.word	0x20001634

0801b910 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b910:	b580      	push	{r7, lr}
 801b912:	b082      	sub	sp, #8
 801b914:	af00      	add	r7, sp, #0
 801b916:	0002      	movs	r2, r0
 801b918:	1dfb      	adds	r3, r7, #7
 801b91a:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b91c:	4b03      	ldr	r3, [pc, #12]	; (801b92c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b91e:	1dfa      	adds	r2, r7, #7
 801b920:	7812      	ldrb	r2, [r2, #0]
 801b922:	721a      	strb	r2, [r3, #8]
}
 801b924:	46c0      	nop			; (mov r8, r8)
 801b926:	46bd      	mov	sp, r7
 801b928:	b002      	add	sp, #8
 801b92a:	bd80      	pop	{r7, pc}
 801b92c:	20001634 	.word	0x20001634

0801b930 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b930:	b590      	push	{r4, r7, lr}
 801b932:	b089      	sub	sp, #36	; 0x24
 801b934:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801b936:	231f      	movs	r3, #31
 801b938:	18fb      	adds	r3, r7, r3
 801b93a:	2200      	movs	r2, #0
 801b93c:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801b93e:	2300      	movs	r3, #0
 801b940:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b942:	f3ef 8310 	mrs	r3, PRIMASK
 801b946:	613b      	str	r3, [r7, #16]
  return(result);
 801b948:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801b94a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b94c:	b672      	cpsid	i
}
 801b94e:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801b950:	f000 f9d4 	bl	801bcfc <TRACE_IsLocked>
 801b954:	1e03      	subs	r3, r0, #0
 801b956:	d160      	bne.n	801ba1a <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801b958:	f000 f998 	bl	801bc8c <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b95c:	4b36      	ldr	r3, [pc, #216]	; (801ba38 <TRACE_Send+0x108>)
 801b95e:	8a1a      	ldrh	r2, [r3, #16]
 801b960:	4b35      	ldr	r3, [pc, #212]	; (801ba38 <TRACE_Send+0x108>)
 801b962:	8a5b      	ldrh	r3, [r3, #18]
 801b964:	429a      	cmp	r2, r3
 801b966:	d050      	beq.n	801ba0a <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b968:	4b33      	ldr	r3, [pc, #204]	; (801ba38 <TRACE_Send+0x108>)
 801b96a:	789b      	ldrb	r3, [r3, #2]
 801b96c:	2b01      	cmp	r3, #1
 801b96e:	d117      	bne.n	801b9a0 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b970:	4b31      	ldr	r3, [pc, #196]	; (801ba38 <TRACE_Send+0x108>)
 801b972:	881a      	ldrh	r2, [r3, #0]
 801b974:	4b30      	ldr	r3, [pc, #192]	; (801ba38 <TRACE_Send+0x108>)
 801b976:	8a1b      	ldrh	r3, [r3, #16]
 801b978:	1ad3      	subs	r3, r2, r3
 801b97a:	b29a      	uxth	r2, r3
 801b97c:	4b2e      	ldr	r3, [pc, #184]	; (801ba38 <TRACE_Send+0x108>)
 801b97e:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b980:	4b2d      	ldr	r3, [pc, #180]	; (801ba38 <TRACE_Send+0x108>)
 801b982:	2202      	movs	r2, #2
 801b984:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b986:	4b2c      	ldr	r3, [pc, #176]	; (801ba38 <TRACE_Send+0x108>)
 801b988:	2200      	movs	r2, #0
 801b98a:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801b98c:	4b2a      	ldr	r3, [pc, #168]	; (801ba38 <TRACE_Send+0x108>)
 801b98e:	8a9b      	ldrh	r3, [r3, #20]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d105      	bne.n	801b9a0 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b994:	4b28      	ldr	r3, [pc, #160]	; (801ba38 <TRACE_Send+0x108>)
 801b996:	2200      	movs	r2, #0
 801b998:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b99a:	4b27      	ldr	r3, [pc, #156]	; (801ba38 <TRACE_Send+0x108>)
 801b99c:	2200      	movs	r2, #0
 801b99e:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b9a0:	4b25      	ldr	r3, [pc, #148]	; (801ba38 <TRACE_Send+0x108>)
 801b9a2:	789b      	ldrb	r3, [r3, #2]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d116      	bne.n	801b9d6 <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b9a8:	4b23      	ldr	r3, [pc, #140]	; (801ba38 <TRACE_Send+0x108>)
 801b9aa:	8a5a      	ldrh	r2, [r3, #18]
 801b9ac:	4b22      	ldr	r3, [pc, #136]	; (801ba38 <TRACE_Send+0x108>)
 801b9ae:	8a1b      	ldrh	r3, [r3, #16]
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	d908      	bls.n	801b9c6 <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b9b4:	4b20      	ldr	r3, [pc, #128]	; (801ba38 <TRACE_Send+0x108>)
 801b9b6:	8a5a      	ldrh	r2, [r3, #18]
 801b9b8:	4b1f      	ldr	r3, [pc, #124]	; (801ba38 <TRACE_Send+0x108>)
 801b9ba:	8a1b      	ldrh	r3, [r3, #16]
 801b9bc:	1ad3      	subs	r3, r2, r3
 801b9be:	b29a      	uxth	r2, r3
 801b9c0:	4b1d      	ldr	r3, [pc, #116]	; (801ba38 <TRACE_Send+0x108>)
 801b9c2:	829a      	strh	r2, [r3, #20]
 801b9c4:	e007      	b.n	801b9d6 <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b9c6:	4b1c      	ldr	r3, [pc, #112]	; (801ba38 <TRACE_Send+0x108>)
 801b9c8:	8a1b      	ldrh	r3, [r3, #16]
 801b9ca:	2280      	movs	r2, #128	; 0x80
 801b9cc:	0092      	lsls	r2, r2, #2
 801b9ce:	1ad3      	subs	r3, r2, r3
 801b9d0:	b29a      	uxth	r2, r3
 801b9d2:	4b19      	ldr	r3, [pc, #100]	; (801ba38 <TRACE_Send+0x108>)
 801b9d4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b9d6:	4b18      	ldr	r3, [pc, #96]	; (801ba38 <TRACE_Send+0x108>)
 801b9d8:	8a1b      	ldrh	r3, [r3, #16]
 801b9da:	001a      	movs	r2, r3
 801b9dc:	4b17      	ldr	r3, [pc, #92]	; (801ba3c <TRACE_Send+0x10c>)
 801b9de:	18d3      	adds	r3, r2, r3
 801b9e0:	61bb      	str	r3, [r7, #24]
 801b9e2:	697b      	ldr	r3, [r7, #20]
 801b9e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	f383 8810 	msr	PRIMASK, r3
}
 801b9ec:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801b9ee:	f7e8 fe11 	bl	8004614 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b9f2:	4b13      	ldr	r3, [pc, #76]	; (801ba40 <TRACE_Send+0x110>)
 801b9f4:	68db      	ldr	r3, [r3, #12]
 801b9f6:	4a10      	ldr	r2, [pc, #64]	; (801ba38 <TRACE_Send+0x108>)
 801b9f8:	8a91      	ldrh	r1, [r2, #20]
 801b9fa:	221f      	movs	r2, #31
 801b9fc:	18bc      	adds	r4, r7, r2
 801b9fe:	69ba      	ldr	r2, [r7, #24]
 801ba00:	0010      	movs	r0, r2
 801ba02:	4798      	blx	r3
 801ba04:	0003      	movs	r3, r0
 801ba06:	7023      	strb	r3, [r4, #0]
 801ba08:	e00d      	b.n	801ba26 <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801ba0a:	f000 f95b 	bl	801bcc4 <TRACE_UnLock>
 801ba0e:	697b      	ldr	r3, [r7, #20]
 801ba10:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba12:	68bb      	ldr	r3, [r7, #8]
 801ba14:	f383 8810 	msr	PRIMASK, r3
}
 801ba18:	e005      	b.n	801ba26 <TRACE_Send+0xf6>
 801ba1a:	697b      	ldr	r3, [r7, #20]
 801ba1c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	f383 8810 	msr	PRIMASK, r3
}
 801ba24:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801ba26:	231f      	movs	r3, #31
 801ba28:	18fb      	adds	r3, r7, r3
 801ba2a:	781b      	ldrb	r3, [r3, #0]
 801ba2c:	b25b      	sxtb	r3, r3
}
 801ba2e:	0018      	movs	r0, r3
 801ba30:	46bd      	mov	sp, r7
 801ba32:	b009      	add	sp, #36	; 0x24
 801ba34:	bd90      	pop	{r4, r7, pc}
 801ba36:	46c0      	nop			; (mov r8, r8)
 801ba38:	20001634 	.word	0x20001634
 801ba3c:	2000164c 	.word	0x2000164c
 801ba40:	0801e064 	.word	0x0801e064

0801ba44 <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b086      	sub	sp, #24
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba4c:	f3ef 8310 	mrs	r3, PRIMASK
 801ba50:	613b      	str	r3, [r7, #16]
  return(result);
 801ba52:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ba54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba56:	b672      	cpsid	i
}
 801ba58:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ba5a:	4b3c      	ldr	r3, [pc, #240]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba5c:	789b      	ldrb	r3, [r3, #2]
 801ba5e:	2b02      	cmp	r3, #2
 801ba60:	d106      	bne.n	801ba70 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ba62:	4b3a      	ldr	r3, [pc, #232]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba64:	2200      	movs	r2, #0
 801ba66:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ba68:	4b38      	ldr	r3, [pc, #224]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	821a      	strh	r2, [r3, #16]
 801ba6e:	e00a      	b.n	801ba86 <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ba70:	4b36      	ldr	r3, [pc, #216]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba72:	8a1a      	ldrh	r2, [r3, #16]
 801ba74:	4b35      	ldr	r3, [pc, #212]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba76:	8a9b      	ldrh	r3, [r3, #20]
 801ba78:	18d3      	adds	r3, r2, r3
 801ba7a:	b29b      	uxth	r3, r3
 801ba7c:	05db      	lsls	r3, r3, #23
 801ba7e:	0ddb      	lsrs	r3, r3, #23
 801ba80:	b29a      	uxth	r2, r3
 801ba82:	4b32      	ldr	r3, [pc, #200]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba84:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ba86:	4b31      	ldr	r3, [pc, #196]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba88:	8a1a      	ldrh	r2, [r3, #16]
 801ba8a:	4b30      	ldr	r3, [pc, #192]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba8c:	8a5b      	ldrh	r3, [r3, #18]
 801ba8e:	429a      	cmp	r2, r3
 801ba90:	d04c      	beq.n	801bb2c <TRACE_TxCpltCallback+0xe8>
 801ba92:	4b2e      	ldr	r3, [pc, #184]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba94:	8adb      	ldrh	r3, [r3, #22]
 801ba96:	2b01      	cmp	r3, #1
 801ba98:	d148      	bne.n	801bb2c <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ba9a:	4b2c      	ldr	r3, [pc, #176]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801ba9c:	789b      	ldrb	r3, [r3, #2]
 801ba9e:	2b01      	cmp	r3, #1
 801baa0:	d117      	bne.n	801bad2 <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801baa2:	4b2a      	ldr	r3, [pc, #168]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801baa4:	881a      	ldrh	r2, [r3, #0]
 801baa6:	4b29      	ldr	r3, [pc, #164]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801baa8:	8a1b      	ldrh	r3, [r3, #16]
 801baaa:	1ad3      	subs	r3, r2, r3
 801baac:	b29a      	uxth	r2, r3
 801baae:	4b27      	ldr	r3, [pc, #156]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bab0:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bab2:	4b26      	ldr	r3, [pc, #152]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bab4:	2202      	movs	r2, #2
 801bab6:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bab8:	4b24      	ldr	r3, [pc, #144]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801baba:	2200      	movs	r2, #0
 801babc:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801babe:	4b23      	ldr	r3, [pc, #140]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bac0:	8a9b      	ldrh	r3, [r3, #20]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d105      	bne.n	801bad2 <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bac6:	4b21      	ldr	r3, [pc, #132]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bac8:	2200      	movs	r2, #0
 801baca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bacc:	4b1f      	ldr	r3, [pc, #124]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bace:	2200      	movs	r2, #0
 801bad0:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bad2:	4b1e      	ldr	r3, [pc, #120]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bad4:	789b      	ldrb	r3, [r3, #2]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d116      	bne.n	801bb08 <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bada:	4b1c      	ldr	r3, [pc, #112]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801badc:	8a5a      	ldrh	r2, [r3, #18]
 801bade:	4b1b      	ldr	r3, [pc, #108]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bae0:	8a1b      	ldrh	r3, [r3, #16]
 801bae2:	429a      	cmp	r2, r3
 801bae4:	d908      	bls.n	801baf8 <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bae6:	4b19      	ldr	r3, [pc, #100]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bae8:	8a5a      	ldrh	r2, [r3, #18]
 801baea:	4b18      	ldr	r3, [pc, #96]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801baec:	8a1b      	ldrh	r3, [r3, #16]
 801baee:	1ad3      	subs	r3, r2, r3
 801baf0:	b29a      	uxth	r2, r3
 801baf2:	4b16      	ldr	r3, [pc, #88]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801baf4:	829a      	strh	r2, [r3, #20]
 801baf6:	e007      	b.n	801bb08 <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801baf8:	4b14      	ldr	r3, [pc, #80]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bafa:	8a1b      	ldrh	r3, [r3, #16]
 801bafc:	2280      	movs	r2, #128	; 0x80
 801bafe:	0092      	lsls	r2, r2, #2
 801bb00:	1ad3      	subs	r3, r2, r3
 801bb02:	b29a      	uxth	r2, r3
 801bb04:	4b11      	ldr	r3, [pc, #68]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bb06:	829a      	strh	r2, [r3, #20]
 801bb08:	697b      	ldr	r3, [r7, #20]
 801bb0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	f383 8810 	msr	PRIMASK, r3
}
 801bb12:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801bb14:	4b0e      	ldr	r3, [pc, #56]	; (801bb50 <TRACE_TxCpltCallback+0x10c>)
 801bb16:	68db      	ldr	r3, [r3, #12]
 801bb18:	4a0c      	ldr	r2, [pc, #48]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bb1a:	8a12      	ldrh	r2, [r2, #16]
 801bb1c:	0011      	movs	r1, r2
 801bb1e:	4a0d      	ldr	r2, [pc, #52]	; (801bb54 <TRACE_TxCpltCallback+0x110>)
 801bb20:	1888      	adds	r0, r1, r2
 801bb22:	4a0a      	ldr	r2, [pc, #40]	; (801bb4c <TRACE_TxCpltCallback+0x108>)
 801bb24:	8a92      	ldrh	r2, [r2, #20]
 801bb26:	0011      	movs	r1, r2
 801bb28:	4798      	blx	r3
 801bb2a:	e00a      	b.n	801bb42 <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801bb2c:	f7e8 fd7b 	bl	8004626 <UTIL_ADV_TRACE_PostSendHook>
 801bb30:	697b      	ldr	r3, [r7, #20]
 801bb32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb34:	68bb      	ldr	r3, [r7, #8]
 801bb36:	f383 8810 	msr	PRIMASK, r3
}
 801bb3a:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801bb3c:	f000 f8c2 	bl	801bcc4 <TRACE_UnLock>
  }
}
 801bb40:	46c0      	nop			; (mov r8, r8)
 801bb42:	46c0      	nop			; (mov r8, r8)
 801bb44:	46bd      	mov	sp, r7
 801bb46:	b006      	add	sp, #24
 801bb48:	bd80      	pop	{r7, pc}
 801bb4a:	46c0      	nop			; (mov r8, r8)
 801bb4c:	20001634 	.word	0x20001634
 801bb50:	0801e064 	.word	0x0801e064
 801bb54:	2000164c 	.word	0x2000164c

0801bb58 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bb58:	b580      	push	{r7, lr}
 801bb5a:	b086      	sub	sp, #24
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	0002      	movs	r2, r0
 801bb60:	6039      	str	r1, [r7, #0]
 801bb62:	1dbb      	adds	r3, r7, #6
 801bb64:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801bb66:	2314      	movs	r3, #20
 801bb68:	18fb      	adds	r3, r7, r3
 801bb6a:	2201      	movs	r2, #1
 801bb6c:	4252      	negs	r2, r2
 801bb6e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb70:	f3ef 8310 	mrs	r3, PRIMASK
 801bb74:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb76:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bb78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb7a:	b672      	cpsid	i
}
 801bb7c:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bb7e:	4b42      	ldr	r3, [pc, #264]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bb80:	8a5a      	ldrh	r2, [r3, #18]
 801bb82:	4b41      	ldr	r3, [pc, #260]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bb84:	8a1b      	ldrh	r3, [r3, #16]
 801bb86:	429a      	cmp	r2, r3
 801bb88:	d123      	bne.n	801bbd2 <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bb8a:	4b3f      	ldr	r3, [pc, #252]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bb8c:	8a5a      	ldrh	r2, [r3, #18]
 801bb8e:	2016      	movs	r0, #22
 801bb90:	183b      	adds	r3, r7, r0
 801bb92:	2180      	movs	r1, #128	; 0x80
 801bb94:	0089      	lsls	r1, r1, #2
 801bb96:	1a8a      	subs	r2, r1, r2
 801bb98:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bb9a:	1dba      	adds	r2, r7, #6
 801bb9c:	0001      	movs	r1, r0
 801bb9e:	187b      	adds	r3, r7, r1
 801bba0:	8812      	ldrh	r2, [r2, #0]
 801bba2:	881b      	ldrh	r3, [r3, #0]
 801bba4:	429a      	cmp	r2, r3
 801bba6:	d346      	bcc.n	801bc36 <TRACE_AllocateBufer+0xde>
 801bba8:	4b37      	ldr	r3, [pc, #220]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbaa:	8a1b      	ldrh	r3, [r3, #16]
 801bbac:	1dba      	adds	r2, r7, #6
 801bbae:	8812      	ldrh	r2, [r2, #0]
 801bbb0:	429a      	cmp	r2, r3
 801bbb2:	d240      	bcs.n	801bc36 <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bbb4:	4b34      	ldr	r3, [pc, #208]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbb6:	2201      	movs	r2, #1
 801bbb8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bbba:	4b33      	ldr	r3, [pc, #204]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbbc:	8a5a      	ldrh	r2, [r3, #18]
 801bbbe:	4b32      	ldr	r3, [pc, #200]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbc0:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bbc2:	187b      	adds	r3, r7, r1
 801bbc4:	4a30      	ldr	r2, [pc, #192]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbc6:	8a12      	ldrh	r2, [r2, #16]
 801bbc8:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bbca:	4b2f      	ldr	r3, [pc, #188]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbcc:	2200      	movs	r2, #0
 801bbce:	825a      	strh	r2, [r3, #18]
 801bbd0:	e031      	b.n	801bc36 <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bbd2:	4b2d      	ldr	r3, [pc, #180]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbd4:	8a5a      	ldrh	r2, [r3, #18]
 801bbd6:	4b2c      	ldr	r3, [pc, #176]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbd8:	8a1b      	ldrh	r3, [r3, #16]
 801bbda:	429a      	cmp	r2, r3
 801bbdc:	d923      	bls.n	801bc26 <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bbde:	4b2a      	ldr	r3, [pc, #168]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbe0:	8a5a      	ldrh	r2, [r3, #18]
 801bbe2:	2016      	movs	r0, #22
 801bbe4:	183b      	adds	r3, r7, r0
 801bbe6:	2180      	movs	r1, #128	; 0x80
 801bbe8:	0089      	lsls	r1, r1, #2
 801bbea:	1a8a      	subs	r2, r1, r2
 801bbec:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801bbee:	1dba      	adds	r2, r7, #6
 801bbf0:	0001      	movs	r1, r0
 801bbf2:	187b      	adds	r3, r7, r1
 801bbf4:	8812      	ldrh	r2, [r2, #0]
 801bbf6:	881b      	ldrh	r3, [r3, #0]
 801bbf8:	429a      	cmp	r2, r3
 801bbfa:	d31c      	bcc.n	801bc36 <TRACE_AllocateBufer+0xde>
 801bbfc:	4b22      	ldr	r3, [pc, #136]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bbfe:	8a1b      	ldrh	r3, [r3, #16]
 801bc00:	1dba      	adds	r2, r7, #6
 801bc02:	8812      	ldrh	r2, [r2, #0]
 801bc04:	429a      	cmp	r2, r3
 801bc06:	d216      	bcs.n	801bc36 <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bc08:	4b1f      	ldr	r3, [pc, #124]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc0a:	2201      	movs	r2, #1
 801bc0c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bc0e:	4b1e      	ldr	r3, [pc, #120]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc10:	8a5a      	ldrh	r2, [r3, #18]
 801bc12:	4b1d      	ldr	r3, [pc, #116]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc14:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bc16:	187b      	adds	r3, r7, r1
 801bc18:	4a1b      	ldr	r2, [pc, #108]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc1a:	8a12      	ldrh	r2, [r2, #16]
 801bc1c:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bc1e:	4b1a      	ldr	r3, [pc, #104]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc20:	2200      	movs	r2, #0
 801bc22:	825a      	strh	r2, [r3, #18]
 801bc24:	e007      	b.n	801bc36 <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bc26:	4b18      	ldr	r3, [pc, #96]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc28:	8a19      	ldrh	r1, [r3, #16]
 801bc2a:	4b17      	ldr	r3, [pc, #92]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc2c:	8a5a      	ldrh	r2, [r3, #18]
 801bc2e:	2316      	movs	r3, #22
 801bc30:	18fb      	adds	r3, r7, r3
 801bc32:	1a8a      	subs	r2, r1, r2
 801bc34:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801bc36:	2316      	movs	r3, #22
 801bc38:	18fa      	adds	r2, r7, r3
 801bc3a:	1dbb      	adds	r3, r7, #6
 801bc3c:	8812      	ldrh	r2, [r2, #0]
 801bc3e:	881b      	ldrh	r3, [r3, #0]
 801bc40:	429a      	cmp	r2, r3
 801bc42:	d912      	bls.n	801bc6a <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bc44:	4b10      	ldr	r3, [pc, #64]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc46:	8a5a      	ldrh	r2, [r3, #18]
 801bc48:	683b      	ldr	r3, [r7, #0]
 801bc4a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bc4c:	4b0e      	ldr	r3, [pc, #56]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc4e:	8a5a      	ldrh	r2, [r3, #18]
 801bc50:	1dbb      	adds	r3, r7, #6
 801bc52:	881b      	ldrh	r3, [r3, #0]
 801bc54:	18d3      	adds	r3, r2, r3
 801bc56:	b29b      	uxth	r3, r3
 801bc58:	05db      	lsls	r3, r3, #23
 801bc5a:	0ddb      	lsrs	r3, r3, #23
 801bc5c:	b29a      	uxth	r2, r3
 801bc5e:	4b0a      	ldr	r3, [pc, #40]	; (801bc88 <TRACE_AllocateBufer+0x130>)
 801bc60:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bc62:	2314      	movs	r3, #20
 801bc64:	18fb      	adds	r3, r7, r3
 801bc66:	2200      	movs	r2, #0
 801bc68:	801a      	strh	r2, [r3, #0]
 801bc6a:	693b      	ldr	r3, [r7, #16]
 801bc6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc6e:	68bb      	ldr	r3, [r7, #8]
 801bc70:	f383 8810 	msr	PRIMASK, r3
}
 801bc74:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801bc76:	2314      	movs	r3, #20
 801bc78:	18fb      	adds	r3, r7, r3
 801bc7a:	2200      	movs	r2, #0
 801bc7c:	5e9b      	ldrsh	r3, [r3, r2]
}
 801bc7e:	0018      	movs	r0, r3
 801bc80:	46bd      	mov	sp, r7
 801bc82:	b006      	add	sp, #24
 801bc84:	bd80      	pop	{r7, pc}
 801bc86:	46c0      	nop			; (mov r8, r8)
 801bc88:	20001634 	.word	0x20001634

0801bc8c <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801bc8c:	b580      	push	{r7, lr}
 801bc8e:	b084      	sub	sp, #16
 801bc90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc92:	f3ef 8310 	mrs	r3, PRIMASK
 801bc96:	607b      	str	r3, [r7, #4]
  return(result);
 801bc98:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bc9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc9c:	b672      	cpsid	i
}
 801bc9e:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801bca0:	4b07      	ldr	r3, [pc, #28]	; (801bcc0 <TRACE_Lock+0x34>)
 801bca2:	8adb      	ldrh	r3, [r3, #22]
 801bca4:	3301      	adds	r3, #1
 801bca6:	b29a      	uxth	r2, r3
 801bca8:	4b05      	ldr	r3, [pc, #20]	; (801bcc0 <TRACE_Lock+0x34>)
 801bcaa:	82da      	strh	r2, [r3, #22]
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcb0:	68bb      	ldr	r3, [r7, #8]
 801bcb2:	f383 8810 	msr	PRIMASK, r3
}
 801bcb6:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bcb8:	46c0      	nop			; (mov r8, r8)
 801bcba:	46bd      	mov	sp, r7
 801bcbc:	b004      	add	sp, #16
 801bcbe:	bd80      	pop	{r7, pc}
 801bcc0:	20001634 	.word	0x20001634

0801bcc4 <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b084      	sub	sp, #16
 801bcc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bcca:	f3ef 8310 	mrs	r3, PRIMASK
 801bcce:	607b      	str	r3, [r7, #4]
  return(result);
 801bcd0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bcd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcd4:	b672      	cpsid	i
}
 801bcd6:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801bcd8:	4b07      	ldr	r3, [pc, #28]	; (801bcf8 <TRACE_UnLock+0x34>)
 801bcda:	8adb      	ldrh	r3, [r3, #22]
 801bcdc:	3b01      	subs	r3, #1
 801bcde:	b29a      	uxth	r2, r3
 801bce0:	4b05      	ldr	r3, [pc, #20]	; (801bcf8 <TRACE_UnLock+0x34>)
 801bce2:	82da      	strh	r2, [r3, #22]
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bce8:	68bb      	ldr	r3, [r7, #8]
 801bcea:	f383 8810 	msr	PRIMASK, r3
}
 801bcee:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bcf0:	46c0      	nop			; (mov r8, r8)
 801bcf2:	46bd      	mov	sp, r7
 801bcf4:	b004      	add	sp, #16
 801bcf6:	bd80      	pop	{r7, pc}
 801bcf8:	20001634 	.word	0x20001634

0801bcfc <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801bcfc:	b580      	push	{r7, lr}
 801bcfe:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bd00:	4b03      	ldr	r3, [pc, #12]	; (801bd10 <TRACE_IsLocked+0x14>)
 801bd02:	8adb      	ldrh	r3, [r3, #22]
 801bd04:	1e5a      	subs	r2, r3, #1
 801bd06:	4193      	sbcs	r3, r2
 801bd08:	b2db      	uxtb	r3, r3
}
 801bd0a:	0018      	movs	r0, r3
 801bd0c:	46bd      	mov	sp, r7
 801bd0e:	bd80      	pop	{r7, pc}
 801bd10:	20001634 	.word	0x20001634

0801bd14 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801bd14:	b580      	push	{r7, lr}
 801bd16:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801bd18:	4b04      	ldr	r3, [pc, #16]	; (801bd2c <UTIL_LPM_Init+0x18>)
 801bd1a:	2200      	movs	r2, #0
 801bd1c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801bd1e:	4b04      	ldr	r3, [pc, #16]	; (801bd30 <UTIL_LPM_Init+0x1c>)
 801bd20:	2200      	movs	r2, #0
 801bd22:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801bd24:	46c0      	nop			; (mov r8, r8)
 801bd26:	46bd      	mov	sp, r7
 801bd28:	bd80      	pop	{r7, pc}
 801bd2a:	46c0      	nop			; (mov r8, r8)
 801bd2c:	2000194c 	.word	0x2000194c
 801bd30:	20001950 	.word	0x20001950

0801bd34 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b086      	sub	sp, #24
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	6078      	str	r0, [r7, #4]
 801bd3c:	000a      	movs	r2, r1
 801bd3e:	1cfb      	adds	r3, r7, #3
 801bd40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd42:	f3ef 8310 	mrs	r3, PRIMASK
 801bd46:	613b      	str	r3, [r7, #16]
  return(result);
 801bd48:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bd4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd4c:	b672      	cpsid	i
}
 801bd4e:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801bd50:	1cfb      	adds	r3, r7, #3
 801bd52:	781b      	ldrb	r3, [r3, #0]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d008      	beq.n	801bd6a <UTIL_LPM_SetStopMode+0x36>
 801bd58:	2b01      	cmp	r3, #1
 801bd5a:	d10e      	bne.n	801bd7a <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801bd5c:	4b0c      	ldr	r3, [pc, #48]	; (801bd90 <UTIL_LPM_SetStopMode+0x5c>)
 801bd5e:	681a      	ldr	r2, [r3, #0]
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	431a      	orrs	r2, r3
 801bd64:	4b0a      	ldr	r3, [pc, #40]	; (801bd90 <UTIL_LPM_SetStopMode+0x5c>)
 801bd66:	601a      	str	r2, [r3, #0]
      break;
 801bd68:	e008      	b.n	801bd7c <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	43da      	mvns	r2, r3
 801bd6e:	4b08      	ldr	r3, [pc, #32]	; (801bd90 <UTIL_LPM_SetStopMode+0x5c>)
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	401a      	ands	r2, r3
 801bd74:	4b06      	ldr	r3, [pc, #24]	; (801bd90 <UTIL_LPM_SetStopMode+0x5c>)
 801bd76:	601a      	str	r2, [r3, #0]
      break;
 801bd78:	e000      	b.n	801bd7c <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801bd7a:	46c0      	nop			; (mov r8, r8)
 801bd7c:	697b      	ldr	r3, [r7, #20]
 801bd7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	f383 8810 	msr	PRIMASK, r3
}
 801bd86:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bd88:	46c0      	nop			; (mov r8, r8)
 801bd8a:	46bd      	mov	sp, r7
 801bd8c:	b006      	add	sp, #24
 801bd8e:	bd80      	pop	{r7, pc}
 801bd90:	2000194c 	.word	0x2000194c

0801bd94 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b086      	sub	sp, #24
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
 801bd9c:	000a      	movs	r2, r1
 801bd9e:	1cfb      	adds	r3, r7, #3
 801bda0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bda2:	f3ef 8310 	mrs	r3, PRIMASK
 801bda6:	613b      	str	r3, [r7, #16]
  return(result);
 801bda8:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bdaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdac:	b672      	cpsid	i
}
 801bdae:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801bdb0:	1cfb      	adds	r3, r7, #3
 801bdb2:	781b      	ldrb	r3, [r3, #0]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d008      	beq.n	801bdca <UTIL_LPM_SetOffMode+0x36>
 801bdb8:	2b01      	cmp	r3, #1
 801bdba:	d10e      	bne.n	801bdda <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801bdbc:	4b0c      	ldr	r3, [pc, #48]	; (801bdf0 <UTIL_LPM_SetOffMode+0x5c>)
 801bdbe:	681a      	ldr	r2, [r3, #0]
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	431a      	orrs	r2, r3
 801bdc4:	4b0a      	ldr	r3, [pc, #40]	; (801bdf0 <UTIL_LPM_SetOffMode+0x5c>)
 801bdc6:	601a      	str	r2, [r3, #0]
      break;
 801bdc8:	e008      	b.n	801bddc <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	43da      	mvns	r2, r3
 801bdce:	4b08      	ldr	r3, [pc, #32]	; (801bdf0 <UTIL_LPM_SetOffMode+0x5c>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	401a      	ands	r2, r3
 801bdd4:	4b06      	ldr	r3, [pc, #24]	; (801bdf0 <UTIL_LPM_SetOffMode+0x5c>)
 801bdd6:	601a      	str	r2, [r3, #0]
      break;
 801bdd8:	e000      	b.n	801bddc <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801bdda:	46c0      	nop			; (mov r8, r8)
 801bddc:	697b      	ldr	r3, [r7, #20]
 801bdde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	f383 8810 	msr	PRIMASK, r3
}
 801bde6:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bde8:	46c0      	nop			; (mov r8, r8)
 801bdea:	46bd      	mov	sp, r7
 801bdec:	b006      	add	sp, #24
 801bdee:	bd80      	pop	{r7, pc}
 801bdf0:	20001950 	.word	0x20001950

0801bdf4 <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	b084      	sub	sp, #16
 801bdf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bdfa:	f3ef 8310 	mrs	r3, PRIMASK
 801bdfe:	607b      	str	r3, [r7, #4]
  return(result);
 801be00:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801be02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801be04:	b672      	cpsid	i
}
 801be06:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801be08:	4b11      	ldr	r3, [pc, #68]	; (801be50 <UTIL_LPM_GetMode+0x5c>)
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d004      	beq.n	801be1a <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801be10:	230f      	movs	r3, #15
 801be12:	18fb      	adds	r3, r7, r3
 801be14:	2200      	movs	r2, #0
 801be16:	701a      	strb	r2, [r3, #0]
 801be18:	e00c      	b.n	801be34 <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801be1a:	4b0e      	ldr	r3, [pc, #56]	; (801be54 <UTIL_LPM_GetMode+0x60>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d004      	beq.n	801be2c <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801be22:	230f      	movs	r3, #15
 801be24:	18fb      	adds	r3, r7, r3
 801be26:	2201      	movs	r2, #1
 801be28:	701a      	strb	r2, [r3, #0]
 801be2a:	e003      	b.n	801be34 <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801be2c:	230f      	movs	r3, #15
 801be2e:	18fb      	adds	r3, r7, r3
 801be30:	2202      	movs	r2, #2
 801be32:	701a      	strb	r2, [r3, #0]
 801be34:	68bb      	ldr	r3, [r7, #8]
 801be36:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be38:	683b      	ldr	r3, [r7, #0]
 801be3a:	f383 8810 	msr	PRIMASK, r3
}
 801be3e:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801be40:	230f      	movs	r3, #15
 801be42:	18fb      	adds	r3, r7, r3
 801be44:	781b      	ldrb	r3, [r3, #0]
}
 801be46:	0018      	movs	r0, r3
 801be48:	46bd      	mov	sp, r7
 801be4a:	b004      	add	sp, #16
 801be4c:	bd80      	pop	{r7, pc}
 801be4e:	46c0      	nop			; (mov r8, r8)
 801be50:	2000194c 	.word	0x2000194c
 801be54:	20001950 	.word	0x20001950

0801be58 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b084      	sub	sp, #16
 801be5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be5e:	f3ef 8310 	mrs	r3, PRIMASK
 801be62:	60bb      	str	r3, [r7, #8]
  return(result);
 801be64:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801be66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801be68:	b672      	cpsid	i
}
 801be6a:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801be6c:	4b12      	ldr	r3, [pc, #72]	; (801beb8 <UTIL_LPM_EnterLowPower+0x60>)
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	2b00      	cmp	r3, #0
 801be72:	d006      	beq.n	801be82 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801be74:	4b11      	ldr	r3, [pc, #68]	; (801bebc <UTIL_LPM_EnterLowPower+0x64>)
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801be7a:	4b10      	ldr	r3, [pc, #64]	; (801bebc <UTIL_LPM_EnterLowPower+0x64>)
 801be7c:	685b      	ldr	r3, [r3, #4]
 801be7e:	4798      	blx	r3
 801be80:	e010      	b.n	801bea4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801be82:	4b0f      	ldr	r3, [pc, #60]	; (801bec0 <UTIL_LPM_EnterLowPower+0x68>)
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d006      	beq.n	801be98 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801be8a:	4b0c      	ldr	r3, [pc, #48]	; (801bebc <UTIL_LPM_EnterLowPower+0x64>)
 801be8c:	689b      	ldr	r3, [r3, #8]
 801be8e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801be90:	4b0a      	ldr	r3, [pc, #40]	; (801bebc <UTIL_LPM_EnterLowPower+0x64>)
 801be92:	68db      	ldr	r3, [r3, #12]
 801be94:	4798      	blx	r3
 801be96:	e005      	b.n	801bea4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801be98:	4b08      	ldr	r3, [pc, #32]	; (801bebc <UTIL_LPM_EnterLowPower+0x64>)
 801be9a:	691b      	ldr	r3, [r3, #16]
 801be9c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801be9e:	4b07      	ldr	r3, [pc, #28]	; (801bebc <UTIL_LPM_EnterLowPower+0x64>)
 801bea0:	695b      	ldr	r3, [r3, #20]
 801bea2:	4798      	blx	r3
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	f383 8810 	msr	PRIMASK, r3
}
 801beae:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801beb0:	46c0      	nop			; (mov r8, r8)
 801beb2:	46bd      	mov	sp, r7
 801beb4:	b004      	add	sp, #16
 801beb6:	bd80      	pop	{r7, pc}
 801beb8:	2000194c 	.word	0x2000194c
 801bebc:	0801e040 	.word	0x0801e040
 801bec0:	20001950 	.word	0x20001950

0801bec4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801bec4:	b580      	push	{r7, lr}
 801bec6:	b086      	sub	sp, #24
 801bec8:	af00      	add	r7, sp, #0
 801beca:	60f8      	str	r0, [r7, #12]
 801becc:	60b9      	str	r1, [r7, #8]
 801bece:	1dbb      	adds	r3, r7, #6
 801bed0:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801bed6:	68bb      	ldr	r3, [r7, #8]
 801bed8:	613b      	str	r3, [r7, #16]

  while( size-- )
 801beda:	e007      	b.n	801beec <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801bedc:	693a      	ldr	r2, [r7, #16]
 801bede:	1c53      	adds	r3, r2, #1
 801bee0:	613b      	str	r3, [r7, #16]
 801bee2:	697b      	ldr	r3, [r7, #20]
 801bee4:	1c59      	adds	r1, r3, #1
 801bee6:	6179      	str	r1, [r7, #20]
 801bee8:	7812      	ldrb	r2, [r2, #0]
 801beea:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801beec:	1dbb      	adds	r3, r7, #6
 801beee:	881b      	ldrh	r3, [r3, #0]
 801bef0:	1dba      	adds	r2, r7, #6
 801bef2:	1e59      	subs	r1, r3, #1
 801bef4:	8011      	strh	r1, [r2, #0]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d1f0      	bne.n	801bedc <UTIL_MEM_cpy_8+0x18>
    }
}
 801befa:	46c0      	nop			; (mov r8, r8)
 801befc:	46c0      	nop			; (mov r8, r8)
 801befe:	46bd      	mov	sp, r7
 801bf00:	b006      	add	sp, #24
 801bf02:	bd80      	pop	{r7, pc}

0801bf04 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b084      	sub	sp, #16
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
 801bf0c:	0008      	movs	r0, r1
 801bf0e:	0011      	movs	r1, r2
 801bf10:	1cfb      	adds	r3, r7, #3
 801bf12:	1c02      	adds	r2, r0, #0
 801bf14:	701a      	strb	r2, [r3, #0]
 801bf16:	003b      	movs	r3, r7
 801bf18:	1c0a      	adds	r2, r1, #0
 801bf1a:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801bf20:	e005      	b.n	801bf2e <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	1c5a      	adds	r2, r3, #1
 801bf26:	60fa      	str	r2, [r7, #12]
 801bf28:	1cfa      	adds	r2, r7, #3
 801bf2a:	7812      	ldrb	r2, [r2, #0]
 801bf2c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bf2e:	003b      	movs	r3, r7
 801bf30:	881b      	ldrh	r3, [r3, #0]
 801bf32:	003a      	movs	r2, r7
 801bf34:	1e59      	subs	r1, r3, #1
 801bf36:	8011      	strh	r1, [r2, #0]
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d1f2      	bne.n	801bf22 <UTIL_MEM_set_8+0x1e>
  }
}
 801bf3c:	46c0      	nop			; (mov r8, r8)
 801bf3e:	46c0      	nop			; (mov r8, r8)
 801bf40:	46bd      	mov	sp, r7
 801bf42:	b004      	add	sp, #16
 801bf44:	bd80      	pop	{r7, pc}
	...

0801bf48 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801bf48:	b580      	push	{r7, lr}
 801bf4a:	b08c      	sub	sp, #48	; 0x30
 801bf4c:	af00      	add	r7, sp, #0
 801bf4e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801bf50:	4b66      	ldr	r3, [pc, #408]	; (801c0ec <UTIL_SEQ_Run+0x1a4>)
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801bf56:	4b65      	ldr	r3, [pc, #404]	; (801c0ec <UTIL_SEQ_Run+0x1a4>)
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	687a      	ldr	r2, [r7, #4]
 801bf5c:	401a      	ands	r2, r3
 801bf5e:	4b63      	ldr	r3, [pc, #396]	; (801c0ec <UTIL_SEQ_Run+0x1a4>)
 801bf60:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801bf62:	e086      	b.n	801c072 <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801bf64:	2300      	movs	r3, #0
 801bf66:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801bf68:	e002      	b.n	801bf70 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801bf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf6c:	3301      	adds	r3, #1
 801bf6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801bf70:	4b5f      	ldr	r3, [pc, #380]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801bf72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf74:	00d2      	lsls	r2, r2, #3
 801bf76:	58d2      	ldr	r2, [r2, r3]
 801bf78:	4b5e      	ldr	r3, [pc, #376]	; (801c0f4 <UTIL_SEQ_Run+0x1ac>)
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	401a      	ands	r2, r3
 801bf7e:	4b5b      	ldr	r3, [pc, #364]	; (801c0ec <UTIL_SEQ_Run+0x1a4>)
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	4013      	ands	r3, r2
 801bf84:	d0f1      	beq.n	801bf6a <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801bf86:	4b5a      	ldr	r3, [pc, #360]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801bf88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf8a:	00d2      	lsls	r2, r2, #3
 801bf8c:	58d2      	ldr	r2, [r2, r3]
 801bf8e:	4b59      	ldr	r3, [pc, #356]	; (801c0f4 <UTIL_SEQ_Run+0x1ac>)
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	401a      	ands	r2, r3
 801bf94:	4b55      	ldr	r3, [pc, #340]	; (801c0ec <UTIL_SEQ_Run+0x1a4>)
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	4013      	ands	r3, r2
 801bf9a:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801bf9c:	4a54      	ldr	r2, [pc, #336]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfa0:	00db      	lsls	r3, r3, #3
 801bfa2:	18d3      	adds	r3, r2, r3
 801bfa4:	3304      	adds	r3, #4
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bfaa:	4013      	ands	r3, r2
 801bfac:	d107      	bne.n	801bfbe <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801bfae:	4a50      	ldr	r2, [pc, #320]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfb2:	00db      	lsls	r3, r3, #3
 801bfb4:	18d3      	adds	r3, r2, r3
 801bfb6:	3304      	adds	r3, #4
 801bfb8:	2201      	movs	r2, #1
 801bfba:	4252      	negs	r2, r2
 801bfbc:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801bfbe:	4a4c      	ldr	r2, [pc, #304]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801bfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfc2:	00db      	lsls	r3, r3, #3
 801bfc4:	18d3      	adds	r3, r2, r3
 801bfc6:	3304      	adds	r3, #4
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bfcc:	4013      	ands	r3, r2
 801bfce:	0018      	movs	r0, r3
 801bfd0:	f000 f8f6 	bl	801c1c0 <SEQ_BitPosition>
 801bfd4:	0003      	movs	r3, r0
 801bfd6:	001a      	movs	r2, r3
 801bfd8:	4b47      	ldr	r3, [pc, #284]	; (801c0f8 <UTIL_SEQ_Run+0x1b0>)
 801bfda:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801bfdc:	4a44      	ldr	r2, [pc, #272]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfe0:	00db      	lsls	r3, r3, #3
 801bfe2:	18d3      	adds	r3, r2, r3
 801bfe4:	3304      	adds	r3, #4
 801bfe6:	681a      	ldr	r2, [r3, #0]
 801bfe8:	4b43      	ldr	r3, [pc, #268]	; (801c0f8 <UTIL_SEQ_Run+0x1b0>)
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	2101      	movs	r1, #1
 801bfee:	4099      	lsls	r1, r3
 801bff0:	000b      	movs	r3, r1
 801bff2:	43db      	mvns	r3, r3
 801bff4:	401a      	ands	r2, r3
 801bff6:	493e      	ldr	r1, [pc, #248]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bffa:	00db      	lsls	r3, r3, #3
 801bffc:	18cb      	adds	r3, r1, r3
 801bffe:	3304      	adds	r3, #4
 801c000:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c002:	f3ef 8310 	mrs	r3, PRIMASK
 801c006:	61bb      	str	r3, [r7, #24]
  return(result);
 801c008:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c00a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c00c:	b672      	cpsid	i
}
 801c00e:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c010:	4b39      	ldr	r3, [pc, #228]	; (801c0f8 <UTIL_SEQ_Run+0x1b0>)
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	2201      	movs	r2, #1
 801c016:	409a      	lsls	r2, r3
 801c018:	0013      	movs	r3, r2
 801c01a:	43da      	mvns	r2, r3
 801c01c:	4b37      	ldr	r3, [pc, #220]	; (801c0fc <UTIL_SEQ_Run+0x1b4>)
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	401a      	ands	r2, r3
 801c022:	4b36      	ldr	r3, [pc, #216]	; (801c0fc <UTIL_SEQ_Run+0x1b4>)
 801c024:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c026:	2302      	movs	r3, #2
 801c028:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c02a:	e013      	b.n	801c054 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c02e:	1e5a      	subs	r2, r3, #1
 801c030:	4b2f      	ldr	r3, [pc, #188]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801c032:	00d2      	lsls	r2, r2, #3
 801c034:	58d1      	ldr	r1, [r2, r3]
 801c036:	4b30      	ldr	r3, [pc, #192]	; (801c0f8 <UTIL_SEQ_Run+0x1b0>)
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	2201      	movs	r2, #1
 801c03c:	409a      	lsls	r2, r3
 801c03e:	0013      	movs	r3, r2
 801c040:	43db      	mvns	r3, r3
 801c042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c044:	3a01      	subs	r2, #1
 801c046:	4019      	ands	r1, r3
 801c048:	4b29      	ldr	r3, [pc, #164]	; (801c0f0 <UTIL_SEQ_Run+0x1a8>)
 801c04a:	00d2      	lsls	r2, r2, #3
 801c04c:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c050:	3b01      	subs	r3, #1
 801c052:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c056:	2b00      	cmp	r3, #0
 801c058:	d1e8      	bne.n	801c02c <UTIL_SEQ_Run+0xe4>
 801c05a:	6a3b      	ldr	r3, [r7, #32]
 801c05c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c05e:	697b      	ldr	r3, [r7, #20]
 801c060:	f383 8810 	msr	PRIMASK, r3
}
 801c064:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c066:	4b24      	ldr	r3, [pc, #144]	; (801c0f8 <UTIL_SEQ_Run+0x1b0>)
 801c068:	681a      	ldr	r2, [r3, #0]
 801c06a:	4b25      	ldr	r3, [pc, #148]	; (801c100 <UTIL_SEQ_Run+0x1b8>)
 801c06c:	0092      	lsls	r2, r2, #2
 801c06e:	58d3      	ldr	r3, [r2, r3]
 801c070:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c072:	4b22      	ldr	r3, [pc, #136]	; (801c0fc <UTIL_SEQ_Run+0x1b4>)
 801c074:	681a      	ldr	r2, [r3, #0]
 801c076:	4b1f      	ldr	r3, [pc, #124]	; (801c0f4 <UTIL_SEQ_Run+0x1ac>)
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	401a      	ands	r2, r3
 801c07c:	4b1b      	ldr	r3, [pc, #108]	; (801c0ec <UTIL_SEQ_Run+0x1a4>)
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	4013      	ands	r3, r2
 801c082:	d006      	beq.n	801c092 <UTIL_SEQ_Run+0x14a>
 801c084:	4b1f      	ldr	r3, [pc, #124]	; (801c104 <UTIL_SEQ_Run+0x1bc>)
 801c086:	681a      	ldr	r2, [r3, #0]
 801c088:	4b1f      	ldr	r3, [pc, #124]	; (801c108 <UTIL_SEQ_Run+0x1c0>)
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	4013      	ands	r3, r2
 801c08e:	d100      	bne.n	801c092 <UTIL_SEQ_Run+0x14a>
 801c090:	e768      	b.n	801bf64 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c092:	4b19      	ldr	r3, [pc, #100]	; (801c0f8 <UTIL_SEQ_Run+0x1b0>)
 801c094:	2201      	movs	r2, #1
 801c096:	4252      	negs	r2, r2
 801c098:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c09a:	f000 f887 	bl	801c1ac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c09e:	f3ef 8310 	mrs	r3, PRIMASK
 801c0a2:	613b      	str	r3, [r7, #16]
  return(result);
 801c0a4:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c0a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0a8:	b672      	cpsid	i
}
 801c0aa:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c0ac:	4b13      	ldr	r3, [pc, #76]	; (801c0fc <UTIL_SEQ_Run+0x1b4>)
 801c0ae:	681a      	ldr	r2, [r3, #0]
 801c0b0:	4b10      	ldr	r3, [pc, #64]	; (801c0f4 <UTIL_SEQ_Run+0x1ac>)
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	401a      	ands	r2, r3
 801c0b6:	4b0d      	ldr	r3, [pc, #52]	; (801c0ec <UTIL_SEQ_Run+0x1a4>)
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	4013      	ands	r3, r2
 801c0bc:	d107      	bne.n	801c0ce <UTIL_SEQ_Run+0x186>
 801c0be:	4b11      	ldr	r3, [pc, #68]	; (801c104 <UTIL_SEQ_Run+0x1bc>)
 801c0c0:	681a      	ldr	r2, [r3, #0]
 801c0c2:	4b11      	ldr	r3, [pc, #68]	; (801c108 <UTIL_SEQ_Run+0x1c0>)
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	4013      	ands	r3, r2
 801c0c8:	d101      	bne.n	801c0ce <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801c0ca:	f7e8 f983 	bl	80043d4 <UTIL_SEQ_Idle>
 801c0ce:	69fb      	ldr	r3, [r7, #28]
 801c0d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	f383 8810 	msr	PRIMASK, r3
}
 801c0d8:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c0da:	f000 f86c 	bl	801c1b6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c0de:	4b03      	ldr	r3, [pc, #12]	; (801c0ec <UTIL_SEQ_Run+0x1a4>)
 801c0e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c0e2:	601a      	str	r2, [r3, #0]

  return;
 801c0e4:	46c0      	nop			; (mov r8, r8)
}
 801c0e6:	46bd      	mov	sp, r7
 801c0e8:	b00c      	add	sp, #48	; 0x30
 801c0ea:	bd80      	pop	{r7, pc}
 801c0ec:	20000210 	.word	0x20000210
 801c0f0:	200019e4 	.word	0x200019e4
 801c0f4:	2000020c 	.word	0x2000020c
 801c0f8:	20001960 	.word	0x20001960
 801c0fc:	20001954 	.word	0x20001954
 801c100:	20001964 	.word	0x20001964
 801c104:	20001958 	.word	0x20001958
 801c108:	2000195c 	.word	0x2000195c

0801c10c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b088      	sub	sp, #32
 801c110:	af00      	add	r7, sp, #0
 801c112:	60f8      	str	r0, [r7, #12]
 801c114:	60b9      	str	r1, [r7, #8]
 801c116:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c118:	f3ef 8310 	mrs	r3, PRIMASK
 801c11c:	617b      	str	r3, [r7, #20]
  return(result);
 801c11e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c122:	b672      	cpsid	i
}
 801c124:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	0018      	movs	r0, r3
 801c12a:	f000 f849 	bl	801c1c0 <SEQ_BitPosition>
 801c12e:	0003      	movs	r3, r0
 801c130:	001a      	movs	r2, r3
 801c132:	4b07      	ldr	r3, [pc, #28]	; (801c150 <UTIL_SEQ_RegTask+0x44>)
 801c134:	0092      	lsls	r2, r2, #2
 801c136:	6879      	ldr	r1, [r7, #4]
 801c138:	50d1      	str	r1, [r2, r3]
 801c13a:	69fb      	ldr	r3, [r7, #28]
 801c13c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c13e:	69bb      	ldr	r3, [r7, #24]
 801c140:	f383 8810 	msr	PRIMASK, r3
}
 801c144:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c146:	46c0      	nop			; (mov r8, r8)
}
 801c148:	46bd      	mov	sp, r7
 801c14a:	b008      	add	sp, #32
 801c14c:	bd80      	pop	{r7, pc}
 801c14e:	46c0      	nop			; (mov r8, r8)
 801c150:	20001964 	.word	0x20001964

0801c154 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c154:	b580      	push	{r7, lr}
 801c156:	b086      	sub	sp, #24
 801c158:	af00      	add	r7, sp, #0
 801c15a:	6078      	str	r0, [r7, #4]
 801c15c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c15e:	f3ef 8310 	mrs	r3, PRIMASK
 801c162:	60fb      	str	r3, [r7, #12]
  return(result);
 801c164:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c168:	b672      	cpsid	i
}
 801c16a:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801c16c:	4b0d      	ldr	r3, [pc, #52]	; (801c1a4 <UTIL_SEQ_SetTask+0x50>)
 801c16e:	681a      	ldr	r2, [r3, #0]
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	431a      	orrs	r2, r3
 801c174:	4b0b      	ldr	r3, [pc, #44]	; (801c1a4 <UTIL_SEQ_SetTask+0x50>)
 801c176:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c178:	4b0b      	ldr	r3, [pc, #44]	; (801c1a8 <UTIL_SEQ_SetTask+0x54>)
 801c17a:	683a      	ldr	r2, [r7, #0]
 801c17c:	00d2      	lsls	r2, r2, #3
 801c17e:	58d2      	ldr	r2, [r2, r3]
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	431a      	orrs	r2, r3
 801c184:	0011      	movs	r1, r2
 801c186:	4b08      	ldr	r3, [pc, #32]	; (801c1a8 <UTIL_SEQ_SetTask+0x54>)
 801c188:	683a      	ldr	r2, [r7, #0]
 801c18a:	00d2      	lsls	r2, r2, #3
 801c18c:	50d1      	str	r1, [r2, r3]
 801c18e:	697b      	ldr	r3, [r7, #20]
 801c190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c192:	693b      	ldr	r3, [r7, #16]
 801c194:	f383 8810 	msr	PRIMASK, r3
}
 801c198:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c19a:	46c0      	nop			; (mov r8, r8)
}
 801c19c:	46bd      	mov	sp, r7
 801c19e:	b006      	add	sp, #24
 801c1a0:	bd80      	pop	{r7, pc}
 801c1a2:	46c0      	nop			; (mov r8, r8)
 801c1a4:	20001954 	.word	0x20001954
 801c1a8:	200019e4 	.word	0x200019e4

0801c1ac <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c1b0:	46c0      	nop			; (mov r8, r8)
}
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	bd80      	pop	{r7, pc}

0801c1b6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c1b6:	b580      	push	{r7, lr}
 801c1b8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c1ba:	46c0      	nop			; (mov r8, r8)
}
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	bd80      	pop	{r7, pc}

0801c1c0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b084      	sub	sp, #16
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c1c8:	210f      	movs	r1, #15
 801c1ca:	187b      	adds	r3, r7, r1
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	0c1b      	lsrs	r3, r3, #16
 801c1d4:	041b      	lsls	r3, r3, #16
 801c1d6:	d105      	bne.n	801c1e4 <SEQ_BitPosition+0x24>
 801c1d8:	187b      	adds	r3, r7, r1
 801c1da:	2210      	movs	r2, #16
 801c1dc:	701a      	strb	r2, [r3, #0]
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	041b      	lsls	r3, r3, #16
 801c1e2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	0e1b      	lsrs	r3, r3, #24
 801c1e8:	061b      	lsls	r3, r3, #24
 801c1ea:	d108      	bne.n	801c1fe <SEQ_BitPosition+0x3e>
 801c1ec:	220f      	movs	r2, #15
 801c1ee:	18bb      	adds	r3, r7, r2
 801c1f0:	18ba      	adds	r2, r7, r2
 801c1f2:	7812      	ldrb	r2, [r2, #0]
 801c1f4:	3208      	adds	r2, #8
 801c1f6:	701a      	strb	r2, [r3, #0]
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	021b      	lsls	r3, r3, #8
 801c1fc:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	0f1b      	lsrs	r3, r3, #28
 801c202:	071b      	lsls	r3, r3, #28
 801c204:	d108      	bne.n	801c218 <SEQ_BitPosition+0x58>
 801c206:	220f      	movs	r2, #15
 801c208:	18bb      	adds	r3, r7, r2
 801c20a:	18ba      	adds	r2, r7, r2
 801c20c:	7812      	ldrb	r2, [r2, #0]
 801c20e:	3204      	adds	r2, #4
 801c210:	701a      	strb	r2, [r3, #0]
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	011b      	lsls	r3, r3, #4
 801c216:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	0f1b      	lsrs	r3, r3, #28
 801c21c:	4a08      	ldr	r2, [pc, #32]	; (801c240 <SEQ_BitPosition+0x80>)
 801c21e:	5cd1      	ldrb	r1, [r2, r3]
 801c220:	200f      	movs	r0, #15
 801c222:	183b      	adds	r3, r7, r0
 801c224:	183a      	adds	r2, r7, r0
 801c226:	7812      	ldrb	r2, [r2, #0]
 801c228:	188a      	adds	r2, r1, r2
 801c22a:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801c22c:	183b      	adds	r3, r7, r0
 801c22e:	781b      	ldrb	r3, [r3, #0]
 801c230:	221f      	movs	r2, #31
 801c232:	1ad3      	subs	r3, r2, r3
 801c234:	b2db      	uxtb	r3, r3
}
 801c236:	0018      	movs	r0, r3
 801c238:	46bd      	mov	sp, r7
 801c23a:	b004      	add	sp, #16
 801c23c:	bd80      	pop	{r7, pc}
 801c23e:	46c0      	nop			; (mov r8, r8)
 801c240:	0801ede8 	.word	0x0801ede8

0801c244 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c244:	b082      	sub	sp, #8
 801c246:	b580      	push	{r7, lr}
 801c248:	b086      	sub	sp, #24
 801c24a:	af00      	add	r7, sp, #0
 801c24c:	60f8      	str	r0, [r7, #12]
 801c24e:	1d38      	adds	r0, r7, #4
 801c250:	6001      	str	r1, [r0, #0]
 801c252:	6042      	str	r2, [r0, #4]
 801c254:	2204      	movs	r2, #4
 801c256:	2020      	movs	r0, #32
 801c258:	1812      	adds	r2, r2, r0
 801c25a:	19d2      	adds	r2, r2, r7
 801c25c:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c25e:	2110      	movs	r1, #16
 801c260:	187b      	adds	r3, r7, r1
 801c262:	2200      	movs	r2, #0
 801c264:	601a      	str	r2, [r3, #0]
 801c266:	187b      	adds	r3, r7, r1
 801c268:	2200      	movs	r2, #0
 801c26a:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801c26c:	1d3b      	adds	r3, r7, #4
 801c26e:	681a      	ldr	r2, [r3, #0]
 801c270:	2304      	movs	r3, #4
 801c272:	181b      	adds	r3, r3, r0
 801c274:	19db      	adds	r3, r3, r7
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	18d2      	adds	r2, r2, r3
 801c27a:	187b      	adds	r3, r7, r1
 801c27c:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c27e:	1d3b      	adds	r3, r7, #4
 801c280:	2204      	movs	r2, #4
 801c282:	5e9b      	ldrsh	r3, [r3, r2]
 801c284:	b29a      	uxth	r2, r3
 801c286:	2304      	movs	r3, #4
 801c288:	181b      	adds	r3, r3, r0
 801c28a:	19db      	adds	r3, r3, r7
 801c28c:	2004      	movs	r0, #4
 801c28e:	5e1b      	ldrsh	r3, [r3, r0]
 801c290:	b29b      	uxth	r3, r3
 801c292:	18d3      	adds	r3, r2, r3
 801c294:	b29b      	uxth	r3, r3
 801c296:	b21a      	sxth	r2, r3
 801c298:	187b      	adds	r3, r7, r1
 801c29a:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801c29c:	187b      	adds	r3, r7, r1
 801c29e:	2204      	movs	r2, #4
 801c2a0:	5e9a      	ldrsh	r2, [r3, r2]
 801c2a2:	23fa      	movs	r3, #250	; 0xfa
 801c2a4:	009b      	lsls	r3, r3, #2
 801c2a6:	429a      	cmp	r2, r3
 801c2a8:	db0f      	blt.n	801c2ca <SysTimeAdd+0x86>
  {
    c.Seconds++;
 801c2aa:	187b      	adds	r3, r7, r1
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	1c5a      	adds	r2, r3, #1
 801c2b0:	187b      	adds	r3, r7, r1
 801c2b2:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801c2b4:	187b      	adds	r3, r7, r1
 801c2b6:	2204      	movs	r2, #4
 801c2b8:	5e9b      	ldrsh	r3, [r3, r2]
 801c2ba:	b29b      	uxth	r3, r3
 801c2bc:	4a09      	ldr	r2, [pc, #36]	; (801c2e4 <SysTimeAdd+0xa0>)
 801c2be:	4694      	mov	ip, r2
 801c2c0:	4463      	add	r3, ip
 801c2c2:	b29b      	uxth	r3, r3
 801c2c4:	b21a      	sxth	r2, r3
 801c2c6:	187b      	adds	r3, r7, r1
 801c2c8:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	2210      	movs	r2, #16
 801c2ce:	18ba      	adds	r2, r7, r2
 801c2d0:	ca03      	ldmia	r2!, {r0, r1}
 801c2d2:	c303      	stmia	r3!, {r0, r1}
}
 801c2d4:	68f8      	ldr	r0, [r7, #12]
 801c2d6:	46bd      	mov	sp, r7
 801c2d8:	b006      	add	sp, #24
 801c2da:	bc80      	pop	{r7}
 801c2dc:	bc08      	pop	{r3}
 801c2de:	b002      	add	sp, #8
 801c2e0:	4718      	bx	r3
 801c2e2:	46c0      	nop			; (mov r8, r8)
 801c2e4:	fffffc18 	.word	0xfffffc18

0801c2e8 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c2e8:	b082      	sub	sp, #8
 801c2ea:	b580      	push	{r7, lr}
 801c2ec:	b086      	sub	sp, #24
 801c2ee:	af00      	add	r7, sp, #0
 801c2f0:	60f8      	str	r0, [r7, #12]
 801c2f2:	1d38      	adds	r0, r7, #4
 801c2f4:	6001      	str	r1, [r0, #0]
 801c2f6:	6042      	str	r2, [r0, #4]
 801c2f8:	2204      	movs	r2, #4
 801c2fa:	2020      	movs	r0, #32
 801c2fc:	1812      	adds	r2, r2, r0
 801c2fe:	19d2      	adds	r2, r2, r7
 801c300:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c302:	2110      	movs	r1, #16
 801c304:	187b      	adds	r3, r7, r1
 801c306:	2200      	movs	r2, #0
 801c308:	601a      	str	r2, [r3, #0]
 801c30a:	187b      	adds	r3, r7, r1
 801c30c:	2200      	movs	r2, #0
 801c30e:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801c310:	1d3b      	adds	r3, r7, #4
 801c312:	681a      	ldr	r2, [r3, #0]
 801c314:	2304      	movs	r3, #4
 801c316:	181b      	adds	r3, r3, r0
 801c318:	19db      	adds	r3, r3, r7
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	1ad2      	subs	r2, r2, r3
 801c31e:	187b      	adds	r3, r7, r1
 801c320:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c322:	1d3b      	adds	r3, r7, #4
 801c324:	2204      	movs	r2, #4
 801c326:	5e9b      	ldrsh	r3, [r3, r2]
 801c328:	b29a      	uxth	r2, r3
 801c32a:	2304      	movs	r3, #4
 801c32c:	181b      	adds	r3, r3, r0
 801c32e:	19db      	adds	r3, r3, r7
 801c330:	2004      	movs	r0, #4
 801c332:	5e1b      	ldrsh	r3, [r3, r0]
 801c334:	b29b      	uxth	r3, r3
 801c336:	1ad3      	subs	r3, r2, r3
 801c338:	b29b      	uxth	r3, r3
 801c33a:	b21a      	sxth	r2, r3
 801c33c:	187b      	adds	r3, r7, r1
 801c33e:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801c340:	187b      	adds	r3, r7, r1
 801c342:	2204      	movs	r2, #4
 801c344:	5e9b      	ldrsh	r3, [r3, r2]
 801c346:	2b00      	cmp	r3, #0
 801c348:	da10      	bge.n	801c36c <SysTimeSub+0x84>
  {
    c.Seconds--;
 801c34a:	187b      	adds	r3, r7, r1
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	1e5a      	subs	r2, r3, #1
 801c350:	187b      	adds	r3, r7, r1
 801c352:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801c354:	187b      	adds	r3, r7, r1
 801c356:	2204      	movs	r2, #4
 801c358:	5e9b      	ldrsh	r3, [r3, r2]
 801c35a:	b29b      	uxth	r3, r3
 801c35c:	22fa      	movs	r2, #250	; 0xfa
 801c35e:	0092      	lsls	r2, r2, #2
 801c360:	4694      	mov	ip, r2
 801c362:	4463      	add	r3, ip
 801c364:	b29b      	uxth	r3, r3
 801c366:	b21a      	sxth	r2, r3
 801c368:	187b      	adds	r3, r7, r1
 801c36a:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	2210      	movs	r2, #16
 801c370:	18ba      	adds	r2, r7, r2
 801c372:	ca03      	ldmia	r2!, {r0, r1}
 801c374:	c303      	stmia	r3!, {r0, r1}
}
 801c376:	68f8      	ldr	r0, [r7, #12]
 801c378:	46bd      	mov	sp, r7
 801c37a:	b006      	add	sp, #24
 801c37c:	bc80      	pop	{r7}
 801c37e:	bc08      	pop	{r3}
 801c380:	b002      	add	sp, #8
 801c382:	4718      	bx	r3

0801c384 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c384:	b5b0      	push	{r4, r5, r7, lr}
 801c386:	b088      	sub	sp, #32
 801c388:	af02      	add	r7, sp, #8
 801c38a:	003b      	movs	r3, r7
 801c38c:	6018      	str	r0, [r3, #0]
 801c38e:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c390:	2108      	movs	r1, #8
 801c392:	187b      	adds	r3, r7, r1
 801c394:	2200      	movs	r2, #0
 801c396:	601a      	str	r2, [r3, #0]
 801c398:	187b      	adds	r3, r7, r1
 801c39a:	2200      	movs	r2, #0
 801c39c:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c39e:	4b14      	ldr	r3, [pc, #80]	; (801c3f0 <SysTimeSet+0x6c>)
 801c3a0:	691b      	ldr	r3, [r3, #16]
 801c3a2:	000c      	movs	r4, r1
 801c3a4:	187a      	adds	r2, r7, r1
 801c3a6:	3204      	adds	r2, #4
 801c3a8:	0010      	movs	r0, r2
 801c3aa:	4798      	blx	r3
 801c3ac:	0002      	movs	r2, r0
 801c3ae:	0021      	movs	r1, r4
 801c3b0:	187b      	adds	r3, r7, r1
 801c3b2:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c3b4:	2510      	movs	r5, #16
 801c3b6:	197c      	adds	r4, r7, r5
 801c3b8:	187b      	adds	r3, r7, r1
 801c3ba:	003a      	movs	r2, r7
 801c3bc:	4669      	mov	r1, sp
 801c3be:	6858      	ldr	r0, [r3, #4]
 801c3c0:	6008      	str	r0, [r1, #0]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	6811      	ldr	r1, [r2, #0]
 801c3c6:	6852      	ldr	r2, [r2, #4]
 801c3c8:	0020      	movs	r0, r4
 801c3ca:	f7ff ff8d 	bl	801c2e8 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c3ce:	4b08      	ldr	r3, [pc, #32]	; (801c3f0 <SysTimeSet+0x6c>)
 801c3d0:	681a      	ldr	r2, [r3, #0]
 801c3d2:	197b      	adds	r3, r7, r5
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	0018      	movs	r0, r3
 801c3d8:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c3da:	4b05      	ldr	r3, [pc, #20]	; (801c3f0 <SysTimeSet+0x6c>)
 801c3dc:	689b      	ldr	r3, [r3, #8]
 801c3de:	197a      	adds	r2, r7, r5
 801c3e0:	2104      	movs	r1, #4
 801c3e2:	5e52      	ldrsh	r2, [r2, r1]
 801c3e4:	0010      	movs	r0, r2
 801c3e6:	4798      	blx	r3
}
 801c3e8:	46c0      	nop			; (mov r8, r8)
 801c3ea:	46bd      	mov	sp, r7
 801c3ec:	b006      	add	sp, #24
 801c3ee:	bdb0      	pop	{r4, r5, r7, pc}
 801c3f0:	0801e02c 	.word	0x0801e02c

0801c3f4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3f6:	b08b      	sub	sp, #44	; 0x2c
 801c3f8:	af02      	add	r7, sp, #8
 801c3fa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c3fc:	2518      	movs	r5, #24
 801c3fe:	197b      	adds	r3, r7, r5
 801c400:	2200      	movs	r2, #0
 801c402:	601a      	str	r2, [r3, #0]
 801c404:	197b      	adds	r3, r7, r5
 801c406:	2200      	movs	r2, #0
 801c408:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c40a:	2410      	movs	r4, #16
 801c40c:	193b      	adds	r3, r7, r4
 801c40e:	2200      	movs	r2, #0
 801c410:	601a      	str	r2, [r3, #0]
 801c412:	193b      	adds	r3, r7, r4
 801c414:	2200      	movs	r2, #0
 801c416:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c418:	4b16      	ldr	r3, [pc, #88]	; (801c474 <SysTimeGet+0x80>)
 801c41a:	691b      	ldr	r3, [r3, #16]
 801c41c:	197a      	adds	r2, r7, r5
 801c41e:	3204      	adds	r2, #4
 801c420:	0010      	movs	r0, r2
 801c422:	4798      	blx	r3
 801c424:	0002      	movs	r2, r0
 801c426:	197b      	adds	r3, r7, r5
 801c428:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c42a:	4b12      	ldr	r3, [pc, #72]	; (801c474 <SysTimeGet+0x80>)
 801c42c:	68db      	ldr	r3, [r3, #12]
 801c42e:	4798      	blx	r3
 801c430:	0003      	movs	r3, r0
 801c432:	b21a      	sxth	r2, r3
 801c434:	2608      	movs	r6, #8
 801c436:	19bb      	adds	r3, r7, r6
 801c438:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c43a:	4b0e      	ldr	r3, [pc, #56]	; (801c474 <SysTimeGet+0x80>)
 801c43c:	685b      	ldr	r3, [r3, #4]
 801c43e:	4798      	blx	r3
 801c440:	0002      	movs	r2, r0
 801c442:	0031      	movs	r1, r6
 801c444:	187b      	adds	r3, r7, r1
 801c446:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c448:	0026      	movs	r6, r4
 801c44a:	193c      	adds	r4, r7, r4
 801c44c:	197b      	adds	r3, r7, r5
 801c44e:	187a      	adds	r2, r7, r1
 801c450:	4669      	mov	r1, sp
 801c452:	6858      	ldr	r0, [r3, #4]
 801c454:	6008      	str	r0, [r1, #0]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	6811      	ldr	r1, [r2, #0]
 801c45a:	6852      	ldr	r2, [r2, #4]
 801c45c:	0020      	movs	r0, r4
 801c45e:	f7ff fef1 	bl	801c244 <SysTimeAdd>

  return sysTime;
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	19ba      	adds	r2, r7, r6
 801c466:	ca03      	ldmia	r2!, {r0, r1}
 801c468:	c303      	stmia	r3!, {r0, r1}
}
 801c46a:	6878      	ldr	r0, [r7, #4]
 801c46c:	46bd      	mov	sp, r7
 801c46e:	b009      	add	sp, #36	; 0x24
 801c470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c472:	46c0      	nop			; (mov r8, r8)
 801c474:	0801e02c 	.word	0x0801e02c

0801c478 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c478:	b590      	push	{r4, r7, lr}
 801c47a:	b085      	sub	sp, #20
 801c47c:	af00      	add	r7, sp, #0
 801c47e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c480:	2108      	movs	r1, #8
 801c482:	187b      	adds	r3, r7, r1
 801c484:	2200      	movs	r2, #0
 801c486:	601a      	str	r2, [r3, #0]
 801c488:	187b      	adds	r3, r7, r1
 801c48a:	2200      	movs	r2, #0
 801c48c:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c48e:	4b09      	ldr	r3, [pc, #36]	; (801c4b4 <SysTimeGetMcuTime+0x3c>)
 801c490:	691b      	ldr	r3, [r3, #16]
 801c492:	000c      	movs	r4, r1
 801c494:	187a      	adds	r2, r7, r1
 801c496:	3204      	adds	r2, #4
 801c498:	0010      	movs	r0, r2
 801c49a:	4798      	blx	r3
 801c49c:	0002      	movs	r2, r0
 801c49e:	193b      	adds	r3, r7, r4
 801c4a0:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	193a      	adds	r2, r7, r4
 801c4a6:	ca03      	ldmia	r2!, {r0, r1}
 801c4a8:	c303      	stmia	r3!, {r0, r1}
}
 801c4aa:	6878      	ldr	r0, [r7, #4]
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	b005      	add	sp, #20
 801c4b0:	bd90      	pop	{r4, r7, pc}
 801c4b2:	46c0      	nop			; (mov r8, r8)
 801c4b4:	0801e02c 	.word	0x0801e02c

0801c4b8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c4b8:	b580      	push	{r7, lr}
 801c4ba:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c4bc:	4b04      	ldr	r3, [pc, #16]	; (801c4d0 <UTIL_TIMER_Init+0x18>)
 801c4be:	2200      	movs	r2, #0
 801c4c0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c4c2:	4b04      	ldr	r3, [pc, #16]	; (801c4d4 <UTIL_TIMER_Init+0x1c>)
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	4798      	blx	r3
 801c4c8:	0003      	movs	r3, r0
}
 801c4ca:	0018      	movs	r0, r3
 801c4cc:	46bd      	mov	sp, r7
 801c4ce:	bd80      	pop	{r7, pc}
 801c4d0:	200019f4 	.word	0x200019f4
 801c4d4:	0801e000 	.word	0x0801e000

0801c4d8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c4d8:	b580      	push	{r7, lr}
 801c4da:	b084      	sub	sp, #16
 801c4dc:	af00      	add	r7, sp, #0
 801c4de:	60f8      	str	r0, [r7, #12]
 801c4e0:	60b9      	str	r1, [r7, #8]
 801c4e2:	603b      	str	r3, [r7, #0]
 801c4e4:	1dfb      	adds	r3, r7, #7
 801c4e6:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d025      	beq.n	801c53a <UTIL_TIMER_Create+0x62>
 801c4ee:	683b      	ldr	r3, [r7, #0]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d022      	beq.n	801c53a <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c4fa:	4b12      	ldr	r3, [pc, #72]	; (801c544 <UTIL_TIMER_Create+0x6c>)
 801c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4fe:	68ba      	ldr	r2, [r7, #8]
 801c500:	0010      	movs	r0, r2
 801c502:	4798      	blx	r3
 801c504:	0002      	movs	r2, r0
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	2200      	movs	r2, #0
 801c50e:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	2200      	movs	r2, #0
 801c514:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	2200      	movs	r2, #0
 801c51a:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	683a      	ldr	r2, [r7, #0]
 801c520:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	69ba      	ldr	r2, [r7, #24]
 801c526:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	1dfa      	adds	r2, r7, #7
 801c52c:	7812      	ldrb	r2, [r2, #0]
 801c52e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	2200      	movs	r2, #0
 801c534:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c536:	2300      	movs	r3, #0
 801c538:	e000      	b.n	801c53c <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c53a:	2301      	movs	r3, #1
  }
}
 801c53c:	0018      	movs	r0, r3
 801c53e:	46bd      	mov	sp, r7
 801c540:	b004      	add	sp, #16
 801c542:	bd80      	pop	{r7, pc}
 801c544:	0801e000 	.word	0x0801e000

0801c548 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b08a      	sub	sp, #40	; 0x28
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c550:	2327      	movs	r3, #39	; 0x27
 801c552:	18fb      	adds	r3, r7, r3
 801c554:	2200      	movs	r2, #0
 801c556:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d05d      	beq.n	801c61a <UTIL_TIMER_Start+0xd2>
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	0018      	movs	r0, r3
 801c562:	f000 f9cb 	bl	801c8fc <TimerExists>
 801c566:	0003      	movs	r3, r0
 801c568:	001a      	movs	r2, r3
 801c56a:	2301      	movs	r3, #1
 801c56c:	4053      	eors	r3, r2
 801c56e:	b2db      	uxtb	r3, r3
 801c570:	2b00      	cmp	r3, #0
 801c572:	d052      	beq.n	801c61a <UTIL_TIMER_Start+0xd2>
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	7a5b      	ldrb	r3, [r3, #9]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d14e      	bne.n	801c61a <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c57c:	f3ef 8310 	mrs	r3, PRIMASK
 801c580:	613b      	str	r3, [r7, #16]
  return(result);
 801c582:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c586:	b672      	cpsid	i
}
 801c588:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	685b      	ldr	r3, [r3, #4]
 801c58e:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c590:	4b27      	ldr	r3, [pc, #156]	; (801c630 <UTIL_TIMER_Start+0xe8>)
 801c592:	6a1b      	ldr	r3, [r3, #32]
 801c594:	4798      	blx	r3
 801c596:	0003      	movs	r3, r0
 801c598:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801c59a:	6a3a      	ldr	r2, [r7, #32]
 801c59c:	69bb      	ldr	r3, [r7, #24]
 801c59e:	429a      	cmp	r2, r3
 801c5a0:	d201      	bcs.n	801c5a6 <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801c5a2:	69bb      	ldr	r3, [r7, #24]
 801c5a4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	6a3a      	ldr	r2, [r7, #32]
 801c5aa:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	2201      	movs	r2, #1
 801c5b6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c5be:	4b1d      	ldr	r3, [pc, #116]	; (801c634 <UTIL_TIMER_Start+0xec>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d107      	bne.n	801c5d6 <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c5c6:	4b1a      	ldr	r3, [pc, #104]	; (801c630 <UTIL_TIMER_Start+0xe8>)
 801c5c8:	691b      	ldr	r3, [r3, #16]
 801c5ca:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	0018      	movs	r0, r3
 801c5d0:	f000 fa08 	bl	801c9e4 <TimerInsertNewHeadTimer>
 801c5d4:	e01a      	b.n	801c60c <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c5d6:	4b16      	ldr	r3, [pc, #88]	; (801c630 <UTIL_TIMER_Start+0xe8>)
 801c5d8:	699b      	ldr	r3, [r3, #24]
 801c5da:	4798      	blx	r3
 801c5dc:	0003      	movs	r3, r0
 801c5de:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681a      	ldr	r2, [r3, #0]
 801c5e4:	697b      	ldr	r3, [r7, #20]
 801c5e6:	18d2      	adds	r2, r2, r3
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	681a      	ldr	r2, [r3, #0]
 801c5f0:	4b10      	ldr	r3, [pc, #64]	; (801c634 <UTIL_TIMER_Start+0xec>)
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	429a      	cmp	r2, r3
 801c5f8:	d204      	bcs.n	801c604 <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	0018      	movs	r0, r3
 801c5fe:	f000 f9f1 	bl	801c9e4 <TimerInsertNewHeadTimer>
 801c602:	e003      	b.n	801c60c <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	0018      	movs	r0, r3
 801c608:	f000 f9be 	bl	801c988 <TimerInsertTimer>
 801c60c:	69fb      	ldr	r3, [r7, #28]
 801c60e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	f383 8810 	msr	PRIMASK, r3
}
 801c616:	46c0      	nop			; (mov r8, r8)
  {
 801c618:	e003      	b.n	801c622 <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c61a:	2327      	movs	r3, #39	; 0x27
 801c61c:	18fb      	adds	r3, r7, r3
 801c61e:	2201      	movs	r2, #1
 801c620:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801c622:	2327      	movs	r3, #39	; 0x27
 801c624:	18fb      	adds	r3, r7, r3
 801c626:	781b      	ldrb	r3, [r3, #0]
}
 801c628:	0018      	movs	r0, r3
 801c62a:	46bd      	mov	sp, r7
 801c62c:	b00a      	add	sp, #40	; 0x28
 801c62e:	bd80      	pop	{r7, pc}
 801c630:	0801e000 	.word	0x0801e000
 801c634:	200019f4 	.word	0x200019f4

0801c638 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	b088      	sub	sp, #32
 801c63c:	af00      	add	r7, sp, #0
 801c63e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c640:	231f      	movs	r3, #31
 801c642:	18fb      	adds	r3, r7, r3
 801c644:	2200      	movs	r2, #0
 801c646:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d05d      	beq.n	801c70a <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c64e:	f3ef 8310 	mrs	r3, PRIMASK
 801c652:	60fb      	str	r3, [r7, #12]
  return(result);
 801c654:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c658:	b672      	cpsid	i
}
 801c65a:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c65c:	4b30      	ldr	r3, [pc, #192]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c662:	4b2f      	ldr	r3, [pc, #188]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c664:	681b      	ldr	r3, [r3, #0]
 801c666:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	2201      	movs	r2, #1
 801c66c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c66e:	4b2c      	ldr	r3, [pc, #176]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d043      	beq.n	801c6fe <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	2200      	movs	r2, #0
 801c67a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c67c:	4b28      	ldr	r3, [pc, #160]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	687a      	ldr	r2, [r7, #4]
 801c682:	429a      	cmp	r2, r3
 801c684:	d134      	bne.n	801c6f0 <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801c686:	4b26      	ldr	r3, [pc, #152]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	2200      	movs	r2, #0
 801c68c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c68e:	4b24      	ldr	r3, [pc, #144]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	695b      	ldr	r3, [r3, #20]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d00a      	beq.n	801c6ae <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801c698:	4b21      	ldr	r3, [pc, #132]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	695a      	ldr	r2, [r3, #20]
 801c69e:	4b20      	ldr	r3, [pc, #128]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c6a0:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801c6a2:	4b1f      	ldr	r3, [pc, #124]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	0018      	movs	r0, r3
 801c6a8:	f000 f944 	bl	801c934 <TimerSetTimeout>
 801c6ac:	e023      	b.n	801c6f6 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c6ae:	4b1d      	ldr	r3, [pc, #116]	; (801c724 <UTIL_TIMER_Stop+0xec>)
 801c6b0:	68db      	ldr	r3, [r3, #12]
 801c6b2:	4798      	blx	r3
            TimerListHead = NULL;
 801c6b4:	4b1a      	ldr	r3, [pc, #104]	; (801c720 <UTIL_TIMER_Stop+0xe8>)
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	601a      	str	r2, [r3, #0]
 801c6ba:	e01c      	b.n	801c6f6 <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c6bc:	697a      	ldr	r2, [r7, #20]
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	429a      	cmp	r2, r3
 801c6c2:	d110      	bne.n	801c6e6 <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801c6c4:	697b      	ldr	r3, [r7, #20]
 801c6c6:	695b      	ldr	r3, [r3, #20]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d006      	beq.n	801c6da <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801c6cc:	697b      	ldr	r3, [r7, #20]
 801c6ce:	695b      	ldr	r3, [r3, #20]
 801c6d0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c6d2:	69bb      	ldr	r3, [r7, #24]
 801c6d4:	697a      	ldr	r2, [r7, #20]
 801c6d6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c6d8:	e00d      	b.n	801c6f6 <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801c6da:	2300      	movs	r3, #0
 801c6dc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c6de:	69bb      	ldr	r3, [r7, #24]
 801c6e0:	697a      	ldr	r2, [r7, #20]
 801c6e2:	615a      	str	r2, [r3, #20]
            break;
 801c6e4:	e007      	b.n	801c6f6 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c6ea:	697b      	ldr	r3, [r7, #20]
 801c6ec:	695b      	ldr	r3, [r3, #20]
 801c6ee:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c6f0:	697b      	ldr	r3, [r7, #20]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d1e2      	bne.n	801c6bc <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c6f6:	231f      	movs	r3, #31
 801c6f8:	18fb      	adds	r3, r7, r3
 801c6fa:	2200      	movs	r2, #0
 801c6fc:	701a      	strb	r2, [r3, #0]
 801c6fe:	693b      	ldr	r3, [r7, #16]
 801c700:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c702:	68bb      	ldr	r3, [r7, #8]
 801c704:	f383 8810 	msr	PRIMASK, r3
}
 801c708:	e003      	b.n	801c712 <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c70a:	231f      	movs	r3, #31
 801c70c:	18fb      	adds	r3, r7, r3
 801c70e:	2201      	movs	r2, #1
 801c710:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801c712:	231f      	movs	r3, #31
 801c714:	18fb      	adds	r3, r7, r3
 801c716:	781b      	ldrb	r3, [r3, #0]
}
 801c718:	0018      	movs	r0, r3
 801c71a:	46bd      	mov	sp, r7
 801c71c:	b008      	add	sp, #32
 801c71e:	bd80      	pop	{r7, pc}
 801c720:	200019f4 	.word	0x200019f4
 801c724:	0801e000 	.word	0x0801e000

0801c728 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c728:	b590      	push	{r4, r7, lr}
 801c72a:	b085      	sub	sp, #20
 801c72c:	af00      	add	r7, sp, #0
 801c72e:	6078      	str	r0, [r7, #4]
 801c730:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c732:	210f      	movs	r1, #15
 801c734:	187b      	adds	r3, r7, r1
 801c736:	2200      	movs	r2, #0
 801c738:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d103      	bne.n	801c748 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c740:	187b      	adds	r3, r7, r1
 801c742:	2201      	movs	r2, #1
 801c744:	701a      	strb	r2, [r3, #0]
 801c746:	e019      	b.n	801c77c <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c748:	4b10      	ldr	r3, [pc, #64]	; (801c78c <UTIL_TIMER_SetPeriod+0x64>)
 801c74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c74c:	683a      	ldr	r2, [r7, #0]
 801c74e:	0010      	movs	r0, r2
 801c750:	4798      	blx	r3
 801c752:	0002      	movs	r2, r0
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	0018      	movs	r0, r3
 801c75c:	f000 f8ce 	bl	801c8fc <TimerExists>
 801c760:	1e03      	subs	r3, r0, #0
 801c762:	d00b      	beq.n	801c77c <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	0018      	movs	r0, r3
 801c768:	f7ff ff66 	bl	801c638 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c76c:	230f      	movs	r3, #15
 801c76e:	18fc      	adds	r4, r7, r3
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	0018      	movs	r0, r3
 801c774:	f7ff fee8 	bl	801c548 <UTIL_TIMER_Start>
 801c778:	0003      	movs	r3, r0
 801c77a:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801c77c:	230f      	movs	r3, #15
 801c77e:	18fb      	adds	r3, r7, r3
 801c780:	781b      	ldrb	r3, [r3, #0]
}
 801c782:	0018      	movs	r0, r3
 801c784:	46bd      	mov	sp, r7
 801c786:	b005      	add	sp, #20
 801c788:	bd90      	pop	{r4, r7, pc}
 801c78a:	46c0      	nop			; (mov r8, r8)
 801c78c:	0801e000 	.word	0x0801e000

0801c790 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c790:	b590      	push	{r4, r7, lr}
 801c792:	b089      	sub	sp, #36	; 0x24
 801c794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c796:	f3ef 8310 	mrs	r3, PRIMASK
 801c79a:	60bb      	str	r3, [r7, #8]
  return(result);
 801c79c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c79e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7a0:	b672      	cpsid	i
}
 801c7a2:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c7a4:	4b3a      	ldr	r3, [pc, #232]	; (801c890 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c7a6:	695b      	ldr	r3, [r3, #20]
 801c7a8:	4798      	blx	r3
 801c7aa:	0003      	movs	r3, r0
 801c7ac:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c7ae:	4b38      	ldr	r3, [pc, #224]	; (801c890 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c7b0:	691b      	ldr	r3, [r3, #16]
 801c7b2:	4798      	blx	r3
 801c7b4:	0003      	movs	r3, r0
 801c7b6:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c7b8:	693a      	ldr	r2, [r7, #16]
 801c7ba:	697b      	ldr	r3, [r7, #20]
 801c7bc:	1ad3      	subs	r3, r2, r3
 801c7be:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c7c0:	4b34      	ldr	r3, [pc, #208]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d038      	beq.n	801c83a <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801c7c8:	4b32      	ldr	r3, [pc, #200]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c7ce:	69fb      	ldr	r3, [r7, #28]
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	68fa      	ldr	r2, [r7, #12]
 801c7d4:	429a      	cmp	r2, r3
 801c7d6:	d206      	bcs.n	801c7e6 <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801c7d8:	69fb      	ldr	r3, [r7, #28]
 801c7da:	681a      	ldr	r2, [r3, #0]
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	1ad2      	subs	r2, r2, r3
 801c7e0:	69fb      	ldr	r3, [r7, #28]
 801c7e2:	601a      	str	r2, [r3, #0]
 801c7e4:	e002      	b.n	801c7ec <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801c7e6:	69fb      	ldr	r3, [r7, #28]
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c7ec:	69fb      	ldr	r3, [r7, #28]
 801c7ee:	695b      	ldr	r3, [r3, #20]
 801c7f0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c7f2:	69fb      	ldr	r3, [r7, #28]
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d1ea      	bne.n	801c7ce <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c7f8:	e01f      	b.n	801c83a <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801c7fa:	4b26      	ldr	r3, [pc, #152]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c800:	4b24      	ldr	r3, [pc, #144]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	695a      	ldr	r2, [r3, #20]
 801c806:	4b23      	ldr	r3, [pc, #140]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c808:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801c80a:	69fb      	ldr	r3, [r7, #28]
 801c80c:	2200      	movs	r2, #0
 801c80e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c810:	69fb      	ldr	r3, [r7, #28]
 801c812:	2200      	movs	r2, #0
 801c814:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c816:	69fb      	ldr	r3, [r7, #28]
 801c818:	68da      	ldr	r2, [r3, #12]
 801c81a:	69fb      	ldr	r3, [r7, #28]
 801c81c:	691b      	ldr	r3, [r3, #16]
 801c81e:	0018      	movs	r0, r3
 801c820:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c822:	69fb      	ldr	r3, [r7, #28]
 801c824:	7adb      	ldrb	r3, [r3, #11]
 801c826:	2b01      	cmp	r3, #1
 801c828:	d107      	bne.n	801c83a <UTIL_TIMER_IRQ_Handler+0xaa>
 801c82a:	69fb      	ldr	r3, [r7, #28]
 801c82c:	7a9b      	ldrb	r3, [r3, #10]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d103      	bne.n	801c83a <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801c832:	69fb      	ldr	r3, [r7, #28]
 801c834:	0018      	movs	r0, r3
 801c836:	f7ff fe87 	bl	801c548 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c83a:	4b16      	ldr	r3, [pc, #88]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c83c:	681b      	ldr	r3, [r3, #0]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d00d      	beq.n	801c85e <UTIL_TIMER_IRQ_Handler+0xce>
 801c842:	4b14      	ldr	r3, [pc, #80]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d0d6      	beq.n	801c7fa <UTIL_TIMER_IRQ_Handler+0x6a>
 801c84c:	4b11      	ldr	r3, [pc, #68]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	681c      	ldr	r4, [r3, #0]
 801c852:	4b0f      	ldr	r3, [pc, #60]	; (801c890 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c854:	699b      	ldr	r3, [r3, #24]
 801c856:	4798      	blx	r3
 801c858:	0003      	movs	r3, r0
 801c85a:	429c      	cmp	r4, r3
 801c85c:	d3cd      	bcc.n	801c7fa <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c85e:	4b0d      	ldr	r3, [pc, #52]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	2b00      	cmp	r3, #0
 801c864:	d009      	beq.n	801c87a <UTIL_TIMER_IRQ_Handler+0xea>
 801c866:	4b0b      	ldr	r3, [pc, #44]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	7a1b      	ldrb	r3, [r3, #8]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d104      	bne.n	801c87a <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801c870:	4b08      	ldr	r3, [pc, #32]	; (801c894 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	0018      	movs	r0, r3
 801c876:	f000 f85d 	bl	801c934 <TimerSetTimeout>
 801c87a:	69bb      	ldr	r3, [r7, #24]
 801c87c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	f383 8810 	msr	PRIMASK, r3
}
 801c884:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c886:	46c0      	nop			; (mov r8, r8)
 801c888:	46bd      	mov	sp, r7
 801c88a:	b009      	add	sp, #36	; 0x24
 801c88c:	bd90      	pop	{r4, r7, pc}
 801c88e:	46c0      	nop			; (mov r8, r8)
 801c890:	0801e000 	.word	0x0801e000
 801c894:	200019f4 	.word	0x200019f4

0801c898 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c898:	b580      	push	{r7, lr}
 801c89a:	b082      	sub	sp, #8
 801c89c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c89e:	4b07      	ldr	r3, [pc, #28]	; (801c8bc <UTIL_TIMER_GetCurrentTime+0x24>)
 801c8a0:	69db      	ldr	r3, [r3, #28]
 801c8a2:	4798      	blx	r3
 801c8a4:	0003      	movs	r3, r0
 801c8a6:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c8a8:	4b04      	ldr	r3, [pc, #16]	; (801c8bc <UTIL_TIMER_GetCurrentTime+0x24>)
 801c8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8ac:	687a      	ldr	r2, [r7, #4]
 801c8ae:	0010      	movs	r0, r2
 801c8b0:	4798      	blx	r3
 801c8b2:	0003      	movs	r3, r0
}
 801c8b4:	0018      	movs	r0, r3
 801c8b6:	46bd      	mov	sp, r7
 801c8b8:	b002      	add	sp, #8
 801c8ba:	bd80      	pop	{r7, pc}
 801c8bc:	0801e000 	.word	0x0801e000

0801c8c0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b084      	sub	sp, #16
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c8c8:	4b0b      	ldr	r3, [pc, #44]	; (801c8f8 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c8ca:	69db      	ldr	r3, [r3, #28]
 801c8cc:	4798      	blx	r3
 801c8ce:	0003      	movs	r3, r0
 801c8d0:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c8d2:	4b09      	ldr	r3, [pc, #36]	; (801c8f8 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8d6:	687a      	ldr	r2, [r7, #4]
 801c8d8:	0010      	movs	r0, r2
 801c8da:	4798      	blx	r3
 801c8dc:	0003      	movs	r3, r0
 801c8de:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c8e0:	4b05      	ldr	r3, [pc, #20]	; (801c8f8 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8e4:	68f9      	ldr	r1, [r7, #12]
 801c8e6:	68ba      	ldr	r2, [r7, #8]
 801c8e8:	1a8a      	subs	r2, r1, r2
 801c8ea:	0010      	movs	r0, r2
 801c8ec:	4798      	blx	r3
 801c8ee:	0003      	movs	r3, r0
}
 801c8f0:	0018      	movs	r0, r3
 801c8f2:	46bd      	mov	sp, r7
 801c8f4:	b004      	add	sp, #16
 801c8f6:	bd80      	pop	{r7, pc}
 801c8f8:	0801e000 	.word	0x0801e000

0801c8fc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b084      	sub	sp, #16
 801c900:	af00      	add	r7, sp, #0
 801c902:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c904:	4b0a      	ldr	r3, [pc, #40]	; (801c930 <TimerExists+0x34>)
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c90a:	e008      	b.n	801c91e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c90c:	68fa      	ldr	r2, [r7, #12]
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	429a      	cmp	r2, r3
 801c912:	d101      	bne.n	801c918 <TimerExists+0x1c>
    {
      return true;
 801c914:	2301      	movs	r3, #1
 801c916:	e006      	b.n	801c926 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	695b      	ldr	r3, [r3, #20]
 801c91c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d1f3      	bne.n	801c90c <TimerExists+0x10>
  }
  return false;
 801c924:	2300      	movs	r3, #0
}
 801c926:	0018      	movs	r0, r3
 801c928:	46bd      	mov	sp, r7
 801c92a:	b004      	add	sp, #16
 801c92c:	bd80      	pop	{r7, pc}
 801c92e:	46c0      	nop			; (mov r8, r8)
 801c930:	200019f4 	.word	0x200019f4

0801c934 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c934:	b590      	push	{r4, r7, lr}
 801c936:	b085      	sub	sp, #20
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c93c:	4b11      	ldr	r3, [pc, #68]	; (801c984 <TimerSetTimeout+0x50>)
 801c93e:	6a1b      	ldr	r3, [r3, #32]
 801c940:	4798      	blx	r3
 801c942:	0003      	movs	r3, r0
 801c944:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	2201      	movs	r2, #1
 801c94a:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	681c      	ldr	r4, [r3, #0]
 801c950:	4b0c      	ldr	r3, [pc, #48]	; (801c984 <TimerSetTimeout+0x50>)
 801c952:	699b      	ldr	r3, [r3, #24]
 801c954:	4798      	blx	r3
 801c956:	0002      	movs	r2, r0
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	18d3      	adds	r3, r2, r3
 801c95c:	429c      	cmp	r4, r3
 801c95e:	d207      	bcs.n	801c970 <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c960:	4b08      	ldr	r3, [pc, #32]	; (801c984 <TimerSetTimeout+0x50>)
 801c962:	699b      	ldr	r3, [r3, #24]
 801c964:	4798      	blx	r3
 801c966:	0002      	movs	r2, r0
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	18d2      	adds	r2, r2, r3
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c970:	4b04      	ldr	r3, [pc, #16]	; (801c984 <TimerSetTimeout+0x50>)
 801c972:	689a      	ldr	r2, [r3, #8]
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	0018      	movs	r0, r3
 801c97a:	4790      	blx	r2
}
 801c97c:	46c0      	nop			; (mov r8, r8)
 801c97e:	46bd      	mov	sp, r7
 801c980:	b005      	add	sp, #20
 801c982:	bd90      	pop	{r4, r7, pc}
 801c984:	0801e000 	.word	0x0801e000

0801c988 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c988:	b580      	push	{r7, lr}
 801c98a:	b084      	sub	sp, #16
 801c98c:	af00      	add	r7, sp, #0
 801c98e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c990:	4b13      	ldr	r3, [pc, #76]	; (801c9e0 <TimerInsertTimer+0x58>)
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c996:	4b12      	ldr	r3, [pc, #72]	; (801c9e0 <TimerInsertTimer+0x58>)
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	695b      	ldr	r3, [r3, #20]
 801c99c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c99e:	e012      	b.n	801c9c6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	681a      	ldr	r2, [r3, #0]
 801c9a4:	68bb      	ldr	r3, [r7, #8]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	429a      	cmp	r2, r3
 801c9aa:	d905      	bls.n	801c9b8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801c9ac:	68bb      	ldr	r3, [r7, #8]
 801c9ae:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c9b0:	68bb      	ldr	r3, [r7, #8]
 801c9b2:	695b      	ldr	r3, [r3, #20]
 801c9b4:	60bb      	str	r3, [r7, #8]
 801c9b6:	e006      	b.n	801c9c6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	687a      	ldr	r2, [r7, #4]
 801c9bc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	68ba      	ldr	r2, [r7, #8]
 801c9c2:	615a      	str	r2, [r3, #20]
        return;
 801c9c4:	e009      	b.n	801c9da <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	695b      	ldr	r3, [r3, #20]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d1e8      	bne.n	801c9a0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	687a      	ldr	r2, [r7, #4]
 801c9d2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	2200      	movs	r2, #0
 801c9d8:	615a      	str	r2, [r3, #20]
}
 801c9da:	46bd      	mov	sp, r7
 801c9dc:	b004      	add	sp, #16
 801c9de:	bd80      	pop	{r7, pc}
 801c9e0:	200019f4 	.word	0x200019f4

0801c9e4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c9e4:	b580      	push	{r7, lr}
 801c9e6:	b084      	sub	sp, #16
 801c9e8:	af00      	add	r7, sp, #0
 801c9ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c9ec:	4b0b      	ldr	r3, [pc, #44]	; (801ca1c <TimerInsertNewHeadTimer+0x38>)
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d002      	beq.n	801c9fe <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	68fa      	ldr	r2, [r7, #12]
 801ca02:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ca04:	4b05      	ldr	r3, [pc, #20]	; (801ca1c <TimerInsertNewHeadTimer+0x38>)
 801ca06:	687a      	ldr	r2, [r7, #4]
 801ca08:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801ca0a:	4b04      	ldr	r3, [pc, #16]	; (801ca1c <TimerInsertNewHeadTimer+0x38>)
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	0018      	movs	r0, r3
 801ca10:	f7ff ff90 	bl	801c934 <TimerSetTimeout>
}
 801ca14:	46c0      	nop			; (mov r8, r8)
 801ca16:	46bd      	mov	sp, r7
 801ca18:	b004      	add	sp, #16
 801ca1a:	bd80      	pop	{r7, pc}
 801ca1c:	200019f4 	.word	0x200019f4

0801ca20 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b084      	sub	sp, #16
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ca28:	2300      	movs	r3, #0
 801ca2a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ca2c:	e00e      	b.n	801ca4c <ee_skip_atoi+0x2c>
 801ca2e:	68fa      	ldr	r2, [r7, #12]
 801ca30:	0013      	movs	r3, r2
 801ca32:	009b      	lsls	r3, r3, #2
 801ca34:	189b      	adds	r3, r3, r2
 801ca36:	005b      	lsls	r3, r3, #1
 801ca38:	0018      	movs	r0, r3
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	1c59      	adds	r1, r3, #1
 801ca40:	687a      	ldr	r2, [r7, #4]
 801ca42:	6011      	str	r1, [r2, #0]
 801ca44:	781b      	ldrb	r3, [r3, #0]
 801ca46:	18c3      	adds	r3, r0, r3
 801ca48:	3b30      	subs	r3, #48	; 0x30
 801ca4a:	60fb      	str	r3, [r7, #12]
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	781b      	ldrb	r3, [r3, #0]
 801ca52:	2b2f      	cmp	r3, #47	; 0x2f
 801ca54:	d904      	bls.n	801ca60 <ee_skip_atoi+0x40>
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	2b39      	cmp	r3, #57	; 0x39
 801ca5e:	d9e6      	bls.n	801ca2e <ee_skip_atoi+0xe>
  return i;
 801ca60:	68fb      	ldr	r3, [r7, #12]
}
 801ca62:	0018      	movs	r0, r3
 801ca64:	46bd      	mov	sp, r7
 801ca66:	b004      	add	sp, #16
 801ca68:	bd80      	pop	{r7, pc}
	...

0801ca6c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ca6c:	b580      	push	{r7, lr}
 801ca6e:	b098      	sub	sp, #96	; 0x60
 801ca70:	af00      	add	r7, sp, #0
 801ca72:	60f8      	str	r0, [r7, #12]
 801ca74:	60b9      	str	r1, [r7, #8]
 801ca76:	607a      	str	r2, [r7, #4]
 801ca78:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ca7a:	4b72      	ldr	r3, [pc, #456]	; (801cc44 <ee_number+0x1d8>)
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ca80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca82:	2240      	movs	r2, #64	; 0x40
 801ca84:	4013      	ands	r3, r2
 801ca86:	d002      	beq.n	801ca8e <ee_number+0x22>
 801ca88:	4b6f      	ldr	r3, [pc, #444]	; (801cc48 <ee_number+0x1dc>)
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ca8e:	683b      	ldr	r3, [r7, #0]
 801ca90:	2b01      	cmp	r3, #1
 801ca92:	dd02      	ble.n	801ca9a <ee_number+0x2e>
 801ca94:	683b      	ldr	r3, [r7, #0]
 801ca96:	2b24      	cmp	r3, #36	; 0x24
 801ca98:	dd01      	ble.n	801ca9e <ee_number+0x32>
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	e0cd      	b.n	801cc3a <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801ca9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801caa0:	2201      	movs	r2, #1
 801caa2:	4013      	ands	r3, r2
 801caa4:	d001      	beq.n	801caaa <ee_number+0x3e>
 801caa6:	2230      	movs	r2, #48	; 0x30
 801caa8:	e000      	b.n	801caac <ee_number+0x40>
 801caaa:	2220      	movs	r2, #32
 801caac:	2353      	movs	r3, #83	; 0x53
 801caae:	18fb      	adds	r3, r7, r3
 801cab0:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801cab2:	215f      	movs	r1, #95	; 0x5f
 801cab4:	187b      	adds	r3, r7, r1
 801cab6:	2200      	movs	r2, #0
 801cab8:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801caba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cabc:	2202      	movs	r2, #2
 801cabe:	4013      	ands	r3, r2
 801cac0:	d00b      	beq.n	801cada <ee_number+0x6e>
  {
    if (num < 0)
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	da08      	bge.n	801cada <ee_number+0x6e>
    {
      sign = '-';
 801cac8:	187b      	adds	r3, r7, r1
 801caca:	222d      	movs	r2, #45	; 0x2d
 801cacc:	701a      	strb	r2, [r3, #0]
      num = -num;
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	425b      	negs	r3, r3
 801cad2:	607b      	str	r3, [r7, #4]
      size--;
 801cad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cad6:	3b01      	subs	r3, #1
 801cad8:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801cada:	2300      	movs	r3, #0
 801cadc:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d120      	bne.n	801cb26 <ee_number+0xba>
    tmp[i++] = '0';
 801cae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cae6:	1c5a      	adds	r2, r3, #1
 801cae8:	657a      	str	r2, [r7, #84]	; 0x54
 801caea:	2210      	movs	r2, #16
 801caec:	18ba      	adds	r2, r7, r2
 801caee:	2130      	movs	r1, #48	; 0x30
 801caf0:	54d1      	strb	r1, [r2, r3]
 801caf2:	e01b      	b.n	801cb2c <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	683a      	ldr	r2, [r7, #0]
 801caf8:	0011      	movs	r1, r2
 801cafa:	0018      	movs	r0, r3
 801cafc:	f7e3 fb92 	bl	8000224 <__aeabi_uidivmod>
 801cb00:	000b      	movs	r3, r1
 801cb02:	001a      	movs	r2, r3
 801cb04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cb06:	189a      	adds	r2, r3, r2
 801cb08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb0a:	1c59      	adds	r1, r3, #1
 801cb0c:	6579      	str	r1, [r7, #84]	; 0x54
 801cb0e:	7811      	ldrb	r1, [r2, #0]
 801cb10:	2210      	movs	r2, #16
 801cb12:	18ba      	adds	r2, r7, r2
 801cb14:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	683a      	ldr	r2, [r7, #0]
 801cb1a:	0011      	movs	r1, r2
 801cb1c:	0018      	movs	r0, r3
 801cb1e:	f7e3 fafb 	bl	8000118 <__udivsi3>
 801cb22:	0003      	movs	r3, r0
 801cb24:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d1e3      	bne.n	801caf4 <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801cb2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cb2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cb30:	429a      	cmp	r2, r3
 801cb32:	dd01      	ble.n	801cb38 <ee_number+0xcc>
 801cb34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb36:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801cb38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cb3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cb3c:	1ad3      	subs	r3, r2, r3
 801cb3e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801cb40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cb42:	2201      	movs	r2, #1
 801cb44:	4013      	ands	r3, r2
 801cb46:	d112      	bne.n	801cb6e <ee_number+0x102>
 801cb48:	e00c      	b.n	801cb64 <ee_number+0xf8>
 801cb4a:	68fb      	ldr	r3, [r7, #12]
 801cb4c:	1c5a      	adds	r2, r3, #1
 801cb4e:	60fa      	str	r2, [r7, #12]
 801cb50:	2220      	movs	r2, #32
 801cb52:	701a      	strb	r2, [r3, #0]
 801cb54:	68bb      	ldr	r3, [r7, #8]
 801cb56:	3b01      	subs	r3, #1
 801cb58:	60bb      	str	r3, [r7, #8]
 801cb5a:	68bb      	ldr	r3, [r7, #8]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d101      	bne.n	801cb64 <ee_number+0xf8>
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	e06a      	b.n	801cc3a <ee_number+0x1ce>
 801cb64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cb66:	1e5a      	subs	r2, r3, #1
 801cb68:	66ba      	str	r2, [r7, #104]	; 0x68
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	dced      	bgt.n	801cb4a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801cb6e:	215f      	movs	r1, #95	; 0x5f
 801cb70:	187b      	adds	r3, r7, r1
 801cb72:	781b      	ldrb	r3, [r3, #0]
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d01c      	beq.n	801cbb2 <ee_number+0x146>
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	1c5a      	adds	r2, r3, #1
 801cb7c:	60fa      	str	r2, [r7, #12]
 801cb7e:	187a      	adds	r2, r7, r1
 801cb80:	7812      	ldrb	r2, [r2, #0]
 801cb82:	701a      	strb	r2, [r3, #0]
 801cb84:	68bb      	ldr	r3, [r7, #8]
 801cb86:	3b01      	subs	r3, #1
 801cb88:	60bb      	str	r3, [r7, #8]
 801cb8a:	68bb      	ldr	r3, [r7, #8]
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d110      	bne.n	801cbb2 <ee_number+0x146>
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	e052      	b.n	801cc3a <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	1c5a      	adds	r2, r3, #1
 801cb98:	60fa      	str	r2, [r7, #12]
 801cb9a:	2253      	movs	r2, #83	; 0x53
 801cb9c:	18ba      	adds	r2, r7, r2
 801cb9e:	7812      	ldrb	r2, [r2, #0]
 801cba0:	701a      	strb	r2, [r3, #0]
 801cba2:	68bb      	ldr	r3, [r7, #8]
 801cba4:	3b01      	subs	r3, #1
 801cba6:	60bb      	str	r3, [r7, #8]
 801cba8:	68bb      	ldr	r3, [r7, #8]
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d101      	bne.n	801cbb2 <ee_number+0x146>
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	e043      	b.n	801cc3a <ee_number+0x1ce>
 801cbb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cbb4:	1e5a      	subs	r2, r3, #1
 801cbb6:	66ba      	str	r2, [r7, #104]	; 0x68
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	dceb      	bgt.n	801cb94 <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801cbbc:	e00c      	b.n	801cbd8 <ee_number+0x16c>
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	1c5a      	adds	r2, r3, #1
 801cbc2:	60fa      	str	r2, [r7, #12]
 801cbc4:	2230      	movs	r2, #48	; 0x30
 801cbc6:	701a      	strb	r2, [r3, #0]
 801cbc8:	68bb      	ldr	r3, [r7, #8]
 801cbca:	3b01      	subs	r3, #1
 801cbcc:	60bb      	str	r3, [r7, #8]
 801cbce:	68bb      	ldr	r3, [r7, #8]
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d101      	bne.n	801cbd8 <ee_number+0x16c>
 801cbd4:	68fb      	ldr	r3, [r7, #12]
 801cbd6:	e030      	b.n	801cc3a <ee_number+0x1ce>
 801cbd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cbda:	1e5a      	subs	r2, r3, #1
 801cbdc:	66fa      	str	r2, [r7, #108]	; 0x6c
 801cbde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cbe0:	429a      	cmp	r2, r3
 801cbe2:	dbec      	blt.n	801cbbe <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801cbe4:	e010      	b.n	801cc08 <ee_number+0x19c>
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	1c5a      	adds	r2, r3, #1
 801cbea:	60fa      	str	r2, [r7, #12]
 801cbec:	2210      	movs	r2, #16
 801cbee:	18b9      	adds	r1, r7, r2
 801cbf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cbf2:	188a      	adds	r2, r1, r2
 801cbf4:	7812      	ldrb	r2, [r2, #0]
 801cbf6:	701a      	strb	r2, [r3, #0]
 801cbf8:	68bb      	ldr	r3, [r7, #8]
 801cbfa:	3b01      	subs	r3, #1
 801cbfc:	60bb      	str	r3, [r7, #8]
 801cbfe:	68bb      	ldr	r3, [r7, #8]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d101      	bne.n	801cc08 <ee_number+0x19c>
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	e018      	b.n	801cc3a <ee_number+0x1ce>
 801cc08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cc0a:	1e5a      	subs	r2, r3, #1
 801cc0c:	657a      	str	r2, [r7, #84]	; 0x54
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	dce9      	bgt.n	801cbe6 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801cc12:	e00c      	b.n	801cc2e <ee_number+0x1c2>
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	1c5a      	adds	r2, r3, #1
 801cc18:	60fa      	str	r2, [r7, #12]
 801cc1a:	2220      	movs	r2, #32
 801cc1c:	701a      	strb	r2, [r3, #0]
 801cc1e:	68bb      	ldr	r3, [r7, #8]
 801cc20:	3b01      	subs	r3, #1
 801cc22:	60bb      	str	r3, [r7, #8]
 801cc24:	68bb      	ldr	r3, [r7, #8]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d101      	bne.n	801cc2e <ee_number+0x1c2>
 801cc2a:	68fb      	ldr	r3, [r7, #12]
 801cc2c:	e005      	b.n	801cc3a <ee_number+0x1ce>
 801cc2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cc30:	1e5a      	subs	r2, r3, #1
 801cc32:	66ba      	str	r2, [r7, #104]	; 0x68
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	dced      	bgt.n	801cc14 <ee_number+0x1a8>

  return str;
 801cc38:	68fb      	ldr	r3, [r7, #12]
}
 801cc3a:	0018      	movs	r0, r3
 801cc3c:	46bd      	mov	sp, r7
 801cc3e:	b018      	add	sp, #96	; 0x60
 801cc40:	bd80      	pop	{r7, pc}
 801cc42:	46c0      	nop			; (mov r8, r8)
 801cc44:	20000214 	.word	0x20000214
 801cc48:	20000218 	.word	0x20000218

0801cc4c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801cc4c:	b590      	push	{r4, r7, lr}
 801cc4e:	b093      	sub	sp, #76	; 0x4c
 801cc50:	af04      	add	r7, sp, #16
 801cc52:	60f8      	str	r0, [r7, #12]
 801cc54:	60b9      	str	r1, [r7, #8]
 801cc56:	607a      	str	r2, [r7, #4]
 801cc58:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801cc5a:	68bb      	ldr	r3, [r7, #8]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	dc01      	bgt.n	801cc64 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801cc60:	2300      	movs	r3, #0
 801cc62:	e104      	b.n	801ce6e <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cc68:	e0ec      	b.n	801ce44 <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801cc6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	1ad2      	subs	r2, r2, r3
 801cc70:	68bb      	ldr	r3, [r7, #8]
 801cc72:	3b01      	subs	r3, #1
 801cc74:	429a      	cmp	r2, r3
 801cc76:	db00      	blt.n	801cc7a <tiny_vsnprintf_like+0x2e>
 801cc78:	e0f2      	b.n	801ce60 <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	781b      	ldrb	r3, [r3, #0]
 801cc7e:	2b25      	cmp	r3, #37	; 0x25
 801cc80:	d006      	beq.n	801cc90 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801cc82:	687a      	ldr	r2, [r7, #4]
 801cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc86:	1c59      	adds	r1, r3, #1
 801cc88:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cc8a:	7812      	ldrb	r2, [r2, #0]
 801cc8c:	701a      	strb	r2, [r3, #0]
      continue;
 801cc8e:	e0d6      	b.n	801ce3e <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801cc90:	2300      	movs	r3, #0
 801cc92:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	3301      	adds	r3, #1
 801cc98:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	781b      	ldrb	r3, [r3, #0]
 801cc9e:	2b30      	cmp	r3, #48	; 0x30
 801cca0:	d103      	bne.n	801ccaa <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801cca2:	6a3b      	ldr	r3, [r7, #32]
 801cca4:	2201      	movs	r2, #1
 801cca6:	4313      	orrs	r3, r2
 801cca8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801ccaa:	2301      	movs	r3, #1
 801ccac:	425b      	negs	r3, r3
 801ccae:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	781b      	ldrb	r3, [r3, #0]
 801ccb4:	2b2f      	cmp	r3, #47	; 0x2f
 801ccb6:	d909      	bls.n	801cccc <tiny_vsnprintf_like+0x80>
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	2b39      	cmp	r3, #57	; 0x39
 801ccbe:	d805      	bhi.n	801cccc <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801ccc0:	1d3b      	adds	r3, r7, #4
 801ccc2:	0018      	movs	r0, r3
 801ccc4:	f7ff feac 	bl	801ca20 <ee_skip_atoi>
 801ccc8:	0003      	movs	r3, r0
 801ccca:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801cccc:	2301      	movs	r3, #1
 801ccce:	425b      	negs	r3, r3
 801ccd0:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801ccd2:	2301      	movs	r3, #1
 801ccd4:	425b      	negs	r3, r3
 801ccd6:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801ccd8:	230a      	movs	r3, #10
 801ccda:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	781b      	ldrb	r3, [r3, #0]
 801cce0:	3b58      	subs	r3, #88	; 0x58
 801cce2:	2b20      	cmp	r3, #32
 801cce4:	d854      	bhi.n	801cd90 <tiny_vsnprintf_like+0x144>
 801cce6:	009a      	lsls	r2, r3, #2
 801cce8:	4b63      	ldr	r3, [pc, #396]	; (801ce78 <tiny_vsnprintf_like+0x22c>)
 801ccea:	18d3      	adds	r3, r2, r3
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccf2:	1c5a      	adds	r2, r3, #1
 801ccf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ccf6:	2220      	movs	r2, #32
 801ccf8:	701a      	strb	r2, [r3, #0]
 801ccfa:	69fb      	ldr	r3, [r7, #28]
 801ccfc:	3b01      	subs	r3, #1
 801ccfe:	61fb      	str	r3, [r7, #28]
 801cd00:	69fb      	ldr	r3, [r7, #28]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	dcf4      	bgt.n	801ccf0 <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801cd06:	683b      	ldr	r3, [r7, #0]
 801cd08:	1d1a      	adds	r2, r3, #4
 801cd0a:	603a      	str	r2, [r7, #0]
 801cd0c:	6819      	ldr	r1, [r3, #0]
 801cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd10:	1c5a      	adds	r2, r3, #1
 801cd12:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd14:	b2ca      	uxtb	r2, r1
 801cd16:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801cd18:	e091      	b.n	801ce3e <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801cd1a:	683b      	ldr	r3, [r7, #0]
 801cd1c:	1d1a      	adds	r2, r3, #4
 801cd1e:	603a      	str	r2, [r7, #0]
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d101      	bne.n	801cd2e <tiny_vsnprintf_like+0xe2>
 801cd2a:	4b54      	ldr	r3, [pc, #336]	; (801ce7c <tiny_vsnprintf_like+0x230>)
 801cd2c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd30:	0018      	movs	r0, r3
 801cd32:	f7e3 f9e9 	bl	8000108 <strlen>
 801cd36:	0003      	movs	r3, r0
 801cd38:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801cd3a:	e004      	b.n	801cd46 <tiny_vsnprintf_like+0xfa>
 801cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd3e:	1c5a      	adds	r2, r3, #1
 801cd40:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd42:	2220      	movs	r2, #32
 801cd44:	701a      	strb	r2, [r3, #0]
 801cd46:	69fb      	ldr	r3, [r7, #28]
 801cd48:	1e5a      	subs	r2, r3, #1
 801cd4a:	61fa      	str	r2, [r7, #28]
 801cd4c:	693a      	ldr	r2, [r7, #16]
 801cd4e:	429a      	cmp	r2, r3
 801cd50:	dbf4      	blt.n	801cd3c <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801cd52:	2300      	movs	r3, #0
 801cd54:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd56:	e00a      	b.n	801cd6e <tiny_vsnprintf_like+0x122>
 801cd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd5a:	1c53      	adds	r3, r2, #1
 801cd5c:	627b      	str	r3, [r7, #36]	; 0x24
 801cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd60:	1c59      	adds	r1, r3, #1
 801cd62:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cd64:	7812      	ldrb	r2, [r2, #0]
 801cd66:	701a      	strb	r2, [r3, #0]
 801cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd6a:	3301      	adds	r3, #1
 801cd6c:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cd70:	693b      	ldr	r3, [r7, #16]
 801cd72:	429a      	cmp	r2, r3
 801cd74:	dbf0      	blt.n	801cd58 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801cd76:	e062      	b.n	801ce3e <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801cd78:	6a3b      	ldr	r3, [r7, #32]
 801cd7a:	2240      	movs	r2, #64	; 0x40
 801cd7c:	4313      	orrs	r3, r2
 801cd7e:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801cd80:	2310      	movs	r3, #16
 801cd82:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801cd84:	e02d      	b.n	801cde2 <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801cd86:	6a3b      	ldr	r3, [r7, #32]
 801cd88:	2202      	movs	r2, #2
 801cd8a:	4313      	orrs	r3, r2
 801cd8c:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801cd8e:	e025      	b.n	801cddc <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	781b      	ldrb	r3, [r3, #0]
 801cd94:	2b25      	cmp	r3, #37	; 0x25
 801cd96:	d004      	beq.n	801cda2 <tiny_vsnprintf_like+0x156>
 801cd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd9a:	1c5a      	adds	r2, r3, #1
 801cd9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd9e:	2225      	movs	r2, #37	; 0x25
 801cda0:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801cda2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	1ad2      	subs	r2, r2, r3
 801cda8:	68bb      	ldr	r3, [r7, #8]
 801cdaa:	3b01      	subs	r3, #1
 801cdac:	429a      	cmp	r2, r3
 801cdae:	da17      	bge.n	801cde0 <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	781b      	ldrb	r3, [r3, #0]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d006      	beq.n	801cdc6 <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801cdb8:	687a      	ldr	r2, [r7, #4]
 801cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdbc:	1c59      	adds	r1, r3, #1
 801cdbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cdc0:	7812      	ldrb	r2, [r2, #0]
 801cdc2:	701a      	strb	r2, [r3, #0]
 801cdc4:	e002      	b.n	801cdcc <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	3b01      	subs	r3, #1
 801cdca:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801cdcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cdce:	68fb      	ldr	r3, [r7, #12]
 801cdd0:	1ad2      	subs	r2, r2, r3
 801cdd2:	68bb      	ldr	r3, [r7, #8]
 801cdd4:	3b01      	subs	r3, #1
 801cdd6:	429a      	cmp	r2, r3
 801cdd8:	db30      	blt.n	801ce3c <tiny_vsnprintf_like+0x1f0>
 801cdda:	e002      	b.n	801cde2 <tiny_vsnprintf_like+0x196>
        break;
 801cddc:	46c0      	nop			; (mov r8, r8)
 801cdde:	e000      	b.n	801cde2 <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801cde0:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801cde2:	697b      	ldr	r3, [r7, #20]
 801cde4:	2b6c      	cmp	r3, #108	; 0x6c
 801cde6:	d105      	bne.n	801cdf4 <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801cde8:	683b      	ldr	r3, [r7, #0]
 801cdea:	1d1a      	adds	r2, r3, #4
 801cdec:	603a      	str	r2, [r7, #0]
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	637b      	str	r3, [r7, #52]	; 0x34
 801cdf2:	e00e      	b.n	801ce12 <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801cdf4:	6a3b      	ldr	r3, [r7, #32]
 801cdf6:	2202      	movs	r2, #2
 801cdf8:	4013      	ands	r3, r2
 801cdfa:	d005      	beq.n	801ce08 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801cdfc:	683b      	ldr	r3, [r7, #0]
 801cdfe:	1d1a      	adds	r2, r3, #4
 801ce00:	603a      	str	r2, [r7, #0]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	637b      	str	r3, [r7, #52]	; 0x34
 801ce06:	e004      	b.n	801ce12 <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801ce08:	683b      	ldr	r3, [r7, #0]
 801ce0a:	1d1a      	adds	r2, r3, #4
 801ce0c:	603a      	str	r2, [r7, #0]
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ce12:	68bb      	ldr	r3, [r7, #8]
 801ce14:	1e5a      	subs	r2, r3, #1
 801ce16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	1acb      	subs	r3, r1, r3
 801ce1c:	1ad1      	subs	r1, r2, r3
 801ce1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ce20:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801ce22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ce24:	6a3b      	ldr	r3, [r7, #32]
 801ce26:	9302      	str	r3, [sp, #8]
 801ce28:	69bb      	ldr	r3, [r7, #24]
 801ce2a:	9301      	str	r3, [sp, #4]
 801ce2c:	69fb      	ldr	r3, [r7, #28]
 801ce2e:	9300      	str	r3, [sp, #0]
 801ce30:	0023      	movs	r3, r4
 801ce32:	f7ff fe1b 	bl	801ca6c <ee_number>
 801ce36:	0003      	movs	r3, r0
 801ce38:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ce3a:	e000      	b.n	801ce3e <tiny_vsnprintf_like+0x1f2>
        continue;
 801ce3c:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	3301      	adds	r3, #1
 801ce42:	607b      	str	r3, [r7, #4]
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	781b      	ldrb	r3, [r3, #0]
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d000      	beq.n	801ce4e <tiny_vsnprintf_like+0x202>
 801ce4c:	e70d      	b.n	801cc6a <tiny_vsnprintf_like+0x1e>
 801ce4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	1ad2      	subs	r2, r2, r3
 801ce54:	68bb      	ldr	r3, [r7, #8]
 801ce56:	3b01      	subs	r3, #1
 801ce58:	429a      	cmp	r2, r3
 801ce5a:	db00      	blt.n	801ce5e <tiny_vsnprintf_like+0x212>
 801ce5c:	e705      	b.n	801cc6a <tiny_vsnprintf_like+0x1e>
 801ce5e:	e000      	b.n	801ce62 <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801ce60:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce64:	2200      	movs	r2, #0
 801ce66:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801ce68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	1ad3      	subs	r3, r2, r3
}
 801ce6e:	0018      	movs	r0, r3
 801ce70:	46bd      	mov	sp, r7
 801ce72:	b00f      	add	sp, #60	; 0x3c
 801ce74:	bd90      	pop	{r4, r7, pc}
 801ce76:	46c0      	nop			; (mov r8, r8)
 801ce78:	0801ee50 	.word	0x0801ee50
 801ce7c:	0801ee48 	.word	0x0801ee48

0801ce80 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b082      	sub	sp, #8
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	2203      	movs	r2, #3
 801ce8c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	2200      	movs	r2, #0
 801ce92:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2203      	movs	r2, #3
 801ce98:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	2203      	movs	r2, #3
 801ce9e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	2203      	movs	r2, #3
 801cea4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	2203      	movs	r2, #3
 801ceaa:	715a      	strb	r2, [r3, #5]
}
 801ceac:	46c0      	nop			; (mov r8, r8)
 801ceae:	46bd      	mov	sp, r7
 801ceb0:	b002      	add	sp, #8
 801ceb2:	bd80      	pop	{r7, pc}

0801ceb4 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801ceb4:	b590      	push	{r4, r7, lr}
 801ceb6:	b08b      	sub	sp, #44	; 0x2c
 801ceb8:	af04      	add	r7, sp, #16
 801ceba:	60f8      	str	r0, [r7, #12]
 801cebc:	607a      	str	r2, [r7, #4]
 801cebe:	240b      	movs	r4, #11
 801cec0:	193b      	adds	r3, r7, r4
 801cec2:	1c0a      	adds	r2, r1, #0
 801cec4:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ceca:	2116      	movs	r1, #22
 801cecc:	187a      	adds	r2, r7, r1
 801cece:	18db      	adds	r3, r3, r3
 801ced0:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801ced6:	193b      	adds	r3, r7, r4
 801ced8:	781b      	ldrb	r3, [r3, #0]
 801ceda:	b29a      	uxth	r2, r3
 801cedc:	187b      	adds	r3, r7, r1
 801cede:	8819      	ldrh	r1, [r3, #0]
 801cee0:	4b0f      	ldr	r3, [pc, #60]	; (801cf20 <read_register16+0x6c>)
 801cee2:	9302      	str	r3, [sp, #8]
 801cee4:	2302      	movs	r3, #2
 801cee6:	9301      	str	r3, [sp, #4]
 801cee8:	2414      	movs	r4, #20
 801ceea:	193b      	adds	r3, r7, r4
 801ceec:	9300      	str	r3, [sp, #0]
 801ceee:	2301      	movs	r3, #1
 801cef0:	f7ea fbca 	bl	8007688 <HAL_I2C_Mem_Read>
 801cef4:	1e03      	subs	r3, r0, #0
 801cef6:	d10e      	bne.n	801cf16 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801cef8:	0021      	movs	r1, r4
 801cefa:	187b      	adds	r3, r7, r1
 801cefc:	785b      	ldrb	r3, [r3, #1]
 801cefe:	021b      	lsls	r3, r3, #8
 801cf00:	b21a      	sxth	r2, r3
 801cf02:	187b      	adds	r3, r7, r1
 801cf04:	781b      	ldrb	r3, [r3, #0]
 801cf06:	b21b      	sxth	r3, r3
 801cf08:	4313      	orrs	r3, r2
 801cf0a:	b21b      	sxth	r3, r3
 801cf0c:	b29a      	uxth	r2, r3
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	801a      	strh	r2, [r3, #0]
		return true;
 801cf12:	2301      	movs	r3, #1
 801cf14:	e000      	b.n	801cf18 <read_register16+0x64>
	} else
		return false;
 801cf16:	2300      	movs	r3, #0

}
 801cf18:	0018      	movs	r0, r3
 801cf1a:	46bd      	mov	sp, r7
 801cf1c:	b007      	add	sp, #28
 801cf1e:	bd90      	pop	{r4, r7, pc}
 801cf20:	00001388 	.word	0x00001388

0801cf24 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801cf24:	b5b0      	push	{r4, r5, r7, lr}
 801cf26:	b08a      	sub	sp, #40	; 0x28
 801cf28:	af04      	add	r7, sp, #16
 801cf2a:	60f8      	str	r0, [r7, #12]
 801cf2c:	0008      	movs	r0, r1
 801cf2e:	607a      	str	r2, [r7, #4]
 801cf30:	0019      	movs	r1, r3
 801cf32:	240b      	movs	r4, #11
 801cf34:	193b      	adds	r3, r7, r4
 801cf36:	1c02      	adds	r2, r0, #0
 801cf38:	701a      	strb	r2, [r3, #0]
 801cf3a:	250a      	movs	r5, #10
 801cf3c:	197b      	adds	r3, r7, r5
 801cf3e:	1c0a      	adds	r2, r1, #0
 801cf40:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cf46:	2116      	movs	r1, #22
 801cf48:	187a      	adds	r2, r7, r1
 801cf4a:	18db      	adds	r3, r3, r3
 801cf4c:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801cf52:	193b      	adds	r3, r7, r4
 801cf54:	781b      	ldrb	r3, [r3, #0]
 801cf56:	b29c      	uxth	r4, r3
 801cf58:	197b      	adds	r3, r7, r5
 801cf5a:	781b      	ldrb	r3, [r3, #0]
 801cf5c:	b29b      	uxth	r3, r3
 801cf5e:	187a      	adds	r2, r7, r1
 801cf60:	8811      	ldrh	r1, [r2, #0]
 801cf62:	4a09      	ldr	r2, [pc, #36]	; (801cf88 <read_data+0x64>)
 801cf64:	9202      	str	r2, [sp, #8]
 801cf66:	9301      	str	r3, [sp, #4]
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	9300      	str	r3, [sp, #0]
 801cf6c:	2301      	movs	r3, #1
 801cf6e:	0022      	movs	r2, r4
 801cf70:	f7ea fb8a 	bl	8007688 <HAL_I2C_Mem_Read>
 801cf74:	1e03      	subs	r3, r0, #0
 801cf76:	d101      	bne.n	801cf7c <read_data+0x58>
		return 0;
 801cf78:	2300      	movs	r3, #0
 801cf7a:	e000      	b.n	801cf7e <read_data+0x5a>
	else
		return 1;
 801cf7c:	2301      	movs	r3, #1

}
 801cf7e:	0018      	movs	r0, r3
 801cf80:	46bd      	mov	sp, r7
 801cf82:	b006      	add	sp, #24
 801cf84:	bdb0      	pop	{r4, r5, r7, pc}
 801cf86:	46c0      	nop			; (mov r8, r8)
 801cf88:	00001388 	.word	0x00001388

0801cf8c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b082      	sub	sp, #8
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801cf94:	687a      	ldr	r2, [r7, #4]
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	2188      	movs	r1, #136	; 0x88
 801cf9a:	0018      	movs	r0, r3
 801cf9c:	f7ff ff8a 	bl	801ceb4 <read_register16>
 801cfa0:	1e03      	subs	r3, r0, #0
 801cfa2:	d100      	bne.n	801cfa6 <read_calibration_data+0x1a>
 801cfa4:	e06d      	b.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	1c9a      	adds	r2, r3, #2
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	218a      	movs	r1, #138	; 0x8a
 801cfae:	0018      	movs	r0, r3
 801cfb0:	f7ff ff80 	bl	801ceb4 <read_register16>
 801cfb4:	1e03      	subs	r3, r0, #0
 801cfb6:	d100      	bne.n	801cfba <read_calibration_data+0x2e>
 801cfb8:	e063      	b.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	1d1a      	adds	r2, r3, #4
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	218c      	movs	r1, #140	; 0x8c
 801cfc2:	0018      	movs	r0, r3
 801cfc4:	f7ff ff76 	bl	801ceb4 <read_register16>
 801cfc8:	1e03      	subs	r3, r0, #0
 801cfca:	d05a      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	1d9a      	adds	r2, r3, #6
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	218e      	movs	r1, #142	; 0x8e
 801cfd4:	0018      	movs	r0, r3
 801cfd6:	f7ff ff6d 	bl	801ceb4 <read_register16>
 801cfda:	1e03      	subs	r3, r0, #0
 801cfdc:	d051      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	3308      	adds	r3, #8
 801cfe2:	001a      	movs	r2, r3
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	2190      	movs	r1, #144	; 0x90
 801cfe8:	0018      	movs	r0, r3
 801cfea:	f7ff ff63 	bl	801ceb4 <read_register16>
 801cfee:	1e03      	subs	r3, r0, #0
 801cff0:	d047      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	330a      	adds	r3, #10
 801cff6:	001a      	movs	r2, r3
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	2192      	movs	r1, #146	; 0x92
 801cffc:	0018      	movs	r0, r3
 801cffe:	f7ff ff59 	bl	801ceb4 <read_register16>
 801d002:	1e03      	subs	r3, r0, #0
 801d004:	d03d      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	330c      	adds	r3, #12
 801d00a:	001a      	movs	r2, r3
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	2194      	movs	r1, #148	; 0x94
 801d010:	0018      	movs	r0, r3
 801d012:	f7ff ff4f 	bl	801ceb4 <read_register16>
 801d016:	1e03      	subs	r3, r0, #0
 801d018:	d033      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	330e      	adds	r3, #14
 801d01e:	001a      	movs	r2, r3
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	2196      	movs	r1, #150	; 0x96
 801d024:	0018      	movs	r0, r3
 801d026:	f7ff ff45 	bl	801ceb4 <read_register16>
 801d02a:	1e03      	subs	r3, r0, #0
 801d02c:	d029      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	3310      	adds	r3, #16
 801d032:	001a      	movs	r2, r3
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	2198      	movs	r1, #152	; 0x98
 801d038:	0018      	movs	r0, r3
 801d03a:	f7ff ff3b 	bl	801ceb4 <read_register16>
 801d03e:	1e03      	subs	r3, r0, #0
 801d040:	d01f      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	3312      	adds	r3, #18
 801d046:	001a      	movs	r2, r3
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	219a      	movs	r1, #154	; 0x9a
 801d04c:	0018      	movs	r0, r3
 801d04e:	f7ff ff31 	bl	801ceb4 <read_register16>
 801d052:	1e03      	subs	r3, r0, #0
 801d054:	d015      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	3314      	adds	r3, #20
 801d05a:	001a      	movs	r2, r3
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	219c      	movs	r1, #156	; 0x9c
 801d060:	0018      	movs	r0, r3
 801d062:	f7ff ff27 	bl	801ceb4 <read_register16>
 801d066:	1e03      	subs	r3, r0, #0
 801d068:	d00b      	beq.n	801d082 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	3316      	adds	r3, #22
 801d06e:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	219e      	movs	r1, #158	; 0x9e
 801d074:	0018      	movs	r0, r3
 801d076:	f7ff ff1d 	bl	801ceb4 <read_register16>
 801d07a:	1e03      	subs	r3, r0, #0
 801d07c:	d001      	beq.n	801d082 <read_calibration_data+0xf6>

		return true;
 801d07e:	2301      	movs	r3, #1
 801d080:	e000      	b.n	801d084 <read_calibration_data+0xf8>
	}

	return false;
 801d082:	2300      	movs	r3, #0
}
 801d084:	0018      	movs	r0, r3
 801d086:	46bd      	mov	sp, r7
 801d088:	b002      	add	sp, #8
 801d08a:	bd80      	pop	{r7, pc}

0801d08c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d08c:	b5b0      	push	{r4, r5, r7, lr}
 801d08e:	b084      	sub	sp, #16
 801d090:	af00      	add	r7, sp, #0
 801d092:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	3318      	adds	r3, #24
 801d098:	001a      	movs	r2, r3
 801d09a:	6878      	ldr	r0, [r7, #4]
 801d09c:	2301      	movs	r3, #1
 801d09e:	21a1      	movs	r1, #161	; 0xa1
 801d0a0:	f7ff ff40 	bl	801cf24 <read_data>
 801d0a4:	1e03      	subs	r3, r0, #0
 801d0a6:	d14b      	bne.n	801d140 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	331a      	adds	r3, #26
 801d0ac:	001a      	movs	r2, r3
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	21e1      	movs	r1, #225	; 0xe1
 801d0b2:	0018      	movs	r0, r3
 801d0b4:	f7ff fefe 	bl	801ceb4 <read_register16>
 801d0b8:	1e03      	subs	r3, r0, #0
 801d0ba:	d041      	beq.n	801d140 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	331c      	adds	r3, #28
 801d0c0:	001a      	movs	r2, r3
 801d0c2:	6878      	ldr	r0, [r7, #4]
 801d0c4:	2301      	movs	r3, #1
 801d0c6:	21e3      	movs	r1, #227	; 0xe3
 801d0c8:	f7ff ff2c 	bl	801cf24 <read_data>
 801d0cc:	1e03      	subs	r3, r0, #0
 801d0ce:	d137      	bne.n	801d140 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801d0d0:	240e      	movs	r4, #14
 801d0d2:	193a      	adds	r2, r7, r4
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	21e4      	movs	r1, #228	; 0xe4
 801d0d8:	0018      	movs	r0, r3
 801d0da:	f7ff feeb 	bl	801ceb4 <read_register16>
 801d0de:	1e03      	subs	r3, r0, #0
 801d0e0:	d02e      	beq.n	801d140 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801d0e2:	250c      	movs	r5, #12
 801d0e4:	197a      	adds	r2, r7, r5
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	21e5      	movs	r1, #229	; 0xe5
 801d0ea:	0018      	movs	r0, r3
 801d0ec:	f7ff fee2 	bl	801ceb4 <read_register16>
 801d0f0:	1e03      	subs	r3, r0, #0
 801d0f2:	d025      	beq.n	801d140 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	3322      	adds	r3, #34	; 0x22
 801d0f8:	001a      	movs	r2, r3
 801d0fa:	6878      	ldr	r0, [r7, #4]
 801d0fc:	2301      	movs	r3, #1
 801d0fe:	21e7      	movs	r1, #231	; 0xe7
 801d100:	f7ff ff10 	bl	801cf24 <read_data>
 801d104:	1e03      	subs	r3, r0, #0
 801d106:	d11b      	bne.n	801d140 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d108:	193b      	adds	r3, r7, r4
 801d10a:	881b      	ldrh	r3, [r3, #0]
 801d10c:	011b      	lsls	r3, r3, #4
 801d10e:	b21a      	sxth	r2, r3
 801d110:	23ff      	movs	r3, #255	; 0xff
 801d112:	011b      	lsls	r3, r3, #4
 801d114:	4013      	ands	r3, r2
 801d116:	b21a      	sxth	r2, r3
 801d118:	193b      	adds	r3, r7, r4
 801d11a:	881b      	ldrh	r3, [r3, #0]
 801d11c:	121b      	asrs	r3, r3, #8
 801d11e:	b21b      	sxth	r3, r3
 801d120:	210f      	movs	r1, #15
 801d122:	400b      	ands	r3, r1
 801d124:	b21b      	sxth	r3, r3
 801d126:	4313      	orrs	r3, r2
 801d128:	b21a      	sxth	r2, r3
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d12e:	197b      	adds	r3, r7, r5
 801d130:	881b      	ldrh	r3, [r3, #0]
 801d132:	091b      	lsrs	r3, r3, #4
 801d134:	b29b      	uxth	r3, r3
 801d136:	b21a      	sxth	r2, r3
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	841a      	strh	r2, [r3, #32]

		return true;
 801d13c:	2301      	movs	r3, #1
 801d13e:	e000      	b.n	801d142 <read_hum_calibration_data+0xb6>
	}

	return false;
 801d140:	2300      	movs	r3, #0
}
 801d142:	0018      	movs	r0, r3
 801d144:	46bd      	mov	sp, r7
 801d146:	b004      	add	sp, #16
 801d148:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d14c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d14c:	b580      	push	{r7, lr}
 801d14e:	b088      	sub	sp, #32
 801d150:	af04      	add	r7, sp, #16
 801d152:	6078      	str	r0, [r7, #4]
 801d154:	0008      	movs	r0, r1
 801d156:	0011      	movs	r1, r2
 801d158:	1cfb      	adds	r3, r7, #3
 801d15a:	1c02      	adds	r2, r0, #0
 801d15c:	701a      	strb	r2, [r3, #0]
 801d15e:	1cbb      	adds	r3, r7, #2
 801d160:	1c0a      	adds	r2, r1, #0
 801d162:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d168:	210e      	movs	r1, #14
 801d16a:	187a      	adds	r2, r7, r1
 801d16c:	18db      	adds	r3, r3, r3
 801d16e:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d174:	1cfb      	adds	r3, r7, #3
 801d176:	781b      	ldrb	r3, [r3, #0]
 801d178:	b29a      	uxth	r2, r3
 801d17a:	187b      	adds	r3, r7, r1
 801d17c:	8819      	ldrh	r1, [r3, #0]
 801d17e:	4b09      	ldr	r3, [pc, #36]	; (801d1a4 <write_register8+0x58>)
 801d180:	9302      	str	r3, [sp, #8]
 801d182:	2301      	movs	r3, #1
 801d184:	9301      	str	r3, [sp, #4]
 801d186:	1cbb      	adds	r3, r7, #2
 801d188:	9300      	str	r3, [sp, #0]
 801d18a:	2301      	movs	r3, #1
 801d18c:	f7ea f94e 	bl	800742c <HAL_I2C_Mem_Write>
 801d190:	1e03      	subs	r3, r0, #0
 801d192:	d101      	bne.n	801d198 <write_register8+0x4c>
		return false;
 801d194:	2300      	movs	r3, #0
 801d196:	e000      	b.n	801d19a <write_register8+0x4e>
	else
		return true;
 801d198:	2301      	movs	r3, #1
}
 801d19a:	0018      	movs	r0, r3
 801d19c:	46bd      	mov	sp, r7
 801d19e:	b004      	add	sp, #16
 801d1a0:	bd80      	pop	{r7, pc}
 801d1a2:	46c0      	nop			; (mov r8, r8)
 801d1a4:	00002710 	.word	0x00002710

0801d1a8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d1a8:	b590      	push	{r4, r7, lr}
 801d1aa:	b085      	sub	sp, #20
 801d1ac:	af00      	add	r7, sp, #0
 801d1ae:	6078      	str	r0, [r7, #4]
 801d1b0:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d1b6:	2b76      	cmp	r3, #118	; 0x76
 801d1b8:	d005      	beq.n	801d1c6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d1be:	2b77      	cmp	r3, #119	; 0x77
 801d1c0:	d001      	beq.n	801d1c6 <bmp280_init+0x1e>

		return false;
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	e0a3      	b.n	801d30e <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	3332      	adds	r3, #50	; 0x32
 801d1ca:	001a      	movs	r2, r3
 801d1cc:	6878      	ldr	r0, [r7, #4]
 801d1ce:	2301      	movs	r3, #1
 801d1d0:	21d0      	movs	r1, #208	; 0xd0
 801d1d2:	f7ff fea7 	bl	801cf24 <read_data>
 801d1d6:	1e03      	subs	r3, r0, #0
 801d1d8:	d001      	beq.n	801d1de <bmp280_init+0x36>
		return false;
 801d1da:	2300      	movs	r3, #0
 801d1dc:	e097      	b.n	801d30e <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	2232      	movs	r2, #50	; 0x32
 801d1e2:	5c9b      	ldrb	r3, [r3, r2]
 801d1e4:	2b58      	cmp	r3, #88	; 0x58
 801d1e6:	d006      	beq.n	801d1f6 <bmp280_init+0x4e>
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	2232      	movs	r2, #50	; 0x32
 801d1ec:	5c9b      	ldrb	r3, [r3, r2]
 801d1ee:	2b60      	cmp	r3, #96	; 0x60
 801d1f0:	d001      	beq.n	801d1f6 <bmp280_init+0x4e>

		return false;
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	e08b      	b.n	801d30e <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	22b6      	movs	r2, #182	; 0xb6
 801d1fa:	21e0      	movs	r1, #224	; 0xe0
 801d1fc:	0018      	movs	r0, r3
 801d1fe:	f7ff ffa5 	bl	801d14c <write_register8>
 801d202:	1e03      	subs	r3, r0, #0
 801d204:	d001      	beq.n	801d20a <bmp280_init+0x62>
		return false;
 801d206:	2300      	movs	r3, #0
 801d208:	e081      	b.n	801d30e <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d20a:	240c      	movs	r4, #12
 801d20c:	193a      	adds	r2, r7, r4
 801d20e:	6878      	ldr	r0, [r7, #4]
 801d210:	2301      	movs	r3, #1
 801d212:	21f3      	movs	r1, #243	; 0xf3
 801d214:	f7ff fe86 	bl	801cf24 <read_data>
 801d218:	1e03      	subs	r3, r0, #0
 801d21a:	d1f6      	bne.n	801d20a <bmp280_init+0x62>
				&& (status & 1) == 0)
 801d21c:	193b      	adds	r3, r7, r4
 801d21e:	781b      	ldrb	r3, [r3, #0]
 801d220:	001a      	movs	r2, r3
 801d222:	2301      	movs	r3, #1
 801d224:	4013      	ands	r3, r2
 801d226:	d1f0      	bne.n	801d20a <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	0018      	movs	r0, r3
 801d22c:	f7ff feae 	bl	801cf8c <read_calibration_data>
 801d230:	0003      	movs	r3, r0
 801d232:	001a      	movs	r2, r3
 801d234:	2301      	movs	r3, #1
 801d236:	4053      	eors	r3, r2
 801d238:	b2db      	uxtb	r3, r3
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d100      	bne.n	801d240 <bmp280_init+0x98>
 801d23e:	e001      	b.n	801d244 <bmp280_init+0x9c>
		return false;
 801d240:	2300      	movs	r3, #0
 801d242:	e064      	b.n	801d30e <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	2232      	movs	r2, #50	; 0x32
 801d248:	5c9b      	ldrb	r3, [r3, r2]
 801d24a:	2b60      	cmp	r3, #96	; 0x60
 801d24c:	d10c      	bne.n	801d268 <bmp280_init+0xc0>
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	0018      	movs	r0, r3
 801d252:	f7ff ff1b 	bl	801d08c <read_hum_calibration_data>
 801d256:	0003      	movs	r3, r0
 801d258:	001a      	movs	r2, r3
 801d25a:	2301      	movs	r3, #1
 801d25c:	4053      	eors	r3, r2
 801d25e:	b2db      	uxtb	r3, r3
 801d260:	2b00      	cmp	r3, #0
 801d262:	d001      	beq.n	801d268 <bmp280_init+0xc0>
		return false;
 801d264:	2300      	movs	r3, #0
 801d266:	e052      	b.n	801d30e <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d268:	683b      	ldr	r3, [r7, #0]
 801d26a:	795b      	ldrb	r3, [r3, #5]
 801d26c:	015b      	lsls	r3, r3, #5
 801d26e:	b25a      	sxtb	r2, r3
 801d270:	683b      	ldr	r3, [r7, #0]
 801d272:	785b      	ldrb	r3, [r3, #1]
 801d274:	009b      	lsls	r3, r3, #2
 801d276:	b25b      	sxtb	r3, r3
 801d278:	4313      	orrs	r3, r2
 801d27a:	b25a      	sxtb	r2, r3
 801d27c:	210f      	movs	r1, #15
 801d27e:	187b      	adds	r3, r7, r1
 801d280:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d282:	187b      	adds	r3, r7, r1
 801d284:	781a      	ldrb	r2, [r3, #0]
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	21f5      	movs	r1, #245	; 0xf5
 801d28a:	0018      	movs	r0, r3
 801d28c:	f7ff ff5e 	bl	801d14c <write_register8>
 801d290:	1e03      	subs	r3, r0, #0
 801d292:	d001      	beq.n	801d298 <bmp280_init+0xf0>
		return false;
 801d294:	2300      	movs	r3, #0
 801d296:	e03a      	b.n	801d30e <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d298:	683b      	ldr	r3, [r7, #0]
 801d29a:	781b      	ldrb	r3, [r3, #0]
 801d29c:	2b01      	cmp	r3, #1
 801d29e:	d102      	bne.n	801d2a6 <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d2a0:	683b      	ldr	r3, [r7, #0]
 801d2a2:	2200      	movs	r2, #0
 801d2a4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d2a6:	683b      	ldr	r3, [r7, #0]
 801d2a8:	78db      	ldrb	r3, [r3, #3]
 801d2aa:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d2ac:	b25a      	sxtb	r2, r3
 801d2ae:	683b      	ldr	r3, [r7, #0]
 801d2b0:	789b      	ldrb	r3, [r3, #2]
 801d2b2:	009b      	lsls	r3, r3, #2
 801d2b4:	b25b      	sxtb	r3, r3
 801d2b6:	4313      	orrs	r3, r2
 801d2b8:	b25a      	sxtb	r2, r3
 801d2ba:	683b      	ldr	r3, [r7, #0]
 801d2bc:	781b      	ldrb	r3, [r3, #0]
 801d2be:	b25b      	sxtb	r3, r3
 801d2c0:	4313      	orrs	r3, r2
 801d2c2:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d2c4:	230e      	movs	r3, #14
 801d2c6:	18fb      	adds	r3, r7, r3
 801d2c8:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	2232      	movs	r2, #50	; 0x32
 801d2ce:	5c9b      	ldrb	r3, [r3, r2]
 801d2d0:	2b60      	cmp	r3, #96	; 0x60
 801d2d2:	d10f      	bne.n	801d2f4 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801d2d4:	210d      	movs	r1, #13
 801d2d6:	187b      	adds	r3, r7, r1
 801d2d8:	683a      	ldr	r2, [r7, #0]
 801d2da:	7912      	ldrb	r2, [r2, #4]
 801d2dc:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801d2de:	187b      	adds	r3, r7, r1
 801d2e0:	781a      	ldrb	r2, [r3, #0]
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	21f2      	movs	r1, #242	; 0xf2
 801d2e6:	0018      	movs	r0, r3
 801d2e8:	f7ff ff30 	bl	801d14c <write_register8>
 801d2ec:	1e03      	subs	r3, r0, #0
 801d2ee:	d001      	beq.n	801d2f4 <bmp280_init+0x14c>
			return false;
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	e00c      	b.n	801d30e <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801d2f4:	230e      	movs	r3, #14
 801d2f6:	18fb      	adds	r3, r7, r3
 801d2f8:	781a      	ldrb	r2, [r3, #0]
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	21f4      	movs	r1, #244	; 0xf4
 801d2fe:	0018      	movs	r0, r3
 801d300:	f7ff ff24 	bl	801d14c <write_register8>
 801d304:	1e03      	subs	r3, r0, #0
 801d306:	d001      	beq.n	801d30c <bmp280_init+0x164>
		return false;
 801d308:	2300      	movs	r3, #0
 801d30a:	e000      	b.n	801d30e <bmp280_init+0x166>
	}

	return true;
 801d30c:	2301      	movs	r3, #1
}
 801d30e:	0018      	movs	r0, r3
 801d310:	46bd      	mov	sp, r7
 801d312:	b005      	add	sp, #20
 801d314:	bd90      	pop	{r4, r7, pc}

0801d316 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801d316:	b580      	push	{r7, lr}
 801d318:	b086      	sub	sp, #24
 801d31a:	af00      	add	r7, sp, #0
 801d31c:	60f8      	str	r0, [r7, #12]
 801d31e:	60b9      	str	r1, [r7, #8]
 801d320:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d322:	68bb      	ldr	r3, [r7, #8]
 801d324:	10da      	asrs	r2, r3, #3
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	881b      	ldrh	r3, [r3, #0]
 801d32a:	005b      	lsls	r3, r3, #1
 801d32c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801d32e:	68fa      	ldr	r2, [r7, #12]
 801d330:	2102      	movs	r1, #2
 801d332:	5e52      	ldrsh	r2, [r2, r1]
 801d334:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d336:	12db      	asrs	r3, r3, #11
 801d338:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d33a:	68bb      	ldr	r3, [r7, #8]
 801d33c:	111b      	asrs	r3, r3, #4
 801d33e:	68fa      	ldr	r2, [r7, #12]
 801d340:	8812      	ldrh	r2, [r2, #0]
 801d342:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801d344:	68ba      	ldr	r2, [r7, #8]
 801d346:	1112      	asrs	r2, r2, #4
 801d348:	68f9      	ldr	r1, [r7, #12]
 801d34a:	8809      	ldrh	r1, [r1, #0]
 801d34c:	1a52      	subs	r2, r2, r1
 801d34e:	4353      	muls	r3, r2
 801d350:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801d352:	68fa      	ldr	r2, [r7, #12]
 801d354:	2104      	movs	r1, #4
 801d356:	5e52      	ldrsh	r2, [r2, r1]
 801d358:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d35a:	139b      	asrs	r3, r3, #14
 801d35c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801d35e:	697a      	ldr	r2, [r7, #20]
 801d360:	693b      	ldr	r3, [r7, #16]
 801d362:	18d2      	adds	r2, r2, r3
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	681a      	ldr	r2, [r3, #0]
 801d36c:	0013      	movs	r3, r2
 801d36e:	009b      	lsls	r3, r3, #2
 801d370:	189b      	adds	r3, r3, r2
 801d372:	3380      	adds	r3, #128	; 0x80
 801d374:	121b      	asrs	r3, r3, #8
}
 801d376:	0018      	movs	r0, r3
 801d378:	46bd      	mov	sp, r7
 801d37a:	b006      	add	sp, #24
 801d37c:	bd80      	pop	{r7, pc}
	...

0801d380 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801d380:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d382:	b0af      	sub	sp, #188	; 0xbc
 801d384:	af00      	add	r7, sp, #0
 801d386:	239c      	movs	r3, #156	; 0x9c
 801d388:	18fe      	adds	r6, r7, r3
 801d38a:	6030      	str	r0, [r6, #0]
 801d38c:	2098      	movs	r0, #152	; 0x98
 801d38e:	1838      	adds	r0, r7, r0
 801d390:	6001      	str	r1, [r0, #0]
 801d392:	2194      	movs	r1, #148	; 0x94
 801d394:	1878      	adds	r0, r7, r1
 801d396:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801d398:	187a      	adds	r2, r7, r1
 801d39a:	6813      	ldr	r3, [r2, #0]
 801d39c:	65bb      	str	r3, [r7, #88]	; 0x58
 801d39e:	17db      	asrs	r3, r3, #31
 801d3a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d3a2:	4ace      	ldr	r2, [pc, #824]	; (801d6dc <compensate_pressure+0x35c>)
 801d3a4:	2301      	movs	r3, #1
 801d3a6:	425b      	negs	r3, r3
 801d3a8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d3aa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801d3ac:	1880      	adds	r0, r0, r2
 801d3ae:	4159      	adcs	r1, r3
 801d3b0:	0002      	movs	r2, r0
 801d3b2:	000b      	movs	r3, r1
 801d3b4:	26b0      	movs	r6, #176	; 0xb0
 801d3b6:	19b9      	adds	r1, r7, r6
 801d3b8:	600a      	str	r2, [r1, #0]
 801d3ba:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801d3bc:	19ba      	adds	r2, r7, r6
 801d3be:	6853      	ldr	r3, [r2, #4]
 801d3c0:	6812      	ldr	r2, [r2, #0]
 801d3c2:	19b9      	adds	r1, r7, r6
 801d3c4:	6808      	ldr	r0, [r1, #0]
 801d3c6:	6849      	ldr	r1, [r1, #4]
 801d3c8:	f7e3 f89e 	bl	8000508 <__aeabi_lmul>
 801d3cc:	0002      	movs	r2, r0
 801d3ce:	000b      	movs	r3, r1
 801d3d0:	0010      	movs	r0, r2
 801d3d2:	0019      	movs	r1, r3
 801d3d4:	239c      	movs	r3, #156	; 0x9c
 801d3d6:	18fa      	adds	r2, r7, r3
 801d3d8:	6813      	ldr	r3, [r2, #0]
 801d3da:	2210      	movs	r2, #16
 801d3dc:	5e9b      	ldrsh	r3, [r3, r2]
 801d3de:	653b      	str	r3, [r7, #80]	; 0x50
 801d3e0:	17db      	asrs	r3, r3, #31
 801d3e2:	657b      	str	r3, [r7, #84]	; 0x54
 801d3e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d3e8:	f7e3 f88e 	bl	8000508 <__aeabi_lmul>
 801d3ec:	0002      	movs	r2, r0
 801d3ee:	000b      	movs	r3, r1
 801d3f0:	21a8      	movs	r1, #168	; 0xa8
 801d3f2:	1878      	adds	r0, r7, r1
 801d3f4:	6002      	str	r2, [r0, #0]
 801d3f6:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801d3f8:	239c      	movs	r3, #156	; 0x9c
 801d3fa:	18fa      	adds	r2, r7, r3
 801d3fc:	6813      	ldr	r3, [r2, #0]
 801d3fe:	220e      	movs	r2, #14
 801d400:	5e9b      	ldrsh	r3, [r3, r2]
 801d402:	64bb      	str	r3, [r7, #72]	; 0x48
 801d404:	17db      	asrs	r3, r3, #31
 801d406:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d408:	19ba      	adds	r2, r7, r6
 801d40a:	6853      	ldr	r3, [r2, #4]
 801d40c:	6812      	ldr	r2, [r2, #0]
 801d40e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d410:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d412:	f7e3 f879 	bl	8000508 <__aeabi_lmul>
 801d416:	0002      	movs	r2, r0
 801d418:	000b      	movs	r3, r1
 801d41a:	0bd1      	lsrs	r1, r2, #15
 801d41c:	045d      	lsls	r5, r3, #17
 801d41e:	430d      	orrs	r5, r1
 801d420:	0454      	lsls	r4, r2, #17
 801d422:	21a8      	movs	r1, #168	; 0xa8
 801d424:	187a      	adds	r2, r7, r1
 801d426:	6853      	ldr	r3, [r2, #4]
 801d428:	6812      	ldr	r2, [r2, #0]
 801d42a:	1912      	adds	r2, r2, r4
 801d42c:	416b      	adcs	r3, r5
 801d42e:	1878      	adds	r0, r7, r1
 801d430:	6002      	str	r2, [r0, #0]
 801d432:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801d434:	259c      	movs	r5, #156	; 0x9c
 801d436:	197b      	adds	r3, r7, r5
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	220c      	movs	r2, #12
 801d43c:	5e9b      	ldrsh	r3, [r3, r2]
 801d43e:	643b      	str	r3, [r7, #64]	; 0x40
 801d440:	17db      	asrs	r3, r3, #31
 801d442:	647b      	str	r3, [r7, #68]	; 0x44
 801d444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d446:	00db      	lsls	r3, r3, #3
 801d448:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d44a:	2300      	movs	r3, #0
 801d44c:	63bb      	str	r3, [r7, #56]	; 0x38
 801d44e:	000c      	movs	r4, r1
 801d450:	187b      	adds	r3, r7, r1
 801d452:	681a      	ldr	r2, [r3, #0]
 801d454:	685b      	ldr	r3, [r3, #4]
 801d456:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d45a:	1812      	adds	r2, r2, r0
 801d45c:	414b      	adcs	r3, r1
 801d45e:	1939      	adds	r1, r7, r4
 801d460:	600a      	str	r2, [r1, #0]
 801d462:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d464:	0034      	movs	r4, r6
 801d466:	193b      	adds	r3, r7, r4
 801d468:	681a      	ldr	r2, [r3, #0]
 801d46a:	685b      	ldr	r3, [r3, #4]
 801d46c:	1939      	adds	r1, r7, r4
 801d46e:	6808      	ldr	r0, [r1, #0]
 801d470:	6849      	ldr	r1, [r1, #4]
 801d472:	f7e3 f849 	bl	8000508 <__aeabi_lmul>
 801d476:	0002      	movs	r2, r0
 801d478:	000b      	movs	r3, r1
 801d47a:	0010      	movs	r0, r2
 801d47c:	0019      	movs	r1, r3
 801d47e:	197b      	adds	r3, r7, r5
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	220a      	movs	r2, #10
 801d484:	5e9b      	ldrsh	r3, [r3, r2]
 801d486:	633b      	str	r3, [r7, #48]	; 0x30
 801d488:	17db      	asrs	r3, r3, #31
 801d48a:	637b      	str	r3, [r7, #52]	; 0x34
 801d48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d490:	f7e3 f83a 	bl	8000508 <__aeabi_lmul>
 801d494:	0002      	movs	r2, r0
 801d496:	000b      	movs	r3, r1
 801d498:	0619      	lsls	r1, r3, #24
 801d49a:	468c      	mov	ip, r1
 801d49c:	0a10      	lsrs	r0, r2, #8
 801d49e:	2688      	movs	r6, #136	; 0x88
 801d4a0:	19b9      	adds	r1, r7, r6
 801d4a2:	6008      	str	r0, [r1, #0]
 801d4a4:	19b8      	adds	r0, r7, r6
 801d4a6:	6800      	ldr	r0, [r0, #0]
 801d4a8:	4661      	mov	r1, ip
 801d4aa:	4308      	orrs	r0, r1
 801d4ac:	19b9      	adds	r1, r7, r6
 801d4ae:	6008      	str	r0, [r1, #0]
 801d4b0:	121b      	asrs	r3, r3, #8
 801d4b2:	228c      	movs	r2, #140	; 0x8c
 801d4b4:	18ba      	adds	r2, r7, r2
 801d4b6:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801d4b8:	197b      	adds	r3, r7, r5
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	2208      	movs	r2, #8
 801d4be:	5e9b      	ldrsh	r3, [r3, r2]
 801d4c0:	62bb      	str	r3, [r7, #40]	; 0x28
 801d4c2:	17db      	asrs	r3, r3, #31
 801d4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d4c6:	193b      	adds	r3, r7, r4
 801d4c8:	681a      	ldr	r2, [r3, #0]
 801d4ca:	685b      	ldr	r3, [r3, #4]
 801d4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d4ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d4d0:	f7e3 f81a 	bl	8000508 <__aeabi_lmul>
 801d4d4:	0002      	movs	r2, r0
 801d4d6:	000b      	movs	r3, r1
 801d4d8:	0d11      	lsrs	r1, r2, #20
 801d4da:	468c      	mov	ip, r1
 801d4dc:	0318      	lsls	r0, r3, #12
 801d4de:	2184      	movs	r1, #132	; 0x84
 801d4e0:	1879      	adds	r1, r7, r1
 801d4e2:	6008      	str	r0, [r1, #0]
 801d4e4:	2084      	movs	r0, #132	; 0x84
 801d4e6:	1839      	adds	r1, r7, r0
 801d4e8:	6808      	ldr	r0, [r1, #0]
 801d4ea:	4661      	mov	r1, ip
 801d4ec:	4308      	orrs	r0, r1
 801d4ee:	2184      	movs	r1, #132	; 0x84
 801d4f0:	1879      	adds	r1, r7, r1
 801d4f2:	6008      	str	r0, [r1, #0]
 801d4f4:	0313      	lsls	r3, r2, #12
 801d4f6:	2180      	movs	r1, #128	; 0x80
 801d4f8:	187a      	adds	r2, r7, r1
 801d4fa:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d4fc:	19bb      	adds	r3, r7, r6
 801d4fe:	681a      	ldr	r2, [r3, #0]
 801d500:	685b      	ldr	r3, [r3, #4]
 801d502:	1879      	adds	r1, r7, r1
 801d504:	6808      	ldr	r0, [r1, #0]
 801d506:	6849      	ldr	r1, [r1, #4]
 801d508:	1812      	adds	r2, r2, r0
 801d50a:	414b      	adcs	r3, r1
 801d50c:	1939      	adds	r1, r7, r4
 801d50e:	600a      	str	r2, [r1, #0]
 801d510:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801d512:	193b      	adds	r3, r7, r4
 801d514:	6818      	ldr	r0, [r3, #0]
 801d516:	6859      	ldr	r1, [r3, #4]
 801d518:	2200      	movs	r2, #0
 801d51a:	2380      	movs	r3, #128	; 0x80
 801d51c:	021b      	lsls	r3, r3, #8
 801d51e:	1880      	adds	r0, r0, r2
 801d520:	4159      	adcs	r1, r3
 801d522:	197b      	adds	r3, r7, r5
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	88db      	ldrh	r3, [r3, #6]
 801d528:	623b      	str	r3, [r7, #32]
 801d52a:	2300      	movs	r3, #0
 801d52c:	627b      	str	r3, [r7, #36]	; 0x24
 801d52e:	6a3a      	ldr	r2, [r7, #32]
 801d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d532:	f7e2 ffe9 	bl	8000508 <__aeabi_lmul>
 801d536:	0002      	movs	r2, r0
 801d538:	000b      	movs	r3, r1
 801d53a:	1059      	asrs	r1, r3, #1
 801d53c:	1938      	adds	r0, r7, r4
 801d53e:	6001      	str	r1, [r0, #0]
 801d540:	17db      	asrs	r3, r3, #31
 801d542:	21b4      	movs	r1, #180	; 0xb4
 801d544:	187a      	adds	r2, r7, r1
 801d546:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801d548:	193b      	adds	r3, r7, r4
 801d54a:	681a      	ldr	r2, [r3, #0]
 801d54c:	187b      	adds	r3, r7, r1
 801d54e:	681b      	ldr	r3, [r3, #0]
 801d550:	431a      	orrs	r2, r3
 801d552:	d101      	bne.n	801d558 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801d554:	2300      	movs	r3, #0
 801d556:	e0bc      	b.n	801d6d2 <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801d558:	2398      	movs	r3, #152	; 0x98
 801d55a:	18fb      	adds	r3, r7, r3
 801d55c:	681a      	ldr	r2, [r3, #0]
 801d55e:	2380      	movs	r3, #128	; 0x80
 801d560:	035b      	lsls	r3, r3, #13
 801d562:	1a9b      	subs	r3, r3, r2
 801d564:	24a0      	movs	r4, #160	; 0xa0
 801d566:	193a      	adds	r2, r7, r4
 801d568:	6013      	str	r3, [r2, #0]
 801d56a:	17db      	asrs	r3, r3, #31
 801d56c:	25a4      	movs	r5, #164	; 0xa4
 801d56e:	197a      	adds	r2, r7, r5
 801d570:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801d572:	193b      	adds	r3, r7, r4
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	105b      	asrs	r3, r3, #1
 801d578:	61fb      	str	r3, [r7, #28]
 801d57a:	193b      	adds	r3, r7, r4
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	07db      	lsls	r3, r3, #31
 801d580:	61bb      	str	r3, [r7, #24]
 801d582:	20a8      	movs	r0, #168	; 0xa8
 801d584:	183a      	adds	r2, r7, r0
 801d586:	6853      	ldr	r3, [r2, #4]
 801d588:	6812      	ldr	r2, [r2, #0]
 801d58a:	69b8      	ldr	r0, [r7, #24]
 801d58c:	69f9      	ldr	r1, [r7, #28]
 801d58e:	1a80      	subs	r0, r0, r2
 801d590:	4199      	sbcs	r1, r3
 801d592:	4a53      	ldr	r2, [pc, #332]	; (801d6e0 <compensate_pressure+0x360>)
 801d594:	2300      	movs	r3, #0
 801d596:	f7e2 ffb7 	bl	8000508 <__aeabi_lmul>
 801d59a:	0002      	movs	r2, r0
 801d59c:	000b      	movs	r3, r1
 801d59e:	0010      	movs	r0, r2
 801d5a0:	0019      	movs	r1, r3
 801d5a2:	23b0      	movs	r3, #176	; 0xb0
 801d5a4:	18fa      	adds	r2, r7, r3
 801d5a6:	6853      	ldr	r3, [r2, #4]
 801d5a8:	6812      	ldr	r2, [r2, #0]
 801d5aa:	f7e2 ff69 	bl	8000480 <__aeabi_ldivmod>
 801d5ae:	0002      	movs	r2, r0
 801d5b0:	000b      	movs	r3, r1
 801d5b2:	1939      	adds	r1, r7, r4
 801d5b4:	600a      	str	r2, [r1, #0]
 801d5b6:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801d5b8:	269c      	movs	r6, #156	; 0x9c
 801d5ba:	19ba      	adds	r2, r7, r6
 801d5bc:	6813      	ldr	r3, [r2, #0]
 801d5be:	2216      	movs	r2, #22
 801d5c0:	5e9b      	ldrsh	r3, [r3, r2]
 801d5c2:	613b      	str	r3, [r7, #16]
 801d5c4:	17db      	asrs	r3, r3, #31
 801d5c6:	617b      	str	r3, [r7, #20]
 801d5c8:	197a      	adds	r2, r7, r5
 801d5ca:	6813      	ldr	r3, [r2, #0]
 801d5cc:	04da      	lsls	r2, r3, #19
 801d5ce:	1939      	adds	r1, r7, r4
 801d5d0:	680b      	ldr	r3, [r1, #0]
 801d5d2:	0b5b      	lsrs	r3, r3, #13
 801d5d4:	67bb      	str	r3, [r7, #120]	; 0x78
 801d5d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d5d8:	4313      	orrs	r3, r2
 801d5da:	67bb      	str	r3, [r7, #120]	; 0x78
 801d5dc:	197a      	adds	r2, r7, r5
 801d5de:	6813      	ldr	r3, [r2, #0]
 801d5e0:	135b      	asrs	r3, r3, #13
 801d5e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d5e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801d5e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d5e8:	6938      	ldr	r0, [r7, #16]
 801d5ea:	6979      	ldr	r1, [r7, #20]
 801d5ec:	f7e2 ff8c 	bl	8000508 <__aeabi_lmul>
 801d5f0:	0002      	movs	r2, r0
 801d5f2:	000b      	movs	r3, r1
 801d5f4:	0010      	movs	r0, r2
 801d5f6:	0019      	movs	r1, r3
 801d5f8:	197a      	adds	r2, r7, r5
 801d5fa:	6813      	ldr	r3, [r2, #0]
 801d5fc:	04da      	lsls	r2, r3, #19
 801d5fe:	193b      	adds	r3, r7, r4
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	0b5b      	lsrs	r3, r3, #13
 801d604:	673b      	str	r3, [r7, #112]	; 0x70
 801d606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d608:	4313      	orrs	r3, r2
 801d60a:	673b      	str	r3, [r7, #112]	; 0x70
 801d60c:	197a      	adds	r2, r7, r5
 801d60e:	6813      	ldr	r3, [r2, #0]
 801d610:	135b      	asrs	r3, r3, #13
 801d612:	677b      	str	r3, [r7, #116]	; 0x74
 801d614:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d618:	f7e2 ff76 	bl	8000508 <__aeabi_lmul>
 801d61c:	0002      	movs	r2, r0
 801d61e:	000b      	movs	r3, r1
 801d620:	01d9      	lsls	r1, r3, #7
 801d622:	0e50      	lsrs	r0, r2, #25
 801d624:	4301      	orrs	r1, r0
 801d626:	25b0      	movs	r5, #176	; 0xb0
 801d628:	1978      	adds	r0, r7, r5
 801d62a:	6001      	str	r1, [r0, #0]
 801d62c:	165b      	asrs	r3, r3, #25
 801d62e:	22b4      	movs	r2, #180	; 0xb4
 801d630:	18ba      	adds	r2, r7, r2
 801d632:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801d634:	19ba      	adds	r2, r7, r6
 801d636:	6813      	ldr	r3, [r2, #0]
 801d638:	2214      	movs	r2, #20
 801d63a:	5e9b      	ldrsh	r3, [r3, r2]
 801d63c:	60bb      	str	r3, [r7, #8]
 801d63e:	17db      	asrs	r3, r3, #31
 801d640:	60fb      	str	r3, [r7, #12]
 801d642:	193a      	adds	r2, r7, r4
 801d644:	6853      	ldr	r3, [r2, #4]
 801d646:	6812      	ldr	r2, [r2, #0]
 801d648:	68b8      	ldr	r0, [r7, #8]
 801d64a:	68f9      	ldr	r1, [r7, #12]
 801d64c:	f7e2 ff5c 	bl	8000508 <__aeabi_lmul>
 801d650:	0002      	movs	r2, r0
 801d652:	000b      	movs	r3, r1
 801d654:	0359      	lsls	r1, r3, #13
 801d656:	0cd0      	lsrs	r0, r2, #19
 801d658:	4301      	orrs	r1, r0
 801d65a:	20a8      	movs	r0, #168	; 0xa8
 801d65c:	1838      	adds	r0, r7, r0
 801d65e:	6001      	str	r1, [r0, #0]
 801d660:	14db      	asrs	r3, r3, #19
 801d662:	22ac      	movs	r2, #172	; 0xac
 801d664:	18ba      	adds	r2, r7, r2
 801d666:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801d668:	193a      	adds	r2, r7, r4
 801d66a:	6810      	ldr	r0, [r2, #0]
 801d66c:	6851      	ldr	r1, [r2, #4]
 801d66e:	197a      	adds	r2, r7, r5
 801d670:	6853      	ldr	r3, [r2, #4]
 801d672:	6812      	ldr	r2, [r2, #0]
 801d674:	1880      	adds	r0, r0, r2
 801d676:	4159      	adcs	r1, r3
 801d678:	23a8      	movs	r3, #168	; 0xa8
 801d67a:	18fb      	adds	r3, r7, r3
 801d67c:	681a      	ldr	r2, [r3, #0]
 801d67e:	685b      	ldr	r3, [r3, #4]
 801d680:	1812      	adds	r2, r2, r0
 801d682:	414b      	adcs	r3, r1
 801d684:	0619      	lsls	r1, r3, #24
 801d686:	0a10      	lsrs	r0, r2, #8
 801d688:	66b8      	str	r0, [r7, #104]	; 0x68
 801d68a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d68c:	4308      	orrs	r0, r1
 801d68e:	66b8      	str	r0, [r7, #104]	; 0x68
 801d690:	121b      	asrs	r3, r3, #8
 801d692:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d694:	19bb      	adds	r3, r7, r6
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	2212      	movs	r2, #18
 801d69a:	5e9b      	ldrsh	r3, [r3, r2]
 801d69c:	603b      	str	r3, [r7, #0]
 801d69e:	17db      	asrs	r3, r3, #31
 801d6a0:	607b      	str	r3, [r7, #4]
 801d6a2:	6839      	ldr	r1, [r7, #0]
 801d6a4:	687a      	ldr	r2, [r7, #4]
 801d6a6:	000b      	movs	r3, r1
 801d6a8:	0f1b      	lsrs	r3, r3, #28
 801d6aa:	0010      	movs	r0, r2
 801d6ac:	0100      	lsls	r0, r0, #4
 801d6ae:	6678      	str	r0, [r7, #100]	; 0x64
 801d6b0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d6b2:	4318      	orrs	r0, r3
 801d6b4:	6678      	str	r0, [r7, #100]	; 0x64
 801d6b6:	000b      	movs	r3, r1
 801d6b8:	011b      	lsls	r3, r3, #4
 801d6ba:	663b      	str	r3, [r7, #96]	; 0x60
 801d6bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d6be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d6c0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d6c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d6c4:	1812      	adds	r2, r2, r0
 801d6c6:	414b      	adcs	r3, r1
 801d6c8:	1939      	adds	r1, r7, r4
 801d6ca:	600a      	str	r2, [r1, #0]
 801d6cc:	604b      	str	r3, [r1, #4]
	return p;
 801d6ce:	193b      	adds	r3, r7, r4
 801d6d0:	681b      	ldr	r3, [r3, #0]
}
 801d6d2:	0018      	movs	r0, r3
 801d6d4:	46bd      	mov	sp, r7
 801d6d6:	b02f      	add	sp, #188	; 0xbc
 801d6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6da:	46c0      	nop			; (mov r8, r8)
 801d6dc:	fffe0c00 	.word	0xfffe0c00
 801d6e0:	00000c35 	.word	0x00000c35

0801d6e4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801d6e4:	b580      	push	{r7, lr}
 801d6e6:	b086      	sub	sp, #24
 801d6e8:	af00      	add	r7, sp, #0
 801d6ea:	60f8      	str	r0, [r7, #12]
 801d6ec:	60b9      	str	r1, [r7, #8]
 801d6ee:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	4a2c      	ldr	r2, [pc, #176]	; (801d7a4 <compensate_humidity+0xc0>)
 801d6f4:	4694      	mov	ip, r2
 801d6f6:	4463      	add	r3, ip
 801d6f8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801d6fa:	68bb      	ldr	r3, [r7, #8]
 801d6fc:	039a      	lsls	r2, r3, #14
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	211e      	movs	r1, #30
 801d702:	5e5b      	ldrsh	r3, [r3, r1]
 801d704:	051b      	lsls	r3, r3, #20
 801d706:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	2120      	movs	r1, #32
 801d70c:	5e5b      	ldrsh	r3, [r3, r1]
 801d70e:	0019      	movs	r1, r3
 801d710:	697b      	ldr	r3, [r7, #20]
 801d712:	434b      	muls	r3, r1
 801d714:	1ad3      	subs	r3, r2, r3
 801d716:	2280      	movs	r2, #128	; 0x80
 801d718:	01d2      	lsls	r2, r2, #7
 801d71a:	4694      	mov	ip, r2
 801d71c:	4463      	add	r3, ip
 801d71e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801d720:	68fa      	ldr	r2, [r7, #12]
 801d722:	2122      	movs	r1, #34	; 0x22
 801d724:	5652      	ldrsb	r2, [r2, r1]
 801d726:	0011      	movs	r1, r2
 801d728:	697a      	ldr	r2, [r7, #20]
 801d72a:	434a      	muls	r2, r1
 801d72c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801d72e:	68f9      	ldr	r1, [r7, #12]
 801d730:	7f09      	ldrb	r1, [r1, #28]
 801d732:	0008      	movs	r0, r1
 801d734:	6979      	ldr	r1, [r7, #20]
 801d736:	4341      	muls	r1, r0
 801d738:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801d73a:	2080      	movs	r0, #128	; 0x80
 801d73c:	0200      	lsls	r0, r0, #8
 801d73e:	4684      	mov	ip, r0
 801d740:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801d742:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801d744:	1292      	asrs	r2, r2, #10
 801d746:	2180      	movs	r1, #128	; 0x80
 801d748:	0389      	lsls	r1, r1, #14
 801d74a:	468c      	mov	ip, r1
 801d74c:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801d74e:	68f9      	ldr	r1, [r7, #12]
 801d750:	201a      	movs	r0, #26
 801d752:	5e09      	ldrsh	r1, [r1, r0]
 801d754:	434a      	muls	r2, r1
 801d756:	2180      	movs	r1, #128	; 0x80
 801d758:	0189      	lsls	r1, r1, #6
 801d75a:	468c      	mov	ip, r1
 801d75c:	4462      	add	r2, ip
 801d75e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801d760:	4353      	muls	r3, r2
 801d762:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801d764:	697b      	ldr	r3, [r7, #20]
 801d766:	13db      	asrs	r3, r3, #15
 801d768:	697a      	ldr	r2, [r7, #20]
 801d76a:	13d2      	asrs	r2, r2, #15
 801d76c:	4353      	muls	r3, r2
 801d76e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801d770:	68fa      	ldr	r2, [r7, #12]
 801d772:	7e12      	ldrb	r2, [r2, #24]
 801d774:	4353      	muls	r3, r2
 801d776:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801d778:	697a      	ldr	r2, [r7, #20]
 801d77a:	1ad3      	subs	r3, r2, r3
 801d77c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801d77e:	697b      	ldr	r3, [r7, #20]
 801d780:	2b00      	cmp	r3, #0
 801d782:	da00      	bge.n	801d786 <compensate_humidity+0xa2>
 801d784:	2300      	movs	r3, #0
 801d786:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801d788:	697b      	ldr	r3, [r7, #20]
 801d78a:	22c8      	movs	r2, #200	; 0xc8
 801d78c:	0552      	lsls	r2, r2, #21
 801d78e:	4293      	cmp	r3, r2
 801d790:	dd01      	ble.n	801d796 <compensate_humidity+0xb2>
 801d792:	23c8      	movs	r3, #200	; 0xc8
 801d794:	055b      	lsls	r3, r3, #21
 801d796:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801d798:	697b      	ldr	r3, [r7, #20]
 801d79a:	131b      	asrs	r3, r3, #12
}
 801d79c:	0018      	movs	r0, r3
 801d79e:	46bd      	mov	sp, r7
 801d7a0:	b006      	add	sp, #24
 801d7a2:	bd80      	pop	{r7, pc}
 801d7a4:	fffed400 	.word	0xfffed400

0801d7a8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801d7a8:	b590      	push	{r4, r7, lr}
 801d7aa:	b08d      	sub	sp, #52	; 0x34
 801d7ac:	af00      	add	r7, sp, #0
 801d7ae:	60f8      	str	r0, [r7, #12]
 801d7b0:	60b9      	str	r1, [r7, #8]
 801d7b2:	607a      	str	r2, [r7, #4]
 801d7b4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801d7b6:	68fb      	ldr	r3, [r7, #12]
 801d7b8:	2232      	movs	r2, #50	; 0x32
 801d7ba:	5c9b      	ldrb	r3, [r3, r2]
 801d7bc:	2b60      	cmp	r3, #96	; 0x60
 801d7be:	d007      	beq.n	801d7d0 <bmp280_read_fixed+0x28>
		if (humidity)
 801d7c0:	683b      	ldr	r3, [r7, #0]
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d002      	beq.n	801d7cc <bmp280_read_fixed+0x24>
			*humidity = 0;
 801d7c6:	683b      	ldr	r3, [r7, #0]
 801d7c8:	2200      	movs	r2, #0
 801d7ca:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801d7cc:	2300      	movs	r3, #0
 801d7ce:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801d7d0:	683b      	ldr	r3, [r7, #0]
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d001      	beq.n	801d7da <bmp280_read_fixed+0x32>
 801d7d6:	2308      	movs	r3, #8
 801d7d8:	e000      	b.n	801d7dc <bmp280_read_fixed+0x34>
 801d7da:	2306      	movs	r3, #6
 801d7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801d7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7e0:	b2db      	uxtb	r3, r3
 801d7e2:	2218      	movs	r2, #24
 801d7e4:	18ba      	adds	r2, r7, r2
 801d7e6:	68f8      	ldr	r0, [r7, #12]
 801d7e8:	21f7      	movs	r1, #247	; 0xf7
 801d7ea:	f7ff fb9b 	bl	801cf24 <read_data>
 801d7ee:	1e03      	subs	r3, r0, #0
 801d7f0:	d001      	beq.n	801d7f6 <bmp280_read_fixed+0x4e>
		return false;
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	e041      	b.n	801d87a <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801d7f6:	2418      	movs	r4, #24
 801d7f8:	193b      	adds	r3, r7, r4
 801d7fa:	781b      	ldrb	r3, [r3, #0]
 801d7fc:	031a      	lsls	r2, r3, #12
 801d7fe:	193b      	adds	r3, r7, r4
 801d800:	785b      	ldrb	r3, [r3, #1]
 801d802:	011b      	lsls	r3, r3, #4
 801d804:	4313      	orrs	r3, r2
 801d806:	193a      	adds	r2, r7, r4
 801d808:	7892      	ldrb	r2, [r2, #2]
 801d80a:	0912      	lsrs	r2, r2, #4
 801d80c:	b2d2      	uxtb	r2, r2
 801d80e:	4313      	orrs	r3, r2
 801d810:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801d812:	193b      	adds	r3, r7, r4
 801d814:	78db      	ldrb	r3, [r3, #3]
 801d816:	031a      	lsls	r2, r3, #12
 801d818:	193b      	adds	r3, r7, r4
 801d81a:	791b      	ldrb	r3, [r3, #4]
 801d81c:	011b      	lsls	r3, r3, #4
 801d81e:	4313      	orrs	r3, r2
 801d820:	193a      	adds	r2, r7, r4
 801d822:	7952      	ldrb	r2, [r2, #5]
 801d824:	0912      	lsrs	r2, r2, #4
 801d826:	b2d2      	uxtb	r2, r2
 801d828:	4313      	orrs	r3, r2
 801d82a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801d82c:	2314      	movs	r3, #20
 801d82e:	18fa      	adds	r2, r7, r3
 801d830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	0018      	movs	r0, r3
 801d836:	f7ff fd6e 	bl	801d316 <compensate_temperature>
 801d83a:	0002      	movs	r2, r0
 801d83c:	68bb      	ldr	r3, [r7, #8]
 801d83e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801d840:	697a      	ldr	r2, [r7, #20]
 801d842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	0018      	movs	r0, r3
 801d848:	f7ff fd9a 	bl	801d380 <compensate_pressure>
 801d84c:	0002      	movs	r2, r0
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801d852:	683b      	ldr	r3, [r7, #0]
 801d854:	2b00      	cmp	r3, #0
 801d856:	d00f      	beq.n	801d878 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801d858:	193b      	adds	r3, r7, r4
 801d85a:	799b      	ldrb	r3, [r3, #6]
 801d85c:	021b      	lsls	r3, r3, #8
 801d85e:	193a      	adds	r2, r7, r4
 801d860:	79d2      	ldrb	r2, [r2, #7]
 801d862:	4313      	orrs	r3, r2
 801d864:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801d866:	697a      	ldr	r2, [r7, #20]
 801d868:	6a39      	ldr	r1, [r7, #32]
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	0018      	movs	r0, r3
 801d86e:	f7ff ff39 	bl	801d6e4 <compensate_humidity>
 801d872:	0002      	movs	r2, r0
 801d874:	683b      	ldr	r3, [r7, #0]
 801d876:	601a      	str	r2, [r3, #0]
	}

	return true;
 801d878:	2301      	movs	r3, #1
}
 801d87a:	0018      	movs	r0, r3
 801d87c:	46bd      	mov	sp, r7
 801d87e:	b00d      	add	sp, #52	; 0x34
 801d880:	bd90      	pop	{r4, r7, pc}
	...

0801d884 <__libc_init_array>:
 801d884:	b570      	push	{r4, r5, r6, lr}
 801d886:	2600      	movs	r6, #0
 801d888:	4d0c      	ldr	r5, [pc, #48]	; (801d8bc <__libc_init_array+0x38>)
 801d88a:	4c0d      	ldr	r4, [pc, #52]	; (801d8c0 <__libc_init_array+0x3c>)
 801d88c:	1b64      	subs	r4, r4, r5
 801d88e:	10a4      	asrs	r4, r4, #2
 801d890:	42a6      	cmp	r6, r4
 801d892:	d109      	bne.n	801d8a8 <__libc_init_array+0x24>
 801d894:	2600      	movs	r6, #0
 801d896:	f000 f8b5 	bl	801da04 <_init>
 801d89a:	4d0a      	ldr	r5, [pc, #40]	; (801d8c4 <__libc_init_array+0x40>)
 801d89c:	4c0a      	ldr	r4, [pc, #40]	; (801d8c8 <__libc_init_array+0x44>)
 801d89e:	1b64      	subs	r4, r4, r5
 801d8a0:	10a4      	asrs	r4, r4, #2
 801d8a2:	42a6      	cmp	r6, r4
 801d8a4:	d105      	bne.n	801d8b2 <__libc_init_array+0x2e>
 801d8a6:	bd70      	pop	{r4, r5, r6, pc}
 801d8a8:	00b3      	lsls	r3, r6, #2
 801d8aa:	58eb      	ldr	r3, [r5, r3]
 801d8ac:	4798      	blx	r3
 801d8ae:	3601      	adds	r6, #1
 801d8b0:	e7ee      	b.n	801d890 <__libc_init_array+0xc>
 801d8b2:	00b3      	lsls	r3, r6, #2
 801d8b4:	58eb      	ldr	r3, [r5, r3]
 801d8b6:	4798      	blx	r3
 801d8b8:	3601      	adds	r6, #1
 801d8ba:	e7f2      	b.n	801d8a2 <__libc_init_array+0x1e>
 801d8bc:	0801ef5c 	.word	0x0801ef5c
 801d8c0:	0801ef5c 	.word	0x0801ef5c
 801d8c4:	0801ef5c 	.word	0x0801ef5c
 801d8c8:	0801ef60 	.word	0x0801ef60

0801d8cc <memcpy>:
 801d8cc:	2300      	movs	r3, #0
 801d8ce:	b510      	push	{r4, lr}
 801d8d0:	429a      	cmp	r2, r3
 801d8d2:	d100      	bne.n	801d8d6 <memcpy+0xa>
 801d8d4:	bd10      	pop	{r4, pc}
 801d8d6:	5ccc      	ldrb	r4, [r1, r3]
 801d8d8:	54c4      	strb	r4, [r0, r3]
 801d8da:	3301      	adds	r3, #1
 801d8dc:	e7f8      	b.n	801d8d0 <memcpy+0x4>

0801d8de <memset>:
 801d8de:	0003      	movs	r3, r0
 801d8e0:	1882      	adds	r2, r0, r2
 801d8e2:	4293      	cmp	r3, r2
 801d8e4:	d100      	bne.n	801d8e8 <memset+0xa>
 801d8e6:	4770      	bx	lr
 801d8e8:	7019      	strb	r1, [r3, #0]
 801d8ea:	3301      	adds	r3, #1
 801d8ec:	e7f9      	b.n	801d8e2 <memset+0x4>
	...

0801d8f0 <floor>:
 801d8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d8f2:	004b      	lsls	r3, r1, #1
 801d8f4:	4a3d      	ldr	r2, [pc, #244]	; (801d9ec <floor+0xfc>)
 801d8f6:	0d5b      	lsrs	r3, r3, #21
 801d8f8:	189f      	adds	r7, r3, r2
 801d8fa:	4684      	mov	ip, r0
 801d8fc:	000e      	movs	r6, r1
 801d8fe:	000d      	movs	r5, r1
 801d900:	0004      	movs	r4, r0
 801d902:	9001      	str	r0, [sp, #4]
 801d904:	2f13      	cmp	r7, #19
 801d906:	dc34      	bgt.n	801d972 <floor+0x82>
 801d908:	2f00      	cmp	r7, #0
 801d90a:	da16      	bge.n	801d93a <floor+0x4a>
 801d90c:	4a38      	ldr	r2, [pc, #224]	; (801d9f0 <floor+0x100>)
 801d90e:	4b39      	ldr	r3, [pc, #228]	; (801d9f4 <floor+0x104>)
 801d910:	4660      	mov	r0, ip
 801d912:	0031      	movs	r1, r6
 801d914:	f7e3 f91e 	bl	8000b54 <__aeabi_dadd>
 801d918:	2200      	movs	r2, #0
 801d91a:	2300      	movs	r3, #0
 801d91c:	f7e2 fd9c 	bl	8000458 <__aeabi_dcmpgt>
 801d920:	2800      	cmp	r0, #0
 801d922:	d007      	beq.n	801d934 <floor+0x44>
 801d924:	2e00      	cmp	r6, #0
 801d926:	da5d      	bge.n	801d9e4 <floor+0xf4>
 801d928:	0073      	lsls	r3, r6, #1
 801d92a:	085b      	lsrs	r3, r3, #1
 801d92c:	431c      	orrs	r4, r3
 801d92e:	d001      	beq.n	801d934 <floor+0x44>
 801d930:	2400      	movs	r4, #0
 801d932:	4d31      	ldr	r5, [pc, #196]	; (801d9f8 <floor+0x108>)
 801d934:	46a4      	mov	ip, r4
 801d936:	002e      	movs	r6, r5
 801d938:	e029      	b.n	801d98e <floor+0x9e>
 801d93a:	4b30      	ldr	r3, [pc, #192]	; (801d9fc <floor+0x10c>)
 801d93c:	413b      	asrs	r3, r7
 801d93e:	9300      	str	r3, [sp, #0]
 801d940:	400b      	ands	r3, r1
 801d942:	4303      	orrs	r3, r0
 801d944:	d023      	beq.n	801d98e <floor+0x9e>
 801d946:	4a2a      	ldr	r2, [pc, #168]	; (801d9f0 <floor+0x100>)
 801d948:	4b2a      	ldr	r3, [pc, #168]	; (801d9f4 <floor+0x104>)
 801d94a:	4660      	mov	r0, ip
 801d94c:	0031      	movs	r1, r6
 801d94e:	f7e3 f901 	bl	8000b54 <__aeabi_dadd>
 801d952:	2200      	movs	r2, #0
 801d954:	2300      	movs	r3, #0
 801d956:	f7e2 fd7f 	bl	8000458 <__aeabi_dcmpgt>
 801d95a:	2800      	cmp	r0, #0
 801d95c:	d0ea      	beq.n	801d934 <floor+0x44>
 801d95e:	2e00      	cmp	r6, #0
 801d960:	da03      	bge.n	801d96a <floor+0x7a>
 801d962:	2380      	movs	r3, #128	; 0x80
 801d964:	035b      	lsls	r3, r3, #13
 801d966:	413b      	asrs	r3, r7
 801d968:	18f5      	adds	r5, r6, r3
 801d96a:	9b00      	ldr	r3, [sp, #0]
 801d96c:	2400      	movs	r4, #0
 801d96e:	439d      	bics	r5, r3
 801d970:	e7e0      	b.n	801d934 <floor+0x44>
 801d972:	2f33      	cmp	r7, #51	; 0x33
 801d974:	dd0f      	ble.n	801d996 <floor+0xa6>
 801d976:	2380      	movs	r3, #128	; 0x80
 801d978:	00db      	lsls	r3, r3, #3
 801d97a:	429f      	cmp	r7, r3
 801d97c:	d107      	bne.n	801d98e <floor+0x9e>
 801d97e:	0002      	movs	r2, r0
 801d980:	000b      	movs	r3, r1
 801d982:	4660      	mov	r0, ip
 801d984:	0031      	movs	r1, r6
 801d986:	f7e3 f8e5 	bl	8000b54 <__aeabi_dadd>
 801d98a:	4684      	mov	ip, r0
 801d98c:	000e      	movs	r6, r1
 801d98e:	4660      	mov	r0, ip
 801d990:	0031      	movs	r1, r6
 801d992:	b003      	add	sp, #12
 801d994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d996:	4a1a      	ldr	r2, [pc, #104]	; (801da00 <floor+0x110>)
 801d998:	189b      	adds	r3, r3, r2
 801d99a:	2201      	movs	r2, #1
 801d99c:	4252      	negs	r2, r2
 801d99e:	40da      	lsrs	r2, r3
 801d9a0:	9200      	str	r2, [sp, #0]
 801d9a2:	4210      	tst	r0, r2
 801d9a4:	d0f3      	beq.n	801d98e <floor+0x9e>
 801d9a6:	4a12      	ldr	r2, [pc, #72]	; (801d9f0 <floor+0x100>)
 801d9a8:	4b12      	ldr	r3, [pc, #72]	; (801d9f4 <floor+0x104>)
 801d9aa:	4660      	mov	r0, ip
 801d9ac:	0031      	movs	r1, r6
 801d9ae:	f7e3 f8d1 	bl	8000b54 <__aeabi_dadd>
 801d9b2:	2200      	movs	r2, #0
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	f7e2 fd4f 	bl	8000458 <__aeabi_dcmpgt>
 801d9ba:	2800      	cmp	r0, #0
 801d9bc:	d0ba      	beq.n	801d934 <floor+0x44>
 801d9be:	2e00      	cmp	r6, #0
 801d9c0:	da02      	bge.n	801d9c8 <floor+0xd8>
 801d9c2:	2f14      	cmp	r7, #20
 801d9c4:	d103      	bne.n	801d9ce <floor+0xde>
 801d9c6:	3501      	adds	r5, #1
 801d9c8:	9b00      	ldr	r3, [sp, #0]
 801d9ca:	439c      	bics	r4, r3
 801d9cc:	e7b2      	b.n	801d934 <floor+0x44>
 801d9ce:	2334      	movs	r3, #52	; 0x34
 801d9d0:	1bdf      	subs	r7, r3, r7
 801d9d2:	3b33      	subs	r3, #51	; 0x33
 801d9d4:	40bb      	lsls	r3, r7
 801d9d6:	18e4      	adds	r4, r4, r3
 801d9d8:	9b01      	ldr	r3, [sp, #4]
 801d9da:	429c      	cmp	r4, r3
 801d9dc:	419b      	sbcs	r3, r3
 801d9de:	425b      	negs	r3, r3
 801d9e0:	18f5      	adds	r5, r6, r3
 801d9e2:	e7f1      	b.n	801d9c8 <floor+0xd8>
 801d9e4:	2400      	movs	r4, #0
 801d9e6:	0025      	movs	r5, r4
 801d9e8:	e7a4      	b.n	801d934 <floor+0x44>
 801d9ea:	46c0      	nop			; (mov r8, r8)
 801d9ec:	fffffc01 	.word	0xfffffc01
 801d9f0:	8800759c 	.word	0x8800759c
 801d9f4:	7e37e43c 	.word	0x7e37e43c
 801d9f8:	bff00000 	.word	0xbff00000
 801d9fc:	000fffff 	.word	0x000fffff
 801da00:	fffffbed 	.word	0xfffffbed

0801da04 <_init>:
 801da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da06:	46c0      	nop			; (mov r8, r8)
 801da08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da0a:	bc08      	pop	{r3}
 801da0c:	469e      	mov	lr, r3
 801da0e:	4770      	bx	lr

0801da10 <_fini>:
 801da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da12:	46c0      	nop			; (mov r8, r8)
 801da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da16:	bc08      	pop	{r3}
 801da18:	469e      	mov	lr, r3
 801da1a:	4770      	bx	lr
