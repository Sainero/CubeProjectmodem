
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e240  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e8  0801e300  0801e300  0002e300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f6e8  0801f6e8  0002f6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f6f0  0801f6f0  0002f6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f6f4  0801f6f4  0002f6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000023c  20000000  0801f6f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000015c0  2000023c  0801f934  0003023c  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  200017fc  0801f934  000317fc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000556e2  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a84e  00000000  00000000  00085946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b00  00000000  00000000  00090198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002718  00000000  00000000  00092c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002270a  00000000  00000000  000953b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ce21  00000000  00000000  000b7aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b3b40  00000000  00000000  000f48db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001a841b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009e40  00000000  00000000  001a8470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000023c 	.word	0x2000023c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801e2e8 	.word	0x0801e2e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000240 	.word	0x20000240
 8000104:	0801e2e8 	.word	0x0801e2e8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fd2d 	bl	8001e88 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fc77 	bl	8001d2c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd1f 	bl	8001e88 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd15 	bl	8001e88 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc99 	bl	8001da4 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc8f 	bl	8001da4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fb3f 	bl	8000b20 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fac3 	bl	8000a38 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb31 	bl	8000b20 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb27 	bl	8000b20 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fad1 	bl	8000a88 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fac7 	bl	8000a88 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_ldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d115      	bne.n	8000538 <__aeabi_ldivmod+0x30>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d113      	bne.n	8000538 <__aeabi_ldivmod+0x30>
 8000510:	2900      	cmp	r1, #0
 8000512:	db06      	blt.n	8000522 <__aeabi_ldivmod+0x1a>
 8000514:	dc01      	bgt.n	800051a <__aeabi_ldivmod+0x12>
 8000516:	2800      	cmp	r0, #0
 8000518:	d006      	beq.n	8000528 <__aeabi_ldivmod+0x20>
 800051a:	2000      	movs	r0, #0
 800051c:	43c0      	mvns	r0, r0
 800051e:	0841      	lsrs	r1, r0, #1
 8000520:	e002      	b.n	8000528 <__aeabi_ldivmod+0x20>
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	0609      	lsls	r1, r1, #24
 8000526:	2000      	movs	r0, #0
 8000528:	b407      	push	{r0, r1, r2}
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <__aeabi_ldivmod+0x2c>)
 800052c:	a101      	add	r1, pc, #4	; (adr r1, 8000534 <__aeabi_ldivmod+0x2c>)
 800052e:	1840      	adds	r0, r0, r1
 8000530:	9002      	str	r0, [sp, #8]
 8000532:	bd03      	pop	{r0, r1, pc}
 8000534:	fffffee1 	.word	0xfffffee1
 8000538:	b403      	push	{r0, r1}
 800053a:	4668      	mov	r0, sp
 800053c:	b501      	push	{r0, lr}
 800053e:	9802      	ldr	r0, [sp, #8]
 8000540:	f000 f950 	bl	80007e4 <__gnu_ldivmod_helper>
 8000544:	9b01      	ldr	r3, [sp, #4]
 8000546:	469e      	mov	lr, r3
 8000548:	b002      	add	sp, #8
 800054a:	bc0c      	pop	{r2, r3}
 800054c:	4770      	bx	lr
 800054e:	46c0      	nop			; (mov r8, r8)

08000550 <__aeabi_uldivmod>:
 8000550:	2b00      	cmp	r3, #0
 8000552:	d111      	bne.n	8000578 <__aeabi_uldivmod+0x28>
 8000554:	2a00      	cmp	r2, #0
 8000556:	d10f      	bne.n	8000578 <__aeabi_uldivmod+0x28>
 8000558:	2900      	cmp	r1, #0
 800055a:	d100      	bne.n	800055e <__aeabi_uldivmod+0xe>
 800055c:	2800      	cmp	r0, #0
 800055e:	d002      	beq.n	8000566 <__aeabi_uldivmod+0x16>
 8000560:	2100      	movs	r1, #0
 8000562:	43c9      	mvns	r1, r1
 8000564:	1c08      	adds	r0, r1, #0
 8000566:	b407      	push	{r0, r1, r2}
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <__aeabi_uldivmod+0x24>)
 800056a:	a102      	add	r1, pc, #8	; (adr r1, 8000574 <__aeabi_uldivmod+0x24>)
 800056c:	1840      	adds	r0, r0, r1
 800056e:	9002      	str	r0, [sp, #8]
 8000570:	bd03      	pop	{r0, r1, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	fffffea1 	.word	0xfffffea1
 8000578:	b403      	push	{r0, r1}
 800057a:	4668      	mov	r0, sp
 800057c:	b501      	push	{r0, lr}
 800057e:	9802      	ldr	r0, [sp, #8]
 8000580:	f000 f864 	bl	800064c <__udivmoddi4>
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	469e      	mov	lr, r3
 8000588:	b002      	add	sp, #8
 800058a:	bc0c      	pop	{r2, r3}
 800058c:	4770      	bx	lr
 800058e:	46c0      	nop			; (mov r8, r8)

08000590 <__aeabi_lmul>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	0415      	lsls	r5, r2, #16
 8000594:	0c2d      	lsrs	r5, r5, #16
 8000596:	000f      	movs	r7, r1
 8000598:	0001      	movs	r1, r0
 800059a:	002e      	movs	r6, r5
 800059c:	46c6      	mov	lr, r8
 800059e:	4684      	mov	ip, r0
 80005a0:	0400      	lsls	r0, r0, #16
 80005a2:	0c14      	lsrs	r4, r2, #16
 80005a4:	0c00      	lsrs	r0, r0, #16
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	4346      	muls	r6, r0
 80005aa:	434d      	muls	r5, r1
 80005ac:	4360      	muls	r0, r4
 80005ae:	4361      	muls	r1, r4
 80005b0:	1940      	adds	r0, r0, r5
 80005b2:	0c34      	lsrs	r4, r6, #16
 80005b4:	1824      	adds	r4, r4, r0
 80005b6:	b500      	push	{lr}
 80005b8:	42a5      	cmp	r5, r4
 80005ba:	d903      	bls.n	80005c4 <__aeabi_lmul+0x34>
 80005bc:	2080      	movs	r0, #128	; 0x80
 80005be:	0240      	lsls	r0, r0, #9
 80005c0:	4680      	mov	r8, r0
 80005c2:	4441      	add	r1, r8
 80005c4:	0c25      	lsrs	r5, r4, #16
 80005c6:	186d      	adds	r5, r5, r1
 80005c8:	4661      	mov	r1, ip
 80005ca:	4359      	muls	r1, r3
 80005cc:	437a      	muls	r2, r7
 80005ce:	0430      	lsls	r0, r6, #16
 80005d0:	1949      	adds	r1, r1, r5
 80005d2:	0424      	lsls	r4, r4, #16
 80005d4:	0c00      	lsrs	r0, r0, #16
 80005d6:	1820      	adds	r0, r4, r0
 80005d8:	1889      	adds	r1, r1, r2
 80005da:	bc80      	pop	{r7}
 80005dc:	46b8      	mov	r8, r7
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005e0 <__aeabi_f2uiz>:
 80005e0:	219e      	movs	r1, #158	; 0x9e
 80005e2:	b510      	push	{r4, lr}
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	1c04      	adds	r4, r0, #0
 80005e8:	f7ff ff84 	bl	80004f4 <__aeabi_fcmpge>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d103      	bne.n	80005f8 <__aeabi_f2uiz+0x18>
 80005f0:	1c20      	adds	r0, r4, #0
 80005f2:	f000 fca7 	bl	8000f44 <__aeabi_f2iz>
 80005f6:	bd10      	pop	{r4, pc}
 80005f8:	219e      	movs	r1, #158	; 0x9e
 80005fa:	1c20      	adds	r0, r4, #0
 80005fc:	05c9      	lsls	r1, r1, #23
 80005fe:	f000 fad9 	bl	8000bb4 <__aeabi_fsub>
 8000602:	f000 fc9f 	bl	8000f44 <__aeabi_f2iz>
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	061b      	lsls	r3, r3, #24
 800060a:	469c      	mov	ip, r3
 800060c:	4460      	add	r0, ip
 800060e:	e7f2      	b.n	80005f6 <__aeabi_f2uiz+0x16>

08000610 <__aeabi_d2uiz>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	2200      	movs	r2, #0
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__aeabi_d2uiz+0x38>)
 8000616:	0004      	movs	r4, r0
 8000618:	000d      	movs	r5, r1
 800061a:	f7ff ff31 	bl	8000480 <__aeabi_dcmpge>
 800061e:	2800      	cmp	r0, #0
 8000620:	d104      	bne.n	800062c <__aeabi_d2uiz+0x1c>
 8000622:	0020      	movs	r0, r4
 8000624:	0029      	movs	r1, r5
 8000626:	f002 fa9d 	bl	8002b64 <__aeabi_d2iz>
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <__aeabi_d2uiz+0x38>)
 800062e:	2200      	movs	r2, #0
 8000630:	0020      	movs	r0, r4
 8000632:	0029      	movs	r1, r5
 8000634:	f001 ff04 	bl	8002440 <__aeabi_dsub>
 8000638:	f002 fa94 	bl	8002b64 <__aeabi_d2iz>
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	061b      	lsls	r3, r3, #24
 8000640:	469c      	mov	ip, r3
 8000642:	4460      	add	r0, ip
 8000644:	e7f1      	b.n	800062a <__aeabi_d2uiz+0x1a>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	41e00000 	.word	0x41e00000

0800064c <__udivmoddi4>:
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	4657      	mov	r7, sl
 8000650:	464e      	mov	r6, r9
 8000652:	4645      	mov	r5, r8
 8000654:	46de      	mov	lr, fp
 8000656:	b5e0      	push	{r5, r6, r7, lr}
 8000658:	0004      	movs	r4, r0
 800065a:	000d      	movs	r5, r1
 800065c:	4692      	mov	sl, r2
 800065e:	4699      	mov	r9, r3
 8000660:	b083      	sub	sp, #12
 8000662:	428b      	cmp	r3, r1
 8000664:	d830      	bhi.n	80006c8 <__udivmoddi4+0x7c>
 8000666:	d02d      	beq.n	80006c4 <__udivmoddi4+0x78>
 8000668:	4649      	mov	r1, r9
 800066a:	4650      	mov	r0, sl
 800066c:	f002 fb6c 	bl	8002d48 <__clzdi2>
 8000670:	0029      	movs	r1, r5
 8000672:	0006      	movs	r6, r0
 8000674:	0020      	movs	r0, r4
 8000676:	f002 fb67 	bl	8002d48 <__clzdi2>
 800067a:	1a33      	subs	r3, r6, r0
 800067c:	4698      	mov	r8, r3
 800067e:	3b20      	subs	r3, #32
 8000680:	469b      	mov	fp, r3
 8000682:	d433      	bmi.n	80006ec <__udivmoddi4+0xa0>
 8000684:	465a      	mov	r2, fp
 8000686:	4653      	mov	r3, sl
 8000688:	4093      	lsls	r3, r2
 800068a:	4642      	mov	r2, r8
 800068c:	001f      	movs	r7, r3
 800068e:	4653      	mov	r3, sl
 8000690:	4093      	lsls	r3, r2
 8000692:	001e      	movs	r6, r3
 8000694:	42af      	cmp	r7, r5
 8000696:	d83a      	bhi.n	800070e <__udivmoddi4+0xc2>
 8000698:	42af      	cmp	r7, r5
 800069a:	d100      	bne.n	800069e <__udivmoddi4+0x52>
 800069c:	e078      	b.n	8000790 <__udivmoddi4+0x144>
 800069e:	465b      	mov	r3, fp
 80006a0:	1ba4      	subs	r4, r4, r6
 80006a2:	41bd      	sbcs	r5, r7
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da00      	bge.n	80006aa <__udivmoddi4+0x5e>
 80006a8:	e075      	b.n	8000796 <__udivmoddi4+0x14a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2301      	movs	r3, #1
 80006b4:	465a      	mov	r2, fp
 80006b6:	4093      	lsls	r3, r2
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2301      	movs	r3, #1
 80006bc:	4642      	mov	r2, r8
 80006be:	4093      	lsls	r3, r2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	e028      	b.n	8000716 <__udivmoddi4+0xca>
 80006c4:	4282      	cmp	r2, r0
 80006c6:	d9cf      	bls.n	8000668 <__udivmoddi4+0x1c>
 80006c8:	2200      	movs	r2, #0
 80006ca:	2300      	movs	r3, #0
 80006cc:	9200      	str	r2, [sp, #0]
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <__udivmoddi4+0x8e>
 80006d6:	601c      	str	r4, [r3, #0]
 80006d8:	605d      	str	r5, [r3, #4]
 80006da:	9800      	ldr	r0, [sp, #0]
 80006dc:	9901      	ldr	r1, [sp, #4]
 80006de:	b003      	add	sp, #12
 80006e0:	bcf0      	pop	{r4, r5, r6, r7}
 80006e2:	46bb      	mov	fp, r7
 80006e4:	46b2      	mov	sl, r6
 80006e6:	46a9      	mov	r9, r5
 80006e8:	46a0      	mov	r8, r4
 80006ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	4652      	mov	r2, sl
 80006f4:	40da      	lsrs	r2, r3
 80006f6:	4641      	mov	r1, r8
 80006f8:	0013      	movs	r3, r2
 80006fa:	464a      	mov	r2, r9
 80006fc:	408a      	lsls	r2, r1
 80006fe:	0017      	movs	r7, r2
 8000700:	4642      	mov	r2, r8
 8000702:	431f      	orrs	r7, r3
 8000704:	4653      	mov	r3, sl
 8000706:	4093      	lsls	r3, r2
 8000708:	001e      	movs	r6, r3
 800070a:	42af      	cmp	r7, r5
 800070c:	d9c4      	bls.n	8000698 <__udivmoddi4+0x4c>
 800070e:	2200      	movs	r2, #0
 8000710:	2300      	movs	r3, #0
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	4643      	mov	r3, r8
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0d9      	beq.n	80006d0 <__udivmoddi4+0x84>
 800071c:	07fb      	lsls	r3, r7, #31
 800071e:	0872      	lsrs	r2, r6, #1
 8000720:	431a      	orrs	r2, r3
 8000722:	4646      	mov	r6, r8
 8000724:	087b      	lsrs	r3, r7, #1
 8000726:	e00e      	b.n	8000746 <__udivmoddi4+0xfa>
 8000728:	42ab      	cmp	r3, r5
 800072a:	d101      	bne.n	8000730 <__udivmoddi4+0xe4>
 800072c:	42a2      	cmp	r2, r4
 800072e:	d80c      	bhi.n	800074a <__udivmoddi4+0xfe>
 8000730:	1aa4      	subs	r4, r4, r2
 8000732:	419d      	sbcs	r5, r3
 8000734:	2001      	movs	r0, #1
 8000736:	1924      	adds	r4, r4, r4
 8000738:	416d      	adcs	r5, r5
 800073a:	2100      	movs	r1, #0
 800073c:	3e01      	subs	r6, #1
 800073e:	1824      	adds	r4, r4, r0
 8000740:	414d      	adcs	r5, r1
 8000742:	2e00      	cmp	r6, #0
 8000744:	d006      	beq.n	8000754 <__udivmoddi4+0x108>
 8000746:	42ab      	cmp	r3, r5
 8000748:	d9ee      	bls.n	8000728 <__udivmoddi4+0xdc>
 800074a:	3e01      	subs	r6, #1
 800074c:	1924      	adds	r4, r4, r4
 800074e:	416d      	adcs	r5, r5
 8000750:	2e00      	cmp	r6, #0
 8000752:	d1f8      	bne.n	8000746 <__udivmoddi4+0xfa>
 8000754:	9800      	ldr	r0, [sp, #0]
 8000756:	9901      	ldr	r1, [sp, #4]
 8000758:	465b      	mov	r3, fp
 800075a:	1900      	adds	r0, r0, r4
 800075c:	4169      	adcs	r1, r5
 800075e:	2b00      	cmp	r3, #0
 8000760:	db24      	blt.n	80007ac <__udivmoddi4+0x160>
 8000762:	002b      	movs	r3, r5
 8000764:	465a      	mov	r2, fp
 8000766:	4644      	mov	r4, r8
 8000768:	40d3      	lsrs	r3, r2
 800076a:	002a      	movs	r2, r5
 800076c:	40e2      	lsrs	r2, r4
 800076e:	001c      	movs	r4, r3
 8000770:	465b      	mov	r3, fp
 8000772:	0015      	movs	r5, r2
 8000774:	2b00      	cmp	r3, #0
 8000776:	db2a      	blt.n	80007ce <__udivmoddi4+0x182>
 8000778:	0026      	movs	r6, r4
 800077a:	409e      	lsls	r6, r3
 800077c:	0033      	movs	r3, r6
 800077e:	0026      	movs	r6, r4
 8000780:	4647      	mov	r7, r8
 8000782:	40be      	lsls	r6, r7
 8000784:	0032      	movs	r2, r6
 8000786:	1a80      	subs	r0, r0, r2
 8000788:	4199      	sbcs	r1, r3
 800078a:	9000      	str	r0, [sp, #0]
 800078c:	9101      	str	r1, [sp, #4]
 800078e:	e79f      	b.n	80006d0 <__udivmoddi4+0x84>
 8000790:	42a3      	cmp	r3, r4
 8000792:	d8bc      	bhi.n	800070e <__udivmoddi4+0xc2>
 8000794:	e783      	b.n	800069e <__udivmoddi4+0x52>
 8000796:	4642      	mov	r2, r8
 8000798:	2320      	movs	r3, #32
 800079a:	2100      	movs	r1, #0
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	9100      	str	r1, [sp, #0]
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	40da      	lsrs	r2, r3
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	e786      	b.n	80006ba <__udivmoddi4+0x6e>
 80007ac:	4642      	mov	r2, r8
 80007ae:	2320      	movs	r3, #32
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	002a      	movs	r2, r5
 80007b4:	4646      	mov	r6, r8
 80007b6:	409a      	lsls	r2, r3
 80007b8:	0023      	movs	r3, r4
 80007ba:	40f3      	lsrs	r3, r6
 80007bc:	4644      	mov	r4, r8
 80007be:	4313      	orrs	r3, r2
 80007c0:	002a      	movs	r2, r5
 80007c2:	40e2      	lsrs	r2, r4
 80007c4:	001c      	movs	r4, r3
 80007c6:	465b      	mov	r3, fp
 80007c8:	0015      	movs	r5, r2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dad4      	bge.n	8000778 <__udivmoddi4+0x12c>
 80007ce:	4642      	mov	r2, r8
 80007d0:	002f      	movs	r7, r5
 80007d2:	2320      	movs	r3, #32
 80007d4:	0026      	movs	r6, r4
 80007d6:	4097      	lsls	r7, r2
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	40de      	lsrs	r6, r3
 80007dc:	003b      	movs	r3, r7
 80007de:	4333      	orrs	r3, r6
 80007e0:	e7cd      	b.n	800077e <__udivmoddi4+0x132>
 80007e2:	46c0      	nop			; (mov r8, r8)

080007e4 <__gnu_ldivmod_helper>:
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e6:	46ce      	mov	lr, r9
 80007e8:	4647      	mov	r7, r8
 80007ea:	b580      	push	{r7, lr}
 80007ec:	4691      	mov	r9, r2
 80007ee:	4698      	mov	r8, r3
 80007f0:	0004      	movs	r4, r0
 80007f2:	000d      	movs	r5, r1
 80007f4:	f002 fab4 	bl	8002d60 <__divdi3>
 80007f8:	0007      	movs	r7, r0
 80007fa:	000e      	movs	r6, r1
 80007fc:	0002      	movs	r2, r0
 80007fe:	000b      	movs	r3, r1
 8000800:	4648      	mov	r0, r9
 8000802:	4641      	mov	r1, r8
 8000804:	f7ff fec4 	bl	8000590 <__aeabi_lmul>
 8000808:	1a24      	subs	r4, r4, r0
 800080a:	418d      	sbcs	r5, r1
 800080c:	9b08      	ldr	r3, [sp, #32]
 800080e:	0038      	movs	r0, r7
 8000810:	0031      	movs	r1, r6
 8000812:	601c      	str	r4, [r3, #0]
 8000814:	605d      	str	r5, [r3, #4]
 8000816:	bcc0      	pop	{r6, r7}
 8000818:	46b9      	mov	r9, r7
 800081a:	46b0      	mov	r8, r6
 800081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)

08000820 <__aeabi_fdiv>:
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	464f      	mov	r7, r9
 8000824:	4646      	mov	r6, r8
 8000826:	46d6      	mov	lr, sl
 8000828:	0245      	lsls	r5, r0, #9
 800082a:	b5c0      	push	{r6, r7, lr}
 800082c:	0047      	lsls	r7, r0, #1
 800082e:	1c0c      	adds	r4, r1, #0
 8000830:	0a6d      	lsrs	r5, r5, #9
 8000832:	0e3f      	lsrs	r7, r7, #24
 8000834:	0fc6      	lsrs	r6, r0, #31
 8000836:	2f00      	cmp	r7, #0
 8000838:	d066      	beq.n	8000908 <__aeabi_fdiv+0xe8>
 800083a:	2fff      	cmp	r7, #255	; 0xff
 800083c:	d06c      	beq.n	8000918 <__aeabi_fdiv+0xf8>
 800083e:	2300      	movs	r3, #0
 8000840:	00ea      	lsls	r2, r5, #3
 8000842:	2580      	movs	r5, #128	; 0x80
 8000844:	4699      	mov	r9, r3
 8000846:	469a      	mov	sl, r3
 8000848:	04ed      	lsls	r5, r5, #19
 800084a:	4315      	orrs	r5, r2
 800084c:	3f7f      	subs	r7, #127	; 0x7f
 800084e:	0260      	lsls	r0, r4, #9
 8000850:	0061      	lsls	r1, r4, #1
 8000852:	0a43      	lsrs	r3, r0, #9
 8000854:	4698      	mov	r8, r3
 8000856:	0e09      	lsrs	r1, r1, #24
 8000858:	0fe4      	lsrs	r4, r4, #31
 800085a:	2900      	cmp	r1, #0
 800085c:	d048      	beq.n	80008f0 <__aeabi_fdiv+0xd0>
 800085e:	29ff      	cmp	r1, #255	; 0xff
 8000860:	d010      	beq.n	8000884 <__aeabi_fdiv+0x64>
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	00d8      	lsls	r0, r3, #3
 8000866:	04d2      	lsls	r2, r2, #19
 8000868:	4302      	orrs	r2, r0
 800086a:	4690      	mov	r8, r2
 800086c:	2000      	movs	r0, #0
 800086e:	397f      	subs	r1, #127	; 0x7f
 8000870:	464a      	mov	r2, r9
 8000872:	0033      	movs	r3, r6
 8000874:	1a7f      	subs	r7, r7, r1
 8000876:	4302      	orrs	r2, r0
 8000878:	496c      	ldr	r1, [pc, #432]	; (8000a2c <__aeabi_fdiv+0x20c>)
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	588a      	ldr	r2, [r1, r2]
 800087e:	4063      	eors	r3, r4
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4697      	mov	pc, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d16d      	bne.n	8000964 <__aeabi_fdiv+0x144>
 8000888:	2002      	movs	r0, #2
 800088a:	3fff      	subs	r7, #255	; 0xff
 800088c:	e033      	b.n	80008f6 <__aeabi_fdiv+0xd6>
 800088e:	2300      	movs	r3, #0
 8000890:	4698      	mov	r8, r3
 8000892:	0026      	movs	r6, r4
 8000894:	4645      	mov	r5, r8
 8000896:	4682      	mov	sl, r0
 8000898:	4653      	mov	r3, sl
 800089a:	2b02      	cmp	r3, #2
 800089c:	d100      	bne.n	80008a0 <__aeabi_fdiv+0x80>
 800089e:	e07f      	b.n	80009a0 <__aeabi_fdiv+0x180>
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fdiv+0x86>
 80008a4:	e094      	b.n	80009d0 <__aeabi_fdiv+0x1b0>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d017      	beq.n	80008da <__aeabi_fdiv+0xba>
 80008aa:	0038      	movs	r0, r7
 80008ac:	307f      	adds	r0, #127	; 0x7f
 80008ae:	2800      	cmp	r0, #0
 80008b0:	dd5f      	ble.n	8000972 <__aeabi_fdiv+0x152>
 80008b2:	076b      	lsls	r3, r5, #29
 80008b4:	d004      	beq.n	80008c0 <__aeabi_fdiv+0xa0>
 80008b6:	230f      	movs	r3, #15
 80008b8:	402b      	ands	r3, r5
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fdiv+0xa0>
 80008be:	3504      	adds	r5, #4
 80008c0:	012b      	lsls	r3, r5, #4
 80008c2:	d503      	bpl.n	80008cc <__aeabi_fdiv+0xac>
 80008c4:	0038      	movs	r0, r7
 80008c6:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <__aeabi_fdiv+0x210>)
 80008c8:	3080      	adds	r0, #128	; 0x80
 80008ca:	401d      	ands	r5, r3
 80008cc:	28fe      	cmp	r0, #254	; 0xfe
 80008ce:	dc67      	bgt.n	80009a0 <__aeabi_fdiv+0x180>
 80008d0:	01ad      	lsls	r5, r5, #6
 80008d2:	0a6d      	lsrs	r5, r5, #9
 80008d4:	b2c0      	uxtb	r0, r0
 80008d6:	e002      	b.n	80008de <__aeabi_fdiv+0xbe>
 80008d8:	001e      	movs	r6, r3
 80008da:	2000      	movs	r0, #0
 80008dc:	2500      	movs	r5, #0
 80008de:	05c0      	lsls	r0, r0, #23
 80008e0:	4328      	orrs	r0, r5
 80008e2:	07f6      	lsls	r6, r6, #31
 80008e4:	4330      	orrs	r0, r6
 80008e6:	bce0      	pop	{r5, r6, r7}
 80008e8:	46ba      	mov	sl, r7
 80008ea:	46b1      	mov	r9, r6
 80008ec:	46a8      	mov	r8, r5
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d12b      	bne.n	800094c <__aeabi_fdiv+0x12c>
 80008f4:	2001      	movs	r0, #1
 80008f6:	464a      	mov	r2, r9
 80008f8:	0033      	movs	r3, r6
 80008fa:	494e      	ldr	r1, [pc, #312]	; (8000a34 <__aeabi_fdiv+0x214>)
 80008fc:	4302      	orrs	r2, r0
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	588a      	ldr	r2, [r1, r2]
 8000902:	4063      	eors	r3, r4
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4697      	mov	pc, r2
 8000908:	2d00      	cmp	r5, #0
 800090a:	d113      	bne.n	8000934 <__aeabi_fdiv+0x114>
 800090c:	2304      	movs	r3, #4
 800090e:	4699      	mov	r9, r3
 8000910:	3b03      	subs	r3, #3
 8000912:	2700      	movs	r7, #0
 8000914:	469a      	mov	sl, r3
 8000916:	e79a      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000918:	2d00      	cmp	r5, #0
 800091a:	d105      	bne.n	8000928 <__aeabi_fdiv+0x108>
 800091c:	2308      	movs	r3, #8
 800091e:	4699      	mov	r9, r3
 8000920:	3b06      	subs	r3, #6
 8000922:	27ff      	movs	r7, #255	; 0xff
 8000924:	469a      	mov	sl, r3
 8000926:	e792      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000928:	230c      	movs	r3, #12
 800092a:	4699      	mov	r9, r3
 800092c:	3b09      	subs	r3, #9
 800092e:	27ff      	movs	r7, #255	; 0xff
 8000930:	469a      	mov	sl, r3
 8000932:	e78c      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000934:	0028      	movs	r0, r5
 8000936:	f002 f9e9 	bl	8002d0c <__clzsi2>
 800093a:	2776      	movs	r7, #118	; 0x76
 800093c:	1f43      	subs	r3, r0, #5
 800093e:	409d      	lsls	r5, r3
 8000940:	2300      	movs	r3, #0
 8000942:	427f      	negs	r7, r7
 8000944:	4699      	mov	r9, r3
 8000946:	469a      	mov	sl, r3
 8000948:	1a3f      	subs	r7, r7, r0
 800094a:	e780      	b.n	800084e <__aeabi_fdiv+0x2e>
 800094c:	0018      	movs	r0, r3
 800094e:	f002 f9dd 	bl	8002d0c <__clzsi2>
 8000952:	4642      	mov	r2, r8
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	2176      	movs	r1, #118	; 0x76
 8000958:	409a      	lsls	r2, r3
 800095a:	4249      	negs	r1, r1
 800095c:	1a09      	subs	r1, r1, r0
 800095e:	4690      	mov	r8, r2
 8000960:	2000      	movs	r0, #0
 8000962:	e785      	b.n	8000870 <__aeabi_fdiv+0x50>
 8000964:	21ff      	movs	r1, #255	; 0xff
 8000966:	2003      	movs	r0, #3
 8000968:	e782      	b.n	8000870 <__aeabi_fdiv+0x50>
 800096a:	001e      	movs	r6, r3
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	2500      	movs	r5, #0
 8000970:	e7b5      	b.n	80008de <__aeabi_fdiv+0xbe>
 8000972:	2301      	movs	r3, #1
 8000974:	1a1b      	subs	r3, r3, r0
 8000976:	2b1b      	cmp	r3, #27
 8000978:	dcaf      	bgt.n	80008da <__aeabi_fdiv+0xba>
 800097a:	379e      	adds	r7, #158	; 0x9e
 800097c:	0029      	movs	r1, r5
 800097e:	40bd      	lsls	r5, r7
 8000980:	40d9      	lsrs	r1, r3
 8000982:	1e6a      	subs	r2, r5, #1
 8000984:	4195      	sbcs	r5, r2
 8000986:	430d      	orrs	r5, r1
 8000988:	076b      	lsls	r3, r5, #29
 800098a:	d004      	beq.n	8000996 <__aeabi_fdiv+0x176>
 800098c:	230f      	movs	r3, #15
 800098e:	402b      	ands	r3, r5
 8000990:	2b04      	cmp	r3, #4
 8000992:	d000      	beq.n	8000996 <__aeabi_fdiv+0x176>
 8000994:	3504      	adds	r5, #4
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	d544      	bpl.n	8000a24 <__aeabi_fdiv+0x204>
 800099a:	2001      	movs	r0, #1
 800099c:	2500      	movs	r5, #0
 800099e:	e79e      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	2500      	movs	r5, #0
 80009a4:	e79b      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009a6:	2580      	movs	r5, #128	; 0x80
 80009a8:	2600      	movs	r6, #0
 80009aa:	20ff      	movs	r0, #255	; 0xff
 80009ac:	03ed      	lsls	r5, r5, #15
 80009ae:	e796      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009b0:	2300      	movs	r3, #0
 80009b2:	4698      	mov	r8, r3
 80009b4:	2080      	movs	r0, #128	; 0x80
 80009b6:	03c0      	lsls	r0, r0, #15
 80009b8:	4205      	tst	r5, r0
 80009ba:	d009      	beq.n	80009d0 <__aeabi_fdiv+0x1b0>
 80009bc:	4643      	mov	r3, r8
 80009be:	4203      	tst	r3, r0
 80009c0:	d106      	bne.n	80009d0 <__aeabi_fdiv+0x1b0>
 80009c2:	4645      	mov	r5, r8
 80009c4:	4305      	orrs	r5, r0
 80009c6:	026d      	lsls	r5, r5, #9
 80009c8:	0026      	movs	r6, r4
 80009ca:	20ff      	movs	r0, #255	; 0xff
 80009cc:	0a6d      	lsrs	r5, r5, #9
 80009ce:	e786      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	03c0      	lsls	r0, r0, #15
 80009d4:	4305      	orrs	r5, r0
 80009d6:	026d      	lsls	r5, r5, #9
 80009d8:	20ff      	movs	r0, #255	; 0xff
 80009da:	0a6d      	lsrs	r5, r5, #9
 80009dc:	e77f      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009de:	4641      	mov	r1, r8
 80009e0:	016a      	lsls	r2, r5, #5
 80009e2:	0148      	lsls	r0, r1, #5
 80009e4:	4282      	cmp	r2, r0
 80009e6:	d219      	bcs.n	8000a1c <__aeabi_fdiv+0x1fc>
 80009e8:	211b      	movs	r1, #27
 80009ea:	2500      	movs	r5, #0
 80009ec:	3f01      	subs	r7, #1
 80009ee:	2601      	movs	r6, #1
 80009f0:	0014      	movs	r4, r2
 80009f2:	006d      	lsls	r5, r5, #1
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	db01      	blt.n	80009fe <__aeabi_fdiv+0x1de>
 80009fa:	4290      	cmp	r0, r2
 80009fc:	d801      	bhi.n	8000a02 <__aeabi_fdiv+0x1e2>
 80009fe:	1a12      	subs	r2, r2, r0
 8000a00:	4335      	orrs	r5, r6
 8000a02:	3901      	subs	r1, #1
 8000a04:	2900      	cmp	r1, #0
 8000a06:	d1f3      	bne.n	80009f0 <__aeabi_fdiv+0x1d0>
 8000a08:	1e50      	subs	r0, r2, #1
 8000a0a:	4182      	sbcs	r2, r0
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	307f      	adds	r0, #127	; 0x7f
 8000a10:	001e      	movs	r6, r3
 8000a12:	4315      	orrs	r5, r2
 8000a14:	2800      	cmp	r0, #0
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_fdiv+0x1fa>
 8000a18:	e74b      	b.n	80008b2 <__aeabi_fdiv+0x92>
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fdiv+0x152>
 8000a1c:	211a      	movs	r1, #26
 8000a1e:	2501      	movs	r5, #1
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	e7e4      	b.n	80009ee <__aeabi_fdiv+0x1ce>
 8000a24:	01ad      	lsls	r5, r5, #6
 8000a26:	2000      	movs	r0, #0
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e758      	b.n	80008de <__aeabi_fdiv+0xbe>
 8000a2c:	0801f5b4 	.word	0x0801f5b4
 8000a30:	f7ffffff 	.word	0xf7ffffff
 8000a34:	0801f5f4 	.word	0x0801f5f4

08000a38 <__eqsf2>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	0042      	lsls	r2, r0, #1
 8000a3c:	024e      	lsls	r6, r1, #9
 8000a3e:	004c      	lsls	r4, r1, #1
 8000a40:	0245      	lsls	r5, r0, #9
 8000a42:	0a6d      	lsrs	r5, r5, #9
 8000a44:	0e12      	lsrs	r2, r2, #24
 8000a46:	0fc3      	lsrs	r3, r0, #31
 8000a48:	0a76      	lsrs	r6, r6, #9
 8000a4a:	0e24      	lsrs	r4, r4, #24
 8000a4c:	0fc9      	lsrs	r1, r1, #31
 8000a4e:	2aff      	cmp	r2, #255	; 0xff
 8000a50:	d00f      	beq.n	8000a72 <__eqsf2+0x3a>
 8000a52:	2cff      	cmp	r4, #255	; 0xff
 8000a54:	d011      	beq.n	8000a7a <__eqsf2+0x42>
 8000a56:	2001      	movs	r0, #1
 8000a58:	42a2      	cmp	r2, r4
 8000a5a:	d000      	beq.n	8000a5e <__eqsf2+0x26>
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	42b5      	cmp	r5, r6
 8000a60:	d1fc      	bne.n	8000a5c <__eqsf2+0x24>
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d00d      	beq.n	8000a82 <__eqsf2+0x4a>
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d1f8      	bne.n	8000a5c <__eqsf2+0x24>
 8000a6a:	0028      	movs	r0, r5
 8000a6c:	1e45      	subs	r5, r0, #1
 8000a6e:	41a8      	sbcs	r0, r5
 8000a70:	e7f4      	b.n	8000a5c <__eqsf2+0x24>
 8000a72:	2001      	movs	r0, #1
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d1f1      	bne.n	8000a5c <__eqsf2+0x24>
 8000a78:	e7eb      	b.n	8000a52 <__eqsf2+0x1a>
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d1ed      	bne.n	8000a5c <__eqsf2+0x24>
 8000a80:	e7e9      	b.n	8000a56 <__eqsf2+0x1e>
 8000a82:	2000      	movs	r0, #0
 8000a84:	e7ea      	b.n	8000a5c <__eqsf2+0x24>
 8000a86:	46c0      	nop			; (mov r8, r8)

08000a88 <__gesf2>:
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0246      	lsls	r6, r0, #9
 8000a8e:	024d      	lsls	r5, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a76      	lsrs	r6, r6, #9
 8000a96:	0e12      	lsrs	r2, r2, #24
 8000a98:	0a6d      	lsrs	r5, r5, #9
 8000a9a:	0e24      	lsrs	r4, r4, #24
 8000a9c:	0fc8      	lsrs	r0, r1, #31
 8000a9e:	2aff      	cmp	r2, #255	; 0xff
 8000aa0:	d01f      	beq.n	8000ae2 <__gesf2+0x5a>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d010      	beq.n	8000ac8 <__gesf2+0x40>
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d11f      	bne.n	8000aea <__gesf2+0x62>
 8000aaa:	4271      	negs	r1, r6
 8000aac:	4171      	adcs	r1, r6
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d101      	bne.n	8000ab6 <__gesf2+0x2e>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d01e      	beq.n	8000af4 <__gesf2+0x6c>
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d10e      	bne.n	8000ad8 <__gesf2+0x50>
 8000aba:	4283      	cmp	r3, r0
 8000abc:	d01e      	beq.n	8000afc <__gesf2+0x74>
 8000abe:	2102      	movs	r1, #2
 8000ac0:	1e58      	subs	r0, r3, #1
 8000ac2:	4008      	ands	r0, r1
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d126      	bne.n	8000b1a <__gesf2+0x92>
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d1f4      	bne.n	8000aba <__gesf2+0x32>
 8000ad0:	4271      	negs	r1, r6
 8000ad2:	4171      	adcs	r1, r6
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	d0f0      	beq.n	8000aba <__gesf2+0x32>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d1f4      	bne.n	8000ac6 <__gesf2+0x3e>
 8000adc:	2001      	movs	r0, #1
 8000ade:	4240      	negs	r0, r0
 8000ae0:	e7f1      	b.n	8000ac6 <__gesf2+0x3e>
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d119      	bne.n	8000b1a <__gesf2+0x92>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d0ee      	beq.n	8000ac8 <__gesf2+0x40>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d1e5      	bne.n	8000aba <__gesf2+0x32>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d1e3      	bne.n	8000aba <__gesf2+0x32>
 8000af2:	e7e4      	b.n	8000abe <__gesf2+0x36>
 8000af4:	2000      	movs	r0, #0
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d0e5      	beq.n	8000ac6 <__gesf2+0x3e>
 8000afa:	e7e0      	b.n	8000abe <__gesf2+0x36>
 8000afc:	42a2      	cmp	r2, r4
 8000afe:	dc05      	bgt.n	8000b0c <__gesf2+0x84>
 8000b00:	dbea      	blt.n	8000ad8 <__gesf2+0x50>
 8000b02:	42ae      	cmp	r6, r5
 8000b04:	d802      	bhi.n	8000b0c <__gesf2+0x84>
 8000b06:	d3e7      	bcc.n	8000ad8 <__gesf2+0x50>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7dc      	b.n	8000ac6 <__gesf2+0x3e>
 8000b0c:	4241      	negs	r1, r0
 8000b0e:	4141      	adcs	r1, r0
 8000b10:	4248      	negs	r0, r1
 8000b12:	2102      	movs	r1, #2
 8000b14:	4008      	ands	r0, r1
 8000b16:	3801      	subs	r0, #1
 8000b18:	e7d5      	b.n	8000ac6 <__gesf2+0x3e>
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	4240      	negs	r0, r0
 8000b1e:	e7d2      	b.n	8000ac6 <__gesf2+0x3e>

08000b20 <__lesf2>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	0042      	lsls	r2, r0, #1
 8000b24:	0246      	lsls	r6, r0, #9
 8000b26:	024d      	lsls	r5, r1, #9
 8000b28:	004c      	lsls	r4, r1, #1
 8000b2a:	0fc3      	lsrs	r3, r0, #31
 8000b2c:	0a76      	lsrs	r6, r6, #9
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	0a6d      	lsrs	r5, r5, #9
 8000b32:	0e24      	lsrs	r4, r4, #24
 8000b34:	0fc8      	lsrs	r0, r1, #31
 8000b36:	2aff      	cmp	r2, #255	; 0xff
 8000b38:	d00d      	beq.n	8000b56 <__lesf2+0x36>
 8000b3a:	2cff      	cmp	r4, #255	; 0xff
 8000b3c:	d00f      	beq.n	8000b5e <__lesf2+0x3e>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d123      	bne.n	8000b8a <__lesf2+0x6a>
 8000b42:	4271      	negs	r1, r6
 8000b44:	4171      	adcs	r1, r6
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d10f      	bne.n	8000b6a <__lesf2+0x4a>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d10d      	bne.n	8000b6a <__lesf2+0x4a>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d014      	beq.n	8000b7e <__lesf2+0x5e>
 8000b54:	e00d      	b.n	8000b72 <__lesf2+0x52>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d110      	bne.n	8000b7c <__lesf2+0x5c>
 8000b5a:	2cff      	cmp	r4, #255	; 0xff
 8000b5c:	d115      	bne.n	8000b8a <__lesf2+0x6a>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d10c      	bne.n	8000b7c <__lesf2+0x5c>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d103      	bne.n	8000b6e <__lesf2+0x4e>
 8000b66:	4271      	negs	r1, r6
 8000b68:	4171      	adcs	r1, r6
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d108      	bne.n	8000b80 <__lesf2+0x60>
 8000b6e:	4283      	cmp	r3, r0
 8000b70:	d010      	beq.n	8000b94 <__lesf2+0x74>
 8000b72:	2102      	movs	r1, #2
 8000b74:	1e58      	subs	r0, r3, #1
 8000b76:	4008      	ands	r0, r1
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e000      	b.n	8000b7e <__lesf2+0x5e>
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d1fc      	bne.n	8000b7e <__lesf2+0x5e>
 8000b84:	2001      	movs	r0, #1
 8000b86:	4240      	negs	r0, r0
 8000b88:	e7f9      	b.n	8000b7e <__lesf2+0x5e>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d1ef      	bne.n	8000b6e <__lesf2+0x4e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d1ed      	bne.n	8000b6e <__lesf2+0x4e>
 8000b92:	e7ee      	b.n	8000b72 <__lesf2+0x52>
 8000b94:	42a2      	cmp	r2, r4
 8000b96:	dc05      	bgt.n	8000ba4 <__lesf2+0x84>
 8000b98:	dbf2      	blt.n	8000b80 <__lesf2+0x60>
 8000b9a:	42ae      	cmp	r6, r5
 8000b9c:	d802      	bhi.n	8000ba4 <__lesf2+0x84>
 8000b9e:	d3ef      	bcc.n	8000b80 <__lesf2+0x60>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	e7ec      	b.n	8000b7e <__lesf2+0x5e>
 8000ba4:	4241      	negs	r1, r0
 8000ba6:	4141      	adcs	r1, r0
 8000ba8:	4248      	negs	r0, r1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4008      	ands	r0, r1
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7e5      	b.n	8000b7e <__lesf2+0x5e>
 8000bb2:	46c0      	nop			; (mov r8, r8)

08000bb4 <__aeabi_fsub>:
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	4646      	mov	r6, r8
 8000bb8:	46d6      	mov	lr, sl
 8000bba:	464f      	mov	r7, r9
 8000bbc:	0243      	lsls	r3, r0, #9
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	00da      	lsls	r2, r3, #3
 8000bc2:	4694      	mov	ip, r2
 8000bc4:	024a      	lsls	r2, r1, #9
 8000bc6:	b5c0      	push	{r6, r7, lr}
 8000bc8:	0044      	lsls	r4, r0, #1
 8000bca:	0a56      	lsrs	r6, r2, #9
 8000bcc:	1c05      	adds	r5, r0, #0
 8000bce:	46b0      	mov	r8, r6
 8000bd0:	0e24      	lsrs	r4, r4, #24
 8000bd2:	004e      	lsls	r6, r1, #1
 8000bd4:	0992      	lsrs	r2, r2, #6
 8000bd6:	001f      	movs	r7, r3
 8000bd8:	0020      	movs	r0, r4
 8000bda:	4692      	mov	sl, r2
 8000bdc:	0fed      	lsrs	r5, r5, #31
 8000bde:	0e36      	lsrs	r6, r6, #24
 8000be0:	0fc9      	lsrs	r1, r1, #31
 8000be2:	2eff      	cmp	r6, #255	; 0xff
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x34>
 8000be6:	e07f      	b.n	8000ce8 <__aeabi_fsub+0x134>
 8000be8:	2201      	movs	r2, #1
 8000bea:	4051      	eors	r1, r2
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d051      	beq.n	8000c94 <__aeabi_fsub+0xe0>
 8000bf0:	1ba2      	subs	r2, r4, r6
 8000bf2:	4691      	mov	r9, r2
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	dc00      	bgt.n	8000bfa <__aeabi_fsub+0x46>
 8000bf8:	e07e      	b.n	8000cf8 <__aeabi_fsub+0x144>
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fsub+0x4c>
 8000bfe:	e099      	b.n	8000d34 <__aeabi_fsub+0x180>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fsub+0x52>
 8000c04:	e08c      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	4652      	mov	r2, sl
 8000c0a:	04db      	lsls	r3, r3, #19
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	4692      	mov	sl, r2
 8000c10:	464a      	mov	r2, r9
 8000c12:	2301      	movs	r3, #1
 8000c14:	2a1b      	cmp	r2, #27
 8000c16:	dc08      	bgt.n	8000c2a <__aeabi_fsub+0x76>
 8000c18:	4653      	mov	r3, sl
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	40d3      	lsrs	r3, r2
 8000c1e:	1a89      	subs	r1, r1, r2
 8000c20:	4652      	mov	r2, sl
 8000c22:	408a      	lsls	r2, r1
 8000c24:	1e51      	subs	r1, r2, #1
 8000c26:	418a      	sbcs	r2, r1
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	4662      	mov	r2, ip
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	015a      	lsls	r2, r3, #5
 8000c30:	d400      	bmi.n	8000c34 <__aeabi_fsub+0x80>
 8000c32:	e0f3      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	099e      	lsrs	r6, r3, #6
 8000c38:	0030      	movs	r0, r6
 8000c3a:	f002 f867 	bl	8002d0c <__clzsi2>
 8000c3e:	3805      	subs	r0, #5
 8000c40:	4086      	lsls	r6, r0
 8000c42:	4284      	cmp	r4, r0
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_fsub+0x94>
 8000c46:	e0f7      	b.n	8000e38 <__aeabi_fsub+0x284>
 8000c48:	0032      	movs	r2, r6
 8000c4a:	1b04      	subs	r4, r0, r4
 8000c4c:	2020      	movs	r0, #32
 8000c4e:	3401      	adds	r4, #1
 8000c50:	40e2      	lsrs	r2, r4
 8000c52:	1b04      	subs	r4, r0, r4
 8000c54:	40a6      	lsls	r6, r4
 8000c56:	0033      	movs	r3, r6
 8000c58:	1e5e      	subs	r6, r3, #1
 8000c5a:	41b3      	sbcs	r3, r6
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	075a      	lsls	r2, r3, #29
 8000c62:	d004      	beq.n	8000c6e <__aeabi_fsub+0xba>
 8000c64:	220f      	movs	r2, #15
 8000c66:	401a      	ands	r2, r3
 8000c68:	2a04      	cmp	r2, #4
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_fsub+0xba>
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	015a      	lsls	r2, r3, #5
 8000c70:	d400      	bmi.n	8000c74 <__aeabi_fsub+0xc0>
 8000c72:	e0d6      	b.n	8000e22 <__aeabi_fsub+0x26e>
 8000c74:	1c62      	adds	r2, r4, #1
 8000c76:	2cfe      	cmp	r4, #254	; 0xfe
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0xc8>
 8000c7a:	e0da      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	0a5f      	lsrs	r7, r3, #9
 8000c80:	b2d0      	uxtb	r0, r2
 8000c82:	05c0      	lsls	r0, r0, #23
 8000c84:	4338      	orrs	r0, r7
 8000c86:	07ed      	lsls	r5, r5, #31
 8000c88:	4328      	orrs	r0, r5
 8000c8a:	bce0      	pop	{r5, r6, r7}
 8000c8c:	46ba      	mov	sl, r7
 8000c8e:	46b1      	mov	r9, r6
 8000c90:	46a8      	mov	r8, r5
 8000c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c94:	1ba2      	subs	r2, r4, r6
 8000c96:	4691      	mov	r9, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	dd63      	ble.n	8000d64 <__aeabi_fsub+0x1b0>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_fsub+0xee>
 8000ca0:	e099      	b.n	8000dd6 <__aeabi_fsub+0x222>
 8000ca2:	2cff      	cmp	r4, #255	; 0xff
 8000ca4:	d03c      	beq.n	8000d20 <__aeabi_fsub+0x16c>
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	4652      	mov	r2, sl
 8000caa:	04db      	lsls	r3, r3, #19
 8000cac:	431a      	orrs	r2, r3
 8000cae:	4692      	mov	sl, r2
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	2a1b      	cmp	r2, #27
 8000cb6:	dc08      	bgt.n	8000cca <__aeabi_fsub+0x116>
 8000cb8:	4653      	mov	r3, sl
 8000cba:	2120      	movs	r1, #32
 8000cbc:	40d3      	lsrs	r3, r2
 8000cbe:	1a89      	subs	r1, r1, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	408a      	lsls	r2, r1
 8000cc4:	1e51      	subs	r1, r2, #1
 8000cc6:	418a      	sbcs	r2, r1
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	015a      	lsls	r2, r3, #5
 8000cce:	d400      	bmi.n	8000cd2 <__aeabi_fsub+0x11e>
 8000cd0:	e0a4      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000cd2:	3401      	adds	r4, #1
 8000cd4:	2cff      	cmp	r4, #255	; 0xff
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fsub+0x126>
 8000cd8:	e0ab      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4997      	ldr	r1, [pc, #604]	; (8000f3c <__aeabi_fsub+0x388>)
 8000cde:	401a      	ands	r2, r3
 8000ce0:	085b      	lsrs	r3, r3, #1
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	e7bb      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	d032      	beq.n	8000d52 <__aeabi_fsub+0x19e>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d035      	beq.n	8000d5c <__aeabi_fsub+0x1a8>
 8000cf0:	22ff      	movs	r2, #255	; 0xff
 8000cf2:	4252      	negs	r2, r2
 8000cf4:	4691      	mov	r9, r2
 8000cf6:	44a1      	add	r9, r4
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d051      	beq.n	8000da2 <__aeabi_fsub+0x1ee>
 8000cfe:	1b30      	subs	r0, r6, r4
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0x152>
 8000d04:	e09c      	b.n	8000e40 <__aeabi_fsub+0x28c>
 8000d06:	4663      	mov	r3, ip
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_fsub+0x15a>
 8000d0c:	e0df      	b.n	8000ece <__aeabi_fsub+0x31a>
 8000d0e:	3801      	subs	r0, #1
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x162>
 8000d14:	e0f7      	b.n	8000f06 <__aeabi_fsub+0x352>
 8000d16:	2eff      	cmp	r6, #255	; 0xff
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fsub+0x168>
 8000d1a:	e099      	b.n	8000e50 <__aeabi_fsub+0x29c>
 8000d1c:	000d      	movs	r5, r1
 8000d1e:	4643      	mov	r3, r8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fsub+0x172>
 8000d24:	e085      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000d26:	2780      	movs	r7, #128	; 0x80
 8000d28:	03ff      	lsls	r7, r7, #15
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	027f      	lsls	r7, r7, #9
 8000d2e:	20ff      	movs	r0, #255	; 0xff
 8000d30:	0a7f      	lsrs	r7, r7, #9
 8000d32:	e7a6      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000d34:	4652      	mov	r2, sl
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d074      	beq.n	8000e24 <__aeabi_fsub+0x270>
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	4690      	mov	r8, r2
 8000d40:	44c1      	add	r9, r8
 8000d42:	464a      	mov	r2, r9
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x196>
 8000d48:	e0c8      	b.n	8000edc <__aeabi_fsub+0x328>
 8000d4a:	2cff      	cmp	r4, #255	; 0xff
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x19c>
 8000d4e:	e75f      	b.n	8000c10 <__aeabi_fsub+0x5c>
 8000d50:	e7e6      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000d52:	2201      	movs	r2, #1
 8000d54:	4051      	eors	r1, r2
 8000d56:	42a9      	cmp	r1, r5
 8000d58:	d000      	beq.n	8000d5c <__aeabi_fsub+0x1a8>
 8000d5a:	e749      	b.n	8000bf0 <__aeabi_fsub+0x3c>
 8000d5c:	22ff      	movs	r2, #255	; 0xff
 8000d5e:	4252      	negs	r2, r2
 8000d60:	4691      	mov	r9, r2
 8000d62:	44a1      	add	r9, r4
 8000d64:	464a      	mov	r2, r9
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d043      	beq.n	8000df2 <__aeabi_fsub+0x23e>
 8000d6a:	1b31      	subs	r1, r6, r4
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fsub+0x1be>
 8000d70:	e08c      	b.n	8000e8c <__aeabi_fsub+0x2d8>
 8000d72:	2eff      	cmp	r6, #255	; 0xff
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x1c4>
 8000d76:	e092      	b.n	8000e9e <__aeabi_fsub+0x2ea>
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	4662      	mov	r2, ip
 8000d7c:	04db      	lsls	r3, r3, #19
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	4694      	mov	ip, r2
 8000d82:	2301      	movs	r3, #1
 8000d84:	291b      	cmp	r1, #27
 8000d86:	dc09      	bgt.n	8000d9c <__aeabi_fsub+0x1e8>
 8000d88:	2020      	movs	r0, #32
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	40cb      	lsrs	r3, r1
 8000d90:	1a41      	subs	r1, r0, r1
 8000d92:	408a      	lsls	r2, r1
 8000d94:	0011      	movs	r1, r2
 8000d96:	1e48      	subs	r0, r1, #1
 8000d98:	4181      	sbcs	r1, r0
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	0034      	movs	r4, r6
 8000d9e:	4453      	add	r3, sl
 8000da0:	e794      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000da2:	22fe      	movs	r2, #254	; 0xfe
 8000da4:	1c66      	adds	r6, r4, #1
 8000da6:	4232      	tst	r2, r6
 8000da8:	d164      	bne.n	8000e74 <__aeabi_fsub+0x2c0>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fsub+0x1fc>
 8000dae:	e082      	b.n	8000eb6 <__aeabi_fsub+0x302>
 8000db0:	4663      	mov	r3, ip
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d100      	bne.n	8000db8 <__aeabi_fsub+0x204>
 8000db6:	e0ab      	b.n	8000f10 <__aeabi_fsub+0x35c>
 8000db8:	4653      	mov	r3, sl
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x20c>
 8000dbe:	e760      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	4652      	mov	r2, sl
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	d400      	bmi.n	8000dcc <__aeabi_fsub+0x218>
 8000dca:	e0aa      	b.n	8000f22 <__aeabi_fsub+0x36e>
 8000dcc:	4663      	mov	r3, ip
 8000dce:	4652      	mov	r2, sl
 8000dd0:	000d      	movs	r5, r1
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	e744      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000dd6:	4652      	mov	r2, sl
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d023      	beq.n	8000e24 <__aeabi_fsub+0x270>
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4252      	negs	r2, r2
 8000de0:	4690      	mov	r8, r2
 8000de2:	44c1      	add	r9, r8
 8000de4:	464a      	mov	r2, r9
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d075      	beq.n	8000ed6 <__aeabi_fsub+0x322>
 8000dea:	2cff      	cmp	r4, #255	; 0xff
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fsub+0x23c>
 8000dee:	e75f      	b.n	8000cb0 <__aeabi_fsub+0xfc>
 8000df0:	e796      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000df2:	26fe      	movs	r6, #254	; 0xfe
 8000df4:	3401      	adds	r4, #1
 8000df6:	4226      	tst	r6, r4
 8000df8:	d153      	bne.n	8000ea2 <__aeabi_fsub+0x2ee>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d172      	bne.n	8000ee4 <__aeabi_fsub+0x330>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_fsub+0x252>
 8000e04:	e093      	b.n	8000f2e <__aeabi_fsub+0x37a>
 8000e06:	4653      	mov	r3, sl
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fsub+0x25a>
 8000e0c:	e739      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e0e:	4463      	add	r3, ip
 8000e10:	2400      	movs	r4, #0
 8000e12:	015a      	lsls	r2, r3, #5
 8000e14:	d502      	bpl.n	8000e1c <__aeabi_fsub+0x268>
 8000e16:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <__aeabi_fsub+0x38c>)
 8000e18:	3401      	adds	r4, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	075a      	lsls	r2, r3, #29
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_fsub+0x26e>
 8000e20:	e720      	b.n	8000c64 <__aeabi_fsub+0xb0>
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	2cff      	cmp	r4, #255	; 0xff
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x276>
 8000e28:	e77a      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000e2a:	025b      	lsls	r3, r3, #9
 8000e2c:	0a5f      	lsrs	r7, r3, #9
 8000e2e:	b2e0      	uxtb	r0, r4
 8000e30:	e727      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	2700      	movs	r7, #0
 8000e36:	e724      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <__aeabi_fsub+0x38c>)
 8000e3a:	1a24      	subs	r4, r4, r0
 8000e3c:	4033      	ands	r3, r6
 8000e3e:	e70f      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000e40:	2eff      	cmp	r6, #255	; 0xff
 8000e42:	d100      	bne.n	8000e46 <__aeabi_fsub+0x292>
 8000e44:	e76a      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	4662      	mov	r2, ip
 8000e4a:	04db      	lsls	r3, r3, #19
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	4694      	mov	ip, r2
 8000e50:	2301      	movs	r3, #1
 8000e52:	281b      	cmp	r0, #27
 8000e54:	dc09      	bgt.n	8000e6a <__aeabi_fsub+0x2b6>
 8000e56:	2420      	movs	r4, #32
 8000e58:	4663      	mov	r3, ip
 8000e5a:	4662      	mov	r2, ip
 8000e5c:	40c3      	lsrs	r3, r0
 8000e5e:	1a20      	subs	r0, r4, r0
 8000e60:	4082      	lsls	r2, r0
 8000e62:	0010      	movs	r0, r2
 8000e64:	1e44      	subs	r4, r0, #1
 8000e66:	41a0      	sbcs	r0, r4
 8000e68:	4303      	orrs	r3, r0
 8000e6a:	4652      	mov	r2, sl
 8000e6c:	000d      	movs	r5, r1
 8000e6e:	0034      	movs	r4, r6
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	e6dc      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000e74:	4663      	mov	r3, ip
 8000e76:	4652      	mov	r2, sl
 8000e78:	1a9e      	subs	r6, r3, r2
 8000e7a:	0173      	lsls	r3, r6, #5
 8000e7c:	d417      	bmi.n	8000eae <__aeabi_fsub+0x2fa>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d000      	beq.n	8000e84 <__aeabi_fsub+0x2d0>
 8000e82:	e6d9      	b.n	8000c38 <__aeabi_fsub+0x84>
 8000e84:	2500      	movs	r5, #0
 8000e86:	2000      	movs	r0, #0
 8000e88:	2700      	movs	r7, #0
 8000e8a:	e6fa      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e8c:	4663      	mov	r3, ip
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d044      	beq.n	8000f1c <__aeabi_fsub+0x368>
 8000e92:	3901      	subs	r1, #1
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d04c      	beq.n	8000f32 <__aeabi_fsub+0x37e>
 8000e98:	2eff      	cmp	r6, #255	; 0xff
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x2ea>
 8000e9c:	e771      	b.n	8000d82 <__aeabi_fsub+0x1ce>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	e73e      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000ea2:	2cff      	cmp	r4, #255	; 0xff
 8000ea4:	d0c5      	beq.n	8000e32 <__aeabi_fsub+0x27e>
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	4462      	add	r2, ip
 8000eaa:	0853      	lsrs	r3, r2, #1
 8000eac:	e7b6      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	000d      	movs	r5, r1
 8000eb2:	1ad6      	subs	r6, r2, r3
 8000eb4:	e6c0      	b.n	8000c38 <__aeabi_fsub+0x84>
 8000eb6:	4662      	mov	r2, ip
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d116      	bne.n	8000eea <__aeabi_fsub+0x336>
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fsub+0x310>
 8000ec2:	e72b      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000ec4:	2780      	movs	r7, #128	; 0x80
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	20ff      	movs	r0, #255	; 0xff
 8000eca:	03ff      	lsls	r7, r7, #15
 8000ecc:	e6d9      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000ece:	000d      	movs	r5, r1
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	0034      	movs	r4, r6
 8000ed4:	e7a6      	b.n	8000e24 <__aeabi_fsub+0x270>
 8000ed6:	4653      	mov	r3, sl
 8000ed8:	4463      	add	r3, ip
 8000eda:	e6f7      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000edc:	4663      	mov	r3, ip
 8000ede:	4652      	mov	r2, sl
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	e6a4      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000ee4:	4662      	mov	r2, ip
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	d0d9      	beq.n	8000e9e <__aeabi_fsub+0x2ea>
 8000eea:	4652      	mov	r2, sl
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x33e>
 8000ef0:	e716      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	03d2      	lsls	r2, r2, #15
 8000ef6:	4213      	tst	r3, r2
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x348>
 8000efa:	e711      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000efc:	4640      	mov	r0, r8
 8000efe:	4210      	tst	r0, r2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x350>
 8000f02:	e70d      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000f04:	e70a      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000f06:	4652      	mov	r2, sl
 8000f08:	000d      	movs	r5, r1
 8000f0a:	0034      	movs	r4, r6
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	e68e      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000f10:	4653      	mov	r3, sl
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <__aeabi_fsub+0x374>
 8000f16:	000d      	movs	r5, r1
 8000f18:	4647      	mov	r7, r8
 8000f1a:	e6b2      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	0034      	movs	r4, r6
 8000f20:	e780      	b.n	8000e24 <__aeabi_fsub+0x270>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d000      	beq.n	8000f28 <__aeabi_fsub+0x374>
 8000f26:	e779      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000f28:	2500      	movs	r5, #0
 8000f2a:	2700      	movs	r7, #0
 8000f2c:	e6a9      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f2e:	4647      	mov	r7, r8
 8000f30:	e6a7      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f32:	4653      	mov	r3, sl
 8000f34:	0034      	movs	r4, r6
 8000f36:	4463      	add	r3, ip
 8000f38:	e6c8      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	7dffffff 	.word	0x7dffffff
 8000f40:	fbffffff 	.word	0xfbffffff

08000f44 <__aeabi_f2iz>:
 8000f44:	0241      	lsls	r1, r0, #9
 8000f46:	0042      	lsls	r2, r0, #1
 8000f48:	0fc3      	lsrs	r3, r0, #31
 8000f4a:	0a49      	lsrs	r1, r1, #9
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	0e12      	lsrs	r2, r2, #24
 8000f50:	2a7e      	cmp	r2, #126	; 0x7e
 8000f52:	d903      	bls.n	8000f5c <__aeabi_f2iz+0x18>
 8000f54:	2a9d      	cmp	r2, #157	; 0x9d
 8000f56:	d902      	bls.n	8000f5e <__aeabi_f2iz+0x1a>
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <__aeabi_f2iz+0x3c>)
 8000f5a:	1898      	adds	r0, r3, r2
 8000f5c:	4770      	bx	lr
 8000f5e:	2080      	movs	r0, #128	; 0x80
 8000f60:	0400      	lsls	r0, r0, #16
 8000f62:	4301      	orrs	r1, r0
 8000f64:	2a95      	cmp	r2, #149	; 0x95
 8000f66:	dc07      	bgt.n	8000f78 <__aeabi_f2iz+0x34>
 8000f68:	2096      	movs	r0, #150	; 0x96
 8000f6a:	1a82      	subs	r2, r0, r2
 8000f6c:	40d1      	lsrs	r1, r2
 8000f6e:	4248      	negs	r0, r1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f3      	bne.n	8000f5c <__aeabi_f2iz+0x18>
 8000f74:	0008      	movs	r0, r1
 8000f76:	e7f1      	b.n	8000f5c <__aeabi_f2iz+0x18>
 8000f78:	3a96      	subs	r2, #150	; 0x96
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	e7f7      	b.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	7fffffff 	.word	0x7fffffff

08000f84 <__aeabi_i2f>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d013      	beq.n	8000fb2 <__aeabi_i2f+0x2e>
 8000f8a:	17c3      	asrs	r3, r0, #31
 8000f8c:	18c5      	adds	r5, r0, r3
 8000f8e:	405d      	eors	r5, r3
 8000f90:	0fc4      	lsrs	r4, r0, #31
 8000f92:	0028      	movs	r0, r5
 8000f94:	f001 feba 	bl	8002d0c <__clzsi2>
 8000f98:	239e      	movs	r3, #158	; 0x9e
 8000f9a:	0001      	movs	r1, r0
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	2b96      	cmp	r3, #150	; 0x96
 8000fa0:	dc0f      	bgt.n	8000fc2 <__aeabi_i2f+0x3e>
 8000fa2:	2808      	cmp	r0, #8
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_i2f+0x26>
 8000fa6:	3908      	subs	r1, #8
 8000fa8:	408d      	lsls	r5, r1
 8000faa:	026d      	lsls	r5, r5, #9
 8000fac:	0a6d      	lsrs	r5, r5, #9
 8000fae:	b2d8      	uxtb	r0, r3
 8000fb0:	e002      	b.n	8000fb8 <__aeabi_i2f+0x34>
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	05c0      	lsls	r0, r0, #23
 8000fba:	4328      	orrs	r0, r5
 8000fbc:	07e4      	lsls	r4, r4, #31
 8000fbe:	4320      	orrs	r0, r4
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
 8000fc2:	2b99      	cmp	r3, #153	; 0x99
 8000fc4:	dd0b      	ble.n	8000fde <__aeabi_i2f+0x5a>
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	002e      	movs	r6, r5
 8000fca:	1a12      	subs	r2, r2, r0
 8000fcc:	40d6      	lsrs	r6, r2
 8000fce:	0002      	movs	r2, r0
 8000fd0:	321b      	adds	r2, #27
 8000fd2:	4095      	lsls	r5, r2
 8000fd4:	0028      	movs	r0, r5
 8000fd6:	1e45      	subs	r5, r0, #1
 8000fd8:	41a8      	sbcs	r0, r5
 8000fda:	0035      	movs	r5, r6
 8000fdc:	4305      	orrs	r5, r0
 8000fde:	2905      	cmp	r1, #5
 8000fe0:	dd01      	ble.n	8000fe6 <__aeabi_i2f+0x62>
 8000fe2:	1f4a      	subs	r2, r1, #5
 8000fe4:	4095      	lsls	r5, r2
 8000fe6:	002a      	movs	r2, r5
 8000fe8:	4e08      	ldr	r6, [pc, #32]	; (800100c <__aeabi_i2f+0x88>)
 8000fea:	4032      	ands	r2, r6
 8000fec:	0768      	lsls	r0, r5, #29
 8000fee:	d009      	beq.n	8001004 <__aeabi_i2f+0x80>
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	4028      	ands	r0, r5
 8000ff4:	2804      	cmp	r0, #4
 8000ff6:	d005      	beq.n	8001004 <__aeabi_i2f+0x80>
 8000ff8:	3204      	adds	r2, #4
 8000ffa:	0150      	lsls	r0, r2, #5
 8000ffc:	d502      	bpl.n	8001004 <__aeabi_i2f+0x80>
 8000ffe:	239f      	movs	r3, #159	; 0x9f
 8001000:	4032      	ands	r2, r6
 8001002:	1a5b      	subs	r3, r3, r1
 8001004:	0192      	lsls	r2, r2, #6
 8001006:	0a55      	lsrs	r5, r2, #9
 8001008:	b2d8      	uxtb	r0, r3
 800100a:	e7d5      	b.n	8000fb8 <__aeabi_i2f+0x34>
 800100c:	fbffffff 	.word	0xfbffffff

08001010 <__aeabi_ui2f>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	1e05      	subs	r5, r0, #0
 8001014:	d00e      	beq.n	8001034 <__aeabi_ui2f+0x24>
 8001016:	f001 fe79 	bl	8002d0c <__clzsi2>
 800101a:	239e      	movs	r3, #158	; 0x9e
 800101c:	0004      	movs	r4, r0
 800101e:	1a1b      	subs	r3, r3, r0
 8001020:	2b96      	cmp	r3, #150	; 0x96
 8001022:	dc0c      	bgt.n	800103e <__aeabi_ui2f+0x2e>
 8001024:	2808      	cmp	r0, #8
 8001026:	dd01      	ble.n	800102c <__aeabi_ui2f+0x1c>
 8001028:	3c08      	subs	r4, #8
 800102a:	40a5      	lsls	r5, r4
 800102c:	026d      	lsls	r5, r5, #9
 800102e:	0a6d      	lsrs	r5, r5, #9
 8001030:	b2d8      	uxtb	r0, r3
 8001032:	e001      	b.n	8001038 <__aeabi_ui2f+0x28>
 8001034:	2000      	movs	r0, #0
 8001036:	2500      	movs	r5, #0
 8001038:	05c0      	lsls	r0, r0, #23
 800103a:	4328      	orrs	r0, r5
 800103c:	bd70      	pop	{r4, r5, r6, pc}
 800103e:	2b99      	cmp	r3, #153	; 0x99
 8001040:	dd09      	ble.n	8001056 <__aeabi_ui2f+0x46>
 8001042:	0002      	movs	r2, r0
 8001044:	0029      	movs	r1, r5
 8001046:	321b      	adds	r2, #27
 8001048:	4091      	lsls	r1, r2
 800104a:	1e4a      	subs	r2, r1, #1
 800104c:	4191      	sbcs	r1, r2
 800104e:	2205      	movs	r2, #5
 8001050:	1a12      	subs	r2, r2, r0
 8001052:	40d5      	lsrs	r5, r2
 8001054:	430d      	orrs	r5, r1
 8001056:	2c05      	cmp	r4, #5
 8001058:	dd01      	ble.n	800105e <__aeabi_ui2f+0x4e>
 800105a:	1f62      	subs	r2, r4, #5
 800105c:	4095      	lsls	r5, r2
 800105e:	0029      	movs	r1, r5
 8001060:	4e08      	ldr	r6, [pc, #32]	; (8001084 <__aeabi_ui2f+0x74>)
 8001062:	4031      	ands	r1, r6
 8001064:	076a      	lsls	r2, r5, #29
 8001066:	d009      	beq.n	800107c <__aeabi_ui2f+0x6c>
 8001068:	200f      	movs	r0, #15
 800106a:	4028      	ands	r0, r5
 800106c:	2804      	cmp	r0, #4
 800106e:	d005      	beq.n	800107c <__aeabi_ui2f+0x6c>
 8001070:	3104      	adds	r1, #4
 8001072:	014a      	lsls	r2, r1, #5
 8001074:	d502      	bpl.n	800107c <__aeabi_ui2f+0x6c>
 8001076:	239f      	movs	r3, #159	; 0x9f
 8001078:	4031      	ands	r1, r6
 800107a:	1b1b      	subs	r3, r3, r4
 800107c:	0189      	lsls	r1, r1, #6
 800107e:	0a4d      	lsrs	r5, r1, #9
 8001080:	b2d8      	uxtb	r0, r3
 8001082:	e7d9      	b.n	8001038 <__aeabi_ui2f+0x28>
 8001084:	fbffffff 	.word	0xfbffffff

08001088 <__aeabi_dadd>:
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	464f      	mov	r7, r9
 800108c:	46d6      	mov	lr, sl
 800108e:	4646      	mov	r6, r8
 8001090:	000d      	movs	r5, r1
 8001092:	0001      	movs	r1, r0
 8001094:	0018      	movs	r0, r3
 8001096:	b5c0      	push	{r6, r7, lr}
 8001098:	0017      	movs	r7, r2
 800109a:	032b      	lsls	r3, r5, #12
 800109c:	0a5a      	lsrs	r2, r3, #9
 800109e:	0f4b      	lsrs	r3, r1, #29
 80010a0:	4313      	orrs	r3, r2
 80010a2:	00ca      	lsls	r2, r1, #3
 80010a4:	4691      	mov	r9, r2
 80010a6:	0302      	lsls	r2, r0, #12
 80010a8:	006e      	lsls	r6, r5, #1
 80010aa:	0041      	lsls	r1, r0, #1
 80010ac:	0a52      	lsrs	r2, r2, #9
 80010ae:	0fec      	lsrs	r4, r5, #31
 80010b0:	0f7d      	lsrs	r5, r7, #29
 80010b2:	4315      	orrs	r5, r2
 80010b4:	0d76      	lsrs	r6, r6, #21
 80010b6:	0d49      	lsrs	r1, r1, #21
 80010b8:	0fc0      	lsrs	r0, r0, #31
 80010ba:	4682      	mov	sl, r0
 80010bc:	46ac      	mov	ip, r5
 80010be:	00ff      	lsls	r7, r7, #3
 80010c0:	1a72      	subs	r2, r6, r1
 80010c2:	4284      	cmp	r4, r0
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x40>
 80010c6:	e098      	b.n	80011fa <__aeabi_dadd+0x172>
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	dc00      	bgt.n	80010ce <__aeabi_dadd+0x46>
 80010cc:	e081      	b.n	80011d2 <__aeabi_dadd+0x14a>
 80010ce:	2900      	cmp	r1, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0x4c>
 80010d2:	e0b6      	b.n	8001242 <__aeabi_dadd+0x1ba>
 80010d4:	49c9      	ldr	r1, [pc, #804]	; (80013fc <__aeabi_dadd+0x374>)
 80010d6:	428e      	cmp	r6, r1
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x54>
 80010da:	e172      	b.n	80013c2 <__aeabi_dadd+0x33a>
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0028      	movs	r0, r5
 80010e0:	0409      	lsls	r1, r1, #16
 80010e2:	4308      	orrs	r0, r1
 80010e4:	4684      	mov	ip, r0
 80010e6:	2a38      	cmp	r2, #56	; 0x38
 80010e8:	dd00      	ble.n	80010ec <__aeabi_dadd+0x64>
 80010ea:	e15e      	b.n	80013aa <__aeabi_dadd+0x322>
 80010ec:	2a1f      	cmp	r2, #31
 80010ee:	dd00      	ble.n	80010f2 <__aeabi_dadd+0x6a>
 80010f0:	e1ee      	b.n	80014d0 <__aeabi_dadd+0x448>
 80010f2:	2020      	movs	r0, #32
 80010f4:	0039      	movs	r1, r7
 80010f6:	4665      	mov	r5, ip
 80010f8:	1a80      	subs	r0, r0, r2
 80010fa:	4087      	lsls	r7, r0
 80010fc:	40d1      	lsrs	r1, r2
 80010fe:	4085      	lsls	r5, r0
 8001100:	430d      	orrs	r5, r1
 8001102:	0039      	movs	r1, r7
 8001104:	1e4f      	subs	r7, r1, #1
 8001106:	41b9      	sbcs	r1, r7
 8001108:	4667      	mov	r7, ip
 800110a:	40d7      	lsrs	r7, r2
 800110c:	4329      	orrs	r1, r5
 800110e:	1bdb      	subs	r3, r3, r7
 8001110:	464a      	mov	r2, r9
 8001112:	1a55      	subs	r5, r2, r1
 8001114:	45a9      	cmp	r9, r5
 8001116:	4189      	sbcs	r1, r1
 8001118:	4249      	negs	r1, r1
 800111a:	1a5b      	subs	r3, r3, r1
 800111c:	4698      	mov	r8, r3
 800111e:	4643      	mov	r3, r8
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	d400      	bmi.n	8001126 <__aeabi_dadd+0x9e>
 8001124:	e0cc      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001126:	4643      	mov	r3, r8
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	0a5b      	lsrs	r3, r3, #9
 800112c:	4698      	mov	r8, r3
 800112e:	4643      	mov	r3, r8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0xae>
 8001134:	e12c      	b.n	8001390 <__aeabi_dadd+0x308>
 8001136:	4640      	mov	r0, r8
 8001138:	f001 fde8 	bl	8002d0c <__clzsi2>
 800113c:	0001      	movs	r1, r0
 800113e:	3908      	subs	r1, #8
 8001140:	2220      	movs	r2, #32
 8001142:	0028      	movs	r0, r5
 8001144:	4643      	mov	r3, r8
 8001146:	1a52      	subs	r2, r2, r1
 8001148:	408b      	lsls	r3, r1
 800114a:	40d0      	lsrs	r0, r2
 800114c:	408d      	lsls	r5, r1
 800114e:	4303      	orrs	r3, r0
 8001150:	428e      	cmp	r6, r1
 8001152:	dd00      	ble.n	8001156 <__aeabi_dadd+0xce>
 8001154:	e117      	b.n	8001386 <__aeabi_dadd+0x2fe>
 8001156:	1b8e      	subs	r6, r1, r6
 8001158:	1c72      	adds	r2, r6, #1
 800115a:	2a1f      	cmp	r2, #31
 800115c:	dd00      	ble.n	8001160 <__aeabi_dadd+0xd8>
 800115e:	e1a7      	b.n	80014b0 <__aeabi_dadd+0x428>
 8001160:	2120      	movs	r1, #32
 8001162:	0018      	movs	r0, r3
 8001164:	002e      	movs	r6, r5
 8001166:	1a89      	subs	r1, r1, r2
 8001168:	408d      	lsls	r5, r1
 800116a:	4088      	lsls	r0, r1
 800116c:	40d6      	lsrs	r6, r2
 800116e:	40d3      	lsrs	r3, r2
 8001170:	1e69      	subs	r1, r5, #1
 8001172:	418d      	sbcs	r5, r1
 8001174:	4330      	orrs	r0, r6
 8001176:	4698      	mov	r8, r3
 8001178:	2600      	movs	r6, #0
 800117a:	4305      	orrs	r5, r0
 800117c:	076b      	lsls	r3, r5, #29
 800117e:	d009      	beq.n	8001194 <__aeabi_dadd+0x10c>
 8001180:	230f      	movs	r3, #15
 8001182:	402b      	ands	r3, r5
 8001184:	2b04      	cmp	r3, #4
 8001186:	d005      	beq.n	8001194 <__aeabi_dadd+0x10c>
 8001188:	1d2b      	adds	r3, r5, #4
 800118a:	42ab      	cmp	r3, r5
 800118c:	41ad      	sbcs	r5, r5
 800118e:	426d      	negs	r5, r5
 8001190:	44a8      	add	r8, r5
 8001192:	001d      	movs	r5, r3
 8001194:	4643      	mov	r3, r8
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	d400      	bmi.n	800119c <__aeabi_dadd+0x114>
 800119a:	e094      	b.n	80012c6 <__aeabi_dadd+0x23e>
 800119c:	4b97      	ldr	r3, [pc, #604]	; (80013fc <__aeabi_dadd+0x374>)
 800119e:	1c72      	adds	r2, r6, #1
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dadd+0x11e>
 80011a4:	e09d      	b.n	80012e2 <__aeabi_dadd+0x25a>
 80011a6:	4641      	mov	r1, r8
 80011a8:	4b95      	ldr	r3, [pc, #596]	; (8001400 <__aeabi_dadd+0x378>)
 80011aa:	08ed      	lsrs	r5, r5, #3
 80011ac:	4019      	ands	r1, r3
 80011ae:	000b      	movs	r3, r1
 80011b0:	0552      	lsls	r2, r2, #21
 80011b2:	0749      	lsls	r1, r1, #29
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	4329      	orrs	r1, r5
 80011b8:	0b1b      	lsrs	r3, r3, #12
 80011ba:	0d52      	lsrs	r2, r2, #21
 80011bc:	0512      	lsls	r2, r2, #20
 80011be:	4313      	orrs	r3, r2
 80011c0:	07e4      	lsls	r4, r4, #31
 80011c2:	4323      	orrs	r3, r4
 80011c4:	0008      	movs	r0, r1
 80011c6:	0019      	movs	r1, r3
 80011c8:	bce0      	pop	{r5, r6, r7}
 80011ca:	46ba      	mov	sl, r7
 80011cc:	46b1      	mov	r9, r6
 80011ce:	46a8      	mov	r8, r5
 80011d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d043      	beq.n	800125e <__aeabi_dadd+0x1d6>
 80011d6:	1b8a      	subs	r2, r1, r6
 80011d8:	2e00      	cmp	r6, #0
 80011da:	d000      	beq.n	80011de <__aeabi_dadd+0x156>
 80011dc:	e12a      	b.n	8001434 <__aeabi_dadd+0x3ac>
 80011de:	464c      	mov	r4, r9
 80011e0:	431c      	orrs	r4, r3
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x15e>
 80011e4:	e1d1      	b.n	800158a <__aeabi_dadd+0x502>
 80011e6:	1e54      	subs	r4, r2, #1
 80011e8:	2a01      	cmp	r2, #1
 80011ea:	d100      	bne.n	80011ee <__aeabi_dadd+0x166>
 80011ec:	e21f      	b.n	800162e <__aeabi_dadd+0x5a6>
 80011ee:	4d83      	ldr	r5, [pc, #524]	; (80013fc <__aeabi_dadd+0x374>)
 80011f0:	42aa      	cmp	r2, r5
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x16e>
 80011f4:	e272      	b.n	80016dc <__aeabi_dadd+0x654>
 80011f6:	0022      	movs	r2, r4
 80011f8:	e123      	b.n	8001442 <__aeabi_dadd+0x3ba>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	dc00      	bgt.n	8001200 <__aeabi_dadd+0x178>
 80011fe:	e098      	b.n	8001332 <__aeabi_dadd+0x2aa>
 8001200:	2900      	cmp	r1, #0
 8001202:	d042      	beq.n	800128a <__aeabi_dadd+0x202>
 8001204:	497d      	ldr	r1, [pc, #500]	; (80013fc <__aeabi_dadd+0x374>)
 8001206:	428e      	cmp	r6, r1
 8001208:	d100      	bne.n	800120c <__aeabi_dadd+0x184>
 800120a:	e0da      	b.n	80013c2 <__aeabi_dadd+0x33a>
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0028      	movs	r0, r5
 8001210:	0409      	lsls	r1, r1, #16
 8001212:	4308      	orrs	r0, r1
 8001214:	4684      	mov	ip, r0
 8001216:	2a38      	cmp	r2, #56	; 0x38
 8001218:	dd00      	ble.n	800121c <__aeabi_dadd+0x194>
 800121a:	e129      	b.n	8001470 <__aeabi_dadd+0x3e8>
 800121c:	2a1f      	cmp	r2, #31
 800121e:	dc00      	bgt.n	8001222 <__aeabi_dadd+0x19a>
 8001220:	e187      	b.n	8001532 <__aeabi_dadd+0x4aa>
 8001222:	0011      	movs	r1, r2
 8001224:	4665      	mov	r5, ip
 8001226:	3920      	subs	r1, #32
 8001228:	40cd      	lsrs	r5, r1
 800122a:	2a20      	cmp	r2, #32
 800122c:	d004      	beq.n	8001238 <__aeabi_dadd+0x1b0>
 800122e:	2040      	movs	r0, #64	; 0x40
 8001230:	4661      	mov	r1, ip
 8001232:	1a82      	subs	r2, r0, r2
 8001234:	4091      	lsls	r1, r2
 8001236:	430f      	orrs	r7, r1
 8001238:	0039      	movs	r1, r7
 800123a:	1e4f      	subs	r7, r1, #1
 800123c:	41b9      	sbcs	r1, r7
 800123e:	430d      	orrs	r5, r1
 8001240:	e11b      	b.n	800147a <__aeabi_dadd+0x3f2>
 8001242:	0029      	movs	r1, r5
 8001244:	4339      	orrs	r1, r7
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x1c2>
 8001248:	e0b5      	b.n	80013b6 <__aeabi_dadd+0x32e>
 800124a:	1e51      	subs	r1, r2, #1
 800124c:	2a01      	cmp	r2, #1
 800124e:	d100      	bne.n	8001252 <__aeabi_dadd+0x1ca>
 8001250:	e1ab      	b.n	80015aa <__aeabi_dadd+0x522>
 8001252:	486a      	ldr	r0, [pc, #424]	; (80013fc <__aeabi_dadd+0x374>)
 8001254:	4282      	cmp	r2, r0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1d2>
 8001258:	e1b2      	b.n	80015c0 <__aeabi_dadd+0x538>
 800125a:	000a      	movs	r2, r1
 800125c:	e743      	b.n	80010e6 <__aeabi_dadd+0x5e>
 800125e:	4969      	ldr	r1, [pc, #420]	; (8001404 <__aeabi_dadd+0x37c>)
 8001260:	1c75      	adds	r5, r6, #1
 8001262:	420d      	tst	r5, r1
 8001264:	d000      	beq.n	8001268 <__aeabi_dadd+0x1e0>
 8001266:	e0cf      	b.n	8001408 <__aeabi_dadd+0x380>
 8001268:	2e00      	cmp	r6, #0
 800126a:	d000      	beq.n	800126e <__aeabi_dadd+0x1e6>
 800126c:	e193      	b.n	8001596 <__aeabi_dadd+0x50e>
 800126e:	4649      	mov	r1, r9
 8001270:	4319      	orrs	r1, r3
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x1ee>
 8001274:	e1d1      	b.n	800161a <__aeabi_dadd+0x592>
 8001276:	4661      	mov	r1, ip
 8001278:	4339      	orrs	r1, r7
 800127a:	d000      	beq.n	800127e <__aeabi_dadd+0x1f6>
 800127c:	e1e3      	b.n	8001646 <__aeabi_dadd+0x5be>
 800127e:	4649      	mov	r1, r9
 8001280:	0758      	lsls	r0, r3, #29
 8001282:	08c9      	lsrs	r1, r1, #3
 8001284:	4301      	orrs	r1, r0
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	e026      	b.n	80012d8 <__aeabi_dadd+0x250>
 800128a:	0029      	movs	r1, r5
 800128c:	4339      	orrs	r1, r7
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x20a>
 8001290:	e091      	b.n	80013b6 <__aeabi_dadd+0x32e>
 8001292:	1e51      	subs	r1, r2, #1
 8001294:	2a01      	cmp	r2, #1
 8001296:	d005      	beq.n	80012a4 <__aeabi_dadd+0x21c>
 8001298:	4858      	ldr	r0, [pc, #352]	; (80013fc <__aeabi_dadd+0x374>)
 800129a:	4282      	cmp	r2, r0
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x218>
 800129e:	e18f      	b.n	80015c0 <__aeabi_dadd+0x538>
 80012a0:	000a      	movs	r2, r1
 80012a2:	e7b8      	b.n	8001216 <__aeabi_dadd+0x18e>
 80012a4:	003d      	movs	r5, r7
 80012a6:	444d      	add	r5, r9
 80012a8:	454d      	cmp	r5, r9
 80012aa:	4189      	sbcs	r1, r1
 80012ac:	4463      	add	r3, ip
 80012ae:	4698      	mov	r8, r3
 80012b0:	4249      	negs	r1, r1
 80012b2:	4488      	add	r8, r1
 80012b4:	4643      	mov	r3, r8
 80012b6:	2602      	movs	r6, #2
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	d500      	bpl.n	80012be <__aeabi_dadd+0x236>
 80012bc:	e0eb      	b.n	8001496 <__aeabi_dadd+0x40e>
 80012be:	3e01      	subs	r6, #1
 80012c0:	076b      	lsls	r3, r5, #29
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dadd+0x23e>
 80012c4:	e75c      	b.n	8001180 <__aeabi_dadd+0xf8>
 80012c6:	4643      	mov	r3, r8
 80012c8:	08e9      	lsrs	r1, r5, #3
 80012ca:	075a      	lsls	r2, r3, #29
 80012cc:	4311      	orrs	r1, r2
 80012ce:	0032      	movs	r2, r6
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	484a      	ldr	r0, [pc, #296]	; (80013fc <__aeabi_dadd+0x374>)
 80012d4:	4282      	cmp	r2, r0
 80012d6:	d021      	beq.n	800131c <__aeabi_dadd+0x294>
 80012d8:	031b      	lsls	r3, r3, #12
 80012da:	0552      	lsls	r2, r2, #21
 80012dc:	0b1b      	lsrs	r3, r3, #12
 80012de:	0d52      	lsrs	r2, r2, #21
 80012e0:	e76c      	b.n	80011bc <__aeabi_dadd+0x134>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	e769      	b.n	80011bc <__aeabi_dadd+0x134>
 80012e8:	002a      	movs	r2, r5
 80012ea:	433a      	orrs	r2, r7
 80012ec:	d069      	beq.n	80013c2 <__aeabi_dadd+0x33a>
 80012ee:	464a      	mov	r2, r9
 80012f0:	0758      	lsls	r0, r3, #29
 80012f2:	08d1      	lsrs	r1, r2, #3
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	031b      	lsls	r3, r3, #12
 80012fa:	4308      	orrs	r0, r1
 80012fc:	421a      	tst	r2, r3
 80012fe:	d007      	beq.n	8001310 <__aeabi_dadd+0x288>
 8001300:	0029      	movs	r1, r5
 8001302:	08ed      	lsrs	r5, r5, #3
 8001304:	421d      	tst	r5, r3
 8001306:	d103      	bne.n	8001310 <__aeabi_dadd+0x288>
 8001308:	002a      	movs	r2, r5
 800130a:	08ff      	lsrs	r7, r7, #3
 800130c:	0748      	lsls	r0, r1, #29
 800130e:	4338      	orrs	r0, r7
 8001310:	0f43      	lsrs	r3, r0, #29
 8001312:	00c1      	lsls	r1, r0, #3
 8001314:	075b      	lsls	r3, r3, #29
 8001316:	08c9      	lsrs	r1, r1, #3
 8001318:	4319      	orrs	r1, r3
 800131a:	0013      	movs	r3, r2
 800131c:	000a      	movs	r2, r1
 800131e:	431a      	orrs	r2, r3
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x29c>
 8001322:	e213      	b.n	800174c <__aeabi_dadd+0x6c4>
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0312      	lsls	r2, r2, #12
 8001328:	4313      	orrs	r3, r2
 800132a:	031b      	lsls	r3, r3, #12
 800132c:	4a33      	ldr	r2, [pc, #204]	; (80013fc <__aeabi_dadd+0x374>)
 800132e:	0b1b      	lsrs	r3, r3, #12
 8001330:	e744      	b.n	80011bc <__aeabi_dadd+0x134>
 8001332:	2a00      	cmp	r2, #0
 8001334:	d04b      	beq.n	80013ce <__aeabi_dadd+0x346>
 8001336:	1b8a      	subs	r2, r1, r6
 8001338:	2e00      	cmp	r6, #0
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x2b6>
 800133c:	e0e7      	b.n	800150e <__aeabi_dadd+0x486>
 800133e:	482f      	ldr	r0, [pc, #188]	; (80013fc <__aeabi_dadd+0x374>)
 8001340:	4281      	cmp	r1, r0
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x2be>
 8001344:	e195      	b.n	8001672 <__aeabi_dadd+0x5ea>
 8001346:	2080      	movs	r0, #128	; 0x80
 8001348:	0400      	lsls	r0, r0, #16
 800134a:	4303      	orrs	r3, r0
 800134c:	2a38      	cmp	r2, #56	; 0x38
 800134e:	dd00      	ble.n	8001352 <__aeabi_dadd+0x2ca>
 8001350:	e143      	b.n	80015da <__aeabi_dadd+0x552>
 8001352:	2a1f      	cmp	r2, #31
 8001354:	dd00      	ble.n	8001358 <__aeabi_dadd+0x2d0>
 8001356:	e1db      	b.n	8001710 <__aeabi_dadd+0x688>
 8001358:	2020      	movs	r0, #32
 800135a:	001d      	movs	r5, r3
 800135c:	464e      	mov	r6, r9
 800135e:	1a80      	subs	r0, r0, r2
 8001360:	4085      	lsls	r5, r0
 8001362:	40d6      	lsrs	r6, r2
 8001364:	4335      	orrs	r5, r6
 8001366:	464e      	mov	r6, r9
 8001368:	4086      	lsls	r6, r0
 800136a:	0030      	movs	r0, r6
 800136c:	40d3      	lsrs	r3, r2
 800136e:	1e46      	subs	r6, r0, #1
 8001370:	41b0      	sbcs	r0, r6
 8001372:	449c      	add	ip, r3
 8001374:	4305      	orrs	r5, r0
 8001376:	19ed      	adds	r5, r5, r7
 8001378:	42bd      	cmp	r5, r7
 800137a:	419b      	sbcs	r3, r3
 800137c:	425b      	negs	r3, r3
 800137e:	4463      	add	r3, ip
 8001380:	4698      	mov	r8, r3
 8001382:	000e      	movs	r6, r1
 8001384:	e07f      	b.n	8001486 <__aeabi_dadd+0x3fe>
 8001386:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <__aeabi_dadd+0x378>)
 8001388:	1a76      	subs	r6, r6, r1
 800138a:	4013      	ands	r3, r2
 800138c:	4698      	mov	r8, r3
 800138e:	e6f5      	b.n	800117c <__aeabi_dadd+0xf4>
 8001390:	0028      	movs	r0, r5
 8001392:	f001 fcbb 	bl	8002d0c <__clzsi2>
 8001396:	0001      	movs	r1, r0
 8001398:	3118      	adds	r1, #24
 800139a:	291f      	cmp	r1, #31
 800139c:	dc00      	bgt.n	80013a0 <__aeabi_dadd+0x318>
 800139e:	e6cf      	b.n	8001140 <__aeabi_dadd+0xb8>
 80013a0:	002b      	movs	r3, r5
 80013a2:	3808      	subs	r0, #8
 80013a4:	4083      	lsls	r3, r0
 80013a6:	2500      	movs	r5, #0
 80013a8:	e6d2      	b.n	8001150 <__aeabi_dadd+0xc8>
 80013aa:	4662      	mov	r2, ip
 80013ac:	433a      	orrs	r2, r7
 80013ae:	0011      	movs	r1, r2
 80013b0:	1e4f      	subs	r7, r1, #1
 80013b2:	41b9      	sbcs	r1, r7
 80013b4:	e6ac      	b.n	8001110 <__aeabi_dadd+0x88>
 80013b6:	4649      	mov	r1, r9
 80013b8:	0758      	lsls	r0, r3, #29
 80013ba:	08c9      	lsrs	r1, r1, #3
 80013bc:	4301      	orrs	r1, r0
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	e787      	b.n	80012d2 <__aeabi_dadd+0x24a>
 80013c2:	4649      	mov	r1, r9
 80013c4:	075a      	lsls	r2, r3, #29
 80013c6:	08c9      	lsrs	r1, r1, #3
 80013c8:	4311      	orrs	r1, r2
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e7a6      	b.n	800131c <__aeabi_dadd+0x294>
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <__aeabi_dadd+0x37c>)
 80013d0:	1c70      	adds	r0, r6, #1
 80013d2:	4208      	tst	r0, r1
 80013d4:	d000      	beq.n	80013d8 <__aeabi_dadd+0x350>
 80013d6:	e0bb      	b.n	8001550 <__aeabi_dadd+0x4c8>
 80013d8:	2e00      	cmp	r6, #0
 80013da:	d000      	beq.n	80013de <__aeabi_dadd+0x356>
 80013dc:	e114      	b.n	8001608 <__aeabi_dadd+0x580>
 80013de:	4649      	mov	r1, r9
 80013e0:	4319      	orrs	r1, r3
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x35e>
 80013e4:	e175      	b.n	80016d2 <__aeabi_dadd+0x64a>
 80013e6:	0029      	movs	r1, r5
 80013e8:	4339      	orrs	r1, r7
 80013ea:	d000      	beq.n	80013ee <__aeabi_dadd+0x366>
 80013ec:	e17e      	b.n	80016ec <__aeabi_dadd+0x664>
 80013ee:	4649      	mov	r1, r9
 80013f0:	0758      	lsls	r0, r3, #29
 80013f2:	08c9      	lsrs	r1, r1, #3
 80013f4:	4301      	orrs	r1, r0
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	e76e      	b.n	80012d8 <__aeabi_dadd+0x250>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	000007ff 	.word	0x000007ff
 8001400:	ff7fffff 	.word	0xff7fffff
 8001404:	000007fe 	.word	0x000007fe
 8001408:	4649      	mov	r1, r9
 800140a:	1bcd      	subs	r5, r1, r7
 800140c:	4661      	mov	r1, ip
 800140e:	1a58      	subs	r0, r3, r1
 8001410:	45a9      	cmp	r9, r5
 8001412:	4189      	sbcs	r1, r1
 8001414:	4249      	negs	r1, r1
 8001416:	4688      	mov	r8, r1
 8001418:	0001      	movs	r1, r0
 800141a:	4640      	mov	r0, r8
 800141c:	1a09      	subs	r1, r1, r0
 800141e:	4688      	mov	r8, r1
 8001420:	0209      	lsls	r1, r1, #8
 8001422:	d500      	bpl.n	8001426 <__aeabi_dadd+0x39e>
 8001424:	e0a6      	b.n	8001574 <__aeabi_dadd+0x4ec>
 8001426:	4641      	mov	r1, r8
 8001428:	4329      	orrs	r1, r5
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3a6>
 800142c:	e67f      	b.n	800112e <__aeabi_dadd+0xa6>
 800142e:	2300      	movs	r3, #0
 8001430:	2400      	movs	r4, #0
 8001432:	e751      	b.n	80012d8 <__aeabi_dadd+0x250>
 8001434:	4cc7      	ldr	r4, [pc, #796]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001436:	42a1      	cmp	r1, r4
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x3b4>
 800143a:	e0c7      	b.n	80015cc <__aeabi_dadd+0x544>
 800143c:	2480      	movs	r4, #128	; 0x80
 800143e:	0424      	lsls	r4, r4, #16
 8001440:	4323      	orrs	r3, r4
 8001442:	2a38      	cmp	r2, #56	; 0x38
 8001444:	dc54      	bgt.n	80014f0 <__aeabi_dadd+0x468>
 8001446:	2a1f      	cmp	r2, #31
 8001448:	dd00      	ble.n	800144c <__aeabi_dadd+0x3c4>
 800144a:	e0cc      	b.n	80015e6 <__aeabi_dadd+0x55e>
 800144c:	2420      	movs	r4, #32
 800144e:	4648      	mov	r0, r9
 8001450:	1aa4      	subs	r4, r4, r2
 8001452:	001d      	movs	r5, r3
 8001454:	464e      	mov	r6, r9
 8001456:	40a0      	lsls	r0, r4
 8001458:	40d6      	lsrs	r6, r2
 800145a:	40a5      	lsls	r5, r4
 800145c:	0004      	movs	r4, r0
 800145e:	40d3      	lsrs	r3, r2
 8001460:	4662      	mov	r2, ip
 8001462:	4335      	orrs	r5, r6
 8001464:	1e66      	subs	r6, r4, #1
 8001466:	41b4      	sbcs	r4, r6
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	469c      	mov	ip, r3
 800146c:	4325      	orrs	r5, r4
 800146e:	e044      	b.n	80014fa <__aeabi_dadd+0x472>
 8001470:	4662      	mov	r2, ip
 8001472:	433a      	orrs	r2, r7
 8001474:	0015      	movs	r5, r2
 8001476:	1e6f      	subs	r7, r5, #1
 8001478:	41bd      	sbcs	r5, r7
 800147a:	444d      	add	r5, r9
 800147c:	454d      	cmp	r5, r9
 800147e:	4189      	sbcs	r1, r1
 8001480:	4249      	negs	r1, r1
 8001482:	4688      	mov	r8, r1
 8001484:	4498      	add	r8, r3
 8001486:	4643      	mov	r3, r8
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	d400      	bmi.n	800148e <__aeabi_dadd+0x406>
 800148c:	e718      	b.n	80012c0 <__aeabi_dadd+0x238>
 800148e:	4bb1      	ldr	r3, [pc, #708]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001490:	3601      	adds	r6, #1
 8001492:	429e      	cmp	r6, r3
 8001494:	d049      	beq.n	800152a <__aeabi_dadd+0x4a2>
 8001496:	4642      	mov	r2, r8
 8001498:	4baf      	ldr	r3, [pc, #700]	; (8001758 <__aeabi_dadd+0x6d0>)
 800149a:	2101      	movs	r1, #1
 800149c:	401a      	ands	r2, r3
 800149e:	0013      	movs	r3, r2
 80014a0:	086a      	lsrs	r2, r5, #1
 80014a2:	400d      	ands	r5, r1
 80014a4:	4315      	orrs	r5, r2
 80014a6:	07d9      	lsls	r1, r3, #31
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	4698      	mov	r8, r3
 80014ac:	430d      	orrs	r5, r1
 80014ae:	e665      	b.n	800117c <__aeabi_dadd+0xf4>
 80014b0:	0018      	movs	r0, r3
 80014b2:	3e1f      	subs	r6, #31
 80014b4:	40f0      	lsrs	r0, r6
 80014b6:	2a20      	cmp	r2, #32
 80014b8:	d003      	beq.n	80014c2 <__aeabi_dadd+0x43a>
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	1a8a      	subs	r2, r1, r2
 80014be:	4093      	lsls	r3, r2
 80014c0:	431d      	orrs	r5, r3
 80014c2:	1e69      	subs	r1, r5, #1
 80014c4:	418d      	sbcs	r5, r1
 80014c6:	2300      	movs	r3, #0
 80014c8:	2600      	movs	r6, #0
 80014ca:	4698      	mov	r8, r3
 80014cc:	4305      	orrs	r5, r0
 80014ce:	e6f7      	b.n	80012c0 <__aeabi_dadd+0x238>
 80014d0:	0011      	movs	r1, r2
 80014d2:	4665      	mov	r5, ip
 80014d4:	3920      	subs	r1, #32
 80014d6:	40cd      	lsrs	r5, r1
 80014d8:	2a20      	cmp	r2, #32
 80014da:	d004      	beq.n	80014e6 <__aeabi_dadd+0x45e>
 80014dc:	2040      	movs	r0, #64	; 0x40
 80014de:	4661      	mov	r1, ip
 80014e0:	1a82      	subs	r2, r0, r2
 80014e2:	4091      	lsls	r1, r2
 80014e4:	430f      	orrs	r7, r1
 80014e6:	0039      	movs	r1, r7
 80014e8:	1e4f      	subs	r7, r1, #1
 80014ea:	41b9      	sbcs	r1, r7
 80014ec:	4329      	orrs	r1, r5
 80014ee:	e60f      	b.n	8001110 <__aeabi_dadd+0x88>
 80014f0:	464a      	mov	r2, r9
 80014f2:	4313      	orrs	r3, r2
 80014f4:	001d      	movs	r5, r3
 80014f6:	1e6b      	subs	r3, r5, #1
 80014f8:	419d      	sbcs	r5, r3
 80014fa:	1b7d      	subs	r5, r7, r5
 80014fc:	42af      	cmp	r7, r5
 80014fe:	419b      	sbcs	r3, r3
 8001500:	4662      	mov	r2, ip
 8001502:	425b      	negs	r3, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4698      	mov	r8, r3
 8001508:	4654      	mov	r4, sl
 800150a:	000e      	movs	r6, r1
 800150c:	e607      	b.n	800111e <__aeabi_dadd+0x96>
 800150e:	4648      	mov	r0, r9
 8001510:	4318      	orrs	r0, r3
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x48e>
 8001514:	e0b3      	b.n	800167e <__aeabi_dadd+0x5f6>
 8001516:	1e50      	subs	r0, r2, #1
 8001518:	2a01      	cmp	r2, #1
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x496>
 800151c:	e10d      	b.n	800173a <__aeabi_dadd+0x6b2>
 800151e:	4d8d      	ldr	r5, [pc, #564]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001520:	42aa      	cmp	r2, r5
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x49e>
 8001524:	e0a5      	b.n	8001672 <__aeabi_dadd+0x5ea>
 8001526:	0002      	movs	r2, r0
 8001528:	e710      	b.n	800134c <__aeabi_dadd+0x2c4>
 800152a:	0032      	movs	r2, r6
 800152c:	2300      	movs	r3, #0
 800152e:	2100      	movs	r1, #0
 8001530:	e644      	b.n	80011bc <__aeabi_dadd+0x134>
 8001532:	2120      	movs	r1, #32
 8001534:	0038      	movs	r0, r7
 8001536:	1a89      	subs	r1, r1, r2
 8001538:	4665      	mov	r5, ip
 800153a:	408f      	lsls	r7, r1
 800153c:	408d      	lsls	r5, r1
 800153e:	40d0      	lsrs	r0, r2
 8001540:	1e79      	subs	r1, r7, #1
 8001542:	418f      	sbcs	r7, r1
 8001544:	4305      	orrs	r5, r0
 8001546:	433d      	orrs	r5, r7
 8001548:	4667      	mov	r7, ip
 800154a:	40d7      	lsrs	r7, r2
 800154c:	19db      	adds	r3, r3, r7
 800154e:	e794      	b.n	800147a <__aeabi_dadd+0x3f2>
 8001550:	4a80      	ldr	r2, [pc, #512]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001552:	4290      	cmp	r0, r2
 8001554:	d100      	bne.n	8001558 <__aeabi_dadd+0x4d0>
 8001556:	e0ec      	b.n	8001732 <__aeabi_dadd+0x6aa>
 8001558:	0039      	movs	r1, r7
 800155a:	4449      	add	r1, r9
 800155c:	4549      	cmp	r1, r9
 800155e:	4192      	sbcs	r2, r2
 8001560:	4463      	add	r3, ip
 8001562:	4252      	negs	r2, r2
 8001564:	189b      	adds	r3, r3, r2
 8001566:	07dd      	lsls	r5, r3, #31
 8001568:	0849      	lsrs	r1, r1, #1
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	4698      	mov	r8, r3
 800156e:	0006      	movs	r6, r0
 8001570:	430d      	orrs	r5, r1
 8001572:	e6a5      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001574:	464a      	mov	r2, r9
 8001576:	1abd      	subs	r5, r7, r2
 8001578:	42af      	cmp	r7, r5
 800157a:	4189      	sbcs	r1, r1
 800157c:	4662      	mov	r2, ip
 800157e:	4249      	negs	r1, r1
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	4698      	mov	r8, r3
 8001586:	4654      	mov	r4, sl
 8001588:	e5d1      	b.n	800112e <__aeabi_dadd+0xa6>
 800158a:	076c      	lsls	r4, r5, #29
 800158c:	08f9      	lsrs	r1, r7, #3
 800158e:	4321      	orrs	r1, r4
 8001590:	08eb      	lsrs	r3, r5, #3
 8001592:	0004      	movs	r4, r0
 8001594:	e69d      	b.n	80012d2 <__aeabi_dadd+0x24a>
 8001596:	464a      	mov	r2, r9
 8001598:	431a      	orrs	r2, r3
 800159a:	d175      	bne.n	8001688 <__aeabi_dadd+0x600>
 800159c:	4661      	mov	r1, ip
 800159e:	4339      	orrs	r1, r7
 80015a0:	d114      	bne.n	80015cc <__aeabi_dadd+0x544>
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	2400      	movs	r4, #0
 80015a6:	031b      	lsls	r3, r3, #12
 80015a8:	e6bc      	b.n	8001324 <__aeabi_dadd+0x29c>
 80015aa:	464a      	mov	r2, r9
 80015ac:	1bd5      	subs	r5, r2, r7
 80015ae:	45a9      	cmp	r9, r5
 80015b0:	4189      	sbcs	r1, r1
 80015b2:	4662      	mov	r2, ip
 80015b4:	4249      	negs	r1, r1
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	1a5b      	subs	r3, r3, r1
 80015ba:	4698      	mov	r8, r3
 80015bc:	2601      	movs	r6, #1
 80015be:	e5ae      	b.n	800111e <__aeabi_dadd+0x96>
 80015c0:	464a      	mov	r2, r9
 80015c2:	08d1      	lsrs	r1, r2, #3
 80015c4:	075a      	lsls	r2, r3, #29
 80015c6:	4311      	orrs	r1, r2
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	e6a7      	b.n	800131c <__aeabi_dadd+0x294>
 80015cc:	4663      	mov	r3, ip
 80015ce:	08f9      	lsrs	r1, r7, #3
 80015d0:	075a      	lsls	r2, r3, #29
 80015d2:	4654      	mov	r4, sl
 80015d4:	4311      	orrs	r1, r2
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	e6a0      	b.n	800131c <__aeabi_dadd+0x294>
 80015da:	464a      	mov	r2, r9
 80015dc:	4313      	orrs	r3, r2
 80015de:	001d      	movs	r5, r3
 80015e0:	1e6b      	subs	r3, r5, #1
 80015e2:	419d      	sbcs	r5, r3
 80015e4:	e6c7      	b.n	8001376 <__aeabi_dadd+0x2ee>
 80015e6:	0014      	movs	r4, r2
 80015e8:	001e      	movs	r6, r3
 80015ea:	3c20      	subs	r4, #32
 80015ec:	40e6      	lsrs	r6, r4
 80015ee:	2a20      	cmp	r2, #32
 80015f0:	d005      	beq.n	80015fe <__aeabi_dadd+0x576>
 80015f2:	2440      	movs	r4, #64	; 0x40
 80015f4:	1aa2      	subs	r2, r4, r2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	464a      	mov	r2, r9
 80015fa:	431a      	orrs	r2, r3
 80015fc:	4691      	mov	r9, r2
 80015fe:	464d      	mov	r5, r9
 8001600:	1e6b      	subs	r3, r5, #1
 8001602:	419d      	sbcs	r5, r3
 8001604:	4335      	orrs	r5, r6
 8001606:	e778      	b.n	80014fa <__aeabi_dadd+0x472>
 8001608:	464a      	mov	r2, r9
 800160a:	431a      	orrs	r2, r3
 800160c:	d000      	beq.n	8001610 <__aeabi_dadd+0x588>
 800160e:	e66b      	b.n	80012e8 <__aeabi_dadd+0x260>
 8001610:	076b      	lsls	r3, r5, #29
 8001612:	08f9      	lsrs	r1, r7, #3
 8001614:	4319      	orrs	r1, r3
 8001616:	08eb      	lsrs	r3, r5, #3
 8001618:	e680      	b.n	800131c <__aeabi_dadd+0x294>
 800161a:	4661      	mov	r1, ip
 800161c:	4339      	orrs	r1, r7
 800161e:	d054      	beq.n	80016ca <__aeabi_dadd+0x642>
 8001620:	4663      	mov	r3, ip
 8001622:	08f9      	lsrs	r1, r7, #3
 8001624:	075c      	lsls	r4, r3, #29
 8001626:	4321      	orrs	r1, r4
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	0004      	movs	r4, r0
 800162c:	e654      	b.n	80012d8 <__aeabi_dadd+0x250>
 800162e:	464a      	mov	r2, r9
 8001630:	1abd      	subs	r5, r7, r2
 8001632:	42af      	cmp	r7, r5
 8001634:	4189      	sbcs	r1, r1
 8001636:	4662      	mov	r2, ip
 8001638:	4249      	negs	r1, r1
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	1a5b      	subs	r3, r3, r1
 800163e:	4698      	mov	r8, r3
 8001640:	0004      	movs	r4, r0
 8001642:	2601      	movs	r6, #1
 8001644:	e56b      	b.n	800111e <__aeabi_dadd+0x96>
 8001646:	464a      	mov	r2, r9
 8001648:	1bd5      	subs	r5, r2, r7
 800164a:	45a9      	cmp	r9, r5
 800164c:	4189      	sbcs	r1, r1
 800164e:	4662      	mov	r2, ip
 8001650:	4249      	negs	r1, r1
 8001652:	1a9a      	subs	r2, r3, r2
 8001654:	1a52      	subs	r2, r2, r1
 8001656:	4690      	mov	r8, r2
 8001658:	0212      	lsls	r2, r2, #8
 800165a:	d532      	bpl.n	80016c2 <__aeabi_dadd+0x63a>
 800165c:	464a      	mov	r2, r9
 800165e:	1abd      	subs	r5, r7, r2
 8001660:	42af      	cmp	r7, r5
 8001662:	4189      	sbcs	r1, r1
 8001664:	4662      	mov	r2, ip
 8001666:	4249      	negs	r1, r1
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	1a5b      	subs	r3, r3, r1
 800166c:	4698      	mov	r8, r3
 800166e:	0004      	movs	r4, r0
 8001670:	e584      	b.n	800117c <__aeabi_dadd+0xf4>
 8001672:	4663      	mov	r3, ip
 8001674:	08f9      	lsrs	r1, r7, #3
 8001676:	075a      	lsls	r2, r3, #29
 8001678:	4311      	orrs	r1, r2
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	e64e      	b.n	800131c <__aeabi_dadd+0x294>
 800167e:	08f9      	lsrs	r1, r7, #3
 8001680:	0768      	lsls	r0, r5, #29
 8001682:	4301      	orrs	r1, r0
 8001684:	08eb      	lsrs	r3, r5, #3
 8001686:	e624      	b.n	80012d2 <__aeabi_dadd+0x24a>
 8001688:	4662      	mov	r2, ip
 800168a:	433a      	orrs	r2, r7
 800168c:	d100      	bne.n	8001690 <__aeabi_dadd+0x608>
 800168e:	e698      	b.n	80013c2 <__aeabi_dadd+0x33a>
 8001690:	464a      	mov	r2, r9
 8001692:	08d1      	lsrs	r1, r2, #3
 8001694:	075a      	lsls	r2, r3, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	08da      	lsrs	r2, r3, #3
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	031b      	lsls	r3, r3, #12
 800169e:	421a      	tst	r2, r3
 80016a0:	d008      	beq.n	80016b4 <__aeabi_dadd+0x62c>
 80016a2:	4660      	mov	r0, ip
 80016a4:	08c5      	lsrs	r5, r0, #3
 80016a6:	421d      	tst	r5, r3
 80016a8:	d104      	bne.n	80016b4 <__aeabi_dadd+0x62c>
 80016aa:	4654      	mov	r4, sl
 80016ac:	002a      	movs	r2, r5
 80016ae:	08f9      	lsrs	r1, r7, #3
 80016b0:	0743      	lsls	r3, r0, #29
 80016b2:	4319      	orrs	r1, r3
 80016b4:	0f4b      	lsrs	r3, r1, #29
 80016b6:	00c9      	lsls	r1, r1, #3
 80016b8:	075b      	lsls	r3, r3, #29
 80016ba:	08c9      	lsrs	r1, r1, #3
 80016bc:	4319      	orrs	r1, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	e62c      	b.n	800131c <__aeabi_dadd+0x294>
 80016c2:	4641      	mov	r1, r8
 80016c4:	4329      	orrs	r1, r5
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x642>
 80016c8:	e5fa      	b.n	80012c0 <__aeabi_dadd+0x238>
 80016ca:	2300      	movs	r3, #0
 80016cc:	000a      	movs	r2, r1
 80016ce:	2400      	movs	r4, #0
 80016d0:	e602      	b.n	80012d8 <__aeabi_dadd+0x250>
 80016d2:	076b      	lsls	r3, r5, #29
 80016d4:	08f9      	lsrs	r1, r7, #3
 80016d6:	4319      	orrs	r1, r3
 80016d8:	08eb      	lsrs	r3, r5, #3
 80016da:	e5fd      	b.n	80012d8 <__aeabi_dadd+0x250>
 80016dc:	4663      	mov	r3, ip
 80016de:	08f9      	lsrs	r1, r7, #3
 80016e0:	075b      	lsls	r3, r3, #29
 80016e2:	4319      	orrs	r1, r3
 80016e4:	4663      	mov	r3, ip
 80016e6:	0004      	movs	r4, r0
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	e617      	b.n	800131c <__aeabi_dadd+0x294>
 80016ec:	003d      	movs	r5, r7
 80016ee:	444d      	add	r5, r9
 80016f0:	4463      	add	r3, ip
 80016f2:	454d      	cmp	r5, r9
 80016f4:	4189      	sbcs	r1, r1
 80016f6:	4698      	mov	r8, r3
 80016f8:	4249      	negs	r1, r1
 80016fa:	4488      	add	r8, r1
 80016fc:	4643      	mov	r3, r8
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_dadd+0x67c>
 8001702:	e5dd      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001704:	4642      	mov	r2, r8
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <__aeabi_dadd+0x6d0>)
 8001708:	2601      	movs	r6, #1
 800170a:	401a      	ands	r2, r3
 800170c:	4690      	mov	r8, r2
 800170e:	e5d7      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001710:	0010      	movs	r0, r2
 8001712:	001e      	movs	r6, r3
 8001714:	3820      	subs	r0, #32
 8001716:	40c6      	lsrs	r6, r0
 8001718:	2a20      	cmp	r2, #32
 800171a:	d005      	beq.n	8001728 <__aeabi_dadd+0x6a0>
 800171c:	2040      	movs	r0, #64	; 0x40
 800171e:	1a82      	subs	r2, r0, r2
 8001720:	4093      	lsls	r3, r2
 8001722:	464a      	mov	r2, r9
 8001724:	431a      	orrs	r2, r3
 8001726:	4691      	mov	r9, r2
 8001728:	464d      	mov	r5, r9
 800172a:	1e6b      	subs	r3, r5, #1
 800172c:	419d      	sbcs	r5, r3
 800172e:	4335      	orrs	r5, r6
 8001730:	e621      	b.n	8001376 <__aeabi_dadd+0x2ee>
 8001732:	0002      	movs	r2, r0
 8001734:	2300      	movs	r3, #0
 8001736:	2100      	movs	r1, #0
 8001738:	e540      	b.n	80011bc <__aeabi_dadd+0x134>
 800173a:	464a      	mov	r2, r9
 800173c:	19d5      	adds	r5, r2, r7
 800173e:	42bd      	cmp	r5, r7
 8001740:	4189      	sbcs	r1, r1
 8001742:	4463      	add	r3, ip
 8001744:	4698      	mov	r8, r3
 8001746:	4249      	negs	r1, r1
 8001748:	4488      	add	r8, r1
 800174a:	e5b3      	b.n	80012b4 <__aeabi_dadd+0x22c>
 800174c:	2100      	movs	r1, #0
 800174e:	4a01      	ldr	r2, [pc, #4]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001750:	000b      	movs	r3, r1
 8001752:	e533      	b.n	80011bc <__aeabi_dadd+0x134>
 8001754:	000007ff 	.word	0x000007ff
 8001758:	ff7fffff 	.word	0xff7fffff

0800175c <__aeabi_ddiv>:
 800175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175e:	4657      	mov	r7, sl
 8001760:	464e      	mov	r6, r9
 8001762:	4645      	mov	r5, r8
 8001764:	46de      	mov	lr, fp
 8001766:	b5e0      	push	{r5, r6, r7, lr}
 8001768:	4681      	mov	r9, r0
 800176a:	0005      	movs	r5, r0
 800176c:	030c      	lsls	r4, r1, #12
 800176e:	0048      	lsls	r0, r1, #1
 8001770:	4692      	mov	sl, r2
 8001772:	001f      	movs	r7, r3
 8001774:	b085      	sub	sp, #20
 8001776:	0b24      	lsrs	r4, r4, #12
 8001778:	0d40      	lsrs	r0, r0, #21
 800177a:	0fce      	lsrs	r6, r1, #31
 800177c:	2800      	cmp	r0, #0
 800177e:	d059      	beq.n	8001834 <__aeabi_ddiv+0xd8>
 8001780:	4b87      	ldr	r3, [pc, #540]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001782:	4298      	cmp	r0, r3
 8001784:	d100      	bne.n	8001788 <__aeabi_ddiv+0x2c>
 8001786:	e098      	b.n	80018ba <__aeabi_ddiv+0x15e>
 8001788:	0f6b      	lsrs	r3, r5, #29
 800178a:	00e4      	lsls	r4, r4, #3
 800178c:	431c      	orrs	r4, r3
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	4323      	orrs	r3, r4
 8001794:	4698      	mov	r8, r3
 8001796:	4b83      	ldr	r3, [pc, #524]	; (80019a4 <__aeabi_ddiv+0x248>)
 8001798:	00ed      	lsls	r5, r5, #3
 800179a:	469b      	mov	fp, r3
 800179c:	2300      	movs	r3, #0
 800179e:	4699      	mov	r9, r3
 80017a0:	4483      	add	fp, r0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	033c      	lsls	r4, r7, #12
 80017a6:	007b      	lsls	r3, r7, #1
 80017a8:	4650      	mov	r0, sl
 80017aa:	0b24      	lsrs	r4, r4, #12
 80017ac:	0d5b      	lsrs	r3, r3, #21
 80017ae:	0fff      	lsrs	r7, r7, #31
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d067      	beq.n	8001884 <__aeabi_ddiv+0x128>
 80017b4:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <__aeabi_ddiv+0x244>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d018      	beq.n	80017ec <__aeabi_ddiv+0x90>
 80017ba:	497a      	ldr	r1, [pc, #488]	; (80019a4 <__aeabi_ddiv+0x248>)
 80017bc:	0f42      	lsrs	r2, r0, #29
 80017be:	468c      	mov	ip, r1
 80017c0:	00e4      	lsls	r4, r4, #3
 80017c2:	4659      	mov	r1, fp
 80017c4:	4314      	orrs	r4, r2
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	4463      	add	r3, ip
 80017ca:	0412      	lsls	r2, r2, #16
 80017cc:	1acb      	subs	r3, r1, r3
 80017ce:	4314      	orrs	r4, r2
 80017d0:	469b      	mov	fp, r3
 80017d2:	00c2      	lsls	r2, r0, #3
 80017d4:	2000      	movs	r0, #0
 80017d6:	0033      	movs	r3, r6
 80017d8:	407b      	eors	r3, r7
 80017da:	469a      	mov	sl, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	d900      	bls.n	80017e4 <__aeabi_ddiv+0x88>
 80017e2:	e0ef      	b.n	80019c4 <__aeabi_ddiv+0x268>
 80017e4:	4970      	ldr	r1, [pc, #448]	; (80019a8 <__aeabi_ddiv+0x24c>)
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	58cb      	ldr	r3, [r1, r3]
 80017ea:	469f      	mov	pc, r3
 80017ec:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <__aeabi_ddiv+0x250>)
 80017ee:	4652      	mov	r2, sl
 80017f0:	469c      	mov	ip, r3
 80017f2:	4322      	orrs	r2, r4
 80017f4:	44e3      	add	fp, ip
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d000      	beq.n	80017fc <__aeabi_ddiv+0xa0>
 80017fa:	e095      	b.n	8001928 <__aeabi_ddiv+0x1cc>
 80017fc:	4649      	mov	r1, r9
 80017fe:	2302      	movs	r3, #2
 8001800:	4319      	orrs	r1, r3
 8001802:	4689      	mov	r9, r1
 8001804:	2400      	movs	r4, #0
 8001806:	2002      	movs	r0, #2
 8001808:	e7e5      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 800180a:	2300      	movs	r3, #0
 800180c:	2400      	movs	r4, #0
 800180e:	2500      	movs	r5, #0
 8001810:	4652      	mov	r2, sl
 8001812:	051b      	lsls	r3, r3, #20
 8001814:	4323      	orrs	r3, r4
 8001816:	07d2      	lsls	r2, r2, #31
 8001818:	4313      	orrs	r3, r2
 800181a:	0028      	movs	r0, r5
 800181c:	0019      	movs	r1, r3
 800181e:	b005      	add	sp, #20
 8001820:	bcf0      	pop	{r4, r5, r6, r7}
 8001822:	46bb      	mov	fp, r7
 8001824:	46b2      	mov	sl, r6
 8001826:	46a9      	mov	r9, r5
 8001828:	46a0      	mov	r8, r4
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182c:	2400      	movs	r4, #0
 800182e:	2500      	movs	r5, #0
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001832:	e7ed      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001834:	464b      	mov	r3, r9
 8001836:	4323      	orrs	r3, r4
 8001838:	4698      	mov	r8, r3
 800183a:	d100      	bne.n	800183e <__aeabi_ddiv+0xe2>
 800183c:	e089      	b.n	8001952 <__aeabi_ddiv+0x1f6>
 800183e:	2c00      	cmp	r4, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_ddiv+0xe8>
 8001842:	e1e0      	b.n	8001c06 <__aeabi_ddiv+0x4aa>
 8001844:	0020      	movs	r0, r4
 8001846:	f001 fa61 	bl	8002d0c <__clzsi2>
 800184a:	0001      	movs	r1, r0
 800184c:	0002      	movs	r2, r0
 800184e:	390b      	subs	r1, #11
 8001850:	231d      	movs	r3, #29
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	4649      	mov	r1, r9
 8001856:	0010      	movs	r0, r2
 8001858:	40d9      	lsrs	r1, r3
 800185a:	3808      	subs	r0, #8
 800185c:	4084      	lsls	r4, r0
 800185e:	000b      	movs	r3, r1
 8001860:	464d      	mov	r5, r9
 8001862:	4323      	orrs	r3, r4
 8001864:	4698      	mov	r8, r3
 8001866:	4085      	lsls	r5, r0
 8001868:	4851      	ldr	r0, [pc, #324]	; (80019b0 <__aeabi_ddiv+0x254>)
 800186a:	033c      	lsls	r4, r7, #12
 800186c:	1a83      	subs	r3, r0, r2
 800186e:	469b      	mov	fp, r3
 8001870:	2300      	movs	r3, #0
 8001872:	4699      	mov	r9, r3
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	007b      	lsls	r3, r7, #1
 8001878:	4650      	mov	r0, sl
 800187a:	0b24      	lsrs	r4, r4, #12
 800187c:	0d5b      	lsrs	r3, r3, #21
 800187e:	0fff      	lsrs	r7, r7, #31
 8001880:	2b00      	cmp	r3, #0
 8001882:	d197      	bne.n	80017b4 <__aeabi_ddiv+0x58>
 8001884:	4652      	mov	r2, sl
 8001886:	4322      	orrs	r2, r4
 8001888:	d055      	beq.n	8001936 <__aeabi_ddiv+0x1da>
 800188a:	2c00      	cmp	r4, #0
 800188c:	d100      	bne.n	8001890 <__aeabi_ddiv+0x134>
 800188e:	e1ca      	b.n	8001c26 <__aeabi_ddiv+0x4ca>
 8001890:	0020      	movs	r0, r4
 8001892:	f001 fa3b 	bl	8002d0c <__clzsi2>
 8001896:	0002      	movs	r2, r0
 8001898:	3a0b      	subs	r2, #11
 800189a:	231d      	movs	r3, #29
 800189c:	0001      	movs	r1, r0
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	4652      	mov	r2, sl
 80018a2:	3908      	subs	r1, #8
 80018a4:	40da      	lsrs	r2, r3
 80018a6:	408c      	lsls	r4, r1
 80018a8:	4314      	orrs	r4, r2
 80018aa:	4652      	mov	r2, sl
 80018ac:	408a      	lsls	r2, r1
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <__aeabi_ddiv+0x258>)
 80018b0:	4458      	add	r0, fp
 80018b2:	469b      	mov	fp, r3
 80018b4:	4483      	add	fp, r0
 80018b6:	2000      	movs	r0, #0
 80018b8:	e78d      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 80018ba:	464b      	mov	r3, r9
 80018bc:	4323      	orrs	r3, r4
 80018be:	4698      	mov	r8, r3
 80018c0:	d140      	bne.n	8001944 <__aeabi_ddiv+0x1e8>
 80018c2:	2308      	movs	r3, #8
 80018c4:	4699      	mov	r9, r3
 80018c6:	3b06      	subs	r3, #6
 80018c8:	2500      	movs	r5, #0
 80018ca:	4683      	mov	fp, r0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	e769      	b.n	80017a4 <__aeabi_ddiv+0x48>
 80018d0:	46b2      	mov	sl, r6
 80018d2:	9b00      	ldr	r3, [sp, #0]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d0a9      	beq.n	800182c <__aeabi_ddiv+0xd0>
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d100      	bne.n	80018de <__aeabi_ddiv+0x182>
 80018dc:	e211      	b.n	8001d02 <__aeabi_ddiv+0x5a6>
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d093      	beq.n	800180a <__aeabi_ddiv+0xae>
 80018e2:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <__aeabi_ddiv+0x25c>)
 80018e4:	445a      	add	r2, fp
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	dc00      	bgt.n	80018ec <__aeabi_ddiv+0x190>
 80018ea:	e13c      	b.n	8001b66 <__aeabi_ddiv+0x40a>
 80018ec:	076b      	lsls	r3, r5, #29
 80018ee:	d000      	beq.n	80018f2 <__aeabi_ddiv+0x196>
 80018f0:	e1a7      	b.n	8001c42 <__aeabi_ddiv+0x4e6>
 80018f2:	08ed      	lsrs	r5, r5, #3
 80018f4:	4643      	mov	r3, r8
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	d506      	bpl.n	8001908 <__aeabi_ddiv+0x1ac>
 80018fa:	4642      	mov	r2, r8
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <__aeabi_ddiv+0x260>)
 80018fe:	401a      	ands	r2, r3
 8001900:	4690      	mov	r8, r2
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	00d2      	lsls	r2, r2, #3
 8001906:	445a      	add	r2, fp
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <__aeabi_ddiv+0x264>)
 800190a:	429a      	cmp	r2, r3
 800190c:	dc8e      	bgt.n	800182c <__aeabi_ddiv+0xd0>
 800190e:	4643      	mov	r3, r8
 8001910:	0552      	lsls	r2, r2, #21
 8001912:	0758      	lsls	r0, r3, #29
 8001914:	025c      	lsls	r4, r3, #9
 8001916:	4305      	orrs	r5, r0
 8001918:	0b24      	lsrs	r4, r4, #12
 800191a:	0d53      	lsrs	r3, r2, #21
 800191c:	e778      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800191e:	46ba      	mov	sl, r7
 8001920:	46a0      	mov	r8, r4
 8001922:	0015      	movs	r5, r2
 8001924:	9000      	str	r0, [sp, #0]
 8001926:	e7d4      	b.n	80018d2 <__aeabi_ddiv+0x176>
 8001928:	464a      	mov	r2, r9
 800192a:	2303      	movs	r3, #3
 800192c:	431a      	orrs	r2, r3
 800192e:	4691      	mov	r9, r2
 8001930:	2003      	movs	r0, #3
 8001932:	4652      	mov	r2, sl
 8001934:	e74f      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 8001936:	4649      	mov	r1, r9
 8001938:	2301      	movs	r3, #1
 800193a:	4319      	orrs	r1, r3
 800193c:	4689      	mov	r9, r1
 800193e:	2400      	movs	r4, #0
 8001940:	2001      	movs	r0, #1
 8001942:	e748      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 8001944:	230c      	movs	r3, #12
 8001946:	4699      	mov	r9, r3
 8001948:	3b09      	subs	r3, #9
 800194a:	46a0      	mov	r8, r4
 800194c:	4683      	mov	fp, r0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	e728      	b.n	80017a4 <__aeabi_ddiv+0x48>
 8001952:	2304      	movs	r3, #4
 8001954:	4699      	mov	r9, r3
 8001956:	2300      	movs	r3, #0
 8001958:	469b      	mov	fp, r3
 800195a:	3301      	adds	r3, #1
 800195c:	2500      	movs	r5, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	e720      	b.n	80017a4 <__aeabi_ddiv+0x48>
 8001962:	2300      	movs	r3, #0
 8001964:	2480      	movs	r4, #128	; 0x80
 8001966:	469a      	mov	sl, r3
 8001968:	2500      	movs	r5, #0
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <__aeabi_ddiv+0x244>)
 800196c:	0324      	lsls	r4, r4, #12
 800196e:	e74f      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	4641      	mov	r1, r8
 8001974:	031b      	lsls	r3, r3, #12
 8001976:	4219      	tst	r1, r3
 8001978:	d008      	beq.n	800198c <__aeabi_ddiv+0x230>
 800197a:	421c      	tst	r4, r3
 800197c:	d106      	bne.n	800198c <__aeabi_ddiv+0x230>
 800197e:	431c      	orrs	r4, r3
 8001980:	0324      	lsls	r4, r4, #12
 8001982:	46ba      	mov	sl, r7
 8001984:	0015      	movs	r5, r2
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001988:	0b24      	lsrs	r4, r4, #12
 800198a:	e741      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800198c:	2480      	movs	r4, #128	; 0x80
 800198e:	4643      	mov	r3, r8
 8001990:	0324      	lsls	r4, r4, #12
 8001992:	431c      	orrs	r4, r3
 8001994:	0324      	lsls	r4, r4, #12
 8001996:	46b2      	mov	sl, r6
 8001998:	4b01      	ldr	r3, [pc, #4]	; (80019a0 <__aeabi_ddiv+0x244>)
 800199a:	0b24      	lsrs	r4, r4, #12
 800199c:	e738      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	000007ff 	.word	0x000007ff
 80019a4:	fffffc01 	.word	0xfffffc01
 80019a8:	0801f634 	.word	0x0801f634
 80019ac:	fffff801 	.word	0xfffff801
 80019b0:	fffffc0d 	.word	0xfffffc0d
 80019b4:	000003f3 	.word	0x000003f3
 80019b8:	000003ff 	.word	0x000003ff
 80019bc:	feffffff 	.word	0xfeffffff
 80019c0:	000007fe 	.word	0x000007fe
 80019c4:	4544      	cmp	r4, r8
 80019c6:	d200      	bcs.n	80019ca <__aeabi_ddiv+0x26e>
 80019c8:	e116      	b.n	8001bf8 <__aeabi_ddiv+0x49c>
 80019ca:	d100      	bne.n	80019ce <__aeabi_ddiv+0x272>
 80019cc:	e111      	b.n	8001bf2 <__aeabi_ddiv+0x496>
 80019ce:	2301      	movs	r3, #1
 80019d0:	425b      	negs	r3, r3
 80019d2:	469c      	mov	ip, r3
 80019d4:	002e      	movs	r6, r5
 80019d6:	4640      	mov	r0, r8
 80019d8:	2500      	movs	r5, #0
 80019da:	44e3      	add	fp, ip
 80019dc:	0223      	lsls	r3, r4, #8
 80019de:	0e14      	lsrs	r4, r2, #24
 80019e0:	431c      	orrs	r4, r3
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	4699      	mov	r9, r3
 80019e6:	0423      	lsls	r3, r4, #16
 80019e8:	0c1f      	lsrs	r7, r3, #16
 80019ea:	0212      	lsls	r2, r2, #8
 80019ec:	4649      	mov	r1, r9
 80019ee:	9200      	str	r2, [sp, #0]
 80019f0:	9701      	str	r7, [sp, #4]
 80019f2:	f7fe fc21 	bl	8000238 <__aeabi_uidivmod>
 80019f6:	0002      	movs	r2, r0
 80019f8:	437a      	muls	r2, r7
 80019fa:	040b      	lsls	r3, r1, #16
 80019fc:	0c31      	lsrs	r1, r6, #16
 80019fe:	4680      	mov	r8, r0
 8001a00:	4319      	orrs	r1, r3
 8001a02:	428a      	cmp	r2, r1
 8001a04:	d90b      	bls.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a06:	2301      	movs	r3, #1
 8001a08:	425b      	negs	r3, r3
 8001a0a:	469c      	mov	ip, r3
 8001a0c:	1909      	adds	r1, r1, r4
 8001a0e:	44e0      	add	r8, ip
 8001a10:	428c      	cmp	r4, r1
 8001a12:	d804      	bhi.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a14:	428a      	cmp	r2, r1
 8001a16:	d902      	bls.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a18:	1e83      	subs	r3, r0, #2
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	1909      	adds	r1, r1, r4
 8001a1e:	1a88      	subs	r0, r1, r2
 8001a20:	4649      	mov	r1, r9
 8001a22:	f7fe fc09 	bl	8000238 <__aeabi_uidivmod>
 8001a26:	0409      	lsls	r1, r1, #16
 8001a28:	468c      	mov	ip, r1
 8001a2a:	0431      	lsls	r1, r6, #16
 8001a2c:	4666      	mov	r6, ip
 8001a2e:	9a01      	ldr	r2, [sp, #4]
 8001a30:	0c09      	lsrs	r1, r1, #16
 8001a32:	4342      	muls	r2, r0
 8001a34:	0003      	movs	r3, r0
 8001a36:	4331      	orrs	r1, r6
 8001a38:	428a      	cmp	r2, r1
 8001a3a:	d904      	bls.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001a3c:	1909      	adds	r1, r1, r4
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	428c      	cmp	r4, r1
 8001a42:	d800      	bhi.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001a44:	e111      	b.n	8001c6a <__aeabi_ddiv+0x50e>
 8001a46:	1a89      	subs	r1, r1, r2
 8001a48:	4642      	mov	r2, r8
 8001a4a:	9e00      	ldr	r6, [sp, #0]
 8001a4c:	0412      	lsls	r2, r2, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	0c33      	lsrs	r3, r6, #16
 8001a52:	001f      	movs	r7, r3
 8001a54:	0c10      	lsrs	r0, r2, #16
 8001a56:	4690      	mov	r8, r2
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	0413      	lsls	r3, r2, #16
 8001a5c:	0432      	lsls	r2, r6, #16
 8001a5e:	0c16      	lsrs	r6, r2, #16
 8001a60:	0032      	movs	r2, r6
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	435a      	muls	r2, r3
 8001a66:	9603      	str	r6, [sp, #12]
 8001a68:	437b      	muls	r3, r7
 8001a6a:	4346      	muls	r6, r0
 8001a6c:	4378      	muls	r0, r7
 8001a6e:	0c17      	lsrs	r7, r2, #16
 8001a70:	46bc      	mov	ip, r7
 8001a72:	199b      	adds	r3, r3, r6
 8001a74:	4463      	add	r3, ip
 8001a76:	429e      	cmp	r6, r3
 8001a78:	d903      	bls.n	8001a82 <__aeabi_ddiv+0x326>
 8001a7a:	2680      	movs	r6, #128	; 0x80
 8001a7c:	0276      	lsls	r6, r6, #9
 8001a7e:	46b4      	mov	ip, r6
 8001a80:	4460      	add	r0, ip
 8001a82:	0c1e      	lsrs	r6, r3, #16
 8001a84:	1830      	adds	r0, r6, r0
 8001a86:	0416      	lsls	r6, r2, #16
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	0c36      	lsrs	r6, r6, #16
 8001a8c:	199e      	adds	r6, r3, r6
 8001a8e:	4281      	cmp	r1, r0
 8001a90:	d200      	bcs.n	8001a94 <__aeabi_ddiv+0x338>
 8001a92:	e09c      	b.n	8001bce <__aeabi_ddiv+0x472>
 8001a94:	d100      	bne.n	8001a98 <__aeabi_ddiv+0x33c>
 8001a96:	e097      	b.n	8001bc8 <__aeabi_ddiv+0x46c>
 8001a98:	1bae      	subs	r6, r5, r6
 8001a9a:	1a09      	subs	r1, r1, r0
 8001a9c:	42b5      	cmp	r5, r6
 8001a9e:	4180      	sbcs	r0, r0
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	1a08      	subs	r0, r1, r0
 8001aa4:	4284      	cmp	r4, r0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_ddiv+0x34e>
 8001aa8:	e111      	b.n	8001cce <__aeabi_ddiv+0x572>
 8001aaa:	4649      	mov	r1, r9
 8001aac:	f7fe fbc4 	bl	8000238 <__aeabi_uidivmod>
 8001ab0:	9a01      	ldr	r2, [sp, #4]
 8001ab2:	040b      	lsls	r3, r1, #16
 8001ab4:	4342      	muls	r2, r0
 8001ab6:	0c31      	lsrs	r1, r6, #16
 8001ab8:	0005      	movs	r5, r0
 8001aba:	4319      	orrs	r1, r3
 8001abc:	428a      	cmp	r2, r1
 8001abe:	d907      	bls.n	8001ad0 <__aeabi_ddiv+0x374>
 8001ac0:	1909      	adds	r1, r1, r4
 8001ac2:	3d01      	subs	r5, #1
 8001ac4:	428c      	cmp	r4, r1
 8001ac6:	d803      	bhi.n	8001ad0 <__aeabi_ddiv+0x374>
 8001ac8:	428a      	cmp	r2, r1
 8001aca:	d901      	bls.n	8001ad0 <__aeabi_ddiv+0x374>
 8001acc:	1e85      	subs	r5, r0, #2
 8001ace:	1909      	adds	r1, r1, r4
 8001ad0:	1a88      	subs	r0, r1, r2
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	f7fe fbb0 	bl	8000238 <__aeabi_uidivmod>
 8001ad8:	0409      	lsls	r1, r1, #16
 8001ada:	468c      	mov	ip, r1
 8001adc:	0431      	lsls	r1, r6, #16
 8001ade:	4666      	mov	r6, ip
 8001ae0:	9a01      	ldr	r2, [sp, #4]
 8001ae2:	0c09      	lsrs	r1, r1, #16
 8001ae4:	4342      	muls	r2, r0
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	4331      	orrs	r1, r6
 8001aea:	428a      	cmp	r2, r1
 8001aec:	d907      	bls.n	8001afe <__aeabi_ddiv+0x3a2>
 8001aee:	1909      	adds	r1, r1, r4
 8001af0:	3b01      	subs	r3, #1
 8001af2:	428c      	cmp	r4, r1
 8001af4:	d803      	bhi.n	8001afe <__aeabi_ddiv+0x3a2>
 8001af6:	428a      	cmp	r2, r1
 8001af8:	d901      	bls.n	8001afe <__aeabi_ddiv+0x3a2>
 8001afa:	1e83      	subs	r3, r0, #2
 8001afc:	1909      	adds	r1, r1, r4
 8001afe:	9e03      	ldr	r6, [sp, #12]
 8001b00:	1a89      	subs	r1, r1, r2
 8001b02:	0032      	movs	r2, r6
 8001b04:	042d      	lsls	r5, r5, #16
 8001b06:	431d      	orrs	r5, r3
 8001b08:	9f02      	ldr	r7, [sp, #8]
 8001b0a:	042b      	lsls	r3, r5, #16
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	435a      	muls	r2, r3
 8001b10:	437b      	muls	r3, r7
 8001b12:	469c      	mov	ip, r3
 8001b14:	0c28      	lsrs	r0, r5, #16
 8001b16:	4346      	muls	r6, r0
 8001b18:	0c13      	lsrs	r3, r2, #16
 8001b1a:	44b4      	add	ip, r6
 8001b1c:	4463      	add	r3, ip
 8001b1e:	4378      	muls	r0, r7
 8001b20:	429e      	cmp	r6, r3
 8001b22:	d903      	bls.n	8001b2c <__aeabi_ddiv+0x3d0>
 8001b24:	2680      	movs	r6, #128	; 0x80
 8001b26:	0276      	lsls	r6, r6, #9
 8001b28:	46b4      	mov	ip, r6
 8001b2a:	4460      	add	r0, ip
 8001b2c:	0c1e      	lsrs	r6, r3, #16
 8001b2e:	0412      	lsls	r2, r2, #16
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	0c12      	lsrs	r2, r2, #16
 8001b34:	1830      	adds	r0, r6, r0
 8001b36:	189b      	adds	r3, r3, r2
 8001b38:	4281      	cmp	r1, r0
 8001b3a:	d306      	bcc.n	8001b4a <__aeabi_ddiv+0x3ee>
 8001b3c:	d002      	beq.n	8001b44 <__aeabi_ddiv+0x3e8>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	431d      	orrs	r5, r3
 8001b42:	e6ce      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x3ee>
 8001b48:	e6cb      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001b4a:	1861      	adds	r1, r4, r1
 8001b4c:	1e6e      	subs	r6, r5, #1
 8001b4e:	42a1      	cmp	r1, r4
 8001b50:	d200      	bcs.n	8001b54 <__aeabi_ddiv+0x3f8>
 8001b52:	e0a4      	b.n	8001c9e <__aeabi_ddiv+0x542>
 8001b54:	4281      	cmp	r1, r0
 8001b56:	d200      	bcs.n	8001b5a <__aeabi_ddiv+0x3fe>
 8001b58:	e0c9      	b.n	8001cee <__aeabi_ddiv+0x592>
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x402>
 8001b5c:	e0d9      	b.n	8001d12 <__aeabi_ddiv+0x5b6>
 8001b5e:	0035      	movs	r5, r6
 8001b60:	e7ed      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001b62:	2501      	movs	r5, #1
 8001b64:	426d      	negs	r5, r5
 8001b66:	2101      	movs	r1, #1
 8001b68:	1a89      	subs	r1, r1, r2
 8001b6a:	2938      	cmp	r1, #56	; 0x38
 8001b6c:	dd00      	ble.n	8001b70 <__aeabi_ddiv+0x414>
 8001b6e:	e64c      	b.n	800180a <__aeabi_ddiv+0xae>
 8001b70:	291f      	cmp	r1, #31
 8001b72:	dc00      	bgt.n	8001b76 <__aeabi_ddiv+0x41a>
 8001b74:	e07f      	b.n	8001c76 <__aeabi_ddiv+0x51a>
 8001b76:	231f      	movs	r3, #31
 8001b78:	425b      	negs	r3, r3
 8001b7a:	1a9a      	subs	r2, r3, r2
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	40d3      	lsrs	r3, r2
 8001b80:	2920      	cmp	r1, #32
 8001b82:	d004      	beq.n	8001b8e <__aeabi_ddiv+0x432>
 8001b84:	4644      	mov	r4, r8
 8001b86:	4a65      	ldr	r2, [pc, #404]	; (8001d1c <__aeabi_ddiv+0x5c0>)
 8001b88:	445a      	add	r2, fp
 8001b8a:	4094      	lsls	r4, r2
 8001b8c:	4325      	orrs	r5, r4
 8001b8e:	1e6a      	subs	r2, r5, #1
 8001b90:	4195      	sbcs	r5, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	432b      	orrs	r3, r5
 8001b96:	0015      	movs	r5, r2
 8001b98:	2400      	movs	r4, #0
 8001b9a:	401d      	ands	r5, r3
 8001b9c:	421a      	tst	r2, r3
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_ddiv+0x446>
 8001ba0:	e0a1      	b.n	8001ce6 <__aeabi_ddiv+0x58a>
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	2400      	movs	r4, #0
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	2a04      	cmp	r2, #4
 8001baa:	d100      	bne.n	8001bae <__aeabi_ddiv+0x452>
 8001bac:	e098      	b.n	8001ce0 <__aeabi_ddiv+0x584>
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	419b      	sbcs	r3, r3
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	18e4      	adds	r4, r4, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	0222      	lsls	r2, r4, #8
 8001bbc:	d400      	bmi.n	8001bc0 <__aeabi_ddiv+0x464>
 8001bbe:	e08f      	b.n	8001ce0 <__aeabi_ddiv+0x584>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	e623      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001bc8:	42b5      	cmp	r5, r6
 8001bca:	d300      	bcc.n	8001bce <__aeabi_ddiv+0x472>
 8001bcc:	e764      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001bce:	4643      	mov	r3, r8
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	9b00      	ldr	r3, [sp, #0]
 8001bd4:	469c      	mov	ip, r3
 8001bd6:	4465      	add	r5, ip
 8001bd8:	001f      	movs	r7, r3
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	419b      	sbcs	r3, r3
 8001bde:	425b      	negs	r3, r3
 8001be0:	191b      	adds	r3, r3, r4
 8001be2:	18c9      	adds	r1, r1, r3
 8001be4:	428c      	cmp	r4, r1
 8001be6:	d23a      	bcs.n	8001c5e <__aeabi_ddiv+0x502>
 8001be8:	4288      	cmp	r0, r1
 8001bea:	d863      	bhi.n	8001cb4 <__aeabi_ddiv+0x558>
 8001bec:	d060      	beq.n	8001cb0 <__aeabi_ddiv+0x554>
 8001bee:	4690      	mov	r8, r2
 8001bf0:	e752      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001bf2:	42aa      	cmp	r2, r5
 8001bf4:	d900      	bls.n	8001bf8 <__aeabi_ddiv+0x49c>
 8001bf6:	e6ea      	b.n	80019ce <__aeabi_ddiv+0x272>
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	07de      	lsls	r6, r3, #31
 8001bfc:	0858      	lsrs	r0, r3, #1
 8001bfe:	086b      	lsrs	r3, r5, #1
 8001c00:	431e      	orrs	r6, r3
 8001c02:	07ed      	lsls	r5, r5, #31
 8001c04:	e6ea      	b.n	80019dc <__aeabi_ddiv+0x280>
 8001c06:	4648      	mov	r0, r9
 8001c08:	f001 f880 	bl	8002d0c <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	0002      	movs	r2, r0
 8001c10:	3115      	adds	r1, #21
 8001c12:	3220      	adds	r2, #32
 8001c14:	291c      	cmp	r1, #28
 8001c16:	dc00      	bgt.n	8001c1a <__aeabi_ddiv+0x4be>
 8001c18:	e61a      	b.n	8001850 <__aeabi_ddiv+0xf4>
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	3808      	subs	r0, #8
 8001c1e:	4083      	lsls	r3, r0
 8001c20:	2500      	movs	r5, #0
 8001c22:	4698      	mov	r8, r3
 8001c24:	e620      	b.n	8001868 <__aeabi_ddiv+0x10c>
 8001c26:	f001 f871 	bl	8002d0c <__clzsi2>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	3215      	adds	r2, #21
 8001c30:	3020      	adds	r0, #32
 8001c32:	2a1c      	cmp	r2, #28
 8001c34:	dc00      	bgt.n	8001c38 <__aeabi_ddiv+0x4dc>
 8001c36:	e630      	b.n	800189a <__aeabi_ddiv+0x13e>
 8001c38:	4654      	mov	r4, sl
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	409c      	lsls	r4, r3
 8001c40:	e635      	b.n	80018ae <__aeabi_ddiv+0x152>
 8001c42:	230f      	movs	r3, #15
 8001c44:	402b      	ands	r3, r5
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d100      	bne.n	8001c4c <__aeabi_ddiv+0x4f0>
 8001c4a:	e652      	b.n	80018f2 <__aeabi_ddiv+0x196>
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	425b      	negs	r3, r3
 8001c50:	42ab      	cmp	r3, r5
 8001c52:	419b      	sbcs	r3, r3
 8001c54:	3504      	adds	r5, #4
 8001c56:	425b      	negs	r3, r3
 8001c58:	08ed      	lsrs	r5, r5, #3
 8001c5a:	4498      	add	r8, r3
 8001c5c:	e64a      	b.n	80018f4 <__aeabi_ddiv+0x198>
 8001c5e:	428c      	cmp	r4, r1
 8001c60:	d1c5      	bne.n	8001bee <__aeabi_ddiv+0x492>
 8001c62:	42af      	cmp	r7, r5
 8001c64:	d9c0      	bls.n	8001be8 <__aeabi_ddiv+0x48c>
 8001c66:	4690      	mov	r8, r2
 8001c68:	e716      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001c6a:	428a      	cmp	r2, r1
 8001c6c:	d800      	bhi.n	8001c70 <__aeabi_ddiv+0x514>
 8001c6e:	e6ea      	b.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001c70:	1e83      	subs	r3, r0, #2
 8001c72:	1909      	adds	r1, r1, r4
 8001c74:	e6e7      	b.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001c76:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <__aeabi_ddiv+0x5c4>)
 8001c78:	0028      	movs	r0, r5
 8001c7a:	445a      	add	r2, fp
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	4095      	lsls	r5, r2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	40c8      	lsrs	r0, r1
 8001c84:	1e6a      	subs	r2, r5, #1
 8001c86:	4195      	sbcs	r5, r2
 8001c88:	4644      	mov	r4, r8
 8001c8a:	4303      	orrs	r3, r0
 8001c8c:	432b      	orrs	r3, r5
 8001c8e:	40cc      	lsrs	r4, r1
 8001c90:	075a      	lsls	r2, r3, #29
 8001c92:	d092      	beq.n	8001bba <__aeabi_ddiv+0x45e>
 8001c94:	220f      	movs	r2, #15
 8001c96:	401a      	ands	r2, r3
 8001c98:	2a04      	cmp	r2, #4
 8001c9a:	d188      	bne.n	8001bae <__aeabi_ddiv+0x452>
 8001c9c:	e78d      	b.n	8001bba <__aeabi_ddiv+0x45e>
 8001c9e:	0035      	movs	r5, r6
 8001ca0:	4281      	cmp	r1, r0
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_ddiv+0x54a>
 8001ca4:	e74b      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001ca6:	9a00      	ldr	r2, [sp, #0]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d000      	beq.n	8001cae <__aeabi_ddiv+0x552>
 8001cac:	e747      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001cae:	e618      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001cb0:	42ae      	cmp	r6, r5
 8001cb2:	d99c      	bls.n	8001bee <__aeabi_ddiv+0x492>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	425b      	negs	r3, r3
 8001cb8:	469c      	mov	ip, r3
 8001cba:	9b00      	ldr	r3, [sp, #0]
 8001cbc:	44e0      	add	r8, ip
 8001cbe:	469c      	mov	ip, r3
 8001cc0:	4465      	add	r5, ip
 8001cc2:	429d      	cmp	r5, r3
 8001cc4:	419b      	sbcs	r3, r3
 8001cc6:	425b      	negs	r3, r3
 8001cc8:	191b      	adds	r3, r3, r4
 8001cca:	18c9      	adds	r1, r1, r3
 8001ccc:	e6e4      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <__aeabi_ddiv+0x5c8>)
 8001cd0:	445a      	add	r2, fp
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	dc00      	bgt.n	8001cd8 <__aeabi_ddiv+0x57c>
 8001cd6:	e744      	b.n	8001b62 <__aeabi_ddiv+0x406>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2500      	movs	r5, #0
 8001cdc:	4498      	add	r8, r3
 8001cde:	e609      	b.n	80018f4 <__aeabi_ddiv+0x198>
 8001ce0:	0765      	lsls	r5, r4, #29
 8001ce2:	0264      	lsls	r4, r4, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	2300      	movs	r3, #0
 8001cec:	e590      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001cee:	9e00      	ldr	r6, [sp, #0]
 8001cf0:	3d02      	subs	r5, #2
 8001cf2:	0072      	lsls	r2, r6, #1
 8001cf4:	42b2      	cmp	r2, r6
 8001cf6:	41bf      	sbcs	r7, r7
 8001cf8:	427f      	negs	r7, r7
 8001cfa:	193c      	adds	r4, r7, r4
 8001cfc:	1909      	adds	r1, r1, r4
 8001cfe:	9200      	str	r2, [sp, #0]
 8001d00:	e7ce      	b.n	8001ca0 <__aeabi_ddiv+0x544>
 8001d02:	2480      	movs	r4, #128	; 0x80
 8001d04:	4643      	mov	r3, r8
 8001d06:	0324      	lsls	r4, r4, #12
 8001d08:	431c      	orrs	r4, r3
 8001d0a:	0324      	lsls	r4, r4, #12
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <__aeabi_ddiv+0x5cc>)
 8001d0e:	0b24      	lsrs	r4, r4, #12
 8001d10:	e57e      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001d12:	9a00      	ldr	r2, [sp, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3ea      	bcc.n	8001cee <__aeabi_ddiv+0x592>
 8001d18:	0035      	movs	r5, r6
 8001d1a:	e7c4      	b.n	8001ca6 <__aeabi_ddiv+0x54a>
 8001d1c:	0000043e 	.word	0x0000043e
 8001d20:	0000041e 	.word	0x0000041e
 8001d24:	000003ff 	.word	0x000003ff
 8001d28:	000007ff 	.word	0x000007ff

08001d2c <__eqdf2>:
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	464f      	mov	r7, r9
 8001d30:	4646      	mov	r6, r8
 8001d32:	46d6      	mov	lr, sl
 8001d34:	4694      	mov	ip, r2
 8001d36:	4691      	mov	r9, r2
 8001d38:	031a      	lsls	r2, r3, #12
 8001d3a:	0b12      	lsrs	r2, r2, #12
 8001d3c:	4d18      	ldr	r5, [pc, #96]	; (8001da0 <__eqdf2+0x74>)
 8001d3e:	b5c0      	push	{r6, r7, lr}
 8001d40:	004c      	lsls	r4, r1, #1
 8001d42:	030f      	lsls	r7, r1, #12
 8001d44:	4692      	mov	sl, r2
 8001d46:	005a      	lsls	r2, r3, #1
 8001d48:	0006      	movs	r6, r0
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	0b3f      	lsrs	r7, r7, #12
 8001d4e:	2001      	movs	r0, #1
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	0fc9      	lsrs	r1, r1, #31
 8001d54:	0d52      	lsrs	r2, r2, #21
 8001d56:	0fdb      	lsrs	r3, r3, #31
 8001d58:	42ac      	cmp	r4, r5
 8001d5a:	d00a      	beq.n	8001d72 <__eqdf2+0x46>
 8001d5c:	42aa      	cmp	r2, r5
 8001d5e:	d003      	beq.n	8001d68 <__eqdf2+0x3c>
 8001d60:	4294      	cmp	r4, r2
 8001d62:	d101      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d64:	4557      	cmp	r7, sl
 8001d66:	d00d      	beq.n	8001d84 <__eqdf2+0x58>
 8001d68:	bce0      	pop	{r5, r6, r7}
 8001d6a:	46ba      	mov	sl, r7
 8001d6c:	46b1      	mov	r9, r6
 8001d6e:	46a8      	mov	r8, r5
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	003d      	movs	r5, r7
 8001d74:	4335      	orrs	r5, r6
 8001d76:	d1f7      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d78:	42a2      	cmp	r2, r4
 8001d7a:	d1f5      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d7c:	4652      	mov	r2, sl
 8001d7e:	4665      	mov	r5, ip
 8001d80:	432a      	orrs	r2, r5
 8001d82:	d1f1      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d84:	2001      	movs	r0, #1
 8001d86:	45c8      	cmp	r8, r9
 8001d88:	d1ee      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d8a:	4299      	cmp	r1, r3
 8001d8c:	d006      	beq.n	8001d9c <__eqdf2+0x70>
 8001d8e:	2c00      	cmp	r4, #0
 8001d90:	d1ea      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d92:	433e      	orrs	r6, r7
 8001d94:	0030      	movs	r0, r6
 8001d96:	1e46      	subs	r6, r0, #1
 8001d98:	41b0      	sbcs	r0, r6
 8001d9a:	e7e5      	b.n	8001d68 <__eqdf2+0x3c>
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	e7e3      	b.n	8001d68 <__eqdf2+0x3c>
 8001da0:	000007ff 	.word	0x000007ff

08001da4 <__gedf2>:
 8001da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da6:	464e      	mov	r6, r9
 8001da8:	4645      	mov	r5, r8
 8001daa:	4657      	mov	r7, sl
 8001dac:	46de      	mov	lr, fp
 8001dae:	0004      	movs	r4, r0
 8001db0:	0018      	movs	r0, r3
 8001db2:	b5e0      	push	{r5, r6, r7, lr}
 8001db4:	0016      	movs	r6, r2
 8001db6:	031b      	lsls	r3, r3, #12
 8001db8:	0b1b      	lsrs	r3, r3, #12
 8001dba:	4d32      	ldr	r5, [pc, #200]	; (8001e84 <__gedf2+0xe0>)
 8001dbc:	030f      	lsls	r7, r1, #12
 8001dbe:	004a      	lsls	r2, r1, #1
 8001dc0:	4699      	mov	r9, r3
 8001dc2:	0043      	lsls	r3, r0, #1
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	46b0      	mov	r8, r6
 8001dc8:	0b3f      	lsrs	r7, r7, #12
 8001dca:	0d52      	lsrs	r2, r2, #21
 8001dcc:	0fc9      	lsrs	r1, r1, #31
 8001dce:	0d5b      	lsrs	r3, r3, #21
 8001dd0:	0fc0      	lsrs	r0, r0, #31
 8001dd2:	42aa      	cmp	r2, r5
 8001dd4:	d029      	beq.n	8001e2a <__gedf2+0x86>
 8001dd6:	42ab      	cmp	r3, r5
 8001dd8:	d018      	beq.n	8001e0c <__gedf2+0x68>
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d12a      	bne.n	8001e34 <__gedf2+0x90>
 8001dde:	433c      	orrs	r4, r7
 8001de0:	46a3      	mov	fp, r4
 8001de2:	4265      	negs	r5, r4
 8001de4:	4165      	adcs	r5, r4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <__gedf2+0x4c>
 8001dea:	464c      	mov	r4, r9
 8001dec:	4326      	orrs	r6, r4
 8001dee:	d027      	beq.n	8001e40 <__gedf2+0x9c>
 8001df0:	2d00      	cmp	r5, #0
 8001df2:	d115      	bne.n	8001e20 <__gedf2+0x7c>
 8001df4:	4281      	cmp	r1, r0
 8001df6:	d028      	beq.n	8001e4a <__gedf2+0xa6>
 8001df8:	2002      	movs	r0, #2
 8001dfa:	3901      	subs	r1, #1
 8001dfc:	4008      	ands	r0, r1
 8001dfe:	3801      	subs	r0, #1
 8001e00:	bcf0      	pop	{r4, r5, r6, r7}
 8001e02:	46bb      	mov	fp, r7
 8001e04:	46b2      	mov	sl, r6
 8001e06:	46a9      	mov	r9, r5
 8001e08:	46a0      	mov	r8, r4
 8001e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0c:	464d      	mov	r5, r9
 8001e0e:	432e      	orrs	r6, r5
 8001e10:	d12f      	bne.n	8001e72 <__gedf2+0xce>
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d1ee      	bne.n	8001df4 <__gedf2+0x50>
 8001e16:	433c      	orrs	r4, r7
 8001e18:	4265      	negs	r5, r4
 8001e1a:	4165      	adcs	r5, r4
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	d0e9      	beq.n	8001df4 <__gedf2+0x50>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d1ed      	bne.n	8001e00 <__gedf2+0x5c>
 8001e24:	2001      	movs	r0, #1
 8001e26:	4240      	negs	r0, r0
 8001e28:	e7ea      	b.n	8001e00 <__gedf2+0x5c>
 8001e2a:	003d      	movs	r5, r7
 8001e2c:	4325      	orrs	r5, r4
 8001e2e:	d120      	bne.n	8001e72 <__gedf2+0xce>
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d0eb      	beq.n	8001e0c <__gedf2+0x68>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1dd      	bne.n	8001df4 <__gedf2+0x50>
 8001e38:	464c      	mov	r4, r9
 8001e3a:	4326      	orrs	r6, r4
 8001e3c:	d1da      	bne.n	8001df4 <__gedf2+0x50>
 8001e3e:	e7db      	b.n	8001df8 <__gedf2+0x54>
 8001e40:	465b      	mov	r3, fp
 8001e42:	2000      	movs	r0, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0db      	beq.n	8001e00 <__gedf2+0x5c>
 8001e48:	e7d6      	b.n	8001df8 <__gedf2+0x54>
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	dc0a      	bgt.n	8001e64 <__gedf2+0xc0>
 8001e4e:	dbe7      	blt.n	8001e20 <__gedf2+0x7c>
 8001e50:	454f      	cmp	r7, r9
 8001e52:	d8d1      	bhi.n	8001df8 <__gedf2+0x54>
 8001e54:	d010      	beq.n	8001e78 <__gedf2+0xd4>
 8001e56:	2000      	movs	r0, #0
 8001e58:	454f      	cmp	r7, r9
 8001e5a:	d2d1      	bcs.n	8001e00 <__gedf2+0x5c>
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	d0e1      	beq.n	8001e24 <__gedf2+0x80>
 8001e60:	0008      	movs	r0, r1
 8001e62:	e7cd      	b.n	8001e00 <__gedf2+0x5c>
 8001e64:	4243      	negs	r3, r0
 8001e66:	4158      	adcs	r0, r3
 8001e68:	2302      	movs	r3, #2
 8001e6a:	4240      	negs	r0, r0
 8001e6c:	4018      	ands	r0, r3
 8001e6e:	3801      	subs	r0, #1
 8001e70:	e7c6      	b.n	8001e00 <__gedf2+0x5c>
 8001e72:	2002      	movs	r0, #2
 8001e74:	4240      	negs	r0, r0
 8001e76:	e7c3      	b.n	8001e00 <__gedf2+0x5c>
 8001e78:	45c4      	cmp	ip, r8
 8001e7a:	d8bd      	bhi.n	8001df8 <__gedf2+0x54>
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	45c4      	cmp	ip, r8
 8001e80:	d2be      	bcs.n	8001e00 <__gedf2+0x5c>
 8001e82:	e7eb      	b.n	8001e5c <__gedf2+0xb8>
 8001e84:	000007ff 	.word	0x000007ff

08001e88 <__ledf2>:
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	464e      	mov	r6, r9
 8001e8c:	4645      	mov	r5, r8
 8001e8e:	4657      	mov	r7, sl
 8001e90:	46de      	mov	lr, fp
 8001e92:	0004      	movs	r4, r0
 8001e94:	0018      	movs	r0, r3
 8001e96:	b5e0      	push	{r5, r6, r7, lr}
 8001e98:	0016      	movs	r6, r2
 8001e9a:	031b      	lsls	r3, r3, #12
 8001e9c:	0b1b      	lsrs	r3, r3, #12
 8001e9e:	4d31      	ldr	r5, [pc, #196]	; (8001f64 <__ledf2+0xdc>)
 8001ea0:	030f      	lsls	r7, r1, #12
 8001ea2:	004a      	lsls	r2, r1, #1
 8001ea4:	4699      	mov	r9, r3
 8001ea6:	0043      	lsls	r3, r0, #1
 8001ea8:	46a4      	mov	ip, r4
 8001eaa:	46b0      	mov	r8, r6
 8001eac:	0b3f      	lsrs	r7, r7, #12
 8001eae:	0d52      	lsrs	r2, r2, #21
 8001eb0:	0fc9      	lsrs	r1, r1, #31
 8001eb2:	0d5b      	lsrs	r3, r3, #21
 8001eb4:	0fc0      	lsrs	r0, r0, #31
 8001eb6:	42aa      	cmp	r2, r5
 8001eb8:	d011      	beq.n	8001ede <__ledf2+0x56>
 8001eba:	42ab      	cmp	r3, r5
 8001ebc:	d014      	beq.n	8001ee8 <__ledf2+0x60>
 8001ebe:	2a00      	cmp	r2, #0
 8001ec0:	d12f      	bne.n	8001f22 <__ledf2+0x9a>
 8001ec2:	433c      	orrs	r4, r7
 8001ec4:	46a3      	mov	fp, r4
 8001ec6:	4265      	negs	r5, r4
 8001ec8:	4165      	adcs	r5, r4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d114      	bne.n	8001ef8 <__ledf2+0x70>
 8001ece:	464c      	mov	r4, r9
 8001ed0:	4326      	orrs	r6, r4
 8001ed2:	d111      	bne.n	8001ef8 <__ledf2+0x70>
 8001ed4:	465b      	mov	r3, fp
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d017      	beq.n	8001f0c <__ledf2+0x84>
 8001edc:	e010      	b.n	8001f00 <__ledf2+0x78>
 8001ede:	003d      	movs	r5, r7
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	d112      	bne.n	8001f0a <__ledf2+0x82>
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d11c      	bne.n	8001f22 <__ledf2+0x9a>
 8001ee8:	464d      	mov	r5, r9
 8001eea:	432e      	orrs	r6, r5
 8001eec:	d10d      	bne.n	8001f0a <__ledf2+0x82>
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	d104      	bne.n	8001efc <__ledf2+0x74>
 8001ef2:	433c      	orrs	r4, r7
 8001ef4:	4265      	negs	r5, r4
 8001ef6:	4165      	adcs	r5, r4
 8001ef8:	2d00      	cmp	r5, #0
 8001efa:	d10d      	bne.n	8001f18 <__ledf2+0x90>
 8001efc:	4281      	cmp	r1, r0
 8001efe:	d016      	beq.n	8001f2e <__ledf2+0xa6>
 8001f00:	2002      	movs	r0, #2
 8001f02:	3901      	subs	r1, #1
 8001f04:	4008      	ands	r0, r1
 8001f06:	3801      	subs	r0, #1
 8001f08:	e000      	b.n	8001f0c <__ledf2+0x84>
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f0e:	46bb      	mov	fp, r7
 8001f10:	46b2      	mov	sl, r6
 8001f12:	46a9      	mov	r9, r5
 8001f14:	46a0      	mov	r8, r4
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d1f7      	bne.n	8001f0c <__ledf2+0x84>
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	4240      	negs	r0, r0
 8001f20:	e7f4      	b.n	8001f0c <__ledf2+0x84>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1ea      	bne.n	8001efc <__ledf2+0x74>
 8001f26:	464c      	mov	r4, r9
 8001f28:	4326      	orrs	r6, r4
 8001f2a:	d1e7      	bne.n	8001efc <__ledf2+0x74>
 8001f2c:	e7e8      	b.n	8001f00 <__ledf2+0x78>
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dd06      	ble.n	8001f40 <__ledf2+0xb8>
 8001f32:	4243      	negs	r3, r0
 8001f34:	4158      	adcs	r0, r3
 8001f36:	2302      	movs	r3, #2
 8001f38:	4240      	negs	r0, r0
 8001f3a:	4018      	ands	r0, r3
 8001f3c:	3801      	subs	r0, #1
 8001f3e:	e7e5      	b.n	8001f0c <__ledf2+0x84>
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbe9      	blt.n	8001f18 <__ledf2+0x90>
 8001f44:	454f      	cmp	r7, r9
 8001f46:	d8db      	bhi.n	8001f00 <__ledf2+0x78>
 8001f48:	d006      	beq.n	8001f58 <__ledf2+0xd0>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	454f      	cmp	r7, r9
 8001f4e:	d2dd      	bcs.n	8001f0c <__ledf2+0x84>
 8001f50:	2900      	cmp	r1, #0
 8001f52:	d0e3      	beq.n	8001f1c <__ledf2+0x94>
 8001f54:	0008      	movs	r0, r1
 8001f56:	e7d9      	b.n	8001f0c <__ledf2+0x84>
 8001f58:	45c4      	cmp	ip, r8
 8001f5a:	d8d1      	bhi.n	8001f00 <__ledf2+0x78>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	45c4      	cmp	ip, r8
 8001f60:	d2d4      	bcs.n	8001f0c <__ledf2+0x84>
 8001f62:	e7f5      	b.n	8001f50 <__ledf2+0xc8>
 8001f64:	000007ff 	.word	0x000007ff

08001f68 <__aeabi_dmul>:
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	4657      	mov	r7, sl
 8001f6c:	464e      	mov	r6, r9
 8001f6e:	4645      	mov	r5, r8
 8001f70:	46de      	mov	lr, fp
 8001f72:	b5e0      	push	{r5, r6, r7, lr}
 8001f74:	4698      	mov	r8, r3
 8001f76:	030c      	lsls	r4, r1, #12
 8001f78:	004b      	lsls	r3, r1, #1
 8001f7a:	0006      	movs	r6, r0
 8001f7c:	4692      	mov	sl, r2
 8001f7e:	b087      	sub	sp, #28
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	0d5b      	lsrs	r3, r3, #21
 8001f84:	0fcf      	lsrs	r7, r1, #31
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06c      	beq.n	8002064 <__aeabi_dmul+0xfc>
 8001f8a:	4add      	ldr	r2, [pc, #884]	; (8002300 <__aeabi_dmul+0x398>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dmul+0x2a>
 8001f90:	e086      	b.n	80020a0 <__aeabi_dmul+0x138>
 8001f92:	0f42      	lsrs	r2, r0, #29
 8001f94:	00e4      	lsls	r4, r4, #3
 8001f96:	4314      	orrs	r4, r2
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	0412      	lsls	r2, r2, #16
 8001f9c:	4314      	orrs	r4, r2
 8001f9e:	4ad9      	ldr	r2, [pc, #868]	; (8002304 <__aeabi_dmul+0x39c>)
 8001fa0:	00c5      	lsls	r5, r0, #3
 8001fa2:	4694      	mov	ip, r2
 8001fa4:	4463      	add	r3, ip
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	4699      	mov	r9, r3
 8001fac:	469b      	mov	fp, r3
 8001fae:	4643      	mov	r3, r8
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	031e      	lsls	r6, r3, #12
 8001fb4:	0fd2      	lsrs	r2, r2, #31
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4650      	mov	r0, sl
 8001fba:	4690      	mov	r8, r2
 8001fbc:	0b36      	lsrs	r6, r6, #12
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dmul+0x5c>
 8001fc2:	e078      	b.n	80020b6 <__aeabi_dmul+0x14e>
 8001fc4:	4ace      	ldr	r2, [pc, #824]	; (8002300 <__aeabi_dmul+0x398>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <__aeabi_dmul+0x9e>
 8001fca:	49ce      	ldr	r1, [pc, #824]	; (8002304 <__aeabi_dmul+0x39c>)
 8001fcc:	0f42      	lsrs	r2, r0, #29
 8001fce:	468c      	mov	ip, r1
 8001fd0:	9900      	ldr	r1, [sp, #0]
 8001fd2:	4463      	add	r3, ip
 8001fd4:	00f6      	lsls	r6, r6, #3
 8001fd6:	468c      	mov	ip, r1
 8001fd8:	4316      	orrs	r6, r2
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	449c      	add	ip, r3
 8001fde:	0412      	lsls	r2, r2, #16
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	4316      	orrs	r6, r2
 8001fe4:	00c2      	lsls	r2, r0, #3
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	9900      	ldr	r1, [sp, #0]
 8001fec:	4643      	mov	r3, r8
 8001fee:	3101      	adds	r1, #1
 8001ff0:	468c      	mov	ip, r1
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	407b      	eors	r3, r7
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	290f      	cmp	r1, #15
 8001ffa:	d900      	bls.n	8001ffe <__aeabi_dmul+0x96>
 8001ffc:	e07e      	b.n	80020fc <__aeabi_dmul+0x194>
 8001ffe:	4bc2      	ldr	r3, [pc, #776]	; (8002308 <__aeabi_dmul+0x3a0>)
 8002000:	0089      	lsls	r1, r1, #2
 8002002:	5859      	ldr	r1, [r3, r1]
 8002004:	468f      	mov	pc, r1
 8002006:	4652      	mov	r2, sl
 8002008:	9b00      	ldr	r3, [sp, #0]
 800200a:	4332      	orrs	r2, r6
 800200c:	d000      	beq.n	8002010 <__aeabi_dmul+0xa8>
 800200e:	e156      	b.n	80022be <__aeabi_dmul+0x356>
 8002010:	49bb      	ldr	r1, [pc, #748]	; (8002300 <__aeabi_dmul+0x398>)
 8002012:	2600      	movs	r6, #0
 8002014:	468c      	mov	ip, r1
 8002016:	4463      	add	r3, ip
 8002018:	4649      	mov	r1, r9
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2302      	movs	r3, #2
 800201e:	4319      	orrs	r1, r3
 8002020:	4689      	mov	r9, r1
 8002022:	2002      	movs	r0, #2
 8002024:	e7e1      	b.n	8001fea <__aeabi_dmul+0x82>
 8002026:	4643      	mov	r3, r8
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	0034      	movs	r4, r6
 800202c:	0015      	movs	r5, r2
 800202e:	4683      	mov	fp, r0
 8002030:	465b      	mov	r3, fp
 8002032:	2b02      	cmp	r3, #2
 8002034:	d05e      	beq.n	80020f4 <__aeabi_dmul+0x18c>
 8002036:	2b03      	cmp	r3, #3
 8002038:	d100      	bne.n	800203c <__aeabi_dmul+0xd4>
 800203a:	e1f3      	b.n	8002424 <__aeabi_dmul+0x4bc>
 800203c:	2b01      	cmp	r3, #1
 800203e:	d000      	beq.n	8002042 <__aeabi_dmul+0xda>
 8002040:	e118      	b.n	8002274 <__aeabi_dmul+0x30c>
 8002042:	2200      	movs	r2, #0
 8002044:	2400      	movs	r4, #0
 8002046:	2500      	movs	r5, #0
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	0512      	lsls	r2, r2, #20
 800204c:	4322      	orrs	r2, r4
 800204e:	07db      	lsls	r3, r3, #31
 8002050:	431a      	orrs	r2, r3
 8002052:	0028      	movs	r0, r5
 8002054:	0011      	movs	r1, r2
 8002056:	b007      	add	sp, #28
 8002058:	bcf0      	pop	{r4, r5, r6, r7}
 800205a:	46bb      	mov	fp, r7
 800205c:	46b2      	mov	sl, r6
 800205e:	46a9      	mov	r9, r5
 8002060:	46a0      	mov	r8, r4
 8002062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002064:	0025      	movs	r5, r4
 8002066:	4305      	orrs	r5, r0
 8002068:	d100      	bne.n	800206c <__aeabi_dmul+0x104>
 800206a:	e141      	b.n	80022f0 <__aeabi_dmul+0x388>
 800206c:	2c00      	cmp	r4, #0
 800206e:	d100      	bne.n	8002072 <__aeabi_dmul+0x10a>
 8002070:	e1ad      	b.n	80023ce <__aeabi_dmul+0x466>
 8002072:	0020      	movs	r0, r4
 8002074:	f000 fe4a 	bl	8002d0c <__clzsi2>
 8002078:	0001      	movs	r1, r0
 800207a:	0002      	movs	r2, r0
 800207c:	390b      	subs	r1, #11
 800207e:	231d      	movs	r3, #29
 8002080:	0010      	movs	r0, r2
 8002082:	1a5b      	subs	r3, r3, r1
 8002084:	0031      	movs	r1, r6
 8002086:	0035      	movs	r5, r6
 8002088:	3808      	subs	r0, #8
 800208a:	4084      	lsls	r4, r0
 800208c:	40d9      	lsrs	r1, r3
 800208e:	4085      	lsls	r5, r0
 8002090:	430c      	orrs	r4, r1
 8002092:	489e      	ldr	r0, [pc, #632]	; (800230c <__aeabi_dmul+0x3a4>)
 8002094:	1a83      	subs	r3, r0, r2
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2300      	movs	r3, #0
 800209a:	4699      	mov	r9, r3
 800209c:	469b      	mov	fp, r3
 800209e:	e786      	b.n	8001fae <__aeabi_dmul+0x46>
 80020a0:	0005      	movs	r5, r0
 80020a2:	4325      	orrs	r5, r4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_dmul+0x140>
 80020a6:	e11c      	b.n	80022e2 <__aeabi_dmul+0x37a>
 80020a8:	2208      	movs	r2, #8
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2302      	movs	r3, #2
 80020ae:	2400      	movs	r4, #0
 80020b0:	4691      	mov	r9, r2
 80020b2:	469b      	mov	fp, r3
 80020b4:	e77b      	b.n	8001fae <__aeabi_dmul+0x46>
 80020b6:	4652      	mov	r2, sl
 80020b8:	4332      	orrs	r2, r6
 80020ba:	d100      	bne.n	80020be <__aeabi_dmul+0x156>
 80020bc:	e10a      	b.n	80022d4 <__aeabi_dmul+0x36c>
 80020be:	2e00      	cmp	r6, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dmul+0x15c>
 80020c2:	e176      	b.n	80023b2 <__aeabi_dmul+0x44a>
 80020c4:	0030      	movs	r0, r6
 80020c6:	f000 fe21 	bl	8002d0c <__clzsi2>
 80020ca:	0002      	movs	r2, r0
 80020cc:	3a0b      	subs	r2, #11
 80020ce:	231d      	movs	r3, #29
 80020d0:	0001      	movs	r1, r0
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	4652      	mov	r2, sl
 80020d6:	3908      	subs	r1, #8
 80020d8:	40da      	lsrs	r2, r3
 80020da:	408e      	lsls	r6, r1
 80020dc:	4316      	orrs	r6, r2
 80020de:	4652      	mov	r2, sl
 80020e0:	408a      	lsls	r2, r1
 80020e2:	9b00      	ldr	r3, [sp, #0]
 80020e4:	4989      	ldr	r1, [pc, #548]	; (800230c <__aeabi_dmul+0x3a4>)
 80020e6:	1a18      	subs	r0, r3, r0
 80020e8:	0003      	movs	r3, r0
 80020ea:	468c      	mov	ip, r1
 80020ec:	4463      	add	r3, ip
 80020ee:	2000      	movs	r0, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	e77a      	b.n	8001fea <__aeabi_dmul+0x82>
 80020f4:	2400      	movs	r4, #0
 80020f6:	2500      	movs	r5, #0
 80020f8:	4a81      	ldr	r2, [pc, #516]	; (8002300 <__aeabi_dmul+0x398>)
 80020fa:	e7a5      	b.n	8002048 <__aeabi_dmul+0xe0>
 80020fc:	0c2f      	lsrs	r7, r5, #16
 80020fe:	042d      	lsls	r5, r5, #16
 8002100:	0c2d      	lsrs	r5, r5, #16
 8002102:	002b      	movs	r3, r5
 8002104:	0c11      	lsrs	r1, r2, #16
 8002106:	0412      	lsls	r2, r2, #16
 8002108:	0c12      	lsrs	r2, r2, #16
 800210a:	4353      	muls	r3, r2
 800210c:	4698      	mov	r8, r3
 800210e:	0013      	movs	r3, r2
 8002110:	0028      	movs	r0, r5
 8002112:	437b      	muls	r3, r7
 8002114:	4699      	mov	r9, r3
 8002116:	4348      	muls	r0, r1
 8002118:	4448      	add	r0, r9
 800211a:	4683      	mov	fp, r0
 800211c:	4640      	mov	r0, r8
 800211e:	000b      	movs	r3, r1
 8002120:	0c00      	lsrs	r0, r0, #16
 8002122:	4682      	mov	sl, r0
 8002124:	4658      	mov	r0, fp
 8002126:	437b      	muls	r3, r7
 8002128:	4450      	add	r0, sl
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	4581      	cmp	r9, r0
 800212e:	d906      	bls.n	800213e <__aeabi_dmul+0x1d6>
 8002130:	469a      	mov	sl, r3
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	4699      	mov	r9, r3
 8002138:	44ca      	add	sl, r9
 800213a:	4653      	mov	r3, sl
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	0c03      	lsrs	r3, r0, #16
 8002140:	469b      	mov	fp, r3
 8002142:	4643      	mov	r3, r8
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	0400      	lsls	r0, r0, #16
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	4698      	mov	r8, r3
 800214c:	0003      	movs	r3, r0
 800214e:	4443      	add	r3, r8
 8002150:	9304      	str	r3, [sp, #16]
 8002152:	0c33      	lsrs	r3, r6, #16
 8002154:	4699      	mov	r9, r3
 8002156:	002b      	movs	r3, r5
 8002158:	0436      	lsls	r6, r6, #16
 800215a:	0c36      	lsrs	r6, r6, #16
 800215c:	4373      	muls	r3, r6
 800215e:	4698      	mov	r8, r3
 8002160:	0033      	movs	r3, r6
 8002162:	437b      	muls	r3, r7
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	435d      	muls	r5, r3
 800216a:	435f      	muls	r7, r3
 800216c:	4643      	mov	r3, r8
 800216e:	4455      	add	r5, sl
 8002170:	0c18      	lsrs	r0, r3, #16
 8002172:	1940      	adds	r0, r0, r5
 8002174:	4582      	cmp	sl, r0
 8002176:	d903      	bls.n	8002180 <__aeabi_dmul+0x218>
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	025b      	lsls	r3, r3, #9
 800217c:	469a      	mov	sl, r3
 800217e:	4457      	add	r7, sl
 8002180:	0c05      	lsrs	r5, r0, #16
 8002182:	19eb      	adds	r3, r5, r7
 8002184:	9305      	str	r3, [sp, #20]
 8002186:	4643      	mov	r3, r8
 8002188:	041d      	lsls	r5, r3, #16
 800218a:	0c2d      	lsrs	r5, r5, #16
 800218c:	0400      	lsls	r0, r0, #16
 800218e:	1940      	adds	r0, r0, r5
 8002190:	0c25      	lsrs	r5, r4, #16
 8002192:	0424      	lsls	r4, r4, #16
 8002194:	0c24      	lsrs	r4, r4, #16
 8002196:	0027      	movs	r7, r4
 8002198:	4357      	muls	r7, r2
 800219a:	436a      	muls	r2, r5
 800219c:	4690      	mov	r8, r2
 800219e:	002a      	movs	r2, r5
 80021a0:	0c3b      	lsrs	r3, r7, #16
 80021a2:	469a      	mov	sl, r3
 80021a4:	434a      	muls	r2, r1
 80021a6:	4361      	muls	r1, r4
 80021a8:	4441      	add	r1, r8
 80021aa:	4451      	add	r1, sl
 80021ac:	4483      	add	fp, r0
 80021ae:	4588      	cmp	r8, r1
 80021b0:	d903      	bls.n	80021ba <__aeabi_dmul+0x252>
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	025b      	lsls	r3, r3, #9
 80021b6:	4698      	mov	r8, r3
 80021b8:	4442      	add	r2, r8
 80021ba:	043f      	lsls	r7, r7, #16
 80021bc:	0c0b      	lsrs	r3, r1, #16
 80021be:	0c3f      	lsrs	r7, r7, #16
 80021c0:	0409      	lsls	r1, r1, #16
 80021c2:	19c9      	adds	r1, r1, r7
 80021c4:	0027      	movs	r7, r4
 80021c6:	4698      	mov	r8, r3
 80021c8:	464b      	mov	r3, r9
 80021ca:	4377      	muls	r7, r6
 80021cc:	435c      	muls	r4, r3
 80021ce:	436e      	muls	r6, r5
 80021d0:	435d      	muls	r5, r3
 80021d2:	0c3b      	lsrs	r3, r7, #16
 80021d4:	4699      	mov	r9, r3
 80021d6:	19a4      	adds	r4, r4, r6
 80021d8:	444c      	add	r4, r9
 80021da:	4442      	add	r2, r8
 80021dc:	9503      	str	r5, [sp, #12]
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d904      	bls.n	80021ec <__aeabi_dmul+0x284>
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	025b      	lsls	r3, r3, #9
 80021e6:	4698      	mov	r8, r3
 80021e8:	4445      	add	r5, r8
 80021ea:	9503      	str	r5, [sp, #12]
 80021ec:	9b02      	ldr	r3, [sp, #8]
 80021ee:	043f      	lsls	r7, r7, #16
 80021f0:	445b      	add	r3, fp
 80021f2:	001e      	movs	r6, r3
 80021f4:	4283      	cmp	r3, r0
 80021f6:	4180      	sbcs	r0, r0
 80021f8:	0423      	lsls	r3, r4, #16
 80021fa:	4698      	mov	r8, r3
 80021fc:	9b05      	ldr	r3, [sp, #20]
 80021fe:	0c3f      	lsrs	r7, r7, #16
 8002200:	4447      	add	r7, r8
 8002202:	4698      	mov	r8, r3
 8002204:	1876      	adds	r6, r6, r1
 8002206:	428e      	cmp	r6, r1
 8002208:	4189      	sbcs	r1, r1
 800220a:	4447      	add	r7, r8
 800220c:	4240      	negs	r0, r0
 800220e:	183d      	adds	r5, r7, r0
 8002210:	46a8      	mov	r8, r5
 8002212:	4693      	mov	fp, r2
 8002214:	4249      	negs	r1, r1
 8002216:	468a      	mov	sl, r1
 8002218:	44c3      	add	fp, r8
 800221a:	429f      	cmp	r7, r3
 800221c:	41bf      	sbcs	r7, r7
 800221e:	4580      	cmp	r8, r0
 8002220:	4180      	sbcs	r0, r0
 8002222:	9b03      	ldr	r3, [sp, #12]
 8002224:	44da      	add	sl, fp
 8002226:	4698      	mov	r8, r3
 8002228:	4653      	mov	r3, sl
 800222a:	4240      	negs	r0, r0
 800222c:	427f      	negs	r7, r7
 800222e:	4307      	orrs	r7, r0
 8002230:	0c24      	lsrs	r4, r4, #16
 8002232:	4593      	cmp	fp, r2
 8002234:	4192      	sbcs	r2, r2
 8002236:	458a      	cmp	sl, r1
 8002238:	4189      	sbcs	r1, r1
 800223a:	193f      	adds	r7, r7, r4
 800223c:	0ddc      	lsrs	r4, r3, #23
 800223e:	9b04      	ldr	r3, [sp, #16]
 8002240:	0275      	lsls	r5, r6, #9
 8002242:	431d      	orrs	r5, r3
 8002244:	1e68      	subs	r0, r5, #1
 8002246:	4185      	sbcs	r5, r0
 8002248:	4653      	mov	r3, sl
 800224a:	4252      	negs	r2, r2
 800224c:	4249      	negs	r1, r1
 800224e:	430a      	orrs	r2, r1
 8002250:	18bf      	adds	r7, r7, r2
 8002252:	4447      	add	r7, r8
 8002254:	0df6      	lsrs	r6, r6, #23
 8002256:	027f      	lsls	r7, r7, #9
 8002258:	4335      	orrs	r5, r6
 800225a:	025a      	lsls	r2, r3, #9
 800225c:	433c      	orrs	r4, r7
 800225e:	4315      	orrs	r5, r2
 8002260:	01fb      	lsls	r3, r7, #7
 8002262:	d400      	bmi.n	8002266 <__aeabi_dmul+0x2fe>
 8002264:	e0c1      	b.n	80023ea <__aeabi_dmul+0x482>
 8002266:	2101      	movs	r1, #1
 8002268:	086a      	lsrs	r2, r5, #1
 800226a:	400d      	ands	r5, r1
 800226c:	4315      	orrs	r5, r2
 800226e:	07e2      	lsls	r2, r4, #31
 8002270:	4315      	orrs	r5, r2
 8002272:	0864      	lsrs	r4, r4, #1
 8002274:	4926      	ldr	r1, [pc, #152]	; (8002310 <__aeabi_dmul+0x3a8>)
 8002276:	4461      	add	r1, ip
 8002278:	2900      	cmp	r1, #0
 800227a:	dd56      	ble.n	800232a <__aeabi_dmul+0x3c2>
 800227c:	076b      	lsls	r3, r5, #29
 800227e:	d009      	beq.n	8002294 <__aeabi_dmul+0x32c>
 8002280:	220f      	movs	r2, #15
 8002282:	402a      	ands	r2, r5
 8002284:	2a04      	cmp	r2, #4
 8002286:	d005      	beq.n	8002294 <__aeabi_dmul+0x32c>
 8002288:	1d2a      	adds	r2, r5, #4
 800228a:	42aa      	cmp	r2, r5
 800228c:	41ad      	sbcs	r5, r5
 800228e:	426d      	negs	r5, r5
 8002290:	1964      	adds	r4, r4, r5
 8002292:	0015      	movs	r5, r2
 8002294:	01e3      	lsls	r3, r4, #7
 8002296:	d504      	bpl.n	80022a2 <__aeabi_dmul+0x33a>
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <__aeabi_dmul+0x3ac>)
 800229c:	00c9      	lsls	r1, r1, #3
 800229e:	4014      	ands	r4, r2
 80022a0:	4461      	add	r1, ip
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <__aeabi_dmul+0x3b0>)
 80022a4:	4291      	cmp	r1, r2
 80022a6:	dd00      	ble.n	80022aa <__aeabi_dmul+0x342>
 80022a8:	e724      	b.n	80020f4 <__aeabi_dmul+0x18c>
 80022aa:	0762      	lsls	r2, r4, #29
 80022ac:	08ed      	lsrs	r5, r5, #3
 80022ae:	0264      	lsls	r4, r4, #9
 80022b0:	0549      	lsls	r1, r1, #21
 80022b2:	4315      	orrs	r5, r2
 80022b4:	0b24      	lsrs	r4, r4, #12
 80022b6:	0d4a      	lsrs	r2, r1, #21
 80022b8:	e6c6      	b.n	8002048 <__aeabi_dmul+0xe0>
 80022ba:	9701      	str	r7, [sp, #4]
 80022bc:	e6b8      	b.n	8002030 <__aeabi_dmul+0xc8>
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <__aeabi_dmul+0x398>)
 80022c0:	2003      	movs	r0, #3
 80022c2:	4694      	mov	ip, r2
 80022c4:	4463      	add	r3, ip
 80022c6:	464a      	mov	r2, r9
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2303      	movs	r3, #3
 80022cc:	431a      	orrs	r2, r3
 80022ce:	4691      	mov	r9, r2
 80022d0:	4652      	mov	r2, sl
 80022d2:	e68a      	b.n	8001fea <__aeabi_dmul+0x82>
 80022d4:	4649      	mov	r1, r9
 80022d6:	2301      	movs	r3, #1
 80022d8:	4319      	orrs	r1, r3
 80022da:	4689      	mov	r9, r1
 80022dc:	2600      	movs	r6, #0
 80022de:	2001      	movs	r0, #1
 80022e0:	e683      	b.n	8001fea <__aeabi_dmul+0x82>
 80022e2:	220c      	movs	r2, #12
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2303      	movs	r3, #3
 80022e8:	0005      	movs	r5, r0
 80022ea:	4691      	mov	r9, r2
 80022ec:	469b      	mov	fp, r3
 80022ee:	e65e      	b.n	8001fae <__aeabi_dmul+0x46>
 80022f0:	2304      	movs	r3, #4
 80022f2:	4699      	mov	r9, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	2400      	movs	r4, #0
 80022fc:	469b      	mov	fp, r3
 80022fe:	e656      	b.n	8001fae <__aeabi_dmul+0x46>
 8002300:	000007ff 	.word	0x000007ff
 8002304:	fffffc01 	.word	0xfffffc01
 8002308:	0801f674 	.word	0x0801f674
 800230c:	fffffc0d 	.word	0xfffffc0d
 8002310:	000003ff 	.word	0x000003ff
 8002314:	feffffff 	.word	0xfeffffff
 8002318:	000007fe 	.word	0x000007fe
 800231c:	2300      	movs	r3, #0
 800231e:	2480      	movs	r4, #128	; 0x80
 8002320:	2500      	movs	r5, #0
 8002322:	4a44      	ldr	r2, [pc, #272]	; (8002434 <__aeabi_dmul+0x4cc>)
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	0324      	lsls	r4, r4, #12
 8002328:	e68e      	b.n	8002048 <__aeabi_dmul+0xe0>
 800232a:	2001      	movs	r0, #1
 800232c:	1a40      	subs	r0, r0, r1
 800232e:	2838      	cmp	r0, #56	; 0x38
 8002330:	dd00      	ble.n	8002334 <__aeabi_dmul+0x3cc>
 8002332:	e686      	b.n	8002042 <__aeabi_dmul+0xda>
 8002334:	281f      	cmp	r0, #31
 8002336:	dd5b      	ble.n	80023f0 <__aeabi_dmul+0x488>
 8002338:	221f      	movs	r2, #31
 800233a:	0023      	movs	r3, r4
 800233c:	4252      	negs	r2, r2
 800233e:	1a51      	subs	r1, r2, r1
 8002340:	40cb      	lsrs	r3, r1
 8002342:	0019      	movs	r1, r3
 8002344:	2820      	cmp	r0, #32
 8002346:	d003      	beq.n	8002350 <__aeabi_dmul+0x3e8>
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <__aeabi_dmul+0x4d0>)
 800234a:	4462      	add	r2, ip
 800234c:	4094      	lsls	r4, r2
 800234e:	4325      	orrs	r5, r4
 8002350:	1e6a      	subs	r2, r5, #1
 8002352:	4195      	sbcs	r5, r2
 8002354:	002a      	movs	r2, r5
 8002356:	430a      	orrs	r2, r1
 8002358:	2107      	movs	r1, #7
 800235a:	000d      	movs	r5, r1
 800235c:	2400      	movs	r4, #0
 800235e:	4015      	ands	r5, r2
 8002360:	4211      	tst	r1, r2
 8002362:	d05b      	beq.n	800241c <__aeabi_dmul+0x4b4>
 8002364:	210f      	movs	r1, #15
 8002366:	2400      	movs	r4, #0
 8002368:	4011      	ands	r1, r2
 800236a:	2904      	cmp	r1, #4
 800236c:	d053      	beq.n	8002416 <__aeabi_dmul+0x4ae>
 800236e:	1d11      	adds	r1, r2, #4
 8002370:	4291      	cmp	r1, r2
 8002372:	4192      	sbcs	r2, r2
 8002374:	4252      	negs	r2, r2
 8002376:	18a4      	adds	r4, r4, r2
 8002378:	000a      	movs	r2, r1
 800237a:	0223      	lsls	r3, r4, #8
 800237c:	d54b      	bpl.n	8002416 <__aeabi_dmul+0x4ae>
 800237e:	2201      	movs	r2, #1
 8002380:	2400      	movs	r4, #0
 8002382:	2500      	movs	r5, #0
 8002384:	e660      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	031b      	lsls	r3, r3, #12
 800238a:	421c      	tst	r4, r3
 800238c:	d009      	beq.n	80023a2 <__aeabi_dmul+0x43a>
 800238e:	421e      	tst	r6, r3
 8002390:	d107      	bne.n	80023a2 <__aeabi_dmul+0x43a>
 8002392:	4333      	orrs	r3, r6
 8002394:	031c      	lsls	r4, r3, #12
 8002396:	4643      	mov	r3, r8
 8002398:	0015      	movs	r5, r2
 800239a:	0b24      	lsrs	r4, r4, #12
 800239c:	4a25      	ldr	r2, [pc, #148]	; (8002434 <__aeabi_dmul+0x4cc>)
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	e652      	b.n	8002048 <__aeabi_dmul+0xe0>
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0312      	lsls	r2, r2, #12
 80023a6:	4314      	orrs	r4, r2
 80023a8:	0324      	lsls	r4, r4, #12
 80023aa:	4a22      	ldr	r2, [pc, #136]	; (8002434 <__aeabi_dmul+0x4cc>)
 80023ac:	0b24      	lsrs	r4, r4, #12
 80023ae:	9701      	str	r7, [sp, #4]
 80023b0:	e64a      	b.n	8002048 <__aeabi_dmul+0xe0>
 80023b2:	f000 fcab 	bl	8002d0c <__clzsi2>
 80023b6:	0003      	movs	r3, r0
 80023b8:	001a      	movs	r2, r3
 80023ba:	3215      	adds	r2, #21
 80023bc:	3020      	adds	r0, #32
 80023be:	2a1c      	cmp	r2, #28
 80023c0:	dc00      	bgt.n	80023c4 <__aeabi_dmul+0x45c>
 80023c2:	e684      	b.n	80020ce <__aeabi_dmul+0x166>
 80023c4:	4656      	mov	r6, sl
 80023c6:	3b08      	subs	r3, #8
 80023c8:	2200      	movs	r2, #0
 80023ca:	409e      	lsls	r6, r3
 80023cc:	e689      	b.n	80020e2 <__aeabi_dmul+0x17a>
 80023ce:	f000 fc9d 	bl	8002d0c <__clzsi2>
 80023d2:	0001      	movs	r1, r0
 80023d4:	0002      	movs	r2, r0
 80023d6:	3115      	adds	r1, #21
 80023d8:	3220      	adds	r2, #32
 80023da:	291c      	cmp	r1, #28
 80023dc:	dc00      	bgt.n	80023e0 <__aeabi_dmul+0x478>
 80023de:	e64e      	b.n	800207e <__aeabi_dmul+0x116>
 80023e0:	0034      	movs	r4, r6
 80023e2:	3808      	subs	r0, #8
 80023e4:	2500      	movs	r5, #0
 80023e6:	4084      	lsls	r4, r0
 80023e8:	e653      	b.n	8002092 <__aeabi_dmul+0x12a>
 80023ea:	9b00      	ldr	r3, [sp, #0]
 80023ec:	469c      	mov	ip, r3
 80023ee:	e741      	b.n	8002274 <__aeabi_dmul+0x30c>
 80023f0:	4912      	ldr	r1, [pc, #72]	; (800243c <__aeabi_dmul+0x4d4>)
 80023f2:	0022      	movs	r2, r4
 80023f4:	4461      	add	r1, ip
 80023f6:	002e      	movs	r6, r5
 80023f8:	408d      	lsls	r5, r1
 80023fa:	408a      	lsls	r2, r1
 80023fc:	40c6      	lsrs	r6, r0
 80023fe:	1e69      	subs	r1, r5, #1
 8002400:	418d      	sbcs	r5, r1
 8002402:	4332      	orrs	r2, r6
 8002404:	432a      	orrs	r2, r5
 8002406:	40c4      	lsrs	r4, r0
 8002408:	0753      	lsls	r3, r2, #29
 800240a:	d0b6      	beq.n	800237a <__aeabi_dmul+0x412>
 800240c:	210f      	movs	r1, #15
 800240e:	4011      	ands	r1, r2
 8002410:	2904      	cmp	r1, #4
 8002412:	d1ac      	bne.n	800236e <__aeabi_dmul+0x406>
 8002414:	e7b1      	b.n	800237a <__aeabi_dmul+0x412>
 8002416:	0765      	lsls	r5, r4, #29
 8002418:	0264      	lsls	r4, r4, #9
 800241a:	0b24      	lsrs	r4, r4, #12
 800241c:	08d2      	lsrs	r2, r2, #3
 800241e:	4315      	orrs	r5, r2
 8002420:	2200      	movs	r2, #0
 8002422:	e611      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	0312      	lsls	r2, r2, #12
 8002428:	4314      	orrs	r4, r2
 800242a:	0324      	lsls	r4, r4, #12
 800242c:	4a01      	ldr	r2, [pc, #4]	; (8002434 <__aeabi_dmul+0x4cc>)
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	e60a      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	000007ff 	.word	0x000007ff
 8002438:	0000043e 	.word	0x0000043e
 800243c:	0000041e 	.word	0x0000041e

08002440 <__aeabi_dsub>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	4657      	mov	r7, sl
 8002444:	464e      	mov	r6, r9
 8002446:	4645      	mov	r5, r8
 8002448:	46de      	mov	lr, fp
 800244a:	0004      	movs	r4, r0
 800244c:	b5e0      	push	{r5, r6, r7, lr}
 800244e:	001f      	movs	r7, r3
 8002450:	0010      	movs	r0, r2
 8002452:	030b      	lsls	r3, r1, #12
 8002454:	0f62      	lsrs	r2, r4, #29
 8002456:	004e      	lsls	r6, r1, #1
 8002458:	0fcd      	lsrs	r5, r1, #31
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	0339      	lsls	r1, r7, #12
 800245e:	4313      	orrs	r3, r2
 8002460:	0a49      	lsrs	r1, r1, #9
 8002462:	00e2      	lsls	r2, r4, #3
 8002464:	0f44      	lsrs	r4, r0, #29
 8002466:	4321      	orrs	r1, r4
 8002468:	4cc2      	ldr	r4, [pc, #776]	; (8002774 <__aeabi_dsub+0x334>)
 800246a:	4691      	mov	r9, r2
 800246c:	4692      	mov	sl, r2
 800246e:	00c0      	lsls	r0, r0, #3
 8002470:	007a      	lsls	r2, r7, #1
 8002472:	4680      	mov	r8, r0
 8002474:	0d76      	lsrs	r6, r6, #21
 8002476:	0d52      	lsrs	r2, r2, #21
 8002478:	0fff      	lsrs	r7, r7, #31
 800247a:	42a2      	cmp	r2, r4
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x40>
 800247e:	e0b4      	b.n	80025ea <__aeabi_dsub+0x1aa>
 8002480:	2401      	movs	r4, #1
 8002482:	4067      	eors	r7, r4
 8002484:	46bb      	mov	fp, r7
 8002486:	42bd      	cmp	r5, r7
 8002488:	d100      	bne.n	800248c <__aeabi_dsub+0x4c>
 800248a:	e088      	b.n	800259e <__aeabi_dsub+0x15e>
 800248c:	1ab4      	subs	r4, r6, r2
 800248e:	46a4      	mov	ip, r4
 8002490:	2c00      	cmp	r4, #0
 8002492:	dc00      	bgt.n	8002496 <__aeabi_dsub+0x56>
 8002494:	e0b2      	b.n	80025fc <__aeabi_dsub+0x1bc>
 8002496:	2a00      	cmp	r2, #0
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x5c>
 800249a:	e0c5      	b.n	8002628 <__aeabi_dsub+0x1e8>
 800249c:	4ab5      	ldr	r2, [pc, #724]	; (8002774 <__aeabi_dsub+0x334>)
 800249e:	4296      	cmp	r6, r2
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x64>
 80024a2:	e28b      	b.n	80029bc <__aeabi_dsub+0x57c>
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	0412      	lsls	r2, r2, #16
 80024a8:	4311      	orrs	r1, r2
 80024aa:	4662      	mov	r2, ip
 80024ac:	2a38      	cmp	r2, #56	; 0x38
 80024ae:	dd00      	ble.n	80024b2 <__aeabi_dsub+0x72>
 80024b0:	e1a1      	b.n	80027f6 <__aeabi_dsub+0x3b6>
 80024b2:	2a1f      	cmp	r2, #31
 80024b4:	dd00      	ble.n	80024b8 <__aeabi_dsub+0x78>
 80024b6:	e216      	b.n	80028e6 <__aeabi_dsub+0x4a6>
 80024b8:	2720      	movs	r7, #32
 80024ba:	000c      	movs	r4, r1
 80024bc:	1abf      	subs	r7, r7, r2
 80024be:	40bc      	lsls	r4, r7
 80024c0:	0002      	movs	r2, r0
 80024c2:	46a0      	mov	r8, r4
 80024c4:	4664      	mov	r4, ip
 80024c6:	40b8      	lsls	r0, r7
 80024c8:	40e2      	lsrs	r2, r4
 80024ca:	4644      	mov	r4, r8
 80024cc:	4314      	orrs	r4, r2
 80024ce:	0002      	movs	r2, r0
 80024d0:	1e50      	subs	r0, r2, #1
 80024d2:	4182      	sbcs	r2, r0
 80024d4:	4660      	mov	r0, ip
 80024d6:	40c1      	lsrs	r1, r0
 80024d8:	4322      	orrs	r2, r4
 80024da:	1a5b      	subs	r3, r3, r1
 80024dc:	4649      	mov	r1, r9
 80024de:	1a8c      	subs	r4, r1, r2
 80024e0:	45a1      	cmp	r9, r4
 80024e2:	4192      	sbcs	r2, r2
 80024e4:	4252      	negs	r2, r2
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	4698      	mov	r8, r3
 80024ea:	4643      	mov	r3, r8
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	d400      	bmi.n	80024f2 <__aeabi_dsub+0xb2>
 80024f0:	e117      	b.n	8002722 <__aeabi_dsub+0x2e2>
 80024f2:	4643      	mov	r3, r8
 80024f4:	025b      	lsls	r3, r3, #9
 80024f6:	0a5b      	lsrs	r3, r3, #9
 80024f8:	4698      	mov	r8, r3
 80024fa:	4643      	mov	r3, r8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0xc2>
 8002500:	e16c      	b.n	80027dc <__aeabi_dsub+0x39c>
 8002502:	4640      	mov	r0, r8
 8002504:	f000 fc02 	bl	8002d0c <__clzsi2>
 8002508:	0002      	movs	r2, r0
 800250a:	3a08      	subs	r2, #8
 800250c:	2120      	movs	r1, #32
 800250e:	0020      	movs	r0, r4
 8002510:	4643      	mov	r3, r8
 8002512:	1a89      	subs	r1, r1, r2
 8002514:	4093      	lsls	r3, r2
 8002516:	40c8      	lsrs	r0, r1
 8002518:	4094      	lsls	r4, r2
 800251a:	4303      	orrs	r3, r0
 800251c:	4296      	cmp	r6, r2
 800251e:	dd00      	ble.n	8002522 <__aeabi_dsub+0xe2>
 8002520:	e157      	b.n	80027d2 <__aeabi_dsub+0x392>
 8002522:	1b96      	subs	r6, r2, r6
 8002524:	1c71      	adds	r1, r6, #1
 8002526:	291f      	cmp	r1, #31
 8002528:	dd00      	ble.n	800252c <__aeabi_dsub+0xec>
 800252a:	e1cb      	b.n	80028c4 <__aeabi_dsub+0x484>
 800252c:	2220      	movs	r2, #32
 800252e:	0018      	movs	r0, r3
 8002530:	0026      	movs	r6, r4
 8002532:	1a52      	subs	r2, r2, r1
 8002534:	4094      	lsls	r4, r2
 8002536:	4090      	lsls	r0, r2
 8002538:	40ce      	lsrs	r6, r1
 800253a:	40cb      	lsrs	r3, r1
 800253c:	1e62      	subs	r2, r4, #1
 800253e:	4194      	sbcs	r4, r2
 8002540:	4330      	orrs	r0, r6
 8002542:	4698      	mov	r8, r3
 8002544:	2600      	movs	r6, #0
 8002546:	4304      	orrs	r4, r0
 8002548:	0763      	lsls	r3, r4, #29
 800254a:	d009      	beq.n	8002560 <__aeabi_dsub+0x120>
 800254c:	230f      	movs	r3, #15
 800254e:	4023      	ands	r3, r4
 8002550:	2b04      	cmp	r3, #4
 8002552:	d005      	beq.n	8002560 <__aeabi_dsub+0x120>
 8002554:	1d23      	adds	r3, r4, #4
 8002556:	42a3      	cmp	r3, r4
 8002558:	41a4      	sbcs	r4, r4
 800255a:	4264      	negs	r4, r4
 800255c:	44a0      	add	r8, r4
 800255e:	001c      	movs	r4, r3
 8002560:	4643      	mov	r3, r8
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	d400      	bmi.n	8002568 <__aeabi_dsub+0x128>
 8002566:	e0df      	b.n	8002728 <__aeabi_dsub+0x2e8>
 8002568:	4b82      	ldr	r3, [pc, #520]	; (8002774 <__aeabi_dsub+0x334>)
 800256a:	3601      	adds	r6, #1
 800256c:	429e      	cmp	r6, r3
 800256e:	d100      	bne.n	8002572 <__aeabi_dsub+0x132>
 8002570:	e0fb      	b.n	800276a <__aeabi_dsub+0x32a>
 8002572:	4642      	mov	r2, r8
 8002574:	4b80      	ldr	r3, [pc, #512]	; (8002778 <__aeabi_dsub+0x338>)
 8002576:	08e4      	lsrs	r4, r4, #3
 8002578:	401a      	ands	r2, r3
 800257a:	0013      	movs	r3, r2
 800257c:	0571      	lsls	r1, r6, #21
 800257e:	0752      	lsls	r2, r2, #29
 8002580:	025b      	lsls	r3, r3, #9
 8002582:	4322      	orrs	r2, r4
 8002584:	0b1b      	lsrs	r3, r3, #12
 8002586:	0d49      	lsrs	r1, r1, #21
 8002588:	0509      	lsls	r1, r1, #20
 800258a:	07ed      	lsls	r5, r5, #31
 800258c:	4319      	orrs	r1, r3
 800258e:	4329      	orrs	r1, r5
 8002590:	0010      	movs	r0, r2
 8002592:	bcf0      	pop	{r4, r5, r6, r7}
 8002594:	46bb      	mov	fp, r7
 8002596:	46b2      	mov	sl, r6
 8002598:	46a9      	mov	r9, r5
 800259a:	46a0      	mov	r8, r4
 800259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800259e:	1ab4      	subs	r4, r6, r2
 80025a0:	46a4      	mov	ip, r4
 80025a2:	2c00      	cmp	r4, #0
 80025a4:	dd58      	ble.n	8002658 <__aeabi_dsub+0x218>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x16c>
 80025aa:	e09e      	b.n	80026ea <__aeabi_dsub+0x2aa>
 80025ac:	4a71      	ldr	r2, [pc, #452]	; (8002774 <__aeabi_dsub+0x334>)
 80025ae:	4296      	cmp	r6, r2
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x174>
 80025b2:	e13b      	b.n	800282c <__aeabi_dsub+0x3ec>
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0412      	lsls	r2, r2, #16
 80025b8:	4311      	orrs	r1, r2
 80025ba:	4662      	mov	r2, ip
 80025bc:	2a38      	cmp	r2, #56	; 0x38
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dsub+0x182>
 80025c0:	e0c1      	b.n	8002746 <__aeabi_dsub+0x306>
 80025c2:	2a1f      	cmp	r2, #31
 80025c4:	dc00      	bgt.n	80025c8 <__aeabi_dsub+0x188>
 80025c6:	e1bb      	b.n	8002940 <__aeabi_dsub+0x500>
 80025c8:	000c      	movs	r4, r1
 80025ca:	3a20      	subs	r2, #32
 80025cc:	40d4      	lsrs	r4, r2
 80025ce:	0022      	movs	r2, r4
 80025d0:	4664      	mov	r4, ip
 80025d2:	2c20      	cmp	r4, #32
 80025d4:	d004      	beq.n	80025e0 <__aeabi_dsub+0x1a0>
 80025d6:	2740      	movs	r7, #64	; 0x40
 80025d8:	1b3f      	subs	r7, r7, r4
 80025da:	40b9      	lsls	r1, r7
 80025dc:	4308      	orrs	r0, r1
 80025de:	4680      	mov	r8, r0
 80025e0:	4644      	mov	r4, r8
 80025e2:	1e61      	subs	r1, r4, #1
 80025e4:	418c      	sbcs	r4, r1
 80025e6:	4314      	orrs	r4, r2
 80025e8:	e0b1      	b.n	800274e <__aeabi_dsub+0x30e>
 80025ea:	000c      	movs	r4, r1
 80025ec:	4304      	orrs	r4, r0
 80025ee:	d02a      	beq.n	8002646 <__aeabi_dsub+0x206>
 80025f0:	46bb      	mov	fp, r7
 80025f2:	42bd      	cmp	r5, r7
 80025f4:	d02d      	beq.n	8002652 <__aeabi_dsub+0x212>
 80025f6:	4c61      	ldr	r4, [pc, #388]	; (800277c <__aeabi_dsub+0x33c>)
 80025f8:	46a4      	mov	ip, r4
 80025fa:	44b4      	add	ip, r6
 80025fc:	4664      	mov	r4, ip
 80025fe:	2c00      	cmp	r4, #0
 8002600:	d05c      	beq.n	80026bc <__aeabi_dsub+0x27c>
 8002602:	1b94      	subs	r4, r2, r6
 8002604:	46a4      	mov	ip, r4
 8002606:	2e00      	cmp	r6, #0
 8002608:	d000      	beq.n	800260c <__aeabi_dsub+0x1cc>
 800260a:	e115      	b.n	8002838 <__aeabi_dsub+0x3f8>
 800260c:	464d      	mov	r5, r9
 800260e:	431d      	orrs	r5, r3
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x1d4>
 8002612:	e1c3      	b.n	800299c <__aeabi_dsub+0x55c>
 8002614:	1e65      	subs	r5, r4, #1
 8002616:	2c01      	cmp	r4, #1
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x1dc>
 800261a:	e20c      	b.n	8002a36 <__aeabi_dsub+0x5f6>
 800261c:	4e55      	ldr	r6, [pc, #340]	; (8002774 <__aeabi_dsub+0x334>)
 800261e:	42b4      	cmp	r4, r6
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x1e4>
 8002622:	e1f8      	b.n	8002a16 <__aeabi_dsub+0x5d6>
 8002624:	46ac      	mov	ip, r5
 8002626:	e10e      	b.n	8002846 <__aeabi_dsub+0x406>
 8002628:	000a      	movs	r2, r1
 800262a:	4302      	orrs	r2, r0
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x1f0>
 800262e:	e136      	b.n	800289e <__aeabi_dsub+0x45e>
 8002630:	0022      	movs	r2, r4
 8002632:	3a01      	subs	r2, #1
 8002634:	2c01      	cmp	r4, #1
 8002636:	d100      	bne.n	800263a <__aeabi_dsub+0x1fa>
 8002638:	e1c6      	b.n	80029c8 <__aeabi_dsub+0x588>
 800263a:	4c4e      	ldr	r4, [pc, #312]	; (8002774 <__aeabi_dsub+0x334>)
 800263c:	45a4      	cmp	ip, r4
 800263e:	d100      	bne.n	8002642 <__aeabi_dsub+0x202>
 8002640:	e0f4      	b.n	800282c <__aeabi_dsub+0x3ec>
 8002642:	4694      	mov	ip, r2
 8002644:	e731      	b.n	80024aa <__aeabi_dsub+0x6a>
 8002646:	2401      	movs	r4, #1
 8002648:	4067      	eors	r7, r4
 800264a:	46bb      	mov	fp, r7
 800264c:	42bd      	cmp	r5, r7
 800264e:	d000      	beq.n	8002652 <__aeabi_dsub+0x212>
 8002650:	e71c      	b.n	800248c <__aeabi_dsub+0x4c>
 8002652:	4c4a      	ldr	r4, [pc, #296]	; (800277c <__aeabi_dsub+0x33c>)
 8002654:	46a4      	mov	ip, r4
 8002656:	44b4      	add	ip, r6
 8002658:	4664      	mov	r4, ip
 800265a:	2c00      	cmp	r4, #0
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x220>
 800265e:	e0cf      	b.n	8002800 <__aeabi_dsub+0x3c0>
 8002660:	1b94      	subs	r4, r2, r6
 8002662:	46a4      	mov	ip, r4
 8002664:	2e00      	cmp	r6, #0
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x22a>
 8002668:	e15c      	b.n	8002924 <__aeabi_dsub+0x4e4>
 800266a:	4e42      	ldr	r6, [pc, #264]	; (8002774 <__aeabi_dsub+0x334>)
 800266c:	42b2      	cmp	r2, r6
 800266e:	d100      	bne.n	8002672 <__aeabi_dsub+0x232>
 8002670:	e1ec      	b.n	8002a4c <__aeabi_dsub+0x60c>
 8002672:	2680      	movs	r6, #128	; 0x80
 8002674:	0436      	lsls	r6, r6, #16
 8002676:	4333      	orrs	r3, r6
 8002678:	4664      	mov	r4, ip
 800267a:	2c38      	cmp	r4, #56	; 0x38
 800267c:	dd00      	ble.n	8002680 <__aeabi_dsub+0x240>
 800267e:	e1b3      	b.n	80029e8 <__aeabi_dsub+0x5a8>
 8002680:	2c1f      	cmp	r4, #31
 8002682:	dd00      	ble.n	8002686 <__aeabi_dsub+0x246>
 8002684:	e238      	b.n	8002af8 <__aeabi_dsub+0x6b8>
 8002686:	2620      	movs	r6, #32
 8002688:	1b36      	subs	r6, r6, r4
 800268a:	001c      	movs	r4, r3
 800268c:	40b4      	lsls	r4, r6
 800268e:	464f      	mov	r7, r9
 8002690:	46a0      	mov	r8, r4
 8002692:	4664      	mov	r4, ip
 8002694:	40e7      	lsrs	r7, r4
 8002696:	4644      	mov	r4, r8
 8002698:	433c      	orrs	r4, r7
 800269a:	464f      	mov	r7, r9
 800269c:	40b7      	lsls	r7, r6
 800269e:	003e      	movs	r6, r7
 80026a0:	1e77      	subs	r7, r6, #1
 80026a2:	41be      	sbcs	r6, r7
 80026a4:	4334      	orrs	r4, r6
 80026a6:	4666      	mov	r6, ip
 80026a8:	40f3      	lsrs	r3, r6
 80026aa:	18c9      	adds	r1, r1, r3
 80026ac:	1824      	adds	r4, r4, r0
 80026ae:	4284      	cmp	r4, r0
 80026b0:	419b      	sbcs	r3, r3
 80026b2:	425b      	negs	r3, r3
 80026b4:	4698      	mov	r8, r3
 80026b6:	0016      	movs	r6, r2
 80026b8:	4488      	add	r8, r1
 80026ba:	e04e      	b.n	800275a <__aeabi_dsub+0x31a>
 80026bc:	4a30      	ldr	r2, [pc, #192]	; (8002780 <__aeabi_dsub+0x340>)
 80026be:	1c74      	adds	r4, r6, #1
 80026c0:	4214      	tst	r4, r2
 80026c2:	d000      	beq.n	80026c6 <__aeabi_dsub+0x286>
 80026c4:	e0d6      	b.n	8002874 <__aeabi_dsub+0x434>
 80026c6:	464a      	mov	r2, r9
 80026c8:	431a      	orrs	r2, r3
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d000      	beq.n	80026d0 <__aeabi_dsub+0x290>
 80026ce:	e15b      	b.n	8002988 <__aeabi_dsub+0x548>
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0x296>
 80026d4:	e1a5      	b.n	8002a22 <__aeabi_dsub+0x5e2>
 80026d6:	000a      	movs	r2, r1
 80026d8:	4302      	orrs	r2, r0
 80026da:	d000      	beq.n	80026de <__aeabi_dsub+0x29e>
 80026dc:	e1bb      	b.n	8002a56 <__aeabi_dsub+0x616>
 80026de:	464a      	mov	r2, r9
 80026e0:	0759      	lsls	r1, r3, #29
 80026e2:	08d2      	lsrs	r2, r2, #3
 80026e4:	430a      	orrs	r2, r1
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	e027      	b.n	800273a <__aeabi_dsub+0x2fa>
 80026ea:	000a      	movs	r2, r1
 80026ec:	4302      	orrs	r2, r0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0x2b2>
 80026f0:	e174      	b.n	80029dc <__aeabi_dsub+0x59c>
 80026f2:	0022      	movs	r2, r4
 80026f4:	3a01      	subs	r2, #1
 80026f6:	2c01      	cmp	r4, #1
 80026f8:	d005      	beq.n	8002706 <__aeabi_dsub+0x2c6>
 80026fa:	4c1e      	ldr	r4, [pc, #120]	; (8002774 <__aeabi_dsub+0x334>)
 80026fc:	45a4      	cmp	ip, r4
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x2c2>
 8002700:	e094      	b.n	800282c <__aeabi_dsub+0x3ec>
 8002702:	4694      	mov	ip, r2
 8002704:	e759      	b.n	80025ba <__aeabi_dsub+0x17a>
 8002706:	4448      	add	r0, r9
 8002708:	4548      	cmp	r0, r9
 800270a:	4192      	sbcs	r2, r2
 800270c:	185b      	adds	r3, r3, r1
 800270e:	4698      	mov	r8, r3
 8002710:	0004      	movs	r4, r0
 8002712:	4252      	negs	r2, r2
 8002714:	4490      	add	r8, r2
 8002716:	4643      	mov	r3, r8
 8002718:	2602      	movs	r6, #2
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	d500      	bpl.n	8002720 <__aeabi_dsub+0x2e0>
 800271e:	e0c4      	b.n	80028aa <__aeabi_dsub+0x46a>
 8002720:	3e01      	subs	r6, #1
 8002722:	0763      	lsls	r3, r4, #29
 8002724:	d000      	beq.n	8002728 <__aeabi_dsub+0x2e8>
 8002726:	e711      	b.n	800254c <__aeabi_dsub+0x10c>
 8002728:	4643      	mov	r3, r8
 800272a:	46b4      	mov	ip, r6
 800272c:	0759      	lsls	r1, r3, #29
 800272e:	08e2      	lsrs	r2, r4, #3
 8002730:	430a      	orrs	r2, r1
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	490f      	ldr	r1, [pc, #60]	; (8002774 <__aeabi_dsub+0x334>)
 8002736:	458c      	cmp	ip, r1
 8002738:	d040      	beq.n	80027bc <__aeabi_dsub+0x37c>
 800273a:	4661      	mov	r1, ip
 800273c:	031b      	lsls	r3, r3, #12
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	0b1b      	lsrs	r3, r3, #12
 8002742:	0d49      	lsrs	r1, r1, #21
 8002744:	e720      	b.n	8002588 <__aeabi_dsub+0x148>
 8002746:	4301      	orrs	r1, r0
 8002748:	000c      	movs	r4, r1
 800274a:	1e61      	subs	r1, r4, #1
 800274c:	418c      	sbcs	r4, r1
 800274e:	444c      	add	r4, r9
 8002750:	454c      	cmp	r4, r9
 8002752:	4192      	sbcs	r2, r2
 8002754:	4252      	negs	r2, r2
 8002756:	4690      	mov	r8, r2
 8002758:	4498      	add	r8, r3
 800275a:	4643      	mov	r3, r8
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	d5e0      	bpl.n	8002722 <__aeabi_dsub+0x2e2>
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__aeabi_dsub+0x334>)
 8002762:	3601      	adds	r6, #1
 8002764:	429e      	cmp	r6, r3
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x32a>
 8002768:	e09f      	b.n	80028aa <__aeabi_dsub+0x46a>
 800276a:	0031      	movs	r1, r6
 800276c:	2300      	movs	r3, #0
 800276e:	2200      	movs	r2, #0
 8002770:	e70a      	b.n	8002588 <__aeabi_dsub+0x148>
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	000007ff 	.word	0x000007ff
 8002778:	ff7fffff 	.word	0xff7fffff
 800277c:	fffff801 	.word	0xfffff801
 8002780:	000007fe 	.word	0x000007fe
 8002784:	2a00      	cmp	r2, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x34a>
 8002788:	e160      	b.n	8002a4c <__aeabi_dsub+0x60c>
 800278a:	000a      	movs	r2, r1
 800278c:	4302      	orrs	r2, r0
 800278e:	d04d      	beq.n	800282c <__aeabi_dsub+0x3ec>
 8002790:	464a      	mov	r2, r9
 8002792:	075c      	lsls	r4, r3, #29
 8002794:	08d2      	lsrs	r2, r2, #3
 8002796:	4322      	orrs	r2, r4
 8002798:	2480      	movs	r4, #128	; 0x80
 800279a:	08db      	lsrs	r3, r3, #3
 800279c:	0324      	lsls	r4, r4, #12
 800279e:	4223      	tst	r3, r4
 80027a0:	d007      	beq.n	80027b2 <__aeabi_dsub+0x372>
 80027a2:	08ce      	lsrs	r6, r1, #3
 80027a4:	4226      	tst	r6, r4
 80027a6:	d104      	bne.n	80027b2 <__aeabi_dsub+0x372>
 80027a8:	465d      	mov	r5, fp
 80027aa:	0033      	movs	r3, r6
 80027ac:	08c2      	lsrs	r2, r0, #3
 80027ae:	0749      	lsls	r1, r1, #29
 80027b0:	430a      	orrs	r2, r1
 80027b2:	0f51      	lsrs	r1, r2, #29
 80027b4:	00d2      	lsls	r2, r2, #3
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	0749      	lsls	r1, r1, #29
 80027ba:	430a      	orrs	r2, r1
 80027bc:	0011      	movs	r1, r2
 80027be:	4319      	orrs	r1, r3
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x384>
 80027c2:	e1c8      	b.n	8002b56 <__aeabi_dsub+0x716>
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0309      	lsls	r1, r1, #12
 80027c8:	430b      	orrs	r3, r1
 80027ca:	031b      	lsls	r3, r3, #12
 80027cc:	49d5      	ldr	r1, [pc, #852]	; (8002b24 <__aeabi_dsub+0x6e4>)
 80027ce:	0b1b      	lsrs	r3, r3, #12
 80027d0:	e6da      	b.n	8002588 <__aeabi_dsub+0x148>
 80027d2:	49d5      	ldr	r1, [pc, #852]	; (8002b28 <__aeabi_dsub+0x6e8>)
 80027d4:	1ab6      	subs	r6, r6, r2
 80027d6:	400b      	ands	r3, r1
 80027d8:	4698      	mov	r8, r3
 80027da:	e6b5      	b.n	8002548 <__aeabi_dsub+0x108>
 80027dc:	0020      	movs	r0, r4
 80027de:	f000 fa95 	bl	8002d0c <__clzsi2>
 80027e2:	0002      	movs	r2, r0
 80027e4:	3218      	adds	r2, #24
 80027e6:	2a1f      	cmp	r2, #31
 80027e8:	dc00      	bgt.n	80027ec <__aeabi_dsub+0x3ac>
 80027ea:	e68f      	b.n	800250c <__aeabi_dsub+0xcc>
 80027ec:	0023      	movs	r3, r4
 80027ee:	3808      	subs	r0, #8
 80027f0:	4083      	lsls	r3, r0
 80027f2:	2400      	movs	r4, #0
 80027f4:	e692      	b.n	800251c <__aeabi_dsub+0xdc>
 80027f6:	4308      	orrs	r0, r1
 80027f8:	0002      	movs	r2, r0
 80027fa:	1e50      	subs	r0, r2, #1
 80027fc:	4182      	sbcs	r2, r0
 80027fe:	e66d      	b.n	80024dc <__aeabi_dsub+0x9c>
 8002800:	4cca      	ldr	r4, [pc, #808]	; (8002b2c <__aeabi_dsub+0x6ec>)
 8002802:	1c72      	adds	r2, r6, #1
 8002804:	4222      	tst	r2, r4
 8002806:	d000      	beq.n	800280a <__aeabi_dsub+0x3ca>
 8002808:	e0ad      	b.n	8002966 <__aeabi_dsub+0x526>
 800280a:	464a      	mov	r2, r9
 800280c:	431a      	orrs	r2, r3
 800280e:	2e00      	cmp	r6, #0
 8002810:	d1b8      	bne.n	8002784 <__aeabi_dsub+0x344>
 8002812:	2a00      	cmp	r2, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x3d8>
 8002816:	e158      	b.n	8002aca <__aeabi_dsub+0x68a>
 8002818:	000a      	movs	r2, r1
 800281a:	4302      	orrs	r2, r0
 800281c:	d000      	beq.n	8002820 <__aeabi_dsub+0x3e0>
 800281e:	e159      	b.n	8002ad4 <__aeabi_dsub+0x694>
 8002820:	464a      	mov	r2, r9
 8002822:	0759      	lsls	r1, r3, #29
 8002824:	08d2      	lsrs	r2, r2, #3
 8002826:	430a      	orrs	r2, r1
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	e786      	b.n	800273a <__aeabi_dsub+0x2fa>
 800282c:	464a      	mov	r2, r9
 800282e:	0759      	lsls	r1, r3, #29
 8002830:	08d2      	lsrs	r2, r2, #3
 8002832:	430a      	orrs	r2, r1
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	e7c1      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002838:	4dba      	ldr	r5, [pc, #744]	; (8002b24 <__aeabi_dsub+0x6e4>)
 800283a:	42aa      	cmp	r2, r5
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x400>
 800283e:	e11e      	b.n	8002a7e <__aeabi_dsub+0x63e>
 8002840:	2580      	movs	r5, #128	; 0x80
 8002842:	042d      	lsls	r5, r5, #16
 8002844:	432b      	orrs	r3, r5
 8002846:	4664      	mov	r4, ip
 8002848:	2c38      	cmp	r4, #56	; 0x38
 800284a:	dc5d      	bgt.n	8002908 <__aeabi_dsub+0x4c8>
 800284c:	2c1f      	cmp	r4, #31
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x412>
 8002850:	e0d0      	b.n	80029f4 <__aeabi_dsub+0x5b4>
 8002852:	2520      	movs	r5, #32
 8002854:	4667      	mov	r7, ip
 8002856:	1b2d      	subs	r5, r5, r4
 8002858:	464e      	mov	r6, r9
 800285a:	001c      	movs	r4, r3
 800285c:	40fe      	lsrs	r6, r7
 800285e:	40ac      	lsls	r4, r5
 8002860:	4334      	orrs	r4, r6
 8002862:	464e      	mov	r6, r9
 8002864:	40ae      	lsls	r6, r5
 8002866:	0035      	movs	r5, r6
 8002868:	40fb      	lsrs	r3, r7
 800286a:	1e6e      	subs	r6, r5, #1
 800286c:	41b5      	sbcs	r5, r6
 800286e:	1ac9      	subs	r1, r1, r3
 8002870:	432c      	orrs	r4, r5
 8002872:	e04e      	b.n	8002912 <__aeabi_dsub+0x4d2>
 8002874:	464a      	mov	r2, r9
 8002876:	1a14      	subs	r4, r2, r0
 8002878:	45a1      	cmp	r9, r4
 800287a:	4192      	sbcs	r2, r2
 800287c:	4252      	negs	r2, r2
 800287e:	4690      	mov	r8, r2
 8002880:	1a5f      	subs	r7, r3, r1
 8002882:	003a      	movs	r2, r7
 8002884:	4647      	mov	r7, r8
 8002886:	1bd2      	subs	r2, r2, r7
 8002888:	4690      	mov	r8, r2
 800288a:	0212      	lsls	r2, r2, #8
 800288c:	d500      	bpl.n	8002890 <__aeabi_dsub+0x450>
 800288e:	e08b      	b.n	80029a8 <__aeabi_dsub+0x568>
 8002890:	4642      	mov	r2, r8
 8002892:	4322      	orrs	r2, r4
 8002894:	d000      	beq.n	8002898 <__aeabi_dsub+0x458>
 8002896:	e630      	b.n	80024fa <__aeabi_dsub+0xba>
 8002898:	2300      	movs	r3, #0
 800289a:	2500      	movs	r5, #0
 800289c:	e74d      	b.n	800273a <__aeabi_dsub+0x2fa>
 800289e:	464a      	mov	r2, r9
 80028a0:	0759      	lsls	r1, r3, #29
 80028a2:	08d2      	lsrs	r2, r2, #3
 80028a4:	430a      	orrs	r2, r1
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	e744      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80028aa:	4642      	mov	r2, r8
 80028ac:	4b9e      	ldr	r3, [pc, #632]	; (8002b28 <__aeabi_dsub+0x6e8>)
 80028ae:	0861      	lsrs	r1, r4, #1
 80028b0:	401a      	ands	r2, r3
 80028b2:	0013      	movs	r3, r2
 80028b4:	2201      	movs	r2, #1
 80028b6:	4014      	ands	r4, r2
 80028b8:	430c      	orrs	r4, r1
 80028ba:	07da      	lsls	r2, r3, #31
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	4698      	mov	r8, r3
 80028c0:	4314      	orrs	r4, r2
 80028c2:	e641      	b.n	8002548 <__aeabi_dsub+0x108>
 80028c4:	001a      	movs	r2, r3
 80028c6:	3e1f      	subs	r6, #31
 80028c8:	40f2      	lsrs	r2, r6
 80028ca:	0016      	movs	r6, r2
 80028cc:	2920      	cmp	r1, #32
 80028ce:	d003      	beq.n	80028d8 <__aeabi_dsub+0x498>
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	1a51      	subs	r1, r2, r1
 80028d4:	408b      	lsls	r3, r1
 80028d6:	431c      	orrs	r4, r3
 80028d8:	1e62      	subs	r2, r4, #1
 80028da:	4194      	sbcs	r4, r2
 80028dc:	2300      	movs	r3, #0
 80028de:	4334      	orrs	r4, r6
 80028e0:	4698      	mov	r8, r3
 80028e2:	2600      	movs	r6, #0
 80028e4:	e71d      	b.n	8002722 <__aeabi_dsub+0x2e2>
 80028e6:	000c      	movs	r4, r1
 80028e8:	3a20      	subs	r2, #32
 80028ea:	40d4      	lsrs	r4, r2
 80028ec:	0022      	movs	r2, r4
 80028ee:	4664      	mov	r4, ip
 80028f0:	2c20      	cmp	r4, #32
 80028f2:	d004      	beq.n	80028fe <__aeabi_dsub+0x4be>
 80028f4:	2740      	movs	r7, #64	; 0x40
 80028f6:	1b3f      	subs	r7, r7, r4
 80028f8:	40b9      	lsls	r1, r7
 80028fa:	4308      	orrs	r0, r1
 80028fc:	4680      	mov	r8, r0
 80028fe:	4644      	mov	r4, r8
 8002900:	1e61      	subs	r1, r4, #1
 8002902:	418c      	sbcs	r4, r1
 8002904:	4322      	orrs	r2, r4
 8002906:	e5e9      	b.n	80024dc <__aeabi_dsub+0x9c>
 8002908:	464c      	mov	r4, r9
 800290a:	4323      	orrs	r3, r4
 800290c:	001c      	movs	r4, r3
 800290e:	1e63      	subs	r3, r4, #1
 8002910:	419c      	sbcs	r4, r3
 8002912:	1b04      	subs	r4, r0, r4
 8002914:	42a0      	cmp	r0, r4
 8002916:	419b      	sbcs	r3, r3
 8002918:	425b      	negs	r3, r3
 800291a:	1acb      	subs	r3, r1, r3
 800291c:	4698      	mov	r8, r3
 800291e:	465d      	mov	r5, fp
 8002920:	0016      	movs	r6, r2
 8002922:	e5e2      	b.n	80024ea <__aeabi_dsub+0xaa>
 8002924:	464e      	mov	r6, r9
 8002926:	431e      	orrs	r6, r3
 8002928:	d100      	bne.n	800292c <__aeabi_dsub+0x4ec>
 800292a:	e0ae      	b.n	8002a8a <__aeabi_dsub+0x64a>
 800292c:	1e66      	subs	r6, r4, #1
 800292e:	2c01      	cmp	r4, #1
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x4f4>
 8002932:	e0fd      	b.n	8002b30 <__aeabi_dsub+0x6f0>
 8002934:	4f7b      	ldr	r7, [pc, #492]	; (8002b24 <__aeabi_dsub+0x6e4>)
 8002936:	42bc      	cmp	r4, r7
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x4fc>
 800293a:	e107      	b.n	8002b4c <__aeabi_dsub+0x70c>
 800293c:	46b4      	mov	ip, r6
 800293e:	e69b      	b.n	8002678 <__aeabi_dsub+0x238>
 8002940:	4664      	mov	r4, ip
 8002942:	2220      	movs	r2, #32
 8002944:	1b12      	subs	r2, r2, r4
 8002946:	000c      	movs	r4, r1
 8002948:	4094      	lsls	r4, r2
 800294a:	0007      	movs	r7, r0
 800294c:	4090      	lsls	r0, r2
 800294e:	46a0      	mov	r8, r4
 8002950:	4664      	mov	r4, ip
 8002952:	1e42      	subs	r2, r0, #1
 8002954:	4190      	sbcs	r0, r2
 8002956:	4662      	mov	r2, ip
 8002958:	40e7      	lsrs	r7, r4
 800295a:	4644      	mov	r4, r8
 800295c:	40d1      	lsrs	r1, r2
 800295e:	433c      	orrs	r4, r7
 8002960:	4304      	orrs	r4, r0
 8002962:	185b      	adds	r3, r3, r1
 8002964:	e6f3      	b.n	800274e <__aeabi_dsub+0x30e>
 8002966:	4c6f      	ldr	r4, [pc, #444]	; (8002b24 <__aeabi_dsub+0x6e4>)
 8002968:	42a2      	cmp	r2, r4
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x52e>
 800296c:	e0d5      	b.n	8002b1a <__aeabi_dsub+0x6da>
 800296e:	4448      	add	r0, r9
 8002970:	185b      	adds	r3, r3, r1
 8002972:	4548      	cmp	r0, r9
 8002974:	4189      	sbcs	r1, r1
 8002976:	4249      	negs	r1, r1
 8002978:	185b      	adds	r3, r3, r1
 800297a:	07dc      	lsls	r4, r3, #31
 800297c:	0840      	lsrs	r0, r0, #1
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	4698      	mov	r8, r3
 8002982:	0016      	movs	r6, r2
 8002984:	4304      	orrs	r4, r0
 8002986:	e6cc      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002988:	2a00      	cmp	r2, #0
 800298a:	d000      	beq.n	800298e <__aeabi_dsub+0x54e>
 800298c:	e082      	b.n	8002a94 <__aeabi_dsub+0x654>
 800298e:	000a      	movs	r2, r1
 8002990:	4302      	orrs	r2, r0
 8002992:	d140      	bne.n	8002a16 <__aeabi_dsub+0x5d6>
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	2500      	movs	r5, #0
 8002998:	031b      	lsls	r3, r3, #12
 800299a:	e713      	b.n	80027c4 <__aeabi_dsub+0x384>
 800299c:	074b      	lsls	r3, r1, #29
 800299e:	08c2      	lsrs	r2, r0, #3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	465d      	mov	r5, fp
 80029a4:	08cb      	lsrs	r3, r1, #3
 80029a6:	e6c5      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80029a8:	464a      	mov	r2, r9
 80029aa:	1a84      	subs	r4, r0, r2
 80029ac:	42a0      	cmp	r0, r4
 80029ae:	4192      	sbcs	r2, r2
 80029b0:	1acb      	subs	r3, r1, r3
 80029b2:	4252      	negs	r2, r2
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	4698      	mov	r8, r3
 80029b8:	465d      	mov	r5, fp
 80029ba:	e59e      	b.n	80024fa <__aeabi_dsub+0xba>
 80029bc:	464a      	mov	r2, r9
 80029be:	0759      	lsls	r1, r3, #29
 80029c0:	08d2      	lsrs	r2, r2, #3
 80029c2:	430a      	orrs	r2, r1
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	e6f9      	b.n	80027bc <__aeabi_dsub+0x37c>
 80029c8:	464a      	mov	r2, r9
 80029ca:	1a14      	subs	r4, r2, r0
 80029cc:	45a1      	cmp	r9, r4
 80029ce:	4192      	sbcs	r2, r2
 80029d0:	1a5b      	subs	r3, r3, r1
 80029d2:	4252      	negs	r2, r2
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	4698      	mov	r8, r3
 80029d8:	2601      	movs	r6, #1
 80029da:	e586      	b.n	80024ea <__aeabi_dsub+0xaa>
 80029dc:	464a      	mov	r2, r9
 80029de:	0759      	lsls	r1, r3, #29
 80029e0:	08d2      	lsrs	r2, r2, #3
 80029e2:	430a      	orrs	r2, r1
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	e6a5      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80029e8:	464c      	mov	r4, r9
 80029ea:	4323      	orrs	r3, r4
 80029ec:	001c      	movs	r4, r3
 80029ee:	1e63      	subs	r3, r4, #1
 80029f0:	419c      	sbcs	r4, r3
 80029f2:	e65b      	b.n	80026ac <__aeabi_dsub+0x26c>
 80029f4:	4665      	mov	r5, ip
 80029f6:	001e      	movs	r6, r3
 80029f8:	3d20      	subs	r5, #32
 80029fa:	40ee      	lsrs	r6, r5
 80029fc:	2c20      	cmp	r4, #32
 80029fe:	d005      	beq.n	8002a0c <__aeabi_dsub+0x5cc>
 8002a00:	2540      	movs	r5, #64	; 0x40
 8002a02:	1b2d      	subs	r5, r5, r4
 8002a04:	40ab      	lsls	r3, r5
 8002a06:	464c      	mov	r4, r9
 8002a08:	431c      	orrs	r4, r3
 8002a0a:	46a2      	mov	sl, r4
 8002a0c:	4654      	mov	r4, sl
 8002a0e:	1e63      	subs	r3, r4, #1
 8002a10:	419c      	sbcs	r4, r3
 8002a12:	4334      	orrs	r4, r6
 8002a14:	e77d      	b.n	8002912 <__aeabi_dsub+0x4d2>
 8002a16:	074b      	lsls	r3, r1, #29
 8002a18:	08c2      	lsrs	r2, r0, #3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	465d      	mov	r5, fp
 8002a1e:	08cb      	lsrs	r3, r1, #3
 8002a20:	e6cc      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a22:	000a      	movs	r2, r1
 8002a24:	4302      	orrs	r2, r0
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x5ea>
 8002a28:	e736      	b.n	8002898 <__aeabi_dsub+0x458>
 8002a2a:	074b      	lsls	r3, r1, #29
 8002a2c:	08c2      	lsrs	r2, r0, #3
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	465d      	mov	r5, fp
 8002a32:	08cb      	lsrs	r3, r1, #3
 8002a34:	e681      	b.n	800273a <__aeabi_dsub+0x2fa>
 8002a36:	464a      	mov	r2, r9
 8002a38:	1a84      	subs	r4, r0, r2
 8002a3a:	42a0      	cmp	r0, r4
 8002a3c:	4192      	sbcs	r2, r2
 8002a3e:	1acb      	subs	r3, r1, r3
 8002a40:	4252      	negs	r2, r2
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	4698      	mov	r8, r3
 8002a46:	465d      	mov	r5, fp
 8002a48:	2601      	movs	r6, #1
 8002a4a:	e54e      	b.n	80024ea <__aeabi_dsub+0xaa>
 8002a4c:	074b      	lsls	r3, r1, #29
 8002a4e:	08c2      	lsrs	r2, r0, #3
 8002a50:	431a      	orrs	r2, r3
 8002a52:	08cb      	lsrs	r3, r1, #3
 8002a54:	e6b2      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a56:	464a      	mov	r2, r9
 8002a58:	1a14      	subs	r4, r2, r0
 8002a5a:	45a1      	cmp	r9, r4
 8002a5c:	4192      	sbcs	r2, r2
 8002a5e:	1a5f      	subs	r7, r3, r1
 8002a60:	4252      	negs	r2, r2
 8002a62:	1aba      	subs	r2, r7, r2
 8002a64:	4690      	mov	r8, r2
 8002a66:	0212      	lsls	r2, r2, #8
 8002a68:	d56b      	bpl.n	8002b42 <__aeabi_dsub+0x702>
 8002a6a:	464a      	mov	r2, r9
 8002a6c:	1a84      	subs	r4, r0, r2
 8002a6e:	42a0      	cmp	r0, r4
 8002a70:	4192      	sbcs	r2, r2
 8002a72:	1acb      	subs	r3, r1, r3
 8002a74:	4252      	negs	r2, r2
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	4698      	mov	r8, r3
 8002a7a:	465d      	mov	r5, fp
 8002a7c:	e564      	b.n	8002548 <__aeabi_dsub+0x108>
 8002a7e:	074b      	lsls	r3, r1, #29
 8002a80:	08c2      	lsrs	r2, r0, #3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	465d      	mov	r5, fp
 8002a86:	08cb      	lsrs	r3, r1, #3
 8002a88:	e698      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a8a:	074b      	lsls	r3, r1, #29
 8002a8c:	08c2      	lsrs	r2, r0, #3
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	08cb      	lsrs	r3, r1, #3
 8002a92:	e64f      	b.n	8002734 <__aeabi_dsub+0x2f4>
 8002a94:	000a      	movs	r2, r1
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d090      	beq.n	80029bc <__aeabi_dsub+0x57c>
 8002a9a:	464a      	mov	r2, r9
 8002a9c:	075c      	lsls	r4, r3, #29
 8002a9e:	08d2      	lsrs	r2, r2, #3
 8002aa0:	4314      	orrs	r4, r2
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	0312      	lsls	r2, r2, #12
 8002aa8:	4213      	tst	r3, r2
 8002aaa:	d008      	beq.n	8002abe <__aeabi_dsub+0x67e>
 8002aac:	08ce      	lsrs	r6, r1, #3
 8002aae:	4216      	tst	r6, r2
 8002ab0:	d105      	bne.n	8002abe <__aeabi_dsub+0x67e>
 8002ab2:	08c0      	lsrs	r0, r0, #3
 8002ab4:	0749      	lsls	r1, r1, #29
 8002ab6:	4308      	orrs	r0, r1
 8002ab8:	0004      	movs	r4, r0
 8002aba:	465d      	mov	r5, fp
 8002abc:	0033      	movs	r3, r6
 8002abe:	0f61      	lsrs	r1, r4, #29
 8002ac0:	00e2      	lsls	r2, r4, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08d2      	lsrs	r2, r2, #3
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	e678      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002aca:	074b      	lsls	r3, r1, #29
 8002acc:	08c2      	lsrs	r2, r0, #3
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	08cb      	lsrs	r3, r1, #3
 8002ad2:	e632      	b.n	800273a <__aeabi_dsub+0x2fa>
 8002ad4:	4448      	add	r0, r9
 8002ad6:	185b      	adds	r3, r3, r1
 8002ad8:	4548      	cmp	r0, r9
 8002ada:	4192      	sbcs	r2, r2
 8002adc:	4698      	mov	r8, r3
 8002ade:	4252      	negs	r2, r2
 8002ae0:	4490      	add	r8, r2
 8002ae2:	4643      	mov	r3, r8
 8002ae4:	0004      	movs	r4, r0
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	d400      	bmi.n	8002aec <__aeabi_dsub+0x6ac>
 8002aea:	e61a      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002aec:	4642      	mov	r2, r8
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <__aeabi_dsub+0x6e8>)
 8002af0:	2601      	movs	r6, #1
 8002af2:	401a      	ands	r2, r3
 8002af4:	4690      	mov	r8, r2
 8002af6:	e614      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002af8:	4666      	mov	r6, ip
 8002afa:	001f      	movs	r7, r3
 8002afc:	3e20      	subs	r6, #32
 8002afe:	40f7      	lsrs	r7, r6
 8002b00:	2c20      	cmp	r4, #32
 8002b02:	d005      	beq.n	8002b10 <__aeabi_dsub+0x6d0>
 8002b04:	2640      	movs	r6, #64	; 0x40
 8002b06:	1b36      	subs	r6, r6, r4
 8002b08:	40b3      	lsls	r3, r6
 8002b0a:	464c      	mov	r4, r9
 8002b0c:	431c      	orrs	r4, r3
 8002b0e:	46a2      	mov	sl, r4
 8002b10:	4654      	mov	r4, sl
 8002b12:	1e63      	subs	r3, r4, #1
 8002b14:	419c      	sbcs	r4, r3
 8002b16:	433c      	orrs	r4, r7
 8002b18:	e5c8      	b.n	80026ac <__aeabi_dsub+0x26c>
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	e532      	b.n	8002588 <__aeabi_dsub+0x148>
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	000007ff 	.word	0x000007ff
 8002b28:	ff7fffff 	.word	0xff7fffff
 8002b2c:	000007fe 	.word	0x000007fe
 8002b30:	464a      	mov	r2, r9
 8002b32:	1814      	adds	r4, r2, r0
 8002b34:	4284      	cmp	r4, r0
 8002b36:	4192      	sbcs	r2, r2
 8002b38:	185b      	adds	r3, r3, r1
 8002b3a:	4698      	mov	r8, r3
 8002b3c:	4252      	negs	r2, r2
 8002b3e:	4490      	add	r8, r2
 8002b40:	e5e9      	b.n	8002716 <__aeabi_dsub+0x2d6>
 8002b42:	4642      	mov	r2, r8
 8002b44:	4322      	orrs	r2, r4
 8002b46:	d100      	bne.n	8002b4a <__aeabi_dsub+0x70a>
 8002b48:	e6a6      	b.n	8002898 <__aeabi_dsub+0x458>
 8002b4a:	e5ea      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002b4c:	074b      	lsls	r3, r1, #29
 8002b4e:	08c2      	lsrs	r2, r0, #3
 8002b50:	431a      	orrs	r2, r3
 8002b52:	08cb      	lsrs	r3, r1, #3
 8002b54:	e632      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002b56:	2200      	movs	r2, #0
 8002b58:	4901      	ldr	r1, [pc, #4]	; (8002b60 <__aeabi_dsub+0x720>)
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	e514      	b.n	8002588 <__aeabi_dsub+0x148>
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	000007ff 	.word	0x000007ff

08002b64 <__aeabi_d2iz>:
 8002b64:	000a      	movs	r2, r1
 8002b66:	b530      	push	{r4, r5, lr}
 8002b68:	4c13      	ldr	r4, [pc, #76]	; (8002bb8 <__aeabi_d2iz+0x54>)
 8002b6a:	0053      	lsls	r3, r2, #1
 8002b6c:	0309      	lsls	r1, r1, #12
 8002b6e:	0005      	movs	r5, r0
 8002b70:	0b09      	lsrs	r1, r1, #12
 8002b72:	2000      	movs	r0, #0
 8002b74:	0d5b      	lsrs	r3, r3, #21
 8002b76:	0fd2      	lsrs	r2, r2, #31
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	dd04      	ble.n	8002b86 <__aeabi_d2iz+0x22>
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <__aeabi_d2iz+0x58>)
 8002b7e:	4283      	cmp	r3, r0
 8002b80:	dd02      	ble.n	8002b88 <__aeabi_d2iz+0x24>
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_d2iz+0x5c>)
 8002b84:	18d0      	adds	r0, r2, r3
 8002b86:	bd30      	pop	{r4, r5, pc}
 8002b88:	2080      	movs	r0, #128	; 0x80
 8002b8a:	0340      	lsls	r0, r0, #13
 8002b8c:	4301      	orrs	r1, r0
 8002b8e:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <__aeabi_d2iz+0x60>)
 8002b90:	1ac0      	subs	r0, r0, r3
 8002b92:	281f      	cmp	r0, #31
 8002b94:	dd08      	ble.n	8002ba8 <__aeabi_d2iz+0x44>
 8002b96:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <__aeabi_d2iz+0x64>)
 8002b98:	1ac3      	subs	r3, r0, r3
 8002b9a:	40d9      	lsrs	r1, r3
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	4258      	negs	r0, r3
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d1f0      	bne.n	8002b86 <__aeabi_d2iz+0x22>
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	e7ee      	b.n	8002b86 <__aeabi_d2iz+0x22>
 8002ba8:	4c08      	ldr	r4, [pc, #32]	; (8002bcc <__aeabi_d2iz+0x68>)
 8002baa:	40c5      	lsrs	r5, r0
 8002bac:	46a4      	mov	ip, r4
 8002bae:	4463      	add	r3, ip
 8002bb0:	4099      	lsls	r1, r3
 8002bb2:	000b      	movs	r3, r1
 8002bb4:	432b      	orrs	r3, r5
 8002bb6:	e7f2      	b.n	8002b9e <__aeabi_d2iz+0x3a>
 8002bb8:	000003fe 	.word	0x000003fe
 8002bbc:	0000041d 	.word	0x0000041d
 8002bc0:	7fffffff 	.word	0x7fffffff
 8002bc4:	00000433 	.word	0x00000433
 8002bc8:	00000413 	.word	0x00000413
 8002bcc:	fffffbed 	.word	0xfffffbed

08002bd0 <__aeabi_i2d>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d016      	beq.n	8002c04 <__aeabi_i2d+0x34>
 8002bd6:	17c3      	asrs	r3, r0, #31
 8002bd8:	18c5      	adds	r5, r0, r3
 8002bda:	405d      	eors	r5, r3
 8002bdc:	0fc4      	lsrs	r4, r0, #31
 8002bde:	0028      	movs	r0, r5
 8002be0:	f000 f894 	bl	8002d0c <__clzsi2>
 8002be4:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <__aeabi_i2d+0x5c>)
 8002be6:	1a12      	subs	r2, r2, r0
 8002be8:	280a      	cmp	r0, #10
 8002bea:	dc16      	bgt.n	8002c1a <__aeabi_i2d+0x4a>
 8002bec:	0003      	movs	r3, r0
 8002bee:	002e      	movs	r6, r5
 8002bf0:	3315      	adds	r3, #21
 8002bf2:	409e      	lsls	r6, r3
 8002bf4:	230b      	movs	r3, #11
 8002bf6:	1a18      	subs	r0, r3, r0
 8002bf8:	40c5      	lsrs	r5, r0
 8002bfa:	0553      	lsls	r3, r2, #21
 8002bfc:	032d      	lsls	r5, r5, #12
 8002bfe:	0b2d      	lsrs	r5, r5, #12
 8002c00:	0d5b      	lsrs	r3, r3, #21
 8002c02:	e003      	b.n	8002c0c <__aeabi_i2d+0x3c>
 8002c04:	2400      	movs	r4, #0
 8002c06:	2300      	movs	r3, #0
 8002c08:	2500      	movs	r5, #0
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	051b      	lsls	r3, r3, #20
 8002c0e:	432b      	orrs	r3, r5
 8002c10:	07e4      	lsls	r4, r4, #31
 8002c12:	4323      	orrs	r3, r4
 8002c14:	0030      	movs	r0, r6
 8002c16:	0019      	movs	r1, r3
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
 8002c1a:	380b      	subs	r0, #11
 8002c1c:	4085      	lsls	r5, r0
 8002c1e:	0553      	lsls	r3, r2, #21
 8002c20:	032d      	lsls	r5, r5, #12
 8002c22:	2600      	movs	r6, #0
 8002c24:	0b2d      	lsrs	r5, r5, #12
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	e7f0      	b.n	8002c0c <__aeabi_i2d+0x3c>
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	0000041e 	.word	0x0000041e

08002c30 <__aeabi_ui2d>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	1e04      	subs	r4, r0, #0
 8002c34:	d010      	beq.n	8002c58 <__aeabi_ui2d+0x28>
 8002c36:	f000 f869 	bl	8002d0c <__clzsi2>
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <__aeabi_ui2d+0x48>)
 8002c3c:	1a1b      	subs	r3, r3, r0
 8002c3e:	280a      	cmp	r0, #10
 8002c40:	dc11      	bgt.n	8002c66 <__aeabi_ui2d+0x36>
 8002c42:	220b      	movs	r2, #11
 8002c44:	0021      	movs	r1, r4
 8002c46:	1a12      	subs	r2, r2, r0
 8002c48:	40d1      	lsrs	r1, r2
 8002c4a:	3015      	adds	r0, #21
 8002c4c:	030a      	lsls	r2, r1, #12
 8002c4e:	055b      	lsls	r3, r3, #21
 8002c50:	4084      	lsls	r4, r0
 8002c52:	0b12      	lsrs	r2, r2, #12
 8002c54:	0d5b      	lsrs	r3, r3, #21
 8002c56:	e001      	b.n	8002c5c <__aeabi_ui2d+0x2c>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	051b      	lsls	r3, r3, #20
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	0020      	movs	r0, r4
 8002c62:	0019      	movs	r1, r3
 8002c64:	bd10      	pop	{r4, pc}
 8002c66:	0022      	movs	r2, r4
 8002c68:	380b      	subs	r0, #11
 8002c6a:	4082      	lsls	r2, r0
 8002c6c:	055b      	lsls	r3, r3, #21
 8002c6e:	0312      	lsls	r2, r2, #12
 8002c70:	2400      	movs	r4, #0
 8002c72:	0b12      	lsrs	r2, r2, #12
 8002c74:	0d5b      	lsrs	r3, r3, #21
 8002c76:	e7f1      	b.n	8002c5c <__aeabi_ui2d+0x2c>
 8002c78:	0000041e 	.word	0x0000041e

08002c7c <__aeabi_f2d>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	0043      	lsls	r3, r0, #1
 8002c80:	0246      	lsls	r6, r0, #9
 8002c82:	0fc4      	lsrs	r4, r0, #31
 8002c84:	20fe      	movs	r0, #254	; 0xfe
 8002c86:	0e1b      	lsrs	r3, r3, #24
 8002c88:	1c59      	adds	r1, r3, #1
 8002c8a:	0a75      	lsrs	r5, r6, #9
 8002c8c:	4208      	tst	r0, r1
 8002c8e:	d00c      	beq.n	8002caa <__aeabi_f2d+0x2e>
 8002c90:	22e0      	movs	r2, #224	; 0xe0
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4694      	mov	ip, r2
 8002c96:	076d      	lsls	r5, r5, #29
 8002c98:	0b36      	lsrs	r6, r6, #12
 8002c9a:	4463      	add	r3, ip
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	4333      	orrs	r3, r6
 8002ca0:	07e4      	lsls	r4, r4, #31
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	0028      	movs	r0, r5
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d114      	bne.n	8002cd8 <__aeabi_f2d+0x5c>
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	d01b      	beq.n	8002cea <__aeabi_f2d+0x6e>
 8002cb2:	0028      	movs	r0, r5
 8002cb4:	f000 f82a 	bl	8002d0c <__clzsi2>
 8002cb8:	280a      	cmp	r0, #10
 8002cba:	dc1c      	bgt.n	8002cf6 <__aeabi_f2d+0x7a>
 8002cbc:	230b      	movs	r3, #11
 8002cbe:	002a      	movs	r2, r5
 8002cc0:	1a1b      	subs	r3, r3, r0
 8002cc2:	40da      	lsrs	r2, r3
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	3315      	adds	r3, #21
 8002cc8:	409d      	lsls	r5, r3
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <__aeabi_f2d+0x88>)
 8002ccc:	0312      	lsls	r2, r2, #12
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	0b16      	lsrs	r6, r2, #12
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	e7e1      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	d009      	beq.n	8002cf0 <__aeabi_f2d+0x74>
 8002cdc:	0b32      	lsrs	r2, r6, #12
 8002cde:	2680      	movs	r6, #128	; 0x80
 8002ce0:	0336      	lsls	r6, r6, #12
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <__aeabi_f2d+0x8c>)
 8002ce4:	076d      	lsls	r5, r5, #29
 8002ce6:	4316      	orrs	r6, r2
 8002ce8:	e7d8      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2600      	movs	r6, #0
 8002cee:	e7d5      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cf0:	2600      	movs	r6, #0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <__aeabi_f2d+0x8c>)
 8002cf4:	e7d2      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	002a      	movs	r2, r5
 8002cfa:	3b0b      	subs	r3, #11
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	2500      	movs	r5, #0
 8002d00:	e7e3      	b.n	8002cca <__aeabi_f2d+0x4e>
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	00000389 	.word	0x00000389
 8002d08:	000007ff 	.word	0x000007ff

08002d0c <__clzsi2>:
 8002d0c:	211c      	movs	r1, #28
 8002d0e:	2301      	movs	r3, #1
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	4298      	cmp	r0, r3
 8002d14:	d301      	bcc.n	8002d1a <__clzsi2+0xe>
 8002d16:	0c00      	lsrs	r0, r0, #16
 8002d18:	3910      	subs	r1, #16
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	d301      	bcc.n	8002d24 <__clzsi2+0x18>
 8002d20:	0a00      	lsrs	r0, r0, #8
 8002d22:	3908      	subs	r1, #8
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	4298      	cmp	r0, r3
 8002d28:	d301      	bcc.n	8002d2e <__clzsi2+0x22>
 8002d2a:	0900      	lsrs	r0, r0, #4
 8002d2c:	3904      	subs	r1, #4
 8002d2e:	a202      	add	r2, pc, #8	; (adr r2, 8002d38 <__clzsi2+0x2c>)
 8002d30:	5c10      	ldrb	r0, [r2, r0]
 8002d32:	1840      	adds	r0, r0, r1
 8002d34:	4770      	bx	lr
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	02020304 	.word	0x02020304
 8002d3c:	01010101 	.word	0x01010101
	...

08002d48 <__clzdi2>:
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	d103      	bne.n	8002d56 <__clzdi2+0xe>
 8002d4e:	f7ff ffdd 	bl	8002d0c <__clzsi2>
 8002d52:	3020      	adds	r0, #32
 8002d54:	e002      	b.n	8002d5c <__clzdi2+0x14>
 8002d56:	1c08      	adds	r0, r1, #0
 8002d58:	f7ff ffd8 	bl	8002d0c <__clzsi2>
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)

08002d60 <__divdi3>:
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	4657      	mov	r7, sl
 8002d64:	464e      	mov	r6, r9
 8002d66:	4645      	mov	r5, r8
 8002d68:	46de      	mov	lr, fp
 8002d6a:	b5e0      	push	{r5, r6, r7, lr}
 8002d6c:	000f      	movs	r7, r1
 8002d6e:	0019      	movs	r1, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	0006      	movs	r6, r0
 8002d74:	4698      	mov	r8, r3
 8002d76:	0010      	movs	r0, r2
 8002d78:	b083      	sub	sp, #12
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	da07      	bge.n	8002d8e <__divdi3+0x2e>
 8002d7e:	0033      	movs	r3, r6
 8002d80:	003c      	movs	r4, r7
 8002d82:	2700      	movs	r7, #0
 8002d84:	425e      	negs	r6, r3
 8002d86:	41a7      	sbcs	r7, r4
 8002d88:	2301      	movs	r3, #1
 8002d8a:	425b      	negs	r3, r3
 8002d8c:	4698      	mov	r8, r3
 8002d8e:	2900      	cmp	r1, #0
 8002d90:	da07      	bge.n	8002da2 <__divdi3+0x42>
 8002d92:	4643      	mov	r3, r8
 8002d94:	43db      	mvns	r3, r3
 8002d96:	000c      	movs	r4, r1
 8002d98:	4698      	mov	r8, r3
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4258      	negs	r0, r3
 8002da0:	41a1      	sbcs	r1, r4
 8002da2:	0034      	movs	r4, r6
 8002da4:	003d      	movs	r5, r7
 8002da6:	4682      	mov	sl, r0
 8002da8:	4689      	mov	r9, r1
 8002daa:	42b9      	cmp	r1, r7
 8002dac:	d86a      	bhi.n	8002e84 <__divdi3+0x124>
 8002dae:	d067      	beq.n	8002e80 <__divdi3+0x120>
 8002db0:	4649      	mov	r1, r9
 8002db2:	4650      	mov	r0, sl
 8002db4:	f7ff ffc8 	bl	8002d48 <__clzdi2>
 8002db8:	4683      	mov	fp, r0
 8002dba:	0039      	movs	r1, r7
 8002dbc:	0030      	movs	r0, r6
 8002dbe:	f7ff ffc3 	bl	8002d48 <__clzdi2>
 8002dc2:	465b      	mov	r3, fp
 8002dc4:	1a1b      	subs	r3, r3, r0
 8002dc6:	469c      	mov	ip, r3
 8002dc8:	3b20      	subs	r3, #32
 8002dca:	469b      	mov	fp, r3
 8002dcc:	d46b      	bmi.n	8002ea6 <__divdi3+0x146>
 8002dce:	4658      	mov	r0, fp
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	4081      	lsls	r1, r0
 8002dd4:	4660      	mov	r0, ip
 8002dd6:	000b      	movs	r3, r1
 8002dd8:	4651      	mov	r1, sl
 8002dda:	4081      	lsls	r1, r0
 8002ddc:	000a      	movs	r2, r1
 8002dde:	42bb      	cmp	r3, r7
 8002de0:	d900      	bls.n	8002de4 <__divdi3+0x84>
 8002de2:	e072      	b.n	8002eca <__divdi3+0x16a>
 8002de4:	42bb      	cmp	r3, r7
 8002de6:	d100      	bne.n	8002dea <__divdi3+0x8a>
 8002de8:	e079      	b.n	8002ede <__divdi3+0x17e>
 8002dea:	0034      	movs	r4, r6
 8002dec:	003d      	movs	r5, r7
 8002dee:	4659      	mov	r1, fp
 8002df0:	1aa4      	subs	r4, r4, r2
 8002df2:	419d      	sbcs	r5, r3
 8002df4:	2900      	cmp	r1, #0
 8002df6:	da00      	bge.n	8002dfa <__divdi3+0x9a>
 8002df8:	e074      	b.n	8002ee4 <__divdi3+0x184>
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	2601      	movs	r6, #1
 8002e00:	9000      	str	r0, [sp, #0]
 8002e02:	9101      	str	r1, [sp, #4]
 8002e04:	4659      	mov	r1, fp
 8002e06:	408e      	lsls	r6, r1
 8002e08:	9601      	str	r6, [sp, #4]
 8002e0a:	4661      	mov	r1, ip
 8002e0c:	2601      	movs	r6, #1
 8002e0e:	408e      	lsls	r6, r1
 8002e10:	4661      	mov	r1, ip
 8002e12:	9600      	str	r6, [sp, #0]
 8002e14:	2900      	cmp	r1, #0
 8002e16:	d05f      	beq.n	8002ed8 <__divdi3+0x178>
 8002e18:	07d9      	lsls	r1, r3, #31
 8002e1a:	0856      	lsrs	r6, r2, #1
 8002e1c:	430e      	orrs	r6, r1
 8002e1e:	085f      	lsrs	r7, r3, #1
 8002e20:	4661      	mov	r1, ip
 8002e22:	2201      	movs	r2, #1
 8002e24:	2300      	movs	r3, #0
 8002e26:	e00c      	b.n	8002e42 <__divdi3+0xe2>
 8002e28:	42af      	cmp	r7, r5
 8002e2a:	d101      	bne.n	8002e30 <__divdi3+0xd0>
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d80a      	bhi.n	8002e46 <__divdi3+0xe6>
 8002e30:	1ba4      	subs	r4, r4, r6
 8002e32:	41bd      	sbcs	r5, r7
 8002e34:	1924      	adds	r4, r4, r4
 8002e36:	416d      	adcs	r5, r5
 8002e38:	3901      	subs	r1, #1
 8002e3a:	18a4      	adds	r4, r4, r2
 8002e3c:	415d      	adcs	r5, r3
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	d006      	beq.n	8002e50 <__divdi3+0xf0>
 8002e42:	42af      	cmp	r7, r5
 8002e44:	d9f0      	bls.n	8002e28 <__divdi3+0xc8>
 8002e46:	3901      	subs	r1, #1
 8002e48:	1924      	adds	r4, r4, r4
 8002e4a:	416d      	adcs	r5, r5
 8002e4c:	2900      	cmp	r1, #0
 8002e4e:	d1f8      	bne.n	8002e42 <__divdi3+0xe2>
 8002e50:	9800      	ldr	r0, [sp, #0]
 8002e52:	9901      	ldr	r1, [sp, #4]
 8002e54:	465b      	mov	r3, fp
 8002e56:	1900      	adds	r0, r0, r4
 8002e58:	4169      	adcs	r1, r5
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db4d      	blt.n	8002efa <__divdi3+0x19a>
 8002e5e:	002e      	movs	r6, r5
 8002e60:	002c      	movs	r4, r5
 8002e62:	40de      	lsrs	r6, r3
 8002e64:	4663      	mov	r3, ip
 8002e66:	40dc      	lsrs	r4, r3
 8002e68:	465b      	mov	r3, fp
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	db55      	blt.n	8002f1a <__divdi3+0x1ba>
 8002e6e:	0034      	movs	r4, r6
 8002e70:	409c      	lsls	r4, r3
 8002e72:	0023      	movs	r3, r4
 8002e74:	4664      	mov	r4, ip
 8002e76:	40a6      	lsls	r6, r4
 8002e78:	0032      	movs	r2, r6
 8002e7a:	1a80      	subs	r0, r0, r2
 8002e7c:	4199      	sbcs	r1, r3
 8002e7e:	e003      	b.n	8002e88 <__divdi3+0x128>
 8002e80:	42b0      	cmp	r0, r6
 8002e82:	d995      	bls.n	8002db0 <__divdi3+0x50>
 8002e84:	2000      	movs	r0, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	4643      	mov	r3, r8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <__divdi3+0x138>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	000c      	movs	r4, r1
 8002e92:	2100      	movs	r1, #0
 8002e94:	4258      	negs	r0, r3
 8002e96:	41a1      	sbcs	r1, r4
 8002e98:	b003      	add	sp, #12
 8002e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8002e9c:	46bb      	mov	fp, r7
 8002e9e:	46b2      	mov	sl, r6
 8002ea0:	46a9      	mov	r9, r5
 8002ea2:	46a0      	mov	r8, r4
 8002ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	4648      	mov	r0, r9
 8002eaa:	2320      	movs	r3, #32
 8002eac:	4651      	mov	r1, sl
 8002eae:	4090      	lsls	r0, r2
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	40d9      	lsrs	r1, r3
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	9100      	str	r1, [sp, #0]
 8002eb8:	9900      	ldr	r1, [sp, #0]
 8002eba:	4660      	mov	r0, ip
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	4081      	lsls	r1, r0
 8002ec2:	000a      	movs	r2, r1
 8002ec4:	42bb      	cmp	r3, r7
 8002ec6:	d800      	bhi.n	8002eca <__divdi3+0x16a>
 8002ec8:	e78c      	b.n	8002de4 <__divdi3+0x84>
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2000      	movs	r0, #0
 8002ece:	9000      	str	r0, [sp, #0]
 8002ed0:	9101      	str	r1, [sp, #4]
 8002ed2:	4661      	mov	r1, ip
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d19f      	bne.n	8002e18 <__divdi3+0xb8>
 8002ed8:	9800      	ldr	r0, [sp, #0]
 8002eda:	9901      	ldr	r1, [sp, #4]
 8002edc:	e7d4      	b.n	8002e88 <__divdi3+0x128>
 8002ede:	42b1      	cmp	r1, r6
 8002ee0:	d8f3      	bhi.n	8002eca <__divdi3+0x16a>
 8002ee2:	e782      	b.n	8002dea <__divdi3+0x8a>
 8002ee4:	4661      	mov	r1, ip
 8002ee6:	2620      	movs	r6, #32
 8002ee8:	2701      	movs	r7, #1
 8002eea:	1a76      	subs	r6, r6, r1
 8002eec:	2000      	movs	r0, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	40f7      	lsrs	r7, r6
 8002ef2:	9000      	str	r0, [sp, #0]
 8002ef4:	9101      	str	r1, [sp, #4]
 8002ef6:	9701      	str	r7, [sp, #4]
 8002ef8:	e787      	b.n	8002e0a <__divdi3+0xaa>
 8002efa:	4662      	mov	r2, ip
 8002efc:	2320      	movs	r3, #32
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	002a      	movs	r2, r5
 8002f02:	409a      	lsls	r2, r3
 8002f04:	0026      	movs	r6, r4
 8002f06:	0013      	movs	r3, r2
 8002f08:	4662      	mov	r2, ip
 8002f0a:	40d6      	lsrs	r6, r2
 8002f0c:	002c      	movs	r4, r5
 8002f0e:	431e      	orrs	r6, r3
 8002f10:	4663      	mov	r3, ip
 8002f12:	40dc      	lsrs	r4, r3
 8002f14:	465b      	mov	r3, fp
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	daa9      	bge.n	8002e6e <__divdi3+0x10e>
 8002f1a:	4662      	mov	r2, ip
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	0035      	movs	r5, r6
 8002f20:	4094      	lsls	r4, r2
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	40dd      	lsrs	r5, r3
 8002f26:	0023      	movs	r3, r4
 8002f28:	432b      	orrs	r3, r5
 8002f2a:	e7a3      	b.n	8002e74 <__divdi3+0x114>

08002f2c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002f30:	f001 fc1e 	bl	8004770 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002f34:	f000 f80e 	bl	8002f54 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002f42:	2301      	movs	r3, #1
 8002f44:	425b      	negs	r3, r3
 8002f46:	0018      	movs	r0, r3
 8002f48:	f018 fff8 	bl	801bf3c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	f002 faf6 	bl	800554c <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f002 faf3 	bl	800554c <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002f66:	2003      	movs	r0, #3
 8002f68:	f002 faf0 	bl	800554c <BSP_LED_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8002f6c:	4b48      	ldr	r3, [pc, #288]	; (8003090 <LoRaWAN_Init+0x13c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	9202      	str	r2, [sp, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	9200      	str	r2, [sp, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f018 fc1a 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8002f84:	4b43      	ldr	r3, [pc, #268]	; (8003094 <LoRaWAN_Init+0x140>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	9202      	str	r2, [sp, #8]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	9201      	str	r2, [sp, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	9200      	str	r2, [sp, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2002      	movs	r0, #2
 8002f98:	f018 fc0e 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <LoRaWAN_Init+0x144>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	9202      	str	r2, [sp, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	9201      	str	r2, [sp, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	9200      	str	r2, [sp, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f018 fc02 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002fb4:	4b39      	ldr	r3, [pc, #228]	; (800309c <LoRaWAN_Init+0x148>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4251      	negs	r1, r2
 8002fba:	4839      	ldr	r0, [pc, #228]	; (80030a0 <LoRaWAN_Init+0x14c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	9200      	str	r2, [sp, #0]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f019 fa8d 	bl	801c4e0 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002fc6:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <LoRaWAN_Init+0x150>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4251      	negs	r1, r2
 8002fcc:	4836      	ldr	r0, [pc, #216]	; (80030a8 <LoRaWAN_Init+0x154>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	9200      	str	r2, [sp, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f019 fa84 	bl	801c4e0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <LoRaWAN_Init+0x158>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4251      	negs	r1, r2
 8002fde:	4834      	ldr	r0, [pc, #208]	; (80030b0 <LoRaWAN_Init+0x15c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	9200      	str	r2, [sp, #0]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f019 fa7b 	bl	801c4e0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002fea:	23fa      	movs	r3, #250	; 0xfa
 8002fec:	005a      	lsls	r2, r3, #1
 8002fee:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <LoRaWAN_Init+0x14c>)
 8002ff0:	0011      	movs	r1, r2
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f019 fb9c 	bl	801c730 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002ff8:	23fa      	movs	r3, #250	; 0xfa
 8002ffa:	005a      	lsls	r2, r3, #1
 8002ffc:	4b2a      	ldr	r3, [pc, #168]	; (80030a8 <LoRaWAN_Init+0x154>)
 8002ffe:	0011      	movs	r1, r2
 8003000:	0018      	movs	r0, r3
 8003002:	f019 fb95 	bl	801c730 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8003006:	23fa      	movs	r3, #250	; 0xfa
 8003008:	005a      	lsls	r2, r3, #1
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <LoRaWAN_Init+0x15c>)
 800300c:	0011      	movs	r1, r2
 800300e:	0018      	movs	r0, r3
 8003010:	f019 fb8e 	bl	801c730 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <LoRaWAN_Init+0x160>)
 8003016:	001a      	movs	r2, r3
 8003018:	2100      	movs	r1, #0
 800301a:	2001      	movs	r0, #1
 800301c:	f019 f870 	bl	801c100 <UTIL_SEQ_RegTask>
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <LoRaWAN_Init+0x164>)
 8003022:	001a      	movs	r2, r3
 8003024:	2100      	movs	r1, #0
 8003026:	2002      	movs	r0, #2
 8003028:	f019 f86a 	bl	801c100 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800302c:	f000 faac 	bl	8003588 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8003030:	4b22      	ldr	r3, [pc, #136]	; (80030bc <LoRaWAN_Init+0x168>)
 8003032:	0018      	movs	r0, r3
 8003034:	f00a fb54 	bl	800d6e0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <LoRaWAN_Init+0x16c>)
 800303a:	0018      	movs	r0, r3
 800303c:	f00a fb96 	bl	800d76c <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <LoRaWAN_Init+0x15c>)
 8003042:	0018      	movs	r0, r3
 8003044:	f019 fa84 	bl	801c550 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <LoRaWAN_Init+0x170>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	0018      	movs	r0, r3
 800304e:	f00a fcfd 	bl	800da4c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <LoRaWAN_Init+0x174>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d113      	bne.n	8003082 <LoRaWAN_Init+0x12e>
  {
    /* send every time timer elapses */

    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <LoRaWAN_Init+0x178>)
 800305c:	2201      	movs	r2, #1
 800305e:	4251      	negs	r1, r2
 8003060:	481b      	ldr	r0, [pc, #108]	; (80030d0 <LoRaWAN_Init+0x17c>)
 8003062:	2200      	movs	r2, #0
 8003064:	9200      	str	r2, [sp, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	f019 fa3a 	bl	801c4e0 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <LoRaWAN_Init+0x180>)
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <LoRaWAN_Init+0x17c>)
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f019 fb5c 	bl	801c730 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <LoRaWAN_Init+0x17c>)
 800307a:	0018      	movs	r0, r3
 800307c:	f019 fa68 	bl	801c550 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 8003080:	e003      	b.n	800308a <LoRaWAN_Init+0x136>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003082:	2101      	movs	r1, #1
 8003084:	2000      	movs	r0, #0
 8003086:	f002 fb23 	bl	80056d0 <BSP_PB_Init>
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	0801e310 	.word	0x0801e310
 8003094:	0801e330 	.word	0x0801e330
 8003098:	0801e350 	.word	0x0801e350
 800309c:	080033d1 	.word	0x080033d1
 80030a0:	20000364 	.word	0x20000364
 80030a4:	080033e7 	.word	0x080033e7
 80030a8:	2000037c 	.word	0x2000037c
 80030ac:	080033fd 	.word	0x080033fd
 80030b0:	20000394 	.word	0x20000394
 80030b4:	0800d991 	.word	0x0800d991
 80030b8:	0800320d 	.word	0x0800320d
 80030bc:	2000000c 	.word	0x2000000c
 80030c0:	2000002c 	.word	0x2000002c
 80030c4:	20000008 	.word	0x20000008
 80030c8:	2000034b 	.word	0x2000034b
 80030cc:	080033ad 	.word	0x080033ad
 80030d0:	2000034c 	.word	0x2000034c
 80030d4:	00002710 	.word	0x00002710

080030d8 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af06      	add	r7, sp, #24
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d100      	bne.n	80030ea <OnRxData+0x12>
 80030e8:	e07a      	b.n	80031e0 <OnRxData+0x108>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d100      	bne.n	80030f2 <OnRxData+0x1a>
 80030f0:	e076      	b.n	80031e0 <OnRxData+0x108>
  {
    LED_On(LED_BLUE);
 80030f2:	2002      	movs	r0, #2
 80030f4:	f002 fa98 	bl	8005628 <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 80030f8:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <OnRxData+0x11c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	2002      	movs	r0, #2
 8003100:	f018 fb5a 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	7b12      	ldrb	r2, [r2, #12]
 800310c:	b252      	sxtb	r2, r2
 800310e:	0011      	movs	r1, r2
 8003110:	4a39      	ldr	r2, [pc, #228]	; (80031f8 <OnRxData+0x120>)
 8003112:	0089      	lsls	r1, r1, #2
 8003114:	588a      	ldr	r2, [r1, r2]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	7809      	ldrb	r1, [r1, #0]
 800311a:	0008      	movs	r0, r1
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	7889      	ldrb	r1, [r1, #2]
 8003120:	b249      	sxtb	r1, r1
 8003122:	000c      	movs	r4, r1
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	78c9      	ldrb	r1, [r1, #3]
 8003128:	b249      	sxtb	r1, r1
 800312a:	000d      	movs	r5, r1
 800312c:	6839      	ldr	r1, [r7, #0]
 800312e:	7909      	ldrb	r1, [r1, #4]
 8003130:	b249      	sxtb	r1, r1
 8003132:	000e      	movs	r6, r1
 8003134:	4931      	ldr	r1, [pc, #196]	; (80031fc <OnRxData+0x124>)
 8003136:	9605      	str	r6, [sp, #20]
 8003138:	9504      	str	r5, [sp, #16]
 800313a:	9403      	str	r4, [sp, #12]
 800313c:	9002      	str	r0, [sp, #8]
 800313e:	9201      	str	r2, [sp, #4]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	000b      	movs	r3, r1
 8003144:	2200      	movs	r2, #0
 8003146:	2100      	movs	r1, #0
 8003148:	2003      	movs	r0, #3
 800314a:	f018 fb35 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d020      	beq.n	8003198 <OnRxData+0xc0>
 8003156:	2b03      	cmp	r3, #3
 8003158:	d144      	bne.n	80031e4 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d116      	bne.n	8003190 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d00d      	beq.n	8003188 <OnRxData+0xb0>
 800316c:	dc12      	bgt.n	8003194 <OnRxData+0xbc>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <OnRxData+0xa0>
 8003172:	2b01      	cmp	r3, #1
 8003174:	d004      	beq.n	8003180 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8003176:	e00d      	b.n	8003194 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 8003178:	2000      	movs	r0, #0
 800317a:	f00a fdc1 	bl	800dd00 <LmHandlerRequestClass>
              break;
 800317e:	e00a      	b.n	8003196 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8003180:	2001      	movs	r0, #1
 8003182:	f00a fdbd 	bl	800dd00 <LmHandlerRequestClass>
              break;
 8003186:	e006      	b.n	8003196 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 8003188:	2002      	movs	r0, #2
 800318a:	f00a fdb9 	bl	800dd00 <LmHandlerRequestClass>
              break;
 800318e:	e002      	b.n	8003196 <OnRxData+0xbe>
          }
        }
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	e02a      	b.n	80031ea <OnRxData+0x112>
              break;
 8003194:	46c0      	nop			; (mov r8, r8)
        break;
 8003196:	e028      	b.n	80031ea <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d123      	bne.n	80031e8 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	4013      	ands	r3, r2
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b14      	ldr	r3, [pc, #80]	; (8003200 <OnRxData+0x128>)
 80031ae:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <OnRxData+0x128>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <OnRxData+0x12c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2003      	movs	r0, #3
 80031c0:	f018 fafa 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 80031c4:	2001      	movs	r0, #1
 80031c6:	f002 fa4b 	bl	8005660 <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 80031ca:	e00d      	b.n	80031e8 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <OnRxData+0x130>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	2003      	movs	r0, #3
 80031d4:	f018 faf0 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 80031d8:	2001      	movs	r0, #1
 80031da:	f002 fa25 	bl	8005628 <BSP_LED_On>
        break;
 80031de:	e003      	b.n	80031e8 <OnRxData+0x110>
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
    }
  }
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	e002      	b.n	80031ea <OnRxData+0x112>
        break;
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	e000      	b.n	80031ea <OnRxData+0x112>
        break;
 80031e8:	46c0      	nop			; (mov r8, r8)

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b003      	add	sp, #12
 80031f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	0801e370 	.word	0x0801e370
 80031f8:	20000034 	.word	0x20000034
 80031fc:	0801e3a4 	.word	0x0801e3a4
 8003200:	2000034a 	.word	0x2000034a
 8003204:	0801e3ec 	.word	0x0801e3ec
 8003208:	0801e3f8 	.word	0x0801e3f8

0800320c <SendTxData>:

static void SendTxData(void)
{
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	b0d7      	sub	sp, #348	; 0x15c
 8003210:	af00      	add	r7, sp, #0
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 8003212:	23ab      	movs	r3, #171	; 0xab
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2200      	movs	r2, #0
 800321a:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 800321c:	23aa      	movs	r3, #170	; 0xaa
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Data[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	22a8      	movs	r2, #168	; 0xa8
 800322a:	0052      	lsls	r2, r2, #1
 800322c:	18ba      	adds	r2, r7, r2
 800322e:	6013      	str	r3, [r2, #0]
  bmp280_params_t params;
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 8003230:	23a7      	movs	r3, #167	; 0xa7
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	2200      	movs	r2, #0
 8003238:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	25a4      	movs	r5, #164	; 0xa4
 800323e:	006d      	lsls	r5, r5, #1
 8003240:	197a      	adds	r2, r7, r5
 8003242:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	22a2      	movs	r2, #162	; 0xa2
 8003248:	0052      	lsls	r2, r2, #1
 800324a:	18ba      	adds	r2, r7, r2
 800324c:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	22a0      	movs	r2, #160	; 0xa0
 8003252:	0052      	lsls	r2, r2, #1
 8003254:	18ba      	adds	r2, r7, r2
 8003256:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 8003258:	239f      	movs	r3, #159	; 0x9f
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2200      	movs	r2, #0
 8003260:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8003262:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <SendTxData+0x188>)
 8003264:	2202      	movs	r2, #2
 8003266:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 8003268:	f002 f828 	bl	80052bc <BSP_I2C1_Init>

  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  bmp280_init_default_params(&bmp280.params);
 800326c:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <SendTxData+0x18c>)
 800326e:	0018      	movs	r0, r3
 8003270:	f019 fe0a 	bl	801ce88 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003274:	4b49      	ldr	r3, [pc, #292]	; (800339c <SendTxData+0x190>)
 8003276:	2276      	movs	r2, #118	; 0x76
 8003278:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 800327a:	4b48      	ldr	r3, [pc, #288]	; (800339c <SendTxData+0x190>)
 800327c:	4a48      	ldr	r2, [pc, #288]	; (80033a0 <SendTxData+0x194>)
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8003280:	4a45      	ldr	r2, [pc, #276]	; (8003398 <SendTxData+0x18c>)
 8003282:	4b46      	ldr	r3, [pc, #280]	; (800339c <SendTxData+0x190>)
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f019 ff92 	bl	801d1b0 <bmp280_init>
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
   // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
 800328c:	2692      	movs	r6, #146	; 0x92
 800328e:	0076      	lsls	r6, r6, #1
 8003290:	19bb      	adds	r3, r7, r6
 8003292:	2296      	movs	r2, #150	; 0x96
 8003294:	0052      	lsls	r2, r2, #1
 8003296:	18ba      	adds	r2, r7, r2
 8003298:	2194      	movs	r1, #148	; 0x94
 800329a:	0049      	lsls	r1, r1, #1
 800329c:	1879      	adds	r1, r7, r1
 800329e:	483f      	ldr	r0, [pc, #252]	; (800339c <SendTxData+0x190>)
 80032a0:	f01a faf4 	bl	801d88c <bmp280_read_float>
    	 numberdev = 0x01;  // new
 80032a4:	23fe      	movs	r3, #254	; 0xfe
 80032a6:	059b      	lsls	r3, r3, #22
 80032a8:	229c      	movs	r2, #156	; 0x9c
 80032aa:	0052      	lsls	r2, r2, #1
 80032ac:	18b8      	adds	r0, r7, r2
 80032ae:	6003      	str	r3, [r0, #0]
    	 per = 0xA; // new
 80032b0:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <SendTxData+0x198>)
 80032b2:	209a      	movs	r0, #154	; 0x9a
 80032b4:	0040      	lsls	r0, r0, #1
 80032b6:	183c      	adds	r4, r7, r0
 80032b8:	6023      	str	r3, [r4, #0]
  // bool bme280p = bmp280.id == BME280_CHIP_ID;
 // size = (temperature1, pressure1, humidity1);
    size = (temperature1, pressure1, humidity1);
 80032ba:	19bb      	adds	r3, r7, r6
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2499      	movs	r4, #153	; 0x99
 80032c0:	0064      	lsls	r4, r4, #1
 80032c2:	193c      	adds	r4, r7, r4
 80032c4:	1c18      	adds	r0, r3, #0
 80032c6:	f7fd f98b 	bl	80005e0 <__aeabi_f2uiz>
 80032ca:	0003      	movs	r3, r0
 80032cc:	8023      	strh	r3, [r4, #0]
    size = sprintf((char *)Data, "BMP280 initialization failed\n");
 80032ce:	4a36      	ldr	r2, [pc, #216]	; (80033a8 <SendTxData+0x19c>)
 80032d0:	230c      	movs	r3, #12
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	0011      	movs	r1, r2
 80032d6:	0018      	movs	r0, r3
 80032d8:	f01a fb60 	bl	801d99c <siprintf>
 80032dc:	0002      	movs	r2, r0
 80032de:	2499      	movs	r4, #153	; 0x99
 80032e0:	0064      	lsls	r4, r4, #1
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
    AppData.Buffer[i++] = numberdev; // new номер устройства
 80032e6:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <SendTxData+0x188>)
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	197b      	adds	r3, r7, r5
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1c59      	adds	r1, r3, #1
 80032f0:	197c      	adds	r4, r7, r5
 80032f2:	6021      	str	r1, [r4, #0]
 80032f4:	18d4      	adds	r4, r2, r3
 80032f6:	229c      	movs	r2, #156	; 0x9c
 80032f8:	0052      	lsls	r2, r2, #1
 80032fa:	18bb      	adds	r3, r7, r2
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	f7fd f96f 	bl	80005e0 <__aeabi_f2uiz>
 8003302:	0003      	movs	r3, r0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	7023      	strb	r3, [r4, #0]
  AppData.Buffer[i++] = temperature1;
 8003308:	2194      	movs	r1, #148	; 0x94
 800330a:	0049      	lsls	r1, r1, #1
 800330c:	187b      	adds	r3, r7, r1
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	4b20      	ldr	r3, [pc, #128]	; (8003394 <SendTxData+0x188>)
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	197b      	adds	r3, r7, r5
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1c59      	adds	r1, r3, #1
 800331a:	197c      	adds	r4, r7, r5
 800331c:	6021      	str	r1, [r4, #0]
 800331e:	18d4      	adds	r4, r2, r3
 8003320:	f7fd f95e 	bl	80005e0 <__aeabi_f2uiz>
 8003324:	0003      	movs	r3, r0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	7023      	strb	r3, [r4, #0]
  AppData.Buffer[i++] = humidity1;
 800332a:	19bb      	adds	r3, r7, r6
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <SendTxData+0x188>)
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	197b      	adds	r3, r7, r5
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1c59      	adds	r1, r3, #1
 8003338:	197c      	adds	r4, r7, r5
 800333a:	6021      	str	r1, [r4, #0]
 800333c:	18d4      	adds	r4, r2, r3
 800333e:	f7fd f94f 	bl	80005e0 <__aeabi_f2uiz>
 8003342:	0003      	movs	r3, r0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	7023      	strb	r3, [r4, #0]
  AppData.Buffer[i++] = per; // new период включения прибора
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <SendTxData+0x188>)
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	197b      	adds	r3, r7, r5
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	197c      	adds	r4, r7, r5
 8003354:	6021      	str	r1, [r4, #0]
 8003356:	18d4      	adds	r4, r2, r3
 8003358:	209a      	movs	r0, #154	; 0x9a
 800335a:	0040      	lsls	r0, r0, #1
 800335c:	183b      	adds	r3, r7, r0
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	f7fd f93e 	bl	80005e0 <__aeabi_f2uiz>
 8003364:	0003      	movs	r3, r0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	7023      	strb	r3, [r4, #0]
  // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
  // GetBatteryLevel(); // new заряд батареи
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
  AppData.Buffer[i++] = GetBatteryLevel();
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <SendTxData+0x188>)
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	197b      	adds	r3, r7, r5
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	1c59      	adds	r1, r3, #1
 8003374:	1978      	adds	r0, r7, r5
 8003376:	6001      	str	r1, [r0, #0]
 8003378:	18d4      	adds	r4, r2, r3
 800337a:	f001 fa25 	bl	80047c8 <GetBatteryLevel>
 800337e:	0003      	movs	r3, r0
 8003380:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 8003382:	197b      	adds	r3, r7, r5
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	4b02      	ldr	r3, [pc, #8]	; (8003394 <SendTxData+0x188>)
 800338a:	705a      	strb	r2, [r3, #1]
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b057      	add	sp, #348	; 0x15c
 8003392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003394:	20000000 	.word	0x20000000
 8003398:	2000140c 	.word	0x2000140c
 800339c:	200013e0 	.word	0x200013e0
 80033a0:	20001660 	.word	0x20001660
 80033a4:	41200000 	.word	0x41200000
 80033a8:	0801e404 	.word	0x0801e404

080033ac <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80033b4:	2100      	movs	r1, #0
 80033b6:	2002      	movs	r0, #2
 80033b8:	f018 fec6 	bl	801c148 <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <OnTxTimerEvent+0x20>)
 80033be:	0018      	movs	r0, r3
 80033c0:	f019 f8c6 	bl	801c550 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	2000034c 	.word	0x2000034c

080033d0 <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 80033d8:	2003      	movs	r0, #3
 80033da:	f002 f941 	bl	8005660 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 80033ee:	2002      	movs	r0, #2
 80033f0:	f002 f936 	bl	8005660 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 8003404:	2001      	movs	r0, #1
 8003406:	f002 f947 	bl	8005698 <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 8003414:	b5b0      	push	{r4, r5, r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af06      	add	r7, sp, #24
 800341a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d052      	beq.n	80034c8 <OnTxData+0xb4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d04e      	beq.n	80034c8 <OnTxData+0xb4>
  {
    LED_On(LED_RED2) ;
 800342a:	2003      	movs	r0, #3
 800342c:	f002 f8fc 	bl	8005628 <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <OnTxData+0xbc>)
 8003432:	0018      	movs	r0, r3
 8003434:	f019 f88c 	bl	801c550 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
 8003438:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <OnTxData+0xc0>)
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	2002      	movs	r0, #2
 8003440:	f018 f9ba 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d | Channel:%d", params->UplinkCounter,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	7b12      	ldrb	r2, [r2, #12]
 800344c:	0011      	movs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	7912      	ldrb	r2, [r2, #4]
 8003452:	b252      	sxtb	r2, r2
 8003454:	0010      	movs	r0, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	7d12      	ldrb	r2, [r2, #20]
 800345a:	b252      	sxtb	r2, r2
 800345c:	0014      	movs	r4, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	7d52      	ldrb	r2, [r2, #21]
 8003462:	0015      	movs	r5, r2
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <OnTxData+0xc4>)
 8003466:	9504      	str	r5, [sp, #16]
 8003468:	9403      	str	r4, [sp, #12]
 800346a:	9002      	str	r0, [sp, #8]
 800346c:	9101      	str	r1, [sp, #4]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	0013      	movs	r3, r2
 8003472:	2200      	movs	r2, #0
 8003474:	2100      	movs	r1, #0
 8003476:	2003      	movs	r0, #3
 8003478:	f018 f99e 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);

    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800347c:	4b17      	ldr	r3, [pc, #92]	; (80034dc <OnTxData+0xc8>)
 800347e:	2200      	movs	r2, #0
 8003480:	2100      	movs	r1, #0
 8003482:	2003      	movs	r0, #3
 8003484:	f018 f998 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <OnTxData+0xcc>)
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	2002      	movs	r0, #2
 8003490:	f018 f992 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	789b      	ldrb	r3, [r3, #2]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10f      	bne.n	80034bc <OnTxData+0xa8>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	78db      	ldrb	r3, [r3, #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <OnTxData+0x94>
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <OnTxData+0xd0>)
 80034a6:	e000      	b.n	80034aa <OnTxData+0x96>
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <OnTxData+0xd4>)
 80034aa:	4a10      	ldr	r2, [pc, #64]	; (80034ec <OnTxData+0xd8>)
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	0013      	movs	r3, r2
 80034b0:	2200      	movs	r2, #0
 80034b2:	2100      	movs	r1, #0
 80034b4:	2003      	movs	r0, #3
 80034b6:	f018 f97f 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 80034ba:	e005      	b.n	80034c8 <OnTxData+0xb4>
      APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <OnTxData+0xdc>)
 80034be:	2200      	movs	r2, #0
 80034c0:	2100      	movs	r1, #0
 80034c2:	2003      	movs	r0, #3
 80034c4:	f018 f978 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}
 80034d0:	20000364 	.word	0x20000364
 80034d4:	0801e424 	.word	0x0801e424
 80034d8:	0801e45c 	.word	0x0801e45c
 80034dc:	0801e49c 	.word	0x0801e49c
 80034e0:	0801e4ac 	.word	0x0801e4ac
 80034e4:	0801e4b4 	.word	0x0801e4b4
 80034e8:	0801e4b8 	.word	0x0801e4b8
 80034ec:	0801e4c0 	.word	0x0801e4c0
 80034f0:	0801e4d4 	.word	0x0801e4d4

080034f4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d029      	beq.n	8003556 <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	785b      	ldrb	r3, [r3, #1]
 8003506:	b25b      	sxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d11e      	bne.n	800354a <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <OnJoinRequest+0x6c>)
 800350e:	0018      	movs	r0, r3
 8003510:	f019 f896 	bl	801c640 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 8003514:	2001      	movs	r0, #1
 8003516:	f002 f8a3 	bl	8005660 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <OnJoinRequest+0x70>)
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	2002      	movs	r0, #2
 8003522:	f018 f949 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	789b      	ldrb	r3, [r3, #2]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d106      	bne.n	800353c <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <OnJoinRequest+0x74>)
 8003530:	2200      	movs	r2, #0
 8003532:	2100      	movs	r1, #0
 8003534:	2002      	movs	r0, #2
 8003536:	f018 f93f 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 800353a:	e00c      	b.n	8003556 <OnJoinRequest+0x62>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <OnJoinRequest+0x78>)
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	2002      	movs	r0, #2
 8003544:	f018 f938 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8003548:	e005      	b.n	8003556 <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <OnJoinRequest+0x7c>)
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	2002      	movs	r0, #2
 8003552:	f018 f931 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	20000394 	.word	0x20000394
 8003564:	0801e4e4 	.word	0x0801e4e4
 8003568:	0801e4fc 	.word	0x0801e4fc
 800356c:	0801e51c 	.word	0x0801e51c
 8003570:	0801e53c 	.word	0x0801e53c

08003574 <OnMacProcessNotify>:
  /* USER CODE END LPTIM1_Init 2 */

// }

static void OnMacProcessNotify(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8003578:	2100      	movs	r1, #0
 800357a:	2001      	movs	r0, #1
 800357c:	f018 fde4 	bl	801c148 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <LoraInfo_Init+0x50>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <LoraInfo_Init+0x50>)
 8003594:	2200      	movs	r2, #0
 8003596:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <LoraInfo_Init+0x50>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <LoraInfo_Init+0x50>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <LoraInfo_Init+0x50>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	431a      	orrs	r2, r3
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <LoraInfo_Init+0x50>)
 80035ae:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <LoraInfo_Init+0x50>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <LoraInfo_Init+0x54>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	2000      	movs	r0, #0
 80035c0:	f018 f8fa 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 80035c4:	e7fe      	b.n	80035c4 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <LoraInfo_Init+0x50>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 80035cc:	4b02      	ldr	r3, [pc, #8]	; (80035d8 <LoraInfo_Init+0x50>)
 80035ce:	2203      	movs	r2, #3
 80035d0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200003ac 	.word	0x200003ac
 80035dc:	0801e5a4 	.word	0x0801e5a4

080035e0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 80035e4:	4b01      	ldr	r3, [pc, #4]	; (80035ec <LoraInfo_GetPtr+0xc>)
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200003ac 	.word	0x200003ac

080035f0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <MX_ADC_Init+0x90>)
 80035f6:	4a23      	ldr	r2, [pc, #140]	; (8003684 <MX_ADC_Init+0x94>)
 80035f8:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <MX_ADC_Init+0x90>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003600:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <MX_ADC_Init+0x90>)
 8003602:	2280      	movs	r2, #128	; 0x80
 8003604:	0612      	lsls	r2, r2, #24
 8003606:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8003608:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <MX_ADC_Init+0x90>)
 800360a:	2200      	movs	r2, #0
 800360c:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <MX_ADC_Init+0x90>)
 8003610:	2201      	movs	r2, #1
 8003612:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 8003614:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <MX_ADC_Init+0x90>)
 8003616:	2200      	movs	r2, #0
 8003618:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <MX_ADC_Init+0x90>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <MX_ADC_Init+0x90>)
 8003622:	2207      	movs	r2, #7
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <MX_ADC_Init+0x90>)
 8003628:	2201      	movs	r2, #1
 800362a:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <MX_ADC_Init+0x90>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8003632:	4b13      	ldr	r3, [pc, #76]	; (8003680 <MX_ADC_Init+0x90>)
 8003634:	2220      	movs	r2, #32
 8003636:	2100      	movs	r1, #0
 8003638:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <MX_ADC_Init+0x90>)
 800363c:	2221      	movs	r2, #33	; 0x21
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <MX_ADC_Init+0x90>)
 8003644:	2200      	movs	r2, #0
 8003646:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <MX_ADC_Init+0x90>)
 800364a:	2204      	movs	r2, #4
 800364c:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800364e:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <MX_ADC_Init+0x90>)
 8003650:	222c      	movs	r2, #44	; 0x2c
 8003652:	2100      	movs	r1, #0
 8003654:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <MX_ADC_Init+0x90>)
 8003658:	0018      	movs	r0, r3
 800365a:	f002 fc97 	bl	8005f8c <HAL_ADC_Init>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 8003662:	f000 f9ef 	bl	8003a44 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <MX_ADC_Init+0x90>)
 8003668:	2100      	movs	r1, #0
 800366a:	0018      	movs	r0, r3
 800366c:	f003 f980 	bl	8006970 <HAL_ADCEx_Calibration_Start>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 8003674:	f000 f9e6 	bl	8003a44 <Error_Handler>
  }
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	20001498 	.word	0x20001498
 8003684:	40012400 	.word	0x40012400

08003688 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <HAL_ADC_MspInit+0x28>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d106      	bne.n	80036a8 <HAL_ADC_MspInit+0x20>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_ADC_MspInit+0x2c>)
 800369c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_ADC_MspInit+0x2c>)
 80036a0:	2180      	movs	r1, #128	; 0x80
 80036a2:	0089      	lsls	r1, r1, #2
 80036a4:	430a      	orrs	r2, r1
 80036a6:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40012400 	.word	0x40012400
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <HAL_ADC_MspDeInit+0x40>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d112      	bne.n	80036f0 <HAL_ADC_MspDeInit+0x38>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_ADC_MspDeInit+0x44>)
 80036cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_ADC_MspDeInit+0x44>)
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	0089      	lsls	r1, r1, #2
 80036d4:	430a      	orrs	r2, r1
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_ADC_MspDeInit+0x44>)
 80036da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_ADC_MspDeInit+0x44>)
 80036de:	4908      	ldr	r1, [pc, #32]	; (8003700 <HAL_ADC_MspDeInit+0x48>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_ADC_MspDeInit+0x44>)
 80036e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_ADC_MspDeInit+0x44>)
 80036ea:	4905      	ldr	r1, [pc, #20]	; (8003700 <HAL_ADC_MspDeInit+0x48>)
 80036ec:	400a      	ands	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40012400 	.word	0x40012400
 80036fc:	40021000 	.word	0x40021000
 8003700:	fffffdff 	.word	0xfffffdff

08003704 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 8003708:	4b02      	ldr	r3, [pc, #8]	; (8003714 <SYS_InitMeasurement+0x10>)
 800370a:	4a03      	ldr	r2, [pc, #12]	; (8003718 <SYS_InitMeasurement+0x14>)
 800370c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20001498 	.word	0x20001498
 8003718:	40012400 	.word	0x40012400

0800371c <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 800371c:	b5b0      	push	{r4, r5, r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8003722:	250e      	movs	r5, #14
 8003724:	197b      	adds	r3, r7, r5
 8003726:	2200      	movs	r2, #0
 8003728:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800372e:	1dbc      	adds	r4, r7, #6
 8003730:	f000 f84c 	bl	80037cc <SYS_GetBatteryLevel>
 8003734:	0003      	movs	r3, r0
 8003736:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <SYS_GetTemperatureLevel+0x9c>)
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f874 	bl	8003828 <ADC_ReadChannels>
 8003740:	0003      	movs	r3, r0
 8003742:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003744:	1dbb      	adds	r3, r7, #6
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4353      	muls	r3, r2
 800374c:	491b      	ldr	r1, [pc, #108]	; (80037bc <SYS_GetTemperatureLevel+0xa0>)
 800374e:	0018      	movs	r0, r3
 8003750:	f7fc fcec 	bl	800012c <__udivsi3>
 8003754:	0003      	movs	r3, r0
 8003756:	001a      	movs	r2, r3
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <SYS_GetTemperatureLevel+0xa4>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	1ad2      	subs	r2, r2, r3
 800375e:	0013      	movs	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	189b      	adds	r3, r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <SYS_GetTemperatureLevel+0xa8>)
 800376a:	8812      	ldrh	r2, [r2, #0]
 800376c:	0011      	movs	r1, r2
 800376e:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <SYS_GetTemperatureLevel+0xa4>)
 8003770:	8812      	ldrh	r2, [r2, #0]
 8003772:	1a8a      	subs	r2, r1, r2
 8003774:	0011      	movs	r1, r2
 8003776:	0018      	movs	r0, r3
 8003778:	f7fc fd62 	bl	8000240 <__divsi3>
 800377c:	0003      	movs	r3, r0
 800377e:	b29b      	uxth	r3, r3
 8003780:	22f0      	movs	r2, #240	; 0xf0
 8003782:	0152      	lsls	r2, r2, #5
 8003784:	4694      	mov	ip, r2
 8003786:	4463      	add	r3, ip
 8003788:	b29a      	uxth	r2, r3
 800378a:	197b      	adds	r3, r7, r5
 800378c:	801a      	strh	r2, [r3, #0]

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 800378e:	197b      	adds	r3, r7, r5
 8003790:	2200      	movs	r2, #0
 8003792:	5e9b      	ldrsh	r3, [r3, r2]
 8003794:	121b      	asrs	r3, r3, #8
 8003796:	b21b      	sxth	r3, r3
 8003798:	001a      	movs	r2, r3
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <SYS_GetTemperatureLevel+0xac>)
 800379c:	9200      	str	r2, [sp, #0]
 800379e:	2201      	movs	r2, #1
 80037a0:	2100      	movs	r1, #0
 80037a2:	2001      	movs	r0, #1
 80037a4:	f018 f808 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>

  return (int16_t) temperatureDegreeC;
 80037a8:	197b      	adds	r3, r7, r5
 80037aa:	2200      	movs	r2, #0
 80037ac:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	48040000 	.word	0x48040000
 80037bc:	00000bb8 	.word	0x00000bb8
 80037c0:	1ff8007a 	.word	0x1ff8007a
 80037c4:	1ff8007e 	.word	0x1ff8007e
 80037c8:	0801e5f4 	.word	0x0801e5f4

080037cc <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80037d2:	1dbb      	adds	r3, r7, #6
 80037d4:	2200      	movs	r2, #0
 80037d6:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <SYS_GetBatteryLevel+0x50>)
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 f822 	bl	8003828 <ADC_ReadChannels>
 80037e4:	0003      	movs	r3, r0
 80037e6:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 80037ee:	1dbb      	adds	r3, r7, #6
 80037f0:	2200      	movs	r2, #0
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e00c      	b.n	8003810 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <SYS_GetBatteryLevel+0x54>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	001a      	movs	r2, r3
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <SYS_GetBatteryLevel+0x58>)
 80037fe:	4353      	muls	r3, r2
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	0018      	movs	r0, r3
 8003804:	f7fc fc92 	bl	800012c <__udivsi3>
 8003808:	0003      	movs	r3, r0
 800380a:	001a      	movs	r2, r3
 800380c:	1dbb      	adds	r3, r7, #6
 800380e:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 8003810:	1dbb      	adds	r3, r7, #6
 8003812:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}
 800381c:	44020000 	.word	0x44020000
 8003820:	1ff80078 	.word	0x1ff80078
 8003824:	00000bb8 	.word	0x00000bb8

08003828 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003834:	230c      	movs	r3, #12
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	0018      	movs	r0, r3
 800383a:	2308      	movs	r3, #8
 800383c:	001a      	movs	r2, r3
 800383e:	2100      	movs	r1, #0
 8003840:	f01a f8a3 	bl	801d98a <memset>

  MX_ADC_Init();
 8003844:	f7ff fed4 	bl	80035f0 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <ADC_ReadChannels+0xd4>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2208      	movs	r2, #8
 8003850:	4013      	ands	r3, r2
 8003852:	2b08      	cmp	r3, #8
 8003854:	d1f9      	bne.n	800384a <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <ADC_ReadChannels+0xd8>)
 8003858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <ADC_ReadChannels+0xd8>)
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	0089      	lsls	r1, r1, #2
 8003860:	430a      	orrs	r2, r1
 8003862:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <ADC_ReadChannels+0xdc>)
 8003866:	2100      	movs	r1, #0
 8003868:	0018      	movs	r0, r3
 800386a:	f003 f881 	bl	8006970 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 800386e:	240c      	movs	r4, #12
 8003870:	193b      	adds	r3, r7, r4
 8003872:	4a25      	ldr	r2, [pc, #148]	; (8003908 <ADC_ReadChannels+0xe0>)
 8003874:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8003876:	193b      	adds	r3, r7, r4
 8003878:	4a24      	ldr	r2, [pc, #144]	; (800390c <ADC_ReadChannels+0xe4>)
 800387a:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800387c:	193a      	adds	r2, r7, r4
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <ADC_ReadChannels+0xdc>)
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f002 fec8 	bl	8006618 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8003888:	0021      	movs	r1, r4
 800388a:	187b      	adds	r3, r7, r1
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	0152      	lsls	r2, r2, #5
 8003896:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003898:	187a      	adds	r2, r7, r1
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <ADC_ReadChannels+0xdc>)
 800389c:	0011      	movs	r1, r2
 800389e:	0018      	movs	r0, r3
 80038a0:	f002 feba 	bl	8006618 <HAL_ADC_ConfigChannel>
 80038a4:	1e03      	subs	r3, r0, #0
 80038a6:	d001      	beq.n	80038ac <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 80038a8:	f000 f8cc 	bl	8003a44 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80038ac:	4b15      	ldr	r3, [pc, #84]	; (8003904 <ADC_ReadChannels+0xdc>)
 80038ae:	0018      	movs	r0, r3
 80038b0:	f002 fd7c 	bl	80063ac <HAL_ADC_Start>
 80038b4:	1e03      	subs	r3, r0, #0
 80038b6:	d001      	beq.n	80038bc <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 80038b8:	f000 f8c4 	bl	8003a44 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80038bc:	2301      	movs	r3, #1
 80038be:	425a      	negs	r2, r3
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <ADC_ReadChannels+0xdc>)
 80038c2:	0011      	movs	r1, r2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f002 fe05 	bl	80064d4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <ADC_ReadChannels+0xdc>)
 80038cc:	0018      	movs	r0, r3
 80038ce:	f002 fdc1 	bl	8006454 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <ADC_ReadChannels+0xdc>)
 80038d4:	0018      	movs	r0, r3
 80038d6:	f002 fe93 	bl	8006600 <HAL_ADC_GetValue>
 80038da:	0003      	movs	r3, r0
 80038dc:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <ADC_ReadChannels+0xdc>)
 80038e0:	0018      	movs	r0, r3
 80038e2:	f002 fcc7 	bl	8006274 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <ADC_ReadChannels+0xd8>)
 80038e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <ADC_ReadChannels+0xd8>)
 80038ec:	4908      	ldr	r1, [pc, #32]	; (8003910 <ADC_ReadChannels+0xe8>)
 80038ee:	400a      	ands	r2, r1
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 80038f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b007      	add	sp, #28
 80038fa:	bd90      	pop	{r4, r7, pc}
 80038fc:	40007000 	.word	0x40007000
 8003900:	40021000 	.word	0x40021000
 8003904:	20001498 	.word	0x20001498
 8003908:	0007ffff 	.word	0x0007ffff
 800390c:	00001001 	.word	0x00001001
 8003910:	fffffdff 	.word	0xfffffdff

08003914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <MX_DMA_Init+0x38>)
 800391c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <MX_DMA_Init+0x38>)
 8003920:	2101      	movs	r1, #1
 8003922:	430a      	orrs	r2, r1
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <MX_DMA_Init+0x38>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	2201      	movs	r2, #1
 800392c:	4013      	ands	r3, r2
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2100      	movs	r1, #0
 8003936:	200b      	movs	r0, #11
 8003938:	f003 f95a 	bl	8006bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800393c:	200b      	movs	r0, #11
 800393e:	f003 f96c 	bl	8006c1a <HAL_NVIC_EnableIRQ>

}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40021000 	.word	0x40021000

08003950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003954:	f002 faa0 	bl	8005e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003958:	f000 f806 	bl	8003968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 800395c:	f7ff fae6 	bl	8002f2c <MX_LoRaWAN_Init>
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 8003960:	f7ff faed 	bl	8002f3e <MX_LoRaWAN_Process>
 8003964:	e7fc      	b.n	8003960 <main+0x10>
	...

08003968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b095      	sub	sp, #84	; 0x54
 800396c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800396e:	2418      	movs	r4, #24
 8003970:	193b      	adds	r3, r7, r4
 8003972:	0018      	movs	r0, r3
 8003974:	2338      	movs	r3, #56	; 0x38
 8003976:	001a      	movs	r2, r3
 8003978:	2100      	movs	r1, #0
 800397a:	f01a f806 	bl	801d98a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	0018      	movs	r0, r3
 8003982:	2314      	movs	r3, #20
 8003984:	001a      	movs	r2, r3
 8003986:	2100      	movs	r1, #0
 8003988:	f019 ffff 	bl	801d98a <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800398c:	0021      	movs	r1, r4
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2202      	movs	r2, #2
 8003992:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2201      	movs	r2, #1
 800399e:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	2210      	movs	r2, #16
 80039a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	2202      	movs	r2, #2
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	2200      	movs	r2, #0
 80039b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	0312      	lsls	r2, r2, #12
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80039ba:	187b      	adds	r3, r7, r1
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	0412      	lsls	r2, r2, #16
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	0018      	movs	r0, r3
 80039c6:	f004 fdb5 	bl	8008534 <HAL_RCC_OscConfig>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d001      	beq.n	80039d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80039ce:	f000 f839 	bl	8003a44 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <SystemClock_Config+0xd0>)
 80039d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <SystemClock_Config+0xd0>)
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	0549      	lsls	r1, r1, #21
 80039dc:	430a      	orrs	r2, r1
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <SystemClock_Config+0xd4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <SystemClock_Config+0xd8>)
 80039e6:	401a      	ands	r2, r3
 80039e8:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <SystemClock_Config+0xd4>)
 80039ea:	2180      	movs	r1, #128	; 0x80
 80039ec:	0109      	lsls	r1, r1, #4
 80039ee:	430a      	orrs	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <SystemClock_Config+0xd4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2210      	movs	r2, #16
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d0f9      	beq.n	80039f4 <SystemClock_Config+0x8c>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	220f      	movs	r2, #15
 8003a04:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	2203      	movs	r2, #3
 8003a0a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	2200      	movs	r2, #0
 8003a16:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2101      	movs	r1, #1
 8003a22:	0018      	movs	r0, r3
 8003a24:	f005 f95a 	bl	8008cdc <HAL_RCC_ClockConfig>
 8003a28:	1e03      	subs	r3, r0, #0
 8003a2a:	d001      	beq.n	8003a30 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003a2c:	f000 f80a 	bl	8003a44 <Error_Handler>
  }
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b015      	add	sp, #84	; 0x54
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	ffffe7ff 	.word	0xffffe7ff

08003a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <Error_Handler+0x4>
	...

08003a4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b090      	sub	sp, #64	; 0x40
 8003a50:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003a52:	232c      	movs	r3, #44	; 0x2c
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	0018      	movs	r0, r3
 8003a58:	2314      	movs	r3, #20
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	f019 ff94 	bl	801d98a <memset>
  RTC_DateTypeDef sDate = {0};
 8003a62:	2328      	movs	r3, #40	; 0x28
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003a6a:	003b      	movs	r3, r7
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	2328      	movs	r3, #40	; 0x28
 8003a70:	001a      	movs	r2, r3
 8003a72:	2100      	movs	r1, #0
 8003a74:	f019 ff89 	bl	801d98a <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a78:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <MX_RTC_Init+0x134>)
 8003a7a:	4a42      	ldr	r2, [pc, #264]	; (8003b84 <MX_RTC_Init+0x138>)
 8003a7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a7e:	4b40      	ldr	r3, [pc, #256]	; (8003b80 <MX_RTC_Init+0x134>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003a84:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <MX_RTC_Init+0x134>)
 8003a86:	221f      	movs	r2, #31
 8003a88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8003a8a:	4b3d      	ldr	r3, [pc, #244]	; (8003b80 <MX_RTC_Init+0x134>)
 8003a8c:	4a3e      	ldr	r2, [pc, #248]	; (8003b88 <MX_RTC_Init+0x13c>)
 8003a8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a90:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <MX_RTC_Init+0x134>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003a96:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <MX_RTC_Init+0x134>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a9c:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <MX_RTC_Init+0x134>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003aa2:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <MX_RTC_Init+0x134>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003aa8:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <MX_RTC_Init+0x134>)
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f005 fc90 	bl	80093d0 <HAL_RTC_Init>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003ab4:	f7ff ffc6 	bl	8003a44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003ac6:	187b      	adds	r3, r7, r1
 8003ac8:	2200      	movs	r2, #0
 8003aca:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003ad8:	1879      	adds	r1, r7, r1
 8003ada:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <MX_RTC_Init+0x134>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f005 fd14 	bl	800950c <HAL_RTC_SetTime>
 8003ae4:	1e03      	subs	r3, r0, #0
 8003ae6:	d001      	beq.n	8003aec <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003ae8:	f7ff ffac 	bl	8003a44 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003aec:	2128      	movs	r1, #40	; 0x28
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2201      	movs	r2, #1
 8003af8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	2201      	movs	r2, #1
 8003afe:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	2200      	movs	r2, #0
 8003b04:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003b06:	1879      	adds	r1, r7, r1
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <MX_RTC_Init+0x134>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f005 fe1d 	bl	800974c <HAL_RTC_SetDate>
 8003b12:	1e03      	subs	r3, r0, #0
 8003b14:	d001      	beq.n	8003b1a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003b16:	f7ff ff95 	bl	8003a44 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003b1a:	003b      	movs	r3, r7
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003b20:	003b      	movs	r3, r7
 8003b22:	2200      	movs	r2, #0
 8003b24:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003b26:	003b      	movs	r3, r7
 8003b28:	2200      	movs	r2, #0
 8003b2a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003b2c:	003b      	movs	r3, r7
 8003b2e:	2200      	movs	r2, #0
 8003b30:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b32:	003b      	movs	r3, r7
 8003b34:	2200      	movs	r2, #0
 8003b36:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003b38:	003b      	movs	r3, r7
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003b3e:	003b      	movs	r3, r7
 8003b40:	2200      	movs	r2, #0
 8003b42:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003b44:	003b      	movs	r3, r7
 8003b46:	22a0      	movs	r2, #160	; 0xa0
 8003b48:	0512      	lsls	r2, r2, #20
 8003b4a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003b4c:	003b      	movs	r3, r7
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 8003b52:	003b      	movs	r3, r7
 8003b54:	2220      	movs	r2, #32
 8003b56:	211e      	movs	r1, #30
 8003b58:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003b5a:	003b      	movs	r3, r7
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	0052      	lsls	r2, r2, #1
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003b62:	0039      	movs	r1, r7
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <MX_RTC_Init+0x134>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f005 feeb 	bl	8009944 <HAL_RTC_SetAlarm_IT>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d001      	beq.n	8003b76 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003b72:	f7ff ff67 	bl	8003a44 <Error_Handler>
  }

}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b010      	add	sp, #64	; 0x40
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	2000156c 	.word	0x2000156c
 8003b84:	40002800 	.word	0x40002800
 8003b88:	000003ff 	.word	0x000003ff

08003b8c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b091      	sub	sp, #68	; 0x44
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b94:	2408      	movs	r4, #8
 8003b96:	193b      	adds	r3, r7, r4
 8003b98:	0018      	movs	r0, r3
 8003b9a:	2338      	movs	r3, #56	; 0x38
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f019 fef3 	bl	801d98a <memset>
  if (rtcHandle->Instance == RTC)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <HAL_RTC_MspInit+0x78>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d126      	bne.n	8003bfc <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	2280      	movs	r2, #128	; 0x80
 8003bb8:	0052      	lsls	r2, r2, #1
 8003bba:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003bc2:	193b      	adds	r3, r7, r4
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003bc8:	193b      	adds	r3, r7, r4
 8003bca:	2200      	movs	r2, #0
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bce:	193b      	adds	r3, r7, r4
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f004 fcaf 	bl	8008534 <HAL_RCC_OscConfig>
 8003bd6:	1e03      	subs	r3, r0, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8003bda:	f7ff ff33 	bl	8003a44 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_RTC_MspInit+0x7c>)
 8003be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RTC_MspInit+0x7c>)
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	02c9      	lsls	r1, r1, #11
 8003be8:	430a      	orrs	r2, r1
 8003bea:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	f002 fffd 	bl	8006bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 8003bf6:	2002      	movs	r0, #2
 8003bf8:	f003 f80f 	bl	8006c1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b011      	add	sp, #68	; 0x44
 8003c02:	bd90      	pop	{r4, r7, pc}
 8003c04:	40002800 	.word	0x40002800
 8003c08:	40021000 	.word	0x40021000

08003c0c <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	0c1b      	lsrs	r3, r3, #16
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003c2a:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <RTC_IF_Init+0x60>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4053      	eors	r3, r2
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01f      	beq.n	8003c78 <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	2280      	movs	r2, #128	; 0x80
 8003c42:	0252      	lsls	r2, r2, #9
 8003c44:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f005 fa6b 	bl	8009124 <HAL_RCCEx_PeriphCLKConfig>
 8003c4e:	1e03      	subs	r3, r0, #0
 8003c50:	d000      	beq.n	8003c54 <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 8003c52:	e7fe      	b.n	8003c52 <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003c54:	f7ff fefa 	bl	8003a4c <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	005a      	lsls	r2, r3, #1
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <RTC_IF_Init+0x64>)
 8003c5e:	0011      	movs	r1, r2
 8003c60:	0018      	movs	r0, r3
 8003c62:	f005 ffbb 	bl	8009bdc <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <RTC_IF_Init+0x64>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f006 f965 	bl	8009f38 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003c6e:	f000 f859 	bl	8003d24 <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003c72:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <RTC_IF_Init+0x60>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b00a      	add	sp, #40	; 0x28
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	200003bc 	.word	0x200003bc
 8003c88:	2000156c 	.word	0x2000156c

08003c8c <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <RTC_IF_StartTimer+0x5c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	5e9b      	ldrsh	r3, [r3, r2]
 8003c9a:	3303      	adds	r3, #3
 8003c9c:	001c      	movs	r4, r3
 8003c9e:	f000 f861 	bl	8003d64 <RTC_IF_GetTimerElapsedTime>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	429c      	cmp	r4, r3
 8003caa:	d204      	bcs.n	8003cb6 <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003cac:	2100      	movs	r1, #0
 8003cae:	2002      	movs	r0, #2
 8003cb0:	f018 f83a 	bl	801bd28 <UTIL_LPM_SetStopMode>
 8003cb4:	e003      	b.n	8003cbe <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	2002      	movs	r0, #2
 8003cba:	f018 f835 	bl	801bd28 <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003cbe:	f018 f893 	bl	801bde8 <UTIL_LPM_GetMode>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d106      	bne.n	8003cd6 <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <RTC_IF_StartTimer+0x5c>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	5e9b      	ldrsh	r3, [r3, r2]
 8003cce:	001a      	movs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 f959 	bl	8003f90 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b003      	add	sp, #12
 8003ce6:	bd90      	pop	{r4, r7, pc}
 8003ce8:	200003be 	.word	0x200003be

08003cec <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <RTC_IF_StopTimer+0x30>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	22ff      	movs	r2, #255	; 0xff
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <RTC_IF_StopTimer+0x30>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4908      	ldr	r1, [pc, #32]	; (8003d20 <RTC_IF_StopTimer+0x34>)
 8003d00:	430a      	orrs	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	005a      	lsls	r2, r3, #1
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <RTC_IF_StopTimer+0x30>)
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f005 ff65 	bl	8009bdc <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	0018      	movs	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	2000156c 	.word	0x2000156c
 8003d20:	fffffe7f 	.word	0xfffffe7f

08003d24 <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003d28:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <RTC_IF_SetTimerContext+0x20>)
 8003d2a:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <RTC_IF_SetTimerContext+0x24>)
 8003d2c:	0011      	movs	r1, r2
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 fa94 	bl	800425c <RTC_GetCalendarValue>
 8003d34:	0002      	movs	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <RTC_IF_SetTimerContext+0x28>)
 8003d38:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <RTC_IF_SetTimerContext+0x28>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200003ec 	.word	0x200003ec
 8003d48:	20000400 	.word	0x20000400
 8003d4c:	200003e8 	.word	0x200003e8

08003d50 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003d54:	4b02      	ldr	r3, [pc, #8]	; (8003d60 <RTC_IF_GetTimerContext+0x10>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	200003e8 	.word	0x200003e8

08003d64 <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	18fa      	adds	r2, r7, r3
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	0011      	movs	r1, r2
 8003d72:	0018      	movs	r0, r3
 8003d74:	f000 fa72 	bl	800425c <RTC_GetCalendarValue>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <RTC_IF_GetTimerElapsedTime+0x28>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	1ad3      	subs	r3, r2, r3
}
 8003d84:	0018      	movs	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b008      	add	sp, #32
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200003e8 	.word	0x200003e8

08003d90 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <RTC_IF_GetTimerValue+0x30>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003da2:	2308      	movs	r3, #8
 8003da4:	18fa      	adds	r2, r7, r3
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 fa56 	bl	800425c <RTC_GetCalendarValue>
 8003db0:	0003      	movs	r3, r0
 8003db2:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 8003db4:	69fb      	ldr	r3, [r7, #28]
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b008      	add	sp, #32
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	200003bc 	.word	0x200003bc

08003dc4 <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003dc8:	2303      	movs	r3, #3
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003dd0:	b5b0      	push	{r4, r5, r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	000a      	movs	r2, r1
 8003ddc:	2100      	movs	r1, #0
 8003dde:	000b      	movs	r3, r1
 8003de0:	0e51      	lsrs	r1, r2, #25
 8003de2:	01dd      	lsls	r5, r3, #7
 8003de4:	430d      	orrs	r5, r1
 8003de6:	01d4      	lsls	r4, r2, #7
 8003de8:	227d      	movs	r2, #125	; 0x7d
 8003dea:	2300      	movs	r3, #0
 8003dec:	0020      	movs	r0, r4
 8003dee:	0029      	movs	r1, r5
 8003df0:	f7fc fbae 	bl	8000550 <__aeabi_uldivmod>
 8003df4:	0002      	movs	r2, r0
 8003df6:	000b      	movs	r3, r1
 8003df8:	0013      	movs	r3, r2
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bdb0      	pop	{r4, r5, r7, pc}

08003e02 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e04:	b089      	sub	sp, #36	; 0x24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	0ed1      	lsrs	r1, r2, #27
 8003e18:	0158      	lsls	r0, r3, #5
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	4308      	orrs	r0, r1
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	0153      	lsls	r3, r2, #5
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	68fc      	ldr	r4, [r7, #12]
 8003e2a:	6939      	ldr	r1, [r7, #16]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	1a5b      	subs	r3, r3, r1
 8003e30:	4194      	sbcs	r4, r2
 8003e32:	001a      	movs	r2, r3
 8003e34:	0023      	movs	r3, r4
 8003e36:	0f91      	lsrs	r1, r2, #30
 8003e38:	0098      	lsls	r0, r3, #2
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4308      	orrs	r0, r1
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	0093      	lsls	r3, r2, #2
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	6838      	ldr	r0, [r7, #0]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	1812      	adds	r2, r2, r0
 8003e50:	414b      	adcs	r3, r1
 8003e52:	0659      	lsls	r1, r3, #25
 8003e54:	09d0      	lsrs	r0, r2, #7
 8003e56:	0005      	movs	r5, r0
 8003e58:	0028      	movs	r0, r5
 8003e5a:	4308      	orrs	r0, r1
 8003e5c:	0005      	movs	r5, r0
 8003e5e:	09db      	lsrs	r3, r3, #7
 8003e60:	001e      	movs	r6, r3
 8003e62:	002b      	movs	r3, r5
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b009      	add	sp, #36	; 0x24
 8003e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e6c <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f7ff ffa6 	bl	8003dd0 <RTC_IF_Convert_ms2Tick>
 8003e84:	0003      	movs	r3, r0
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8003e88:	f7ff ff82 	bl	8003d90 <RTC_IF_GetTimerValue>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003e90:	e000      	b.n	8003e94 <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 8003e92:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003e94:	f7ff ff7c 	bl	8003d90 <RTC_IF_GetTimerValue>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d8f6      	bhi.n	8003e92 <RTC_IF_DelayMs+0x26>
  }
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b004      	add	sp, #16
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 8003eb6:	f018 fc6f 	bl	801c798 <UTIL_TIMER_IRQ_Handler>
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b002      	add	sp, #8
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 8003ec2:	b5b0      	push	{r4, r5, r7, lr}
 8003ec4:	b08c      	sub	sp, #48	; 0x30
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003eca:	230c      	movs	r3, #12
 8003ecc:	18fa      	adds	r2, r7, r3
 8003ece:	2308      	movs	r3, #8
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f9c1 	bl	800425c <RTC_GetCalendarValue>
 8003eda:	0003      	movs	r3, r0
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	059b      	lsls	r3, r3, #22
 8003ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee8:	0a94      	lsrs	r4, r2, #10
 8003eea:	431c      	orrs	r4, r3
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	0a9d      	lsrs	r5, r3, #10
 8003ef0:	0023      	movs	r3, r4
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	059b      	lsls	r3, r3, #22
 8003ef8:	0d9b      	lsrs	r3, r3, #22
 8003efa:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff ff7f 	bl	8003e02 <RTC_IF_Convert_Tick2ms>
 8003f04:	0003      	movs	r3, r0
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	801a      	strh	r2, [r3, #0]

  return seconds;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b00c      	add	sp, #48	; 0x30
 8003f14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003f18 <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <RTC_IF_BkUp_Write_Seconds+0x1c>)
 8003f24:	2100      	movs	r1, #0
 8003f26:	0018      	movs	r0, r3
 8003f28:	f005 ffdc 	bl	8009ee4 <HAL_RTCEx_BKUPWrite>
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b002      	add	sp, #8
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	2000156c 	.word	0x2000156c

08003f38 <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8003f44:	2101      	movs	r1, #1
 8003f46:	0018      	movs	r0, r3
 8003f48:	f005 ffcc 	bl	8009ee4 <HAL_RTCEx_BKUPWrite>
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	2000156c 	.word	0x2000156c

08003f58 <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <RTC_IF_BkUp_Read_Seconds+0x18>)
 8003f5e:	2100      	movs	r1, #0
 8003f60:	0018      	movs	r0, r3
 8003f62:	f005 ffd5 	bl	8009f10 <HAL_RTCEx_BKUPRead>
 8003f66:	0003      	movs	r3, r0
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	2000156c 	.word	0x2000156c

08003f74 <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f005 ffc7 	bl	8009f10 <HAL_RTCEx_BKUPRead>
 8003f82:	0003      	movs	r3, r0
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	2000156c 	.word	0x2000156c

08003f90 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	b08d      	sub	sp, #52	; 0x34
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8003f98:	242e      	movs	r4, #46	; 0x2e
 8003f9a:	193b      	adds	r3, r7, r4
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8003fa0:	232c      	movs	r3, #44	; 0x2c
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8003fa8:	232a      	movs	r3, #42	; 0x2a
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	2200      	movs	r2, #0
 8003fae:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8003fb0:	2328      	movs	r3, #40	; 0x28
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8003fb8:	2526      	movs	r5, #38	; 0x26
 8003fba:	197b      	adds	r3, r7, r5
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003fc0:	2610      	movs	r6, #16
 8003fc2:	19ba      	adds	r2, r7, r6
 8003fc4:	4b9b      	ldr	r3, [pc, #620]	; (8004234 <RTC_StartWakeUpAlarm+0x2a4>)
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003fca:	c223      	stmia	r2!, {r0, r1, r5}
 8003fcc:	cb03      	ldmia	r3!, {r0, r1}
 8003fce:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	001d      	movs	r5, r3
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	4a97      	ldr	r2, [pc, #604]	; (8004234 <RTC_StartWakeUpAlarm+0x2a4>)
 8003fd8:	6992      	ldr	r2, [r2, #24]
 8003fda:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8003fdc:	f7ff fe86 	bl	8003cec <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003fe0:	19bb      	adds	r3, r7, r6
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	193b      	adds	r3, r7, r4
 8003fe8:	4993      	ldr	r1, [pc, #588]	; (8004238 <RTC_StartWakeUpAlarm+0x2a8>)
 8003fea:	1a8a      	subs	r2, r1, r2
 8003fec:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	059b      	lsls	r3, r3, #22
 8003ff4:	0d9b      	lsrs	r3, r3, #22
 8003ff6:	b299      	uxth	r1, r3
 8003ff8:	193b      	adds	r3, r7, r4
 8003ffa:	193a      	adds	r2, r7, r4
 8003ffc:	8812      	ldrh	r2, [r2, #0]
 8003ffe:	188a      	adds	r2, r1, r2
 8004000:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0a9b      	lsrs	r3, r3, #10
 8004006:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8004008:	002b      	movs	r3, r5
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	789a      	ldrb	r2, [r3, #2]
 800400e:	2526      	movs	r5, #38	; 0x26
 8004010:	197b      	adds	r3, r7, r5
 8004012:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004014:	e00a      	b.n	800402c <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a88      	ldr	r2, [pc, #544]	; (800423c <RTC_StartWakeUpAlarm+0x2ac>)
 800401a:	4694      	mov	ip, r2
 800401c:	4463      	add	r3, ip
 800401e:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8004020:	2126      	movs	r1, #38	; 0x26
 8004022:	187b      	adds	r3, r7, r1
 8004024:	881a      	ldrh	r2, [r3, #0]
 8004026:	187b      	adds	r3, r7, r1
 8004028:	3201      	adds	r2, #1
 800402a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a84      	ldr	r2, [pc, #528]	; (8004240 <RTC_StartWakeUpAlarm+0x2b0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d8f0      	bhi.n	8004016 <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8004034:	2310      	movs	r3, #16
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	2328      	movs	r3, #40	; 0x28
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004040:	e00a      	b.n	8004058 <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a7f      	ldr	r2, [pc, #508]	; (8004244 <RTC_StartWakeUpAlarm+0x2b4>)
 8004046:	4694      	mov	ip, r2
 8004048:	4463      	add	r3, ip
 800404a:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 800404c:	2128      	movs	r1, #40	; 0x28
 800404e:	187b      	adds	r3, r7, r1
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	187b      	adds	r3, r7, r1
 8004054:	3201      	adds	r2, #1
 8004056:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	23e1      	movs	r3, #225	; 0xe1
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	429a      	cmp	r2, r3
 8004060:	d2ef      	bcs.n	8004042 <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8004062:	2310      	movs	r3, #16
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	785a      	ldrb	r2, [r3, #1]
 8004068:	232a      	movs	r3, #42	; 0x2a
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800406e:	e008      	b.n	8004082 <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3b3c      	subs	r3, #60	; 0x3c
 8004074:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8004076:	212a      	movs	r1, #42	; 0x2a
 8004078:	187b      	adds	r3, r7, r1
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	187b      	adds	r3, r7, r1
 800407e:	3201      	adds	r2, #1
 8004080:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b3b      	cmp	r3, #59	; 0x3b
 8004086:	d8f3      	bhi.n	8004070 <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8004088:	2310      	movs	r3, #16
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	789b      	ldrb	r3, [r3, #2]
 800408e:	b299      	uxth	r1, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	b29a      	uxth	r2, r3
 8004094:	232c      	movs	r3, #44	; 0x2c
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	188a      	adds	r2, r1, r2
 800409a:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800409c:	e00d      	b.n	80040ba <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 800409e:	222e      	movs	r2, #46	; 0x2e
 80040a0:	18bb      	adds	r3, r7, r2
 80040a2:	18ba      	adds	r2, r7, r2
 80040a4:	8812      	ldrh	r2, [r2, #0]
 80040a6:	4968      	ldr	r1, [pc, #416]	; (8004248 <RTC_StartWakeUpAlarm+0x2b8>)
 80040a8:	468c      	mov	ip, r1
 80040aa:	4462      	add	r2, ip
 80040ac:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	3201      	adds	r2, #1
 80040b8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80040ba:	232e      	movs	r3, #46	; 0x2e
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	881a      	ldrh	r2, [r3, #0]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d2ea      	bcs.n	800409e <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80040c8:	e00b      	b.n	80040e2 <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80040ca:	222c      	movs	r2, #44	; 0x2c
 80040cc:	18bb      	adds	r3, r7, r2
 80040ce:	18ba      	adds	r2, r7, r2
 80040d0:	8812      	ldrh	r2, [r2, #0]
 80040d2:	3a3c      	subs	r2, #60	; 0x3c
 80040d4:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 80040d6:	212a      	movs	r1, #42	; 0x2a
 80040d8:	187b      	adds	r3, r7, r1
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	187b      	adds	r3, r7, r1
 80040de:	3201      	adds	r2, #1
 80040e0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80040e2:	232c      	movs	r3, #44	; 0x2c
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	2b3b      	cmp	r3, #59	; 0x3b
 80040ea:	d8ee      	bhi.n	80040ca <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80040ec:	e00b      	b.n	8004106 <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80040ee:	222a      	movs	r2, #42	; 0x2a
 80040f0:	18bb      	adds	r3, r7, r2
 80040f2:	18ba      	adds	r2, r7, r2
 80040f4:	8812      	ldrh	r2, [r2, #0]
 80040f6:	3a3c      	subs	r2, #60	; 0x3c
 80040f8:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80040fa:	2128      	movs	r1, #40	; 0x28
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	187b      	adds	r3, r7, r1
 8004102:	3201      	adds	r2, #1
 8004104:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004106:	232a      	movs	r3, #42	; 0x2a
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	2b3b      	cmp	r3, #59	; 0x3b
 800410e:	d8ee      	bhi.n	80040ee <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004110:	e00b      	b.n	800412a <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8004112:	2228      	movs	r2, #40	; 0x28
 8004114:	18bb      	adds	r3, r7, r2
 8004116:	18ba      	adds	r2, r7, r2
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	3a18      	subs	r2, #24
 800411c:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 800411e:	2126      	movs	r1, #38	; 0x26
 8004120:	187b      	adds	r3, r7, r1
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	187b      	adds	r3, r7, r1
 8004126:	3201      	adds	r2, #1
 8004128:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800412a:	2328      	movs	r3, #40	; 0x28
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	2b17      	cmp	r3, #23
 8004132:	d8ee      	bhi.n	8004112 <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8004134:	210c      	movs	r1, #12
 8004136:	187b      	adds	r3, r7, r1
 8004138:	78db      	ldrb	r3, [r3, #3]
 800413a:	2203      	movs	r2, #3
 800413c:	4013      	ands	r3, r2
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d119      	bne.n	8004178 <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8004144:	187b      	adds	r3, r7, r1
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	3b01      	subs	r3, #1
 800414a:	4a40      	ldr	r2, [pc, #256]	; (800424c <RTC_StartWakeUpAlarm+0x2bc>)
 800414c:	5cd3      	ldrb	r3, [r2, r3]
 800414e:	b29b      	uxth	r3, r3
 8004150:	2426      	movs	r4, #38	; 0x26
 8004152:	193a      	adds	r2, r7, r4
 8004154:	8812      	ldrh	r2, [r2, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d928      	bls.n	80041ac <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 800415a:	193b      	adds	r3, r7, r4
 800415c:	8818      	ldrh	r0, [r3, #0]
 800415e:	187b      	adds	r3, r7, r1
 8004160:	785b      	ldrb	r3, [r3, #1]
 8004162:	3b01      	subs	r3, #1
 8004164:	4a39      	ldr	r2, [pc, #228]	; (800424c <RTC_StartWakeUpAlarm+0x2bc>)
 8004166:	5cd3      	ldrb	r3, [r2, r3]
 8004168:	0019      	movs	r1, r3
 800416a:	f7fc f94f 	bl	800040c <__aeabi_idivmod>
 800416e:	000b      	movs	r3, r1
 8004170:	001a      	movs	r2, r3
 8004172:	193b      	adds	r3, r7, r4
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	e019      	b.n	80041ac <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8004178:	210c      	movs	r1, #12
 800417a:	187b      	adds	r3, r7, r1
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	3b01      	subs	r3, #1
 8004180:	4a33      	ldr	r2, [pc, #204]	; (8004250 <RTC_StartWakeUpAlarm+0x2c0>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	b29b      	uxth	r3, r3
 8004186:	2426      	movs	r4, #38	; 0x26
 8004188:	193a      	adds	r2, r7, r4
 800418a:	8812      	ldrh	r2, [r2, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d90d      	bls.n	80041ac <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004190:	193b      	adds	r3, r7, r4
 8004192:	8818      	ldrh	r0, [r3, #0]
 8004194:	187b      	adds	r3, r7, r1
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	3b01      	subs	r3, #1
 800419a:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <RTC_StartWakeUpAlarm+0x2c0>)
 800419c:	5cd3      	ldrb	r3, [r2, r3]
 800419e:	0019      	movs	r1, r3
 80041a0:	f7fc f934 	bl	800040c <__aeabi_idivmod>
 80041a4:	000b      	movs	r3, r1
 80041a6:	001a      	movs	r2, r3
 80041a8:	193b      	adds	r3, r7, r4
 80041aa:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80041ac:	232e      	movs	r3, #46	; 0x2e
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	; (8004238 <RTC_StartWakeUpAlarm+0x2a8>)
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	001a      	movs	r2, r3
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 80041ba:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 80041be:	22a0      	movs	r2, #160	; 0xa0
 80041c0:	0512      	lsls	r2, r2, #20
 80041c2:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80041c4:	232c      	movs	r3, #44	; 0x2c
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	4b21      	ldr	r3, [pc, #132]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 80041ce:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80041d0:	232a      	movs	r3, #42	; 0x2a
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 80041da:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80041dc:	2328      	movs	r3, #40	; 0x28
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 80041e6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80041e8:	2326      	movs	r3, #38	; 0x26
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b2d9      	uxtb	r1, r3
 80041f0:	4b18      	ldr	r3, [pc, #96]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 80041f2:	2220      	movs	r2, #32
 80041f4:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80041f6:	2310      	movs	r3, #16
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	78da      	ldrb	r2, [r3, #3]
 80041fc:	4b15      	ldr	r3, [pc, #84]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 80041fe:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 8004202:	2200      	movs	r2, #0
 8004204:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	0052      	lsls	r2, r2, #1
 8004212:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 8004216:	2200      	movs	r2, #0
 8004218:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 800421c:	2200      	movs	r2, #0
 800421e:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8004220:	490c      	ldr	r1, [pc, #48]	; (8004254 <RTC_StartWakeUpAlarm+0x2c4>)
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <RTC_StartWakeUpAlarm+0x2c8>)
 8004224:	2200      	movs	r2, #0
 8004226:	0018      	movs	r0, r3
 8004228:	f005 fb8c 	bl	8009944 <HAL_RTC_SetAlarm_IT>
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b00d      	add	sp, #52	; 0x34
 8004232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004234:	200003e8 	.word	0x200003e8
 8004238:	000003ff 	.word	0x000003ff
 800423c:	fffeae80 	.word	0xfffeae80
 8004240:	0001517f 	.word	0x0001517f
 8004244:	fffff1f0 	.word	0xfffff1f0
 8004248:	fffffc00 	.word	0xfffffc00
 800424c:	0801e60c 	.word	0x0801e60c
 8004250:	0801e600 	.word	0x0801e600
 8004254:	200003c0 	.word	0x200003c0
 8004258:	2000156c 	.word	0x2000156c

0800425c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800426a:	6839      	ldr	r1, [r7, #0]
 800426c:	4b42      	ldr	r3, [pc, #264]	; (8004378 <RTC_GetCalendarValue+0x11c>)
 800426e:	2200      	movs	r2, #0
 8004270:	0018      	movs	r0, r3
 8004272:	f005 fa0f 	bl	8009694 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 8004276:	4b41      	ldr	r3, [pc, #260]	; (800437c <RTC_GetCalendarValue+0x120>)
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff fcc7 	bl	8003c0c <LL_RTC_TIME_GetSubSecond>
 800427e:	0003      	movs	r3, r0
 8004280:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4b3c      	ldr	r3, [pc, #240]	; (8004378 <RTC_GetCalendarValue+0x11c>)
 8004286:	2200      	movs	r2, #0
 8004288:	0018      	movs	r0, r3
 800428a:	f005 fb0d 	bl	80098a8 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800428e:	6839      	ldr	r1, [r7, #0]
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <RTC_GetCalendarValue+0x11c>)
 8004292:	2200      	movs	r2, #0
 8004294:	0018      	movs	r0, r3
 8004296:	f005 f9fd 	bl	8009694 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800429a:	4b38      	ldr	r3, [pc, #224]	; (800437c <RTC_GetCalendarValue+0x120>)
 800429c:	0018      	movs	r0, r3
 800429e:	f7ff fcb5 	bl	8003c0c <LL_RTC_TIME_GetSubSecond>
 80042a2:	0002      	movs	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d1e5      	bne.n	8004276 <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	78db      	ldrb	r3, [r3, #3]
 80042ae:	001a      	movs	r2, r3
 80042b0:	4b33      	ldr	r3, [pc, #204]	; (8004380 <RTC_GetCalendarValue+0x124>)
 80042b2:	4353      	muls	r3, r2
 80042b4:	3303      	adds	r3, #3
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	78db      	ldrb	r3, [r3, #3]
 80042be:	2203      	movs	r2, #3
 80042c0:	4013      	ands	r3, r2
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <RTC_GetCalendarValue+0x70>
 80042c8:	4b2e      	ldr	r3, [pc, #184]	; (8004384 <RTC_GetCalendarValue+0x128>)
 80042ca:	e000      	b.n	80042ce <RTC_GetCalendarValue+0x72>
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <RTC_GetCalendarValue+0x12c>)
 80042ce:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	0013      	movs	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	3301      	adds	r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da00      	bge.n	80042e8 <RTC_GetCalendarValue+0x8c>
 80042e6:	3301      	adds	r3, #1
 80042e8:	105b      	asrs	r3, r3, #1
 80042ea:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	40da      	lsrs	r2, r3
 80042f8:	0013      	movs	r3, r2
 80042fa:	2203      	movs	r2, #3
 80042fc:	4013      	ands	r3, r2
 80042fe:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	18d3      	adds	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	789b      	ldrb	r3, [r3, #2]
 800430a:	001a      	movs	r2, r3
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	18d3      	adds	r3, r2, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	0013      	movs	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	189b      	adds	r3, r3, r2
 800431c:	011a      	lsls	r2, r3, #4
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	0113      	lsls	r3, r2, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	01db      	lsls	r3, r3, #7
 8004326:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	789b      	ldrb	r3, [r3, #2]
 800432c:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	001a      	movs	r2, r3
 8004334:	0013      	movs	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	011a      	lsls	r2, r3, #4
 800433c:	1ad2      	subs	r2, r2, r3
 800433e:	0113      	lsls	r3, r2, #4
 8004340:	001a      	movs	r2, r3
 8004342:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	001a      	movs	r2, r3
 800434a:	0013      	movs	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	18c3      	adds	r3, r0, r3
 8004354:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	18d3      	adds	r3, r2, r3
 800435a:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	029a      	lsls	r2, r3, #10
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	4a09      	ldr	r2, [pc, #36]	; (800438c <RTC_GetCalendarValue+0x130>)
 8004368:	4694      	mov	ip, r2
 800436a:	4463      	add	r3, ip
 800436c:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 800436e:	697b      	ldr	r3, [r7, #20]
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b006      	add	sp, #24
 8004376:	bd80      	pop	{r7, pc}
 8004378:	2000156c 	.word	0x2000156c
 800437c:	40002800 	.word	0x40002800
 8004380:	000005b5 	.word	0x000005b5
 8004384:	00445550 	.word	0x00445550
 8004388:	0099aaa0 	.word	0x0099aaa0
 800438c:	000003ff 	.word	0x000003ff

08004390 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043aa:	f3ef 8310 	mrs	r3, PRIMASK
 80043ae:	607b      	str	r3, [r7, #4]
  return(result);
 80043b0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80043b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80043b4:	b672      	cpsid	i
}
 80043b6:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 80043b8:	f001 fb1e 	bl	80059f8 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <PWR_EnterStopMode+0x48>)
 80043be:	0018      	movs	r0, r3
 80043c0:	f7ff f97a 	bl	80036b8 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <PWR_EnterStopMode+0x4c>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <PWR_EnterStopMode+0x4c>)
 80043ca:	2104      	movs	r1, #4
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f383 8810 	msr	PRIMASK, r3
}
 80043da:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80043dc:	2101      	movs	r1, #1
 80043de:	2001      	movs	r0, #1
 80043e0:	f004 f830 	bl	8008444 <HAL_PWR_EnterSTOPMode>
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b004      	add	sp, #16
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20001498 	.word	0x20001498
 80043f0:	40007000 	.word	0x40007000

080043f4 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fa:	f3ef 8310 	mrs	r3, PRIMASK
 80043fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004400:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 8004402:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004404:	b672      	cpsid	i
}
 8004406:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <PWR_ExitStopMode+0x7c>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b18      	ldr	r3, [pc, #96]	; (8004470 <PWR_ExitStopMode+0x7c>)
 800440e:	2101      	movs	r1, #1
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <PWR_ExitStopMode+0x7c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2204      	movs	r2, #4
 800441c:	4013      	ands	r3, r2
 800441e:	d0fa      	beq.n	8004416 <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <PWR_ExitStopMode+0x7c>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <PWR_ExitStopMode+0x7c>)
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	0449      	lsls	r1, r1, #17
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <PWR_ExitStopMode+0x7c>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	049b      	lsls	r3, r3, #18
 8004438:	4013      	ands	r3, r2
 800443a:	d0f9      	beq.n	8004430 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <PWR_ExitStopMode+0x7c>)
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <PWR_ExitStopMode+0x7c>)
 8004442:	2103      	movs	r1, #3
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <PWR_ExitStopMode+0x7c>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	220c      	movs	r2, #12
 8004450:	4013      	ands	r3, r2
 8004452:	2b0c      	cmp	r3, #12
 8004454:	d1f9      	bne.n	800444a <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8004456:	f001 f9c9 	bl	80057ec <CMWX1ZZABZ0XX_RADIO_IoInit>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f383 8810 	msr	PRIMASK, r3
}
 8004464:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	46bd      	mov	sp, r7
 800446a:	b004      	add	sp, #16
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	40021000 	.word	0x40021000

08004474 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004478:	2101      	movs	r1, #1
 800447a:	2000      	movs	r0, #0
 800447c:	f003 ff8a 	bl	8008394 <HAL_PWR_EnterSLEEPMode>
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	af00      	add	r7, sp, #0
}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2201      	movs	r2, #1
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d10e      	bne.n	80044c4 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2201      	movs	r2, #1
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d107      	bne.n	80044c4 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2201      	movs	r2, #1
 80044ba:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0018      	movs	r0, r3
 80044c0:	f000 f888 	bl	80045d4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2202      	movs	r2, #2
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d10e      	bne.n	80044f0 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2202      	movs	r2, #2
 80044da:	4013      	ands	r3, r2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d107      	bne.n	80044f0 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2202      	movs	r2, #2
 80044e6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 f87a 	bl	80045e4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2204      	movs	r2, #4
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d10e      	bne.n	800451c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2204      	movs	r2, #4
 8004506:	4013      	ands	r3, r2
 8004508:	2b04      	cmp	r3, #4
 800450a:	d107      	bne.n	800451c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2204      	movs	r2, #4
 8004512:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0018      	movs	r0, r3
 8004518:	f000 f86c 	bl	80045f4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2208      	movs	r2, #8
 8004524:	4013      	ands	r3, r2
 8004526:	2b08      	cmp	r3, #8
 8004528:	d10e      	bne.n	8004548 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2208      	movs	r2, #8
 8004532:	4013      	ands	r3, r2
 8004534:	2b08      	cmp	r3, #8
 8004536:	d107      	bne.n	8004548 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0018      	movs	r0, r3
 8004544:	f000 f85e 	bl	8004604 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2210      	movs	r2, #16
 8004550:	4013      	ands	r3, r2
 8004552:	2b10      	cmp	r3, #16
 8004554:	d10e      	bne.n	8004574 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2210      	movs	r2, #16
 800455e:	4013      	ands	r3, r2
 8004560:	2b10      	cmp	r3, #16
 8004562:	d107      	bne.n	8004574 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2210      	movs	r2, #16
 800456a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 f850 	bl	8004614 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2220      	movs	r2, #32
 800457c:	4013      	ands	r3, r2
 800457e:	2b20      	cmp	r3, #32
 8004580:	d10e      	bne.n	80045a0 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2220      	movs	r2, #32
 800458a:	4013      	ands	r3, r2
 800458c:	2b20      	cmp	r3, #32
 800458e:	d107      	bne.n	80045a0 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2220      	movs	r2, #32
 8004596:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0018      	movs	r0, r3
 800459c:	f000 f842 	bl	8004624 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2240      	movs	r2, #64	; 0x40
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d10e      	bne.n	80045cc <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2240      	movs	r2, #64	; 0x40
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d107      	bne.n	80045cc <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2240      	movs	r2, #64	; 0x40
 80045c2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 f834 	bl	8004634 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b002      	add	sp, #8
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b002      	add	sp, #8
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_MspInit+0x3c>)
 800464a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_MspInit+0x3c>)
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	0549      	lsls	r1, r1, #21
 8004652:	430a      	orrs	r2, r1
 8004654:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004656:	f003 fe8f 	bl	8008378 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800465a:	f003 ff5d 	bl	8008518 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_MspInit+0x40>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <HAL_MspInit+0x40>)
 8004664:	2108      	movs	r1, #8
 8004666:	430a      	orrs	r2, r1
 8004668:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_MspInit+0x40>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b05      	ldr	r3, [pc, #20]	; (8004684 <HAL_MspInit+0x40>)
 8004670:	2108      	movs	r1, #8
 8004672:	438a      	bics	r2, r1
 8004674:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004676:	f003 ff41 	bl	80084fc <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	40022000 	.word	0x40022000

08004688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	e7fd      	b.n	8004696 <HardFault_Handler+0x4>

0800469a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046b2:	f001 fc11 	bl	8005ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <EXTI0_1_IRQHandler+0x1c>)
 80046c2:	0018      	movs	r0, r3
 80046c4:	f002 fd9c 	bl	8007200 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80046c8:	4b04      	ldr	r3, [pc, #16]	; (80046dc <EXTI0_1_IRQHandler+0x20>)
 80046ca:	0018      	movs	r0, r3
 80046cc:	f002 fd98 	bl	8007200 <HAL_EXTI_IRQHandler>
#endif
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	20001714 	.word	0x20001714
 80046dc:	2000170c 	.word	0x2000170c

080046e0 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <EXTI4_15_IRQHandler+0x1c>)
 80046f2:	0018      	movs	r0, r3
 80046f4:	f002 fd84 	bl	8007200 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <EXTI4_15_IRQHandler+0x20>)
 80046fa:	0018      	movs	r0, r3
 80046fc:	f002 fd80 	bl	8007200 <HAL_EXTI_IRQHandler>
#endif
}
 8004700:	46c0      	nop			; (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	20001704 	.word	0x20001704
 800470c:	2000171c 	.word	0x2000171c

08004710 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004718:	0018      	movs	r0, r3
 800471a:	f002 fc62 	bl	8006fe2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200015d8 	.word	0x200015d8

08004728 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <USART2_IRQHandler+0x14>)
 800472e:	0018      	movs	r0, r3
 8004730:	f006 f8b4 	bl	800a89c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	200015d8 	.word	0x200015d8

08004740 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <LPTIM1_IRQHandler+0x14>)
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff fea2 	bl	8004490 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	2000153c 	.word	0x2000153c

08004758 <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <RTC_IRQHandler+0x14>)
 800475e:	0018      	movs	r0, r3
 8004760:	f005 fadc 	bl	8009d1c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	2000156c 	.word	0x2000156c

08004770 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004774:	f017 fea4 	bl	801c4c0 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004778:	f000 f8fa 	bl	8004970 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 800477c:	f000 f9c6 	bl	8004b0c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004780:	f016 fffa 	bl	801b778 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <SystemApp_Init+0x44>)
 8004786:	0018      	movs	r0, r3
 8004788:	f017 f8ae 	bl	801b8e8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800478c:	2002      	movs	r0, #2
 800478e:	f017 f8b9 	bl	801b904 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8004792:	f7fe ffb7 	bl	8003704 <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 8004796:	f001 fa5d 	bl	8005c54 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 800479a:	f001 f827 	bl	80057ec <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 800479e:	f000 fa59 	bl	8004c54 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80047a2:	f017 fab1 	bl	801bd08 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80047a6:	2101      	movs	r1, #1
 80047a8:	2001      	movs	r0, #1
 80047aa:	f017 faed 	bl	801bd88 <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	08004925 	.word	0x08004925

080047b8 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80047bc:	f017 fb46 	bl	801be4c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80047ce:	1dfb      	adds	r3, r7, #7
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80047d4:	1d3c      	adds	r4, r7, #4
 80047d6:	f7fe fff9 	bl	80037cc <SYS_GetBatteryLevel>
 80047da:	0003      	movs	r3, r0
 80047dc:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <GetBatteryLevel+0x84>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d903      	bls.n	80047f0 <GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80047e8:	1dfb      	adds	r3, r7, #7
 80047ea:	22fe      	movs	r2, #254	; 0xfe
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e01d      	b.n	800482c <GetBatteryLevel+0x64>
  }
  else if (batteryLevelmV < VDD_MIN)
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	881a      	ldrh	r2, [r3, #0]
 80047f4:	23e1      	movs	r3, #225	; 0xe1
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d203      	bcs.n	8004804 <GetBatteryLevel+0x3c>
  {
    batteryLevel = 0;
 80047fc:	1dfb      	adds	r3, r7, #7
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e013      	b.n	800482c <GetBatteryLevel+0x64>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	4a11      	ldr	r2, [pc, #68]	; (8004850 <GetBatteryLevel+0x88>)
 800480a:	4694      	mov	ip, r2
 800480c:	4463      	add	r3, ip
 800480e:	001a      	movs	r2, r3
 8004810:	0013      	movs	r3, r2
 8004812:	01db      	lsls	r3, r3, #7
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	001a      	movs	r2, r3
 800481a:	2396      	movs	r3, #150	; 0x96
 800481c:	00d9      	lsls	r1, r3, #3
 800481e:	0010      	movs	r0, r2
 8004820:	f7fb fc84 	bl	800012c <__udivsi3>
 8004824:	0003      	movs	r3, r0
 8004826:	001a      	movs	r2, r3
 8004828:	1dfb      	adds	r3, r7, #7
 800482a:	701a      	strb	r2, [r3, #0]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 800482c:	1dfb      	adds	r3, r7, #7
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	4a08      	ldr	r2, [pc, #32]	; (8004854 <GetBatteryLevel+0x8c>)
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	0013      	movs	r3, r2
 8004836:	2201      	movs	r2, #1
 8004838:	2100      	movs	r1, #0
 800483a:	2002      	movs	r0, #2
 800483c:	f016 ffbc 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004840:	1dfb      	adds	r3, r7, #7
 8004842:	781b      	ldrb	r3, [r3, #0]
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b003      	add	sp, #12
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	00000bb8 	.word	0x00000bb8
 8004850:	fffff8f8 	.word	0xfffff8f8
 8004854:	0801e670 	.word	0x0801e670

08004858 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 800485e:	1dbb      	adds	r3, r7, #6
 8004860:	2200      	movs	r2, #0
 8004862:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004864:	f7fe ff5a 	bl	800371c <SYS_GetTemperatureLevel>
 8004868:	1e03      	subs	r3, r0, #0
 800486a:	da00      	bge.n	800486e <GetTemperatureLevel+0x16>
 800486c:	33ff      	adds	r3, #255	; 0xff
 800486e:	121b      	asrs	r3, r3, #8
 8004870:	b21a      	sxth	r2, r3
 8004872:	1dbb      	adds	r3, r7, #6
 8004874:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8004876:	1dbb      	adds	r3, r7, #6
 8004878:	881b      	ldrh	r3, [r3, #0]
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b002      	add	sp, #8
 8004880:	bd80      	pop	{r7, pc}

08004882 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8004882:	b590      	push	{r4, r7, lr}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800488a:	f001 fb37 	bl	8005efc <HAL_GetUIDw0>
 800488e:	0004      	movs	r4, r0
 8004890:	f001 fb48 	bl	8005f24 <HAL_GetUIDw2>
 8004894:	0003      	movs	r3, r0
 8004896:	18e3      	adds	r3, r4, r3
 8004898:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 800489a:	f001 fb39 	bl	8005f10 <HAL_GetUIDw1>
 800489e:	0003      	movs	r3, r0
 80048a0:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	0e1a      	lsrs	r2, r3, #24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3307      	adds	r3, #7
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0c1a      	lsrs	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3306      	adds	r3, #6
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	0a1a      	lsrs	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3305      	adds	r3, #5
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	0e1a      	lsrs	r2, r3, #24
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3303      	adds	r3, #3
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	0c1a      	lsrs	r2, r3, #16
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3302      	adds	r3, #2
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	0a1a      	lsrs	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3301      	adds	r3, #1
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	b005      	add	sp, #20
 8004902:	bd90      	pop	{r4, r7, pc}

08004904 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8004904:	b5b0      	push	{r4, r5, r7, lr}
 8004906:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8004908:	f001 faf8 	bl	8005efc <HAL_GetUIDw0>
 800490c:	0004      	movs	r4, r0
 800490e:	f001 faff 	bl	8005f10 <HAL_GetUIDw1>
 8004912:	0003      	movs	r3, r0
 8004914:	405c      	eors	r4, r3
 8004916:	f001 fb05 	bl	8005f24 <HAL_GetUIDw2>
 800491a:	0003      	movs	r3, r0
 800491c:	4063      	eors	r3, r4
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	bdb0      	pop	{r4, r5, r7, pc}

08004924 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b087      	sub	sp, #28
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800492e:	2408      	movs	r4, #8
 8004930:	193b      	adds	r3, r7, r4
 8004932:	0018      	movs	r0, r3
 8004934:	f017 fd62 	bl	801c3fc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8004938:	0022      	movs	r2, r4
 800493a:	18bb      	adds	r3, r7, r2
 800493c:	6819      	ldr	r1, [r3, #0]
 800493e:	18bb      	adds	r3, r7, r2
 8004940:	2204      	movs	r2, #4
 8004942:	5e9b      	ldrsh	r3, [r3, r2]
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <TimestampNow+0x48>)
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	000b      	movs	r3, r1
 800494c:	2110      	movs	r1, #16
 800494e:	f000 f8a9 	bl	8004aa4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f7fb fbd7 	bl	8000108 <strlen>
 800495a:	0003      	movs	r3, r0
 800495c:	b29a      	uxth	r2, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	b005      	add	sp, #20
 8004968:	bd90      	pop	{r4, r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	0801e67c 	.word	0x0801e67c

08004970 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b08b      	sub	sp, #44	; 0x2c
 8004974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004976:	2414      	movs	r4, #20
 8004978:	193b      	adds	r3, r7, r4
 800497a:	0018      	movs	r0, r3
 800497c:	2314      	movs	r3, #20
 800497e:	001a      	movs	r2, r3
 8004980:	2100      	movs	r1, #0
 8004982:	f019 f802 	bl	801d98a <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004986:	4b38      	ldr	r3, [pc, #224]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498a:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <Gpio_PreInit+0xf8>)
 800498c:	2101      	movs	r1, #1
 800498e:	430a      	orrs	r2, r1
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c
 8004992:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	2201      	movs	r2, #1
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800499e:	4b32      	ldr	r3, [pc, #200]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049a4:	2102      	movs	r1, #2
 80049a6:	430a      	orrs	r2, r1
 80049a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80049aa:	4b2f      	ldr	r3, [pc, #188]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	2202      	movs	r2, #2
 80049b0:	4013      	ands	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b6:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ba:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049bc:	2104      	movs	r1, #4
 80049be:	430a      	orrs	r2, r1
 80049c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80049c2:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	2204      	movs	r2, #4
 80049c8:	4013      	ands	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d2:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	430a      	orrs	r2, r1
 80049d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <Gpio_PreInit+0xf8>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	4013      	ands	r3, r2
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049e6:	193b      	adds	r3, r7, r4
 80049e8:	2203      	movs	r2, #3
 80049ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	193b      	adds	r3, r7, r4
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	4a1d      	ldr	r2, [pc, #116]	; (8004a6c <Gpio_PreInit+0xfc>)
 80049f6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f8:	193a      	adds	r2, r7, r4
 80049fa:	23a0      	movs	r3, #160	; 0xa0
 80049fc:	05db      	lsls	r3, r3, #23
 80049fe:	0011      	movs	r1, r2
 8004a00:	0018      	movs	r0, r3
 8004a02:	f002 fc21 	bl	8007248 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8004a06:	193b      	adds	r3, r7, r4
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <Gpio_PreInit+0x100>)
 8004a0a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a0c:	193b      	adds	r3, r7, r4
 8004a0e:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <Gpio_PreInit+0x104>)
 8004a10:	0019      	movs	r1, r3
 8004a12:	0010      	movs	r0, r2
 8004a14:	f002 fc18 	bl	8007248 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a18:	193b      	adds	r3, r7, r4
 8004a1a:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <Gpio_PreInit+0x108>)
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	0010      	movs	r0, r2
 8004a20:	f002 fc12 	bl	8007248 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004a24:	193b      	adds	r3, r7, r4
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <Gpio_PreInit+0x10c>)
 8004a28:	0019      	movs	r1, r3
 8004a2a:	0010      	movs	r0, r2
 8004a2c:	f002 fc0c 	bl	8007248 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004a36:	2101      	movs	r1, #1
 8004a38:	438a      	bics	r2, r1
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004a42:	2102      	movs	r1, #2
 8004a44:	438a      	bics	r2, r1
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8004a48:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004a4e:	2104      	movs	r1, #4
 8004a50:	438a      	bics	r2, r1
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <Gpio_PreInit+0xf8>)
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	438a      	bics	r2, r1
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b00b      	add	sp, #44	; 0x2c
 8004a66:	bd90      	pop	{r4, r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	00009fff 	.word	0x00009fff
 8004a70:	0000ffff 	.word	0x0000ffff
 8004a74:	50000400 	.word	0x50000400
 8004a78:	50000800 	.word	0x50000800
 8004a7c:	50001c00 	.word	0x50001c00

08004a80 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8004a84:	2101      	movs	r1, #1
 8004a86:	2004      	movs	r0, #4
 8004a88:	f017 f94e 	bl	801bd28 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8004a96:	2100      	movs	r1, #0
 8004a98:	2004      	movs	r0, #4
 8004a9a:	f017 f945 	bl	801bd28 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8004aa4:	b40c      	push	{r2, r3}
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8004ab0:	231c      	movs	r3, #28
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f018 f8c9 	bl	801cc54 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b004      	add	sp, #16
 8004ac8:	bc80      	pop	{r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	b002      	add	sp, #8
 8004ace:	4718      	bx	r3

08004ad0 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8004ada:	0018      	movs	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8004ae6:	f7ff f953 	bl	8003d90 <RTC_IF_GetTimerValue>
 8004aea:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7ff f9b5 	bl	8003e6c <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b08b      	sub	sp, #44	; 0x2c
 8004b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8004b12:	2414      	movs	r4, #20
 8004b14:	193b      	adds	r3, r7, r4
 8004b16:	0018      	movs	r0, r3
 8004b18:	2314      	movs	r3, #20
 8004b1a:	001a      	movs	r2, r3
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	f018 ff34 	bl	801d98a <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 8004b22:	4b4a      	ldr	r3, [pc, #296]	; (8004c4c <DBG_Init+0x140>)
 8004b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b26:	4b49      	ldr	r3, [pc, #292]	; (8004c4c <DBG_Init+0x140>)
 8004b28:	2102      	movs	r1, #2
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b2e:	4b47      	ldr	r3, [pc, #284]	; (8004c4c <DBG_Init+0x140>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 8004b3a:	4b44      	ldr	r3, [pc, #272]	; (8004c4c <DBG_Init+0x140>)
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <DBG_Init+0x140>)
 8004b40:	2102      	movs	r1, #2
 8004b42:	430a      	orrs	r2, r1
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b46:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <DBG_Init+0x140>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 8004b52:	4b3e      	ldr	r3, [pc, #248]	; (8004c4c <DBG_Init+0x140>)
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	4b3d      	ldr	r3, [pc, #244]	; (8004c4c <DBG_Init+0x140>)
 8004b58:	2102      	movs	r1, #2
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b5e:	4b3b      	ldr	r3, [pc, #236]	; (8004c4c <DBG_Init+0x140>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	2202      	movs	r2, #2
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <DBG_Init+0x140>)
 8004b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <DBG_Init+0x140>)
 8004b70:	2102      	movs	r1, #2
 8004b72:	430a      	orrs	r2, r1
 8004b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b76:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <DBG_Init+0x140>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8004b82:	0021      	movs	r1, r4
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	2201      	movs	r2, #1
 8004b88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	2203      	movs	r2, #3
 8004b94:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	2280      	movs	r2, #128	; 0x80
 8004b9a:	0152      	lsls	r2, r2, #5
 8004b9c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 8004b9e:	000c      	movs	r4, r1
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <DBG_Init+0x144>)
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	0010      	movs	r0, r2
 8004ba8:	f002 fb4e 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 8004bac:	0021      	movs	r1, r4
 8004bae:	187b      	adds	r3, r7, r1
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	0192      	lsls	r2, r2, #6
 8004bb4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 8004bb6:	000c      	movs	r4, r1
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <DBG_Init+0x144>)
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	0010      	movs	r0, r2
 8004bc0:	f002 fb42 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 8004bc4:	0021      	movs	r1, r4
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	2280      	movs	r2, #128	; 0x80
 8004bca:	01d2      	lsls	r2, r2, #7
 8004bcc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 8004bce:	000c      	movs	r4, r1
 8004bd0:	187b      	adds	r3, r7, r1
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <DBG_Init+0x144>)
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	0010      	movs	r0, r2
 8004bd8:	f002 fb36 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 8004bdc:	0021      	movs	r1, r4
 8004bde:	187b      	adds	r3, r7, r1
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	0212      	lsls	r2, r2, #8
 8004be4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <DBG_Init+0x144>)
 8004bea:	0019      	movs	r1, r3
 8004bec:	0010      	movs	r0, r2
 8004bee:	f002 fb2b 	bl	8007248 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	015b      	lsls	r3, r3, #5
 8004bf6:	4816      	ldr	r0, [pc, #88]	; (8004c50 <DBG_Init+0x144>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	f002 fda1 	bl	8007742 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	019b      	lsls	r3, r3, #6
 8004c04:	4812      	ldr	r0, [pc, #72]	; (8004c50 <DBG_Init+0x144>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	0019      	movs	r1, r3
 8004c0a:	f002 fd9a 	bl	8007742 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	01db      	lsls	r3, r3, #7
 8004c12:	480f      	ldr	r0, [pc, #60]	; (8004c50 <DBG_Init+0x144>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	0019      	movs	r1, r3
 8004c18:	f002 fd93 	bl	8007742 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	480b      	ldr	r0, [pc, #44]	; (8004c50 <DBG_Init+0x144>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	0019      	movs	r1, r3
 8004c26:	f002 fd8c 	bl	8007742 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <DBG_Init+0x140>)
 8004c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <DBG_Init+0x140>)
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	03c9      	lsls	r1, r1, #15
 8004c34:	430a      	orrs	r2, r1
 8004c36:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8004c38:	f001 f97e 	bl	8005f38 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8004c3c:	f001 f98a 	bl	8005f54 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8004c40:	f001 f996 	bl	8005f70 <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b00b      	add	sp, #44	; 0x2c
 8004c4a:	bd90      	pop	{r4, r7, pc}
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	50000400 	.word	0x50000400

08004c54 <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <MX_USART2_Init+0x48>)
 8004c66:	4a11      	ldr	r2, [pc, #68]	; (8004cac <MX_USART2_Init+0x4c>)
 8004c68:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <MX_USART2_Init+0x48>)
 8004c6c:	22e1      	movs	r2, #225	; 0xe1
 8004c6e:	0252      	lsls	r2, r2, #9
 8004c70:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <MX_USART2_Init+0x48>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <MX_USART2_Init+0x48>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <MX_USART2_Init+0x48>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <MX_USART2_Init+0x48>)
 8004c86:	2208      	movs	r2, #8
 8004c88:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <MX_USART2_Init+0x48>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <MX_USART2_Init+0x48>)
 8004c92:	0018      	movs	r0, r3
 8004c94:	f005 fcc4 	bl	800a620 <HAL_UART_Init>
 8004c98:	1e03      	subs	r3, r0, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_USART2_Init+0x40>
  {
    Error_Handler();
 8004c9c:	f7fe fed2 	bl	8003a44 <Error_Handler>
  }
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	200015d8 	.word	0x200015d8
 8004cac:	40004400 	.word	0x40004400

08004cb0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b095      	sub	sp, #84	; 0x54
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb8:	233c      	movs	r3, #60	; 0x3c
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	2314      	movs	r3, #20
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	f018 fe61 	bl	801d98a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cc8:	2418      	movs	r4, #24
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	0018      	movs	r0, r3
 8004cce:	2324      	movs	r3, #36	; 0x24
 8004cd0:	001a      	movs	r2, r3
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	f018 fe59 	bl	801d98a <memset>
  if (uartHandle->Instance == USART2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a57      	ldr	r2, [pc, #348]	; (8004e3c <HAL_UART_MspInit+0x18c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d000      	beq.n	8004ce4 <HAL_UART_MspInit+0x34>
 8004ce2:	e0a6      	b.n	8004e32 <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8004ce4:	4b56      	ldr	r3, [pc, #344]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce8:	4b55      	ldr	r3, [pc, #340]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004cea:	2101      	movs	r1, #1
 8004cec:	430a      	orrs	r2, r1
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cf0:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d02:	2101      	movs	r1, #1
 8004d04:	430a      	orrs	r2, r1
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d08:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 8004d14:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d18:	4b49      	ldr	r3, [pc, #292]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	0289      	lsls	r1, r1, #10
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d26:	4b46      	ldr	r3, [pc, #280]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d28:	2101      	movs	r1, #1
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d2e:	4b44      	ldr	r3, [pc, #272]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	2201      	movs	r2, #1
 8004d34:	4013      	ands	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d3a:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3e:	4b40      	ldr	r3, [pc, #256]	; (8004e40 <HAL_UART_MspInit+0x190>)
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	0289      	lsls	r1, r1, #10
 8004d44:	430a      	orrs	r2, r1
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d48:	193b      	adds	r3, r7, r4
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	2204      	movs	r2, #4
 8004d52:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d54:	193b      	adds	r3, r7, r4
 8004d56:	0018      	movs	r0, r3
 8004d58:	f004 f9e4 	bl	8009124 <HAL_RCCEx_PeriphCLKConfig>
 8004d5c:	1e03      	subs	r3, r0, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8004d60:	f7fe fe70 	bl	8003a44 <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8004d64:	243c      	movs	r4, #60	; 0x3c
 8004d66:	193b      	adds	r3, r7, r4
 8004d68:	2204      	movs	r2, #4
 8004d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	193b      	adds	r3, r7, r4
 8004d6e:	2202      	movs	r2, #2
 8004d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	2200      	movs	r2, #0
 8004d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004d78:	193b      	adds	r3, r7, r4
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004d7e:	193b      	adds	r3, r7, r4
 8004d80:	2204      	movs	r2, #4
 8004d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8004d84:	193a      	adds	r2, r7, r4
 8004d86:	23a0      	movs	r3, #160	; 0xa0
 8004d88:	05db      	lsls	r3, r3, #23
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f002 fa5b 	bl	8007248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8004d92:	0021      	movs	r1, r4
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	2208      	movs	r2, #8
 8004d98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9a:	187b      	adds	r3, r7, r1
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	2200      	movs	r2, #0
 8004da4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	2203      	movs	r2, #3
 8004daa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8004dac:	187b      	adds	r3, r7, r1
 8004dae:	2204      	movs	r2, #4
 8004db0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004db2:	187a      	adds	r2, r7, r1
 8004db4:	23a0      	movs	r3, #160	; 0xa0
 8004db6:	05db      	lsls	r3, r3, #23
 8004db8:	0011      	movs	r1, r2
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f002 fa44 	bl	8007248 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8004dc0:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004dc2:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <HAL_UART_MspInit+0x198>)
 8004dc4:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8004dc6:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004dc8:	2204      	movs	r2, #4
 8004dca:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004dce:	2210      	movs	r2, #16
 8004dd0:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8004dea:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8004df0:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f001 ff2f 	bl	8006c5c <HAL_DMA_Init>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8004e02:	f7fe fe1f 	bl	8003a44 <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a0e      	ldr	r2, [pc, #56]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004e0a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <HAL_UART_MspInit+0x194>)
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8004e12:	2201      	movs	r2, #1
 8004e14:	2100      	movs	r1, #0
 8004e16:	200b      	movs	r0, #11
 8004e18:	f001 feea 	bl	8006bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8004e1c:	200b      	movs	r0, #11
 8004e1e:	f001 fefc 	bl	8006c1a <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8004e22:	2201      	movs	r2, #1
 8004e24:	2100      	movs	r1, #0
 8004e26:	201c      	movs	r0, #28
 8004e28:	f001 fee2 	bl	8006bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8004e2c:	201c      	movs	r0, #28
 8004e2e:	f001 fef4 	bl	8006c1a <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b015      	add	sp, #84	; 0x54
 8004e38:	bd90      	pop	{r4, r7, pc}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	40004400 	.word	0x40004400
 8004e40:	40021000 	.word	0x40021000
 8004e44:	20001590 	.word	0x20001590
 8004e48:	40020080 	.word	0x40020080

08004e4c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a0d      	ldr	r2, [pc, #52]	; (8004e90 <HAL_UART_MspDeInit+0x44>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d113      	bne.n	8004e86 <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <HAL_UART_MspDeInit+0x48>)
 8004e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_UART_MspDeInit+0x48>)
 8004e64:	490c      	ldr	r1, [pc, #48]	; (8004e98 <HAL_UART_MspDeInit+0x4c>)
 8004e66:	400a      	ands	r2, r1
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8004e6a:	23a0      	movs	r3, #160	; 0xa0
 8004e6c:	05db      	lsls	r3, r3, #23
 8004e6e:	210c      	movs	r1, #12
 8004e70:	0018      	movs	r0, r3
 8004e72:	f002 fb67 	bl	8007544 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f001 ff66 	bl	8006d4c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004e80:	201c      	movs	r0, #28
 8004e82:	f001 feda 	bl	8006c3a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b002      	add	sp, #8
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	40004400 	.word	0x40004400
 8004e94:	40021000 	.word	0x40021000
 8004e98:	fffdffff 	.word	0xfffdffff

08004e9c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <vcom_Init+0x20>)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 8004eaa:	f7fe fd33 	bl	8003914 <MX_DMA_Init>
  MX_USART2_Init();
 8004eae:	f7ff fed7 	bl	8004c60 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 8004eb2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000404 	.word	0x20000404

08004ec0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <vcom_DeInit+0x34>)
 8004ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <vcom_DeInit+0x34>)
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	0289      	lsls	r1, r1, #10
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8004ed2:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <vcom_DeInit+0x34>)
 8004ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <vcom_DeInit+0x34>)
 8004ed8:	4907      	ldr	r1, [pc, #28]	; (8004ef8 <vcom_DeInit+0x38>)
 8004eda:	400a      	ands	r2, r1
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <vcom_DeInit+0x3c>)
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7ff ffb3 	bl	8004e4c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004ee6:	200b      	movs	r0, #11
 8004ee8:	f001 fea7 	bl	8006c3a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8004eec:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8004eee:	0018      	movs	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	fffdffff 	.word	0xfffdffff
 8004efc:	200015d8 	.word	0x200015d8

08004f00 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	000a      	movs	r2, r1
 8004f0a:	1cbb      	adds	r3, r7, #2
 8004f0c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8004f0e:	1cbb      	adds	r3, r7, #2
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <vcom_Trace_DMA+0x28>)
 8004f16:	0018      	movs	r0, r3
 8004f18:	f005 fc2e 	bl	800a778 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8004f1c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b002      	add	sp, #8
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	200015d8 	.word	0x200015d8

08004f2c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <vcom_ReceiveInit+0x80>)
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8004f3a:	2108      	movs	r1, #8
 8004f3c:	187b      	adds	r3, r7, r1
 8004f3e:	2280      	movs	r2, #128	; 0x80
 8004f40:	0392      	lsls	r2, r2, #14
 8004f42:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	481a      	ldr	r0, [pc, #104]	; (8004fb0 <vcom_ReceiveInit+0x84>)
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	f006 fd6c 	bl	800ba28 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <vcom_ReceiveInit+0x84>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	025b      	lsls	r3, r3, #9
 8004f5c:	401a      	ands	r2, r3
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	025b      	lsls	r3, r3, #9
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d0f5      	beq.n	8004f52 <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <vcom_ReceiveInit+0x84>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	03db      	lsls	r3, r3, #15
 8004f72:	401a      	ands	r2, r3
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	03db      	lsls	r3, r3, #15
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d1f5      	bne.n	8004f68 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <vcom_ReceiveInit+0x84>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <vcom_ReceiveInit+0x84>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	03c9      	lsls	r1, r1, #15
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <vcom_ReceiveInit+0x84>)
 8004f90:	0018      	movs	r0, r3
 8004f92:	f006 fdaf 	bl	800baf4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8004f96:	4907      	ldr	r1, [pc, #28]	; (8004fb4 <vcom_ReceiveInit+0x88>)
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <vcom_ReceiveInit+0x84>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f005 fb93 	bl	800a6c8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8004fa2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b004      	add	sp, #16
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000408 	.word	0x20000408
 8004fb0:	200015d8 	.word	0x200015d8
 8004fb4:	2000165c 	.word	0x2000165c

08004fb8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <HAL_UART_TxCpltCallback+0x18>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000404 	.word	0x20000404

08004fd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <HAL_UART_RxCpltCallback+0x3c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_UART_RxCpltCallback+0x26>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2280      	movs	r2, #128	; 0x80
 8004fe8:	589b      	ldr	r3, [r3, r2]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d105      	bne.n	8004ffa <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_UART_RxCpltCallback+0x3c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4808      	ldr	r0, [pc, #32]	; (8005014 <HAL_UART_RxCpltCallback+0x40>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8004ffa:	4906      	ldr	r1, [pc, #24]	; (8005014 <HAL_UART_RxCpltCallback+0x40>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	0018      	movs	r0, r3
 8005002:	f005 fb61 	bl	800a6c8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	46bd      	mov	sp, r7
 800500a:	b002      	add	sp, #8
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	20000408 	.word	0x20000408
 8005014:	2000165c 	.word	0x2000165c

08005018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005018:	480d      	ldr	r0, [pc, #52]	; (8005050 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800501a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800501c:	480d      	ldr	r0, [pc, #52]	; (8005054 <LoopForever+0x6>)
  ldr r1, =_edata
 800501e:	490e      	ldr	r1, [pc, #56]	; (8005058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005020:	4a0e      	ldr	r2, [pc, #56]	; (800505c <LoopForever+0xe>)
  movs r3, #0
 8005022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005024:	e002      	b.n	800502c <LoopCopyDataInit>

08005026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800502a:	3304      	adds	r3, #4

0800502c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800502c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800502e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005030:	d3f9      	bcc.n	8005026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005032:	4a0b      	ldr	r2, [pc, #44]	; (8005060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005034:	4c0b      	ldr	r4, [pc, #44]	; (8005064 <LoopForever+0x16>)
  movs r3, #0
 8005036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005038:	e001      	b.n	800503e <LoopFillZerobss>

0800503a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800503a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800503c:	3204      	adds	r2, #4

0800503e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800503e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005040:	d3fb      	bcc.n	800503a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005042:	f000 feeb 	bl	8005e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005046:	f018 fc73 	bl	801d930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800504a:	f7fe fc81 	bl	8003950 <main>

0800504e <LoopForever>:

LoopForever:
    b LoopForever
 800504e:	e7fe      	b.n	800504e <LoopForever>
   ldr   r0, =_estack
 8005050:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005058:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 800505c:	0801f6f8 	.word	0x0801f6f8
  ldr r2, =_sbss
 8005060:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8005064:	200017fc 	.word	0x200017fc

08005068 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005068:	e7fe      	b.n	8005068 <ADC1_COMP_IRQHandler>
	...

0800506c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <_sbrk+0x50>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <_sbrk+0x16>
		heap_end = &end;
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <_sbrk+0x50>)
 800507e:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <_sbrk+0x54>)
 8005080:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005082:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <_sbrk+0x50>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <_sbrk+0x50>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	18d2      	adds	r2, r2, r3
 8005090:	466b      	mov	r3, sp
 8005092:	429a      	cmp	r2, r3
 8005094:	d907      	bls.n	80050a6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005096:	f018 fc45 	bl	801d924 <__errno>
 800509a:	0003      	movs	r3, r0
 800509c:	220c      	movs	r2, #12
 800509e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80050a0:	2301      	movs	r3, #1
 80050a2:	425b      	negs	r3, r3
 80050a4:	e006      	b.n	80050b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <_sbrk+0x50>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	18d2      	adds	r2, r2, r3
 80050ae:	4b03      	ldr	r3, [pc, #12]	; (80050bc <_sbrk+0x50>)
 80050b0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b004      	add	sp, #16
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000410 	.word	0x20000410
 80050c0:	20001800 	.word	0x20001800

080050c4 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <BSP_SPI1_Init+0x40>)
 80050d0:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <BSP_SPI1_Init+0x44>)
 80050d2:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <BSP_SPI1_Init+0x40>)
 80050d6:	0018      	movs	r0, r3
 80050d8:	f005 f9c1 	bl	800a45e <HAL_SPI_GetState>
 80050dc:	1e03      	subs	r3, r0, #0
 80050de:	d10c      	bne.n	80050fa <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <BSP_SPI1_Init+0x40>)
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 f87e 	bl	80051e4 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <BSP_SPI1_Init+0x40>)
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 f830 	bl	8005150 <MX_SPI1_Init>
 80050f0:	1e03      	subs	r3, r0, #0
 80050f2:	d002      	beq.n	80050fa <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80050f4:	2308      	movs	r3, #8
 80050f6:	425b      	negs	r3, r3
 80050f8:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80050fa:	687b      	ldr	r3, [r7, #4]
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b002      	add	sp, #8
 8005102:	bd80      	pop	{r7, pc}
 8005104:	200016ac 	.word	0x200016ac
 8005108:	40013000 	.word	0x40013000

0800510c <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	1dbb      	adds	r3, r7, #6
 8005118:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800511a:	2306      	movs	r3, #6
 800511c:	425b      	negs	r3, r3
 800511e:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8005120:	1dbb      	adds	r3, r7, #6
 8005122:	881c      	ldrh	r4, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	4808      	ldr	r0, [pc, #32]	; (800514c <BSP_SPI1_SendRecv+0x40>)
 800512a:	23fa      	movs	r3, #250	; 0xfa
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	0023      	movs	r3, r4
 8005132:	f004 ffd9 	bl	800a0e8 <HAL_SPI_TransmitReceive>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d102      	bne.n	8005140 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 800513a:	1dbb      	adds	r3, r7, #6
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005140:	697b      	ldr	r3, [r7, #20]
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b007      	add	sp, #28
 8005148:	bd90      	pop	{r4, r7, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	200016ac 	.word	0x200016ac

08005150 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005158:	240f      	movs	r4, #15
 800515a:	193b      	adds	r3, r7, r4
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <MX_SPI1_Init+0x8c>)
 8005164:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2282      	movs	r2, #130	; 0x82
 800516a:	0052      	lsls	r2, r2, #1
 800516c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 800518e:	f003 ffb3 	bl	80090f8 <HAL_RCC_GetPCLK2Freq>
 8005192:	0003      	movs	r3, r0
 8005194:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <MX_SPI1_Init+0x90>)
 8005196:	0011      	movs	r1, r2
 8005198:	0018      	movs	r0, r3
 800519a:	f000 f867 	bl	800526c <SPI_GetPrescaler>
 800519e:	0002      	movs	r2, r0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2207      	movs	r2, #7
 80051ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	0018      	movs	r0, r3
 80051c0:	f004 fef6 	bl	8009fb0 <HAL_SPI_Init>
 80051c4:	1e03      	subs	r3, r0, #0
 80051c6:	d002      	beq.n	80051ce <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 80051c8:	193b      	adds	r3, r7, r4
 80051ca:	2201      	movs	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80051ce:	230f      	movs	r3, #15
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	781b      	ldrb	r3, [r3, #0]
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b005      	add	sp, #20
 80051da:	bd90      	pop	{r4, r7, pc}
 80051dc:	40013000 	.word	0x40013000
 80051e0:	00989680 	.word	0x00989680

080051e4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <SPI1_MspInit+0x80>)
 80051ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <SPI1_MspInit+0x80>)
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	0149      	lsls	r1, r1, #5
 80051f6:	430a      	orrs	r2, r1
 80051f8:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fa:	240c      	movs	r4, #12
 80051fc:	193b      	adds	r3, r7, r4
 80051fe:	2202      	movs	r2, #2
 8005200:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	193b      	adds	r3, r7, r4
 8005204:	2200      	movs	r2, #0
 8005206:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005208:	193b      	adds	r3, r7, r4
 800520a:	2203      	movs	r2, #3
 800520c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800520e:	193b      	adds	r3, r7, r4
 8005210:	2200      	movs	r2, #0
 8005212:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8005214:	193b      	adds	r3, r7, r4
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800521a:	193a      	adds	r2, r7, r4
 800521c:	23a0      	movs	r3, #160	; 0xa0
 800521e:	05db      	lsls	r3, r3, #23
 8005220:	0011      	movs	r1, r2
 8005222:	0018      	movs	r0, r3
 8005224:	f002 f810 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8005228:	193b      	adds	r3, r7, r4
 800522a:	2200      	movs	r2, #0
 800522c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800522e:	193b      	adds	r3, r7, r4
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005234:	193a      	adds	r2, r7, r4
 8005236:	23a0      	movs	r3, #160	; 0xa0
 8005238:	05db      	lsls	r3, r3, #23
 800523a:	0011      	movs	r1, r2
 800523c:	0018      	movs	r0, r3
 800523e:	f002 f803 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8005242:	193b      	adds	r3, r7, r4
 8005244:	2200      	movs	r2, #0
 8005246:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8005248:	193b      	adds	r3, r7, r4
 800524a:	2208      	movs	r2, #8
 800524c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800524e:	193b      	adds	r3, r7, r4
 8005250:	4a05      	ldr	r2, [pc, #20]	; (8005268 <SPI1_MspInit+0x84>)
 8005252:	0019      	movs	r1, r3
 8005254:	0010      	movs	r0, r2
 8005256:	f001 fff7 	bl	8007248 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b009      	add	sp, #36	; 0x24
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	40021000 	.word	0x40021000
 8005268:	50000400 	.word	0x50000400

0800526c <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8005282:	e00d      	b.n	80052a0 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <SPI_GetPrescaler+0x4c>)
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	0092      	lsls	r2, r2, #2
 800528a:	58d3      	ldr	r3, [r2, r3]
 800528c:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	3301      	adds	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b07      	cmp	r3, #7
 8005298:	d807      	bhi.n	80052aa <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d8ed      	bhi.n	8005284 <SPI_GetPrescaler+0x18>
 80052a8:	e000      	b.n	80052ac <SPI_GetPrescaler+0x40>
      break;
 80052aa:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 80052ac:	68fb      	ldr	r3, [r7, #12]
}
 80052ae:	0018      	movs	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b006      	add	sp, #24
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	0801e698 	.word	0x0801e698

080052bc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80052c6:	4b19      	ldr	r3, [pc, #100]	; (800532c <BSP_I2C1_Init+0x70>)
 80052c8:	4a19      	ldr	r2, [pc, #100]	; (8005330 <BSP_I2C1_Init+0x74>)
 80052ca:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <BSP_I2C1_Init+0x78>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	1c59      	adds	r1, r3, #1
 80052d2:	4a18      	ldr	r2, [pc, #96]	; (8005334 <BSP_I2C1_Init+0x78>)
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d123      	bne.n	8005322 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80052da:	4b14      	ldr	r3, [pc, #80]	; (800532c <BSP_I2C1_Init+0x70>)
 80052dc:	0018      	movs	r0, r3
 80052de:	f002 fd69 	bl	8007db4 <HAL_I2C_GetState>
 80052e2:	1e03      	subs	r3, r0, #0
 80052e4:	d11d      	bne.n	8005322 <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <BSP_I2C1_Init+0x70>)
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f873 	bl	80053d4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d116      	bne.n	8005322 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 80052f4:	4b0d      	ldr	r3, [pc, #52]	; (800532c <BSP_I2C1_Init+0x70>)
 80052f6:	0018      	movs	r0, r3
 80052f8:	f000 f81e 	bl	8005338 <MX_I2C1_Init>
 80052fc:	1e03      	subs	r3, r0, #0
 80052fe:	d003      	beq.n	8005308 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005300:	2308      	movs	r3, #8
 8005302:	425b      	negs	r3, r3
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	e00c      	b.n	8005322 <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <BSP_I2C1_Init+0x70>)
 800530a:	2100      	movs	r1, #0
 800530c:	0018      	movs	r0, r3
 800530e:	f002 ff9b 	bl	8008248 <HAL_I2CEx_ConfigAnalogFilter>
 8005312:	1e03      	subs	r3, r0, #0
 8005314:	d003      	beq.n	800531e <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005316:	2308      	movs	r3, #8
 8005318:	425b      	negs	r3, r3
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	e001      	b.n	8005322 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005322:	687b      	ldr	r3, [r7, #4]
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20001660 	.word	0x20001660
 8005330:	40005400 	.word	0x40005400
 8005334:	20000414 	.word	0x20000414

08005338 <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005340:	240f      	movs	r4, #15
 8005342:	193b      	adds	r3, r7, r4
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a20      	ldr	r2, [pc, #128]	; (80053cc <MX_I2C1_Init+0x94>)
 800534c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <MX_I2C1_Init+0x98>)
 8005352:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	0018      	movs	r0, r3
 8005382:	f002 fa17 	bl	80077b4 <HAL_I2C_Init>
 8005386:	1e03      	subs	r3, r0, #0
 8005388:	d002      	beq.n	8005390 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 800538a:	193b      	adds	r3, r7, r4
 800538c:	2201      	movs	r2, #1
 800538e:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2100      	movs	r1, #0
 8005394:	0018      	movs	r0, r3
 8005396:	f002 ff57 	bl	8008248 <HAL_I2CEx_ConfigAnalogFilter>
 800539a:	1e03      	subs	r3, r0, #0
 800539c:	d003      	beq.n	80053a6 <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 800539e:	230f      	movs	r3, #15
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2100      	movs	r1, #0
 80053aa:	0018      	movs	r0, r3
 80053ac:	f002 ff98 	bl	80082e0 <HAL_I2CEx_ConfigDigitalFilter>
 80053b0:	1e03      	subs	r3, r0, #0
 80053b2:	d003      	beq.n	80053bc <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 80053b4:	230f      	movs	r3, #15
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80053bc:	230f      	movs	r3, #15
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	781b      	ldrb	r3, [r3, #0]
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b005      	add	sp, #20
 80053c8:	bd90      	pop	{r4, r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	40005400 	.word	0x40005400
 80053d0:	00707cbb 	.word	0x00707cbb

080053d4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b089      	sub	sp, #36	; 0x24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053dc:	4b22      	ldr	r3, [pc, #136]	; (8005468 <I2C1_MspInit+0x94>)
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <I2C1_MspInit+0x94>)
 80053e2:	2102      	movs	r1, #2
 80053e4:	430a      	orrs	r2, r1
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80053e8:	4b1f      	ldr	r3, [pc, #124]	; (8005468 <I2C1_MspInit+0x94>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	2202      	movs	r2, #2
 80053ee:	4013      	ands	r3, r2
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80053f4:	210c      	movs	r1, #12
 80053f6:	187b      	adds	r3, r7, r1
 80053f8:	2280      	movs	r2, #128	; 0x80
 80053fa:	0052      	lsls	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053fe:	000c      	movs	r4, r1
 8005400:	193b      	adds	r3, r7, r4
 8005402:	2212      	movs	r2, #18
 8005404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005406:	193b      	adds	r3, r7, r4
 8005408:	2201      	movs	r2, #1
 800540a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540c:	193b      	adds	r3, r7, r4
 800540e:	2203      	movs	r2, #3
 8005410:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8005412:	193b      	adds	r3, r7, r4
 8005414:	2204      	movs	r2, #4
 8005416:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005418:	193b      	adds	r3, r7, r4
 800541a:	4a14      	ldr	r2, [pc, #80]	; (800546c <I2C1_MspInit+0x98>)
 800541c:	0019      	movs	r1, r3
 800541e:	0010      	movs	r0, r2
 8005420:	f001 ff12 	bl	8007248 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8005424:	0021      	movs	r1, r4
 8005426:	187b      	adds	r3, r7, r1
 8005428:	2280      	movs	r2, #128	; 0x80
 800542a:	0092      	lsls	r2, r2, #2
 800542c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800542e:	187b      	adds	r3, r7, r1
 8005430:	2212      	movs	r2, #18
 8005432:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005434:	187b      	adds	r3, r7, r1
 8005436:	2201      	movs	r2, #1
 8005438:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800543a:	187b      	adds	r3, r7, r1
 800543c:	2203      	movs	r2, #3
 800543e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8005440:	187b      	adds	r3, r7, r1
 8005442:	2204      	movs	r2, #4
 8005444:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005446:	187b      	adds	r3, r7, r1
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <I2C1_MspInit+0x98>)
 800544a:	0019      	movs	r1, r3
 800544c:	0010      	movs	r0, r2
 800544e:	f001 fefb 	bl	8007248 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <I2C1_MspInit+0x94>)
 8005454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005456:	4b04      	ldr	r3, [pc, #16]	; (8005468 <I2C1_MspInit+0x94>)
 8005458:	2180      	movs	r1, #128	; 0x80
 800545a:	0389      	lsls	r1, r1, #14
 800545c:	430a      	orrs	r2, r1
 800545e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	b009      	add	sp, #36	; 0x24
 8005466:	bd90      	pop	{r4, r7, pc}
 8005468:	40021000 	.word	0x40021000
 800546c:	50000400 	.word	0x50000400

08005470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	0002      	movs	r2, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	1dfb      	adds	r3, r7, #7
 800547c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800547e:	1dfb      	adds	r3, r7, #7
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b7f      	cmp	r3, #127	; 0x7f
 8005484:	d828      	bhi.n	80054d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005486:	4a2f      	ldr	r2, [pc, #188]	; (8005544 <__NVIC_SetPriority+0xd4>)
 8005488:	1dfb      	adds	r3, r7, #7
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b25b      	sxtb	r3, r3
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	33c0      	adds	r3, #192	; 0xc0
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	589b      	ldr	r3, [r3, r2]
 8005496:	1dfa      	adds	r2, r7, #7
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	0011      	movs	r1, r2
 800549c:	2203      	movs	r2, #3
 800549e:	400a      	ands	r2, r1
 80054a0:	00d2      	lsls	r2, r2, #3
 80054a2:	21ff      	movs	r1, #255	; 0xff
 80054a4:	4091      	lsls	r1, r2
 80054a6:	000a      	movs	r2, r1
 80054a8:	43d2      	mvns	r2, r2
 80054aa:	401a      	ands	r2, r3
 80054ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	401a      	ands	r2, r3
 80054b6:	1dfb      	adds	r3, r7, #7
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	0018      	movs	r0, r3
 80054bc:	2303      	movs	r3, #3
 80054be:	4003      	ands	r3, r0
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054c4:	481f      	ldr	r0, [pc, #124]	; (8005544 <__NVIC_SetPriority+0xd4>)
 80054c6:	1dfb      	adds	r3, r7, #7
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	430a      	orrs	r2, r1
 80054d0:	33c0      	adds	r3, #192	; 0xc0
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80054d6:	e031      	b.n	800553c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <__NVIC_SetPriority+0xd8>)
 80054da:	1dfb      	adds	r3, r7, #7
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	0019      	movs	r1, r3
 80054e0:	230f      	movs	r3, #15
 80054e2:	400b      	ands	r3, r1
 80054e4:	3b08      	subs	r3, #8
 80054e6:	089b      	lsrs	r3, r3, #2
 80054e8:	3306      	adds	r3, #6
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	3304      	adds	r3, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1dfa      	adds	r2, r7, #7
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	0011      	movs	r1, r2
 80054f8:	2203      	movs	r2, #3
 80054fa:	400a      	ands	r2, r1
 80054fc:	00d2      	lsls	r2, r2, #3
 80054fe:	21ff      	movs	r1, #255	; 0xff
 8005500:	4091      	lsls	r1, r2
 8005502:	000a      	movs	r2, r1
 8005504:	43d2      	mvns	r2, r2
 8005506:	401a      	ands	r2, r3
 8005508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	401a      	ands	r2, r3
 8005512:	1dfb      	adds	r3, r7, #7
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	0018      	movs	r0, r3
 8005518:	2303      	movs	r3, #3
 800551a:	4003      	ands	r3, r0
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005520:	4809      	ldr	r0, [pc, #36]	; (8005548 <__NVIC_SetPriority+0xd8>)
 8005522:	1dfb      	adds	r3, r7, #7
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	001c      	movs	r4, r3
 8005528:	230f      	movs	r3, #15
 800552a:	4023      	ands	r3, r4
 800552c:	3b08      	subs	r3, #8
 800552e:	089b      	lsrs	r3, r3, #2
 8005530:	430a      	orrs	r2, r1
 8005532:	3306      	adds	r3, #6
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	18c3      	adds	r3, r0, r3
 8005538:	3304      	adds	r3, #4
 800553a:	601a      	str	r2, [r3, #0]
}
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b003      	add	sp, #12
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	e000e100 	.word	0xe000e100
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	; 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	0002      	movs	r2, r0
 8005554:	1dfb      	adds	r3, r7, #7
 8005556:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005558:	1dfb      	adds	r3, r7, #7
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b03      	cmp	r3, #3
 800555e:	d02f      	beq.n	80055c0 <BSP_LED_Init+0x74>
 8005560:	dc3a      	bgt.n	80055d8 <BSP_LED_Init+0x8c>
 8005562:	2b02      	cmp	r3, #2
 8005564:	d01f      	beq.n	80055a6 <BSP_LED_Init+0x5a>
 8005566:	dc37      	bgt.n	80055d8 <BSP_LED_Init+0x8c>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <BSP_LED_Init+0x26>
 800556c:	2b01      	cmp	r3, #1
 800556e:	d00d      	beq.n	800558c <BSP_LED_Init+0x40>
 8005570:	e032      	b.n	80055d8 <BSP_LED_Init+0x8c>
 8005572:	4b2a      	ldr	r3, [pc, #168]	; (800561c <BSP_LED_Init+0xd0>)
 8005574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <BSP_LED_Init+0xd0>)
 8005578:	2102      	movs	r1, #2
 800557a:	430a      	orrs	r2, r1
 800557c:	62da      	str	r2, [r3, #44]	; 0x2c
 800557e:	4b27      	ldr	r3, [pc, #156]	; (800561c <BSP_LED_Init+0xd0>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	2202      	movs	r2, #2
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	e025      	b.n	80055d8 <BSP_LED_Init+0x8c>
 800558c:	4b23      	ldr	r3, [pc, #140]	; (800561c <BSP_LED_Init+0xd0>)
 800558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005590:	4b22      	ldr	r3, [pc, #136]	; (800561c <BSP_LED_Init+0xd0>)
 8005592:	2101      	movs	r1, #1
 8005594:	430a      	orrs	r2, r1
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c
 8005598:	4b20      	ldr	r3, [pc, #128]	; (800561c <BSP_LED_Init+0xd0>)
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	2201      	movs	r2, #1
 800559e:	4013      	ands	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	e018      	b.n	80055d8 <BSP_LED_Init+0x8c>
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <BSP_LED_Init+0xd0>)
 80055a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055aa:	4b1c      	ldr	r3, [pc, #112]	; (800561c <BSP_LED_Init+0xd0>)
 80055ac:	2102      	movs	r1, #2
 80055ae:	430a      	orrs	r2, r1
 80055b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80055b2:	4b1a      	ldr	r3, [pc, #104]	; (800561c <BSP_LED_Init+0xd0>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	2202      	movs	r2, #2
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	e00b      	b.n	80055d8 <BSP_LED_Init+0x8c>
 80055c0:	4b16      	ldr	r3, [pc, #88]	; (800561c <BSP_LED_Init+0xd0>)
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4b15      	ldr	r3, [pc, #84]	; (800561c <BSP_LED_Init+0xd0>)
 80055c6:	2102      	movs	r1, #2
 80055c8:	430a      	orrs	r2, r1
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80055cc:	4b13      	ldr	r3, [pc, #76]	; (800561c <BSP_LED_Init+0xd0>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	2202      	movs	r2, #2
 80055d2:	4013      	ands	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80055da:	1dfb      	adds	r3, r7, #7
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <BSP_LED_Init+0xd4>)
 80055e0:	0052      	lsls	r2, r2, #1
 80055e2:	5ad3      	ldrh	r3, [r2, r3]
 80055e4:	001a      	movs	r2, r3
 80055e6:	211c      	movs	r1, #28
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	2201      	movs	r2, #1
 80055f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	187b      	adds	r3, r7, r1
 80055f4:	2200      	movs	r2, #0
 80055f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f8:	187b      	adds	r3, r7, r1
 80055fa:	2203      	movs	r2, #3
 80055fc:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80055fe:	1dfb      	adds	r3, r7, #7
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <BSP_LED_Init+0xd8>)
 8005604:	0092      	lsls	r2, r2, #2
 8005606:	58d3      	ldr	r3, [r2, r3]
 8005608:	187a      	adds	r2, r7, r1
 800560a:	0011      	movs	r1, r2
 800560c:	0018      	movs	r0, r3
 800560e:	f001 fe1b 	bl	8007248 <HAL_GPIO_Init>
}
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	46bd      	mov	sp, r7
 8005616:	b00c      	add	sp, #48	; 0x30
 8005618:	bd80      	pop	{r7, pc}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	40021000 	.word	0x40021000
 8005620:	0801e6b8 	.word	0x0801e6b8
 8005624:	2000004c 	.word	0x2000004c

08005628 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	0002      	movs	r2, r0
 8005630:	1dfb      	adds	r3, r7, #7
 8005632:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8005634:	1dfb      	adds	r3, r7, #7
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	4b07      	ldr	r3, [pc, #28]	; (8005658 <BSP_LED_On+0x30>)
 800563a:	0092      	lsls	r2, r2, #2
 800563c:	58d0      	ldr	r0, [r2, r3]
 800563e:	1dfb      	adds	r3, r7, #7
 8005640:	781a      	ldrb	r2, [r3, #0]
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <BSP_LED_On+0x34>)
 8005644:	0052      	lsls	r2, r2, #1
 8005646:	5ad3      	ldrh	r3, [r2, r3]
 8005648:	2201      	movs	r2, #1
 800564a:	0019      	movs	r1, r3
 800564c:	f002 f879 	bl	8007742 <HAL_GPIO_WritePin>
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}
 8005658:	2000004c 	.word	0x2000004c
 800565c:	0801e6b8 	.word	0x0801e6b8

08005660 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	0002      	movs	r2, r0
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800566c:	1dfb      	adds	r3, r7, #7
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <BSP_LED_Off+0x30>)
 8005672:	0092      	lsls	r2, r2, #2
 8005674:	58d0      	ldr	r0, [r2, r3]
 8005676:	1dfb      	adds	r3, r7, #7
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <BSP_LED_Off+0x34>)
 800567c:	0052      	lsls	r2, r2, #1
 800567e:	5ad3      	ldrh	r3, [r2, r3]
 8005680:	2200      	movs	r2, #0
 8005682:	0019      	movs	r1, r3
 8005684:	f002 f85d 	bl	8007742 <HAL_GPIO_WritePin>
}
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	b002      	add	sp, #8
 800568e:	bd80      	pop	{r7, pc}
 8005690:	2000004c 	.word	0x2000004c
 8005694:	0801e6b8 	.word	0x0801e6b8

08005698 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	0002      	movs	r2, r0
 80056a0:	1dfb      	adds	r3, r7, #7
 80056a2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80056a4:	1dfb      	adds	r3, r7, #7
 80056a6:	781a      	ldrb	r2, [r3, #0]
 80056a8:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <BSP_LED_Toggle+0x30>)
 80056aa:	0092      	lsls	r2, r2, #2
 80056ac:	58d0      	ldr	r0, [r2, r3]
 80056ae:	1dfb      	adds	r3, r7, #7
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <BSP_LED_Toggle+0x34>)
 80056b4:	0052      	lsls	r2, r2, #1
 80056b6:	5ad3      	ldrh	r3, [r2, r3]
 80056b8:	0019      	movs	r1, r3
 80056ba:	f002 f85f 	bl	800777c <HAL_GPIO_TogglePin>
}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b002      	add	sp, #8
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	2000004c 	.word	0x2000004c
 80056cc:	0801e6b8 	.word	0x0801e6b8

080056d0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	0002      	movs	r2, r0
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	1dbb      	adds	r3, r7, #6
 80056de:	1c0a      	adds	r2, r1, #0
 80056e0:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80056e2:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <BSP_PB_Init+0xc0>)
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <BSP_PB_Init+0xc0>)
 80056e8:	2102      	movs	r1, #2
 80056ea:	430a      	orrs	r2, r1
 80056ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80056ee:	4b28      	ldr	r3, [pc, #160]	; (8005790 <BSP_PB_Init+0xc0>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	2202      	movs	r2, #2
 80056f4:	4013      	ands	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fa:	4b25      	ldr	r3, [pc, #148]	; (8005790 <BSP_PB_Init+0xc0>)
 80056fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <BSP_PB_Init+0xc0>)
 8005700:	2101      	movs	r1, #1
 8005702:	430a      	orrs	r2, r1
 8005704:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005706:	1dbb      	adds	r3, r7, #6
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d117      	bne.n	800573e <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800570e:	2304      	movs	r3, #4
 8005710:	001a      	movs	r2, r3
 8005712:	210c      	movs	r1, #12
 8005714:	187b      	adds	r3, r7, r1
 8005716:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005718:	187b      	adds	r3, r7, r1
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800571e:	187b      	adds	r3, r7, r1
 8005720:	2202      	movs	r2, #2
 8005722:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005724:	187b      	adds	r3, r7, r1
 8005726:	2203      	movs	r2, #3
 8005728:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800572a:	1dfb      	adds	r3, r7, #7
 800572c:	781a      	ldrb	r2, [r3, #0]
 800572e:	4b19      	ldr	r3, [pc, #100]	; (8005794 <BSP_PB_Init+0xc4>)
 8005730:	0092      	lsls	r2, r2, #2
 8005732:	58d3      	ldr	r3, [r2, r3]
 8005734:	187a      	adds	r2, r7, r1
 8005736:	0011      	movs	r1, r2
 8005738:	0018      	movs	r0, r3
 800573a:	f001 fd85 	bl	8007248 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 800573e:	1dbb      	adds	r3, r7, #6
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d11f      	bne.n	8005786 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005746:	2304      	movs	r3, #4
 8005748:	001a      	movs	r2, r3
 800574a:	210c      	movs	r1, #12
 800574c:	187b      	adds	r3, r7, r1
 800574e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005750:	187b      	adds	r3, r7, r1
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005756:	187b      	adds	r3, r7, r1
 8005758:	4a0f      	ldr	r2, [pc, #60]	; (8005798 <BSP_PB_Init+0xc8>)
 800575a:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800575c:	1dfb      	adds	r3, r7, #7
 800575e:	781a      	ldrb	r2, [r3, #0]
 8005760:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <BSP_PB_Init+0xc4>)
 8005762:	0092      	lsls	r2, r2, #2
 8005764:	58d3      	ldr	r3, [r2, r3]
 8005766:	187a      	adds	r2, r7, r1
 8005768:	0011      	movs	r1, r2
 800576a:	0018      	movs	r0, r3
 800576c:	f001 fd6c 	bl	8007248 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 8005770:	2306      	movs	r3, #6
 8005772:	b25b      	sxtb	r3, r3
 8005774:	2103      	movs	r1, #3
 8005776:	0018      	movs	r0, r3
 8005778:	f7ff fe7a 	bl	8005470 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800577c:	2306      	movs	r3, #6
 800577e:	b25b      	sxtb	r3, r3
 8005780:	0018      	movs	r0, r3
 8005782:	f001 fa4a 	bl	8006c1a <HAL_NVIC_EnableIRQ>
  }
}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	46bd      	mov	sp, r7
 800578a:	b008      	add	sp, #32
 800578c:	bd80      	pop	{r7, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	40021000 	.word	0x40021000
 8005794:	2000005c 	.word	0x2000005c
 8005798:	10110000 	.word	0x10110000

0800579c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 80057a0:	2305      	movs	r3, #5
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	0002      	movs	r2, r0
 80057b0:	1dfb      	adds	r3, r7, #7
 80057b2:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 80057b4:	1dfb      	adds	r3, r7, #7
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d10b      	bne.n	80057d4 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	0159      	lsls	r1, r3, #5
 80057c0:	23a0      	movs	r3, #160	; 0xa0
 80057c2:	05db      	lsls	r3, r3, #23
 80057c4:	2201      	movs	r2, #1
 80057c6:	0018      	movs	r0, r3
 80057c8:	f001 ffbb 	bl	8007742 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 80057cc:	2005      	movs	r0, #5
 80057ce:	f7ff f990 	bl	8004af2 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 80057d2:	e007      	b.n	80057e4 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	0159      	lsls	r1, r3, #5
 80057d8:	23a0      	movs	r3, #160	; 0xa0
 80057da:	05db      	lsls	r3, r3, #23
 80057dc:	2200      	movs	r2, #0
 80057de:	0018      	movs	r0, r3
 80057e0:	f001 ffaf 	bl	8007742 <HAL_GPIO_WritePin>
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b002      	add	sp, #8
 80057ea:	bd80      	pop	{r7, pc}

080057ec <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b0a7      	sub	sp, #156	; 0x9c
 80057f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 80057f2:	2480      	movs	r4, #128	; 0x80
 80057f4:	193b      	adds	r3, r7, r4
 80057f6:	0018      	movs	r0, r3
 80057f8:	2314      	movs	r3, #20
 80057fa:	001a      	movs	r2, r3
 80057fc:	2100      	movs	r1, #0
 80057fe:	f018 f8c4 	bl	801d98a <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8005802:	4b78      	ldr	r3, [pc, #480]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	4b77      	ldr	r3, [pc, #476]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005808:	2102      	movs	r1, #2
 800580a:	430a      	orrs	r2, r1
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c
 800580e:	4b75      	ldr	r3, [pc, #468]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	2202      	movs	r2, #2
 8005814:	4013      	ands	r3, r2
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800581a:	4b72      	ldr	r3, [pc, #456]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800581c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581e:	4b71      	ldr	r3, [pc, #452]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005820:	2102      	movs	r1, #2
 8005822:	430a      	orrs	r2, r1
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c
 8005826:	4b6f      	ldr	r3, [pc, #444]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	2202      	movs	r2, #2
 800582c:	4013      	ands	r3, r2
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8005832:	4b6c      	ldr	r3, [pc, #432]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005836:	4b6b      	ldr	r3, [pc, #428]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005838:	2102      	movs	r1, #2
 800583a:	430a      	orrs	r2, r1
 800583c:	62da      	str	r2, [r3, #44]	; 0x2c
 800583e:	4b69      	ldr	r3, [pc, #420]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	2202      	movs	r2, #2
 8005844:	4013      	ands	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 800584a:	4b66      	ldr	r3, [pc, #408]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	4b65      	ldr	r3, [pc, #404]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005850:	2104      	movs	r1, #4
 8005852:	430a      	orrs	r2, r1
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c
 8005856:	4b63      	ldr	r3, [pc, #396]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	2204      	movs	r2, #4
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 8005862:	193b      	adds	r3, r7, r4
 8005864:	2202      	movs	r2, #2
 8005866:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005868:	193b      	adds	r3, r7, r4
 800586a:	2203      	movs	r2, #3
 800586c:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	2294      	movs	r2, #148	; 0x94
 8005872:	18ba      	adds	r2, r7, r2
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e020      	b.n	80058ba <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005878:	4b5b      	ldr	r3, [pc, #364]	; (80059e8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 800587a:	2194      	movs	r1, #148	; 0x94
 800587c:	187a      	adds	r2, r7, r1
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	0092      	lsls	r2, r2, #2
 8005882:	58d2      	ldr	r2, [r2, r3]
 8005884:	2080      	movs	r0, #128	; 0x80
 8005886:	183b      	adds	r3, r7, r0
 8005888:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800588a:	4b58      	ldr	r3, [pc, #352]	; (80059ec <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 800588c:	187a      	adds	r2, r7, r1
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	0052      	lsls	r2, r2, #1
 8005892:	5ad3      	ldrh	r3, [r2, r3]
 8005894:	001a      	movs	r2, r3
 8005896:	183b      	adds	r3, r7, r0
 8005898:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800589a:	4b55      	ldr	r3, [pc, #340]	; (80059f0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 800589c:	000c      	movs	r4, r1
 800589e:	187a      	adds	r2, r7, r1
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	0092      	lsls	r2, r2, #2
 80058a4:	58d3      	ldr	r3, [r2, r3]
 80058a6:	183a      	adds	r2, r7, r0
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f001 fccc 	bl	8007248 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80058b0:	193b      	adds	r3, r7, r4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	193a      	adds	r2, r7, r4
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	2394      	movs	r3, #148	; 0x94
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d9d9      	bls.n	8005878 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 80058c4:	2328      	movs	r3, #40	; 0x28
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	0018      	movs	r0, r3
 80058ca:	f000 fa07 	bl	8005cdc <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 80058ce:	2480      	movs	r4, #128	; 0x80
 80058d0:	193b      	adds	r3, r7, r4
 80058d2:	2280      	movs	r2, #128	; 0x80
 80058d4:	0212      	lsls	r2, r2, #8
 80058d6:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058d8:	193b      	adds	r3, r7, r4
 80058da:	2201      	movs	r2, #1
 80058dc:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 80058de:	193b      	adds	r3, r7, r4
 80058e0:	2201      	movs	r2, #1
 80058e2:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 80058e4:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80058e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e8:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80058ea:	2101      	movs	r1, #1
 80058ec:	430a      	orrs	r2, r1
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80058f0:	4b3c      	ldr	r3, [pc, #240]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	2201      	movs	r2, #1
 80058f6:	4013      	ands	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80058fc:	193a      	adds	r2, r7, r4
 80058fe:	23a0      	movs	r3, #160	; 0xa0
 8005900:	05db      	lsls	r3, r3, #23
 8005902:	0011      	movs	r1, r2
 8005904:	0018      	movs	r0, r3
 8005906:	f001 fc9f 	bl	8007248 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	0219      	lsls	r1, r3, #8
 800590e:	23a0      	movs	r3, #160	; 0xa0
 8005910:	05db      	lsls	r3, r3, #23
 8005912:	2201      	movs	r2, #1
 8005914:	0018      	movs	r0, r3
 8005916:	f001 ff14 	bl	8007742 <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 800591a:	4b32      	ldr	r3, [pc, #200]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800591c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005920:	2101      	movs	r1, #1
 8005922:	430a      	orrs	r2, r1
 8005924:	62da      	str	r2, [r3, #44]	; 0x2c
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	2201      	movs	r2, #1
 800592c:	4013      	ands	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8005932:	4b2c      	ldr	r3, [pc, #176]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005936:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005938:	2101      	movs	r1, #1
 800593a:	430a      	orrs	r2, r1
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c
 800593e:	4b29      	ldr	r3, [pc, #164]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	2201      	movs	r2, #1
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 800594a:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800594c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594e:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005950:	2104      	movs	r1, #4
 8005952:	430a      	orrs	r2, r1
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c
 8005956:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	2204      	movs	r2, #4
 800595c:	4013      	ands	r3, r2
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8005962:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005966:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005968:	2104      	movs	r1, #4
 800596a:	430a      	orrs	r2, r1
 800596c:	62da      	str	r2, [r3, #44]	; 0x2c
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	2204      	movs	r2, #4
 8005974:	4013      	ands	r3, r2
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800597a:	193b      	adds	r3, r7, r4
 800597c:	2201      	movs	r2, #1
 800597e:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005980:	193b      	adds	r3, r7, r4
 8005982:	2200      	movs	r2, #0
 8005984:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005986:	193b      	adds	r3, r7, r4
 8005988:	2203      	movs	r2, #3
 800598a:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 800598c:	193b      	adds	r3, r7, r4
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	0152      	lsls	r2, r2, #5
 8005992:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8005994:	193a      	adds	r2, r7, r4
 8005996:	23a0      	movs	r3, #160	; 0xa0
 8005998:	05db      	lsls	r3, r3, #23
 800599a:	0011      	movs	r1, r2
 800599c:	0018      	movs	r0, r3
 800599e:	f001 fc53 	bl	8007248 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 80059a2:	193b      	adds	r3, r7, r4
 80059a4:	2202      	movs	r2, #2
 80059a6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80059a8:	193a      	adds	r2, r7, r4
 80059aa:	23a0      	movs	r3, #160	; 0xa0
 80059ac:	05db      	lsls	r3, r3, #23
 80059ae:	0011      	movs	r1, r2
 80059b0:	0018      	movs	r0, r3
 80059b2:	f001 fc49 	bl	8007248 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 80059b6:	193b      	adds	r3, r7, r4
 80059b8:	2202      	movs	r2, #2
 80059ba:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80059bc:	193b      	adds	r3, r7, r4
 80059be:	4a0d      	ldr	r2, [pc, #52]	; (80059f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 80059c0:	0019      	movs	r1, r3
 80059c2:	0010      	movs	r0, r2
 80059c4:	f001 fc40 	bl	8007248 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 80059c8:	193b      	adds	r3, r7, r4
 80059ca:	2204      	movs	r2, #4
 80059cc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 80059ce:	193b      	adds	r3, r7, r4
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 80059d2:	0019      	movs	r1, r3
 80059d4:	0010      	movs	r0, r2
 80059d6:	f001 fc37 	bl	8007248 <HAL_GPIO_Init>
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46bd      	mov	sp, r7
 80059de:	b027      	add	sp, #156	; 0x9c
 80059e0:	bd90      	pop	{r4, r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	40021000 	.word	0x40021000
 80059e8:	0801e6f4 	.word	0x0801e6f4
 80059ec:	0801e6ec 	.word	0x0801e6ec
 80059f0:	20000060 	.word	0x20000060
 80059f4:	50000800 	.word	0x50000800

080059f8 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 80059fe:	003b      	movs	r3, r7
 8005a00:	0018      	movs	r0, r3
 8005a02:	2314      	movs	r3, #20
 8005a04:	001a      	movs	r2, r3
 8005a06:	2100      	movs	r1, #0
 8005a08:	f017 ffbf 	bl	801d98a <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 8005a0c:	003b      	movs	r3, r7
 8005a0e:	2202      	movs	r2, #2
 8005a10:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e018      	b.n	8005a4a <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005a18:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	0092      	lsls	r2, r2, #2
 8005a1e:	58d2      	ldr	r2, [r2, r3]
 8005a20:	003b      	movs	r3, r7
 8005a22:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005a24:	4b0e      	ldr	r3, [pc, #56]	; (8005a60 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	0052      	lsls	r2, r2, #1
 8005a2a:	5ad3      	ldrh	r3, [r2, r3]
 8005a2c:	001a      	movs	r2, r3
 8005a2e:	003b      	movs	r3, r7
 8005a30:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005a32:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	0092      	lsls	r2, r2, #2
 8005a38:	58d3      	ldr	r3, [r2, r3]
 8005a3a:	003a      	movs	r2, r7
 8005a3c:	0011      	movs	r1, r2
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f001 fc02 	bl	8007248 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	3301      	adds	r3, #1
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d9e3      	bls.n	8005a18 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 8005a50:	f000 f9a4 	bl	8005d9c <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b006      	add	sp, #24
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	0801e6f4 	.word	0x0801e6f4
 8005a60:	0801e6ec 	.word	0x0801e6ec
 8005a64:	20000060 	.word	0x20000060

08005a68 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a70:	f3ef 8310 	mrs	r3, PRIMASK
 8005a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a76:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 8005a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a7a:	b672      	cpsid	i
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e02f      	b.n	8005ae4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	00da      	lsls	r2, r3, #3
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005a8a:	18d0      	adds	r0, r2, r3
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	0092      	lsls	r2, r2, #2
 8005a92:	58d3      	ldr	r3, [r2, r3]
 8005a94:	0019      	movs	r1, r3
 8005a96:	f001 fba1 	bl	80071dc <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	00da      	lsls	r2, r3, #3
 8005a9e:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005aa0:	18d0      	adds	r0, r2, r3
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	18d3      	adds	r3, r2, r3
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	001a      	movs	r2, r3
 8005aae:	2100      	movs	r1, #0
 8005ab0:	f001 fb73 	bl	800719a <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8005ab4:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	18d3      	adds	r3, r2, r3
 8005aba:	2000      	movs	r0, #0
 8005abc:	5618      	ldrsb	r0, [r3, r0]
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	58d3      	ldr	r3, [r2, r3]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	0019      	movs	r1, r3
 8005aca:	f001 f891 	bl	8006bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8005ace:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	18d3      	adds	r3, r2, r3
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	b25b      	sxtb	r3, r3
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f001 f89e 	bl	8006c1a <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d9cc      	bls.n	8005a84 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f383 8810 	msr	PRIMASK, r3
}
 8005af4:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b006      	add	sp, #24
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	20001704 	.word	0x20001704
 8005b04:	0801e6c8 	.word	0x0801e6c8
 8005b08:	0801e6e8 	.word	0x0801e6e8
 8005b0c:	0801e6d8 	.word	0x0801e6d8

08005b10 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b002      	add	sp, #8
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	0002      	movs	r2, r0
 8005b2c:	1dfb      	adds	r3, r7, #7
 8005b2e:	701a      	strb	r2, [r3, #0]

  switch (state)
 8005b30:	1dfb      	adds	r3, r7, #7
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d82e      	bhi.n	8005b96 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 8005b38:	009a      	lsls	r2, r3, #2
 8005b3a:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 8005b3c:	18d3      	adds	r3, r2, r3
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8005b42:	23a0      	movs	r3, #160	; 0xa0
 8005b44:	05db      	lsls	r3, r3, #23
 8005b46:	2201      	movs	r2, #1
 8005b48:	2102      	movs	r1, #2
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f001 fdf9 	bl	8007742 <HAL_GPIO_WritePin>
      break;
 8005b50:	e036      	b.n	8005bc0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8005b52:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	2104      	movs	r1, #4
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f001 fdf2 	bl	8007742 <HAL_GPIO_WritePin>
      break;
 8005b5e:	e02f      	b.n	8005bc0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8005b60:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	2102      	movs	r1, #2
 8005b66:	0018      	movs	r0, r3
 8005b68:	f001 fdeb 	bl	8007742 <HAL_GPIO_WritePin>
      break;
 8005b6c:	e028      	b.n	8005bc0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8005b6e:	23a0      	movs	r3, #160	; 0xa0
 8005b70:	05db      	lsls	r3, r3, #23
 8005b72:	2200      	movs	r2, #0
 8005b74:	2102      	movs	r1, #2
 8005b76:	0018      	movs	r0, r3
 8005b78:	f001 fde3 	bl	8007742 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2104      	movs	r1, #4
 8005b82:	0018      	movs	r0, r3
 8005b84:	f001 fddd 	bl	8007742 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005b88:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f001 fdd7 	bl	8007742 <HAL_GPIO_WritePin>
      break;
 8005b94:	e014      	b.n	8005bc0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8005b96:	23a0      	movs	r3, #160	; 0xa0
 8005b98:	05db      	lsls	r3, r3, #23
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f001 fdcf 	bl	8007742 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2104      	movs	r1, #4
 8005baa:	0018      	movs	r0, r3
 8005bac:	f001 fdc9 	bl	8007742 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f001 fdc3 	bl	8007742 <HAL_GPIO_WritePin>

      break;
 8005bbc:	e000      	b.n	8005bc0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 8005bbe:	46c0      	nop			; (mov r8, r8)
  }
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	0801e704 	.word	0x0801e704
 8005bcc:	50000800 	.word	0x50000800

08005bd0 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8005bd8:	2301      	movs	r3, #1
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b002      	add	sp, #8
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	0018      	movs	r0, r3
 8005bee:	2314      	movs	r3, #20
 8005bf0:	001a      	movs	r2, r3
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	f017 fec9 	bl	801d98a <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bf8:	1d3b      	adds	r3, r7, #4
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	2203      	movs	r2, #3
 8005c08:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8005c0a:	1d3b      	adds	r3, r7, #4
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005c10:	1d3b      	adds	r3, r7, #4
 8005c12:	4a0f      	ldr	r2, [pc, #60]	; (8005c50 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005c14:	0019      	movs	r1, r3
 8005c16:	0010      	movs	r0, r2
 8005c18:	f001 fb16 	bl	8007248 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2101      	movs	r1, #1
 8005c22:	0018      	movs	r0, r3
 8005c24:	f001 fd8d 	bl	8007742 <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 8005c28:	2001      	movs	r0, #1
 8005c2a:	f7fe ff62 	bl	8004af2 <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 8005c2e:	1d3b      	adds	r3, r7, #4
 8005c30:	2200      	movs	r2, #0
 8005c32:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005c34:	1d3b      	adds	r3, r7, #4
 8005c36:	4a06      	ldr	r2, [pc, #24]	; (8005c50 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005c38:	0019      	movs	r1, r3
 8005c3a:	0010      	movs	r0, r2
 8005c3c:	f001 fb04 	bl	8007248 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 8005c40:	2006      	movs	r0, #6
 8005c42:	f7fe ff56 	bl	8004af2 <HAL_Delay>
}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b006      	add	sp, #24
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	50000800 	.word	0x50000800

08005c54 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 8005c58:	f7ff fa34 	bl	80050c4 <BSP_SPI1_Init>
}
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 8005c62:	b590      	push	{r4, r7, lr}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	0002      	movs	r2, r0
 8005c6a:	1dbb      	adds	r3, r7, #6
 8005c6c:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8005c6e:	240e      	movs	r4, #14
 8005c70:	1939      	adds	r1, r7, r4
 8005c72:	1dbb      	adds	r3, r7, #6
 8005c74:	2201      	movs	r2, #1
 8005c76:	0018      	movs	r0, r3
 8005c78:	f7ff fa48 	bl	800510c <BSP_SPI1_SendRecv>

  return rxData;
 8005c7c:	193b      	adds	r3, r7, r4
 8005c7e:	881b      	ldrh	r3, [r3, #0]
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b005      	add	sp, #20
 8005c86:	bd90      	pop	{r4, r7, pc}

08005c88 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  if (state == 0)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 8005c96:	2380      	movs	r3, #128	; 0x80
 8005c98:	0219      	lsls	r1, r3, #8
 8005c9a:	23a0      	movs	r3, #160	; 0xa0
 8005c9c:	05db      	lsls	r3, r3, #23
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f001 fd4e 	bl	8007742 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 8005ca6:	e007      	b.n	8005cb8 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	0219      	lsls	r1, r3, #8
 8005cac:	23a0      	movs	r3, #160	; 0xa0
 8005cae:	05db      	lsls	r3, r3, #23
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f001 fd45 	bl	8007742 <HAL_GPIO_WritePin>
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f001 fd1d 	bl	8007708 <HAL_GPIO_ReadPin>
 8005cce:	0003      	movs	r3, r0
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	50000400 	.word	0x50000400

08005cdc <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 8005cdc:	b590      	push	{r4, r7, lr}
 8005cde:	b08b      	sub	sp, #44	; 0x2c
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8005ce4:	4b2b      	ldr	r3, [pc, #172]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4b2a      	ldr	r3, [pc, #168]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005cea:	2102      	movs	r1, #2
 8005cec:	430a      	orrs	r2, r1
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cf0:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8005cfc:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005d02:	2101      	movs	r1, #1
 8005d04:	430a      	orrs	r2, r1
 8005d06:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d08:	4b22      	ldr	r3, [pc, #136]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8005d14:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d20:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	2201      	movs	r2, #1
 8005d26:	4013      	ands	r3, r2
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d2c:	2414      	movs	r4, #20
 8005d2e:	193b      	adds	r3, r7, r4
 8005d30:	2202      	movs	r2, #2
 8005d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005d34:	193b      	adds	r3, r7, r4
 8005d36:	2202      	movs	r2, #2
 8005d38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d3a:	193b      	adds	r3, r7, r4
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8005d40:	193b      	adds	r3, r7, r4
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8005d46:	193b      	adds	r3, r7, r4
 8005d48:	2280      	movs	r2, #128	; 0x80
 8005d4a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8005d4c:	193a      	adds	r2, r7, r4
 8005d4e:	23a0      	movs	r3, #160	; 0xa0
 8005d50:	05db      	lsls	r3, r3, #23
 8005d52:	0011      	movs	r1, r2
 8005d54:	0018      	movs	r0, r3
 8005d56:	f001 fa77 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8005d5a:	193b      	adds	r3, r7, r4
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8005d60:	193b      	adds	r3, r7, r4
 8005d62:	2240      	movs	r2, #64	; 0x40
 8005d64:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005d66:	193a      	adds	r2, r7, r4
 8005d68:	23a0      	movs	r3, #160	; 0xa0
 8005d6a:	05db      	lsls	r3, r3, #23
 8005d6c:	0011      	movs	r1, r2
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f001 fa6a 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8005d74:	193b      	adds	r3, r7, r4
 8005d76:	2200      	movs	r2, #0
 8005d78:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8005d7a:	193b      	adds	r3, r7, r4
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8005d80:	193b      	adds	r3, r7, r4
 8005d82:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 8005d84:	0019      	movs	r1, r3
 8005d86:	0010      	movs	r0, r2
 8005d88:	f001 fa5e 	bl	8007248 <HAL_GPIO_Init>
}
 8005d8c:	46c0      	nop			; (mov r8, r8)
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b00b      	add	sp, #44	; 0x2c
 8005d92:	bd90      	pop	{r4, r7, pc}
 8005d94:	40021000 	.word	0x40021000
 8005d98:	50000400 	.word	0x50000400

08005d9c <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	2201      	movs	r2, #1
 8005da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	2202      	movs	r2, #2
 8005dac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8005db4:	1d3a      	adds	r2, r7, #4
 8005db6:	23a0      	movs	r3, #160	; 0xa0
 8005db8:	05db      	lsls	r3, r3, #23
 8005dba:	0011      	movs	r1, r2
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f001 fa43 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8005dc2:	1d3b      	adds	r3, r7, #4
 8005dc4:	2240      	movs	r2, #64	; 0x40
 8005dc6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005dc8:	1d3a      	adds	r2, r7, #4
 8005dca:	23a0      	movs	r3, #160	; 0xa0
 8005dcc:	05db      	lsls	r3, r3, #23
 8005dce:	0011      	movs	r1, r2
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f001 fa39 	bl	8007248 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	2208      	movs	r2, #8
 8005dda:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8005de0:	0019      	movs	r1, r3
 8005de2:	0010      	movs	r0, r2
 8005de4:	f001 fa30 	bl	8007248 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8005de8:	23a0      	movs	r3, #160	; 0xa0
 8005dea:	05db      	lsls	r3, r3, #23
 8005dec:	2200      	movs	r2, #0
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	0018      	movs	r0, r3
 8005df2:	f001 fca6 	bl	8007742 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8005df6:	23a0      	movs	r3, #160	; 0xa0
 8005df8:	05db      	lsls	r3, r3, #23
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2140      	movs	r1, #64	; 0x40
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f001 fc9f 	bl	8007742 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	2108      	movs	r1, #8
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f001 fc99 	bl	8007742 <HAL_GPIO_WritePin>

}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b006      	add	sp, #24
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	50000400 	.word	0x50000400

08005e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005e20:	4b17      	ldr	r3, [pc, #92]	; (8005e80 <SystemInit+0x64>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <SystemInit+0x64>)
 8005e26:	2180      	movs	r1, #128	; 0x80
 8005e28:	0049      	lsls	r1, r1, #1
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8005e2e:	4b14      	ldr	r3, [pc, #80]	; (8005e80 <SystemInit+0x64>)
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <SystemInit+0x64>)
 8005e34:	4913      	ldr	r1, [pc, #76]	; (8005e84 <SystemInit+0x68>)
 8005e36:	400a      	ands	r2, r1
 8005e38:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005e3a:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <SystemInit+0x64>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <SystemInit+0x64>)
 8005e40:	4911      	ldr	r1, [pc, #68]	; (8005e88 <SystemInit+0x6c>)
 8005e42:	400a      	ands	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005e46:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <SystemInit+0x64>)
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <SystemInit+0x64>)
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	438a      	bics	r2, r1
 8005e50:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <SystemInit+0x64>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <SystemInit+0x64>)
 8005e58:	490c      	ldr	r1, [pc, #48]	; (8005e8c <SystemInit+0x70>)
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <SystemInit+0x64>)
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <SystemInit+0x64>)
 8005e64:	490a      	ldr	r1, [pc, #40]	; (8005e90 <SystemInit+0x74>)
 8005e66:	400a      	ands	r2, r1
 8005e68:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <SystemInit+0x64>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <SystemInit+0x78>)
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	0512      	lsls	r2, r2, #20
 8005e76:	609a      	str	r2, [r3, #8]
#endif
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	40021000 	.word	0x40021000
 8005e84:	88ff400c 	.word	0x88ff400c
 8005e88:	fef6fff6 	.word	0xfef6fff6
 8005e8c:	fffbffff 	.word	0xfffbffff
 8005e90:	ff02ffff 	.word	0xff02ffff
 8005e94:	e000ed00 	.word	0xe000ed00

08005e98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e9e:	1dfb      	adds	r3, r7, #7
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_Init+0x3c>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_Init+0x3c>)
 8005eaa:	2102      	movs	r1, #2
 8005eac:	430a      	orrs	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005eb0:	2003      	movs	r0, #3
 8005eb2:	f7fe fe0d 	bl	8004ad0 <HAL_InitTick>
 8005eb6:	1e03      	subs	r3, r0, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005eba:	1dfb      	adds	r3, r7, #7
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	e001      	b.n	8005ec6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ec2:	f7fe fbbf 	bl	8004644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ec6:	1dfb      	adds	r3, r7, #7
 8005ec8:	781b      	ldrb	r3, [r3, #0]
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	40022000 	.word	0x40022000

08005ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <HAL_IncTick+0x1c>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	001a      	movs	r2, r3
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <HAL_IncTick+0x20>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	18d2      	adds	r2, r2, r3
 8005ee8:	4b03      	ldr	r3, [pc, #12]	; (8005ef8 <HAL_IncTick+0x20>)
 8005eea:	601a      	str	r2, [r3, #0]
}
 8005eec:	46c0      	nop			; (mov r8, r8)
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	20000078 	.word	0x20000078
 8005ef8:	20001724 	.word	0x20001724

08005efc <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <HAL_GetUIDw0+0x10>)
 8005f02:	681b      	ldr	r3, [r3, #0]
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	1ff80050 	.word	0x1ff80050

08005f10 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8005f14:	4b02      	ldr	r3, [pc, #8]	; (8005f20 <HAL_GetUIDw1+0x10>)
 8005f16:	681b      	ldr	r3, [r3, #0]
}
 8005f18:	0018      	movs	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	1ff80054 	.word	0x1ff80054

08005f24 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8005f28:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <HAL_GetUIDw2+0x10>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	1ff80064 	.word	0x1ff80064

08005f38 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005f42:	2101      	movs	r1, #1
 8005f44:	430a      	orrs	r2, r1
 8005f46:	605a      	str	r2, [r3, #4]
}
 8005f48:	46c0      	nop			; (mov r8, r8)
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	40015800 	.word	0x40015800

08005f54 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8005f5e:	2102      	movs	r1, #2
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
}
 8005f64:	46c0      	nop			; (mov r8, r8)
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	40015800 	.word	0x40015800

08005f70 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005f7a:	2104      	movs	r1, #4
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
}
 8005f80:	46c0      	nop			; (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	40015800 	.word	0x40015800

08005f8c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e159      	b.n	8006252 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2250      	movs	r2, #80	; 0x50
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f7fd fb66 	bl	8003688 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d005      	beq.n	8005fd4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2204      	movs	r2, #4
 8005fd0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005fd2:	d00b      	beq.n	8005fec <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	2210      	movs	r2, #16
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2250      	movs	r2, #80	; 0x50
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e132      	b.n	8006252 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff0:	4a9a      	ldr	r2, [pc, #616]	; (800625c <HAL_ADC_Init+0x2d0>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2203      	movs	r2, #3
 8006004:	4013      	ands	r3, r2
 8006006:	2b01      	cmp	r3, #1
 8006008:	d108      	bne.n	800601c <HAL_ADC_Init+0x90>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2201      	movs	r2, #1
 8006012:	4013      	ands	r3, r2
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_ADC_Init+0x90>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_ADC_Init+0x92>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d149      	bne.n	80060b6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	23c0      	movs	r3, #192	; 0xc0
 8006028:	061b      	lsls	r3, r3, #24
 800602a:	429a      	cmp	r2, r3
 800602c:	d00b      	beq.n	8006046 <HAL_ADC_Init+0xba>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	05db      	lsls	r3, r3, #23
 8006036:	429a      	cmp	r2, r3
 8006038:	d005      	beq.n	8006046 <HAL_ADC_Init+0xba>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	061b      	lsls	r3, r3, #24
 8006042:	429a      	cmp	r2, r3
 8006044:	d111      	bne.n	800606a <HAL_ADC_Init+0xde>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	0092      	lsls	r2, r2, #2
 8006052:	0892      	lsrs	r2, r2, #2
 8006054:	611a      	str	r2, [r3, #16]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6919      	ldr	r1, [r3, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	611a      	str	r2, [r3, #16]
 8006068:	e014      	b.n	8006094 <HAL_ADC_Init+0x108>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	0092      	lsls	r2, r2, #2
 8006076:	0892      	lsrs	r2, r2, #2
 8006078:	611a      	str	r2, [r3, #16]
 800607a:	4b79      	ldr	r3, [pc, #484]	; (8006260 <HAL_ADC_Init+0x2d4>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b78      	ldr	r3, [pc, #480]	; (8006260 <HAL_ADC_Init+0x2d4>)
 8006080:	4978      	ldr	r1, [pc, #480]	; (8006264 <HAL_ADC_Init+0x2d8>)
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	4b76      	ldr	r3, [pc, #472]	; (8006260 <HAL_ADC_Init+0x2d4>)
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	4b74      	ldr	r3, [pc, #464]	; (8006260 <HAL_ADC_Init+0x2d4>)
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2118      	movs	r1, #24
 80060a0:	438a      	bics	r2, r1
 80060a2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68d9      	ldr	r1, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80060b6:	4b6a      	ldr	r3, [pc, #424]	; (8006260 <HAL_ADC_Init+0x2d4>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b69      	ldr	r3, [pc, #420]	; (8006260 <HAL_ADC_Init+0x2d4>)
 80060bc:	496a      	ldr	r1, [pc, #424]	; (8006268 <HAL_ADC_Init+0x2dc>)
 80060be:	400a      	ands	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80060c2:	4b67      	ldr	r3, [pc, #412]	; (8006260 <HAL_ADC_Init+0x2d4>)
 80060c4:	6819      	ldr	r1, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ca:	065a      	lsls	r2, r3, #25
 80060cc:	4b64      	ldr	r3, [pc, #400]	; (8006260 <HAL_ADC_Init+0x2d4>)
 80060ce:	430a      	orrs	r2, r1
 80060d0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	2380      	movs	r3, #128	; 0x80
 80060da:	055b      	lsls	r3, r3, #21
 80060dc:	4013      	ands	r3, r2
 80060de:	d108      	bne.n	80060f2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	0549      	lsls	r1, r1, #21
 80060ee:	430a      	orrs	r2, r1
 80060f0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	495b      	ldr	r1, [pc, #364]	; (800626c <HAL_ADC_Init+0x2e0>)
 80060fe:	400a      	ands	r2, r1
 8006100:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68d9      	ldr	r1, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d101      	bne.n	8006118 <HAL_ADC_Init+0x18c>
 8006114:	2304      	movs	r3, #4
 8006116:	e000      	b.n	800611a <HAL_ADC_Init+0x18e>
 8006118:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800611a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2020      	movs	r0, #32
 8006120:	5c1b      	ldrb	r3, [r3, r0]
 8006122:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006124:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	202c      	movs	r0, #44	; 0x2c
 800612a:	5c1b      	ldrb	r3, [r3, r0]
 800612c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800612e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006134:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800613c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006144:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006152:	23c2      	movs	r3, #194	; 0xc2
 8006154:	33ff      	adds	r3, #255	; 0xff
 8006156:	429a      	cmp	r2, r3
 8006158:	d00b      	beq.n	8006172 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68d9      	ldr	r1, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2221      	movs	r2, #33	; 0x21
 8006176:	5c9b      	ldrb	r3, [r3, r2]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d11a      	bne.n	80061b2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	5c9b      	ldrb	r3, [r3, r2]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	0249      	lsls	r1, r1, #9
 8006194:	430a      	orrs	r2, r1
 8006196:	60da      	str	r2, [r3, #12]
 8006198:	e00b      	b.n	80061b2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	2220      	movs	r2, #32
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061aa:	2201      	movs	r2, #1
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d11f      	bne.n	80061fa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	492a      	ldr	r1, [pc, #168]	; (8006270 <HAL_ADC_Init+0x2e4>)
 80061c6:	400a      	ands	r2, r1
 80061c8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6919      	ldr	r1, [r3, #16]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80061d8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80061de:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2101      	movs	r1, #1
 80061f4:	430a      	orrs	r2, r1
 80061f6:	611a      	str	r2, [r3, #16]
 80061f8:	e00e      	b.n	8006218 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2201      	movs	r2, #1
 8006202:	4013      	ands	r3, r2
 8006204:	2b01      	cmp	r3, #1
 8006206:	d107      	bne.n	8006218 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2101      	movs	r1, #1
 8006214:	438a      	bics	r2, r1
 8006216:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2107      	movs	r1, #7
 8006224:	438a      	bics	r2, r1
 8006226:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6959      	ldr	r1, [r3, #20]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006244:	2203      	movs	r2, #3
 8006246:	4393      	bics	r3, r2
 8006248:	2201      	movs	r2, #1
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	0018      	movs	r0, r3
 8006254:	46bd      	mov	sp, r7
 8006256:	b002      	add	sp, #8
 8006258:	bd80      	pop	{r7, pc}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	fffffefd 	.word	0xfffffefd
 8006260:	40012708 	.word	0x40012708
 8006264:	ffc3ffff 	.word	0xffc3ffff
 8006268:	fdffffff 	.word	0xfdffffff
 800626c:	fffe0219 	.word	0xfffe0219
 8006270:	fffffc03 	.word	0xfffffc03

08006274 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8006274:	b5b0      	push	{r4, r5, r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800627c:	230f      	movs	r3, #15
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e07d      	b.n	800638a <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006292:	2202      	movs	r2, #2
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800629a:	250f      	movs	r5, #15
 800629c:	197c      	adds	r4, r7, r5
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	0018      	movs	r0, r3
 80062a2:	f000 faff 	bl	80068a4 <ADC_ConversionStop>
 80062a6:	0003      	movs	r3, r0
 80062a8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80062aa:	197b      	adds	r3, r7, r5
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10d      	bne.n	80062ce <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80062b2:	197c      	adds	r4, r7, r5
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 fa94 	bl	80067e4 <ADC_Disable>
 80062bc:	0003      	movs	r3, r0
 80062be:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 80062c0:	197b      	adds	r3, r7, r5
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d002      	beq.n	80062ce <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 80062ce:	230f      	movs	r3, #15
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d051      	beq.n	800637c <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	492c      	ldr	r1, [pc, #176]	; (8006394 <HAL_ADC_DeInit+0x120>)
 80062e4:	400a      	ands	r2, r1
 80062e6:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <HAL_ADC_DeInit+0x124>)
 80062ee:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4928      	ldr	r1, [pc, #160]	; (800639c <HAL_ADC_DeInit+0x128>)
 80062fc:	400a      	ands	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4925      	ldr	r1, [pc, #148]	; (80063a0 <HAL_ADC_DeInit+0x12c>)
 800630c:	400a      	ands	r2, r1
 800630e:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4922      	ldr	r1, [pc, #136]	; (80063a4 <HAL_ADC_DeInit+0x130>)
 800631c:	400a      	ands	r2, r1
 800631e:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2107      	movs	r1, #7
 800632c:	438a      	bics	r2, r1
 800632e:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	491b      	ldr	r1, [pc, #108]	; (80063a8 <HAL_ADC_DeInit+0x134>)
 800633c:	400a      	ands	r2, r1
 800633e:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	22b4      	movs	r2, #180	; 0xb4
 8006346:	589a      	ldr	r2, [r3, r2]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	217f      	movs	r1, #127	; 0x7f
 800634e:	438a      	bics	r2, r1
 8006350:	21b4      	movs	r1, #180	; 0xb4
 8006352:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	22b4      	movs	r2, #180	; 0xb4
 800635a:	589a      	ldr	r2, [r3, r2]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	217f      	movs	r1, #127	; 0x7f
 8006362:	438a      	bics	r2, r1
 8006364:	21b4      	movs	r1, #180	; 0xb4
 8006366:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	0018      	movs	r0, r3
 800636c:	f7fd f9a4 	bl	80036b8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2250      	movs	r2, #80	; 0x50
 8006380:	2100      	movs	r1, #0
 8006382:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006384:	230f      	movs	r3, #15
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	781b      	ldrb	r3, [r3, #0]
}
 800638a:	0018      	movs	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	b004      	add	sp, #16
 8006390:	bdb0      	pop	{r4, r5, r7, pc}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	fffff760 	.word	0xfffff760
 8006398:	0000089f 	.word	0x0000089f
 800639c:	efffffff 	.word	0xefffffff
 80063a0:	833e0200 	.word	0x833e0200
 80063a4:	3ffffc02 	.word	0x3ffffc02
 80063a8:	f000f000 	.word	0xf000f000

080063ac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063b4:	230f      	movs	r3, #15
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2204      	movs	r2, #4
 80063c4:	4013      	ands	r3, r2
 80063c6:	d138      	bne.n	800643a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2250      	movs	r2, #80	; 0x50
 80063cc:	5c9b      	ldrb	r3, [r3, r2]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_ADC_Start+0x2a>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e038      	b.n	8006448 <HAL_ADC_Start+0x9c>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2250      	movs	r2, #80	; 0x50
 80063da:	2101      	movs	r1, #1
 80063dc:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d007      	beq.n	80063f6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80063e6:	230f      	movs	r3, #15
 80063e8:	18fc      	adds	r4, r7, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	0018      	movs	r0, r3
 80063ee:	f000 f999 	bl	8006724 <ADC_Enable>
 80063f2:	0003      	movs	r3, r0
 80063f4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80063f6:	230f      	movs	r3, #15
 80063f8:	18fb      	adds	r3, r7, r3
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d120      	bne.n	8006442 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006404:	4a12      	ldr	r2, [pc, #72]	; (8006450 <HAL_ADC_Start+0xa4>)
 8006406:	4013      	ands	r3, r2
 8006408:	2280      	movs	r2, #128	; 0x80
 800640a:	0052      	lsls	r2, r2, #1
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2250      	movs	r2, #80	; 0x50
 800641c:	2100      	movs	r1, #0
 800641e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	221c      	movs	r2, #28
 8006426:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2104      	movs	r1, #4
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]
 8006438:	e003      	b.n	8006442 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800643a:	230f      	movs	r3, #15
 800643c:	18fb      	adds	r3, r7, r3
 800643e:	2202      	movs	r2, #2
 8006440:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006442:	230f      	movs	r3, #15
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	781b      	ldrb	r3, [r3, #0]
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b005      	add	sp, #20
 800644e:	bd90      	pop	{r4, r7, pc}
 8006450:	fffff0fe 	.word	0xfffff0fe

08006454 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006454:	b5b0      	push	{r4, r5, r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800645c:	230f      	movs	r3, #15
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2250      	movs	r2, #80	; 0x50
 8006468:	5c9b      	ldrb	r3, [r3, r2]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_ADC_Stop+0x1e>
 800646e:	2302      	movs	r3, #2
 8006470:	e029      	b.n	80064c6 <HAL_ADC_Stop+0x72>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2250      	movs	r2, #80	; 0x50
 8006476:	2101      	movs	r1, #1
 8006478:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800647a:	250f      	movs	r5, #15
 800647c:	197c      	adds	r4, r7, r5
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0018      	movs	r0, r3
 8006482:	f000 fa0f 	bl	80068a4 <ADC_ConversionStop>
 8006486:	0003      	movs	r3, r0
 8006488:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800648a:	197b      	adds	r3, r7, r5
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d112      	bne.n	80064b8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006492:	197c      	adds	r4, r7, r5
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	0018      	movs	r0, r3
 8006498:	f000 f9a4 	bl	80067e4 <ADC_Disable>
 800649c:	0003      	movs	r3, r0
 800649e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80064a0:	197b      	adds	r3, r7, r5
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d107      	bne.n	80064b8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ac:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <HAL_ADC_Stop+0x7c>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	2201      	movs	r2, #1
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2250      	movs	r2, #80	; 0x50
 80064bc:	2100      	movs	r1, #0
 80064be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80064c0:	230f      	movs	r3, #15
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	781b      	ldrb	r3, [r3, #0]
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b004      	add	sp, #16
 80064cc:	bdb0      	pop	{r4, r5, r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	fffffefe 	.word	0xfffffefe

080064d4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d102      	bne.n	80064f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80064ee:	2308      	movs	r3, #8
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e014      	b.n	800651e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d10b      	bne.n	800651a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006506:	2220      	movs	r2, #32
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2250      	movs	r2, #80	; 0x50
 8006512:	2100      	movs	r1, #0
 8006514:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e06c      	b.n	80065f4 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800651a:	230c      	movs	r3, #12
 800651c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800651e:	f7fe fae0 	bl	8004ae2 <HAL_GetTick>
 8006522:	0003      	movs	r3, r0
 8006524:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006526:	e019      	b.n	800655c <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	d016      	beq.n	800655c <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_ADC_PollForConversion+0x70>
 8006534:	f7fe fad5 	bl	8004ae2 <HAL_GetTick>
 8006538:	0002      	movs	r2, r0
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d20b      	bcs.n	800655c <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	2204      	movs	r2, #4
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2250      	movs	r2, #80	; 0x50
 8006554:	2100      	movs	r1, #0
 8006556:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e04b      	b.n	80065f4 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4013      	ands	r3, r2
 8006566:	d0df      	beq.n	8006528 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656c:	2280      	movs	r2, #128	; 0x80
 800656e:	0092      	lsls	r2, r2, #2
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	23c0      	movs	r3, #192	; 0xc0
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	4013      	ands	r3, r2
 8006582:	d12e      	bne.n	80065e2 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800658a:	2b00      	cmp	r3, #0
 800658c:	d129      	bne.n	80065e2 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2208      	movs	r2, #8
 8006596:	4013      	ands	r3, r2
 8006598:	2b08      	cmp	r3, #8
 800659a:	d122      	bne.n	80065e2 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2204      	movs	r2, #4
 80065a4:	4013      	ands	r3, r2
 80065a6:	d110      	bne.n	80065ca <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	210c      	movs	r1, #12
 80065b4:	438a      	bics	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	4a0f      	ldr	r2, [pc, #60]	; (80065fc <HAL_ADC_PollForConversion+0x128>)
 80065be:	4013      	ands	r3, r2
 80065c0:	2201      	movs	r2, #1
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	655a      	str	r2, [r3, #84]	; 0x54
 80065c8:	e00b      	b.n	80065e2 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	2220      	movs	r2, #32
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	2201      	movs	r2, #1
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	220c      	movs	r2, #12
 80065f0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	0018      	movs	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b004      	add	sp, #16
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	fffffefe 	.word	0xfffffefe

08006600 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2250      	movs	r2, #80	; 0x50
 8006626:	5c9b      	ldrb	r3, [r3, r2]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_ADC_ConfigChannel+0x18>
 800662c:	2302      	movs	r3, #2
 800662e:	e06c      	b.n	800670a <HAL_ADC_ConfigChannel+0xf2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2250      	movs	r2, #80	; 0x50
 8006634:	2101      	movs	r1, #1
 8006636:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2204      	movs	r2, #4
 8006640:	4013      	ands	r3, r2
 8006642:	d00b      	beq.n	800665c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006648:	2220      	movs	r2, #32
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2250      	movs	r2, #80	; 0x50
 8006654:	2100      	movs	r1, #0
 8006656:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e056      	b.n	800670a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a2c      	ldr	r2, [pc, #176]	; (8006714 <HAL_ADC_ConfigChannel+0xfc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d028      	beq.n	80066b8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	035b      	lsls	r3, r3, #13
 8006672:	0b5a      	lsrs	r2, r3, #13
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	02db      	lsls	r3, r3, #11
 8006684:	4013      	ands	r3, r2
 8006686:	d009      	beq.n	800669c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006688:	4b23      	ldr	r3, [pc, #140]	; (8006718 <HAL_ADC_ConfigChannel+0x100>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b22      	ldr	r3, [pc, #136]	; (8006718 <HAL_ADC_ConfigChannel+0x100>)
 800668e:	2180      	movs	r1, #128	; 0x80
 8006690:	0409      	lsls	r1, r1, #16
 8006692:	430a      	orrs	r2, r1
 8006694:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006696:	200a      	movs	r0, #10
 8006698:	f000 f94a 	bl	8006930 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	029b      	lsls	r3, r3, #10
 80066a4:	4013      	ands	r3, r2
 80066a6:	d02b      	beq.n	8006700 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80066a8:	4b1b      	ldr	r3, [pc, #108]	; (8006718 <HAL_ADC_ConfigChannel+0x100>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <HAL_ADC_ConfigChannel+0x100>)
 80066ae:	2180      	movs	r1, #128	; 0x80
 80066b0:	03c9      	lsls	r1, r1, #15
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e023      	b.n	8006700 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	035b      	lsls	r3, r3, #13
 80066c4:	0b5b      	lsrs	r3, r3, #13
 80066c6:	43d9      	mvns	r1, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	400a      	ands	r2, r1
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	02db      	lsls	r3, r3, #11
 80066d8:	4013      	ands	r3, r2
 80066da:	d005      	beq.n	80066e8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80066dc:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <HAL_ADC_ConfigChannel+0x100>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <HAL_ADC_ConfigChannel+0x100>)
 80066e2:	490e      	ldr	r1, [pc, #56]	; (800671c <HAL_ADC_ConfigChannel+0x104>)
 80066e4:	400a      	ands	r2, r1
 80066e6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	029b      	lsls	r3, r3, #10
 80066f0:	4013      	ands	r3, r2
 80066f2:	d005      	beq.n	8006700 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80066f4:	4b08      	ldr	r3, [pc, #32]	; (8006718 <HAL_ADC_ConfigChannel+0x100>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b07      	ldr	r3, [pc, #28]	; (8006718 <HAL_ADC_ConfigChannel+0x100>)
 80066fa:	4909      	ldr	r1, [pc, #36]	; (8006720 <HAL_ADC_ConfigChannel+0x108>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2250      	movs	r2, #80	; 0x50
 8006704:	2100      	movs	r1, #0
 8006706:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	b002      	add	sp, #8
 8006710:	bd80      	pop	{r7, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	00001001 	.word	0x00001001
 8006718:	40012708 	.word	0x40012708
 800671c:	ff7fffff 	.word	0xff7fffff
 8006720:	ffbfffff 	.word	0xffbfffff

08006724 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2203      	movs	r2, #3
 8006738:	4013      	ands	r3, r2
 800673a:	2b01      	cmp	r3, #1
 800673c:	d108      	bne.n	8006750 <ADC_Enable+0x2c>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <ADC_Enable+0x2c>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <ADC_Enable+0x2e>
 8006750:	2300      	movs	r3, #0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d13f      	bne.n	80067d6 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <ADC_Enable+0xbc>)
 800675e:	4013      	ands	r3, r2
 8006760:	d00d      	beq.n	800677e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006766:	2210      	movs	r2, #16
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	2201      	movs	r2, #1
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e02c      	b.n	80067d8 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2101      	movs	r1, #1
 800678a:	430a      	orrs	r2, r1
 800678c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800678e:	2001      	movs	r0, #1
 8006790:	f000 f8ce 	bl	8006930 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006794:	f7fe f9a5 	bl	8004ae2 <HAL_GetTick>
 8006798:	0003      	movs	r3, r0
 800679a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800679c:	e014      	b.n	80067c8 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800679e:	f7fe f9a0 	bl	8004ae2 <HAL_GetTick>
 80067a2:	0002      	movs	r2, r0
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b0a      	cmp	r3, #10
 80067aa:	d90d      	bls.n	80067c8 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b0:	2210      	movs	r2, #16
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067bc:	2201      	movs	r2, #1
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e007      	b.n	80067d8 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d1e3      	bne.n	800679e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	0018      	movs	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	b004      	add	sp, #16
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	80000017 	.word	0x80000017

080067e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2203      	movs	r2, #3
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d108      	bne.n	8006810 <ADC_Disable+0x2c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2201      	movs	r2, #1
 8006806:	4013      	ands	r3, r2
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <ADC_Disable+0x2c>
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <ADC_Disable+0x2e>
 8006810:	2300      	movs	r3, #0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d041      	beq.n	800689a <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2205      	movs	r2, #5
 800681e:	4013      	ands	r3, r2
 8006820:	2b01      	cmp	r3, #1
 8006822:	d110      	bne.n	8006846 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2102      	movs	r1, #2
 8006830:	430a      	orrs	r2, r1
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2203      	movs	r2, #3
 800683a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800683c:	f7fe f951 	bl	8004ae2 <HAL_GetTick>
 8006840:	0003      	movs	r3, r0
 8006842:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006844:	e022      	b.n	800688c <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	2210      	movs	r2, #16
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006856:	2201      	movs	r2, #1
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e01c      	b.n	800689c <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006862:	f7fe f93e 	bl	8004ae2 <HAL_GetTick>
 8006866:	0002      	movs	r2, r0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b0a      	cmp	r3, #10
 800686e:	d90d      	bls.n	800688c <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006874:	2210      	movs	r2, #16
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006880:	2201      	movs	r2, #1
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e007      	b.n	800689c <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2201      	movs	r2, #1
 8006894:	4013      	ands	r3, r2
 8006896:	2b01      	cmp	r3, #1
 8006898:	d0e3      	beq.n	8006862 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b004      	add	sp, #16
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	2204      	movs	r2, #4
 80068b8:	4013      	ands	r3, r2
 80068ba:	d034      	beq.n	8006926 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2204      	movs	r2, #4
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d10d      	bne.n	80068e6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2202      	movs	r2, #2
 80068d2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80068d4:	d107      	bne.n	80068e6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2110      	movs	r1, #16
 80068e2:	430a      	orrs	r2, r1
 80068e4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80068e6:	f7fe f8fc 	bl	8004ae2 <HAL_GetTick>
 80068ea:	0003      	movs	r3, r0
 80068ec:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80068ee:	e014      	b.n	800691a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80068f0:	f7fe f8f7 	bl	8004ae2 <HAL_GetTick>
 80068f4:	0002      	movs	r2, r0
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b0a      	cmp	r3, #10
 80068fc:	d90d      	bls.n	800691a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	2210      	movs	r2, #16
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690e:	2201      	movs	r2, #1
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e006      	b.n	8006928 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2204      	movs	r2, #4
 8006922:	4013      	ands	r3, r2
 8006924:	d1e4      	bne.n	80068f0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	0018      	movs	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	b004      	add	sp, #16
 800692e:	bd80      	pop	{r7, pc}

08006930 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006938:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <ADC_DelayMicroSecond+0x38>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	490b      	ldr	r1, [pc, #44]	; (800696c <ADC_DelayMicroSecond+0x3c>)
 800693e:	0018      	movs	r0, r3
 8006940:	f7f9 fbf4 	bl	800012c <__udivsi3>
 8006944:	0003      	movs	r3, r0
 8006946:	001a      	movs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4353      	muls	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800694e:	e002      	b.n	8006956 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3b01      	subs	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f9      	bne.n	8006950 <ADC_DelayMicroSecond+0x20>
  } 
}
 800695c:	46c0      	nop			; (mov r8, r8)
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b004      	add	sp, #16
 8006964:	bd80      	pop	{r7, pc}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	20000070 	.word	0x20000070
 800696c:	000f4240 	.word	0x000f4240

08006970 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800697a:	2317      	movs	r3, #23
 800697c:	18fb      	adds	r3, r7, r3
 800697e:	2200      	movs	r2, #0
 8006980:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2250      	movs	r2, #80	; 0x50
 800698e:	5c9b      	ldrb	r3, [r3, r2]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_ADCEx_Calibration_Start+0x28>
 8006994:	2302      	movs	r3, #2
 8006996:	e07a      	b.n	8006a8e <HAL_ADCEx_Calibration_Start+0x11e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2250      	movs	r2, #80	; 0x50
 800699c:	2101      	movs	r1, #1
 800699e:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2203      	movs	r2, #3
 80069a8:	4013      	ands	r3, r2
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d108      	bne.n	80069c0 <HAL_ADCEx_Calibration_Start+0x50>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2201      	movs	r2, #1
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_ADCEx_Calibration_Start+0x50>
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <HAL_ADCEx_Calibration_Start+0x52>
 80069c0:	2300      	movs	r3, #0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d152      	bne.n	8006a6c <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ca:	4a33      	ldr	r2, [pc, #204]	; (8006a98 <HAL_ADCEx_Calibration_Start+0x128>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	2202      	movs	r2, #2
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	2203      	movs	r2, #3
 80069de:	4013      	ands	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2103      	movs	r1, #3
 80069ee:	438a      	bics	r2, r1
 80069f0:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2180      	movs	r1, #128	; 0x80
 80069fe:	0609      	lsls	r1, r1, #24
 8006a00:	430a      	orrs	r2, r1
 8006a02:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006a04:	f7fe f86d 	bl	8004ae2 <HAL_GetTick>
 8006a08:	0003      	movs	r3, r0
 8006a0a:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006a0c:	e014      	b.n	8006a38 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006a0e:	f7fe f868 	bl	8004ae2 <HAL_GetTick>
 8006a12:	0002      	movs	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b0a      	cmp	r3, #10
 8006a1a:	d90d      	bls.n	8006a38 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	2212      	movs	r2, #18
 8006a22:	4393      	bics	r3, r2
 8006a24:	2210      	movs	r2, #16
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2250      	movs	r2, #80	; 0x50
 8006a30:	2100      	movs	r1, #0
 8006a32:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e02a      	b.n	8006a8e <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	0fdb      	lsrs	r3, r3, #31
 8006a40:	07da      	lsls	r2, r3, #31
 8006a42:	2380      	movs	r3, #128	; 0x80
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d0e1      	beq.n	8006a0e <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68d9      	ldr	r1, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	2203      	movs	r2, #3
 8006a60:	4393      	bics	r3, r2
 8006a62:	2201      	movs	r2, #1
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	655a      	str	r2, [r3, #84]	; 0x54
 8006a6a:	e009      	b.n	8006a80 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a70:	2220      	movs	r2, #32
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006a78:	2317      	movs	r3, #23
 8006a7a:	18fb      	adds	r3, r7, r3
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2250      	movs	r2, #80	; 0x50
 8006a84:	2100      	movs	r1, #0
 8006a86:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006a88:	2317      	movs	r3, #23
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	781b      	ldrb	r3, [r3, #0]
}
 8006a8e:	0018      	movs	r0, r3
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b006      	add	sp, #24
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	fffffefd 	.word	0xfffffefd

08006a9c <__NVIC_EnableIRQ>:
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	0002      	movs	r2, r0
 8006aa4:	1dfb      	adds	r3, r7, #7
 8006aa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006aa8:	1dfb      	adds	r3, r7, #7
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b7f      	cmp	r3, #127	; 0x7f
 8006aae:	d809      	bhi.n	8006ac4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ab0:	1dfb      	adds	r3, r7, #7
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	001a      	movs	r2, r3
 8006ab6:	231f      	movs	r3, #31
 8006ab8:	401a      	ands	r2, r3
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <__NVIC_EnableIRQ+0x30>)
 8006abc:	2101      	movs	r1, #1
 8006abe:	4091      	lsls	r1, r2
 8006ac0:	000a      	movs	r2, r1
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	46c0      	nop			; (mov r8, r8)
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b002      	add	sp, #8
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	e000e100 	.word	0xe000e100

08006ad0 <__NVIC_DisableIRQ>:
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	0002      	movs	r2, r0
 8006ad8:	1dfb      	adds	r3, r7, #7
 8006ada:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006adc:	1dfb      	adds	r3, r7, #7
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ae2:	d810      	bhi.n	8006b06 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ae4:	1dfb      	adds	r3, r7, #7
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	001a      	movs	r2, r3
 8006aea:	231f      	movs	r3, #31
 8006aec:	4013      	ands	r3, r2
 8006aee:	4908      	ldr	r1, [pc, #32]	; (8006b10 <__NVIC_DisableIRQ+0x40>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	409a      	lsls	r2, r3
 8006af4:	0013      	movs	r3, r2
 8006af6:	2280      	movs	r2, #128	; 0x80
 8006af8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006afa:	f3bf 8f4f 	dsb	sy
}
 8006afe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006b00:	f3bf 8f6f 	isb	sy
}
 8006b04:	46c0      	nop			; (mov r8, r8)
}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b002      	add	sp, #8
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	e000e100 	.word	0xe000e100

08006b14 <__NVIC_SetPriority>:
{
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	0002      	movs	r2, r0
 8006b1c:	6039      	str	r1, [r7, #0]
 8006b1e:	1dfb      	adds	r3, r7, #7
 8006b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006b22:	1dfb      	adds	r3, r7, #7
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b7f      	cmp	r3, #127	; 0x7f
 8006b28:	d828      	bhi.n	8006b7c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b2a:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <__NVIC_SetPriority+0xd4>)
 8006b2c:	1dfb      	adds	r3, r7, #7
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	33c0      	adds	r3, #192	; 0xc0
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	589b      	ldr	r3, [r3, r2]
 8006b3a:	1dfa      	adds	r2, r7, #7
 8006b3c:	7812      	ldrb	r2, [r2, #0]
 8006b3e:	0011      	movs	r1, r2
 8006b40:	2203      	movs	r2, #3
 8006b42:	400a      	ands	r2, r1
 8006b44:	00d2      	lsls	r2, r2, #3
 8006b46:	21ff      	movs	r1, #255	; 0xff
 8006b48:	4091      	lsls	r1, r2
 8006b4a:	000a      	movs	r2, r1
 8006b4c:	43d2      	mvns	r2, r2
 8006b4e:	401a      	ands	r2, r3
 8006b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	019b      	lsls	r3, r3, #6
 8006b56:	22ff      	movs	r2, #255	; 0xff
 8006b58:	401a      	ands	r2, r3
 8006b5a:	1dfb      	adds	r3, r7, #7
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	0018      	movs	r0, r3
 8006b60:	2303      	movs	r3, #3
 8006b62:	4003      	ands	r3, r0
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b68:	481f      	ldr	r0, [pc, #124]	; (8006be8 <__NVIC_SetPriority+0xd4>)
 8006b6a:	1dfb      	adds	r3, r7, #7
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	089b      	lsrs	r3, r3, #2
 8006b72:	430a      	orrs	r2, r1
 8006b74:	33c0      	adds	r3, #192	; 0xc0
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	501a      	str	r2, [r3, r0]
}
 8006b7a:	e031      	b.n	8006be0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <__NVIC_SetPriority+0xd8>)
 8006b7e:	1dfb      	adds	r3, r7, #7
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	0019      	movs	r1, r3
 8006b84:	230f      	movs	r3, #15
 8006b86:	400b      	ands	r3, r1
 8006b88:	3b08      	subs	r3, #8
 8006b8a:	089b      	lsrs	r3, r3, #2
 8006b8c:	3306      	adds	r3, #6
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	18d3      	adds	r3, r2, r3
 8006b92:	3304      	adds	r3, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	1dfa      	adds	r2, r7, #7
 8006b98:	7812      	ldrb	r2, [r2, #0]
 8006b9a:	0011      	movs	r1, r2
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	400a      	ands	r2, r1
 8006ba0:	00d2      	lsls	r2, r2, #3
 8006ba2:	21ff      	movs	r1, #255	; 0xff
 8006ba4:	4091      	lsls	r1, r2
 8006ba6:	000a      	movs	r2, r1
 8006ba8:	43d2      	mvns	r2, r2
 8006baa:	401a      	ands	r2, r3
 8006bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	019b      	lsls	r3, r3, #6
 8006bb2:	22ff      	movs	r2, #255	; 0xff
 8006bb4:	401a      	ands	r2, r3
 8006bb6:	1dfb      	adds	r3, r7, #7
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	0018      	movs	r0, r3
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	4003      	ands	r3, r0
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006bc4:	4809      	ldr	r0, [pc, #36]	; (8006bec <__NVIC_SetPriority+0xd8>)
 8006bc6:	1dfb      	adds	r3, r7, #7
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	001c      	movs	r4, r3
 8006bcc:	230f      	movs	r3, #15
 8006bce:	4023      	ands	r3, r4
 8006bd0:	3b08      	subs	r3, #8
 8006bd2:	089b      	lsrs	r3, r3, #2
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	3306      	adds	r3, #6
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	18c3      	adds	r3, r0, r3
 8006bdc:	3304      	adds	r3, #4
 8006bde:	601a      	str	r2, [r3, #0]
}
 8006be0:	46c0      	nop			; (mov r8, r8)
 8006be2:	46bd      	mov	sp, r7
 8006be4:	b003      	add	sp, #12
 8006be6:	bd90      	pop	{r4, r7, pc}
 8006be8:	e000e100 	.word	0xe000e100
 8006bec:	e000ed00 	.word	0xe000ed00

08006bf0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	210f      	movs	r1, #15
 8006bfc:	187b      	adds	r3, r7, r1
 8006bfe:	1c02      	adds	r2, r0, #0
 8006c00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	187b      	adds	r3, r7, r1
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b25b      	sxtb	r3, r3
 8006c0a:	0011      	movs	r1, r2
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7ff ff81 	bl	8006b14 <__NVIC_SetPriority>
}
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b004      	add	sp, #16
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	0002      	movs	r2, r0
 8006c22:	1dfb      	adds	r3, r7, #7
 8006c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c26:	1dfb      	adds	r3, r7, #7
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f7ff ff35 	bl	8006a9c <__NVIC_EnableIRQ>
}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b002      	add	sp, #8
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	0002      	movs	r2, r0
 8006c42:	1dfb      	adds	r3, r7, #7
 8006c44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006c46:	1dfb      	adds	r3, r7, #7
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	b25b      	sxtb	r3, r3
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7ff ff3f 	bl	8006ad0 <__NVIC_DisableIRQ>
}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	46bd      	mov	sp, r7
 8006c56:	b002      	add	sp, #8
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e061      	b.n	8006d32 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a32      	ldr	r2, [pc, #200]	; (8006d3c <HAL_DMA_Init+0xe0>)
 8006c74:	4694      	mov	ip, r2
 8006c76:	4463      	add	r3, ip
 8006c78:	2114      	movs	r1, #20
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f7f9 fa56 	bl	800012c <__udivsi3>
 8006c80:	0003      	movs	r3, r0
 8006c82:	009a      	lsls	r2, r3, #2
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a2d      	ldr	r2, [pc, #180]	; (8006d40 <HAL_DMA_Init+0xe4>)
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2225      	movs	r2, #37	; 0x25
 8006c92:	2102      	movs	r1, #2
 8006c94:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a28      	ldr	r2, [pc, #160]	; (8006d44 <HAL_DMA_Init+0xe8>)
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	01db      	lsls	r3, r3, #7
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d018      	beq.n	8006d1a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006ce8:	4b17      	ldr	r3, [pc, #92]	; (8006d48 <HAL_DMA_Init+0xec>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf0:	211c      	movs	r1, #28
 8006cf2:	400b      	ands	r3, r1
 8006cf4:	210f      	movs	r1, #15
 8006cf6:	4099      	lsls	r1, r3
 8006cf8:	000b      	movs	r3, r1
 8006cfa:	43d9      	mvns	r1, r3
 8006cfc:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <HAL_DMA_Init+0xec>)
 8006cfe:	400a      	ands	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006d02:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <HAL_DMA_Init+0xec>)
 8006d04:	6819      	ldr	r1, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0e:	201c      	movs	r0, #28
 8006d10:	4003      	ands	r3, r0
 8006d12:	409a      	lsls	r2, r3
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <HAL_DMA_Init+0xec>)
 8006d16:	430a      	orrs	r2, r1
 8006d18:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2225      	movs	r2, #37	; 0x25
 8006d24:	2101      	movs	r1, #1
 8006d26:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	0018      	movs	r0, r3
 8006d34:	46bd      	mov	sp, r7
 8006d36:	b004      	add	sp, #16
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	bffdfff8 	.word	0xbffdfff8
 8006d40:	40020000 	.word	0x40020000
 8006d44:	ffff800f 	.word	0xffff800f
 8006d48:	400200a8 	.word	0x400200a8

08006d4c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e04a      	b.n	8006df4 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2101      	movs	r1, #1
 8006d6a:	438a      	bics	r2, r1
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <HAL_DMA_DeInit+0xb0>)
 8006d74:	4694      	mov	ip, r2
 8006d76:	4463      	add	r3, ip
 8006d78:	2114      	movs	r1, #20
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f7f9 f9d6 	bl	800012c <__udivsi3>
 8006d80:	0003      	movs	r3, r0
 8006d82:	009a      	lsls	r2, r3, #2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1d      	ldr	r2, [pc, #116]	; (8006e00 <HAL_DMA_DeInit+0xb4>)
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	221c      	movs	r2, #28
 8006d9c:	401a      	ands	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	2101      	movs	r1, #1
 8006da4:	4091      	lsls	r1, r2
 8006da6:	000a      	movs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <HAL_DMA_DeInit+0xb8>)
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db2:	211c      	movs	r1, #28
 8006db4:	400b      	ands	r3, r1
 8006db6:	210f      	movs	r1, #15
 8006db8:	4099      	lsls	r1, r3
 8006dba:	000b      	movs	r3, r1
 8006dbc:	43d9      	mvns	r1, r3
 8006dbe:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <HAL_DMA_DeInit+0xb8>)
 8006dc0:	400a      	ands	r2, r1
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2225      	movs	r2, #37	; 0x25
 8006de6:	2100      	movs	r1, #0
 8006de8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2224      	movs	r2, #36	; 0x24
 8006dee:	2100      	movs	r1, #0
 8006df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b002      	add	sp, #8
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	bffdfff8 	.word	0xbffdfff8
 8006e00:	40020000 	.word	0x40020000
 8006e04:	400200a8 	.word	0x400200a8

08006e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e16:	2317      	movs	r3, #23
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2224      	movs	r2, #36	; 0x24
 8006e22:	5c9b      	ldrb	r3, [r3, r2]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_DMA_Start_IT+0x24>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e04f      	b.n	8006ecc <HAL_DMA_Start_IT+0xc4>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2224      	movs	r2, #36	; 0x24
 8006e30:	2101      	movs	r1, #1
 8006e32:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2225      	movs	r2, #37	; 0x25
 8006e38:	5c9b      	ldrb	r3, [r3, r2]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d13a      	bne.n	8006eb6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2225      	movs	r2, #37	; 0x25
 8006e44:	2102      	movs	r1, #2
 8006e46:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	438a      	bics	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f96a 	bl	800713e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	210e      	movs	r1, #14
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e00f      	b.n	8006ea4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2104      	movs	r1, #4
 8006e90:	438a      	bics	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	210a      	movs	r1, #10
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2101      	movs	r1, #1
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e007      	b.n	8006ec6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2224      	movs	r2, #36	; 0x24
 8006eba:	2100      	movs	r1, #0
 8006ebc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006ebe:	2317      	movs	r3, #23
 8006ec0:	18fb      	adds	r3, r7, r3
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006ec6:	2317      	movs	r3, #23
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	781b      	ldrb	r3, [r3, #0]
}
 8006ecc:	0018      	movs	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b006      	add	sp, #24
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006edc:	230f      	movs	r3, #15
 8006ede:	18fb      	adds	r3, r7, r3
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2225      	movs	r2, #37	; 0x25
 8006ee8:	5c9b      	ldrb	r3, [r3, r2]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d008      	beq.n	8006f02 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2224      	movs	r2, #36	; 0x24
 8006efa:	2100      	movs	r1, #0
 8006efc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e024      	b.n	8006f4c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	210e      	movs	r1, #14
 8006f0e:	438a      	bics	r2, r1
 8006f10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	438a      	bics	r2, r1
 8006f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f26:	221c      	movs	r2, #28
 8006f28:	401a      	ands	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4091      	lsls	r1, r2
 8006f32:	000a      	movs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2225      	movs	r2, #37	; 0x25
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2224      	movs	r2, #36	; 0x24
 8006f42:	2100      	movs	r1, #0
 8006f44:	5499      	strb	r1, [r3, r2]

    return status;
 8006f46:	230f      	movs	r3, #15
 8006f48:	18fb      	adds	r3, r7, r3
 8006f4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b004      	add	sp, #16
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5c:	210f      	movs	r1, #15
 8006f5e:	187b      	adds	r3, r7, r1
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2225      	movs	r2, #37	; 0x25
 8006f68:	5c9b      	ldrb	r3, [r3, r2]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d006      	beq.n	8006f7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2204      	movs	r2, #4
 8006f74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006f76:	187b      	adds	r3, r7, r1
 8006f78:	2201      	movs	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e02a      	b.n	8006fd4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	210e      	movs	r1, #14
 8006f8a:	438a      	bics	r2, r1
 8006f8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2101      	movs	r1, #1
 8006f9a:	438a      	bics	r2, r1
 8006f9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	221c      	movs	r2, #28
 8006fa4:	401a      	ands	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2101      	movs	r1, #1
 8006fac:	4091      	lsls	r1, r2
 8006fae:	000a      	movs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2225      	movs	r2, #37	; 0x25
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2224      	movs	r2, #36	; 0x24
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	0010      	movs	r0, r2
 8006fd2:	4798      	blx	r3
    }
  }
  return status;
 8006fd4:	230f      	movs	r3, #15
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	781b      	ldrb	r3, [r3, #0]
}
 8006fda:	0018      	movs	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b004      	add	sp, #16
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffe:	221c      	movs	r2, #28
 8007000:	4013      	ands	r3, r2
 8007002:	2204      	movs	r2, #4
 8007004:	409a      	lsls	r2, r3
 8007006:	0013      	movs	r3, r2
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4013      	ands	r3, r2
 800700c:	d026      	beq.n	800705c <HAL_DMA_IRQHandler+0x7a>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2204      	movs	r2, #4
 8007012:	4013      	ands	r3, r2
 8007014:	d022      	beq.n	800705c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2220      	movs	r2, #32
 800701e:	4013      	ands	r3, r2
 8007020:	d107      	bne.n	8007032 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2104      	movs	r1, #4
 800702e:	438a      	bics	r2, r1
 8007030:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	221c      	movs	r2, #28
 8007038:	401a      	ands	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2104      	movs	r1, #4
 8007040:	4091      	lsls	r1, r2
 8007042:	000a      	movs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d100      	bne.n	8007050 <HAL_DMA_IRQHandler+0x6e>
 800704e:	e071      	b.n	8007134 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	0010      	movs	r0, r2
 8007058:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800705a:	e06b      	b.n	8007134 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007060:	221c      	movs	r2, #28
 8007062:	4013      	ands	r3, r2
 8007064:	2202      	movs	r2, #2
 8007066:	409a      	lsls	r2, r3
 8007068:	0013      	movs	r3, r2
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4013      	ands	r3, r2
 800706e:	d02d      	beq.n	80070cc <HAL_DMA_IRQHandler+0xea>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2202      	movs	r2, #2
 8007074:	4013      	ands	r3, r2
 8007076:	d029      	beq.n	80070cc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2220      	movs	r2, #32
 8007080:	4013      	ands	r3, r2
 8007082:	d10b      	bne.n	800709c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	210a      	movs	r1, #10
 8007090:	438a      	bics	r2, r1
 8007092:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2225      	movs	r2, #37	; 0x25
 8007098:	2101      	movs	r1, #1
 800709a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a0:	221c      	movs	r2, #28
 80070a2:	401a      	ands	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	2102      	movs	r1, #2
 80070aa:	4091      	lsls	r1, r2
 80070ac:	000a      	movs	r2, r1
 80070ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2224      	movs	r2, #36	; 0x24
 80070b4:	2100      	movs	r1, #0
 80070b6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d039      	beq.n	8007134 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	0010      	movs	r0, r2
 80070c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80070ca:	e033      	b.n	8007134 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d0:	221c      	movs	r2, #28
 80070d2:	4013      	ands	r3, r2
 80070d4:	2208      	movs	r2, #8
 80070d6:	409a      	lsls	r2, r3
 80070d8:	0013      	movs	r3, r2
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4013      	ands	r3, r2
 80070de:	d02a      	beq.n	8007136 <HAL_DMA_IRQHandler+0x154>
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2208      	movs	r2, #8
 80070e4:	4013      	ands	r3, r2
 80070e6:	d026      	beq.n	8007136 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	210e      	movs	r1, #14
 80070f4:	438a      	bics	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fc:	221c      	movs	r2, #28
 80070fe:	401a      	ands	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	2101      	movs	r1, #1
 8007106:	4091      	lsls	r1, r2
 8007108:	000a      	movs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2225      	movs	r2, #37	; 0x25
 8007116:	2101      	movs	r1, #1
 8007118:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2224      	movs	r2, #36	; 0x24
 800711e:	2100      	movs	r1, #0
 8007120:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	0010      	movs	r0, r2
 8007132:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46c0      	nop			; (mov r8, r8)
}
 8007138:	46bd      	mov	sp, r7
 800713a:	b004      	add	sp, #16
 800713c:	bd80      	pop	{r7, pc}

0800713e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007150:	221c      	movs	r2, #28
 8007152:	401a      	ands	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	2101      	movs	r1, #1
 800715a:	4091      	lsls	r1, r2
 800715c:	000a      	movs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	2b10      	cmp	r3, #16
 800716e:	d108      	bne.n	8007182 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007180:	e007      	b.n	8007192 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	60da      	str	r2, [r3, #12]
}
 8007192:	46c0      	nop			; (mov r8, r8)
 8007194:	46bd      	mov	sp, r7
 8007196:	b004      	add	sp, #16
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b086      	sub	sp, #24
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	200b      	movs	r0, #11
 80071a6:	183b      	adds	r3, r7, r0
 80071a8:	1c0a      	adds	r2, r1, #0
 80071aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ac:	2317      	movs	r3, #23
 80071ae:	18fb      	adds	r3, r7, r3
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80071b4:	183b      	adds	r3, r7, r0
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	605a      	str	r2, [r3, #4]
      break;
 80071c2:	e004      	b.n	80071ce <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 80071c4:	2317      	movs	r3, #23
 80071c6:	18fb      	adds	r3, r7, r3
 80071c8:	2201      	movs	r2, #1
 80071ca:	701a      	strb	r2, [r3, #0]
      break;
 80071cc:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80071ce:	2317      	movs	r3, #23
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	781b      	ldrb	r3, [r3, #0]
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b006      	add	sp, #24
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e003      	b.n	80071f8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80071f6:	2300      	movs	r3, #0
  }
}
 80071f8:	0018      	movs	r0, r3
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b002      	add	sp, #8
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	221f      	movs	r2, #31
 800720e:	4013      	ands	r3, r2
 8007210:	2201      	movs	r2, #1
 8007212:	409a      	lsls	r2, r3
 8007214:	0013      	movs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8007218:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <HAL_EXTI_IRQHandler+0x44>)
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4013      	ands	r3, r2
 8007220:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d009      	beq.n	800723c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_EXTI_IRQHandler+0x44>)
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	4798      	blx	r3
    }
  }
}
 800723c:	46c0      	nop			; (mov r8, r8)
 800723e:	46bd      	mov	sp, r7
 8007240:	b004      	add	sp, #16
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40010400 	.word	0x40010400

08007248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800725e:	e155      	b.n	800750c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2101      	movs	r1, #1
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4091      	lsls	r1, r2
 800726a:	000a      	movs	r2, r1
 800726c:	4013      	ands	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d100      	bne.n	8007278 <HAL_GPIO_Init+0x30>
 8007276:	e146      	b.n	8007506 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d00b      	beq.n	8007298 <HAL_GPIO_Init+0x50>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d007      	beq.n	8007298 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800728c:	2b11      	cmp	r3, #17
 800728e:	d003      	beq.n	8007298 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b12      	cmp	r3, #18
 8007296:	d130      	bne.n	80072fa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	2203      	movs	r2, #3
 80072a4:	409a      	lsls	r2, r3
 80072a6:	0013      	movs	r3, r2
 80072a8:	43da      	mvns	r2, r3
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	4013      	ands	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	409a      	lsls	r2, r3
 80072ba:	0013      	movs	r3, r2
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072ce:	2201      	movs	r2, #1
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	409a      	lsls	r2, r3
 80072d4:	0013      	movs	r3, r2
 80072d6:	43da      	mvns	r2, r3
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4013      	ands	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	091b      	lsrs	r3, r3, #4
 80072e4:	2201      	movs	r2, #1
 80072e6:	401a      	ands	r2, r3
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	409a      	lsls	r2, r3
 80072ec:	0013      	movs	r3, r2
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	2203      	movs	r2, #3
 8007306:	409a      	lsls	r2, r3
 8007308:	0013      	movs	r3, r2
 800730a:	43da      	mvns	r2, r3
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4013      	ands	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	409a      	lsls	r2, r3
 800731c:	0013      	movs	r3, r2
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d003      	beq.n	800733a <HAL_GPIO_Init+0xf2>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b12      	cmp	r3, #18
 8007338:	d123      	bne.n	8007382 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	08da      	lsrs	r2, r3, #3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3208      	adds	r2, #8
 8007342:	0092      	lsls	r2, r2, #2
 8007344:	58d3      	ldr	r3, [r2, r3]
 8007346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2207      	movs	r2, #7
 800734c:	4013      	ands	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	220f      	movs	r2, #15
 8007352:	409a      	lsls	r2, r3
 8007354:	0013      	movs	r3, r2
 8007356:	43da      	mvns	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4013      	ands	r3, r2
 800735c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2107      	movs	r1, #7
 8007366:	400b      	ands	r3, r1
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	409a      	lsls	r2, r3
 800736c:	0013      	movs	r3, r2
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	08da      	lsrs	r2, r3, #3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3208      	adds	r2, #8
 800737c:	0092      	lsls	r2, r2, #2
 800737e:	6939      	ldr	r1, [r7, #16]
 8007380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	2203      	movs	r2, #3
 800738e:	409a      	lsls	r2, r3
 8007390:	0013      	movs	r3, r2
 8007392:	43da      	mvns	r2, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4013      	ands	r3, r2
 8007398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2203      	movs	r2, #3
 80073a0:	401a      	ands	r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	409a      	lsls	r2, r3
 80073a8:	0013      	movs	r3, r2
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	2380      	movs	r3, #128	; 0x80
 80073bc:	055b      	lsls	r3, r3, #21
 80073be:	4013      	ands	r3, r2
 80073c0:	d100      	bne.n	80073c4 <HAL_GPIO_Init+0x17c>
 80073c2:	e0a0      	b.n	8007506 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c4:	4b57      	ldr	r3, [pc, #348]	; (8007524 <HAL_GPIO_Init+0x2dc>)
 80073c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c8:	4b56      	ldr	r3, [pc, #344]	; (8007524 <HAL_GPIO_Init+0x2dc>)
 80073ca:	2101      	movs	r1, #1
 80073cc:	430a      	orrs	r2, r1
 80073ce:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80073d0:	4a55      	ldr	r2, [pc, #340]	; (8007528 <HAL_GPIO_Init+0x2e0>)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	089b      	lsrs	r3, r3, #2
 80073d6:	3302      	adds	r3, #2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	589b      	ldr	r3, [r3, r2]
 80073dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2203      	movs	r2, #3
 80073e2:	4013      	ands	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	220f      	movs	r2, #15
 80073e8:	409a      	lsls	r2, r3
 80073ea:	0013      	movs	r3, r2
 80073ec:	43da      	mvns	r2, r3
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4013      	ands	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	23a0      	movs	r3, #160	; 0xa0
 80073f8:	05db      	lsls	r3, r3, #23
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d01f      	beq.n	800743e <HAL_GPIO_Init+0x1f6>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a4a      	ldr	r2, [pc, #296]	; (800752c <HAL_GPIO_Init+0x2e4>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d019      	beq.n	800743a <HAL_GPIO_Init+0x1f2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a49      	ldr	r2, [pc, #292]	; (8007530 <HAL_GPIO_Init+0x2e8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d013      	beq.n	8007436 <HAL_GPIO_Init+0x1ee>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a48      	ldr	r2, [pc, #288]	; (8007534 <HAL_GPIO_Init+0x2ec>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00d      	beq.n	8007432 <HAL_GPIO_Init+0x1ea>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a47      	ldr	r2, [pc, #284]	; (8007538 <HAL_GPIO_Init+0x2f0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d007      	beq.n	800742e <HAL_GPIO_Init+0x1e6>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a46      	ldr	r2, [pc, #280]	; (800753c <HAL_GPIO_Init+0x2f4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d101      	bne.n	800742a <HAL_GPIO_Init+0x1e2>
 8007426:	2305      	movs	r3, #5
 8007428:	e00a      	b.n	8007440 <HAL_GPIO_Init+0x1f8>
 800742a:	2306      	movs	r3, #6
 800742c:	e008      	b.n	8007440 <HAL_GPIO_Init+0x1f8>
 800742e:	2304      	movs	r3, #4
 8007430:	e006      	b.n	8007440 <HAL_GPIO_Init+0x1f8>
 8007432:	2303      	movs	r3, #3
 8007434:	e004      	b.n	8007440 <HAL_GPIO_Init+0x1f8>
 8007436:	2302      	movs	r3, #2
 8007438:	e002      	b.n	8007440 <HAL_GPIO_Init+0x1f8>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <HAL_GPIO_Init+0x1f8>
 800743e:	2300      	movs	r3, #0
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	2103      	movs	r1, #3
 8007444:	400a      	ands	r2, r1
 8007446:	0092      	lsls	r2, r2, #2
 8007448:	4093      	lsls	r3, r2
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007450:	4935      	ldr	r1, [pc, #212]	; (8007528 <HAL_GPIO_Init+0x2e0>)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	089b      	lsrs	r3, r3, #2
 8007456:	3302      	adds	r3, #2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800745e:	4b38      	ldr	r3, [pc, #224]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	43da      	mvns	r2, r3
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4013      	ands	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	2380      	movs	r3, #128	; 0x80
 8007474:	025b      	lsls	r3, r3, #9
 8007476:	4013      	ands	r3, r2
 8007478:	d003      	beq.n	8007482 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007482:	4b2f      	ldr	r3, [pc, #188]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007488:	4b2d      	ldr	r3, [pc, #180]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	43da      	mvns	r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	4013      	ands	r3, r2
 8007496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	029b      	lsls	r3, r3, #10
 80074a0:	4013      	ands	r3, r2
 80074a2:	d003      	beq.n	80074ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80074ac:	4b24      	ldr	r3, [pc, #144]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074b2:	4b23      	ldr	r3, [pc, #140]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	43da      	mvns	r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4013      	ands	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	2380      	movs	r3, #128	; 0x80
 80074c8:	035b      	lsls	r3, r3, #13
 80074ca:	4013      	ands	r3, r2
 80074cc:	d003      	beq.n	80074d6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80074d6:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80074dc:	4b18      	ldr	r3, [pc, #96]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	43da      	mvns	r2, r3
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	4013      	ands	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	039b      	lsls	r3, r3, #14
 80074f4:	4013      	ands	r3, r2
 80074f6:	d003      	beq.n	8007500 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007500:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	3301      	adds	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	40da      	lsrs	r2, r3
 8007514:	1e13      	subs	r3, r2, #0
 8007516:	d000      	beq.n	800751a <HAL_GPIO_Init+0x2d2>
 8007518:	e6a2      	b.n	8007260 <HAL_GPIO_Init+0x18>
  }
}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	46c0      	nop			; (mov r8, r8)
 800751e:	46bd      	mov	sp, r7
 8007520:	b006      	add	sp, #24
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40021000 	.word	0x40021000
 8007528:	40010000 	.word	0x40010000
 800752c:	50000400 	.word	0x50000400
 8007530:	50000800 	.word	0x50000800
 8007534:	50000c00 	.word	0x50000c00
 8007538:	50001000 	.word	0x50001000
 800753c:	50001c00 	.word	0x50001c00
 8007540:	40010400 	.word	0x40010400

08007544 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800755a:	e0bc      	b.n	80076d6 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800755c:	2201      	movs	r2, #1
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	409a      	lsls	r2, r3
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	4013      	ands	r3, r2
 8007566:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d100      	bne.n	8007570 <HAL_GPIO_DeInit+0x2c>
 800756e:	e0af      	b.n	80076d0 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007570:	4a5e      	ldr	r2, [pc, #376]	; (80076ec <HAL_GPIO_DeInit+0x1a8>)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	089b      	lsrs	r3, r3, #2
 8007576:	3302      	adds	r3, #2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	589b      	ldr	r3, [r3, r2]
 800757c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2203      	movs	r2, #3
 8007582:	4013      	ands	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	220f      	movs	r2, #15
 8007588:	409a      	lsls	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4013      	ands	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	23a0      	movs	r3, #160	; 0xa0
 8007594:	05db      	lsls	r3, r3, #23
 8007596:	429a      	cmp	r2, r3
 8007598:	d01f      	beq.n	80075da <HAL_GPIO_DeInit+0x96>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a54      	ldr	r2, [pc, #336]	; (80076f0 <HAL_GPIO_DeInit+0x1ac>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d019      	beq.n	80075d6 <HAL_GPIO_DeInit+0x92>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a53      	ldr	r2, [pc, #332]	; (80076f4 <HAL_GPIO_DeInit+0x1b0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_GPIO_DeInit+0x8e>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a52      	ldr	r2, [pc, #328]	; (80076f8 <HAL_GPIO_DeInit+0x1b4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00d      	beq.n	80075ce <HAL_GPIO_DeInit+0x8a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a51      	ldr	r2, [pc, #324]	; (80076fc <HAL_GPIO_DeInit+0x1b8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d007      	beq.n	80075ca <HAL_GPIO_DeInit+0x86>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a50      	ldr	r2, [pc, #320]	; (8007700 <HAL_GPIO_DeInit+0x1bc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d101      	bne.n	80075c6 <HAL_GPIO_DeInit+0x82>
 80075c2:	2305      	movs	r3, #5
 80075c4:	e00a      	b.n	80075dc <HAL_GPIO_DeInit+0x98>
 80075c6:	2306      	movs	r3, #6
 80075c8:	e008      	b.n	80075dc <HAL_GPIO_DeInit+0x98>
 80075ca:	2304      	movs	r3, #4
 80075cc:	e006      	b.n	80075dc <HAL_GPIO_DeInit+0x98>
 80075ce:	2303      	movs	r3, #3
 80075d0:	e004      	b.n	80075dc <HAL_GPIO_DeInit+0x98>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e002      	b.n	80075dc <HAL_GPIO_DeInit+0x98>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <HAL_GPIO_DeInit+0x98>
 80075da:	2300      	movs	r3, #0
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	2103      	movs	r1, #3
 80075e0:	400a      	ands	r2, r1
 80075e2:	0092      	lsls	r2, r2, #2
 80075e4:	4093      	lsls	r3, r2
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d132      	bne.n	8007652 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80075ec:	4b45      	ldr	r3, [pc, #276]	; (8007704 <HAL_GPIO_DeInit+0x1c0>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	43d9      	mvns	r1, r3
 80075f4:	4b43      	ldr	r3, [pc, #268]	; (8007704 <HAL_GPIO_DeInit+0x1c0>)
 80075f6:	400a      	ands	r2, r1
 80075f8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80075fa:	4b42      	ldr	r3, [pc, #264]	; (8007704 <HAL_GPIO_DeInit+0x1c0>)
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	43d9      	mvns	r1, r3
 8007602:	4b40      	ldr	r3, [pc, #256]	; (8007704 <HAL_GPIO_DeInit+0x1c0>)
 8007604:	400a      	ands	r2, r1
 8007606:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007608:	4b3e      	ldr	r3, [pc, #248]	; (8007704 <HAL_GPIO_DeInit+0x1c0>)
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	43d9      	mvns	r1, r3
 8007610:	4b3c      	ldr	r3, [pc, #240]	; (8007704 <HAL_GPIO_DeInit+0x1c0>)
 8007612:	400a      	ands	r2, r1
 8007614:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007616:	4b3b      	ldr	r3, [pc, #236]	; (8007704 <HAL_GPIO_DeInit+0x1c0>)
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	43d9      	mvns	r1, r3
 800761e:	4b39      	ldr	r3, [pc, #228]	; (8007704 <HAL_GPIO_DeInit+0x1c0>)
 8007620:	400a      	ands	r2, r1
 8007622:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2203      	movs	r2, #3
 8007628:	4013      	ands	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	220f      	movs	r2, #15
 800762e:	409a      	lsls	r2, r3
 8007630:	0013      	movs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007634:	4a2d      	ldr	r2, [pc, #180]	; (80076ec <HAL_GPIO_DeInit+0x1a8>)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	089b      	lsrs	r3, r3, #2
 800763a:	3302      	adds	r3, #2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	589a      	ldr	r2, [r3, r2]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	43d9      	mvns	r1, r3
 8007644:	4829      	ldr	r0, [pc, #164]	; (80076ec <HAL_GPIO_DeInit+0x1a8>)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	089b      	lsrs	r3, r3, #2
 800764a:	400a      	ands	r2, r1
 800764c:	3302      	adds	r3, #2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	2103      	movs	r1, #3
 800765c:	4099      	lsls	r1, r3
 800765e:	000b      	movs	r3, r1
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	08da      	lsrs	r2, r3, #3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3208      	adds	r2, #8
 800766e:	0092      	lsls	r2, r2, #2
 8007670:	58d3      	ldr	r3, [r2, r3]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	2107      	movs	r1, #7
 8007676:	400a      	ands	r2, r1
 8007678:	0092      	lsls	r2, r2, #2
 800767a:	210f      	movs	r1, #15
 800767c:	4091      	lsls	r1, r2
 800767e:	000a      	movs	r2, r1
 8007680:	43d1      	mvns	r1, r2
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	08d2      	lsrs	r2, r2, #3
 8007686:	4019      	ands	r1, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3208      	adds	r2, #8
 800768c:	0092      	lsls	r2, r2, #2
 800768e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	0052      	lsls	r2, r2, #1
 8007698:	2103      	movs	r1, #3
 800769a:	4091      	lsls	r1, r2
 800769c:	000a      	movs	r2, r1
 800769e:	43d2      	mvns	r2, r2
 80076a0:	401a      	ands	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2101      	movs	r1, #1
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4091      	lsls	r1, r2
 80076b0:	000a      	movs	r2, r1
 80076b2:	43d2      	mvns	r2, r2
 80076b4:	401a      	ands	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	0052      	lsls	r2, r2, #1
 80076c2:	2103      	movs	r1, #3
 80076c4:	4091      	lsls	r1, r2
 80076c6:	000a      	movs	r2, r1
 80076c8:	43d2      	mvns	r2, r2
 80076ca:	401a      	ands	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	609a      	str	r2, [r3, #8]
    }
    position++;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	3301      	adds	r3, #1
 80076d4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	40da      	lsrs	r2, r3
 80076dc:	1e13      	subs	r3, r2, #0
 80076de:	d000      	beq.n	80076e2 <HAL_GPIO_DeInit+0x19e>
 80076e0:	e73c      	b.n	800755c <HAL_GPIO_DeInit+0x18>
  }
}
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	46c0      	nop			; (mov r8, r8)
 80076e6:	46bd      	mov	sp, r7
 80076e8:	b006      	add	sp, #24
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	40010000 	.word	0x40010000
 80076f0:	50000400 	.word	0x50000400
 80076f4:	50000800 	.word	0x50000800
 80076f8:	50000c00 	.word	0x50000c00
 80076fc:	50001000 	.word	0x50001000
 8007700:	50001c00 	.word	0x50001c00
 8007704:	40010400 	.word	0x40010400

08007708 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	000a      	movs	r2, r1
 8007712:	1cbb      	adds	r3, r7, #2
 8007714:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	1cba      	adds	r2, r7, #2
 800771c:	8812      	ldrh	r2, [r2, #0]
 800771e:	4013      	ands	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007722:	230f      	movs	r3, #15
 8007724:	18fb      	adds	r3, r7, r3
 8007726:	2201      	movs	r2, #1
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	e003      	b.n	8007734 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800772c:	230f      	movs	r3, #15
 800772e:	18fb      	adds	r3, r7, r3
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007734:	230f      	movs	r3, #15
 8007736:	18fb      	adds	r3, r7, r3
 8007738:	781b      	ldrb	r3, [r3, #0]
}
 800773a:	0018      	movs	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	b004      	add	sp, #16
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	0008      	movs	r0, r1
 800774c:	0011      	movs	r1, r2
 800774e:	1cbb      	adds	r3, r7, #2
 8007750:	1c02      	adds	r2, r0, #0
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	1c7b      	adds	r3, r7, #1
 8007756:	1c0a      	adds	r2, r1, #0
 8007758:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800775a:	1c7b      	adds	r3, r7, #1
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007762:	1cbb      	adds	r3, r7, #2
 8007764:	881a      	ldrh	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800776a:	e003      	b.n	8007774 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800776c:	1cbb      	adds	r3, r7, #2
 800776e:	881a      	ldrh	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	46bd      	mov	sp, r7
 8007778:	b002      	add	sp, #8
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	000a      	movs	r2, r1
 8007786:	1cbb      	adds	r3, r7, #2
 8007788:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007790:	1cbb      	adds	r3, r7, #2
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4013      	ands	r3, r2
 8007798:	041a      	lsls	r2, r3, #16
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	43db      	mvns	r3, r3
 800779e:	1cb9      	adds	r1, r7, #2
 80077a0:	8809      	ldrh	r1, [r1, #0]
 80077a2:	400b      	ands	r3, r1
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	619a      	str	r2, [r3, #24]
}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b004      	add	sp, #16
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e082      	b.n	80078cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2241      	movs	r2, #65	; 0x41
 80077ca:	5c9b      	ldrb	r3, [r3, r2]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d107      	bne.n	80077e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2240      	movs	r2, #64	; 0x40
 80077d6:	2100      	movs	r1, #0
 80077d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0018      	movs	r0, r3
 80077de:	f000 f87f 	bl	80078e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2241      	movs	r2, #65	; 0x41
 80077e6:	2124      	movs	r1, #36	; 0x24
 80077e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2101      	movs	r1, #1
 80077f6:	438a      	bics	r2, r1
 80077f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4934      	ldr	r1, [pc, #208]	; (80078d4 <HAL_I2C_Init+0x120>)
 8007804:	400a      	ands	r2, r1
 8007806:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4931      	ldr	r1, [pc, #196]	; (80078d8 <HAL_I2C_Init+0x124>)
 8007814:	400a      	ands	r2, r1
 8007816:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d108      	bne.n	8007832 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	0209      	lsls	r1, r1, #8
 800782c:	430a      	orrs	r2, r1
 800782e:	609a      	str	r2, [r3, #8]
 8007830:	e007      	b.n	8007842 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2184      	movs	r1, #132	; 0x84
 800783c:	0209      	lsls	r1, r1, #8
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d104      	bne.n	8007854 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2280      	movs	r2, #128	; 0x80
 8007850:	0112      	lsls	r2, r2, #4
 8007852:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	491f      	ldr	r1, [pc, #124]	; (80078dc <HAL_I2C_Init+0x128>)
 8007860:	430a      	orrs	r2, r1
 8007862:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	491a      	ldr	r1, [pc, #104]	; (80078d8 <HAL_I2C_Init+0x124>)
 8007870:	400a      	ands	r2, r1
 8007872:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	431a      	orrs	r2, r3
 800787e:	0011      	movs	r1, r2
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	021a      	lsls	r2, r3, #8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69d9      	ldr	r1, [r3, #28]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1a      	ldr	r2, [r3, #32]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2101      	movs	r1, #1
 80078aa:	430a      	orrs	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2241      	movs	r2, #65	; 0x41
 80078b8:	2120      	movs	r1, #32
 80078ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2242      	movs	r2, #66	; 0x42
 80078c6:	2100      	movs	r1, #0
 80078c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	0018      	movs	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b002      	add	sp, #8
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	f0ffffff 	.word	0xf0ffffff
 80078d8:	ffff7fff 	.word	0xffff7fff
 80078dc:	02008000 	.word	0x02008000

080078e0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b002      	add	sp, #8
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b089      	sub	sp, #36	; 0x24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	000c      	movs	r4, r1
 80078fa:	0010      	movs	r0, r2
 80078fc:	0019      	movs	r1, r3
 80078fe:	230a      	movs	r3, #10
 8007900:	18fb      	adds	r3, r7, r3
 8007902:	1c22      	adds	r2, r4, #0
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	2308      	movs	r3, #8
 8007908:	18fb      	adds	r3, r7, r3
 800790a:	1c02      	adds	r2, r0, #0
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	1dbb      	adds	r3, r7, #6
 8007910:	1c0a      	adds	r2, r1, #0
 8007912:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2241      	movs	r2, #65	; 0x41
 8007918:	5c9b      	ldrb	r3, [r3, r2]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b20      	cmp	r3, #32
 800791e:	d000      	beq.n	8007922 <HAL_I2C_Mem_Write+0x32>
 8007920:	e10c      	b.n	8007b3c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <HAL_I2C_Mem_Write+0x42>
 8007928:	232c      	movs	r3, #44	; 0x2c
 800792a:	18fb      	adds	r3, r7, r3
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2280      	movs	r2, #128	; 0x80
 8007936:	0092      	lsls	r2, r2, #2
 8007938:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e0ff      	b.n	8007b3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2240      	movs	r2, #64	; 0x40
 8007942:	5c9b      	ldrb	r3, [r3, r2]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_I2C_Mem_Write+0x5c>
 8007948:	2302      	movs	r3, #2
 800794a:	e0f8      	b.n	8007b3e <HAL_I2C_Mem_Write+0x24e>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2240      	movs	r2, #64	; 0x40
 8007950:	2101      	movs	r1, #1
 8007952:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007954:	f7fd f8c5 	bl	8004ae2 <HAL_GetTick>
 8007958:	0003      	movs	r3, r0
 800795a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	0219      	lsls	r1, r3, #8
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	2319      	movs	r3, #25
 8007968:	2201      	movs	r2, #1
 800796a:	f000 fb17 	bl	8007f9c <I2C_WaitOnFlagUntilTimeout>
 800796e:	1e03      	subs	r3, r0, #0
 8007970:	d001      	beq.n	8007976 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e0e3      	b.n	8007b3e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2241      	movs	r2, #65	; 0x41
 800797a:	2121      	movs	r1, #33	; 0x21
 800797c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2242      	movs	r2, #66	; 0x42
 8007982:	2140      	movs	r1, #64	; 0x40
 8007984:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	222c      	movs	r2, #44	; 0x2c
 8007996:	18ba      	adds	r2, r7, r2
 8007998:	8812      	ldrh	r2, [r2, #0]
 800799a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079a2:	1dbb      	adds	r3, r7, #6
 80079a4:	881c      	ldrh	r4, [r3, #0]
 80079a6:	2308      	movs	r3, #8
 80079a8:	18fb      	adds	r3, r7, r3
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	230a      	movs	r3, #10
 80079ae:	18fb      	adds	r3, r7, r3
 80079b0:	8819      	ldrh	r1, [r3, #0]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	0023      	movs	r3, r4
 80079be:	f000 fa05 	bl	8007dcc <I2C_RequestMemoryWrite>
 80079c2:	1e03      	subs	r3, r0, #0
 80079c4:	d005      	beq.n	80079d2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2240      	movs	r2, #64	; 0x40
 80079ca:	2100      	movs	r1, #0
 80079cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e0b5      	b.n	8007b3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2bff      	cmp	r3, #255	; 0xff
 80079da:	d911      	bls.n	8007a00 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	22ff      	movs	r2, #255	; 0xff
 80079e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	2380      	movs	r3, #128	; 0x80
 80079ea:	045c      	lsls	r4, r3, #17
 80079ec:	230a      	movs	r3, #10
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	8819      	ldrh	r1, [r3, #0]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	2300      	movs	r3, #0
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	0023      	movs	r3, r4
 80079fa:	f000 fbef 	bl	80081dc <I2C_TransferConfig>
 80079fe:	e012      	b.n	8007a26 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	049c      	lsls	r4, r3, #18
 8007a14:	230a      	movs	r3, #10
 8007a16:	18fb      	adds	r3, r7, r3
 8007a18:	8819      	ldrh	r1, [r3, #0]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	0023      	movs	r3, r4
 8007a22:	f000 fbdb 	bl	80081dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f000 faf4 	bl	800801a <I2C_WaitOnTXISFlagUntilTimeout>
 8007a32:	1e03      	subs	r3, r0, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e081      	b.n	8007b3e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	781a      	ldrb	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d03a      	beq.n	8007aea <HAL_I2C_Mem_Write+0x1fa>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d136      	bne.n	8007aea <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	0013      	movs	r3, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	2180      	movs	r1, #128	; 0x80
 8007a8a:	f000 fa87 	bl	8007f9c <I2C_WaitOnFlagUntilTimeout>
 8007a8e:	1e03      	subs	r3, r0, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e053      	b.n	8007b3e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2bff      	cmp	r3, #255	; 0xff
 8007a9e:	d911      	bls.n	8007ac4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	22ff      	movs	r2, #255	; 0xff
 8007aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	2380      	movs	r3, #128	; 0x80
 8007aae:	045c      	lsls	r4, r3, #17
 8007ab0:	230a      	movs	r3, #10
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	8819      	ldrh	r1, [r3, #0]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	0023      	movs	r3, r4
 8007abe:	f000 fb8d 	bl	80081dc <I2C_TransferConfig>
 8007ac2:	e012      	b.n	8007aea <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	2380      	movs	r3, #128	; 0x80
 8007ad6:	049c      	lsls	r4, r3, #18
 8007ad8:	230a      	movs	r3, #10
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	8819      	ldrh	r1, [r3, #0]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	0023      	movs	r3, r4
 8007ae6:	f000 fb79 	bl	80081dc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d198      	bne.n	8007a26 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	0018      	movs	r0, r3
 8007afc:	f000 facc 	bl	8008098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b00:	1e03      	subs	r3, r0, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e01a      	b.n	8007b3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	490b      	ldr	r1, [pc, #44]	; (8007b48 <HAL_I2C_Mem_Write+0x258>)
 8007b1c:	400a      	ands	r2, r1
 8007b1e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2241      	movs	r2, #65	; 0x41
 8007b24:	2120      	movs	r1, #32
 8007b26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2242      	movs	r2, #66	; 0x42
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2240      	movs	r2, #64	; 0x40
 8007b34:	2100      	movs	r1, #0
 8007b36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e000      	b.n	8007b3e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007b3c:	2302      	movs	r3, #2
  }
}
 8007b3e:	0018      	movs	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	b007      	add	sp, #28
 8007b44:	bd90      	pop	{r4, r7, pc}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	fe00e800 	.word	0xfe00e800

08007b4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b4c:	b590      	push	{r4, r7, lr}
 8007b4e:	b089      	sub	sp, #36	; 0x24
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	000c      	movs	r4, r1
 8007b56:	0010      	movs	r0, r2
 8007b58:	0019      	movs	r1, r3
 8007b5a:	230a      	movs	r3, #10
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	1c22      	adds	r2, r4, #0
 8007b60:	801a      	strh	r2, [r3, #0]
 8007b62:	2308      	movs	r3, #8
 8007b64:	18fb      	adds	r3, r7, r3
 8007b66:	1c02      	adds	r2, r0, #0
 8007b68:	801a      	strh	r2, [r3, #0]
 8007b6a:	1dbb      	adds	r3, r7, #6
 8007b6c:	1c0a      	adds	r2, r1, #0
 8007b6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2241      	movs	r2, #65	; 0x41
 8007b74:	5c9b      	ldrb	r3, [r3, r2]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d000      	beq.n	8007b7e <HAL_I2C_Mem_Read+0x32>
 8007b7c:	e110      	b.n	8007da0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <HAL_I2C_Mem_Read+0x42>
 8007b84:	232c      	movs	r3, #44	; 0x2c
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d105      	bne.n	8007b9a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2280      	movs	r2, #128	; 0x80
 8007b92:	0092      	lsls	r2, r2, #2
 8007b94:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e103      	b.n	8007da2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2240      	movs	r2, #64	; 0x40
 8007b9e:	5c9b      	ldrb	r3, [r3, r2]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_I2C_Mem_Read+0x5c>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e0fc      	b.n	8007da2 <HAL_I2C_Mem_Read+0x256>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2240      	movs	r2, #64	; 0x40
 8007bac:	2101      	movs	r1, #1
 8007bae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bb0:	f7fc ff97 	bl	8004ae2 <HAL_GetTick>
 8007bb4:	0003      	movs	r3, r0
 8007bb6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bb8:	2380      	movs	r3, #128	; 0x80
 8007bba:	0219      	lsls	r1, r3, #8
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	2319      	movs	r3, #25
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f000 f9e9 	bl	8007f9c <I2C_WaitOnFlagUntilTimeout>
 8007bca:	1e03      	subs	r3, r0, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e0e7      	b.n	8007da2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2241      	movs	r2, #65	; 0x41
 8007bd6:	2122      	movs	r1, #34	; 0x22
 8007bd8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2242      	movs	r2, #66	; 0x42
 8007bde:	2140      	movs	r1, #64	; 0x40
 8007be0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	222c      	movs	r2, #44	; 0x2c
 8007bf2:	18ba      	adds	r2, r7, r2
 8007bf4:	8812      	ldrh	r2, [r2, #0]
 8007bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bfe:	1dbb      	adds	r3, r7, #6
 8007c00:	881c      	ldrh	r4, [r3, #0]
 8007c02:	2308      	movs	r3, #8
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	881a      	ldrh	r2, [r3, #0]
 8007c08:	230a      	movs	r3, #10
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	8819      	ldrh	r1, [r3, #0]
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	0023      	movs	r3, r4
 8007c1a:	f000 f93b 	bl	8007e94 <I2C_RequestMemoryRead>
 8007c1e:	1e03      	subs	r3, r0, #0
 8007c20:	d005      	beq.n	8007c2e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2240      	movs	r2, #64	; 0x40
 8007c26:	2100      	movs	r1, #0
 8007c28:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e0b9      	b.n	8007da2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2bff      	cmp	r3, #255	; 0xff
 8007c36:	d911      	bls.n	8007c5c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	22ff      	movs	r2, #255	; 0xff
 8007c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	2380      	movs	r3, #128	; 0x80
 8007c46:	045c      	lsls	r4, r3, #17
 8007c48:	230a      	movs	r3, #10
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	8819      	ldrh	r1, [r3, #0]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	4b56      	ldr	r3, [pc, #344]	; (8007dac <HAL_I2C_Mem_Read+0x260>)
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	0023      	movs	r3, r4
 8007c56:	f000 fac1 	bl	80081dc <I2C_TransferConfig>
 8007c5a:	e012      	b.n	8007c82 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	2380      	movs	r3, #128	; 0x80
 8007c6e:	049c      	lsls	r4, r3, #18
 8007c70:	230a      	movs	r3, #10
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	8819      	ldrh	r1, [r3, #0]
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	4b4c      	ldr	r3, [pc, #304]	; (8007dac <HAL_I2C_Mem_Read+0x260>)
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	0023      	movs	r3, r4
 8007c7e:	f000 faad 	bl	80081dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	0013      	movs	r3, r2
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2104      	movs	r1, #4
 8007c90:	f000 f984 	bl	8007f9c <I2C_WaitOnFlagUntilTimeout>
 8007c94:	1e03      	subs	r3, r0, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e082      	b.n	8007da2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d03a      	beq.n	8007d4e <HAL_I2C_Mem_Read+0x202>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d136      	bne.n	8007d4e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	0013      	movs	r3, r2
 8007cea:	2200      	movs	r2, #0
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	f000 f955 	bl	8007f9c <I2C_WaitOnFlagUntilTimeout>
 8007cf2:	1e03      	subs	r3, r0, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e053      	b.n	8007da2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	2bff      	cmp	r3, #255	; 0xff
 8007d02:	d911      	bls.n	8007d28 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	22ff      	movs	r2, #255	; 0xff
 8007d08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	045c      	lsls	r4, r3, #17
 8007d14:	230a      	movs	r3, #10
 8007d16:	18fb      	adds	r3, r7, r3
 8007d18:	8819      	ldrh	r1, [r3, #0]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	0023      	movs	r3, r4
 8007d22:	f000 fa5b 	bl	80081dc <I2C_TransferConfig>
 8007d26:	e012      	b.n	8007d4e <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	049c      	lsls	r4, r3, #18
 8007d3c:	230a      	movs	r3, #10
 8007d3e:	18fb      	adds	r3, r7, r3
 8007d40:	8819      	ldrh	r1, [r3, #0]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	2300      	movs	r3, #0
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	0023      	movs	r3, r4
 8007d4a:	f000 fa47 	bl	80081dc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d194      	bne.n	8007c82 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f000 f99a 	bl	8008098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d64:	1e03      	subs	r3, r0, #0
 8007d66:	d001      	beq.n	8007d6c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e01a      	b.n	8007da2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2220      	movs	r2, #32
 8007d72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	490c      	ldr	r1, [pc, #48]	; (8007db0 <HAL_I2C_Mem_Read+0x264>)
 8007d80:	400a      	ands	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2241      	movs	r2, #65	; 0x41
 8007d88:	2120      	movs	r1, #32
 8007d8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2242      	movs	r2, #66	; 0x42
 8007d90:	2100      	movs	r1, #0
 8007d92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2240      	movs	r2, #64	; 0x40
 8007d98:	2100      	movs	r1, #0
 8007d9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e000      	b.n	8007da2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007da0:	2302      	movs	r3, #2
  }
}
 8007da2:	0018      	movs	r0, r3
 8007da4:	46bd      	mov	sp, r7
 8007da6:	b007      	add	sp, #28
 8007da8:	bd90      	pop	{r4, r7, pc}
 8007daa:	46c0      	nop			; (mov r8, r8)
 8007dac:	80002400 	.word	0x80002400
 8007db0:	fe00e800 	.word	0xfe00e800

08007db4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2241      	movs	r2, #65	; 0x41
 8007dc0:	5c9b      	ldrb	r3, [r3, r2]
 8007dc2:	b2db      	uxtb	r3, r3
}
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007dcc:	b5b0      	push	{r4, r5, r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	000c      	movs	r4, r1
 8007dd6:	0010      	movs	r0, r2
 8007dd8:	0019      	movs	r1, r3
 8007dda:	250a      	movs	r5, #10
 8007ddc:	197b      	adds	r3, r7, r5
 8007dde:	1c22      	adds	r2, r4, #0
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	2308      	movs	r3, #8
 8007de4:	18fb      	adds	r3, r7, r3
 8007de6:	1c02      	adds	r2, r0, #0
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	1dbb      	adds	r3, r7, #6
 8007dec:	1c0a      	adds	r2, r1, #0
 8007dee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007df0:	1dbb      	adds	r3, r7, #6
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	2380      	movs	r3, #128	; 0x80
 8007df8:	045c      	lsls	r4, r3, #17
 8007dfa:	197b      	adds	r3, r7, r5
 8007dfc:	8819      	ldrh	r1, [r3, #0]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	4b23      	ldr	r3, [pc, #140]	; (8007e90 <I2C_RequestMemoryWrite+0xc4>)
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	0023      	movs	r3, r4
 8007e06:	f000 f9e9 	bl	80081dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0c:	6a39      	ldr	r1, [r7, #32]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	0018      	movs	r0, r3
 8007e12:	f000 f902 	bl	800801a <I2C_WaitOnTXISFlagUntilTimeout>
 8007e16:	1e03      	subs	r3, r0, #0
 8007e18:	d001      	beq.n	8007e1e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e033      	b.n	8007e86 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e1e:	1dbb      	adds	r3, r7, #6
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d107      	bne.n	8007e36 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e26:	2308      	movs	r3, #8
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	629a      	str	r2, [r3, #40]	; 0x28
 8007e34:	e019      	b.n	8007e6a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007e36:	2308      	movs	r3, #8
 8007e38:	18fb      	adds	r3, r7, r3
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	0a1b      	lsrs	r3, r3, #8
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4a:	6a39      	ldr	r1, [r7, #32]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f000 f8e3 	bl	800801a <I2C_WaitOnTXISFlagUntilTimeout>
 8007e54:	1e03      	subs	r3, r0, #0
 8007e56:	d001      	beq.n	8007e5c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e014      	b.n	8007e86 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007e6a:	6a3a      	ldr	r2, [r7, #32]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	0013      	movs	r3, r2
 8007e74:	2200      	movs	r2, #0
 8007e76:	2180      	movs	r1, #128	; 0x80
 8007e78:	f000 f890 	bl	8007f9c <I2C_WaitOnFlagUntilTimeout>
 8007e7c:	1e03      	subs	r3, r0, #0
 8007e7e:	d001      	beq.n	8007e84 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e000      	b.n	8007e86 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	0018      	movs	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	b004      	add	sp, #16
 8007e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	80002000 	.word	0x80002000

08007e94 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e94:	b5b0      	push	{r4, r5, r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	000c      	movs	r4, r1
 8007e9e:	0010      	movs	r0, r2
 8007ea0:	0019      	movs	r1, r3
 8007ea2:	250a      	movs	r5, #10
 8007ea4:	197b      	adds	r3, r7, r5
 8007ea6:	1c22      	adds	r2, r4, #0
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	2308      	movs	r3, #8
 8007eac:	18fb      	adds	r3, r7, r3
 8007eae:	1c02      	adds	r2, r0, #0
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	1dbb      	adds	r3, r7, #6
 8007eb4:	1c0a      	adds	r2, r1, #0
 8007eb6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007eb8:	1dbb      	adds	r3, r7, #6
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	197b      	adds	r3, r7, r5
 8007ec0:	8819      	ldrh	r1, [r3, #0]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	4b23      	ldr	r3, [pc, #140]	; (8007f54 <I2C_RequestMemoryRead+0xc0>)
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f000 f987 	bl	80081dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed0:	6a39      	ldr	r1, [r7, #32]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f000 f8a0 	bl	800801a <I2C_WaitOnTXISFlagUntilTimeout>
 8007eda:	1e03      	subs	r3, r0, #0
 8007edc:	d001      	beq.n	8007ee2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e033      	b.n	8007f4a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ee2:	1dbb      	adds	r3, r7, #6
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d107      	bne.n	8007efa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007eea:	2308      	movs	r3, #8
 8007eec:	18fb      	adds	r3, r7, r3
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ef8:	e019      	b.n	8007f2e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007efa:	2308      	movs	r3, #8
 8007efc:	18fb      	adds	r3, r7, r3
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	0a1b      	lsrs	r3, r3, #8
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0e:	6a39      	ldr	r1, [r7, #32]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	0018      	movs	r0, r3
 8007f14:	f000 f881 	bl	800801a <I2C_WaitOnTXISFlagUntilTimeout>
 8007f18:	1e03      	subs	r3, r0, #0
 8007f1a:	d001      	beq.n	8007f20 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e014      	b.n	8007f4a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f20:	2308      	movs	r3, #8
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007f2e:	6a3a      	ldr	r2, [r7, #32]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	0013      	movs	r3, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2140      	movs	r1, #64	; 0x40
 8007f3c:	f000 f82e 	bl	8007f9c <I2C_WaitOnFlagUntilTimeout>
 8007f40:	1e03      	subs	r3, r0, #0
 8007f42:	d001      	beq.n	8007f48 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	b004      	add	sp, #16
 8007f50:	bdb0      	pop	{r4, r5, r7, pc}
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	80002000 	.word	0x80002000

08007f58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2202      	movs	r2, #2
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d103      	bne.n	8007f76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	4013      	ands	r3, r2
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d007      	beq.n	8007f94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2101      	movs	r1, #1
 8007f90:	430a      	orrs	r2, r1
 8007f92:	619a      	str	r2, [r3, #24]
  }
}
 8007f94:	46c0      	nop			; (mov r8, r8)
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b002      	add	sp, #8
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	1dfb      	adds	r3, r7, #7
 8007faa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fac:	e021      	b.n	8007ff2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	d01e      	beq.n	8007ff2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb4:	f7fc fd95 	bl	8004ae2 <HAL_GetTick>
 8007fb8:	0002      	movs	r2, r0
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d302      	bcc.n	8007fca <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d113      	bne.n	8007ff2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	2220      	movs	r2, #32
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2241      	movs	r2, #65	; 0x41
 8007fda:	2120      	movs	r1, #32
 8007fdc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2242      	movs	r2, #66	; 0x42
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2240      	movs	r2, #64	; 0x40
 8007fea:	2100      	movs	r1, #0
 8007fec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e00f      	b.n	8008012 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	425a      	negs	r2, r3
 8008002:	4153      	adcs	r3, r2
 8008004:	b2db      	uxtb	r3, r3
 8008006:	001a      	movs	r2, r3
 8008008:	1dfb      	adds	r3, r7, #7
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d0ce      	beq.n	8007fae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	0018      	movs	r0, r3
 8008014:	46bd      	mov	sp, r7
 8008016:	b004      	add	sp, #16
 8008018:	bd80      	pop	{r7, pc}

0800801a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008026:	e02b      	b.n	8008080 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f86e 	bl	8008110 <I2C_IsAcknowledgeFailed>
 8008034:	1e03      	subs	r3, r0, #0
 8008036:	d001      	beq.n	800803c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e029      	b.n	8008090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	3301      	adds	r3, #1
 8008040:	d01e      	beq.n	8008080 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008042:	f7fc fd4e 	bl	8004ae2 <HAL_GetTick>
 8008046:	0002      	movs	r2, r0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	429a      	cmp	r2, r3
 8008050:	d302      	bcc.n	8008058 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d113      	bne.n	8008080 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805c:	2220      	movs	r2, #32
 800805e:	431a      	orrs	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2241      	movs	r2, #65	; 0x41
 8008068:	2120      	movs	r1, #32
 800806a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2242      	movs	r2, #66	; 0x42
 8008070:	2100      	movs	r1, #0
 8008072:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2240      	movs	r2, #64	; 0x40
 8008078:	2100      	movs	r1, #0
 800807a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e007      	b.n	8008090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	2202      	movs	r2, #2
 8008088:	4013      	ands	r3, r2
 800808a:	2b02      	cmp	r3, #2
 800808c:	d1cc      	bne.n	8008028 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	0018      	movs	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	b004      	add	sp, #16
 8008096:	bd80      	pop	{r7, pc}

08008098 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080a4:	e028      	b.n	80080f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	0018      	movs	r0, r3
 80080ae:	f000 f82f 	bl	8008110 <I2C_IsAcknowledgeFailed>
 80080b2:	1e03      	subs	r3, r0, #0
 80080b4:	d001      	beq.n	80080ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e026      	b.n	8008108 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ba:	f7fc fd12 	bl	8004ae2 <HAL_GetTick>
 80080be:	0002      	movs	r2, r0
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d302      	bcc.n	80080d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d113      	bne.n	80080f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d4:	2220      	movs	r2, #32
 80080d6:	431a      	orrs	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2241      	movs	r2, #65	; 0x41
 80080e0:	2120      	movs	r1, #32
 80080e2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2242      	movs	r2, #66	; 0x42
 80080e8:	2100      	movs	r1, #0
 80080ea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2240      	movs	r2, #64	; 0x40
 80080f0:	2100      	movs	r1, #0
 80080f2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e007      	b.n	8008108 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	2220      	movs	r2, #32
 8008100:	4013      	ands	r3, r2
 8008102:	2b20      	cmp	r3, #32
 8008104:	d1cf      	bne.n	80080a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	0018      	movs	r0, r3
 800810a:	46bd      	mov	sp, r7
 800810c:	b004      	add	sp, #16
 800810e:	bd80      	pop	{r7, pc}

08008110 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	2210      	movs	r2, #16
 8008124:	4013      	ands	r3, r2
 8008126:	2b10      	cmp	r3, #16
 8008128:	d151      	bne.n	80081ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800812a:	e021      	b.n	8008170 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3301      	adds	r3, #1
 8008130:	d01e      	beq.n	8008170 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008132:	f7fc fcd6 	bl	8004ae2 <HAL_GetTick>
 8008136:	0002      	movs	r2, r0
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	429a      	cmp	r2, r3
 8008140:	d302      	bcc.n	8008148 <I2C_IsAcknowledgeFailed+0x38>
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d113      	bne.n	8008170 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814c:	2220      	movs	r2, #32
 800814e:	431a      	orrs	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2241      	movs	r2, #65	; 0x41
 8008158:	2120      	movs	r1, #32
 800815a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2242      	movs	r2, #66	; 0x42
 8008160:	2100      	movs	r1, #0
 8008162:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2240      	movs	r2, #64	; 0x40
 8008168:	2100      	movs	r1, #0
 800816a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e02f      	b.n	80081d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	2220      	movs	r2, #32
 8008178:	4013      	ands	r3, r2
 800817a:	2b20      	cmp	r3, #32
 800817c:	d1d6      	bne.n	800812c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2210      	movs	r2, #16
 8008184:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2220      	movs	r2, #32
 800818c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	0018      	movs	r0, r3
 8008192:	f7ff fee1 	bl	8007f58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	490d      	ldr	r1, [pc, #52]	; (80081d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80081a2:	400a      	ands	r2, r1
 80081a4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081aa:	2204      	movs	r2, #4
 80081ac:	431a      	orrs	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2241      	movs	r2, #65	; 0x41
 80081b6:	2120      	movs	r1, #32
 80081b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2242      	movs	r2, #66	; 0x42
 80081be:	2100      	movs	r1, #0
 80081c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2240      	movs	r2, #64	; 0x40
 80081c6:	2100      	movs	r1, #0
 80081c8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e000      	b.n	80081d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	0018      	movs	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	b004      	add	sp, #16
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	fe00e800 	.word	0xfe00e800

080081dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80081dc:	b590      	push	{r4, r7, lr}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	0008      	movs	r0, r1
 80081e6:	0011      	movs	r1, r2
 80081e8:	607b      	str	r3, [r7, #4]
 80081ea:	240a      	movs	r4, #10
 80081ec:	193b      	adds	r3, r7, r4
 80081ee:	1c02      	adds	r2, r0, #0
 80081f0:	801a      	strh	r2, [r3, #0]
 80081f2:	2009      	movs	r0, #9
 80081f4:	183b      	adds	r3, r7, r0
 80081f6:	1c0a      	adds	r2, r1, #0
 80081f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	0d51      	lsrs	r1, r2, #21
 8008204:	2280      	movs	r2, #128	; 0x80
 8008206:	00d2      	lsls	r2, r2, #3
 8008208:	400a      	ands	r2, r1
 800820a:	490e      	ldr	r1, [pc, #56]	; (8008244 <I2C_TransferConfig+0x68>)
 800820c:	430a      	orrs	r2, r1
 800820e:	43d2      	mvns	r2, r2
 8008210:	401a      	ands	r2, r3
 8008212:	0011      	movs	r1, r2
 8008214:	193b      	adds	r3, r7, r4
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	059b      	lsls	r3, r3, #22
 800821a:	0d9a      	lsrs	r2, r3, #22
 800821c:	183b      	adds	r3, r7, r0
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	0418      	lsls	r0, r3, #16
 8008222:	23ff      	movs	r3, #255	; 0xff
 8008224:	041b      	lsls	r3, r3, #16
 8008226:	4003      	ands	r3, r0
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	431a      	orrs	r2, r3
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	431a      	orrs	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	46bd      	mov	sp, r7
 800823e:	b005      	add	sp, #20
 8008240:	bd90      	pop	{r4, r7, pc}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	03ff63ff 	.word	0x03ff63ff

08008248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2241      	movs	r2, #65	; 0x41
 8008256:	5c9b      	ldrb	r3, [r3, r2]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b20      	cmp	r3, #32
 800825c:	d138      	bne.n	80082d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2240      	movs	r2, #64	; 0x40
 8008262:	5c9b      	ldrb	r3, [r3, r2]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008268:	2302      	movs	r3, #2
 800826a:	e032      	b.n	80082d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2240      	movs	r2, #64	; 0x40
 8008270:	2101      	movs	r1, #1
 8008272:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2241      	movs	r2, #65	; 0x41
 8008278:	2124      	movs	r1, #36	; 0x24
 800827a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2101      	movs	r1, #1
 8008288:	438a      	bics	r2, r1
 800828a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4911      	ldr	r1, [pc, #68]	; (80082dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008298:	400a      	ands	r2, r1
 800829a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6819      	ldr	r1, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2101      	movs	r1, #1
 80082b8:	430a      	orrs	r2, r1
 80082ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2241      	movs	r2, #65	; 0x41
 80082c0:	2120      	movs	r1, #32
 80082c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2240      	movs	r2, #64	; 0x40
 80082c8:	2100      	movs	r1, #0
 80082ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e000      	b.n	80082d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
  }
}
 80082d2:	0018      	movs	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b002      	add	sp, #8
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	ffffefff 	.word	0xffffefff

080082e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2241      	movs	r2, #65	; 0x41
 80082ee:	5c9b      	ldrb	r3, [r3, r2]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d139      	bne.n	800836a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2240      	movs	r2, #64	; 0x40
 80082fa:	5c9b      	ldrb	r3, [r3, r2]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008300:	2302      	movs	r3, #2
 8008302:	e033      	b.n	800836c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2240      	movs	r2, #64	; 0x40
 8008308:	2101      	movs	r1, #1
 800830a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2241      	movs	r2, #65	; 0x41
 8008310:	2124      	movs	r1, #36	; 0x24
 8008312:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2101      	movs	r1, #1
 8008320:	438a      	bics	r2, r1
 8008322:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4a11      	ldr	r2, [pc, #68]	; (8008374 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008330:	4013      	ands	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2101      	movs	r1, #1
 8008352:	430a      	orrs	r2, r1
 8008354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2241      	movs	r2, #65	; 0x41
 800835a:	2120      	movs	r1, #32
 800835c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2240      	movs	r2, #64	; 0x40
 8008362:	2100      	movs	r1, #0
 8008364:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e000      	b.n	800836c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800836a:	2302      	movs	r3, #2
  }
}
 800836c:	0018      	movs	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	b004      	add	sp, #16
 8008372:	bd80      	pop	{r7, pc}
 8008374:	fffff0ff 	.word	0xfffff0ff

08008378 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 800837c:	4b04      	ldr	r3, [pc, #16]	; (8008390 <HAL_PWR_DisablePVD+0x18>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4b03      	ldr	r3, [pc, #12]	; (8008390 <HAL_PWR_DisablePVD+0x18>)
 8008382:	2110      	movs	r1, #16
 8008384:	438a      	bics	r2, r1
 8008386:	601a      	str	r2, [r3, #0]
}
 8008388:	46c0      	nop			; (mov r8, r8)
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	40007000 	.word	0x40007000

08008394 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	000a      	movs	r2, r1
 800839e:	1cfb      	adds	r3, r7, #3
 80083a0:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80083a6:	4b23      	ldr	r3, [pc, #140]	; (8008434 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	2380      	movs	r3, #128	; 0x80
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4013      	ands	r3, r2
 80083b0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80083b2:	4b21      	ldr	r3, [pc, #132]	; (8008438 <HAL_PWR_EnterSLEEPMode+0xa4>)
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	2201      	movs	r2, #1
 80083b8:	4013      	ands	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <HAL_PWR_EnterSLEEPMode+0x40>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	4b19      	ldr	r3, [pc, #100]	; (8008434 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80083ce:	491b      	ldr	r1, [pc, #108]	; (800843c <HAL_PWR_EnterSLEEPMode+0xa8>)
 80083d0:	400a      	ands	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2203      	movs	r2, #3
 80083de:	4393      	bics	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80083f0:	4b13      	ldr	r3, [pc, #76]	; (8008440 <HAL_PWR_EnterSLEEPMode+0xac>)
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	4b12      	ldr	r3, [pc, #72]	; (8008440 <HAL_PWR_EnterSLEEPMode+0xac>)
 80083f6:	2104      	movs	r1, #4
 80083f8:	438a      	bics	r2, r1
 80083fa:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80083fc:	1cfb      	adds	r3, r7, #3
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008404:	bf30      	wfi
 8008406:	e002      	b.n	800840e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008408:	bf40      	sev
    __WFE();
 800840a:	bf20      	wfe
    __WFE();
 800840c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d009      	beq.n	8008428 <HAL_PWR_EnterSLEEPMode+0x94>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d006      	beq.n	8008428 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800841a:	4b06      	ldr	r3, [pc, #24]	; (8008434 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	4b05      	ldr	r3, [pc, #20]	; (8008434 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008420:	2180      	movs	r1, #128	; 0x80
 8008422:	0089      	lsls	r1, r1, #2
 8008424:	430a      	orrs	r2, r1
 8008426:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8008428:	46c0      	nop			; (mov r8, r8)

}
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	46bd      	mov	sp, r7
 800842e:	b006      	add	sp, #24
 8008430:	bd80      	pop	{r7, pc}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	40007000 	.word	0x40007000
 8008438:	40010000 	.word	0x40010000
 800843c:	fffffdff 	.word	0xfffffdff
 8008440:	e000ed00 	.word	0xe000ed00

08008444 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	000a      	movs	r2, r1
 800844e:	1cfb      	adds	r3, r7, #3
 8008450:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008456:	4b25      	ldr	r3, [pc, #148]	; (80084ec <HAL_PWR_EnterSTOPMode+0xa8>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	2380      	movs	r3, #128	; 0x80
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4013      	ands	r3, r2
 8008460:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008462:	4b23      	ldr	r3, [pc, #140]	; (80084f0 <HAL_PWR_EnterSTOPMode+0xac>)
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	2201      	movs	r2, #1
 8008468:	4013      	ands	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <HAL_PWR_EnterSTOPMode+0x40>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008478:	4b1c      	ldr	r3, [pc, #112]	; (80084ec <HAL_PWR_EnterSTOPMode+0xa8>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	4b1b      	ldr	r3, [pc, #108]	; (80084ec <HAL_PWR_EnterSTOPMode+0xa8>)
 800847e:	491d      	ldr	r1, [pc, #116]	; (80084f4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8008480:	400a      	ands	r2, r1
 8008482:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008484:	4b19      	ldr	r3, [pc, #100]	; (80084ec <HAL_PWR_EnterSTOPMode+0xa8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2203      	movs	r2, #3
 800848e:	4393      	bics	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800849a:	4b14      	ldr	r3, [pc, #80]	; (80084ec <HAL_PWR_EnterSTOPMode+0xa8>)
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80084a0:	4b15      	ldr	r3, [pc, #84]	; (80084f8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80084a6:	2104      	movs	r1, #4
 80084a8:	430a      	orrs	r2, r1
 80084aa:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80084ac:	1cfb      	adds	r3, r7, #3
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80084b4:	bf30      	wfi
 80084b6:	e002      	b.n	80084be <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80084b8:	bf40      	sev
    __WFE();
 80084ba:	bf20      	wfe
    __WFE();
 80084bc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80084be:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80084c4:	2104      	movs	r1, #4
 80084c6:	438a      	bics	r2, r1
 80084c8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d009      	beq.n	80084e4 <HAL_PWR_EnterSTOPMode+0xa0>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d006      	beq.n	80084e4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <HAL_PWR_EnterSTOPMode+0xa8>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4b04      	ldr	r3, [pc, #16]	; (80084ec <HAL_PWR_EnterSTOPMode+0xa8>)
 80084dc:	2180      	movs	r1, #128	; 0x80
 80084de:	0089      	lsls	r1, r1, #2
 80084e0:	430a      	orrs	r2, r1
 80084e2:	601a      	str	r2, [r3, #0]
  }
}
 80084e4:	46c0      	nop			; (mov r8, r8)
 80084e6:	46bd      	mov	sp, r7
 80084e8:	b006      	add	sp, #24
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	40007000 	.word	0x40007000
 80084f0:	40010000 	.word	0x40010000
 80084f4:	fffffdff 	.word	0xfffffdff
 80084f8:	e000ed00 	.word	0xe000ed00

080084fc <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008500:	4b04      	ldr	r3, [pc, #16]	; (8008514 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	4b03      	ldr	r3, [pc, #12]	; (8008514 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008506:	2180      	movs	r1, #128	; 0x80
 8008508:	00c9      	lsls	r1, r1, #3
 800850a:	430a      	orrs	r2, r1
 800850c:	601a      	str	r2, [r3, #0]
}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	40007000 	.word	0x40007000

08008518 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <HAL_PWREx_EnableUltraLowPower+0x18>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b03      	ldr	r3, [pc, #12]	; (8008530 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008522:	2180      	movs	r1, #128	; 0x80
 8008524:	0089      	lsls	r1, r1, #2
 8008526:	430a      	orrs	r2, r1
 8008528:	601a      	str	r2, [r3, #0]
}
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	40007000 	.word	0x40007000

08008534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008534:	b5b0      	push	{r4, r5, r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f000 fbbf 	bl	8008cc6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008548:	4bc9      	ldr	r3, [pc, #804]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	220c      	movs	r2, #12
 800854e:	4013      	ands	r3, r2
 8008550:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008552:	4bc7      	ldr	r3, [pc, #796]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	2380      	movs	r3, #128	; 0x80
 8008558:	025b      	lsls	r3, r3, #9
 800855a:	4013      	ands	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2201      	movs	r2, #1
 8008564:	4013      	ands	r3, r2
 8008566:	d100      	bne.n	800856a <HAL_RCC_OscConfig+0x36>
 8008568:	e07e      	b.n	8008668 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	2b08      	cmp	r3, #8
 800856e:	d007      	beq.n	8008580 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	2b0c      	cmp	r3, #12
 8008574:	d112      	bne.n	800859c <HAL_RCC_OscConfig+0x68>
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	2380      	movs	r3, #128	; 0x80
 800857a:	025b      	lsls	r3, r3, #9
 800857c:	429a      	cmp	r2, r3
 800857e:	d10d      	bne.n	800859c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008580:	4bbb      	ldr	r3, [pc, #748]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	2380      	movs	r3, #128	; 0x80
 8008586:	029b      	lsls	r3, r3, #10
 8008588:	4013      	ands	r3, r2
 800858a:	d100      	bne.n	800858e <HAL_RCC_OscConfig+0x5a>
 800858c:	e06b      	b.n	8008666 <HAL_RCC_OscConfig+0x132>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d167      	bne.n	8008666 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f000 fb95 	bl	8008cc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	025b      	lsls	r3, r3, #9
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d107      	bne.n	80085b8 <HAL_RCC_OscConfig+0x84>
 80085a8:	4bb1      	ldr	r3, [pc, #708]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	4bb0      	ldr	r3, [pc, #704]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085ae:	2180      	movs	r1, #128	; 0x80
 80085b0:	0249      	lsls	r1, r1, #9
 80085b2:	430a      	orrs	r2, r1
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e027      	b.n	8008608 <HAL_RCC_OscConfig+0xd4>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	23a0      	movs	r3, #160	; 0xa0
 80085be:	02db      	lsls	r3, r3, #11
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d10e      	bne.n	80085e2 <HAL_RCC_OscConfig+0xae>
 80085c4:	4baa      	ldr	r3, [pc, #680]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4ba9      	ldr	r3, [pc, #676]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085ca:	2180      	movs	r1, #128	; 0x80
 80085cc:	02c9      	lsls	r1, r1, #11
 80085ce:	430a      	orrs	r2, r1
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	4ba7      	ldr	r3, [pc, #668]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4ba6      	ldr	r3, [pc, #664]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085d8:	2180      	movs	r1, #128	; 0x80
 80085da:	0249      	lsls	r1, r1, #9
 80085dc:	430a      	orrs	r2, r1
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e012      	b.n	8008608 <HAL_RCC_OscConfig+0xd4>
 80085e2:	4ba3      	ldr	r3, [pc, #652]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	4ba2      	ldr	r3, [pc, #648]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085e8:	49a2      	ldr	r1, [pc, #648]	; (8008874 <HAL_RCC_OscConfig+0x340>)
 80085ea:	400a      	ands	r2, r1
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	4ba0      	ldr	r3, [pc, #640]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	2380      	movs	r3, #128	; 0x80
 80085f4:	025b      	lsls	r3, r3, #9
 80085f6:	4013      	ands	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4b9c      	ldr	r3, [pc, #624]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	4b9b      	ldr	r3, [pc, #620]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008602:	499d      	ldr	r1, [pc, #628]	; (8008878 <HAL_RCC_OscConfig+0x344>)
 8008604:	400a      	ands	r2, r1
 8008606:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d015      	beq.n	800863c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008610:	f7fc fa67 	bl	8004ae2 <HAL_GetTick>
 8008614:	0003      	movs	r3, r0
 8008616:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008618:	e009      	b.n	800862e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800861a:	f7fc fa62 	bl	8004ae2 <HAL_GetTick>
 800861e:	0002      	movs	r2, r0
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b64      	cmp	r3, #100	; 0x64
 8008626:	d902      	bls.n	800862e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	f000 fb4c 	bl	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800862e:	4b90      	ldr	r3, [pc, #576]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	2380      	movs	r3, #128	; 0x80
 8008634:	029b      	lsls	r3, r3, #10
 8008636:	4013      	ands	r3, r2
 8008638:	d0ef      	beq.n	800861a <HAL_RCC_OscConfig+0xe6>
 800863a:	e015      	b.n	8008668 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800863c:	f7fc fa51 	bl	8004ae2 <HAL_GetTick>
 8008640:	0003      	movs	r3, r0
 8008642:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008644:	e008      	b.n	8008658 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008646:	f7fc fa4c 	bl	8004ae2 <HAL_GetTick>
 800864a:	0002      	movs	r2, r0
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b64      	cmp	r3, #100	; 0x64
 8008652:	d901      	bls.n	8008658 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e336      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008658:	4b85      	ldr	r3, [pc, #532]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	2380      	movs	r3, #128	; 0x80
 800865e:	029b      	lsls	r3, r3, #10
 8008660:	4013      	ands	r3, r2
 8008662:	d1f0      	bne.n	8008646 <HAL_RCC_OscConfig+0x112>
 8008664:	e000      	b.n	8008668 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008666:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2202      	movs	r2, #2
 800866e:	4013      	ands	r3, r2
 8008670:	d100      	bne.n	8008674 <HAL_RCC_OscConfig+0x140>
 8008672:	e099      	b.n	80087a8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	2220      	movs	r2, #32
 800867e:	4013      	ands	r3, r2
 8008680:	d009      	beq.n	8008696 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008682:	4b7b      	ldr	r3, [pc, #492]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	4b7a      	ldr	r3, [pc, #488]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008688:	2120      	movs	r1, #32
 800868a:	430a      	orrs	r2, r1
 800868c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	2220      	movs	r2, #32
 8008692:	4393      	bics	r3, r2
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	2b04      	cmp	r3, #4
 800869a:	d005      	beq.n	80086a8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	2b0c      	cmp	r3, #12
 80086a0:	d13e      	bne.n	8008720 <HAL_RCC_OscConfig+0x1ec>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d13b      	bne.n	8008720 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80086a8:	4b71      	ldr	r3, [pc, #452]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2204      	movs	r2, #4
 80086ae:	4013      	ands	r3, r2
 80086b0:	d004      	beq.n	80086bc <HAL_RCC_OscConfig+0x188>
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e304      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086bc:	4b6c      	ldr	r3, [pc, #432]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4a6e      	ldr	r2, [pc, #440]	; (800887c <HAL_RCC_OscConfig+0x348>)
 80086c2:	4013      	ands	r3, r2
 80086c4:	0019      	movs	r1, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	021a      	lsls	r2, r3, #8
 80086cc:	4b68      	ldr	r3, [pc, #416]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80086d2:	4b67      	ldr	r3, [pc, #412]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2209      	movs	r2, #9
 80086d8:	4393      	bics	r3, r2
 80086da:	0019      	movs	r1, r3
 80086dc:	4b64      	ldr	r3, [pc, #400]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80086de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e0:	430a      	orrs	r2, r1
 80086e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086e4:	f000 fc42 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 80086e8:	0001      	movs	r1, r0
 80086ea:	4b61      	ldr	r3, [pc, #388]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	091b      	lsrs	r3, r3, #4
 80086f0:	220f      	movs	r2, #15
 80086f2:	4013      	ands	r3, r2
 80086f4:	4a62      	ldr	r2, [pc, #392]	; (8008880 <HAL_RCC_OscConfig+0x34c>)
 80086f6:	5cd3      	ldrb	r3, [r2, r3]
 80086f8:	000a      	movs	r2, r1
 80086fa:	40da      	lsrs	r2, r3
 80086fc:	4b61      	ldr	r3, [pc, #388]	; (8008884 <HAL_RCC_OscConfig+0x350>)
 80086fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008700:	4b61      	ldr	r3, [pc, #388]	; (8008888 <HAL_RCC_OscConfig+0x354>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2513      	movs	r5, #19
 8008706:	197c      	adds	r4, r7, r5
 8008708:	0018      	movs	r0, r3
 800870a:	f7fc f9e1 	bl	8004ad0 <HAL_InitTick>
 800870e:	0003      	movs	r3, r0
 8008710:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008712:	197b      	adds	r3, r7, r5
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d046      	beq.n	80087a8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800871a:	197b      	adds	r3, r7, r5
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	e2d2      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d027      	beq.n	8008776 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008726:	4b52      	ldr	r3, [pc, #328]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2209      	movs	r2, #9
 800872c:	4393      	bics	r3, r2
 800872e:	0019      	movs	r1, r3
 8008730:	4b4f      	ldr	r3, [pc, #316]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008734:	430a      	orrs	r2, r1
 8008736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008738:	f7fc f9d3 	bl	8004ae2 <HAL_GetTick>
 800873c:	0003      	movs	r3, r0
 800873e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008740:	e008      	b.n	8008754 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008742:	f7fc f9ce 	bl	8004ae2 <HAL_GetTick>
 8008746:	0002      	movs	r2, r0
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e2b8      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008754:	4b46      	ldr	r3, [pc, #280]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2204      	movs	r2, #4
 800875a:	4013      	ands	r3, r2
 800875c:	d0f1      	beq.n	8008742 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800875e:	4b44      	ldr	r3, [pc, #272]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	4a46      	ldr	r2, [pc, #280]	; (800887c <HAL_RCC_OscConfig+0x348>)
 8008764:	4013      	ands	r3, r2
 8008766:	0019      	movs	r1, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	021a      	lsls	r2, r3, #8
 800876e:	4b40      	ldr	r3, [pc, #256]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
 8008774:	e018      	b.n	80087a8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008776:	4b3e      	ldr	r3, [pc, #248]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	4b3d      	ldr	r3, [pc, #244]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 800877c:	2101      	movs	r1, #1
 800877e:	438a      	bics	r2, r1
 8008780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008782:	f7fc f9ae 	bl	8004ae2 <HAL_GetTick>
 8008786:	0003      	movs	r3, r0
 8008788:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800878c:	f7fc f9a9 	bl	8004ae2 <HAL_GetTick>
 8008790:	0002      	movs	r2, r0
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e293      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800879e:	4b34      	ldr	r3, [pc, #208]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2204      	movs	r2, #4
 80087a4:	4013      	ands	r3, r2
 80087a6:	d1f1      	bne.n	800878c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2210      	movs	r2, #16
 80087ae:	4013      	ands	r3, r2
 80087b0:	d100      	bne.n	80087b4 <HAL_RCC_OscConfig+0x280>
 80087b2:	e0a2      	b.n	80088fa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d140      	bne.n	800883c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80087ba:	4b2d      	ldr	r3, [pc, #180]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	2380      	movs	r3, #128	; 0x80
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4013      	ands	r3, r2
 80087c4:	d005      	beq.n	80087d2 <HAL_RCC_OscConfig+0x29e>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e279      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087d2:	4b27      	ldr	r3, [pc, #156]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	4a2d      	ldr	r2, [pc, #180]	; (800888c <HAL_RCC_OscConfig+0x358>)
 80087d8:	4013      	ands	r3, r2
 80087da:	0019      	movs	r1, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087e0:	4b23      	ldr	r3, [pc, #140]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80087e2:	430a      	orrs	r2, r1
 80087e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087e6:	4b22      	ldr	r3, [pc, #136]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	0a19      	lsrs	r1, r3, #8
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	061a      	lsls	r2, r3, #24
 80087f4:	4b1e      	ldr	r3, [pc, #120]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	0b5b      	lsrs	r3, r3, #13
 8008800:	3301      	adds	r3, #1
 8008802:	2280      	movs	r2, #128	; 0x80
 8008804:	0212      	lsls	r2, r2, #8
 8008806:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008808:	4b19      	ldr	r3, [pc, #100]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	091b      	lsrs	r3, r3, #4
 800880e:	210f      	movs	r1, #15
 8008810:	400b      	ands	r3, r1
 8008812:	491b      	ldr	r1, [pc, #108]	; (8008880 <HAL_RCC_OscConfig+0x34c>)
 8008814:	5ccb      	ldrb	r3, [r1, r3]
 8008816:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008818:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <HAL_RCC_OscConfig+0x350>)
 800881a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800881c:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <HAL_RCC_OscConfig+0x354>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2513      	movs	r5, #19
 8008822:	197c      	adds	r4, r7, r5
 8008824:	0018      	movs	r0, r3
 8008826:	f7fc f953 	bl	8004ad0 <HAL_InitTick>
 800882a:	0003      	movs	r3, r0
 800882c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800882e:	197b      	adds	r3, r7, r5
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d061      	beq.n	80088fa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008836:	197b      	adds	r3, r7, r5
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	e244      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d040      	beq.n	80088c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	4b09      	ldr	r3, [pc, #36]	; (8008870 <HAL_RCC_OscConfig+0x33c>)
 800884a:	2180      	movs	r1, #128	; 0x80
 800884c:	0049      	lsls	r1, r1, #1
 800884e:	430a      	orrs	r2, r1
 8008850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008852:	f7fc f946 	bl	8004ae2 <HAL_GetTick>
 8008856:	0003      	movs	r3, r0
 8008858:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800885a:	e019      	b.n	8008890 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800885c:	f7fc f941 	bl	8004ae2 <HAL_GetTick>
 8008860:	0002      	movs	r2, r0
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d912      	bls.n	8008890 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e22b      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
 800886e:	46c0      	nop			; (mov r8, r8)
 8008870:	40021000 	.word	0x40021000
 8008874:	fffeffff 	.word	0xfffeffff
 8008878:	fffbffff 	.word	0xfffbffff
 800887c:	ffffe0ff 	.word	0xffffe0ff
 8008880:	0801e718 	.word	0x0801e718
 8008884:	20000070 	.word	0x20000070
 8008888:	20000074 	.word	0x20000074
 800888c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008890:	4bca      	ldr	r3, [pc, #808]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	2380      	movs	r3, #128	; 0x80
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4013      	ands	r3, r2
 800889a:	d0df      	beq.n	800885c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800889c:	4bc7      	ldr	r3, [pc, #796]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	4ac7      	ldr	r2, [pc, #796]	; (8008bc0 <HAL_RCC_OscConfig+0x68c>)
 80088a2:	4013      	ands	r3, r2
 80088a4:	0019      	movs	r1, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088aa:	4bc4      	ldr	r3, [pc, #784]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80088b0:	4bc2      	ldr	r3, [pc, #776]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	0a19      	lsrs	r1, r3, #8
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	061a      	lsls	r2, r3, #24
 80088be:	4bbf      	ldr	r3, [pc, #764]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 80088c0:	430a      	orrs	r2, r1
 80088c2:	605a      	str	r2, [r3, #4]
 80088c4:	e019      	b.n	80088fa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80088c6:	4bbd      	ldr	r3, [pc, #756]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4bbc      	ldr	r3, [pc, #752]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 80088cc:	49bd      	ldr	r1, [pc, #756]	; (8008bc4 <HAL_RCC_OscConfig+0x690>)
 80088ce:	400a      	ands	r2, r1
 80088d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d2:	f7fc f906 	bl	8004ae2 <HAL_GetTick>
 80088d6:	0003      	movs	r3, r0
 80088d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80088dc:	f7fc f901 	bl	8004ae2 <HAL_GetTick>
 80088e0:	0002      	movs	r2, r0
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e1eb      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80088ee:	4bb3      	ldr	r3, [pc, #716]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	2380      	movs	r3, #128	; 0x80
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4013      	ands	r3, r2
 80088f8:	d1f0      	bne.n	80088dc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2208      	movs	r2, #8
 8008900:	4013      	ands	r3, r2
 8008902:	d036      	beq.n	8008972 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d019      	beq.n	8008940 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800890c:	4bab      	ldr	r3, [pc, #684]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 800890e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008910:	4baa      	ldr	r3, [pc, #680]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008912:	2101      	movs	r1, #1
 8008914:	430a      	orrs	r2, r1
 8008916:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008918:	f7fc f8e3 	bl	8004ae2 <HAL_GetTick>
 800891c:	0003      	movs	r3, r0
 800891e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008920:	e008      	b.n	8008934 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008922:	f7fc f8de 	bl	8004ae2 <HAL_GetTick>
 8008926:	0002      	movs	r2, r0
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d901      	bls.n	8008934 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e1c8      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008934:	4ba1      	ldr	r3, [pc, #644]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008938:	2202      	movs	r2, #2
 800893a:	4013      	ands	r3, r2
 800893c:	d0f1      	beq.n	8008922 <HAL_RCC_OscConfig+0x3ee>
 800893e:	e018      	b.n	8008972 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008940:	4b9e      	ldr	r3, [pc, #632]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008944:	4b9d      	ldr	r3, [pc, #628]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008946:	2101      	movs	r1, #1
 8008948:	438a      	bics	r2, r1
 800894a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800894c:	f7fc f8c9 	bl	8004ae2 <HAL_GetTick>
 8008950:	0003      	movs	r3, r0
 8008952:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008954:	e008      	b.n	8008968 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008956:	f7fc f8c4 	bl	8004ae2 <HAL_GetTick>
 800895a:	0002      	movs	r2, r0
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e1ae      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008968:	4b94      	ldr	r3, [pc, #592]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 800896a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896c:	2202      	movs	r2, #2
 800896e:	4013      	ands	r3, r2
 8008970:	d1f1      	bne.n	8008956 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2204      	movs	r2, #4
 8008978:	4013      	ands	r3, r2
 800897a:	d100      	bne.n	800897e <HAL_RCC_OscConfig+0x44a>
 800897c:	e0ae      	b.n	8008adc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800897e:	2023      	movs	r0, #35	; 0x23
 8008980:	183b      	adds	r3, r7, r0
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008986:	4b8d      	ldr	r3, [pc, #564]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898a:	2380      	movs	r3, #128	; 0x80
 800898c:	055b      	lsls	r3, r3, #21
 800898e:	4013      	ands	r3, r2
 8008990:	d109      	bne.n	80089a6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008992:	4b8a      	ldr	r3, [pc, #552]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008996:	4b89      	ldr	r3, [pc, #548]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	0549      	lsls	r1, r1, #21
 800899c:	430a      	orrs	r2, r1
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80089a0:	183b      	adds	r3, r7, r0
 80089a2:	2201      	movs	r2, #1
 80089a4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089a6:	4b88      	ldr	r3, [pc, #544]	; (8008bc8 <HAL_RCC_OscConfig+0x694>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	2380      	movs	r3, #128	; 0x80
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	4013      	ands	r3, r2
 80089b0:	d11a      	bne.n	80089e8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089b2:	4b85      	ldr	r3, [pc, #532]	; (8008bc8 <HAL_RCC_OscConfig+0x694>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	4b84      	ldr	r3, [pc, #528]	; (8008bc8 <HAL_RCC_OscConfig+0x694>)
 80089b8:	2180      	movs	r1, #128	; 0x80
 80089ba:	0049      	lsls	r1, r1, #1
 80089bc:	430a      	orrs	r2, r1
 80089be:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089c0:	f7fc f88f 	bl	8004ae2 <HAL_GetTick>
 80089c4:	0003      	movs	r3, r0
 80089c6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ca:	f7fc f88a 	bl	8004ae2 <HAL_GetTick>
 80089ce:	0002      	movs	r2, r0
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b64      	cmp	r3, #100	; 0x64
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e174      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089dc:	4b7a      	ldr	r3, [pc, #488]	; (8008bc8 <HAL_RCC_OscConfig+0x694>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	2380      	movs	r3, #128	; 0x80
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	4013      	ands	r3, r2
 80089e6:	d0f0      	beq.n	80089ca <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d107      	bne.n	8008a04 <HAL_RCC_OscConfig+0x4d0>
 80089f4:	4b71      	ldr	r3, [pc, #452]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 80089f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089f8:	4b70      	ldr	r3, [pc, #448]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 80089fa:	2180      	movs	r1, #128	; 0x80
 80089fc:	0049      	lsls	r1, r1, #1
 80089fe:	430a      	orrs	r2, r1
 8008a00:	651a      	str	r2, [r3, #80]	; 0x50
 8008a02:	e031      	b.n	8008a68 <HAL_RCC_OscConfig+0x534>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCC_OscConfig+0x4f2>
 8008a0c:	4b6b      	ldr	r3, [pc, #428]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a10:	4b6a      	ldr	r3, [pc, #424]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a12:	496c      	ldr	r1, [pc, #432]	; (8008bc4 <HAL_RCC_OscConfig+0x690>)
 8008a14:	400a      	ands	r2, r1
 8008a16:	651a      	str	r2, [r3, #80]	; 0x50
 8008a18:	4b68      	ldr	r3, [pc, #416]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a1c:	4b67      	ldr	r3, [pc, #412]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a1e:	496b      	ldr	r1, [pc, #428]	; (8008bcc <HAL_RCC_OscConfig+0x698>)
 8008a20:	400a      	ands	r2, r1
 8008a22:	651a      	str	r2, [r3, #80]	; 0x50
 8008a24:	e020      	b.n	8008a68 <HAL_RCC_OscConfig+0x534>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	23a0      	movs	r3, #160	; 0xa0
 8008a2c:	00db      	lsls	r3, r3, #3
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d10e      	bne.n	8008a50 <HAL_RCC_OscConfig+0x51c>
 8008a32:	4b62      	ldr	r3, [pc, #392]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a36:	4b61      	ldr	r3, [pc, #388]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a38:	2180      	movs	r1, #128	; 0x80
 8008a3a:	00c9      	lsls	r1, r1, #3
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	651a      	str	r2, [r3, #80]	; 0x50
 8008a40:	4b5e      	ldr	r3, [pc, #376]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a44:	4b5d      	ldr	r3, [pc, #372]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a46:	2180      	movs	r1, #128	; 0x80
 8008a48:	0049      	lsls	r1, r1, #1
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50
 8008a4e:	e00b      	b.n	8008a68 <HAL_RCC_OscConfig+0x534>
 8008a50:	4b5a      	ldr	r3, [pc, #360]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a54:	4b59      	ldr	r3, [pc, #356]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a56:	495b      	ldr	r1, [pc, #364]	; (8008bc4 <HAL_RCC_OscConfig+0x690>)
 8008a58:	400a      	ands	r2, r1
 8008a5a:	651a      	str	r2, [r3, #80]	; 0x50
 8008a5c:	4b57      	ldr	r3, [pc, #348]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a60:	4b56      	ldr	r3, [pc, #344]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a62:	495a      	ldr	r1, [pc, #360]	; (8008bcc <HAL_RCC_OscConfig+0x698>)
 8008a64:	400a      	ands	r2, r1
 8008a66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d015      	beq.n	8008a9c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a70:	f7fc f837 	bl	8004ae2 <HAL_GetTick>
 8008a74:	0003      	movs	r3, r0
 8008a76:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a78:	e009      	b.n	8008a8e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a7a:	f7fc f832 	bl	8004ae2 <HAL_GetTick>
 8008a7e:	0002      	movs	r2, r0
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	4a52      	ldr	r2, [pc, #328]	; (8008bd0 <HAL_RCC_OscConfig+0x69c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e11b      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a8e:	4b4b      	ldr	r3, [pc, #300]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008a90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a92:	2380      	movs	r3, #128	; 0x80
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4013      	ands	r3, r2
 8008a98:	d0ef      	beq.n	8008a7a <HAL_RCC_OscConfig+0x546>
 8008a9a:	e014      	b.n	8008ac6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a9c:	f7fc f821 	bl	8004ae2 <HAL_GetTick>
 8008aa0:	0003      	movs	r3, r0
 8008aa2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008aa4:	e009      	b.n	8008aba <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008aa6:	f7fc f81c 	bl	8004ae2 <HAL_GetTick>
 8008aaa:	0002      	movs	r2, r0
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	4a47      	ldr	r2, [pc, #284]	; (8008bd0 <HAL_RCC_OscConfig+0x69c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e105      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008aba:	4b40      	ldr	r3, [pc, #256]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008abe:	2380      	movs	r3, #128	; 0x80
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	d1ef      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ac6:	2323      	movs	r3, #35	; 0x23
 8008ac8:	18fb      	adds	r3, r7, r3
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d105      	bne.n	8008adc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ad0:	4b3a      	ldr	r3, [pc, #232]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad4:	4b39      	ldr	r3, [pc, #228]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008ad6:	493f      	ldr	r1, [pc, #252]	; (8008bd4 <HAL_RCC_OscConfig+0x6a0>)
 8008ad8:	400a      	ands	r2, r1
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	d049      	beq.n	8008b7a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d026      	beq.n	8008b3c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008aee:	4b33      	ldr	r3, [pc, #204]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	4b32      	ldr	r3, [pc, #200]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008af4:	2101      	movs	r1, #1
 8008af6:	430a      	orrs	r2, r1
 8008af8:	609a      	str	r2, [r3, #8]
 8008afa:	4b30      	ldr	r3, [pc, #192]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008afe:	4b2f      	ldr	r3, [pc, #188]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008b00:	2101      	movs	r1, #1
 8008b02:	430a      	orrs	r2, r1
 8008b04:	635a      	str	r2, [r3, #52]	; 0x34
 8008b06:	4b34      	ldr	r3, [pc, #208]	; (8008bd8 <HAL_RCC_OscConfig+0x6a4>)
 8008b08:	6a1a      	ldr	r2, [r3, #32]
 8008b0a:	4b33      	ldr	r3, [pc, #204]	; (8008bd8 <HAL_RCC_OscConfig+0x6a4>)
 8008b0c:	2180      	movs	r1, #128	; 0x80
 8008b0e:	0189      	lsls	r1, r1, #6
 8008b10:	430a      	orrs	r2, r1
 8008b12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b14:	f7fb ffe5 	bl	8004ae2 <HAL_GetTick>
 8008b18:	0003      	movs	r3, r0
 8008b1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b1c:	e008      	b.n	8008b30 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b1e:	f7fb ffe0 	bl	8004ae2 <HAL_GetTick>
 8008b22:	0002      	movs	r2, r0
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e0ca      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b30:	4b22      	ldr	r3, [pc, #136]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	2202      	movs	r2, #2
 8008b36:	4013      	ands	r3, r2
 8008b38:	d0f1      	beq.n	8008b1e <HAL_RCC_OscConfig+0x5ea>
 8008b3a:	e01e      	b.n	8008b7a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008b3c:	4b1f      	ldr	r3, [pc, #124]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	4b1e      	ldr	r3, [pc, #120]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008b42:	2101      	movs	r1, #1
 8008b44:	438a      	bics	r2, r1
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	4b23      	ldr	r3, [pc, #140]	; (8008bd8 <HAL_RCC_OscConfig+0x6a4>)
 8008b4a:	6a1a      	ldr	r2, [r3, #32]
 8008b4c:	4b22      	ldr	r3, [pc, #136]	; (8008bd8 <HAL_RCC_OscConfig+0x6a4>)
 8008b4e:	4923      	ldr	r1, [pc, #140]	; (8008bdc <HAL_RCC_OscConfig+0x6a8>)
 8008b50:	400a      	ands	r2, r1
 8008b52:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b54:	f7fb ffc5 	bl	8004ae2 <HAL_GetTick>
 8008b58:	0003      	movs	r3, r0
 8008b5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b5c:	e008      	b.n	8008b70 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b5e:	f7fb ffc0 	bl	8004ae2 <HAL_GetTick>
 8008b62:	0002      	movs	r2, r0
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d901      	bls.n	8008b70 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e0aa      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b70:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2202      	movs	r2, #2
 8008b76:	4013      	ands	r3, r2
 8008b78:	d1f1      	bne.n	8008b5e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d100      	bne.n	8008b84 <HAL_RCC_OscConfig+0x650>
 8008b82:	e09f      	b.n	8008cc4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	2b0c      	cmp	r3, #12
 8008b88:	d100      	bne.n	8008b8c <HAL_RCC_OscConfig+0x658>
 8008b8a:	e078      	b.n	8008c7e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d159      	bne.n	8008c48 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b94:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	4b08      	ldr	r3, [pc, #32]	; (8008bbc <HAL_RCC_OscConfig+0x688>)
 8008b9a:	4911      	ldr	r1, [pc, #68]	; (8008be0 <HAL_RCC_OscConfig+0x6ac>)
 8008b9c:	400a      	ands	r2, r1
 8008b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ba0:	f7fb ff9f 	bl	8004ae2 <HAL_GetTick>
 8008ba4:	0003      	movs	r3, r0
 8008ba6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008ba8:	e01c      	b.n	8008be4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008baa:	f7fb ff9a 	bl	8004ae2 <HAL_GetTick>
 8008bae:	0002      	movs	r2, r0
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d915      	bls.n	8008be4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e084      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
 8008bbc:	40021000 	.word	0x40021000
 8008bc0:	ffff1fff 	.word	0xffff1fff
 8008bc4:	fffffeff 	.word	0xfffffeff
 8008bc8:	40007000 	.word	0x40007000
 8008bcc:	fffffbff 	.word	0xfffffbff
 8008bd0:	00001388 	.word	0x00001388
 8008bd4:	efffffff 	.word	0xefffffff
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	ffffdfff 	.word	0xffffdfff
 8008be0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008be4:	4b3a      	ldr	r3, [pc, #232]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	049b      	lsls	r3, r3, #18
 8008bec:	4013      	ands	r3, r2
 8008bee:	d1dc      	bne.n	8008baa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bf0:	4b37      	ldr	r3, [pc, #220]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	4a37      	ldr	r2, [pc, #220]	; (8008cd4 <HAL_RCC_OscConfig+0x7a0>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	431a      	orrs	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	4b31      	ldr	r3, [pc, #196]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c10:	4b2f      	ldr	r3, [pc, #188]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	4b2e      	ldr	r3, [pc, #184]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008c16:	2180      	movs	r1, #128	; 0x80
 8008c18:	0449      	lsls	r1, r1, #17
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c1e:	f7fb ff60 	bl	8004ae2 <HAL_GetTick>
 8008c22:	0003      	movs	r3, r0
 8008c24:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008c26:	e008      	b.n	8008c3a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c28:	f7fb ff5b 	bl	8004ae2 <HAL_GetTick>
 8008c2c:	0002      	movs	r2, r0
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d901      	bls.n	8008c3a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e045      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008c3a:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	2380      	movs	r3, #128	; 0x80
 8008c40:	049b      	lsls	r3, r3, #18
 8008c42:	4013      	ands	r3, r2
 8008c44:	d0f0      	beq.n	8008c28 <HAL_RCC_OscConfig+0x6f4>
 8008c46:	e03d      	b.n	8008cc4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c48:	4b21      	ldr	r3, [pc, #132]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008c4e:	4922      	ldr	r1, [pc, #136]	; (8008cd8 <HAL_RCC_OscConfig+0x7a4>)
 8008c50:	400a      	ands	r2, r1
 8008c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c54:	f7fb ff45 	bl	8004ae2 <HAL_GetTick>
 8008c58:	0003      	movs	r3, r0
 8008c5a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008c5c:	e008      	b.n	8008c70 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c5e:	f7fb ff40 	bl	8004ae2 <HAL_GetTick>
 8008c62:	0002      	movs	r2, r0
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d901      	bls.n	8008c70 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e02a      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008c70:	4b17      	ldr	r3, [pc, #92]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	2380      	movs	r3, #128	; 0x80
 8008c76:	049b      	lsls	r3, r3, #18
 8008c78:	4013      	ands	r3, r2
 8008c7a:	d1f0      	bne.n	8008c5e <HAL_RCC_OscConfig+0x72a>
 8008c7c:	e022      	b.n	8008cc4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e01d      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008c8a:	4b11      	ldr	r3, [pc, #68]	; (8008cd0 <HAL_RCC_OscConfig+0x79c>)
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	2380      	movs	r3, #128	; 0x80
 8008c94:	025b      	lsls	r3, r3, #9
 8008c96:	401a      	ands	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d10f      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	23f0      	movs	r3, #240	; 0xf0
 8008ca4:	039b      	lsls	r3, r3, #14
 8008ca6:	401a      	ands	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d107      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	23c0      	movs	r3, #192	; 0xc0
 8008cb4:	041b      	lsls	r3, r3, #16
 8008cb6:	401a      	ands	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d001      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	b00a      	add	sp, #40	; 0x28
 8008ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8008cce:	46c0      	nop			; (mov r8, r8)
 8008cd0:	40021000 	.word	0x40021000
 8008cd4:	ff02ffff 	.word	0xff02ffff
 8008cd8:	feffffff 	.word	0xfeffffff

08008cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cdc:	b5b0      	push	{r4, r5, r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e128      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cf0:	4b96      	ldr	r3, [pc, #600]	; (8008f4c <HAL_RCC_ClockConfig+0x270>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d91e      	bls.n	8008d3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cfe:	4b93      	ldr	r3, [pc, #588]	; (8008f4c <HAL_RCC_ClockConfig+0x270>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2201      	movs	r2, #1
 8008d04:	4393      	bics	r3, r2
 8008d06:	0019      	movs	r1, r3
 8008d08:	4b90      	ldr	r3, [pc, #576]	; (8008f4c <HAL_RCC_ClockConfig+0x270>)
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d10:	f7fb fee7 	bl	8004ae2 <HAL_GetTick>
 8008d14:	0003      	movs	r3, r0
 8008d16:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d18:	e009      	b.n	8008d2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d1a:	f7fb fee2 	bl	8004ae2 <HAL_GetTick>
 8008d1e:	0002      	movs	r2, r0
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	4a8a      	ldr	r2, [pc, #552]	; (8008f50 <HAL_RCC_ClockConfig+0x274>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e109      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d2e:	4b87      	ldr	r3, [pc, #540]	; (8008f4c <HAL_RCC_ClockConfig+0x270>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2201      	movs	r2, #1
 8008d34:	4013      	ands	r3, r2
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d1ee      	bne.n	8008d1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2202      	movs	r2, #2
 8008d42:	4013      	ands	r3, r2
 8008d44:	d009      	beq.n	8008d5a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d46:	4b83      	ldr	r3, [pc, #524]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	22f0      	movs	r2, #240	; 0xf0
 8008d4c:	4393      	bics	r3, r2
 8008d4e:	0019      	movs	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	4b7f      	ldr	r3, [pc, #508]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008d56:	430a      	orrs	r2, r1
 8008d58:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4013      	ands	r3, r2
 8008d62:	d100      	bne.n	8008d66 <HAL_RCC_ClockConfig+0x8a>
 8008d64:	e089      	b.n	8008e7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d107      	bne.n	8008d7e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d6e:	4b79      	ldr	r3, [pc, #484]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	2380      	movs	r3, #128	; 0x80
 8008d74:	029b      	lsls	r3, r3, #10
 8008d76:	4013      	ands	r3, r2
 8008d78:	d120      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e0e1      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d107      	bne.n	8008d96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d86:	4b73      	ldr	r3, [pc, #460]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	2380      	movs	r3, #128	; 0x80
 8008d8c:	049b      	lsls	r3, r3, #18
 8008d8e:	4013      	ands	r3, r2
 8008d90:	d114      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e0d5      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d106      	bne.n	8008dac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d9e:	4b6d      	ldr	r3, [pc, #436]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2204      	movs	r2, #4
 8008da4:	4013      	ands	r3, r2
 8008da6:	d109      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0ca      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008dac:	4b69      	ldr	r3, [pc, #420]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	2380      	movs	r3, #128	; 0x80
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4013      	ands	r3, r2
 8008db6:	d101      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e0c2      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dbc:	4b65      	ldr	r3, [pc, #404]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	4393      	bics	r3, r2
 8008dc4:	0019      	movs	r1, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	4b62      	ldr	r3, [pc, #392]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008dd0:	f7fb fe87 	bl	8004ae2 <HAL_GetTick>
 8008dd4:	0003      	movs	r3, r0
 8008dd6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d111      	bne.n	8008e04 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008de0:	e009      	b.n	8008df6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008de2:	f7fb fe7e 	bl	8004ae2 <HAL_GetTick>
 8008de6:	0002      	movs	r2, r0
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	4a58      	ldr	r2, [pc, #352]	; (8008f50 <HAL_RCC_ClockConfig+0x274>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d901      	bls.n	8008df6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e0a5      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008df6:	4b57      	ldr	r3, [pc, #348]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	220c      	movs	r2, #12
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b08      	cmp	r3, #8
 8008e00:	d1ef      	bne.n	8008de2 <HAL_RCC_ClockConfig+0x106>
 8008e02:	e03a      	b.n	8008e7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d111      	bne.n	8008e30 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e0c:	e009      	b.n	8008e22 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0e:	f7fb fe68 	bl	8004ae2 <HAL_GetTick>
 8008e12:	0002      	movs	r2, r0
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	4a4d      	ldr	r2, [pc, #308]	; (8008f50 <HAL_RCC_ClockConfig+0x274>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e08f      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e22:	4b4c      	ldr	r3, [pc, #304]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	220c      	movs	r2, #12
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b0c      	cmp	r3, #12
 8008e2c:	d1ef      	bne.n	8008e0e <HAL_RCC_ClockConfig+0x132>
 8008e2e:	e024      	b.n	8008e7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d11b      	bne.n	8008e70 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e38:	e009      	b.n	8008e4e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e3a:	f7fb fe52 	bl	8004ae2 <HAL_GetTick>
 8008e3e:	0002      	movs	r2, r0
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	4a42      	ldr	r2, [pc, #264]	; (8008f50 <HAL_RCC_ClockConfig+0x274>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e079      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e4e:	4b41      	ldr	r3, [pc, #260]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	220c      	movs	r2, #12
 8008e54:	4013      	ands	r3, r2
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d1ef      	bne.n	8008e3a <HAL_RCC_ClockConfig+0x15e>
 8008e5a:	e00e      	b.n	8008e7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e5c:	f7fb fe41 	bl	8004ae2 <HAL_GetTick>
 8008e60:	0002      	movs	r2, r0
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	4a3a      	ldr	r2, [pc, #232]	; (8008f50 <HAL_RCC_ClockConfig+0x274>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e068      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008e70:	4b38      	ldr	r3, [pc, #224]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	220c      	movs	r2, #12
 8008e76:	4013      	ands	r3, r2
 8008e78:	d1f0      	bne.n	8008e5c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e7a:	4b34      	ldr	r3, [pc, #208]	; (8008f4c <HAL_RCC_ClockConfig+0x270>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4013      	ands	r3, r2
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d21e      	bcs.n	8008ec6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e88:	4b30      	ldr	r3, [pc, #192]	; (8008f4c <HAL_RCC_ClockConfig+0x270>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	4393      	bics	r3, r2
 8008e90:	0019      	movs	r1, r3
 8008e92:	4b2e      	ldr	r3, [pc, #184]	; (8008f4c <HAL_RCC_ClockConfig+0x270>)
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008e9a:	f7fb fe22 	bl	8004ae2 <HAL_GetTick>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ea2:	e009      	b.n	8008eb8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ea4:	f7fb fe1d 	bl	8004ae2 <HAL_GetTick>
 8008ea8:	0002      	movs	r2, r0
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	4a28      	ldr	r2, [pc, #160]	; (8008f50 <HAL_RCC_ClockConfig+0x274>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d901      	bls.n	8008eb8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e044      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eb8:	4b24      	ldr	r3, [pc, #144]	; (8008f4c <HAL_RCC_ClockConfig+0x270>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d1ee      	bne.n	8008ea4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2204      	movs	r2, #4
 8008ecc:	4013      	ands	r3, r2
 8008ece:	d009      	beq.n	8008ee4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ed0:	4b20      	ldr	r3, [pc, #128]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	4a20      	ldr	r2, [pc, #128]	; (8008f58 <HAL_RCC_ClockConfig+0x27c>)
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	0019      	movs	r1, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68da      	ldr	r2, [r3, #12]
 8008ede:	4b1d      	ldr	r3, [pc, #116]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2208      	movs	r2, #8
 8008eea:	4013      	ands	r3, r2
 8008eec:	d00a      	beq.n	8008f04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008eee:	4b19      	ldr	r3, [pc, #100]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	4a1a      	ldr	r2, [pc, #104]	; (8008f5c <HAL_RCC_ClockConfig+0x280>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	0019      	movs	r1, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	00da      	lsls	r2, r3, #3
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008f00:	430a      	orrs	r2, r1
 8008f02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f04:	f000 f832 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 8008f08:	0001      	movs	r1, r0
 8008f0a:	4b12      	ldr	r3, [pc, #72]	; (8008f54 <HAL_RCC_ClockConfig+0x278>)
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	091b      	lsrs	r3, r3, #4
 8008f10:	220f      	movs	r2, #15
 8008f12:	4013      	ands	r3, r2
 8008f14:	4a12      	ldr	r2, [pc, #72]	; (8008f60 <HAL_RCC_ClockConfig+0x284>)
 8008f16:	5cd3      	ldrb	r3, [r2, r3]
 8008f18:	000a      	movs	r2, r1
 8008f1a:	40da      	lsrs	r2, r3
 8008f1c:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <HAL_RCC_ClockConfig+0x288>)
 8008f1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008f20:	4b11      	ldr	r3, [pc, #68]	; (8008f68 <HAL_RCC_ClockConfig+0x28c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	250b      	movs	r5, #11
 8008f26:	197c      	adds	r4, r7, r5
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f7fb fdd1 	bl	8004ad0 <HAL_InitTick>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008f32:	197b      	adds	r3, r7, r5
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008f3a:	197b      	adds	r3, r7, r5
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	e000      	b.n	8008f42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	0018      	movs	r0, r3
 8008f44:	46bd      	mov	sp, r7
 8008f46:	b004      	add	sp, #16
 8008f48:	bdb0      	pop	{r4, r5, r7, pc}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	40022000 	.word	0x40022000
 8008f50:	00001388 	.word	0x00001388
 8008f54:	40021000 	.word	0x40021000
 8008f58:	fffff8ff 	.word	0xfffff8ff
 8008f5c:	ffffc7ff 	.word	0xffffc7ff
 8008f60:	0801e718 	.word	0x0801e718
 8008f64:	20000070 	.word	0x20000070
 8008f68:	20000074 	.word	0x20000074

08008f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f6c:	b5b0      	push	{r4, r5, r7, lr}
 8008f6e:	b08e      	sub	sp, #56	; 0x38
 8008f70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008f72:	4b4c      	ldr	r3, [pc, #304]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	2b0c      	cmp	r3, #12
 8008f80:	d014      	beq.n	8008fac <HAL_RCC_GetSysClockFreq+0x40>
 8008f82:	d900      	bls.n	8008f86 <HAL_RCC_GetSysClockFreq+0x1a>
 8008f84:	e07b      	b.n	800907e <HAL_RCC_GetSysClockFreq+0x112>
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d002      	beq.n	8008f90 <HAL_RCC_GetSysClockFreq+0x24>
 8008f8a:	2b08      	cmp	r3, #8
 8008f8c:	d00b      	beq.n	8008fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008f8e:	e076      	b.n	800907e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008f90:	4b44      	ldr	r3, [pc, #272]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2210      	movs	r2, #16
 8008f96:	4013      	ands	r3, r2
 8008f98:	d002      	beq.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008f9a:	4b43      	ldr	r3, [pc, #268]	; (80090a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008f9c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008f9e:	e07c      	b.n	800909a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008fa0:	4b42      	ldr	r3, [pc, #264]	; (80090ac <HAL_RCC_GetSysClockFreq+0x140>)
 8008fa2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008fa4:	e079      	b.n	800909a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008fa6:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <HAL_RCC_GetSysClockFreq+0x144>)
 8008fa8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008faa:	e076      	b.n	800909a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	0c9a      	lsrs	r2, r3, #18
 8008fb0:	230f      	movs	r3, #15
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	4b3f      	ldr	r3, [pc, #252]	; (80090b4 <HAL_RCC_GetSysClockFreq+0x148>)
 8008fb6:	5c9b      	ldrb	r3, [r3, r2]
 8008fb8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	0d9a      	lsrs	r2, r3, #22
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fc6:	4b37      	ldr	r3, [pc, #220]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	2380      	movs	r3, #128	; 0x80
 8008fcc:	025b      	lsls	r3, r3, #9
 8008fce:	4013      	ands	r3, r2
 8008fd0:	d01a      	beq.n	8009008 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61fb      	str	r3, [r7, #28]
 8008fda:	4a35      	ldr	r2, [pc, #212]	; (80090b0 <HAL_RCC_GetSysClockFreq+0x144>)
 8008fdc:	2300      	movs	r3, #0
 8008fde:	69b8      	ldr	r0, [r7, #24]
 8008fe0:	69f9      	ldr	r1, [r7, #28]
 8008fe2:	f7f7 fad5 	bl	8000590 <__aeabi_lmul>
 8008fe6:	0002      	movs	r2, r0
 8008fe8:	000b      	movs	r3, r1
 8008fea:	0010      	movs	r0, r2
 8008fec:	0019      	movs	r1, r3
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f7f7 faa9 	bl	8000550 <__aeabi_uldivmod>
 8008ffe:	0002      	movs	r2, r0
 8009000:	000b      	movs	r3, r1
 8009002:	0013      	movs	r3, r2
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
 8009006:	e037      	b.n	8009078 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009008:	4b26      	ldr	r3, [pc, #152]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2210      	movs	r2, #16
 800900e:	4013      	ands	r3, r2
 8009010:	d01a      	beq.n	8009048 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	60bb      	str	r3, [r7, #8]
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	4a23      	ldr	r2, [pc, #140]	; (80090a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800901c:	2300      	movs	r3, #0
 800901e:	68b8      	ldr	r0, [r7, #8]
 8009020:	68f9      	ldr	r1, [r7, #12]
 8009022:	f7f7 fab5 	bl	8000590 <__aeabi_lmul>
 8009026:	0002      	movs	r2, r0
 8009028:	000b      	movs	r3, r1
 800902a:	0010      	movs	r0, r2
 800902c:	0019      	movs	r1, r3
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	2300      	movs	r3, #0
 8009034:	607b      	str	r3, [r7, #4]
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f7f7 fa89 	bl	8000550 <__aeabi_uldivmod>
 800903e:	0002      	movs	r2, r0
 8009040:	000b      	movs	r3, r1
 8009042:	0013      	movs	r3, r2
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
 8009046:	e017      	b.n	8009078 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	0018      	movs	r0, r3
 800904c:	2300      	movs	r3, #0
 800904e:	0019      	movs	r1, r3
 8009050:	4a16      	ldr	r2, [pc, #88]	; (80090ac <HAL_RCC_GetSysClockFreq+0x140>)
 8009052:	2300      	movs	r3, #0
 8009054:	f7f7 fa9c 	bl	8000590 <__aeabi_lmul>
 8009058:	0002      	movs	r2, r0
 800905a:	000b      	movs	r3, r1
 800905c:	0010      	movs	r0, r2
 800905e:	0019      	movs	r1, r3
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	001c      	movs	r4, r3
 8009064:	2300      	movs	r3, #0
 8009066:	001d      	movs	r5, r3
 8009068:	0022      	movs	r2, r4
 800906a:	002b      	movs	r3, r5
 800906c:	f7f7 fa70 	bl	8000550 <__aeabi_uldivmod>
 8009070:	0002      	movs	r2, r0
 8009072:	000b      	movs	r3, r1
 8009074:	0013      	movs	r3, r2
 8009076:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800907c:	e00d      	b.n	800909a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	0b5b      	lsrs	r3, r3, #13
 8009084:	2207      	movs	r2, #7
 8009086:	4013      	ands	r3, r2
 8009088:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800908a:	6a3b      	ldr	r3, [r7, #32]
 800908c:	3301      	adds	r3, #1
 800908e:	2280      	movs	r2, #128	; 0x80
 8009090:	0212      	lsls	r2, r2, #8
 8009092:	409a      	lsls	r2, r3
 8009094:	0013      	movs	r3, r2
 8009096:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009098:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800909c:	0018      	movs	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	b00e      	add	sp, #56	; 0x38
 80090a2:	bdb0      	pop	{r4, r5, r7, pc}
 80090a4:	40021000 	.word	0x40021000
 80090a8:	003d0900 	.word	0x003d0900
 80090ac:	00f42400 	.word	0x00f42400
 80090b0:	007a1200 	.word	0x007a1200
 80090b4:	0801e730 	.word	0x0801e730

080090b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80090be:	681b      	ldr	r3, [r3, #0]
}
 80090c0:	0018      	movs	r0, r3
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	20000070 	.word	0x20000070

080090cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80090d0:	f7ff fff2 	bl	80090b8 <HAL_RCC_GetHCLKFreq>
 80090d4:	0001      	movs	r1, r0
 80090d6:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	2207      	movs	r2, #7
 80090de:	4013      	ands	r3, r2
 80090e0:	4a04      	ldr	r2, [pc, #16]	; (80090f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090e2:	5cd3      	ldrb	r3, [r2, r3]
 80090e4:	40d9      	lsrs	r1, r3
 80090e6:	000b      	movs	r3, r1
}
 80090e8:	0018      	movs	r0, r3
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	46c0      	nop			; (mov r8, r8)
 80090f0:	40021000 	.word	0x40021000
 80090f4:	0801e728 	.word	0x0801e728

080090f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80090fc:	f7ff ffdc 	bl	80090b8 <HAL_RCC_GetHCLKFreq>
 8009100:	0001      	movs	r1, r0
 8009102:	4b06      	ldr	r3, [pc, #24]	; (800911c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	0adb      	lsrs	r3, r3, #11
 8009108:	2207      	movs	r2, #7
 800910a:	4013      	ands	r3, r2
 800910c:	4a04      	ldr	r2, [pc, #16]	; (8009120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800910e:	5cd3      	ldrb	r3, [r2, r3]
 8009110:	40d9      	lsrs	r1, r3
 8009112:	000b      	movs	r3, r1
}
 8009114:	0018      	movs	r0, r3
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	40021000 	.word	0x40021000
 8009120:	0801e728 	.word	0x0801e728

08009124 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800912c:	2017      	movs	r0, #23
 800912e:	183b      	adds	r3, r7, r0
 8009130:	2200      	movs	r2, #0
 8009132:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2220      	movs	r2, #32
 800913a:	4013      	ands	r3, r2
 800913c:	d100      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800913e:	e0c2      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009140:	4b98      	ldr	r3, [pc, #608]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009144:	2380      	movs	r3, #128	; 0x80
 8009146:	055b      	lsls	r3, r3, #21
 8009148:	4013      	ands	r3, r2
 800914a:	d109      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800914c:	4b95      	ldr	r3, [pc, #596]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800914e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009150:	4b94      	ldr	r3, [pc, #592]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009152:	2180      	movs	r1, #128	; 0x80
 8009154:	0549      	lsls	r1, r1, #21
 8009156:	430a      	orrs	r2, r1
 8009158:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800915a:	183b      	adds	r3, r7, r0
 800915c:	2201      	movs	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009160:	4b91      	ldr	r3, [pc, #580]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	2380      	movs	r3, #128	; 0x80
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	4013      	ands	r3, r2
 800916a:	d11a      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800916c:	4b8e      	ldr	r3, [pc, #568]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	4b8d      	ldr	r3, [pc, #564]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009172:	2180      	movs	r1, #128	; 0x80
 8009174:	0049      	lsls	r1, r1, #1
 8009176:	430a      	orrs	r2, r1
 8009178:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800917a:	f7fb fcb2 	bl	8004ae2 <HAL_GetTick>
 800917e:	0003      	movs	r3, r0
 8009180:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009182:	e008      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009184:	f7fb fcad 	bl	8004ae2 <HAL_GetTick>
 8009188:	0002      	movs	r2, r0
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b64      	cmp	r3, #100	; 0x64
 8009190:	d901      	bls.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e102      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009196:	4b84      	ldr	r3, [pc, #528]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	2380      	movs	r3, #128	; 0x80
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	4013      	ands	r3, r2
 80091a0:	d0f0      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80091a2:	4b80      	ldr	r3, [pc, #512]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	23c0      	movs	r3, #192	; 0xc0
 80091a8:	039b      	lsls	r3, r3, #14
 80091aa:	4013      	ands	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	23c0      	movs	r3, #192	; 0xc0
 80091b4:	039b      	lsls	r3, r3, #14
 80091b6:	4013      	ands	r3, r2
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d013      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	23c0      	movs	r3, #192	; 0xc0
 80091c4:	029b      	lsls	r3, r3, #10
 80091c6:	401a      	ands	r2, r3
 80091c8:	23c0      	movs	r3, #192	; 0xc0
 80091ca:	029b      	lsls	r3, r3, #10
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d10a      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091d0:	4b74      	ldr	r3, [pc, #464]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	2380      	movs	r3, #128	; 0x80
 80091d6:	029b      	lsls	r3, r3, #10
 80091d8:	401a      	ands	r2, r3
 80091da:	2380      	movs	r3, #128	; 0x80
 80091dc:	029b      	lsls	r3, r3, #10
 80091de:	429a      	cmp	r2, r3
 80091e0:	d101      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e0da      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80091e6:	4b6f      	ldr	r3, [pc, #444]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091ea:	23c0      	movs	r3, #192	; 0xc0
 80091ec:	029b      	lsls	r3, r3, #10
 80091ee:	4013      	ands	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d03b      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	23c0      	movs	r3, #192	; 0xc0
 80091fe:	029b      	lsls	r3, r3, #10
 8009200:	4013      	ands	r3, r2
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	429a      	cmp	r2, r3
 8009206:	d033      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2220      	movs	r2, #32
 800920e:	4013      	ands	r3, r2
 8009210:	d02e      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009212:	4b64      	ldr	r3, [pc, #400]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009216:	4a65      	ldr	r2, [pc, #404]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009218:	4013      	ands	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800921c:	4b61      	ldr	r3, [pc, #388]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800921e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009220:	4b60      	ldr	r3, [pc, #384]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009222:	2180      	movs	r1, #128	; 0x80
 8009224:	0309      	lsls	r1, r1, #12
 8009226:	430a      	orrs	r2, r1
 8009228:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800922a:	4b5e      	ldr	r3, [pc, #376]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800922c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800922e:	4b5d      	ldr	r3, [pc, #372]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009230:	495f      	ldr	r1, [pc, #380]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8009232:	400a      	ands	r2, r1
 8009234:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009236:	4b5b      	ldr	r3, [pc, #364]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	2380      	movs	r3, #128	; 0x80
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	4013      	ands	r3, r2
 8009244:	d014      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009246:	f7fb fc4c 	bl	8004ae2 <HAL_GetTick>
 800924a:	0003      	movs	r3, r0
 800924c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800924e:	e009      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009250:	f7fb fc47 	bl	8004ae2 <HAL_GetTick>
 8009254:	0002      	movs	r2, r0
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	4a56      	ldr	r2, [pc, #344]	; (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d901      	bls.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e09b      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009264:	4b4f      	ldr	r3, [pc, #316]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009266:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009268:	2380      	movs	r3, #128	; 0x80
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4013      	ands	r3, r2
 800926e:	d0ef      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	23c0      	movs	r3, #192	; 0xc0
 8009276:	029b      	lsls	r3, r3, #10
 8009278:	401a      	ands	r2, r3
 800927a:	23c0      	movs	r3, #192	; 0xc0
 800927c:	029b      	lsls	r3, r3, #10
 800927e:	429a      	cmp	r2, r3
 8009280:	d10c      	bne.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8009282:	4b48      	ldr	r3, [pc, #288]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a4c      	ldr	r2, [pc, #304]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009288:	4013      	ands	r3, r2
 800928a:	0019      	movs	r1, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	23c0      	movs	r3, #192	; 0xc0
 8009292:	039b      	lsls	r3, r3, #14
 8009294:	401a      	ands	r2, r3
 8009296:	4b43      	ldr	r3, [pc, #268]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009298:	430a      	orrs	r2, r1
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	4b41      	ldr	r3, [pc, #260]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800929e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	23c0      	movs	r3, #192	; 0xc0
 80092a6:	029b      	lsls	r3, r3, #10
 80092a8:	401a      	ands	r2, r3
 80092aa:	4b3e      	ldr	r3, [pc, #248]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092ac:	430a      	orrs	r2, r1
 80092ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80092b0:	2317      	movs	r3, #23
 80092b2:	18fb      	adds	r3, r7, r3
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d105      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092ba:	4b3a      	ldr	r3, [pc, #232]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092be:	4b39      	ldr	r3, [pc, #228]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092c0:	493e      	ldr	r1, [pc, #248]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80092c2:	400a      	ands	r2, r1
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2201      	movs	r2, #1
 80092cc:	4013      	ands	r3, r2
 80092ce:	d009      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80092d0:	4b34      	ldr	r3, [pc, #208]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092d4:	2203      	movs	r2, #3
 80092d6:	4393      	bics	r3, r2
 80092d8:	0019      	movs	r1, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	4b31      	ldr	r3, [pc, #196]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092e0:	430a      	orrs	r2, r1
 80092e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2202      	movs	r2, #2
 80092ea:	4013      	ands	r3, r2
 80092ec:	d009      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80092ee:	4b2d      	ldr	r3, [pc, #180]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f2:	220c      	movs	r2, #12
 80092f4:	4393      	bics	r3, r2
 80092f6:	0019      	movs	r1, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	4b29      	ldr	r3, [pc, #164]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092fe:	430a      	orrs	r2, r1
 8009300:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2204      	movs	r2, #4
 8009308:	4013      	ands	r3, r2
 800930a:	d009      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800930c:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800930e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009310:	4a2b      	ldr	r2, [pc, #172]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009312:	4013      	ands	r3, r2
 8009314:	0019      	movs	r1, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691a      	ldr	r2, [r3, #16]
 800931a:	4b22      	ldr	r3, [pc, #136]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800931c:	430a      	orrs	r2, r1
 800931e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2208      	movs	r2, #8
 8009326:	4013      	ands	r3, r2
 8009328:	d009      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800932a:	4b1e      	ldr	r3, [pc, #120]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800932c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800932e:	4a25      	ldr	r2, [pc, #148]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009330:	4013      	ands	r3, r2
 8009332:	0019      	movs	r1, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	695a      	ldr	r2, [r3, #20]
 8009338:	4b1a      	ldr	r3, [pc, #104]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800933a:	430a      	orrs	r2, r1
 800933c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	2380      	movs	r3, #128	; 0x80
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	4013      	ands	r3, r2
 8009348:	d009      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800934a:	4b16      	ldr	r3, [pc, #88]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800934c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934e:	4a17      	ldr	r2, [pc, #92]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009350:	4013      	ands	r3, r2
 8009352:	0019      	movs	r1, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	4b12      	ldr	r3, [pc, #72]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800935a:	430a      	orrs	r2, r1
 800935c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2240      	movs	r2, #64	; 0x40
 8009364:	4013      	ands	r3, r2
 8009366:	d009      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009368:	4b0e      	ldr	r3, [pc, #56]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800936a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936c:	4a16      	ldr	r2, [pc, #88]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800936e:	4013      	ands	r3, r2
 8009370:	0019      	movs	r1, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1a      	ldr	r2, [r3, #32]
 8009376:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009378:	430a      	orrs	r2, r1
 800937a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2280      	movs	r2, #128	; 0x80
 8009382:	4013      	ands	r3, r2
 8009384:	d009      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009386:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938a:	4a10      	ldr	r2, [pc, #64]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800938c:	4013      	ands	r3, r2
 800938e:	0019      	movs	r1, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	69da      	ldr	r2, [r3, #28]
 8009394:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009396:	430a      	orrs	r2, r1
 8009398:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	0018      	movs	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	b006      	add	sp, #24
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	40021000 	.word	0x40021000
 80093a8:	40007000 	.word	0x40007000
 80093ac:	fffcffff 	.word	0xfffcffff
 80093b0:	fff7ffff 	.word	0xfff7ffff
 80093b4:	00001388 	.word	0x00001388
 80093b8:	ffcfffff 	.word	0xffcfffff
 80093bc:	efffffff 	.word	0xefffffff
 80093c0:	fffff3ff 	.word	0xfffff3ff
 80093c4:	ffffcfff 	.word	0xffffcfff
 80093c8:	fbffffff 	.word	0xfbffffff
 80093cc:	fff3ffff 	.word	0xfff3ffff

080093d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e08e      	b.n	8009500 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2221      	movs	r2, #33	; 0x21
 80093e6:	5c9b      	ldrb	r3, [r3, r2]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d107      	bne.n	80093fe <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2220      	movs	r2, #32
 80093f2:	2100      	movs	r1, #0
 80093f4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	0018      	movs	r0, r3
 80093fa:	f7fa fbc7 	bl	8003b8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2221      	movs	r2, #33	; 0x21
 8009402:	2102      	movs	r1, #2
 8009404:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	22ca      	movs	r2, #202	; 0xca
 800940c:	625a      	str	r2, [r3, #36]	; 0x24
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2253      	movs	r2, #83	; 0x53
 8009414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	0018      	movs	r0, r3
 800941a:	f000 fcf4 	bl	8009e06 <RTC_EnterInitMode>
 800941e:	1e03      	subs	r3, r0, #0
 8009420:	d009      	beq.n	8009436 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	22ff      	movs	r2, #255	; 0xff
 8009428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2221      	movs	r2, #33	; 0x21
 800942e:	2104      	movs	r1, #4
 8009430:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e064      	b.n	8009500 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4931      	ldr	r1, [pc, #196]	; (8009508 <HAL_RTC_Init+0x138>)
 8009442:	400a      	ands	r2, r1
 8009444:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6899      	ldr	r1, [r3, #8]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	431a      	orrs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	68d2      	ldr	r2, [r2, #12]
 800946c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6919      	ldr	r1, [r3, #16]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	041a      	lsls	r2, r3, #16
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2180      	movs	r1, #128	; 0x80
 800948e:	438a      	bics	r2, r1
 8009490:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2103      	movs	r1, #3
 800949e:	438a      	bics	r2, r1
 80094a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	431a      	orrs	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	2220      	movs	r2, #32
 80094c2:	4013      	ands	r3, r2
 80094c4:	d113      	bne.n	80094ee <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	0018      	movs	r0, r3
 80094ca:	f000 fc75 	bl	8009db8 <HAL_RTC_WaitForSynchro>
 80094ce:	1e03      	subs	r3, r0, #0
 80094d0:	d00d      	beq.n	80094ee <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	22ff      	movs	r2, #255	; 0xff
 80094d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2221      	movs	r2, #33	; 0x21
 80094de:	2104      	movs	r1, #4
 80094e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	2100      	movs	r1, #0
 80094e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e008      	b.n	8009500 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	22ff      	movs	r2, #255	; 0xff
 80094f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2221      	movs	r2, #33	; 0x21
 80094fa:	2101      	movs	r1, #1
 80094fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80094fe:	2300      	movs	r3, #0
  }
}
 8009500:	0018      	movs	r0, r3
 8009502:	46bd      	mov	sp, r7
 8009504:	b002      	add	sp, #8
 8009506:	bd80      	pop	{r7, pc}
 8009508:	ff8fffbf 	.word	0xff8fffbf

0800950c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800950c:	b590      	push	{r4, r7, lr}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2220      	movs	r2, #32
 800951c:	5c9b      	ldrb	r3, [r3, r2]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_RTC_SetTime+0x1a>
 8009522:	2302      	movs	r3, #2
 8009524:	e0ad      	b.n	8009682 <HAL_RTC_SetTime+0x176>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2220      	movs	r2, #32
 800952a:	2101      	movs	r1, #1
 800952c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2221      	movs	r2, #33	; 0x21
 8009532:	2102      	movs	r1, #2
 8009534:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d125      	bne.n	8009588 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2240      	movs	r2, #64	; 0x40
 8009544:	4013      	ands	r3, r2
 8009546:	d102      	bne.n	800954e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2200      	movs	r2, #0
 800954c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	0018      	movs	r0, r3
 8009554:	f000 fc81 	bl	8009e5a <RTC_ByteToBcd2>
 8009558:	0003      	movs	r3, r0
 800955a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	785b      	ldrb	r3, [r3, #1]
 8009560:	0018      	movs	r0, r3
 8009562:	f000 fc7a 	bl	8009e5a <RTC_ByteToBcd2>
 8009566:	0003      	movs	r3, r0
 8009568:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800956a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	789b      	ldrb	r3, [r3, #2]
 8009570:	0018      	movs	r0, r3
 8009572:	f000 fc72 	bl	8009e5a <RTC_ByteToBcd2>
 8009576:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009578:	0022      	movs	r2, r4
 800957a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	78db      	ldrb	r3, [r3, #3]
 8009580:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	e017      	b.n	80095b8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2240      	movs	r2, #64	; 0x40
 8009590:	4013      	ands	r3, r2
 8009592:	d102      	bne.n	800959a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2200      	movs	r2, #0
 8009598:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	785b      	ldrb	r3, [r3, #1]
 80095a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80095a6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80095ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	78db      	ldrb	r3, [r3, #3]
 80095b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	22ca      	movs	r2, #202	; 0xca
 80095be:	625a      	str	r2, [r3, #36]	; 0x24
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2253      	movs	r2, #83	; 0x53
 80095c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	0018      	movs	r0, r3
 80095cc:	f000 fc1b 	bl	8009e06 <RTC_EnterInitMode>
 80095d0:	1e03      	subs	r3, r0, #0
 80095d2:	d00d      	beq.n	80095f0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	22ff      	movs	r2, #255	; 0xff
 80095da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2221      	movs	r2, #33	; 0x21
 80095e0:	2104      	movs	r1, #4
 80095e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2220      	movs	r2, #32
 80095e8:	2100      	movs	r1, #0
 80095ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e048      	b.n	8009682 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	4925      	ldr	r1, [pc, #148]	; (800968c <HAL_RTC_SetTime+0x180>)
 80095f8:	400a      	ands	r2, r1
 80095fa:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4922      	ldr	r1, [pc, #136]	; (8009690 <HAL_RTC_SetTime+0x184>)
 8009608:	400a      	ands	r2, r1
 800960a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6899      	ldr	r1, [r3, #8]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	431a      	orrs	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2180      	movs	r1, #128	; 0x80
 8009630:	438a      	bics	r2, r1
 8009632:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	2220      	movs	r2, #32
 800963c:	4013      	ands	r3, r2
 800963e:	d113      	bne.n	8009668 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	0018      	movs	r0, r3
 8009644:	f000 fbb8 	bl	8009db8 <HAL_RTC_WaitForSynchro>
 8009648:	1e03      	subs	r3, r0, #0
 800964a:	d00d      	beq.n	8009668 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	22ff      	movs	r2, #255	; 0xff
 8009652:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2221      	movs	r2, #33	; 0x21
 8009658:	2104      	movs	r1, #4
 800965a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2220      	movs	r2, #32
 8009660:	2100      	movs	r1, #0
 8009662:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e00c      	b.n	8009682 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	22ff      	movs	r2, #255	; 0xff
 800966e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2221      	movs	r2, #33	; 0x21
 8009674:	2101      	movs	r1, #1
 8009676:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	2100      	movs	r1, #0
 800967e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009680:	2300      	movs	r3, #0
  }
}
 8009682:	0018      	movs	r0, r3
 8009684:	46bd      	mov	sp, r7
 8009686:	b007      	add	sp, #28
 8009688:	bd90      	pop	{r4, r7, pc}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	007f7f7f 	.word	0x007f7f7f
 8009690:	fffbffff 	.word	0xfffbffff

08009694 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	045b      	lsls	r3, r3, #17
 80096b2:	0c5a      	lsrs	r2, r3, #17
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a22      	ldr	r2, [pc, #136]	; (8009748 <HAL_RTC_GetTime+0xb4>)
 80096c0:	4013      	ands	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	0c1b      	lsrs	r3, r3, #16
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	223f      	movs	r2, #63	; 0x3f
 80096cc:	4013      	ands	r3, r2
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	0a1b      	lsrs	r3, r3, #8
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	227f      	movs	r2, #127	; 0x7f
 80096dc:	4013      	ands	r3, r2
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	227f      	movs	r2, #127	; 0x7f
 80096ea:	4013      	ands	r3, r2
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	0c1b      	lsrs	r3, r3, #16
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2240      	movs	r2, #64	; 0x40
 80096fa:	4013      	ands	r3, r2
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11a      	bne.n	800973e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	0018      	movs	r0, r3
 800970e:	f000 fbcc 	bl	8009eaa <RTC_Bcd2ToByte>
 8009712:	0003      	movs	r3, r0
 8009714:	001a      	movs	r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	785b      	ldrb	r3, [r3, #1]
 800971e:	0018      	movs	r0, r3
 8009720:	f000 fbc3 	bl	8009eaa <RTC_Bcd2ToByte>
 8009724:	0003      	movs	r3, r0
 8009726:	001a      	movs	r2, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	789b      	ldrb	r3, [r3, #2]
 8009730:	0018      	movs	r0, r3
 8009732:	f000 fbba 	bl	8009eaa <RTC_Bcd2ToByte>
 8009736:	0003      	movs	r3, r0
 8009738:	001a      	movs	r2, r3
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	0018      	movs	r0, r3
 8009742:	46bd      	mov	sp, r7
 8009744:	b006      	add	sp, #24
 8009746:	bd80      	pop	{r7, pc}
 8009748:	007f7f7f 	.word	0x007f7f7f

0800974c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800974c:	b590      	push	{r4, r7, lr}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2220      	movs	r2, #32
 800975c:	5c9b      	ldrb	r3, [r3, r2]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_RTC_SetDate+0x1a>
 8009762:	2302      	movs	r3, #2
 8009764:	e099      	b.n	800989a <HAL_RTC_SetDate+0x14e>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2220      	movs	r2, #32
 800976a:	2101      	movs	r1, #1
 800976c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2221      	movs	r2, #33	; 0x21
 8009772:	2102      	movs	r1, #2
 8009774:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10e      	bne.n	800979a <HAL_RTC_SetDate+0x4e>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	785b      	ldrb	r3, [r3, #1]
 8009780:	001a      	movs	r2, r3
 8009782:	2310      	movs	r3, #16
 8009784:	4013      	ands	r3, r2
 8009786:	d008      	beq.n	800979a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	785b      	ldrb	r3, [r3, #1]
 800978c:	2210      	movs	r2, #16
 800978e:	4393      	bics	r3, r2
 8009790:	b2db      	uxtb	r3, r3
 8009792:	330a      	adds	r3, #10
 8009794:	b2da      	uxtb	r2, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d11c      	bne.n	80097da <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	78db      	ldrb	r3, [r3, #3]
 80097a4:	0018      	movs	r0, r3
 80097a6:	f000 fb58 	bl	8009e5a <RTC_ByteToBcd2>
 80097aa:	0003      	movs	r3, r0
 80097ac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	0018      	movs	r0, r3
 80097b4:	f000 fb51 	bl	8009e5a <RTC_ByteToBcd2>
 80097b8:	0003      	movs	r3, r0
 80097ba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80097bc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	789b      	ldrb	r3, [r3, #2]
 80097c2:	0018      	movs	r0, r3
 80097c4:	f000 fb49 	bl	8009e5a <RTC_ByteToBcd2>
 80097c8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80097ca:	0022      	movs	r2, r4
 80097cc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80097d4:	4313      	orrs	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e00e      	b.n	80097f8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	78db      	ldrb	r3, [r3, #3]
 80097de:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80097e6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80097ec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80097f4:	4313      	orrs	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	22ca      	movs	r2, #202	; 0xca
 80097fe:	625a      	str	r2, [r3, #36]	; 0x24
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2253      	movs	r2, #83	; 0x53
 8009806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	0018      	movs	r0, r3
 800980c:	f000 fafb 	bl	8009e06 <RTC_EnterInitMode>
 8009810:	1e03      	subs	r3, r0, #0
 8009812:	d00d      	beq.n	8009830 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	22ff      	movs	r2, #255	; 0xff
 800981a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2221      	movs	r2, #33	; 0x21
 8009820:	2104      	movs	r1, #4
 8009822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2220      	movs	r2, #32
 8009828:	2100      	movs	r1, #0
 800982a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e034      	b.n	800989a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	491b      	ldr	r1, [pc, #108]	; (80098a4 <HAL_RTC_SetDate+0x158>)
 8009838:	400a      	ands	r2, r1
 800983a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68da      	ldr	r2, [r3, #12]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2180      	movs	r1, #128	; 0x80
 8009848:	438a      	bics	r2, r1
 800984a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	2220      	movs	r2, #32
 8009854:	4013      	ands	r3, r2
 8009856:	d113      	bne.n	8009880 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	0018      	movs	r0, r3
 800985c:	f000 faac 	bl	8009db8 <HAL_RTC_WaitForSynchro>
 8009860:	1e03      	subs	r3, r0, #0
 8009862:	d00d      	beq.n	8009880 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	22ff      	movs	r2, #255	; 0xff
 800986a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2221      	movs	r2, #33	; 0x21
 8009870:	2104      	movs	r1, #4
 8009872:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	2100      	movs	r1, #0
 800987a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e00c      	b.n	800989a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	22ff      	movs	r2, #255	; 0xff
 8009886:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2221      	movs	r2, #33	; 0x21
 800988c:	2101      	movs	r1, #1
 800988e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2220      	movs	r2, #32
 8009894:	2100      	movs	r1, #0
 8009896:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009898:	2300      	movs	r3, #0
  }
}
 800989a:	0018      	movs	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	b007      	add	sp, #28
 80098a0:	bd90      	pop	{r4, r7, pc}
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	00ffff3f 	.word	0x00ffff3f

080098a8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	4a21      	ldr	r2, [pc, #132]	; (8009940 <HAL_RTC_GetDate+0x98>)
 80098bc:	4013      	ands	r3, r2
 80098be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	0c1b      	lsrs	r3, r3, #16
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	0a1b      	lsrs	r3, r3, #8
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	221f      	movs	r2, #31
 80098d2:	4013      	ands	r3, r2
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	223f      	movs	r2, #63	; 0x3f
 80098e0:	4013      	ands	r3, r2
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	0b5b      	lsrs	r3, r3, #13
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2207      	movs	r2, #7
 80098f0:	4013      	ands	r3, r2
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d11a      	bne.n	8009934 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	78db      	ldrb	r3, [r3, #3]
 8009902:	0018      	movs	r0, r3
 8009904:	f000 fad1 	bl	8009eaa <RTC_Bcd2ToByte>
 8009908:	0003      	movs	r3, r0
 800990a:	001a      	movs	r2, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	0018      	movs	r0, r3
 8009916:	f000 fac8 	bl	8009eaa <RTC_Bcd2ToByte>
 800991a:	0003      	movs	r3, r0
 800991c:	001a      	movs	r2, r3
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	789b      	ldrb	r3, [r3, #2]
 8009926:	0018      	movs	r0, r3
 8009928:	f000 fabf 	bl	8009eaa <RTC_Bcd2ToByte>
 800992c:	0003      	movs	r3, r0
 800992e:	001a      	movs	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	0018      	movs	r0, r3
 8009938:	46bd      	mov	sp, r7
 800993a:	b006      	add	sp, #24
 800993c:	bd80      	pop	{r7, pc}
 800993e:	46c0      	nop			; (mov r8, r8)
 8009940:	00ffff3f 	.word	0x00ffff3f

08009944 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009944:	b590      	push	{r4, r7, lr}
 8009946:	b089      	sub	sp, #36	; 0x24
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2220      	movs	r2, #32
 8009954:	5c9b      	ldrb	r3, [r3, r2]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d101      	bne.n	800995e <HAL_RTC_SetAlarm_IT+0x1a>
 800995a:	2302      	movs	r3, #2
 800995c:	e130      	b.n	8009bc0 <HAL_RTC_SetAlarm_IT+0x27c>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2220      	movs	r2, #32
 8009962:	2101      	movs	r1, #1
 8009964:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2221      	movs	r2, #33	; 0x21
 800996a:	2102      	movs	r1, #2
 800996c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d136      	bne.n	80099e2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	2240      	movs	r2, #64	; 0x40
 800997c:	4013      	ands	r3, r2
 800997e:	d102      	bne.n	8009986 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2200      	movs	r2, #0
 8009984:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	0018      	movs	r0, r3
 800998c:	f000 fa65 	bl	8009e5a <RTC_ByteToBcd2>
 8009990:	0003      	movs	r3, r0
 8009992:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	785b      	ldrb	r3, [r3, #1]
 8009998:	0018      	movs	r0, r3
 800999a:	f000 fa5e 	bl	8009e5a <RTC_ByteToBcd2>
 800999e:	0003      	movs	r3, r0
 80099a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80099a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	789b      	ldrb	r3, [r3, #2]
 80099a8:	0018      	movs	r0, r3
 80099aa:	f000 fa56 	bl	8009e5a <RTC_ByteToBcd2>
 80099ae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80099b0:	0022      	movs	r2, r4
 80099b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	78db      	ldrb	r3, [r3, #3]
 80099b8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80099ba:	431a      	orrs	r2, r3
 80099bc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2220      	movs	r2, #32
 80099c2:	5c9b      	ldrb	r3, [r3, r2]
 80099c4:	0018      	movs	r0, r3
 80099c6:	f000 fa48 	bl	8009e5a <RTC_ByteToBcd2>
 80099ca:	0003      	movs	r3, r0
 80099cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80099ce:	0022      	movs	r2, r4
 80099d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80099d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80099dc:	4313      	orrs	r3, r2
 80099de:	61fb      	str	r3, [r7, #28]
 80099e0:	e022      	b.n	8009a28 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	2240      	movs	r2, #64	; 0x40
 80099ea:	4013      	ands	r3, r2
 80099ec:	d102      	bne.n	80099f4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2200      	movs	r2, #0
 80099f2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	785b      	ldrb	r3, [r3, #1]
 80099fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009a00:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009a06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	78db      	ldrb	r3, [r3, #3]
 8009a0c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009a0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2120      	movs	r1, #32
 8009a14:	5c5b      	ldrb	r3, [r3, r1]
 8009a16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009a18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009a1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009a24:	4313      	orrs	r3, r2
 8009a26:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	22ca      	movs	r2, #202	; 0xca
 8009a3a:	625a      	str	r2, [r3, #36]	; 0x24
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2253      	movs	r2, #83	; 0x53
 8009a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a48:	2380      	movs	r3, #128	; 0x80
 8009a4a:	005b      	lsls	r3, r3, #1
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d14e      	bne.n	8009aee <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689a      	ldr	r2, [r3, #8]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	495b      	ldr	r1, [pc, #364]	; (8009bc8 <HAL_RTC_SetAlarm_IT+0x284>)
 8009a5c:	400a      	ands	r2, r1
 8009a5e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	22ff      	movs	r2, #255	; 0xff
 8009a68:	401a      	ands	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4957      	ldr	r1, [pc, #348]	; (8009bcc <HAL_RTC_SetAlarm_IT+0x288>)
 8009a70:	430a      	orrs	r2, r1
 8009a72:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009a74:	f7fb f835 	bl	8004ae2 <HAL_GetTick>
 8009a78:	0003      	movs	r3, r0
 8009a7a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009a7c:	e016      	b.n	8009aac <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a7e:	f7fb f830 	bl	8004ae2 <HAL_GetTick>
 8009a82:	0002      	movs	r2, r0
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	1ad2      	subs	r2, r2, r3
 8009a88:	23fa      	movs	r3, #250	; 0xfa
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d90d      	bls.n	8009aac <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	22ff      	movs	r2, #255	; 0xff
 8009a96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2221      	movs	r2, #33	; 0x21
 8009a9c:	2103      	movs	r1, #3
 8009a9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e089      	b.n	8009bc0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	d0e2      	beq.n	8009a7e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69fa      	ldr	r2, [r7, #28]
 8009abe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	69ba      	ldr	r2, [r7, #24]
 8009ac6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	689a      	ldr	r2, [r3, #8]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2180      	movs	r1, #128	; 0x80
 8009ad4:	0049      	lsls	r1, r1, #1
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2180      	movs	r1, #128	; 0x80
 8009ae6:	0149      	lsls	r1, r1, #5
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	609a      	str	r2, [r3, #8]
 8009aec:	e04d      	b.n	8009b8a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689a      	ldr	r2, [r3, #8]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4935      	ldr	r1, [pc, #212]	; (8009bd0 <HAL_RTC_SetAlarm_IT+0x28c>)
 8009afa:	400a      	ands	r2, r1
 8009afc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	22ff      	movs	r2, #255	; 0xff
 8009b06:	401a      	ands	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4931      	ldr	r1, [pc, #196]	; (8009bd4 <HAL_RTC_SetAlarm_IT+0x290>)
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009b12:	f7fa ffe6 	bl	8004ae2 <HAL_GetTick>
 8009b16:	0003      	movs	r3, r0
 8009b18:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009b1a:	e016      	b.n	8009b4a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b1c:	f7fa ffe1 	bl	8004ae2 <HAL_GetTick>
 8009b20:	0002      	movs	r2, r0
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	1ad2      	subs	r2, r2, r3
 8009b26:	23fa      	movs	r3, #250	; 0xfa
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d90d      	bls.n	8009b4a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	22ff      	movs	r2, #255	; 0xff
 8009b34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2221      	movs	r2, #33	; 0x21
 8009b3a:	2103      	movs	r1, #3
 8009b3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2220      	movs	r2, #32
 8009b42:	2100      	movs	r1, #0
 8009b44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e03a      	b.n	8009bc0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2202      	movs	r2, #2
 8009b52:	4013      	ands	r3, r2
 8009b54:	d0e2      	beq.n	8009b1c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2180      	movs	r1, #128	; 0x80
 8009b72:	0089      	lsls	r1, r1, #2
 8009b74:	430a      	orrs	r2, r1
 8009b76:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2180      	movs	r1, #128	; 0x80
 8009b84:	0189      	lsls	r1, r1, #6
 8009b86:	430a      	orrs	r2, r1
 8009b88:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009b8a:	4b13      	ldr	r3, [pc, #76]	; (8009bd8 <HAL_RTC_SetAlarm_IT+0x294>)
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <HAL_RTC_SetAlarm_IT+0x294>)
 8009b90:	2180      	movs	r1, #128	; 0x80
 8009b92:	0289      	lsls	r1, r1, #10
 8009b94:	430a      	orrs	r2, r1
 8009b96:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009b98:	4b0f      	ldr	r3, [pc, #60]	; (8009bd8 <HAL_RTC_SetAlarm_IT+0x294>)
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <HAL_RTC_SetAlarm_IT+0x294>)
 8009b9e:	2180      	movs	r1, #128	; 0x80
 8009ba0:	0289      	lsls	r1, r1, #10
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	22ff      	movs	r2, #255	; 0xff
 8009bac:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2221      	movs	r2, #33	; 0x21
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	2100      	movs	r1, #0
 8009bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	b009      	add	sp, #36	; 0x24
 8009bc6:	bd90      	pop	{r4, r7, pc}
 8009bc8:	fffffeff 	.word	0xfffffeff
 8009bcc:	fffffe7f 	.word	0xfffffe7f
 8009bd0:	fffffdff 	.word	0xfffffdff
 8009bd4:	fffffd7f 	.word	0xfffffd7f
 8009bd8:	40010400 	.word	0x40010400

08009bdc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2220      	movs	r2, #32
 8009bea:	5c9b      	ldrb	r3, [r3, r2]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d101      	bne.n	8009bf4 <HAL_RTC_DeactivateAlarm+0x18>
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	e086      	b.n	8009d02 <HAL_RTC_DeactivateAlarm+0x126>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2221      	movs	r2, #33	; 0x21
 8009c00:	2102      	movs	r1, #2
 8009c02:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	22ca      	movs	r2, #202	; 0xca
 8009c0a:	625a      	str	r2, [r3, #36]	; 0x24
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2253      	movs	r2, #83	; 0x53
 8009c12:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	2380      	movs	r3, #128	; 0x80
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d132      	bne.n	8009c84 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4938      	ldr	r1, [pc, #224]	; (8009d0c <HAL_RTC_DeactivateAlarm+0x130>)
 8009c2a:	400a      	ands	r2, r1
 8009c2c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4935      	ldr	r1, [pc, #212]	; (8009d10 <HAL_RTC_DeactivateAlarm+0x134>)
 8009c3a:	400a      	ands	r2, r1
 8009c3c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009c3e:	f7fa ff50 	bl	8004ae2 <HAL_GetTick>
 8009c42:	0003      	movs	r3, r0
 8009c44:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009c46:	e016      	b.n	8009c76 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009c48:	f7fa ff4b 	bl	8004ae2 <HAL_GetTick>
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	1ad2      	subs	r2, r2, r3
 8009c52:	23fa      	movs	r3, #250	; 0xfa
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d90d      	bls.n	8009c76 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	22ff      	movs	r2, #255	; 0xff
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2221      	movs	r2, #33	; 0x21
 8009c66:	2103      	movs	r1, #3
 8009c68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	2100      	movs	r1, #0
 8009c70:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e045      	b.n	8009d02 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	4013      	ands	r3, r2
 8009c80:	d0e2      	beq.n	8009c48 <HAL_RTC_DeactivateAlarm+0x6c>
 8009c82:	e031      	b.n	8009ce8 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689a      	ldr	r2, [r3, #8]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4921      	ldr	r1, [pc, #132]	; (8009d14 <HAL_RTC_DeactivateAlarm+0x138>)
 8009c90:	400a      	ands	r2, r1
 8009c92:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	491e      	ldr	r1, [pc, #120]	; (8009d18 <HAL_RTC_DeactivateAlarm+0x13c>)
 8009ca0:	400a      	ands	r2, r1
 8009ca2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009ca4:	f7fa ff1d 	bl	8004ae2 <HAL_GetTick>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009cac:	e016      	b.n	8009cdc <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cae:	f7fa ff18 	bl	8004ae2 <HAL_GetTick>
 8009cb2:	0002      	movs	r2, r0
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	1ad2      	subs	r2, r2, r3
 8009cb8:	23fa      	movs	r3, #250	; 0xfa
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d90d      	bls.n	8009cdc <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	22ff      	movs	r2, #255	; 0xff
 8009cc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2221      	movs	r2, #33	; 0x21
 8009ccc:	2103      	movs	r1, #3
 8009cce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e012      	b.n	8009d02 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	d0e2      	beq.n	8009cae <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	22ff      	movs	r2, #255	; 0xff
 8009cee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2221      	movs	r2, #33	; 0x21
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	0018      	movs	r0, r3
 8009d04:	46bd      	mov	sp, r7
 8009d06:	b004      	add	sp, #16
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	fffffeff 	.word	0xfffffeff
 8009d10:	ffffefff 	.word	0xffffefff
 8009d14:	fffffdff 	.word	0xfffffdff
 8009d18:	ffffdfff 	.word	0xffffdfff

08009d1c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	689a      	ldr	r2, [r3, #8]
 8009d2a:	2380      	movs	r3, #128	; 0x80
 8009d2c:	015b      	lsls	r3, r3, #5
 8009d2e:	4013      	ands	r3, r2
 8009d30:	d014      	beq.n	8009d5c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68da      	ldr	r2, [r3, #12]
 8009d38:	2380      	movs	r3, #128	; 0x80
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	d00d      	beq.n	8009d5c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	0018      	movs	r0, r3
 8009d44:	f7fa f8b3 	bl	8003eae <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	22ff      	movs	r2, #255	; 0xff
 8009d50:	401a      	ands	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4915      	ldr	r1, [pc, #84]	; (8009dac <HAL_RTC_AlarmIRQHandler+0x90>)
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	2380      	movs	r3, #128	; 0x80
 8009d64:	019b      	lsls	r3, r3, #6
 8009d66:	4013      	ands	r3, r2
 8009d68:	d014      	beq.n	8009d94 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68da      	ldr	r2, [r3, #12]
 8009d70:	2380      	movs	r3, #128	; 0x80
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4013      	ands	r3, r2
 8009d76:	d00d      	beq.n	8009d94 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	f000 f910 	bl	8009fa0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	22ff      	movs	r2, #255	; 0xff
 8009d88:	401a      	ands	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4908      	ldr	r1, [pc, #32]	; (8009db0 <HAL_RTC_AlarmIRQHandler+0x94>)
 8009d90:	430a      	orrs	r2, r1
 8009d92:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009d94:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <HAL_RTC_AlarmIRQHandler+0x98>)
 8009d96:	2280      	movs	r2, #128	; 0x80
 8009d98:	0292      	lsls	r2, r2, #10
 8009d9a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2221      	movs	r2, #33	; 0x21
 8009da0:	2101      	movs	r1, #1
 8009da2:	5499      	strb	r1, [r3, r2]
}
 8009da4:	46c0      	nop			; (mov r8, r8)
 8009da6:	46bd      	mov	sp, r7
 8009da8:	b002      	add	sp, #8
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	fffffe7f 	.word	0xfffffe7f
 8009db0:	fffffd7f 	.word	0xfffffd7f
 8009db4:	40010400 	.word	0x40010400

08009db8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	21a0      	movs	r1, #160	; 0xa0
 8009dcc:	438a      	bics	r2, r1
 8009dce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009dd0:	f7fa fe87 	bl	8004ae2 <HAL_GetTick>
 8009dd4:	0003      	movs	r3, r0
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009dd8:	e00a      	b.n	8009df0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009dda:	f7fa fe82 	bl	8004ae2 <HAL_GetTick>
 8009dde:	0002      	movs	r2, r0
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	1ad2      	subs	r2, r2, r3
 8009de4:	23fa      	movs	r3, #250	; 0xfa
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d901      	bls.n	8009df0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e006      	b.n	8009dfe <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	2220      	movs	r2, #32
 8009df8:	4013      	ands	r3, r2
 8009dfa:	d0ee      	beq.n	8009dda <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	0018      	movs	r0, r3
 8009e00:	46bd      	mov	sp, r7
 8009e02:	b004      	add	sp, #16
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	2240      	movs	r2, #64	; 0x40
 8009e16:	4013      	ands	r3, r2
 8009e18:	d11a      	bne.n	8009e50 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	4252      	negs	r2, r2
 8009e22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e24:	f7fa fe5d 	bl	8004ae2 <HAL_GetTick>
 8009e28:	0003      	movs	r3, r0
 8009e2a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e2c:	e00a      	b.n	8009e44 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e2e:	f7fa fe58 	bl	8004ae2 <HAL_GetTick>
 8009e32:	0002      	movs	r2, r0
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	1ad2      	subs	r2, r2, r3
 8009e38:	23fa      	movs	r3, #250	; 0xfa
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d901      	bls.n	8009e44 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e006      	b.n	8009e52 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	2240      	movs	r2, #64	; 0x40
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	d0ee      	beq.n	8009e2e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	0018      	movs	r0, r3
 8009e54:	46bd      	mov	sp, r7
 8009e56:	b004      	add	sp, #16
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	0002      	movs	r2, r0
 8009e62:	1dfb      	adds	r3, r7, #7
 8009e64:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009e6a:	230b      	movs	r3, #11
 8009e6c:	18fb      	adds	r3, r7, r3
 8009e6e:	1dfa      	adds	r2, r7, #7
 8009e70:	7812      	ldrb	r2, [r2, #0]
 8009e72:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8009e74:	e008      	b.n	8009e88 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009e7c:	220b      	movs	r2, #11
 8009e7e:	18bb      	adds	r3, r7, r2
 8009e80:	18ba      	adds	r2, r7, r2
 8009e82:	7812      	ldrb	r2, [r2, #0]
 8009e84:	3a0a      	subs	r2, #10
 8009e86:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8009e88:	210b      	movs	r1, #11
 8009e8a:	187b      	adds	r3, r7, r1
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b09      	cmp	r3, #9
 8009e90:	d8f1      	bhi.n	8009e76 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	011b      	lsls	r3, r3, #4
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	187b      	adds	r3, r7, r1
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	b2db      	uxtb	r3, r3
}
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	b004      	add	sp, #16
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	0002      	movs	r2, r0
 8009eb2:	1dfb      	adds	r3, r7, #7
 8009eb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009eb6:	1dfb      	adds	r3, r7, #7
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	091b      	lsrs	r3, r3, #4
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	001a      	movs	r2, r3
 8009ec0:	0013      	movs	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	189b      	adds	r3, r3, r2
 8009ec6:	005b      	lsls	r3, r3, #1
 8009ec8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	1dfb      	adds	r3, r7, #7
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	210f      	movs	r1, #15
 8009ed4:	400b      	ands	r3, r1
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	18d3      	adds	r3, r2, r3
 8009eda:	b2db      	uxtb	r3, r3
}
 8009edc:	0018      	movs	r0, r3
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	b004      	add	sp, #16
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3350      	adds	r3, #80	; 0x50
 8009ef6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	18d3      	adds	r3, r2, r3
 8009f00:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	601a      	str	r2, [r3, #0]
}
 8009f08:	46c0      	nop			; (mov r8, r8)
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	b006      	add	sp, #24
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3350      	adds	r3, #80	; 0x50
 8009f20:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	18d3      	adds	r3, r2, r3
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
}
 8009f30:	0018      	movs	r0, r3
 8009f32:	46bd      	mov	sp, r7
 8009f34:	b004      	add	sp, #16
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	5c9b      	ldrb	r3, [r3, r2]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d101      	bne.n	8009f4e <HAL_RTCEx_EnableBypassShadow+0x16>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	e024      	b.n	8009f98 <HAL_RTCEx_EnableBypassShadow+0x60>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2220      	movs	r2, #32
 8009f52:	2101      	movs	r1, #1
 8009f54:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2221      	movs	r2, #33	; 0x21
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	22ca      	movs	r2, #202	; 0xca
 8009f64:	625a      	str	r2, [r3, #36]	; 0x24
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2253      	movs	r2, #83	; 0x53
 8009f6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689a      	ldr	r2, [r3, #8]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2120      	movs	r1, #32
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	22ff      	movs	r2, #255	; 0xff
 8009f84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2221      	movs	r2, #33	; 0x21
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2220      	movs	r2, #32
 8009f92:	2100      	movs	r1, #0
 8009f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	0018      	movs	r0, r3
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	b002      	add	sp, #8
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009fa8:	46c0      	nop			; (mov r8, r8)
 8009faa:	46bd      	mov	sp, r7
 8009fac:	b002      	add	sp, #8
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e083      	b.n	800a0ca <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	2382      	movs	r3, #130	; 0x82
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d009      	beq.n	8009fea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	61da      	str	r2, [r3, #28]
 8009fdc:	e005      	b.n	8009fea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2251      	movs	r2, #81	; 0x51
 8009ff4:	5c9b      	ldrb	r3, [r3, r2]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d107      	bne.n	800a00c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2250      	movs	r2, #80	; 0x50
 800a000:	2100      	movs	r1, #0
 800a002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	0018      	movs	r0, r3
 800a008:	f000 f866 	bl	800a0d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2251      	movs	r2, #81	; 0x51
 800a010:	2102      	movs	r1, #2
 800a012:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2140      	movs	r1, #64	; 0x40
 800a020:	438a      	bics	r2, r1
 800a022:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	2382      	movs	r3, #130	; 0x82
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	401a      	ands	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6899      	ldr	r1, [r3, #8]
 800a032:	2384      	movs	r3, #132	; 0x84
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	400b      	ands	r3, r1
 800a038:	431a      	orrs	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68d9      	ldr	r1, [r3, #12]
 800a03e:	2380      	movs	r3, #128	; 0x80
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	400b      	ands	r3, r1
 800a044:	431a      	orrs	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	2102      	movs	r1, #2
 800a04c:	400b      	ands	r3, r1
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	2101      	movs	r1, #1
 800a056:	400b      	ands	r3, r1
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6999      	ldr	r1, [r3, #24]
 800a05e:	2380      	movs	r3, #128	; 0x80
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	400b      	ands	r3, r1
 800a064:	431a      	orrs	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	2138      	movs	r1, #56	; 0x38
 800a06c:	400b      	ands	r3, r1
 800a06e:	431a      	orrs	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	2180      	movs	r1, #128	; 0x80
 800a076:	400b      	ands	r3, r1
 800a078:	431a      	orrs	r2, r3
 800a07a:	0011      	movs	r1, r2
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a080:	2380      	movs	r3, #128	; 0x80
 800a082:	019b      	lsls	r3, r3, #6
 800a084:	401a      	ands	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	0c1b      	lsrs	r3, r3, #16
 800a094:	2204      	movs	r2, #4
 800a096:	4013      	ands	r3, r2
 800a098:	0019      	movs	r1, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	2210      	movs	r2, #16
 800a0a0:	401a      	ands	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4907      	ldr	r1, [pc, #28]	; (800a0d4 <HAL_SPI_Init+0x124>)
 800a0b6:	400a      	ands	r2, r1
 800a0b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2251      	movs	r2, #81	; 0x51
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	b002      	add	sp, #8
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	46c0      	nop			; (mov r8, r8)
 800a0d4:	fffff7ff 	.word	0xfffff7ff

0800a0d8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a0e0:	46c0      	nop			; (mov r8, r8)
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	b002      	add	sp, #8
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08c      	sub	sp, #48	; 0x30
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	001a      	movs	r2, r3
 800a0f6:	1cbb      	adds	r3, r7, #2
 800a0f8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a0fe:	232b      	movs	r3, #43	; 0x2b
 800a100:	18fb      	adds	r3, r7, r3
 800a102:	2200      	movs	r2, #0
 800a104:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2250      	movs	r2, #80	; 0x50
 800a10a:	5c9b      	ldrb	r3, [r3, r2]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d101      	bne.n	800a114 <HAL_SPI_TransmitReceive+0x2c>
 800a110:	2302      	movs	r3, #2
 800a112:	e1a0      	b.n	800a456 <HAL_SPI_TransmitReceive+0x36e>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2250      	movs	r2, #80	; 0x50
 800a118:	2101      	movs	r1, #1
 800a11a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a11c:	f7fa fce1 	bl	8004ae2 <HAL_GetTick>
 800a120:	0003      	movs	r3, r0
 800a122:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a124:	2023      	movs	r0, #35	; 0x23
 800a126:	183b      	adds	r3, r7, r0
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	2151      	movs	r1, #81	; 0x51
 800a12c:	5c52      	ldrb	r2, [r2, r1]
 800a12e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a136:	231a      	movs	r3, #26
 800a138:	18fb      	adds	r3, r7, r3
 800a13a:	1cba      	adds	r2, r7, #2
 800a13c:	8812      	ldrh	r2, [r2, #0]
 800a13e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a140:	183b      	adds	r3, r7, r0
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d011      	beq.n	800a16c <HAL_SPI_TransmitReceive+0x84>
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	2382      	movs	r3, #130	; 0x82
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	429a      	cmp	r2, r3
 800a150:	d107      	bne.n	800a162 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d103      	bne.n	800a162 <HAL_SPI_TransmitReceive+0x7a>
 800a15a:	183b      	adds	r3, r7, r0
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d004      	beq.n	800a16c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a162:	232b      	movs	r3, #43	; 0x2b
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	2202      	movs	r2, #2
 800a168:	701a      	strb	r2, [r3, #0]
    goto error;
 800a16a:	e169      	b.n	800a440 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d006      	beq.n	800a180 <HAL_SPI_TransmitReceive+0x98>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d003      	beq.n	800a180 <HAL_SPI_TransmitReceive+0x98>
 800a178:	1cbb      	adds	r3, r7, #2
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d104      	bne.n	800a18a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a180:	232b      	movs	r3, #43	; 0x2b
 800a182:	18fb      	adds	r3, r7, r3
 800a184:	2201      	movs	r2, #1
 800a186:	701a      	strb	r2, [r3, #0]
    goto error;
 800a188:	e15a      	b.n	800a440 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2251      	movs	r2, #81	; 0x51
 800a18e:	5c9b      	ldrb	r3, [r3, r2]
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b04      	cmp	r3, #4
 800a194:	d003      	beq.n	800a19e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2251      	movs	r2, #81	; 0x51
 800a19a:	2105      	movs	r1, #5
 800a19c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	1cba      	adds	r2, r7, #2
 800a1ae:	8812      	ldrh	r2, [r2, #0]
 800a1b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	1cba      	adds	r2, r7, #2
 800a1b6:	8812      	ldrh	r2, [r2, #0]
 800a1b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	1cba      	adds	r2, r7, #2
 800a1c4:	8812      	ldrh	r2, [r2, #0]
 800a1c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	1cba      	adds	r2, r7, #2
 800a1cc:	8812      	ldrh	r2, [r2, #0]
 800a1ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2240      	movs	r2, #64	; 0x40
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	2b40      	cmp	r3, #64	; 0x40
 800a1e8:	d007      	beq.n	800a1fa <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2140      	movs	r1, #64	; 0x40
 800a1f6:	430a      	orrs	r2, r1
 800a1f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	2380      	movs	r3, #128	; 0x80
 800a200:	011b      	lsls	r3, r3, #4
 800a202:	429a      	cmp	r2, r3
 800a204:	d000      	beq.n	800a208 <HAL_SPI_TransmitReceive+0x120>
 800a206:	e07a      	b.n	800a2fe <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d004      	beq.n	800a21a <HAL_SPI_TransmitReceive+0x132>
 800a210:	231a      	movs	r3, #26
 800a212:	18fb      	adds	r3, r7, r3
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d166      	bne.n	800a2e8 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	881a      	ldrh	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22a:	1c9a      	adds	r2, r3, #2
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a234:	b29b      	uxth	r3, r3
 800a236:	3b01      	subs	r3, #1
 800a238:	b29a      	uxth	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a23e:	e053      	b.n	800a2e8 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	2202      	movs	r2, #2
 800a248:	4013      	ands	r3, r2
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d11b      	bne.n	800a286 <HAL_SPI_TransmitReceive+0x19e>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a252:	b29b      	uxth	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	d016      	beq.n	800a286 <HAL_SPI_TransmitReceive+0x19e>
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d113      	bne.n	800a286 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	881a      	ldrh	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26e:	1c9a      	adds	r2, r3, #2
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	2201      	movs	r2, #1
 800a28e:	4013      	ands	r3, r2
 800a290:	2b01      	cmp	r3, #1
 800a292:	d119      	bne.n	800a2c8 <HAL_SPI_TransmitReceive+0x1e0>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a298:	b29b      	uxth	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d014      	beq.n	800a2c8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68da      	ldr	r2, [r3, #12]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	b292      	uxth	r2, r2
 800a2aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	1c9a      	adds	r2, r3, #2
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a2c8:	f7fa fc0b 	bl	8004ae2 <HAL_GetTick>
 800a2cc:	0002      	movs	r2, r0
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d807      	bhi.n	800a2e8 <HAL_SPI_TransmitReceive+0x200>
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	3301      	adds	r3, #1
 800a2dc:	d004      	beq.n	800a2e8 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800a2de:	232b      	movs	r3, #43	; 0x2b
 800a2e0:	18fb      	adds	r3, r7, r3
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	701a      	strb	r2, [r3, #0]
        goto error;
 800a2e6:	e0ab      	b.n	800a440 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1a6      	bne.n	800a240 <HAL_SPI_TransmitReceive+0x158>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1a1      	bne.n	800a240 <HAL_SPI_TransmitReceive+0x158>
 800a2fc:	e07f      	b.n	800a3fe <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d005      	beq.n	800a312 <HAL_SPI_TransmitReceive+0x22a>
 800a306:	231a      	movs	r3, #26
 800a308:	18fb      	adds	r3, r7, r3
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d000      	beq.n	800a312 <HAL_SPI_TransmitReceive+0x22a>
 800a310:	e06b      	b.n	800a3ea <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	330c      	adds	r3, #12
 800a31c:	7812      	ldrb	r2, [r2, #0]
 800a31e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a32e:	b29b      	uxth	r3, r3
 800a330:	3b01      	subs	r3, #1
 800a332:	b29a      	uxth	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a338:	e057      	b.n	800a3ea <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	2202      	movs	r2, #2
 800a342:	4013      	ands	r3, r2
 800a344:	2b02      	cmp	r3, #2
 800a346:	d11c      	bne.n	800a382 <HAL_SPI_TransmitReceive+0x29a>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d017      	beq.n	800a382 <HAL_SPI_TransmitReceive+0x29a>
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	2b01      	cmp	r3, #1
 800a356:	d114      	bne.n	800a382 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	330c      	adds	r3, #12
 800a362:	7812      	ldrb	r2, [r2, #0]
 800a364:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a374:	b29b      	uxth	r3, r3
 800a376:	3b01      	subs	r3, #1
 800a378:	b29a      	uxth	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	2201      	movs	r2, #1
 800a38a:	4013      	ands	r3, r2
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d119      	bne.n	800a3c4 <HAL_SPI_TransmitReceive+0x2dc>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a394:	b29b      	uxth	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d014      	beq.n	800a3c4 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a4:	b2d2      	uxtb	r2, r2
 800a3a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3c4:	f7fa fb8d 	bl	8004ae2 <HAL_GetTick>
 800a3c8:	0002      	movs	r2, r0
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d802      	bhi.n	800a3da <HAL_SPI_TransmitReceive+0x2f2>
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	d102      	bne.n	800a3e0 <HAL_SPI_TransmitReceive+0x2f8>
 800a3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800a3e0:	232b      	movs	r3, #43	; 0x2b
 800a3e2:	18fb      	adds	r3, r7, r3
 800a3e4:	2203      	movs	r2, #3
 800a3e6:	701a      	strb	r2, [r3, #0]
        goto error;
 800a3e8:	e02a      	b.n	800a440 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1a2      	bne.n	800a33a <HAL_SPI_TransmitReceive+0x252>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d19d      	bne.n	800a33a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	0018      	movs	r0, r3
 800a406:	f000 f8c5 	bl	800a594 <SPI_EndRxTxTransaction>
 800a40a:	1e03      	subs	r3, r0, #0
 800a40c:	d007      	beq.n	800a41e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800a40e:	232b      	movs	r3, #43	; 0x2b
 800a410:	18fb      	adds	r3, r7, r3
 800a412:	2201      	movs	r2, #1
 800a414:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2220      	movs	r2, #32
 800a41a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a41c:	e010      	b.n	800a440 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10b      	bne.n	800a43e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	617b      	str	r3, [r7, #20]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	617b      	str	r3, [r7, #20]
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	e000      	b.n	800a440 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800a43e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2251      	movs	r2, #81	; 0x51
 800a444:	2101      	movs	r1, #1
 800a446:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2250      	movs	r2, #80	; 0x50
 800a44c:	2100      	movs	r1, #0
 800a44e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a450:	232b      	movs	r3, #43	; 0x2b
 800a452:	18fb      	adds	r3, r7, r3
 800a454:	781b      	ldrb	r3, [r3, #0]
}
 800a456:	0018      	movs	r0, r3
 800a458:	46bd      	mov	sp, r7
 800a45a:	b00c      	add	sp, #48	; 0x30
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2251      	movs	r2, #81	; 0x51
 800a46a:	5c9b      	ldrb	r3, [r3, r2]
 800a46c:	b2db      	uxtb	r3, r3
}
 800a46e:	0018      	movs	r0, r3
 800a470:	46bd      	mov	sp, r7
 800a472:	b002      	add	sp, #8
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	1dfb      	adds	r3, r7, #7
 800a486:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a488:	f7fa fb2b 	bl	8004ae2 <HAL_GetTick>
 800a48c:	0002      	movs	r2, r0
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	18d3      	adds	r3, r2, r3
 800a496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a498:	f7fa fb23 	bl	8004ae2 <HAL_GetTick>
 800a49c:	0003      	movs	r3, r0
 800a49e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4a0:	4b3a      	ldr	r3, [pc, #232]	; (800a58c <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	015b      	lsls	r3, r3, #5
 800a4a6:	0d1b      	lsrs	r3, r3, #20
 800a4a8:	69fa      	ldr	r2, [r7, #28]
 800a4aa:	4353      	muls	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4ae:	e058      	b.n	800a562 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	d055      	beq.n	800a562 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4b6:	f7fa fb14 	bl	8004ae2 <HAL_GetTick>
 800a4ba:	0002      	movs	r2, r0
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	69fa      	ldr	r2, [r7, #28]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d902      	bls.n	800a4cc <SPI_WaitFlagStateUntilTimeout+0x54>
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d142      	bne.n	800a552 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	21e0      	movs	r1, #224	; 0xe0
 800a4d8:	438a      	bics	r2, r1
 800a4da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	2382      	movs	r3, #130	; 0x82
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d113      	bne.n	800a510 <SPI_WaitFlagStateUntilTimeout+0x98>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689a      	ldr	r2, [r3, #8]
 800a4ec:	2380      	movs	r3, #128	; 0x80
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d005      	beq.n	800a500 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	2380      	movs	r3, #128	; 0x80
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d107      	bne.n	800a510 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2140      	movs	r1, #64	; 0x40
 800a50c:	438a      	bics	r2, r1
 800a50e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a514:	2380      	movs	r3, #128	; 0x80
 800a516:	019b      	lsls	r3, r3, #6
 800a518:	429a      	cmp	r2, r3
 800a51a:	d110      	bne.n	800a53e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	491a      	ldr	r1, [pc, #104]	; (800a590 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a528:	400a      	ands	r2, r1
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2180      	movs	r1, #128	; 0x80
 800a538:	0189      	lsls	r1, r1, #6
 800a53a:	430a      	orrs	r2, r1
 800a53c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2251      	movs	r2, #81	; 0x51
 800a542:	2101      	movs	r1, #1
 800a544:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2250      	movs	r2, #80	; 0x50
 800a54a:	2100      	movs	r1, #0
 800a54c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e017      	b.n	800a582 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a558:	2300      	movs	r3, #0
 800a55a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	3b01      	subs	r3, #1
 800a560:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	4013      	ands	r3, r2
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	425a      	negs	r2, r3
 800a572:	4153      	adcs	r3, r2
 800a574:	b2db      	uxtb	r3, r3
 800a576:	001a      	movs	r2, r3
 800a578:	1dfb      	adds	r3, r7, #7
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d197      	bne.n	800a4b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	0018      	movs	r0, r3
 800a584:	46bd      	mov	sp, r7
 800a586:	b008      	add	sp, #32
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	46c0      	nop			; (mov r8, r8)
 800a58c:	20000070 	.word	0x20000070
 800a590:	ffffdfff 	.word	0xffffdfff

0800a594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af02      	add	r7, sp, #8
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a5a0:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <SPI_EndRxTxTransaction+0x84>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	491d      	ldr	r1, [pc, #116]	; (800a61c <SPI_EndRxTxTransaction+0x88>)
 800a5a6:	0018      	movs	r0, r3
 800a5a8:	f7f5 fdc0 	bl	800012c <__udivsi3>
 800a5ac:	0003      	movs	r3, r0
 800a5ae:	001a      	movs	r2, r3
 800a5b0:	0013      	movs	r3, r2
 800a5b2:	015b      	lsls	r3, r3, #5
 800a5b4:	1a9b      	subs	r3, r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	189b      	adds	r3, r3, r2
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	2382      	movs	r3, #130	; 0x82
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d112      	bne.n	800a5f0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	0013      	movs	r3, r2
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2180      	movs	r1, #128	; 0x80
 800a5d8:	f7ff ff4e 	bl	800a478 <SPI_WaitFlagStateUntilTimeout>
 800a5dc:	1e03      	subs	r3, r0, #0
 800a5de:	d016      	beq.n	800a60e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e00f      	b.n	800a610 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	2280      	movs	r2, #128	; 0x80
 800a604:	4013      	ands	r3, r2
 800a606:	2b80      	cmp	r3, #128	; 0x80
 800a608:	d0f2      	beq.n	800a5f0 <SPI_EndRxTxTransaction+0x5c>
 800a60a:	e000      	b.n	800a60e <SPI_EndRxTxTransaction+0x7a>
        break;
 800a60c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	0018      	movs	r0, r3
 800a612:	46bd      	mov	sp, r7
 800a614:	b006      	add	sp, #24
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000070 	.word	0x20000070
 800a61c:	016e3600 	.word	0x016e3600

0800a620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e044      	b.n	800a6bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a636:	2b00      	cmp	r3, #0
 800a638:	d107      	bne.n	800a64a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2274      	movs	r2, #116	; 0x74
 800a63e:	2100      	movs	r1, #0
 800a640:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	0018      	movs	r0, r3
 800a646:	f7fa fb33 	bl	8004cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2224      	movs	r2, #36	; 0x24
 800a64e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2101      	movs	r1, #1
 800a65c:	438a      	bics	r2, r1
 800a65e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	0018      	movs	r0, r3
 800a664:	f000 fb3a 	bl	800acdc <UART_SetConfig>
 800a668:	0003      	movs	r3, r0
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d101      	bne.n	800a672 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e024      	b.n	800a6bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	0018      	movs	r0, r3
 800a67e:	f000 fdeb 	bl	800b258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	490d      	ldr	r1, [pc, #52]	; (800a6c4 <HAL_UART_Init+0xa4>)
 800a68e:	400a      	ands	r2, r1
 800a690:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	212a      	movs	r1, #42	; 0x2a
 800a69e:	438a      	bics	r2, r1
 800a6a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f000 fe83 	bl	800b3c0 <UART_CheckIdleState>
 800a6ba:	0003      	movs	r3, r0
}
 800a6bc:	0018      	movs	r0, r3
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	b002      	add	sp, #8
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	ffffb7ff 	.word	0xffffb7ff

0800a6c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	1dbb      	adds	r3, r7, #6
 800a6d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	d144      	bne.n	800a768 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <HAL_UART_Receive_IT+0x24>
 800a6e4:	1dbb      	adds	r3, r7, #6
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e03c      	b.n	800a76a <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	015b      	lsls	r3, r3, #5
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d109      	bne.n	800a710 <HAL_UART_Receive_IT+0x48>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d105      	bne.n	800a710 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2201      	movs	r2, #1
 800a708:	4013      	ands	r3, r2
 800a70a:	d001      	beq.n	800a710 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e02c      	b.n	800a76a <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2274      	movs	r2, #116	; 0x74
 800a714:	5c9b      	ldrb	r3, [r3, r2]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d101      	bne.n	800a71e <HAL_UART_Receive_IT+0x56>
 800a71a:	2302      	movs	r3, #2
 800a71c:	e025      	b.n	800a76a <HAL_UART_Receive_IT+0xa2>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2274      	movs	r2, #116	; 0x74
 800a722:	2101      	movs	r1, #1
 800a724:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a10      	ldr	r2, [pc, #64]	; (800a774 <HAL_UART_Receive_IT+0xac>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d00f      	beq.n	800a756 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	2380      	movs	r3, #128	; 0x80
 800a73e:	041b      	lsls	r3, r3, #16
 800a740:	4013      	ands	r3, r2
 800a742:	d008      	beq.n	800a756 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2180      	movs	r1, #128	; 0x80
 800a750:	04c9      	lsls	r1, r1, #19
 800a752:	430a      	orrs	r2, r1
 800a754:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a756:	1dbb      	adds	r3, r7, #6
 800a758:	881a      	ldrh	r2, [r3, #0]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	0018      	movs	r0, r3
 800a760:	f000 fef4 	bl	800b54c <UART_Start_Receive_IT>
 800a764:	0003      	movs	r3, r0
 800a766:	e000      	b.n	800a76a <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a768:	2302      	movs	r3, #2
  }
}
 800a76a:	0018      	movs	r0, r3
 800a76c:	46bd      	mov	sp, r7
 800a76e:	b004      	add	sp, #16
 800a770:	bd80      	pop	{r7, pc}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	40004800 	.word	0x40004800

0800a778 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	1dbb      	adds	r3, r7, #6
 800a784:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a78a:	2b20      	cmp	r3, #32
 800a78c:	d000      	beq.n	800a790 <HAL_UART_Transmit_DMA+0x18>
 800a78e:	e079      	b.n	800a884 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_UART_Transmit_DMA+0x26>
 800a796:	1dbb      	adds	r3, r7, #6
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e071      	b.n	800a886 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	2380      	movs	r3, #128	; 0x80
 800a7a8:	015b      	lsls	r3, r3, #5
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d109      	bne.n	800a7c2 <HAL_UART_Transmit_DMA+0x4a>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d105      	bne.n	800a7c2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	d001      	beq.n	800a7c2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e061      	b.n	800a886 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2274      	movs	r2, #116	; 0x74
 800a7c6:	5c9b      	ldrb	r3, [r3, r2]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d101      	bne.n	800a7d0 <HAL_UART_Transmit_DMA+0x58>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e05a      	b.n	800a886 <HAL_UART_Transmit_DMA+0x10e>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2274      	movs	r2, #116	; 0x74
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	1dba      	adds	r2, r7, #6
 800a7e2:	2150      	movs	r1, #80	; 0x50
 800a7e4:	8812      	ldrh	r2, [r2, #0]
 800a7e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	1dba      	adds	r2, r7, #6
 800a7ec:	2152      	movs	r1, #82	; 0x52
 800a7ee:	8812      	ldrh	r2, [r2, #0]
 800a7f0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2280      	movs	r2, #128	; 0x80
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2221      	movs	r2, #33	; 0x21
 800a7fe:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a804:	2b00      	cmp	r3, #0
 800a806:	d02b      	beq.n	800a860 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a80c:	4a20      	ldr	r2, [pc, #128]	; (800a890 <HAL_UART_Transmit_DMA+0x118>)
 800a80e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a814:	4a1f      	ldr	r2, [pc, #124]	; (800a894 <HAL_UART_Transmit_DMA+0x11c>)
 800a816:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a81c:	4a1e      	ldr	r2, [pc, #120]	; (800a898 <HAL_UART_Transmit_DMA+0x120>)
 800a81e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a824:	2200      	movs	r2, #0
 800a826:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a830:	0019      	movs	r1, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3328      	adds	r3, #40	; 0x28
 800a838:	001a      	movs	r2, r3
 800a83a:	1dbb      	adds	r3, r7, #6
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	f7fc fae3 	bl	8006e08 <HAL_DMA_Start_IT>
 800a842:	1e03      	subs	r3, r0, #0
 800a844:	d00c      	beq.n	800a860 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2280      	movs	r2, #128	; 0x80
 800a84a:	2110      	movs	r1, #16
 800a84c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2274      	movs	r2, #116	; 0x74
 800a852:	2100      	movs	r1, #0
 800a854:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2220      	movs	r2, #32
 800a85a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e012      	b.n	800a886 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2240      	movs	r2, #64	; 0x40
 800a866:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2274      	movs	r2, #116	; 0x74
 800a86c:	2100      	movs	r1, #0
 800a86e:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689a      	ldr	r2, [r3, #8]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2180      	movs	r1, #128	; 0x80
 800a87c:	430a      	orrs	r2, r1
 800a87e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	e000      	b.n	800a886 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a884:	2302      	movs	r3, #2
  }
}
 800a886:	0018      	movs	r0, r3
 800a888:	46bd      	mov	sp, r7
 800a88a:	b004      	add	sp, #16
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	0800b6f1 	.word	0x0800b6f1
 800a894:	0800b745 	.word	0x0800b745
 800a898:	0800b763 	.word	0x0800b763

0800a89c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	4ab5      	ldr	r2, [pc, #724]	; (800ab94 <HAL_UART_IRQHandler+0x2f8>)
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d112      	bne.n	800a8f0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	d00e      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	d00a      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d100      	bne.n	800a8e4 <HAL_UART_IRQHandler+0x48>
 800a8e2:	e1d1      	b.n	800ac88 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	0010      	movs	r0, r2
 800a8ec:	4798      	blx	r3
      }
      return;
 800a8ee:	e1cb      	b.n	800ac88 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d100      	bne.n	800a8f8 <HAL_UART_IRQHandler+0x5c>
 800a8f6:	e0d9      	b.n	800aaac <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	d104      	bne.n	800a90a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	4aa5      	ldr	r2, [pc, #660]	; (800ab98 <HAL_UART_IRQHandler+0x2fc>)
 800a904:	4013      	ands	r3, r2
 800a906:	d100      	bne.n	800a90a <HAL_UART_IRQHandler+0x6e>
 800a908:	e0d0      	b.n	800aaac <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	2201      	movs	r2, #1
 800a90e:	4013      	ands	r3, r2
 800a910:	d010      	beq.n	800a934 <HAL_UART_IRQHandler+0x98>
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	2380      	movs	r3, #128	; 0x80
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	4013      	ands	r3, r2
 800a91a:	d00b      	beq.n	800a934 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2201      	movs	r2, #1
 800a922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2280      	movs	r2, #128	; 0x80
 800a928:	589b      	ldr	r3, [r3, r2]
 800a92a:	2201      	movs	r2, #1
 800a92c:	431a      	orrs	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2180      	movs	r1, #128	; 0x80
 800a932:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	2202      	movs	r2, #2
 800a938:	4013      	ands	r3, r2
 800a93a:	d00f      	beq.n	800a95c <HAL_UART_IRQHandler+0xc0>
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2201      	movs	r2, #1
 800a940:	4013      	ands	r3, r2
 800a942:	d00b      	beq.n	800a95c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2202      	movs	r2, #2
 800a94a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2280      	movs	r2, #128	; 0x80
 800a950:	589b      	ldr	r3, [r3, r2]
 800a952:	2204      	movs	r2, #4
 800a954:	431a      	orrs	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2180      	movs	r1, #128	; 0x80
 800a95a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	2204      	movs	r2, #4
 800a960:	4013      	ands	r3, r2
 800a962:	d00f      	beq.n	800a984 <HAL_UART_IRQHandler+0xe8>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2201      	movs	r2, #1
 800a968:	4013      	ands	r3, r2
 800a96a:	d00b      	beq.n	800a984 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2204      	movs	r2, #4
 800a972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2280      	movs	r2, #128	; 0x80
 800a978:	589b      	ldr	r3, [r3, r2]
 800a97a:	2202      	movs	r2, #2
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	2208      	movs	r2, #8
 800a988:	4013      	ands	r3, r2
 800a98a:	d013      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	2220      	movs	r2, #32
 800a990:	4013      	ands	r3, r2
 800a992:	d103      	bne.n	800a99c <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2201      	movs	r2, #1
 800a998:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a99a:	d00b      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2208      	movs	r2, #8
 800a9a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2280      	movs	r2, #128	; 0x80
 800a9a8:	589b      	ldr	r3, [r3, r2]
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	431a      	orrs	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2180      	movs	r1, #128	; 0x80
 800a9b2:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a9b4:	69fa      	ldr	r2, [r7, #28]
 800a9b6:	2380      	movs	r3, #128	; 0x80
 800a9b8:	011b      	lsls	r3, r3, #4
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	d011      	beq.n	800a9e2 <HAL_UART_IRQHandler+0x146>
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	2380      	movs	r3, #128	; 0x80
 800a9c2:	04db      	lsls	r3, r3, #19
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	d00c      	beq.n	800a9e2 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2280      	movs	r2, #128	; 0x80
 800a9ce:	0112      	lsls	r2, r2, #4
 800a9d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2280      	movs	r2, #128	; 0x80
 800a9d6:	589b      	ldr	r3, [r3, r2]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2180      	movs	r1, #128	; 0x80
 800a9e0:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2280      	movs	r2, #128	; 0x80
 800a9e6:	589b      	ldr	r3, [r3, r2]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d100      	bne.n	800a9ee <HAL_UART_IRQHandler+0x152>
 800a9ec:	e14e      	b.n	800ac8c <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	d00c      	beq.n	800aa10 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	d008      	beq.n	800aa10 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d004      	beq.n	800aa10 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	0010      	movs	r0, r2
 800aa0e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2280      	movs	r2, #128	; 0x80
 800aa14:	589b      	ldr	r3, [r3, r2]
 800aa16:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	2240      	movs	r2, #64	; 0x40
 800aa20:	4013      	ands	r3, r2
 800aa22:	2b40      	cmp	r3, #64	; 0x40
 800aa24:	d003      	beq.n	800aa2e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2228      	movs	r2, #40	; 0x28
 800aa2a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa2c:	d033      	beq.n	800aa96 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	0018      	movs	r0, r3
 800aa32:	f000 fe2d 	bl	800b690 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	2240      	movs	r2, #64	; 0x40
 800aa3e:	4013      	ands	r3, r2
 800aa40:	2b40      	cmp	r3, #64	; 0x40
 800aa42:	d123      	bne.n	800aa8c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	689a      	ldr	r2, [r3, #8]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2140      	movs	r1, #64	; 0x40
 800aa50:	438a      	bics	r2, r1
 800aa52:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d012      	beq.n	800aa82 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa60:	4a4e      	ldr	r2, [pc, #312]	; (800ab9c <HAL_UART_IRQHandler+0x300>)
 800aa62:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa68:	0018      	movs	r0, r3
 800aa6a:	f7fc fa73 	bl	8006f54 <HAL_DMA_Abort_IT>
 800aa6e:	1e03      	subs	r3, r0, #0
 800aa70:	d01a      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7c:	0018      	movs	r0, r3
 800aa7e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa80:	e012      	b.n	800aaa8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	0018      	movs	r0, r3
 800aa86:	f000 f915 	bl	800acb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa8a:	e00d      	b.n	800aaa8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f000 f910 	bl	800acb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa94:	e008      	b.n	800aaa8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	0018      	movs	r0, r3
 800aa9a:	f000 f90b 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2280      	movs	r2, #128	; 0x80
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800aaa6:	e0f1      	b.n	800ac8c <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaa8:	46c0      	nop			; (mov r8, r8)
    return;
 800aaaa:	e0ef      	b.n	800ac8c <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d000      	beq.n	800aab6 <HAL_UART_IRQHandler+0x21a>
 800aab4:	e0b5      	b.n	800ac22 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	2210      	movs	r2, #16
 800aaba:	4013      	ands	r3, r2
 800aabc:	d100      	bne.n	800aac0 <HAL_UART_IRQHandler+0x224>
 800aabe:	e0b0      	b.n	800ac22 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	2210      	movs	r2, #16
 800aac4:	4013      	ands	r3, r2
 800aac6:	d100      	bne.n	800aaca <HAL_UART_IRQHandler+0x22e>
 800aac8:	e0ab      	b.n	800ac22 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2210      	movs	r2, #16
 800aad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	2240      	movs	r2, #64	; 0x40
 800aada:	4013      	ands	r3, r2
 800aadc:	2b40      	cmp	r3, #64	; 0x40
 800aade:	d161      	bne.n	800aba4 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	2108      	movs	r1, #8
 800aaea:	187b      	adds	r3, r7, r1
 800aaec:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800aaee:	187b      	adds	r3, r7, r1
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d100      	bne.n	800aaf8 <HAL_UART_IRQHandler+0x25c>
 800aaf6:	e0cb      	b.n	800ac90 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2258      	movs	r2, #88	; 0x58
 800aafc:	5a9b      	ldrh	r3, [r3, r2]
 800aafe:	187a      	adds	r2, r7, r1
 800ab00:	8812      	ldrh	r2, [r2, #0]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d300      	bcc.n	800ab08 <HAL_UART_IRQHandler+0x26c>
 800ab06:	e0c3      	b.n	800ac90 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	187a      	adds	r2, r7, r1
 800ab0c:	215a      	movs	r1, #90	; 0x5a
 800ab0e:	8812      	ldrh	r2, [r2, #0]
 800ab10:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	d12a      	bne.n	800ab76 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	491d      	ldr	r1, [pc, #116]	; (800aba0 <HAL_UART_IRQHandler+0x304>)
 800ab2c:	400a      	ands	r2, r1
 800ab2e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	689a      	ldr	r2, [r3, #8]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	438a      	bics	r2, r1
 800ab3e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689a      	ldr	r2, [r3, #8]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2140      	movs	r1, #64	; 0x40
 800ab4c:	438a      	bics	r2, r1
 800ab4e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2220      	movs	r2, #32
 800ab54:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2110      	movs	r1, #16
 800ab68:	438a      	bics	r2, r1
 800ab6a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab70:	0018      	movs	r0, r3
 800ab72:	f7fc f9af 	bl	8006ed4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2258      	movs	r2, #88	; 0x58
 800ab7a:	5a9a      	ldrh	r2, [r3, r2]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	215a      	movs	r1, #90	; 0x5a
 800ab80:	5a5b      	ldrh	r3, [r3, r1]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	0011      	movs	r1, r2
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	f000 f899 	bl	800acc4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ab92:	e07d      	b.n	800ac90 <HAL_UART_IRQHandler+0x3f4>
 800ab94:	0000080f 	.word	0x0000080f
 800ab98:	04000120 	.word	0x04000120
 800ab9c:	0800b7e5 	.word	0x0800b7e5
 800aba0:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2258      	movs	r2, #88	; 0x58
 800aba8:	5a99      	ldrh	r1, [r3, r2]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	225a      	movs	r2, #90	; 0x5a
 800abae:	5a9b      	ldrh	r3, [r3, r2]
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	200a      	movs	r0, #10
 800abb4:	183b      	adds	r3, r7, r0
 800abb6:	1a8a      	subs	r2, r1, r2
 800abb8:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	225a      	movs	r2, #90	; 0x5a
 800abbe:	5a9b      	ldrh	r3, [r3, r2]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d100      	bne.n	800abc8 <HAL_UART_IRQHandler+0x32c>
 800abc6:	e065      	b.n	800ac94 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800abc8:	183b      	adds	r3, r7, r0
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d061      	beq.n	800ac94 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4931      	ldr	r1, [pc, #196]	; (800aca0 <HAL_UART_IRQHandler+0x404>)
 800abdc:	400a      	ands	r2, r1
 800abde:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689a      	ldr	r2, [r3, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2101      	movs	r1, #1
 800abec:	438a      	bics	r2, r1
 800abee:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2220      	movs	r2, #32
 800abf4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2110      	movs	r1, #16
 800ac0e:	438a      	bics	r2, r1
 800ac10:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac12:	183b      	adds	r3, r7, r0
 800ac14:	881a      	ldrh	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	0011      	movs	r1, r2
 800ac1a:	0018      	movs	r0, r3
 800ac1c:	f000 f852 	bl	800acc4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ac20:	e038      	b.n	800ac94 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	2380      	movs	r3, #128	; 0x80
 800ac26:	035b      	lsls	r3, r3, #13
 800ac28:	4013      	ands	r3, r2
 800ac2a:	d00e      	beq.n	800ac4a <HAL_UART_IRQHandler+0x3ae>
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	2380      	movs	r3, #128	; 0x80
 800ac30:	03db      	lsls	r3, r3, #15
 800ac32:	4013      	ands	r3, r2
 800ac34:	d009      	beq.n	800ac4a <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2280      	movs	r2, #128	; 0x80
 800ac3c:	0352      	lsls	r2, r2, #13
 800ac3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	0018      	movs	r0, r3
 800ac44:	f000 fee8 	bl	800ba18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac48:	e027      	b.n	800ac9a <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	2280      	movs	r2, #128	; 0x80
 800ac4e:	4013      	ands	r3, r2
 800ac50:	d00d      	beq.n	800ac6e <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	2280      	movs	r2, #128	; 0x80
 800ac56:	4013      	ands	r3, r2
 800ac58:	d009      	beq.n	800ac6e <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01a      	beq.n	800ac98 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	0010      	movs	r0, r2
 800ac6a:	4798      	blx	r3
    }
    return;
 800ac6c:	e014      	b.n	800ac98 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	2240      	movs	r2, #64	; 0x40
 800ac72:	4013      	ands	r3, r2
 800ac74:	d011      	beq.n	800ac9a <HAL_UART_IRQHandler+0x3fe>
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2240      	movs	r2, #64	; 0x40
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	d00d      	beq.n	800ac9a <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	0018      	movs	r0, r3
 800ac82:	f000 fdc6 	bl	800b812 <UART_EndTransmit_IT>
    return;
 800ac86:	e008      	b.n	800ac9a <HAL_UART_IRQHandler+0x3fe>
      return;
 800ac88:	46c0      	nop			; (mov r8, r8)
 800ac8a:	e006      	b.n	800ac9a <HAL_UART_IRQHandler+0x3fe>
    return;
 800ac8c:	46c0      	nop			; (mov r8, r8)
 800ac8e:	e004      	b.n	800ac9a <HAL_UART_IRQHandler+0x3fe>
      return;
 800ac90:	46c0      	nop			; (mov r8, r8)
 800ac92:	e002      	b.n	800ac9a <HAL_UART_IRQHandler+0x3fe>
      return;
 800ac94:	46c0      	nop			; (mov r8, r8)
 800ac96:	e000      	b.n	800ac9a <HAL_UART_IRQHandler+0x3fe>
    return;
 800ac98:	46c0      	nop			; (mov r8, r8)
  }

}
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	b008      	add	sp, #32
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	fffffedf 	.word	0xfffffedf

0800aca4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800acac:	46c0      	nop			; (mov r8, r8)
 800acae:	46bd      	mov	sp, r7
 800acb0:	b002      	add	sp, #8
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800acbc:	46c0      	nop			; (mov r8, r8)
 800acbe:	46bd      	mov	sp, r7
 800acc0:	b002      	add	sp, #8
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	000a      	movs	r2, r1
 800acce:	1cbb      	adds	r3, r7, #2
 800acd0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800acd2:	46c0      	nop			; (mov r8, r8)
 800acd4:	46bd      	mov	sp, r7
 800acd6:	b002      	add	sp, #8
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acdc:	b5b0      	push	{r4, r5, r7, lr}
 800acde:	b08e      	sub	sp, #56	; 0x38
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ace4:	231a      	movs	r3, #26
 800ace6:	2218      	movs	r2, #24
 800ace8:	4694      	mov	ip, r2
 800acea:	44bc      	add	ip, r7
 800acec:	4463      	add	r3, ip
 800acee:	2200      	movs	r2, #0
 800acf0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	431a      	orrs	r2, r3
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	431a      	orrs	r2, r3
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4ab0      	ldr	r2, [pc, #704]	; (800afd4 <UART_SetConfig+0x2f8>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	0019      	movs	r1, r3
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	4aac      	ldr	r2, [pc, #688]	; (800afd8 <UART_SetConfig+0x2fc>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	0019      	movs	r1, r3
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	68da      	ldr	r2, [r3, #12]
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	430a      	orrs	r2, r1
 800ad36:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4aa6      	ldr	r2, [pc, #664]	; (800afdc <UART_SetConfig+0x300>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d004      	beq.n	800ad52 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	6a1b      	ldr	r3, [r3, #32]
 800ad4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	4aa1      	ldr	r2, [pc, #644]	; (800afe0 <UART_SetConfig+0x304>)
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	0019      	movs	r1, r3
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad64:	430a      	orrs	r2, r1
 800ad66:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a9d      	ldr	r2, [pc, #628]	; (800afe4 <UART_SetConfig+0x308>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d136      	bne.n	800ade0 <UART_SetConfig+0x104>
 800ad72:	4b9d      	ldr	r3, [pc, #628]	; (800afe8 <UART_SetConfig+0x30c>)
 800ad74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad76:	2203      	movs	r2, #3
 800ad78:	4013      	ands	r3, r2
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d020      	beq.n	800adc0 <UART_SetConfig+0xe4>
 800ad7e:	d827      	bhi.n	800add0 <UART_SetConfig+0xf4>
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d00d      	beq.n	800ada0 <UART_SetConfig+0xc4>
 800ad84:	d824      	bhi.n	800add0 <UART_SetConfig+0xf4>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <UART_SetConfig+0xb4>
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d010      	beq.n	800adb0 <UART_SetConfig+0xd4>
 800ad8e:	e01f      	b.n	800add0 <UART_SetConfig+0xf4>
 800ad90:	231b      	movs	r3, #27
 800ad92:	2218      	movs	r2, #24
 800ad94:	4694      	mov	ip, r2
 800ad96:	44bc      	add	ip, r7
 800ad98:	4463      	add	r3, ip
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	701a      	strb	r2, [r3, #0]
 800ad9e:	e0c5      	b.n	800af2c <UART_SetConfig+0x250>
 800ada0:	231b      	movs	r3, #27
 800ada2:	2218      	movs	r2, #24
 800ada4:	4694      	mov	ip, r2
 800ada6:	44bc      	add	ip, r7
 800ada8:	4463      	add	r3, ip
 800adaa:	2202      	movs	r2, #2
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	e0bd      	b.n	800af2c <UART_SetConfig+0x250>
 800adb0:	231b      	movs	r3, #27
 800adb2:	2218      	movs	r2, #24
 800adb4:	4694      	mov	ip, r2
 800adb6:	44bc      	add	ip, r7
 800adb8:	4463      	add	r3, ip
 800adba:	2204      	movs	r2, #4
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	e0b5      	b.n	800af2c <UART_SetConfig+0x250>
 800adc0:	231b      	movs	r3, #27
 800adc2:	2218      	movs	r2, #24
 800adc4:	4694      	mov	ip, r2
 800adc6:	44bc      	add	ip, r7
 800adc8:	4463      	add	r3, ip
 800adca:	2208      	movs	r2, #8
 800adcc:	701a      	strb	r2, [r3, #0]
 800adce:	e0ad      	b.n	800af2c <UART_SetConfig+0x250>
 800add0:	231b      	movs	r3, #27
 800add2:	2218      	movs	r2, #24
 800add4:	4694      	mov	ip, r2
 800add6:	44bc      	add	ip, r7
 800add8:	4463      	add	r3, ip
 800adda:	2210      	movs	r2, #16
 800addc:	701a      	strb	r2, [r3, #0]
 800adde:	e0a5      	b.n	800af2c <UART_SetConfig+0x250>
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a81      	ldr	r2, [pc, #516]	; (800afec <UART_SetConfig+0x310>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d136      	bne.n	800ae58 <UART_SetConfig+0x17c>
 800adea:	4b7f      	ldr	r3, [pc, #508]	; (800afe8 <UART_SetConfig+0x30c>)
 800adec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adee:	220c      	movs	r2, #12
 800adf0:	4013      	ands	r3, r2
 800adf2:	2b0c      	cmp	r3, #12
 800adf4:	d020      	beq.n	800ae38 <UART_SetConfig+0x15c>
 800adf6:	d827      	bhi.n	800ae48 <UART_SetConfig+0x16c>
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d00d      	beq.n	800ae18 <UART_SetConfig+0x13c>
 800adfc:	d824      	bhi.n	800ae48 <UART_SetConfig+0x16c>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <UART_SetConfig+0x12c>
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d010      	beq.n	800ae28 <UART_SetConfig+0x14c>
 800ae06:	e01f      	b.n	800ae48 <UART_SetConfig+0x16c>
 800ae08:	231b      	movs	r3, #27
 800ae0a:	2218      	movs	r2, #24
 800ae0c:	4694      	mov	ip, r2
 800ae0e:	44bc      	add	ip, r7
 800ae10:	4463      	add	r3, ip
 800ae12:	2200      	movs	r2, #0
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	e089      	b.n	800af2c <UART_SetConfig+0x250>
 800ae18:	231b      	movs	r3, #27
 800ae1a:	2218      	movs	r2, #24
 800ae1c:	4694      	mov	ip, r2
 800ae1e:	44bc      	add	ip, r7
 800ae20:	4463      	add	r3, ip
 800ae22:	2202      	movs	r2, #2
 800ae24:	701a      	strb	r2, [r3, #0]
 800ae26:	e081      	b.n	800af2c <UART_SetConfig+0x250>
 800ae28:	231b      	movs	r3, #27
 800ae2a:	2218      	movs	r2, #24
 800ae2c:	4694      	mov	ip, r2
 800ae2e:	44bc      	add	ip, r7
 800ae30:	4463      	add	r3, ip
 800ae32:	2204      	movs	r2, #4
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	e079      	b.n	800af2c <UART_SetConfig+0x250>
 800ae38:	231b      	movs	r3, #27
 800ae3a:	2218      	movs	r2, #24
 800ae3c:	4694      	mov	ip, r2
 800ae3e:	44bc      	add	ip, r7
 800ae40:	4463      	add	r3, ip
 800ae42:	2208      	movs	r2, #8
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	e071      	b.n	800af2c <UART_SetConfig+0x250>
 800ae48:	231b      	movs	r3, #27
 800ae4a:	2218      	movs	r2, #24
 800ae4c:	4694      	mov	ip, r2
 800ae4e:	44bc      	add	ip, r7
 800ae50:	4463      	add	r3, ip
 800ae52:	2210      	movs	r2, #16
 800ae54:	701a      	strb	r2, [r3, #0]
 800ae56:	e069      	b.n	800af2c <UART_SetConfig+0x250>
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a64      	ldr	r2, [pc, #400]	; (800aff0 <UART_SetConfig+0x314>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d107      	bne.n	800ae72 <UART_SetConfig+0x196>
 800ae62:	231b      	movs	r3, #27
 800ae64:	2218      	movs	r2, #24
 800ae66:	4694      	mov	ip, r2
 800ae68:	44bc      	add	ip, r7
 800ae6a:	4463      	add	r3, ip
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	701a      	strb	r2, [r3, #0]
 800ae70:	e05c      	b.n	800af2c <UART_SetConfig+0x250>
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a5f      	ldr	r2, [pc, #380]	; (800aff4 <UART_SetConfig+0x318>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d107      	bne.n	800ae8c <UART_SetConfig+0x1b0>
 800ae7c:	231b      	movs	r3, #27
 800ae7e:	2218      	movs	r2, #24
 800ae80:	4694      	mov	ip, r2
 800ae82:	44bc      	add	ip, r7
 800ae84:	4463      	add	r3, ip
 800ae86:	2200      	movs	r2, #0
 800ae88:	701a      	strb	r2, [r3, #0]
 800ae8a:	e04f      	b.n	800af2c <UART_SetConfig+0x250>
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a52      	ldr	r2, [pc, #328]	; (800afdc <UART_SetConfig+0x300>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d143      	bne.n	800af1e <UART_SetConfig+0x242>
 800ae96:	4b54      	ldr	r3, [pc, #336]	; (800afe8 <UART_SetConfig+0x30c>)
 800ae98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae9a:	23c0      	movs	r3, #192	; 0xc0
 800ae9c:	011b      	lsls	r3, r3, #4
 800ae9e:	4013      	ands	r3, r2
 800aea0:	22c0      	movs	r2, #192	; 0xc0
 800aea2:	0112      	lsls	r2, r2, #4
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d02a      	beq.n	800aefe <UART_SetConfig+0x222>
 800aea8:	22c0      	movs	r2, #192	; 0xc0
 800aeaa:	0112      	lsls	r2, r2, #4
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d82e      	bhi.n	800af0e <UART_SetConfig+0x232>
 800aeb0:	2280      	movs	r2, #128	; 0x80
 800aeb2:	0112      	lsls	r2, r2, #4
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d012      	beq.n	800aede <UART_SetConfig+0x202>
 800aeb8:	2280      	movs	r2, #128	; 0x80
 800aeba:	0112      	lsls	r2, r2, #4
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d826      	bhi.n	800af0e <UART_SetConfig+0x232>
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d004      	beq.n	800aece <UART_SetConfig+0x1f2>
 800aec4:	2280      	movs	r2, #128	; 0x80
 800aec6:	00d2      	lsls	r2, r2, #3
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d010      	beq.n	800aeee <UART_SetConfig+0x212>
 800aecc:	e01f      	b.n	800af0e <UART_SetConfig+0x232>
 800aece:	231b      	movs	r3, #27
 800aed0:	2218      	movs	r2, #24
 800aed2:	4694      	mov	ip, r2
 800aed4:	44bc      	add	ip, r7
 800aed6:	4463      	add	r3, ip
 800aed8:	2200      	movs	r2, #0
 800aeda:	701a      	strb	r2, [r3, #0]
 800aedc:	e026      	b.n	800af2c <UART_SetConfig+0x250>
 800aede:	231b      	movs	r3, #27
 800aee0:	2218      	movs	r2, #24
 800aee2:	4694      	mov	ip, r2
 800aee4:	44bc      	add	ip, r7
 800aee6:	4463      	add	r3, ip
 800aee8:	2202      	movs	r2, #2
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	e01e      	b.n	800af2c <UART_SetConfig+0x250>
 800aeee:	231b      	movs	r3, #27
 800aef0:	2218      	movs	r2, #24
 800aef2:	4694      	mov	ip, r2
 800aef4:	44bc      	add	ip, r7
 800aef6:	4463      	add	r3, ip
 800aef8:	2204      	movs	r2, #4
 800aefa:	701a      	strb	r2, [r3, #0]
 800aefc:	e016      	b.n	800af2c <UART_SetConfig+0x250>
 800aefe:	231b      	movs	r3, #27
 800af00:	2218      	movs	r2, #24
 800af02:	4694      	mov	ip, r2
 800af04:	44bc      	add	ip, r7
 800af06:	4463      	add	r3, ip
 800af08:	2208      	movs	r2, #8
 800af0a:	701a      	strb	r2, [r3, #0]
 800af0c:	e00e      	b.n	800af2c <UART_SetConfig+0x250>
 800af0e:	231b      	movs	r3, #27
 800af10:	2218      	movs	r2, #24
 800af12:	4694      	mov	ip, r2
 800af14:	44bc      	add	ip, r7
 800af16:	4463      	add	r3, ip
 800af18:	2210      	movs	r2, #16
 800af1a:	701a      	strb	r2, [r3, #0]
 800af1c:	e006      	b.n	800af2c <UART_SetConfig+0x250>
 800af1e:	231b      	movs	r3, #27
 800af20:	2218      	movs	r2, #24
 800af22:	4694      	mov	ip, r2
 800af24:	44bc      	add	ip, r7
 800af26:	4463      	add	r3, ip
 800af28:	2210      	movs	r2, #16
 800af2a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a2a      	ldr	r2, [pc, #168]	; (800afdc <UART_SetConfig+0x300>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d000      	beq.n	800af38 <UART_SetConfig+0x25c>
 800af36:	e09e      	b.n	800b076 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af38:	231b      	movs	r3, #27
 800af3a:	2218      	movs	r2, #24
 800af3c:	4694      	mov	ip, r2
 800af3e:	44bc      	add	ip, r7
 800af40:	4463      	add	r3, ip
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b08      	cmp	r3, #8
 800af46:	d01d      	beq.n	800af84 <UART_SetConfig+0x2a8>
 800af48:	dc20      	bgt.n	800af8c <UART_SetConfig+0x2b0>
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	d015      	beq.n	800af7a <UART_SetConfig+0x29e>
 800af4e:	dc1d      	bgt.n	800af8c <UART_SetConfig+0x2b0>
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <UART_SetConfig+0x27e>
 800af54:	2b02      	cmp	r3, #2
 800af56:	d005      	beq.n	800af64 <UART_SetConfig+0x288>
 800af58:	e018      	b.n	800af8c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af5a:	f7fe f8b7 	bl	80090cc <HAL_RCC_GetPCLK1Freq>
 800af5e:	0003      	movs	r3, r0
 800af60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af62:	e01d      	b.n	800afa0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af64:	4b20      	ldr	r3, [pc, #128]	; (800afe8 <UART_SetConfig+0x30c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2210      	movs	r2, #16
 800af6a:	4013      	ands	r3, r2
 800af6c:	d002      	beq.n	800af74 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800af6e:	4b22      	ldr	r3, [pc, #136]	; (800aff8 <UART_SetConfig+0x31c>)
 800af70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af72:	e015      	b.n	800afa0 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800af74:	4b21      	ldr	r3, [pc, #132]	; (800affc <UART_SetConfig+0x320>)
 800af76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af78:	e012      	b.n	800afa0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af7a:	f7fd fff7 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 800af7e:	0003      	movs	r3, r0
 800af80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af82:	e00d      	b.n	800afa0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af84:	2380      	movs	r3, #128	; 0x80
 800af86:	021b      	lsls	r3, r3, #8
 800af88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af8a:	e009      	b.n	800afa0 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800af90:	231a      	movs	r3, #26
 800af92:	2218      	movs	r2, #24
 800af94:	4694      	mov	ip, r2
 800af96:	44bc      	add	ip, r7
 800af98:	4463      	add	r3, ip
 800af9a:	2201      	movs	r2, #1
 800af9c:	701a      	strb	r2, [r3, #0]
        break;
 800af9e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d100      	bne.n	800afa8 <UART_SetConfig+0x2cc>
 800afa6:	e13c      	b.n	800b222 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	0013      	movs	r3, r2
 800afae:	005b      	lsls	r3, r3, #1
 800afb0:	189b      	adds	r3, r3, r2
 800afb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d305      	bcc.n	800afc4 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800afbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d91d      	bls.n	800b000 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800afc4:	231a      	movs	r3, #26
 800afc6:	2218      	movs	r2, #24
 800afc8:	4694      	mov	ip, r2
 800afca:	44bc      	add	ip, r7
 800afcc:	4463      	add	r3, ip
 800afce:	2201      	movs	r2, #1
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	e126      	b.n	800b222 <UART_SetConfig+0x546>
 800afd4:	efff69f3 	.word	0xefff69f3
 800afd8:	ffffcfff 	.word	0xffffcfff
 800afdc:	40004800 	.word	0x40004800
 800afe0:	fffff4ff 	.word	0xfffff4ff
 800afe4:	40013800 	.word	0x40013800
 800afe8:	40021000 	.word	0x40021000
 800afec:	40004400 	.word	0x40004400
 800aff0:	40004c00 	.word	0x40004c00
 800aff4:	40005000 	.word	0x40005000
 800aff8:	003d0900 	.word	0x003d0900
 800affc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b002:	613b      	str	r3, [r7, #16]
 800b004:	2300      	movs	r3, #0
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	6939      	ldr	r1, [r7, #16]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	000b      	movs	r3, r1
 800b00e:	0e1b      	lsrs	r3, r3, #24
 800b010:	0010      	movs	r0, r2
 800b012:	0205      	lsls	r5, r0, #8
 800b014:	431d      	orrs	r5, r3
 800b016:	000b      	movs	r3, r1
 800b018:	021c      	lsls	r4, r3, #8
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	085b      	lsrs	r3, r3, #1
 800b020:	60bb      	str	r3, [r7, #8]
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	68b8      	ldr	r0, [r7, #8]
 800b028:	68f9      	ldr	r1, [r7, #12]
 800b02a:	1900      	adds	r0, r0, r4
 800b02c:	4169      	adcs	r1, r5
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	2300      	movs	r3, #0
 800b036:	607b      	str	r3, [r7, #4]
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f7f5 fa88 	bl	8000550 <__aeabi_uldivmod>
 800b040:	0002      	movs	r2, r0
 800b042:	000b      	movs	r3, r1
 800b044:	0013      	movs	r3, r2
 800b046:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b04a:	23c0      	movs	r3, #192	; 0xc0
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	429a      	cmp	r2, r3
 800b050:	d309      	bcc.n	800b066 <UART_SetConfig+0x38a>
 800b052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b054:	2380      	movs	r3, #128	; 0x80
 800b056:	035b      	lsls	r3, r3, #13
 800b058:	429a      	cmp	r2, r3
 800b05a:	d204      	bcs.n	800b066 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b062:	60da      	str	r2, [r3, #12]
 800b064:	e0dd      	b.n	800b222 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800b066:	231a      	movs	r3, #26
 800b068:	2218      	movs	r2, #24
 800b06a:	4694      	mov	ip, r2
 800b06c:	44bc      	add	ip, r7
 800b06e:	4463      	add	r3, ip
 800b070:	2201      	movs	r2, #1
 800b072:	701a      	strb	r2, [r3, #0]
 800b074:	e0d5      	b.n	800b222 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	69da      	ldr	r2, [r3, #28]
 800b07a:	2380      	movs	r3, #128	; 0x80
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	429a      	cmp	r2, r3
 800b080:	d000      	beq.n	800b084 <UART_SetConfig+0x3a8>
 800b082:	e074      	b.n	800b16e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800b084:	231b      	movs	r3, #27
 800b086:	2218      	movs	r2, #24
 800b088:	4694      	mov	ip, r2
 800b08a:	44bc      	add	ip, r7
 800b08c:	4463      	add	r3, ip
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b08      	cmp	r3, #8
 800b092:	d822      	bhi.n	800b0da <UART_SetConfig+0x3fe>
 800b094:	009a      	lsls	r2, r3, #2
 800b096:	4b6b      	ldr	r3, [pc, #428]	; (800b244 <UART_SetConfig+0x568>)
 800b098:	18d3      	adds	r3, r2, r3
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b09e:	f7fe f815 	bl	80090cc <HAL_RCC_GetPCLK1Freq>
 800b0a2:	0003      	movs	r3, r0
 800b0a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0a6:	e022      	b.n	800b0ee <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0a8:	f7fe f826 	bl	80090f8 <HAL_RCC_GetPCLK2Freq>
 800b0ac:	0003      	movs	r3, r0
 800b0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0b0:	e01d      	b.n	800b0ee <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0b2:	4b65      	ldr	r3, [pc, #404]	; (800b248 <UART_SetConfig+0x56c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2210      	movs	r2, #16
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	d002      	beq.n	800b0c2 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b0bc:	4b63      	ldr	r3, [pc, #396]	; (800b24c <UART_SetConfig+0x570>)
 800b0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0c0:	e015      	b.n	800b0ee <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800b0c2:	4b63      	ldr	r3, [pc, #396]	; (800b250 <UART_SetConfig+0x574>)
 800b0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0c6:	e012      	b.n	800b0ee <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0c8:	f7fd ff50 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 800b0cc:	0003      	movs	r3, r0
 800b0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0d0:	e00d      	b.n	800b0ee <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0d2:	2380      	movs	r3, #128	; 0x80
 800b0d4:	021b      	lsls	r3, r3, #8
 800b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0d8:	e009      	b.n	800b0ee <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b0de:	231a      	movs	r3, #26
 800b0e0:	2218      	movs	r2, #24
 800b0e2:	4694      	mov	ip, r2
 800b0e4:	44bc      	add	ip, r7
 800b0e6:	4463      	add	r3, ip
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	701a      	strb	r2, [r3, #0]
        break;
 800b0ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d100      	bne.n	800b0f6 <UART_SetConfig+0x41a>
 800b0f4:	e095      	b.n	800b222 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	005a      	lsls	r2, r3, #1
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	085b      	lsrs	r3, r3, #1
 800b100:	18d2      	adds	r2, r2, r3
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	0019      	movs	r1, r3
 800b108:	0010      	movs	r0, r2
 800b10a:	f7f5 f80f 	bl	800012c <__udivsi3>
 800b10e:	0003      	movs	r3, r0
 800b110:	b29b      	uxth	r3, r3
 800b112:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	2b0f      	cmp	r3, #15
 800b118:	d921      	bls.n	800b15e <UART_SetConfig+0x482>
 800b11a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b11c:	2380      	movs	r3, #128	; 0x80
 800b11e:	025b      	lsls	r3, r3, #9
 800b120:	429a      	cmp	r2, r3
 800b122:	d21c      	bcs.n	800b15e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	b29a      	uxth	r2, r3
 800b128:	200e      	movs	r0, #14
 800b12a:	2418      	movs	r4, #24
 800b12c:	193b      	adds	r3, r7, r4
 800b12e:	181b      	adds	r3, r3, r0
 800b130:	210f      	movs	r1, #15
 800b132:	438a      	bics	r2, r1
 800b134:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	085b      	lsrs	r3, r3, #1
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	2207      	movs	r2, #7
 800b13e:	4013      	ands	r3, r2
 800b140:	b299      	uxth	r1, r3
 800b142:	193b      	adds	r3, r7, r4
 800b144:	181b      	adds	r3, r3, r0
 800b146:	193a      	adds	r2, r7, r4
 800b148:	1812      	adds	r2, r2, r0
 800b14a:	8812      	ldrh	r2, [r2, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	193a      	adds	r2, r7, r4
 800b156:	1812      	adds	r2, r2, r0
 800b158:	8812      	ldrh	r2, [r2, #0]
 800b15a:	60da      	str	r2, [r3, #12]
 800b15c:	e061      	b.n	800b222 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b15e:	231a      	movs	r3, #26
 800b160:	2218      	movs	r2, #24
 800b162:	4694      	mov	ip, r2
 800b164:	44bc      	add	ip, r7
 800b166:	4463      	add	r3, ip
 800b168:	2201      	movs	r2, #1
 800b16a:	701a      	strb	r2, [r3, #0]
 800b16c:	e059      	b.n	800b222 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b16e:	231b      	movs	r3, #27
 800b170:	2218      	movs	r2, #24
 800b172:	4694      	mov	ip, r2
 800b174:	44bc      	add	ip, r7
 800b176:	4463      	add	r3, ip
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	2b08      	cmp	r3, #8
 800b17c:	d822      	bhi.n	800b1c4 <UART_SetConfig+0x4e8>
 800b17e:	009a      	lsls	r2, r3, #2
 800b180:	4b34      	ldr	r3, [pc, #208]	; (800b254 <UART_SetConfig+0x578>)
 800b182:	18d3      	adds	r3, r2, r3
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b188:	f7fd ffa0 	bl	80090cc <HAL_RCC_GetPCLK1Freq>
 800b18c:	0003      	movs	r3, r0
 800b18e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b190:	e022      	b.n	800b1d8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b192:	f7fd ffb1 	bl	80090f8 <HAL_RCC_GetPCLK2Freq>
 800b196:	0003      	movs	r3, r0
 800b198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b19a:	e01d      	b.n	800b1d8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b19c:	4b2a      	ldr	r3, [pc, #168]	; (800b248 <UART_SetConfig+0x56c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2210      	movs	r2, #16
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	d002      	beq.n	800b1ac <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b1a6:	4b29      	ldr	r3, [pc, #164]	; (800b24c <UART_SetConfig+0x570>)
 800b1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1aa:	e015      	b.n	800b1d8 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800b1ac:	4b28      	ldr	r3, [pc, #160]	; (800b250 <UART_SetConfig+0x574>)
 800b1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1b0:	e012      	b.n	800b1d8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1b2:	f7fd fedb 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 800b1b6:	0003      	movs	r3, r0
 800b1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1ba:	e00d      	b.n	800b1d8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1bc:	2380      	movs	r3, #128	; 0x80
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1c2:	e009      	b.n	800b1d8 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b1c8:	231a      	movs	r3, #26
 800b1ca:	2218      	movs	r2, #24
 800b1cc:	4694      	mov	ip, r2
 800b1ce:	44bc      	add	ip, r7
 800b1d0:	4463      	add	r3, ip
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	701a      	strb	r2, [r3, #0]
        break;
 800b1d6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d021      	beq.n	800b222 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	085a      	lsrs	r2, r3, #1
 800b1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e6:	18d2      	adds	r2, r2, r3
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	0019      	movs	r1, r3
 800b1ee:	0010      	movs	r0, r2
 800b1f0:	f7f4 ff9c 	bl	800012c <__udivsi3>
 800b1f4:	0003      	movs	r3, r0
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	2b0f      	cmp	r3, #15
 800b1fe:	d909      	bls.n	800b214 <UART_SetConfig+0x538>
 800b200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b202:	2380      	movs	r3, #128	; 0x80
 800b204:	025b      	lsls	r3, r3, #9
 800b206:	429a      	cmp	r2, r3
 800b208:	d204      	bcs.n	800b214 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b210:	60da      	str	r2, [r3, #12]
 800b212:	e006      	b.n	800b222 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b214:	231a      	movs	r3, #26
 800b216:	2218      	movs	r2, #24
 800b218:	4694      	mov	ip, r2
 800b21a:	44bc      	add	ip, r7
 800b21c:	4463      	add	r3, ip
 800b21e:	2201      	movs	r2, #1
 800b220:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	2200      	movs	r2, #0
 800b226:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	2200      	movs	r2, #0
 800b22c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b22e:	231a      	movs	r3, #26
 800b230:	2218      	movs	r2, #24
 800b232:	4694      	mov	ip, r2
 800b234:	44bc      	add	ip, r7
 800b236:	4463      	add	r3, ip
 800b238:	781b      	ldrb	r3, [r3, #0]
}
 800b23a:	0018      	movs	r0, r3
 800b23c:	46bd      	mov	sp, r7
 800b23e:	b00e      	add	sp, #56	; 0x38
 800b240:	bdb0      	pop	{r4, r5, r7, pc}
 800b242:	46c0      	nop			; (mov r8, r8)
 800b244:	0801e73c 	.word	0x0801e73c
 800b248:	40021000 	.word	0x40021000
 800b24c:	003d0900 	.word	0x003d0900
 800b250:	00f42400 	.word	0x00f42400
 800b254:	0801e760 	.word	0x0801e760

0800b258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	2201      	movs	r2, #1
 800b266:	4013      	ands	r3, r2
 800b268:	d00b      	beq.n	800b282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	4a4a      	ldr	r2, [pc, #296]	; (800b39c <UART_AdvFeatureConfig+0x144>)
 800b272:	4013      	ands	r3, r2
 800b274:	0019      	movs	r1, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2202      	movs	r2, #2
 800b288:	4013      	ands	r3, r2
 800b28a:	d00b      	beq.n	800b2a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	4a43      	ldr	r2, [pc, #268]	; (800b3a0 <UART_AdvFeatureConfig+0x148>)
 800b294:	4013      	ands	r3, r2
 800b296:	0019      	movs	r1, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	2204      	movs	r2, #4
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	d00b      	beq.n	800b2c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	4a3b      	ldr	r2, [pc, #236]	; (800b3a4 <UART_AdvFeatureConfig+0x14c>)
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	0019      	movs	r1, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ca:	2208      	movs	r2, #8
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	d00b      	beq.n	800b2e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	4a34      	ldr	r2, [pc, #208]	; (800b3a8 <UART_AdvFeatureConfig+0x150>)
 800b2d8:	4013      	ands	r3, r2
 800b2da:	0019      	movs	r1, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	430a      	orrs	r2, r1
 800b2e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	2210      	movs	r2, #16
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	d00b      	beq.n	800b30a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	4a2c      	ldr	r2, [pc, #176]	; (800b3ac <UART_AdvFeatureConfig+0x154>)
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	0019      	movs	r1, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2220      	movs	r2, #32
 800b310:	4013      	ands	r3, r2
 800b312:	d00b      	beq.n	800b32c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	4a25      	ldr	r2, [pc, #148]	; (800b3b0 <UART_AdvFeatureConfig+0x158>)
 800b31c:	4013      	ands	r3, r2
 800b31e:	0019      	movs	r1, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	430a      	orrs	r2, r1
 800b32a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b330:	2240      	movs	r2, #64	; 0x40
 800b332:	4013      	ands	r3, r2
 800b334:	d01d      	beq.n	800b372 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	4a1d      	ldr	r2, [pc, #116]	; (800b3b4 <UART_AdvFeatureConfig+0x15c>)
 800b33e:	4013      	ands	r3, r2
 800b340:	0019      	movs	r1, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	430a      	orrs	r2, r1
 800b34c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b352:	2380      	movs	r3, #128	; 0x80
 800b354:	035b      	lsls	r3, r3, #13
 800b356:	429a      	cmp	r2, r3
 800b358:	d10b      	bne.n	800b372 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	4a15      	ldr	r2, [pc, #84]	; (800b3b8 <UART_AdvFeatureConfig+0x160>)
 800b362:	4013      	ands	r3, r2
 800b364:	0019      	movs	r1, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	430a      	orrs	r2, r1
 800b370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	2280      	movs	r2, #128	; 0x80
 800b378:	4013      	ands	r3, r2
 800b37a:	d00b      	beq.n	800b394 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	4a0e      	ldr	r2, [pc, #56]	; (800b3bc <UART_AdvFeatureConfig+0x164>)
 800b384:	4013      	ands	r3, r2
 800b386:	0019      	movs	r1, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	605a      	str	r2, [r3, #4]
  }
}
 800b394:	46c0      	nop			; (mov r8, r8)
 800b396:	46bd      	mov	sp, r7
 800b398:	b002      	add	sp, #8
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	fffdffff 	.word	0xfffdffff
 800b3a0:	fffeffff 	.word	0xfffeffff
 800b3a4:	fffbffff 	.word	0xfffbffff
 800b3a8:	ffff7fff 	.word	0xffff7fff
 800b3ac:	ffffefff 	.word	0xffffefff
 800b3b0:	ffffdfff 	.word	0xffffdfff
 800b3b4:	ffefffff 	.word	0xffefffff
 800b3b8:	ff9fffff 	.word	0xff9fffff
 800b3bc:	fff7ffff 	.word	0xfff7ffff

0800b3c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af02      	add	r7, sp, #8
 800b3c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2280      	movs	r2, #128	; 0x80
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b3d0:	f7f9 fb87 	bl	8004ae2 <HAL_GetTick>
 800b3d4:	0003      	movs	r3, r0
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2208      	movs	r2, #8
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	2b08      	cmp	r3, #8
 800b3e4:	d10c      	bne.n	800b400 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2280      	movs	r2, #128	; 0x80
 800b3ea:	0391      	lsls	r1, r2, #14
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	4a17      	ldr	r2, [pc, #92]	; (800b44c <UART_CheckIdleState+0x8c>)
 800b3f0:	9200      	str	r2, [sp, #0]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f000 f82c 	bl	800b450 <UART_WaitOnFlagUntilTimeout>
 800b3f8:	1e03      	subs	r3, r0, #0
 800b3fa:	d001      	beq.n	800b400 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e021      	b.n	800b444 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2204      	movs	r2, #4
 800b408:	4013      	ands	r3, r2
 800b40a:	2b04      	cmp	r3, #4
 800b40c:	d10c      	bne.n	800b428 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2280      	movs	r2, #128	; 0x80
 800b412:	03d1      	lsls	r1, r2, #15
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	4a0d      	ldr	r2, [pc, #52]	; (800b44c <UART_CheckIdleState+0x8c>)
 800b418:	9200      	str	r2, [sp, #0]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f000 f818 	bl	800b450 <UART_WaitOnFlagUntilTimeout>
 800b420:	1e03      	subs	r3, r0, #0
 800b422:	d001      	beq.n	800b428 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e00d      	b.n	800b444 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2220      	movs	r2, #32
 800b42c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2274      	movs	r2, #116	; 0x74
 800b43e:	2100      	movs	r1, #0
 800b440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	0018      	movs	r0, r3
 800b446:	46bd      	mov	sp, r7
 800b448:	b004      	add	sp, #16
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	01ffffff 	.word	0x01ffffff

0800b450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	1dfb      	adds	r3, r7, #7
 800b45e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b460:	e05e      	b.n	800b520 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	3301      	adds	r3, #1
 800b466:	d05b      	beq.n	800b520 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b468:	f7f9 fb3b 	bl	8004ae2 <HAL_GetTick>
 800b46c:	0002      	movs	r2, r0
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	429a      	cmp	r2, r3
 800b476:	d302      	bcc.n	800b47e <UART_WaitOnFlagUntilTimeout+0x2e>
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d11b      	bne.n	800b4b6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	492f      	ldr	r1, [pc, #188]	; (800b548 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b48a:	400a      	ands	r2, r1
 800b48c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	689a      	ldr	r2, [r3, #8]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2101      	movs	r1, #1
 800b49a:	438a      	bics	r2, r1
 800b49c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2220      	movs	r2, #32
 800b4a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2274      	movs	r2, #116	; 0x74
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	e044      	b.n	800b540 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2204      	movs	r2, #4
 800b4be:	4013      	ands	r3, r2
 800b4c0:	d02e      	beq.n	800b520 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69da      	ldr	r2, [r3, #28]
 800b4c8:	2380      	movs	r3, #128	; 0x80
 800b4ca:	011b      	lsls	r3, r3, #4
 800b4cc:	401a      	ands	r2, r3
 800b4ce:	2380      	movs	r3, #128	; 0x80
 800b4d0:	011b      	lsls	r3, r3, #4
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d124      	bne.n	800b520 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2280      	movs	r2, #128	; 0x80
 800b4dc:	0112      	lsls	r2, r2, #4
 800b4de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4917      	ldr	r1, [pc, #92]	; (800b548 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b4ec:	400a      	ands	r2, r1
 800b4ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	689a      	ldr	r2, [r3, #8]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	438a      	bics	r2, r1
 800b4fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2220      	movs	r2, #32
 800b504:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2220      	movs	r2, #32
 800b50a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2280      	movs	r2, #128	; 0x80
 800b510:	2120      	movs	r1, #32
 800b512:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2274      	movs	r2, #116	; 0x74
 800b518:	2100      	movs	r1, #0
 800b51a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e00f      	b.n	800b540 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4013      	ands	r3, r2
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	425a      	negs	r2, r3
 800b530:	4153      	adcs	r3, r2
 800b532:	b2db      	uxtb	r3, r3
 800b534:	001a      	movs	r2, r3
 800b536:	1dfb      	adds	r3, r7, #7
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d091      	beq.n	800b462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	0018      	movs	r0, r3
 800b542:	46bd      	mov	sp, r7
 800b544:	b004      	add	sp, #16
 800b546:	bd80      	pop	{r7, pc}
 800b548:	fffffe5f 	.word	0xfffffe5f

0800b54c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	1dbb      	adds	r3, r7, #6
 800b558:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	1dba      	adds	r2, r7, #6
 800b564:	2158      	movs	r1, #88	; 0x58
 800b566:	8812      	ldrh	r2, [r2, #0]
 800b568:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	1dba      	adds	r2, r7, #6
 800b56e:	215a      	movs	r1, #90	; 0x5a
 800b570:	8812      	ldrh	r2, [r2, #0]
 800b572:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	689a      	ldr	r2, [r3, #8]
 800b57e:	2380      	movs	r3, #128	; 0x80
 800b580:	015b      	lsls	r3, r3, #5
 800b582:	429a      	cmp	r2, r3
 800b584:	d10d      	bne.n	800b5a2 <UART_Start_Receive_IT+0x56>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d104      	bne.n	800b598 <UART_Start_Receive_IT+0x4c>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	225c      	movs	r2, #92	; 0x5c
 800b592:	4932      	ldr	r1, [pc, #200]	; (800b65c <UART_Start_Receive_IT+0x110>)
 800b594:	5299      	strh	r1, [r3, r2]
 800b596:	e02e      	b.n	800b5f6 <UART_Start_Receive_IT+0xaa>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	225c      	movs	r2, #92	; 0x5c
 800b59c:	21ff      	movs	r1, #255	; 0xff
 800b59e:	5299      	strh	r1, [r3, r2]
 800b5a0:	e029      	b.n	800b5f6 <UART_Start_Receive_IT+0xaa>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10d      	bne.n	800b5c6 <UART_Start_Receive_IT+0x7a>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d104      	bne.n	800b5bc <UART_Start_Receive_IT+0x70>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	225c      	movs	r2, #92	; 0x5c
 800b5b6:	21ff      	movs	r1, #255	; 0xff
 800b5b8:	5299      	strh	r1, [r3, r2]
 800b5ba:	e01c      	b.n	800b5f6 <UART_Start_Receive_IT+0xaa>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	225c      	movs	r2, #92	; 0x5c
 800b5c0:	217f      	movs	r1, #127	; 0x7f
 800b5c2:	5299      	strh	r1, [r3, r2]
 800b5c4:	e017      	b.n	800b5f6 <UART_Start_Receive_IT+0xaa>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	2380      	movs	r3, #128	; 0x80
 800b5cc:	055b      	lsls	r3, r3, #21
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d10d      	bne.n	800b5ee <UART_Start_Receive_IT+0xa2>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d104      	bne.n	800b5e4 <UART_Start_Receive_IT+0x98>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	225c      	movs	r2, #92	; 0x5c
 800b5de:	217f      	movs	r1, #127	; 0x7f
 800b5e0:	5299      	strh	r1, [r3, r2]
 800b5e2:	e008      	b.n	800b5f6 <UART_Start_Receive_IT+0xaa>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	225c      	movs	r2, #92	; 0x5c
 800b5e8:	213f      	movs	r1, #63	; 0x3f
 800b5ea:	5299      	strh	r1, [r3, r2]
 800b5ec:	e003      	b.n	800b5f6 <UART_Start_Receive_IT+0xaa>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	225c      	movs	r2, #92	; 0x5c
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2280      	movs	r2, #128	; 0x80
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2222      	movs	r2, #34	; 0x22
 800b602:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2101      	movs	r1, #1
 800b610:	430a      	orrs	r2, r1
 800b612:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	689a      	ldr	r2, [r3, #8]
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	015b      	lsls	r3, r3, #5
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d107      	bne.n	800b630 <UART_Start_Receive_IT+0xe4>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d103      	bne.n	800b630 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	4a0d      	ldr	r2, [pc, #52]	; (800b660 <UART_Start_Receive_IT+0x114>)
 800b62c:	665a      	str	r2, [r3, #100]	; 0x64
 800b62e:	e002      	b.n	800b636 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4a0c      	ldr	r2, [pc, #48]	; (800b664 <UART_Start_Receive_IT+0x118>)
 800b634:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2274      	movs	r2, #116	; 0x74
 800b63a:	2100      	movs	r1, #0
 800b63c:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2190      	movs	r1, #144	; 0x90
 800b64a:	0049      	lsls	r1, r1, #1
 800b64c:	430a      	orrs	r2, r1
 800b64e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	0018      	movs	r0, r3
 800b654:	46bd      	mov	sp, r7
 800b656:	b004      	add	sp, #16
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	46c0      	nop			; (mov r8, r8)
 800b65c:	000001ff 	.word	0x000001ff
 800b660:	0800b931 	.word	0x0800b931
 800b664:	0800b849 	.word	0x0800b849

0800b668 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	21c0      	movs	r1, #192	; 0xc0
 800b67c:	438a      	bics	r2, r1
 800b67e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2220      	movs	r2, #32
 800b684:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b686:	46c0      	nop			; (mov r8, r8)
 800b688:	46bd      	mov	sp, r7
 800b68a:	b002      	add	sp, #8
 800b68c:	bd80      	pop	{r7, pc}
	...

0800b690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4912      	ldr	r1, [pc, #72]	; (800b6ec <UART_EndRxTransfer+0x5c>)
 800b6a4:	400a      	ands	r2, r1
 800b6a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	689a      	ldr	r2, [r3, #8]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	438a      	bics	r2, r1
 800b6b6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d107      	bne.n	800b6d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2110      	movs	r1, #16
 800b6cc:	438a      	bics	r2, r1
 800b6ce:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2220      	movs	r2, #32
 800b6d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b6e2:	46c0      	nop			; (mov r8, r8)
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b002      	add	sp, #8
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	fffffedf 	.word	0xfffffedf

0800b6f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2220      	movs	r2, #32
 800b706:	4013      	ands	r3, r2
 800b708:	d114      	bne.n	800b734 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2252      	movs	r2, #82	; 0x52
 800b70e:	2100      	movs	r1, #0
 800b710:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2180      	movs	r1, #128	; 0x80
 800b71e:	438a      	bics	r2, r1
 800b720:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2140      	movs	r1, #64	; 0x40
 800b72e:	430a      	orrs	r2, r1
 800b730:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b732:	e003      	b.n	800b73c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	0018      	movs	r0, r3
 800b738:	f7f9 fc3e 	bl	8004fb8 <HAL_UART_TxCpltCallback>
}
 800b73c:	46c0      	nop			; (mov r8, r8)
 800b73e:	46bd      	mov	sp, r7
 800b740:	b004      	add	sp, #16
 800b742:	bd80      	pop	{r7, pc}

0800b744 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b750:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	0018      	movs	r0, r3
 800b756:	f7ff faa5 	bl	800aca4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b75a:	46c0      	nop			; (mov r8, r8)
 800b75c:	46bd      	mov	sp, r7
 800b75e:	b004      	add	sp, #16
 800b760:	bd80      	pop	{r7, pc}

0800b762 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b086      	sub	sp, #24
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b76e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b774:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	2280      	movs	r2, #128	; 0x80
 800b784:	4013      	ands	r3, r2
 800b786:	2b80      	cmp	r3, #128	; 0x80
 800b788:	d10a      	bne.n	800b7a0 <UART_DMAError+0x3e>
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	2b21      	cmp	r3, #33	; 0x21
 800b78e:	d107      	bne.n	800b7a0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2252      	movs	r2, #82	; 0x52
 800b794:	2100      	movs	r1, #0
 800b796:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	0018      	movs	r0, r3
 800b79c:	f7ff ff64 	bl	800b668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	2240      	movs	r2, #64	; 0x40
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	2b40      	cmp	r3, #64	; 0x40
 800b7ac:	d10a      	bne.n	800b7c4 <UART_DMAError+0x62>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b22      	cmp	r3, #34	; 0x22
 800b7b2:	d107      	bne.n	800b7c4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	225a      	movs	r2, #90	; 0x5a
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	0018      	movs	r0, r3
 800b7c0:	f7ff ff66 	bl	800b690 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2280      	movs	r2, #128	; 0x80
 800b7c8:	589b      	ldr	r3, [r3, r2]
 800b7ca:	2210      	movs	r2, #16
 800b7cc:	431a      	orrs	r2, r3
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	2180      	movs	r1, #128	; 0x80
 800b7d2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	f7ff fa6c 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7dc:	46c0      	nop			; (mov r8, r8)
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	b006      	add	sp, #24
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	225a      	movs	r2, #90	; 0x5a
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2252      	movs	r2, #82	; 0x52
 800b7fe:	2100      	movs	r1, #0
 800b800:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	0018      	movs	r0, r3
 800b806:	f7ff fa55 	bl	800acb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b80a:	46c0      	nop			; (mov r8, r8)
 800b80c:	46bd      	mov	sp, r7
 800b80e:	b004      	add	sp, #16
 800b810:	bd80      	pop	{r7, pc}

0800b812 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b082      	sub	sp, #8
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2140      	movs	r1, #64	; 0x40
 800b826:	438a      	bics	r2, r1
 800b828:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2220      	movs	r2, #32
 800b82e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	0018      	movs	r0, r3
 800b83a:	f7f9 fbbd 	bl	8004fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b83e:	46c0      	nop			; (mov r8, r8)
 800b840:	46bd      	mov	sp, r7
 800b842:	b002      	add	sp, #8
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b850:	200e      	movs	r0, #14
 800b852:	183b      	adds	r3, r7, r0
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	215c      	movs	r1, #92	; 0x5c
 800b858:	5a52      	ldrh	r2, [r2, r1]
 800b85a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b860:	2b22      	cmp	r3, #34	; 0x22
 800b862:	d157      	bne.n	800b914 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b86a:	210c      	movs	r1, #12
 800b86c:	187b      	adds	r3, r7, r1
 800b86e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b870:	187b      	adds	r3, r7, r1
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b2da      	uxtb	r2, r3
 800b876:	183b      	adds	r3, r7, r0
 800b878:	881b      	ldrh	r3, [r3, #0]
 800b87a:	b2d9      	uxtb	r1, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b880:	400a      	ands	r2, r1
 800b882:	b2d2      	uxtb	r2, r2
 800b884:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	225a      	movs	r2, #90	; 0x5a
 800b894:	5a9b      	ldrh	r3, [r3, r2]
 800b896:	b29b      	uxth	r3, r3
 800b898:	3b01      	subs	r3, #1
 800b89a:	b299      	uxth	r1, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	225a      	movs	r2, #90	; 0x5a
 800b8a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	225a      	movs	r2, #90	; 0x5a
 800b8a6:	5a9b      	ldrh	r3, [r3, r2]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d13a      	bne.n	800b924 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	491c      	ldr	r1, [pc, #112]	; (800b92c <UART_RxISR_8BIT+0xe4>)
 800b8ba:	400a      	ands	r2, r1
 800b8bc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	438a      	bics	r2, r1
 800b8cc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d110      	bne.n	800b904 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2110      	movs	r1, #16
 800b8ee:	438a      	bics	r2, r1
 800b8f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2258      	movs	r2, #88	; 0x58
 800b8f6:	5a9a      	ldrh	r2, [r3, r2]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	0011      	movs	r1, r2
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f7ff f9e1 	bl	800acc4 <HAL_UARTEx_RxEventCallback>
 800b902:	e003      	b.n	800b90c <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	0018      	movs	r0, r3
 800b908:	f7f9 fb64 	bl	8004fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b912:	e007      	b.n	800b924 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	699a      	ldr	r2, [r3, #24]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2108      	movs	r1, #8
 800b920:	430a      	orrs	r2, r1
 800b922:	619a      	str	r2, [r3, #24]
}
 800b924:	46c0      	nop			; (mov r8, r8)
 800b926:	46bd      	mov	sp, r7
 800b928:	b004      	add	sp, #16
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	fffffedf 	.word	0xfffffedf

0800b930 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b938:	200e      	movs	r0, #14
 800b93a:	183b      	adds	r3, r7, r0
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	215c      	movs	r1, #92	; 0x5c
 800b940:	5a52      	ldrh	r2, [r2, r1]
 800b942:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b948:	2b22      	cmp	r3, #34	; 0x22
 800b94a:	d157      	bne.n	800b9fc <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b952:	210c      	movs	r1, #12
 800b954:	187b      	adds	r3, r7, r1
 800b956:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b95e:	187b      	adds	r3, r7, r1
 800b960:	183a      	adds	r2, r7, r0
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	8812      	ldrh	r2, [r2, #0]
 800b966:	4013      	ands	r3, r2
 800b968:	b29a      	uxth	r2, r3
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b972:	1c9a      	adds	r2, r3, #2
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	225a      	movs	r2, #90	; 0x5a
 800b97c:	5a9b      	ldrh	r3, [r3, r2]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	3b01      	subs	r3, #1
 800b982:	b299      	uxth	r1, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	225a      	movs	r2, #90	; 0x5a
 800b988:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	225a      	movs	r2, #90	; 0x5a
 800b98e:	5a9b      	ldrh	r3, [r3, r2]
 800b990:	b29b      	uxth	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d13a      	bne.n	800ba0c <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	491c      	ldr	r1, [pc, #112]	; (800ba14 <UART_RxISR_16BIT+0xe4>)
 800b9a2:	400a      	ands	r2, r1
 800b9a4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	689a      	ldr	r2, [r3, #8]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	438a      	bics	r2, r1
 800b9b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d110      	bne.n	800b9ec <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2110      	movs	r1, #16
 800b9d6:	438a      	bics	r2, r1
 800b9d8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2258      	movs	r2, #88	; 0x58
 800b9de:	5a9a      	ldrh	r2, [r3, r2]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	0011      	movs	r1, r2
 800b9e4:	0018      	movs	r0, r3
 800b9e6:	f7ff f96d 	bl	800acc4 <HAL_UARTEx_RxEventCallback>
 800b9ea:	e003      	b.n	800b9f4 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	0018      	movs	r0, r3
 800b9f0:	f7f9 faf0 	bl	8004fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9fa:	e007      	b.n	800ba0c <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	699a      	ldr	r2, [r3, #24]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2108      	movs	r1, #8
 800ba08:	430a      	orrs	r2, r1
 800ba0a:	619a      	str	r2, [r3, #24]
}
 800ba0c:	46c0      	nop			; (mov r8, r8)
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	b004      	add	sp, #16
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	fffffedf 	.word	0xfffffedf

0800ba18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba20:	46c0      	nop			; (mov r8, r8)
 800ba22:	46bd      	mov	sp, r7
 800ba24:	b002      	add	sp, #8
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	1d3b      	adds	r3, r7, #4
 800ba32:	6019      	str	r1, [r3, #0]
 800ba34:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba36:	2317      	movs	r3, #23
 800ba38:	18fb      	adds	r3, r7, r3
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2274      	movs	r2, #116	; 0x74
 800ba42:	5c9b      	ldrb	r3, [r3, r2]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d101      	bne.n	800ba4c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800ba48:	2302      	movs	r3, #2
 800ba4a:	e04a      	b.n	800bae2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2274      	movs	r2, #116	; 0x74
 800ba50:	2101      	movs	r1, #1
 800ba52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2224      	movs	r2, #36	; 0x24
 800ba58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2101      	movs	r1, #1
 800ba66:	438a      	bics	r2, r1
 800ba68:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	4a1e      	ldr	r2, [pc, #120]	; (800baec <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800ba72:	4013      	ands	r3, r2
 800ba74:	0019      	movs	r1, r3
 800ba76:	1d3b      	adds	r3, r7, #4
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800ba82:	1d3b      	adds	r3, r7, #4
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d105      	bne.n	800ba96 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800ba8a:	1d3b      	adds	r3, r7, #4
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	6819      	ldr	r1, [r3, #0]
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	f000 f84f 	bl	800bb34 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2101      	movs	r1, #1
 800baa2:	430a      	orrs	r2, r1
 800baa4:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800baa6:	f7f9 f81c 	bl	8004ae2 <HAL_GetTick>
 800baaa:	0003      	movs	r3, r0
 800baac:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2280      	movs	r2, #128	; 0x80
 800bab2:	03d1      	lsls	r1, r2, #15
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	4a0e      	ldr	r2, [pc, #56]	; (800baf0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800bab8:	9200      	str	r2, [sp, #0]
 800baba:	2200      	movs	r2, #0
 800babc:	f7ff fcc8 	bl	800b450 <UART_WaitOnFlagUntilTimeout>
 800bac0:	1e03      	subs	r3, r0, #0
 800bac2:	d004      	beq.n	800bace <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800bac4:	2317      	movs	r3, #23
 800bac6:	18fb      	adds	r3, r7, r3
 800bac8:	2203      	movs	r2, #3
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	e002      	b.n	800bad4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2220      	movs	r2, #32
 800bad2:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2274      	movs	r2, #116	; 0x74
 800bad8:	2100      	movs	r1, #0
 800bada:	5499      	strb	r1, [r3, r2]

  return status;
 800badc:	2317      	movs	r3, #23
 800bade:	18fb      	adds	r3, r7, r3
 800bae0:	781b      	ldrb	r3, [r3, #0]
}
 800bae2:	0018      	movs	r0, r3
 800bae4:	46bd      	mov	sp, r7
 800bae6:	b006      	add	sp, #24
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	46c0      	nop			; (mov r8, r8)
 800baec:	ffcfffff 	.word	0xffcfffff
 800baf0:	01ffffff 	.word	0x01ffffff

0800baf4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2274      	movs	r2, #116	; 0x74
 800bb00:	5c9b      	ldrb	r3, [r3, r2]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d101      	bne.n	800bb0a <HAL_UARTEx_EnableStopMode+0x16>
 800bb06:	2302      	movs	r3, #2
 800bb08:	e010      	b.n	800bb2c <HAL_UARTEx_EnableStopMode+0x38>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2274      	movs	r2, #116	; 0x74
 800bb0e:	2101      	movs	r1, #1
 800bb10:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2102      	movs	r1, #2
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2274      	movs	r2, #116	; 0x74
 800bb26:	2100      	movs	r1, #0
 800bb28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	0018      	movs	r0, r3
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	b002      	add	sp, #8
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	1d3b      	adds	r3, r7, #4
 800bb3e:	6019      	str	r1, [r3, #0]
 800bb40:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	2210      	movs	r2, #16
 800bb4a:	4393      	bics	r3, r2
 800bb4c:	001a      	movs	r2, r3
 800bb4e:	1d3b      	adds	r3, r7, #4
 800bb50:	889b      	ldrh	r3, [r3, #4]
 800bb52:	0019      	movs	r1, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	430a      	orrs	r2, r1
 800bb5a:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	021b      	lsls	r3, r3, #8
 800bb64:	0a19      	lsrs	r1, r3, #8
 800bb66:	1d3b      	adds	r3, r7, #4
 800bb68:	799b      	ldrb	r3, [r3, #6]
 800bb6a:	061a      	lsls	r2, r3, #24
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	605a      	str	r2, [r3, #4]
}
 800bb74:	46c0      	nop			; (mov r8, r8)
 800bb76:	46bd      	mov	sp, r7
 800bb78:	b004      	add	sp, #16
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	33f1      	adds	r3, #241	; 0xf1
 800bb88:	2210      	movs	r2, #16
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	f00d f9df 	bl	8018f50 <memset1>
    ctx->M_n = 0;
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	238a      	movs	r3, #138	; 0x8a
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	2100      	movs	r1, #0
 800bb9a:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	22f0      	movs	r2, #240	; 0xf0
 800bba0:	2100      	movs	r1, #0
 800bba2:	0018      	movs	r0, r3
 800bba4:	f00d f9d4 	bl	8018f50 <memset1>
}
 800bba8:	46c0      	nop			; (mov r8, r8)
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	b002      	add	sp, #8
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2110      	movs	r1, #16
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f000 feaf 	bl	800c924 <lorawan_aes_set_key>
}
 800bbc6:	46c0      	nop			; (mov r8, r8)
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	b002      	add	sp, #8
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bbce:	b590      	push	{r4, r7, lr}
 800bbd0:	b08d      	sub	sp, #52	; 0x34
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	238a      	movs	r3, #138	; 0x8a
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	58d3      	ldr	r3, [r2, r3]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d100      	bne.n	800bbe8 <AES_CMAC_Update+0x1a>
 800bbe6:	e0a4      	b.n	800bd32 <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	238a      	movs	r3, #138	; 0x8a
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	58d3      	ldr	r3, [r2, r3]
 800bbf0:	2210      	movs	r2, #16
 800bbf2:	1ad2      	subs	r2, r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d900      	bls.n	800bbfc <AES_CMAC_Update+0x2e>
 800bbfa:	0013      	movs	r3, r2
 800bbfc:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1c9a      	adds	r2, r3, #2
 800bc02:	32ff      	adds	r2, #255	; 0xff
 800bc04:	68f9      	ldr	r1, [r7, #12]
 800bc06:	238a      	movs	r3, #138	; 0x8a
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	58cb      	ldr	r3, [r1, r3]
 800bc0c:	18d3      	adds	r3, r2, r3
 800bc0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc10:	b292      	uxth	r2, r2
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	0018      	movs	r0, r3
 800bc16:	f00d f95d 	bl	8018ed4 <memcpy1>
        ctx->M_n += mlen;
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	238a      	movs	r3, #138	; 0x8a
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	58d2      	ldr	r2, [r2, r3]
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	18d1      	adds	r1, r2, r3
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	238a      	movs	r3, #138	; 0x8a
 800bc2a:	005b      	lsls	r3, r3, #1
 800bc2c:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	238a      	movs	r3, #138	; 0x8a
 800bc32:	005b      	lsls	r3, r3, #1
 800bc34:	58d3      	ldr	r3, [r2, r3]
 800bc36:	2b0f      	cmp	r3, #15
 800bc38:	d800      	bhi.n	800bc3c <AES_CMAC_Update+0x6e>
 800bc3a:	e08c      	b.n	800bd56 <AES_CMAC_Update+0x188>
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d100      	bne.n	800bc46 <AES_CMAC_Update+0x78>
 800bc44:	e087      	b.n	800bd56 <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800bc46:	2300      	movs	r3, #0
 800bc48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc4a:	e018      	b.n	800bc7e <AES_CMAC_Update+0xb0>
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	21f1      	movs	r1, #241	; 0xf1
 800bc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc52:	18d3      	adds	r3, r2, r3
 800bc54:	185b      	adds	r3, r3, r1
 800bc56:	781a      	ldrb	r2, [r3, #0]
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	33ff      	adds	r3, #255	; 0xff
 800bc5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc60:	1841      	adds	r1, r0, r1
 800bc62:	18cb      	adds	r3, r1, r3
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	4053      	eors	r3, r2
 800bc68:	b2d8      	uxtb	r0, r3
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	21f1      	movs	r1, #241	; 0xf1
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	18d3      	adds	r3, r2, r3
 800bc72:	185b      	adds	r3, r3, r1
 800bc74:	1c02      	adds	r2, r0, #0
 800bc76:	701a      	strb	r2, [r3, #0]
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	2b0f      	cmp	r3, #15
 800bc82:	dde3      	ble.n	800bc4c <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	33f1      	adds	r3, #241	; 0xf1
 800bc88:	0019      	movs	r1, r3
 800bc8a:	2414      	movs	r4, #20
 800bc8c:	193b      	adds	r3, r7, r4
 800bc8e:	2210      	movs	r2, #16
 800bc90:	0018      	movs	r0, r3
 800bc92:	f00d f91f 	bl	8018ed4 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	1939      	adds	r1, r7, r4
 800bc9a:	193b      	adds	r3, r7, r4
 800bc9c:	0018      	movs	r0, r3
 800bc9e:	f000 ff7d 	bl	800cb9c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	33f1      	adds	r3, #241	; 0xf1
 800bca6:	1939      	adds	r1, r7, r4
 800bca8:	2210      	movs	r2, #16
 800bcaa:	0018      	movs	r0, r3
 800bcac:	f00d f912 	bl	8018ed4 <memcpy1>

        data += mlen;
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb4:	18d3      	adds	r3, r2, r3
 800bcb6:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bcc0:	e037      	b.n	800bd32 <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcc6:	e015      	b.n	800bcf4 <AES_CMAC_Update+0x126>
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	21f1      	movs	r1, #241	; 0xf1
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	18d3      	adds	r3, r2, r3
 800bcd0:	185b      	adds	r3, r3, r1
 800bcd2:	781a      	ldrb	r2, [r3, #0]
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	18cb      	adds	r3, r1, r3
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	4053      	eors	r3, r2
 800bcde:	b2d8      	uxtb	r0, r3
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	21f1      	movs	r1, #241	; 0xf1
 800bce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce6:	18d3      	adds	r3, r2, r3
 800bce8:	185b      	adds	r3, r3, r1
 800bcea:	1c02      	adds	r2, r0, #0
 800bcec:	701a      	strb	r2, [r3, #0]
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	2b0f      	cmp	r3, #15
 800bcf8:	dde6      	ble.n	800bcc8 <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	33f1      	adds	r3, #241	; 0xf1
 800bcfe:	0019      	movs	r1, r3
 800bd00:	2414      	movs	r4, #20
 800bd02:	193b      	adds	r3, r7, r4
 800bd04:	2210      	movs	r2, #16
 800bd06:	0018      	movs	r0, r3
 800bd08:	f00d f8e4 	bl	8018ed4 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	1939      	adds	r1, r7, r4
 800bd10:	193b      	adds	r3, r7, r4
 800bd12:	0018      	movs	r0, r3
 800bd14:	f000 ff42 	bl	800cb9c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	33f1      	adds	r3, #241	; 0xf1
 800bd1c:	1939      	adds	r1, r7, r4
 800bd1e:	2210      	movs	r2, #16
 800bd20:	0018      	movs	r0, r3
 800bd22:	f00d f8d7 	bl	8018ed4 <memcpy1>

        data += 16;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	3310      	adds	r3, #16
 800bd2a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3b10      	subs	r3, #16
 800bd30:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b10      	cmp	r3, #16
 800bd36:	d8c4      	bhi.n	800bcc2 <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3302      	adds	r3, #2
 800bd3c:	33ff      	adds	r3, #255	; 0xff
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	b292      	uxth	r2, r2
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	0018      	movs	r0, r3
 800bd46:	f00d f8c5 	bl	8018ed4 <memcpy1>
    ctx->M_n = len;
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	238a      	movs	r3, #138	; 0x8a
 800bd4e:	005b      	lsls	r3, r3, #1
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	50d1      	str	r1, [r2, r3]
 800bd54:	e000      	b.n	800bd58 <AES_CMAC_Update+0x18a>
            return;
 800bd56:	46c0      	nop			; (mov r8, r8)
}
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	b00d      	add	sp, #52	; 0x34
 800bd5c:	bd90      	pop	{r4, r7, pc}

0800bd5e <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800bd5e:	b590      	push	{r4, r7, lr}
 800bd60:	b093      	sub	sp, #76	; 0x4c
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800bd68:	241c      	movs	r4, #28
 800bd6a:	193b      	adds	r3, r7, r4
 800bd6c:	2210      	movs	r2, #16
 800bd6e:	2100      	movs	r1, #0
 800bd70:	0018      	movs	r0, r3
 800bd72:	f00d f8ed 	bl	8018f50 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	1939      	adds	r1, r7, r4
 800bd7a:	193b      	adds	r3, r7, r4
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f000 ff0d 	bl	800cb9c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800bd82:	193b      	adds	r3, r7, r4
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	b25b      	sxtb	r3, r3
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	da2e      	bge.n	800bdea <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd90:	e018      	b.n	800bdc4 <AES_CMAC_Final+0x66>
 800bd92:	201c      	movs	r0, #28
 800bd94:	183a      	adds	r2, r7, r0
 800bd96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd98:	18d3      	adds	r3, r2, r3
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	b25a      	sxtb	r2, r3
 800bda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bda2:	3301      	adds	r3, #1
 800bda4:	1839      	adds	r1, r7, r0
 800bda6:	5ccb      	ldrb	r3, [r1, r3]
 800bda8:	09db      	lsrs	r3, r3, #7
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	b25b      	sxtb	r3, r3
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	b25b      	sxtb	r3, r3
 800bdb2:	b2d9      	uxtb	r1, r3
 800bdb4:	183a      	adds	r2, r7, r0
 800bdb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb8:	18d3      	adds	r3, r2, r3
 800bdba:	1c0a      	adds	r2, r1, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdc6:	2b0e      	cmp	r3, #14
 800bdc8:	dde3      	ble.n	800bd92 <AES_CMAC_Final+0x34>
 800bdca:	211c      	movs	r1, #28
 800bdcc:	187b      	adds	r3, r7, r1
 800bdce:	7bdb      	ldrb	r3, [r3, #15]
 800bdd0:	18db      	adds	r3, r3, r3
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	187b      	adds	r3, r7, r1
 800bdd6:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800bdd8:	187b      	adds	r3, r7, r1
 800bdda:	7bdb      	ldrb	r3, [r3, #15]
 800bddc:	2279      	movs	r2, #121	; 0x79
 800bdde:	4252      	negs	r2, r2
 800bde0:	4053      	eors	r3, r2
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	187b      	adds	r3, r7, r1
 800bde6:	73da      	strb	r2, [r3, #15]
 800bde8:	e025      	b.n	800be36 <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800bdea:	2300      	movs	r3, #0
 800bdec:	643b      	str	r3, [r7, #64]	; 0x40
 800bdee:	e018      	b.n	800be22 <AES_CMAC_Final+0xc4>
 800bdf0:	201c      	movs	r0, #28
 800bdf2:	183a      	adds	r2, r7, r0
 800bdf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdf6:	18d3      	adds	r3, r2, r3
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	005b      	lsls	r3, r3, #1
 800bdfc:	b25a      	sxtb	r2, r3
 800bdfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be00:	3301      	adds	r3, #1
 800be02:	1839      	adds	r1, r7, r0
 800be04:	5ccb      	ldrb	r3, [r1, r3]
 800be06:	09db      	lsrs	r3, r3, #7
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	b25b      	sxtb	r3, r3
 800be0c:	4313      	orrs	r3, r2
 800be0e:	b25b      	sxtb	r3, r3
 800be10:	b2d9      	uxtb	r1, r3
 800be12:	183a      	adds	r2, r7, r0
 800be14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be16:	18d3      	adds	r3, r2, r3
 800be18:	1c0a      	adds	r2, r1, #0
 800be1a:	701a      	strb	r2, [r3, #0]
 800be1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be1e:	3301      	adds	r3, #1
 800be20:	643b      	str	r3, [r7, #64]	; 0x40
 800be22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be24:	2b0e      	cmp	r3, #14
 800be26:	dde3      	ble.n	800bdf0 <AES_CMAC_Final+0x92>
 800be28:	211c      	movs	r1, #28
 800be2a:	187b      	adds	r3, r7, r1
 800be2c:	7bdb      	ldrb	r3, [r3, #15]
 800be2e:	18db      	adds	r3, r3, r3
 800be30:	b2da      	uxtb	r2, r3
 800be32:	187b      	adds	r3, r7, r1
 800be34:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	238a      	movs	r3, #138	; 0x8a
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	58d3      	ldr	r3, [r2, r3]
 800be3e:	2b10      	cmp	r3, #16
 800be40:	d11f      	bne.n	800be82 <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800be42:	2300      	movs	r3, #0
 800be44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be46:	e018      	b.n	800be7a <AES_CMAC_Final+0x11c>
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	2302      	movs	r3, #2
 800be4c:	33ff      	adds	r3, #255	; 0xff
 800be4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be50:	188a      	adds	r2, r1, r2
 800be52:	18d3      	adds	r3, r2, r3
 800be54:	781a      	ldrb	r2, [r3, #0]
 800be56:	231c      	movs	r3, #28
 800be58:	18f9      	adds	r1, r7, r3
 800be5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be5c:	18cb      	adds	r3, r1, r3
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	4053      	eors	r3, r2
 800be62:	b2d8      	uxtb	r0, r3
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	2302      	movs	r3, #2
 800be68:	33ff      	adds	r3, #255	; 0xff
 800be6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be6c:	188a      	adds	r2, r1, r2
 800be6e:	18d3      	adds	r3, r2, r3
 800be70:	1c02      	adds	r2, r0, #0
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be76:	3301      	adds	r3, #1
 800be78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be7c:	2b0f      	cmp	r3, #15
 800be7e:	dde3      	ble.n	800be48 <AES_CMAC_Final+0xea>
 800be80:	e09f      	b.n	800bfc2 <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800be82:	231c      	movs	r3, #28
 800be84:	18fb      	adds	r3, r7, r3
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	b25b      	sxtb	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	da2e      	bge.n	800beec <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800be8e:	2300      	movs	r3, #0
 800be90:	63bb      	str	r3, [r7, #56]	; 0x38
 800be92:	e018      	b.n	800bec6 <AES_CMAC_Final+0x168>
 800be94:	201c      	movs	r0, #28
 800be96:	183a      	adds	r2, r7, r0
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	18d3      	adds	r3, r2, r3
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	b25a      	sxtb	r2, r3
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	3301      	adds	r3, #1
 800bea6:	1839      	adds	r1, r7, r0
 800bea8:	5ccb      	ldrb	r3, [r1, r3]
 800beaa:	09db      	lsrs	r3, r3, #7
 800beac:	b2db      	uxtb	r3, r3
 800beae:	b25b      	sxtb	r3, r3
 800beb0:	4313      	orrs	r3, r2
 800beb2:	b25b      	sxtb	r3, r3
 800beb4:	b2d9      	uxtb	r1, r3
 800beb6:	183a      	adds	r2, r7, r0
 800beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beba:	18d3      	adds	r3, r2, r3
 800bebc:	1c0a      	adds	r2, r1, #0
 800bebe:	701a      	strb	r2, [r3, #0]
 800bec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec2:	3301      	adds	r3, #1
 800bec4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec8:	2b0e      	cmp	r3, #14
 800beca:	dde3      	ble.n	800be94 <AES_CMAC_Final+0x136>
 800becc:	211c      	movs	r1, #28
 800bece:	187b      	adds	r3, r7, r1
 800bed0:	7bdb      	ldrb	r3, [r3, #15]
 800bed2:	18db      	adds	r3, r3, r3
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	187b      	adds	r3, r7, r1
 800bed8:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800beda:	187b      	adds	r3, r7, r1
 800bedc:	7bdb      	ldrb	r3, [r3, #15]
 800bede:	2279      	movs	r2, #121	; 0x79
 800bee0:	4252      	negs	r2, r2
 800bee2:	4053      	eors	r3, r2
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	187b      	adds	r3, r7, r1
 800bee8:	73da      	strb	r2, [r3, #15]
 800beea:	e025      	b.n	800bf38 <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800beec:	2300      	movs	r3, #0
 800beee:	637b      	str	r3, [r7, #52]	; 0x34
 800bef0:	e018      	b.n	800bf24 <AES_CMAC_Final+0x1c6>
 800bef2:	201c      	movs	r0, #28
 800bef4:	183a      	adds	r2, r7, r0
 800bef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef8:	18d3      	adds	r3, r2, r3
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	b25a      	sxtb	r2, r3
 800bf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf02:	3301      	adds	r3, #1
 800bf04:	1839      	adds	r1, r7, r0
 800bf06:	5ccb      	ldrb	r3, [r1, r3]
 800bf08:	09db      	lsrs	r3, r3, #7
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	b25b      	sxtb	r3, r3
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	b25b      	sxtb	r3, r3
 800bf12:	b2d9      	uxtb	r1, r3
 800bf14:	183a      	adds	r2, r7, r0
 800bf16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf18:	18d3      	adds	r3, r2, r3
 800bf1a:	1c0a      	adds	r2, r1, #0
 800bf1c:	701a      	strb	r2, [r3, #0]
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	3301      	adds	r3, #1
 800bf22:	637b      	str	r3, [r7, #52]	; 0x34
 800bf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf26:	2b0e      	cmp	r3, #14
 800bf28:	dde3      	ble.n	800bef2 <AES_CMAC_Final+0x194>
 800bf2a:	211c      	movs	r1, #28
 800bf2c:	187b      	adds	r3, r7, r1
 800bf2e:	7bdb      	ldrb	r3, [r3, #15]
 800bf30:	18db      	adds	r3, r3, r3
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	187b      	adds	r3, r7, r1
 800bf36:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	238a      	movs	r3, #138	; 0x8a
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	58d2      	ldr	r2, [r2, r3]
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	2302      	movs	r3, #2
 800bf44:	33ff      	adds	r3, #255	; 0xff
 800bf46:	188a      	adds	r2, r1, r2
 800bf48:	18d3      	adds	r3, r2, r3
 800bf4a:	2280      	movs	r2, #128	; 0x80
 800bf4c:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800bf4e:	e00a      	b.n	800bf66 <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	238a      	movs	r3, #138	; 0x8a
 800bf54:	005b      	lsls	r3, r3, #1
 800bf56:	58d2      	ldr	r2, [r2, r3]
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	33ff      	adds	r3, #255	; 0xff
 800bf5e:	188a      	adds	r2, r1, r2
 800bf60:	18d3      	adds	r3, r2, r3
 800bf62:	2200      	movs	r2, #0
 800bf64:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	238a      	movs	r3, #138	; 0x8a
 800bf6a:	005b      	lsls	r3, r3, #1
 800bf6c:	58d3      	ldr	r3, [r2, r3]
 800bf6e:	1c59      	adds	r1, r3, #1
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	238a      	movs	r3, #138	; 0x8a
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	50d1      	str	r1, [r2, r3]
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	238a      	movs	r3, #138	; 0x8a
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	58d3      	ldr	r3, [r2, r3]
 800bf80:	2b0f      	cmp	r3, #15
 800bf82:	d9e5      	bls.n	800bf50 <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800bf84:	2300      	movs	r3, #0
 800bf86:	633b      	str	r3, [r7, #48]	; 0x30
 800bf88:	e018      	b.n	800bfbc <AES_CMAC_Final+0x25e>
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	33ff      	adds	r3, #255	; 0xff
 800bf90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf92:	188a      	adds	r2, r1, r2
 800bf94:	18d3      	adds	r3, r2, r3
 800bf96:	781a      	ldrb	r2, [r3, #0]
 800bf98:	231c      	movs	r3, #28
 800bf9a:	18f9      	adds	r1, r7, r3
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9e:	18cb      	adds	r3, r1, r3
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	4053      	eors	r3, r2
 800bfa4:	b2d8      	uxtb	r0, r3
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	33ff      	adds	r3, #255	; 0xff
 800bfac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfae:	188a      	adds	r2, r1, r2
 800bfb0:	18d3      	adds	r3, r2, r3
 800bfb2:	1c02      	adds	r2, r0, #0
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	3301      	adds	r3, #1
 800bfba:	633b      	str	r3, [r7, #48]	; 0x30
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	2b0f      	cmp	r3, #15
 800bfc0:	dde3      	ble.n	800bf8a <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfc6:	e018      	b.n	800bffa <AES_CMAC_Final+0x29c>
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	21f1      	movs	r1, #241	; 0xf1
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	18d3      	adds	r3, r2, r3
 800bfd0:	185b      	adds	r3, r3, r1
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	6838      	ldr	r0, [r7, #0]
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	33ff      	adds	r3, #255	; 0xff
 800bfda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfdc:	1841      	adds	r1, r0, r1
 800bfde:	18cb      	adds	r3, r1, r3
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	4053      	eors	r3, r2
 800bfe4:	b2d8      	uxtb	r0, r3
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	21f1      	movs	r1, #241	; 0xf1
 800bfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfec:	18d3      	adds	r3, r2, r3
 800bfee:	185b      	adds	r3, r3, r1
 800bff0:	1c02      	adds	r2, r0, #0
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff6:	3301      	adds	r3, #1
 800bff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffc:	2b0f      	cmp	r3, #15
 800bffe:	dde3      	ble.n	800bfc8 <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	33f1      	adds	r3, #241	; 0xf1
 800c004:	0019      	movs	r1, r3
 800c006:	240c      	movs	r4, #12
 800c008:	193b      	adds	r3, r7, r4
 800c00a:	2210      	movs	r2, #16
 800c00c:	0018      	movs	r0, r3
 800c00e:	f00c ff61 	bl	8018ed4 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	6879      	ldr	r1, [r7, #4]
 800c016:	193b      	adds	r3, r7, r4
 800c018:	0018      	movs	r0, r3
 800c01a:	f000 fdbf 	bl	800cb9c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c01e:	231c      	movs	r3, #28
 800c020:	18fb      	adds	r3, r7, r3
 800c022:	2210      	movs	r2, #16
 800c024:	2100      	movs	r1, #0
 800c026:	0018      	movs	r0, r3
 800c028:	f00c ff92 	bl	8018f50 <memset1>
}
 800c02c:	46c0      	nop			; (mov r8, r8)
 800c02e:	46bd      	mov	sp, r7
 800c030:	b013      	add	sp, #76	; 0x4c
 800c032:	bd90      	pop	{r4, r7, pc}

0800c034 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	781a      	ldrb	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	3301      	adds	r3, #1
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	7852      	ldrb	r2, [r2, #1]
 800c04e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3302      	adds	r3, #2
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	7892      	ldrb	r2, [r2, #2]
 800c058:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3303      	adds	r3, #3
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	78d2      	ldrb	r2, [r2, #3]
 800c062:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	3304      	adds	r3, #4
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	7912      	ldrb	r2, [r2, #4]
 800c06c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3305      	adds	r3, #5
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	7952      	ldrb	r2, [r2, #5]
 800c076:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3306      	adds	r3, #6
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	7992      	ldrb	r2, [r2, #6]
 800c080:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3307      	adds	r3, #7
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	79d2      	ldrb	r2, [r2, #7]
 800c08a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	3308      	adds	r3, #8
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	7a12      	ldrb	r2, [r2, #8]
 800c094:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	3309      	adds	r3, #9
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	7a52      	ldrb	r2, [r2, #9]
 800c09e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	330a      	adds	r3, #10
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	7a92      	ldrb	r2, [r2, #10]
 800c0a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	330b      	adds	r3, #11
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	7ad2      	ldrb	r2, [r2, #11]
 800c0b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	330c      	adds	r3, #12
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	7b12      	ldrb	r2, [r2, #12]
 800c0bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	330d      	adds	r3, #13
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	7b52      	ldrb	r2, [r2, #13]
 800c0c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	330e      	adds	r3, #14
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	7b92      	ldrb	r2, [r2, #14]
 800c0d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	330f      	adds	r3, #15
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	7bd2      	ldrb	r2, [r2, #15]
 800c0da:	701a      	strb	r2, [r3, #0]
#endif
}
 800c0dc:	46c0      	nop			; (mov r8, r8)
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	b002      	add	sp, #8
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	1dfb      	adds	r3, r7, #7
 800c0f0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c0f2:	e007      	b.n	800c104 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	1c53      	adds	r3, r2, #1
 800c0f8:	60bb      	str	r3, [r7, #8]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	1c59      	adds	r1, r3, #1
 800c0fe:	60f9      	str	r1, [r7, #12]
 800c100:	7812      	ldrb	r2, [r2, #0]
 800c102:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c104:	1dfb      	adds	r3, r7, #7
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	1dfa      	adds	r2, r7, #7
 800c10a:	1e59      	subs	r1, r3, #1
 800c10c:	7011      	strb	r1, [r2, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1f0      	bne.n	800c0f4 <copy_block_nn+0x10>
}
 800c112:	46c0      	nop			; (mov r8, r8)
 800c114:	46c0      	nop			; (mov r8, r8)
 800c116:	46bd      	mov	sp, r7
 800c118:	b004      	add	sp, #16
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	781a      	ldrb	r2, [r3, #0]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	4053      	eors	r3, r2
 800c130:	b2da      	uxtb	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	3301      	adds	r3, #1
 800c13a:	7819      	ldrb	r1, [r3, #0]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	3301      	adds	r3, #1
 800c140:	781a      	ldrb	r2, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	3301      	adds	r3, #1
 800c146:	404a      	eors	r2, r1
 800c148:	b2d2      	uxtb	r2, r2
 800c14a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3302      	adds	r3, #2
 800c150:	7819      	ldrb	r1, [r3, #0]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	3302      	adds	r3, #2
 800c156:	781a      	ldrb	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	3302      	adds	r3, #2
 800c15c:	404a      	eors	r2, r1
 800c15e:	b2d2      	uxtb	r2, r2
 800c160:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3303      	adds	r3, #3
 800c166:	7819      	ldrb	r1, [r3, #0]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	3303      	adds	r3, #3
 800c16c:	781a      	ldrb	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3303      	adds	r3, #3
 800c172:	404a      	eors	r2, r1
 800c174:	b2d2      	uxtb	r2, r2
 800c176:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3304      	adds	r3, #4
 800c17c:	7819      	ldrb	r1, [r3, #0]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	3304      	adds	r3, #4
 800c182:	781a      	ldrb	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	3304      	adds	r3, #4
 800c188:	404a      	eors	r2, r1
 800c18a:	b2d2      	uxtb	r2, r2
 800c18c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3305      	adds	r3, #5
 800c192:	7819      	ldrb	r1, [r3, #0]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	3305      	adds	r3, #5
 800c198:	781a      	ldrb	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	3305      	adds	r3, #5
 800c19e:	404a      	eors	r2, r1
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3306      	adds	r3, #6
 800c1a8:	7819      	ldrb	r1, [r3, #0]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	3306      	adds	r3, #6
 800c1ae:	781a      	ldrb	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3306      	adds	r3, #6
 800c1b4:	404a      	eors	r2, r1
 800c1b6:	b2d2      	uxtb	r2, r2
 800c1b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3307      	adds	r3, #7
 800c1be:	7819      	ldrb	r1, [r3, #0]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	3307      	adds	r3, #7
 800c1c4:	781a      	ldrb	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	3307      	adds	r3, #7
 800c1ca:	404a      	eors	r2, r1
 800c1cc:	b2d2      	uxtb	r2, r2
 800c1ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3308      	adds	r3, #8
 800c1d4:	7819      	ldrb	r1, [r3, #0]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	3308      	adds	r3, #8
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3308      	adds	r3, #8
 800c1e0:	404a      	eors	r2, r1
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3309      	adds	r3, #9
 800c1ea:	7819      	ldrb	r1, [r3, #0]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	3309      	adds	r3, #9
 800c1f0:	781a      	ldrb	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3309      	adds	r3, #9
 800c1f6:	404a      	eors	r2, r1
 800c1f8:	b2d2      	uxtb	r2, r2
 800c1fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	330a      	adds	r3, #10
 800c200:	7819      	ldrb	r1, [r3, #0]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	330a      	adds	r3, #10
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	330a      	adds	r3, #10
 800c20c:	404a      	eors	r2, r1
 800c20e:	b2d2      	uxtb	r2, r2
 800c210:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	330b      	adds	r3, #11
 800c216:	7819      	ldrb	r1, [r3, #0]
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	330b      	adds	r3, #11
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	330b      	adds	r3, #11
 800c222:	404a      	eors	r2, r1
 800c224:	b2d2      	uxtb	r2, r2
 800c226:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	330c      	adds	r3, #12
 800c22c:	7819      	ldrb	r1, [r3, #0]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	330c      	adds	r3, #12
 800c232:	781a      	ldrb	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	330c      	adds	r3, #12
 800c238:	404a      	eors	r2, r1
 800c23a:	b2d2      	uxtb	r2, r2
 800c23c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	330d      	adds	r3, #13
 800c242:	7819      	ldrb	r1, [r3, #0]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	330d      	adds	r3, #13
 800c248:	781a      	ldrb	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	330d      	adds	r3, #13
 800c24e:	404a      	eors	r2, r1
 800c250:	b2d2      	uxtb	r2, r2
 800c252:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	330e      	adds	r3, #14
 800c258:	7819      	ldrb	r1, [r3, #0]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	330e      	adds	r3, #14
 800c25e:	781a      	ldrb	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	330e      	adds	r3, #14
 800c264:	404a      	eors	r2, r1
 800c266:	b2d2      	uxtb	r2, r2
 800c268:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	330f      	adds	r3, #15
 800c26e:	7819      	ldrb	r1, [r3, #0]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	330f      	adds	r3, #15
 800c274:	781a      	ldrb	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	330f      	adds	r3, #15
 800c27a:	404a      	eors	r2, r1
 800c27c:	b2d2      	uxtb	r2, r2
 800c27e:	701a      	strb	r2, [r3, #0]
#endif
}
 800c280:	46c0      	nop			; (mov r8, r8)
 800c282:	46bd      	mov	sp, r7
 800c284:	b002      	add	sp, #8
 800c286:	bd80      	pop	{r7, pc}

0800c288 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	781a      	ldrb	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	4053      	eors	r3, r2
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	7819      	ldrb	r1, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	781a      	ldrb	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	404a      	eors	r2, r1
 800c2b6:	b2d2      	uxtb	r2, r2
 800c2b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	3302      	adds	r3, #2
 800c2be:	7819      	ldrb	r1, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3302      	adds	r3, #2
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3302      	adds	r3, #2
 800c2ca:	404a      	eors	r2, r1
 800c2cc:	b2d2      	uxtb	r2, r2
 800c2ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	3303      	adds	r3, #3
 800c2d4:	7819      	ldrb	r1, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	3303      	adds	r3, #3
 800c2da:	781a      	ldrb	r2, [r3, #0]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	3303      	adds	r3, #3
 800c2e0:	404a      	eors	r2, r1
 800c2e2:	b2d2      	uxtb	r2, r2
 800c2e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	7819      	ldrb	r1, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	781a      	ldrb	r2, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	404a      	eors	r2, r1
 800c2f8:	b2d2      	uxtb	r2, r2
 800c2fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	3305      	adds	r3, #5
 800c300:	7819      	ldrb	r1, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	3305      	adds	r3, #5
 800c306:	781a      	ldrb	r2, [r3, #0]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3305      	adds	r3, #5
 800c30c:	404a      	eors	r2, r1
 800c30e:	b2d2      	uxtb	r2, r2
 800c310:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	3306      	adds	r3, #6
 800c316:	7819      	ldrb	r1, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3306      	adds	r3, #6
 800c31c:	781a      	ldrb	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3306      	adds	r3, #6
 800c322:	404a      	eors	r2, r1
 800c324:	b2d2      	uxtb	r2, r2
 800c326:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	3307      	adds	r3, #7
 800c32c:	7819      	ldrb	r1, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	3307      	adds	r3, #7
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	3307      	adds	r3, #7
 800c338:	404a      	eors	r2, r1
 800c33a:	b2d2      	uxtb	r2, r2
 800c33c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	3308      	adds	r3, #8
 800c342:	7819      	ldrb	r1, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	3308      	adds	r3, #8
 800c348:	781a      	ldrb	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3308      	adds	r3, #8
 800c34e:	404a      	eors	r2, r1
 800c350:	b2d2      	uxtb	r2, r2
 800c352:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	3309      	adds	r3, #9
 800c358:	7819      	ldrb	r1, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	3309      	adds	r3, #9
 800c35e:	781a      	ldrb	r2, [r3, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3309      	adds	r3, #9
 800c364:	404a      	eors	r2, r1
 800c366:	b2d2      	uxtb	r2, r2
 800c368:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	330a      	adds	r3, #10
 800c36e:	7819      	ldrb	r1, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	330a      	adds	r3, #10
 800c374:	781a      	ldrb	r2, [r3, #0]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	330a      	adds	r3, #10
 800c37a:	404a      	eors	r2, r1
 800c37c:	b2d2      	uxtb	r2, r2
 800c37e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	330b      	adds	r3, #11
 800c384:	7819      	ldrb	r1, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	330b      	adds	r3, #11
 800c38a:	781a      	ldrb	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	330b      	adds	r3, #11
 800c390:	404a      	eors	r2, r1
 800c392:	b2d2      	uxtb	r2, r2
 800c394:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	330c      	adds	r3, #12
 800c39a:	7819      	ldrb	r1, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	330c      	adds	r3, #12
 800c3a0:	781a      	ldrb	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	330c      	adds	r3, #12
 800c3a6:	404a      	eors	r2, r1
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	330d      	adds	r3, #13
 800c3b0:	7819      	ldrb	r1, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	330d      	adds	r3, #13
 800c3b6:	781a      	ldrb	r2, [r3, #0]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	330d      	adds	r3, #13
 800c3bc:	404a      	eors	r2, r1
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	330e      	adds	r3, #14
 800c3c6:	7819      	ldrb	r1, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	330e      	adds	r3, #14
 800c3cc:	781a      	ldrb	r2, [r3, #0]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	330e      	adds	r3, #14
 800c3d2:	404a      	eors	r2, r1
 800c3d4:	b2d2      	uxtb	r2, r2
 800c3d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	330f      	adds	r3, #15
 800c3dc:	7819      	ldrb	r1, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	330f      	adds	r3, #15
 800c3e2:	781a      	ldrb	r2, [r3, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	330f      	adds	r3, #15
 800c3e8:	404a      	eors	r2, r1
 800c3ea:	b2d2      	uxtb	r2, r2
 800c3ec:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c3ee:	46c0      	nop			; (mov r8, r8)
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	b004      	add	sp, #16
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	0011      	movs	r1, r2
 800c406:	0018      	movs	r0, r3
 800c408:	f7ff fe88 	bl	800c11c <xor_block>
}
 800c40c:	46c0      	nop			; (mov r8, r8)
 800c40e:	46bd      	mov	sp, r7
 800c410:	b002      	add	sp, #8
 800c412:	bd80      	pop	{r7, pc}

0800c414 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	001a      	movs	r2, r3
 800c422:	4b4c      	ldr	r3, [pc, #304]	; (800c554 <shift_sub_rows+0x140>)
 800c424:	5c9a      	ldrb	r2, [r3, r2]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	701a      	strb	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3304      	adds	r3, #4
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	0019      	movs	r1, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	3304      	adds	r3, #4
 800c436:	4a47      	ldr	r2, [pc, #284]	; (800c554 <shift_sub_rows+0x140>)
 800c438:	5c52      	ldrb	r2, [r2, r1]
 800c43a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3308      	adds	r3, #8
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	0019      	movs	r1, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	3308      	adds	r3, #8
 800c448:	4a42      	ldr	r2, [pc, #264]	; (800c554 <shift_sub_rows+0x140>)
 800c44a:	5c52      	ldrb	r2, [r2, r1]
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	330c      	adds	r3, #12
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	0019      	movs	r1, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	330c      	adds	r3, #12
 800c45a:	4a3e      	ldr	r2, [pc, #248]	; (800c554 <shift_sub_rows+0x140>)
 800c45c:	5c52      	ldrb	r2, [r2, r1]
 800c45e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c460:	200f      	movs	r0, #15
 800c462:	183b      	adds	r3, r7, r0
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	7852      	ldrb	r2, [r2, #1]
 800c468:	701a      	strb	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3305      	adds	r3, #5
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	0019      	movs	r1, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	3301      	adds	r3, #1
 800c476:	4a37      	ldr	r2, [pc, #220]	; (800c554 <shift_sub_rows+0x140>)
 800c478:	5c52      	ldrb	r2, [r2, r1]
 800c47a:	701a      	strb	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3309      	adds	r3, #9
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	0019      	movs	r1, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3305      	adds	r3, #5
 800c488:	4a32      	ldr	r2, [pc, #200]	; (800c554 <shift_sub_rows+0x140>)
 800c48a:	5c52      	ldrb	r2, [r2, r1]
 800c48c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	330d      	adds	r3, #13
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	0019      	movs	r1, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3309      	adds	r3, #9
 800c49a:	4a2e      	ldr	r2, [pc, #184]	; (800c554 <shift_sub_rows+0x140>)
 800c49c:	5c52      	ldrb	r2, [r2, r1]
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	183b      	adds	r3, r7, r0
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	330d      	adds	r3, #13
 800c4a8:	492a      	ldr	r1, [pc, #168]	; (800c554 <shift_sub_rows+0x140>)
 800c4aa:	5c8a      	ldrb	r2, [r1, r2]
 800c4ac:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c4ae:	183b      	adds	r3, r7, r0
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	7892      	ldrb	r2, [r2, #2]
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	330a      	adds	r3, #10
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	0019      	movs	r1, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3302      	adds	r3, #2
 800c4c2:	4a24      	ldr	r2, [pc, #144]	; (800c554 <shift_sub_rows+0x140>)
 800c4c4:	5c52      	ldrb	r2, [r2, r1]
 800c4c6:	701a      	strb	r2, [r3, #0]
 800c4c8:	183b      	adds	r3, r7, r0
 800c4ca:	781a      	ldrb	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	330a      	adds	r3, #10
 800c4d0:	4920      	ldr	r1, [pc, #128]	; (800c554 <shift_sub_rows+0x140>)
 800c4d2:	5c8a      	ldrb	r2, [r1, r2]
 800c4d4:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c4d6:	183b      	adds	r3, r7, r0
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	7992      	ldrb	r2, [r2, #6]
 800c4dc:	701a      	strb	r2, [r3, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	330e      	adds	r3, #14
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	0019      	movs	r1, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3306      	adds	r3, #6
 800c4ea:	4a1a      	ldr	r2, [pc, #104]	; (800c554 <shift_sub_rows+0x140>)
 800c4ec:	5c52      	ldrb	r2, [r2, r1]
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	183b      	adds	r3, r7, r0
 800c4f2:	781a      	ldrb	r2, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	330e      	adds	r3, #14
 800c4f8:	4916      	ldr	r1, [pc, #88]	; (800c554 <shift_sub_rows+0x140>)
 800c4fa:	5c8a      	ldrb	r2, [r1, r2]
 800c4fc:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c4fe:	183b      	adds	r3, r7, r0
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	7bd2      	ldrb	r2, [r2, #15]
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	330b      	adds	r3, #11
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	0019      	movs	r1, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	330f      	adds	r3, #15
 800c512:	4a10      	ldr	r2, [pc, #64]	; (800c554 <shift_sub_rows+0x140>)
 800c514:	5c52      	ldrb	r2, [r2, r1]
 800c516:	701a      	strb	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3307      	adds	r3, #7
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	0019      	movs	r1, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	330b      	adds	r3, #11
 800c524:	4a0b      	ldr	r2, [pc, #44]	; (800c554 <shift_sub_rows+0x140>)
 800c526:	5c52      	ldrb	r2, [r2, r1]
 800c528:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3303      	adds	r3, #3
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	0019      	movs	r1, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	3307      	adds	r3, #7
 800c536:	4a07      	ldr	r2, [pc, #28]	; (800c554 <shift_sub_rows+0x140>)
 800c538:	5c52      	ldrb	r2, [r2, r1]
 800c53a:	701a      	strb	r2, [r3, #0]
 800c53c:	183b      	adds	r3, r7, r0
 800c53e:	781a      	ldrb	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3303      	adds	r3, #3
 800c544:	4903      	ldr	r1, [pc, #12]	; (800c554 <shift_sub_rows+0x140>)
 800c546:	5c8a      	ldrb	r2, [r1, r2]
 800c548:	701a      	strb	r2, [r3, #0]
}
 800c54a:	46c0      	nop			; (mov r8, r8)
 800c54c:	46bd      	mov	sp, r7
 800c54e:	b004      	add	sp, #16
 800c550:	bd80      	pop	{r7, pc}
 800c552:	46c0      	nop			; (mov r8, r8)
 800c554:	0801e784 	.word	0x0801e784

0800c558 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c558:	b590      	push	{r4, r7, lr}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	2408      	movs	r4, #8
 800c564:	193b      	adds	r3, r7, r4
 800c566:	0011      	movs	r1, r2
 800c568:	0018      	movs	r0, r3
 800c56a:	f7ff fd63 	bl	800c034 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c56e:	0020      	movs	r0, r4
 800c570:	183b      	adds	r3, r7, r0
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	001a      	movs	r2, r3
 800c576:	4be8      	ldr	r3, [pc, #928]	; (800c918 <mix_sub_columns+0x3c0>)
 800c578:	5c9a      	ldrb	r2, [r3, r2]
 800c57a:	183b      	adds	r3, r7, r0
 800c57c:	795b      	ldrb	r3, [r3, #5]
 800c57e:	0019      	movs	r1, r3
 800c580:	4be6      	ldr	r3, [pc, #920]	; (800c91c <mix_sub_columns+0x3c4>)
 800c582:	5c5b      	ldrb	r3, [r3, r1]
 800c584:	4053      	eors	r3, r2
 800c586:	b2da      	uxtb	r2, r3
 800c588:	183b      	adds	r3, r7, r0
 800c58a:	7a9b      	ldrb	r3, [r3, #10]
 800c58c:	0019      	movs	r1, r3
 800c58e:	4be4      	ldr	r3, [pc, #912]	; (800c920 <mix_sub_columns+0x3c8>)
 800c590:	5c5b      	ldrb	r3, [r3, r1]
 800c592:	4053      	eors	r3, r2
 800c594:	b2da      	uxtb	r2, r3
 800c596:	183b      	adds	r3, r7, r0
 800c598:	7bdb      	ldrb	r3, [r3, #15]
 800c59a:	0019      	movs	r1, r3
 800c59c:	4be0      	ldr	r3, [pc, #896]	; (800c920 <mix_sub_columns+0x3c8>)
 800c59e:	5c5b      	ldrb	r3, [r3, r1]
 800c5a0:	4053      	eors	r3, r2
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c5a8:	183b      	adds	r3, r7, r0
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	001a      	movs	r2, r3
 800c5ae:	4bdc      	ldr	r3, [pc, #880]	; (800c920 <mix_sub_columns+0x3c8>)
 800c5b0:	5c9a      	ldrb	r2, [r3, r2]
 800c5b2:	183b      	adds	r3, r7, r0
 800c5b4:	795b      	ldrb	r3, [r3, #5]
 800c5b6:	0019      	movs	r1, r3
 800c5b8:	4bd7      	ldr	r3, [pc, #860]	; (800c918 <mix_sub_columns+0x3c0>)
 800c5ba:	5c5b      	ldrb	r3, [r3, r1]
 800c5bc:	4053      	eors	r3, r2
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	183b      	adds	r3, r7, r0
 800c5c2:	7a9b      	ldrb	r3, [r3, #10]
 800c5c4:	0019      	movs	r1, r3
 800c5c6:	4bd5      	ldr	r3, [pc, #852]	; (800c91c <mix_sub_columns+0x3c4>)
 800c5c8:	5c5b      	ldrb	r3, [r3, r1]
 800c5ca:	4053      	eors	r3, r2
 800c5cc:	b2d9      	uxtb	r1, r3
 800c5ce:	183b      	adds	r3, r7, r0
 800c5d0:	7bdb      	ldrb	r3, [r3, #15]
 800c5d2:	001a      	movs	r2, r3
 800c5d4:	4bd2      	ldr	r3, [pc, #840]	; (800c920 <mix_sub_columns+0x3c8>)
 800c5d6:	5c9a      	ldrb	r2, [r3, r2]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	404a      	eors	r2, r1
 800c5de:	b2d2      	uxtb	r2, r2
 800c5e0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c5e2:	183b      	adds	r3, r7, r0
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	001a      	movs	r2, r3
 800c5e8:	4bcd      	ldr	r3, [pc, #820]	; (800c920 <mix_sub_columns+0x3c8>)
 800c5ea:	5c9a      	ldrb	r2, [r3, r2]
 800c5ec:	183b      	adds	r3, r7, r0
 800c5ee:	795b      	ldrb	r3, [r3, #5]
 800c5f0:	0019      	movs	r1, r3
 800c5f2:	4bcb      	ldr	r3, [pc, #812]	; (800c920 <mix_sub_columns+0x3c8>)
 800c5f4:	5c5b      	ldrb	r3, [r3, r1]
 800c5f6:	4053      	eors	r3, r2
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	183b      	adds	r3, r7, r0
 800c5fc:	7a9b      	ldrb	r3, [r3, #10]
 800c5fe:	0019      	movs	r1, r3
 800c600:	4bc5      	ldr	r3, [pc, #788]	; (800c918 <mix_sub_columns+0x3c0>)
 800c602:	5c5b      	ldrb	r3, [r3, r1]
 800c604:	4053      	eors	r3, r2
 800c606:	b2d9      	uxtb	r1, r3
 800c608:	183b      	adds	r3, r7, r0
 800c60a:	7bdb      	ldrb	r3, [r3, #15]
 800c60c:	001a      	movs	r2, r3
 800c60e:	4bc3      	ldr	r3, [pc, #780]	; (800c91c <mix_sub_columns+0x3c4>)
 800c610:	5c9a      	ldrb	r2, [r3, r2]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3302      	adds	r3, #2
 800c616:	404a      	eors	r2, r1
 800c618:	b2d2      	uxtb	r2, r2
 800c61a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c61c:	183b      	adds	r3, r7, r0
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	001a      	movs	r2, r3
 800c622:	4bbe      	ldr	r3, [pc, #760]	; (800c91c <mix_sub_columns+0x3c4>)
 800c624:	5c9a      	ldrb	r2, [r3, r2]
 800c626:	183b      	adds	r3, r7, r0
 800c628:	795b      	ldrb	r3, [r3, #5]
 800c62a:	0019      	movs	r1, r3
 800c62c:	4bbc      	ldr	r3, [pc, #752]	; (800c920 <mix_sub_columns+0x3c8>)
 800c62e:	5c5b      	ldrb	r3, [r3, r1]
 800c630:	4053      	eors	r3, r2
 800c632:	b2da      	uxtb	r2, r3
 800c634:	183b      	adds	r3, r7, r0
 800c636:	7a9b      	ldrb	r3, [r3, #10]
 800c638:	0019      	movs	r1, r3
 800c63a:	4bb9      	ldr	r3, [pc, #740]	; (800c920 <mix_sub_columns+0x3c8>)
 800c63c:	5c5b      	ldrb	r3, [r3, r1]
 800c63e:	4053      	eors	r3, r2
 800c640:	b2d9      	uxtb	r1, r3
 800c642:	183b      	adds	r3, r7, r0
 800c644:	7bdb      	ldrb	r3, [r3, #15]
 800c646:	001a      	movs	r2, r3
 800c648:	4bb3      	ldr	r3, [pc, #716]	; (800c918 <mix_sub_columns+0x3c0>)
 800c64a:	5c9a      	ldrb	r2, [r3, r2]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3303      	adds	r3, #3
 800c650:	404a      	eors	r2, r1
 800c652:	b2d2      	uxtb	r2, r2
 800c654:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c656:	183b      	adds	r3, r7, r0
 800c658:	791b      	ldrb	r3, [r3, #4]
 800c65a:	001a      	movs	r2, r3
 800c65c:	4bae      	ldr	r3, [pc, #696]	; (800c918 <mix_sub_columns+0x3c0>)
 800c65e:	5c9a      	ldrb	r2, [r3, r2]
 800c660:	183b      	adds	r3, r7, r0
 800c662:	7a5b      	ldrb	r3, [r3, #9]
 800c664:	0019      	movs	r1, r3
 800c666:	4bad      	ldr	r3, [pc, #692]	; (800c91c <mix_sub_columns+0x3c4>)
 800c668:	5c5b      	ldrb	r3, [r3, r1]
 800c66a:	4053      	eors	r3, r2
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	183b      	adds	r3, r7, r0
 800c670:	7b9b      	ldrb	r3, [r3, #14]
 800c672:	0019      	movs	r1, r3
 800c674:	4baa      	ldr	r3, [pc, #680]	; (800c920 <mix_sub_columns+0x3c8>)
 800c676:	5c5b      	ldrb	r3, [r3, r1]
 800c678:	4053      	eors	r3, r2
 800c67a:	b2d9      	uxtb	r1, r3
 800c67c:	183b      	adds	r3, r7, r0
 800c67e:	78db      	ldrb	r3, [r3, #3]
 800c680:	001a      	movs	r2, r3
 800c682:	4ba7      	ldr	r3, [pc, #668]	; (800c920 <mix_sub_columns+0x3c8>)
 800c684:	5c9a      	ldrb	r2, [r3, r2]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	3304      	adds	r3, #4
 800c68a:	404a      	eors	r2, r1
 800c68c:	b2d2      	uxtb	r2, r2
 800c68e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c690:	183b      	adds	r3, r7, r0
 800c692:	791b      	ldrb	r3, [r3, #4]
 800c694:	001a      	movs	r2, r3
 800c696:	4ba2      	ldr	r3, [pc, #648]	; (800c920 <mix_sub_columns+0x3c8>)
 800c698:	5c9a      	ldrb	r2, [r3, r2]
 800c69a:	183b      	adds	r3, r7, r0
 800c69c:	7a5b      	ldrb	r3, [r3, #9]
 800c69e:	0019      	movs	r1, r3
 800c6a0:	4b9d      	ldr	r3, [pc, #628]	; (800c918 <mix_sub_columns+0x3c0>)
 800c6a2:	5c5b      	ldrb	r3, [r3, r1]
 800c6a4:	4053      	eors	r3, r2
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	183b      	adds	r3, r7, r0
 800c6aa:	7b9b      	ldrb	r3, [r3, #14]
 800c6ac:	0019      	movs	r1, r3
 800c6ae:	4b9b      	ldr	r3, [pc, #620]	; (800c91c <mix_sub_columns+0x3c4>)
 800c6b0:	5c5b      	ldrb	r3, [r3, r1]
 800c6b2:	4053      	eors	r3, r2
 800c6b4:	b2d9      	uxtb	r1, r3
 800c6b6:	183b      	adds	r3, r7, r0
 800c6b8:	78db      	ldrb	r3, [r3, #3]
 800c6ba:	001a      	movs	r2, r3
 800c6bc:	4b98      	ldr	r3, [pc, #608]	; (800c920 <mix_sub_columns+0x3c8>)
 800c6be:	5c9a      	ldrb	r2, [r3, r2]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3305      	adds	r3, #5
 800c6c4:	404a      	eors	r2, r1
 800c6c6:	b2d2      	uxtb	r2, r2
 800c6c8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c6ca:	183b      	adds	r3, r7, r0
 800c6cc:	791b      	ldrb	r3, [r3, #4]
 800c6ce:	001a      	movs	r2, r3
 800c6d0:	4b93      	ldr	r3, [pc, #588]	; (800c920 <mix_sub_columns+0x3c8>)
 800c6d2:	5c9a      	ldrb	r2, [r3, r2]
 800c6d4:	183b      	adds	r3, r7, r0
 800c6d6:	7a5b      	ldrb	r3, [r3, #9]
 800c6d8:	0019      	movs	r1, r3
 800c6da:	4b91      	ldr	r3, [pc, #580]	; (800c920 <mix_sub_columns+0x3c8>)
 800c6dc:	5c5b      	ldrb	r3, [r3, r1]
 800c6de:	4053      	eors	r3, r2
 800c6e0:	b2da      	uxtb	r2, r3
 800c6e2:	183b      	adds	r3, r7, r0
 800c6e4:	7b9b      	ldrb	r3, [r3, #14]
 800c6e6:	0019      	movs	r1, r3
 800c6e8:	4b8b      	ldr	r3, [pc, #556]	; (800c918 <mix_sub_columns+0x3c0>)
 800c6ea:	5c5b      	ldrb	r3, [r3, r1]
 800c6ec:	4053      	eors	r3, r2
 800c6ee:	b2d9      	uxtb	r1, r3
 800c6f0:	183b      	adds	r3, r7, r0
 800c6f2:	78db      	ldrb	r3, [r3, #3]
 800c6f4:	001a      	movs	r2, r3
 800c6f6:	4b89      	ldr	r3, [pc, #548]	; (800c91c <mix_sub_columns+0x3c4>)
 800c6f8:	5c9a      	ldrb	r2, [r3, r2]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	3306      	adds	r3, #6
 800c6fe:	404a      	eors	r2, r1
 800c700:	b2d2      	uxtb	r2, r2
 800c702:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c704:	183b      	adds	r3, r7, r0
 800c706:	791b      	ldrb	r3, [r3, #4]
 800c708:	001a      	movs	r2, r3
 800c70a:	4b84      	ldr	r3, [pc, #528]	; (800c91c <mix_sub_columns+0x3c4>)
 800c70c:	5c9a      	ldrb	r2, [r3, r2]
 800c70e:	183b      	adds	r3, r7, r0
 800c710:	7a5b      	ldrb	r3, [r3, #9]
 800c712:	0019      	movs	r1, r3
 800c714:	4b82      	ldr	r3, [pc, #520]	; (800c920 <mix_sub_columns+0x3c8>)
 800c716:	5c5b      	ldrb	r3, [r3, r1]
 800c718:	4053      	eors	r3, r2
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	183b      	adds	r3, r7, r0
 800c71e:	7b9b      	ldrb	r3, [r3, #14]
 800c720:	0019      	movs	r1, r3
 800c722:	4b7f      	ldr	r3, [pc, #508]	; (800c920 <mix_sub_columns+0x3c8>)
 800c724:	5c5b      	ldrb	r3, [r3, r1]
 800c726:	4053      	eors	r3, r2
 800c728:	b2d9      	uxtb	r1, r3
 800c72a:	183b      	adds	r3, r7, r0
 800c72c:	78db      	ldrb	r3, [r3, #3]
 800c72e:	001a      	movs	r2, r3
 800c730:	4b79      	ldr	r3, [pc, #484]	; (800c918 <mix_sub_columns+0x3c0>)
 800c732:	5c9a      	ldrb	r2, [r3, r2]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3307      	adds	r3, #7
 800c738:	404a      	eors	r2, r1
 800c73a:	b2d2      	uxtb	r2, r2
 800c73c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c73e:	183b      	adds	r3, r7, r0
 800c740:	7a1b      	ldrb	r3, [r3, #8]
 800c742:	001a      	movs	r2, r3
 800c744:	4b74      	ldr	r3, [pc, #464]	; (800c918 <mix_sub_columns+0x3c0>)
 800c746:	5c9a      	ldrb	r2, [r3, r2]
 800c748:	183b      	adds	r3, r7, r0
 800c74a:	7b5b      	ldrb	r3, [r3, #13]
 800c74c:	0019      	movs	r1, r3
 800c74e:	4b73      	ldr	r3, [pc, #460]	; (800c91c <mix_sub_columns+0x3c4>)
 800c750:	5c5b      	ldrb	r3, [r3, r1]
 800c752:	4053      	eors	r3, r2
 800c754:	b2da      	uxtb	r2, r3
 800c756:	183b      	adds	r3, r7, r0
 800c758:	789b      	ldrb	r3, [r3, #2]
 800c75a:	0019      	movs	r1, r3
 800c75c:	4b70      	ldr	r3, [pc, #448]	; (800c920 <mix_sub_columns+0x3c8>)
 800c75e:	5c5b      	ldrb	r3, [r3, r1]
 800c760:	4053      	eors	r3, r2
 800c762:	b2d9      	uxtb	r1, r3
 800c764:	183b      	adds	r3, r7, r0
 800c766:	79db      	ldrb	r3, [r3, #7]
 800c768:	001a      	movs	r2, r3
 800c76a:	4b6d      	ldr	r3, [pc, #436]	; (800c920 <mix_sub_columns+0x3c8>)
 800c76c:	5c9a      	ldrb	r2, [r3, r2]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	3308      	adds	r3, #8
 800c772:	404a      	eors	r2, r1
 800c774:	b2d2      	uxtb	r2, r2
 800c776:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c778:	183b      	adds	r3, r7, r0
 800c77a:	7a1b      	ldrb	r3, [r3, #8]
 800c77c:	001a      	movs	r2, r3
 800c77e:	4b68      	ldr	r3, [pc, #416]	; (800c920 <mix_sub_columns+0x3c8>)
 800c780:	5c9a      	ldrb	r2, [r3, r2]
 800c782:	183b      	adds	r3, r7, r0
 800c784:	7b5b      	ldrb	r3, [r3, #13]
 800c786:	0019      	movs	r1, r3
 800c788:	4b63      	ldr	r3, [pc, #396]	; (800c918 <mix_sub_columns+0x3c0>)
 800c78a:	5c5b      	ldrb	r3, [r3, r1]
 800c78c:	4053      	eors	r3, r2
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	183b      	adds	r3, r7, r0
 800c792:	789b      	ldrb	r3, [r3, #2]
 800c794:	0019      	movs	r1, r3
 800c796:	4b61      	ldr	r3, [pc, #388]	; (800c91c <mix_sub_columns+0x3c4>)
 800c798:	5c5b      	ldrb	r3, [r3, r1]
 800c79a:	4053      	eors	r3, r2
 800c79c:	b2d9      	uxtb	r1, r3
 800c79e:	183b      	adds	r3, r7, r0
 800c7a0:	79db      	ldrb	r3, [r3, #7]
 800c7a2:	001a      	movs	r2, r3
 800c7a4:	4b5e      	ldr	r3, [pc, #376]	; (800c920 <mix_sub_columns+0x3c8>)
 800c7a6:	5c9a      	ldrb	r2, [r3, r2]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	3309      	adds	r3, #9
 800c7ac:	404a      	eors	r2, r1
 800c7ae:	b2d2      	uxtb	r2, r2
 800c7b0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c7b2:	183b      	adds	r3, r7, r0
 800c7b4:	7a1b      	ldrb	r3, [r3, #8]
 800c7b6:	001a      	movs	r2, r3
 800c7b8:	4b59      	ldr	r3, [pc, #356]	; (800c920 <mix_sub_columns+0x3c8>)
 800c7ba:	5c9a      	ldrb	r2, [r3, r2]
 800c7bc:	183b      	adds	r3, r7, r0
 800c7be:	7b5b      	ldrb	r3, [r3, #13]
 800c7c0:	0019      	movs	r1, r3
 800c7c2:	4b57      	ldr	r3, [pc, #348]	; (800c920 <mix_sub_columns+0x3c8>)
 800c7c4:	5c5b      	ldrb	r3, [r3, r1]
 800c7c6:	4053      	eors	r3, r2
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	183b      	adds	r3, r7, r0
 800c7cc:	789b      	ldrb	r3, [r3, #2]
 800c7ce:	0019      	movs	r1, r3
 800c7d0:	4b51      	ldr	r3, [pc, #324]	; (800c918 <mix_sub_columns+0x3c0>)
 800c7d2:	5c5b      	ldrb	r3, [r3, r1]
 800c7d4:	4053      	eors	r3, r2
 800c7d6:	b2d9      	uxtb	r1, r3
 800c7d8:	183b      	adds	r3, r7, r0
 800c7da:	79db      	ldrb	r3, [r3, #7]
 800c7dc:	001a      	movs	r2, r3
 800c7de:	4b4f      	ldr	r3, [pc, #316]	; (800c91c <mix_sub_columns+0x3c4>)
 800c7e0:	5c9a      	ldrb	r2, [r3, r2]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	330a      	adds	r3, #10
 800c7e6:	404a      	eors	r2, r1
 800c7e8:	b2d2      	uxtb	r2, r2
 800c7ea:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c7ec:	183b      	adds	r3, r7, r0
 800c7ee:	7a1b      	ldrb	r3, [r3, #8]
 800c7f0:	001a      	movs	r2, r3
 800c7f2:	4b4a      	ldr	r3, [pc, #296]	; (800c91c <mix_sub_columns+0x3c4>)
 800c7f4:	5c9a      	ldrb	r2, [r3, r2]
 800c7f6:	183b      	adds	r3, r7, r0
 800c7f8:	7b5b      	ldrb	r3, [r3, #13]
 800c7fa:	0019      	movs	r1, r3
 800c7fc:	4b48      	ldr	r3, [pc, #288]	; (800c920 <mix_sub_columns+0x3c8>)
 800c7fe:	5c5b      	ldrb	r3, [r3, r1]
 800c800:	4053      	eors	r3, r2
 800c802:	b2da      	uxtb	r2, r3
 800c804:	183b      	adds	r3, r7, r0
 800c806:	789b      	ldrb	r3, [r3, #2]
 800c808:	0019      	movs	r1, r3
 800c80a:	4b45      	ldr	r3, [pc, #276]	; (800c920 <mix_sub_columns+0x3c8>)
 800c80c:	5c5b      	ldrb	r3, [r3, r1]
 800c80e:	4053      	eors	r3, r2
 800c810:	b2d9      	uxtb	r1, r3
 800c812:	183b      	adds	r3, r7, r0
 800c814:	79db      	ldrb	r3, [r3, #7]
 800c816:	001a      	movs	r2, r3
 800c818:	4b3f      	ldr	r3, [pc, #252]	; (800c918 <mix_sub_columns+0x3c0>)
 800c81a:	5c9a      	ldrb	r2, [r3, r2]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	330b      	adds	r3, #11
 800c820:	404a      	eors	r2, r1
 800c822:	b2d2      	uxtb	r2, r2
 800c824:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c826:	183b      	adds	r3, r7, r0
 800c828:	7b1b      	ldrb	r3, [r3, #12]
 800c82a:	001a      	movs	r2, r3
 800c82c:	4b3a      	ldr	r3, [pc, #232]	; (800c918 <mix_sub_columns+0x3c0>)
 800c82e:	5c9a      	ldrb	r2, [r3, r2]
 800c830:	183b      	adds	r3, r7, r0
 800c832:	785b      	ldrb	r3, [r3, #1]
 800c834:	0019      	movs	r1, r3
 800c836:	4b39      	ldr	r3, [pc, #228]	; (800c91c <mix_sub_columns+0x3c4>)
 800c838:	5c5b      	ldrb	r3, [r3, r1]
 800c83a:	4053      	eors	r3, r2
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	183b      	adds	r3, r7, r0
 800c840:	799b      	ldrb	r3, [r3, #6]
 800c842:	0019      	movs	r1, r3
 800c844:	4b36      	ldr	r3, [pc, #216]	; (800c920 <mix_sub_columns+0x3c8>)
 800c846:	5c5b      	ldrb	r3, [r3, r1]
 800c848:	4053      	eors	r3, r2
 800c84a:	b2d9      	uxtb	r1, r3
 800c84c:	183b      	adds	r3, r7, r0
 800c84e:	7adb      	ldrb	r3, [r3, #11]
 800c850:	001a      	movs	r2, r3
 800c852:	4b33      	ldr	r3, [pc, #204]	; (800c920 <mix_sub_columns+0x3c8>)
 800c854:	5c9a      	ldrb	r2, [r3, r2]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	330c      	adds	r3, #12
 800c85a:	404a      	eors	r2, r1
 800c85c:	b2d2      	uxtb	r2, r2
 800c85e:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c860:	183b      	adds	r3, r7, r0
 800c862:	7b1b      	ldrb	r3, [r3, #12]
 800c864:	001a      	movs	r2, r3
 800c866:	4b2e      	ldr	r3, [pc, #184]	; (800c920 <mix_sub_columns+0x3c8>)
 800c868:	5c9a      	ldrb	r2, [r3, r2]
 800c86a:	183b      	adds	r3, r7, r0
 800c86c:	785b      	ldrb	r3, [r3, #1]
 800c86e:	0019      	movs	r1, r3
 800c870:	4b29      	ldr	r3, [pc, #164]	; (800c918 <mix_sub_columns+0x3c0>)
 800c872:	5c5b      	ldrb	r3, [r3, r1]
 800c874:	4053      	eors	r3, r2
 800c876:	b2da      	uxtb	r2, r3
 800c878:	183b      	adds	r3, r7, r0
 800c87a:	799b      	ldrb	r3, [r3, #6]
 800c87c:	0019      	movs	r1, r3
 800c87e:	4b27      	ldr	r3, [pc, #156]	; (800c91c <mix_sub_columns+0x3c4>)
 800c880:	5c5b      	ldrb	r3, [r3, r1]
 800c882:	4053      	eors	r3, r2
 800c884:	b2d9      	uxtb	r1, r3
 800c886:	183b      	adds	r3, r7, r0
 800c888:	7adb      	ldrb	r3, [r3, #11]
 800c88a:	001a      	movs	r2, r3
 800c88c:	4b24      	ldr	r3, [pc, #144]	; (800c920 <mix_sub_columns+0x3c8>)
 800c88e:	5c9a      	ldrb	r2, [r3, r2]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	330d      	adds	r3, #13
 800c894:	404a      	eors	r2, r1
 800c896:	b2d2      	uxtb	r2, r2
 800c898:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c89a:	183b      	adds	r3, r7, r0
 800c89c:	7b1b      	ldrb	r3, [r3, #12]
 800c89e:	001a      	movs	r2, r3
 800c8a0:	4b1f      	ldr	r3, [pc, #124]	; (800c920 <mix_sub_columns+0x3c8>)
 800c8a2:	5c9a      	ldrb	r2, [r3, r2]
 800c8a4:	183b      	adds	r3, r7, r0
 800c8a6:	785b      	ldrb	r3, [r3, #1]
 800c8a8:	0019      	movs	r1, r3
 800c8aa:	4b1d      	ldr	r3, [pc, #116]	; (800c920 <mix_sub_columns+0x3c8>)
 800c8ac:	5c5b      	ldrb	r3, [r3, r1]
 800c8ae:	4053      	eors	r3, r2
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	183b      	adds	r3, r7, r0
 800c8b4:	799b      	ldrb	r3, [r3, #6]
 800c8b6:	0019      	movs	r1, r3
 800c8b8:	4b17      	ldr	r3, [pc, #92]	; (800c918 <mix_sub_columns+0x3c0>)
 800c8ba:	5c5b      	ldrb	r3, [r3, r1]
 800c8bc:	4053      	eors	r3, r2
 800c8be:	b2d9      	uxtb	r1, r3
 800c8c0:	183b      	adds	r3, r7, r0
 800c8c2:	7adb      	ldrb	r3, [r3, #11]
 800c8c4:	001a      	movs	r2, r3
 800c8c6:	4b15      	ldr	r3, [pc, #84]	; (800c91c <mix_sub_columns+0x3c4>)
 800c8c8:	5c9a      	ldrb	r2, [r3, r2]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	330e      	adds	r3, #14
 800c8ce:	404a      	eors	r2, r1
 800c8d0:	b2d2      	uxtb	r2, r2
 800c8d2:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c8d4:	183b      	adds	r3, r7, r0
 800c8d6:	7b1b      	ldrb	r3, [r3, #12]
 800c8d8:	001a      	movs	r2, r3
 800c8da:	4b10      	ldr	r3, [pc, #64]	; (800c91c <mix_sub_columns+0x3c4>)
 800c8dc:	5c9a      	ldrb	r2, [r3, r2]
 800c8de:	183b      	adds	r3, r7, r0
 800c8e0:	785b      	ldrb	r3, [r3, #1]
 800c8e2:	0019      	movs	r1, r3
 800c8e4:	4b0e      	ldr	r3, [pc, #56]	; (800c920 <mix_sub_columns+0x3c8>)
 800c8e6:	5c5b      	ldrb	r3, [r3, r1]
 800c8e8:	4053      	eors	r3, r2
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	183b      	adds	r3, r7, r0
 800c8ee:	799b      	ldrb	r3, [r3, #6]
 800c8f0:	0019      	movs	r1, r3
 800c8f2:	4b0b      	ldr	r3, [pc, #44]	; (800c920 <mix_sub_columns+0x3c8>)
 800c8f4:	5c5b      	ldrb	r3, [r3, r1]
 800c8f6:	4053      	eors	r3, r2
 800c8f8:	b2d9      	uxtb	r1, r3
 800c8fa:	183b      	adds	r3, r7, r0
 800c8fc:	7adb      	ldrb	r3, [r3, #11]
 800c8fe:	001a      	movs	r2, r3
 800c900:	4b05      	ldr	r3, [pc, #20]	; (800c918 <mix_sub_columns+0x3c0>)
 800c902:	5c9a      	ldrb	r2, [r3, r2]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	330f      	adds	r3, #15
 800c908:	404a      	eors	r2, r1
 800c90a:	b2d2      	uxtb	r2, r2
 800c90c:	701a      	strb	r2, [r3, #0]
  }
 800c90e:	46c0      	nop			; (mov r8, r8)
 800c910:	46bd      	mov	sp, r7
 800c912:	b007      	add	sp, #28
 800c914:	bd90      	pop	{r4, r7, pc}
 800c916:	46c0      	nop			; (mov r8, r8)
 800c918:	0801e884 	.word	0x0801e884
 800c91c:	0801e984 	.word	0x0801e984
 800c920:	0801e784 	.word	0x0801e784

0800c924 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	607a      	str	r2, [r7, #4]
 800c92e:	200b      	movs	r0, #11
 800c930:	183b      	adds	r3, r7, r0
 800c932:	1c0a      	adds	r2, r1, #0
 800c934:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c936:	183b      	adds	r3, r7, r0
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	3b10      	subs	r3, #16
 800c93c:	2210      	movs	r2, #16
 800c93e:	429a      	cmp	r2, r3
 800c940:	4192      	sbcs	r2, r2
 800c942:	4252      	negs	r2, r2
 800c944:	b2d2      	uxtb	r2, r2
 800c946:	2a00      	cmp	r2, #0
 800c948:	d109      	bne.n	800c95e <lorawan_aes_set_key+0x3a>
 800c94a:	2201      	movs	r2, #1
 800c94c:	409a      	lsls	r2, r3
 800c94e:	0013      	movs	r3, r2
 800c950:	4a90      	ldr	r2, [pc, #576]	; (800cb94 <lorawan_aes_set_key+0x270>)
 800c952:	4013      	ands	r3, r2
 800c954:	1e5a      	subs	r2, r3, #1
 800c956:	4193      	sbcs	r3, r2
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d105      	bne.n	800c96a <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	22f0      	movs	r2, #240	; 0xf0
 800c962:	2100      	movs	r1, #0
 800c964:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800c966:	23ff      	movs	r3, #255	; 0xff
 800c968:	e10f      	b.n	800cb8a <lorawan_aes_set_key+0x266>
        break;
 800c96a:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	240b      	movs	r4, #11
 800c970:	193b      	adds	r3, r7, r4
 800c972:	781a      	ldrb	r2, [r3, #0]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	0019      	movs	r1, r3
 800c978:	f7ff fbb4 	bl	800c0e4 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c97c:	0020      	movs	r0, r4
 800c97e:	183b      	adds	r3, r7, r0
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	331c      	adds	r3, #28
 800c984:	b2da      	uxtb	r2, r3
 800c986:	2111      	movs	r1, #17
 800c988:	187b      	adds	r3, r7, r1
 800c98a:	0092      	lsls	r2, r2, #2
 800c98c:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800c98e:	187b      	adds	r3, r7, r1
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	091b      	lsrs	r3, r3, #4
 800c994:	b2db      	uxtb	r3, r3
 800c996:	3b01      	subs	r3, #1
 800c998:	b2d9      	uxtb	r1, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	22f0      	movs	r2, #240	; 0xf0
 800c99e:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c9a0:	2317      	movs	r3, #23
 800c9a2:	18fb      	adds	r3, r7, r3
 800c9a4:	183a      	adds	r2, r7, r0
 800c9a6:	7812      	ldrb	r2, [r2, #0]
 800c9a8:	701a      	strb	r2, [r3, #0]
 800c9aa:	2316      	movs	r3, #22
 800c9ac:	18fb      	adds	r3, r7, r3
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	e0e0      	b.n	800cb76 <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c9b4:	2017      	movs	r0, #23
 800c9b6:	183b      	adds	r3, r7, r0
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	1f1a      	subs	r2, r3, #4
 800c9bc:	2415      	movs	r4, #21
 800c9be:	193b      	adds	r3, r7, r4
 800c9c0:	6879      	ldr	r1, [r7, #4]
 800c9c2:	5c8a      	ldrb	r2, [r1, r2]
 800c9c4:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800c9c6:	183b      	adds	r3, r7, r0
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	1eda      	subs	r2, r3, #3
 800c9cc:	2514      	movs	r5, #20
 800c9ce:	197b      	adds	r3, r7, r5
 800c9d0:	6879      	ldr	r1, [r7, #4]
 800c9d2:	5c8a      	ldrb	r2, [r1, r2]
 800c9d4:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800c9d6:	183b      	adds	r3, r7, r0
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	1e9a      	subs	r2, r3, #2
 800c9dc:	2613      	movs	r6, #19
 800c9de:	19bb      	adds	r3, r7, r6
 800c9e0:	6879      	ldr	r1, [r7, #4]
 800c9e2:	5c8a      	ldrb	r2, [r1, r2]
 800c9e4:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800c9e6:	183b      	adds	r3, r7, r0
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	1e5a      	subs	r2, r3, #1
 800c9ec:	2312      	movs	r3, #18
 800c9ee:	18fb      	adds	r3, r7, r3
 800c9f0:	6879      	ldr	r1, [r7, #4]
 800c9f2:	5c8a      	ldrb	r2, [r1, r2]
 800c9f4:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800c9f6:	183a      	adds	r2, r7, r0
 800c9f8:	210b      	movs	r1, #11
 800c9fa:	187b      	adds	r3, r7, r1
 800c9fc:	7812      	ldrb	r2, [r2, #0]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	0019      	movs	r1, r3
 800ca02:	0010      	movs	r0, r2
 800ca04:	f7f3 fc18 	bl	8000238 <__aeabi_uidivmod>
 800ca08:	000b      	movs	r3, r1
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d13b      	bne.n	800ca88 <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800ca10:	2210      	movs	r2, #16
 800ca12:	18bb      	adds	r3, r7, r2
 800ca14:	193a      	adds	r2, r7, r4
 800ca16:	7812      	ldrb	r2, [r2, #0]
 800ca18:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800ca1a:	197b      	adds	r3, r7, r5
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	4a5e      	ldr	r2, [pc, #376]	; (800cb98 <lorawan_aes_set_key+0x274>)
 800ca20:	5cd1      	ldrb	r1, [r2, r3]
 800ca22:	193b      	adds	r3, r7, r4
 800ca24:	2016      	movs	r0, #22
 800ca26:	183a      	adds	r2, r7, r0
 800ca28:	7812      	ldrb	r2, [r2, #0]
 800ca2a:	404a      	eors	r2, r1
 800ca2c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800ca2e:	19bb      	adds	r3, r7, r6
 800ca30:	781a      	ldrb	r2, [r3, #0]
 800ca32:	197b      	adds	r3, r7, r5
 800ca34:	4958      	ldr	r1, [pc, #352]	; (800cb98 <lorawan_aes_set_key+0x274>)
 800ca36:	5c8a      	ldrb	r2, [r1, r2]
 800ca38:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800ca3a:	2412      	movs	r4, #18
 800ca3c:	193b      	adds	r3, r7, r4
 800ca3e:	781a      	ldrb	r2, [r3, #0]
 800ca40:	19bb      	adds	r3, r7, r6
 800ca42:	4955      	ldr	r1, [pc, #340]	; (800cb98 <lorawan_aes_set_key+0x274>)
 800ca44:	5c8a      	ldrb	r2, [r1, r2]
 800ca46:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800ca48:	2210      	movs	r2, #16
 800ca4a:	18bb      	adds	r3, r7, r2
 800ca4c:	781a      	ldrb	r2, [r3, #0]
 800ca4e:	193b      	adds	r3, r7, r4
 800ca50:	4951      	ldr	r1, [pc, #324]	; (800cb98 <lorawan_aes_set_key+0x274>)
 800ca52:	5c8a      	ldrb	r2, [r1, r2]
 800ca54:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800ca56:	183b      	adds	r3, r7, r0
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	b25a      	sxtb	r2, r3
 800ca5e:	0004      	movs	r4, r0
 800ca60:	183b      	adds	r3, r7, r0
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	09db      	lsrs	r3, r3, #7
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	1c19      	adds	r1, r3, #0
 800ca6a:	1c0b      	adds	r3, r1, #0
 800ca6c:	18db      	adds	r3, r3, r3
 800ca6e:	185b      	adds	r3, r3, r1
 800ca70:	1c19      	adds	r1, r3, #0
 800ca72:	00c8      	lsls	r0, r1, #3
 800ca74:	1c19      	adds	r1, r3, #0
 800ca76:	1c03      	adds	r3, r0, #0
 800ca78:	18cb      	adds	r3, r1, r3
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	b25b      	sxtb	r3, r3
 800ca7e:	4053      	eors	r3, r2
 800ca80:	b25a      	sxtb	r2, r3
 800ca82:	193b      	adds	r3, r7, r4
 800ca84:	701a      	strb	r2, [r3, #0]
 800ca86:	e02d      	b.n	800cae4 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ca88:	210b      	movs	r1, #11
 800ca8a:	187b      	adds	r3, r7, r1
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b18      	cmp	r3, #24
 800ca90:	d928      	bls.n	800cae4 <lorawan_aes_set_key+0x1c0>
 800ca92:	2317      	movs	r3, #23
 800ca94:	18fa      	adds	r2, r7, r3
 800ca96:	187b      	adds	r3, r7, r1
 800ca98:	7812      	ldrb	r2, [r2, #0]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	0019      	movs	r1, r3
 800ca9e:	0010      	movs	r0, r2
 800caa0:	f7f3 fbca 	bl	8000238 <__aeabi_uidivmod>
 800caa4:	000b      	movs	r3, r1
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	2b10      	cmp	r3, #16
 800caaa:	d11b      	bne.n	800cae4 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800caac:	2115      	movs	r1, #21
 800caae:	187b      	adds	r3, r7, r1
 800cab0:	781a      	ldrb	r2, [r3, #0]
 800cab2:	187b      	adds	r3, r7, r1
 800cab4:	4938      	ldr	r1, [pc, #224]	; (800cb98 <lorawan_aes_set_key+0x274>)
 800cab6:	5c8a      	ldrb	r2, [r1, r2]
 800cab8:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800caba:	2114      	movs	r1, #20
 800cabc:	187b      	adds	r3, r7, r1
 800cabe:	781a      	ldrb	r2, [r3, #0]
 800cac0:	187b      	adds	r3, r7, r1
 800cac2:	4935      	ldr	r1, [pc, #212]	; (800cb98 <lorawan_aes_set_key+0x274>)
 800cac4:	5c8a      	ldrb	r2, [r1, r2]
 800cac6:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800cac8:	2113      	movs	r1, #19
 800caca:	187b      	adds	r3, r7, r1
 800cacc:	781a      	ldrb	r2, [r3, #0]
 800cace:	187b      	adds	r3, r7, r1
 800cad0:	4931      	ldr	r1, [pc, #196]	; (800cb98 <lorawan_aes_set_key+0x274>)
 800cad2:	5c8a      	ldrb	r2, [r1, r2]
 800cad4:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800cad6:	2112      	movs	r1, #18
 800cad8:	187b      	adds	r3, r7, r1
 800cada:	781a      	ldrb	r2, [r3, #0]
 800cadc:	187b      	adds	r3, r7, r1
 800cade:	492e      	ldr	r1, [pc, #184]	; (800cb98 <lorawan_aes_set_key+0x274>)
 800cae0:	5c8a      	ldrb	r2, [r1, r2]
 800cae2:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800cae4:	2410      	movs	r4, #16
 800cae6:	193b      	adds	r3, r7, r4
 800cae8:	2017      	movs	r0, #23
 800caea:	1839      	adds	r1, r7, r0
 800caec:	220b      	movs	r2, #11
 800caee:	18ba      	adds	r2, r7, r2
 800caf0:	7809      	ldrb	r1, [r1, #0]
 800caf2:	7812      	ldrb	r2, [r2, #0]
 800caf4:	1a8a      	subs	r2, r1, r2
 800caf6:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800caf8:	193b      	adds	r3, r7, r4
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	5cd1      	ldrb	r1, [r2, r3]
 800cb00:	183b      	adds	r3, r7, r0
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2215      	movs	r2, #21
 800cb06:	18ba      	adds	r2, r7, r2
 800cb08:	7812      	ldrb	r2, [r2, #0]
 800cb0a:	404a      	eors	r2, r1
 800cb0c:	b2d1      	uxtb	r1, r2
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800cb12:	193b      	adds	r3, r7, r4
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	5cd1      	ldrb	r1, [r2, r3]
 800cb1c:	183b      	adds	r3, r7, r0
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	3301      	adds	r3, #1
 800cb22:	2214      	movs	r2, #20
 800cb24:	18ba      	adds	r2, r7, r2
 800cb26:	7812      	ldrb	r2, [r2, #0]
 800cb28:	404a      	eors	r2, r1
 800cb2a:	b2d1      	uxtb	r1, r2
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800cb30:	193b      	adds	r3, r7, r4
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	3302      	adds	r3, #2
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	5cd1      	ldrb	r1, [r2, r3]
 800cb3a:	183b      	adds	r3, r7, r0
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	3302      	adds	r3, #2
 800cb40:	2213      	movs	r2, #19
 800cb42:	18ba      	adds	r2, r7, r2
 800cb44:	7812      	ldrb	r2, [r2, #0]
 800cb46:	404a      	eors	r2, r1
 800cb48:	b2d1      	uxtb	r1, r2
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800cb4e:	193b      	adds	r3, r7, r4
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	3303      	adds	r3, #3
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	5cd1      	ldrb	r1, [r2, r3]
 800cb58:	183b      	adds	r3, r7, r0
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	3303      	adds	r3, #3
 800cb5e:	2212      	movs	r2, #18
 800cb60:	18ba      	adds	r2, r7, r2
 800cb62:	7812      	ldrb	r2, [r2, #0]
 800cb64:	404a      	eors	r2, r1
 800cb66:	b2d1      	uxtb	r1, r2
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cb6c:	183b      	adds	r3, r7, r0
 800cb6e:	183a      	adds	r2, r7, r0
 800cb70:	7812      	ldrb	r2, [r2, #0]
 800cb72:	3204      	adds	r2, #4
 800cb74:	701a      	strb	r2, [r3, #0]
 800cb76:	2317      	movs	r3, #23
 800cb78:	18fa      	adds	r2, r7, r3
 800cb7a:	2311      	movs	r3, #17
 800cb7c:	18fb      	adds	r3, r7, r3
 800cb7e:	7812      	ldrb	r2, [r2, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d200      	bcs.n	800cb88 <lorawan_aes_set_key+0x264>
 800cb86:	e715      	b.n	800c9b4 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	0018      	movs	r0, r3
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	b007      	add	sp, #28
 800cb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb92:	46c0      	nop			; (mov r8, r8)
 800cb94:	00010101 	.word	0x00010101
 800cb98:	0801e784 	.word	0x0801e784

0800cb9c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800cb9c:	b5b0      	push	{r4, r5, r7, lr}
 800cb9e:	b08a      	sub	sp, #40	; 0x28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	22f0      	movs	r2, #240	; 0xf0
 800cbac:	5c9b      	ldrb	r3, [r3, r2]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d039      	beq.n	800cc26 <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	68f9      	ldr	r1, [r7, #12]
 800cbb6:	2314      	movs	r3, #20
 800cbb8:	18fb      	adds	r3, r7, r3
 800cbba:	0018      	movs	r0, r3
 800cbbc:	f7ff fb64 	bl	800c288 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cbc0:	2327      	movs	r3, #39	; 0x27
 800cbc2:	18fb      	adds	r3, r7, r3
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	701a      	strb	r2, [r3, #0]
 800cbc8:	e014      	b.n	800cbf4 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cbca:	2514      	movs	r5, #20
 800cbcc:	197b      	adds	r3, r7, r5
 800cbce:	0018      	movs	r0, r3
 800cbd0:	f7ff fcc2 	bl	800c558 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2427      	movs	r4, #39	; 0x27
 800cbd8:	193a      	adds	r2, r7, r4
 800cbda:	7812      	ldrb	r2, [r2, #0]
 800cbdc:	0112      	lsls	r2, r2, #4
 800cbde:	189a      	adds	r2, r3, r2
 800cbe0:	197b      	adds	r3, r7, r5
 800cbe2:	0011      	movs	r1, r2
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	f7ff fc06 	bl	800c3f6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cbea:	193b      	adds	r3, r7, r4
 800cbec:	193a      	adds	r2, r7, r4
 800cbee:	7812      	ldrb	r2, [r2, #0]
 800cbf0:	3201      	adds	r2, #1
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	22f0      	movs	r2, #240	; 0xf0
 800cbf8:	5c9b      	ldrb	r3, [r3, r2]
 800cbfa:	2427      	movs	r4, #39	; 0x27
 800cbfc:	193a      	adds	r2, r7, r4
 800cbfe:	7812      	ldrb	r2, [r2, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d3e2      	bcc.n	800cbca <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800cc04:	2514      	movs	r5, #20
 800cc06:	197b      	adds	r3, r7, r5
 800cc08:	0018      	movs	r0, r3
 800cc0a:	f7ff fc03 	bl	800c414 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	193a      	adds	r2, r7, r4
 800cc12:	7812      	ldrb	r2, [r2, #0]
 800cc14:	0112      	lsls	r2, r2, #4
 800cc16:	189a      	adds	r2, r3, r2
 800cc18:	1979      	adds	r1, r7, r5
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	0018      	movs	r0, r3
 800cc1e:	f7ff fb33 	bl	800c288 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	e000      	b.n	800cc28 <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800cc26:	23ff      	movs	r3, #255	; 0xff
}
 800cc28:	0018      	movs	r0, r3
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	b00a      	add	sp, #40	; 0x28
 800cc2e:	bdb0      	pop	{r4, r5, r7, pc}

0800cc30 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	0002      	movs	r2, r0
 800cc38:	6039      	str	r1, [r7, #0]
 800cc3a:	1dfb      	adds	r3, r7, #7
 800cc3c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cc3e:	230f      	movs	r3, #15
 800cc40:	18fb      	adds	r3, r7, r3
 800cc42:	2200      	movs	r2, #0
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	e020      	b.n	800cc8a <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800cc48:	200f      	movs	r0, #15
 800cc4a:	183b      	adds	r3, r7, r0
 800cc4c:	781a      	ldrb	r2, [r3, #0]
 800cc4e:	4914      	ldr	r1, [pc, #80]	; (800cca0 <GetKeyByID+0x70>)
 800cc50:	0013      	movs	r3, r2
 800cc52:	011b      	lsls	r3, r3, #4
 800cc54:	189b      	adds	r3, r3, r2
 800cc56:	18cb      	adds	r3, r1, r3
 800cc58:	3310      	adds	r3, #16
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	1dfa      	adds	r2, r7, #7
 800cc5e:	7812      	ldrb	r2, [r2, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d10c      	bne.n	800cc7e <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800cc64:	183b      	adds	r3, r7, r0
 800cc66:	781a      	ldrb	r2, [r3, #0]
 800cc68:	0013      	movs	r3, r2
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	189b      	adds	r3, r3, r2
 800cc6e:	3310      	adds	r3, #16
 800cc70:	001a      	movs	r2, r3
 800cc72:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <GetKeyByID+0x70>)
 800cc74:	18d2      	adds	r2, r2, r3
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e00b      	b.n	800cc96 <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cc7e:	210f      	movs	r1, #15
 800cc80:	187b      	adds	r3, r7, r1
 800cc82:	781a      	ldrb	r2, [r3, #0]
 800cc84:	187b      	adds	r3, r7, r1
 800cc86:	3201      	adds	r2, #1
 800cc88:	701a      	strb	r2, [r3, #0]
 800cc8a:	230f      	movs	r3, #15
 800cc8c:	18fb      	adds	r3, r7, r3
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b09      	cmp	r3, #9
 800cc92:	d9d9      	bls.n	800cc48 <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cc94:	2303      	movs	r3, #3
}
 800cc96:	0018      	movs	r0, r3
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	b004      	add	sp, #16
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	46c0      	nop			; (mov r8, r8)
 800cca0:	2000007c 	.word	0x2000007c

0800cca4 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	af00      	add	r7, sp, #0
  return;
 800cca8:	46c0      	nop			; (mov r8, r8)
}
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800ccb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb2:	b0d1      	sub	sp, #324	; 0x144
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	0019      	movs	r1, r3
 800ccbc:	4b40      	ldr	r3, [pc, #256]	; (800cdc0 <ComputeCmac+0x110>)
 800ccbe:	20a0      	movs	r0, #160	; 0xa0
 800ccc0:	0040      	lsls	r0, r0, #1
 800ccc2:	4684      	mov	ip, r0
 800ccc4:	44bc      	add	ip, r7
 800ccc6:	4463      	add	r3, ip
 800ccc8:	801a      	strh	r2, [r3, #0]
 800ccca:	4b3e      	ldr	r3, [pc, #248]	; (800cdc4 <ComputeCmac+0x114>)
 800cccc:	22a0      	movs	r2, #160	; 0xa0
 800ccce:	0052      	lsls	r2, r2, #1
 800ccd0:	4694      	mov	ip, r2
 800ccd2:	44bc      	add	ip, r7
 800ccd4:	4463      	add	r3, ip
 800ccd6:	1c0a      	adds	r2, r1, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ccda:	2340      	movs	r3, #64	; 0x40
 800ccdc:	33ff      	adds	r3, #255	; 0xff
 800ccde:	18fb      	adds	r3, r7, r3
 800cce0:	2206      	movs	r2, #6
 800cce2:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d008      	beq.n	800ccfc <ComputeCmac+0x4c>
 800ccea:	23a8      	movs	r3, #168	; 0xa8
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	2208      	movs	r2, #8
 800ccf0:	4694      	mov	ip, r2
 800ccf2:	44bc      	add	ip, r7
 800ccf4:	4463      	add	r3, ip
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d101      	bne.n	800cd00 <ComputeCmac+0x50>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	e05a      	b.n	800cdb6 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800cd00:	2514      	movs	r5, #20
 800cd02:	197b      	adds	r3, r7, r5
 800cd04:	0018      	movs	r0, r3
 800cd06:	f7fe ff39 	bl	800bb7c <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800cd0a:	2640      	movs	r6, #64	; 0x40
 800cd0c:	36ff      	adds	r6, #255	; 0xff
 800cd0e:	19bc      	adds	r4, r7, r6
 800cd10:	2310      	movs	r3, #16
 800cd12:	18fa      	adds	r2, r7, r3
 800cd14:	4b2b      	ldr	r3, [pc, #172]	; (800cdc4 <ComputeCmac+0x114>)
 800cd16:	21a0      	movs	r1, #160	; 0xa0
 800cd18:	0049      	lsls	r1, r1, #1
 800cd1a:	468c      	mov	ip, r1
 800cd1c:	44bc      	add	ip, r7
 800cd1e:	4463      	add	r3, ip
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	0011      	movs	r1, r2
 800cd24:	0018      	movs	r0, r3
 800cd26:	f7ff ff83 	bl	800cc30 <GetKeyByID>
 800cd2a:	0003      	movs	r3, r0
 800cd2c:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800cd2e:	19bb      	adds	r3, r7, r6
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d13b      	bne.n	800cdae <ComputeCmac+0xfe>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	197b      	adds	r3, r7, r5
 800cd3c:	0011      	movs	r1, r2
 800cd3e:	0018      	movs	r0, r3
 800cd40:	f7fe ff36 	bl	800bbb0 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d005      	beq.n	800cd56 <ComputeCmac+0xa6>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800cd4a:	68f9      	ldr	r1, [r7, #12]
 800cd4c:	197b      	adds	r3, r7, r5
 800cd4e:	2210      	movs	r2, #16
 800cd50:	0018      	movs	r0, r3
 800cd52:	f7fe ff3c 	bl	800bbce <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800cd56:	4b1a      	ldr	r3, [pc, #104]	; (800cdc0 <ComputeCmac+0x110>)
 800cd58:	22a0      	movs	r2, #160	; 0xa0
 800cd5a:	0052      	lsls	r2, r2, #1
 800cd5c:	4694      	mov	ip, r2
 800cd5e:	44bc      	add	ip, r7
 800cd60:	4463      	add	r3, ip
 800cd62:	881a      	ldrh	r2, [r3, #0]
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	2414      	movs	r4, #20
 800cd68:	193b      	adds	r3, r7, r4
 800cd6a:	0018      	movs	r0, r3
 800cd6c:	f7fe ff2f 	bl	800bbce <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800cd70:	193a      	adds	r2, r7, r4
 800cd72:	2496      	movs	r4, #150	; 0x96
 800cd74:	0064      	lsls	r4, r4, #1
 800cd76:	193b      	adds	r3, r7, r4
 800cd78:	0011      	movs	r1, r2
 800cd7a:	0018      	movs	r0, r3
 800cd7c:	f7fe ffef 	bl	800bd5e <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800cd80:	0021      	movs	r1, r4
 800cd82:	187b      	adds	r3, r7, r1
 800cd84:	78db      	ldrb	r3, [r3, #3]
 800cd86:	061a      	lsls	r2, r3, #24
 800cd88:	187b      	adds	r3, r7, r1
 800cd8a:	789b      	ldrb	r3, [r3, #2]
 800cd8c:	041b      	lsls	r3, r3, #16
 800cd8e:	431a      	orrs	r2, r3
 800cd90:	187b      	adds	r3, r7, r1
 800cd92:	785b      	ldrb	r3, [r3, #1]
 800cd94:	021b      	lsls	r3, r3, #8
 800cd96:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800cd98:	187a      	adds	r2, r7, r1
 800cd9a:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800cd9c:	431a      	orrs	r2, r3
 800cd9e:	23a8      	movs	r3, #168	; 0xa8
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	2108      	movs	r1, #8
 800cda4:	468c      	mov	ip, r1
 800cda6:	44bc      	add	ip, r7
 800cda8:	4463      	add	r3, ip
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800cdae:	2340      	movs	r3, #64	; 0x40
 800cdb0:	33ff      	adds	r3, #255	; 0xff
 800cdb2:	18fb      	adds	r3, r7, r3
 800cdb4:	781b      	ldrb	r3, [r3, #0]
}
 800cdb6:	0018      	movs	r0, r3
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	b051      	add	sp, #324	; 0x144
 800cdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdbe:	46c0      	nop			; (mov r8, r8)
 800cdc0:	fffffec6 	.word	0xfffffec6
 800cdc4:	fffffec5 	.word	0xfffffec5

0800cdc8 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800cdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdca:	46de      	mov	lr, fp
 800cdcc:	4657      	mov	r7, sl
 800cdce:	464e      	mov	r6, r9
 800cdd0:	4645      	mov	r5, r8
 800cdd2:	b5e0      	push	{r5, r6, r7, lr}
 800cdd4:	b099      	sub	sp, #100	; 0x64
 800cdd6:	af10      	add	r7, sp, #64	; 0x40
 800cdd8:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cdda:	250f      	movs	r5, #15
 800cddc:	2610      	movs	r6, #16
 800cdde:	19bb      	adds	r3, r7, r6
 800cde0:	195b      	adds	r3, r3, r5
 800cde2:	2206      	movs	r2, #6
 800cde4:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800cde6:	49dd      	ldr	r1, [pc, #884]	; (800d15c <SecureElementInit+0x394>)
 800cde8:	4bdd      	ldr	r3, [pc, #884]	; (800d160 <SecureElementInit+0x398>)
 800cdea:	22aa      	movs	r2, #170	; 0xaa
 800cdec:	0018      	movs	r0, r3
 800cdee:	f00c f871 	bl	8018ed4 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800cdf2:	19bb      	adds	r3, r7, r6
 800cdf4:	195c      	adds	r4, r3, r5
 800cdf6:	2308      	movs	r3, #8
 800cdf8:	2210      	movs	r2, #16
 800cdfa:	4694      	mov	ip, r2
 800cdfc:	44bc      	add	ip, r7
 800cdfe:	4463      	add	r3, ip
 800ce00:	0019      	movs	r1, r3
 800ce02:	2000      	movs	r0, #0
 800ce04:	f7ff ff14 	bl	800cc30 <GetKeyByID>
 800ce08:	0003      	movs	r3, r0
 800ce0a:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ce0c:	4bd5      	ldr	r3, [pc, #852]	; (800d164 <SecureElementInit+0x39c>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2100      	movs	r1, #0
 800ce12:	2002      	movs	r0, #2
 800ce14:	f00e fcd0 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800ce18:	19bb      	adds	r3, r7, r6
 800ce1a:	195b      	adds	r3, r3, r5
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d14f      	bne.n	800cec2 <SecureElementInit+0xfa>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	785b      	ldrb	r3, [r3, #1]
 800ce26:	001d      	movs	r5, r3
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	789b      	ldrb	r3, [r3, #2]
 800ce2c:	001e      	movs	r6, r3
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	78db      	ldrb	r3, [r3, #3]
 800ce32:	469c      	mov	ip, r3
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	791b      	ldrb	r3, [r3, #4]
 800ce38:	4698      	mov	r8, r3
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	795b      	ldrb	r3, [r3, #5]
 800ce3e:	4699      	mov	r9, r3
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	799b      	ldrb	r3, [r3, #6]
 800ce44:	469a      	mov	sl, r3
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	79db      	ldrb	r3, [r3, #7]
 800ce4a:	469b      	mov	fp, r3
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	7a1b      	ldrb	r3, [r3, #8]
 800ce50:	613b      	str	r3, [r7, #16]
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	7a5b      	ldrb	r3, [r3, #9]
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	7a9b      	ldrb	r3, [r3, #10]
 800ce5c:	60bb      	str	r3, [r7, #8]
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	7adb      	ldrb	r3, [r3, #11]
 800ce62:	607b      	str	r3, [r7, #4]
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	7b1b      	ldrb	r3, [r3, #12]
 800ce68:	603b      	str	r3, [r7, #0]
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	7b5b      	ldrb	r3, [r3, #13]
 800ce6e:	001c      	movs	r4, r3
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	7b9b      	ldrb	r3, [r3, #14]
 800ce74:	0018      	movs	r0, r3
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	7bdb      	ldrb	r3, [r3, #15]
 800ce7a:	0019      	movs	r1, r3
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	7c1b      	ldrb	r3, [r3, #16]
 800ce80:	4ab9      	ldr	r2, [pc, #740]	; (800d168 <SecureElementInit+0x3a0>)
 800ce82:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce84:	910e      	str	r1, [sp, #56]	; 0x38
 800ce86:	900d      	str	r0, [sp, #52]	; 0x34
 800ce88:	940c      	str	r4, [sp, #48]	; 0x30
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	910a      	str	r1, [sp, #40]	; 0x28
 800ce92:	68b9      	ldr	r1, [r7, #8]
 800ce94:	9109      	str	r1, [sp, #36]	; 0x24
 800ce96:	68f9      	ldr	r1, [r7, #12]
 800ce98:	9108      	str	r1, [sp, #32]
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	9307      	str	r3, [sp, #28]
 800ce9e:	465b      	mov	r3, fp
 800cea0:	9306      	str	r3, [sp, #24]
 800cea2:	4653      	mov	r3, sl
 800cea4:	9305      	str	r3, [sp, #20]
 800cea6:	464b      	mov	r3, r9
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	4643      	mov	r3, r8
 800ceac:	9303      	str	r3, [sp, #12]
 800ceae:	4663      	mov	r3, ip
 800ceb0:	9302      	str	r3, [sp, #8]
 800ceb2:	9601      	str	r6, [sp, #4]
 800ceb4:	9500      	str	r5, [sp, #0]
 800ceb6:	0013      	movs	r3, r2
 800ceb8:	2200      	movs	r2, #0
 800ceba:	2100      	movs	r1, #0
 800cebc:	2002      	movs	r0, #2
 800cebe:	f00e fc7b 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800cec2:	250f      	movs	r5, #15
 800cec4:	2610      	movs	r6, #16
 800cec6:	19bb      	adds	r3, r7, r6
 800cec8:	195c      	adds	r4, r3, r5
 800ceca:	2308      	movs	r3, #8
 800cecc:	2210      	movs	r2, #16
 800cece:	4694      	mov	ip, r2
 800ced0:	44bc      	add	ip, r7
 800ced2:	4463      	add	r3, ip
 800ced4:	0019      	movs	r1, r3
 800ced6:	2001      	movs	r0, #1
 800ced8:	f7ff feaa 	bl	800cc30 <GetKeyByID>
 800cedc:	0003      	movs	r3, r0
 800cede:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800cee0:	19bb      	adds	r3, r7, r6
 800cee2:	195b      	adds	r3, r3, r5
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d14f      	bne.n	800cf8a <SecureElementInit+0x1c2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	785b      	ldrb	r3, [r3, #1]
 800ceee:	001d      	movs	r5, r3
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	789b      	ldrb	r3, [r3, #2]
 800cef4:	001e      	movs	r6, r3
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	78db      	ldrb	r3, [r3, #3]
 800cefa:	469c      	mov	ip, r3
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	791b      	ldrb	r3, [r3, #4]
 800cf00:	4698      	mov	r8, r3
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	795b      	ldrb	r3, [r3, #5]
 800cf06:	4699      	mov	r9, r3
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	799b      	ldrb	r3, [r3, #6]
 800cf0c:	469a      	mov	sl, r3
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	79db      	ldrb	r3, [r3, #7]
 800cf12:	469b      	mov	fp, r3
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	7a1b      	ldrb	r3, [r3, #8]
 800cf18:	613b      	str	r3, [r7, #16]
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	7a5b      	ldrb	r3, [r3, #9]
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	7a9b      	ldrb	r3, [r3, #10]
 800cf24:	60bb      	str	r3, [r7, #8]
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	7adb      	ldrb	r3, [r3, #11]
 800cf2a:	607b      	str	r3, [r7, #4]
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	7b1b      	ldrb	r3, [r3, #12]
 800cf30:	603b      	str	r3, [r7, #0]
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	7b5b      	ldrb	r3, [r3, #13]
 800cf36:	001c      	movs	r4, r3
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	7b9b      	ldrb	r3, [r3, #14]
 800cf3c:	0018      	movs	r0, r3
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	7bdb      	ldrb	r3, [r3, #15]
 800cf42:	0019      	movs	r1, r3
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	7c1b      	ldrb	r3, [r3, #16]
 800cf48:	4a88      	ldr	r2, [pc, #544]	; (800d16c <SecureElementInit+0x3a4>)
 800cf4a:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf4c:	910e      	str	r1, [sp, #56]	; 0x38
 800cf4e:	900d      	str	r0, [sp, #52]	; 0x34
 800cf50:	940c      	str	r4, [sp, #48]	; 0x30
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf56:	6879      	ldr	r1, [r7, #4]
 800cf58:	910a      	str	r1, [sp, #40]	; 0x28
 800cf5a:	68b9      	ldr	r1, [r7, #8]
 800cf5c:	9109      	str	r1, [sp, #36]	; 0x24
 800cf5e:	68f9      	ldr	r1, [r7, #12]
 800cf60:	9108      	str	r1, [sp, #32]
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	9307      	str	r3, [sp, #28]
 800cf66:	465b      	mov	r3, fp
 800cf68:	9306      	str	r3, [sp, #24]
 800cf6a:	4653      	mov	r3, sl
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	464b      	mov	r3, r9
 800cf70:	9304      	str	r3, [sp, #16]
 800cf72:	4643      	mov	r3, r8
 800cf74:	9303      	str	r3, [sp, #12]
 800cf76:	4663      	mov	r3, ip
 800cf78:	9302      	str	r3, [sp, #8]
 800cf7a:	9601      	str	r6, [sp, #4]
 800cf7c:	9500      	str	r5, [sp, #0]
 800cf7e:	0013      	movs	r3, r2
 800cf80:	2200      	movs	r2, #0
 800cf82:	2100      	movs	r1, #0
 800cf84:	2002      	movs	r0, #2
 800cf86:	f00e fc17 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800cf8a:	4b79      	ldr	r3, [pc, #484]	; (800d170 <SecureElementInit+0x3a8>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2100      	movs	r1, #0
 800cf90:	2002      	movs	r0, #2
 800cf92:	f00e fc11 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800cf96:	250f      	movs	r5, #15
 800cf98:	2610      	movs	r6, #16
 800cf9a:	19bb      	adds	r3, r7, r6
 800cf9c:	195c      	adds	r4, r3, r5
 800cf9e:	2308      	movs	r3, #8
 800cfa0:	2210      	movs	r2, #16
 800cfa2:	4694      	mov	ip, r2
 800cfa4:	44bc      	add	ip, r7
 800cfa6:	4463      	add	r3, ip
 800cfa8:	0019      	movs	r1, r3
 800cfaa:	2003      	movs	r0, #3
 800cfac:	f7ff fe40 	bl	800cc30 <GetKeyByID>
 800cfb0:	0003      	movs	r3, r0
 800cfb2:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800cfb4:	19bb      	adds	r3, r7, r6
 800cfb6:	195b      	adds	r3, r3, r5
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d14f      	bne.n	800d05e <SecureElementInit+0x296>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	785b      	ldrb	r3, [r3, #1]
 800cfc2:	001d      	movs	r5, r3
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	789b      	ldrb	r3, [r3, #2]
 800cfc8:	001e      	movs	r6, r3
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	78db      	ldrb	r3, [r3, #3]
 800cfce:	469c      	mov	ip, r3
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	791b      	ldrb	r3, [r3, #4]
 800cfd4:	4698      	mov	r8, r3
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	795b      	ldrb	r3, [r3, #5]
 800cfda:	4699      	mov	r9, r3
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	799b      	ldrb	r3, [r3, #6]
 800cfe0:	469a      	mov	sl, r3
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	79db      	ldrb	r3, [r3, #7]
 800cfe6:	469b      	mov	fp, r3
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	7a1b      	ldrb	r3, [r3, #8]
 800cfec:	613b      	str	r3, [r7, #16]
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	7a5b      	ldrb	r3, [r3, #9]
 800cff2:	60fb      	str	r3, [r7, #12]
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	7a9b      	ldrb	r3, [r3, #10]
 800cff8:	60bb      	str	r3, [r7, #8]
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	7adb      	ldrb	r3, [r3, #11]
 800cffe:	607b      	str	r3, [r7, #4]
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	7b1b      	ldrb	r3, [r3, #12]
 800d004:	603b      	str	r3, [r7, #0]
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	7b5b      	ldrb	r3, [r3, #13]
 800d00a:	001c      	movs	r4, r3
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	7b9b      	ldrb	r3, [r3, #14]
 800d010:	0018      	movs	r0, r3
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	7bdb      	ldrb	r3, [r3, #15]
 800d016:	0019      	movs	r1, r3
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	7c1b      	ldrb	r3, [r3, #16]
 800d01c:	4a55      	ldr	r2, [pc, #340]	; (800d174 <SecureElementInit+0x3ac>)
 800d01e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d020:	910e      	str	r1, [sp, #56]	; 0x38
 800d022:	900d      	str	r0, [sp, #52]	; 0x34
 800d024:	940c      	str	r4, [sp, #48]	; 0x30
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	910b      	str	r1, [sp, #44]	; 0x2c
 800d02a:	6879      	ldr	r1, [r7, #4]
 800d02c:	910a      	str	r1, [sp, #40]	; 0x28
 800d02e:	68b9      	ldr	r1, [r7, #8]
 800d030:	9109      	str	r1, [sp, #36]	; 0x24
 800d032:	68f9      	ldr	r1, [r7, #12]
 800d034:	9108      	str	r1, [sp, #32]
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	9307      	str	r3, [sp, #28]
 800d03a:	465b      	mov	r3, fp
 800d03c:	9306      	str	r3, [sp, #24]
 800d03e:	4653      	mov	r3, sl
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	464b      	mov	r3, r9
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	4643      	mov	r3, r8
 800d048:	9303      	str	r3, [sp, #12]
 800d04a:	4663      	mov	r3, ip
 800d04c:	9302      	str	r3, [sp, #8]
 800d04e:	9601      	str	r6, [sp, #4]
 800d050:	9500      	str	r5, [sp, #0]
 800d052:	0013      	movs	r3, r2
 800d054:	2200      	movs	r2, #0
 800d056:	2100      	movs	r1, #0
 800d058:	2002      	movs	r0, #2
 800d05a:	f00e fbad 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800d05e:	250f      	movs	r5, #15
 800d060:	2610      	movs	r6, #16
 800d062:	19bb      	adds	r3, r7, r6
 800d064:	195c      	adds	r4, r3, r5
 800d066:	2308      	movs	r3, #8
 800d068:	2210      	movs	r2, #16
 800d06a:	4694      	mov	ip, r2
 800d06c:	44bc      	add	ip, r7
 800d06e:	4463      	add	r3, ip
 800d070:	0019      	movs	r1, r3
 800d072:	2002      	movs	r0, #2
 800d074:	f7ff fddc 	bl	800cc30 <GetKeyByID>
 800d078:	0003      	movs	r3, r0
 800d07a:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d07c:	19bb      	adds	r3, r7, r6
 800d07e:	195b      	adds	r3, r3, r5
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d14f      	bne.n	800d126 <SecureElementInit+0x35e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	785b      	ldrb	r3, [r3, #1]
 800d08a:	001d      	movs	r5, r3
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	789b      	ldrb	r3, [r3, #2]
 800d090:	001e      	movs	r6, r3
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	78db      	ldrb	r3, [r3, #3]
 800d096:	469c      	mov	ip, r3
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	791b      	ldrb	r3, [r3, #4]
 800d09c:	4698      	mov	r8, r3
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	795b      	ldrb	r3, [r3, #5]
 800d0a2:	4699      	mov	r9, r3
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	799b      	ldrb	r3, [r3, #6]
 800d0a8:	469a      	mov	sl, r3
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	79db      	ldrb	r3, [r3, #7]
 800d0ae:	469b      	mov	fp, r3
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	7a1b      	ldrb	r3, [r3, #8]
 800d0b4:	613b      	str	r3, [r7, #16]
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	7a5b      	ldrb	r3, [r3, #9]
 800d0ba:	60fb      	str	r3, [r7, #12]
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	7a9b      	ldrb	r3, [r3, #10]
 800d0c0:	60bb      	str	r3, [r7, #8]
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	7adb      	ldrb	r3, [r3, #11]
 800d0c6:	607b      	str	r3, [r7, #4]
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	7b1b      	ldrb	r3, [r3, #12]
 800d0cc:	603b      	str	r3, [r7, #0]
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	7b5b      	ldrb	r3, [r3, #13]
 800d0d2:	001c      	movs	r4, r3
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	7b9b      	ldrb	r3, [r3, #14]
 800d0d8:	0018      	movs	r0, r3
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	7bdb      	ldrb	r3, [r3, #15]
 800d0de:	0019      	movs	r1, r3
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	7c1b      	ldrb	r3, [r3, #16]
 800d0e4:	4a24      	ldr	r2, [pc, #144]	; (800d178 <SecureElementInit+0x3b0>)
 800d0e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0e8:	910e      	str	r1, [sp, #56]	; 0x38
 800d0ea:	900d      	str	r0, [sp, #52]	; 0x34
 800d0ec:	940c      	str	r4, [sp, #48]	; 0x30
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	910b      	str	r1, [sp, #44]	; 0x2c
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	910a      	str	r1, [sp, #40]	; 0x28
 800d0f6:	68b9      	ldr	r1, [r7, #8]
 800d0f8:	9109      	str	r1, [sp, #36]	; 0x24
 800d0fa:	68f9      	ldr	r1, [r7, #12]
 800d0fc:	9108      	str	r1, [sp, #32]
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	9307      	str	r3, [sp, #28]
 800d102:	465b      	mov	r3, fp
 800d104:	9306      	str	r3, [sp, #24]
 800d106:	4653      	mov	r3, sl
 800d108:	9305      	str	r3, [sp, #20]
 800d10a:	464b      	mov	r3, r9
 800d10c:	9304      	str	r3, [sp, #16]
 800d10e:	4643      	mov	r3, r8
 800d110:	9303      	str	r3, [sp, #12]
 800d112:	4663      	mov	r3, ip
 800d114:	9302      	str	r3, [sp, #8]
 800d116:	9601      	str	r6, [sp, #4]
 800d118:	9500      	str	r5, [sp, #0]
 800d11a:	0013      	movs	r3, r2
 800d11c:	2200      	movs	r2, #0
 800d11e:	2100      	movs	r1, #0
 800d120:	2002      	movs	r0, #2
 800d122:	f00e fb49 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d003      	beq.n	800d134 <SecureElementInit+0x36c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800d12c:	4b13      	ldr	r3, [pc, #76]	; (800d17c <SecureElementInit+0x3b4>)
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	601a      	str	r2, [r3, #0]
 800d132:	e002      	b.n	800d13a <SecureElementInit+0x372>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800d134:	4b11      	ldr	r3, [pc, #68]	; (800d17c <SecureElementInit+0x3b4>)
 800d136:	4a12      	ldr	r2, [pc, #72]	; (800d180 <SecureElementInit+0x3b8>)
 800d138:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800d13a:	4b12      	ldr	r3, [pc, #72]	; (800d184 <SecureElementInit+0x3bc>)
 800d13c:	0018      	movs	r0, r3
 800d13e:	f7f7 fba0 	bl	8004882 <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800d142:	4b0e      	ldr	r3, [pc, #56]	; (800d17c <SecureElementInit+0x3b4>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	0018      	movs	r0, r3
 800d14c:	46bd      	mov	sp, r7
 800d14e:	b009      	add	sp, #36	; 0x24
 800d150:	bcf0      	pop	{r4, r5, r6, r7}
 800d152:	46bb      	mov	fp, r7
 800d154:	46b2      	mov	sl, r6
 800d156:	46a9      	mov	r9, r5
 800d158:	46a0      	mov	r8, r4
 800d15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15c:	0801ea84 	.word	0x0801ea84
 800d160:	2000008c 	.word	0x2000008c
 800d164:	0801eb30 	.word	0x0801eb30
 800d168:	0801eb48 	.word	0x0801eb48
 800d16c:	0801ebac 	.word	0x0801ebac
 800d170:	0801ec10 	.word	0x0801ec10
 800d174:	0801ec28 	.word	0x0801ec28
 800d178:	0801ec8c 	.word	0x0801ec8c
 800d17c:	20000418 	.word	0x20000418
 800d180:	0800cca5 	.word	0x0800cca5
 800d184:	2000007c 	.word	0x2000007c

0800d188 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d007      	beq.n	800d1a6 <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800d196:	6879      	ldr	r1, [r7, #4]
 800d198:	4b05      	ldr	r3, [pc, #20]	; (800d1b0 <SecureElementRestoreNvmCtx+0x28>)
 800d19a:	22ba      	movs	r2, #186	; 0xba
 800d19c:	0018      	movs	r0, r3
 800d19e:	f00b fe99 	bl	8018ed4 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e000      	b.n	800d1a8 <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d1a6:	2302      	movs	r3, #2
  }
}
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	b002      	add	sp, #8
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	2000007c 	.word	0x2000007c

0800d1b4 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	22ba      	movs	r2, #186	; 0xba
 800d1c0:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800d1c2:	4b02      	ldr	r3, [pc, #8]	; (800d1cc <SecureElementGetNvmCtx+0x18>)
}
 800d1c4:	0018      	movs	r0, r3
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	b002      	add	sp, #8
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	2000007c 	.word	0x2000007c

0800d1d0 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800d1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1d2:	b089      	sub	sp, #36	; 0x24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	0002      	movs	r2, r0
 800d1d8:	6039      	str	r1, [r7, #0]
 800d1da:	1dfb      	adds	r3, r7, #7
 800d1dc:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d101      	bne.n	800d1e8 <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	e064      	b.n	800d2b2 <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d1e8:	231f      	movs	r3, #31
 800d1ea:	18fb      	adds	r3, r7, r3
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	701a      	strb	r2, [r3, #0]
 800d1f0:	e059      	b.n	800d2a6 <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d1f2:	231f      	movs	r3, #31
 800d1f4:	18fb      	adds	r3, r7, r3
 800d1f6:	781a      	ldrb	r2, [r3, #0]
 800d1f8:	4930      	ldr	r1, [pc, #192]	; (800d2bc <SecureElementSetKey+0xec>)
 800d1fa:	0013      	movs	r3, r2
 800d1fc:	011b      	lsls	r3, r3, #4
 800d1fe:	189b      	adds	r3, r3, r2
 800d200:	18cb      	adds	r3, r1, r3
 800d202:	3310      	adds	r3, #16
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	1dfa      	adds	r2, r7, #7
 800d208:	7812      	ldrb	r2, [r2, #0]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d145      	bne.n	800d29a <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800d20e:	1dfb      	adds	r3, r7, #7
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	2b80      	cmp	r3, #128	; 0x80
 800d214:	d12c      	bne.n	800d270 <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d216:	251e      	movs	r5, #30
 800d218:	197b      	adds	r3, r7, r5
 800d21a:	2206      	movs	r2, #6
 800d21c:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800d21e:	260c      	movs	r6, #12
 800d220:	19bb      	adds	r3, r7, r6
 800d222:	2200      	movs	r2, #0
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	3304      	adds	r3, #4
 800d228:	220c      	movs	r2, #12
 800d22a:	2100      	movs	r1, #0
 800d22c:	0018      	movs	r0, r3
 800d22e:	f010 fbac 	bl	801d98a <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800d232:	197c      	adds	r4, r7, r5
 800d234:	19bb      	adds	r3, r7, r6
 800d236:	6838      	ldr	r0, [r7, #0]
 800d238:	227f      	movs	r2, #127	; 0x7f
 800d23a:	2110      	movs	r1, #16
 800d23c:	f000 f8a5 	bl	800d38a <SecureElementAesEncrypt>
 800d240:	0003      	movs	r3, r0
 800d242:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800d244:	231f      	movs	r3, #31
 800d246:	18fb      	adds	r3, r7, r3
 800d248:	781a      	ldrb	r2, [r3, #0]
 800d24a:	0013      	movs	r3, r2
 800d24c:	011b      	lsls	r3, r3, #4
 800d24e:	189b      	adds	r3, r3, r2
 800d250:	3310      	adds	r3, #16
 800d252:	001a      	movs	r2, r3
 800d254:	4b19      	ldr	r3, [pc, #100]	; (800d2bc <SecureElementSetKey+0xec>)
 800d256:	18d3      	adds	r3, r2, r3
 800d258:	3301      	adds	r3, #1
 800d25a:	19b9      	adds	r1, r7, r6
 800d25c:	2210      	movs	r2, #16
 800d25e:	0018      	movs	r0, r3
 800d260:	f00b fe38 	bl	8018ed4 <memcpy1>
        SeNvmCtxChanged();
 800d264:	4b16      	ldr	r3, [pc, #88]	; (800d2c0 <SecureElementSetKey+0xf0>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4798      	blx	r3

        return retval;
 800d26a:	197b      	adds	r3, r7, r5
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	e020      	b.n	800d2b2 <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800d270:	231f      	movs	r3, #31
 800d272:	18fb      	adds	r3, r7, r3
 800d274:	781a      	ldrb	r2, [r3, #0]
 800d276:	0013      	movs	r3, r2
 800d278:	011b      	lsls	r3, r3, #4
 800d27a:	189b      	adds	r3, r3, r2
 800d27c:	3310      	adds	r3, #16
 800d27e:	001a      	movs	r2, r3
 800d280:	4b0e      	ldr	r3, [pc, #56]	; (800d2bc <SecureElementSetKey+0xec>)
 800d282:	18d3      	adds	r3, r2, r3
 800d284:	3301      	adds	r3, #1
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	2210      	movs	r2, #16
 800d28a:	0018      	movs	r0, r3
 800d28c:	f00b fe22 	bl	8018ed4 <memcpy1>
        SeNvmCtxChanged();
 800d290:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <SecureElementSetKey+0xf0>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800d296:	2300      	movs	r3, #0
 800d298:	e00b      	b.n	800d2b2 <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d29a:	211f      	movs	r1, #31
 800d29c:	187b      	adds	r3, r7, r1
 800d29e:	781a      	ldrb	r2, [r3, #0]
 800d2a0:	187b      	adds	r3, r7, r1
 800d2a2:	3201      	adds	r2, #1
 800d2a4:	701a      	strb	r2, [r3, #0]
 800d2a6:	231f      	movs	r3, #31
 800d2a8:	18fb      	adds	r3, r7, r3
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	2b09      	cmp	r3, #9
 800d2ae:	d9a0      	bls.n	800d1f2 <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d2b0:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800d2b2:	0018      	movs	r0, r3
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	b009      	add	sp, #36	; 0x24
 800d2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ba:	46c0      	nop			; (mov r8, r8)
 800d2bc:	2000007c 	.word	0x2000007c
 800d2c0:	20000418 	.word	0x20000418

0800d2c4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800d2c4:	b590      	push	{r4, r7, lr}
 800d2c6:	b087      	sub	sp, #28
 800d2c8:	af02      	add	r7, sp, #8
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	0019      	movs	r1, r3
 800d2d0:	1dbb      	adds	r3, r7, #6
 800d2d2:	801a      	strh	r2, [r3, #0]
 800d2d4:	1d7b      	adds	r3, r7, #5
 800d2d6:	1c0a      	adds	r2, r1, #0
 800d2d8:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800d2da:	1d7b      	adds	r3, r7, #5
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b7e      	cmp	r3, #126	; 0x7e
 800d2e0:	d901      	bls.n	800d2e6 <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e00b      	b.n	800d2fe <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800d2e6:	1d7b      	adds	r3, r7, #5
 800d2e8:	781c      	ldrb	r4, [r3, #0]
 800d2ea:	1dbb      	adds	r3, r7, #6
 800d2ec:	881a      	ldrh	r2, [r3, #0]
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	6a3b      	ldr	r3, [r7, #32]
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	0023      	movs	r3, r4
 800d2f8:	f7ff fcda 	bl	800ccb0 <ComputeCmac>
 800d2fc:	0003      	movs	r3, r0
}
 800d2fe:	0018      	movs	r0, r3
 800d300:	46bd      	mov	sp, r7
 800d302:	b005      	add	sp, #20
 800d304:	bd90      	pop	{r4, r7, pc}

0800d306 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800d306:	b5b0      	push	{r4, r5, r7, lr}
 800d308:	b088      	sub	sp, #32
 800d30a:	af02      	add	r7, sp, #8
 800d30c:	60f8      	str	r0, [r7, #12]
 800d30e:	0008      	movs	r0, r1
 800d310:	607a      	str	r2, [r7, #4]
 800d312:	0019      	movs	r1, r3
 800d314:	230a      	movs	r3, #10
 800d316:	18fb      	adds	r3, r7, r3
 800d318:	1c02      	adds	r2, r0, #0
 800d31a:	801a      	strh	r2, [r3, #0]
 800d31c:	2309      	movs	r3, #9
 800d31e:	18fb      	adds	r3, r7, r3
 800d320:	1c0a      	adds	r2, r1, #0
 800d322:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d324:	2317      	movs	r3, #23
 800d326:	18fb      	adds	r3, r7, r3
 800d328:	2206      	movs	r2, #6
 800d32a:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d332:	2302      	movs	r3, #2
 800d334:	e025      	b.n	800d382 <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800d33a:	2517      	movs	r5, #23
 800d33c:	197c      	adds	r4, r7, r5
 800d33e:	2309      	movs	r3, #9
 800d340:	18fb      	adds	r3, r7, r3
 800d342:	7818      	ldrb	r0, [r3, #0]
 800d344:	230a      	movs	r3, #10
 800d346:	18fb      	adds	r3, r7, r3
 800d348:	881a      	ldrh	r2, [r3, #0]
 800d34a:	68f9      	ldr	r1, [r7, #12]
 800d34c:	2310      	movs	r3, #16
 800d34e:	18fb      	adds	r3, r7, r3
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	0003      	movs	r3, r0
 800d354:	2000      	movs	r0, #0
 800d356:	f7ff fcab 	bl	800ccb0 <ComputeCmac>
 800d35a:	0003      	movs	r3, r0
 800d35c:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d35e:	197b      	adds	r3, r7, r5
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d002      	beq.n	800d36c <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800d366:	197b      	adds	r3, r7, r5
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	e00a      	b.n	800d382 <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	429a      	cmp	r2, r3
 800d372:	d003      	beq.n	800d37c <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800d374:	2317      	movs	r3, #23
 800d376:	18fb      	adds	r3, r7, r3
 800d378:	2201      	movs	r2, #1
 800d37a:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800d37c:	2317      	movs	r3, #23
 800d37e:	18fb      	adds	r3, r7, r3
 800d380:	781b      	ldrb	r3, [r3, #0]
}
 800d382:	0018      	movs	r0, r3
 800d384:	46bd      	mov	sp, r7
 800d386:	b006      	add	sp, #24
 800d388:	bdb0      	pop	{r4, r5, r7, pc}

0800d38a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800d38a:	b5b0      	push	{r4, r5, r7, lr}
 800d38c:	b0c2      	sub	sp, #264	; 0x108
 800d38e:	af00      	add	r7, sp, #0
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	0008      	movs	r0, r1
 800d394:	0011      	movs	r1, r2
 800d396:	607b      	str	r3, [r7, #4]
 800d398:	230a      	movs	r3, #10
 800d39a:	18fb      	adds	r3, r7, r3
 800d39c:	1c02      	adds	r2, r0, #0
 800d39e:	801a      	strh	r2, [r3, #0]
 800d3a0:	2309      	movs	r3, #9
 800d3a2:	18fb      	adds	r3, r7, r3
 800d3a4:	1c0a      	adds	r2, r1, #0
 800d3a6:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d3a8:	1dfb      	adds	r3, r7, #7
 800d3aa:	33ff      	adds	r3, #255	; 0xff
 800d3ac:	2206      	movs	r2, #6
 800d3ae:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d002      	beq.n	800d3bc <SecureElementAesEncrypt+0x32>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d3bc:	2302      	movs	r3, #2
 800d3be:	e051      	b.n	800d464 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800d3c0:	230a      	movs	r3, #10
 800d3c2:	18fb      	adds	r3, r7, r3
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	220f      	movs	r2, #15
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d001      	beq.n	800d3d4 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d3d0:	2305      	movs	r3, #5
 800d3d2:	e047      	b.n	800d464 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800d3d4:	2514      	movs	r5, #20
 800d3d6:	197b      	adds	r3, r7, r5
 800d3d8:	22f0      	movs	r2, #240	; 0xf0
 800d3da:	2100      	movs	r1, #0
 800d3dc:	0018      	movs	r0, r3
 800d3de:	f00b fdb7 	bl	8018f50 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800d3e2:	1dfc      	adds	r4, r7, #7
 800d3e4:	34ff      	adds	r4, #255	; 0xff
 800d3e6:	2310      	movs	r3, #16
 800d3e8:	18fa      	adds	r2, r7, r3
 800d3ea:	2309      	movs	r3, #9
 800d3ec:	18fb      	adds	r3, r7, r3
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	0011      	movs	r1, r2
 800d3f2:	0018      	movs	r0, r3
 800d3f4:	f7ff fc1c 	bl	800cc30 <GetKeyByID>
 800d3f8:	0003      	movs	r3, r0
 800d3fa:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d3fc:	1dfb      	adds	r3, r7, #7
 800d3fe:	33ff      	adds	r3, #255	; 0xff
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d12b      	bne.n	800d45e <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	3301      	adds	r3, #1
 800d40a:	197a      	adds	r2, r7, r5
 800d40c:	2110      	movs	r1, #16
 800d40e:	0018      	movs	r0, r3
 800d410:	f7ff fa88 	bl	800c924 <lorawan_aes_set_key>

    uint8_t block = 0;
 800d414:	2308      	movs	r3, #8
 800d416:	33ff      	adds	r3, #255	; 0xff
 800d418:	18fb      	adds	r3, r7, r3
 800d41a:	2200      	movs	r2, #0
 800d41c:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800d41e:	e019      	b.n	800d454 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d420:	2408      	movs	r4, #8
 800d422:	34ff      	adds	r4, #255	; 0xff
 800d424:	193b      	adds	r3, r7, r4
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	18d0      	adds	r0, r2, r3
 800d42c:	193b      	adds	r3, r7, r4
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	18d3      	adds	r3, r2, r3
 800d434:	2214      	movs	r2, #20
 800d436:	18ba      	adds	r2, r7, r2
 800d438:	0019      	movs	r1, r3
 800d43a:	f7ff fbaf 	bl	800cb9c <lorawan_aes_encrypt>
      block = block + 16;
 800d43e:	193b      	adds	r3, r7, r4
 800d440:	193a      	adds	r2, r7, r4
 800d442:	7812      	ldrb	r2, [r2, #0]
 800d444:	3210      	adds	r2, #16
 800d446:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800d448:	220a      	movs	r2, #10
 800d44a:	18bb      	adds	r3, r7, r2
 800d44c:	18ba      	adds	r2, r7, r2
 800d44e:	8812      	ldrh	r2, [r2, #0]
 800d450:	3a10      	subs	r2, #16
 800d452:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800d454:	230a      	movs	r3, #10
 800d456:	18fb      	adds	r3, r7, r3
 800d458:	881b      	ldrh	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e0      	bne.n	800d420 <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d45e:	1dfb      	adds	r3, r7, #7
 800d460:	33ff      	adds	r3, #255	; 0xff
 800d462:	781b      	ldrb	r3, [r3, #0]
}
 800d464:	0018      	movs	r0, r3
 800d466:	46bd      	mov	sp, r7
 800d468:	b042      	add	sp, #264	; 0x108
 800d46a:	bdb0      	pop	{r4, r5, r7, pc}

0800d46c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800d46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d46e:	b08b      	sub	sp, #44	; 0x2c
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	0019      	movs	r1, r3
 800d478:	1dfb      	adds	r3, r7, #7
 800d47a:	701a      	strb	r2, [r3, #0]
 800d47c:	1dbb      	adds	r3, r7, #6
 800d47e:	1c0a      	adds	r2, r1, #0
 800d480:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d482:	2327      	movs	r3, #39	; 0x27
 800d484:	18fb      	adds	r3, r7, r3
 800d486:	2206      	movs	r2, #6
 800d488:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d490:	2302      	movs	r3, #2
 800d492:	e03c      	b.n	800d50e <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800d494:	1dbb      	adds	r3, r7, #6
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b7f      	cmp	r3, #127	; 0x7f
 800d49a:	d105      	bne.n	800d4a8 <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800d49c:	1dfb      	adds	r3, r7, #7
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b04      	cmp	r3, #4
 800d4a2:	d001      	beq.n	800d4a8 <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d4a4:	2303      	movs	r3, #3
 800d4a6:	e032      	b.n	800d50e <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800d4a8:	2614      	movs	r6, #20
 800d4aa:	19bb      	adds	r3, r7, r6
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	220c      	movs	r2, #12
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	0018      	movs	r0, r3
 800d4b8:	f010 fa67 	bl	801d98a <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800d4bc:	2527      	movs	r5, #39	; 0x27
 800d4be:	197c      	adds	r4, r7, r5
 800d4c0:	19b9      	adds	r1, r7, r6
 800d4c2:	1dfb      	adds	r3, r7, #7
 800d4c4:	781a      	ldrb	r2, [r3, #0]
 800d4c6:	68b8      	ldr	r0, [r7, #8]
 800d4c8:	000b      	movs	r3, r1
 800d4ca:	2110      	movs	r1, #16
 800d4cc:	f7ff ff5d 	bl	800d38a <SecureElementAesEncrypt>
 800d4d0:	0003      	movs	r3, r0
 800d4d2:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d4d4:	197b      	adds	r3, r7, r5
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800d4dc:	197b      	adds	r3, r7, r5
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	e015      	b.n	800d50e <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800d4e2:	2527      	movs	r5, #39	; 0x27
 800d4e4:	197c      	adds	r4, r7, r5
 800d4e6:	2314      	movs	r3, #20
 800d4e8:	18fa      	adds	r2, r7, r3
 800d4ea:	1dbb      	adds	r3, r7, #6
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	0011      	movs	r1, r2
 800d4f0:	0018      	movs	r0, r3
 800d4f2:	f7ff fe6d 	bl	800d1d0 <SecureElementSetKey>
 800d4f6:	0003      	movs	r3, r0
 800d4f8:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d4fa:	197b      	adds	r3, r7, r5
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d002      	beq.n	800d508 <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800d502:	197b      	adds	r3, r7, r5
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	e002      	b.n	800d50e <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d508:	2327      	movs	r3, #39	; 0x27
 800d50a:	18fb      	adds	r3, r7, r3
 800d50c:	781b      	ldrb	r3, [r3, #0]
}
 800d50e:	0018      	movs	r0, r3
 800d510:	46bd      	mov	sp, r7
 800d512:	b00b      	add	sp, #44	; 0x2c
 800d514:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d516 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800d516:	b5b0      	push	{r4, r5, r7, lr}
 800d518:	b086      	sub	sp, #24
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	0011      	movs	r1, r2
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	230f      	movs	r3, #15
 800d524:	18fb      	adds	r3, r7, r3
 800d526:	1c02      	adds	r2, r0, #0
 800d528:	701a      	strb	r2, [r3, #0]
 800d52a:	230c      	movs	r3, #12
 800d52c:	18fb      	adds	r3, r7, r3
 800d52e:	1c0a      	adds	r2, r1, #0
 800d530:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d005      	beq.n	800d544 <SecureElementProcessJoinAccept+0x2e>
 800d538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <SecureElementProcessJoinAccept+0x2e>
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	2b00      	cmp	r3, #0
 800d542:	d101      	bne.n	800d548 <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d544:	2302      	movs	r3, #2
 800d546:	e069      	b.n	800d61c <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800d548:	2328      	movs	r3, #40	; 0x28
 800d54a:	18fb      	adds	r3, r7, r3
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2b21      	cmp	r3, #33	; 0x21
 800d550:	d901      	bls.n	800d556 <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d552:	2305      	movs	r3, #5
 800d554:	e062      	b.n	800d61c <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800d556:	2517      	movs	r5, #23
 800d558:	197b      	adds	r3, r7, r5
 800d55a:	2201      	movs	r2, #1
 800d55c:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800d55e:	2428      	movs	r4, #40	; 0x28
 800d560:	193b      	adds	r3, r7, r4
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	b29a      	uxth	r2, r3
 800d566:	6879      	ldr	r1, [r7, #4]
 800d568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56a:	0018      	movs	r0, r3
 800d56c:	f00b fcb2 	bl	8018ed4 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	1c58      	adds	r0, r3, #1
 800d574:	193b      	adds	r3, r7, r4
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	b29b      	uxth	r3, r3
 800d57a:	3b01      	subs	r3, #1
 800d57c:	b299      	uxth	r1, r3
 800d57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d580:	1c5c      	adds	r4, r3, #1
 800d582:	197b      	adds	r3, r7, r5
 800d584:	781a      	ldrb	r2, [r3, #0]
 800d586:	0023      	movs	r3, r4
 800d588:	f7ff feff 	bl	800d38a <SecureElementAesEncrypt>
 800d58c:	1e03      	subs	r3, r0, #0
 800d58e:	d001      	beq.n	800d594 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d590:	2307      	movs	r3, #7
 800d592:	e043      	b.n	800d61c <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d596:	330b      	adds	r3, #11
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	09db      	lsrs	r3, r3, #7
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a0:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800d5a6:	2128      	movs	r1, #40	; 0x28
 800d5a8:	187b      	adds	r3, r7, r1
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	3b04      	subs	r3, #4
 800d5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5b0:	18d3      	adds	r3, r2, r3
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800d5b6:	187b      	adds	r3, r7, r1
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	3b03      	subs	r3, #3
 800d5bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5be:	18d3      	adds	r3, r2, r3
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	021b      	lsls	r3, r3, #8
 800d5c4:	693a      	ldr	r2, [r7, #16]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800d5ca:	187b      	adds	r3, r7, r1
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	3b02      	subs	r3, #2
 800d5d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5d2:	18d3      	adds	r3, r2, r3
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	041b      	lsls	r3, r3, #16
 800d5d8:	693a      	ldr	r2, [r7, #16]
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800d5de:	187b      	adds	r3, r7, r1
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5e6:	18d3      	adds	r3, r2, r3
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	061b      	lsls	r3, r3, #24
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10d      	bne.n	800d616 <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800d5fa:	187b      	adds	r3, r7, r1
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	3b04      	subs	r3, #4
 800d602:	b299      	uxth	r1, r3
 800d604:	693a      	ldr	r2, [r7, #16]
 800d606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d608:	2301      	movs	r3, #1
 800d60a:	f7ff fe7c 	bl	800d306 <SecureElementVerifyAesCmac>
 800d60e:	1e03      	subs	r3, r0, #0
 800d610:	d003      	beq.n	800d61a <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800d612:	2301      	movs	r3, #1
 800d614:	e002      	b.n	800d61c <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d616:	2304      	movs	r3, #4
 800d618:	e000      	b.n	800d61c <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	0018      	movs	r0, r3
 800d61e:	46bd      	mov	sp, r7
 800d620:	b006      	add	sp, #24
 800d622:	bdb0      	pop	{r4, r5, r7, pc}

0800d624 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d101      	bne.n	800d636 <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d632:	2302      	movs	r3, #2
 800d634:	e006      	b.n	800d644 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800d636:	4b05      	ldr	r3, [pc, #20]	; (800d64c <SecureElementRandomNumber+0x28>)
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	4798      	blx	r3
 800d63c:	0002      	movs	r2, r0
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800d642:	2300      	movs	r3, #0
}
 800d644:	0018      	movs	r0, r3
 800d646:	46bd      	mov	sp, r7
 800d648:	b002      	add	sp, #8
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	0801f358 	.word	0x0801f358

0800d650 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d65e:	2302      	movs	r3, #2
 800d660:	e009      	b.n	800d676 <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800d662:	6879      	ldr	r1, [r7, #4]
 800d664:	4b06      	ldr	r3, [pc, #24]	; (800d680 <SecureElementSetDevEui+0x30>)
 800d666:	2208      	movs	r2, #8
 800d668:	0018      	movs	r0, r3
 800d66a:	f00b fc33 	bl	8018ed4 <memcpy1>
  SeNvmCtxChanged();
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <SecureElementSetDevEui+0x34>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800d674:	2300      	movs	r3, #0
}
 800d676:	0018      	movs	r0, r3
 800d678:	46bd      	mov	sp, r7
 800d67a:	b002      	add	sp, #8
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	46c0      	nop			; (mov r8, r8)
 800d680:	2000007c 	.word	0x2000007c
 800d684:	20000418 	.word	0x20000418

0800d688 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800d68c:	4b01      	ldr	r3, [pc, #4]	; (800d694 <SecureElementGetDevEui+0xc>)
}
 800d68e:	0018      	movs	r0, r3
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	2000007c 	.word	0x2000007c

0800d698 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d101      	bne.n	800d6aa <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d6a6:	2302      	movs	r3, #2
 800d6a8:	e009      	b.n	800d6be <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800d6aa:	6879      	ldr	r1, [r7, #4]
 800d6ac:	4b06      	ldr	r3, [pc, #24]	; (800d6c8 <SecureElementSetJoinEui+0x30>)
 800d6ae:	2208      	movs	r2, #8
 800d6b0:	0018      	movs	r0, r3
 800d6b2:	f00b fc0f 	bl	8018ed4 <memcpy1>
  SeNvmCtxChanged();
 800d6b6:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <SecureElementSetJoinEui+0x34>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800d6bc:	2300      	movs	r3, #0
}
 800d6be:	0018      	movs	r0, r3
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	b002      	add	sp, #8
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	46c0      	nop			; (mov r8, r8)
 800d6c8:	20000084 	.word	0x20000084
 800d6cc:	20000418 	.word	0x20000418

0800d6d0 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800d6d4:	4b01      	ldr	r3, [pc, #4]	; (800d6dc <SecureElementGetJoinEui+0xc>)
}
 800d6d6:	0018      	movs	r0, r3
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20000084 	.word	0x20000084

0800d6e0 <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	4b17      	ldr	r3, [pc, #92]	; (800d748 <LmHandlerInit+0x68>)
 800d6ec:	2220      	movs	r2, #32
 800d6ee:	0018      	movs	r0, r3
 800d6f0:	f00e fbe2 	bl	801beb8 <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d6f4:	4b15      	ldr	r3, [pc, #84]	; (800d74c <LmHandlerInit+0x6c>)
 800d6f6:	4a16      	ldr	r2, [pc, #88]	; (800d750 <LmHandlerInit+0x70>)
 800d6f8:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d6fa:	4b14      	ldr	r3, [pc, #80]	; (800d74c <LmHandlerInit+0x6c>)
 800d6fc:	4a15      	ldr	r2, [pc, #84]	; (800d754 <LmHandlerInit+0x74>)
 800d6fe:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d700:	4b12      	ldr	r3, [pc, #72]	; (800d74c <LmHandlerInit+0x6c>)
 800d702:	4a15      	ldr	r2, [pc, #84]	; (800d758 <LmHandlerInit+0x78>)
 800d704:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d706:	4b11      	ldr	r3, [pc, #68]	; (800d74c <LmHandlerInit+0x6c>)
 800d708:	4a14      	ldr	r2, [pc, #80]	; (800d75c <LmHandlerInit+0x7c>)
 800d70a:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800d70c:	4b0e      	ldr	r3, [pc, #56]	; (800d748 <LmHandlerInit+0x68>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	4b13      	ldr	r3, [pc, #76]	; (800d760 <LmHandlerInit+0x80>)
 800d712:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800d714:	4b0c      	ldr	r3, [pc, #48]	; (800d748 <LmHandlerInit+0x68>)
 800d716:	685a      	ldr	r2, [r3, #4]
 800d718:	4b11      	ldr	r3, [pc, #68]	; (800d760 <LmHandlerInit+0x80>)
 800d71a:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800d71c:	4b10      	ldr	r3, [pc, #64]	; (800d760 <LmHandlerInit+0x80>)
 800d71e:	4a11      	ldr	r2, [pc, #68]	; (800d764 <LmHandlerInit+0x84>)
 800d720:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800d722:	4b09      	ldr	r3, [pc, #36]	; (800d748 <LmHandlerInit+0x68>)
 800d724:	689a      	ldr	r2, [r3, #8]
 800d726:	4b0e      	ldr	r3, [pc, #56]	; (800d760 <LmHandlerInit+0x80>)
 800d728:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d72a:	4b0f      	ldr	r3, [pc, #60]	; (800d768 <LmHandlerInit+0x88>)
 800d72c:	0019      	movs	r1, r3
 800d72e:	2000      	movs	r0, #0
 800d730:	f000 fb76 	bl	800de20 <LmHandlerPackageRegister>
 800d734:	1e03      	subs	r3, r0, #0
 800d736:	d002      	beq.n	800d73e <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d738:	2301      	movs	r3, #1
 800d73a:	425b      	negs	r3, r3
 800d73c:	e000      	b.n	800d740 <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	0018      	movs	r0, r3
 800d742:	46bd      	mov	sp, r7
 800d744:	b002      	add	sp, #8
 800d746:	bd80      	pop	{r7, pc}
 800d748:	20000438 	.word	0x20000438
 800d74c:	20000458 	.word	0x20000458
 800d750:	0800df8d 	.word	0x0800df8d
 800d754:	0800dff9 	.word	0x0800dff9
 800d758:	0800e0e5 	.word	0x0800e0e5
 800d75c:	0800e18d 	.word	0x0800e18d
 800d760:	20000468 	.word	0x20000468
 800d764:	0800e92b 	.word	0x0800e92b
 800d768:	20000150 	.word	0x20000150

0800d76c <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800d76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d76e:	46ce      	mov	lr, r9
 800d770:	4647      	mov	r7, r8
 800d772:	b580      	push	{r7, lr}
 800d774:	b099      	sub	sp, #100	; 0x64
 800d776:	af08      	add	r7, sp, #32
 800d778:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d77a:	6879      	ldr	r1, [r7, #4]
 800d77c:	4b7b      	ldr	r3, [pc, #492]	; (800d96c <LmHandlerConfigure+0x200>)
 800d77e:	2206      	movs	r2, #6
 800d780:	0018      	movs	r0, r3
 800d782:	f00e fb99 	bl	801beb8 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800d786:	f7f5 ff2b 	bl	80035e0 <LoraInfo_GetPtr>
 800d78a:	0003      	movs	r3, r0
 800d78c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d78e:	4b77      	ldr	r3, [pc, #476]	; (800d96c <LmHandlerConfigure+0x200>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	001a      	movs	r2, r3
 800d794:	2301      	movs	r3, #1
 800d796:	4093      	lsls	r3, r2
 800d798:	001a      	movs	r2, r3
 800d79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	4013      	ands	r3, r2
 800d7a0:	d00b      	beq.n	800d7ba <LmHandlerConfigure+0x4e>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d7a2:	4b72      	ldr	r3, [pc, #456]	; (800d96c <LmHandlerConfigure+0x200>)
 800d7a4:	781a      	ldrb	r2, [r3, #0]
 800d7a6:	4972      	ldr	r1, [pc, #456]	; (800d970 <LmHandlerConfigure+0x204>)
 800d7a8:	4b72      	ldr	r3, [pc, #456]	; (800d974 <LmHandlerConfigure+0x208>)
 800d7aa:	0018      	movs	r0, r3
 800d7ac:	f005 f802 	bl	80127b4 <LoRaMacInitialization>
 800d7b0:	1e03      	subs	r3, r0, #0
 800d7b2:	d009      	beq.n	800d7c8 <LmHandlerConfigure+0x5c>
    {
      return LORAMAC_HANDLER_ERROR;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	425b      	negs	r3, r3
 800d7b8:	e0d1      	b.n	800d95e <LmHandlerConfigure+0x1f2>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d7ba:	4b6f      	ldr	r3, [pc, #444]	; (800d978 <LmHandlerConfigure+0x20c>)
 800d7bc:	2201      	movs	r2, #1
 800d7be:	2100      	movs	r1, #0
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	f00d fff9 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800d7c6:	e7fe      	b.n	800d7c6 <LmHandlerConfigure+0x5a>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800d7c8:	f001 f8bf 	bl	800e94a <NvmCtxMgmtRestore>
 800d7cc:	1e03      	subs	r3, r0, #0
 800d7ce:	d103      	bne.n	800d7d8 <LmHandlerConfigure+0x6c>
  {
    CtxRestoreDone = true;
 800d7d0:	4b6a      	ldr	r3, [pc, #424]	; (800d97c <LmHandlerConfigure+0x210>)
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	701a      	strb	r2, [r3, #0]
 800d7d6:	e021      	b.n	800d81c <LmHandlerConfigure+0xb0>
  }
  else
  {
    CtxRestoreDone = false;
 800d7d8:	4b68      	ldr	r3, [pc, #416]	; (800d97c <LmHandlerConfigure+0x210>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800d7de:	2418      	movs	r4, #24
 800d7e0:	193b      	adds	r3, r7, r4
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800d7e6:	193b      	adds	r3, r7, r4
 800d7e8:	0018      	movs	r0, r3
 800d7ea:	f005 fc45 	bl	8013078 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800d7ee:	193b      	adds	r3, r7, r4
 800d7f0:	6859      	ldr	r1, [r3, #4]
 800d7f2:	4b63      	ldr	r3, [pc, #396]	; (800d980 <LmHandlerConfigure+0x214>)
 800d7f4:	2208      	movs	r2, #8
 800d7f6:	0018      	movs	r0, r3
 800d7f8:	f00b fb6c 	bl	8018ed4 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d7fc:	0021      	movs	r1, r4
 800d7fe:	187b      	adds	r3, r7, r1
 800d800:	2203      	movs	r2, #3
 800d802:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800d804:	000c      	movs	r4, r1
 800d806:	187b      	adds	r3, r7, r1
 800d808:	0018      	movs	r0, r3
 800d80a:	f005 fc35 	bl	8013078 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800d80e:	193b      	adds	r3, r7, r4
 800d810:	6859      	ldr	r1, [r3, #4]
 800d812:	4b5c      	ldr	r3, [pc, #368]	; (800d984 <LmHandlerConfigure+0x218>)
 800d814:	2208      	movs	r2, #8
 800d816:	0018      	movs	r0, r3
 800d818:	f00b fb5c 	bl	8018ed4 <memcpy1>
  }
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800d81c:	4b58      	ldr	r3, [pc, #352]	; (800d980 <LmHandlerConfigure+0x214>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	001a      	movs	r2, r3
 800d822:	4b57      	ldr	r3, [pc, #348]	; (800d980 <LmHandlerConfigure+0x214>)
 800d824:	785b      	ldrb	r3, [r3, #1]
 800d826:	0019      	movs	r1, r3
 800d828:	4b55      	ldr	r3, [pc, #340]	; (800d980 <LmHandlerConfigure+0x214>)
 800d82a:	789b      	ldrb	r3, [r3, #2]
 800d82c:	0018      	movs	r0, r3
 800d82e:	4b54      	ldr	r3, [pc, #336]	; (800d980 <LmHandlerConfigure+0x214>)
 800d830:	78db      	ldrb	r3, [r3, #3]
 800d832:	001c      	movs	r4, r3
 800d834:	4b52      	ldr	r3, [pc, #328]	; (800d980 <LmHandlerConfigure+0x214>)
 800d836:	791b      	ldrb	r3, [r3, #4]
 800d838:	001d      	movs	r5, r3
 800d83a:	4b51      	ldr	r3, [pc, #324]	; (800d980 <LmHandlerConfigure+0x214>)
 800d83c:	795b      	ldrb	r3, [r3, #5]
 800d83e:	001e      	movs	r6, r3
 800d840:	4b4f      	ldr	r3, [pc, #316]	; (800d980 <LmHandlerConfigure+0x214>)
 800d842:	799b      	ldrb	r3, [r3, #6]
 800d844:	469c      	mov	ip, r3
 800d846:	4b4e      	ldr	r3, [pc, #312]	; (800d980 <LmHandlerConfigure+0x214>)
 800d848:	79db      	ldrb	r3, [r3, #7]
 800d84a:	4698      	mov	r8, r3
 800d84c:	4b4e      	ldr	r3, [pc, #312]	; (800d988 <LmHandlerConfigure+0x21c>)
 800d84e:	4699      	mov	r9, r3
 800d850:	4643      	mov	r3, r8
 800d852:	9307      	str	r3, [sp, #28]
 800d854:	4663      	mov	r3, ip
 800d856:	9306      	str	r3, [sp, #24]
 800d858:	9605      	str	r6, [sp, #20]
 800d85a:	9504      	str	r5, [sp, #16]
 800d85c:	9403      	str	r4, [sp, #12]
 800d85e:	9002      	str	r0, [sp, #8]
 800d860:	9101      	str	r1, [sp, #4]
 800d862:	9200      	str	r2, [sp, #0]
 800d864:	464b      	mov	r3, r9
 800d866:	2200      	movs	r2, #0
 800d868:	2100      	movs	r1, #0
 800d86a:	2002      	movs	r0, #2
 800d86c:	f00d ffa4 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
         HEX8(CommissioningParams.DevEui));
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800d870:	4b43      	ldr	r3, [pc, #268]	; (800d980 <LmHandlerConfigure+0x214>)
 800d872:	7a1b      	ldrb	r3, [r3, #8]
 800d874:	001a      	movs	r2, r3
 800d876:	4b42      	ldr	r3, [pc, #264]	; (800d980 <LmHandlerConfigure+0x214>)
 800d878:	7a5b      	ldrb	r3, [r3, #9]
 800d87a:	0019      	movs	r1, r3
 800d87c:	4b40      	ldr	r3, [pc, #256]	; (800d980 <LmHandlerConfigure+0x214>)
 800d87e:	7a9b      	ldrb	r3, [r3, #10]
 800d880:	0018      	movs	r0, r3
 800d882:	4b3f      	ldr	r3, [pc, #252]	; (800d980 <LmHandlerConfigure+0x214>)
 800d884:	7adb      	ldrb	r3, [r3, #11]
 800d886:	001c      	movs	r4, r3
 800d888:	4b3d      	ldr	r3, [pc, #244]	; (800d980 <LmHandlerConfigure+0x214>)
 800d88a:	7b1b      	ldrb	r3, [r3, #12]
 800d88c:	001d      	movs	r5, r3
 800d88e:	4b3c      	ldr	r3, [pc, #240]	; (800d980 <LmHandlerConfigure+0x214>)
 800d890:	7b5b      	ldrb	r3, [r3, #13]
 800d892:	001e      	movs	r6, r3
 800d894:	4b3a      	ldr	r3, [pc, #232]	; (800d980 <LmHandlerConfigure+0x214>)
 800d896:	7b9b      	ldrb	r3, [r3, #14]
 800d898:	469c      	mov	ip, r3
 800d89a:	4b39      	ldr	r3, [pc, #228]	; (800d980 <LmHandlerConfigure+0x214>)
 800d89c:	7bdb      	ldrb	r3, [r3, #15]
 800d89e:	4698      	mov	r8, r3
 800d8a0:	4b3a      	ldr	r3, [pc, #232]	; (800d98c <LmHandlerConfigure+0x220>)
 800d8a2:	4699      	mov	r9, r3
 800d8a4:	4643      	mov	r3, r8
 800d8a6:	9307      	str	r3, [sp, #28]
 800d8a8:	4663      	mov	r3, ip
 800d8aa:	9306      	str	r3, [sp, #24]
 800d8ac:	9605      	str	r6, [sp, #20]
 800d8ae:	9504      	str	r5, [sp, #16]
 800d8b0:	9403      	str	r4, [sp, #12]
 800d8b2:	9002      	str	r0, [sp, #8]
 800d8b4:	9101      	str	r1, [sp, #4]
 800d8b6:	9200      	str	r2, [sp, #0]
 800d8b8:	464b      	mov	r3, r9
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	2100      	movs	r1, #0
 800d8be:	2002      	movs	r0, #2
 800d8c0:	f00d ff7a 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800d8c4:	2118      	movs	r1, #24
 800d8c6:	187b      	adds	r3, r7, r1
 800d8c8:	220f      	movs	r2, #15
 800d8ca:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d8cc:	187b      	adds	r3, r7, r1
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d8d2:	000c      	movs	r4, r1
 800d8d4:	187b      	adds	r3, r7, r1
 800d8d6:	0018      	movs	r0, r3
 800d8d8:	f005 fd2c 	bl	8013334 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800d8dc:	0021      	movs	r1, r4
 800d8de:	187b      	adds	r3, r7, r1
 800d8e0:	2210      	movs	r2, #16
 800d8e2:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d8e4:	187b      	adds	r3, r7, r1
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d8ea:	000c      	movs	r4, r1
 800d8ec:	187b      	adds	r3, r7, r1
 800d8ee:	0018      	movs	r0, r3
 800d8f0:	f005 fd20 	bl	8013334 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800d8f4:	0021      	movs	r1, r4
 800d8f6:	187b      	adds	r3, r7, r1
 800d8f8:	2204      	movs	r2, #4
 800d8fa:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d8fc:	4b1b      	ldr	r3, [pc, #108]	; (800d96c <LmHandlerConfigure+0x200>)
 800d8fe:	789a      	ldrb	r2, [r3, #2]
 800d900:	187b      	adds	r3, r7, r1
 800d902:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d904:	000c      	movs	r4, r1
 800d906:	187b      	adds	r3, r7, r1
 800d908:	0018      	movs	r0, r3
 800d90a:	f005 fd13 	bl	8013334 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d90e:	0021      	movs	r1, r4
 800d910:	187b      	adds	r3, r7, r1
 800d912:	2222      	movs	r2, #34	; 0x22
 800d914:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800d916:	187b      	adds	r3, r7, r1
 800d918:	2214      	movs	r2, #20
 800d91a:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d91c:	187b      	adds	r3, r7, r1
 800d91e:	0018      	movs	r0, r3
 800d920:	f005 fd08 	bl	8013334 <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800d924:	2110      	movs	r1, #16
 800d926:	187b      	adds	r3, r7, r1
 800d928:	220f      	movs	r2, #15
 800d92a:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800d92c:	4b0f      	ldr	r3, [pc, #60]	; (800d96c <LmHandlerConfigure+0x200>)
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	187a      	adds	r2, r7, r1
 800d932:	0011      	movs	r1, r2
 800d934:	0018      	movs	r0, r3
 800d936:	f008 fe3e 	bl	80165b6 <RegionGetPhyParam>
 800d93a:	0003      	movs	r3, r0
 800d93c:	001a      	movs	r2, r3
 800d93e:	210c      	movs	r1, #12
 800d940:	187b      	adds	r3, r7, r1
 800d942:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d944:	187b      	adds	r3, r7, r1
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	1e5a      	subs	r2, r3, #1
 800d94a:	4193      	sbcs	r3, r2
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	4b07      	ldr	r3, [pc, #28]	; (800d96c <LmHandlerConfigure+0x200>)
 800d950:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800d952:	4b06      	ldr	r3, [pc, #24]	; (800d96c <LmHandlerConfigure+0x200>)
 800d954:	791b      	ldrb	r3, [r3, #4]
 800d956:	0018      	movs	r0, r3
 800d958:	f006 fb18 	bl	8013f8c <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	0018      	movs	r0, r3
 800d960:	46bd      	mov	sp, r7
 800d962:	b011      	add	sp, #68	; 0x44
 800d964:	bcc0      	pop	{r6, r7}
 800d966:	46b9      	mov	r9, r7
 800d968:	46b0      	mov	r8, r6
 800d96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d96c:	20000430 	.word	0x20000430
 800d970:	20000468 	.word	0x20000468
 800d974:	20000458 	.word	0x20000458
 800d978:	0801ed00 	.word	0x0801ed00
 800d97c:	20000582 	.word	0x20000582
 800d980:	20000138 	.word	0x20000138
 800d984:	20000140 	.word	0x20000140
 800d988:	0801ed4c 	.word	0x0801ed4c
 800d98c:	0801ed88 	.word	0x0801ed88

0800d990 <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800d996:	f004 fec7 	bl	8012728 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800d99a:	1dfb      	adds	r3, r7, #7
 800d99c:	2200      	movs	r2, #0
 800d99e:	701a      	strb	r2, [r3, #0]
 800d9a0:	e027      	b.n	800d9f2 <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800d9a2:	1dfb      	adds	r3, r7, #7
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	569a      	ldrsb	r2, [r3, r2]
 800d9a8:	4b17      	ldr	r3, [pc, #92]	; (800da08 <LmHandlerProcess+0x78>)
 800d9aa:	0092      	lsls	r2, r2, #2
 800d9ac:	58d3      	ldr	r3, [r2, r3]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d017      	beq.n	800d9e2 <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800d9b2:	1dfb      	adds	r3, r7, #7
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	569a      	ldrsb	r2, [r3, r2]
 800d9b8:	4b13      	ldr	r3, [pc, #76]	; (800da08 <LmHandlerProcess+0x78>)
 800d9ba:	0092      	lsls	r2, r2, #2
 800d9bc:	58d3      	ldr	r3, [r2, r3]
 800d9be:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00e      	beq.n	800d9e2 <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800d9c4:	1dfb      	adds	r3, r7, #7
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	0018      	movs	r0, r3
 800d9ca:	f000 fbf1 	bl	800e1b0 <LmHandlerPackageIsInitialized>
 800d9ce:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800d9d0:	d007      	beq.n	800d9e2 <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800d9d2:	1dfb      	adds	r3, r7, #7
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	569a      	ldrsb	r2, [r3, r2]
 800d9d8:	4b0b      	ldr	r3, [pc, #44]	; (800da08 <LmHandlerProcess+0x78>)
 800d9da:	0092      	lsls	r2, r2, #2
 800d9dc:	58d3      	ldr	r3, [r2, r3]
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800d9e2:	1dfb      	adds	r3, r7, #7
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	b25b      	sxtb	r3, r3
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	b2da      	uxtb	r2, r3
 800d9ee:	1dfb      	adds	r3, r7, #7
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	1dfb      	adds	r3, r7, #7
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	b25b      	sxtb	r3, r3
 800d9f8:	2b04      	cmp	r3, #4
 800d9fa:	ddd2      	ble.n	800d9a2 <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800d9fc:	f000 ff9f 	bl	800e93e <NvmCtxMgmtStore>
}
 800da00:	46c0      	nop			; (mov r8, r8)
 800da02:	46bd      	mov	sp, r7
 800da04:	b002      	add	sp, #8
 800da06:	bd80      	pop	{r7, pc}
 800da08:	2000041c 	.word	0x2000041c

0800da0c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800da0c:	b5b0      	push	{r4, r5, r7, lr}
 800da0e:	b08a      	sub	sp, #40	; 0x28
 800da10:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800da12:	003b      	movs	r3, r7
 800da14:	2201      	movs	r2, #1
 800da16:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800da18:	2527      	movs	r5, #39	; 0x27
 800da1a:	197c      	adds	r4, r7, r5
 800da1c:	003b      	movs	r3, r7
 800da1e:	0018      	movs	r0, r3
 800da20:	f005 fb2a 	bl	8013078 <LoRaMacMibGetRequestConfirm>
 800da24:	0003      	movs	r3, r0
 800da26:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800da28:	197b      	adds	r3, r7, r5
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d107      	bne.n	800da40 <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800da30:	003b      	movs	r3, r7
 800da32:	791b      	ldrb	r3, [r3, #4]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800da38:	2300      	movs	r3, #0
 800da3a:	e002      	b.n	800da42 <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800da3c:	2301      	movs	r3, #1
 800da3e:	e000      	b.n	800da42 <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800da40:	2300      	movs	r3, #0
  }
}
 800da42:	0018      	movs	r0, r3
 800da44:	46bd      	mov	sp, r7
 800da46:	b00a      	add	sp, #40	; 0x28
 800da48:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800da4c <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800da4c:	b590      	push	{r4, r7, lr}
 800da4e:	b093      	sub	sp, #76	; 0x4c
 800da50:	af02      	add	r7, sp, #8
 800da52:	0002      	movs	r2, r0
 800da54:	1dfb      	adds	r3, r7, #7
 800da56:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800da58:	1dfb      	adds	r3, r7, #7
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d113      	bne.n	800da88 <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800da60:	4b37      	ldr	r3, [pc, #220]	; (800db40 <LmHandlerJoin+0xf4>)
 800da62:	2202      	movs	r2, #2
 800da64:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800da66:	f005 fa4d 	bl	8012f04 <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800da6a:	2108      	movs	r1, #8
 800da6c:	187b      	adds	r3, r7, r1
 800da6e:	2201      	movs	r2, #1
 800da70:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800da72:	4b34      	ldr	r3, [pc, #208]	; (800db44 <LmHandlerJoin+0xf8>)
 800da74:	78db      	ldrb	r3, [r3, #3]
 800da76:	b25b      	sxtb	r3, r3
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	187b      	adds	r3, r7, r1
 800da7c:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800da7e:	187b      	adds	r3, r7, r1
 800da80:	0018      	movs	r0, r3
 800da82:	f005 ffdd 	bl	8013a40 <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800da86:	e057      	b.n	800db38 <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800da88:	4b2d      	ldr	r3, [pc, #180]	; (800db40 <LmHandlerJoin+0xf4>)
 800da8a:	2201      	movs	r2, #1
 800da8c:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800da8e:	4b2c      	ldr	r3, [pc, #176]	; (800db40 <LmHandlerJoin+0xf4>)
 800da90:	2200      	movs	r2, #0
 800da92:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800da94:	4b2c      	ldr	r3, [pc, #176]	; (800db48 <LmHandlerJoin+0xfc>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2201      	movs	r2, #1
 800da9a:	4053      	eors	r3, r2
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d033      	beq.n	800db0a <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800daa2:	211c      	movs	r1, #28
 800daa4:	187b      	adds	r3, r7, r1
 800daa6:	2227      	movs	r2, #39	; 0x27
 800daa8:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800daaa:	187b      	adds	r3, r7, r1
 800daac:	4a27      	ldr	r2, [pc, #156]	; (800db4c <LmHandlerJoin+0x100>)
 800daae:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800dab0:	000c      	movs	r4, r1
 800dab2:	187b      	adds	r3, r7, r1
 800dab4:	0018      	movs	r0, r3
 800dab6:	f005 fc3d 	bl	8013334 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800daba:	0021      	movs	r1, r4
 800dabc:	187b      	adds	r3, r7, r1
 800dabe:	2205      	movs	r2, #5
 800dac0:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800dac2:	4b23      	ldr	r3, [pc, #140]	; (800db50 <LmHandlerJoin+0x104>)
 800dac4:	691a      	ldr	r2, [r3, #16]
 800dac6:	187b      	adds	r3, r7, r1
 800dac8:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800daca:	000c      	movs	r4, r1
 800dacc:	187b      	adds	r3, r7, r1
 800dace:	0018      	movs	r0, r3
 800dad0:	f005 fc30 	bl	8013334 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800dad4:	f7f6 ff16 	bl	8004904 <GetDevAddr>
 800dad8:	0002      	movs	r2, r0
 800dada:	4b1d      	ldr	r3, [pc, #116]	; (800db50 <LmHandlerJoin+0x104>)
 800dadc:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800dade:	0021      	movs	r1, r4
 800dae0:	187b      	adds	r3, r7, r1
 800dae2:	2206      	movs	r2, #6
 800dae4:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800dae6:	4b1a      	ldr	r3, [pc, #104]	; (800db50 <LmHandlerJoin+0x104>)
 800dae8:	695a      	ldr	r2, [r3, #20]
 800daea:	187b      	adds	r3, r7, r1
 800daec:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800daee:	187b      	adds	r3, r7, r1
 800daf0:	0018      	movs	r0, r3
 800daf2:	f005 fc1f 	bl	8013334 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800daf6:	4b16      	ldr	r3, [pc, #88]	; (800db50 <LmHandlerJoin+0x104>)
 800daf8:	695b      	ldr	r3, [r3, #20]
 800dafa:	4a16      	ldr	r2, [pc, #88]	; (800db54 <LmHandlerJoin+0x108>)
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	0013      	movs	r3, r2
 800db00:	2200      	movs	r2, #0
 800db02:	2100      	movs	r1, #0
 800db04:	2002      	movs	r0, #2
 800db06:	f00d fe57 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800db0a:	f005 f9fb 	bl	8012f04 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800db0e:	211c      	movs	r1, #28
 800db10:	187b      	adds	r3, r7, r1
 800db12:	2201      	movs	r2, #1
 800db14:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800db16:	187b      	adds	r3, r7, r1
 800db18:	2201      	movs	r2, #1
 800db1a:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800db1c:	187b      	adds	r3, r7, r1
 800db1e:	0018      	movs	r0, r3
 800db20:	f005 fc08 	bl	8013334 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800db24:	4b0c      	ldr	r3, [pc, #48]	; (800db58 <LmHandlerJoin+0x10c>)
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	4a05      	ldr	r2, [pc, #20]	; (800db40 <LmHandlerJoin+0xf4>)
 800db2a:	0010      	movs	r0, r2
 800db2c:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800db2e:	4b05      	ldr	r3, [pc, #20]	; (800db44 <LmHandlerJoin+0xf8>)
 800db30:	785b      	ldrb	r3, [r3, #1]
 800db32:	0018      	movs	r0, r3
 800db34:	f000 f8e4 	bl	800dd00 <LmHandlerRequestClass>
}
 800db38:	46c0      	nop			; (mov r8, r8)
 800db3a:	46bd      	mov	sp, r7
 800db3c:	b011      	add	sp, #68	; 0x44
 800db3e:	bd90      	pop	{r4, r7, pc}
 800db40:	2000015c 	.word	0x2000015c
 800db44:	20000430 	.word	0x20000430
 800db48:	20000582 	.word	0x20000582
 800db4c:	01000300 	.word	0x01000300
 800db50:	20000138 	.word	0x20000138
 800db54:	0801edc4 	.word	0x0801edc4
 800db58:	20000438 	.word	0x20000438

0800db5c <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800db5c:	b5b0      	push	{r4, r5, r7, lr}
 800db5e:	b08c      	sub	sp, #48	; 0x30
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	0008      	movs	r0, r1
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	0019      	movs	r1, r3
 800db6a:	230b      	movs	r3, #11
 800db6c:	18fb      	adds	r3, r7, r3
 800db6e:	1c02      	adds	r2, r0, #0
 800db70:	701a      	strb	r2, [r3, #0]
 800db72:	230a      	movs	r3, #10
 800db74:	18fb      	adds	r3, r7, r3
 800db76:	1c0a      	adds	r2, r1, #0
 800db78:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800db7a:	232f      	movs	r3, #47	; 0x2f
 800db7c:	18fb      	adds	r3, r7, r3
 800db7e:	22ff      	movs	r2, #255	; 0xff
 800db80:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800db82:	f004 fdb9 	bl	80126f8 <LoRaMacIsBusy>
 800db86:	1e03      	subs	r3, r0, #0
 800db88:	d002      	beq.n	800db90 <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800db8a:	2302      	movs	r3, #2
 800db8c:	425b      	negs	r3, r3
 800db8e:	e0a9      	b.n	800dce4 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800db90:	f7ff ff3c 	bl	800da0c <LmHandlerJoinStatus>
 800db94:	0003      	movs	r3, r0
 800db96:	2b01      	cmp	r3, #1
 800db98:	d007      	beq.n	800dbaa <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800db9a:	4b54      	ldr	r3, [pc, #336]	; (800dcec <LmHandlerSend+0x190>)
 800db9c:	789b      	ldrb	r3, [r3, #2]
 800db9e:	0018      	movs	r0, r3
 800dba0:	f7ff ff54 	bl	800da4c <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dba4:	2303      	movs	r3, #3
 800dba6:	425b      	negs	r3, r3
 800dba8:	e09c      	b.n	800dce4 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800dbaa:	4b51      	ldr	r3, [pc, #324]	; (800dcf0 <LmHandlerSend+0x194>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	4798      	blx	r3
 800dbb2:	1e03      	subs	r3, r0, #0
 800dbb4:	d00d      	beq.n	800dbd2 <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	781a      	ldrb	r2, [r3, #0]
 800dbba:	4b4d      	ldr	r3, [pc, #308]	; (800dcf0 <LmHandlerSend+0x194>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d006      	beq.n	800dbd2 <LmHandlerSend+0x76>
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800dbcc:	2304      	movs	r3, #4
 800dbce:	425b      	negs	r3, r3
 800dbd0:	e088      	b.n	800dce4 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800dbd2:	4b48      	ldr	r3, [pc, #288]	; (800dcf4 <LmHandlerSend+0x198>)
 800dbd4:	2203      	movs	r2, #3
 800dbd6:	569a      	ldrsb	r2, [r3, r2]
 800dbd8:	2418      	movs	r4, #24
 800dbda:	193b      	adds	r3, r7, r4
 800dbdc:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	2214      	movs	r2, #20
 800dbe4:	18ba      	adds	r2, r7, r2
 800dbe6:	0011      	movs	r1, r2
 800dbe8:	0018      	movs	r0, r3
 800dbea:	f005 f999 	bl	8012f20 <LoRaMacQueryTxPossible>
 800dbee:	1e03      	subs	r3, r0, #0
 800dbf0:	d00c      	beq.n	800dc0c <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800dbf2:	4b41      	ldr	r3, [pc, #260]	; (800dcf8 <LmHandlerSend+0x19c>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800dbf8:	193b      	adds	r3, r7, r4
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800dbfe:	193b      	adds	r3, r7, r4
 800dc00:	2200      	movs	r2, #0
 800dc02:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800dc04:	193b      	adds	r3, r7, r4
 800dc06:	2200      	movs	r2, #0
 800dc08:	819a      	strh	r2, [r3, #12]
 800dc0a:	e021      	b.n	800dc50 <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800dc0c:	4b3a      	ldr	r3, [pc, #232]	; (800dcf8 <LmHandlerSend+0x19c>)
 800dc0e:	200b      	movs	r0, #11
 800dc10:	183a      	adds	r2, r7, r0
 800dc12:	7812      	ldrb	r2, [r2, #0]
 800dc14:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	781a      	ldrb	r2, [r3, #0]
 800dc1a:	2118      	movs	r1, #24
 800dc1c:	187b      	adds	r3, r7, r1
 800dc1e:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	785b      	ldrb	r3, [r3, #1]
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	187b      	adds	r3, r7, r1
 800dc28:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	187b      	adds	r3, r7, r1
 800dc30:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800dc32:	183b      	adds	r3, r7, r0
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d103      	bne.n	800dc42 <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800dc3a:	187b      	adds	r3, r7, r1
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
 800dc40:	e006      	b.n	800dc50 <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800dc42:	2118      	movs	r1, #24
 800dc44:	187b      	adds	r3, r7, r1
 800dc46:	2201      	movs	r2, #1
 800dc48:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800dc4a:	187b      	adds	r3, r7, r1
 800dc4c:	2208      	movs	r2, #8
 800dc4e:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800dc50:	4b29      	ldr	r3, [pc, #164]	; (800dcf8 <LmHandlerSend+0x19c>)
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	330c      	adds	r3, #12
 800dc56:	ca03      	ldmia	r2!, {r0, r1}
 800dc58:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800dc5a:	4b26      	ldr	r3, [pc, #152]	; (800dcf4 <LmHandlerSend+0x198>)
 800dc5c:	2203      	movs	r2, #3
 800dc5e:	569a      	ldrsb	r2, [r3, r2]
 800dc60:	4b25      	ldr	r3, [pc, #148]	; (800dcf8 <LmHandlerSend+0x19c>)
 800dc62:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800dc64:	232e      	movs	r3, #46	; 0x2e
 800dc66:	18fc      	adds	r4, r7, r3
 800dc68:	230a      	movs	r3, #10
 800dc6a:	18fb      	adds	r3, r7, r3
 800dc6c:	781a      	ldrb	r2, [r3, #0]
 800dc6e:	2518      	movs	r5, #24
 800dc70:	197b      	adds	r3, r7, r5
 800dc72:	0011      	movs	r1, r2
 800dc74:	0018      	movs	r0, r3
 800dc76:	f006 f83b 	bl	8013cf0 <LoRaMacMcpsRequest>
 800dc7a:	0003      	movs	r3, r0
 800dc7c:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d003      	beq.n	800dc8c <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800dc84:	197b      	adds	r3, r7, r5
 800dc86:	691a      	ldr	r2, [r3, #16]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800dc8c:	232e      	movs	r3, #46	; 0x2e
 800dc8e:	18fb      	adds	r3, r7, r3
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2b11      	cmp	r3, #17
 800dc94:	d81d      	bhi.n	800dcd2 <LmHandlerSend+0x176>
 800dc96:	009a      	lsls	r2, r3, #2
 800dc98:	4b18      	ldr	r3, [pc, #96]	; (800dcfc <LmHandlerSend+0x1a0>)
 800dc9a:	18d3      	adds	r3, r2, r3
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800dca0:	232f      	movs	r3, #47	; 0x2f
 800dca2:	18fb      	adds	r3, r7, r3
 800dca4:	2200      	movs	r2, #0
 800dca6:	701a      	strb	r2, [r3, #0]
    break;
 800dca8:	e018      	b.n	800dcdc <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800dcaa:	232f      	movs	r3, #47	; 0x2f
 800dcac:	18fb      	adds	r3, r7, r3
 800dcae:	22fe      	movs	r2, #254	; 0xfe
 800dcb0:	701a      	strb	r2, [r3, #0]
    break;
 800dcb2:	e013      	b.n	800dcdc <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dcb4:	232f      	movs	r3, #47	; 0x2f
 800dcb6:	18fb      	adds	r3, r7, r3
 800dcb8:	22fd      	movs	r2, #253	; 0xfd
 800dcba:	701a      	strb	r2, [r3, #0]
    break;
 800dcbc:	e00e      	b.n	800dcdc <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800dcbe:	232f      	movs	r3, #47	; 0x2f
 800dcc0:	18fb      	adds	r3, r7, r3
 800dcc2:	22fb      	movs	r2, #251	; 0xfb
 800dcc4:	701a      	strb	r2, [r3, #0]
    break;
 800dcc6:	e009      	b.n	800dcdc <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800dcc8:	232f      	movs	r3, #47	; 0x2f
 800dcca:	18fb      	adds	r3, r7, r3
 800dccc:	22fa      	movs	r2, #250	; 0xfa
 800dcce:	701a      	strb	r2, [r3, #0]
    break;
 800dcd0:	e004      	b.n	800dcdc <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800dcd2:	232f      	movs	r3, #47	; 0x2f
 800dcd4:	18fb      	adds	r3, r7, r3
 800dcd6:	22ff      	movs	r2, #255	; 0xff
 800dcd8:	701a      	strb	r2, [r3, #0]
    break;
 800dcda:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800dcdc:	232f      	movs	r3, #47	; 0x2f
 800dcde:	18fb      	adds	r3, r7, r3
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	b25b      	sxtb	r3, r3
}
 800dce4:	0018      	movs	r0, r3
 800dce6:	46bd      	mov	sp, r7
 800dce8:	b00c      	add	sp, #48	; 0x30
 800dcea:	bdb0      	pop	{r4, r5, r7, pc}
 800dcec:	2000015c 	.word	0x2000015c
 800dcf0:	2000041c 	.word	0x2000041c
 800dcf4:	20000430 	.word	0x20000430
 800dcf8:	20000478 	.word	0x20000478
 800dcfc:	0801ede0 	.word	0x0801ede0

0800dd00 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b08c      	sub	sp, #48	; 0x30
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	0002      	movs	r2, r0
 800dd08:	1dfb      	adds	r3, r7, #7
 800dd0a:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800dd0c:	232f      	movs	r3, #47	; 0x2f
 800dd0e:	18fb      	adds	r3, r7, r3
 800dd10:	2200      	movs	r2, #0
 800dd12:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800dd14:	f7ff fe7a 	bl	800da0c <LmHandlerJoinStatus>
 800dd18:	0003      	movs	r3, r0
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d002      	beq.n	800dd24 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dd1e:	2303      	movs	r3, #3
 800dd20:	425b      	negs	r3, r3
 800dd22:	e077      	b.n	800de14 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800dd24:	2108      	movs	r1, #8
 800dd26:	187b      	adds	r3, r7, r1
 800dd28:	2200      	movs	r2, #0
 800dd2a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800dd2c:	187b      	adds	r3, r7, r1
 800dd2e:	0018      	movs	r0, r3
 800dd30:	f005 f9a2 	bl	8013078 <LoRaMacMibGetRequestConfirm>
 800dd34:	1e03      	subs	r3, r0, #0
 800dd36:	d002      	beq.n	800dd3e <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	425b      	negs	r3, r3
 800dd3c:	e06a      	b.n	800de14 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800dd3e:	212e      	movs	r1, #46	; 0x2e
 800dd40:	187b      	adds	r3, r7, r1
 800dd42:	2208      	movs	r2, #8
 800dd44:	18ba      	adds	r2, r7, r2
 800dd46:	7912      	ldrb	r2, [r2, #4]
 800dd48:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800dd4a:	187a      	adds	r2, r7, r1
 800dd4c:	1dfb      	adds	r3, r7, #7
 800dd4e:	7812      	ldrb	r2, [r2, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d053      	beq.n	800ddfe <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800dd56:	1dfb      	adds	r3, r7, #7
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	2b02      	cmp	r3, #2
 800dd5c:	d02a      	beq.n	800ddb4 <LmHandlerRequestClass+0xb4>
 800dd5e:	dc50      	bgt.n	800de02 <LmHandlerRequestClass+0x102>
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <LmHandlerRequestClass+0x6a>
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d020      	beq.n	800ddaa <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800dd68:	e04b      	b.n	800de02 <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800dd6a:	232e      	movs	r3, #46	; 0x2e
 800dd6c:	18fb      	adds	r3, r7, r3
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d048      	beq.n	800de06 <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800dd74:	2108      	movs	r1, #8
 800dd76:	187b      	adds	r3, r7, r1
 800dd78:	2200      	movs	r2, #0
 800dd7a:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800dd7c:	187b      	adds	r3, r7, r1
 800dd7e:	0018      	movs	r0, r3
 800dd80:	f005 fad8 	bl	8013334 <LoRaMacMibSetRequestConfirm>
 800dd84:	1e03      	subs	r3, r0, #0
 800dd86:	d10b      	bne.n	800dda0 <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800dd88:	2000      	movs	r0, #0
 800dd8a:	f000 fac9 	bl	800e320 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800dd8e:	4b23      	ldr	r3, [pc, #140]	; (800de1c <LmHandlerRequestClass+0x11c>)
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d037      	beq.n	800de06 <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800dd96:	4b21      	ldr	r3, [pc, #132]	; (800de1c <LmHandlerRequestClass+0x11c>)
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	4798      	blx	r3
      break;
 800dd9e:	e032      	b.n	800de06 <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800dda0:	232f      	movs	r3, #47	; 0x2f
 800dda2:	18fb      	adds	r3, r7, r3
 800dda4:	22ff      	movs	r2, #255	; 0xff
 800dda6:	701a      	strb	r2, [r3, #0]
      break;
 800dda8:	e02d      	b.n	800de06 <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800ddaa:	232f      	movs	r3, #47	; 0x2f
 800ddac:	18fb      	adds	r3, r7, r3
 800ddae:	22ff      	movs	r2, #255	; 0xff
 800ddb0:	701a      	strb	r2, [r3, #0]
      break;
 800ddb2:	e02b      	b.n	800de0c <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800ddb4:	232e      	movs	r3, #46	; 0x2e
 800ddb6:	18fb      	adds	r3, r7, r3
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d004      	beq.n	800ddc8 <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800ddbe:	232f      	movs	r3, #47	; 0x2f
 800ddc0:	18fb      	adds	r3, r7, r3
 800ddc2:	22ff      	movs	r2, #255	; 0xff
 800ddc4:	701a      	strb	r2, [r3, #0]
      break;
 800ddc6:	e020      	b.n	800de0a <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800ddc8:	2108      	movs	r1, #8
 800ddca:	187b      	adds	r3, r7, r1
 800ddcc:	2202      	movs	r2, #2
 800ddce:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800ddd0:	187b      	adds	r3, r7, r1
 800ddd2:	0018      	movs	r0, r3
 800ddd4:	f005 faae 	bl	8013334 <LoRaMacMibSetRequestConfirm>
 800ddd8:	1e03      	subs	r3, r0, #0
 800ddda:	d10b      	bne.n	800ddf4 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800dddc:	2002      	movs	r0, #2
 800ddde:	f000 fa9f 	bl	800e320 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800dde2:	4b0e      	ldr	r3, [pc, #56]	; (800de1c <LmHandlerRequestClass+0x11c>)
 800dde4:	699b      	ldr	r3, [r3, #24]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00f      	beq.n	800de0a <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800ddea:	4b0c      	ldr	r3, [pc, #48]	; (800de1c <LmHandlerRequestClass+0x11c>)
 800ddec:	699b      	ldr	r3, [r3, #24]
 800ddee:	2002      	movs	r0, #2
 800ddf0:	4798      	blx	r3
      break;
 800ddf2:	e00a      	b.n	800de0a <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800ddf4:	232f      	movs	r3, #47	; 0x2f
 800ddf6:	18fb      	adds	r3, r7, r3
 800ddf8:	22ff      	movs	r2, #255	; 0xff
 800ddfa:	701a      	strb	r2, [r3, #0]
      break;
 800ddfc:	e005      	b.n	800de0a <LmHandlerRequestClass+0x10a>
    }
  }
 800ddfe:	46c0      	nop			; (mov r8, r8)
 800de00:	e004      	b.n	800de0c <LmHandlerRequestClass+0x10c>
        break;
 800de02:	46c0      	nop			; (mov r8, r8)
 800de04:	e002      	b.n	800de0c <LmHandlerRequestClass+0x10c>
      break;
 800de06:	46c0      	nop			; (mov r8, r8)
 800de08:	e000      	b.n	800de0c <LmHandlerRequestClass+0x10c>
      break;
 800de0a:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800de0c:	232f      	movs	r3, #47	; 0x2f
 800de0e:	18fb      	adds	r3, r7, r3
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	b25b      	sxtb	r3, r3
}
 800de14:	0018      	movs	r0, r3
 800de16:	46bd      	mov	sp, r7
 800de18:	b00c      	add	sp, #48	; 0x30
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	20000438 	.word	0x20000438

0800de20 <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800de20:	b590      	push	{r4, r7, lr}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	0002      	movs	r2, r0
 800de28:	6039      	str	r1, [r7, #0]
 800de2a:	1dfb      	adds	r3, r7, #7
 800de2c:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]
  switch (id)
 800de32:	1dfb      	adds	r3, r7, #7
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d104      	bne.n	800de44 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800de3a:	f000 fa8b 	bl	800e354 <LmphCompliancePackageFactory>
 800de3e:	0003      	movs	r3, r0
 800de40:	60fb      	str	r3, [r7, #12]
      break;
 800de42:	e000      	b.n	800de46 <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800de44:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d028      	beq.n	800de9e <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800de4c:	1dfb      	adds	r3, r7, #7
 800de4e:	781a      	ldrb	r2, [r3, #0]
 800de50:	4b16      	ldr	r3, [pc, #88]	; (800deac <LmHandlerPackageRegister+0x8c>)
 800de52:	0092      	lsls	r2, r2, #2
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800de58:	1dfb      	adds	r3, r7, #7
 800de5a:	781a      	ldrb	r2, [r3, #0]
 800de5c:	4b13      	ldr	r3, [pc, #76]	; (800deac <LmHandlerPackageRegister+0x8c>)
 800de5e:	0092      	lsls	r2, r2, #2
 800de60:	58d3      	ldr	r3, [r2, r3]
 800de62:	4a13      	ldr	r2, [pc, #76]	; (800deb0 <LmHandlerPackageRegister+0x90>)
 800de64:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800de66:	1dfb      	adds	r3, r7, #7
 800de68:	781a      	ldrb	r2, [r3, #0]
 800de6a:	4b10      	ldr	r3, [pc, #64]	; (800deac <LmHandlerPackageRegister+0x8c>)
 800de6c:	0092      	lsls	r2, r2, #2
 800de6e:	58d3      	ldr	r3, [r2, r3]
 800de70:	4a10      	ldr	r2, [pc, #64]	; (800deb4 <LmHandlerPackageRegister+0x94>)
 800de72:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800de74:	1dfb      	adds	r3, r7, #7
 800de76:	781a      	ldrb	r2, [r3, #0]
 800de78:	4b0c      	ldr	r3, [pc, #48]	; (800deac <LmHandlerPackageRegister+0x8c>)
 800de7a:	0092      	lsls	r2, r2, #2
 800de7c:	58d3      	ldr	r3, [r2, r3]
 800de7e:	4a0e      	ldr	r2, [pc, #56]	; (800deb8 <LmHandlerPackageRegister+0x98>)
 800de80:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800de82:	1dfb      	adds	r3, r7, #7
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	4b09      	ldr	r3, [pc, #36]	; (800deac <LmHandlerPackageRegister+0x8c>)
 800de88:	0092      	lsls	r2, r2, #2
 800de8a:	58d3      	ldr	r3, [r2, r3]
 800de8c:	685c      	ldr	r4, [r3, #4]
 800de8e:	4b0b      	ldr	r3, [pc, #44]	; (800debc <LmHandlerPackageRegister+0x9c>)
 800de90:	6859      	ldr	r1, [r3, #4]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	22f2      	movs	r2, #242	; 0xf2
 800de96:	0018      	movs	r0, r3
 800de98:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800de9a:	2300      	movs	r3, #0
 800de9c:	e001      	b.n	800dea2 <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800de9e:	2301      	movs	r3, #1
 800dea0:	425b      	negs	r3, r3
  }
}
 800dea2:	0018      	movs	r0, r3
 800dea4:	46bd      	mov	sp, r7
 800dea6:	b005      	add	sp, #20
 800dea8:	bd90      	pop	{r4, r7, pc}
 800deaa:	46c0      	nop			; (mov r8, r8)
 800deac:	2000041c 	.word	0x2000041c
 800deb0:	0800da4d 	.word	0x0800da4d
 800deb4:	0800db5d 	.word	0x0800db5d
 800deb8:	0800df59 	.word	0x0800df59
 800debc:	20000170 	.word	0x20000170

0800dec0 <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08c      	sub	sp, #48	; 0x30
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d102      	bne.n	800ded4 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800dece:	2301      	movs	r3, #1
 800ded0:	425b      	negs	r3, r3
 800ded2:	e012      	b.n	800defa <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800ded4:	210c      	movs	r1, #12
 800ded6:	187b      	adds	r3, r7, r1
 800ded8:	2200      	movs	r2, #0
 800deda:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800dedc:	187b      	adds	r3, r7, r1
 800dede:	0018      	movs	r0, r3
 800dee0:	f005 f8ca 	bl	8013078 <LoRaMacMibGetRequestConfirm>
 800dee4:	1e03      	subs	r3, r0, #0
 800dee6:	d002      	beq.n	800deee <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	425b      	negs	r3, r3
 800deec:	e005      	b.n	800defa <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800deee:	230c      	movs	r3, #12
 800def0:	18fb      	adds	r3, r7, r3
 800def2:	791a      	ldrb	r2, [r3, #4]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800def8:	2300      	movs	r3, #0
}
 800defa:	0018      	movs	r0, r3
 800defc:	46bd      	mov	sp, r7
 800defe:	b00c      	add	sp, #48	; 0x30
 800df00:	bd80      	pop	{r7, pc}
	...

0800df04 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08c      	sub	sp, #48	; 0x30
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d102      	bne.n	800df18 <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800df12:	2301      	movs	r3, #1
 800df14:	425b      	negs	r3, r3
 800df16:	e018      	b.n	800df4a <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800df18:	210c      	movs	r1, #12
 800df1a:	187b      	adds	r3, r7, r1
 800df1c:	221f      	movs	r2, #31
 800df1e:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800df20:	187b      	adds	r3, r7, r1
 800df22:	0018      	movs	r0, r3
 800df24:	f005 f8a8 	bl	8013078 <LoRaMacMibGetRequestConfirm>
 800df28:	1e03      	subs	r3, r0, #0
 800df2a:	d002      	beq.n	800df32 <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	425b      	negs	r3, r3
 800df30:	e00b      	b.n	800df4a <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800df32:	210c      	movs	r1, #12
 800df34:	187b      	adds	r3, r7, r1
 800df36:	2204      	movs	r2, #4
 800df38:	569a      	ldrsb	r2, [r3, r2]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800df3e:	187b      	adds	r3, r7, r1
 800df40:	2204      	movs	r2, #4
 800df42:	569a      	ldrsb	r2, [r3, r2]
 800df44:	4b03      	ldr	r3, [pc, #12]	; (800df54 <LmHandlerGetTxDatarate+0x50>)
 800df46:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800df48:	2300      	movs	r3, #0
}
 800df4a:	0018      	movs	r0, r3
 800df4c:	46bd      	mov	sp, r7
 800df4e:	b00c      	add	sp, #48	; 0x30
 800df50:	bd80      	pop	{r7, pc}
 800df52:	46c0      	nop			; (mov r8, r8)
 800df54:	20000430 	.word	0x20000430

0800df58 <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800df58:	b5b0      	push	{r4, r5, r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800df5e:	003b      	movs	r3, r7
 800df60:	220a      	movs	r2, #10
 800df62:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800df64:	2517      	movs	r5, #23
 800df66:	197c      	adds	r4, r7, r5
 800df68:	003b      	movs	r3, r7
 800df6a:	0018      	movs	r0, r3
 800df6c:	f005 fd68 	bl	8013a40 <LoRaMacMlmeRequest>
 800df70:	0003      	movs	r3, r0
 800df72:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800df74:	197b      	adds	r3, r7, r5
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d101      	bne.n	800df80 <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800df7c:	2300      	movs	r3, #0
 800df7e:	e001      	b.n	800df84 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	425b      	negs	r3, r3
  }
}
 800df84:	0018      	movs	r0, r3
 800df86:	46bd      	mov	sp, r7
 800df88:	b006      	add	sp, #24
 800df8a:	bdb0      	pop	{r4, r5, r7, pc}

0800df8c <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1;
 800df94:	4b16      	ldr	r3, [pc, #88]	; (800dff0 <McpsConfirm+0x64>)
 800df96:	2201      	movs	r2, #1
 800df98:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	785a      	ldrb	r2, [r3, #1]
 800df9e:	4b14      	ldr	r3, [pc, #80]	; (800dff0 <McpsConfirm+0x64>)
 800dfa0:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	789b      	ldrb	r3, [r3, #2]
 800dfa6:	b25a      	sxtb	r2, r3
 800dfa8:	4b11      	ldr	r3, [pc, #68]	; (800dff0 <McpsConfirm+0x64>)
 800dfaa:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	68da      	ldr	r2, [r3, #12]
 800dfb0:	4b0f      	ldr	r3, [pc, #60]	; (800dff0 <McpsConfirm+0x64>)
 800dfb2:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2203      	movs	r2, #3
 800dfb8:	569a      	ldrsb	r2, [r3, r2]
 800dfba:	4b0d      	ldr	r3, [pc, #52]	; (800dff0 <McpsConfirm+0x64>)
 800dfbc:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	4b0a      	ldr	r3, [pc, #40]	; (800dff0 <McpsConfirm+0x64>)
 800dfc6:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	791b      	ldrb	r3, [r3, #4]
 800dfcc:	001a      	movs	r2, r3
 800dfce:	4b08      	ldr	r3, [pc, #32]	; (800dff0 <McpsConfirm+0x64>)
 800dfd0:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800dfd2:	4b08      	ldr	r3, [pc, #32]	; (800dff4 <McpsConfirm+0x68>)
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	4a06      	ldr	r2, [pc, #24]	; (800dff0 <McpsConfirm+0x64>)
 800dfd8:	0010      	movs	r0, r2
 800dfda:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	0019      	movs	r1, r3
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	f000 f907 	bl	800e1f4 <LmHandlerPackagesNotify>
}
 800dfe6:	46c0      	nop			; (mov r8, r8)
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	b002      	add	sp, #8
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	46c0      	nop			; (mov r8, r8)
 800dff0:	20000478 	.word	0x20000478
 800dff4:	20000438 	.word	0x20000438

0800dff8 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800dff8:	b590      	push	{r4, r7, lr}
 800dffa:	b089      	sub	sp, #36	; 0x24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800e000:	4b36      	ldr	r3, [pc, #216]	; (800e0dc <McpsIndication+0xe4>)
 800e002:	2201      	movs	r2, #1
 800e004:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	785a      	ldrb	r2, [r3, #1]
 800e00a:	4b34      	ldr	r3, [pc, #208]	; (800e0dc <McpsIndication+0xe4>)
 800e00c:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800e00e:	4b33      	ldr	r3, [pc, #204]	; (800e0dc <McpsIndication+0xe4>)
 800e010:	785b      	ldrb	r3, [r3, #1]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d15e      	bne.n	800e0d4 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7b1b      	ldrb	r3, [r3, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d02c      	beq.n	800e078 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	791b      	ldrb	r3, [r3, #4]
 800e022:	b25a      	sxtb	r2, r3
 800e024:	4b2d      	ldr	r3, [pc, #180]	; (800e0dc <McpsIndication+0xe4>)
 800e026:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	220e      	movs	r2, #14
 800e02c:	5e9b      	ldrsh	r3, [r3, r2]
 800e02e:	b25a      	sxtb	r2, r3
 800e030:	4b2a      	ldr	r3, [pc, #168]	; (800e0dc <McpsIndication+0xe4>)
 800e032:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2210      	movs	r2, #16
 800e038:	569a      	ldrsb	r2, [r3, r2]
 800e03a:	4b28      	ldr	r3, [pc, #160]	; (800e0dc <McpsIndication+0xe4>)
 800e03c:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	695a      	ldr	r2, [r3, #20]
 800e042:	4b26      	ldr	r3, [pc, #152]	; (800e0dc <McpsIndication+0xe4>)
 800e044:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	7c5b      	ldrb	r3, [r3, #17]
 800e04a:	b25a      	sxtb	r2, r3
 800e04c:	4b23      	ldr	r3, [pc, #140]	; (800e0dc <McpsIndication+0xe4>)
 800e04e:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	78da      	ldrb	r2, [r3, #3]
 800e054:	2118      	movs	r1, #24
 800e056:	187b      	adds	r3, r7, r1
 800e058:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	7b1a      	ldrb	r2, [r3, #12]
 800e05e:	187b      	adds	r3, r7, r1
 800e060:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	689a      	ldr	r2, [r3, #8]
 800e066:	0008      	movs	r0, r1
 800e068:	187b      	adds	r3, r7, r1
 800e06a:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800e06c:	4b1c      	ldr	r3, [pc, #112]	; (800e0e0 <McpsIndication+0xe8>)
 800e06e:	695b      	ldr	r3, [r3, #20]
 800e070:	491a      	ldr	r1, [pc, #104]	; (800e0dc <McpsIndication+0xe4>)
 800e072:	183a      	adds	r2, r7, r0
 800e074:	0010      	movs	r0, r2
 800e076:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	7f1b      	ldrb	r3, [r3, #28]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d006      	beq.n	800e08e <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800e080:	4b17      	ldr	r3, [pc, #92]	; (800e0e0 <McpsIndication+0xe8>)
 800e082:	69db      	ldr	r3, [r3, #28]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800e088:	4b15      	ldr	r3, [pc, #84]	; (800e0e0 <McpsIndication+0xe8>)
 800e08a:	69db      	ldr	r3, [r3, #28]
 800e08c:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	0019      	movs	r1, r3
 800e092:	2001      	movs	r0, #1
 800e094:	f000 f8ae 	bl	800e1f4 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800e098:	2417      	movs	r4, #23
 800e09a:	193b      	adds	r3, r7, r4
 800e09c:	0018      	movs	r0, r3
 800e09e:	f7ff ff0f 	bl	800dec0 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	795b      	ldrb	r3, [r3, #5]
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d115      	bne.n	800e0d6 <McpsIndication+0xde>
 800e0aa:	193b      	adds	r3, r7, r4
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d111      	bne.n	800e0d6 <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800e0b2:	210c      	movs	r1, #12
 800e0b4:	187b      	adds	r3, r7, r1
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	701a      	strb	r2, [r3, #0]
 800e0ba:	187b      	adds	r3, r7, r1
 800e0bc:	2200      	movs	r2, #0
 800e0be:	705a      	strb	r2, [r3, #1]
 800e0c0:	187b      	adds	r3, r7, r1
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800e0c6:	1878      	adds	r0, r7, r1
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	f7ff fd45 	bl	800db5c <LmHandlerSend>
 800e0d2:	e000      	b.n	800e0d6 <McpsIndication+0xde>
    return;
 800e0d4:	46c0      	nop			; (mov r8, r8)
  }
}
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	b009      	add	sp, #36	; 0x24
 800e0da:	bd90      	pop	{r4, r7, pc}
 800e0dc:	20000160 	.word	0x20000160
 800e0e0:	20000438 	.word	0x20000438

0800e0e4 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e0e4:	b590      	push	{r4, r7, lr}
 800e0e6:	b08d      	sub	sp, #52	; 0x34
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800e0ec:	4b22      	ldr	r3, [pc, #136]	; (800e178 <MlmeConfirm+0x94>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	785a      	ldrb	r2, [r3, #1]
 800e0f6:	4b20      	ldr	r3, [pc, #128]	; (800e178 <MlmeConfirm+0x94>)
 800e0f8:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	0019      	movs	r1, r3
 800e0fe:	2002      	movs	r0, #2
 800e100:	f000 f878 	bl	800e1f4 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2b0a      	cmp	r3, #10
 800e10a:	d02c      	beq.n	800e166 <MlmeConfirm+0x82>
 800e10c:	dc2d      	bgt.n	800e16a <MlmeConfirm+0x86>
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d002      	beq.n	800e118 <MlmeConfirm+0x34>
 800e112:	2b04      	cmp	r3, #4
 800e114:	d02b      	beq.n	800e16e <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e116:	e028      	b.n	800e16a <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800e118:	210c      	movs	r1, #12
 800e11a:	187b      	adds	r3, r7, r1
 800e11c:	2206      	movs	r2, #6
 800e11e:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800e120:	000c      	movs	r4, r1
 800e122:	187b      	adds	r3, r7, r1
 800e124:	0018      	movs	r0, r3
 800e126:	f004 ffa7 	bl	8013078 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e12a:	193b      	adds	r3, r7, r4
 800e12c:	685a      	ldr	r2, [r3, #4]
 800e12e:	4b13      	ldr	r3, [pc, #76]	; (800e17c <MlmeConfirm+0x98>)
 800e130:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800e132:	4b13      	ldr	r3, [pc, #76]	; (800e180 <MlmeConfirm+0x9c>)
 800e134:	0018      	movs	r0, r3
 800e136:	f7ff fee5 	bl	800df04 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	785b      	ldrb	r3, [r3, #1]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d108      	bne.n	800e154 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e142:	4b0f      	ldr	r3, [pc, #60]	; (800e180 <MlmeConfirm+0x9c>)
 800e144:	2200      	movs	r2, #0
 800e146:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e148:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <MlmeConfirm+0xa0>)
 800e14a:	785b      	ldrb	r3, [r3, #1]
 800e14c:	0018      	movs	r0, r3
 800e14e:	f7ff fdd7 	bl	800dd00 <LmHandlerRequestClass>
 800e152:	e002      	b.n	800e15a <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e154:	4b0a      	ldr	r3, [pc, #40]	; (800e180 <MlmeConfirm+0x9c>)
 800e156:	22ff      	movs	r2, #255	; 0xff
 800e158:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e15a:	4b0b      	ldr	r3, [pc, #44]	; (800e188 <MlmeConfirm+0xa4>)
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	4a08      	ldr	r2, [pc, #32]	; (800e180 <MlmeConfirm+0x9c>)
 800e160:	0010      	movs	r0, r2
 800e162:	4798      	blx	r3
    break;
 800e164:	e004      	b.n	800e170 <MlmeConfirm+0x8c>
    break;
 800e166:	46c0      	nop			; (mov r8, r8)
 800e168:	e002      	b.n	800e170 <MlmeConfirm+0x8c>
      break;
 800e16a:	46c0      	nop			; (mov r8, r8)
 800e16c:	e000      	b.n	800e170 <MlmeConfirm+0x8c>
    break;
 800e16e:	46c0      	nop			; (mov r8, r8)
  }
}
 800e170:	46c0      	nop			; (mov r8, r8)
 800e172:	46bd      	mov	sp, r7
 800e174:	b00d      	add	sp, #52	; 0x34
 800e176:	bd90      	pop	{r4, r7, pc}
 800e178:	20000478 	.word	0x20000478
 800e17c:	20000138 	.word	0x20000138
 800e180:	2000015c 	.word	0x2000015c
 800e184:	20000430 	.word	0x20000430
 800e188:	20000438 	.word	0x20000438

0800e18c <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800e194:	4b05      	ldr	r3, [pc, #20]	; (800e1ac <MlmeIndication+0x20>)
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	785a      	ldrb	r2, [r3, #1]
 800e19e:	4b03      	ldr	r3, [pc, #12]	; (800e1ac <MlmeIndication+0x20>)
 800e1a0:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e1a2:	46c0      	nop			; (mov r8, r8)
  }
}
 800e1a4:	46c0      	nop			; (mov r8, r8)
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	b002      	add	sp, #8
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	20000160 	.word	0x20000160

0800e1b0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	0002      	movs	r2, r0
 800e1b8:	1dfb      	adds	r3, r7, #7
 800e1ba:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800e1bc:	1dfb      	adds	r3, r7, #7
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	d810      	bhi.n	800e1e6 <LmHandlerPackageIsInitialized+0x36>
 800e1c4:	1dfb      	adds	r3, r7, #7
 800e1c6:	781a      	ldrb	r2, [r3, #0]
 800e1c8:	4b09      	ldr	r3, [pc, #36]	; (800e1f0 <LmHandlerPackageIsInitialized+0x40>)
 800e1ca:	0092      	lsls	r2, r2, #2
 800e1cc:	58d3      	ldr	r3, [r2, r3]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d008      	beq.n	800e1e6 <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800e1d4:	1dfb      	adds	r3, r7, #7
 800e1d6:	781a      	ldrb	r2, [r3, #0]
 800e1d8:	4b05      	ldr	r3, [pc, #20]	; (800e1f0 <LmHandlerPackageIsInitialized+0x40>)
 800e1da:	0092      	lsls	r2, r2, #2
 800e1dc:	58d3      	ldr	r3, [r2, r3]
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	4798      	blx	r3
 800e1e2:	0003      	movs	r3, r0
 800e1e4:	e000      	b.n	800e1e8 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800e1e6:	2300      	movs	r3, #0
  }
}
 800e1e8:	0018      	movs	r0, r3
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	b002      	add	sp, #8
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	2000041c 	.word	0x2000041c

0800e1f4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	0002      	movs	r2, r0
 800e1fc:	6039      	str	r1, [r7, #0]
 800e1fe:	1dfb      	adds	r3, r7, #7
 800e200:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e202:	230f      	movs	r3, #15
 800e204:	18fb      	adds	r3, r7, r3
 800e206:	2200      	movs	r2, #0
 800e208:	701a      	strb	r2, [r3, #0]
 800e20a:	e07b      	b.n	800e304 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800e20c:	230f      	movs	r3, #15
 800e20e:	18fb      	adds	r3, r7, r3
 800e210:	2200      	movs	r2, #0
 800e212:	569a      	ldrsb	r2, [r3, r2]
 800e214:	4b41      	ldr	r3, [pc, #260]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e216:	0092      	lsls	r2, r2, #2
 800e218:	58d3      	ldr	r3, [r2, r3]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d100      	bne.n	800e220 <LmHandlerPackagesNotify+0x2c>
 800e21e:	e05f      	b.n	800e2e0 <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800e220:	1dfb      	adds	r3, r7, #7
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	2b02      	cmp	r3, #2
 800e226:	d046      	beq.n	800e2b6 <LmHandlerPackagesNotify+0xc2>
 800e228:	dc5c      	bgt.n	800e2e4 <LmHandlerPackagesNotify+0xf0>
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d002      	beq.n	800e234 <LmHandlerPackagesNotify+0x40>
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d015      	beq.n	800e25e <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800e232:	e057      	b.n	800e2e4 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800e234:	210f      	movs	r1, #15
 800e236:	187b      	adds	r3, r7, r1
 800e238:	2200      	movs	r2, #0
 800e23a:	569a      	ldrsb	r2, [r3, r2]
 800e23c:	4b37      	ldr	r3, [pc, #220]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e23e:	0092      	lsls	r2, r2, #2
 800e240:	58d3      	ldr	r3, [r2, r3]
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d04f      	beq.n	800e2e8 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800e248:	187b      	adds	r3, r7, r1
 800e24a:	2200      	movs	r2, #0
 800e24c:	569a      	ldrsb	r2, [r3, r2]
 800e24e:	4b33      	ldr	r3, [pc, #204]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e250:	0092      	lsls	r2, r2, #2
 800e252:	58d3      	ldr	r3, [r2, r3]
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	683a      	ldr	r2, [r7, #0]
 800e258:	0010      	movs	r0, r2
 800e25a:	4798      	blx	r3
          break;
 800e25c:	e044      	b.n	800e2e8 <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e25e:	210f      	movs	r1, #15
 800e260:	187b      	adds	r3, r7, r1
 800e262:	2200      	movs	r2, #0
 800e264:	569a      	ldrsb	r2, [r3, r2]
 800e266:	4b2d      	ldr	r3, [pc, #180]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e268:	0092      	lsls	r2, r2, #2
 800e26a:	58d3      	ldr	r3, [r2, r3]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d03c      	beq.n	800e2ec <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e272:	187b      	adds	r3, r7, r1
 800e274:	2200      	movs	r2, #0
 800e276:	569a      	ldrsb	r2, [r3, r2]
 800e278:	4b28      	ldr	r3, [pc, #160]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e27a:	0092      	lsls	r2, r2, #2
 800e27c:	58d3      	ldr	r3, [r2, r3]
 800e27e:	781a      	ldrb	r2, [r3, #0]
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e284:	429a      	cmp	r2, r3
 800e286:	d00a      	beq.n	800e29e <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e288:	187b      	adds	r3, r7, r1
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	b25b      	sxtb	r3, r3
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d12c      	bne.n	800e2ec <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800e292:	4b22      	ldr	r3, [pc, #136]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	4798      	blx	r3
 800e29a:	1e03      	subs	r3, r0, #0
 800e29c:	d026      	beq.n	800e2ec <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800e29e:	230f      	movs	r3, #15
 800e2a0:	18fb      	adds	r3, r7, r3
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	569a      	ldrsb	r2, [r3, r2]
 800e2a6:	4b1d      	ldr	r3, [pc, #116]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e2a8:	0092      	lsls	r2, r2, #2
 800e2aa:	58d3      	ldr	r3, [r2, r3]
 800e2ac:	699b      	ldr	r3, [r3, #24]
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	0010      	movs	r0, r2
 800e2b2:	4798      	blx	r3
          break;
 800e2b4:	e01a      	b.n	800e2ec <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800e2b6:	210f      	movs	r1, #15
 800e2b8:	187b      	adds	r3, r7, r1
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	569a      	ldrsb	r2, [r3, r2]
 800e2be:	4b17      	ldr	r3, [pc, #92]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e2c0:	0092      	lsls	r2, r2, #2
 800e2c2:	58d3      	ldr	r3, [r2, r3]
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d012      	beq.n	800e2f0 <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800e2ca:	187b      	adds	r3, r7, r1
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	569a      	ldrsb	r2, [r3, r2]
 800e2d0:	4b12      	ldr	r3, [pc, #72]	; (800e31c <LmHandlerPackagesNotify+0x128>)
 800e2d2:	0092      	lsls	r2, r2, #2
 800e2d4:	58d3      	ldr	r3, [r2, r3]
 800e2d6:	69db      	ldr	r3, [r3, #28]
 800e2d8:	683a      	ldr	r2, [r7, #0]
 800e2da:	0010      	movs	r0, r2
 800e2dc:	4798      	blx	r3
          break;
 800e2de:	e007      	b.n	800e2f0 <LmHandlerPackagesNotify+0xfc>
      }
    }
 800e2e0:	46c0      	nop			; (mov r8, r8)
 800e2e2:	e006      	b.n	800e2f2 <LmHandlerPackagesNotify+0xfe>
          break;
 800e2e4:	46c0      	nop			; (mov r8, r8)
 800e2e6:	e004      	b.n	800e2f2 <LmHandlerPackagesNotify+0xfe>
          break;
 800e2e8:	46c0      	nop			; (mov r8, r8)
 800e2ea:	e002      	b.n	800e2f2 <LmHandlerPackagesNotify+0xfe>
          break;
 800e2ec:	46c0      	nop			; (mov r8, r8)
 800e2ee:	e000      	b.n	800e2f2 <LmHandlerPackagesNotify+0xfe>
          break;
 800e2f0:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e2f2:	210f      	movs	r1, #15
 800e2f4:	187b      	adds	r3, r7, r1
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	b25b      	sxtb	r3, r3
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	187b      	adds	r3, r7, r1
 800e302:	701a      	strb	r2, [r3, #0]
 800e304:	230f      	movs	r3, #15
 800e306:	18fb      	adds	r3, r7, r3
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	b25b      	sxtb	r3, r3
 800e30c:	2b04      	cmp	r3, #4
 800e30e:	dc00      	bgt.n	800e312 <LmHandlerPackagesNotify+0x11e>
 800e310:	e77c      	b.n	800e20c <LmHandlerPackagesNotify+0x18>
  }
}
 800e312:	46c0      	nop			; (mov r8, r8)
 800e314:	46c0      	nop			; (mov r8, r8)
 800e316:	46bd      	mov	sp, r7
 800e318:	b004      	add	sp, #16
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	2000041c 	.word	0x2000041c

0800e320 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af02      	add	r7, sp, #8
 800e326:	0002      	movs	r2, r0
 800e328:	1dfb      	adds	r3, r7, #7
 800e32a:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e32c:	1dfb      	adds	r3, r7, #7
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	4a06      	ldr	r2, [pc, #24]	; (800e34c <DisplayClassUpdate+0x2c>)
 800e332:	5cd3      	ldrb	r3, [r2, r3]
 800e334:	001a      	movs	r2, r3
 800e336:	4b06      	ldr	r3, [pc, #24]	; (800e350 <DisplayClassUpdate+0x30>)
 800e338:	9200      	str	r2, [sp, #0]
 800e33a:	2200      	movs	r2, #0
 800e33c:	2100      	movs	r1, #0
 800e33e:	2002      	movs	r0, #2
 800e340:	f00d fa3a 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800e344:	46c0      	nop			; (mov r8, r8)
 800e346:	46bd      	mov	sp, r7
 800e348:	b002      	add	sp, #8
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	0801ee44 	.word	0x0801ee44
 800e350:	0801ee28 	.word	0x0801ee28

0800e354 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800e358:	4b01      	ldr	r3, [pc, #4]	; (800e360 <LmphCompliancePackageFactory+0xc>)
}
 800e35a:	0018      	movs	r0, r3
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20000178 	.word	0x20000178

0800e364 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	1dfb      	adds	r3, r7, #7
 800e370:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d010      	beq.n	800e39a <LmhpComplianceInit+0x36>
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00d      	beq.n	800e39a <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800e37e:	4b0c      	ldr	r3, [pc, #48]	; (800e3b0 <LmhpComplianceInit+0x4c>)
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800e384:	4b0b      	ldr	r3, [pc, #44]	; (800e3b4 <LmhpComplianceInit+0x50>)
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e38a:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <LmhpComplianceInit+0x50>)
 800e38c:	1dfa      	adds	r2, r7, #7
 800e38e:	7812      	ldrb	r2, [r2, #0]
 800e390:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800e392:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <LmhpComplianceInit+0x50>)
 800e394:	2201      	movs	r2, #1
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	e006      	b.n	800e3a8 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800e39a:	4b05      	ldr	r3, [pc, #20]	; (800e3b0 <LmhpComplianceInit+0x4c>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800e3a0:	4b04      	ldr	r3, [pc, #16]	; (800e3b4 <LmhpComplianceInit+0x50>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	701a      	strb	r2, [r3, #0]
  }
}
 800e3a6:	46c0      	nop			; (mov r8, r8)
 800e3a8:	46c0      	nop			; (mov r8, r8)
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	b004      	add	sp, #16
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	200005b0 	.word	0x200005b0
 800e3b4:	2000059c 	.word	0x2000059c

0800e3b8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800e3bc:	4b02      	ldr	r3, [pc, #8]	; (800e3c8 <LmhpComplianceIsInitialized+0x10>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
}
 800e3c0:	0018      	movs	r0, r3
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	46c0      	nop			; (mov r8, r8)
 800e3c8:	2000059c 	.word	0x2000059c

0800e3cc <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800e3d0:	4b06      	ldr	r3, [pc, #24]	; (800e3ec <LmhpComplianceIsRunning+0x20>)
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	4053      	eors	r3, r2
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d001      	beq.n	800e3e2 <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	e001      	b.n	800e3e6 <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800e3e2:	4b02      	ldr	r3, [pc, #8]	; (800e3ec <LmhpComplianceIsRunning+0x20>)
 800e3e4:	785b      	ldrb	r3, [r3, #1]
}
 800e3e6:	0018      	movs	r0, r3
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	2000059c 	.word	0x2000059c

0800e3f0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e3f8:	4b0e      	ldr	r3, [pc, #56]	; (800e434 <LmhpComplianceOnMcpsConfirm+0x44>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	4053      	eors	r3, r2
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b00      	cmp	r3, #0
 800e404:	d112      	bne.n	800e42c <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800e406:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <LmhpComplianceOnMcpsConfirm+0x44>)
 800e408:	785b      	ldrb	r3, [r3, #1]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00f      	beq.n	800e42e <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800e412:	2b01      	cmp	r3, #1
 800e414:	d10b      	bne.n	800e42e <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d007      	beq.n	800e42e <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800e41e:	4b05      	ldr	r3, [pc, #20]	; (800e434 <LmhpComplianceOnMcpsConfirm+0x44>)
 800e420:	899b      	ldrh	r3, [r3, #12]
 800e422:	3301      	adds	r3, #1
 800e424:	b29a      	uxth	r2, r3
 800e426:	4b03      	ldr	r3, [pc, #12]	; (800e434 <LmhpComplianceOnMcpsConfirm+0x44>)
 800e428:	819a      	strh	r2, [r3, #12]
 800e42a:	e000      	b.n	800e42e <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800e42c:	46c0      	nop			; (mov r8, r8)
  }
}
 800e42e:	46bd      	mov	sp, r7
 800e430:	b002      	add	sp, #8
 800e432:	bd80      	pop	{r7, pc}
 800e434:	2000059c 	.word	0x2000059c

0800e438 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e440:	4b0d      	ldr	r3, [pc, #52]	; (800e478 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	2201      	movs	r2, #1
 800e446:	4053      	eors	r3, r2
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10f      	bne.n	800e46e <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	2b04      	cmp	r3, #4
 800e454:	d10c      	bne.n	800e470 <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800e456:	4b08      	ldr	r3, [pc, #32]	; (800e478 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e458:	2201      	movs	r2, #1
 800e45a:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	7a1a      	ldrb	r2, [r3, #8]
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e462:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	7a5a      	ldrb	r2, [r3, #9]
 800e468:	4b03      	ldr	r3, [pc, #12]	; (800e478 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e46a:	741a      	strb	r2, [r3, #16]
 800e46c:	e000      	b.n	800e470 <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800e46e:	46c0      	nop			; (mov r8, r8)
  }
}
 800e470:	46bd      	mov	sp, r7
 800e472:	b002      	add	sp, #8
 800e474:	bd80      	pop	{r7, pc}
 800e476:	46c0      	nop			; (mov r8, r8)
 800e478:	2000059c 	.word	0x2000059c

0800e47c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800e47c:	b5b0      	push	{r4, r5, r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800e482:	4b32      	ldr	r3, [pc, #200]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2201      	movs	r2, #1
 800e488:	4053      	eors	r3, r2
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800e490:	2301      	movs	r3, #1
 800e492:	425b      	negs	r3, r3
 800e494:	e056      	b.n	800e544 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800e496:	4b2d      	ldr	r3, [pc, #180]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e498:	7b9b      	ldrb	r3, [r3, #14]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d019      	beq.n	800e4d2 <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800e49e:	4b2b      	ldr	r3, [pc, #172]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800e4a4:	4b29      	ldr	r3, [pc, #164]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4a6:	2203      	movs	r2, #3
 800e4a8:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800e4aa:	4b28      	ldr	r3, [pc, #160]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	2205      	movs	r2, #5
 800e4b0:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800e4b2:	4b26      	ldr	r3, [pc, #152]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	4a24      	ldr	r2, [pc, #144]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4ba:	7bd2      	ldrb	r2, [r2, #15]
 800e4bc:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800e4be:	4b23      	ldr	r3, [pc, #140]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4c0:	689b      	ldr	r3, [r3, #8]
 800e4c2:	3302      	adds	r3, #2
 800e4c4:	4a21      	ldr	r2, [pc, #132]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4c6:	7c12      	ldrb	r2, [r2, #16]
 800e4c8:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800e4ca:	4b20      	ldr	r3, [pc, #128]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	709a      	strb	r2, [r3, #2]
 800e4d0:	e01c      	b.n	800e50c <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800e4d2:	4b1e      	ldr	r3, [pc, #120]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4d4:	789b      	ldrb	r3, [r3, #2]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d005      	beq.n	800e4e6 <LmhpComplianceTxProcess+0x6a>
 800e4da:	2b04      	cmp	r3, #4
 800e4dc:	d116      	bne.n	800e50c <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800e4de:	4b1b      	ldr	r3, [pc, #108]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	709a      	strb	r2, [r3, #2]
        break;
 800e4e4:	e012      	b.n	800e50c <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800e4e6:	4b19      	ldr	r3, [pc, #100]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e4ec:	4b17      	ldr	r3, [pc, #92]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4ee:	899b      	ldrh	r3, [r3, #12]
 800e4f0:	0a1b      	lsrs	r3, r3, #8
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	4b15      	ldr	r3, [pc, #84]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	b2d2      	uxtb	r2, r2
 800e4fa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e4fc:	4b13      	ldr	r3, [pc, #76]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e4fe:	899a      	ldrh	r2, [r3, #12]
 800e500:	4b12      	ldr	r3, [pc, #72]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	3301      	adds	r3, #1
 800e506:	b2d2      	uxtb	r2, r2
 800e508:	701a      	strb	r2, [r3, #0]
        break;
 800e50a:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800e50c:	2508      	movs	r5, #8
 800e50e:	197b      	adds	r3, r7, r5
 800e510:	22e0      	movs	r2, #224	; 0xe0
 800e512:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800e514:	4b0d      	ldr	r3, [pc, #52]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e516:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800e518:	197b      	adds	r3, r7, r5
 800e51a:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800e51c:	4b0b      	ldr	r3, [pc, #44]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e51e:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800e520:	197b      	adds	r3, r7, r5
 800e522:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800e528:	4b09      	ldr	r3, [pc, #36]	; (800e550 <LmhpComplianceTxProcess+0xd4>)
 800e52a:	0018      	movs	r0, r3
 800e52c:	f00e f810 	bl	801c550 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800e530:	4b08      	ldr	r3, [pc, #32]	; (800e554 <LmhpComplianceTxProcess+0xd8>)
 800e532:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e534:	4b05      	ldr	r3, [pc, #20]	; (800e54c <LmhpComplianceTxProcess+0xd0>)
 800e536:	791b      	ldrb	r3, [r3, #4]
 800e538:	0019      	movs	r1, r3
 800e53a:	1d3a      	adds	r2, r7, #4
 800e53c:	1978      	adds	r0, r7, r5
 800e53e:	2301      	movs	r3, #1
 800e540:	47a0      	blx	r4
 800e542:	0003      	movs	r3, r0
                                             true);
}
 800e544:	0018      	movs	r0, r3
 800e546:	46bd      	mov	sp, r7
 800e548:	b004      	add	sp, #16
 800e54a:	bdb0      	pop	{r4, r5, r7, pc}
 800e54c:	2000059c 	.word	0x2000059c
 800e550:	20000584 	.word	0x20000584
 800e554:	20000178 	.word	0x20000178

0800e558 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b0a2      	sub	sp, #136	; 0x88
 800e55c:	af02      	add	r7, sp, #8
 800e55e:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e560:	4be1      	ldr	r3, [pc, #900]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	2201      	movs	r2, #1
 800e566:	4053      	eors	r3, r2
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d000      	beq.n	800e570 <LmhpComplianceOnMcpsIndication+0x18>
 800e56e:	e1b2      	b.n	800e8d6 <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7b5b      	ldrb	r3, [r3, #13]
 800e574:	2201      	movs	r2, #1
 800e576:	4053      	eors	r3, r2
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d000      	beq.n	800e580 <LmhpComplianceOnMcpsIndication+0x28>
 800e57e:	e1ac      	b.n	800e8da <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800e580:	4bd9      	ldr	r3, [pc, #868]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e582:	785b      	ldrb	r3, [r3, #1]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00c      	beq.n	800e5a2 <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	7c9b      	ldrb	r3, [r3, #18]
 800e58c:	2201      	movs	r2, #1
 800e58e:	4053      	eors	r3, r2
 800e590:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800e592:	2b00      	cmp	r3, #0
 800e594:	d005      	beq.n	800e5a2 <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800e596:	4bd4      	ldr	r3, [pc, #848]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e598:	899b      	ldrh	r3, [r3, #12]
 800e59a:	3301      	adds	r3, #1
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	4bd2      	ldr	r3, [pc, #840]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e5a0:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	78db      	ldrb	r3, [r3, #3]
 800e5a6:	2be0      	cmp	r3, #224	; 0xe0
 800e5a8:	d000      	beq.n	800e5ac <LmhpComplianceOnMcpsIndication+0x54>
 800e5aa:	e198      	b.n	800e8de <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800e5ac:	4bce      	ldr	r3, [pc, #824]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e5ae:	785b      	ldrb	r3, [r3, #1]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	4053      	eors	r3, r2
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d063      	beq.n	800e682 <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	7b1b      	ldrb	r3, [r3, #12]
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	d000      	beq.n	800e5c4 <LmhpComplianceOnMcpsIndication+0x6c>
 800e5c2:	e1a0      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	d000      	beq.n	800e5d0 <LmhpComplianceOnMcpsIndication+0x78>
 800e5ce:	e19a      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d000      	beq.n	800e5de <LmhpComplianceOnMcpsIndication+0x86>
 800e5dc:	e193      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	3302      	adds	r3, #2
 800e5e4:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d000      	beq.n	800e5ec <LmhpComplianceOnMcpsIndication+0x94>
 800e5ea:	e18c      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	3303      	adds	r3, #3
 800e5f2:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d000      	beq.n	800e5fa <LmhpComplianceOnMcpsIndication+0xa2>
 800e5f8:	e185      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800e5fa:	4bbb      	ldr	r3, [pc, #748]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800e600:	4bb9      	ldr	r3, [pc, #740]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e602:	22e0      	movs	r2, #224	; 0xe0
 800e604:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800e606:	4bb8      	ldr	r3, [pc, #736]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e608:	2202      	movs	r2, #2
 800e60a:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800e60c:	4bb6      	ldr	r3, [pc, #728]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e60e:	2200      	movs	r2, #0
 800e610:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800e612:	4bb5      	ldr	r3, [pc, #724]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e614:	2200      	movs	r2, #0
 800e616:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800e618:	4bb3      	ldr	r3, [pc, #716]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800e61e:	4bb2      	ldr	r3, [pc, #712]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e620:	2200      	movs	r2, #0
 800e622:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800e624:	4bb0      	ldr	r3, [pc, #704]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e626:	2201      	movs	r2, #1
 800e628:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800e62a:	4baf      	ldr	r3, [pc, #700]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e62c:	2201      	movs	r2, #1
 800e62e:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800e630:	2108      	movs	r1, #8
 800e632:	187b      	adds	r3, r7, r1
 800e634:	2204      	movs	r2, #4
 800e636:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800e638:	187b      	adds	r3, r7, r1
 800e63a:	2201      	movs	r2, #1
 800e63c:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e63e:	187b      	adds	r3, r7, r1
 800e640:	0018      	movs	r0, r3
 800e642:	f004 fe77 	bl	8013334 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800e646:	2000      	movs	r0, #0
 800e648:	f005 fca0 	bl	8013f8c <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800e64c:	4ba7      	ldr	r3, [pc, #668]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d003      	beq.n	800e65e <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800e656:	4ba5      	ldr	r3, [pc, #660]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800e65e:	4ba4      	ldr	r3, [pc, #656]	; (800e8f0 <LmhpComplianceOnMcpsIndication+0x398>)
 800e660:	2201      	movs	r2, #1
 800e662:	4251      	negs	r1, r2
 800e664:	48a3      	ldr	r0, [pc, #652]	; (800e8f4 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e666:	2200      	movs	r2, #0
 800e668:	9200      	str	r2, [sp, #0]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f00d ff38 	bl	801c4e0 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800e670:	4aa1      	ldr	r2, [pc, #644]	; (800e8f8 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800e672:	4ba0      	ldr	r3, [pc, #640]	; (800e8f4 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e674:	0011      	movs	r1, r2
 800e676:	0018      	movs	r0, r3
 800e678:	f00e f85a 	bl	801c730 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800e67c:	f7ff fefe 	bl	800e47c <LmhpComplianceTxProcess>
 800e680:	e141      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	689b      	ldr	r3, [r3, #8]
 800e686:	781a      	ldrb	r2, [r3, #0]
 800e688:	4b97      	ldr	r3, [pc, #604]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e68a:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800e68c:	4b96      	ldr	r3, [pc, #600]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e68e:	789b      	ldrb	r3, [r3, #2]
 800e690:	2b0a      	cmp	r3, #10
 800e692:	d900      	bls.n	800e696 <LmhpComplianceOnMcpsIndication+0x13e>
 800e694:	e125      	b.n	800e8e2 <LmhpComplianceOnMcpsIndication+0x38a>
 800e696:	009a      	lsls	r2, r3, #2
 800e698:	4b98      	ldr	r3, [pc, #608]	; (800e8fc <LmhpComplianceOnMcpsIndication+0x3a4>)
 800e69a:	18d3      	adds	r3, r2, r3
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800e6a0:	4b94      	ldr	r3, [pc, #592]	; (800e8f4 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e6a2:	0018      	movs	r0, r3
 800e6a4:	f00d ffcc 	bl	801c640 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800e6a8:	4b8f      	ldr	r3, [pc, #572]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800e6ae:	4b8e      	ldr	r3, [pc, #568]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800e6b4:	2108      	movs	r1, #8
 800e6b6:	187b      	adds	r3, r7, r1
 800e6b8:	2204      	movs	r2, #4
 800e6ba:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e6bc:	4b8b      	ldr	r3, [pc, #556]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	781a      	ldrb	r2, [r3, #0]
 800e6c2:	187b      	adds	r3, r7, r1
 800e6c4:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e6c6:	187b      	adds	r3, r7, r1
 800e6c8:	0018      	movs	r0, r3
 800e6ca:	f004 fe33 	bl	8013334 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800e6ce:	4b87      	ldr	r3, [pc, #540]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	785b      	ldrb	r3, [r3, #1]
 800e6d4:	0018      	movs	r0, r3
 800e6d6:	f005 fc59 	bl	8013f8c <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800e6da:	4b84      	ldr	r3, [pc, #528]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d100      	bne.n	800e6e6 <LmhpComplianceOnMcpsIndication+0x18e>
 800e6e4:	e10e      	b.n	800e904 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800e6e6:	4b81      	ldr	r3, [pc, #516]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	4798      	blx	r3
        }
      }
      break;
 800e6ee:	e109      	b.n	800e904 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800e6f0:	4b7d      	ldr	r3, [pc, #500]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	71da      	strb	r2, [r3, #7]
        break;
 800e6f6:	e106      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800e6f8:	4b7b      	ldr	r3, [pc, #492]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800e6fe:	4b7a      	ldr	r3, [pc, #488]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e700:	2201      	movs	r2, #1
 800e702:	709a      	strb	r2, [r3, #2]
        break;
 800e704:	e0ff      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800e706:	4b78      	ldr	r3, [pc, #480]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e708:	2200      	movs	r2, #0
 800e70a:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800e70c:	4b76      	ldr	r3, [pc, #472]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e70e:	2201      	movs	r2, #1
 800e710:	709a      	strb	r2, [r3, #2]
        break;
 800e712:	e0f8      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	7b1a      	ldrb	r2, [r3, #12]
 800e718:	4b73      	ldr	r3, [pc, #460]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e71a:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800e71c:	4b72      	ldr	r3, [pc, #456]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	2204      	movs	r2, #4
 800e722:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800e724:	237f      	movs	r3, #127	; 0x7f
 800e726:	18fb      	adds	r3, r7, r3
 800e728:	2201      	movs	r2, #1
 800e72a:	701a      	strb	r2, [r3, #0]
 800e72c:	e013      	b.n	800e756 <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	689a      	ldr	r2, [r3, #8]
 800e732:	207f      	movs	r0, #127	; 0x7f
 800e734:	183b      	adds	r3, r7, r0
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	18d3      	adds	r3, r2, r3
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	4b6a      	ldr	r3, [pc, #424]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e73e:	6899      	ldr	r1, [r3, #8]
 800e740:	183b      	adds	r3, r7, r0
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	18cb      	adds	r3, r1, r3
 800e746:	3201      	adds	r2, #1
 800e748:	b2d2      	uxtb	r2, r2
 800e74a:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800e74c:	183b      	adds	r3, r7, r0
 800e74e:	781a      	ldrb	r2, [r3, #0]
 800e750:	183b      	adds	r3, r7, r0
 800e752:	3201      	adds	r2, #1
 800e754:	701a      	strb	r2, [r3, #0]
 800e756:	4b64      	ldr	r3, [pc, #400]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e758:	799a      	ldrb	r2, [r3, #6]
 800e75a:	4b63      	ldr	r3, [pc, #396]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e75c:	79db      	ldrb	r3, [r3, #7]
 800e75e:	1c18      	adds	r0, r3, #0
 800e760:	1c11      	adds	r1, r2, #0
 800e762:	b2ca      	uxtb	r2, r1
 800e764:	b2c3      	uxtb	r3, r0
 800e766:	429a      	cmp	r2, r3
 800e768:	d900      	bls.n	800e76c <LmhpComplianceOnMcpsIndication+0x214>
 800e76a:	1c01      	adds	r1, r0, #0
 800e76c:	b2cb      	uxtb	r3, r1
 800e76e:	227f      	movs	r2, #127	; 0x7f
 800e770:	18ba      	adds	r2, r7, r2
 800e772:	7812      	ldrb	r2, [r2, #0]
 800e774:	429a      	cmp	r2, r3
 800e776:	d3da      	bcc.n	800e72e <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800e778:	e0c5      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800e77a:	2168      	movs	r1, #104	; 0x68
 800e77c:	187b      	adds	r3, r7, r1
 800e77e:	2204      	movs	r2, #4
 800e780:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800e782:	187b      	adds	r3, r7, r1
 800e784:	0018      	movs	r0, r3
 800e786:	f005 f95b 	bl	8013a40 <LoRaMacMlmeRequest>
      }
      break;
 800e78a:	e0bc      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800e78c:	4b59      	ldr	r3, [pc, #356]	; (800e8f4 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e78e:	0018      	movs	r0, r3
 800e790:	f00d ff56 	bl	801c640 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800e794:	4b54      	ldr	r3, [pc, #336]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e796:	2200      	movs	r2, #0
 800e798:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800e79a:	4b53      	ldr	r3, [pc, #332]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800e7a0:	2108      	movs	r1, #8
 800e7a2:	187b      	adds	r3, r7, r1
 800e7a4:	2204      	movs	r2, #4
 800e7a6:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e7a8:	4b50      	ldr	r3, [pc, #320]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	781a      	ldrb	r2, [r3, #0]
 800e7ae:	187b      	adds	r3, r7, r1
 800e7b0:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e7b2:	187b      	adds	r3, r7, r1
 800e7b4:	0018      	movs	r0, r3
 800e7b6:	f004 fdbd 	bl	8013334 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800e7ba:	4b4c      	ldr	r3, [pc, #304]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	785b      	ldrb	r3, [r3, #1]
 800e7c0:	0018      	movs	r0, r3
 800e7c2:	f005 fbe3 	bl	8013f8c <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800e7c6:	4b49      	ldr	r3, [pc, #292]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800e7d0:	4b46      	ldr	r3, [pc, #280]	; (800e8ec <LmhpComplianceOnMcpsIndication+0x394>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800e7d8:	4b49      	ldr	r3, [pc, #292]	; (800e900 <LmhpComplianceOnMcpsIndication+0x3a8>)
 800e7da:	6a1b      	ldr	r3, [r3, #32]
 800e7dc:	2002      	movs	r0, #2
 800e7de:	4798      	blx	r3
      }
      break;
 800e7e0:	e091      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7b1b      	ldrb	r3, [r3, #12]
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d114      	bne.n	800e814 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800e7ea:	2154      	movs	r1, #84	; 0x54
 800e7ec:	187b      	adds	r3, r7, r1
 800e7ee:	2205      	movs	r2, #5
 800e7f0:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	021b      	lsls	r3, r3, #8
 800e7fc:	b21a      	sxth	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	3302      	adds	r3, #2
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	b21b      	sxth	r3, r3
 800e808:	4313      	orrs	r3, r2
 800e80a:	b21b      	sxth	r3, r3
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	187b      	adds	r3, r7, r1
 800e810:	809a      	strh	r2, [r3, #4]
 800e812:	e031      	b.n	800e878 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7b1b      	ldrb	r3, [r3, #12]
 800e818:	2b07      	cmp	r3, #7
 800e81a:	d12d      	bne.n	800e878 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800e81c:	2154      	movs	r1, #84	; 0x54
 800e81e:	187b      	adds	r3, r7, r1
 800e820:	2206      	movs	r2, #6
 800e822:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	3301      	adds	r3, #1
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	021b      	lsls	r3, r3, #8
 800e82e:	b21a      	sxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	689b      	ldr	r3, [r3, #8]
 800e834:	3302      	adds	r3, #2
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	b21b      	sxth	r3, r3
 800e83a:	4313      	orrs	r3, r2
 800e83c:	b21b      	sxth	r3, r3
 800e83e:	b29a      	uxth	r2, r3
 800e840:	187b      	adds	r3, r7, r1
 800e842:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	3303      	adds	r3, #3
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	041a      	lsls	r2, r3, #16
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	3304      	adds	r3, #4
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	021b      	lsls	r3, r3, #8
 800e858:	431a      	orrs	r2, r3
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	3305      	adds	r3, #5
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	4313      	orrs	r3, r2
 800e864:	001a      	movs	r2, r3
 800e866:	2364      	movs	r3, #100	; 0x64
 800e868:	435a      	muls	r2, r3
 800e86a:	187b      	adds	r3, r7, r1
 800e86c:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	799a      	ldrb	r2, [r3, #6]
 800e874:	187b      	adds	r3, r7, r1
 800e876:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800e878:	2354      	movs	r3, #84	; 0x54
 800e87a:	18fb      	adds	r3, r7, r3
 800e87c:	0018      	movs	r0, r3
 800e87e:	f005 f8df 	bl	8013a40 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800e882:	4b19      	ldr	r3, [pc, #100]	; (800e8e8 <LmhpComplianceOnMcpsIndication+0x390>)
 800e884:	2201      	movs	r2, #1
 800e886:	709a      	strb	r2, [r3, #2]
      }
      break;
 800e888:	e03d      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800e88a:	2140      	movs	r1, #64	; 0x40
 800e88c:	187b      	adds	r3, r7, r1
 800e88e:	220a      	movs	r2, #10
 800e890:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800e892:	187b      	adds	r3, r7, r1
 800e894:	0018      	movs	r0, r3
 800e896:	f005 f8d3 	bl	8013a40 <LoRaMacMlmeRequest>
      }
      break;
 800e89a:	e034      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800e89c:	2108      	movs	r1, #8
 800e89e:	187b      	adds	r3, r7, r1
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	781a      	ldrb	r2, [r3, #0]
 800e8ac:	187b      	adds	r3, r7, r1
 800e8ae:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e8b0:	187b      	adds	r3, r7, r1
 800e8b2:	0018      	movs	r0, r3
 800e8b4:	f004 fd3e 	bl	8013334 <LoRaMacMibSetRequestConfirm>
      }
      break;
 800e8b8:	e025      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e8ba:	212c      	movs	r1, #44	; 0x2c
 800e8bc:	187b      	adds	r3, r7, r1
 800e8be:	220d      	movs	r2, #13
 800e8c0:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	785a      	ldrb	r2, [r3, #1]
 800e8c8:	187b      	adds	r3, r7, r1
 800e8ca:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800e8cc:	187b      	adds	r3, r7, r1
 800e8ce:	0018      	movs	r0, r3
 800e8d0:	f005 f8b6 	bl	8013a40 <LoRaMacMlmeRequest>
      }
      break;
 800e8d4:	e017      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e8d6:	46c0      	nop			; (mov r8, r8)
 800e8d8:	e015      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e8da:	46c0      	nop			; (mov r8, r8)
 800e8dc:	e013      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e8de:	46c0      	nop			; (mov r8, r8)
 800e8e0:	e011      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800e8e2:	46c0      	nop			; (mov r8, r8)
 800e8e4:	e00f      	b.n	800e906 <LmhpComplianceOnMcpsIndication+0x3ae>
 800e8e6:	46c0      	nop			; (mov r8, r8)
 800e8e8:	2000059c 	.word	0x2000059c
 800e8ec:	200005b0 	.word	0x200005b0
 800e8f0:	0800e917 	.word	0x0800e917
 800e8f4:	20000584 	.word	0x20000584
 800e8f8:	00004e20 	.word	0x00004e20
 800e8fc:	0801ee58 	.word	0x0801ee58
 800e900:	20000178 	.word	0x20000178
      break;
 800e904:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800e906:	46bd      	mov	sp, r7
 800e908:	b020      	add	sp, #128	; 0x80
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800e910:	46c0      	nop			; (mov r8, r8)
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b082      	sub	sp, #8
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800e91e:	f7ff fdad 	bl	800e47c <LmhpComplianceTxProcess>
}
 800e922:	46c0      	nop			; (mov r8, r8)
 800e924:	46bd      	mov	sp, r7
 800e926:	b002      	add	sp, #8
 800e928:	bd80      	pop	{r7, pc}

0800e92a <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b082      	sub	sp, #8
 800e92e:	af00      	add	r7, sp, #0
 800e930:	0002      	movs	r2, r0
 800e932:	1dfb      	adds	r3, r7, #7
 800e934:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e936:	46c0      	nop			; (mov r8, r8)
 800e938:	46bd      	mov	sp, r7
 800e93a:	b002      	add	sp, #8
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800e93e:	b580      	push	{r7, lr}
 800e940:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800e942:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e944:	0018      	movs	r0, r3
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800e94e:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e950:	0018      	movs	r0, r3
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800e958:	b5b0      	push	{r4, r5, r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e95e:	f00d ff9f 	bl	801c8a0 <UTIL_TIMER_GetCurrentTime>
 800e962:	0002      	movs	r2, r0
 800e964:	4b17      	ldr	r3, [pc, #92]	; (800e9c4 <OnRadioTxDone+0x6c>)
 800e966:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e968:	4d17      	ldr	r5, [pc, #92]	; (800e9c8 <OnRadioTxDone+0x70>)
 800e96a:	23ce      	movs	r3, #206	; 0xce
 800e96c:	009c      	lsls	r4, r3, #2
 800e96e:	003b      	movs	r3, r7
 800e970:	0018      	movs	r0, r3
 800e972:	f00d fd43 	bl	801c3fc <SysTimeGet>
 800e976:	003a      	movs	r2, r7
 800e978:	192b      	adds	r3, r5, r4
 800e97a:	ca03      	ldmia	r2!, {r0, r1}
 800e97c:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e97e:	4b13      	ldr	r3, [pc, #76]	; (800e9cc <OnRadioTxDone+0x74>)
 800e980:	781a      	ldrb	r2, [r3, #0]
 800e982:	2110      	movs	r1, #16
 800e984:	430a      	orrs	r2, r1
 800e986:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e988:	4a0f      	ldr	r2, [pc, #60]	; (800e9c8 <OnRadioTxDone+0x70>)
 800e98a:	23d2      	movs	r3, #210	; 0xd2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	58d3      	ldr	r3, [r2, r3]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00c      	beq.n	800e9ae <OnRadioTxDone+0x56>
 800e994:	4a0c      	ldr	r2, [pc, #48]	; (800e9c8 <OnRadioTxDone+0x70>)
 800e996:	23d2      	movs	r3, #210	; 0xd2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	58d3      	ldr	r3, [r2, r3]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d005      	beq.n	800e9ae <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e9a2:	4a09      	ldr	r2, [pc, #36]	; (800e9c8 <OnRadioTxDone+0x70>)
 800e9a4:	23d2      	movs	r3, #210	; 0xd2
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	58d3      	ldr	r3, [r2, r3]
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e9ae:	4b08      	ldr	r3, [pc, #32]	; (800e9d0 <OnRadioTxDone+0x78>)
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	2002      	movs	r0, #2
 800e9b6:	f00c feff 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800e9ba:	46c0      	nop			; (mov r8, r8)
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	b002      	add	sp, #8
 800e9c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e9c2:	46c0      	nop			; (mov r8, r8)
 800e9c4:	20001728 	.word	0x20001728
 800e9c8:	200005b4 	.word	0x200005b4
 800e9cc:	20000be4 	.word	0x20000be4
 800e9d0:	0801ee94 	.word	0x0801ee94

0800e9d4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e9d4:	b5b0      	push	{r4, r5, r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	000c      	movs	r4, r1
 800e9de:	0010      	movs	r0, r2
 800e9e0:	0019      	movs	r1, r3
 800e9e2:	250a      	movs	r5, #10
 800e9e4:	197b      	adds	r3, r7, r5
 800e9e6:	1c22      	adds	r2, r4, #0
 800e9e8:	801a      	strh	r2, [r3, #0]
 800e9ea:	2408      	movs	r4, #8
 800e9ec:	193b      	adds	r3, r7, r4
 800e9ee:	1c02      	adds	r2, r0, #0
 800e9f0:	801a      	strh	r2, [r3, #0]
 800e9f2:	1dfb      	adds	r3, r7, #7
 800e9f4:	1c0a      	adds	r2, r1, #0
 800e9f6:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e9f8:	f00d ff52 	bl	801c8a0 <UTIL_TIMER_GetCurrentTime>
 800e9fc:	0002      	movs	r2, r0
 800e9fe:	4b19      	ldr	r3, [pc, #100]	; (800ea64 <OnRadioRxDone+0x90>)
 800ea00:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800ea02:	4b18      	ldr	r3, [pc, #96]	; (800ea64 <OnRadioRxDone+0x90>)
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800ea08:	4b16      	ldr	r3, [pc, #88]	; (800ea64 <OnRadioRxDone+0x90>)
 800ea0a:	197a      	adds	r2, r7, r5
 800ea0c:	8812      	ldrh	r2, [r2, #0]
 800ea0e:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800ea10:	4b14      	ldr	r3, [pc, #80]	; (800ea64 <OnRadioRxDone+0x90>)
 800ea12:	193a      	adds	r2, r7, r4
 800ea14:	8812      	ldrh	r2, [r2, #0]
 800ea16:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800ea18:	4b12      	ldr	r3, [pc, #72]	; (800ea64 <OnRadioRxDone+0x90>)
 800ea1a:	1dfa      	adds	r2, r7, #7
 800ea1c:	7812      	ldrb	r2, [r2, #0]
 800ea1e:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800ea20:	4b11      	ldr	r3, [pc, #68]	; (800ea68 <OnRadioRxDone+0x94>)
 800ea22:	781a      	ldrb	r2, [r3, #0]
 800ea24:	2108      	movs	r1, #8
 800ea26:	430a      	orrs	r2, r1
 800ea28:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea2a:	4a10      	ldr	r2, [pc, #64]	; (800ea6c <OnRadioRxDone+0x98>)
 800ea2c:	23d2      	movs	r3, #210	; 0xd2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	58d3      	ldr	r3, [r2, r3]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00c      	beq.n	800ea50 <OnRadioRxDone+0x7c>
 800ea36:	4a0d      	ldr	r2, [pc, #52]	; (800ea6c <OnRadioRxDone+0x98>)
 800ea38:	23d2      	movs	r3, #210	; 0xd2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	58d3      	ldr	r3, [r2, r3]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d005      	beq.n	800ea50 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea44:	4a09      	ldr	r2, [pc, #36]	; (800ea6c <OnRadioRxDone+0x98>)
 800ea46:	23d2      	movs	r3, #210	; 0xd2
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	58d3      	ldr	r3, [r2, r3]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800ea50:	4b07      	ldr	r3, [pc, #28]	; (800ea70 <OnRadioRxDone+0x9c>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	2100      	movs	r1, #0
 800ea56:	2002      	movs	r0, #2
 800ea58:	f00c feae 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ea5c:	46c0      	nop			; (mov r8, r8)
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	b004      	add	sp, #16
 800ea62:	bdb0      	pop	{r4, r5, r7, pc}
 800ea64:	2000172c 	.word	0x2000172c
 800ea68:	20000be4 	.word	0x20000be4
 800ea6c:	200005b4 	.word	0x200005b4
 800ea70:	0801eea4 	.word	0x0801eea4

0800ea74 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800ea78:	4b10      	ldr	r3, [pc, #64]	; (800eabc <OnRadioTxTimeout+0x48>)
 800ea7a:	781a      	ldrb	r2, [r3, #0]
 800ea7c:	2104      	movs	r1, #4
 800ea7e:	430a      	orrs	r2, r1
 800ea80:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea82:	4a0f      	ldr	r2, [pc, #60]	; (800eac0 <OnRadioTxTimeout+0x4c>)
 800ea84:	23d2      	movs	r3, #210	; 0xd2
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	58d3      	ldr	r3, [r2, r3]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00c      	beq.n	800eaa8 <OnRadioTxTimeout+0x34>
 800ea8e:	4a0c      	ldr	r2, [pc, #48]	; (800eac0 <OnRadioTxTimeout+0x4c>)
 800ea90:	23d2      	movs	r3, #210	; 0xd2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	58d3      	ldr	r3, [r2, r3]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d005      	beq.n	800eaa8 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea9c:	4a08      	ldr	r2, [pc, #32]	; (800eac0 <OnRadioTxTimeout+0x4c>)
 800ea9e:	23d2      	movs	r3, #210	; 0xd2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	58d3      	ldr	r3, [r2, r3]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800eaa8:	4b06      	ldr	r3, [pc, #24]	; (800eac4 <OnRadioTxTimeout+0x50>)
 800eaaa:	2201      	movs	r2, #1
 800eaac:	2100      	movs	r1, #0
 800eaae:	2002      	movs	r0, #2
 800eab0:	f00c fe82 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800eab4:	46c0      	nop			; (mov r8, r8)
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	46c0      	nop			; (mov r8, r8)
 800eabc:	20000be4 	.word	0x20000be4
 800eac0:	200005b4 	.word	0x200005b4
 800eac4:	0801eeb4 	.word	0x0801eeb4

0800eac8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800eacc:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <OnRadioRxError+0x3c>)
 800eace:	781a      	ldrb	r2, [r3, #0]
 800ead0:	2102      	movs	r1, #2
 800ead2:	430a      	orrs	r2, r1
 800ead4:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ead6:	4a0c      	ldr	r2, [pc, #48]	; (800eb08 <OnRadioRxError+0x40>)
 800ead8:	23d2      	movs	r3, #210	; 0xd2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	58d3      	ldr	r3, [r2, r3]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00c      	beq.n	800eafc <OnRadioRxError+0x34>
 800eae2:	4a09      	ldr	r2, [pc, #36]	; (800eb08 <OnRadioRxError+0x40>)
 800eae4:	23d2      	movs	r3, #210	; 0xd2
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	58d3      	ldr	r3, [r2, r3]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d005      	beq.n	800eafc <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eaf0:	4a05      	ldr	r2, [pc, #20]	; (800eb08 <OnRadioRxError+0x40>)
 800eaf2:	23d2      	movs	r3, #210	; 0xd2
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	58d3      	ldr	r3, [r2, r3]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	4798      	blx	r3
    }
}
 800eafc:	46c0      	nop			; (mov r8, r8)
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	46c0      	nop			; (mov r8, r8)
 800eb04:	20000be4 	.word	0x20000be4
 800eb08:	200005b4 	.word	0x200005b4

0800eb0c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800eb10:	4b10      	ldr	r3, [pc, #64]	; (800eb54 <OnRadioRxTimeout+0x48>)
 800eb12:	781a      	ldrb	r2, [r3, #0]
 800eb14:	2101      	movs	r1, #1
 800eb16:	430a      	orrs	r2, r1
 800eb18:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eb1a:	4a0f      	ldr	r2, [pc, #60]	; (800eb58 <OnRadioRxTimeout+0x4c>)
 800eb1c:	23d2      	movs	r3, #210	; 0xd2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	58d3      	ldr	r3, [r2, r3]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00c      	beq.n	800eb40 <OnRadioRxTimeout+0x34>
 800eb26:	4a0c      	ldr	r2, [pc, #48]	; (800eb58 <OnRadioRxTimeout+0x4c>)
 800eb28:	23d2      	movs	r3, #210	; 0xd2
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	58d3      	ldr	r3, [r2, r3]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d005      	beq.n	800eb40 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eb34:	4a08      	ldr	r2, [pc, #32]	; (800eb58 <OnRadioRxTimeout+0x4c>)
 800eb36:	23d2      	movs	r3, #210	; 0xd2
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	58d3      	ldr	r3, [r2, r3]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800eb40:	4b06      	ldr	r3, [pc, #24]	; (800eb5c <OnRadioRxTimeout+0x50>)
 800eb42:	2201      	movs	r2, #1
 800eb44:	2100      	movs	r1, #0
 800eb46:	2002      	movs	r0, #2
 800eb48:	f00c fe36 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb4c:	46c0      	nop			; (mov r8, r8)
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	46c0      	nop			; (mov r8, r8)
 800eb54:	20000be4 	.word	0x20000be4
 800eb58:	200005b4 	.word	0x200005b4
 800eb5c:	0801eec4 	.word	0x0801eec4

0800eb60 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800eb64:	4b0a      	ldr	r3, [pc, #40]	; (800eb90 <UpdateRxSlotIdleState+0x30>)
 800eb66:	4a0b      	ldr	r2, [pc, #44]	; (800eb94 <UpdateRxSlotIdleState+0x34>)
 800eb68:	589b      	ldr	r3, [r3, r2]
 800eb6a:	227c      	movs	r2, #124	; 0x7c
 800eb6c:	5c9b      	ldrb	r3, [r3, r2]
 800eb6e:	2b02      	cmp	r3, #2
 800eb70:	d005      	beq.n	800eb7e <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800eb72:	4a07      	ldr	r2, [pc, #28]	; (800eb90 <UpdateRxSlotIdleState+0x30>)
 800eb74:	2390      	movs	r3, #144	; 0x90
 800eb76:	00db      	lsls	r3, r3, #3
 800eb78:	2106      	movs	r1, #6
 800eb7a:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800eb7c:	e004      	b.n	800eb88 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800eb7e:	4a04      	ldr	r2, [pc, #16]	; (800eb90 <UpdateRxSlotIdleState+0x30>)
 800eb80:	2390      	movs	r3, #144	; 0x90
 800eb82:	00db      	lsls	r3, r3, #3
 800eb84:	2102      	movs	r1, #2
 800eb86:	54d1      	strb	r1, [r2, r3]
}
 800eb88:	46c0      	nop			; (mov r8, r8)
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	46c0      	nop			; (mov r8, r8)
 800eb90:	200005b4 	.word	0x200005b4
 800eb94:	00000484 	.word	0x00000484

0800eb98 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800eb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb9a:	b08f      	sub	sp, #60	; 0x3c
 800eb9c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800eb9e:	4b59      	ldr	r3, [pc, #356]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800eba0:	4a59      	ldr	r2, [pc, #356]	; (800ed08 <ProcessRadioTxDone+0x170>)
 800eba2:	589b      	ldr	r3, [r3, r2]
 800eba4:	227c      	movs	r2, #124	; 0x7c
 800eba6:	5c9b      	ldrb	r3, [r3, r2]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d002      	beq.n	800ebb2 <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800ebac:	4b57      	ldr	r3, [pc, #348]	; (800ed0c <ProcessRadioTxDone+0x174>)
 800ebae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb0:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800ebb2:	4a54      	ldr	r2, [pc, #336]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ebb4:	23ec      	movs	r3, #236	; 0xec
 800ebb6:	009b      	lsls	r3, r3, #2
 800ebb8:	58d2      	ldr	r2, [r2, r3]
 800ebba:	4b55      	ldr	r3, [pc, #340]	; (800ed10 <ProcessRadioTxDone+0x178>)
 800ebbc:	0011      	movs	r1, r2
 800ebbe:	0018      	movs	r0, r3
 800ebc0:	f00d fdb6 	bl	801c730 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800ebc4:	4b52      	ldr	r3, [pc, #328]	; (800ed10 <ProcessRadioTxDone+0x178>)
 800ebc6:	0018      	movs	r0, r3
 800ebc8:	f00d fcc2 	bl	801c550 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800ebcc:	4a4d      	ldr	r2, [pc, #308]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ebce:	23ed      	movs	r3, #237	; 0xed
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	58d2      	ldr	r2, [r2, r3]
 800ebd4:	4b4f      	ldr	r3, [pc, #316]	; (800ed14 <ProcessRadioTxDone+0x17c>)
 800ebd6:	0011      	movs	r1, r2
 800ebd8:	0018      	movs	r0, r3
 800ebda:	f00d fda9 	bl	801c730 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800ebde:	4b4d      	ldr	r3, [pc, #308]	; (800ed14 <ProcessRadioTxDone+0x17c>)
 800ebe0:	0018      	movs	r0, r3
 800ebe2:	f00d fcb5 	bl	801c550 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800ebe6:	4b47      	ldr	r3, [pc, #284]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ebe8:	4a47      	ldr	r2, [pc, #284]	; (800ed08 <ProcessRadioTxDone+0x170>)
 800ebea:	589b      	ldr	r3, [r3, r2]
 800ebec:	227c      	movs	r2, #124	; 0x7c
 800ebee:	5c9b      	ldrb	r3, [r3, r2]
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d004      	beq.n	800ebfe <ProcessRadioTxDone+0x66>
 800ebf4:	4b43      	ldr	r3, [pc, #268]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ebf6:	4a48      	ldr	r2, [pc, #288]	; (800ed18 <ProcessRadioTxDone+0x180>)
 800ebf8:	5c9b      	ldrb	r3, [r3, r2]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d021      	beq.n	800ec42 <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800ebfe:	2120      	movs	r1, #32
 800ec00:	187b      	adds	r3, r7, r1
 800ec02:	2216      	movs	r2, #22
 800ec04:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ec06:	4b3f      	ldr	r3, [pc, #252]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ec08:	4a3f      	ldr	r2, [pc, #252]	; (800ed08 <ProcessRadioTxDone+0x170>)
 800ec0a:	589b      	ldr	r3, [r3, r2]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	187a      	adds	r2, r7, r1
 800ec10:	0011      	movs	r1, r2
 800ec12:	0018      	movs	r0, r3
 800ec14:	f007 fccf 	bl	80165b6 <RegionGetPhyParam>
 800ec18:	0003      	movs	r3, r0
 800ec1a:	001a      	movs	r2, r3
 800ec1c:	211c      	movs	r1, #28
 800ec1e:	187b      	adds	r3, r7, r1
 800ec20:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ec22:	4a38      	ldr	r2, [pc, #224]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ec24:	23ed      	movs	r3, #237	; 0xed
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	58d2      	ldr	r2, [r2, r3]
 800ec2a:	187b      	adds	r3, r7, r1
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	18d2      	adds	r2, r2, r3
 800ec30:	4b3a      	ldr	r3, [pc, #232]	; (800ed1c <ProcessRadioTxDone+0x184>)
 800ec32:	0011      	movs	r1, r2
 800ec34:	0018      	movs	r0, r3
 800ec36:	f00d fd7b 	bl	801c730 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800ec3a:	4b38      	ldr	r3, [pc, #224]	; (800ed1c <ProcessRadioTxDone+0x184>)
 800ec3c:	0018      	movs	r0, r3
 800ec3e:	f00d fc87 	bl	801c550 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800ec42:	4b30      	ldr	r3, [pc, #192]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ec44:	4a30      	ldr	r2, [pc, #192]	; (800ed08 <ProcessRadioTxDone+0x170>)
 800ec46:	589a      	ldr	r2, [r3, r2]
 800ec48:	4b35      	ldr	r3, [pc, #212]	; (800ed20 <ProcessRadioTxDone+0x188>)
 800ec4a:	6819      	ldr	r1, [r3, #0]
 800ec4c:	23a8      	movs	r3, #168	; 0xa8
 800ec4e:	005b      	lsls	r3, r3, #1
 800ec50:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ec52:	4b2c      	ldr	r3, [pc, #176]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ec54:	4a33      	ldr	r2, [pc, #204]	; (800ed24 <ProcessRadioTxDone+0x18c>)
 800ec56:	5c9a      	ldrb	r2, [r3, r2]
 800ec58:	2408      	movs	r4, #8
 800ec5a:	193b      	adds	r3, r7, r4
 800ec5c:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ec5e:	4b30      	ldr	r3, [pc, #192]	; (800ed20 <ProcessRadioTxDone+0x188>)
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	193b      	adds	r3, r7, r4
 800ec64:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800ec66:	2328      	movs	r3, #40	; 0x28
 800ec68:	18fb      	adds	r3, r7, r3
 800ec6a:	0018      	movs	r0, r3
 800ec6c:	f00d fc08 	bl	801c480 <SysTimeGetMcuTime>
 800ec70:	4b24      	ldr	r3, [pc, #144]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ec72:	4a25      	ldr	r2, [pc, #148]	; (800ed08 <ProcessRadioTxDone+0x170>)
 800ec74:	5898      	ldr	r0, [r3, r2]
 800ec76:	193d      	adds	r5, r7, r4
 800ec78:	003e      	movs	r6, r7
 800ec7a:	23ac      	movs	r3, #172	; 0xac
 800ec7c:	0059      	lsls	r1, r3, #1
 800ec7e:	2328      	movs	r3, #40	; 0x28
 800ec80:	18fa      	adds	r2, r7, r3
 800ec82:	2404      	movs	r4, #4
 800ec84:	1843      	adds	r3, r0, r1
 800ec86:	191c      	adds	r4, r3, r4
 800ec88:	466b      	mov	r3, sp
 800ec8a:	6824      	ldr	r4, [r4, #0]
 800ec8c:	601c      	str	r4, [r3, #0]
 800ec8e:	5843      	ldr	r3, [r0, r1]
 800ec90:	6811      	ldr	r1, [r2, #0]
 800ec92:	6852      	ldr	r2, [r2, #4]
 800ec94:	0030      	movs	r0, r6
 800ec96:	f00d fb25 	bl	801c2e4 <SysTimeSub>
 800ec9a:	003a      	movs	r2, r7
 800ec9c:	002b      	movs	r3, r5
 800ec9e:	330c      	adds	r3, #12
 800eca0:	ca21      	ldmia	r2!, {r0, r5}
 800eca2:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800eca4:	4a17      	ldr	r2, [pc, #92]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800eca6:	2383      	movs	r3, #131	; 0x83
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	58d2      	ldr	r2, [r2, r3]
 800ecac:	2108      	movs	r1, #8
 800ecae:	187b      	adds	r3, r7, r1
 800ecb0:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800ecb2:	187b      	adds	r3, r7, r1
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800ecb8:	4b12      	ldr	r3, [pc, #72]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ecba:	4a13      	ldr	r2, [pc, #76]	; (800ed08 <ProcessRadioTxDone+0x170>)
 800ecbc:	589a      	ldr	r2, [r3, r2]
 800ecbe:	23b2      	movs	r3, #178	; 0xb2
 800ecc0:	005b      	lsls	r3, r3, #1
 800ecc2:	5cd3      	ldrb	r3, [r2, r3]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d102      	bne.n	800ecce <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800ecc8:	187b      	adds	r3, r7, r1
 800ecca:	2200      	movs	r2, #0
 800eccc:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800ecce:	4b0d      	ldr	r3, [pc, #52]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ecd0:	4a0d      	ldr	r2, [pc, #52]	; (800ed08 <ProcessRadioTxDone+0x170>)
 800ecd2:	589b      	ldr	r3, [r3, r2]
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	2208      	movs	r2, #8
 800ecd8:	18ba      	adds	r2, r7, r2
 800ecda:	0011      	movs	r1, r2
 800ecdc:	0018      	movs	r0, r3
 800ecde:	f007 fc92 	bl	8016606 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800ece2:	4b08      	ldr	r3, [pc, #32]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ece4:	4a0c      	ldr	r2, [pc, #48]	; (800ed18 <ProcessRadioTxDone+0x180>)
 800ece6:	5c9b      	ldrb	r3, [r3, r2]
 800ece8:	2201      	movs	r2, #1
 800ecea:	4053      	eors	r3, r2
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d003      	beq.n	800ecfa <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ecf2:	4b04      	ldr	r3, [pc, #16]	; (800ed04 <ProcessRadioTxDone+0x16c>)
 800ecf4:	4a0c      	ldr	r2, [pc, #48]	; (800ed28 <ProcessRadioTxDone+0x190>)
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	5499      	strb	r1, [r3, r2]
    }
}
 800ecfa:	46c0      	nop			; (mov r8, r8)
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	b00d      	add	sp, #52	; 0x34
 800ed00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed02:	46c0      	nop			; (mov r8, r8)
 800ed04:	200005b4 	.word	0x200005b4
 800ed08:	00000484 	.word	0x00000484
 800ed0c:	0801f358 	.word	0x0801f358
 800ed10:	20000934 	.word	0x20000934
 800ed14:	2000094c 	.word	0x2000094c
 800ed18:	00000414 	.word	0x00000414
 800ed1c:	200009ac 	.word	0x200009ac
 800ed20:	20001728 	.word	0x20001728
 800ed24:	00000415 	.word	0x00000415
 800ed28:	0000043d 	.word	0x0000043d

0800ed2c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ed30:	4a11      	ldr	r2, [pc, #68]	; (800ed78 <PrepareRxDoneAbort+0x4c>)
 800ed32:	23d0      	movs	r3, #208	; 0xd0
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	58d3      	ldr	r3, [r2, r3]
 800ed38:	2280      	movs	r2, #128	; 0x80
 800ed3a:	431a      	orrs	r2, r3
 800ed3c:	0011      	movs	r1, r2
 800ed3e:	4a0e      	ldr	r2, [pc, #56]	; (800ed78 <PrepareRxDoneAbort+0x4c>)
 800ed40:	23d0      	movs	r3, #208	; 0xd0
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800ed46:	4b0c      	ldr	r3, [pc, #48]	; (800ed78 <PrepareRxDoneAbort+0x4c>)
 800ed48:	4a0c      	ldr	r2, [pc, #48]	; (800ed7c <PrepareRxDoneAbort+0x50>)
 800ed4a:	5c9b      	ldrb	r3, [r3, r2]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800ed50:	2000      	movs	r0, #0
 800ed52:	f001 f98d 	bl	8010070 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800ed56:	4b08      	ldr	r3, [pc, #32]	; (800ed78 <PrepareRxDoneAbort+0x4c>)
 800ed58:	4a09      	ldr	r2, [pc, #36]	; (800ed80 <PrepareRxDoneAbort+0x54>)
 800ed5a:	5c99      	ldrb	r1, [r3, r2]
 800ed5c:	2002      	movs	r0, #2
 800ed5e:	4301      	orrs	r1, r0
 800ed60:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ed62:	4b05      	ldr	r3, [pc, #20]	; (800ed78 <PrepareRxDoneAbort+0x4c>)
 800ed64:	4a06      	ldr	r2, [pc, #24]	; (800ed80 <PrepareRxDoneAbort+0x54>)
 800ed66:	5c99      	ldrb	r1, [r3, r2]
 800ed68:	2020      	movs	r0, #32
 800ed6a:	4301      	orrs	r1, r0
 800ed6c:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800ed6e:	f7ff fef7 	bl	800eb60 <UpdateRxSlotIdleState>
}
 800ed72:	46c0      	nop			; (mov r8, r8)
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	200005b4 	.word	0x200005b4
 800ed7c:	00000414 	.word	0x00000414
 800ed80:	00000481 	.word	0x00000481

0800ed84 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800ed84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed86:	b0a7      	sub	sp, #156	; 0x9c
 800ed88:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ed8a:	2380      	movs	r3, #128	; 0x80
 800ed8c:	18fb      	adds	r3, r7, r3
 800ed8e:	2213      	movs	r2, #19
 800ed90:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800ed92:	4bdf      	ldr	r3, [pc, #892]	; (800f110 <ProcessRadioRxDone+0x38c>)
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800ed98:	267a      	movs	r6, #122	; 0x7a
 800ed9a:	19bb      	adds	r3, r7, r6
 800ed9c:	4adc      	ldr	r2, [pc, #880]	; (800f110 <ProcessRadioRxDone+0x38c>)
 800ed9e:	8912      	ldrh	r2, [r2, #8]
 800eda0:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800eda2:	2478      	movs	r4, #120	; 0x78
 800eda4:	193b      	adds	r3, r7, r4
 800eda6:	4ada      	ldr	r2, [pc, #872]	; (800f110 <ProcessRadioRxDone+0x38c>)
 800eda8:	8952      	ldrh	r2, [r2, #10]
 800edaa:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800edac:	2577      	movs	r5, #119	; 0x77
 800edae:	197b      	adds	r3, r7, r5
 800edb0:	4ad7      	ldr	r2, [pc, #860]	; (800f110 <ProcessRadioRxDone+0x38c>)
 800edb2:	7b12      	ldrb	r2, [r2, #12]
 800edb4:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800edb6:	2376      	movs	r3, #118	; 0x76
 800edb8:	18fb      	adds	r3, r7, r3
 800edba:	2200      	movs	r2, #0
 800edbc:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800edc2:	4bd4      	ldr	r3, [pc, #848]	; (800f114 <ProcessRadioRxDone+0x390>)
 800edc4:	4ad4      	ldr	r2, [pc, #848]	; (800f118 <ProcessRadioRxDone+0x394>)
 800edc6:	589b      	ldr	r3, [r3, r2]
 800edc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edca:	2284      	movs	r2, #132	; 0x84
 800edcc:	18ba      	adds	r2, r7, r2
 800edce:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800edd0:	2383      	movs	r3, #131	; 0x83
 800edd2:	18fb      	adds	r3, r7, r3
 800edd4:	2200      	movs	r2, #0
 800edd6:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800edd8:	2382      	movs	r3, #130	; 0x82
 800edda:	18fb      	adds	r3, r7, r3
 800eddc:	2201      	movs	r2, #1
 800edde:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800ede0:	4acc      	ldr	r2, [pc, #816]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ede2:	2388      	movs	r3, #136	; 0x88
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	2100      	movs	r1, #0
 800ede8:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800edea:	4bca      	ldr	r3, [pc, #808]	; (800f114 <ProcessRadioRxDone+0x390>)
 800edec:	193a      	adds	r2, r7, r4
 800edee:	49cb      	ldr	r1, [pc, #812]	; (800f11c <ProcessRadioRxDone+0x398>)
 800edf0:	8812      	ldrh	r2, [r2, #0]
 800edf2:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800edf4:	4bc7      	ldr	r3, [pc, #796]	; (800f114 <ProcessRadioRxDone+0x390>)
 800edf6:	197a      	adds	r2, r7, r5
 800edf8:	49c9      	ldr	r1, [pc, #804]	; (800f120 <ProcessRadioRxDone+0x39c>)
 800edfa:	7812      	ldrb	r2, [r2, #0]
 800edfc:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800edfe:	4ac5      	ldr	r2, [pc, #788]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee00:	2390      	movs	r3, #144	; 0x90
 800ee02:	00db      	lsls	r3, r3, #3
 800ee04:	5cd1      	ldrb	r1, [r2, r3]
 800ee06:	4bc3      	ldr	r3, [pc, #780]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee08:	4ac6      	ldr	r2, [pc, #792]	; (800f124 <ProcessRadioRxDone+0x3a0>)
 800ee0a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800ee0c:	4bc1      	ldr	r3, [pc, #772]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee0e:	4ac6      	ldr	r2, [pc, #792]	; (800f128 <ProcessRadioRxDone+0x3a4>)
 800ee10:	2100      	movs	r1, #0
 800ee12:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800ee14:	4bbf      	ldr	r3, [pc, #764]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee16:	4ac5      	ldr	r2, [pc, #788]	; (800f12c <ProcessRadioRxDone+0x3a8>)
 800ee18:	2100      	movs	r1, #0
 800ee1a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800ee1c:	4bbd      	ldr	r3, [pc, #756]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee1e:	4ac4      	ldr	r2, [pc, #784]	; (800f130 <ProcessRadioRxDone+0x3ac>)
 800ee20:	2100      	movs	r1, #0
 800ee22:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800ee24:	4bbb      	ldr	r3, [pc, #748]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee26:	4ac3      	ldr	r2, [pc, #780]	; (800f134 <ProcessRadioRxDone+0x3b0>)
 800ee28:	2100      	movs	r1, #0
 800ee2a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800ee2c:	4ab9      	ldr	r2, [pc, #740]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee2e:	2385      	movs	r3, #133	; 0x85
 800ee30:	00db      	lsls	r3, r3, #3
 800ee32:	2100      	movs	r1, #0
 800ee34:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800ee36:	4bb7      	ldr	r3, [pc, #732]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee38:	4abf      	ldr	r2, [pc, #764]	; (800f138 <ProcessRadioRxDone+0x3b4>)
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800ee3e:	4bb5      	ldr	r3, [pc, #724]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee40:	4abe      	ldr	r2, [pc, #760]	; (800f13c <ProcessRadioRxDone+0x3b8>)
 800ee42:	2100      	movs	r1, #0
 800ee44:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ee46:	4ab3      	ldr	r2, [pc, #716]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee48:	2386      	movs	r3, #134	; 0x86
 800ee4a:	00db      	lsls	r3, r3, #3
 800ee4c:	2100      	movs	r1, #0
 800ee4e:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ee50:	4bb0      	ldr	r3, [pc, #704]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee52:	4abb      	ldr	r2, [pc, #748]	; (800f140 <ProcessRadioRxDone+0x3bc>)
 800ee54:	2100      	movs	r1, #0
 800ee56:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800ee58:	4bae      	ldr	r3, [pc, #696]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee5a:	4aba      	ldr	r2, [pc, #744]	; (800f144 <ProcessRadioRxDone+0x3c0>)
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ee60:	4aac      	ldr	r2, [pc, #688]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee62:	2387      	movs	r3, #135	; 0x87
 800ee64:	00db      	lsls	r3, r3, #3
 800ee66:	2100      	movs	r1, #0
 800ee68:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800ee6a:	4bb7      	ldr	r3, [pc, #732]	; (800f148 <ProcessRadioRxDone+0x3c4>)
 800ee6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6e:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800ee70:	4bb6      	ldr	r3, [pc, #728]	; (800f14c <ProcessRadioRxDone+0x3c8>)
 800ee72:	0018      	movs	r0, r3
 800ee74:	f00d fbe4 	bl	801c640 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ee78:	19bb      	adds	r3, r7, r6
 800ee7a:	881a      	ldrh	r2, [r3, #0]
 800ee7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee7e:	0011      	movs	r1, r2
 800ee80:	0018      	movs	r0, r3
 800ee82:	f005 f9f1 	bl	8014268 <LoRaMacClassBRxBeacon>
 800ee86:	1e03      	subs	r3, r0, #0
 800ee88:	d00c      	beq.n	800eea4 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800ee8a:	4ba2      	ldr	r3, [pc, #648]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee8c:	193a      	adds	r2, r7, r4
 800ee8e:	49b0      	ldr	r1, [pc, #704]	; (800f150 <ProcessRadioRxDone+0x3cc>)
 800ee90:	8812      	ldrh	r2, [r2, #0]
 800ee92:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ee94:	4a9f      	ldr	r2, [pc, #636]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ee96:	1979      	adds	r1, r7, r5
 800ee98:	238f      	movs	r3, #143	; 0x8f
 800ee9a:	00db      	lsls	r3, r3, #3
 800ee9c:	7809      	ldrb	r1, [r1, #0]
 800ee9e:	54d1      	strb	r1, [r2, r3]
        return;
 800eea0:	f000 fc9e 	bl	800f7e0 <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800eea4:	4b9b      	ldr	r3, [pc, #620]	; (800f114 <ProcessRadioRxDone+0x390>)
 800eea6:	4a9c      	ldr	r2, [pc, #624]	; (800f118 <ProcessRadioRxDone+0x394>)
 800eea8:	589b      	ldr	r3, [r3, r2]
 800eeaa:	227c      	movs	r2, #124	; 0x7c
 800eeac:	5c9b      	ldrb	r3, [r3, r2]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d11c      	bne.n	800eeec <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800eeb2:	f005 f9eb 	bl	801428c <LoRaMacClassBIsPingExpected>
 800eeb6:	1e03      	subs	r3, r0, #0
 800eeb8:	d00a      	beq.n	800eed0 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eeba:	2000      	movs	r0, #0
 800eebc:	f005 f9a2 	bl	8014204 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800eec0:	2000      	movs	r0, #0
 800eec2:	f005 f9c1 	bl	8014248 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800eec6:	4b93      	ldr	r3, [pc, #588]	; (800f114 <ProcessRadioRxDone+0x390>)
 800eec8:	4a96      	ldr	r2, [pc, #600]	; (800f124 <ProcessRadioRxDone+0x3a0>)
 800eeca:	2104      	movs	r1, #4
 800eecc:	5499      	strb	r1, [r3, r2]
 800eece:	e00d      	b.n	800eeec <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800eed0:	f005 f9e2 	bl	8014298 <LoRaMacClassBIsMulticastExpected>
 800eed4:	1e03      	subs	r3, r0, #0
 800eed6:	d009      	beq.n	800eeec <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eed8:	2000      	movs	r0, #0
 800eeda:	f005 f99d 	bl	8014218 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800eede:	2000      	movs	r0, #0
 800eee0:	f005 f9ba 	bl	8014258 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800eee4:	4b8b      	ldr	r3, [pc, #556]	; (800f114 <ProcessRadioRxDone+0x390>)
 800eee6:	4a8f      	ldr	r2, [pc, #572]	; (800f124 <ProcessRadioRxDone+0x3a0>)
 800eee8:	2105      	movs	r1, #5
 800eeea:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800eeec:	2276      	movs	r2, #118	; 0x76
 800eeee:	18bb      	adds	r3, r7, r2
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	18ba      	adds	r2, r7, r2
 800eef4:	1c59      	adds	r1, r3, #1
 800eef6:	7011      	strb	r1, [r2, #0]
 800eef8:	001a      	movs	r2, r3
 800eefa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eefc:	189b      	adds	r3, r3, r2
 800eefe:	781a      	ldrb	r2, [r3, #0]
 800ef00:	2174      	movs	r1, #116	; 0x74
 800ef02:	187b      	adds	r3, r7, r1
 800ef04:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800ef06:	187b      	adds	r3, r7, r1
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	061b      	lsls	r3, r3, #24
 800ef0c:	0f5b      	lsrs	r3, r3, #29
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	2b07      	cmp	r3, #7
 800ef12:	d101      	bne.n	800ef18 <ProcessRadioRxDone+0x194>
 800ef14:	f000 fc0c 	bl	800f730 <ProcessRadioRxDone+0x9ac>
 800ef18:	dd01      	ble.n	800ef1e <ProcessRadioRxDone+0x19a>
 800ef1a:	f000 fc38 	bl	800f78e <ProcessRadioRxDone+0xa0a>
 800ef1e:	2b05      	cmp	r3, #5
 800ef20:	d100      	bne.n	800ef24 <ProcessRadioRxDone+0x1a0>
 800ef22:	e119      	b.n	800f158 <ProcessRadioRxDone+0x3d4>
 800ef24:	dd01      	ble.n	800ef2a <ProcessRadioRxDone+0x1a6>
 800ef26:	f000 fc32 	bl	800f78e <ProcessRadioRxDone+0xa0a>
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d004      	beq.n	800ef38 <ProcessRadioRxDone+0x1b4>
 800ef2e:	2b03      	cmp	r3, #3
 800ef30:	d100      	bne.n	800ef34 <ProcessRadioRxDone+0x1b0>
 800ef32:	e115      	b.n	800f160 <ProcessRadioRxDone+0x3dc>
 800ef34:	f000 fc2b 	bl	800f78e <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ef38:	237a      	movs	r3, #122	; 0x7a
 800ef3a:	18fb      	adds	r3, r7, r3
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	2b10      	cmp	r3, #16
 800ef40:	d807      	bhi.n	800ef52 <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef42:	4b74      	ldr	r3, [pc, #464]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ef44:	4a83      	ldr	r2, [pc, #524]	; (800f154 <ProcessRadioRxDone+0x3d0>)
 800ef46:	2101      	movs	r1, #1
 800ef48:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ef4a:	f7ff feef 	bl	800ed2c <PrepareRxDoneAbort>
                return;
 800ef4e:	f000 fc47 	bl	800f7e0 <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800ef52:	2108      	movs	r1, #8
 800ef54:	187b      	adds	r3, r7, r1
 800ef56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ef58:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800ef5a:	237a      	movs	r3, #122	; 0x7a
 800ef5c:	18fb      	adds	r3, r7, r3
 800ef5e:	881b      	ldrh	r3, [r3, #0]
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	187b      	adds	r3, r7, r1
 800ef64:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800ef66:	4b6b      	ldr	r3, [pc, #428]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ef68:	4a6b      	ldr	r2, [pc, #428]	; (800f118 <ProcessRadioRxDone+0x394>)
 800ef6a:	589a      	ldr	r2, [r3, r2]
 800ef6c:	23b2      	movs	r3, #178	; 0xb2
 800ef6e:	005b      	lsls	r3, r3, #1
 800ef70:	5cd3      	ldrb	r3, [r2, r3]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d007      	beq.n	800ef86 <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef76:	4b67      	ldr	r3, [pc, #412]	; (800f114 <ProcessRadioRxDone+0x390>)
 800ef78:	4a76      	ldr	r2, [pc, #472]	; (800f154 <ProcessRadioRxDone+0x3d0>)
 800ef7a:	2101      	movs	r1, #1
 800ef7c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ef7e:	f7ff fed5 	bl	800ed2c <PrepareRxDoneAbort>
                return;
 800ef82:	f000 fc2d 	bl	800f7e0 <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ef86:	f7fe fba3 	bl	800d6d0 <SecureElementGetJoinEui>
 800ef8a:	0001      	movs	r1, r0
 800ef8c:	2680      	movs	r6, #128	; 0x80
 800ef8e:	19bc      	adds	r4, r7, r6
 800ef90:	2508      	movs	r5, #8
 800ef92:	197b      	adds	r3, r7, r5
 800ef94:	001a      	movs	r2, r3
 800ef96:	20ff      	movs	r0, #255	; 0xff
 800ef98:	f006 fcba 	bl	8015910 <LoRaMacCryptoHandleJoinAccept>
 800ef9c:	0003      	movs	r3, r0
 800ef9e:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800efa0:	19bb      	adds	r3, r7, r6
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d000      	beq.n	800efaa <ProcessRadioRxDone+0x226>
 800efa8:	e0a7      	b.n	800f0fa <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800efaa:	002c      	movs	r4, r5
 800efac:	193b      	adds	r3, r7, r4
 800efae:	7a59      	ldrb	r1, [r3, #9]
 800efb0:	4b58      	ldr	r3, [pc, #352]	; (800f114 <ProcessRadioRxDone+0x390>)
 800efb2:	4a59      	ldr	r2, [pc, #356]	; (800f118 <ProcessRadioRxDone+0x394>)
 800efb4:	589b      	ldr	r3, [r3, r2]
 800efb6:	000a      	movs	r2, r1
 800efb8:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800efba:	4b56      	ldr	r3, [pc, #344]	; (800f114 <ProcessRadioRxDone+0x390>)
 800efbc:	4a56      	ldr	r2, [pc, #344]	; (800f118 <ProcessRadioRxDone+0x394>)
 800efbe:	589b      	ldr	r3, [r3, r2]
 800efc0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800efc2:	193b      	adds	r3, r7, r4
 800efc4:	7a9b      	ldrb	r3, [r3, #10]
 800efc6:	021a      	lsls	r2, r3, #8
 800efc8:	4b52      	ldr	r3, [pc, #328]	; (800f114 <ProcessRadioRxDone+0x390>)
 800efca:	4853      	ldr	r0, [pc, #332]	; (800f118 <ProcessRadioRxDone+0x394>)
 800efcc:	581b      	ldr	r3, [r3, r0]
 800efce:	430a      	orrs	r2, r1
 800efd0:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800efd2:	4b50      	ldr	r3, [pc, #320]	; (800f114 <ProcessRadioRxDone+0x390>)
 800efd4:	4a50      	ldr	r2, [pc, #320]	; (800f118 <ProcessRadioRxDone+0x394>)
 800efd6:	589b      	ldr	r3, [r3, r2]
 800efd8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800efda:	193b      	adds	r3, r7, r4
 800efdc:	7adb      	ldrb	r3, [r3, #11]
 800efde:	041a      	lsls	r2, r3, #16
 800efe0:	4b4c      	ldr	r3, [pc, #304]	; (800f114 <ProcessRadioRxDone+0x390>)
 800efe2:	484d      	ldr	r0, [pc, #308]	; (800f118 <ProcessRadioRxDone+0x394>)
 800efe4:	581b      	ldr	r3, [r3, r0]
 800efe6:	430a      	orrs	r2, r1
 800efe8:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800efea:	4b4a      	ldr	r3, [pc, #296]	; (800f114 <ProcessRadioRxDone+0x390>)
 800efec:	4a4a      	ldr	r2, [pc, #296]	; (800f118 <ProcessRadioRxDone+0x394>)
 800efee:	589b      	ldr	r3, [r3, r2]
 800eff0:	0020      	movs	r0, r4
 800eff2:	183a      	adds	r2, r7, r0
 800eff4:	68d2      	ldr	r2, [r2, #12]
 800eff6:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800eff8:	183b      	adds	r3, r7, r0
 800effa:	7c1b      	ldrb	r3, [r3, #16]
 800effc:	065b      	lsls	r3, r3, #25
 800effe:	0f5b      	lsrs	r3, r3, #29
 800f000:	b2d9      	uxtb	r1, r3
 800f002:	4b44      	ldr	r3, [pc, #272]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f004:	4a44      	ldr	r2, [pc, #272]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f006:	589b      	ldr	r3, [r3, r2]
 800f008:	22a5      	movs	r2, #165	; 0xa5
 800f00a:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f00c:	183b      	adds	r3, r7, r0
 800f00e:	7c1b      	ldrb	r3, [r3, #16]
 800f010:	071b      	lsls	r3, r3, #28
 800f012:	0f1b      	lsrs	r3, r3, #28
 800f014:	b2d9      	uxtb	r1, r3
 800f016:	4b3f      	ldr	r3, [pc, #252]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f018:	4a3f      	ldr	r2, [pc, #252]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f01a:	589b      	ldr	r3, [r3, r2]
 800f01c:	22ac      	movs	r2, #172	; 0xac
 800f01e:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f020:	183b      	adds	r3, r7, r0
 800f022:	7c1b      	ldrb	r3, [r3, #16]
 800f024:	071b      	lsls	r3, r3, #28
 800f026:	0f1b      	lsrs	r3, r3, #28
 800f028:	b2d9      	uxtb	r1, r3
 800f02a:	4b3a      	ldr	r3, [pc, #232]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f02c:	4a3a      	ldr	r2, [pc, #232]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f02e:	589b      	ldr	r3, [r3, r2]
 800f030:	22b4      	movs	r2, #180	; 0xb4
 800f032:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f034:	183b      	adds	r3, r7, r0
 800f036:	7c59      	ldrb	r1, [r3, #17]
 800f038:	4b36      	ldr	r3, [pc, #216]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f03a:	4a37      	ldr	r2, [pc, #220]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f03c:	589b      	ldr	r3, [r3, r2]
 800f03e:	2294      	movs	r2, #148	; 0x94
 800f040:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800f042:	4b34      	ldr	r3, [pc, #208]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f044:	4a34      	ldr	r2, [pc, #208]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f046:	589b      	ldr	r3, [r3, r2]
 800f048:	2294      	movs	r2, #148	; 0x94
 800f04a:	589b      	ldr	r3, [r3, r2]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d105      	bne.n	800f05c <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800f050:	4b30      	ldr	r3, [pc, #192]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f052:	4a31      	ldr	r2, [pc, #196]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f054:	589b      	ldr	r3, [r3, r2]
 800f056:	2294      	movs	r2, #148	; 0x94
 800f058:	2101      	movs	r1, #1
 800f05a:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800f05c:	4b2d      	ldr	r3, [pc, #180]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f05e:	4a2e      	ldr	r2, [pc, #184]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f060:	589b      	ldr	r3, [r3, r2]
 800f062:	2294      	movs	r2, #148	; 0x94
 800f064:	589a      	ldr	r2, [r3, r2]
 800f066:	4b2b      	ldr	r3, [pc, #172]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f068:	492b      	ldr	r1, [pc, #172]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f06a:	5859      	ldr	r1, [r3, r1]
 800f06c:	0013      	movs	r3, r2
 800f06e:	015b      	lsls	r3, r3, #5
 800f070:	1a9b      	subs	r3, r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	189b      	adds	r3, r3, r2
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	001a      	movs	r2, r3
 800f07a:	2394      	movs	r3, #148	; 0x94
 800f07c:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f07e:	4b25      	ldr	r3, [pc, #148]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f080:	4a25      	ldr	r2, [pc, #148]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f082:	589b      	ldr	r3, [r3, r2]
 800f084:	2294      	movs	r2, #148	; 0x94
 800f086:	589b      	ldr	r3, [r3, r2]
 800f088:	4a22      	ldr	r2, [pc, #136]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f08a:	4923      	ldr	r1, [pc, #140]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f08c:	5852      	ldr	r2, [r2, r1]
 800f08e:	21fa      	movs	r1, #250	; 0xfa
 800f090:	0089      	lsls	r1, r1, #2
 800f092:	468c      	mov	ip, r1
 800f094:	4463      	add	r3, ip
 800f096:	2198      	movs	r1, #152	; 0x98
 800f098:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800f09a:	4b1e      	ldr	r3, [pc, #120]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f09c:	4a1e      	ldr	r2, [pc, #120]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f09e:	589a      	ldr	r2, [r3, r2]
 800f0a0:	23b1      	movs	r3, #177	; 0xb1
 800f0a2:	005b      	lsls	r3, r3, #1
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f0a8:	216c      	movs	r1, #108	; 0x6c
 800f0aa:	187b      	adds	r3, r7, r1
 800f0ac:	2208      	movs	r2, #8
 800f0ae:	18ba      	adds	r2, r7, r2
 800f0b0:	3212      	adds	r2, #18
 800f0b2:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f0b4:	237a      	movs	r3, #122	; 0x7a
 800f0b6:	18fb      	adds	r3, r7, r3
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	3b11      	subs	r3, #17
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	187b      	adds	r3, r7, r1
 800f0c2:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800f0c4:	4b13      	ldr	r3, [pc, #76]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f0c6:	4a14      	ldr	r2, [pc, #80]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f0c8:	589b      	ldr	r3, [r3, r2]
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	187a      	adds	r2, r7, r1
 800f0ce:	0011      	movs	r1, r2
 800f0d0:	0018      	movs	r0, r3
 800f0d2:	f007 faf4 	bl	80166be <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f0d6:	4b0f      	ldr	r3, [pc, #60]	; (800f114 <ProcessRadioRxDone+0x390>)
 800f0d8:	4a0f      	ldr	r2, [pc, #60]	; (800f118 <ProcessRadioRxDone+0x394>)
 800f0da:	589a      	ldr	r2, [r3, r2]
 800f0dc:	23b2      	movs	r3, #178	; 0xb2
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	2102      	movs	r1, #2
 800f0e2:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f0e4:	2001      	movs	r0, #1
 800f0e6:	f005 fe49 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 800f0ea:	1e03      	subs	r3, r0, #0
 800f0ec:	d100      	bne.n	800f0f0 <ProcessRadioRxDone+0x36c>
 800f0ee:	e355      	b.n	800f79c <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	f005 fda6 	bl	8014c44 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800f0f8:	e350      	b.n	800f79c <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f0fa:	2001      	movs	r0, #1
 800f0fc:	f005 fe3e 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 800f100:	1e03      	subs	r3, r0, #0
 800f102:	d100      	bne.n	800f106 <ProcessRadioRxDone+0x382>
 800f104:	e34a      	b.n	800f79c <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f106:	2101      	movs	r1, #1
 800f108:	2007      	movs	r0, #7
 800f10a:	f005 fd9b 	bl	8014c44 <LoRaMacConfirmQueueSetStatus>
            break;
 800f10e:	e345      	b.n	800f79c <ProcessRadioRxDone+0xa18>
 800f110:	2000172c 	.word	0x2000172c
 800f114:	200005b4 	.word	0x200005b4
 800f118:	00000484 	.word	0x00000484
 800f11c:	0000042a 	.word	0x0000042a
 800f120:	0000042c 	.word	0x0000042c
 800f124:	0000042d 	.word	0x0000042d
 800f128:	0000041f 	.word	0x0000041f
 800f12c:	0000041e 	.word	0x0000041e
 800f130:	00000421 	.word	0x00000421
 800f134:	00000424 	.word	0x00000424
 800f138:	00000429 	.word	0x00000429
 800f13c:	0000042e 	.word	0x0000042e
 800f140:	0000041c 	.word	0x0000041c
 800f144:	00000434 	.word	0x00000434
 800f148:	0801f358 	.word	0x0801f358
 800f14c:	2000094c 	.word	0x2000094c
 800f150:	00000476 	.word	0x00000476
 800f154:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f158:	4bd5      	ldr	r3, [pc, #852]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f15a:	4ad6      	ldr	r2, [pc, #856]	; (800f4b4 <ProcessRadioRxDone+0x730>)
 800f15c:	2101      	movs	r1, #1
 800f15e:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f160:	4bd3      	ldr	r3, [pc, #844]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f162:	4ad5      	ldr	r2, [pc, #852]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f164:	589b      	ldr	r3, [r3, r2]
 800f166:	22b9      	movs	r2, #185	; 0xb9
 800f168:	5c9a      	ldrb	r2, [r3, r2]
 800f16a:	2164      	movs	r1, #100	; 0x64
 800f16c:	187b      	adds	r3, r7, r1
 800f16e:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f170:	4acf      	ldr	r2, [pc, #828]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f172:	2384      	movs	r3, #132	; 0x84
 800f174:	00db      	lsls	r3, r3, #3
 800f176:	5cd3      	ldrb	r3, [r2, r3]
 800f178:	b25a      	sxtb	r2, r3
 800f17a:	187b      	adds	r3, r7, r1
 800f17c:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f17e:	187b      	adds	r3, r7, r1
 800f180:	220d      	movs	r2, #13
 800f182:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800f184:	4bca      	ldr	r3, [pc, #808]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f186:	4acc      	ldr	r2, [pc, #816]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f188:	589b      	ldr	r3, [r3, r2]
 800f18a:	22ca      	movs	r2, #202	; 0xca
 800f18c:	5c9b      	ldrb	r3, [r3, r2]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d002      	beq.n	800f198 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f192:	187b      	adds	r3, r7, r1
 800f194:	220e      	movs	r2, #14
 800f196:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f198:	4bc5      	ldr	r3, [pc, #788]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f19a:	4ac7      	ldr	r2, [pc, #796]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f19c:	589b      	ldr	r3, [r3, r2]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2264      	movs	r2, #100	; 0x64
 800f1a2:	18ba      	adds	r2, r7, r2
 800f1a4:	0011      	movs	r1, r2
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	f007 fa05 	bl	80165b6 <RegionGetPhyParam>
 800f1ac:	0003      	movs	r3, r0
 800f1ae:	001a      	movs	r2, r3
 800f1b0:	2360      	movs	r3, #96	; 0x60
 800f1b2:	18fb      	adds	r3, r7, r3
 800f1b4:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f1b6:	237a      	movs	r3, #122	; 0x7a
 800f1b8:	18fb      	adds	r3, r7, r3
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	3b0d      	subs	r3, #13
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	b21b      	sxth	r3, r3
 800f1c2:	1c1a      	adds	r2, r3, #0
 800f1c4:	b213      	sxth	r3, r2
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	da01      	bge.n	800f1ce <ProcessRadioRxDone+0x44a>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	1c1a      	adds	r2, r3, #0
 800f1ce:	b212      	sxth	r2, r2
 800f1d0:	2360      	movs	r3, #96	; 0x60
 800f1d2:	18fb      	adds	r3, r7, r3
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	b21b      	sxth	r3, r3
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	dc04      	bgt.n	800f1e6 <ProcessRadioRxDone+0x462>
 800f1dc:	237a      	movs	r3, #122	; 0x7a
 800f1de:	18fb      	adds	r3, r7, r3
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	2b0b      	cmp	r3, #11
 800f1e4:	d806      	bhi.n	800f1f4 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1e6:	4bb2      	ldr	r3, [pc, #712]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f1e8:	4ab4      	ldr	r2, [pc, #720]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f1ee:	f7ff fd9d 	bl	800ed2c <PrepareRxDoneAbort>
                return;
 800f1f2:	e2f5      	b.n	800f7e0 <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800f1f4:	2130      	movs	r1, #48	; 0x30
 800f1f6:	187b      	adds	r3, r7, r1
 800f1f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f1fa:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800f1fc:	237a      	movs	r3, #122	; 0x7a
 800f1fe:	18fb      	adds	r3, r7, r3
 800f200:	881b      	ldrh	r3, [r3, #0]
 800f202:	b2da      	uxtb	r2, r3
 800f204:	187b      	adds	r3, r7, r1
 800f206:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f208:	187b      	adds	r3, r7, r1
 800f20a:	4aad      	ldr	r2, [pc, #692]	; (800f4c0 <ProcessRadioRxDone+0x73c>)
 800f20c:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f20e:	0008      	movs	r0, r1
 800f210:	187b      	adds	r3, r7, r1
 800f212:	2228      	movs	r2, #40	; 0x28
 800f214:	21ff      	movs	r1, #255	; 0xff
 800f216:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f218:	183b      	adds	r3, r7, r0
 800f21a:	0018      	movs	r0, r3
 800f21c:	f006 fee4 	bl	8015fe8 <LoRaMacParserData>
 800f220:	1e03      	subs	r3, r0, #0
 800f222:	d006      	beq.n	800f232 <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f224:	4ba2      	ldr	r3, [pc, #648]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f226:	4aa5      	ldr	r2, [pc, #660]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f228:	2101      	movs	r1, #1
 800f22a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f22c:	f7ff fd7e 	bl	800ed2c <PrepareRxDoneAbort>
                return;
 800f230:	e2d6      	b.n	800f7e0 <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f232:	2030      	movs	r0, #48	; 0x30
 800f234:	183b      	adds	r3, r7, r0
 800f236:	689a      	ldr	r2, [r3, #8]
 800f238:	4b9d      	ldr	r3, [pc, #628]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f23a:	49a2      	ldr	r1, [pc, #648]	; (800f4c4 <ProcessRadioRxDone+0x740>)
 800f23c:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f23e:	1cba      	adds	r2, r7, #2
 800f240:	183b      	adds	r3, r7, r0
 800f242:	0011      	movs	r1, r2
 800f244:	0018      	movs	r0, r3
 800f246:	f003 f861 	bl	801230c <DetermineFrameType>
 800f24a:	1e03      	subs	r3, r0, #0
 800f24c:	d006      	beq.n	800f25c <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f24e:	4b98      	ldr	r3, [pc, #608]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f250:	4a9a      	ldr	r2, [pc, #616]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f252:	2101      	movs	r1, #1
 800f254:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f256:	f7ff fd69 	bl	800ed2c <PrepareRxDoneAbort>
                return;
 800f25a:	e2c1      	b.n	800f7e0 <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f25c:	2383      	movs	r3, #131	; 0x83
 800f25e:	18fb      	adds	r3, r7, r3
 800f260:	2200      	movs	r2, #0
 800f262:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800f264:	2300      	movs	r3, #0
 800f266:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f268:	2381      	movs	r3, #129	; 0x81
 800f26a:	18fb      	adds	r3, r7, r3
 800f26c:	2200      	movs	r2, #0
 800f26e:	701a      	strb	r2, [r3, #0]
 800f270:	e05b      	b.n	800f32a <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f272:	4b8f      	ldr	r3, [pc, #572]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f274:	4a90      	ldr	r2, [pc, #576]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f276:	589a      	ldr	r2, [r3, r2]
 800f278:	2481      	movs	r4, #129	; 0x81
 800f27a:	193b      	adds	r3, r7, r4
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	212c      	movs	r1, #44	; 0x2c
 800f280:	434b      	muls	r3, r1
 800f282:	18d3      	adds	r3, r2, r3
 800f284:	3354      	adds	r3, #84	; 0x54
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	2330      	movs	r3, #48	; 0x30
 800f28a:	18fb      	adds	r3, r7, r3
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d145      	bne.n	800f31e <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f292:	4b87      	ldr	r3, [pc, #540]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f294:	4a88      	ldr	r2, [pc, #544]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f296:	589a      	ldr	r2, [r3, r2]
 800f298:	193b      	adds	r3, r7, r4
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	2152      	movs	r1, #82	; 0x52
 800f29e:	202c      	movs	r0, #44	; 0x2c
 800f2a0:	4343      	muls	r3, r0
 800f2a2:	18d3      	adds	r3, r2, r3
 800f2a4:	185b      	adds	r3, r3, r1
 800f2a6:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d038      	beq.n	800f31e <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800f2ac:	2383      	movs	r3, #131	; 0x83
 800f2ae:	18fb      	adds	r3, r7, r3
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800f2b4:	4b7e      	ldr	r3, [pc, #504]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f2b6:	4a80      	ldr	r2, [pc, #512]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f2b8:	5899      	ldr	r1, [r3, r2]
 800f2ba:	0025      	movs	r5, r4
 800f2bc:	193b      	adds	r3, r7, r4
 800f2be:	781a      	ldrb	r2, [r3, #0]
 800f2c0:	2382      	movs	r3, #130	; 0x82
 800f2c2:	18fb      	adds	r3, r7, r3
 800f2c4:	2053      	movs	r0, #83	; 0x53
 800f2c6:	242c      	movs	r4, #44	; 0x2c
 800f2c8:	4362      	muls	r2, r4
 800f2ca:	188a      	adds	r2, r1, r2
 800f2cc:	1812      	adds	r2, r2, r0
 800f2ce:	7812      	ldrb	r2, [r2, #0]
 800f2d0:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800f2d2:	4b77      	ldr	r3, [pc, #476]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f2d4:	4a78      	ldr	r2, [pc, #480]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f2d6:	589a      	ldr	r2, [r3, r2]
 800f2d8:	002c      	movs	r4, r5
 800f2da:	193b      	adds	r3, r7, r4
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	212c      	movs	r1, #44	; 0x2c
 800f2e0:	434b      	muls	r3, r1
 800f2e2:	18d3      	adds	r3, r2, r3
 800f2e4:	3370      	adds	r3, #112	; 0x70
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800f2ec:	4b70      	ldr	r3, [pc, #448]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f2ee:	4a72      	ldr	r2, [pc, #456]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f2f0:	589a      	ldr	r2, [r3, r2]
 800f2f2:	193b      	adds	r3, r7, r4
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	212c      	movs	r1, #44	; 0x2c
 800f2f8:	434b      	muls	r3, r1
 800f2fa:	18d3      	adds	r3, r2, r3
 800f2fc:	3354      	adds	r3, #84	; 0x54
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2284      	movs	r2, #132	; 0x84
 800f302:	18ba      	adds	r2, r7, r2
 800f304:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f306:	4b6a      	ldr	r3, [pc, #424]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f308:	4a6b      	ldr	r2, [pc, #428]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f30a:	589b      	ldr	r3, [r3, r2]
 800f30c:	227c      	movs	r2, #124	; 0x7c
 800f30e:	5c9b      	ldrb	r3, [r3, r2]
 800f310:	2b02      	cmp	r3, #2
 800f312:	d110      	bne.n	800f336 <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f314:	4b66      	ldr	r3, [pc, #408]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f316:	4a6c      	ldr	r2, [pc, #432]	; (800f4c8 <ProcessRadioRxDone+0x744>)
 800f318:	2103      	movs	r1, #3
 800f31a:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800f31c:	e00b      	b.n	800f336 <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f31e:	2181      	movs	r1, #129	; 0x81
 800f320:	187b      	adds	r3, r7, r1
 800f322:	781a      	ldrb	r2, [r3, #0]
 800f324:	187b      	adds	r3, r7, r1
 800f326:	3201      	adds	r2, #1
 800f328:	701a      	strb	r2, [r3, #0]
 800f32a:	2381      	movs	r3, #129	; 0x81
 800f32c:	18fb      	adds	r3, r7, r3
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d09e      	beq.n	800f272 <ProcessRadioRxDone+0x4ee>
 800f334:	e000      	b.n	800f338 <ProcessRadioRxDone+0x5b4>
                    break;
 800f336:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f338:	2383      	movs	r3, #131	; 0x83
 800f33a:	18fb      	adds	r3, r7, r3
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d119      	bne.n	800f376 <ProcessRadioRxDone+0x5f2>
 800f342:	1cbb      	adds	r3, r7, #2
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	2b03      	cmp	r3, #3
 800f348:	d10e      	bne.n	800f368 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f34a:	2130      	movs	r1, #48	; 0x30
 800f34c:	187b      	adds	r3, r7, r1
 800f34e:	7b1b      	ldrb	r3, [r3, #12]
 800f350:	2220      	movs	r2, #32
 800f352:	4013      	ands	r3, r2
 800f354:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f356:	2b00      	cmp	r3, #0
 800f358:	d106      	bne.n	800f368 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f35a:	187b      	adds	r3, r7, r1
 800f35c:	7b1b      	ldrb	r3, [r3, #12]
 800f35e:	2240      	movs	r2, #64	; 0x40
 800f360:	4013      	ands	r3, r2
 800f362:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f364:	2b00      	cmp	r3, #0
 800f366:	d006      	beq.n	800f376 <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f368:	4b51      	ldr	r3, [pc, #324]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f36a:	4a54      	ldr	r2, [pc, #336]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f36c:	2101      	movs	r1, #1
 800f36e:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f370:	f7ff fcdc 	bl	800ed2c <PrepareRxDoneAbort>
                return;
 800f374:	e234      	b.n	800f7e0 <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f376:	2164      	movs	r1, #100	; 0x64
 800f378:	187b      	adds	r3, r7, r1
 800f37a:	2215      	movs	r2, #21
 800f37c:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f37e:	4b4c      	ldr	r3, [pc, #304]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f380:	4a4d      	ldr	r2, [pc, #308]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f382:	589b      	ldr	r3, [r3, r2]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	187a      	adds	r2, r7, r1
 800f388:	0011      	movs	r1, r2
 800f38a:	0018      	movs	r0, r3
 800f38c:	f007 f913 	bl	80165b6 <RegionGetPhyParam>
 800f390:	0003      	movs	r3, r0
 800f392:	001a      	movs	r2, r3
 800f394:	2060      	movs	r0, #96	; 0x60
 800f396:	183b      	adds	r3, r7, r0
 800f398:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f39a:	1cbb      	adds	r3, r7, #2
 800f39c:	781d      	ldrb	r5, [r3, #0]
 800f39e:	4b44      	ldr	r3, [pc, #272]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f3a0:	4a45      	ldr	r2, [pc, #276]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f3a2:	5899      	ldr	r1, [r3, r2]
 800f3a4:	183b      	adds	r3, r7, r0
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	2280      	movs	r2, #128	; 0x80
 800f3ac:	18bc      	adds	r4, r7, r2
 800f3ae:	22b0      	movs	r2, #176	; 0xb0
 800f3b0:	0052      	lsls	r2, r2, #1
 800f3b2:	588e      	ldr	r6, [r1, r2]
 800f3b4:	2130      	movs	r1, #48	; 0x30
 800f3b6:	1879      	adds	r1, r7, r1
 800f3b8:	2082      	movs	r0, #130	; 0x82
 800f3ba:	183a      	adds	r2, r7, r0
 800f3bc:	7810      	ldrb	r0, [r2, #0]
 800f3be:	1d3a      	adds	r2, r7, #4
 800f3c0:	9202      	str	r2, [sp, #8]
 800f3c2:	1cfa      	adds	r2, r7, #3
 800f3c4:	9201      	str	r2, [sp, #4]
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	0033      	movs	r3, r6
 800f3ca:	000a      	movs	r2, r1
 800f3cc:	0029      	movs	r1, r5
 800f3ce:	f000 fe91 	bl	80100f4 <GetFCntDown>
 800f3d2:	0003      	movs	r3, r0
 800f3d4:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f3d6:	2280      	movs	r2, #128	; 0x80
 800f3d8:	18bb      	adds	r3, r7, r2
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d040      	beq.n	800f462 <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f3e0:	18bb      	adds	r3, r7, r2
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	2b07      	cmp	r3, #7
 800f3e6:	d126      	bne.n	800f436 <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f3e8:	4b31      	ldr	r3, [pc, #196]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f3ea:	4a34      	ldr	r2, [pc, #208]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f3ec:	2108      	movs	r1, #8
 800f3ee:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800f3f0:	4b2f      	ldr	r3, [pc, #188]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f3f2:	4a31      	ldr	r2, [pc, #196]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f3f4:	589a      	ldr	r2, [r3, r2]
 800f3f6:	23b1      	movs	r3, #177	; 0xb1
 800f3f8:	005b      	lsls	r3, r3, #1
 800f3fa:	5cd3      	ldrb	r3, [r2, r3]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d128      	bne.n	800f452 <ProcessRadioRxDone+0x6ce>
 800f400:	2374      	movs	r3, #116	; 0x74
 800f402:	18fb      	adds	r3, r7, r3
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	221f      	movs	r2, #31
 800f408:	4393      	bics	r3, r2
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	2ba0      	cmp	r3, #160	; 0xa0
 800f40e:	d120      	bne.n	800f452 <ProcessRadioRxDone+0x6ce>
 800f410:	4b27      	ldr	r3, [pc, #156]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f412:	4a29      	ldr	r2, [pc, #164]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f414:	589a      	ldr	r2, [r3, r2]
 800f416:	23b4      	movs	r3, #180	; 0xb4
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	58d2      	ldr	r2, [r2, r3]
 800f41c:	2130      	movs	r1, #48	; 0x30
 800f41e:	187b      	adds	r3, r7, r1
 800f420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f422:	429a      	cmp	r2, r3
 800f424:	d115      	bne.n	800f452 <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800f426:	4b22      	ldr	r3, [pc, #136]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f428:	4a23      	ldr	r2, [pc, #140]	; (800f4b8 <ProcessRadioRxDone+0x734>)
 800f42a:	589a      	ldr	r2, [r3, r2]
 800f42c:	234c      	movs	r3, #76	; 0x4c
 800f42e:	33ff      	adds	r3, #255	; 0xff
 800f430:	2101      	movs	r1, #1
 800f432:	54d1      	strb	r1, [r2, r3]
 800f434:	e00d      	b.n	800f452 <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800f436:	2380      	movs	r3, #128	; 0x80
 800f438:	18fb      	adds	r3, r7, r3
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	2b08      	cmp	r3, #8
 800f43e:	d104      	bne.n	800f44a <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800f440:	4b1b      	ldr	r3, [pc, #108]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f442:	4a1e      	ldr	r2, [pc, #120]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f444:	210a      	movs	r1, #10
 800f446:	5499      	strb	r1, [r3, r2]
 800f448:	e003      	b.n	800f452 <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f44a:	4b19      	ldr	r3, [pc, #100]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f44c:	4a1b      	ldr	r2, [pc, #108]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f44e:	2101      	movs	r1, #1
 800f450:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f452:	6879      	ldr	r1, [r7, #4]
 800f454:	4a16      	ldr	r2, [pc, #88]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f456:	2386      	movs	r3, #134	; 0x86
 800f458:	00db      	lsls	r3, r3, #3
 800f45a:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800f45c:	f7ff fc66 	bl	800ed2c <PrepareRxDoneAbort>
                return;
 800f460:	e1be      	b.n	800f7e0 <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f462:	1cfb      	adds	r3, r7, #3
 800f464:	781a      	ldrb	r2, [r3, #0]
 800f466:	687d      	ldr	r5, [r7, #4]
 800f468:	2680      	movs	r6, #128	; 0x80
 800f46a:	19bc      	adds	r4, r7, r6
 800f46c:	2384      	movs	r3, #132	; 0x84
 800f46e:	18fb      	adds	r3, r7, r3
 800f470:	6819      	ldr	r1, [r3, #0]
 800f472:	2382      	movs	r3, #130	; 0x82
 800f474:	18fb      	adds	r3, r7, r3
 800f476:	7818      	ldrb	r0, [r3, #0]
 800f478:	2330      	movs	r3, #48	; 0x30
 800f47a:	18fb      	adds	r3, r7, r3
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	002b      	movs	r3, r5
 800f480:	f006 fb9c 	bl	8015bbc <LoRaMacCryptoUnsecureMessage>
 800f484:	0003      	movs	r3, r0
 800f486:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f488:	19bb      	adds	r3, r7, r6
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d01d      	beq.n	800f4cc <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f490:	19bb      	adds	r3, r7, r6
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	2b02      	cmp	r3, #2
 800f496:	d104      	bne.n	800f4a2 <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f498:	4b05      	ldr	r3, [pc, #20]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f49a:	4a08      	ldr	r2, [pc, #32]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f49c:	210b      	movs	r1, #11
 800f49e:	5499      	strb	r1, [r3, r2]
 800f4a0:	e003      	b.n	800f4aa <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f4a2:	4b03      	ldr	r3, [pc, #12]	; (800f4b0 <ProcessRadioRxDone+0x72c>)
 800f4a4:	4a05      	ldr	r2, [pc, #20]	; (800f4bc <ProcessRadioRxDone+0x738>)
 800f4a6:	210c      	movs	r1, #12
 800f4a8:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800f4aa:	f7ff fc3f 	bl	800ed2c <PrepareRxDoneAbort>
                return;
 800f4ae:	e197      	b.n	800f7e0 <ProcessRadioRxDone+0xa5c>
 800f4b0:	200005b4 	.word	0x200005b4
 800f4b4:	0000041c 	.word	0x0000041c
 800f4b8:	00000484 	.word	0x00000484
 800f4bc:	0000041d 	.word	0x0000041d
 800f4c0:	200007ec 	.word	0x200007ec
 800f4c4:	00000434 	.word	0x00000434
 800f4c8:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f4cc:	4bc6      	ldr	r3, [pc, #792]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f4ce:	4ac7      	ldr	r2, [pc, #796]	; (800f7ec <ProcessRadioRxDone+0xa68>)
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800f4d4:	4bc4      	ldr	r3, [pc, #784]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f4d6:	2283      	movs	r2, #131	; 0x83
 800f4d8:	18ba      	adds	r2, r7, r2
 800f4da:	49c5      	ldr	r1, [pc, #788]	; (800f7f0 <ProcessRadioRxDone+0xa6c>)
 800f4dc:	7812      	ldrb	r2, [r2, #0]
 800f4de:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f4e0:	2030      	movs	r0, #48	; 0x30
 800f4e2:	183b      	adds	r3, r7, r0
 800f4e4:	7b1b      	ldrb	r3, [r3, #12]
 800f4e6:	06db      	lsls	r3, r3, #27
 800f4e8:	0fdb      	lsrs	r3, r3, #31
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	0019      	movs	r1, r3
 800f4ee:	4bbe      	ldr	r3, [pc, #760]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f4f0:	4ac0      	ldr	r2, [pc, #768]	; (800f7f4 <ProcessRadioRxDone+0xa70>)
 800f4f2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800f4f4:	4bbc      	ldr	r3, [pc, #752]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f4f6:	4ac0      	ldr	r2, [pc, #768]	; (800f7f8 <ProcessRadioRxDone+0xa74>)
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800f4fc:	4aba      	ldr	r2, [pc, #744]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f4fe:	2385      	movs	r3, #133	; 0x85
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	2100      	movs	r1, #0
 800f504:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f506:	6879      	ldr	r1, [r7, #4]
 800f508:	4ab7      	ldr	r2, [pc, #732]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f50a:	2386      	movs	r3, #134	; 0x86
 800f50c:	00db      	lsls	r3, r3, #3
 800f50e:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f510:	183b      	adds	r3, r7, r0
 800f512:	7b1b      	ldrb	r3, [r3, #12]
 800f514:	069b      	lsls	r3, r3, #26
 800f516:	0fdb      	lsrs	r3, r3, #31
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	1e5a      	subs	r2, r3, #1
 800f51c:	4193      	sbcs	r3, r2
 800f51e:	b2d9      	uxtb	r1, r3
 800f520:	4bb1      	ldr	r3, [pc, #708]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f522:	4ab6      	ldr	r2, [pc, #728]	; (800f7fc <ProcessRadioRxDone+0xa78>)
 800f524:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f526:	4bb0      	ldr	r3, [pc, #704]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f528:	4ab5      	ldr	r2, [pc, #724]	; (800f800 <ProcessRadioRxDone+0xa7c>)
 800f52a:	2100      	movs	r1, #0
 800f52c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f52e:	183b      	adds	r3, r7, r0
 800f530:	7b1b      	ldrb	r3, [r3, #12]
 800f532:	069b      	lsls	r3, r3, #26
 800f534:	0fdb      	lsrs	r3, r3, #31
 800f536:	b2db      	uxtb	r3, r3
 800f538:	1e5a      	subs	r2, r3, #1
 800f53a:	4193      	sbcs	r3, r2
 800f53c:	b2d9      	uxtb	r1, r3
 800f53e:	4aaa      	ldr	r2, [pc, #680]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f540:	2388      	movs	r3, #136	; 0x88
 800f542:	00db      	lsls	r3, r3, #3
 800f544:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f546:	4ba8      	ldr	r3, [pc, #672]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f548:	4aae      	ldr	r2, [pc, #696]	; (800f804 <ProcessRadioRxDone+0xa80>)
 800f54a:	5c9b      	ldrb	r3, [r3, r2]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d004      	beq.n	800f55a <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800f550:	4ba5      	ldr	r3, [pc, #660]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f552:	4aac      	ldr	r2, [pc, #688]	; (800f804 <ProcessRadioRxDone+0xa80>)
 800f554:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f556:	2b01      	cmp	r3, #1
 800f558:	d105      	bne.n	800f566 <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800f55a:	4ba3      	ldr	r3, [pc, #652]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f55c:	4aaa      	ldr	r2, [pc, #680]	; (800f808 <ProcessRadioRxDone+0xa84>)
 800f55e:	589b      	ldr	r3, [r3, r2]
 800f560:	2280      	movs	r2, #128	; 0x80
 800f562:	2100      	movs	r1, #0
 800f564:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f566:	2383      	movs	r3, #131	; 0x83
 800f568:	18fb      	adds	r3, r7, r3
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d104      	bne.n	800f57a <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f570:	4b9d      	ldr	r3, [pc, #628]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f572:	4aa6      	ldr	r2, [pc, #664]	; (800f80c <ProcessRadioRxDone+0xa88>)
 800f574:	2102      	movs	r1, #2
 800f576:	5499      	strb	r1, [r3, r2]
 800f578:	e02f      	b.n	800f5da <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f57a:	2374      	movs	r3, #116	; 0x74
 800f57c:	18fb      	adds	r3, r7, r3
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	221f      	movs	r2, #31
 800f582:	4393      	bics	r3, r2
 800f584:	b2db      	uxtb	r3, r3
 800f586:	2ba0      	cmp	r3, #160	; 0xa0
 800f588:	d11c      	bne.n	800f5c4 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800f58a:	4b97      	ldr	r3, [pc, #604]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f58c:	4a9e      	ldr	r2, [pc, #632]	; (800f808 <ProcessRadioRxDone+0xa84>)
 800f58e:	589a      	ldr	r2, [r3, r2]
 800f590:	234c      	movs	r3, #76	; 0x4c
 800f592:	33ff      	adds	r3, #255	; 0xff
 800f594:	2101      	movs	r1, #1
 800f596:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800f598:	4b93      	ldr	r3, [pc, #588]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f59a:	4a9b      	ldr	r2, [pc, #620]	; (800f808 <ProcessRadioRxDone+0xa84>)
 800f59c:	589a      	ldr	r2, [r3, r2]
 800f59e:	23b1      	movs	r3, #177	; 0xb1
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	5cd3      	ldrb	r3, [r2, r3]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d108      	bne.n	800f5ba <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800f5a8:	4b8f      	ldr	r3, [pc, #572]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f5aa:	4a97      	ldr	r2, [pc, #604]	; (800f808 <ProcessRadioRxDone+0xa84>)
 800f5ac:	589a      	ldr	r2, [r3, r2]
 800f5ae:	2330      	movs	r3, #48	; 0x30
 800f5b0:	18fb      	adds	r3, r7, r3
 800f5b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f5b4:	23b4      	movs	r3, #180	; 0xb4
 800f5b6:	005b      	lsls	r3, r3, #1
 800f5b8:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f5ba:	4b8b      	ldr	r3, [pc, #556]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f5bc:	4a93      	ldr	r2, [pc, #588]	; (800f80c <ProcessRadioRxDone+0xa88>)
 800f5be:	2101      	movs	r1, #1
 800f5c0:	5499      	strb	r1, [r3, r2]
 800f5c2:	e00a      	b.n	800f5da <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800f5c4:	4b88      	ldr	r3, [pc, #544]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f5c6:	4a90      	ldr	r2, [pc, #576]	; (800f808 <ProcessRadioRxDone+0xa84>)
 800f5c8:	589a      	ldr	r2, [r3, r2]
 800f5ca:	234c      	movs	r3, #76	; 0x4c
 800f5cc:	33ff      	adds	r3, #255	; 0xff
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f5d2:	4b85      	ldr	r3, [pc, #532]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f5d4:	4a8d      	ldr	r2, [pc, #564]	; (800f80c <ProcessRadioRxDone+0xa88>)
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f5da:	4b83      	ldr	r3, [pc, #524]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f5dc:	4a89      	ldr	r2, [pc, #548]	; (800f804 <ProcessRadioRxDone+0xa80>)
 800f5de:	5c98      	ldrb	r0, [r3, r2]
 800f5e0:	4b81      	ldr	r3, [pc, #516]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f5e2:	4a8b      	ldr	r2, [pc, #556]	; (800f810 <ProcessRadioRxDone+0xa8c>)
 800f5e4:	5c9a      	ldrb	r2, [r3, r2]
 800f5e6:	2330      	movs	r3, #48	; 0x30
 800f5e8:	18fb      	adds	r3, r7, r3
 800f5ea:	7b1b      	ldrb	r3, [r3, #12]
 800f5ec:	1c19      	adds	r1, r3, #0
 800f5ee:	f002 f94f 	bl	8011890 <RemoveMacCommands>

            switch( fType )
 800f5f2:	1cbb      	adds	r3, r7, #2
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	2b03      	cmp	r3, #3
 800f5f8:	d100      	bne.n	800f5fc <ProcessRadioRxDone+0x878>
 800f5fa:	e073      	b.n	800f6e4 <ProcessRadioRxDone+0x960>
 800f5fc:	dd00      	ble.n	800f600 <ProcessRadioRxDone+0x87c>
 800f5fe:	e089      	b.n	800f714 <ProcessRadioRxDone+0x990>
 800f600:	2b02      	cmp	r3, #2
 800f602:	d055      	beq.n	800f6b0 <ProcessRadioRxDone+0x92c>
 800f604:	dd00      	ble.n	800f608 <ProcessRadioRxDone+0x884>
 800f606:	e085      	b.n	800f714 <ProcessRadioRxDone+0x990>
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d002      	beq.n	800f612 <ProcessRadioRxDone+0x88e>
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d030      	beq.n	800f672 <ProcessRadioRxDone+0x8ee>
 800f610:	e080      	b.n	800f714 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800f612:	2030      	movs	r0, #48	; 0x30
 800f614:	183b      	adds	r3, r7, r0
 800f616:	7b1b      	ldrb	r3, [r3, #12]
 800f618:	071b      	lsls	r3, r3, #28
 800f61a:	0f1b      	lsrs	r3, r3, #28
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	001c      	movs	r4, r3
 800f620:	4b71      	ldr	r3, [pc, #452]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f622:	4a78      	ldr	r2, [pc, #480]	; (800f804 <ProcessRadioRxDone+0xa80>)
 800f624:	5c9b      	ldrb	r3, [r3, r2]
 800f626:	2277      	movs	r2, #119	; 0x77
 800f628:	18ba      	adds	r2, r7, r2
 800f62a:	2100      	movs	r1, #0
 800f62c:	5651      	ldrsb	r1, [r2, r1]
 800f62e:	0005      	movs	r5, r0
 800f630:	183a      	adds	r2, r7, r0
 800f632:	3210      	adds	r2, #16
 800f634:	0010      	movs	r0, r2
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	000b      	movs	r3, r1
 800f63a:	0022      	movs	r2, r4
 800f63c:	2100      	movs	r1, #0
 800f63e:	f000 ff4f 	bl	80104e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f642:	0028      	movs	r0, r5
 800f644:	183b      	adds	r3, r7, r0
 800f646:	2220      	movs	r2, #32
 800f648:	5c99      	ldrb	r1, [r3, r2]
 800f64a:	4b67      	ldr	r3, [pc, #412]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f64c:	4a71      	ldr	r2, [pc, #452]	; (800f814 <ProcessRadioRxDone+0xa90>)
 800f64e:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f650:	183b      	adds	r3, r7, r0
 800f652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f654:	4b64      	ldr	r3, [pc, #400]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f656:	4968      	ldr	r1, [pc, #416]	; (800f7f8 <ProcessRadioRxDone+0xa74>)
 800f658:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f65a:	183b      	adds	r3, r7, r0
 800f65c:	2228      	movs	r2, #40	; 0x28
 800f65e:	5c99      	ldrb	r1, [r3, r2]
 800f660:	4a61      	ldr	r2, [pc, #388]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f662:	2385      	movs	r3, #133	; 0x85
 800f664:	00db      	lsls	r3, r3, #3
 800f666:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800f668:	4b5f      	ldr	r3, [pc, #380]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f66a:	4a6b      	ldr	r2, [pc, #428]	; (800f818 <ProcessRadioRxDone+0xa94>)
 800f66c:	2101      	movs	r1, #1
 800f66e:	5499      	strb	r1, [r3, r2]
                    break;
 800f670:	e057      	b.n	800f722 <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800f672:	2030      	movs	r0, #48	; 0x30
 800f674:	183b      	adds	r3, r7, r0
 800f676:	7b1b      	ldrb	r3, [r3, #12]
 800f678:	071b      	lsls	r3, r3, #28
 800f67a:	0f1b      	lsrs	r3, r3, #28
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	001c      	movs	r4, r3
 800f680:	4b59      	ldr	r3, [pc, #356]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f682:	4a60      	ldr	r2, [pc, #384]	; (800f804 <ProcessRadioRxDone+0xa80>)
 800f684:	5c9b      	ldrb	r3, [r3, r2]
 800f686:	2277      	movs	r2, #119	; 0x77
 800f688:	18ba      	adds	r2, r7, r2
 800f68a:	2100      	movs	r1, #0
 800f68c:	5651      	ldrsb	r1, [r2, r1]
 800f68e:	0005      	movs	r5, r0
 800f690:	183a      	adds	r2, r7, r0
 800f692:	3210      	adds	r2, #16
 800f694:	0010      	movs	r0, r2
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	000b      	movs	r3, r1
 800f69a:	0022      	movs	r2, r4
 800f69c:	2100      	movs	r1, #0
 800f69e:	f000 ff1f 	bl	80104e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f6a2:	197b      	adds	r3, r7, r5
 800f6a4:	2220      	movs	r2, #32
 800f6a6:	5c99      	ldrb	r1, [r3, r2]
 800f6a8:	4b4f      	ldr	r3, [pc, #316]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f6aa:	4a5a      	ldr	r2, [pc, #360]	; (800f814 <ProcessRadioRxDone+0xa90>)
 800f6ac:	5499      	strb	r1, [r3, r2]
                    break;
 800f6ae:	e038      	b.n	800f722 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800f6b0:	2430      	movs	r4, #48	; 0x30
 800f6b2:	193b      	adds	r3, r7, r4
 800f6b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f6b6:	193b      	adds	r3, r7, r4
 800f6b8:	2228      	movs	r2, #40	; 0x28
 800f6ba:	5c99      	ldrb	r1, [r3, r2]
 800f6bc:	4b4a      	ldr	r3, [pc, #296]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f6be:	4a51      	ldr	r2, [pc, #324]	; (800f804 <ProcessRadioRxDone+0xa80>)
 800f6c0:	5c9b      	ldrb	r3, [r3, r2]
 800f6c2:	2277      	movs	r2, #119	; 0x77
 800f6c4:	18ba      	adds	r2, r7, r2
 800f6c6:	7812      	ldrb	r2, [r2, #0]
 800f6c8:	b252      	sxtb	r2, r2
 800f6ca:	9300      	str	r3, [sp, #0]
 800f6cc:	0013      	movs	r3, r2
 800f6ce:	000a      	movs	r2, r1
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	f000 ff05 	bl	80104e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f6d6:	193b      	adds	r3, r7, r4
 800f6d8:	2220      	movs	r2, #32
 800f6da:	5c99      	ldrb	r1, [r3, r2]
 800f6dc:	4b42      	ldr	r3, [pc, #264]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f6de:	4a4d      	ldr	r2, [pc, #308]	; (800f814 <ProcessRadioRxDone+0xa90>)
 800f6e0:	5499      	strb	r1, [r3, r2]
                    break;
 800f6e2:	e01e      	b.n	800f722 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f6e4:	2030      	movs	r0, #48	; 0x30
 800f6e6:	183b      	adds	r3, r7, r0
 800f6e8:	2220      	movs	r2, #32
 800f6ea:	5c99      	ldrb	r1, [r3, r2]
 800f6ec:	4b3e      	ldr	r3, [pc, #248]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f6ee:	4a49      	ldr	r2, [pc, #292]	; (800f814 <ProcessRadioRxDone+0xa90>)
 800f6f0:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f6f2:	183b      	adds	r3, r7, r0
 800f6f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6f6:	4b3c      	ldr	r3, [pc, #240]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f6f8:	493f      	ldr	r1, [pc, #252]	; (800f7f8 <ProcessRadioRxDone+0xa74>)
 800f6fa:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f6fc:	183b      	adds	r3, r7, r0
 800f6fe:	2228      	movs	r2, #40	; 0x28
 800f700:	5c99      	ldrb	r1, [r3, r2]
 800f702:	4a39      	ldr	r2, [pc, #228]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f704:	2385      	movs	r3, #133	; 0x85
 800f706:	00db      	lsls	r3, r3, #3
 800f708:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800f70a:	4b37      	ldr	r3, [pc, #220]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f70c:	4a42      	ldr	r2, [pc, #264]	; (800f818 <ProcessRadioRxDone+0xa94>)
 800f70e:	2101      	movs	r1, #1
 800f710:	5499      	strb	r1, [r3, r2]
                    break;
 800f712:	e006      	b.n	800f722 <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f714:	4b34      	ldr	r3, [pc, #208]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f716:	4a35      	ldr	r2, [pc, #212]	; (800f7ec <ProcessRadioRxDone+0xa68>)
 800f718:	2101      	movs	r1, #1
 800f71a:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800f71c:	f7ff fb06 	bl	800ed2c <PrepareRxDoneAbort>
                    break;
 800f720:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f722:	4b31      	ldr	r3, [pc, #196]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f724:	4a3d      	ldr	r2, [pc, #244]	; (800f81c <ProcessRadioRxDone+0xa98>)
 800f726:	5c99      	ldrb	r1, [r3, r2]
 800f728:	2002      	movs	r0, #2
 800f72a:	4301      	orrs	r1, r0
 800f72c:	5499      	strb	r1, [r3, r2]

            break;
 800f72e:	e036      	b.n	800f79e <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f730:	2476      	movs	r4, #118	; 0x76
 800f732:	193b      	adds	r3, r7, r4
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f738:	18d1      	adds	r1, r2, r3
 800f73a:	193b      	adds	r3, r7, r4
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	257a      	movs	r5, #122	; 0x7a
 800f742:	197a      	adds	r2, r7, r5
 800f744:	8812      	ldrh	r2, [r2, #0]
 800f746:	1ad3      	subs	r3, r2, r3
 800f748:	b29a      	uxth	r2, r3
 800f74a:	4b35      	ldr	r3, [pc, #212]	; (800f820 <ProcessRadioRxDone+0xa9c>)
 800f74c:	0018      	movs	r0, r3
 800f74e:	f009 fbc1 	bl	8018ed4 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f752:	4b25      	ldr	r3, [pc, #148]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f754:	4a2d      	ldr	r2, [pc, #180]	; (800f80c <ProcessRadioRxDone+0xa88>)
 800f756:	2103      	movs	r1, #3
 800f758:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f75a:	4b23      	ldr	r3, [pc, #140]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f75c:	4a23      	ldr	r2, [pc, #140]	; (800f7ec <ProcessRadioRxDone+0xa68>)
 800f75e:	2100      	movs	r1, #0
 800f760:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f762:	4b21      	ldr	r3, [pc, #132]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f764:	4924      	ldr	r1, [pc, #144]	; (800f7f8 <ProcessRadioRxDone+0xa74>)
 800f766:	4a2e      	ldr	r2, [pc, #184]	; (800f820 <ProcessRadioRxDone+0xa9c>)
 800f768:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f76a:	197b      	adds	r3, r7, r5
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	193b      	adds	r3, r7, r4
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	b2d9      	uxtb	r1, r3
 800f778:	4a1b      	ldr	r2, [pc, #108]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f77a:	2385      	movs	r3, #133	; 0x85
 800f77c:	00db      	lsls	r3, r3, #3
 800f77e:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f780:	4b19      	ldr	r3, [pc, #100]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f782:	4a26      	ldr	r2, [pc, #152]	; (800f81c <ProcessRadioRxDone+0xa98>)
 800f784:	5c99      	ldrb	r1, [r3, r2]
 800f786:	2002      	movs	r0, #2
 800f788:	4301      	orrs	r1, r0
 800f78a:	5499      	strb	r1, [r3, r2]
            break;
 800f78c:	e007      	b.n	800f79e <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f78e:	4b16      	ldr	r3, [pc, #88]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f790:	4a16      	ldr	r2, [pc, #88]	; (800f7ec <ProcessRadioRxDone+0xa68>)
 800f792:	2101      	movs	r1, #1
 800f794:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800f796:	f7ff fac9 	bl	800ed2c <PrepareRxDoneAbort>
            break;
 800f79a:	e000      	b.n	800f79e <ProcessRadioRxDone+0xa1a>
            break;
 800f79c:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f79e:	4b12      	ldr	r3, [pc, #72]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f7a0:	4a20      	ldr	r2, [pc, #128]	; (800f824 <ProcessRadioRxDone+0xaa0>)
 800f7a2:	5c9b      	ldrb	r3, [r3, r2]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d009      	beq.n	800f7bc <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f7a8:	4a0f      	ldr	r2, [pc, #60]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f7aa:	2388      	movs	r3, #136	; 0x88
 800f7ac:	00db      	lsls	r3, r3, #3
 800f7ae:	5cd3      	ldrb	r3, [r2, r3]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d00d      	beq.n	800f7d0 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	f000 fc5b 	bl	8010070 <OnAckTimeoutTimerEvent>
 800f7ba:	e009      	b.n	800f7d0 <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f7bc:	4b0a      	ldr	r3, [pc, #40]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f7be:	4a12      	ldr	r2, [pc, #72]	; (800f808 <ProcessRadioRxDone+0xa84>)
 800f7c0:	589b      	ldr	r3, [r3, r2]
 800f7c2:	227c      	movs	r2, #124	; 0x7c
 800f7c4:	5c9b      	ldrb	r3, [r3, r2]
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d102      	bne.n	800f7d0 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	f000 fc50 	bl	8010070 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f7d0:	4b05      	ldr	r3, [pc, #20]	; (800f7e8 <ProcessRadioRxDone+0xa64>)
 800f7d2:	4a12      	ldr	r2, [pc, #72]	; (800f81c <ProcessRadioRxDone+0xa98>)
 800f7d4:	5c99      	ldrb	r1, [r3, r2]
 800f7d6:	2020      	movs	r0, #32
 800f7d8:	4301      	orrs	r1, r0
 800f7da:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f7dc:	f7ff f9c0 	bl	800eb60 <UpdateRxSlotIdleState>
}
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	b023      	add	sp, #140	; 0x8c
 800f7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7e6:	46c0      	nop			; (mov r8, r8)
 800f7e8:	200005b4 	.word	0x200005b4
 800f7ec:	0000041d 	.word	0x0000041d
 800f7f0:	0000041e 	.word	0x0000041e
 800f7f4:	00000421 	.word	0x00000421
 800f7f8:	00000424 	.word	0x00000424
 800f7fc:	0000042e 	.word	0x0000042e
 800f800:	0000043d 	.word	0x0000043d
 800f804:	0000042d 	.word	0x0000042d
 800f808:	00000484 	.word	0x00000484
 800f80c:	0000041c 	.word	0x0000041c
 800f810:	0000043c 	.word	0x0000043c
 800f814:	0000041f 	.word	0x0000041f
 800f818:	00000429 	.word	0x00000429
 800f81c:	00000481 	.word	0x00000481
 800f820:	200007ec 	.word	0x200007ec
 800f824:	00000414 	.word	0x00000414

0800f828 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f82c:	4b12      	ldr	r3, [pc, #72]	; (800f878 <ProcessRadioTxTimeout+0x50>)
 800f82e:	4a13      	ldr	r2, [pc, #76]	; (800f87c <ProcessRadioTxTimeout+0x54>)
 800f830:	589b      	ldr	r3, [r3, r2]
 800f832:	227c      	movs	r2, #124	; 0x7c
 800f834:	5c9b      	ldrb	r3, [r3, r2]
 800f836:	2b02      	cmp	r3, #2
 800f838:	d002      	beq.n	800f840 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800f83a:	4b11      	ldr	r3, [pc, #68]	; (800f880 <ProcessRadioTxTimeout+0x58>)
 800f83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f83e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f840:	f7ff f98e 	bl	800eb60 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f844:	4b0c      	ldr	r3, [pc, #48]	; (800f878 <ProcessRadioTxTimeout+0x50>)
 800f846:	4a0f      	ldr	r2, [pc, #60]	; (800f884 <ProcessRadioTxTimeout+0x5c>)
 800f848:	2102      	movs	r1, #2
 800f84a:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f84c:	2002      	movs	r0, #2
 800f84e:	f005 fa5b 	bl	8014d08 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f852:	4b09      	ldr	r3, [pc, #36]	; (800f878 <ProcessRadioTxTimeout+0x50>)
 800f854:	4a0c      	ldr	r2, [pc, #48]	; (800f888 <ProcessRadioTxTimeout+0x60>)
 800f856:	5c9b      	ldrb	r3, [r3, r2]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d003      	beq.n	800f864 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800f85c:	4b06      	ldr	r3, [pc, #24]	; (800f878 <ProcessRadioTxTimeout+0x50>)
 800f85e:	4a0b      	ldr	r2, [pc, #44]	; (800f88c <ProcessRadioTxTimeout+0x64>)
 800f860:	2101      	movs	r1, #1
 800f862:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f864:	4b04      	ldr	r3, [pc, #16]	; (800f878 <ProcessRadioTxTimeout+0x50>)
 800f866:	4a0a      	ldr	r2, [pc, #40]	; (800f890 <ProcessRadioTxTimeout+0x68>)
 800f868:	5c99      	ldrb	r1, [r3, r2]
 800f86a:	2020      	movs	r0, #32
 800f86c:	4301      	orrs	r1, r0
 800f86e:	5499      	strb	r1, [r3, r2]
}
 800f870:	46c0      	nop			; (mov r8, r8)
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	46c0      	nop			; (mov r8, r8)
 800f878:	200005b4 	.word	0x200005b4
 800f87c:	00000484 	.word	0x00000484
 800f880:	0801f358 	.word	0x0801f358
 800f884:	0000043d 	.word	0x0000043d
 800f888:	00000414 	.word	0x00000414
 800f88c:	00000413 	.word	0x00000413
 800f890:	00000481 	.word	0x00000481

0800f894 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	0002      	movs	r2, r0
 800f89c:	1dfb      	adds	r3, r7, #7
 800f89e:	701a      	strb	r2, [r3, #0]
 800f8a0:	1dbb      	adds	r3, r7, #6
 800f8a2:	1c0a      	adds	r2, r1, #0
 800f8a4:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800f8a6:	230f      	movs	r3, #15
 800f8a8:	18fb      	adds	r3, r7, r3
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f8ae:	4b4a      	ldr	r3, [pc, #296]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f8b0:	4a4a      	ldr	r2, [pc, #296]	; (800f9dc <HandleRadioRxErrorTimeout+0x148>)
 800f8b2:	589b      	ldr	r3, [r3, r2]
 800f8b4:	227c      	movs	r2, #124	; 0x7c
 800f8b6:	5c9b      	ldrb	r3, [r3, r2]
 800f8b8:	2b02      	cmp	r3, #2
 800f8ba:	d002      	beq.n	800f8c2 <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800f8bc:	4b48      	ldr	r3, [pc, #288]	; (800f9e0 <HandleRadioRxErrorTimeout+0x14c>)
 800f8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c0:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f8c2:	f004 fcdd 	bl	8014280 <LoRaMacClassBIsBeaconExpected>
 800f8c6:	1e03      	subs	r3, r0, #0
 800f8c8:	d009      	beq.n	800f8de <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f8ca:	2002      	movs	r0, #2
 800f8cc:	f004 fc90 	bl	80141f0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f8d0:	2000      	movs	r0, #0
 800f8d2:	f004 fcb1 	bl	8014238 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f8d6:	230f      	movs	r3, #15
 800f8d8:	18fb      	adds	r3, r7, r3
 800f8da:	2201      	movs	r2, #1
 800f8dc:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f8de:	4b3e      	ldr	r3, [pc, #248]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f8e0:	4a3e      	ldr	r2, [pc, #248]	; (800f9dc <HandleRadioRxErrorTimeout+0x148>)
 800f8e2:	589b      	ldr	r3, [r3, r2]
 800f8e4:	227c      	movs	r2, #124	; 0x7c
 800f8e6:	5c9b      	ldrb	r3, [r3, r2]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d11b      	bne.n	800f924 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f8ec:	f004 fcce 	bl	801428c <LoRaMacClassBIsPingExpected>
 800f8f0:	1e03      	subs	r3, r0, #0
 800f8f2:	d009      	beq.n	800f908 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	f004 fc85 	bl	8014204 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	f004 fca4 	bl	8014248 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f900:	230f      	movs	r3, #15
 800f902:	18fb      	adds	r3, r7, r3
 800f904:	2201      	movs	r2, #1
 800f906:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f908:	f004 fcc6 	bl	8014298 <LoRaMacClassBIsMulticastExpected>
 800f90c:	1e03      	subs	r3, r0, #0
 800f90e:	d009      	beq.n	800f924 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f910:	2000      	movs	r0, #0
 800f912:	f004 fc81 	bl	8014218 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f916:	2000      	movs	r0, #0
 800f918:	f004 fc9e 	bl	8014258 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f91c:	230f      	movs	r3, #15
 800f91e:	18fb      	adds	r3, r7, r3
 800f920:	2201      	movs	r2, #1
 800f922:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800f924:	230f      	movs	r3, #15
 800f926:	18fb      	adds	r3, r7, r3
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	2201      	movs	r2, #1
 800f92c:	4053      	eors	r3, r2
 800f92e:	b2db      	uxtb	r3, r3
 800f930:	2b00      	cmp	r3, #0
 800f932:	d04b      	beq.n	800f9cc <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f934:	4a28      	ldr	r2, [pc, #160]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f936:	2390      	movs	r3, #144	; 0x90
 800f938:	00db      	lsls	r3, r3, #3
 800f93a:	5cd3      	ldrb	r3, [r2, r3]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d129      	bne.n	800f994 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 800f940:	4b25      	ldr	r3, [pc, #148]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f942:	4a28      	ldr	r2, [pc, #160]	; (800f9e4 <HandleRadioRxErrorTimeout+0x150>)
 800f944:	5c9b      	ldrb	r3, [r3, r2]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d004      	beq.n	800f954 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f94a:	4b23      	ldr	r3, [pc, #140]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f94c:	1dfa      	adds	r2, r7, #7
 800f94e:	4926      	ldr	r1, [pc, #152]	; (800f9e8 <HandleRadioRxErrorTimeout+0x154>)
 800f950:	7812      	ldrb	r2, [r2, #0]
 800f952:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f954:	1dfb      	adds	r3, r7, #7
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	0018      	movs	r0, r3
 800f95a:	f005 f9d5 	bl	8014d08 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f95e:	4b1e      	ldr	r3, [pc, #120]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f960:	4a1e      	ldr	r2, [pc, #120]	; (800f9dc <HandleRadioRxErrorTimeout+0x148>)
 800f962:	589a      	ldr	r2, [r3, r2]
 800f964:	23a8      	movs	r3, #168	; 0xa8
 800f966:	005b      	lsls	r3, r3, #1
 800f968:	58d3      	ldr	r3, [r2, r3]
 800f96a:	0018      	movs	r0, r3
 800f96c:	f00c ffac 	bl	801c8c8 <UTIL_TIMER_GetElapsedTime>
 800f970:	0001      	movs	r1, r0
 800f972:	4a19      	ldr	r2, [pc, #100]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f974:	23ed      	movs	r3, #237	; 0xed
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	58d3      	ldr	r3, [r2, r3]
 800f97a:	4299      	cmp	r1, r3
 800f97c:	d326      	bcc.n	800f9cc <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f97e:	4b1b      	ldr	r3, [pc, #108]	; (800f9ec <HandleRadioRxErrorTimeout+0x158>)
 800f980:	0018      	movs	r0, r3
 800f982:	f00c fe5d 	bl	801c640 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f986:	4b14      	ldr	r3, [pc, #80]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f988:	4a19      	ldr	r2, [pc, #100]	; (800f9f0 <HandleRadioRxErrorTimeout+0x15c>)
 800f98a:	5c99      	ldrb	r1, [r3, r2]
 800f98c:	2020      	movs	r0, #32
 800f98e:	4301      	orrs	r1, r0
 800f990:	5499      	strb	r1, [r3, r2]
 800f992:	e01b      	b.n	800f9cc <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f994:	4b10      	ldr	r3, [pc, #64]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f996:	4a13      	ldr	r2, [pc, #76]	; (800f9e4 <HandleRadioRxErrorTimeout+0x150>)
 800f998:	5c9b      	ldrb	r3, [r3, r2]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d004      	beq.n	800f9a8 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f99e:	4b0e      	ldr	r3, [pc, #56]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f9a0:	1dba      	adds	r2, r7, #6
 800f9a2:	4911      	ldr	r1, [pc, #68]	; (800f9e8 <HandleRadioRxErrorTimeout+0x154>)
 800f9a4:	7812      	ldrb	r2, [r2, #0]
 800f9a6:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f9a8:	1dbb      	adds	r3, r7, #6
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	0018      	movs	r0, r3
 800f9ae:	f005 f9ab 	bl	8014d08 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f9b2:	4b09      	ldr	r3, [pc, #36]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f9b4:	4a09      	ldr	r2, [pc, #36]	; (800f9dc <HandleRadioRxErrorTimeout+0x148>)
 800f9b6:	589b      	ldr	r3, [r3, r2]
 800f9b8:	227c      	movs	r2, #124	; 0x7c
 800f9ba:	5c9b      	ldrb	r3, [r3, r2]
 800f9bc:	2b02      	cmp	r3, #2
 800f9be:	d005      	beq.n	800f9cc <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f9c0:	4b05      	ldr	r3, [pc, #20]	; (800f9d8 <HandleRadioRxErrorTimeout+0x144>)
 800f9c2:	4a0b      	ldr	r2, [pc, #44]	; (800f9f0 <HandleRadioRxErrorTimeout+0x15c>)
 800f9c4:	5c99      	ldrb	r1, [r3, r2]
 800f9c6:	2020      	movs	r0, #32
 800f9c8:	4301      	orrs	r1, r0
 800f9ca:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800f9cc:	f7ff f8c8 	bl	800eb60 <UpdateRxSlotIdleState>
}
 800f9d0:	46c0      	nop			; (mov r8, r8)
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	b004      	add	sp, #16
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	200005b4 	.word	0x200005b4
 800f9dc:	00000484 	.word	0x00000484
 800f9e0:	0801f358 	.word	0x0801f358
 800f9e4:	00000414 	.word	0x00000414
 800f9e8:	0000043d 	.word	0x0000043d
 800f9ec:	2000094c 	.word	0x2000094c
 800f9f0:	00000481 	.word	0x00000481

0800f9f4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f9f8:	2106      	movs	r1, #6
 800f9fa:	2005      	movs	r0, #5
 800f9fc:	f7ff ff4a 	bl	800f894 <HandleRadioRxErrorTimeout>
}
 800fa00:	46c0      	nop			; (mov r8, r8)
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fa0a:	2104      	movs	r1, #4
 800fa0c:	2003      	movs	r0, #3
 800fa0e:	f7ff ff41 	bl	800f894 <HandleRadioRxErrorTimeout>
}
 800fa12:	46c0      	nop			; (mov r8, r8)
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa1e:	f3ef 8310 	mrs	r3, PRIMASK
 800fa22:	607b      	str	r3, [r7, #4]
  return(result);
 800fa24:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800fa26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fa28:	b672      	cpsid	i
}
 800fa2a:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 800fa2c:	4b1f      	ldr	r3, [pc, #124]	; (800faac <LoRaMacHandleIrqEvents+0x94>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800fa32:	4b1e      	ldr	r3, [pc, #120]	; (800faac <LoRaMacHandleIrqEvents+0x94>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	601a      	str	r2, [r3, #0]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	f383 8810 	msr	PRIMASK, r3
}
 800fa42:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d02c      	beq.n	800faa4 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 800fa4a:	003b      	movs	r3, r7
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	2210      	movs	r2, #16
 800fa50:	4013      	ands	r3, r2
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 800fa58:	f7ff f89e 	bl	800eb98 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800fa5c:	003b      	movs	r3, r7
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2208      	movs	r2, #8
 800fa62:	4013      	ands	r3, r2
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d001      	beq.n	800fa6e <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 800fa6a:	f7ff f98b 	bl	800ed84 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800fa6e:	003b      	movs	r3, r7
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	2204      	movs	r2, #4
 800fa74:	4013      	ands	r3, r2
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d001      	beq.n	800fa80 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 800fa7c:	f7ff fed4 	bl	800f828 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800fa80:	003b      	movs	r3, r7
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	2202      	movs	r2, #2
 800fa86:	4013      	ands	r3, r2
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d001      	beq.n	800fa92 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 800fa8e:	f7ff ffb1 	bl	800f9f4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800fa92:	003b      	movs	r3, r7
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	2201      	movs	r2, #1
 800fa98:	4013      	ands	r3, r2
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 800faa0:	f7ff ffb1 	bl	800fa06 <ProcessRadioRxTimeout>
        }
    }
}
 800faa4:	46c0      	nop			; (mov r8, r8)
 800faa6:	46bd      	mov	sp, r7
 800faa8:	b004      	add	sp, #16
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	20000be4 	.word	0x20000be4

0800fab0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	0002      	movs	r2, r0
 800fab8:	1dfb      	adds	r3, r7, #7
 800faba:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800fabc:	4b04      	ldr	r3, [pc, #16]	; (800fad0 <LoRaMacEnableRequests+0x20>)
 800fabe:	1dfa      	adds	r2, r7, #7
 800fac0:	4904      	ldr	r1, [pc, #16]	; (800fad4 <LoRaMacEnableRequests+0x24>)
 800fac2:	7812      	ldrb	r2, [r2, #0]
 800fac4:	545a      	strb	r2, [r3, r1]
}
 800fac6:	46c0      	nop			; (mov r8, r8)
 800fac8:	46bd      	mov	sp, r7
 800faca:	b002      	add	sp, #8
 800facc:	bd80      	pop	{r7, pc}
 800face:	46c0      	nop			; (mov r8, r8)
 800fad0:	200005b4 	.word	0x200005b4
 800fad4:	00000482 	.word	0x00000482

0800fad8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800fade:	1d3b      	adds	r3, r7, #4
 800fae0:	4a2c      	ldr	r2, [pc, #176]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800fae2:	492d      	ldr	r1, [pc, #180]	; (800fb98 <LoRaMacHandleRequestEvents+0xc0>)
 800fae4:	5c52      	ldrb	r2, [r2, r1]
 800fae6:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800fae8:	4a2a      	ldr	r2, [pc, #168]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800faea:	23d0      	movs	r3, #208	; 0xd0
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	58d3      	ldr	r3, [r2, r3]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d14a      	bne.n	800fb8a <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800faf4:	4b27      	ldr	r3, [pc, #156]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800faf6:	4a28      	ldr	r2, [pc, #160]	; (800fb98 <LoRaMacHandleRequestEvents+0xc0>)
 800faf8:	5c9b      	ldrb	r3, [r3, r2]
 800fafa:	2201      	movs	r2, #1
 800fafc:	4013      	ands	r3, r2
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d005      	beq.n	800fb10 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800fb04:	4b23      	ldr	r3, [pc, #140]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800fb06:	4a24      	ldr	r2, [pc, #144]	; (800fb98 <LoRaMacHandleRequestEvents+0xc0>)
 800fb08:	5c99      	ldrb	r1, [r3, r2]
 800fb0a:	2001      	movs	r0, #1
 800fb0c:	4381      	bics	r1, r0
 800fb0e:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fb10:	4b20      	ldr	r3, [pc, #128]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800fb12:	4a21      	ldr	r2, [pc, #132]	; (800fb98 <LoRaMacHandleRequestEvents+0xc0>)
 800fb14:	5c9b      	ldrb	r3, [r3, r2]
 800fb16:	2204      	movs	r2, #4
 800fb18:	4013      	ands	r3, r2
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d005      	beq.n	800fb2c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800fb20:	4b1c      	ldr	r3, [pc, #112]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800fb22:	4a1d      	ldr	r2, [pc, #116]	; (800fb98 <LoRaMacHandleRequestEvents+0xc0>)
 800fb24:	5c99      	ldrb	r1, [r3, r2]
 800fb26:	2004      	movs	r0, #4
 800fb28:	4381      	bics	r1, r0
 800fb2a:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fb2c:	2001      	movs	r0, #1
 800fb2e:	f7ff ffbf 	bl	800fab0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800fb32:	1d3b      	adds	r3, r7, #4
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2201      	movs	r2, #1
 800fb38:	4013      	ands	r3, r2
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d007      	beq.n	800fb50 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800fb40:	4a14      	ldr	r2, [pc, #80]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800fb42:	23d1      	movs	r3, #209	; 0xd1
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	58d3      	ldr	r3, [r2, r3]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a14      	ldr	r2, [pc, #80]	; (800fb9c <LoRaMacHandleRequestEvents+0xc4>)
 800fb4c:	0010      	movs	r0, r2
 800fb4e:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800fb50:	1d3b      	adds	r3, r7, #4
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	2204      	movs	r2, #4
 800fb56:	4013      	ands	r3, r2
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d00d      	beq.n	800fb7a <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800fb5e:	4b10      	ldr	r3, [pc, #64]	; (800fba0 <LoRaMacHandleRequestEvents+0xc8>)
 800fb60:	0018      	movs	r0, r3
 800fb62:	f005 f925 	bl	8014db0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800fb66:	f005 f985 	bl	8014e74 <LoRaMacConfirmQueueGetCnt>
 800fb6a:	1e03      	subs	r3, r0, #0
 800fb6c:	d005      	beq.n	800fb7a <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800fb6e:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800fb70:	4a09      	ldr	r2, [pc, #36]	; (800fb98 <LoRaMacHandleRequestEvents+0xc0>)
 800fb72:	5c99      	ldrb	r1, [r3, r2]
 800fb74:	2004      	movs	r0, #4
 800fb76:	4301      	orrs	r1, r0
 800fb78:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800fb7a:	f004 fba8 	bl	80142ce <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800fb7e:	4b05      	ldr	r3, [pc, #20]	; (800fb94 <LoRaMacHandleRequestEvents+0xbc>)
 800fb80:	4a05      	ldr	r2, [pc, #20]	; (800fb98 <LoRaMacHandleRequestEvents+0xc0>)
 800fb82:	5c99      	ldrb	r1, [r3, r2]
 800fb84:	2020      	movs	r0, #32
 800fb86:	4381      	bics	r1, r0
 800fb88:	5499      	strb	r1, [r3, r2]
    }
}
 800fb8a:	46c0      	nop			; (mov r8, r8)
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	b002      	add	sp, #8
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	46c0      	nop			; (mov r8, r8)
 800fb94:	200005b4 	.word	0x200005b4
 800fb98:	00000481 	.word	0x00000481
 800fb9c:	200009f0 	.word	0x200009f0
 800fba0:	20000a04 	.word	0x20000a04

0800fba4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800fbaa:	4a0b      	ldr	r2, [pc, #44]	; (800fbd8 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 800fbac:	23d0      	movs	r3, #208	; 0xd0
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	58d3      	ldr	r3, [r2, r3]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d10c      	bne.n	800fbd0 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800fbb6:	1dfb      	adds	r3, r7, #7
 800fbb8:	2200      	movs	r2, #0
 800fbba:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800fbbc:	1dfb      	adds	r3, r7, #7
 800fbbe:	0018      	movs	r0, r3
 800fbc0:	f004 fe94 	bl	80148ec <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800fbc4:	1dfb      	adds	r3, r7, #7
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d001      	beq.n	800fbd0 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800fbcc:	f000 fc78 	bl	80104c0 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800fbd0:	46c0      	nop			; (mov r8, r8)
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	b002      	add	sp, #8
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	200005b4 	.word	0x200005b4

0800fbdc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b088      	sub	sp, #32
 800fbe0:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800fbe2:	4b26      	ldr	r3, [pc, #152]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fbe4:	4a26      	ldr	r2, [pc, #152]	; (800fc80 <LoRaMacHandleIndicationEvents+0xa4>)
 800fbe6:	5c9b      	ldrb	r3, [r3, r2]
 800fbe8:	2208      	movs	r2, #8
 800fbea:	4013      	ands	r3, r2
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00d      	beq.n	800fc0e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800fbf2:	4b22      	ldr	r3, [pc, #136]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fbf4:	4a22      	ldr	r2, [pc, #136]	; (800fc80 <LoRaMacHandleIndicationEvents+0xa4>)
 800fbf6:	5c99      	ldrb	r1, [r3, r2]
 800fbf8:	2008      	movs	r0, #8
 800fbfa:	4381      	bics	r1, r0
 800fbfc:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800fbfe:	4a1f      	ldr	r2, [pc, #124]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fc00:	23d1      	movs	r3, #209	; 0xd1
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	58d3      	ldr	r3, [r2, r3]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	4a1e      	ldr	r2, [pc, #120]	; (800fc84 <LoRaMacHandleIndicationEvents+0xa8>)
 800fc0a:	0010      	movs	r0, r2
 800fc0c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800fc0e:	4b1b      	ldr	r3, [pc, #108]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fc10:	4a1b      	ldr	r2, [pc, #108]	; (800fc80 <LoRaMacHandleIndicationEvents+0xa4>)
 800fc12:	5c9b      	ldrb	r3, [r3, r2]
 800fc14:	2210      	movs	r2, #16
 800fc16:	4013      	ands	r3, r2
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d013      	beq.n	800fc46 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800fc1e:	1d3b      	adds	r3, r7, #4
 800fc20:	2207      	movs	r2, #7
 800fc22:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fc24:	1d3b      	adds	r3, r7, #4
 800fc26:	2200      	movs	r2, #0
 800fc28:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800fc2a:	4a14      	ldr	r2, [pc, #80]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fc2c:	23d1      	movs	r3, #209	; 0xd1
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	58d3      	ldr	r3, [r2, r3]
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	1d3a      	adds	r2, r7, #4
 800fc36:	0010      	movs	r0, r2
 800fc38:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800fc3a:	4b10      	ldr	r3, [pc, #64]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fc3c:	4a10      	ldr	r2, [pc, #64]	; (800fc80 <LoRaMacHandleIndicationEvents+0xa4>)
 800fc3e:	5c99      	ldrb	r1, [r3, r2]
 800fc40:	2010      	movs	r0, #16
 800fc42:	4381      	bics	r1, r0
 800fc44:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800fc46:	4b0d      	ldr	r3, [pc, #52]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fc48:	4a0d      	ldr	r2, [pc, #52]	; (800fc80 <LoRaMacHandleIndicationEvents+0xa4>)
 800fc4a:	5c9b      	ldrb	r3, [r3, r2]
 800fc4c:	2202      	movs	r2, #2
 800fc4e:	4013      	ands	r3, r2
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00d      	beq.n	800fc72 <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800fc56:	4b09      	ldr	r3, [pc, #36]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fc58:	4a09      	ldr	r2, [pc, #36]	; (800fc80 <LoRaMacHandleIndicationEvents+0xa4>)
 800fc5a:	5c99      	ldrb	r1, [r3, r2]
 800fc5c:	2002      	movs	r0, #2
 800fc5e:	4381      	bics	r1, r0
 800fc60:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800fc62:	4a06      	ldr	r2, [pc, #24]	; (800fc7c <LoRaMacHandleIndicationEvents+0xa0>)
 800fc64:	23d1      	movs	r3, #209	; 0xd1
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	58d3      	ldr	r3, [r2, r3]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	4a06      	ldr	r2, [pc, #24]	; (800fc88 <LoRaMacHandleIndicationEvents+0xac>)
 800fc6e:	0010      	movs	r0, r2
 800fc70:	4798      	blx	r3
    }
}
 800fc72:	46c0      	nop			; (mov r8, r8)
 800fc74:	46bd      	mov	sp, r7
 800fc76:	b008      	add	sp, #32
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	46c0      	nop			; (mov r8, r8)
 800fc7c:	200005b4 	.word	0x200005b4
 800fc80:	00000481 	.word	0x00000481
 800fc84:	20000a18 	.word	0x20000a18
 800fc88:	200009d0 	.word	0x200009d0

0800fc8c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800fc8c:	b590      	push	{r4, r7, lr}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800fc92:	4b39      	ldr	r3, [pc, #228]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fc94:	4a39      	ldr	r2, [pc, #228]	; (800fd7c <LoRaMacHandleMcpsRequest+0xf0>)
 800fc96:	5c9b      	ldrb	r3, [r3, r2]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d066      	beq.n	800fd70 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 800fca2:	1dfb      	adds	r3, r7, #7
 800fca4:	2200      	movs	r2, #0
 800fca6:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800fca8:	1dbb      	adds	r3, r7, #6
 800fcaa:	2200      	movs	r2, #0
 800fcac:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800fcae:	4b32      	ldr	r3, [pc, #200]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fcb0:	4a33      	ldr	r2, [pc, #204]	; (800fd80 <LoRaMacHandleMcpsRequest+0xf4>)
 800fcb2:	5c9b      	ldrb	r3, [r3, r2]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d004      	beq.n	800fcc2 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800fcb8:	4b2f      	ldr	r3, [pc, #188]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fcba:	4a31      	ldr	r2, [pc, #196]	; (800fd80 <LoRaMacHandleMcpsRequest+0xf4>)
 800fcbc:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800fcbe:	2b03      	cmp	r3, #3
 800fcc0:	d105      	bne.n	800fcce <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800fcc2:	1dfc      	adds	r4, r7, #7
 800fcc4:	f002 fb70 	bl	80123a8 <CheckRetransUnconfirmedUplink>
 800fcc8:	0003      	movs	r3, r0
 800fcca:	7023      	strb	r3, [r4, #0]
 800fccc:	e026      	b.n	800fd1c <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800fcce:	4b2a      	ldr	r3, [pc, #168]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fcd0:	4a2b      	ldr	r2, [pc, #172]	; (800fd80 <LoRaMacHandleMcpsRequest+0xf4>)
 800fcd2:	5c9b      	ldrb	r3, [r3, r2]
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d121      	bne.n	800fd1c <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800fcd8:	4b27      	ldr	r3, [pc, #156]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fcda:	4a2a      	ldr	r2, [pc, #168]	; (800fd84 <LoRaMacHandleMcpsRequest+0xf8>)
 800fcdc:	5c9b      	ldrb	r3, [r3, r2]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d019      	beq.n	800fd16 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800fce2:	1dfc      	adds	r4, r7, #7
 800fce4:	f002 fb94 	bl	8012410 <CheckRetransConfirmedUplink>
 800fce8:	0003      	movs	r3, r0
 800fcea:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800fcec:	4b22      	ldr	r3, [pc, #136]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fcee:	4a26      	ldr	r2, [pc, #152]	; (800fd88 <LoRaMacHandleMcpsRequest+0xfc>)
 800fcf0:	589a      	ldr	r2, [r3, r2]
 800fcf2:	23b1      	movs	r3, #177	; 0xb1
 800fcf4:	005b      	lsls	r3, r3, #1
 800fcf6:	5cd3      	ldrb	r3, [r2, r3]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d10f      	bne.n	800fd1c <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 800fcfc:	1dfb      	adds	r3, r7, #7
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2201      	movs	r2, #1
 800fd02:	4053      	eors	r3, r2
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d002      	beq.n	800fd10 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 800fd0a:	f002 fbf5 	bl	80124f8 <AckTimeoutRetriesProcess>
 800fd0e:	e005      	b.n	800fd1c <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800fd10:	f002 fc40 	bl	8012594 <AckTimeoutRetriesFinalize>
 800fd14:	e002      	b.n	800fd1c <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800fd16:	1dbb      	adds	r3, r7, #6
 800fd18:	2201      	movs	r2, #1
 800fd1a:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800fd1c:	1dfb      	adds	r3, r7, #7
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d011      	beq.n	800fd48 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800fd24:	4b19      	ldr	r3, [pc, #100]	; (800fd8c <LoRaMacHandleMcpsRequest+0x100>)
 800fd26:	0018      	movs	r0, r3
 800fd28:	f00c fc8a 	bl	801c640 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fd2c:	4a12      	ldr	r2, [pc, #72]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fd2e:	23d0      	movs	r3, #208	; 0xd0
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	58d3      	ldr	r3, [r2, r3]
 800fd34:	2220      	movs	r2, #32
 800fd36:	4393      	bics	r3, r2
 800fd38:	0019      	movs	r1, r3
 800fd3a:	4a0f      	ldr	r2, [pc, #60]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fd3c:	23d0      	movs	r3, #208	; 0xd0
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 800fd42:	f002 fb8d 	bl	8012460 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800fd46:	e013      	b.n	800fd70 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 800fd48:	1dbb      	adds	r3, r7, #6
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	4053      	eors	r3, r2
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00c      	beq.n	800fd70 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800fd56:	4b08      	ldr	r3, [pc, #32]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fd58:	4a08      	ldr	r2, [pc, #32]	; (800fd7c <LoRaMacHandleMcpsRequest+0xf0>)
 800fd5a:	5c99      	ldrb	r1, [r3, r2]
 800fd5c:	2020      	movs	r0, #32
 800fd5e:	4381      	bics	r1, r0
 800fd60:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 800fd62:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <LoRaMacHandleMcpsRequest+0xec>)
 800fd64:	4a07      	ldr	r2, [pc, #28]	; (800fd84 <LoRaMacHandleMcpsRequest+0xf8>)
 800fd66:	2100      	movs	r1, #0
 800fd68:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	f000 f8a2 	bl	800feb4 <OnTxDelayedTimerEvent>
}
 800fd70:	46c0      	nop			; (mov r8, r8)
 800fd72:	46bd      	mov	sp, r7
 800fd74:	b003      	add	sp, #12
 800fd76:	bd90      	pop	{r4, r7, pc}
 800fd78:	200005b4 	.word	0x200005b4
 800fd7c:	00000481 	.word	0x00000481
 800fd80:	0000043c 	.word	0x0000043c
 800fd84:	00000413 	.word	0x00000413
 800fd88:	00000484 	.word	0x00000484
 800fd8c:	2000091c 	.word	0x2000091c

0800fd90 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fd94:	4b1d      	ldr	r3, [pc, #116]	; (800fe0c <LoRaMacHandleMlmeRequest+0x7c>)
 800fd96:	4a1e      	ldr	r2, [pc, #120]	; (800fe10 <LoRaMacHandleMlmeRequest+0x80>)
 800fd98:	5c9b      	ldrb	r3, [r3, r2]
 800fd9a:	2204      	movs	r2, #4
 800fd9c:	4013      	ands	r3, r2
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d02f      	beq.n	800fe04 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fda4:	2001      	movs	r0, #1
 800fda6:	f004 ffe9 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 800fdaa:	1e03      	subs	r3, r0, #0
 800fdac:	d015      	beq.n	800fdda <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800fdae:	2001      	movs	r0, #1
 800fdb0:	f004 ff7c 	bl	8014cac <LoRaMacConfirmQueueGetStatus>
 800fdb4:	1e03      	subs	r3, r0, #0
 800fdb6:	d104      	bne.n	800fdc2 <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800fdb8:	4a14      	ldr	r2, [pc, #80]	; (800fe0c <LoRaMacHandleMlmeRequest+0x7c>)
 800fdba:	2382      	movs	r3, #130	; 0x82
 800fdbc:	00db      	lsls	r3, r3, #3
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fdc2:	4a12      	ldr	r2, [pc, #72]	; (800fe0c <LoRaMacHandleMlmeRequest+0x7c>)
 800fdc4:	23d0      	movs	r3, #208	; 0xd0
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	58d3      	ldr	r3, [r2, r3]
 800fdca:	2202      	movs	r2, #2
 800fdcc:	4393      	bics	r3, r2
 800fdce:	0019      	movs	r1, r3
 800fdd0:	4a0e      	ldr	r2, [pc, #56]	; (800fe0c <LoRaMacHandleMlmeRequest+0x7c>)
 800fdd2:	23d0      	movs	r3, #208	; 0xd0
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800fdd8:	e014      	b.n	800fe04 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800fdda:	2005      	movs	r0, #5
 800fddc:	f004 ffce 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 800fde0:	1e03      	subs	r3, r0, #0
 800fde2:	d104      	bne.n	800fdee <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800fde4:	2006      	movs	r0, #6
 800fde6:	f004 ffc9 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 800fdea:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800fdec:	d00a      	beq.n	800fe04 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fdee:	4a07      	ldr	r2, [pc, #28]	; (800fe0c <LoRaMacHandleMlmeRequest+0x7c>)
 800fdf0:	23d0      	movs	r3, #208	; 0xd0
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	58d3      	ldr	r3, [r2, r3]
 800fdf6:	2202      	movs	r2, #2
 800fdf8:	4393      	bics	r3, r2
 800fdfa:	0019      	movs	r1, r3
 800fdfc:	4a03      	ldr	r2, [pc, #12]	; (800fe0c <LoRaMacHandleMlmeRequest+0x7c>)
 800fdfe:	23d0      	movs	r3, #208	; 0xd0
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	50d1      	str	r1, [r2, r3]
}
 800fe04:	46c0      	nop			; (mov r8, r8)
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	46c0      	nop			; (mov r8, r8)
 800fe0c:	200005b4 	.word	0x200005b4
 800fe10:	00000481 	.word	0x00000481

0800fe14 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fe18:	200c      	movs	r0, #12
 800fe1a:	f004 ffaf 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 800fe1e:	1e03      	subs	r3, r0, #0
 800fe20:	d01c      	beq.n	800fe5c <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800fe22:	4b10      	ldr	r3, [pc, #64]	; (800fe64 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800fe24:	4a10      	ldr	r2, [pc, #64]	; (800fe68 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800fe26:	5c9b      	ldrb	r3, [r3, r2]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d114      	bne.n	800fe5c <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fe32:	4b0c      	ldr	r3, [pc, #48]	; (800fe64 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800fe34:	4a0c      	ldr	r2, [pc, #48]	; (800fe68 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800fe36:	5c9b      	ldrb	r3, [r3, r2]
 800fe38:	2204      	movs	r2, #4
 800fe3a:	4013      	ands	r3, r2
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00c      	beq.n	800fe5c <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fe42:	4a08      	ldr	r2, [pc, #32]	; (800fe64 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800fe44:	23d0      	movs	r3, #208	; 0xd0
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	58d3      	ldr	r3, [r2, r3]
 800fe4a:	2202      	movs	r2, #2
 800fe4c:	4393      	bics	r3, r2
 800fe4e:	0019      	movs	r1, r3
 800fe50:	4a04      	ldr	r2, [pc, #16]	; (800fe64 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800fe52:	23d0      	movs	r3, #208	; 0xd0
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e000      	b.n	800fe5e <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	0018      	movs	r0, r3
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	200005b4 	.word	0x200005b4
 800fe68:	00000481 	.word	0x00000481

0800fe6c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800fe70:	4a0f      	ldr	r2, [pc, #60]	; (800feb0 <LoRaMacCheckForRxAbort+0x44>)
 800fe72:	23d0      	movs	r3, #208	; 0xd0
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	58d3      	ldr	r3, [r2, r3]
 800fe78:	2280      	movs	r2, #128	; 0x80
 800fe7a:	4013      	ands	r3, r2
 800fe7c:	d015      	beq.n	800feaa <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800fe7e:	4a0c      	ldr	r2, [pc, #48]	; (800feb0 <LoRaMacCheckForRxAbort+0x44>)
 800fe80:	23d0      	movs	r3, #208	; 0xd0
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	58d3      	ldr	r3, [r2, r3]
 800fe86:	2280      	movs	r2, #128	; 0x80
 800fe88:	4393      	bics	r3, r2
 800fe8a:	0019      	movs	r1, r3
 800fe8c:	4a08      	ldr	r2, [pc, #32]	; (800feb0 <LoRaMacCheckForRxAbort+0x44>)
 800fe8e:	23d0      	movs	r3, #208	; 0xd0
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fe94:	4a06      	ldr	r2, [pc, #24]	; (800feb0 <LoRaMacCheckForRxAbort+0x44>)
 800fe96:	23d0      	movs	r3, #208	; 0xd0
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	58d3      	ldr	r3, [r2, r3]
 800fe9c:	2202      	movs	r2, #2
 800fe9e:	4393      	bics	r3, r2
 800fea0:	0019      	movs	r1, r3
 800fea2:	4a03      	ldr	r2, [pc, #12]	; (800feb0 <LoRaMacCheckForRxAbort+0x44>)
 800fea4:	23d0      	movs	r3, #208	; 0xd0
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	50d1      	str	r1, [r2, r3]
    }
}
 800feaa:	46c0      	nop			; (mov r8, r8)
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	200005b4 	.word	0x200005b4

0800feb4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800febc:	4b19      	ldr	r3, [pc, #100]	; (800ff24 <OnTxDelayedTimerEvent+0x70>)
 800febe:	0018      	movs	r0, r3
 800fec0:	f00c fbbe 	bl	801c640 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fec4:	4a18      	ldr	r2, [pc, #96]	; (800ff28 <OnTxDelayedTimerEvent+0x74>)
 800fec6:	23d0      	movs	r3, #208	; 0xd0
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	58d3      	ldr	r3, [r2, r3]
 800fecc:	2220      	movs	r2, #32
 800fece:	4393      	bics	r3, r2
 800fed0:	0019      	movs	r1, r3
 800fed2:	4a15      	ldr	r2, [pc, #84]	; (800ff28 <OnTxDelayedTimerEvent+0x74>)
 800fed4:	23d0      	movs	r3, #208	; 0xd0
 800fed6:	009b      	lsls	r3, r3, #2
 800fed8:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800feda:	2001      	movs	r0, #1
 800fedc:	f001 fb5a 	bl	8011594 <ScheduleTx>
 800fee0:	1e03      	subs	r3, r0, #0
 800fee2:	d01a      	beq.n	800ff1a <OnTxDelayedTimerEvent+0x66>
 800fee4:	2b0b      	cmp	r3, #11
 800fee6:	d018      	beq.n	800ff1a <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800fee8:	4b0f      	ldr	r3, [pc, #60]	; (800ff28 <OnTxDelayedTimerEvent+0x74>)
 800feea:	4a10      	ldr	r2, [pc, #64]	; (800ff2c <OnTxDelayedTimerEvent+0x78>)
 800feec:	589b      	ldr	r3, [r3, r2]
 800feee:	2285      	movs	r2, #133	; 0x85
 800fef0:	569b      	ldrsb	r3, [r3, r2]
 800fef2:	b2d9      	uxtb	r1, r3
 800fef4:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <OnTxDelayedTimerEvent+0x74>)
 800fef6:	4a0e      	ldr	r2, [pc, #56]	; (800ff30 <OnTxDelayedTimerEvent+0x7c>)
 800fef8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800fefa:	4b0b      	ldr	r3, [pc, #44]	; (800ff28 <OnTxDelayedTimerEvent+0x74>)
 800fefc:	4a0d      	ldr	r2, [pc, #52]	; (800ff34 <OnTxDelayedTimerEvent+0x80>)
 800fefe:	5c99      	ldrb	r1, [r3, r2]
 800ff00:	4b09      	ldr	r3, [pc, #36]	; (800ff28 <OnTxDelayedTimerEvent+0x74>)
 800ff02:	4a0d      	ldr	r2, [pc, #52]	; (800ff38 <OnTxDelayedTimerEvent+0x84>)
 800ff04:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ff06:	4b08      	ldr	r3, [pc, #32]	; (800ff28 <OnTxDelayedTimerEvent+0x74>)
 800ff08:	4a0c      	ldr	r2, [pc, #48]	; (800ff3c <OnTxDelayedTimerEvent+0x88>)
 800ff0a:	2109      	movs	r1, #9
 800ff0c:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ff0e:	2009      	movs	r0, #9
 800ff10:	f004 fefa 	bl	8014d08 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ff14:	f002 faa4 	bl	8012460 <StopRetransmission>
            break;
 800ff18:	e000      	b.n	800ff1c <OnTxDelayedTimerEvent+0x68>
            break;
 800ff1a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800ff1c:	46c0      	nop			; (mov r8, r8)
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	b002      	add	sp, #8
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	2000091c 	.word	0x2000091c
 800ff28:	200005b4 	.word	0x200005b4
 800ff2c:	00000484 	.word	0x00000484
 800ff30:	0000043e 	.word	0x0000043e
 800ff34:	00000412 	.word	0x00000412
 800ff38:	00000441 	.word	0x00000441
 800ff3c:	0000043d 	.word	0x0000043d

0800ff40 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ff48:	4b19      	ldr	r3, [pc, #100]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff4a:	4a1a      	ldr	r2, [pc, #104]	; (800ffb4 <OnRxWindow1TimerEvent+0x74>)
 800ff4c:	5c99      	ldrb	r1, [r3, r2]
 800ff4e:	4a18      	ldr	r2, [pc, #96]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff50:	23ee      	movs	r3, #238	; 0xee
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800ff56:	4b16      	ldr	r3, [pc, #88]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff58:	4a17      	ldr	r2, [pc, #92]	; (800ffb8 <OnRxWindow1TimerEvent+0x78>)
 800ff5a:	589b      	ldr	r3, [r3, r2]
 800ff5c:	22a5      	movs	r2, #165	; 0xa5
 800ff5e:	5c9b      	ldrb	r3, [r3, r2]
 800ff60:	b259      	sxtb	r1, r3
 800ff62:	4b13      	ldr	r3, [pc, #76]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff64:	4a15      	ldr	r2, [pc, #84]	; (800ffbc <OnRxWindow1TimerEvent+0x7c>)
 800ff66:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ff68:	4b11      	ldr	r3, [pc, #68]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff6a:	4a13      	ldr	r2, [pc, #76]	; (800ffb8 <OnRxWindow1TimerEvent+0x78>)
 800ff6c:	589b      	ldr	r3, [r3, r2]
 800ff6e:	22b9      	movs	r2, #185	; 0xb9
 800ff70:	5c99      	ldrb	r1, [r3, r2]
 800ff72:	4a0f      	ldr	r2, [pc, #60]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff74:	23f2      	movs	r3, #242	; 0xf2
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ff7a:	4b0d      	ldr	r3, [pc, #52]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff7c:	4a0e      	ldr	r2, [pc, #56]	; (800ffb8 <OnRxWindow1TimerEvent+0x78>)
 800ff7e:	589b      	ldr	r3, [r3, r2]
 800ff80:	22ca      	movs	r2, #202	; 0xca
 800ff82:	5c99      	ldrb	r1, [r3, r2]
 800ff84:	4b0a      	ldr	r3, [pc, #40]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff86:	4a0e      	ldr	r2, [pc, #56]	; (800ffc0 <OnRxWindow1TimerEvent+0x80>)
 800ff88:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ff8a:	4b09      	ldr	r3, [pc, #36]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff8c:	4a0d      	ldr	r2, [pc, #52]	; (800ffc4 <OnRxWindow1TimerEvent+0x84>)
 800ff8e:	2100      	movs	r1, #0
 800ff90:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ff92:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <OnRxWindow1TimerEvent+0x70>)
 800ff94:	4a0c      	ldr	r2, [pc, #48]	; (800ffc8 <OnRxWindow1TimerEvent+0x88>)
 800ff96:	2100      	movs	r1, #0
 800ff98:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ff9a:	4a0c      	ldr	r2, [pc, #48]	; (800ffcc <OnRxWindow1TimerEvent+0x8c>)
 800ff9c:	4b0c      	ldr	r3, [pc, #48]	; (800ffd0 <OnRxWindow1TimerEvent+0x90>)
 800ff9e:	0011      	movs	r1, r2
 800ffa0:	0018      	movs	r0, r3
 800ffa2:	f001 fd9d 	bl	8011ae0 <RxWindowSetup>
}
 800ffa6:	46c0      	nop			; (mov r8, r8)
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	b002      	add	sp, #8
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	46c0      	nop			; (mov r8, r8)
 800ffb0:	200005b4 	.word	0x200005b4
 800ffb4:	00000415 	.word	0x00000415
 800ffb8:	00000484 	.word	0x00000484
 800ffbc:	000003bb 	.word	0x000003bb
 800ffc0:	000003c9 	.word	0x000003c9
 800ffc4:	000003ca 	.word	0x000003ca
 800ffc8:	000003cb 	.word	0x000003cb
 800ffcc:	2000096c 	.word	0x2000096c
 800ffd0:	20000934 	.word	0x20000934

0800ffd4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ffdc:	4a1c      	ldr	r2, [pc, #112]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 800ffde:	2390      	movs	r3, #144	; 0x90
 800ffe0:	00db      	lsls	r3, r3, #3
 800ffe2:	5cd3      	ldrb	r3, [r2, r3]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d02f      	beq.n	8010048 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ffe8:	4b19      	ldr	r3, [pc, #100]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 800ffea:	4a1a      	ldr	r2, [pc, #104]	; (8010054 <OnRxWindow2TimerEvent+0x80>)
 800ffec:	5c99      	ldrb	r1, [r3, r2]
 800ffee:	4a18      	ldr	r2, [pc, #96]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 800fff0:	23f3      	movs	r3, #243	; 0xf3
 800fff2:	009b      	lsls	r3, r3, #2
 800fff4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800fff6:	4b16      	ldr	r3, [pc, #88]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 800fff8:	4a17      	ldr	r2, [pc, #92]	; (8010058 <OnRxWindow2TimerEvent+0x84>)
 800fffa:	589b      	ldr	r3, [r3, r2]
 800fffc:	22a8      	movs	r2, #168	; 0xa8
 800fffe:	5899      	ldr	r1, [r3, r2]
 8010000:	4a13      	ldr	r2, [pc, #76]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 8010002:	23f4      	movs	r3, #244	; 0xf4
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010008:	4b11      	ldr	r3, [pc, #68]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 801000a:	4a13      	ldr	r2, [pc, #76]	; (8010058 <OnRxWindow2TimerEvent+0x84>)
 801000c:	589b      	ldr	r3, [r3, r2]
 801000e:	22b9      	movs	r2, #185	; 0xb9
 8010010:	5c99      	ldrb	r1, [r3, r2]
 8010012:	4a0f      	ldr	r2, [pc, #60]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 8010014:	23f7      	movs	r3, #247	; 0xf7
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801001a:	4b0d      	ldr	r3, [pc, #52]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 801001c:	4a0e      	ldr	r2, [pc, #56]	; (8010058 <OnRxWindow2TimerEvent+0x84>)
 801001e:	589b      	ldr	r3, [r3, r2]
 8010020:	22ca      	movs	r2, #202	; 0xca
 8010022:	5c99      	ldrb	r1, [r3, r2]
 8010024:	4b0a      	ldr	r3, [pc, #40]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 8010026:	4a0d      	ldr	r2, [pc, #52]	; (801005c <OnRxWindow2TimerEvent+0x88>)
 8010028:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801002a:	4b09      	ldr	r3, [pc, #36]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 801002c:	4a0c      	ldr	r2, [pc, #48]	; (8010060 <OnRxWindow2TimerEvent+0x8c>)
 801002e:	2100      	movs	r1, #0
 8010030:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010032:	4b07      	ldr	r3, [pc, #28]	; (8010050 <OnRxWindow2TimerEvent+0x7c>)
 8010034:	4a0b      	ldr	r2, [pc, #44]	; (8010064 <OnRxWindow2TimerEvent+0x90>)
 8010036:	2101      	movs	r1, #1
 8010038:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 801003a:	4a0b      	ldr	r2, [pc, #44]	; (8010068 <OnRxWindow2TimerEvent+0x94>)
 801003c:	4b0b      	ldr	r3, [pc, #44]	; (801006c <OnRxWindow2TimerEvent+0x98>)
 801003e:	0011      	movs	r1, r2
 8010040:	0018      	movs	r0, r3
 8010042:	f001 fd4d 	bl	8011ae0 <RxWindowSetup>
 8010046:	e000      	b.n	801004a <OnRxWindow2TimerEvent+0x76>
        return;
 8010048:	46c0      	nop			; (mov r8, r8)
}
 801004a:	46bd      	mov	sp, r7
 801004c:	b002      	add	sp, #8
 801004e:	bd80      	pop	{r7, pc}
 8010050:	200005b4 	.word	0x200005b4
 8010054:	00000415 	.word	0x00000415
 8010058:	00000484 	.word	0x00000484
 801005c:	000003dd 	.word	0x000003dd
 8010060:	000003de 	.word	0x000003de
 8010064:	000003df 	.word	0x000003df
 8010068:	20000980 	.word	0x20000980
 801006c:	2000094c 	.word	0x2000094c

08010070 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010078:	4b18      	ldr	r3, [pc, #96]	; (80100dc <OnAckTimeoutTimerEvent+0x6c>)
 801007a:	0018      	movs	r0, r3
 801007c:	f00c fae0 	bl	801c640 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010080:	4b17      	ldr	r3, [pc, #92]	; (80100e0 <OnAckTimeoutTimerEvent+0x70>)
 8010082:	4a18      	ldr	r2, [pc, #96]	; (80100e4 <OnAckTimeoutTimerEvent+0x74>)
 8010084:	5c9b      	ldrb	r3, [r3, r2]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d003      	beq.n	8010092 <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 801008a:	4b15      	ldr	r3, [pc, #84]	; (80100e0 <OnAckTimeoutTimerEvent+0x70>)
 801008c:	4a16      	ldr	r2, [pc, #88]	; (80100e8 <OnAckTimeoutTimerEvent+0x78>)
 801008e:	2101      	movs	r1, #1
 8010090:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8010092:	4b13      	ldr	r3, [pc, #76]	; (80100e0 <OnAckTimeoutTimerEvent+0x70>)
 8010094:	4a15      	ldr	r2, [pc, #84]	; (80100ec <OnAckTimeoutTimerEvent+0x7c>)
 8010096:	589b      	ldr	r3, [r3, r2]
 8010098:	227c      	movs	r2, #124	; 0x7c
 801009a:	5c9b      	ldrb	r3, [r3, r2]
 801009c:	2b02      	cmp	r3, #2
 801009e:	d105      	bne.n	80100ac <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80100a0:	4b0f      	ldr	r3, [pc, #60]	; (80100e0 <OnAckTimeoutTimerEvent+0x70>)
 80100a2:	4a13      	ldr	r2, [pc, #76]	; (80100f0 <OnAckTimeoutTimerEvent+0x80>)
 80100a4:	5c99      	ldrb	r1, [r3, r2]
 80100a6:	2020      	movs	r0, #32
 80100a8:	4301      	orrs	r1, r0
 80100aa:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80100ac:	4a0c      	ldr	r2, [pc, #48]	; (80100e0 <OnAckTimeoutTimerEvent+0x70>)
 80100ae:	23d2      	movs	r3, #210	; 0xd2
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	58d3      	ldr	r3, [r2, r3]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00c      	beq.n	80100d2 <OnAckTimeoutTimerEvent+0x62>
 80100b8:	4a09      	ldr	r2, [pc, #36]	; (80100e0 <OnAckTimeoutTimerEvent+0x70>)
 80100ba:	23d2      	movs	r3, #210	; 0xd2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	58d3      	ldr	r3, [r2, r3]
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d005      	beq.n	80100d2 <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80100c6:	4a06      	ldr	r2, [pc, #24]	; (80100e0 <OnAckTimeoutTimerEvent+0x70>)
 80100c8:	23d2      	movs	r3, #210	; 0xd2
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	58d3      	ldr	r3, [r2, r3]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	4798      	blx	r3
    }
}
 80100d2:	46c0      	nop			; (mov r8, r8)
 80100d4:	46bd      	mov	sp, r7
 80100d6:	b002      	add	sp, #8
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	46c0      	nop			; (mov r8, r8)
 80100dc:	200009ac 	.word	0x200009ac
 80100e0:	200005b4 	.word	0x200005b4
 80100e4:	00000414 	.word	0x00000414
 80100e8:	00000413 	.word	0x00000413
 80100ec:	00000484 	.word	0x00000484
 80100f0:	00000481 	.word	0x00000481

080100f4 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80100f4:	b590      	push	{r4, r7, lr}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60ba      	str	r2, [r7, #8]
 80100fc:	607b      	str	r3, [r7, #4]
 80100fe:	230f      	movs	r3, #15
 8010100:	18fb      	adds	r3, r7, r3
 8010102:	1c02      	adds	r2, r0, #0
 8010104:	701a      	strb	r2, [r3, #0]
 8010106:	230e      	movs	r3, #14
 8010108:	18fb      	adds	r3, r7, r3
 801010a:	1c0a      	adds	r2, r1, #0
 801010c:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d005      	beq.n	8010120 <GetFCntDown+0x2c>
 8010114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <GetFCntDown+0x2c>
 801011a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010120:	230a      	movs	r3, #10
 8010122:	e033      	b.n	801018c <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010124:	230f      	movs	r3, #15
 8010126:	18fb      	adds	r3, r7, r3
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d01a      	beq.n	8010164 <GetFCntDown+0x70>
 801012e:	2b01      	cmp	r3, #1
 8010130:	d11c      	bne.n	801016c <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010132:	1d3b      	adds	r3, r7, #4
 8010134:	789b      	ldrb	r3, [r3, #2]
 8010136:	2b01      	cmp	r3, #1
 8010138:	d110      	bne.n	801015c <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 801013a:	220e      	movs	r2, #14
 801013c:	18bb      	adds	r3, r7, r2
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d003      	beq.n	801014c <GetFCntDown+0x58>
 8010144:	18bb      	adds	r3, r7, r2
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b03      	cmp	r3, #3
 801014a:	d103      	bne.n	8010154 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014e:	2202      	movs	r2, #2
 8010150:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010152:	e00d      	b.n	8010170 <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 8010154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010156:	2201      	movs	r2, #1
 8010158:	701a      	strb	r2, [r3, #0]
            break;
 801015a:	e009      	b.n	8010170 <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	2203      	movs	r2, #3
 8010160:	701a      	strb	r2, [r3, #0]
            break;
 8010162:	e005      	b.n	8010170 <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010166:	2204      	movs	r2, #4
 8010168:	701a      	strb	r2, [r3, #0]
            break;
 801016a:	e001      	b.n	8010170 <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801016c:	2305      	movs	r3, #5
 801016e:	e00d      	b.n	801018c <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8010170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010172:	7818      	ldrb	r0, [r3, #0]
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	89db      	ldrh	r3, [r3, #14]
 8010178:	001c      	movs	r4, r3
 801017a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801017c:	2320      	movs	r3, #32
 801017e:	18fb      	adds	r3, r7, r3
 8010180:	8819      	ldrh	r1, [r3, #0]
 8010182:	0013      	movs	r3, r2
 8010184:	0022      	movs	r2, r4
 8010186:	f005 faa1 	bl	80156cc <LoRaMacCryptoGetFCntDown>
 801018a:	0003      	movs	r3, r0
}
 801018c:	0018      	movs	r0, r3
 801018e:	46bd      	mov	sp, r7
 8010190:	b005      	add	sp, #20
 8010192:	bd90      	pop	{r4, r7, pc}

08010194 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010194:	b5b0      	push	{r4, r5, r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	0002      	movs	r2, r0
 801019c:	1dfb      	adds	r3, r7, #7
 801019e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80101a0:	230f      	movs	r3, #15
 80101a2:	18fb      	adds	r3, r7, r3
 80101a4:	2203      	movs	r2, #3
 80101a6:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 80101a8:	4b82      	ldr	r3, [pc, #520]	; (80103b4 <SwitchClass+0x220>)
 80101aa:	4a83      	ldr	r2, [pc, #524]	; (80103b8 <SwitchClass+0x224>)
 80101ac:	589b      	ldr	r3, [r3, r2]
 80101ae:	227c      	movs	r2, #124	; 0x7c
 80101b0:	5c9b      	ldrb	r3, [r3, r2]
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	d100      	bne.n	80101b8 <SwitchClass+0x24>
 80101b6:	e0de      	b.n	8010376 <SwitchClass+0x1e2>
 80101b8:	dd00      	ble.n	80101bc <SwitchClass+0x28>
 80101ba:	e0f4      	b.n	80103a6 <SwitchClass+0x212>
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d003      	beq.n	80101c8 <SwitchClass+0x34>
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d100      	bne.n	80101c6 <SwitchClass+0x32>
 80101c4:	e0c2      	b.n	801034c <SwitchClass+0x1b8>
 80101c6:	e0ee      	b.n	80103a6 <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80101c8:	1dfb      	adds	r3, r7, #7
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10b      	bne.n	80101e8 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80101d0:	4b78      	ldr	r3, [pc, #480]	; (80103b4 <SwitchClass+0x220>)
 80101d2:	4a79      	ldr	r2, [pc, #484]	; (80103b8 <SwitchClass+0x224>)
 80101d4:	589a      	ldr	r2, [r3, r2]
 80101d6:	4b77      	ldr	r3, [pc, #476]	; (80103b4 <SwitchClass+0x220>)
 80101d8:	4977      	ldr	r1, [pc, #476]	; (80103b8 <SwitchClass+0x224>)
 80101da:	585b      	ldr	r3, [r3, r1]
 80101dc:	20b0      	movs	r0, #176	; 0xb0
 80101de:	21a8      	movs	r1, #168	; 0xa8
 80101e0:	181b      	adds	r3, r3, r0
 80101e2:	1852      	adds	r2, r2, r1
 80101e4:	ca03      	ldmia	r2!, {r0, r1}
 80101e6:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 80101e8:	1dfb      	adds	r3, r7, #7
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d113      	bne.n	8010218 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80101f0:	250f      	movs	r5, #15
 80101f2:	197c      	adds	r4, r7, r5
 80101f4:	1dfb      	adds	r3, r7, #7
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	0018      	movs	r0, r3
 80101fa:	f004 f86d 	bl	80142d8 <LoRaMacClassBSwitchClass>
 80101fe:	0003      	movs	r3, r0
 8010200:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 8010202:	197b      	adds	r3, r7, r5
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d106      	bne.n	8010218 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 801020a:	4b6a      	ldr	r3, [pc, #424]	; (80103b4 <SwitchClass+0x220>)
 801020c:	4a6a      	ldr	r2, [pc, #424]	; (80103b8 <SwitchClass+0x224>)
 801020e:	589b      	ldr	r3, [r3, r2]
 8010210:	1dfa      	adds	r2, r7, #7
 8010212:	217c      	movs	r1, #124	; 0x7c
 8010214:	7812      	ldrb	r2, [r2, #0]
 8010216:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 8010218:	1dfb      	adds	r3, r7, #7
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	2b02      	cmp	r3, #2
 801021e:	d000      	beq.n	8010222 <SwitchClass+0x8e>
 8010220:	e0bc      	b.n	801039c <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010222:	4b64      	ldr	r3, [pc, #400]	; (80103b4 <SwitchClass+0x220>)
 8010224:	4a64      	ldr	r2, [pc, #400]	; (80103b8 <SwitchClass+0x224>)
 8010226:	589b      	ldr	r3, [r3, r2]
 8010228:	1dfa      	adds	r2, r7, #7
 801022a:	217c      	movs	r1, #124	; 0x7c
 801022c:	7812      	ldrb	r2, [r2, #0]
 801022e:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010230:	4860      	ldr	r0, [pc, #384]	; (80103b4 <SwitchClass+0x220>)
 8010232:	23f8      	movs	r3, #248	; 0xf8
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	495f      	ldr	r1, [pc, #380]	; (80103b4 <SwitchClass+0x220>)
 8010238:	22f3      	movs	r2, #243	; 0xf3
 801023a:	0092      	lsls	r2, r2, #2
 801023c:	18c3      	adds	r3, r0, r3
 801023e:	188a      	adds	r2, r1, r2
 8010240:	ca13      	ldmia	r2!, {r0, r1, r4}
 8010242:	c313      	stmia	r3!, {r0, r1, r4}
 8010244:	ca03      	ldmia	r2!, {r0, r1}
 8010246:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010248:	4b5a      	ldr	r3, [pc, #360]	; (80103b4 <SwitchClass+0x220>)
 801024a:	4a5c      	ldr	r2, [pc, #368]	; (80103bc <SwitchClass+0x228>)
 801024c:	2102      	movs	r1, #2
 801024e:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010250:	230e      	movs	r3, #14
 8010252:	18fb      	adds	r3, r7, r3
 8010254:	2200      	movs	r2, #0
 8010256:	701a      	strb	r2, [r3, #0]
 8010258:	e064      	b.n	8010324 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 801025a:	4b56      	ldr	r3, [pc, #344]	; (80103b4 <SwitchClass+0x220>)
 801025c:	4a56      	ldr	r2, [pc, #344]	; (80103b8 <SwitchClass+0x224>)
 801025e:	589a      	ldr	r2, [r3, r2]
 8010260:	240e      	movs	r4, #14
 8010262:	193b      	adds	r3, r7, r4
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	b25b      	sxtb	r3, r3
 8010268:	2152      	movs	r1, #82	; 0x52
 801026a:	202c      	movs	r0, #44	; 0x2c
 801026c:	4343      	muls	r3, r0
 801026e:	18d3      	adds	r3, r2, r3
 8010270:	185b      	adds	r3, r3, r1
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d04c      	beq.n	8010312 <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010278:	4b4e      	ldr	r3, [pc, #312]	; (80103b4 <SwitchClass+0x220>)
 801027a:	4a4f      	ldr	r2, [pc, #316]	; (80103b8 <SwitchClass+0x224>)
 801027c:	5899      	ldr	r1, [r3, r2]
 801027e:	193b      	adds	r3, r7, r4
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	b25b      	sxtb	r3, r3
 8010284:	4a4b      	ldr	r2, [pc, #300]	; (80103b4 <SwitchClass+0x220>)
 8010286:	484c      	ldr	r0, [pc, #304]	; (80103b8 <SwitchClass+0x224>)
 8010288:	5812      	ldr	r2, [r2, r0]
 801028a:	202c      	movs	r0, #44	; 0x2c
 801028c:	4343      	muls	r3, r0
 801028e:	18cb      	adds	r3, r1, r3
 8010290:	3368      	adds	r3, #104	; 0x68
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	21b0      	movs	r1, #176	; 0xb0
 8010296:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010298:	4b46      	ldr	r3, [pc, #280]	; (80103b4 <SwitchClass+0x220>)
 801029a:	4a47      	ldr	r2, [pc, #284]	; (80103b8 <SwitchClass+0x224>)
 801029c:	589a      	ldr	r2, [r3, r2]
 801029e:	193b      	adds	r3, r7, r4
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	b25b      	sxtb	r3, r3
 80102a4:	216c      	movs	r1, #108	; 0x6c
 80102a6:	202c      	movs	r0, #44	; 0x2c
 80102a8:	4343      	muls	r3, r0
 80102aa:	18d3      	adds	r3, r2, r3
 80102ac:	185b      	adds	r3, r3, r1
 80102ae:	2100      	movs	r1, #0
 80102b0:	5659      	ldrsb	r1, [r3, r1]
 80102b2:	4b40      	ldr	r3, [pc, #256]	; (80103b4 <SwitchClass+0x220>)
 80102b4:	4a40      	ldr	r2, [pc, #256]	; (80103b8 <SwitchClass+0x224>)
 80102b6:	589b      	ldr	r3, [r3, r2]
 80102b8:	b2c9      	uxtb	r1, r1
 80102ba:	22b4      	movs	r2, #180	; 0xb4
 80102bc:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80102be:	4b3d      	ldr	r3, [pc, #244]	; (80103b4 <SwitchClass+0x220>)
 80102c0:	4a3f      	ldr	r2, [pc, #252]	; (80103c0 <SwitchClass+0x22c>)
 80102c2:	5c99      	ldrb	r1, [r3, r2]
 80102c4:	4a3b      	ldr	r2, [pc, #236]	; (80103b4 <SwitchClass+0x220>)
 80102c6:	23f8      	movs	r3, #248	; 0xf8
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80102cc:	4b39      	ldr	r3, [pc, #228]	; (80103b4 <SwitchClass+0x220>)
 80102ce:	4a3a      	ldr	r2, [pc, #232]	; (80103b8 <SwitchClass+0x224>)
 80102d0:	589b      	ldr	r3, [r3, r2]
 80102d2:	22b0      	movs	r2, #176	; 0xb0
 80102d4:	5899      	ldr	r1, [r3, r2]
 80102d6:	4a37      	ldr	r2, [pc, #220]	; (80103b4 <SwitchClass+0x220>)
 80102d8:	23f9      	movs	r3, #249	; 0xf9
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80102de:	4b35      	ldr	r3, [pc, #212]	; (80103b4 <SwitchClass+0x220>)
 80102e0:	4a35      	ldr	r2, [pc, #212]	; (80103b8 <SwitchClass+0x224>)
 80102e2:	589b      	ldr	r3, [r3, r2]
 80102e4:	22b9      	movs	r2, #185	; 0xb9
 80102e6:	5c99      	ldrb	r1, [r3, r2]
 80102e8:	4a32      	ldr	r2, [pc, #200]	; (80103b4 <SwitchClass+0x220>)
 80102ea:	23fc      	movs	r3, #252	; 0xfc
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80102f0:	4b30      	ldr	r3, [pc, #192]	; (80103b4 <SwitchClass+0x220>)
 80102f2:	4a31      	ldr	r2, [pc, #196]	; (80103b8 <SwitchClass+0x224>)
 80102f4:	589b      	ldr	r3, [r3, r2]
 80102f6:	22ca      	movs	r2, #202	; 0xca
 80102f8:	5c99      	ldrb	r1, [r3, r2]
 80102fa:	4b2e      	ldr	r3, [pc, #184]	; (80103b4 <SwitchClass+0x220>)
 80102fc:	4a31      	ldr	r2, [pc, #196]	; (80103c4 <SwitchClass+0x230>)
 80102fe:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010300:	4b2c      	ldr	r3, [pc, #176]	; (80103b4 <SwitchClass+0x220>)
 8010302:	4a2e      	ldr	r2, [pc, #184]	; (80103bc <SwitchClass+0x228>)
 8010304:	2103      	movs	r1, #3
 8010306:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010308:	4b2a      	ldr	r3, [pc, #168]	; (80103b4 <SwitchClass+0x220>)
 801030a:	4a2f      	ldr	r2, [pc, #188]	; (80103c8 <SwitchClass+0x234>)
 801030c:	2101      	movs	r1, #1
 801030e:	5499      	strb	r1, [r3, r2]
                        break;
 8010310:	e00e      	b.n	8010330 <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010312:	210e      	movs	r1, #14
 8010314:	187b      	adds	r3, r7, r1
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	b25b      	sxtb	r3, r3
 801031a:	b2db      	uxtb	r3, r3
 801031c:	3301      	adds	r3, #1
 801031e:	b2da      	uxtb	r2, r3
 8010320:	187b      	adds	r3, r7, r1
 8010322:	701a      	strb	r2, [r3, #0]
 8010324:	230e      	movs	r3, #14
 8010326:	18fb      	adds	r3, r7, r3
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	b25b      	sxtb	r3, r3
 801032c:	2b00      	cmp	r3, #0
 801032e:	dd94      	ble.n	801025a <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010330:	4b20      	ldr	r3, [pc, #128]	; (80103b4 <SwitchClass+0x220>)
 8010332:	4a26      	ldr	r2, [pc, #152]	; (80103cc <SwitchClass+0x238>)
 8010334:	2100      	movs	r1, #0
 8010336:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010338:	4b25      	ldr	r3, [pc, #148]	; (80103d0 <SwitchClass+0x23c>)
 801033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801033e:	f001 fc01 	bl	8011b44 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010342:	230f      	movs	r3, #15
 8010344:	18fb      	adds	r3, r7, r3
 8010346:	2200      	movs	r2, #0
 8010348:	701a      	strb	r2, [r3, #0]
            }
            break;
 801034a:	e027      	b.n	801039c <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 801034c:	250f      	movs	r5, #15
 801034e:	197c      	adds	r4, r7, r5
 8010350:	1dfb      	adds	r3, r7, #7
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	0018      	movs	r0, r3
 8010356:	f003 ffbf 	bl	80142d8 <LoRaMacClassBSwitchClass>
 801035a:	0003      	movs	r3, r0
 801035c:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 801035e:	197b      	adds	r3, r7, r5
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d11c      	bne.n	80103a0 <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010366:	4b13      	ldr	r3, [pc, #76]	; (80103b4 <SwitchClass+0x220>)
 8010368:	4a13      	ldr	r2, [pc, #76]	; (80103b8 <SwitchClass+0x224>)
 801036a:	589b      	ldr	r3, [r3, r2]
 801036c:	1dfa      	adds	r2, r7, #7
 801036e:	217c      	movs	r1, #124	; 0x7c
 8010370:	7812      	ldrb	r2, [r2, #0]
 8010372:	545a      	strb	r2, [r3, r1]
            }
            break;
 8010374:	e014      	b.n	80103a0 <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010376:	1dfb      	adds	r3, r7, #7
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d112      	bne.n	80103a4 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 801037e:	4b0d      	ldr	r3, [pc, #52]	; (80103b4 <SwitchClass+0x220>)
 8010380:	4a0d      	ldr	r2, [pc, #52]	; (80103b8 <SwitchClass+0x224>)
 8010382:	589b      	ldr	r3, [r3, r2]
 8010384:	1dfa      	adds	r2, r7, #7
 8010386:	217c      	movs	r1, #124	; 0x7c
 8010388:	7812      	ldrb	r2, [r2, #0]
 801038a:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801038c:	4b10      	ldr	r3, [pc, #64]	; (80103d0 <SwitchClass+0x23c>)
 801038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010390:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010392:	230f      	movs	r3, #15
 8010394:	18fb      	adds	r3, r7, r3
 8010396:	2200      	movs	r2, #0
 8010398:	701a      	strb	r2, [r3, #0]
            }
            break;
 801039a:	e003      	b.n	80103a4 <SwitchClass+0x210>
            break;
 801039c:	46c0      	nop			; (mov r8, r8)
 801039e:	e002      	b.n	80103a6 <SwitchClass+0x212>
            break;
 80103a0:	46c0      	nop			; (mov r8, r8)
 80103a2:	e000      	b.n	80103a6 <SwitchClass+0x212>
            break;
 80103a4:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 80103a6:	230f      	movs	r3, #15
 80103a8:	18fb      	adds	r3, r7, r3
 80103aa:	781b      	ldrb	r3, [r3, #0]
}
 80103ac:	0018      	movs	r0, r3
 80103ae:	46bd      	mov	sp, r7
 80103b0:	b004      	add	sp, #16
 80103b2:	bdb0      	pop	{r4, r5, r7, pc}
 80103b4:	200005b4 	.word	0x200005b4
 80103b8:	00000484 	.word	0x00000484
 80103bc:	000003f3 	.word	0x000003f3
 80103c0:	00000415 	.word	0x00000415
 80103c4:	000003f1 	.word	0x000003f1
 80103c8:	000003f2 	.word	0x000003f2
 80103cc:	00000414 	.word	0x00000414
 80103d0:	0801f358 	.word	0x0801f358

080103d4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b086      	sub	sp, #24
 80103d8:	af00      	add	r7, sp, #0
 80103da:	0002      	movs	r2, r0
 80103dc:	1dfb      	adds	r3, r7, #7
 80103de:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80103e0:	4b17      	ldr	r3, [pc, #92]	; (8010440 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 80103e2:	4a18      	ldr	r2, [pc, #96]	; (8010444 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 80103e4:	589b      	ldr	r3, [r3, r2]
 80103e6:	22b8      	movs	r2, #184	; 0xb8
 80103e8:	5c9a      	ldrb	r2, [r3, r2]
 80103ea:	2110      	movs	r1, #16
 80103ec:	187b      	adds	r3, r7, r1
 80103ee:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 80103f0:	187b      	adds	r3, r7, r1
 80103f2:	1dfa      	adds	r2, r7, #7
 80103f4:	7812      	ldrb	r2, [r2, #0]
 80103f6:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80103f8:	187b      	adds	r3, r7, r1
 80103fa:	220d      	movs	r2, #13
 80103fc:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 80103fe:	4b10      	ldr	r3, [pc, #64]	; (8010440 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010400:	4a10      	ldr	r2, [pc, #64]	; (8010444 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010402:	589b      	ldr	r3, [r3, r2]
 8010404:	22ca      	movs	r2, #202	; 0xca
 8010406:	5c9b      	ldrb	r3, [r3, r2]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d002      	beq.n	8010412 <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801040c:	187b      	adds	r3, r7, r1
 801040e:	220e      	movs	r2, #14
 8010410:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010412:	4b0b      	ldr	r3, [pc, #44]	; (8010440 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010414:	4a0b      	ldr	r2, [pc, #44]	; (8010444 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010416:	589b      	ldr	r3, [r3, r2]
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	2210      	movs	r2, #16
 801041c:	18ba      	adds	r2, r7, r2
 801041e:	0011      	movs	r1, r2
 8010420:	0018      	movs	r0, r3
 8010422:	f006 f8c8 	bl	80165b6 <RegionGetPhyParam>
 8010426:	0003      	movs	r3, r0
 8010428:	001a      	movs	r2, r3
 801042a:	210c      	movs	r1, #12
 801042c:	187b      	adds	r3, r7, r1
 801042e:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 8010430:	187b      	adds	r3, r7, r1
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	b2db      	uxtb	r3, r3
}
 8010436:	0018      	movs	r0, r3
 8010438:	46bd      	mov	sp, r7
 801043a:	b006      	add	sp, #24
 801043c:	bd80      	pop	{r7, pc}
 801043e:	46c0      	nop			; (mov r8, r8)
 8010440:	200005b4 	.word	0x200005b4
 8010444:	00000484 	.word	0x00000484

08010448 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010448:	b5b0      	push	{r4, r5, r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	0004      	movs	r4, r0
 8010450:	0008      	movs	r0, r1
 8010452:	0011      	movs	r1, r2
 8010454:	1dfb      	adds	r3, r7, #7
 8010456:	1c22      	adds	r2, r4, #0
 8010458:	701a      	strb	r2, [r3, #0]
 801045a:	1dbb      	adds	r3, r7, #6
 801045c:	1c02      	adds	r2, r0, #0
 801045e:	701a      	strb	r2, [r3, #0]
 8010460:	1d7b      	adds	r3, r7, #5
 8010462:	1c0a      	adds	r2, r1, #0
 8010464:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 8010466:	250e      	movs	r5, #14
 8010468:	197b      	adds	r3, r7, r5
 801046a:	2200      	movs	r2, #0
 801046c:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 801046e:	240c      	movs	r4, #12
 8010470:	193b      	adds	r3, r7, r4
 8010472:	2200      	movs	r2, #0
 8010474:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010476:	1dbb      	adds	r3, r7, #6
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	b25b      	sxtb	r3, r3
 801047c:	0018      	movs	r0, r3
 801047e:	f7ff ffa9 	bl	80103d4 <GetMaxAppPayloadWithoutFOptsLength>
 8010482:	0003      	movs	r3, r0
 8010484:	001a      	movs	r2, r3
 8010486:	0028      	movs	r0, r5
 8010488:	183b      	adds	r3, r7, r0
 801048a:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 801048c:	1dfb      	adds	r3, r7, #7
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	b299      	uxth	r1, r3
 8010492:	1d7b      	adds	r3, r7, #5
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	b29a      	uxth	r2, r3
 8010498:	193b      	adds	r3, r7, r4
 801049a:	188a      	adds	r2, r1, r2
 801049c:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 801049e:	193a      	adds	r2, r7, r4
 80104a0:	183b      	adds	r3, r7, r0
 80104a2:	8812      	ldrh	r2, [r2, #0]
 80104a4:	881b      	ldrh	r3, [r3, #0]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d805      	bhi.n	80104b6 <ValidatePayloadLength+0x6e>
 80104aa:	193b      	adds	r3, r7, r4
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	2bff      	cmp	r3, #255	; 0xff
 80104b0:	d801      	bhi.n	80104b6 <ValidatePayloadLength+0x6e>
    {
        return true;
 80104b2:	2301      	movs	r3, #1
 80104b4:	e000      	b.n	80104b8 <ValidatePayloadLength+0x70>
    }
    return false;
 80104b6:	2300      	movs	r3, #0
}
 80104b8:	0018      	movs	r0, r3
 80104ba:	46bd      	mov	sp, r7
 80104bc:	b004      	add	sp, #16
 80104be:	bdb0      	pop	{r4, r5, r7, pc}

080104c0 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80104c4:	4b04      	ldr	r3, [pc, #16]	; (80104d8 <SetMlmeScheduleUplinkIndication+0x18>)
 80104c6:	4a05      	ldr	r2, [pc, #20]	; (80104dc <SetMlmeScheduleUplinkIndication+0x1c>)
 80104c8:	5c99      	ldrb	r1, [r3, r2]
 80104ca:	2010      	movs	r0, #16
 80104cc:	4301      	orrs	r1, r0
 80104ce:	5499      	strb	r1, [r3, r2]
}
 80104d0:	46c0      	nop			; (mov r8, r8)
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	46c0      	nop			; (mov r8, r8)
 80104d8:	200005b4 	.word	0x200005b4
 80104dc:	00000481 	.word	0x00000481

080104e0 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80104e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e2:	b0a5      	sub	sp, #148	; 0x94
 80104e4:	af02      	add	r7, sp, #8
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	000c      	movs	r4, r1
 80104ea:	0010      	movs	r0, r2
 80104ec:	0019      	movs	r1, r3
 80104ee:	1cfb      	adds	r3, r7, #3
 80104f0:	1c22      	adds	r2, r4, #0
 80104f2:	701a      	strb	r2, [r3, #0]
 80104f4:	1cbb      	adds	r3, r7, #2
 80104f6:	1c02      	adds	r2, r0, #0
 80104f8:	701a      	strb	r2, [r3, #0]
 80104fa:	1c7b      	adds	r3, r7, #1
 80104fc:	1c0a      	adds	r2, r1, #0
 80104fe:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 8010500:	236b      	movs	r3, #107	; 0x6b
 8010502:	18fb      	adds	r3, r7, r3
 8010504:	2200      	movs	r2, #0
 8010506:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8010508:	2387      	movs	r3, #135	; 0x87
 801050a:	18fb      	adds	r3, r7, r3
 801050c:	2200      	movs	r2, #0
 801050e:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010510:	2368      	movs	r3, #104	; 0x68
 8010512:	18fb      	adds	r3, r7, r3
 8010514:	2200      	movs	r2, #0
 8010516:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8010518:	f000 fd58 	bl	8010fcc <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801051c:	1cfb      	adds	r3, r7, #3
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	18d3      	adds	r3, r2, r3
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	0018      	movs	r0, r3
 8010528:	f004 fa06 	bl	8014938 <LoRaMacCommandsGetCmdSize>
 801052c:	0003      	movs	r3, r0
 801052e:	001a      	movs	r2, r3
 8010530:	1cfb      	adds	r3, r7, #3
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	18d2      	adds	r2, r2, r3
 8010536:	1cbb      	adds	r3, r7, #2
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	429a      	cmp	r2, r3
 801053c:	dd01      	ble.n	8010542 <ProcessMacCommands+0x62>
 801053e:	f000 fd4e 	bl	8010fde <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010542:	1cfb      	adds	r3, r7, #3
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	1cfa      	adds	r2, r7, #3
 8010548:	1c59      	adds	r1, r3, #1
 801054a:	7011      	strb	r1, [r2, #0]
 801054c:	001a      	movs	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	189b      	adds	r3, r3, r2
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	2b13      	cmp	r3, #19
 8010556:	d901      	bls.n	801055c <ProcessMacCommands+0x7c>
 8010558:	f000 fd43 	bl	8010fe2 <ProcessMacCommands+0xb02>
 801055c:	009a      	lsls	r2, r3, #2
 801055e:	4bee      	ldr	r3, [pc, #952]	; (8010918 <ProcessMacCommands+0x438>)
 8010560:	18d3      	adds	r3, r2, r3
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010566:	2004      	movs	r0, #4
 8010568:	f004 fc08 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 801056c:	1e03      	subs	r3, r0, #0
 801056e:	d101      	bne.n	8010574 <ProcessMacCommands+0x94>
 8010570:	f000 fd2c 	bl	8010fcc <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010574:	2104      	movs	r1, #4
 8010576:	2000      	movs	r0, #0
 8010578:	f004 fb64 	bl	8014c44 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801057c:	1cfb      	adds	r3, r7, #3
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	1cfa      	adds	r2, r7, #3
 8010582:	1c59      	adds	r1, r3, #1
 8010584:	7011      	strb	r1, [r2, #0]
 8010586:	001a      	movs	r2, r3
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	189b      	adds	r3, r3, r2
 801058c:	7819      	ldrb	r1, [r3, #0]
 801058e:	4ae3      	ldr	r2, [pc, #908]	; (801091c <ProcessMacCommands+0x43c>)
 8010590:	238b      	movs	r3, #139	; 0x8b
 8010592:	00db      	lsls	r3, r3, #3
 8010594:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010596:	1cfb      	adds	r3, r7, #3
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	1cfa      	adds	r2, r7, #3
 801059c:	1c59      	adds	r1, r3, #1
 801059e:	7011      	strb	r1, [r2, #0]
 80105a0:	001a      	movs	r2, r3
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	189b      	adds	r3, r3, r2
 80105a6:	7819      	ldrb	r1, [r3, #0]
 80105a8:	4bdc      	ldr	r3, [pc, #880]	; (801091c <ProcessMacCommands+0x43c>)
 80105aa:	4add      	ldr	r2, [pc, #884]	; (8010920 <ProcessMacCommands+0x440>)
 80105ac:	5499      	strb	r1, [r3, r2]
                }
                break;
 80105ae:	f000 fd0d 	bl	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80105b2:	2657      	movs	r6, #87	; 0x57
 80105b4:	19bb      	adds	r3, r7, r6
 80105b6:	2200      	movs	r2, #0
 80105b8:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 80105ba:	2456      	movs	r4, #86	; 0x56
 80105bc:	193b      	adds	r3, r7, r4
 80105be:	2200      	movs	r2, #0
 80105c0:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 80105c2:	2555      	movs	r5, #85	; 0x55
 80105c4:	197b      	adds	r3, r7, r5
 80105c6:	2200      	movs	r2, #0
 80105c8:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 80105ca:	2354      	movs	r3, #84	; 0x54
 80105cc:	18fb      	adds	r3, r7, r3
 80105ce:	2200      	movs	r2, #0
 80105d0:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 80105d2:	2187      	movs	r1, #135	; 0x87
 80105d4:	187b      	adds	r3, r7, r1
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	2201      	movs	r2, #1
 80105da:	4053      	eors	r3, r2
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d100      	bne.n	80105e4 <ProcessMacCommands+0x104>
 80105e2:	e09d      	b.n	8010720 <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 80105e4:	187b      	adds	r3, r7, r1
 80105e6:	2201      	movs	r2, #1
 80105e8:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80105ea:	1cfb      	adds	r3, r7, #3
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	3b01      	subs	r3, #1
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	18d2      	adds	r2, r2, r3
 80105f4:	2158      	movs	r1, #88	; 0x58
 80105f6:	187b      	adds	r3, r7, r1
 80105f8:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80105fa:	1cba      	adds	r2, r7, #2
 80105fc:	1cfb      	adds	r3, r7, #3
 80105fe:	7812      	ldrb	r2, [r2, #0]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	1ad3      	subs	r3, r2, r3
 8010604:	b2db      	uxtb	r3, r3
 8010606:	3301      	adds	r3, #1
 8010608:	b2da      	uxtb	r2, r3
 801060a:	000d      	movs	r5, r1
 801060c:	197b      	adds	r3, r7, r5
 801060e:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010610:	4bc2      	ldr	r3, [pc, #776]	; (801091c <ProcessMacCommands+0x43c>)
 8010612:	4ac4      	ldr	r2, [pc, #784]	; (8010924 <ProcessMacCommands+0x444>)
 8010614:	589b      	ldr	r3, [r3, r2]
 8010616:	227e      	movs	r2, #126	; 0x7e
 8010618:	5c9a      	ldrb	r2, [r3, r2]
 801061a:	197b      	adds	r3, r7, r5
 801061c:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801061e:	4bbf      	ldr	r3, [pc, #764]	; (801091c <ProcessMacCommands+0x43c>)
 8010620:	4ac0      	ldr	r2, [pc, #768]	; (8010924 <ProcessMacCommands+0x444>)
 8010622:	589b      	ldr	r3, [r3, r2]
 8010624:	22b8      	movs	r2, #184	; 0xb8
 8010626:	5c9a      	ldrb	r2, [r3, r2]
 8010628:	197b      	adds	r3, r7, r5
 801062a:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801062c:	4bbb      	ldr	r3, [pc, #748]	; (801091c <ProcessMacCommands+0x43c>)
 801062e:	4abd      	ldr	r2, [pc, #756]	; (8010924 <ProcessMacCommands+0x444>)
 8010630:	589b      	ldr	r3, [r3, r2]
 8010632:	2285      	movs	r2, #133	; 0x85
 8010634:	569a      	ldrsb	r2, [r3, r2]
 8010636:	197b      	adds	r3, r7, r5
 8010638:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801063a:	4bb8      	ldr	r3, [pc, #736]	; (801091c <ProcessMacCommands+0x43c>)
 801063c:	4ab9      	ldr	r2, [pc, #740]	; (8010924 <ProcessMacCommands+0x444>)
 801063e:	589b      	ldr	r3, [r3, r2]
 8010640:	2284      	movs	r2, #132	; 0x84
 8010642:	569a      	ldrsb	r2, [r3, r2]
 8010644:	197b      	adds	r3, r7, r5
 8010646:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010648:	4bb4      	ldr	r3, [pc, #720]	; (801091c <ProcessMacCommands+0x43c>)
 801064a:	4ab6      	ldr	r2, [pc, #728]	; (8010924 <ProcessMacCommands+0x444>)
 801064c:	589b      	ldr	r3, [r3, r2]
 801064e:	22a4      	movs	r2, #164	; 0xa4
 8010650:	5c9a      	ldrb	r2, [r3, r2]
 8010652:	197b      	adds	r3, r7, r5
 8010654:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010656:	4bb1      	ldr	r3, [pc, #708]	; (801091c <ProcessMacCommands+0x43c>)
 8010658:	4ab2      	ldr	r2, [pc, #712]	; (8010924 <ProcessMacCommands+0x444>)
 801065a:	5899      	ldr	r1, [r3, r2]
 801065c:	197b      	adds	r3, r7, r5
 801065e:	22b0      	movs	r2, #176	; 0xb0
 8010660:	0052      	lsls	r2, r2, #1
 8010662:	588a      	ldr	r2, [r1, r2]
 8010664:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010666:	4bad      	ldr	r3, [pc, #692]	; (801091c <ProcessMacCommands+0x43c>)
 8010668:	4aae      	ldr	r2, [pc, #696]	; (8010924 <ProcessMacCommands+0x444>)
 801066a:	589b      	ldr	r3, [r3, r2]
 801066c:	7818      	ldrb	r0, [r3, #0]
 801066e:	193c      	adds	r4, r7, r4
 8010670:	19ba      	adds	r2, r7, r6
 8010672:	1979      	adds	r1, r7, r5
 8010674:	2354      	movs	r3, #84	; 0x54
 8010676:	18fb      	adds	r3, r7, r3
 8010678:	9301      	str	r3, [sp, #4]
 801067a:	2555      	movs	r5, #85	; 0x55
 801067c:	197b      	adds	r3, r7, r5
 801067e:	9300      	str	r3, [sp, #0]
 8010680:	0023      	movs	r3, r4
 8010682:	f006 f8a0 	bl	80167c6 <RegionLinkAdrReq>
 8010686:	0003      	movs	r3, r0
 8010688:	001a      	movs	r2, r3
 801068a:	216b      	movs	r1, #107	; 0x6b
 801068c:	187b      	adds	r3, r7, r1
 801068e:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010690:	187b      	adds	r3, r7, r1
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	001a      	movs	r2, r3
 8010696:	2307      	movs	r3, #7
 8010698:	4013      	ands	r3, r2
 801069a:	2b07      	cmp	r3, #7
 801069c:	d117      	bne.n	80106ce <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 801069e:	4b9f      	ldr	r3, [pc, #636]	; (801091c <ProcessMacCommands+0x43c>)
 80106a0:	4aa0      	ldr	r2, [pc, #640]	; (8010924 <ProcessMacCommands+0x444>)
 80106a2:	589b      	ldr	r3, [r3, r2]
 80106a4:	19ba      	adds	r2, r7, r6
 80106a6:	2100      	movs	r1, #0
 80106a8:	5651      	ldrsb	r1, [r2, r1]
 80106aa:	2285      	movs	r2, #133	; 0x85
 80106ac:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80106ae:	4b9b      	ldr	r3, [pc, #620]	; (801091c <ProcessMacCommands+0x43c>)
 80106b0:	4a9c      	ldr	r2, [pc, #624]	; (8010924 <ProcessMacCommands+0x444>)
 80106b2:	589b      	ldr	r3, [r3, r2]
 80106b4:	2456      	movs	r4, #86	; 0x56
 80106b6:	193a      	adds	r2, r7, r4
 80106b8:	2100      	movs	r1, #0
 80106ba:	5651      	ldrsb	r1, [r2, r1]
 80106bc:	2284      	movs	r2, #132	; 0x84
 80106be:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80106c0:	4b96      	ldr	r3, [pc, #600]	; (801091c <ProcessMacCommands+0x43c>)
 80106c2:	4a98      	ldr	r2, [pc, #608]	; (8010924 <ProcessMacCommands+0x444>)
 80106c4:	589b      	ldr	r3, [r3, r2]
 80106c6:	197a      	adds	r2, r7, r5
 80106c8:	7811      	ldrb	r1, [r2, #0]
 80106ca:	22a4      	movs	r2, #164	; 0xa4
 80106cc:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80106ce:	2386      	movs	r3, #134	; 0x86
 80106d0:	18fb      	adds	r3, r7, r3
 80106d2:	2200      	movs	r2, #0
 80106d4:	701a      	strb	r2, [r3, #0]
 80106d6:	e00c      	b.n	80106f2 <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80106d8:	236b      	movs	r3, #107	; 0x6b
 80106da:	18fb      	adds	r3, r7, r3
 80106dc:	2201      	movs	r2, #1
 80106de:	0019      	movs	r1, r3
 80106e0:	2003      	movs	r0, #3
 80106e2:	f003 ffb9 	bl	8014658 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80106e6:	2186      	movs	r1, #134	; 0x86
 80106e8:	187b      	adds	r3, r7, r1
 80106ea:	781a      	ldrb	r2, [r3, #0]
 80106ec:	187b      	adds	r3, r7, r1
 80106ee:	3201      	adds	r2, #1
 80106f0:	701a      	strb	r2, [r3, #0]
 80106f2:	2454      	movs	r4, #84	; 0x54
 80106f4:	193b      	adds	r3, r7, r4
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2105      	movs	r1, #5
 80106fa:	0018      	movs	r0, r3
 80106fc:	f7ef fd16 	bl	800012c <__udivsi3>
 8010700:	0003      	movs	r3, r0
 8010702:	b2db      	uxtb	r3, r3
 8010704:	2286      	movs	r2, #134	; 0x86
 8010706:	18ba      	adds	r2, r7, r2
 8010708:	7812      	ldrb	r2, [r2, #0]
 801070a:	429a      	cmp	r2, r3
 801070c:	d3e4      	bcc.n	80106d8 <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 801070e:	193b      	adds	r3, r7, r4
 8010710:	781a      	ldrb	r2, [r3, #0]
 8010712:	1cfb      	adds	r3, r7, #3
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	18d3      	adds	r3, r2, r3
 8010718:	b2da      	uxtb	r2, r3
 801071a:	1cfb      	adds	r3, r7, #3
 801071c:	3a01      	subs	r2, #1
 801071e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8010720:	46c0      	nop			; (mov r8, r8)
 8010722:	f000 fc53 	bl	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8010726:	1cfb      	adds	r3, r7, #3
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	1cfa      	adds	r2, r7, #3
 801072c:	1c59      	adds	r1, r3, #1
 801072e:	7011      	strb	r1, [r2, #0]
 8010730:	001a      	movs	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	189b      	adds	r3, r3, r2
 8010736:	781a      	ldrb	r2, [r3, #0]
 8010738:	4b78      	ldr	r3, [pc, #480]	; (801091c <ProcessMacCommands+0x43c>)
 801073a:	497a      	ldr	r1, [pc, #488]	; (8010924 <ProcessMacCommands+0x444>)
 801073c:	585b      	ldr	r3, [r3, r1]
 801073e:	210f      	movs	r1, #15
 8010740:	400a      	ands	r2, r1
 8010742:	b2d1      	uxtb	r1, r2
 8010744:	22c8      	movs	r2, #200	; 0xc8
 8010746:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010748:	4b74      	ldr	r3, [pc, #464]	; (801091c <ProcessMacCommands+0x43c>)
 801074a:	4a76      	ldr	r2, [pc, #472]	; (8010924 <ProcessMacCommands+0x444>)
 801074c:	589b      	ldr	r3, [r3, r2]
 801074e:	22c8      	movs	r2, #200	; 0xc8
 8010750:	5c9b      	ldrb	r3, [r3, r2]
 8010752:	001a      	movs	r2, r3
 8010754:	2301      	movs	r3, #1
 8010756:	4093      	lsls	r3, r2
 8010758:	0019      	movs	r1, r3
 801075a:	4b70      	ldr	r3, [pc, #448]	; (801091c <ProcessMacCommands+0x43c>)
 801075c:	4a71      	ldr	r2, [pc, #452]	; (8010924 <ProcessMacCommands+0x444>)
 801075e:	589a      	ldr	r2, [r3, r2]
 8010760:	b289      	uxth	r1, r1
 8010762:	23a6      	movs	r3, #166	; 0xa6
 8010764:	005b      	lsls	r3, r3, #1
 8010766:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010768:	2368      	movs	r3, #104	; 0x68
 801076a:	18fb      	adds	r3, r7, r3
 801076c:	2200      	movs	r2, #0
 801076e:	0019      	movs	r1, r3
 8010770:	2004      	movs	r0, #4
 8010772:	f003 ff71 	bl	8014658 <LoRaMacCommandsAddCmd>
                break;
 8010776:	f000 fc29 	bl	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801077a:	256b      	movs	r5, #107	; 0x6b
 801077c:	197b      	adds	r3, r7, r5
 801077e:	2207      	movs	r2, #7
 8010780:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010782:	1cfb      	adds	r3, r7, #3
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	18d3      	adds	r3, r2, r3
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	091b      	lsrs	r3, r3, #4
 801078e:	b2db      	uxtb	r3, r3
 8010790:	b25b      	sxtb	r3, r3
 8010792:	2207      	movs	r2, #7
 8010794:	4013      	ands	r3, r2
 8010796:	b25a      	sxtb	r2, r3
 8010798:	204c      	movs	r0, #76	; 0x4c
 801079a:	183b      	adds	r3, r7, r0
 801079c:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801079e:	1cfb      	adds	r3, r7, #3
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	687a      	ldr	r2, [r7, #4]
 80107a4:	18d3      	adds	r3, r2, r3
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	b25b      	sxtb	r3, r3
 80107aa:	220f      	movs	r2, #15
 80107ac:	4013      	ands	r3, r2
 80107ae:	b25a      	sxtb	r2, r3
 80107b0:	183b      	adds	r3, r7, r0
 80107b2:	701a      	strb	r2, [r3, #0]
                macIndex++;
 80107b4:	1cfb      	adds	r3, r7, #3
 80107b6:	781a      	ldrb	r2, [r3, #0]
 80107b8:	1cfb      	adds	r3, r7, #3
 80107ba:	3201      	adds	r2, #1
 80107bc:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80107be:	1cfb      	adds	r3, r7, #3
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	1cfa      	adds	r2, r7, #3
 80107c4:	1c59      	adds	r1, r3, #1
 80107c6:	7011      	strb	r1, [r2, #0]
 80107c8:	001a      	movs	r2, r3
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	189b      	adds	r3, r3, r2
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	001a      	movs	r2, r3
 80107d2:	183b      	adds	r3, r7, r0
 80107d4:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80107d6:	1cfb      	adds	r3, r7, #3
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	1cfa      	adds	r2, r7, #3
 80107dc:	1c59      	adds	r1, r3, #1
 80107de:	7011      	strb	r1, [r2, #0]
 80107e0:	001a      	movs	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	189b      	adds	r3, r3, r2
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	021a      	lsls	r2, r3, #8
 80107ea:	183b      	adds	r3, r7, r0
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	431a      	orrs	r2, r3
 80107f0:	183b      	adds	r3, r7, r0
 80107f2:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80107f4:	1cfb      	adds	r3, r7, #3
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	1cfa      	adds	r2, r7, #3
 80107fa:	1c59      	adds	r1, r3, #1
 80107fc:	7011      	strb	r1, [r2, #0]
 80107fe:	001a      	movs	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	189b      	adds	r3, r3, r2
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	041a      	lsls	r2, r3, #16
 8010808:	183b      	adds	r3, r7, r0
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	431a      	orrs	r2, r3
 801080e:	0004      	movs	r4, r0
 8010810:	193b      	adds	r3, r7, r4
 8010812:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8010814:	193b      	adds	r3, r7, r4
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	2264      	movs	r2, #100	; 0x64
 801081a:	435a      	muls	r2, r3
 801081c:	193b      	adds	r3, r7, r4
 801081e:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8010820:	4b3e      	ldr	r3, [pc, #248]	; (801091c <ProcessMacCommands+0x43c>)
 8010822:	4a40      	ldr	r2, [pc, #256]	; (8010924 <ProcessMacCommands+0x444>)
 8010824:	589b      	ldr	r3, [r3, r2]
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	193a      	adds	r2, r7, r4
 801082a:	0011      	movs	r1, r2
 801082c:	0018      	movs	r0, r3
 801082e:	f005 ffe8 	bl	8016802 <RegionRxParamSetupReq>
 8010832:	0003      	movs	r3, r0
 8010834:	001a      	movs	r2, r3
 8010836:	197b      	adds	r3, r7, r5
 8010838:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 801083a:	197b      	adds	r3, r7, r5
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	001a      	movs	r2, r3
 8010840:	2307      	movs	r3, #7
 8010842:	4013      	ands	r3, r2
 8010844:	2b07      	cmp	r3, #7
 8010846:	d128      	bne.n	801089a <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010848:	193b      	adds	r3, r7, r4
 801084a:	2100      	movs	r1, #0
 801084c:	5659      	ldrsb	r1, [r3, r1]
 801084e:	4b33      	ldr	r3, [pc, #204]	; (801091c <ProcessMacCommands+0x43c>)
 8010850:	4a34      	ldr	r2, [pc, #208]	; (8010924 <ProcessMacCommands+0x444>)
 8010852:	589b      	ldr	r3, [r3, r2]
 8010854:	b2c9      	uxtb	r1, r1
 8010856:	22ac      	movs	r2, #172	; 0xac
 8010858:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801085a:	193b      	adds	r3, r7, r4
 801085c:	2100      	movs	r1, #0
 801085e:	5659      	ldrsb	r1, [r3, r1]
 8010860:	4b2e      	ldr	r3, [pc, #184]	; (801091c <ProcessMacCommands+0x43c>)
 8010862:	4a30      	ldr	r2, [pc, #192]	; (8010924 <ProcessMacCommands+0x444>)
 8010864:	589b      	ldr	r3, [r3, r2]
 8010866:	b2c9      	uxtb	r1, r1
 8010868:	22b4      	movs	r2, #180	; 0xb4
 801086a:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 801086c:	4b2b      	ldr	r3, [pc, #172]	; (801091c <ProcessMacCommands+0x43c>)
 801086e:	4a2d      	ldr	r2, [pc, #180]	; (8010924 <ProcessMacCommands+0x444>)
 8010870:	589a      	ldr	r2, [r3, r2]
 8010872:	193b      	adds	r3, r7, r4
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	21a8      	movs	r1, #168	; 0xa8
 8010878:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801087a:	4b28      	ldr	r3, [pc, #160]	; (801091c <ProcessMacCommands+0x43c>)
 801087c:	4a29      	ldr	r2, [pc, #164]	; (8010924 <ProcessMacCommands+0x444>)
 801087e:	589a      	ldr	r2, [r3, r2]
 8010880:	193b      	adds	r3, r7, r4
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	21b0      	movs	r1, #176	; 0xb0
 8010886:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010888:	193b      	adds	r3, r7, r4
 801088a:	2101      	movs	r1, #1
 801088c:	5659      	ldrsb	r1, [r3, r1]
 801088e:	4b23      	ldr	r3, [pc, #140]	; (801091c <ProcessMacCommands+0x43c>)
 8010890:	4a24      	ldr	r2, [pc, #144]	; (8010924 <ProcessMacCommands+0x444>)
 8010892:	589b      	ldr	r3, [r3, r2]
 8010894:	b2c9      	uxtb	r1, r1
 8010896:	22a5      	movs	r2, #165	; 0xa5
 8010898:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 801089a:	236b      	movs	r3, #107	; 0x6b
 801089c:	18fb      	adds	r3, r7, r3
 801089e:	781a      	ldrb	r2, [r3, #0]
 80108a0:	2168      	movs	r1, #104	; 0x68
 80108a2:	187b      	adds	r3, r7, r1
 80108a4:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80108a6:	187b      	adds	r3, r7, r1
 80108a8:	2201      	movs	r2, #1
 80108aa:	0019      	movs	r1, r3
 80108ac:	2005      	movs	r0, #5
 80108ae:	f003 fed3 	bl	8014658 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80108b2:	f7ff fe05 	bl	80104c0 <SetMlmeScheduleUplinkIndication>
                break;
 80108b6:	46c0      	nop			; (mov r8, r8)
 80108b8:	e388      	b.n	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80108ba:	2185      	movs	r1, #133	; 0x85
 80108bc:	187b      	adds	r3, r7, r1
 80108be:	22ff      	movs	r2, #255	; 0xff
 80108c0:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80108c2:	4a16      	ldr	r2, [pc, #88]	; (801091c <ProcessMacCommands+0x43c>)
 80108c4:	23d2      	movs	r3, #210	; 0xd2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	58d3      	ldr	r3, [r2, r3]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d00f      	beq.n	80108ee <ProcessMacCommands+0x40e>
 80108ce:	4a13      	ldr	r2, [pc, #76]	; (801091c <ProcessMacCommands+0x43c>)
 80108d0:	23d2      	movs	r3, #210	; 0xd2
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	58d3      	ldr	r3, [r2, r3]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d008      	beq.n	80108ee <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80108dc:	4a0f      	ldr	r2, [pc, #60]	; (801091c <ProcessMacCommands+0x43c>)
 80108de:	23d2      	movs	r3, #210	; 0xd2
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	58d3      	ldr	r3, [r2, r3]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	187c      	adds	r4, r7, r1
 80108e8:	4798      	blx	r3
 80108ea:	0003      	movs	r3, r0
 80108ec:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 80108ee:	2168      	movs	r1, #104	; 0x68
 80108f0:	187b      	adds	r3, r7, r1
 80108f2:	2285      	movs	r2, #133	; 0x85
 80108f4:	18ba      	adds	r2, r7, r2
 80108f6:	7812      	ldrb	r2, [r2, #0]
 80108f8:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80108fa:	1c7b      	adds	r3, r7, #1
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	223f      	movs	r2, #63	; 0x3f
 8010900:	4013      	ands	r3, r2
 8010902:	b2da      	uxtb	r2, r3
 8010904:	187b      	adds	r3, r7, r1
 8010906:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010908:	187b      	adds	r3, r7, r1
 801090a:	2202      	movs	r2, #2
 801090c:	0019      	movs	r1, r3
 801090e:	2006      	movs	r0, #6
 8010910:	f003 fea2 	bl	8014658 <LoRaMacCommandsAddCmd>
                break;
 8010914:	e35a      	b.n	8010fcc <ProcessMacCommands+0xaec>
 8010916:	46c0      	nop			; (mov r8, r8)
 8010918:	0801eed4 	.word	0x0801eed4
 801091c:	200005b4 	.word	0x200005b4
 8010920:	00000459 	.word	0x00000459
 8010924:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010928:	246b      	movs	r4, #107	; 0x6b
 801092a:	193b      	adds	r3, r7, r4
 801092c:	2203      	movs	r2, #3
 801092e:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 8010930:	1cfb      	adds	r3, r7, #3
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	1cfa      	adds	r2, r7, #3
 8010936:	1c59      	adds	r1, r3, #1
 8010938:	7011      	strb	r1, [r2, #0]
 801093a:	001a      	movs	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	189b      	adds	r3, r3, r2
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	b25a      	sxtb	r2, r3
 8010944:	2544      	movs	r5, #68	; 0x44
 8010946:	197b      	adds	r3, r7, r5
 8010948:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 801094a:	197b      	adds	r3, r7, r5
 801094c:	2038      	movs	r0, #56	; 0x38
 801094e:	183a      	adds	r2, r7, r0
 8010950:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010952:	1cfb      	adds	r3, r7, #3
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	1cfa      	adds	r2, r7, #3
 8010958:	1c59      	adds	r1, r3, #1
 801095a:	7011      	strb	r1, [r2, #0]
 801095c:	001a      	movs	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	189b      	adds	r3, r3, r2
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	001a      	movs	r2, r3
 8010966:	183b      	adds	r3, r7, r0
 8010968:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801096a:	1cfb      	adds	r3, r7, #3
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	1cfa      	adds	r2, r7, #3
 8010970:	1c59      	adds	r1, r3, #1
 8010972:	7011      	strb	r1, [r2, #0]
 8010974:	001a      	movs	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	189b      	adds	r3, r3, r2
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	021a      	lsls	r2, r3, #8
 801097e:	183b      	adds	r3, r7, r0
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	431a      	orrs	r2, r3
 8010984:	183b      	adds	r3, r7, r0
 8010986:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010988:	1cfb      	adds	r3, r7, #3
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	1cfa      	adds	r2, r7, #3
 801098e:	1c59      	adds	r1, r3, #1
 8010990:	7011      	strb	r1, [r2, #0]
 8010992:	001a      	movs	r2, r3
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	189b      	adds	r3, r3, r2
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	041a      	lsls	r2, r3, #16
 801099c:	183b      	adds	r3, r7, r0
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	431a      	orrs	r2, r3
 80109a2:	183b      	adds	r3, r7, r0
 80109a4:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 80109a6:	183b      	adds	r3, r7, r0
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2264      	movs	r2, #100	; 0x64
 80109ac:	435a      	muls	r2, r3
 80109ae:	183b      	adds	r3, r7, r0
 80109b0:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 80109b2:	183b      	adds	r3, r7, r0
 80109b4:	2200      	movs	r2, #0
 80109b6:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 80109b8:	1cfb      	adds	r3, r7, #3
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	1cfa      	adds	r2, r7, #3
 80109be:	1c59      	adds	r1, r3, #1
 80109c0:	7011      	strb	r1, [r2, #0]
 80109c2:	001a      	movs	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	189b      	adds	r3, r3, r2
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	b25a      	sxtb	r2, r3
 80109cc:	183b      	adds	r3, r7, r0
 80109ce:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 80109d0:	4ba0      	ldr	r3, [pc, #640]	; (8010c54 <ProcessMacCommands+0x774>)
 80109d2:	4aa1      	ldr	r2, [pc, #644]	; (8010c58 <ProcessMacCommands+0x778>)
 80109d4:	589b      	ldr	r3, [r3, r2]
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	197a      	adds	r2, r7, r5
 80109da:	0011      	movs	r1, r2
 80109dc:	0018      	movs	r0, r3
 80109de:	f005 ff26 	bl	801682e <RegionNewChannelReq>
 80109e2:	0003      	movs	r3, r0
 80109e4:	001a      	movs	r2, r3
 80109e6:	193b      	adds	r3, r7, r4
 80109e8:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 80109ea:	193b      	adds	r3, r7, r4
 80109ec:	781a      	ldrb	r2, [r3, #0]
 80109ee:	2168      	movs	r1, #104	; 0x68
 80109f0:	187b      	adds	r3, r7, r1
 80109f2:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80109f4:	187b      	adds	r3, r7, r1
 80109f6:	2201      	movs	r2, #1
 80109f8:	0019      	movs	r1, r3
 80109fa:	2007      	movs	r0, #7
 80109fc:	f003 fe2c 	bl	8014658 <LoRaMacCommandsAddCmd>
                break;
 8010a00:	46c0      	nop			; (mov r8, r8)
 8010a02:	e2e3      	b.n	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010a04:	1cfb      	adds	r3, r7, #3
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	1cfa      	adds	r2, r7, #3
 8010a0a:	1c59      	adds	r1, r3, #1
 8010a0c:	7011      	strb	r1, [r2, #0]
 8010a0e:	001a      	movs	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	189b      	adds	r3, r3, r2
 8010a14:	781a      	ldrb	r2, [r3, #0]
 8010a16:	2084      	movs	r0, #132	; 0x84
 8010a18:	183b      	adds	r3, r7, r0
 8010a1a:	210f      	movs	r1, #15
 8010a1c:	400a      	ands	r2, r1
 8010a1e:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 8010a20:	183b      	adds	r3, r7, r0
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d104      	bne.n	8010a32 <ProcessMacCommands+0x552>
                {
                    delay++;
 8010a28:	183b      	adds	r3, r7, r0
 8010a2a:	781a      	ldrb	r2, [r3, #0]
 8010a2c:	183b      	adds	r3, r7, r0
 8010a2e:	3201      	adds	r2, #1
 8010a30:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8010a32:	2384      	movs	r3, #132	; 0x84
 8010a34:	18fb      	adds	r3, r7, r3
 8010a36:	781a      	ldrb	r2, [r3, #0]
 8010a38:	0013      	movs	r3, r2
 8010a3a:	015b      	lsls	r3, r3, #5
 8010a3c:	1a9b      	subs	r3, r3, r2
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	189b      	adds	r3, r3, r2
 8010a42:	00db      	lsls	r3, r3, #3
 8010a44:	0019      	movs	r1, r3
 8010a46:	4b83      	ldr	r3, [pc, #524]	; (8010c54 <ProcessMacCommands+0x774>)
 8010a48:	4a83      	ldr	r2, [pc, #524]	; (8010c58 <ProcessMacCommands+0x778>)
 8010a4a:	589b      	ldr	r3, [r3, r2]
 8010a4c:	2294      	movs	r2, #148	; 0x94
 8010a4e:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8010a50:	4b80      	ldr	r3, [pc, #512]	; (8010c54 <ProcessMacCommands+0x774>)
 8010a52:	4a81      	ldr	r2, [pc, #516]	; (8010c58 <ProcessMacCommands+0x778>)
 8010a54:	589b      	ldr	r3, [r3, r2]
 8010a56:	2294      	movs	r2, #148	; 0x94
 8010a58:	589b      	ldr	r3, [r3, r2]
 8010a5a:	4a7e      	ldr	r2, [pc, #504]	; (8010c54 <ProcessMacCommands+0x774>)
 8010a5c:	497e      	ldr	r1, [pc, #504]	; (8010c58 <ProcessMacCommands+0x778>)
 8010a5e:	5852      	ldr	r2, [r2, r1]
 8010a60:	21fa      	movs	r1, #250	; 0xfa
 8010a62:	0089      	lsls	r1, r1, #2
 8010a64:	468c      	mov	ip, r1
 8010a66:	4463      	add	r3, ip
 8010a68:	2198      	movs	r1, #152	; 0x98
 8010a6a:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010a6c:	2368      	movs	r3, #104	; 0x68
 8010a6e:	18fb      	adds	r3, r7, r3
 8010a70:	2200      	movs	r2, #0
 8010a72:	0019      	movs	r1, r3
 8010a74:	2008      	movs	r0, #8
 8010a76:	f003 fdef 	bl	8014658 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010a7a:	f7ff fd21 	bl	80104c0 <SetMlmeScheduleUplinkIndication>
                break;
 8010a7e:	e2a5      	b.n	8010fcc <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010a80:	1cfb      	adds	r3, r7, #3
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	1cfa      	adds	r2, r7, #3
 8010a86:	1c59      	adds	r1, r3, #1
 8010a88:	7011      	strb	r1, [r2, #0]
 8010a8a:	001a      	movs	r2, r3
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	189a      	adds	r2, r3, r2
 8010a90:	2076      	movs	r0, #118	; 0x76
 8010a92:	183b      	adds	r3, r7, r0
 8010a94:	7812      	ldrb	r2, [r2, #0]
 8010a96:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 8010a98:	2134      	movs	r1, #52	; 0x34
 8010a9a:	187b      	adds	r3, r7, r1
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 8010aa0:	187b      	adds	r3, r7, r1
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010aa6:	183b      	adds	r3, r7, r0
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	2220      	movs	r2, #32
 8010aac:	4013      	ands	r3, r2
 8010aae:	d002      	beq.n	8010ab6 <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010ab0:	187b      	adds	r3, r7, r1
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010ab6:	2376      	movs	r3, #118	; 0x76
 8010ab8:	18fb      	adds	r3, r7, r3
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	2210      	movs	r2, #16
 8010abe:	4013      	ands	r3, r2
 8010ac0:	d003      	beq.n	8010aca <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010ac2:	2334      	movs	r3, #52	; 0x34
 8010ac4:	18fb      	adds	r3, r7, r3
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010aca:	2376      	movs	r3, #118	; 0x76
 8010acc:	18fb      	adds	r3, r7, r3
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	220f      	movs	r2, #15
 8010ad2:	4013      	ands	r3, r2
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	2434      	movs	r4, #52	; 0x34
 8010ad8:	193b      	adds	r3, r7, r4
 8010ada:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8010adc:	4b5d      	ldr	r3, [pc, #372]	; (8010c54 <ProcessMacCommands+0x774>)
 8010ade:	4a5e      	ldr	r2, [pc, #376]	; (8010c58 <ProcessMacCommands+0x778>)
 8010ae0:	589b      	ldr	r3, [r3, r2]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	193a      	adds	r2, r7, r4
 8010ae6:	0011      	movs	r1, r2
 8010ae8:	0018      	movs	r0, r3
 8010aea:	f005 feb6 	bl	801685a <RegionTxParamSetupReq>
 8010aee:	0003      	movs	r3, r0
 8010af0:	3301      	adds	r3, #1
 8010af2:	d050      	beq.n	8010b96 <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010af4:	4b57      	ldr	r3, [pc, #348]	; (8010c54 <ProcessMacCommands+0x774>)
 8010af6:	4a58      	ldr	r2, [pc, #352]	; (8010c58 <ProcessMacCommands+0x778>)
 8010af8:	589b      	ldr	r3, [r3, r2]
 8010afa:	193a      	adds	r2, r7, r4
 8010afc:	7811      	ldrb	r1, [r2, #0]
 8010afe:	22b8      	movs	r2, #184	; 0xb8
 8010b00:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010b02:	4b54      	ldr	r3, [pc, #336]	; (8010c54 <ProcessMacCommands+0x774>)
 8010b04:	4a54      	ldr	r2, [pc, #336]	; (8010c58 <ProcessMacCommands+0x778>)
 8010b06:	589b      	ldr	r3, [r3, r2]
 8010b08:	193a      	adds	r2, r7, r4
 8010b0a:	7851      	ldrb	r1, [r2, #1]
 8010b0c:	22b9      	movs	r2, #185	; 0xb9
 8010b0e:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010b10:	193b      	adds	r3, r7, r4
 8010b12:	789b      	ldrb	r3, [r3, #2]
 8010b14:	001a      	movs	r2, r3
 8010b16:	4b51      	ldr	r3, [pc, #324]	; (8010c5c <ProcessMacCommands+0x77c>)
 8010b18:	5c9a      	ldrb	r2, [r3, r2]
 8010b1a:	4b4e      	ldr	r3, [pc, #312]	; (8010c54 <ProcessMacCommands+0x774>)
 8010b1c:	494e      	ldr	r1, [pc, #312]	; (8010c58 <ProcessMacCommands+0x778>)
 8010b1e:	585c      	ldr	r4, [r3, r1]
 8010b20:	0010      	movs	r0, r2
 8010b22:	f7f0 fa75 	bl	8001010 <__aeabi_ui2f>
 8010b26:	1c03      	adds	r3, r0, #0
 8010b28:	22bc      	movs	r2, #188	; 0xbc
 8010b2a:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010b2c:	212c      	movs	r1, #44	; 0x2c
 8010b2e:	187b      	adds	r3, r7, r1
 8010b30:	2202      	movs	r2, #2
 8010b32:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010b34:	4b47      	ldr	r3, [pc, #284]	; (8010c54 <ProcessMacCommands+0x774>)
 8010b36:	4a48      	ldr	r2, [pc, #288]	; (8010c58 <ProcessMacCommands+0x778>)
 8010b38:	589b      	ldr	r3, [r3, r2]
 8010b3a:	22b8      	movs	r2, #184	; 0xb8
 8010b3c:	5c9a      	ldrb	r2, [r3, r2]
 8010b3e:	187b      	adds	r3, r7, r1
 8010b40:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b42:	4b44      	ldr	r3, [pc, #272]	; (8010c54 <ProcessMacCommands+0x774>)
 8010b44:	4a44      	ldr	r2, [pc, #272]	; (8010c58 <ProcessMacCommands+0x778>)
 8010b46:	589b      	ldr	r3, [r3, r2]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	187a      	adds	r2, r7, r1
 8010b4c:	0011      	movs	r1, r2
 8010b4e:	0018      	movs	r0, r3
 8010b50:	f005 fd31 	bl	80165b6 <RegionGetPhyParam>
 8010b54:	0003      	movs	r3, r0
 8010b56:	001a      	movs	r2, r3
 8010b58:	2128      	movs	r1, #40	; 0x28
 8010b5a:	187b      	adds	r3, r7, r1
 8010b5c:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010b5e:	187b      	adds	r3, r7, r1
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	b259      	sxtb	r1, r3
 8010b64:	4b3b      	ldr	r3, [pc, #236]	; (8010c54 <ProcessMacCommands+0x774>)
 8010b66:	4a3c      	ldr	r2, [pc, #240]	; (8010c58 <ProcessMacCommands+0x778>)
 8010b68:	589b      	ldr	r3, [r3, r2]
 8010b6a:	2285      	movs	r2, #133	; 0x85
 8010b6c:	5698      	ldrsb	r0, [r3, r2]
 8010b6e:	4b39      	ldr	r3, [pc, #228]	; (8010c54 <ProcessMacCommands+0x774>)
 8010b70:	4a39      	ldr	r2, [pc, #228]	; (8010c58 <ProcessMacCommands+0x778>)
 8010b72:	589b      	ldr	r3, [r3, r2]
 8010b74:	1c04      	adds	r4, r0, #0
 8010b76:	1c08      	adds	r0, r1, #0
 8010b78:	b241      	sxtb	r1, r0
 8010b7a:	b262      	sxtb	r2, r4
 8010b7c:	4291      	cmp	r1, r2
 8010b7e:	da00      	bge.n	8010b82 <ProcessMacCommands+0x6a2>
 8010b80:	1c20      	adds	r0, r4, #0
 8010b82:	b241      	sxtb	r1, r0
 8010b84:	2285      	movs	r2, #133	; 0x85
 8010b86:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010b88:	2368      	movs	r3, #104	; 0x68
 8010b8a:	18fb      	adds	r3, r7, r3
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	0019      	movs	r1, r3
 8010b90:	2009      	movs	r0, #9
 8010b92:	f003 fd61 	bl	8014658 <LoRaMacCommandsAddCmd>
                }
                break;
 8010b96:	46c0      	nop			; (mov r8, r8)
 8010b98:	e218      	b.n	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010b9a:	246b      	movs	r4, #107	; 0x6b
 8010b9c:	193b      	adds	r3, r7, r4
 8010b9e:	2203      	movs	r2, #3
 8010ba0:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 8010ba2:	1cfb      	adds	r3, r7, #3
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	1cfa      	adds	r2, r7, #3
 8010ba8:	1c59      	adds	r1, r3, #1
 8010baa:	7011      	strb	r1, [r2, #0]
 8010bac:	001a      	movs	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	189b      	adds	r3, r3, r2
 8010bb2:	781a      	ldrb	r2, [r3, #0]
 8010bb4:	2020      	movs	r0, #32
 8010bb6:	183b      	adds	r3, r7, r0
 8010bb8:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010bba:	1cfb      	adds	r3, r7, #3
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	1cfa      	adds	r2, r7, #3
 8010bc0:	1c59      	adds	r1, r3, #1
 8010bc2:	7011      	strb	r1, [r2, #0]
 8010bc4:	001a      	movs	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	189b      	adds	r3, r3, r2
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	001a      	movs	r2, r3
 8010bce:	183b      	adds	r3, r7, r0
 8010bd0:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010bd2:	1cfb      	adds	r3, r7, #3
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	1cfa      	adds	r2, r7, #3
 8010bd8:	1c59      	adds	r1, r3, #1
 8010bda:	7011      	strb	r1, [r2, #0]
 8010bdc:	001a      	movs	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	189b      	adds	r3, r3, r2
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	021a      	lsls	r2, r3, #8
 8010be6:	183b      	adds	r3, r7, r0
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	431a      	orrs	r2, r3
 8010bec:	183b      	adds	r3, r7, r0
 8010bee:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010bf0:	1cfb      	adds	r3, r7, #3
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	1cfa      	adds	r2, r7, #3
 8010bf6:	1c59      	adds	r1, r3, #1
 8010bf8:	7011      	strb	r1, [r2, #0]
 8010bfa:	001a      	movs	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	189b      	adds	r3, r3, r2
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	041a      	lsls	r2, r3, #16
 8010c04:	183b      	adds	r3, r7, r0
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	431a      	orrs	r2, r3
 8010c0a:	0001      	movs	r1, r0
 8010c0c:	187b      	adds	r3, r7, r1
 8010c0e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8010c10:	187b      	adds	r3, r7, r1
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	2264      	movs	r2, #100	; 0x64
 8010c16:	435a      	muls	r2, r3
 8010c18:	187b      	adds	r3, r7, r1
 8010c1a:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8010c1c:	4b0d      	ldr	r3, [pc, #52]	; (8010c54 <ProcessMacCommands+0x774>)
 8010c1e:	4a0e      	ldr	r2, [pc, #56]	; (8010c58 <ProcessMacCommands+0x778>)
 8010c20:	589b      	ldr	r3, [r3, r2]
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	187a      	adds	r2, r7, r1
 8010c26:	0011      	movs	r1, r2
 8010c28:	0018      	movs	r0, r3
 8010c2a:	f005 fe2c 	bl	8016886 <RegionDlChannelReq>
 8010c2e:	0003      	movs	r3, r0
 8010c30:	001a      	movs	r2, r3
 8010c32:	193b      	adds	r3, r7, r4
 8010c34:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8010c36:	193b      	adds	r3, r7, r4
 8010c38:	781a      	ldrb	r2, [r3, #0]
 8010c3a:	2168      	movs	r1, #104	; 0x68
 8010c3c:	187b      	adds	r3, r7, r1
 8010c3e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010c40:	187b      	adds	r3, r7, r1
 8010c42:	2201      	movs	r2, #1
 8010c44:	0019      	movs	r1, r3
 8010c46:	200a      	movs	r0, #10
 8010c48:	f003 fd06 	bl	8014658 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010c4c:	f7ff fc38 	bl	80104c0 <SetMlmeScheduleUplinkIndication>
                break;
 8010c50:	46c0      	nop			; (mov r8, r8)
 8010c52:	e1bb      	b.n	8010fcc <ProcessMacCommands+0xaec>
 8010c54:	200005b4 	.word	0x200005b4
 8010c58:	00000484 	.word	0x00000484
 8010c5c:	0801ee84 	.word	0x0801ee84
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010c60:	200a      	movs	r0, #10
 8010c62:	f004 f88b 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 8010c66:	1e03      	subs	r3, r0, #0
 8010c68:	d100      	bne.n	8010c6c <ProcessMacCommands+0x78c>
 8010c6a:	e1af      	b.n	8010fcc <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010c6c:	210a      	movs	r1, #10
 8010c6e:	2000      	movs	r0, #0
 8010c70:	f003 ffe8 	bl	8014c44 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8010c74:	2418      	movs	r4, #24
 8010c76:	193b      	adds	r3, r7, r4
 8010c78:	0018      	movs	r0, r3
 8010c7a:	2308      	movs	r3, #8
 8010c7c:	001a      	movs	r2, r3
 8010c7e:	2100      	movs	r1, #0
 8010c80:	f00c fe83 	bl	801d98a <memset>
                    SysTime_t sysTime = { 0 };
 8010c84:	2510      	movs	r5, #16
 8010c86:	197b      	adds	r3, r7, r5
 8010c88:	0018      	movs	r0, r3
 8010c8a:	2308      	movs	r3, #8
 8010c8c:	001a      	movs	r2, r3
 8010c8e:	2100      	movs	r1, #0
 8010c90:	f00c fe7b 	bl	801d98a <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 8010c94:	2608      	movs	r6, #8
 8010c96:	19bb      	adds	r3, r7, r6
 8010c98:	0018      	movs	r0, r3
 8010c9a:	2308      	movs	r3, #8
 8010c9c:	001a      	movs	r2, r3
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	f00c fe73 	bl	801d98a <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010ca4:	1cfb      	adds	r3, r7, #3
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	1cfa      	adds	r2, r7, #3
 8010caa:	1c59      	adds	r1, r3, #1
 8010cac:	7011      	strb	r1, [r2, #0]
 8010cae:	001a      	movs	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	189b      	adds	r3, r3, r2
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	001a      	movs	r2, r3
 8010cb8:	193b      	adds	r3, r7, r4
 8010cba:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010cbc:	1cfb      	adds	r3, r7, #3
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	1cfa      	adds	r2, r7, #3
 8010cc2:	1c59      	adds	r1, r3, #1
 8010cc4:	7011      	strb	r1, [r2, #0]
 8010cc6:	001a      	movs	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	189b      	adds	r3, r3, r2
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	021a      	lsls	r2, r3, #8
 8010cd0:	193b      	adds	r3, r7, r4
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	431a      	orrs	r2, r3
 8010cd6:	0020      	movs	r0, r4
 8010cd8:	193b      	adds	r3, r7, r4
 8010cda:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010cdc:	1cfb      	adds	r3, r7, #3
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	1cfa      	adds	r2, r7, #3
 8010ce2:	1c59      	adds	r1, r3, #1
 8010ce4:	7011      	strb	r1, [r2, #0]
 8010ce6:	001a      	movs	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	189b      	adds	r3, r3, r2
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	041a      	lsls	r2, r3, #16
 8010cf0:	183b      	adds	r3, r7, r0
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	431a      	orrs	r2, r3
 8010cf6:	183b      	adds	r3, r7, r0
 8010cf8:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010cfa:	1cfb      	adds	r3, r7, #3
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	1cfa      	adds	r2, r7, #3
 8010d00:	1c59      	adds	r1, r3, #1
 8010d02:	7011      	strb	r1, [r2, #0]
 8010d04:	001a      	movs	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	189b      	adds	r3, r3, r2
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	061a      	lsls	r2, r3, #24
 8010d0e:	183b      	adds	r3, r7, r0
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	431a      	orrs	r2, r3
 8010d14:	183b      	adds	r3, r7, r0
 8010d16:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010d18:	1cfb      	adds	r3, r7, #3
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	1cfa      	adds	r2, r7, #3
 8010d1e:	1c59      	adds	r1, r3, #1
 8010d20:	7011      	strb	r1, [r2, #0]
 8010d22:	001a      	movs	r2, r3
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	189b      	adds	r3, r3, r2
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	b21a      	sxth	r2, r3
 8010d2c:	183b      	adds	r3, r7, r0
 8010d2e:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010d30:	0001      	movs	r1, r0
 8010d32:	183b      	adds	r3, r7, r0
 8010d34:	2204      	movs	r2, #4
 8010d36:	5e9b      	ldrsh	r3, [r3, r2]
 8010d38:	001a      	movs	r2, r3
 8010d3a:	0013      	movs	r3, r2
 8010d3c:	015b      	lsls	r3, r3, #5
 8010d3e:	1a9b      	subs	r3, r3, r2
 8010d40:	009b      	lsls	r3, r3, #2
 8010d42:	189b      	adds	r3, r3, r2
 8010d44:	00db      	lsls	r3, r3, #3
 8010d46:	121b      	asrs	r3, r3, #8
 8010d48:	b21a      	sxth	r2, r3
 8010d4a:	187b      	adds	r3, r7, r1
 8010d4c:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010d4e:	197a      	adds	r2, r7, r5
 8010d50:	187b      	adds	r3, r7, r1
 8010d52:	0010      	movs	r0, r2
 8010d54:	0019      	movs	r1, r3
 8010d56:	2308      	movs	r3, #8
 8010d58:	001a      	movs	r2, r3
 8010d5a:	f00c fe0d 	bl	801d978 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010d5e:	197b      	adds	r3, r7, r5
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	4aa2      	ldr	r2, [pc, #648]	; (8010fec <ProcessMacCommands+0xb0c>)
 8010d64:	189a      	adds	r2, r3, r2
 8010d66:	002c      	movs	r4, r5
 8010d68:	197b      	adds	r3, r7, r5
 8010d6a:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010d6c:	19bb      	adds	r3, r7, r6
 8010d6e:	0018      	movs	r0, r3
 8010d70:	f00b fb44 	bl	801c3fc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010d74:	236c      	movs	r3, #108	; 0x6c
 8010d76:	18fd      	adds	r5, r7, r3
 8010d78:	489d      	ldr	r0, [pc, #628]	; (8010ff0 <ProcessMacCommands+0xb10>)
 8010d7a:	23ce      	movs	r3, #206	; 0xce
 8010d7c:	0099      	lsls	r1, r3, #2
 8010d7e:	0026      	movs	r6, r4
 8010d80:	193a      	adds	r2, r7, r4
 8010d82:	2404      	movs	r4, #4
 8010d84:	1843      	adds	r3, r0, r1
 8010d86:	191c      	adds	r4, r3, r4
 8010d88:	466b      	mov	r3, sp
 8010d8a:	6824      	ldr	r4, [r4, #0]
 8010d8c:	601c      	str	r4, [r3, #0]
 8010d8e:	5843      	ldr	r3, [r0, r1]
 8010d90:	6811      	ldr	r1, [r2, #0]
 8010d92:	6852      	ldr	r2, [r2, #4]
 8010d94:	0028      	movs	r0, r5
 8010d96:	f00b faa5 	bl	801c2e4 <SysTimeSub>
 8010d9a:	0035      	movs	r5, r6
 8010d9c:	197c      	adds	r4, r7, r5
 8010d9e:	236c      	movs	r3, #108	; 0x6c
 8010da0:	18fb      	adds	r3, r7, r3
 8010da2:	2608      	movs	r6, #8
 8010da4:	19ba      	adds	r2, r7, r6
 8010da6:	4669      	mov	r1, sp
 8010da8:	6858      	ldr	r0, [r3, #4]
 8010daa:	6008      	str	r0, [r1, #0]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	6811      	ldr	r1, [r2, #0]
 8010db0:	6852      	ldr	r2, [r2, #4]
 8010db2:	0020      	movs	r0, r4
 8010db4:	f00b fa40 	bl	801c238 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010db8:	197b      	adds	r3, r7, r5
 8010dba:	6818      	ldr	r0, [r3, #0]
 8010dbc:	6859      	ldr	r1, [r3, #4]
 8010dbe:	f00b fae5 	bl	801c38c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010dc2:	f003 fac5 	bl	8014350 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010dc6:	4a8a      	ldr	r2, [pc, #552]	; (8010ff0 <ProcessMacCommands+0xb10>)
 8010dc8:	2387      	movs	r3, #135	; 0x87
 8010dca:	00db      	lsls	r3, r3, #3
 8010dcc:	2101      	movs	r1, #1
 8010dce:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8010dd0:	e0fc      	b.n	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010dd2:	200d      	movs	r0, #13
 8010dd4:	f003 ffd2 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 8010dd8:	1e03      	subs	r3, r0, #0
 8010dda:	d100      	bne.n	8010dde <ProcessMacCommands+0x8fe>
 8010ddc:	e0f6      	b.n	8010fcc <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010dde:	210d      	movs	r1, #13
 8010de0:	2000      	movs	r0, #0
 8010de2:	f003 ff2f 	bl	8014c44 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010de6:	4a82      	ldr	r2, [pc, #520]	; (8010ff0 <ProcessMacCommands+0xb10>)
 8010de8:	2390      	movs	r3, #144	; 0x90
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	5cd3      	ldrb	r3, [r2, r3]
 8010dee:	2b04      	cmp	r3, #4
 8010df0:	d100      	bne.n	8010df4 <ProcessMacCommands+0x914>
 8010df2:	e0eb      	b.n	8010fcc <ProcessMacCommands+0xaec>
 8010df4:	4a7e      	ldr	r2, [pc, #504]	; (8010ff0 <ProcessMacCommands+0xb10>)
 8010df6:	2390      	movs	r3, #144	; 0x90
 8010df8:	00db      	lsls	r3, r3, #3
 8010dfa:	5cd3      	ldrb	r3, [r2, r3]
 8010dfc:	2b05      	cmp	r3, #5
 8010dfe:	d100      	bne.n	8010e02 <ProcessMacCommands+0x922>
 8010e00:	e0e4      	b.n	8010fcc <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010e02:	f003 fa86 	bl	8014312 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010e06:	e0e1      	b.n	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010e08:	207c      	movs	r0, #124	; 0x7c
 8010e0a:	183b      	adds	r3, r7, r0
 8010e0c:	2203      	movs	r2, #3
 8010e0e:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010e14:	1cfb      	adds	r3, r7, #3
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	1cfa      	adds	r2, r7, #3
 8010e1a:	1c59      	adds	r1, r3, #1
 8010e1c:	7011      	strb	r1, [r2, #0]
 8010e1e:	001a      	movs	r2, r3
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	189b      	adds	r3, r3, r2
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010e28:	1cfb      	adds	r3, r7, #3
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	1cfa      	adds	r2, r7, #3
 8010e2e:	1c59      	adds	r1, r3, #1
 8010e30:	7011      	strb	r1, [r2, #0]
 8010e32:	001a      	movs	r2, r3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	189b      	adds	r3, r3, r2
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	021b      	lsls	r3, r3, #8
 8010e3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010e42:	1cfb      	adds	r3, r7, #3
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	1cfa      	adds	r2, r7, #3
 8010e48:	1c59      	adds	r1, r3, #1
 8010e4a:	7011      	strb	r1, [r2, #0]
 8010e4c:	001a      	movs	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	189b      	adds	r3, r3, r2
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	041b      	lsls	r3, r3, #16
 8010e56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8010e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e5e:	2264      	movs	r2, #100	; 0x64
 8010e60:	4353      	muls	r3, r2
 8010e62:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010e64:	1cfb      	adds	r3, r7, #3
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	1cfa      	adds	r2, r7, #3
 8010e6a:	1c59      	adds	r1, r3, #1
 8010e6c:	7011      	strb	r1, [r2, #0]
 8010e6e:	001a      	movs	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	189b      	adds	r3, r3, r2
 8010e74:	781a      	ldrb	r2, [r3, #0]
 8010e76:	2677      	movs	r6, #119	; 0x77
 8010e78:	19bb      	adds	r3, r7, r6
 8010e7a:	210f      	movs	r1, #15
 8010e7c:	400a      	ands	r2, r1
 8010e7e:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010e80:	0005      	movs	r5, r0
 8010e82:	183c      	adds	r4, r7, r0
 8010e84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010e86:	19bb      	adds	r3, r7, r6
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	0011      	movs	r1, r2
 8010e8c:	0018      	movs	r0, r3
 8010e8e:	f003 fa45 	bl	801431c <LoRaMacClassBPingSlotChannelReq>
 8010e92:	0003      	movs	r3, r0
 8010e94:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8010e96:	2168      	movs	r1, #104	; 0x68
 8010e98:	187b      	adds	r3, r7, r1
 8010e9a:	197a      	adds	r2, r7, r5
 8010e9c:	7812      	ldrb	r2, [r2, #0]
 8010e9e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8010ea0:	187b      	adds	r3, r7, r1
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	0019      	movs	r1, r3
 8010ea6:	2011      	movs	r0, #17
 8010ea8:	f003 fbd6 	bl	8014658 <LoRaMacCommandsAddCmd>
                break;
 8010eac:	e08e      	b.n	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010eae:	200e      	movs	r0, #14
 8010eb0:	f003 ff64 	bl	8014d7c <LoRaMacConfirmQueueIsCmdActive>
 8010eb4:	1e03      	subs	r3, r0, #0
 8010eb6:	d100      	bne.n	8010eba <ProcessMacCommands+0x9da>
 8010eb8:	e088      	b.n	8010fcc <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010eba:	210e      	movs	r1, #14
 8010ebc:	2000      	movs	r0, #0
 8010ebe:	f003 fec1 	bl	8014c44 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8010ec2:	207e      	movs	r0, #126	; 0x7e
 8010ec4:	183b      	adds	r3, r7, r0
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 8010eca:	247d      	movs	r4, #125	; 0x7d
 8010ecc:	193b      	adds	r3, r7, r4
 8010ece:	2200      	movs	r2, #0
 8010ed0:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010ed2:	1cfb      	adds	r3, r7, #3
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	1cfa      	adds	r2, r7, #3
 8010ed8:	1c59      	adds	r1, r3, #1
 8010eda:	7011      	strb	r1, [r2, #0]
 8010edc:	001a      	movs	r2, r3
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	189b      	adds	r3, r3, r2
 8010ee2:	781a      	ldrb	r2, [r3, #0]
 8010ee4:	183b      	adds	r3, r7, r0
 8010ee6:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010ee8:	1cfb      	adds	r3, r7, #3
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	1cfa      	adds	r2, r7, #3
 8010eee:	1c59      	adds	r1, r3, #1
 8010ef0:	7011      	strb	r1, [r2, #0]
 8010ef2:	001a      	movs	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	189b      	adds	r3, r3, r2
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	021b      	lsls	r3, r3, #8
 8010efc:	b21a      	sxth	r2, r3
 8010efe:	183b      	adds	r3, r7, r0
 8010f00:	2100      	movs	r1, #0
 8010f02:	5e5b      	ldrsh	r3, [r3, r1]
 8010f04:	4313      	orrs	r3, r2
 8010f06:	b21a      	sxth	r2, r3
 8010f08:	183b      	adds	r3, r7, r0
 8010f0a:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8010f0c:	1cfb      	adds	r3, r7, #3
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	1cfa      	adds	r2, r7, #3
 8010f12:	1c59      	adds	r1, r3, #1
 8010f14:	7011      	strb	r1, [r2, #0]
 8010f16:	001a      	movs	r2, r3
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	189a      	adds	r2, r3, r2
 8010f1c:	193b      	adds	r3, r7, r4
 8010f1e:	7812      	ldrb	r2, [r2, #0]
 8010f20:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010f22:	4b34      	ldr	r3, [pc, #208]	; (8010ff4 <ProcessMacCommands+0xb14>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	193b      	adds	r3, r7, r4
 8010f28:	7819      	ldrb	r1, [r3, #0]
 8010f2a:	183b      	adds	r3, r7, r0
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	0018      	movs	r0, r3
 8010f30:	f003 fa00 	bl	8014334 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010f34:	e04a      	b.n	8010fcc <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	2080      	movs	r0, #128	; 0x80
 8010f3a:	183a      	adds	r2, r7, r0
 8010f3c:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 8010f3e:	1cfb      	adds	r3, r7, #3
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	1cfa      	adds	r2, r7, #3
 8010f44:	1c59      	adds	r1, r3, #1
 8010f46:	7011      	strb	r1, [r2, #0]
 8010f48:	001a      	movs	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	189b      	adds	r3, r3, r2
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	183a      	adds	r2, r7, r0
 8010f52:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010f54:	1cfb      	adds	r3, r7, #3
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	1cfa      	adds	r2, r7, #3
 8010f5a:	1c59      	adds	r1, r3, #1
 8010f5c:	7011      	strb	r1, [r2, #0]
 8010f5e:	001a      	movs	r2, r3
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	189b      	adds	r3, r3, r2
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	021b      	lsls	r3, r3, #8
 8010f68:	183a      	adds	r2, r7, r0
 8010f6a:	6812      	ldr	r2, [r2, #0]
 8010f6c:	4313      	orrs	r3, r2
 8010f6e:	183a      	adds	r2, r7, r0
 8010f70:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010f72:	1cfb      	adds	r3, r7, #3
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	1cfa      	adds	r2, r7, #3
 8010f78:	1c59      	adds	r1, r3, #1
 8010f7a:	7011      	strb	r1, [r2, #0]
 8010f7c:	001a      	movs	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	189b      	adds	r3, r3, r2
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	041b      	lsls	r3, r3, #16
 8010f86:	183a      	adds	r2, r7, r0
 8010f88:	6812      	ldr	r2, [r2, #0]
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	183a      	adds	r2, r7, r0
 8010f8e:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 8010f90:	183b      	adds	r3, r7, r0
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2264      	movs	r2, #100	; 0x64
 8010f96:	4353      	muls	r3, r2
 8010f98:	183a      	adds	r2, r7, r0
 8010f9a:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010f9c:	183b      	adds	r3, r7, r0
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	0018      	movs	r0, r3
 8010fa2:	f003 f9da 	bl	801435a <LoRaMacClassBBeaconFreqReq>
 8010fa6:	1e03      	subs	r3, r0, #0
 8010fa8:	d004      	beq.n	8010fb4 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 8010faa:	2368      	movs	r3, #104	; 0x68
 8010fac:	18fb      	adds	r3, r7, r3
 8010fae:	2201      	movs	r2, #1
 8010fb0:	701a      	strb	r2, [r3, #0]
 8010fb2:	e003      	b.n	8010fbc <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010fb4:	2368      	movs	r3, #104	; 0x68
 8010fb6:	18fb      	adds	r3, r7, r3
 8010fb8:	2200      	movs	r2, #0
 8010fba:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010fbc:	2368      	movs	r3, #104	; 0x68
 8010fbe:	18fb      	adds	r3, r7, r3
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	0019      	movs	r1, r3
 8010fc4:	2013      	movs	r0, #19
 8010fc6:	f003 fb47 	bl	8014658 <LoRaMacCommandsAddCmd>
                }
                break;
 8010fca:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8010fcc:	1cfa      	adds	r2, r7, #3
 8010fce:	1cbb      	adds	r3, r7, #2
 8010fd0:	7812      	ldrb	r2, [r2, #0]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d201      	bcs.n	8010fdc <ProcessMacCommands+0xafc>
 8010fd8:	f7ff faa0 	bl	801051c <ProcessMacCommands+0x3c>
 8010fdc:	e002      	b.n	8010fe4 <ProcessMacCommands+0xb04>
            return;
 8010fde:	46c0      	nop			; (mov r8, r8)
 8010fe0:	e000      	b.n	8010fe4 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010fe2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	b023      	add	sp, #140	; 0x8c
 8010fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fea:	46c0      	nop			; (mov r8, r8)
 8010fec:	12d53d80 	.word	0x12d53d80
 8010ff0:	200005b4 	.word	0x200005b4
 8010ff4:	2000172c 	.word	0x2000172c

08010ff8 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ffa:	b08f      	sub	sp, #60	; 0x3c
 8010ffc:	af02      	add	r7, sp, #8
 8010ffe:	60f8      	str	r0, [r7, #12]
 8011000:	0008      	movs	r0, r1
 8011002:	607a      	str	r2, [r7, #4]
 8011004:	0019      	movs	r1, r3
 8011006:	230b      	movs	r3, #11
 8011008:	18fb      	adds	r3, r7, r3
 801100a:	1c02      	adds	r2, r0, #0
 801100c:	701a      	strb	r2, [r3, #0]
 801100e:	2308      	movs	r3, #8
 8011010:	18fb      	adds	r3, r7, r3
 8011012:	1c0a      	adds	r2, r1, #0
 8011014:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011016:	232f      	movs	r3, #47	; 0x2f
 8011018:	18fb      	adds	r3, r7, r3
 801101a:	2203      	movs	r2, #3
 801101c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801101e:	4b90      	ldr	r3, [pc, #576]	; (8011260 <Send+0x268>)
 8011020:	4a90      	ldr	r2, [pc, #576]	; (8011264 <Send+0x26c>)
 8011022:	589a      	ldr	r2, [r3, r2]
 8011024:	232e      	movs	r3, #46	; 0x2e
 8011026:	18fb      	adds	r3, r7, r3
 8011028:	2185      	movs	r1, #133	; 0x85
 801102a:	5c52      	ldrb	r2, [r2, r1]
 801102c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801102e:	4b8c      	ldr	r3, [pc, #560]	; (8011260 <Send+0x268>)
 8011030:	4a8c      	ldr	r2, [pc, #560]	; (8011264 <Send+0x26c>)
 8011032:	589a      	ldr	r2, [r3, r2]
 8011034:	232d      	movs	r3, #45	; 0x2d
 8011036:	18fb      	adds	r3, r7, r3
 8011038:	2184      	movs	r1, #132	; 0x84
 801103a:	5c52      	ldrb	r2, [r2, r1]
 801103c:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801103e:	4b88      	ldr	r3, [pc, #544]	; (8011260 <Send+0x268>)
 8011040:	4a88      	ldr	r2, [pc, #544]	; (8011264 <Send+0x26c>)
 8011042:	589b      	ldr	r3, [r3, r2]
 8011044:	2280      	movs	r2, #128	; 0x80
 8011046:	589b      	ldr	r3, [r3, r2]
 8011048:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 801104a:	4b85      	ldr	r3, [pc, #532]	; (8011260 <Send+0x268>)
 801104c:	4a85      	ldr	r2, [pc, #532]	; (8011264 <Send+0x26c>)
 801104e:	589a      	ldr	r2, [r3, r2]
 8011050:	23b2      	movs	r3, #178	; 0xb2
 8011052:	005b      	lsls	r3, r3, #1
 8011054:	5cd3      	ldrb	r3, [r2, r3]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d101      	bne.n	801105e <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801105a:	2307      	movs	r3, #7
 801105c:	e0fb      	b.n	8011256 <Send+0x25e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 801105e:	4b80      	ldr	r3, [pc, #512]	; (8011260 <Send+0x268>)
 8011060:	4a80      	ldr	r2, [pc, #512]	; (8011264 <Send+0x26c>)
 8011062:	589b      	ldr	r3, [r3, r2]
 8011064:	22c8      	movs	r2, #200	; 0xc8
 8011066:	5c9b      	ldrb	r3, [r3, r2]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d106      	bne.n	801107a <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 801106c:	4b7c      	ldr	r3, [pc, #496]	; (8011260 <Send+0x268>)
 801106e:	4a7d      	ldr	r2, [pc, #500]	; (8011264 <Send+0x26c>)
 8011070:	589a      	ldr	r2, [r3, r2]
 8011072:	23aa      	movs	r3, #170	; 0xaa
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	2100      	movs	r1, #0
 8011078:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 801107a:	242c      	movs	r4, #44	; 0x2c
 801107c:	193b      	adds	r3, r7, r4
 801107e:	2200      	movs	r2, #0
 8011080:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8011082:	193b      	adds	r3, r7, r4
 8011084:	781a      	ldrb	r2, [r3, #0]
 8011086:	210f      	movs	r1, #15
 8011088:	438a      	bics	r2, r1
 801108a:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 801108c:	4b74      	ldr	r3, [pc, #464]	; (8011260 <Send+0x268>)
 801108e:	4a75      	ldr	r2, [pc, #468]	; (8011264 <Send+0x26c>)
 8011090:	589b      	ldr	r3, [r3, r2]
 8011092:	227e      	movs	r2, #126	; 0x7e
 8011094:	5c9a      	ldrb	r2, [r3, r2]
 8011096:	193b      	adds	r3, r7, r4
 8011098:	01d0      	lsls	r0, r2, #7
 801109a:	781a      	ldrb	r2, [r3, #0]
 801109c:	217f      	movs	r1, #127	; 0x7f
 801109e:	400a      	ands	r2, r1
 80110a0:	1c11      	adds	r1, r2, #0
 80110a2:	1c02      	adds	r2, r0, #0
 80110a4:	430a      	orrs	r2, r1
 80110a6:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80110a8:	4b6d      	ldr	r3, [pc, #436]	; (8011260 <Send+0x268>)
 80110aa:	4a6e      	ldr	r2, [pc, #440]	; (8011264 <Send+0x26c>)
 80110ac:	589b      	ldr	r3, [r3, r2]
 80110ae:	227c      	movs	r2, #124	; 0x7c
 80110b0:	5c9b      	ldrb	r3, [r3, r2]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d105      	bne.n	80110c2 <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 80110b6:	193b      	adds	r3, r7, r4
 80110b8:	781a      	ldrb	r2, [r3, #0]
 80110ba:	2110      	movs	r1, #16
 80110bc:	430a      	orrs	r2, r1
 80110be:	701a      	strb	r2, [r3, #0]
 80110c0:	e005      	b.n	80110ce <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80110c2:	232c      	movs	r3, #44	; 0x2c
 80110c4:	18fb      	adds	r3, r7, r3
 80110c6:	781a      	ldrb	r2, [r3, #0]
 80110c8:	2110      	movs	r1, #16
 80110ca:	438a      	bics	r2, r1
 80110cc:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 80110ce:	4b64      	ldr	r3, [pc, #400]	; (8011260 <Send+0x268>)
 80110d0:	4a64      	ldr	r2, [pc, #400]	; (8011264 <Send+0x26c>)
 80110d2:	589a      	ldr	r2, [r3, r2]
 80110d4:	234c      	movs	r3, #76	; 0x4c
 80110d6:	33ff      	adds	r3, #255	; 0xff
 80110d8:	5cd3      	ldrb	r3, [r2, r3]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d005      	beq.n	80110ea <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 80110de:	232c      	movs	r3, #44	; 0x2c
 80110e0:	18fb      	adds	r3, r7, r3
 80110e2:	781a      	ldrb	r2, [r3, #0]
 80110e4:	2120      	movs	r1, #32
 80110e6:	430a      	orrs	r2, r1
 80110e8:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80110ea:	4b5d      	ldr	r3, [pc, #372]	; (8011260 <Send+0x268>)
 80110ec:	4a5d      	ldr	r2, [pc, #372]	; (8011264 <Send+0x26c>)
 80110ee:	5899      	ldr	r1, [r3, r2]
 80110f0:	2014      	movs	r0, #20
 80110f2:	183b      	adds	r3, r7, r0
 80110f4:	22b0      	movs	r2, #176	; 0xb0
 80110f6:	0052      	lsls	r2, r2, #1
 80110f8:	588a      	ldr	r2, [r1, r2]
 80110fa:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 80110fc:	0001      	movs	r1, r0
 80110fe:	187b      	adds	r3, r7, r1
 8011100:	2201      	movs	r2, #1
 8011102:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011104:	242c      	movs	r4, #44	; 0x2c
 8011106:	193b      	adds	r3, r7, r4
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	061b      	lsls	r3, r3, #24
 801110c:	0fdb      	lsrs	r3, r3, #31
 801110e:	b2db      	uxtb	r3, r3
 8011110:	1e5a      	subs	r2, r3, #1
 8011112:	4193      	sbcs	r3, r2
 8011114:	b2da      	uxtb	r2, r3
 8011116:	187b      	adds	r3, r7, r1
 8011118:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801111a:	4b51      	ldr	r3, [pc, #324]	; (8011260 <Send+0x268>)
 801111c:	4a51      	ldr	r2, [pc, #324]	; (8011264 <Send+0x26c>)
 801111e:	589b      	ldr	r3, [r3, r2]
 8011120:	2280      	movs	r2, #128	; 0x80
 8011122:	589a      	ldr	r2, [r3, r2]
 8011124:	0008      	movs	r0, r1
 8011126:	183b      	adds	r3, r7, r0
 8011128:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801112a:	4a4d      	ldr	r2, [pc, #308]	; (8011260 <Send+0x268>)
 801112c:	23fd      	movs	r3, #253	; 0xfd
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	5ad2      	ldrh	r2, [r2, r3]
 8011132:	183b      	adds	r3, r7, r0
 8011134:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011136:	4b4a      	ldr	r3, [pc, #296]	; (8011260 <Send+0x268>)
 8011138:	4a4b      	ldr	r2, [pc, #300]	; (8011268 <Send+0x270>)
 801113a:	5a9a      	ldrh	r2, [r3, r2]
 801113c:	183b      	adds	r3, r7, r0
 801113e:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011140:	4b47      	ldr	r3, [pc, #284]	; (8011260 <Send+0x268>)
 8011142:	4a48      	ldr	r2, [pc, #288]	; (8011264 <Send+0x26c>)
 8011144:	589b      	ldr	r3, [r3, r2]
 8011146:	2285      	movs	r2, #133	; 0x85
 8011148:	569a      	ldrsb	r2, [r3, r2]
 801114a:	183b      	adds	r3, r7, r0
 801114c:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801114e:	4b44      	ldr	r3, [pc, #272]	; (8011260 <Send+0x268>)
 8011150:	4a44      	ldr	r2, [pc, #272]	; (8011264 <Send+0x26c>)
 8011152:	589b      	ldr	r3, [r3, r2]
 8011154:	2284      	movs	r2, #132	; 0x84
 8011156:	569a      	ldrsb	r2, [r3, r2]
 8011158:	183b      	adds	r3, r7, r0
 801115a:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801115c:	4b40      	ldr	r3, [pc, #256]	; (8011260 <Send+0x268>)
 801115e:	4a41      	ldr	r2, [pc, #260]	; (8011264 <Send+0x26c>)
 8011160:	589b      	ldr	r3, [r3, r2]
 8011162:	22b8      	movs	r2, #184	; 0xb8
 8011164:	5c9a      	ldrb	r2, [r3, r2]
 8011166:	183b      	adds	r3, r7, r0
 8011168:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 801116a:	4b3d      	ldr	r3, [pc, #244]	; (8011260 <Send+0x268>)
 801116c:	4a3d      	ldr	r2, [pc, #244]	; (8011264 <Send+0x26c>)
 801116e:	589b      	ldr	r3, [r3, r2]
 8011170:	781a      	ldrb	r2, [r3, #0]
 8011172:	183b      	adds	r3, r7, r0
 8011174:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011176:	4b3a      	ldr	r3, [pc, #232]	; (8011260 <Send+0x268>)
 8011178:	4a3a      	ldr	r2, [pc, #232]	; (8011264 <Send+0x26c>)
 801117a:	589b      	ldr	r3, [r3, r2]
 801117c:	3385      	adds	r3, #133	; 0x85
 801117e:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 8011180:	4b37      	ldr	r3, [pc, #220]	; (8011260 <Send+0x268>)
 8011182:	4a38      	ldr	r2, [pc, #224]	; (8011264 <Send+0x26c>)
 8011184:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011186:	3384      	adds	r3, #132	; 0x84
 8011188:	001a      	movs	r2, r3
 801118a:	2328      	movs	r3, #40	; 0x28
 801118c:	18fb      	adds	r3, r7, r3
 801118e:	1838      	adds	r0, r7, r0
 8011190:	f002 fff7 	bl	8014182 <LoRaMacAdrCalcNext>
 8011194:	0003      	movs	r3, r0
 8011196:	0019      	movs	r1, r3
 8011198:	0026      	movs	r6, r4
 801119a:	193b      	adds	r3, r7, r4
 801119c:	2201      	movs	r2, #1
 801119e:	400a      	ands	r2, r1
 80111a0:	0190      	lsls	r0, r2, #6
 80111a2:	781a      	ldrb	r2, [r3, #0]
 80111a4:	2140      	movs	r1, #64	; 0x40
 80111a6:	438a      	bics	r2, r1
 80111a8:	1c11      	adds	r1, r2, #0
 80111aa:	1c02      	adds	r2, r0, #0
 80111ac:	430a      	orrs	r2, r1
 80111ae:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80111b0:	222f      	movs	r2, #47	; 0x2f
 80111b2:	18bc      	adds	r4, r7, r2
 80111b4:	687d      	ldr	r5, [r7, #4]
 80111b6:	230b      	movs	r3, #11
 80111b8:	18fb      	adds	r3, r7, r3
 80111ba:	781a      	ldrb	r2, [r3, #0]
 80111bc:	19b9      	adds	r1, r7, r6
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	2308      	movs	r3, #8
 80111c2:	18fb      	adds	r3, r7, r3
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	9300      	str	r3, [sp, #0]
 80111c8:	002b      	movs	r3, r5
 80111ca:	f000 fd07 	bl	8011bdc <PrepareFrame>
 80111ce:	0003      	movs	r3, r0
 80111d0:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80111d2:	222f      	movs	r2, #47	; 0x2f
 80111d4:	18bb      	adds	r3, r7, r2
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d003      	beq.n	80111e4 <Send+0x1ec>
 80111dc:	18bb      	adds	r3, r7, r2
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	2b0a      	cmp	r3, #10
 80111e2:	d10c      	bne.n	80111fe <Send+0x206>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80111e4:	232f      	movs	r3, #47	; 0x2f
 80111e6:	18fc      	adds	r4, r7, r3
 80111e8:	2340      	movs	r3, #64	; 0x40
 80111ea:	2208      	movs	r2, #8
 80111ec:	4694      	mov	ip, r2
 80111ee:	44bc      	add	ip, r7
 80111f0:	4463      	add	r3, ip
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	0018      	movs	r0, r3
 80111f6:	f000 f9cd 	bl	8011594 <ScheduleTx>
 80111fa:	0003      	movs	r3, r0
 80111fc:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80111fe:	232f      	movs	r3, #47	; 0x2f
 8011200:	18fb      	adds	r3, r7, r3
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d010      	beq.n	801122a <Send+0x232>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8011208:	4b15      	ldr	r3, [pc, #84]	; (8011260 <Send+0x268>)
 801120a:	4a16      	ldr	r2, [pc, #88]	; (8011264 <Send+0x26c>)
 801120c:	589b      	ldr	r3, [r3, r2]
 801120e:	222e      	movs	r2, #46	; 0x2e
 8011210:	18ba      	adds	r2, r7, r2
 8011212:	2185      	movs	r1, #133	; 0x85
 8011214:	7812      	ldrb	r2, [r2, #0]
 8011216:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8011218:	4b11      	ldr	r3, [pc, #68]	; (8011260 <Send+0x268>)
 801121a:	4a12      	ldr	r2, [pc, #72]	; (8011264 <Send+0x26c>)
 801121c:	589b      	ldr	r3, [r3, r2]
 801121e:	222d      	movs	r2, #45	; 0x2d
 8011220:	18ba      	adds	r2, r7, r2
 8011222:	2184      	movs	r1, #132	; 0x84
 8011224:	7812      	ldrb	r2, [r2, #0]
 8011226:	545a      	strb	r2, [r3, r1]
 8011228:	e012      	b.n	8011250 <Send+0x258>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 801122a:	4b0d      	ldr	r3, [pc, #52]	; (8011260 <Send+0x268>)
 801122c:	4a0d      	ldr	r2, [pc, #52]	; (8011264 <Send+0x26c>)
 801122e:	589a      	ldr	r2, [r3, r2]
 8011230:	234c      	movs	r3, #76	; 0x4c
 8011232:	33ff      	adds	r3, #255	; 0xff
 8011234:	2100      	movs	r1, #0
 8011236:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8011238:	4b09      	ldr	r3, [pc, #36]	; (8011260 <Send+0x268>)
 801123a:	4a0a      	ldr	r2, [pc, #40]	; (8011264 <Send+0x26c>)
 801123c:	589b      	ldr	r3, [r3, r2]
 801123e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011240:	2180      	movs	r1, #128	; 0x80
 8011242:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011244:	f003 fa92 	bl	801476c <LoRaMacCommandsRemoveNoneStickyCmds>
 8011248:	1e03      	subs	r3, r0, #0
 801124a:	d001      	beq.n	8011250 <Send+0x258>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801124c:	2313      	movs	r3, #19
 801124e:	e002      	b.n	8011256 <Send+0x25e>
        }
    }
    return status;
 8011250:	232f      	movs	r3, #47	; 0x2f
 8011252:	18fb      	adds	r3, r7, r3
 8011254:	781b      	ldrb	r3, [r3, #0]
}
 8011256:	0018      	movs	r0, r3
 8011258:	46bd      	mov	sp, r7
 801125a:	b00d      	add	sp, #52	; 0x34
 801125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801125e:	46c0      	nop			; (mov r8, r8)
 8011260:	200005b4 	.word	0x200005b4
 8011264:	00000484 	.word	0x00000484
 8011268:	000003f6 	.word	0x000003f6

0801126c <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 801126c:	b5b0      	push	{r4, r5, r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	0002      	movs	r2, r0
 8011274:	1dfb      	adds	r3, r7, #7
 8011276:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011278:	230e      	movs	r3, #14
 801127a:	18fb      	adds	r3, r7, r3
 801127c:	2200      	movs	r2, #0
 801127e:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 8011280:	240c      	movs	r4, #12
 8011282:	193b      	adds	r3, r7, r4
 8011284:	2200      	movs	r2, #0
 8011286:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8011288:	250f      	movs	r5, #15
 801128a:	197b      	adds	r3, r7, r5
 801128c:	2201      	movs	r2, #1
 801128e:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8011290:	1dfb      	adds	r3, r7, #7
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	2bff      	cmp	r3, #255	; 0xff
 8011296:	d130      	bne.n	80112fa <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011298:	2000      	movs	r0, #0
 801129a:	f7fe ff7b 	bl	8010194 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801129e:	4a21      	ldr	r2, [pc, #132]	; (8011324 <SendReJoinReq+0xb8>)
 80112a0:	2382      	movs	r3, #130	; 0x82
 80112a2:	005b      	lsls	r3, r3, #1
 80112a4:	2100      	movs	r1, #0
 80112a6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80112a8:	4a1e      	ldr	r2, [pc, #120]	; (8011324 <SendReJoinReq+0xb8>)
 80112aa:	2384      	movs	r3, #132	; 0x84
 80112ac:	005b      	lsls	r3, r3, #1
 80112ae:	491e      	ldr	r1, [pc, #120]	; (8011328 <SendReJoinReq+0xbc>)
 80112b0:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80112b2:	4a1c      	ldr	r2, [pc, #112]	; (8011324 <SendReJoinReq+0xb8>)
 80112b4:	2386      	movs	r3, #134	; 0x86
 80112b6:	005b      	lsls	r3, r3, #1
 80112b8:	21ff      	movs	r1, #255	; 0xff
 80112ba:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80112bc:	193b      	adds	r3, r7, r4
 80112be:	781a      	ldrb	r2, [r3, #0]
 80112c0:	211f      	movs	r1, #31
 80112c2:	400a      	ands	r2, r1
 80112c4:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80112c6:	193b      	adds	r3, r7, r4
 80112c8:	7819      	ldrb	r1, [r3, #0]
 80112ca:	4a16      	ldr	r2, [pc, #88]	; (8011324 <SendReJoinReq+0xb8>)
 80112cc:	230e      	movs	r3, #14
 80112ce:	33ff      	adds	r3, #255	; 0xff
 80112d0:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80112d2:	f7fc f9fd 	bl	800d6d0 <SecureElementGetJoinEui>
 80112d6:	0001      	movs	r1, r0
 80112d8:	4b14      	ldr	r3, [pc, #80]	; (801132c <SendReJoinReq+0xc0>)
 80112da:	2208      	movs	r2, #8
 80112dc:	0018      	movs	r0, r3
 80112de:	f007 fdf9 	bl	8018ed4 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80112e2:	f7fc f9d1 	bl	800d688 <SecureElementGetDevEui>
 80112e6:	0001      	movs	r1, r0
 80112e8:	4b11      	ldr	r3, [pc, #68]	; (8011330 <SendReJoinReq+0xc4>)
 80112ea:	2208      	movs	r2, #8
 80112ec:	0018      	movs	r0, r3
 80112ee:	f007 fdf1 	bl	8018ed4 <memcpy1>

            allowDelayedTx = false;
 80112f2:	197b      	adds	r3, r7, r5
 80112f4:	2200      	movs	r2, #0
 80112f6:	701a      	strb	r2, [r3, #0]

            break;
 80112f8:	e004      	b.n	8011304 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80112fa:	230e      	movs	r3, #14
 80112fc:	18fb      	adds	r3, r7, r3
 80112fe:	2202      	movs	r2, #2
 8011300:	701a      	strb	r2, [r3, #0]
            break;
 8011302:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011304:	250e      	movs	r5, #14
 8011306:	197c      	adds	r4, r7, r5
 8011308:	230f      	movs	r3, #15
 801130a:	18fb      	adds	r3, r7, r3
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	0018      	movs	r0, r3
 8011310:	f000 f940 	bl	8011594 <ScheduleTx>
 8011314:	0003      	movs	r3, r0
 8011316:	7023      	strb	r3, [r4, #0]
    return status;
 8011318:	197b      	adds	r3, r7, r5
 801131a:	781b      	ldrb	r3, [r3, #0]
}
 801131c:	0018      	movs	r0, r3
 801131e:	46bd      	mov	sp, r7
 8011320:	b004      	add	sp, #16
 8011322:	bdb0      	pop	{r4, r5, r7, pc}
 8011324:	200005b4 	.word	0x200005b4
 8011328:	200005b6 	.word	0x200005b6
 801132c:	200006c2 	.word	0x200006c2
 8011330:	200006ca 	.word	0x200006ca

08011334 <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011334:	b580      	push	{r7, lr}
 8011336:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011338:	f002 ffa2 	bl	8014280 <LoRaMacClassBIsBeaconExpected>
 801133c:	1e03      	subs	r3, r0, #0
 801133e:	d001      	beq.n	8011344 <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011340:	230e      	movs	r3, #14
 8011342:	e013      	b.n	801136c <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011344:	4b0b      	ldr	r3, [pc, #44]	; (8011374 <CheckForClassBCollision+0x40>)
 8011346:	4a0c      	ldr	r2, [pc, #48]	; (8011378 <CheckForClassBCollision+0x44>)
 8011348:	589b      	ldr	r3, [r3, r2]
 801134a:	227c      	movs	r2, #124	; 0x7c
 801134c:	5c9b      	ldrb	r3, [r3, r2]
 801134e:	2b01      	cmp	r3, #1
 8011350:	d10b      	bne.n	801136a <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011352:	f002 ff9b 	bl	801428c <LoRaMacClassBIsPingExpected>
 8011356:	1e03      	subs	r3, r0, #0
 8011358:	d001      	beq.n	801135e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801135a:	230f      	movs	r3, #15
 801135c:	e006      	b.n	801136c <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801135e:	f002 ff9b 	bl	8014298 <LoRaMacClassBIsMulticastExpected>
 8011362:	1e03      	subs	r3, r0, #0
 8011364:	d001      	beq.n	801136a <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011366:	230f      	movs	r3, #15
 8011368:	e000      	b.n	801136c <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	0018      	movs	r0, r3
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	46c0      	nop			; (mov r8, r8)
 8011374:	200005b4 	.word	0x200005b4
 8011378:	00000484 	.word	0x00000484

0801137c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801137c:	b5b0      	push	{r4, r5, r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011382:	4b44      	ldr	r3, [pc, #272]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011384:	4a44      	ldr	r2, [pc, #272]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 8011386:	589b      	ldr	r3, [r3, r2]
 8011388:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 801138a:	4b42      	ldr	r3, [pc, #264]	; (8011494 <ComputeRxWindowParameters+0x118>)
 801138c:	4a42      	ldr	r2, [pc, #264]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 801138e:	589b      	ldr	r3, [r3, r2]
 8011390:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 8011392:	4b40      	ldr	r3, [pc, #256]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011394:	4a40      	ldr	r2, [pc, #256]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 8011396:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011398:	22b9      	movs	r2, #185	; 0xb9
 801139a:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 801139c:	4b3d      	ldr	r3, [pc, #244]	; (8011494 <ComputeRxWindowParameters+0x118>)
 801139e:	4a3e      	ldr	r2, [pc, #248]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 80113a0:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80113a2:	2285      	movs	r2, #133	; 0x85
 80113a4:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 80113a6:	4b3b      	ldr	r3, [pc, #236]	; (8011494 <ComputeRxWindowParameters+0x118>)
 80113a8:	4d3b      	ldr	r5, [pc, #236]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 80113aa:	595b      	ldr	r3, [r3, r5]
 80113ac:	25a5      	movs	r5, #165	; 0xa5
 80113ae:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80113b0:	b25b      	sxtb	r3, r3
 80113b2:	f005 fad1 	bl	8016958 <RegionApplyDrOffset>
 80113b6:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80113b8:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80113ba:	4b36      	ldr	r3, [pc, #216]	; (8011494 <ComputeRxWindowParameters+0x118>)
 80113bc:	4a36      	ldr	r2, [pc, #216]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 80113be:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80113c0:	228c      	movs	r2, #140	; 0x8c
 80113c2:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80113c4:	4b33      	ldr	r3, [pc, #204]	; (8011494 <ComputeRxWindowParameters+0x118>)
 80113c6:	4834      	ldr	r0, [pc, #208]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 80113c8:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80113ca:	2088      	movs	r0, #136	; 0x88
 80113cc:	5818      	ldr	r0, [r3, r0]
 80113ce:	4b33      	ldr	r3, [pc, #204]	; (801149c <ComputeRxWindowParameters+0x120>)
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	0003      	movs	r3, r0
 80113d4:	0020      	movs	r0, r4
 80113d6:	f005 f99d 	bl	8016714 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80113da:	4b2e      	ldr	r3, [pc, #184]	; (8011494 <ComputeRxWindowParameters+0x118>)
 80113dc:	4a2e      	ldr	r2, [pc, #184]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 80113de:	589b      	ldr	r3, [r3, r2]
 80113e0:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 80113e2:	4b2c      	ldr	r3, [pc, #176]	; (8011494 <ComputeRxWindowParameters+0x118>)
 80113e4:	4a2c      	ldr	r2, [pc, #176]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 80113e6:	589b      	ldr	r3, [r3, r2]
 80113e8:	22ac      	movs	r2, #172	; 0xac
 80113ea:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80113ec:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80113ee:	4b29      	ldr	r3, [pc, #164]	; (8011494 <ComputeRxWindowParameters+0x118>)
 80113f0:	4a29      	ldr	r2, [pc, #164]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 80113f2:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80113f4:	228c      	movs	r2, #140	; 0x8c
 80113f6:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80113f8:	4b26      	ldr	r3, [pc, #152]	; (8011494 <ComputeRxWindowParameters+0x118>)
 80113fa:	4c27      	ldr	r4, [pc, #156]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 80113fc:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80113fe:	2488      	movs	r4, #136	; 0x88
 8011400:	591c      	ldr	r4, [r3, r4]
 8011402:	4b27      	ldr	r3, [pc, #156]	; (80114a0 <ComputeRxWindowParameters+0x124>)
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	0023      	movs	r3, r4
 8011408:	f005 f984 	bl	8016714 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801140c:	4b21      	ldr	r3, [pc, #132]	; (8011494 <ComputeRxWindowParameters+0x118>)
 801140e:	4a22      	ldr	r2, [pc, #136]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 8011410:	589b      	ldr	r3, [r3, r2]
 8011412:	2294      	movs	r2, #148	; 0x94
 8011414:	589b      	ldr	r3, [r3, r2]
 8011416:	491f      	ldr	r1, [pc, #124]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011418:	22f1      	movs	r2, #241	; 0xf1
 801141a:	0092      	lsls	r2, r2, #2
 801141c:	588a      	ldr	r2, [r1, r2]
 801141e:	1899      	adds	r1, r3, r2
 8011420:	4a1c      	ldr	r2, [pc, #112]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011422:	23ec      	movs	r3, #236	; 0xec
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011428:	4b1a      	ldr	r3, [pc, #104]	; (8011494 <ComputeRxWindowParameters+0x118>)
 801142a:	4a1b      	ldr	r2, [pc, #108]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 801142c:	589b      	ldr	r3, [r3, r2]
 801142e:	2298      	movs	r2, #152	; 0x98
 8011430:	589b      	ldr	r3, [r3, r2]
 8011432:	4918      	ldr	r1, [pc, #96]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011434:	22f6      	movs	r2, #246	; 0xf6
 8011436:	0092      	lsls	r2, r2, #2
 8011438:	588a      	ldr	r2, [r1, r2]
 801143a:	1899      	adds	r1, r3, r2
 801143c:	4a15      	ldr	r2, [pc, #84]	; (8011494 <ComputeRxWindowParameters+0x118>)
 801143e:	23ed      	movs	r3, #237	; 0xed
 8011440:	009b      	lsls	r3, r3, #2
 8011442:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011444:	4b13      	ldr	r3, [pc, #76]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011446:	4a14      	ldr	r2, [pc, #80]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 8011448:	589a      	ldr	r2, [r3, r2]
 801144a:	23b2      	movs	r3, #178	; 0xb2
 801144c:	005b      	lsls	r3, r3, #1
 801144e:	5cd3      	ldrb	r3, [r2, r3]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d11b      	bne.n	801148c <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011454:	4b0f      	ldr	r3, [pc, #60]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011456:	4a10      	ldr	r2, [pc, #64]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 8011458:	589b      	ldr	r3, [r3, r2]
 801145a:	229c      	movs	r2, #156	; 0x9c
 801145c:	589b      	ldr	r3, [r3, r2]
 801145e:	490d      	ldr	r1, [pc, #52]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011460:	22f1      	movs	r2, #241	; 0xf1
 8011462:	0092      	lsls	r2, r2, #2
 8011464:	588a      	ldr	r2, [r1, r2]
 8011466:	1899      	adds	r1, r3, r2
 8011468:	4a0a      	ldr	r2, [pc, #40]	; (8011494 <ComputeRxWindowParameters+0x118>)
 801146a:	23ec      	movs	r3, #236	; 0xec
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011470:	4b08      	ldr	r3, [pc, #32]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011472:	4a09      	ldr	r2, [pc, #36]	; (8011498 <ComputeRxWindowParameters+0x11c>)
 8011474:	589b      	ldr	r3, [r3, r2]
 8011476:	22a0      	movs	r2, #160	; 0xa0
 8011478:	589b      	ldr	r3, [r3, r2]
 801147a:	4906      	ldr	r1, [pc, #24]	; (8011494 <ComputeRxWindowParameters+0x118>)
 801147c:	22f6      	movs	r2, #246	; 0xf6
 801147e:	0092      	lsls	r2, r2, #2
 8011480:	588a      	ldr	r2, [r1, r2]
 8011482:	1899      	adds	r1, r3, r2
 8011484:	4a03      	ldr	r2, [pc, #12]	; (8011494 <ComputeRxWindowParameters+0x118>)
 8011486:	23ed      	movs	r3, #237	; 0xed
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	50d1      	str	r1, [r2, r3]
    }
}
 801148c:	46c0      	nop			; (mov r8, r8)
 801148e:	46bd      	mov	sp, r7
 8011490:	bdb0      	pop	{r4, r5, r7, pc}
 8011492:	46c0      	nop			; (mov r8, r8)
 8011494:	200005b4 	.word	0x200005b4
 8011498:	00000484 	.word	0x00000484
 801149c:	2000096c 	.word	0x2000096c
 80114a0:	20000980 	.word	0x20000980

080114a4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80114ae:	4b15      	ldr	r3, [pc, #84]	; (8011504 <VerifyTxFrame+0x60>)
 80114b0:	4a15      	ldr	r2, [pc, #84]	; (8011508 <VerifyTxFrame+0x64>)
 80114b2:	589a      	ldr	r2, [r3, r2]
 80114b4:	23b2      	movs	r3, #178	; 0xb2
 80114b6:	005b      	lsls	r3, r3, #1
 80114b8:	5cd3      	ldrb	r3, [r2, r3]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d01d      	beq.n	80114fa <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80114be:	1d3b      	adds	r3, r7, #4
 80114c0:	0018      	movs	r0, r3
 80114c2:	f003 f99f 	bl	8014804 <LoRaMacCommandsGetSizeSerializedCmds>
 80114c6:	1e03      	subs	r3, r0, #0
 80114c8:	d001      	beq.n	80114ce <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114ca:	2313      	movs	r3, #19
 80114cc:	e016      	b.n	80114fc <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 80114ce:	4b0d      	ldr	r3, [pc, #52]	; (8011504 <VerifyTxFrame+0x60>)
 80114d0:	4a0e      	ldr	r2, [pc, #56]	; (801150c <VerifyTxFrame+0x68>)
 80114d2:	5c98      	ldrb	r0, [r3, r2]
 80114d4:	4b0b      	ldr	r3, [pc, #44]	; (8011504 <VerifyTxFrame+0x60>)
 80114d6:	4a0c      	ldr	r2, [pc, #48]	; (8011508 <VerifyTxFrame+0x64>)
 80114d8:	589b      	ldr	r3, [r3, r2]
 80114da:	2285      	movs	r2, #133	; 0x85
 80114dc:	569b      	ldrsb	r3, [r3, r2]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	b2d2      	uxtb	r2, r2
 80114e2:	0019      	movs	r1, r3
 80114e4:	f7fe ffb0 	bl	8010448 <ValidatePayloadLength>
 80114e8:	0003      	movs	r3, r0
 80114ea:	001a      	movs	r2, r3
 80114ec:	2301      	movs	r3, #1
 80114ee:	4053      	eors	r3, r2
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d001      	beq.n	80114fa <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80114f6:	2308      	movs	r3, #8
 80114f8:	e000      	b.n	80114fc <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 80114fa:	2300      	movs	r3, #0
}
 80114fc:	0018      	movs	r0, r3
 80114fe:	46bd      	mov	sp, r7
 8011500:	b002      	add	sp, #8
 8011502:	bd80      	pop	{r7, pc}
 8011504:	200005b4 	.word	0x200005b4
 8011508:	00000484 	.word	0x00000484
 801150c:	00000237 	.word	0x00000237

08011510 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011510:	b590      	push	{r4, r7, lr}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011516:	4a1d      	ldr	r2, [pc, #116]	; (801158c <SerializeTxFrame+0x7c>)
 8011518:	2382      	movs	r3, #130	; 0x82
 801151a:	005b      	lsls	r3, r3, #1
 801151c:	5cd3      	ldrb	r3, [r2, r3]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d002      	beq.n	8011528 <SerializeTxFrame+0x18>
 8011522:	2b04      	cmp	r3, #4
 8011524:	d015      	beq.n	8011552 <SerializeTxFrame+0x42>
 8011526:	e029      	b.n	801157c <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011528:	1dfc      	adds	r4, r7, #7
 801152a:	4b19      	ldr	r3, [pc, #100]	; (8011590 <SerializeTxFrame+0x80>)
 801152c:	0018      	movs	r0, r3
 801152e:	f004 fe6b 	bl	8016208 <LoRaMacSerializerJoinRequest>
 8011532:	0003      	movs	r3, r0
 8011534:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011536:	1dfb      	adds	r3, r7, #7
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d001      	beq.n	8011542 <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801153e:	2311      	movs	r3, #17
 8011540:	e01f      	b.n	8011582 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011542:	4a12      	ldr	r2, [pc, #72]	; (801158c <SerializeTxFrame+0x7c>)
 8011544:	2386      	movs	r3, #134	; 0x86
 8011546:	005b      	lsls	r3, r3, #1
 8011548:	5cd3      	ldrb	r3, [r2, r3]
 801154a:	b29a      	uxth	r2, r3
 801154c:	4b0f      	ldr	r3, [pc, #60]	; (801158c <SerializeTxFrame+0x7c>)
 801154e:	801a      	strh	r2, [r3, #0]
            break;
 8011550:	e016      	b.n	8011580 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011552:	1dfc      	adds	r4, r7, #7
 8011554:	4b0e      	ldr	r3, [pc, #56]	; (8011590 <SerializeTxFrame+0x80>)
 8011556:	0018      	movs	r0, r3
 8011558:	f004 fef1 	bl	801633e <LoRaMacSerializerData>
 801155c:	0003      	movs	r3, r0
 801155e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011560:	1dfb      	adds	r3, r7, #7
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d001      	beq.n	801156c <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011568:	2311      	movs	r3, #17
 801156a:	e00a      	b.n	8011582 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801156c:	4a07      	ldr	r2, [pc, #28]	; (801158c <SerializeTxFrame+0x7c>)
 801156e:	2386      	movs	r3, #134	; 0x86
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	5cd3      	ldrb	r3, [r2, r3]
 8011574:	b29a      	uxth	r2, r3
 8011576:	4b05      	ldr	r3, [pc, #20]	; (801158c <SerializeTxFrame+0x7c>)
 8011578:	801a      	strh	r2, [r3, #0]
            break;
 801157a:	e001      	b.n	8011580 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801157c:	2303      	movs	r3, #3
 801157e:	e000      	b.n	8011582 <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 8011580:	2300      	movs	r3, #0
}
 8011582:	0018      	movs	r0, r3
 8011584:	46bd      	mov	sp, r7
 8011586:	b003      	add	sp, #12
 8011588:	bd90      	pop	{r4, r7, pc}
 801158a:	46c0      	nop			; (mov r8, r8)
 801158c:	200005b4 	.word	0x200005b4
 8011590:	200006bc 	.word	0x200006bc

08011594 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011596:	b091      	sub	sp, #68	; 0x44
 8011598:	af02      	add	r7, sp, #8
 801159a:	0002      	movs	r2, r0
 801159c:	230f      	movs	r3, #15
 801159e:	18fb      	adds	r3, r7, r3
 80115a0:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115a2:	2537      	movs	r5, #55	; 0x37
 80115a4:	197b      	adds	r3, r7, r5
 80115a6:	2203      	movs	r2, #3
 80115a8:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80115aa:	197c      	adds	r4, r7, r5
 80115ac:	f7ff fec2 	bl	8011334 <CheckForClassBCollision>
 80115b0:	0003      	movs	r3, r0
 80115b2:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80115b4:	002a      	movs	r2, r5
 80115b6:	18bb      	adds	r3, r7, r2
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d002      	beq.n	80115c4 <ScheduleTx+0x30>
    {
        return status;
 80115be:	18bb      	adds	r3, r7, r2
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	e0c3      	b.n	801174c <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 80115c4:	f000 f940 	bl	8011848 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80115c8:	2537      	movs	r5, #55	; 0x37
 80115ca:	197c      	adds	r4, r7, r5
 80115cc:	f7ff ffa0 	bl	8011510 <SerializeTxFrame>
 80115d0:	0003      	movs	r3, r0
 80115d2:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80115d4:	002a      	movs	r2, r5
 80115d6:	18bb      	adds	r3, r7, r2
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d002      	beq.n	80115e4 <ScheduleTx+0x50>
    {
        return status;
 80115de:	18bb      	adds	r3, r7, r2
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	e0b3      	b.n	801174c <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 80115e4:	4b5b      	ldr	r3, [pc, #364]	; (8011754 <ScheduleTx+0x1c0>)
 80115e6:	4a5c      	ldr	r2, [pc, #368]	; (8011758 <ScheduleTx+0x1c4>)
 80115e8:	589a      	ldr	r2, [r3, r2]
 80115ea:	23aa      	movs	r3, #170	; 0xaa
 80115ec:	005b      	lsls	r3, r3, #1
 80115ee:	58d2      	ldr	r2, [r2, r3]
 80115f0:	2414      	movs	r4, #20
 80115f2:	193b      	adds	r3, r7, r4
 80115f4:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80115f6:	4b57      	ldr	r3, [pc, #348]	; (8011754 <ScheduleTx+0x1c0>)
 80115f8:	4a57      	ldr	r2, [pc, #348]	; (8011758 <ScheduleTx+0x1c4>)
 80115fa:	589b      	ldr	r3, [r3, r2]
 80115fc:	2285      	movs	r2, #133	; 0x85
 80115fe:	569a      	ldrsb	r2, [r3, r2]
 8011600:	193b      	adds	r3, r7, r4
 8011602:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8011604:	4b53      	ldr	r3, [pc, #332]	; (8011754 <ScheduleTx+0x1c0>)
 8011606:	4a54      	ldr	r2, [pc, #336]	; (8011758 <ScheduleTx+0x1c4>)
 8011608:	589b      	ldr	r3, [r3, r2]
 801160a:	22c9      	movs	r2, #201	; 0xc9
 801160c:	5c9a      	ldrb	r2, [r3, r2]
 801160e:	193b      	adds	r3, r7, r4
 8011610:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8011612:	232c      	movs	r3, #44	; 0x2c
 8011614:	18fb      	adds	r3, r7, r3
 8011616:	0018      	movs	r0, r3
 8011618:	f00a ff32 	bl	801c480 <SysTimeGetMcuTime>
 801161c:	4b4d      	ldr	r3, [pc, #308]	; (8011754 <ScheduleTx+0x1c0>)
 801161e:	4a4e      	ldr	r2, [pc, #312]	; (8011758 <ScheduleTx+0x1c4>)
 8011620:	5898      	ldr	r0, [r3, r2]
 8011622:	193d      	adds	r5, r7, r4
 8011624:	003e      	movs	r6, r7
 8011626:	23ac      	movs	r3, #172	; 0xac
 8011628:	0059      	lsls	r1, r3, #1
 801162a:	232c      	movs	r3, #44	; 0x2c
 801162c:	18fa      	adds	r2, r7, r3
 801162e:	2404      	movs	r4, #4
 8011630:	1843      	adds	r3, r0, r1
 8011632:	191c      	adds	r4, r3, r4
 8011634:	466b      	mov	r3, sp
 8011636:	6824      	ldr	r4, [r4, #0]
 8011638:	601c      	str	r4, [r3, #0]
 801163a:	5843      	ldr	r3, [r0, r1]
 801163c:	6811      	ldr	r1, [r2, #0]
 801163e:	6852      	ldr	r2, [r2, #4]
 8011640:	0030      	movs	r0, r6
 8011642:	f00a fe4f 	bl	801c2e4 <SysTimeSub>
 8011646:	003a      	movs	r2, r7
 8011648:	002b      	movs	r3, r5
 801164a:	330c      	adds	r3, #12
 801164c:	ca21      	ldmia	r2!, {r0, r5}
 801164e:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011650:	4b40      	ldr	r3, [pc, #256]	; (8011754 <ScheduleTx+0x1c0>)
 8011652:	4a41      	ldr	r2, [pc, #260]	; (8011758 <ScheduleTx+0x1c4>)
 8011654:	589a      	ldr	r2, [r3, r2]
 8011656:	23a8      	movs	r3, #168	; 0xa8
 8011658:	005b      	lsls	r3, r3, #1
 801165a:	58d2      	ldr	r2, [r2, r3]
 801165c:	2114      	movs	r1, #20
 801165e:	187b      	adds	r3, r7, r1
 8011660:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 8011662:	187b      	adds	r3, r7, r1
 8011664:	2200      	movs	r2, #0
 8011666:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011668:	187b      	adds	r3, r7, r1
 801166a:	2201      	movs	r2, #1
 801166c:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801166e:	4b39      	ldr	r3, [pc, #228]	; (8011754 <ScheduleTx+0x1c0>)
 8011670:	881a      	ldrh	r2, [r3, #0]
 8011672:	187b      	adds	r3, r7, r1
 8011674:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011676:	4b37      	ldr	r3, [pc, #220]	; (8011754 <ScheduleTx+0x1c0>)
 8011678:	4a37      	ldr	r2, [pc, #220]	; (8011758 <ScheduleTx+0x1c4>)
 801167a:	589a      	ldr	r2, [r3, r2]
 801167c:	23b2      	movs	r3, #178	; 0xb2
 801167e:	005b      	lsls	r3, r3, #1
 8011680:	5cd3      	ldrb	r3, [r2, r3]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d105      	bne.n	8011692 <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011686:	187b      	adds	r3, r7, r1
 8011688:	2201      	movs	r2, #1
 801168a:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 801168c:	187b      	adds	r3, r7, r1
 801168e:	2200      	movs	r2, #0
 8011690:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8011692:	4b30      	ldr	r3, [pc, #192]	; (8011754 <ScheduleTx+0x1c0>)
 8011694:	4a30      	ldr	r2, [pc, #192]	; (8011758 <ScheduleTx+0x1c4>)
 8011696:	589b      	ldr	r3, [r3, r2]
 8011698:	7818      	ldrb	r0, [r3, #0]
 801169a:	4b2e      	ldr	r3, [pc, #184]	; (8011754 <ScheduleTx+0x1c0>)
 801169c:	4a2e      	ldr	r2, [pc, #184]	; (8011758 <ScheduleTx+0x1c4>)
 801169e:	589b      	ldr	r3, [r3, r2]
 80116a0:	3355      	adds	r3, #85	; 0x55
 80116a2:	33ff      	adds	r3, #255	; 0xff
 80116a4:	2637      	movs	r6, #55	; 0x37
 80116a6:	19bc      	adds	r4, r7, r6
 80116a8:	4d2c      	ldr	r5, [pc, #176]	; (801175c <ScheduleTx+0x1c8>)
 80116aa:	4a2d      	ldr	r2, [pc, #180]	; (8011760 <ScheduleTx+0x1cc>)
 80116ac:	2114      	movs	r1, #20
 80116ae:	1879      	adds	r1, r7, r1
 80116b0:	9300      	str	r3, [sp, #0]
 80116b2:	002b      	movs	r3, r5
 80116b4:	f005 f920 	bl	80168f8 <RegionNextChannel>
 80116b8:	0003      	movs	r3, r0
 80116ba:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 80116bc:	19bb      	adds	r3, r7, r6
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d02c      	beq.n	801171e <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80116c4:	19bb      	adds	r3, r7, r6
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	2b0b      	cmp	r3, #11
 80116ca:	d124      	bne.n	8011716 <ScheduleTx+0x182>
 80116cc:	230f      	movs	r3, #15
 80116ce:	18fb      	adds	r3, r7, r3
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d01f      	beq.n	8011716 <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80116d6:	4a1f      	ldr	r2, [pc, #124]	; (8011754 <ScheduleTx+0x1c0>)
 80116d8:	2391      	movs	r3, #145	; 0x91
 80116da:	00db      	lsls	r3, r3, #3
 80116dc:	58d3      	ldr	r3, [r2, r3]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d017      	beq.n	8011712 <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80116e2:	4a1c      	ldr	r2, [pc, #112]	; (8011754 <ScheduleTx+0x1c0>)
 80116e4:	23d0      	movs	r3, #208	; 0xd0
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	58d3      	ldr	r3, [r2, r3]
 80116ea:	2220      	movs	r2, #32
 80116ec:	431a      	orrs	r2, r3
 80116ee:	0011      	movs	r1, r2
 80116f0:	4a18      	ldr	r2, [pc, #96]	; (8011754 <ScheduleTx+0x1c0>)
 80116f2:	23d0      	movs	r3, #208	; 0xd0
 80116f4:	009b      	lsls	r3, r3, #2
 80116f6:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80116f8:	4a16      	ldr	r2, [pc, #88]	; (8011754 <ScheduleTx+0x1c0>)
 80116fa:	2391      	movs	r3, #145	; 0x91
 80116fc:	00db      	lsls	r3, r3, #3
 80116fe:	58d2      	ldr	r2, [r2, r3]
 8011700:	4b18      	ldr	r3, [pc, #96]	; (8011764 <ScheduleTx+0x1d0>)
 8011702:	0011      	movs	r1, r2
 8011704:	0018      	movs	r0, r3
 8011706:	f00b f813 	bl	801c730 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801170a:	4b16      	ldr	r3, [pc, #88]	; (8011764 <ScheduleTx+0x1d0>)
 801170c:	0018      	movs	r0, r3
 801170e:	f00a ff1f 	bl	801c550 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011712:	2300      	movs	r3, #0
 8011714:	e01a      	b.n	801174c <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011716:	2337      	movs	r3, #55	; 0x37
 8011718:	18fb      	adds	r3, r7, r3
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	e016      	b.n	801174c <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801171e:	f7ff fe2d 	bl	801137c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011722:	2537      	movs	r5, #55	; 0x37
 8011724:	197c      	adds	r4, r7, r5
 8011726:	f7ff febd 	bl	80114a4 <VerifyTxFrame>
 801172a:	0003      	movs	r3, r0
 801172c:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 801172e:	002a      	movs	r2, r5
 8011730:	18bb      	adds	r3, r7, r2
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d002      	beq.n	801173e <ScheduleTx+0x1aa>
    {
        return status;
 8011738:	18bb      	adds	r3, r7, r2
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	e006      	b.n	801174c <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801173e:	4b05      	ldr	r3, [pc, #20]	; (8011754 <ScheduleTx+0x1c0>)
 8011740:	4a09      	ldr	r2, [pc, #36]	; (8011768 <ScheduleTx+0x1d4>)
 8011742:	5c9b      	ldrb	r3, [r3, r2]
 8011744:	0018      	movs	r0, r3
 8011746:	f000 fb99 	bl	8011e7c <SendFrameOnChannel>
 801174a:	0003      	movs	r3, r0
}
 801174c:	0018      	movs	r0, r3
 801174e:	46bd      	mov	sp, r7
 8011750:	b00f      	add	sp, #60	; 0x3c
 8011752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011754:	200005b4 	.word	0x200005b4
 8011758:	00000484 	.word	0x00000484
 801175c:	20000a3c 	.word	0x20000a3c
 8011760:	200009c9 	.word	0x200009c9
 8011764:	2000091c 	.word	0x2000091c
 8011768:	00000415 	.word	0x00000415

0801176c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 801176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	0002      	movs	r2, r0
 8011774:	1dfb      	adds	r3, r7, #7
 8011776:	701a      	strb	r2, [r3, #0]
 8011778:	1dbb      	adds	r3, r7, #6
 801177a:	1c0a      	adds	r2, r1, #0
 801177c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801177e:	230f      	movs	r3, #15
 8011780:	18fb      	adds	r3, r7, r3
 8011782:	2213      	movs	r2, #19
 8011784:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8011786:	2300      	movs	r3, #0
 8011788:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 801178a:	4a2c      	ldr	r2, [pc, #176]	; (801183c <SecureFrame+0xd0>)
 801178c:	2382      	movs	r3, #130	; 0x82
 801178e:	005b      	lsls	r3, r3, #1
 8011790:	5cd3      	ldrb	r3, [r2, r3]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d002      	beq.n	801179c <SecureFrame+0x30>
 8011796:	2b04      	cmp	r3, #4
 8011798:	d016      	beq.n	80117c8 <SecureFrame+0x5c>
 801179a:	e047      	b.n	801182c <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801179c:	250f      	movs	r5, #15
 801179e:	197c      	adds	r4, r7, r5
 80117a0:	4b27      	ldr	r3, [pc, #156]	; (8011840 <SecureFrame+0xd4>)
 80117a2:	0018      	movs	r0, r3
 80117a4:	f004 f86a 	bl	801587c <LoRaMacCryptoPrepareJoinRequest>
 80117a8:	0003      	movs	r3, r0
 80117aa:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80117ac:	197b      	adds	r3, r7, r5
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d001      	beq.n	80117b8 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80117b4:	2311      	movs	r3, #17
 80117b6:	e03c      	b.n	8011832 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80117b8:	4a20      	ldr	r2, [pc, #128]	; (801183c <SecureFrame+0xd0>)
 80117ba:	2386      	movs	r3, #134	; 0x86
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	5cd3      	ldrb	r3, [r2, r3]
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	4b1e      	ldr	r3, [pc, #120]	; (801183c <SecureFrame+0xd0>)
 80117c4:	801a      	strh	r2, [r3, #0]
            break;
 80117c6:	e033      	b.n	8011830 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80117c8:	2308      	movs	r3, #8
 80117ca:	18fb      	adds	r3, r7, r3
 80117cc:	0018      	movs	r0, r3
 80117ce:	f003 ff67 	bl	80156a0 <LoRaMacCryptoGetFCntUp>
 80117d2:	1e03      	subs	r3, r0, #0
 80117d4:	d001      	beq.n	80117da <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80117d6:	2312      	movs	r3, #18
 80117d8:	e02b      	b.n	8011832 <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80117da:	4a18      	ldr	r2, [pc, #96]	; (801183c <SecureFrame+0xd0>)
 80117dc:	2382      	movs	r3, #130	; 0x82
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	5cd3      	ldrb	r3, [r2, r3]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d104      	bne.n	80117f0 <SecureFrame+0x84>
 80117e6:	4b15      	ldr	r3, [pc, #84]	; (801183c <SecureFrame+0xd0>)
 80117e8:	4a16      	ldr	r2, [pc, #88]	; (8011844 <SecureFrame+0xd8>)
 80117ea:	5c9b      	ldrb	r3, [r3, r2]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d902      	bls.n	80117f6 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	3b01      	subs	r3, #1
 80117f4:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80117f6:	68b8      	ldr	r0, [r7, #8]
 80117f8:	260f      	movs	r6, #15
 80117fa:	19bc      	adds	r4, r7, r6
 80117fc:	4d10      	ldr	r5, [pc, #64]	; (8011840 <SecureFrame+0xd4>)
 80117fe:	1dbb      	adds	r3, r7, #6
 8011800:	781a      	ldrb	r2, [r3, #0]
 8011802:	1dfb      	adds	r3, r7, #7
 8011804:	7819      	ldrb	r1, [r3, #0]
 8011806:	002b      	movs	r3, r5
 8011808:	f004 f942 	bl	8015a90 <LoRaMacCryptoSecureMessage>
 801180c:	0003      	movs	r3, r0
 801180e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011810:	19bb      	adds	r3, r7, r6
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011818:	2311      	movs	r3, #17
 801181a:	e00a      	b.n	8011832 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801181c:	4a07      	ldr	r2, [pc, #28]	; (801183c <SecureFrame+0xd0>)
 801181e:	2386      	movs	r3, #134	; 0x86
 8011820:	005b      	lsls	r3, r3, #1
 8011822:	5cd3      	ldrb	r3, [r2, r3]
 8011824:	b29a      	uxth	r2, r3
 8011826:	4b05      	ldr	r3, [pc, #20]	; (801183c <SecureFrame+0xd0>)
 8011828:	801a      	strh	r2, [r3, #0]
            break;
 801182a:	e001      	b.n	8011830 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801182c:	2303      	movs	r3, #3
 801182e:	e000      	b.n	8011832 <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8011830:	2300      	movs	r3, #0
}
 8011832:	0018      	movs	r0, r3
 8011834:	46bd      	mov	sp, r7
 8011836:	b005      	add	sp, #20
 8011838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801183a:	46c0      	nop			; (mov r8, r8)
 801183c:	200005b4 	.word	0x200005b4
 8011840:	200006bc 	.word	0x200006bc
 8011844:	00000412 	.word	0x00000412

08011848 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011848:	b580      	push	{r7, lr}
 801184a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 801184c:	4b0e      	ldr	r3, [pc, #56]	; (8011888 <CalculateBackOff+0x40>)
 801184e:	4a0f      	ldr	r2, [pc, #60]	; (801188c <CalculateBackOff+0x44>)
 8011850:	589a      	ldr	r2, [r3, r2]
 8011852:	23aa      	movs	r3, #170	; 0xaa
 8011854:	005b      	lsls	r3, r3, #1
 8011856:	58d3      	ldr	r3, [r2, r3]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d111      	bne.n	8011880 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 801185c:	4b0a      	ldr	r3, [pc, #40]	; (8011888 <CalculateBackOff+0x40>)
 801185e:	4a0b      	ldr	r2, [pc, #44]	; (801188c <CalculateBackOff+0x44>)
 8011860:	589a      	ldr	r2, [r3, r2]
 8011862:	23a6      	movs	r3, #166	; 0xa6
 8011864:	005b      	lsls	r3, r3, #1
 8011866:	5ad3      	ldrh	r3, [r2, r3]
 8011868:	3b01      	subs	r3, #1
 801186a:	4907      	ldr	r1, [pc, #28]	; (8011888 <CalculateBackOff+0x40>)
 801186c:	2283      	movs	r2, #131	; 0x83
 801186e:	00d2      	lsls	r2, r2, #3
 8011870:	5889      	ldr	r1, [r1, r2]
 8011872:	4a05      	ldr	r2, [pc, #20]	; (8011888 <CalculateBackOff+0x40>)
 8011874:	4805      	ldr	r0, [pc, #20]	; (801188c <CalculateBackOff+0x44>)
 8011876:	5812      	ldr	r2, [r2, r0]
 8011878:	4359      	muls	r1, r3
 801187a:	23aa      	movs	r3, #170	; 0xaa
 801187c:	005b      	lsls	r3, r3, #1
 801187e:	50d1      	str	r1, [r2, r3]
    }
}
 8011880:	46c0      	nop			; (mov r8, r8)
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	46c0      	nop			; (mov r8, r8)
 8011888:	200005b4 	.word	0x200005b4
 801188c:	00000484 	.word	0x00000484

08011890 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	1d3b      	adds	r3, r7, #4
 8011898:	7019      	strb	r1, [r3, #0]
 801189a:	0011      	movs	r1, r2
 801189c:	1dfb      	adds	r3, r7, #7
 801189e:	1c02      	adds	r2, r0, #0
 80118a0:	701a      	strb	r2, [r3, #0]
 80118a2:	1dbb      	adds	r3, r7, #6
 80118a4:	1c0a      	adds	r2, r1, #0
 80118a6:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80118a8:	1dfb      	adds	r3, r7, #7
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d003      	beq.n	80118b8 <RemoveMacCommands+0x28>
 80118b0:	1dfb      	adds	r3, r7, #7
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d10f      	bne.n	80118d8 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80118b8:	1dbb      	adds	r3, r7, #6
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d109      	bne.n	80118d4 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 80118c0:	1d3b      	adds	r3, r7, #4
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	2220      	movs	r2, #32
 80118c6:	4013      	ands	r3, r2
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d004      	beq.n	80118d8 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80118ce:	f002 ff75 	bl	80147bc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80118d2:	e001      	b.n	80118d8 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80118d4:	f002 ff72 	bl	80147bc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80118d8:	46c0      	nop			; (mov r8, r8)
 80118da:	46bd      	mov	sp, r7
 80118dc:	b002      	add	sp, #8
 80118de:	bd80      	pop	{r7, pc}

080118e0 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80118e0:	b590      	push	{r4, r7, lr}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80118e6:	4b72      	ldr	r3, [pc, #456]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80118e8:	4a72      	ldr	r2, [pc, #456]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80118ea:	589a      	ldr	r2, [r3, r2]
 80118ec:	23b2      	movs	r3, #178	; 0xb2
 80118ee:	005b      	lsls	r3, r3, #1
 80118f0:	2100      	movs	r1, #0
 80118f2:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 80118f4:	4b6e      	ldr	r3, [pc, #440]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80118f6:	4a6f      	ldr	r2, [pc, #444]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80118f8:	589b      	ldr	r3, [r3, r2]
 80118fa:	2280      	movs	r2, #128	; 0x80
 80118fc:	2100      	movs	r1, #0
 80118fe:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8011900:	4a6b      	ldr	r2, [pc, #428]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011902:	2382      	movs	r3, #130	; 0x82
 8011904:	00db      	lsls	r3, r3, #3
 8011906:	2100      	movs	r1, #0
 8011908:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 801190a:	4b69      	ldr	r3, [pc, #420]	; (8011ab0 <ResetMacParameters+0x1d0>)
 801190c:	4a6a      	ldr	r2, [pc, #424]	; (8011ab8 <ResetMacParameters+0x1d8>)
 801190e:	2101      	movs	r1, #1
 8011910:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 8011912:	4b67      	ldr	r3, [pc, #412]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011914:	4a69      	ldr	r2, [pc, #420]	; (8011abc <ResetMacParameters+0x1dc>)
 8011916:	2101      	movs	r1, #1
 8011918:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 801191a:	4b65      	ldr	r3, [pc, #404]	; (8011ab0 <ResetMacParameters+0x1d0>)
 801191c:	4a68      	ldr	r2, [pc, #416]	; (8011ac0 <ResetMacParameters+0x1e0>)
 801191e:	2100      	movs	r1, #0
 8011920:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8011922:	4b63      	ldr	r3, [pc, #396]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011924:	4a63      	ldr	r2, [pc, #396]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011926:	589b      	ldr	r3, [r3, r2]
 8011928:	22c8      	movs	r2, #200	; 0xc8
 801192a:	2100      	movs	r1, #0
 801192c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 801192e:	4b60      	ldr	r3, [pc, #384]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011930:	4a60      	ldr	r2, [pc, #384]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011932:	589a      	ldr	r2, [r3, r2]
 8011934:	23a6      	movs	r3, #166	; 0xa6
 8011936:	005b      	lsls	r3, r3, #1
 8011938:	2101      	movs	r1, #1
 801193a:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 801193c:	4b5c      	ldr	r3, [pc, #368]	; (8011ab0 <ResetMacParameters+0x1d0>)
 801193e:	4a5d      	ldr	r2, [pc, #372]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011940:	589a      	ldr	r2, [r3, r2]
 8011942:	4b5b      	ldr	r3, [pc, #364]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011944:	495b      	ldr	r1, [pc, #364]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011946:	585b      	ldr	r3, [r3, r1]
 8011948:	2104      	movs	r1, #4
 801194a:	5651      	ldrsb	r1, [r2, r1]
 801194c:	2284      	movs	r2, #132	; 0x84
 801194e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011950:	4b57      	ldr	r3, [pc, #348]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011952:	4a58      	ldr	r2, [pc, #352]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011954:	589a      	ldr	r2, [r3, r2]
 8011956:	4b56      	ldr	r3, [pc, #344]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011958:	4956      	ldr	r1, [pc, #344]	; (8011ab4 <ResetMacParameters+0x1d4>)
 801195a:	585b      	ldr	r3, [r3, r1]
 801195c:	2105      	movs	r1, #5
 801195e:	5651      	ldrsb	r1, [r2, r1]
 8011960:	2285      	movs	r2, #133	; 0x85
 8011962:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8011964:	4b52      	ldr	r3, [pc, #328]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011966:	4a53      	ldr	r2, [pc, #332]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011968:	589a      	ldr	r2, [r3, r2]
 801196a:	4b51      	ldr	r3, [pc, #324]	; (8011ab0 <ResetMacParameters+0x1d0>)
 801196c:	4951      	ldr	r1, [pc, #324]	; (8011ab4 <ResetMacParameters+0x1d4>)
 801196e:	585b      	ldr	r3, [r3, r1]
 8011970:	2125      	movs	r1, #37	; 0x25
 8011972:	5c51      	ldrb	r1, [r2, r1]
 8011974:	22a5      	movs	r2, #165	; 0xa5
 8011976:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011978:	4b4d      	ldr	r3, [pc, #308]	; (8011ab0 <ResetMacParameters+0x1d0>)
 801197a:	4a4e      	ldr	r2, [pc, #312]	; (8011ab4 <ResetMacParameters+0x1d4>)
 801197c:	589a      	ldr	r2, [r3, r2]
 801197e:	4b4c      	ldr	r3, [pc, #304]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011980:	494c      	ldr	r1, [pc, #304]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011982:	585b      	ldr	r3, [r3, r1]
 8011984:	21a8      	movs	r1, #168	; 0xa8
 8011986:	185b      	adds	r3, r3, r1
 8011988:	3228      	adds	r2, #40	; 0x28
 801198a:	ca03      	ldmia	r2!, {r0, r1}
 801198c:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 801198e:	4b48      	ldr	r3, [pc, #288]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011990:	4a48      	ldr	r2, [pc, #288]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011992:	589a      	ldr	r2, [r3, r2]
 8011994:	4b46      	ldr	r3, [pc, #280]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011996:	4947      	ldr	r1, [pc, #284]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011998:	585b      	ldr	r3, [r3, r1]
 801199a:	21b0      	movs	r1, #176	; 0xb0
 801199c:	185b      	adds	r3, r3, r1
 801199e:	3230      	adds	r2, #48	; 0x30
 80119a0:	ca03      	ldmia	r2!, {r0, r1}
 80119a2:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 80119a4:	4b42      	ldr	r3, [pc, #264]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119a6:	4a43      	ldr	r2, [pc, #268]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119a8:	589a      	ldr	r2, [r3, r2]
 80119aa:	4b41      	ldr	r3, [pc, #260]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119ac:	4941      	ldr	r1, [pc, #260]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119ae:	585b      	ldr	r3, [r3, r1]
 80119b0:	2138      	movs	r1, #56	; 0x38
 80119b2:	5c51      	ldrb	r1, [r2, r1]
 80119b4:	22b8      	movs	r2, #184	; 0xb8
 80119b6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 80119b8:	4b3d      	ldr	r3, [pc, #244]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119ba:	4a3e      	ldr	r2, [pc, #248]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119bc:	589a      	ldr	r2, [r3, r2]
 80119be:	4b3c      	ldr	r3, [pc, #240]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119c0:	493c      	ldr	r1, [pc, #240]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119c2:	585b      	ldr	r3, [r3, r1]
 80119c4:	2139      	movs	r1, #57	; 0x39
 80119c6:	5c51      	ldrb	r1, [r2, r1]
 80119c8:	22b9      	movs	r2, #185	; 0xb9
 80119ca:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80119cc:	4b38      	ldr	r3, [pc, #224]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119ce:	4a39      	ldr	r2, [pc, #228]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119d0:	589b      	ldr	r3, [r3, r2]
 80119d2:	4a37      	ldr	r2, [pc, #220]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119d4:	4937      	ldr	r1, [pc, #220]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119d6:	5852      	ldr	r2, [r2, r1]
 80119d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119da:	21bc      	movs	r1, #188	; 0xbc
 80119dc:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80119de:	4b34      	ldr	r3, [pc, #208]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119e0:	4a34      	ldr	r2, [pc, #208]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119e2:	589b      	ldr	r3, [r3, r2]
 80119e4:	4a32      	ldr	r2, [pc, #200]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119e6:	4933      	ldr	r1, [pc, #204]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119e8:	5852      	ldr	r2, [r2, r1]
 80119ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ec:	21c0      	movs	r1, #192	; 0xc0
 80119ee:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 80119f0:	4b2f      	ldr	r3, [pc, #188]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119f2:	4a34      	ldr	r2, [pc, #208]	; (8011ac4 <ResetMacParameters+0x1e4>)
 80119f4:	2100      	movs	r1, #0
 80119f6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80119f8:	4b2d      	ldr	r3, [pc, #180]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119fa:	4a2e      	ldr	r2, [pc, #184]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119fc:	589a      	ldr	r2, [r3, r2]
 80119fe:	234c      	movs	r3, #76	; 0x4c
 8011a00:	33ff      	adds	r3, #255	; 0xff
 8011a02:	2100      	movs	r1, #0
 8011a04:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011a06:	003b      	movs	r3, r7
 8011a08:	2201      	movs	r2, #1
 8011a0a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8011a0c:	003b      	movs	r3, r7
 8011a0e:	2200      	movs	r2, #0
 8011a10:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011a12:	4b27      	ldr	r3, [pc, #156]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a14:	4a27      	ldr	r2, [pc, #156]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011a16:	589b      	ldr	r3, [r3, r2]
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	003a      	movs	r2, r7
 8011a1c:	0011      	movs	r1, r2
 8011a1e:	0018      	movs	r0, r3
 8011a20:	f004 fe05 	bl	801662e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011a24:	4b22      	ldr	r3, [pc, #136]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a26:	4a28      	ldr	r2, [pc, #160]	; (8011ac8 <ResetMacParameters+0x1e8>)
 8011a28:	2100      	movs	r1, #0
 8011a2a:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011a2c:	4b20      	ldr	r3, [pc, #128]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a2e:	4a26      	ldr	r2, [pc, #152]	; (8011ac8 <ResetMacParameters+0x1e8>)
 8011a30:	5c99      	ldrb	r1, [r3, r2]
 8011a32:	4a1f      	ldr	r2, [pc, #124]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a34:	23f3      	movs	r3, #243	; 0xf3
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8011a3a:	4b1d      	ldr	r3, [pc, #116]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a3c:	4a1d      	ldr	r2, [pc, #116]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011a3e:	589b      	ldr	r3, [r3, r2]
 8011a40:	22a8      	movs	r2, #168	; 0xa8
 8011a42:	5899      	ldr	r1, [r3, r2]
 8011a44:	4a1a      	ldr	r2, [pc, #104]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a46:	23f4      	movs	r3, #244	; 0xf4
 8011a48:	009b      	lsls	r3, r3, #2
 8011a4a:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011a4c:	4b18      	ldr	r3, [pc, #96]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a4e:	4a19      	ldr	r2, [pc, #100]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011a50:	589b      	ldr	r3, [r3, r2]
 8011a52:	22b9      	movs	r2, #185	; 0xb9
 8011a54:	5c99      	ldrb	r1, [r3, r2]
 8011a56:	4a16      	ldr	r2, [pc, #88]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a58:	23f7      	movs	r3, #247	; 0xf7
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011a5e:	4b14      	ldr	r3, [pc, #80]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a60:	4a14      	ldr	r2, [pc, #80]	; (8011ab4 <ResetMacParameters+0x1d4>)
 8011a62:	589b      	ldr	r3, [r3, r2]
 8011a64:	22ca      	movs	r2, #202	; 0xca
 8011a66:	5c99      	ldrb	r1, [r3, r2]
 8011a68:	4b11      	ldr	r3, [pc, #68]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a6a:	4a18      	ldr	r2, [pc, #96]	; (8011acc <ResetMacParameters+0x1ec>)
 8011a6c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011a6e:	4b10      	ldr	r3, [pc, #64]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a70:	4a17      	ldr	r2, [pc, #92]	; (8011ad0 <ResetMacParameters+0x1f0>)
 8011a72:	2100      	movs	r1, #0
 8011a74:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011a76:	4b0e      	ldr	r3, [pc, #56]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a78:	4a16      	ldr	r2, [pc, #88]	; (8011ad4 <ResetMacParameters+0x1f4>)
 8011a7a:	2101      	movs	r1, #1
 8011a7c:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011a7e:	480c      	ldr	r0, [pc, #48]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a80:	23f8      	movs	r3, #248	; 0xf8
 8011a82:	009b      	lsls	r3, r3, #2
 8011a84:	490a      	ldr	r1, [pc, #40]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a86:	22f3      	movs	r2, #243	; 0xf3
 8011a88:	0092      	lsls	r2, r2, #2
 8011a8a:	18c3      	adds	r3, r0, r3
 8011a8c:	188a      	adds	r2, r1, r2
 8011a8e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8011a90:	c313      	stmia	r3!, {r0, r1, r4}
 8011a92:	ca03      	ldmia	r2!, {r0, r1}
 8011a94:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011a96:	4b06      	ldr	r3, [pc, #24]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011a98:	4a0f      	ldr	r2, [pc, #60]	; (8011ad8 <ResetMacParameters+0x1f8>)
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011a9e:	4b04      	ldr	r3, [pc, #16]	; (8011ab0 <ResetMacParameters+0x1d0>)
 8011aa0:	4a0e      	ldr	r2, [pc, #56]	; (8011adc <ResetMacParameters+0x1fc>)
 8011aa2:	2102      	movs	r1, #2
 8011aa4:	5499      	strb	r1, [r3, r2]

}
 8011aa6:	46c0      	nop			; (mov r8, r8)
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	b003      	add	sp, #12
 8011aac:	bd90      	pop	{r4, r7, pc}
 8011aae:	46c0      	nop			; (mov r8, r8)
 8011ab0:	200005b4 	.word	0x200005b4
 8011ab4:	00000484 	.word	0x00000484
 8011ab8:	00000411 	.word	0x00000411
 8011abc:	00000412 	.word	0x00000412
 8011ac0:	00000413 	.word	0x00000413
 8011ac4:	00000414 	.word	0x00000414
 8011ac8:	00000415 	.word	0x00000415
 8011acc:	000003dd 	.word	0x000003dd
 8011ad0:	000003de 	.word	0x000003de
 8011ad4:	000003df 	.word	0x000003df
 8011ad8:	000003f2 	.word	0x000003f2
 8011adc:	000003f3 	.word	0x000003f3

08011ae0 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	0018      	movs	r0, r3
 8011aee:	f00a fda7 	bl	801c640 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011af2:	4b10      	ldr	r3, [pc, #64]	; (8011b34 <RxWindowSetup+0x54>)
 8011af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011af6:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011af8:	4b0f      	ldr	r3, [pc, #60]	; (8011b38 <RxWindowSetup+0x58>)
 8011afa:	4a10      	ldr	r2, [pc, #64]	; (8011b3c <RxWindowSetup+0x5c>)
 8011afc:	589b      	ldr	r3, [r3, r2]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	4a0f      	ldr	r2, [pc, #60]	; (8011b40 <RxWindowSetup+0x60>)
 8011b02:	6839      	ldr	r1, [r7, #0]
 8011b04:	0018      	movs	r0, r3
 8011b06:	f004 fe29 	bl	801675c <RegionRxConfig>
 8011b0a:	1e03      	subs	r3, r0, #0
 8011b0c:	d00e      	beq.n	8011b2c <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8011b0e:	4b09      	ldr	r3, [pc, #36]	; (8011b34 <RxWindowSetup+0x54>)
 8011b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b12:	4a09      	ldr	r2, [pc, #36]	; (8011b38 <RxWindowSetup+0x58>)
 8011b14:	4909      	ldr	r1, [pc, #36]	; (8011b3c <RxWindowSetup+0x5c>)
 8011b16:	5852      	ldr	r2, [r2, r1]
 8011b18:	2190      	movs	r1, #144	; 0x90
 8011b1a:	5852      	ldr	r2, [r2, r1]
 8011b1c:	0010      	movs	r0, r2
 8011b1e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	7cd9      	ldrb	r1, [r3, #19]
 8011b24:	4a04      	ldr	r2, [pc, #16]	; (8011b38 <RxWindowSetup+0x58>)
 8011b26:	2390      	movs	r3, #144	; 0x90
 8011b28:	00db      	lsls	r3, r3, #3
 8011b2a:	54d1      	strb	r1, [r2, r3]
    }
}
 8011b2c:	46c0      	nop			; (mov r8, r8)
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	b002      	add	sp, #8
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	0801f358 	.word	0x0801f358
 8011b38:	200005b4 	.word	0x200005b4
 8011b3c:	00000484 	.word	0x00000484
 8011b40:	200009d4 	.word	0x200009d4

08011b44 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011b44:	b590      	push	{r4, r7, lr}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b4a:	4b1d      	ldr	r3, [pc, #116]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011b4c:	4a1d      	ldr	r2, [pc, #116]	; (8011bc4 <OpenContinuousRxCWindow+0x80>)
 8011b4e:	589b      	ldr	r3, [r3, r2]
 8011b50:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8011b52:	4b1b      	ldr	r3, [pc, #108]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011b54:	4a1b      	ldr	r2, [pc, #108]	; (8011bc4 <OpenContinuousRxCWindow+0x80>)
 8011b56:	589b      	ldr	r3, [r3, r2]
 8011b58:	22b4      	movs	r2, #180	; 0xb4
 8011b5a:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b5c:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011b5e:	4b18      	ldr	r3, [pc, #96]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011b60:	4a18      	ldr	r2, [pc, #96]	; (8011bc4 <OpenContinuousRxCWindow+0x80>)
 8011b62:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b64:	228c      	movs	r2, #140	; 0x8c
 8011b66:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011b68:	4b15      	ldr	r3, [pc, #84]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011b6a:	4c16      	ldr	r4, [pc, #88]	; (8011bc4 <OpenContinuousRxCWindow+0x80>)
 8011b6c:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b6e:	2488      	movs	r4, #136	; 0x88
 8011b70:	591c      	ldr	r4, [r3, r4]
 8011b72:	4b15      	ldr	r3, [pc, #84]	; (8011bc8 <OpenContinuousRxCWindow+0x84>)
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	0023      	movs	r3, r4
 8011b78:	f004 fdcc 	bl	8016714 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011b7c:	4b10      	ldr	r3, [pc, #64]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011b7e:	4a13      	ldr	r2, [pc, #76]	; (8011bcc <OpenContinuousRxCWindow+0x88>)
 8011b80:	2102      	movs	r1, #2
 8011b82:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011b84:	4b0e      	ldr	r3, [pc, #56]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011b86:	4a12      	ldr	r2, [pc, #72]	; (8011bd0 <OpenContinuousRxCWindow+0x8c>)
 8011b88:	2101      	movs	r1, #1
 8011b8a:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011b8c:	4b0c      	ldr	r3, [pc, #48]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011b8e:	4a0d      	ldr	r2, [pc, #52]	; (8011bc4 <OpenContinuousRxCWindow+0x80>)
 8011b90:	589b      	ldr	r3, [r3, r2]
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	4a0f      	ldr	r2, [pc, #60]	; (8011bd4 <OpenContinuousRxCWindow+0x90>)
 8011b96:	490c      	ldr	r1, [pc, #48]	; (8011bc8 <OpenContinuousRxCWindow+0x84>)
 8011b98:	0018      	movs	r0, r3
 8011b9a:	f004 fddf 	bl	801675c <RegionRxConfig>
 8011b9e:	1e03      	subs	r3, r0, #0
 8011ba0:	d00a      	beq.n	8011bb8 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 8011ba2:	4b0d      	ldr	r3, [pc, #52]	; (8011bd8 <OpenContinuousRxCWindow+0x94>)
 8011ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011baa:	4b05      	ldr	r3, [pc, #20]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011bac:	4a07      	ldr	r2, [pc, #28]	; (8011bcc <OpenContinuousRxCWindow+0x88>)
 8011bae:	5c99      	ldrb	r1, [r3, r2]
 8011bb0:	4a03      	ldr	r2, [pc, #12]	; (8011bc0 <OpenContinuousRxCWindow+0x7c>)
 8011bb2:	2390      	movs	r3, #144	; 0x90
 8011bb4:	00db      	lsls	r3, r3, #3
 8011bb6:	54d1      	strb	r1, [r2, r3]
    }
}
 8011bb8:	46c0      	nop			; (mov r8, r8)
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	b001      	add	sp, #4
 8011bbe:	bd90      	pop	{r4, r7, pc}
 8011bc0:	200005b4 	.word	0x200005b4
 8011bc4:	00000484 	.word	0x00000484
 8011bc8:	20000994 	.word	0x20000994
 8011bcc:	000003f3 	.word	0x000003f3
 8011bd0:	000003f2 	.word	0x000003f2
 8011bd4:	200009d4 	.word	0x200009d4
 8011bd8:	0801f358 	.word	0x0801f358

08011bdc <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011bdc:	b590      	push	{r4, r7, lr}
 8011bde:	b089      	sub	sp, #36	; 0x24
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	603b      	str	r3, [r7, #0]
 8011be8:	1dfb      	adds	r3, r7, #7
 8011bea:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8011bec:	4b9a      	ldr	r3, [pc, #616]	; (8011e58 <PrepareFrame+0x27c>)
 8011bee:	2200      	movs	r2, #0
 8011bf0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011bf2:	4b99      	ldr	r3, [pc, #612]	; (8011e58 <PrepareFrame+0x27c>)
 8011bf4:	4a99      	ldr	r2, [pc, #612]	; (8011e5c <PrepareFrame+0x280>)
 8011bf6:	2100      	movs	r1, #0
 8011bf8:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011c02:	231f      	movs	r3, #31
 8011c04:	18fb      	adds	r3, r7, r3
 8011c06:	2200      	movs	r2, #0
 8011c08:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d103      	bne.n	8011c18 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8011c10:	2330      	movs	r3, #48	; 0x30
 8011c12:	18fb      	adds	r3, r7, r3
 8011c14:	2200      	movs	r2, #0
 8011c16:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011c18:	2430      	movs	r4, #48	; 0x30
 8011c1a:	193b      	adds	r3, r7, r4
 8011c1c:	881a      	ldrh	r2, [r3, #0]
 8011c1e:	6839      	ldr	r1, [r7, #0]
 8011c20:	4b8f      	ldr	r3, [pc, #572]	; (8011e60 <PrepareFrame+0x284>)
 8011c22:	0018      	movs	r0, r3
 8011c24:	f007 f956 	bl	8018ed4 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011c28:	193b      	adds	r3, r7, r4
 8011c2a:	881b      	ldrh	r3, [r3, #0]
 8011c2c:	b2d9      	uxtb	r1, r3
 8011c2e:	4b8a      	ldr	r3, [pc, #552]	; (8011e58 <PrepareFrame+0x27c>)
 8011c30:	4a8c      	ldr	r2, [pc, #560]	; (8011e64 <PrepareFrame+0x288>)
 8011c32:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	781a      	ldrb	r2, [r3, #0]
 8011c38:	4b87      	ldr	r3, [pc, #540]	; (8011e58 <PrepareFrame+0x27c>)
 8011c3a:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	061b      	lsls	r3, r3, #24
 8011c42:	0f5b      	lsrs	r3, r3, #29
 8011c44:	b2db      	uxtb	r3, r3
 8011c46:	2b07      	cmp	r3, #7
 8011c48:	d100      	bne.n	8011c4c <PrepareFrame+0x70>
 8011c4a:	e0e0      	b.n	8011e0e <PrepareFrame+0x232>
 8011c4c:	dd00      	ble.n	8011c50 <PrepareFrame+0x74>
 8011c4e:	e0f8      	b.n	8011e42 <PrepareFrame+0x266>
 8011c50:	2b02      	cmp	r3, #2
 8011c52:	d006      	beq.n	8011c62 <PrepareFrame+0x86>
 8011c54:	2b04      	cmp	r3, #4
 8011c56:	d000      	beq.n	8011c5a <PrepareFrame+0x7e>
 8011c58:	e0f3      	b.n	8011e42 <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011c5a:	4b7f      	ldr	r3, [pc, #508]	; (8011e58 <PrepareFrame+0x27c>)
 8011c5c:	4a7f      	ldr	r2, [pc, #508]	; (8011e5c <PrepareFrame+0x280>)
 8011c5e:	2101      	movs	r1, #1
 8011c60:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011c62:	4a7d      	ldr	r2, [pc, #500]	; (8011e58 <PrepareFrame+0x27c>)
 8011c64:	2382      	movs	r3, #130	; 0x82
 8011c66:	005b      	lsls	r3, r3, #1
 8011c68:	2104      	movs	r1, #4
 8011c6a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011c6c:	4a7a      	ldr	r2, [pc, #488]	; (8011e58 <PrepareFrame+0x27c>)
 8011c6e:	2384      	movs	r3, #132	; 0x84
 8011c70:	005b      	lsls	r3, r3, #1
 8011c72:	497d      	ldr	r1, [pc, #500]	; (8011e68 <PrepareFrame+0x28c>)
 8011c74:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011c76:	4a78      	ldr	r2, [pc, #480]	; (8011e58 <PrepareFrame+0x27c>)
 8011c78:	2386      	movs	r3, #134	; 0x86
 8011c7a:	005b      	lsls	r3, r3, #1
 8011c7c:	21ff      	movs	r1, #255	; 0xff
 8011c7e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	7819      	ldrb	r1, [r3, #0]
 8011c84:	4a74      	ldr	r2, [pc, #464]	; (8011e58 <PrepareFrame+0x27c>)
 8011c86:	230e      	movs	r3, #14
 8011c88:	33ff      	adds	r3, #255	; 0xff
 8011c8a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011c8c:	4a72      	ldr	r2, [pc, #456]	; (8011e58 <PrepareFrame+0x27c>)
 8011c8e:	1df9      	adds	r1, r7, #7
 8011c90:	2394      	movs	r3, #148	; 0x94
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	7809      	ldrb	r1, [r1, #0]
 8011c96:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8011c98:	4b6f      	ldr	r3, [pc, #444]	; (8011e58 <PrepareFrame+0x27c>)
 8011c9a:	4a74      	ldr	r2, [pc, #464]	; (8011e6c <PrepareFrame+0x290>)
 8011c9c:	589b      	ldr	r3, [r3, r2]
 8011c9e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011ca0:	4a6d      	ldr	r2, [pc, #436]	; (8011e58 <PrepareFrame+0x27c>)
 8011ca2:	2388      	movs	r3, #136	; 0x88
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	7819      	ldrb	r1, [r3, #0]
 8011cac:	4a6a      	ldr	r2, [pc, #424]	; (8011e58 <PrepareFrame+0x27c>)
 8011cae:	238a      	movs	r3, #138	; 0x8a
 8011cb0:	005b      	lsls	r3, r3, #1
 8011cb2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011cb4:	4b68      	ldr	r3, [pc, #416]	; (8011e58 <PrepareFrame+0x27c>)
 8011cb6:	4a6b      	ldr	r2, [pc, #428]	; (8011e64 <PrepareFrame+0x288>)
 8011cb8:	5c99      	ldrb	r1, [r3, r2]
 8011cba:	4a67      	ldr	r2, [pc, #412]	; (8011e58 <PrepareFrame+0x27c>)
 8011cbc:	2398      	movs	r3, #152	; 0x98
 8011cbe:	005b      	lsls	r3, r3, #1
 8011cc0:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011cc2:	4a65      	ldr	r2, [pc, #404]	; (8011e58 <PrepareFrame+0x27c>)
 8011cc4:	2396      	movs	r3, #150	; 0x96
 8011cc6:	005b      	lsls	r3, r3, #1
 8011cc8:	4965      	ldr	r1, [pc, #404]	; (8011e60 <PrepareFrame+0x284>)
 8011cca:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011ccc:	2318      	movs	r3, #24
 8011cce:	18fb      	adds	r3, r7, r3
 8011cd0:	0018      	movs	r0, r3
 8011cd2:	f003 fce5 	bl	80156a0 <LoRaMacCryptoGetFCntUp>
 8011cd6:	1e03      	subs	r3, r0, #0
 8011cd8:	d001      	beq.n	8011cde <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011cda:	2312      	movs	r3, #18
 8011cdc:	e0b7      	b.n	8011e4e <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	b299      	uxth	r1, r3
 8011ce2:	4a5d      	ldr	r2, [pc, #372]	; (8011e58 <PrepareFrame+0x27c>)
 8011ce4:	238b      	movs	r3, #139	; 0x8b
 8011ce6:	005b      	lsls	r3, r3, #1
 8011ce8:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8011cea:	4b5b      	ldr	r3, [pc, #364]	; (8011e58 <PrepareFrame+0x27c>)
 8011cec:	4a60      	ldr	r2, [pc, #384]	; (8011e70 <PrepareFrame+0x294>)
 8011cee:	2100      	movs	r1, #0
 8011cf0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 8011cf2:	4a59      	ldr	r2, [pc, #356]	; (8011e58 <PrepareFrame+0x27c>)
 8011cf4:	2388      	movs	r3, #136	; 0x88
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011cfc:	69b9      	ldr	r1, [r7, #24]
 8011cfe:	4a56      	ldr	r2, [pc, #344]	; (8011e58 <PrepareFrame+0x27c>)
 8011d00:	2389      	movs	r3, #137	; 0x89
 8011d02:	00db      	lsls	r3, r3, #3
 8011d04:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011d06:	2314      	movs	r3, #20
 8011d08:	18fb      	adds	r3, r7, r3
 8011d0a:	0018      	movs	r0, r3
 8011d0c:	f002 fd7a 	bl	8014804 <LoRaMacCommandsGetSizeSerializedCmds>
 8011d10:	1e03      	subs	r3, r0, #0
 8011d12:	d001      	beq.n	8011d18 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d14:	2313      	movs	r3, #19
 8011d16:	e09a      	b.n	8011e4e <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d100      	bne.n	8011d20 <PrepareFrame+0x144>
 8011d1e:	e092      	b.n	8011e46 <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8011d20:	4b4d      	ldr	r3, [pc, #308]	; (8011e58 <PrepareFrame+0x27c>)
 8011d22:	4a52      	ldr	r2, [pc, #328]	; (8011e6c <PrepareFrame+0x290>)
 8011d24:	589b      	ldr	r3, [r3, r2]
 8011d26:	2285      	movs	r2, #133	; 0x85
 8011d28:	569b      	ldrsb	r3, [r3, r2]
 8011d2a:	221f      	movs	r2, #31
 8011d2c:	18bc      	adds	r4, r7, r2
 8011d2e:	0018      	movs	r0, r3
 8011d30:	f7fe fb50 	bl	80103d4 <GetMaxAppPayloadWithoutFOptsLength>
 8011d34:	0003      	movs	r3, r0
 8011d36:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011d38:	4b47      	ldr	r3, [pc, #284]	; (8011e58 <PrepareFrame+0x27c>)
 8011d3a:	4a4a      	ldr	r2, [pc, #296]	; (8011e64 <PrepareFrame+0x288>)
 8011d3c:	5c9b      	ldrb	r3, [r3, r2]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d024      	beq.n	8011d8c <PrepareFrame+0x1b0>
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	2b0f      	cmp	r3, #15
 8011d46:	d821      	bhi.n	8011d8c <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011d48:	4a4a      	ldr	r2, [pc, #296]	; (8011e74 <PrepareFrame+0x298>)
 8011d4a:	2314      	movs	r3, #20
 8011d4c:	18fb      	adds	r3, r7, r3
 8011d4e:	0019      	movs	r1, r3
 8011d50:	200f      	movs	r0, #15
 8011d52:	f002 fd6d 	bl	8014830 <LoRaMacCommandsSerializeCmds>
 8011d56:	1e03      	subs	r3, r0, #0
 8011d58:	d001      	beq.n	8011d5e <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d5a:	2313      	movs	r3, #19
 8011d5c:	e077      	b.n	8011e4e <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	1c1a      	adds	r2, r3, #0
 8011d62:	230f      	movs	r3, #15
 8011d64:	4013      	ands	r3, r2
 8011d66:	b2da      	uxtb	r2, r3
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	210f      	movs	r1, #15
 8011d6c:	400a      	ands	r2, r1
 8011d6e:	0010      	movs	r0, r2
 8011d70:	781a      	ldrb	r2, [r3, #0]
 8011d72:	210f      	movs	r1, #15
 8011d74:	438a      	bics	r2, r1
 8011d76:	1c11      	adds	r1, r2, #0
 8011d78:	1c02      	adds	r2, r0, #0
 8011d7a:	430a      	orrs	r2, r1
 8011d7c:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	7819      	ldrb	r1, [r3, #0]
 8011d82:	4a35      	ldr	r2, [pc, #212]	; (8011e58 <PrepareFrame+0x27c>)
 8011d84:	238a      	movs	r3, #138	; 0x8a
 8011d86:	005b      	lsls	r3, r3, #1
 8011d88:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011d8a:	e05c      	b.n	8011e46 <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011d8c:	4b32      	ldr	r3, [pc, #200]	; (8011e58 <PrepareFrame+0x27c>)
 8011d8e:	4a35      	ldr	r2, [pc, #212]	; (8011e64 <PrepareFrame+0x288>)
 8011d90:	5c9b      	ldrb	r3, [r3, r2]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d015      	beq.n	8011dc2 <PrepareFrame+0x1e6>
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	2b0f      	cmp	r3, #15
 8011d9a:	d912      	bls.n	8011dc2 <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011d9c:	231f      	movs	r3, #31
 8011d9e:	18fb      	adds	r3, r7, r3
 8011da0:	7818      	ldrb	r0, [r3, #0]
 8011da2:	4b2d      	ldr	r3, [pc, #180]	; (8011e58 <PrepareFrame+0x27c>)
 8011da4:	4a31      	ldr	r2, [pc, #196]	; (8011e6c <PrepareFrame+0x290>)
 8011da6:	589b      	ldr	r3, [r3, r2]
 8011da8:	33cb      	adds	r3, #203	; 0xcb
 8011daa:	001a      	movs	r2, r3
 8011dac:	2314      	movs	r3, #20
 8011dae:	18fb      	adds	r3, r7, r3
 8011db0:	0019      	movs	r1, r3
 8011db2:	f002 fd3d 	bl	8014830 <LoRaMacCommandsSerializeCmds>
 8011db6:	1e03      	subs	r3, r0, #0
 8011db8:	d001      	beq.n	8011dbe <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011dba:	2313      	movs	r3, #19
 8011dbc:	e047      	b.n	8011e4e <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011dbe:	230a      	movs	r3, #10
 8011dc0:	e045      	b.n	8011e4e <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011dc2:	231f      	movs	r3, #31
 8011dc4:	18fb      	adds	r3, r7, r3
 8011dc6:	7818      	ldrb	r0, [r3, #0]
 8011dc8:	4b23      	ldr	r3, [pc, #140]	; (8011e58 <PrepareFrame+0x27c>)
 8011dca:	4a28      	ldr	r2, [pc, #160]	; (8011e6c <PrepareFrame+0x290>)
 8011dcc:	589b      	ldr	r3, [r3, r2]
 8011dce:	33cb      	adds	r3, #203	; 0xcb
 8011dd0:	001a      	movs	r2, r3
 8011dd2:	2314      	movs	r3, #20
 8011dd4:	18fb      	adds	r3, r7, r3
 8011dd6:	0019      	movs	r1, r3
 8011dd8:	f002 fd2a 	bl	8014830 <LoRaMacCommandsSerializeCmds>
 8011ddc:	1e03      	subs	r3, r0, #0
 8011dde:	d001      	beq.n	8011de4 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011de0:	2313      	movs	r3, #19
 8011de2:	e034      	b.n	8011e4e <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011de4:	4a1c      	ldr	r2, [pc, #112]	; (8011e58 <PrepareFrame+0x27c>)
 8011de6:	2394      	movs	r3, #148	; 0x94
 8011de8:	005b      	lsls	r3, r3, #1
 8011dea:	2100      	movs	r1, #0
 8011dec:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8011dee:	4b1a      	ldr	r3, [pc, #104]	; (8011e58 <PrepareFrame+0x27c>)
 8011df0:	4a1e      	ldr	r2, [pc, #120]	; (8011e6c <PrepareFrame+0x290>)
 8011df2:	589b      	ldr	r3, [r3, r2]
 8011df4:	33cb      	adds	r3, #203	; 0xcb
 8011df6:	0019      	movs	r1, r3
 8011df8:	4a17      	ldr	r2, [pc, #92]	; (8011e58 <PrepareFrame+0x27c>)
 8011dfa:	2396      	movs	r3, #150	; 0x96
 8011dfc:	005b      	lsls	r3, r3, #1
 8011dfe:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	b2d9      	uxtb	r1, r3
 8011e04:	4a14      	ldr	r2, [pc, #80]	; (8011e58 <PrepareFrame+0x27c>)
 8011e06:	2398      	movs	r3, #152	; 0x98
 8011e08:	005b      	lsls	r3, r3, #1
 8011e0a:	54d1      	strb	r1, [r2, r3]
            break;
 8011e0c:	e01b      	b.n	8011e46 <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d01a      	beq.n	8011e4a <PrepareFrame+0x26e>
 8011e14:	4b10      	ldr	r3, [pc, #64]	; (8011e58 <PrepareFrame+0x27c>)
 8011e16:	4a13      	ldr	r2, [pc, #76]	; (8011e64 <PrepareFrame+0x288>)
 8011e18:	5c9b      	ldrb	r3, [r3, r2]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d015      	beq.n	8011e4a <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011e1e:	4816      	ldr	r0, [pc, #88]	; (8011e78 <PrepareFrame+0x29c>)
 8011e20:	4b0d      	ldr	r3, [pc, #52]	; (8011e58 <PrepareFrame+0x27c>)
 8011e22:	4a10      	ldr	r2, [pc, #64]	; (8011e64 <PrepareFrame+0x288>)
 8011e24:	5c9b      	ldrb	r3, [r3, r2]
 8011e26:	b29a      	uxth	r2, r3
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	0019      	movs	r1, r3
 8011e2c:	f007 f852 	bl	8018ed4 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011e30:	4b09      	ldr	r3, [pc, #36]	; (8011e58 <PrepareFrame+0x27c>)
 8011e32:	4a0c      	ldr	r2, [pc, #48]	; (8011e64 <PrepareFrame+0x288>)
 8011e34:	5c9b      	ldrb	r3, [r3, r2]
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	3301      	adds	r3, #1
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	4b06      	ldr	r3, [pc, #24]	; (8011e58 <PrepareFrame+0x27c>)
 8011e3e:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011e40:	e003      	b.n	8011e4a <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e42:	2302      	movs	r3, #2
 8011e44:	e003      	b.n	8011e4e <PrepareFrame+0x272>
            break;
 8011e46:	46c0      	nop			; (mov r8, r8)
 8011e48:	e000      	b.n	8011e4c <PrepareFrame+0x270>
            break;
 8011e4a:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 8011e4c:	2300      	movs	r3, #0
}
 8011e4e:	0018      	movs	r0, r3
 8011e50:	46bd      	mov	sp, r7
 8011e52:	b009      	add	sp, #36	; 0x24
 8011e54:	bd90      	pop	{r4, r7, pc}
 8011e56:	46c0      	nop			; (mov r8, r8)
 8011e58:	200005b4 	.word	0x200005b4
 8011e5c:	00000414 	.word	0x00000414
 8011e60:	200006ec 	.word	0x200006ec
 8011e64:	00000237 	.word	0x00000237
 8011e68:	200005b6 	.word	0x200005b6
 8011e6c:	00000484 	.word	0x00000484
 8011e70:	00000441 	.word	0x00000441
 8011e74:	200006cc 	.word	0x200006cc
 8011e78:	200005b7 	.word	0x200005b7

08011e7c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011e7c:	b5b0      	push	{r4, r5, r7, lr}
 8011e7e:	b08a      	sub	sp, #40	; 0x28
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	0002      	movs	r2, r0
 8011e84:	1dfb      	adds	r3, r7, #7
 8011e86:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e88:	2327      	movs	r3, #39	; 0x27
 8011e8a:	18fb      	adds	r3, r7, r3
 8011e8c:	2203      	movs	r2, #3
 8011e8e:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011e90:	240f      	movs	r4, #15
 8011e92:	193b      	adds	r3, r7, r4
 8011e94:	2200      	movs	r2, #0
 8011e96:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8011e98:	2110      	movs	r1, #16
 8011e9a:	187b      	adds	r3, r7, r1
 8011e9c:	1dfa      	adds	r2, r7, #7
 8011e9e:	7812      	ldrb	r2, [r2, #0]
 8011ea0:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011ea2:	4b57      	ldr	r3, [pc, #348]	; (8012000 <SendFrameOnChannel+0x184>)
 8011ea4:	4a57      	ldr	r2, [pc, #348]	; (8012004 <SendFrameOnChannel+0x188>)
 8011ea6:	589b      	ldr	r3, [r3, r2]
 8011ea8:	2285      	movs	r2, #133	; 0x85
 8011eaa:	569a      	ldrsb	r2, [r3, r2]
 8011eac:	187b      	adds	r3, r7, r1
 8011eae:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011eb0:	4b53      	ldr	r3, [pc, #332]	; (8012000 <SendFrameOnChannel+0x184>)
 8011eb2:	4a54      	ldr	r2, [pc, #336]	; (8012004 <SendFrameOnChannel+0x188>)
 8011eb4:	589b      	ldr	r3, [r3, r2]
 8011eb6:	2284      	movs	r2, #132	; 0x84
 8011eb8:	569a      	ldrsb	r2, [r3, r2]
 8011eba:	187b      	adds	r3, r7, r1
 8011ebc:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8011ebe:	4b50      	ldr	r3, [pc, #320]	; (8012000 <SendFrameOnChannel+0x184>)
 8011ec0:	4a50      	ldr	r2, [pc, #320]	; (8012004 <SendFrameOnChannel+0x188>)
 8011ec2:	589b      	ldr	r3, [r3, r2]
 8011ec4:	22bc      	movs	r2, #188	; 0xbc
 8011ec6:	589a      	ldr	r2, [r3, r2]
 8011ec8:	187b      	adds	r3, r7, r1
 8011eca:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8011ecc:	4b4c      	ldr	r3, [pc, #304]	; (8012000 <SendFrameOnChannel+0x184>)
 8011ece:	4a4d      	ldr	r2, [pc, #308]	; (8012004 <SendFrameOnChannel+0x188>)
 8011ed0:	589b      	ldr	r3, [r3, r2]
 8011ed2:	22c0      	movs	r2, #192	; 0xc0
 8011ed4:	589a      	ldr	r2, [r3, r2]
 8011ed6:	187b      	adds	r3, r7, r1
 8011ed8:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011eda:	4b49      	ldr	r3, [pc, #292]	; (8012000 <SendFrameOnChannel+0x184>)
 8011edc:	881a      	ldrh	r2, [r3, #0]
 8011ede:	187b      	adds	r3, r7, r1
 8011ee0:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011ee2:	4b47      	ldr	r3, [pc, #284]	; (8012000 <SendFrameOnChannel+0x184>)
 8011ee4:	4a47      	ldr	r2, [pc, #284]	; (8012004 <SendFrameOnChannel+0x188>)
 8011ee6:	589b      	ldr	r3, [r3, r2]
 8011ee8:	7818      	ldrb	r0, [r3, #0]
 8011eea:	4b47      	ldr	r3, [pc, #284]	; (8012008 <SendFrameOnChannel+0x18c>)
 8011eec:	193a      	adds	r2, r7, r4
 8011eee:	1879      	adds	r1, r7, r1
 8011ef0:	f004 fc4e 	bl	8016790 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011ef4:	4b42      	ldr	r3, [pc, #264]	; (8012000 <SendFrameOnChannel+0x184>)
 8011ef6:	4a45      	ldr	r2, [pc, #276]	; (801200c <SendFrameOnChannel+0x190>)
 8011ef8:	2101      	movs	r1, #1
 8011efa:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011efc:	4b40      	ldr	r3, [pc, #256]	; (8012000 <SendFrameOnChannel+0x184>)
 8011efe:	4a41      	ldr	r2, [pc, #260]	; (8012004 <SendFrameOnChannel+0x188>)
 8011f00:	589b      	ldr	r3, [r3, r2]
 8011f02:	2285      	movs	r2, #133	; 0x85
 8011f04:	569b      	ldrsb	r3, [r3, r2]
 8011f06:	b2d9      	uxtb	r1, r3
 8011f08:	4b3d      	ldr	r3, [pc, #244]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f0a:	4a41      	ldr	r2, [pc, #260]	; (8012010 <SendFrameOnChannel+0x194>)
 8011f0c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8011f0e:	193b      	adds	r3, r7, r4
 8011f10:	2100      	movs	r1, #0
 8011f12:	5659      	ldrsb	r1, [r3, r1]
 8011f14:	4b3a      	ldr	r3, [pc, #232]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f16:	4a3f      	ldr	r2, [pc, #252]	; (8012014 <SendFrameOnChannel+0x198>)
 8011f18:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 8011f1a:	1dfb      	adds	r3, r7, #7
 8011f1c:	781a      	ldrb	r2, [r3, #0]
 8011f1e:	4b38      	ldr	r3, [pc, #224]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f20:	493d      	ldr	r1, [pc, #244]	; (8012018 <SendFrameOnChannel+0x19c>)
 8011f22:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011f24:	4a36      	ldr	r2, [pc, #216]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f26:	2383      	movs	r3, #131	; 0x83
 8011f28:	00db      	lsls	r3, r3, #3
 8011f2a:	58d2      	ldr	r2, [r2, r3]
 8011f2c:	4b34      	ldr	r3, [pc, #208]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f2e:	493b      	ldr	r1, [pc, #236]	; (801201c <SendFrameOnChannel+0x1a0>)
 8011f30:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011f32:	4a33      	ldr	r2, [pc, #204]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f34:	2383      	movs	r3, #131	; 0x83
 8011f36:	00db      	lsls	r3, r3, #3
 8011f38:	58d2      	ldr	r2, [r2, r3]
 8011f3a:	4b31      	ldr	r3, [pc, #196]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f3c:	4938      	ldr	r1, [pc, #224]	; (8012020 <SendFrameOnChannel+0x1a4>)
 8011f3e:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011f40:	f002 f9b0 	bl	80142a4 <LoRaMacClassBIsBeaconModeActive>
 8011f44:	1e03      	subs	r3, r0, #0
 8011f46:	d00d      	beq.n	8011f64 <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011f48:	4a2d      	ldr	r2, [pc, #180]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f4a:	2383      	movs	r3, #131	; 0x83
 8011f4c:	00db      	lsls	r3, r3, #3
 8011f4e:	58d3      	ldr	r3, [r2, r3]
 8011f50:	0018      	movs	r0, r3
 8011f52:	f002 fa0b 	bl	801436c <LoRaMacClassBIsUplinkCollision>
 8011f56:	0003      	movs	r3, r0
 8011f58:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 8011f5a:	6a3b      	ldr	r3, [r7, #32]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011f60:	2310      	movs	r3, #16
 8011f62:	e048      	b.n	8011ff6 <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011f64:	4b26      	ldr	r3, [pc, #152]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f66:	4a27      	ldr	r2, [pc, #156]	; (8012004 <SendFrameOnChannel+0x188>)
 8011f68:	589b      	ldr	r3, [r3, r2]
 8011f6a:	227c      	movs	r2, #124	; 0x7c
 8011f6c:	5c9b      	ldrb	r3, [r3, r2]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d101      	bne.n	8011f76 <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011f72:	f002 fa04 	bl	801437e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011f76:	f002 f9a5 	bl	80142c4 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8011f7a:	4b21      	ldr	r3, [pc, #132]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f7c:	4a21      	ldr	r2, [pc, #132]	; (8012004 <SendFrameOnChannel+0x188>)
 8011f7e:	589b      	ldr	r3, [r3, r2]
 8011f80:	2285      	movs	r2, #133	; 0x85
 8011f82:	569b      	ldrsb	r3, [r3, r2]
 8011f84:	b2da      	uxtb	r2, r3
 8011f86:	4b1e      	ldr	r3, [pc, #120]	; (8012000 <SendFrameOnChannel+0x184>)
 8011f88:	4926      	ldr	r1, [pc, #152]	; (8012024 <SendFrameOnChannel+0x1a8>)
 8011f8a:	5c5b      	ldrb	r3, [r3, r1]
 8011f8c:	2527      	movs	r5, #39	; 0x27
 8011f8e:	197c      	adds	r4, r7, r5
 8011f90:	0019      	movs	r1, r3
 8011f92:	0010      	movs	r0, r2
 8011f94:	f7ff fbea 	bl	801176c <SecureFrame>
 8011f98:	0003      	movs	r3, r0
 8011f9a:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011f9c:	197b      	adds	r3, r7, r5
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d002      	beq.n	8011faa <SendFrameOnChannel+0x12e>
    {
        return status;
 8011fa4:	197b      	adds	r3, r7, r5
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	e025      	b.n	8011ff6 <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011faa:	4a15      	ldr	r2, [pc, #84]	; (8012000 <SendFrameOnChannel+0x184>)
 8011fac:	23d0      	movs	r3, #208	; 0xd0
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	58d3      	ldr	r3, [r2, r3]
 8011fb2:	2202      	movs	r2, #2
 8011fb4:	431a      	orrs	r2, r3
 8011fb6:	0011      	movs	r1, r2
 8011fb8:	4a11      	ldr	r2, [pc, #68]	; (8012000 <SendFrameOnChannel+0x184>)
 8011fba:	23d0      	movs	r3, #208	; 0xd0
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8011fc0:	4b0f      	ldr	r3, [pc, #60]	; (8012000 <SendFrameOnChannel+0x184>)
 8011fc2:	4a19      	ldr	r2, [pc, #100]	; (8012028 <SendFrameOnChannel+0x1ac>)
 8011fc4:	5c9b      	ldrb	r3, [r3, r2]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	4053      	eors	r3, r2
 8011fca:	b2db      	uxtb	r3, r3
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d009      	beq.n	8011fe4 <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8011fd0:	4a0b      	ldr	r2, [pc, #44]	; (8012000 <SendFrameOnChannel+0x184>)
 8011fd2:	2382      	movs	r3, #130	; 0x82
 8011fd4:	00db      	lsls	r3, r3, #3
 8011fd6:	5cd3      	ldrb	r3, [r2, r3]
 8011fd8:	3301      	adds	r3, #1
 8011fda:	b2d9      	uxtb	r1, r3
 8011fdc:	4a08      	ldr	r2, [pc, #32]	; (8012000 <SendFrameOnChannel+0x184>)
 8011fde:	2382      	movs	r3, #130	; 0x82
 8011fe0:	00db      	lsls	r3, r3, #3
 8011fe2:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011fe4:	4b11      	ldr	r3, [pc, #68]	; (801202c <SendFrameOnChannel+0x1b0>)
 8011fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fe8:	4a05      	ldr	r2, [pc, #20]	; (8012000 <SendFrameOnChannel+0x184>)
 8011fea:	8812      	ldrh	r2, [r2, #0]
 8011fec:	b2d1      	uxtb	r1, r2
 8011fee:	4a10      	ldr	r2, [pc, #64]	; (8012030 <SendFrameOnChannel+0x1b4>)
 8011ff0:	0010      	movs	r0, r2
 8011ff2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011ff4:	2300      	movs	r3, #0
}
 8011ff6:	0018      	movs	r0, r3
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	b00a      	add	sp, #40	; 0x28
 8011ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8011ffe:	46c0      	nop			; (mov r8, r8)
 8012000:	200005b4 	.word	0x200005b4
 8012004:	00000484 	.word	0x00000484
 8012008:	200009cc 	.word	0x200009cc
 801200c:	0000043d 	.word	0x0000043d
 8012010:	0000043e 	.word	0x0000043e
 8012014:	0000043f 	.word	0x0000043f
 8012018:	0000044c 	.word	0x0000044c
 801201c:	00000444 	.word	0x00000444
 8012020:	00000454 	.word	0x00000454
 8012024:	00000415 	.word	0x00000415
 8012028:	00000414 	.word	0x00000414
 801202c:	0801f358 	.word	0x0801f358
 8012030:	200005b6 	.word	0x200005b6

08012034 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b086      	sub	sp, #24
 8012038:	af00      	add	r7, sp, #0
 801203a:	0002      	movs	r2, r0
 801203c:	1dbb      	adds	r3, r7, #6
 801203e:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8012040:	4b1f      	ldr	r3, [pc, #124]	; (80120c0 <SetTxContinuousWave+0x8c>)
 8012042:	4a20      	ldr	r2, [pc, #128]	; (80120c4 <SetTxContinuousWave+0x90>)
 8012044:	5c9a      	ldrb	r2, [r3, r2]
 8012046:	2108      	movs	r1, #8
 8012048:	187b      	adds	r3, r7, r1
 801204a:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801204c:	4b1c      	ldr	r3, [pc, #112]	; (80120c0 <SetTxContinuousWave+0x8c>)
 801204e:	4a1e      	ldr	r2, [pc, #120]	; (80120c8 <SetTxContinuousWave+0x94>)
 8012050:	589b      	ldr	r3, [r3, r2]
 8012052:	2285      	movs	r2, #133	; 0x85
 8012054:	569a      	ldrsb	r2, [r3, r2]
 8012056:	187b      	adds	r3, r7, r1
 8012058:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801205a:	4b19      	ldr	r3, [pc, #100]	; (80120c0 <SetTxContinuousWave+0x8c>)
 801205c:	4a1a      	ldr	r2, [pc, #104]	; (80120c8 <SetTxContinuousWave+0x94>)
 801205e:	589b      	ldr	r3, [r3, r2]
 8012060:	2284      	movs	r2, #132	; 0x84
 8012062:	569a      	ldrsb	r2, [r3, r2]
 8012064:	187b      	adds	r3, r7, r1
 8012066:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012068:	4b15      	ldr	r3, [pc, #84]	; (80120c0 <SetTxContinuousWave+0x8c>)
 801206a:	4a17      	ldr	r2, [pc, #92]	; (80120c8 <SetTxContinuousWave+0x94>)
 801206c:	589b      	ldr	r3, [r3, r2]
 801206e:	22bc      	movs	r2, #188	; 0xbc
 8012070:	589a      	ldr	r2, [r3, r2]
 8012072:	187b      	adds	r3, r7, r1
 8012074:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012076:	4b12      	ldr	r3, [pc, #72]	; (80120c0 <SetTxContinuousWave+0x8c>)
 8012078:	4a13      	ldr	r2, [pc, #76]	; (80120c8 <SetTxContinuousWave+0x94>)
 801207a:	589b      	ldr	r3, [r3, r2]
 801207c:	22c0      	movs	r2, #192	; 0xc0
 801207e:	589a      	ldr	r2, [r3, r2]
 8012080:	187b      	adds	r3, r7, r1
 8012082:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8012084:	187b      	adds	r3, r7, r1
 8012086:	1dba      	adds	r2, r7, #6
 8012088:	8812      	ldrh	r2, [r2, #0]
 801208a:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 801208c:	4b0c      	ldr	r3, [pc, #48]	; (80120c0 <SetTxContinuousWave+0x8c>)
 801208e:	4a0e      	ldr	r2, [pc, #56]	; (80120c8 <SetTxContinuousWave+0x94>)
 8012090:	589b      	ldr	r3, [r3, r2]
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	187a      	adds	r2, r7, r1
 8012096:	0011      	movs	r1, r2
 8012098:	0018      	movs	r0, r3
 801209a:	f004 fc48 	bl	801692e <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801209e:	4a08      	ldr	r2, [pc, #32]	; (80120c0 <SetTxContinuousWave+0x8c>)
 80120a0:	23d0      	movs	r3, #208	; 0xd0
 80120a2:	009b      	lsls	r3, r3, #2
 80120a4:	58d3      	ldr	r3, [r2, r3]
 80120a6:	2202      	movs	r2, #2
 80120a8:	431a      	orrs	r2, r3
 80120aa:	0011      	movs	r1, r2
 80120ac:	4a04      	ldr	r2, [pc, #16]	; (80120c0 <SetTxContinuousWave+0x8c>)
 80120ae:	23d0      	movs	r3, #208	; 0xd0
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	0018      	movs	r0, r3
 80120b8:	46bd      	mov	sp, r7
 80120ba:	b006      	add	sp, #24
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	46c0      	nop			; (mov r8, r8)
 80120c0:	200005b4 	.word	0x200005b4
 80120c4:	00000415 	.word	0x00000415
 80120c8:	00000484 	.word	0x00000484

080120cc <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6039      	str	r1, [r7, #0]
 80120d4:	0011      	movs	r1, r2
 80120d6:	1dbb      	adds	r3, r7, #6
 80120d8:	1c02      	adds	r2, r0, #0
 80120da:	801a      	strh	r2, [r3, #0]
 80120dc:	1d7b      	adds	r3, r7, #5
 80120de:	1c0a      	adds	r2, r1, #0
 80120e0:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80120e2:	4b0c      	ldr	r3, [pc, #48]	; (8012114 <SetTxContinuousWave1+0x48>)
 80120e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120e6:	1d7a      	adds	r2, r7, #5
 80120e8:	2100      	movs	r1, #0
 80120ea:	5651      	ldrsb	r1, [r2, r1]
 80120ec:	1dba      	adds	r2, r7, #6
 80120ee:	8812      	ldrh	r2, [r2, #0]
 80120f0:	6838      	ldr	r0, [r7, #0]
 80120f2:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80120f4:	4a08      	ldr	r2, [pc, #32]	; (8012118 <SetTxContinuousWave1+0x4c>)
 80120f6:	23d0      	movs	r3, #208	; 0xd0
 80120f8:	009b      	lsls	r3, r3, #2
 80120fa:	58d3      	ldr	r3, [r2, r3]
 80120fc:	2202      	movs	r2, #2
 80120fe:	431a      	orrs	r2, r3
 8012100:	0011      	movs	r1, r2
 8012102:	4a05      	ldr	r2, [pc, #20]	; (8012118 <SetTxContinuousWave1+0x4c>)
 8012104:	23d0      	movs	r3, #208	; 0xd0
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 801210a:	2300      	movs	r3, #0
}
 801210c:	0018      	movs	r0, r3
 801210e:	46bd      	mov	sp, r7
 8012110:	b002      	add	sp, #8
 8012112:	bd80      	pop	{r7, pc}
 8012114:	0801f358 	.word	0x0801f358
 8012118:	200005b4 	.word	0x200005b4

0801211c <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8012122:	4b20      	ldr	r3, [pc, #128]	; (80121a4 <GetCtxs+0x88>)
 8012124:	4a20      	ldr	r2, [pc, #128]	; (80121a8 <GetCtxs+0x8c>)
 8012126:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8012128:	4b1e      	ldr	r3, [pc, #120]	; (80121a4 <GetCtxs+0x88>)
 801212a:	22b6      	movs	r2, #182	; 0xb6
 801212c:	0052      	lsls	r2, r2, #1
 801212e:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8012130:	4b1e      	ldr	r3, [pc, #120]	; (80121ac <GetCtxs+0x90>)
 8012132:	0018      	movs	r0, r3
 8012134:	f003 faa6 	bl	8015684 <LoRaMacCryptoGetNvmCtx>
 8012138:	0002      	movs	r2, r0
 801213a:	4b1a      	ldr	r3, [pc, #104]	; (80121a4 <GetCtxs+0x88>)
 801213c:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 801213e:	2300      	movs	r3, #0
 8012140:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8012142:	4b1b      	ldr	r3, [pc, #108]	; (80121b0 <GetCtxs+0x94>)
 8012144:	4a1b      	ldr	r2, [pc, #108]	; (80121b4 <GetCtxs+0x98>)
 8012146:	589b      	ldr	r3, [r3, r2]
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	1d3a      	adds	r2, r7, #4
 801214c:	0011      	movs	r1, r2
 801214e:	0018      	movs	r0, r3
 8012150:	f004 fa82 	bl	8016658 <RegionGetNvmCtx>
 8012154:	0002      	movs	r2, r0
 8012156:	4b13      	ldr	r3, [pc, #76]	; (80121a4 <GetCtxs+0x88>)
 8012158:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 801215a:	687a      	ldr	r2, [r7, #4]
 801215c:	4b11      	ldr	r3, [pc, #68]	; (80121a4 <GetCtxs+0x88>)
 801215e:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8012160:	4b15      	ldr	r3, [pc, #84]	; (80121b8 <GetCtxs+0x9c>)
 8012162:	0018      	movs	r0, r3
 8012164:	f7fb f826 	bl	800d1b4 <SecureElementGetNvmCtx>
 8012168:	0002      	movs	r2, r0
 801216a:	4b0e      	ldr	r3, [pc, #56]	; (80121a4 <GetCtxs+0x88>)
 801216c:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 801216e:	4b13      	ldr	r3, [pc, #76]	; (80121bc <GetCtxs+0xa0>)
 8012170:	0018      	movs	r0, r3
 8012172:	f002 fa63 	bl	801463c <LoRaMacCommandsGetNvmCtx>
 8012176:	0002      	movs	r2, r0
 8012178:	4b0a      	ldr	r3, [pc, #40]	; (80121a4 <GetCtxs+0x88>)
 801217a:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 801217c:	4b10      	ldr	r3, [pc, #64]	; (80121c0 <GetCtxs+0xa4>)
 801217e:	0018      	movs	r0, r3
 8012180:	f002 f82a 	bl	80141d8 <LoRaMacClassBGetNvmCtx>
 8012184:	0002      	movs	r2, r0
 8012186:	4b07      	ldr	r3, [pc, #28]	; (80121a4 <GetCtxs+0x88>)
 8012188:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 801218a:	4b0e      	ldr	r3, [pc, #56]	; (80121c4 <GetCtxs+0xa8>)
 801218c:	0018      	movs	r0, r3
 801218e:	f002 fcf5 	bl	8014b7c <LoRaMacConfirmQueueGetNvmCtx>
 8012192:	0002      	movs	r2, r0
 8012194:	4b03      	ldr	r3, [pc, #12]	; (80121a4 <GetCtxs+0x88>)
 8012196:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8012198:	4b02      	ldr	r3, [pc, #8]	; (80121a4 <GetCtxs+0x88>)
}
 801219a:	0018      	movs	r0, r3
 801219c:	46bd      	mov	sp, r7
 801219e:	b002      	add	sp, #8
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	46c0      	nop			; (mov r8, r8)
 80121a4:	20000bac 	.word	0x20000bac
 80121a8:	20000a40 	.word	0x20000a40
 80121ac:	20000bc0 	.word	0x20000bc0
 80121b0:	200005b4 	.word	0x200005b4
 80121b4:	00000484 	.word	0x00000484
 80121b8:	20000bc8 	.word	0x20000bc8
 80121bc:	20000bd0 	.word	0x20000bd0
 80121c0:	20000bd8 	.word	0x20000bd8
 80121c4:	20000be0 	.word	0x20000be0

080121c8 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d101      	bne.n	80121da <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80121d6:	2303      	movs	r3, #3
 80121d8:	e086      	b.n	80122e8 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80121da:	4a45      	ldr	r2, [pc, #276]	; (80122f0 <RestoreCtxs+0x128>)
 80121dc:	23d0      	movs	r3, #208	; 0xd0
 80121de:	009b      	lsls	r3, r3, #2
 80121e0:	58d3      	ldr	r3, [r2, r3]
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d001      	beq.n	80121ea <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 80121e6:	2301      	movs	r3, #1
 80121e8:	e07e      	b.n	80122e8 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d008      	beq.n	8012204 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6819      	ldr	r1, [r3, #0]
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	b29a      	uxth	r2, r3
 80121fc:	4b3d      	ldr	r3, [pc, #244]	; (80122f4 <RestoreCtxs+0x12c>)
 80121fe:	0018      	movs	r0, r3
 8012200:	f006 fe68 	bl	8018ed4 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8012204:	2108      	movs	r1, #8
 8012206:	187b      	adds	r3, r7, r1
 8012208:	2203      	movs	r2, #3
 801220a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	689a      	ldr	r2, [r3, #8]
 8012210:	187b      	adds	r3, r7, r1
 8012212:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012214:	4b36      	ldr	r3, [pc, #216]	; (80122f0 <RestoreCtxs+0x128>)
 8012216:	4a38      	ldr	r2, [pc, #224]	; (80122f8 <RestoreCtxs+0x130>)
 8012218:	589b      	ldr	r3, [r3, r2]
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	187a      	adds	r2, r7, r1
 801221e:	0011      	movs	r1, r2
 8012220:	0018      	movs	r0, r3
 8012222:	f004 fa04 	bl	801662e <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012226:	4b32      	ldr	r3, [pc, #200]	; (80122f0 <RestoreCtxs+0x128>)
 8012228:	4a34      	ldr	r2, [pc, #208]	; (80122fc <RestoreCtxs+0x134>)
 801222a:	5c99      	ldrb	r1, [r3, r2]
 801222c:	4a30      	ldr	r2, [pc, #192]	; (80122f0 <RestoreCtxs+0x128>)
 801222e:	23f8      	movs	r3, #248	; 0xf8
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8012234:	4b2e      	ldr	r3, [pc, #184]	; (80122f0 <RestoreCtxs+0x128>)
 8012236:	4a30      	ldr	r2, [pc, #192]	; (80122f8 <RestoreCtxs+0x130>)
 8012238:	589b      	ldr	r3, [r3, r2]
 801223a:	22b0      	movs	r2, #176	; 0xb0
 801223c:	5899      	ldr	r1, [r3, r2]
 801223e:	4a2c      	ldr	r2, [pc, #176]	; (80122f0 <RestoreCtxs+0x128>)
 8012240:	23f9      	movs	r3, #249	; 0xf9
 8012242:	009b      	lsls	r3, r3, #2
 8012244:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8012246:	4b2a      	ldr	r3, [pc, #168]	; (80122f0 <RestoreCtxs+0x128>)
 8012248:	4a2b      	ldr	r2, [pc, #172]	; (80122f8 <RestoreCtxs+0x130>)
 801224a:	589b      	ldr	r3, [r3, r2]
 801224c:	22b9      	movs	r2, #185	; 0xb9
 801224e:	5c99      	ldrb	r1, [r3, r2]
 8012250:	4a27      	ldr	r2, [pc, #156]	; (80122f0 <RestoreCtxs+0x128>)
 8012252:	23fc      	movs	r3, #252	; 0xfc
 8012254:	009b      	lsls	r3, r3, #2
 8012256:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8012258:	4b25      	ldr	r3, [pc, #148]	; (80122f0 <RestoreCtxs+0x128>)
 801225a:	4a27      	ldr	r2, [pc, #156]	; (80122f8 <RestoreCtxs+0x130>)
 801225c:	589b      	ldr	r3, [r3, r2]
 801225e:	22ca      	movs	r2, #202	; 0xca
 8012260:	5c99      	ldrb	r1, [r3, r2]
 8012262:	4b23      	ldr	r3, [pc, #140]	; (80122f0 <RestoreCtxs+0x128>)
 8012264:	4a26      	ldr	r2, [pc, #152]	; (8012300 <RestoreCtxs+0x138>)
 8012266:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012268:	4b21      	ldr	r3, [pc, #132]	; (80122f0 <RestoreCtxs+0x128>)
 801226a:	4a26      	ldr	r2, [pc, #152]	; (8012304 <RestoreCtxs+0x13c>)
 801226c:	2101      	movs	r1, #1
 801226e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012270:	4b1f      	ldr	r3, [pc, #124]	; (80122f0 <RestoreCtxs+0x128>)
 8012272:	4a25      	ldr	r2, [pc, #148]	; (8012308 <RestoreCtxs+0x140>)
 8012274:	2102      	movs	r1, #2
 8012276:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	699b      	ldr	r3, [r3, #24]
 801227c:	0018      	movs	r0, r3
 801227e:	f7fa ff83 	bl	800d188 <SecureElementRestoreNvmCtx>
 8012282:	1e03      	subs	r3, r0, #0
 8012284:	d001      	beq.n	801228a <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012286:	2311      	movs	r3, #17
 8012288:	e02e      	b.n	80122e8 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	691b      	ldr	r3, [r3, #16]
 801228e:	0018      	movs	r0, r3
 8012290:	f003 f9e2 	bl	8015658 <LoRaMacCryptoRestoreNvmCtx>
 8012294:	1e03      	subs	r3, r0, #0
 8012296:	d001      	beq.n	801229c <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012298:	2311      	movs	r3, #17
 801229a:	e025      	b.n	80122e8 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6a1b      	ldr	r3, [r3, #32]
 80122a0:	0018      	movs	r0, r3
 80122a2:	f002 f9b5 	bl	8014610 <LoRaMacCommandsRestoreNvmCtx>
 80122a6:	1e03      	subs	r3, r0, #0
 80122a8:	d001      	beq.n	80122ae <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80122aa:	2313      	movs	r3, #19
 80122ac:	e01c      	b.n	80122e8 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122b2:	0018      	movs	r0, r3
 80122b4:	f001 ff87 	bl	80141c6 <LoRaMacClassBRestoreNvmCtx>
 80122b8:	0003      	movs	r3, r0
 80122ba:	001a      	movs	r2, r3
 80122bc:	2301      	movs	r3, #1
 80122be:	4053      	eors	r3, r2
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 80122c6:	2314      	movs	r3, #20
 80122c8:	e00e      	b.n	80122e8 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122ce:	0018      	movs	r0, r3
 80122d0:	f002 fc3e 	bl	8014b50 <LoRaMacConfirmQueueRestoreNvmCtx>
 80122d4:	0003      	movs	r3, r0
 80122d6:	001a      	movs	r2, r3
 80122d8:	2301      	movs	r3, #1
 80122da:	4053      	eors	r3, r2
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d001      	beq.n	80122e6 <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 80122e2:	2315      	movs	r3, #21
 80122e4:	e000      	b.n	80122e8 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 80122e6:	2300      	movs	r3, #0
}
 80122e8:	0018      	movs	r0, r3
 80122ea:	46bd      	mov	sp, r7
 80122ec:	b004      	add	sp, #16
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	200005b4 	.word	0x200005b4
 80122f4:	20000a40 	.word	0x20000a40
 80122f8:	00000484 	.word	0x00000484
 80122fc:	00000415 	.word	0x00000415
 8012300:	000003f1 	.word	0x000003f1
 8012304:	000003f2 	.word	0x000003f2
 8012308:	000003f3 	.word	0x000003f3

0801230c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d002      	beq.n	8012322 <DetermineFrameType+0x16>
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d101      	bne.n	8012326 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012322:	2303      	movs	r3, #3
 8012324:	e03b      	b.n	801239e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	7b1b      	ldrb	r3, [r3, #12]
 801232a:	220f      	movs	r2, #15
 801232c:	4013      	ands	r3, r2
 801232e:	b2db      	uxtb	r3, r3
 8012330:	2b00      	cmp	r3, #0
 8012332:	d008      	beq.n	8012346 <DetermineFrameType+0x3a>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2220      	movs	r2, #32
 8012338:	5c9b      	ldrb	r3, [r3, r2]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d003      	beq.n	8012346 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	2200      	movs	r2, #0
 8012342:	701a      	strb	r2, [r3, #0]
 8012344:	e02a      	b.n	801239c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2228      	movs	r2, #40	; 0x28
 801234a:	5c9b      	ldrb	r3, [r3, r2]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d103      	bne.n	8012358 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	2201      	movs	r2, #1
 8012354:	701a      	strb	r2, [r3, #0]
 8012356:	e021      	b.n	801239c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	7b1b      	ldrb	r3, [r3, #12]
 801235c:	220f      	movs	r2, #15
 801235e:	4013      	ands	r3, r2
 8012360:	b2db      	uxtb	r3, r3
 8012362:	2b00      	cmp	r3, #0
 8012364:	d108      	bne.n	8012378 <DetermineFrameType+0x6c>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2220      	movs	r2, #32
 801236a:	5c9b      	ldrb	r3, [r3, r2]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d103      	bne.n	8012378 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	2202      	movs	r2, #2
 8012374:	701a      	strb	r2, [r3, #0]
 8012376:	e011      	b.n	801239c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	7b1b      	ldrb	r3, [r3, #12]
 801237c:	220f      	movs	r2, #15
 801237e:	4013      	ands	r3, r2
 8012380:	b2db      	uxtb	r3, r3
 8012382:	2b00      	cmp	r3, #0
 8012384:	d108      	bne.n	8012398 <DetermineFrameType+0x8c>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2220      	movs	r2, #32
 801238a:	5c9b      	ldrb	r3, [r3, r2]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d003      	beq.n	8012398 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	2203      	movs	r2, #3
 8012394:	701a      	strb	r2, [r3, #0]
 8012396:	e001      	b.n	801239c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012398:	2317      	movs	r3, #23
 801239a:	e000      	b.n	801239e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801239c:	2300      	movs	r3, #0
}
 801239e:	0018      	movs	r0, r3
 80123a0:	46bd      	mov	sp, r7
 80123a2:	b002      	add	sp, #8
 80123a4:	bd80      	pop	{r7, pc}
	...

080123a8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80123ac:	4a14      	ldr	r2, [pc, #80]	; (8012400 <CheckRetransUnconfirmedUplink+0x58>)
 80123ae:	2382      	movs	r3, #130	; 0x82
 80123b0:	00db      	lsls	r3, r3, #3
 80123b2:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 80123b4:	4b12      	ldr	r3, [pc, #72]	; (8012400 <CheckRetransUnconfirmedUplink+0x58>)
 80123b6:	4913      	ldr	r1, [pc, #76]	; (8012404 <CheckRetransUnconfirmedUplink+0x5c>)
 80123b8:	585b      	ldr	r3, [r3, r1]
 80123ba:	21a4      	movs	r1, #164	; 0xa4
 80123bc:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 80123be:	429a      	cmp	r2, r3
 80123c0:	d301      	bcc.n	80123c6 <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 80123c2:	2301      	movs	r3, #1
 80123c4:	e018      	b.n	80123f8 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80123c6:	4b0e      	ldr	r3, [pc, #56]	; (8012400 <CheckRetransUnconfirmedUplink+0x58>)
 80123c8:	4a0f      	ldr	r2, [pc, #60]	; (8012408 <CheckRetransUnconfirmedUplink+0x60>)
 80123ca:	5c9b      	ldrb	r3, [r3, r2]
 80123cc:	2202      	movs	r2, #2
 80123ce:	4013      	ands	r3, r2
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d00f      	beq.n	80123f6 <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80123d6:	4b0a      	ldr	r3, [pc, #40]	; (8012400 <CheckRetransUnconfirmedUplink+0x58>)
 80123d8:	4a0a      	ldr	r2, [pc, #40]	; (8012404 <CheckRetransUnconfirmedUplink+0x5c>)
 80123da:	589b      	ldr	r3, [r3, r2]
 80123dc:	227c      	movs	r2, #124	; 0x7c
 80123de:	5c9b      	ldrb	r3, [r3, r2]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d101      	bne.n	80123e8 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 80123e4:	2301      	movs	r3, #1
 80123e6:	e007      	b.n	80123f8 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 80123e8:	4b05      	ldr	r3, [pc, #20]	; (8012400 <CheckRetransUnconfirmedUplink+0x58>)
 80123ea:	4a08      	ldr	r2, [pc, #32]	; (801240c <CheckRetransUnconfirmedUplink+0x64>)
 80123ec:	5c9b      	ldrb	r3, [r3, r2]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d101      	bne.n	80123f6 <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 80123f2:	2301      	movs	r3, #1
 80123f4:	e000      	b.n	80123f8 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 80123f6:	2300      	movs	r3, #0
}
 80123f8:	0018      	movs	r0, r3
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	46c0      	nop			; (mov r8, r8)
 8012400:	200005b4 	.word	0x200005b4
 8012404:	00000484 	.word	0x00000484
 8012408:	00000481 	.word	0x00000481
 801240c:	0000042d 	.word	0x0000042d

08012410 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012410:	b580      	push	{r7, lr}
 8012412:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012414:	4b0e      	ldr	r3, [pc, #56]	; (8012450 <CheckRetransConfirmedUplink+0x40>)
 8012416:	4a0f      	ldr	r2, [pc, #60]	; (8012454 <CheckRetransConfirmedUplink+0x44>)
 8012418:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 801241a:	4b0d      	ldr	r3, [pc, #52]	; (8012450 <CheckRetransConfirmedUplink+0x40>)
 801241c:	490e      	ldr	r1, [pc, #56]	; (8012458 <CheckRetransConfirmedUplink+0x48>)
 801241e:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012420:	429a      	cmp	r2, r3
 8012422:	d301      	bcc.n	8012428 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012424:	2301      	movs	r3, #1
 8012426:	e010      	b.n	801244a <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012428:	4b09      	ldr	r3, [pc, #36]	; (8012450 <CheckRetransConfirmedUplink+0x40>)
 801242a:	4a0c      	ldr	r2, [pc, #48]	; (801245c <CheckRetransConfirmedUplink+0x4c>)
 801242c:	5c9b      	ldrb	r3, [r3, r2]
 801242e:	2202      	movs	r2, #2
 8012430:	4013      	ands	r3, r2
 8012432:	b2db      	uxtb	r3, r3
 8012434:	2b00      	cmp	r3, #0
 8012436:	d007      	beq.n	8012448 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012438:	4a05      	ldr	r2, [pc, #20]	; (8012450 <CheckRetransConfirmedUplink+0x40>)
 801243a:	2388      	movs	r3, #136	; 0x88
 801243c:	00db      	lsls	r3, r3, #3
 801243e:	5cd3      	ldrb	r3, [r2, r3]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d001      	beq.n	8012448 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8012444:	2301      	movs	r3, #1
 8012446:	e000      	b.n	801244a <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8012448:	2300      	movs	r3, #0
}
 801244a:	0018      	movs	r0, r3
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	200005b4 	.word	0x200005b4
 8012454:	00000412 	.word	0x00000412
 8012458:	00000411 	.word	0x00000411
 801245c:	00000481 	.word	0x00000481

08012460 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012464:	4b1e      	ldr	r3, [pc, #120]	; (80124e0 <StopRetransmission+0x80>)
 8012466:	4a1f      	ldr	r2, [pc, #124]	; (80124e4 <StopRetransmission+0x84>)
 8012468:	5c9b      	ldrb	r3, [r3, r2]
 801246a:	2202      	movs	r2, #2
 801246c:	4013      	ands	r3, r2
 801246e:	b2db      	uxtb	r3, r3
 8012470:	2b00      	cmp	r3, #0
 8012472:	d009      	beq.n	8012488 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012474:	4b1a      	ldr	r3, [pc, #104]	; (80124e0 <StopRetransmission+0x80>)
 8012476:	4a1c      	ldr	r2, [pc, #112]	; (80124e8 <StopRetransmission+0x88>)
 8012478:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801247a:	2b00      	cmp	r3, #0
 801247c:	d013      	beq.n	80124a6 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 801247e:	4b18      	ldr	r3, [pc, #96]	; (80124e0 <StopRetransmission+0x80>)
 8012480:	4a19      	ldr	r2, [pc, #100]	; (80124e8 <StopRetransmission+0x88>)
 8012482:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012484:	2b01      	cmp	r3, #1
 8012486:	d00e      	beq.n	80124a6 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8012488:	4b15      	ldr	r3, [pc, #84]	; (80124e0 <StopRetransmission+0x80>)
 801248a:	4a18      	ldr	r2, [pc, #96]	; (80124ec <StopRetransmission+0x8c>)
 801248c:	589b      	ldr	r3, [r3, r2]
 801248e:	227e      	movs	r2, #126	; 0x7e
 8012490:	5c9b      	ldrb	r3, [r3, r2]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d007      	beq.n	80124a6 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8012496:	4b12      	ldr	r3, [pc, #72]	; (80124e0 <StopRetransmission+0x80>)
 8012498:	4a14      	ldr	r2, [pc, #80]	; (80124ec <StopRetransmission+0x8c>)
 801249a:	589b      	ldr	r3, [r3, r2]
 801249c:	2280      	movs	r2, #128	; 0x80
 801249e:	589a      	ldr	r2, [r3, r2]
 80124a0:	3201      	adds	r2, #1
 80124a2:	2180      	movs	r1, #128	; 0x80
 80124a4:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80124a6:	4a0e      	ldr	r2, [pc, #56]	; (80124e0 <StopRetransmission+0x80>)
 80124a8:	2382      	movs	r3, #130	; 0x82
 80124aa:	00db      	lsls	r3, r3, #3
 80124ac:	2100      	movs	r1, #0
 80124ae:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 80124b0:	4b0b      	ldr	r3, [pc, #44]	; (80124e0 <StopRetransmission+0x80>)
 80124b2:	4a0f      	ldr	r2, [pc, #60]	; (80124f0 <StopRetransmission+0x90>)
 80124b4:	2100      	movs	r1, #0
 80124b6:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 80124b8:	4b09      	ldr	r3, [pc, #36]	; (80124e0 <StopRetransmission+0x80>)
 80124ba:	4a0e      	ldr	r2, [pc, #56]	; (80124f4 <StopRetransmission+0x94>)
 80124bc:	2100      	movs	r1, #0
 80124be:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80124c0:	4a07      	ldr	r2, [pc, #28]	; (80124e0 <StopRetransmission+0x80>)
 80124c2:	23d0      	movs	r3, #208	; 0xd0
 80124c4:	009b      	lsls	r3, r3, #2
 80124c6:	58d3      	ldr	r3, [r2, r3]
 80124c8:	2202      	movs	r2, #2
 80124ca:	4393      	bics	r3, r2
 80124cc:	0019      	movs	r1, r3
 80124ce:	4a04      	ldr	r2, [pc, #16]	; (80124e0 <StopRetransmission+0x80>)
 80124d0:	23d0      	movs	r3, #208	; 0xd0
 80124d2:	009b      	lsls	r3, r3, #2
 80124d4:	50d1      	str	r1, [r2, r3]

    return true;
 80124d6:	2301      	movs	r3, #1
}
 80124d8:	0018      	movs	r0, r3
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	46c0      	nop			; (mov r8, r8)
 80124e0:	200005b4 	.word	0x200005b4
 80124e4:	00000481 	.word	0x00000481
 80124e8:	0000042d 	.word	0x0000042d
 80124ec:	00000484 	.word	0x00000484
 80124f0:	00000414 	.word	0x00000414
 80124f4:	00000413 	.word	0x00000413

080124f8 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80124fe:	4b21      	ldr	r3, [pc, #132]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 8012500:	4a21      	ldr	r2, [pc, #132]	; (8012588 <AckTimeoutRetriesProcess+0x90>)
 8012502:	5c9a      	ldrb	r2, [r3, r2]
 8012504:	4b1f      	ldr	r3, [pc, #124]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 8012506:	4921      	ldr	r1, [pc, #132]	; (801258c <AckTimeoutRetriesProcess+0x94>)
 8012508:	5c5b      	ldrb	r3, [r3, r1]
 801250a:	429a      	cmp	r2, r3
 801250c:	d236      	bcs.n	801257c <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801250e:	4b1d      	ldr	r3, [pc, #116]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 8012510:	4a1d      	ldr	r2, [pc, #116]	; (8012588 <AckTimeoutRetriesProcess+0x90>)
 8012512:	5c9b      	ldrb	r3, [r3, r2]
 8012514:	3301      	adds	r3, #1
 8012516:	b2d9      	uxtb	r1, r3
 8012518:	4b1a      	ldr	r3, [pc, #104]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 801251a:	4a1b      	ldr	r2, [pc, #108]	; (8012588 <AckTimeoutRetriesProcess+0x90>)
 801251c:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801251e:	4b19      	ldr	r3, [pc, #100]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 8012520:	4a19      	ldr	r2, [pc, #100]	; (8012588 <AckTimeoutRetriesProcess+0x90>)
 8012522:	5c9b      	ldrb	r3, [r3, r2]
 8012524:	2201      	movs	r2, #1
 8012526:	4013      	ands	r3, r2
 8012528:	b2db      	uxtb	r3, r3
 801252a:	2b00      	cmp	r3, #0
 801252c:	d026      	beq.n	801257c <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801252e:	2108      	movs	r1, #8
 8012530:	187b      	adds	r3, r7, r1
 8012532:	2222      	movs	r2, #34	; 0x22
 8012534:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012536:	4b13      	ldr	r3, [pc, #76]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 8012538:	4a15      	ldr	r2, [pc, #84]	; (8012590 <AckTimeoutRetriesProcess+0x98>)
 801253a:	589b      	ldr	r3, [r3, r2]
 801253c:	22b8      	movs	r2, #184	; 0xb8
 801253e:	5c9a      	ldrb	r2, [r3, r2]
 8012540:	187b      	adds	r3, r7, r1
 8012542:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012544:	4b0f      	ldr	r3, [pc, #60]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 8012546:	4a12      	ldr	r2, [pc, #72]	; (8012590 <AckTimeoutRetriesProcess+0x98>)
 8012548:	589b      	ldr	r3, [r3, r2]
 801254a:	2285      	movs	r2, #133	; 0x85
 801254c:	569a      	ldrsb	r2, [r3, r2]
 801254e:	187b      	adds	r3, r7, r1
 8012550:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012552:	4b0c      	ldr	r3, [pc, #48]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 8012554:	4a0e      	ldr	r2, [pc, #56]	; (8012590 <AckTimeoutRetriesProcess+0x98>)
 8012556:	589b      	ldr	r3, [r3, r2]
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	187a      	adds	r2, r7, r1
 801255c:	0011      	movs	r1, r2
 801255e:	0018      	movs	r0, r3
 8012560:	f004 f829 	bl	80165b6 <RegionGetPhyParam>
 8012564:	0003      	movs	r3, r0
 8012566:	001a      	movs	r2, r3
 8012568:	1d3b      	adds	r3, r7, #4
 801256a:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 801256c:	1d3b      	adds	r3, r7, #4
 801256e:	6819      	ldr	r1, [r3, #0]
 8012570:	4b04      	ldr	r3, [pc, #16]	; (8012584 <AckTimeoutRetriesProcess+0x8c>)
 8012572:	4a07      	ldr	r2, [pc, #28]	; (8012590 <AckTimeoutRetriesProcess+0x98>)
 8012574:	589b      	ldr	r3, [r3, r2]
 8012576:	b249      	sxtb	r1, r1
 8012578:	2285      	movs	r2, #133	; 0x85
 801257a:	5499      	strb	r1, [r3, r2]
        }
    }
}
 801257c:	46c0      	nop			; (mov r8, r8)
 801257e:	46bd      	mov	sp, r7
 8012580:	b004      	add	sp, #16
 8012582:	bd80      	pop	{r7, pc}
 8012584:	200005b4 	.word	0x200005b4
 8012588:	00000412 	.word	0x00000412
 801258c:	00000411 	.word	0x00000411
 8012590:	00000484 	.word	0x00000484

08012594 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 801259a:	4a16      	ldr	r2, [pc, #88]	; (80125f4 <AckTimeoutRetriesFinalize+0x60>)
 801259c:	2388      	movs	r3, #136	; 0x88
 801259e:	00db      	lsls	r3, r3, #3
 80125a0:	5cd3      	ldrb	r3, [r2, r3]
 80125a2:	2201      	movs	r2, #1
 80125a4:	4053      	eors	r3, r2
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d018      	beq.n	80125de <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80125ac:	003b      	movs	r3, r7
 80125ae:	2202      	movs	r2, #2
 80125b0:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 80125b2:	4b11      	ldr	r3, [pc, #68]	; (80125f8 <AckTimeoutRetriesFinalize+0x64>)
 80125b4:	689a      	ldr	r2, [r3, #8]
 80125b6:	003b      	movs	r3, r7
 80125b8:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80125ba:	4b0e      	ldr	r3, [pc, #56]	; (80125f4 <AckTimeoutRetriesFinalize+0x60>)
 80125bc:	4a0f      	ldr	r2, [pc, #60]	; (80125fc <AckTimeoutRetriesFinalize+0x68>)
 80125be:	589b      	ldr	r3, [r3, r2]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	003a      	movs	r2, r7
 80125c4:	0011      	movs	r1, r2
 80125c6:	0018      	movs	r0, r3
 80125c8:	f004 f831 	bl	801662e <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80125cc:	4b09      	ldr	r3, [pc, #36]	; (80125f4 <AckTimeoutRetriesFinalize+0x60>)
 80125ce:	4a0c      	ldr	r2, [pc, #48]	; (8012600 <AckTimeoutRetriesFinalize+0x6c>)
 80125d0:	2100      	movs	r1, #0
 80125d2:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 80125d4:	4a07      	ldr	r2, [pc, #28]	; (80125f4 <AckTimeoutRetriesFinalize+0x60>)
 80125d6:	2388      	movs	r3, #136	; 0x88
 80125d8:	00db      	lsls	r3, r3, #3
 80125da:	2100      	movs	r1, #0
 80125dc:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80125de:	4b05      	ldr	r3, [pc, #20]	; (80125f4 <AckTimeoutRetriesFinalize+0x60>)
 80125e0:	4a08      	ldr	r2, [pc, #32]	; (8012604 <AckTimeoutRetriesFinalize+0x70>)
 80125e2:	5c99      	ldrb	r1, [r3, r2]
 80125e4:	4b03      	ldr	r3, [pc, #12]	; (80125f4 <AckTimeoutRetriesFinalize+0x60>)
 80125e6:	4a08      	ldr	r2, [pc, #32]	; (8012608 <AckTimeoutRetriesFinalize+0x74>)
 80125e8:	5499      	strb	r1, [r3, r2]
}
 80125ea:	46c0      	nop			; (mov r8, r8)
 80125ec:	46bd      	mov	sp, r7
 80125ee:	b002      	add	sp, #8
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	46c0      	nop			; (mov r8, r8)
 80125f4:	200005b4 	.word	0x200005b4
 80125f8:	20000bac 	.word	0x20000bac
 80125fc:	00000484 	.word	0x00000484
 8012600:	00000414 	.word	0x00000414
 8012604:	00000412 	.word	0x00000412
 8012608:	00000441 	.word	0x00000441

0801260c <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	0002      	movs	r2, r0
 8012614:	1dfb      	adds	r3, r7, #7
 8012616:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8012618:	4a0c      	ldr	r2, [pc, #48]	; (801264c <CallNvmCtxCallback+0x40>)
 801261a:	23d2      	movs	r3, #210	; 0xd2
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	58d3      	ldr	r3, [r2, r3]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00f      	beq.n	8012644 <CallNvmCtxCallback+0x38>
 8012624:	4a09      	ldr	r2, [pc, #36]	; (801264c <CallNvmCtxCallback+0x40>)
 8012626:	23d2      	movs	r3, #210	; 0xd2
 8012628:	009b      	lsls	r3, r3, #2
 801262a:	58d3      	ldr	r3, [r2, r3]
 801262c:	689b      	ldr	r3, [r3, #8]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d008      	beq.n	8012644 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8012632:	4a06      	ldr	r2, [pc, #24]	; (801264c <CallNvmCtxCallback+0x40>)
 8012634:	23d2      	movs	r3, #210	; 0xd2
 8012636:	009b      	lsls	r3, r3, #2
 8012638:	58d3      	ldr	r3, [r2, r3]
 801263a:	689b      	ldr	r3, [r3, #8]
 801263c:	1dfa      	adds	r2, r7, #7
 801263e:	7812      	ldrb	r2, [r2, #0]
 8012640:	0010      	movs	r0, r2
 8012642:	4798      	blx	r3
    }
}
 8012644:	46c0      	nop			; (mov r8, r8)
 8012646:	46bd      	mov	sp, r7
 8012648:	b002      	add	sp, #8
 801264a:	bd80      	pop	{r7, pc}
 801264c:	200005b4 	.word	0x200005b4

08012650 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8012650:	b580      	push	{r7, lr}
 8012652:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8012654:	2000      	movs	r0, #0
 8012656:	f7ff ffd9 	bl	801260c <CallNvmCtxCallback>
}
 801265a:	46c0      	nop			; (mov r8, r8)
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012660:	b580      	push	{r7, lr}
 8012662:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8012664:	2001      	movs	r0, #1
 8012666:	f7ff ffd1 	bl	801260c <CallNvmCtxCallback>
}
 801266a:	46c0      	nop			; (mov r8, r8)
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012670:	b580      	push	{r7, lr}
 8012672:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8012674:	2002      	movs	r0, #2
 8012676:	f7ff ffc9 	bl	801260c <CallNvmCtxCallback>
}
 801267a:	46c0      	nop			; (mov r8, r8)
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012680:	b580      	push	{r7, lr}
 8012682:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8012684:	2003      	movs	r0, #3
 8012686:	f7ff ffc1 	bl	801260c <CallNvmCtxCallback>
}
 801268a:	46c0      	nop			; (mov r8, r8)
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012690:	b580      	push	{r7, lr}
 8012692:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8012694:	2004      	movs	r0, #4
 8012696:	f7ff ffb9 	bl	801260c <CallNvmCtxCallback>
}
 801269a:	46c0      	nop			; (mov r8, r8)
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 80126a4:	2005      	movs	r0, #5
 80126a6:	f7ff ffb1 	bl	801260c <CallNvmCtxCallback>
}
 80126aa:	46c0      	nop			; (mov r8, r8)
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 80126b4:	2006      	movs	r0, #6
 80126b6:	f7ff ffa9 	bl	801260c <CallNvmCtxCallback>
}
 80126ba:	46c0      	nop			; (mov r8, r8)
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80126c4:	4b0a      	ldr	r3, [pc, #40]	; (80126f0 <IsRequestPending+0x30>)
 80126c6:	4a0b      	ldr	r2, [pc, #44]	; (80126f4 <IsRequestPending+0x34>)
 80126c8:	5c9b      	ldrb	r3, [r3, r2]
 80126ca:	2204      	movs	r2, #4
 80126cc:	4013      	ands	r3, r2
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d107      	bne.n	80126e4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80126d4:	4b06      	ldr	r3, [pc, #24]	; (80126f0 <IsRequestPending+0x30>)
 80126d6:	4a07      	ldr	r2, [pc, #28]	; (80126f4 <IsRequestPending+0x34>)
 80126d8:	5c9b      	ldrb	r3, [r3, r2]
 80126da:	2201      	movs	r2, #1
 80126dc:	4013      	ands	r3, r2
 80126de:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d001      	beq.n	80126e8 <IsRequestPending+0x28>
    {
        return 1;
 80126e4:	2301      	movs	r3, #1
 80126e6:	e000      	b.n	80126ea <IsRequestPending+0x2a>
    }
    return 0;
 80126e8:	2300      	movs	r3, #0
}
 80126ea:	0018      	movs	r0, r3
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	200005b4 	.word	0x200005b4
 80126f4:	00000481 	.word	0x00000481

080126f8 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80126fc:	4a08      	ldr	r2, [pc, #32]	; (8012720 <LoRaMacIsBusy+0x28>)
 80126fe:	23d0      	movs	r3, #208	; 0xd0
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	58d3      	ldr	r3, [r2, r3]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d106      	bne.n	8012716 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012708:	4b05      	ldr	r3, [pc, #20]	; (8012720 <LoRaMacIsBusy+0x28>)
 801270a:	4a06      	ldr	r2, [pc, #24]	; (8012724 <LoRaMacIsBusy+0x2c>)
 801270c:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801270e:	2b01      	cmp	r3, #1
 8012710:	d101      	bne.n	8012716 <LoRaMacIsBusy+0x1e>
    {
        return false;
 8012712:	2300      	movs	r3, #0
 8012714:	e000      	b.n	8012718 <LoRaMacIsBusy+0x20>
    }
    return true;
 8012716:	2301      	movs	r3, #1
}
 8012718:	0018      	movs	r0, r3
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	46c0      	nop			; (mov r8, r8)
 8012720:	200005b4 	.word	0x200005b4
 8012724:	00000482 	.word	0x00000482

08012728 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 801272e:	1dfb      	adds	r3, r7, #7
 8012730:	2200      	movs	r2, #0
 8012732:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8012734:	f7fd f970 	bl	800fa18 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012738:	f001 fe26 	bl	8014388 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 801273c:	4b1b      	ldr	r3, [pc, #108]	; (80127ac <LoRaMacProcess+0x84>)
 801273e:	4a1c      	ldr	r2, [pc, #112]	; (80127b0 <LoRaMacProcess+0x88>)
 8012740:	5c9b      	ldrb	r3, [r3, r2]
 8012742:	2220      	movs	r2, #32
 8012744:	4013      	ands	r3, r2
 8012746:	b2db      	uxtb	r3, r3
 8012748:	2b00      	cmp	r3, #0
 801274a:	d020      	beq.n	801278e <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 801274c:	2000      	movs	r0, #0
 801274e:	f7fd f9af 	bl	800fab0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012752:	f7fd fb8b 	bl	800fe6c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012756:	f7ff ffb3 	bl	80126c0 <IsRequestPending>
 801275a:	1e03      	subs	r3, r0, #0
 801275c:	d008      	beq.n	8012770 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801275e:	f7fd fb59 	bl	800fe14 <LoRaMacCheckForBeaconAcquisition>
 8012762:	0003      	movs	r3, r0
 8012764:	0019      	movs	r1, r3
 8012766:	1dfb      	adds	r3, r7, #7
 8012768:	1dfa      	adds	r2, r7, #7
 801276a:	7812      	ldrb	r2, [r2, #0]
 801276c:	430a      	orrs	r2, r1
 801276e:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012770:	1dfb      	adds	r3, r7, #7
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d103      	bne.n	8012780 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012778:	f7fd fb0a 	bl	800fd90 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801277c:	f7fd fa86 	bl	800fc8c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012780:	f7fd f9aa 	bl	800fad8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012784:	f7fd fa0e 	bl	800fba4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012788:	2001      	movs	r0, #1
 801278a:	f7fd f991 	bl	800fab0 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 801278e:	f7fd fa25 	bl	800fbdc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012792:	4a06      	ldr	r2, [pc, #24]	; (80127ac <LoRaMacProcess+0x84>)
 8012794:	2390      	movs	r3, #144	; 0x90
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	5cd3      	ldrb	r3, [r2, r3]
 801279a:	2b02      	cmp	r3, #2
 801279c:	d101      	bne.n	80127a2 <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 801279e:	f7ff f9d1 	bl	8011b44 <OpenContinuousRxCWindow>
    }
}
 80127a2:	46c0      	nop			; (mov r8, r8)
 80127a4:	46bd      	mov	sp, r7
 80127a6:	b002      	add	sp, #8
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	46c0      	nop			; (mov r8, r8)
 80127ac:	200005b4 	.word	0x200005b4
 80127b0:	00000481 	.word	0x00000481

080127b4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80127b4:	b5b0      	push	{r4, r5, r7, lr}
 80127b6:	b098      	sub	sp, #96	; 0x60
 80127b8:	af02      	add	r7, sp, #8
 80127ba:	6178      	str	r0, [r7, #20]
 80127bc:	6139      	str	r1, [r7, #16]
 80127be:	230f      	movs	r3, #15
 80127c0:	18fb      	adds	r3, r7, r3
 80127c2:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d002      	beq.n	80127d0 <LoRaMacInitialization+0x1c>
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d101      	bne.n	80127d4 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80127d0:	2303      	movs	r3, #3
 80127d2:	e35e      	b.n	8012e92 <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d00b      	beq.n	80127f4 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d007      	beq.n	80127f4 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d003      	beq.n	80127f4 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d101      	bne.n	80127f8 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80127f4:	2303      	movs	r3, #3
 80127f6:	e34c      	b.n	8012e92 <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80127f8:	230f      	movs	r3, #15
 80127fa:	18fb      	adds	r3, r7, r3
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	0018      	movs	r0, r3
 8012800:	f003 fec8 	bl	8016594 <RegionIsActive>
 8012804:	0003      	movs	r3, r0
 8012806:	001a      	movs	r2, r3
 8012808:	2301      	movs	r3, #1
 801280a:	4053      	eors	r3, r2
 801280c:	b2db      	uxtb	r3, r3
 801280e:	2b00      	cmp	r3, #0
 8012810:	d001      	beq.n	8012816 <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012812:	2309      	movs	r3, #9
 8012814:	e33d      	b.n	8012e92 <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8012816:	4afd      	ldr	r2, [pc, #1012]	; (8012c0c <LoRaMacInitialization+0x458>)
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	0011      	movs	r1, r2
 801281c:	0018      	movs	r0, r3
 801281e:	f002 f967 	bl	8014af0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8012822:	23b6      	movs	r3, #182	; 0xb6
 8012824:	005a      	lsls	r2, r3, #1
 8012826:	4bfa      	ldr	r3, [pc, #1000]	; (8012c10 <LoRaMacInitialization+0x45c>)
 8012828:	2100      	movs	r1, #0
 801282a:	0018      	movs	r0, r3
 801282c:	f006 fb90 	bl	8018f50 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012830:	4af8      	ldr	r2, [pc, #992]	; (8012c14 <LoRaMacInitialization+0x460>)
 8012832:	4bf9      	ldr	r3, [pc, #996]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012834:	2100      	movs	r1, #0
 8012836:	0018      	movs	r0, r3
 8012838:	f006 fb8a 	bl	8018f50 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 801283c:	4bf6      	ldr	r3, [pc, #984]	; (8012c18 <LoRaMacInitialization+0x464>)
 801283e:	49f7      	ldr	r1, [pc, #988]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012840:	4af3      	ldr	r2, [pc, #972]	; (8012c10 <LoRaMacInitialization+0x45c>)
 8012842:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012844:	4bf4      	ldr	r3, [pc, #976]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012846:	4af6      	ldr	r2, [pc, #984]	; (8012c20 <LoRaMacInitialization+0x46c>)
 8012848:	2101      	movs	r1, #1
 801284a:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 801284c:	4bf2      	ldr	r3, [pc, #968]	; (8012c18 <LoRaMacInitialization+0x464>)
 801284e:	4af5      	ldr	r2, [pc, #980]	; (8012c24 <LoRaMacInitialization+0x470>)
 8012850:	2101      	movs	r1, #1
 8012852:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8012854:	4bf0      	ldr	r3, [pc, #960]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012856:	4af1      	ldr	r2, [pc, #964]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012858:	589b      	ldr	r3, [r3, r2]
 801285a:	220f      	movs	r2, #15
 801285c:	18ba      	adds	r2, r7, r2
 801285e:	7812      	ldrb	r2, [r2, #0]
 8012860:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8012862:	4bed      	ldr	r3, [pc, #948]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012864:	4aed      	ldr	r2, [pc, #948]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012866:	589b      	ldr	r3, [r3, r2]
 8012868:	227c      	movs	r2, #124	; 0x7c
 801286a:	2100      	movs	r1, #0
 801286c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 801286e:	4bea      	ldr	r3, [pc, #936]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012870:	4aea      	ldr	r2, [pc, #936]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012872:	589b      	ldr	r3, [r3, r2]
 8012874:	22ca      	movs	r2, #202	; 0xca
 8012876:	2100      	movs	r1, #0
 8012878:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 801287a:	4be7      	ldr	r3, [pc, #924]	; (8012c18 <LoRaMacInitialization+0x464>)
 801287c:	4ae7      	ldr	r2, [pc, #924]	; (8012c1c <LoRaMacInitialization+0x468>)
 801287e:	589a      	ldr	r2, [r3, r2]
 8012880:	23b0      	movs	r3, #176	; 0xb0
 8012882:	005b      	lsls	r3, r3, #1
 8012884:	49e8      	ldr	r1, [pc, #928]	; (8012c28 <LoRaMacInitialization+0x474>)
 8012886:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012888:	2550      	movs	r5, #80	; 0x50
 801288a:	197b      	adds	r3, r7, r5
 801288c:	220f      	movs	r2, #15
 801288e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012890:	4be1      	ldr	r3, [pc, #900]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012892:	4ae2      	ldr	r2, [pc, #904]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012894:	589b      	ldr	r3, [r3, r2]
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	197a      	adds	r2, r7, r5
 801289a:	0011      	movs	r1, r2
 801289c:	0018      	movs	r0, r3
 801289e:	f003 fe8a 	bl	80165b6 <RegionGetPhyParam>
 80128a2:	0003      	movs	r3, r0
 80128a4:	001a      	movs	r2, r3
 80128a6:	244c      	movs	r4, #76	; 0x4c
 80128a8:	193b      	adds	r3, r7, r4
 80128aa:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 80128ac:	193b      	adds	r3, r7, r4
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	4bd9      	ldr	r3, [pc, #868]	; (8012c18 <LoRaMacInitialization+0x464>)
 80128b2:	49da      	ldr	r1, [pc, #872]	; (8012c1c <LoRaMacInitialization+0x468>)
 80128b4:	585b      	ldr	r3, [r3, r1]
 80128b6:	1e51      	subs	r1, r2, #1
 80128b8:	418a      	sbcs	r2, r1
 80128ba:	b2d1      	uxtb	r1, r2
 80128bc:	22c9      	movs	r2, #201	; 0xc9
 80128be:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80128c0:	197b      	adds	r3, r7, r5
 80128c2:	220a      	movs	r2, #10
 80128c4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80128c6:	4bd4      	ldr	r3, [pc, #848]	; (8012c18 <LoRaMacInitialization+0x464>)
 80128c8:	4ad4      	ldr	r2, [pc, #848]	; (8012c1c <LoRaMacInitialization+0x468>)
 80128ca:	589b      	ldr	r3, [r3, r2]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	197a      	adds	r2, r7, r5
 80128d0:	0011      	movs	r1, r2
 80128d2:	0018      	movs	r0, r3
 80128d4:	f003 fe6f 	bl	80165b6 <RegionGetPhyParam>
 80128d8:	0003      	movs	r3, r0
 80128da:	001a      	movs	r2, r3
 80128dc:	193b      	adds	r3, r7, r4
 80128de:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 80128e0:	193b      	adds	r3, r7, r4
 80128e2:	6819      	ldr	r1, [r3, #0]
 80128e4:	4bcc      	ldr	r3, [pc, #816]	; (8012c18 <LoRaMacInitialization+0x464>)
 80128e6:	4acd      	ldr	r2, [pc, #820]	; (8012c1c <LoRaMacInitialization+0x468>)
 80128e8:	589b      	ldr	r3, [r3, r2]
 80128ea:	b24a      	sxtb	r2, r1
 80128ec:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 80128ee:	197b      	adds	r3, r7, r5
 80128f0:	2206      	movs	r2, #6
 80128f2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80128f4:	4bc8      	ldr	r3, [pc, #800]	; (8012c18 <LoRaMacInitialization+0x464>)
 80128f6:	4ac9      	ldr	r2, [pc, #804]	; (8012c1c <LoRaMacInitialization+0x468>)
 80128f8:	589b      	ldr	r3, [r3, r2]
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	197a      	adds	r2, r7, r5
 80128fe:	0011      	movs	r1, r2
 8012900:	0018      	movs	r0, r3
 8012902:	f003 fe58 	bl	80165b6 <RegionGetPhyParam>
 8012906:	0003      	movs	r3, r0
 8012908:	001a      	movs	r2, r3
 801290a:	193b      	adds	r3, r7, r4
 801290c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 801290e:	193b      	adds	r3, r7, r4
 8012910:	6819      	ldr	r1, [r3, #0]
 8012912:	4bc1      	ldr	r3, [pc, #772]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012914:	4ac1      	ldr	r2, [pc, #772]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012916:	589b      	ldr	r3, [r3, r2]
 8012918:	b24a      	sxtb	r2, r1
 801291a:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801291c:	197b      	adds	r3, r7, r5
 801291e:	2210      	movs	r2, #16
 8012920:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012922:	4bbd      	ldr	r3, [pc, #756]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012924:	4abd      	ldr	r2, [pc, #756]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012926:	589b      	ldr	r3, [r3, r2]
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	197a      	adds	r2, r7, r5
 801292c:	0011      	movs	r1, r2
 801292e:	0018      	movs	r0, r3
 8012930:	f003 fe41 	bl	80165b6 <RegionGetPhyParam>
 8012934:	0003      	movs	r3, r0
 8012936:	001a      	movs	r2, r3
 8012938:	193b      	adds	r3, r7, r4
 801293a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801293c:	4bb6      	ldr	r3, [pc, #728]	; (8012c18 <LoRaMacInitialization+0x464>)
 801293e:	4ab7      	ldr	r2, [pc, #732]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012940:	589b      	ldr	r3, [r3, r2]
 8012942:	193a      	adds	r2, r7, r4
 8012944:	6812      	ldr	r2, [r2, #0]
 8012946:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012948:	197b      	adds	r3, r7, r5
 801294a:	2211      	movs	r2, #17
 801294c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801294e:	4bb2      	ldr	r3, [pc, #712]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012950:	4ab2      	ldr	r2, [pc, #712]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012952:	589b      	ldr	r3, [r3, r2]
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	197a      	adds	r2, r7, r5
 8012958:	0011      	movs	r1, r2
 801295a:	0018      	movs	r0, r3
 801295c:	f003 fe2b 	bl	80165b6 <RegionGetPhyParam>
 8012960:	0003      	movs	r3, r0
 8012962:	001a      	movs	r2, r3
 8012964:	193b      	adds	r3, r7, r4
 8012966:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012968:	4bab      	ldr	r3, [pc, #684]	; (8012c18 <LoRaMacInitialization+0x464>)
 801296a:	4aac      	ldr	r2, [pc, #688]	; (8012c1c <LoRaMacInitialization+0x468>)
 801296c:	589b      	ldr	r3, [r3, r2]
 801296e:	193a      	adds	r2, r7, r4
 8012970:	6812      	ldr	r2, [r2, #0]
 8012972:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012974:	197b      	adds	r3, r7, r5
 8012976:	2212      	movs	r2, #18
 8012978:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801297a:	4ba7      	ldr	r3, [pc, #668]	; (8012c18 <LoRaMacInitialization+0x464>)
 801297c:	4aa7      	ldr	r2, [pc, #668]	; (8012c1c <LoRaMacInitialization+0x468>)
 801297e:	589b      	ldr	r3, [r3, r2]
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	197a      	adds	r2, r7, r5
 8012984:	0011      	movs	r1, r2
 8012986:	0018      	movs	r0, r3
 8012988:	f003 fe15 	bl	80165b6 <RegionGetPhyParam>
 801298c:	0003      	movs	r3, r0
 801298e:	001a      	movs	r2, r3
 8012990:	193b      	adds	r3, r7, r4
 8012992:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012994:	4ba0      	ldr	r3, [pc, #640]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012996:	4aa1      	ldr	r2, [pc, #644]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012998:	589b      	ldr	r3, [r3, r2]
 801299a:	193a      	adds	r2, r7, r4
 801299c:	6812      	ldr	r2, [r2, #0]
 801299e:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80129a0:	197b      	adds	r3, r7, r5
 80129a2:	2213      	movs	r2, #19
 80129a4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80129a6:	4b9c      	ldr	r3, [pc, #624]	; (8012c18 <LoRaMacInitialization+0x464>)
 80129a8:	4a9c      	ldr	r2, [pc, #624]	; (8012c1c <LoRaMacInitialization+0x468>)
 80129aa:	589b      	ldr	r3, [r3, r2]
 80129ac:	781b      	ldrb	r3, [r3, #0]
 80129ae:	197a      	adds	r2, r7, r5
 80129b0:	0011      	movs	r1, r2
 80129b2:	0018      	movs	r0, r3
 80129b4:	f003 fdff 	bl	80165b6 <RegionGetPhyParam>
 80129b8:	0003      	movs	r3, r0
 80129ba:	001a      	movs	r2, r3
 80129bc:	193b      	adds	r3, r7, r4
 80129be:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80129c0:	4b95      	ldr	r3, [pc, #596]	; (8012c18 <LoRaMacInitialization+0x464>)
 80129c2:	4a96      	ldr	r2, [pc, #600]	; (8012c1c <LoRaMacInitialization+0x468>)
 80129c4:	589b      	ldr	r3, [r3, r2]
 80129c6:	193a      	adds	r2, r7, r4
 80129c8:	6812      	ldr	r2, [r2, #0]
 80129ca:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80129cc:	197b      	adds	r3, r7, r5
 80129ce:	2214      	movs	r2, #20
 80129d0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80129d2:	4b91      	ldr	r3, [pc, #580]	; (8012c18 <LoRaMacInitialization+0x464>)
 80129d4:	4a91      	ldr	r2, [pc, #580]	; (8012c1c <LoRaMacInitialization+0x468>)
 80129d6:	589b      	ldr	r3, [r3, r2]
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	197a      	adds	r2, r7, r5
 80129dc:	0011      	movs	r1, r2
 80129de:	0018      	movs	r0, r3
 80129e0:	f003 fde9 	bl	80165b6 <RegionGetPhyParam>
 80129e4:	0003      	movs	r3, r0
 80129e6:	001a      	movs	r2, r3
 80129e8:	193b      	adds	r3, r7, r4
 80129ea:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80129ec:	4b8a      	ldr	r3, [pc, #552]	; (8012c18 <LoRaMacInitialization+0x464>)
 80129ee:	4a8b      	ldr	r2, [pc, #556]	; (8012c1c <LoRaMacInitialization+0x468>)
 80129f0:	589b      	ldr	r3, [r3, r2]
 80129f2:	193a      	adds	r2, r7, r4
 80129f4:	6812      	ldr	r2, [r2, #0]
 80129f6:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80129f8:	197b      	adds	r3, r7, r5
 80129fa:	2217      	movs	r2, #23
 80129fc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80129fe:	4b86      	ldr	r3, [pc, #536]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012a00:	4a86      	ldr	r2, [pc, #536]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012a02:	589b      	ldr	r3, [r3, r2]
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	197a      	adds	r2, r7, r5
 8012a08:	0011      	movs	r1, r2
 8012a0a:	0018      	movs	r0, r3
 8012a0c:	f003 fdd3 	bl	80165b6 <RegionGetPhyParam>
 8012a10:	0003      	movs	r3, r0
 8012a12:	001a      	movs	r2, r3
 8012a14:	193b      	adds	r3, r7, r4
 8012a16:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012a18:	193b      	adds	r3, r7, r4
 8012a1a:	6819      	ldr	r1, [r3, #0]
 8012a1c:	4b7e      	ldr	r3, [pc, #504]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012a1e:	4a7f      	ldr	r2, [pc, #508]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012a20:	589b      	ldr	r3, [r3, r2]
 8012a22:	b2c9      	uxtb	r1, r1
 8012a24:	2225      	movs	r2, #37	; 0x25
 8012a26:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012a28:	197b      	adds	r3, r7, r5
 8012a2a:	2218      	movs	r2, #24
 8012a2c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012a2e:	4b7a      	ldr	r3, [pc, #488]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012a30:	4a7a      	ldr	r2, [pc, #488]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012a32:	589b      	ldr	r3, [r3, r2]
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	197a      	adds	r2, r7, r5
 8012a38:	0011      	movs	r1, r2
 8012a3a:	0018      	movs	r0, r3
 8012a3c:	f003 fdbb 	bl	80165b6 <RegionGetPhyParam>
 8012a40:	0003      	movs	r3, r0
 8012a42:	001a      	movs	r2, r3
 8012a44:	193b      	adds	r3, r7, r4
 8012a46:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012a48:	4b73      	ldr	r3, [pc, #460]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012a4a:	4a74      	ldr	r2, [pc, #464]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012a4c:	589b      	ldr	r3, [r3, r2]
 8012a4e:	193a      	adds	r2, r7, r4
 8012a50:	6812      	ldr	r2, [r2, #0]
 8012a52:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012a54:	4b70      	ldr	r3, [pc, #448]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012a56:	4a71      	ldr	r2, [pc, #452]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012a58:	589b      	ldr	r3, [r3, r2]
 8012a5a:	193a      	adds	r2, r7, r4
 8012a5c:	6812      	ldr	r2, [r2, #0]
 8012a5e:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012a60:	197b      	adds	r3, r7, r5
 8012a62:	2219      	movs	r2, #25
 8012a64:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012a66:	4b6c      	ldr	r3, [pc, #432]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012a68:	4a6c      	ldr	r2, [pc, #432]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012a6a:	589b      	ldr	r3, [r3, r2]
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	197a      	adds	r2, r7, r5
 8012a70:	0011      	movs	r1, r2
 8012a72:	0018      	movs	r0, r3
 8012a74:	f003 fd9f 	bl	80165b6 <RegionGetPhyParam>
 8012a78:	0003      	movs	r3, r0
 8012a7a:	001a      	movs	r2, r3
 8012a7c:	193b      	adds	r3, r7, r4
 8012a7e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012a80:	193b      	adds	r3, r7, r4
 8012a82:	6819      	ldr	r1, [r3, #0]
 8012a84:	4b64      	ldr	r3, [pc, #400]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012a86:	4a65      	ldr	r2, [pc, #404]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012a88:	589b      	ldr	r3, [r3, r2]
 8012a8a:	b2c9      	uxtb	r1, r1
 8012a8c:	222c      	movs	r2, #44	; 0x2c
 8012a8e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012a90:	193b      	adds	r3, r7, r4
 8012a92:	6819      	ldr	r1, [r3, #0]
 8012a94:	4b60      	ldr	r3, [pc, #384]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012a96:	4a61      	ldr	r2, [pc, #388]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012a98:	589b      	ldr	r3, [r3, r2]
 8012a9a:	b2c9      	uxtb	r1, r1
 8012a9c:	2234      	movs	r2, #52	; 0x34
 8012a9e:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012aa0:	197b      	adds	r3, r7, r5
 8012aa2:	221e      	movs	r2, #30
 8012aa4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012aa6:	4b5c      	ldr	r3, [pc, #368]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012aa8:	4a5c      	ldr	r2, [pc, #368]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012aaa:	589b      	ldr	r3, [r3, r2]
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	197a      	adds	r2, r7, r5
 8012ab0:	0011      	movs	r1, r2
 8012ab2:	0018      	movs	r0, r3
 8012ab4:	f003 fd7f 	bl	80165b6 <RegionGetPhyParam>
 8012ab8:	0003      	movs	r3, r0
 8012aba:	001a      	movs	r2, r3
 8012abc:	193b      	adds	r3, r7, r4
 8012abe:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012ac0:	193b      	adds	r3, r7, r4
 8012ac2:	6819      	ldr	r1, [r3, #0]
 8012ac4:	4b54      	ldr	r3, [pc, #336]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012ac6:	4a55      	ldr	r2, [pc, #340]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012ac8:	589b      	ldr	r3, [r3, r2]
 8012aca:	b2c9      	uxtb	r1, r1
 8012acc:	2238      	movs	r2, #56	; 0x38
 8012ace:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012ad0:	197b      	adds	r3, r7, r5
 8012ad2:	221f      	movs	r2, #31
 8012ad4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ad6:	4b50      	ldr	r3, [pc, #320]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012ad8:	4a50      	ldr	r2, [pc, #320]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012ada:	589b      	ldr	r3, [r3, r2]
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	197a      	adds	r2, r7, r5
 8012ae0:	0011      	movs	r1, r2
 8012ae2:	0018      	movs	r0, r3
 8012ae4:	f003 fd67 	bl	80165b6 <RegionGetPhyParam>
 8012ae8:	0003      	movs	r3, r0
 8012aea:	001a      	movs	r2, r3
 8012aec:	193b      	adds	r3, r7, r4
 8012aee:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012af0:	193b      	adds	r3, r7, r4
 8012af2:	6819      	ldr	r1, [r3, #0]
 8012af4:	4b48      	ldr	r3, [pc, #288]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012af6:	4a49      	ldr	r2, [pc, #292]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012af8:	589b      	ldr	r3, [r3, r2]
 8012afa:	b2c9      	uxtb	r1, r1
 8012afc:	2239      	movs	r2, #57	; 0x39
 8012afe:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012b00:	197b      	adds	r3, r7, r5
 8012b02:	2220      	movs	r2, #32
 8012b04:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012b06:	4b44      	ldr	r3, [pc, #272]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012b08:	4a44      	ldr	r2, [pc, #272]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012b0a:	589b      	ldr	r3, [r3, r2]
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	197a      	adds	r2, r7, r5
 8012b10:	0011      	movs	r1, r2
 8012b12:	0018      	movs	r0, r3
 8012b14:	f003 fd4f 	bl	80165b6 <RegionGetPhyParam>
 8012b18:	0003      	movs	r3, r0
 8012b1a:	001a      	movs	r2, r3
 8012b1c:	193b      	adds	r3, r7, r4
 8012b1e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012b20:	4b3d      	ldr	r3, [pc, #244]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012b22:	4a3e      	ldr	r2, [pc, #248]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012b24:	589b      	ldr	r3, [r3, r2]
 8012b26:	193a      	adds	r2, r7, r4
 8012b28:	6812      	ldr	r2, [r2, #0]
 8012b2a:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012b2c:	197b      	adds	r3, r7, r5
 8012b2e:	2221      	movs	r2, #33	; 0x21
 8012b30:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012b32:	4b39      	ldr	r3, [pc, #228]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012b34:	4a39      	ldr	r2, [pc, #228]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012b36:	589b      	ldr	r3, [r3, r2]
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	197a      	adds	r2, r7, r5
 8012b3c:	0011      	movs	r1, r2
 8012b3e:	0018      	movs	r0, r3
 8012b40:	f003 fd39 	bl	80165b6 <RegionGetPhyParam>
 8012b44:	0003      	movs	r3, r0
 8012b46:	001a      	movs	r2, r3
 8012b48:	193b      	adds	r3, r7, r4
 8012b4a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012b4c:	4b32      	ldr	r3, [pc, #200]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012b4e:	4a33      	ldr	r2, [pc, #204]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012b50:	589b      	ldr	r3, [r3, r2]
 8012b52:	193a      	adds	r2, r7, r4
 8012b54:	6812      	ldr	r2, [r2, #0]
 8012b56:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012b58:	197b      	adds	r3, r7, r5
 8012b5a:	220b      	movs	r2, #11
 8012b5c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012b5e:	4b2e      	ldr	r3, [pc, #184]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012b60:	4a2e      	ldr	r2, [pc, #184]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012b62:	589b      	ldr	r3, [r3, r2]
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	197a      	adds	r2, r7, r5
 8012b68:	0011      	movs	r1, r2
 8012b6a:	0018      	movs	r0, r3
 8012b6c:	f003 fd23 	bl	80165b6 <RegionGetPhyParam>
 8012b70:	0003      	movs	r3, r0
 8012b72:	001a      	movs	r2, r3
 8012b74:	193b      	adds	r3, r7, r4
 8012b76:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8012b78:	193b      	adds	r3, r7, r4
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	b299      	uxth	r1, r3
 8012b7e:	4a26      	ldr	r2, [pc, #152]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012b80:	23fd      	movs	r3, #253	; 0xfd
 8012b82:	009b      	lsls	r3, r3, #2
 8012b84:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012b86:	197b      	adds	r3, r7, r5
 8012b88:	220c      	movs	r2, #12
 8012b8a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012b8c:	4b22      	ldr	r3, [pc, #136]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012b8e:	4a23      	ldr	r2, [pc, #140]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012b90:	589b      	ldr	r3, [r3, r2]
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	197a      	adds	r2, r7, r5
 8012b96:	0011      	movs	r1, r2
 8012b98:	0018      	movs	r0, r3
 8012b9a:	f003 fd0c 	bl	80165b6 <RegionGetPhyParam>
 8012b9e:	0003      	movs	r3, r0
 8012ba0:	001a      	movs	r2, r3
 8012ba2:	193b      	adds	r3, r7, r4
 8012ba4:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 8012ba6:	193b      	adds	r3, r7, r4
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	b299      	uxth	r1, r3
 8012bac:	4b1a      	ldr	r3, [pc, #104]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bae:	4a1f      	ldr	r2, [pc, #124]	; (8012c2c <LoRaMacInitialization+0x478>)
 8012bb0:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8012bb2:	4b19      	ldr	r3, [pc, #100]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bb4:	4a19      	ldr	r2, [pc, #100]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012bb6:	589b      	ldr	r3, [r3, r2]
 8012bb8:	2224      	movs	r2, #36	; 0x24
 8012bba:	2101      	movs	r1, #1
 8012bbc:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8012bbe:	4b16      	ldr	r3, [pc, #88]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bc0:	4a16      	ldr	r2, [pc, #88]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012bc2:	589b      	ldr	r3, [r3, r2]
 8012bc4:	220a      	movs	r2, #10
 8012bc6:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8012bc8:	4b13      	ldr	r3, [pc, #76]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bca:	4a14      	ldr	r2, [pc, #80]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012bcc:	589b      	ldr	r3, [r3, r2]
 8012bce:	2206      	movs	r2, #6
 8012bd0:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8012bd2:	4b11      	ldr	r3, [pc, #68]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bd4:	4a11      	ldr	r2, [pc, #68]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012bd6:	589b      	ldr	r3, [r3, r2]
 8012bd8:	4a0f      	ldr	r2, [pc, #60]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bda:	4910      	ldr	r1, [pc, #64]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012bdc:	5852      	ldr	r2, [r2, r1]
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	2188      	movs	r1, #136	; 0x88
 8012be2:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8012be4:	4b0c      	ldr	r3, [pc, #48]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012be6:	4a0d      	ldr	r2, [pc, #52]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012be8:	589a      	ldr	r2, [r3, r2]
 8012bea:	4b0b      	ldr	r3, [pc, #44]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bec:	490b      	ldr	r1, [pc, #44]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012bee:	585b      	ldr	r3, [r3, r1]
 8012bf0:	7b11      	ldrb	r1, [r2, #12]
 8012bf2:	228c      	movs	r2, #140	; 0x8c
 8012bf4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8012bf6:	4b08      	ldr	r3, [pc, #32]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bf8:	4a08      	ldr	r2, [pc, #32]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012bfa:	589b      	ldr	r3, [r3, r2]
 8012bfc:	4a06      	ldr	r2, [pc, #24]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012bfe:	4907      	ldr	r1, [pc, #28]	; (8012c1c <LoRaMacInitialization+0x468>)
 8012c00:	5852      	ldr	r2, [r2, r1]
 8012c02:	691b      	ldr	r3, [r3, #16]
 8012c04:	2190      	movs	r1, #144	; 0x90
 8012c06:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8012c08:	4b03      	ldr	r3, [pc, #12]	; (8012c18 <LoRaMacInitialization+0x464>)
 8012c0a:	e011      	b.n	8012c30 <LoRaMacInitialization+0x47c>
 8012c0c:	080126b1 	.word	0x080126b1
 8012c10:	20000a40 	.word	0x20000a40
 8012c14:	0000048c 	.word	0x0000048c
 8012c18:	200005b4 	.word	0x200005b4
 8012c1c:	00000484 	.word	0x00000484
 8012c20:	00000412 	.word	0x00000412
 8012c24:	00000411 	.word	0x00000411
 8012c28:	01000300 	.word	0x01000300
 8012c2c:	000003f6 	.word	0x000003f6
 8012c30:	4a9a      	ldr	r2, [pc, #616]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c32:	589b      	ldr	r3, [r3, r2]
 8012c34:	4a9a      	ldr	r2, [pc, #616]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c36:	4999      	ldr	r1, [pc, #612]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c38:	5852      	ldr	r2, [r2, r1]
 8012c3a:	695b      	ldr	r3, [r3, #20]
 8012c3c:	2194      	movs	r1, #148	; 0x94
 8012c3e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8012c40:	4b97      	ldr	r3, [pc, #604]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c42:	4a96      	ldr	r2, [pc, #600]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c44:	589b      	ldr	r3, [r3, r2]
 8012c46:	4a96      	ldr	r2, [pc, #600]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c48:	4994      	ldr	r1, [pc, #592]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c4a:	5852      	ldr	r2, [r2, r1]
 8012c4c:	699b      	ldr	r3, [r3, #24]
 8012c4e:	2198      	movs	r1, #152	; 0x98
 8012c50:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8012c52:	4b93      	ldr	r3, [pc, #588]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c54:	4a91      	ldr	r2, [pc, #580]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c56:	589b      	ldr	r3, [r3, r2]
 8012c58:	4a91      	ldr	r2, [pc, #580]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c5a:	4990      	ldr	r1, [pc, #576]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c5c:	5852      	ldr	r2, [r2, r1]
 8012c5e:	69db      	ldr	r3, [r3, #28]
 8012c60:	219c      	movs	r1, #156	; 0x9c
 8012c62:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8012c64:	4b8e      	ldr	r3, [pc, #568]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c66:	4a8d      	ldr	r2, [pc, #564]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c68:	589b      	ldr	r3, [r3, r2]
 8012c6a:	4a8d      	ldr	r2, [pc, #564]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c6c:	498b      	ldr	r1, [pc, #556]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c6e:	5852      	ldr	r2, [r2, r1]
 8012c70:	6a1b      	ldr	r3, [r3, #32]
 8012c72:	21a0      	movs	r1, #160	; 0xa0
 8012c74:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8012c76:	4b8a      	ldr	r3, [pc, #552]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c78:	4a88      	ldr	r2, [pc, #544]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c7a:	589a      	ldr	r2, [r3, r2]
 8012c7c:	4b88      	ldr	r3, [pc, #544]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c7e:	4987      	ldr	r1, [pc, #540]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c80:	585b      	ldr	r3, [r3, r1]
 8012c82:	2124      	movs	r1, #36	; 0x24
 8012c84:	5c51      	ldrb	r1, [r2, r1]
 8012c86:	22a4      	movs	r2, #164	; 0xa4
 8012c88:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012c8a:	211c      	movs	r1, #28
 8012c8c:	187b      	adds	r3, r7, r1
 8012c8e:	2200      	movs	r2, #0
 8012c90:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8012c92:	187b      	adds	r3, r7, r1
 8012c94:	2200      	movs	r2, #0
 8012c96:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012c98:	4b81      	ldr	r3, [pc, #516]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012c9a:	4a80      	ldr	r2, [pc, #512]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012c9c:	589b      	ldr	r3, [r3, r2]
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	187a      	adds	r2, r7, r1
 8012ca2:	0011      	movs	r1, r2
 8012ca4:	0018      	movs	r0, r3
 8012ca6:	f003 fcc2 	bl	801662e <RegionInitDefaults>

    ResetMacParameters( );
 8012caa:	f7fe fe19 	bl	80118e0 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8012cae:	4b7c      	ldr	r3, [pc, #496]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012cb0:	4a7a      	ldr	r2, [pc, #488]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012cb2:	589b      	ldr	r3, [r3, r2]
 8012cb4:	227d      	movs	r2, #125	; 0x7d
 8012cb6:	2101      	movs	r1, #1
 8012cb8:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 8012cba:	4a79      	ldr	r2, [pc, #484]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012cbc:	23d1      	movs	r3, #209	; 0xd1
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	6979      	ldr	r1, [r7, #20]
 8012cc2:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8012cc4:	4a76      	ldr	r2, [pc, #472]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012cc6:	23d2      	movs	r3, #210	; 0xd2
 8012cc8:	009b      	lsls	r3, r3, #2
 8012cca:	6939      	ldr	r1, [r7, #16]
 8012ccc:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 8012cce:	4b74      	ldr	r3, [pc, #464]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012cd0:	4a74      	ldr	r2, [pc, #464]	; (8012ea4 <LoRaMacInitialization+0x6f0>)
 8012cd2:	2100      	movs	r1, #0
 8012cd4:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8012cd6:	4a72      	ldr	r2, [pc, #456]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012cd8:	23d0      	movs	r3, #208	; 0xd0
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	2101      	movs	r1, #1
 8012cde:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8012ce0:	4b6f      	ldr	r3, [pc, #444]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012ce2:	4a6e      	ldr	r2, [pc, #440]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012ce4:	589a      	ldr	r2, [r3, r2]
 8012ce6:	23a8      	movs	r3, #168	; 0xa8
 8012ce8:	005b      	lsls	r3, r3, #1
 8012cea:	2100      	movs	r1, #0
 8012cec:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8012cee:	4b6c      	ldr	r3, [pc, #432]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012cf0:	4a6a      	ldr	r2, [pc, #424]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012cf2:	589a      	ldr	r2, [r3, r2]
 8012cf4:	23aa      	movs	r3, #170	; 0xaa
 8012cf6:	005b      	lsls	r3, r3, #1
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012cfc:	4b6a      	ldr	r3, [pc, #424]	; (8012ea8 <LoRaMacInitialization+0x6f4>)
 8012cfe:	2201      	movs	r2, #1
 8012d00:	4251      	negs	r1, r2
 8012d02:	486a      	ldr	r0, [pc, #424]	; (8012eac <LoRaMacInitialization+0x6f8>)
 8012d04:	2200      	movs	r2, #0
 8012d06:	9200      	str	r2, [sp, #0]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	f009 fbe9 	bl	801c4e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012d0e:	4b68      	ldr	r3, [pc, #416]	; (8012eb0 <LoRaMacInitialization+0x6fc>)
 8012d10:	2201      	movs	r2, #1
 8012d12:	4251      	negs	r1, r2
 8012d14:	4867      	ldr	r0, [pc, #412]	; (8012eb4 <LoRaMacInitialization+0x700>)
 8012d16:	2200      	movs	r2, #0
 8012d18:	9200      	str	r2, [sp, #0]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f009 fbe0 	bl	801c4e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012d20:	4b65      	ldr	r3, [pc, #404]	; (8012eb8 <LoRaMacInitialization+0x704>)
 8012d22:	2201      	movs	r2, #1
 8012d24:	4251      	negs	r1, r2
 8012d26:	4865      	ldr	r0, [pc, #404]	; (8012ebc <LoRaMacInitialization+0x708>)
 8012d28:	2200      	movs	r2, #0
 8012d2a:	9200      	str	r2, [sp, #0]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	f009 fbd7 	bl	801c4e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8012d32:	4b63      	ldr	r3, [pc, #396]	; (8012ec0 <LoRaMacInitialization+0x70c>)
 8012d34:	2201      	movs	r2, #1
 8012d36:	4251      	negs	r1, r2
 8012d38:	4862      	ldr	r0, [pc, #392]	; (8012ec4 <LoRaMacInitialization+0x710>)
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	9200      	str	r2, [sp, #0]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f009 fbce 	bl	801c4e0 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 8012d44:	4b56      	ldr	r3, [pc, #344]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012d46:	4a55      	ldr	r2, [pc, #340]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012d48:	589d      	ldr	r5, [r3, r2]
 8012d4a:	23ac      	movs	r3, #172	; 0xac
 8012d4c:	005c      	lsls	r4, r3, #1
 8012d4e:	003b      	movs	r3, r7
 8012d50:	0018      	movs	r0, r3
 8012d52:	f009 fb95 	bl	801c480 <SysTimeGetMcuTime>
 8012d56:	003a      	movs	r2, r7
 8012d58:	192b      	adds	r3, r5, r4
 8012d5a:	ca03      	ldmia	r2!, {r0, r1}
 8012d5c:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012d5e:	4a50      	ldr	r2, [pc, #320]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012d60:	23d3      	movs	r3, #211	; 0xd3
 8012d62:	009b      	lsls	r3, r3, #2
 8012d64:	4958      	ldr	r1, [pc, #352]	; (8012ec8 <LoRaMacInitialization+0x714>)
 8012d66:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012d68:	4a4d      	ldr	r2, [pc, #308]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012d6a:	23d5      	movs	r3, #213	; 0xd5
 8012d6c:	009b      	lsls	r3, r3, #2
 8012d6e:	4957      	ldr	r1, [pc, #348]	; (8012ecc <LoRaMacInitialization+0x718>)
 8012d70:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012d72:	4a4b      	ldr	r2, [pc, #300]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012d74:	23d7      	movs	r3, #215	; 0xd7
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	4955      	ldr	r1, [pc, #340]	; (8012ed0 <LoRaMacInitialization+0x71c>)
 8012d7a:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012d7c:	4a48      	ldr	r2, [pc, #288]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012d7e:	23d4      	movs	r3, #212	; 0xd4
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	4954      	ldr	r1, [pc, #336]	; (8012ed4 <LoRaMacInitialization+0x720>)
 8012d84:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012d86:	4a46      	ldr	r2, [pc, #280]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012d88:	23d6      	movs	r3, #214	; 0xd6
 8012d8a:	009b      	lsls	r3, r3, #2
 8012d8c:	4952      	ldr	r1, [pc, #328]	; (8012ed8 <LoRaMacInitialization+0x724>)
 8012d8e:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8012d90:	4b52      	ldr	r3, [pc, #328]	; (8012edc <LoRaMacInitialization+0x728>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a52      	ldr	r2, [pc, #328]	; (8012ee0 <LoRaMacInitialization+0x72c>)
 8012d96:	0010      	movs	r0, r2
 8012d98:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8012d9a:	4b52      	ldr	r3, [pc, #328]	; (8012ee4 <LoRaMacInitialization+0x730>)
 8012d9c:	0018      	movs	r0, r3
 8012d9e:	f7fa f813 	bl	800cdc8 <SecureElementInit>
 8012da2:	1e03      	subs	r3, r0, #0
 8012da4:	d001      	beq.n	8012daa <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012da6:	2311      	movs	r3, #17
 8012da8:	e073      	b.n	8012e92 <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8012daa:	4b4f      	ldr	r3, [pc, #316]	; (8012ee8 <LoRaMacInitialization+0x734>)
 8012dac:	0018      	movs	r0, r3
 8012dae:	f002 fc0d 	bl	80155cc <LoRaMacCryptoInit>
 8012db2:	1e03      	subs	r3, r0, #0
 8012db4:	d001      	beq.n	8012dba <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012db6:	2311      	movs	r3, #17
 8012db8:	e06b      	b.n	8012e92 <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8012dba:	4b4c      	ldr	r3, [pc, #304]	; (8012eec <LoRaMacInitialization+0x738>)
 8012dbc:	0018      	movs	r0, r3
 8012dbe:	f001 fc0d 	bl	80145dc <LoRaMacCommandsInit>
 8012dc2:	1e03      	subs	r3, r0, #0
 8012dc4:	d001      	beq.n	8012dca <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012dc6:	2313      	movs	r3, #19
 8012dc8:	e063      	b.n	8012e92 <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012dca:	4b35      	ldr	r3, [pc, #212]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012dcc:	4a33      	ldr	r2, [pc, #204]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012dce:	589b      	ldr	r3, [r3, r2]
 8012dd0:	3350      	adds	r3, #80	; 0x50
 8012dd2:	0018      	movs	r0, r3
 8012dd4:	f002 fd10 	bl	80157f8 <LoRaMacCryptoSetMulticastReference>
 8012dd8:	1e03      	subs	r3, r0, #0
 8012dda:	d001      	beq.n	8012de0 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012ddc:	2311      	movs	r3, #17
 8012dde:	e058      	b.n	8012e92 <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012de0:	4b3e      	ldr	r3, [pc, #248]	; (8012edc <LoRaMacInitialization+0x728>)
 8012de2:	695b      	ldr	r3, [r3, #20]
 8012de4:	4798      	blx	r3
 8012de6:	0003      	movs	r3, r0
 8012de8:	0018      	movs	r0, r3
 8012dea:	f006 f84f 	bl	8018e8c <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8012dee:	4b3b      	ldr	r3, [pc, #236]	; (8012edc <LoRaMacInitialization+0x728>)
 8012df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012df2:	4a2b      	ldr	r2, [pc, #172]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012df4:	4929      	ldr	r1, [pc, #164]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012df6:	5852      	ldr	r2, [r2, r1]
 8012df8:	217d      	movs	r1, #125	; 0x7d
 8012dfa:	5c52      	ldrb	r2, [r2, r1]
 8012dfc:	0010      	movs	r0, r2
 8012dfe:	4798      	blx	r3
    Radio.Sleep( );
 8012e00:	4b36      	ldr	r3, [pc, #216]	; (8012edc <LoRaMacInitialization+0x728>)
 8012e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e04:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8012e06:	2144      	movs	r1, #68	; 0x44
 8012e08:	187b      	adds	r3, r7, r1
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 8012e0e:	187b      	adds	r3, r7, r1
 8012e10:	2200      	movs	r2, #0
 8012e12:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d007      	beq.n	8012e2a <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	685a      	ldr	r2, [r3, #4]
 8012e1e:	187b      	adds	r3, r7, r1
 8012e20:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	68da      	ldr	r2, [r3, #12]
 8012e26:	187b      	adds	r3, r7, r1
 8012e28:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8012e2a:	2124      	movs	r1, #36	; 0x24
 8012e2c:	187b      	adds	r3, r7, r1
 8012e2e:	4a30      	ldr	r2, [pc, #192]	; (8012ef0 <LoRaMacInitialization+0x73c>)
 8012e30:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8012e32:	187b      	adds	r3, r7, r1
 8012e34:	4a2f      	ldr	r2, [pc, #188]	; (8012ef4 <LoRaMacInitialization+0x740>)
 8012e36:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8012e38:	187b      	adds	r3, r7, r1
 8012e3a:	4a2f      	ldr	r2, [pc, #188]	; (8012ef8 <LoRaMacInitialization+0x744>)
 8012e3c:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8012e3e:	187b      	adds	r3, r7, r1
 8012e40:	4a2e      	ldr	r2, [pc, #184]	; (8012efc <LoRaMacInitialization+0x748>)
 8012e42:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8012e44:	4b16      	ldr	r3, [pc, #88]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012e46:	4a15      	ldr	r2, [pc, #84]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012e48:	589b      	ldr	r3, [r3, r2]
 8012e4a:	334c      	adds	r3, #76	; 0x4c
 8012e4c:	001a      	movs	r2, r3
 8012e4e:	187b      	adds	r3, r7, r1
 8012e50:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8012e52:	4b13      	ldr	r3, [pc, #76]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012e54:	4a11      	ldr	r2, [pc, #68]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012e56:	589b      	ldr	r3, [r3, r2]
 8012e58:	001a      	movs	r2, r3
 8012e5a:	187b      	adds	r3, r7, r1
 8012e5c:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8012e5e:	4b10      	ldr	r3, [pc, #64]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012e60:	4a0e      	ldr	r2, [pc, #56]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012e62:	589b      	ldr	r3, [r3, r2]
 8012e64:	3384      	adds	r3, #132	; 0x84
 8012e66:	001a      	movs	r2, r3
 8012e68:	187b      	adds	r3, r7, r1
 8012e6a:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8012e6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ea0 <LoRaMacInitialization+0x6ec>)
 8012e6e:	4a0b      	ldr	r2, [pc, #44]	; (8012e9c <LoRaMacInitialization+0x6e8>)
 8012e70:	589b      	ldr	r3, [r3, r2]
 8012e72:	3350      	adds	r3, #80	; 0x50
 8012e74:	001a      	movs	r2, r3
 8012e76:	0008      	movs	r0, r1
 8012e78:	187b      	adds	r3, r7, r1
 8012e7a:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8012e7c:	4a20      	ldr	r2, [pc, #128]	; (8012f00 <LoRaMacInitialization+0x74c>)
 8012e7e:	2344      	movs	r3, #68	; 0x44
 8012e80:	18f9      	adds	r1, r7, r3
 8012e82:	183b      	adds	r3, r7, r0
 8012e84:	0018      	movs	r0, r3
 8012e86:	f001 f994 	bl	80141b2 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012e8a:	2001      	movs	r0, #1
 8012e8c:	f7fc fe10 	bl	800fab0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012e90:	2300      	movs	r3, #0
}
 8012e92:	0018      	movs	r0, r3
 8012e94:	46bd      	mov	sp, r7
 8012e96:	b016      	add	sp, #88	; 0x58
 8012e98:	bdb0      	pop	{r4, r5, r7, pc}
 8012e9a:	46c0      	nop			; (mov r8, r8)
 8012e9c:	00000484 	.word	0x00000484
 8012ea0:	200005b4 	.word	0x200005b4
 8012ea4:	00000481 	.word	0x00000481
 8012ea8:	0800feb5 	.word	0x0800feb5
 8012eac:	2000091c 	.word	0x2000091c
 8012eb0:	0800ff41 	.word	0x0800ff41
 8012eb4:	20000934 	.word	0x20000934
 8012eb8:	0800ffd5 	.word	0x0800ffd5
 8012ebc:	2000094c 	.word	0x2000094c
 8012ec0:	08010071 	.word	0x08010071
 8012ec4:	200009ac 	.word	0x200009ac
 8012ec8:	0800e959 	.word	0x0800e959
 8012ecc:	0800e9d5 	.word	0x0800e9d5
 8012ed0:	0800eac9 	.word	0x0800eac9
 8012ed4:	0800ea75 	.word	0x0800ea75
 8012ed8:	0800eb0d 	.word	0x0800eb0d
 8012edc:	0801f358 	.word	0x0801f358
 8012ee0:	20000900 	.word	0x20000900
 8012ee4:	08012681 	.word	0x08012681
 8012ee8:	08012671 	.word	0x08012671
 8012eec:	08012691 	.word	0x08012691
 8012ef0:	20000a18 	.word	0x20000a18
 8012ef4:	200009d0 	.word	0x200009d0
 8012ef8:	20000a04 	.word	0x20000a04
 8012efc:	20000a35 	.word	0x20000a35
 8012f00:	080126a1 	.word	0x080126a1

08012f04 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012f08:	4a04      	ldr	r2, [pc, #16]	; (8012f1c <LoRaMacStart+0x18>)
 8012f0a:	23d0      	movs	r3, #208	; 0xd0
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	2100      	movs	r1, #0
 8012f10:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	0018      	movs	r0, r3
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	46c0      	nop			; (mov r8, r8)
 8012f1c:	200005b4 	.word	0x200005b4

08012f20 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012f20:	b590      	push	{r4, r7, lr}
 8012f22:	b08b      	sub	sp, #44	; 0x2c
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	0002      	movs	r2, r0
 8012f28:	6039      	str	r1, [r7, #0]
 8012f2a:	1dfb      	adds	r3, r7, #7
 8012f2c:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8012f2e:	4b4f      	ldr	r3, [pc, #316]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012f30:	4a4f      	ldr	r2, [pc, #316]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012f32:	589b      	ldr	r3, [r3, r2]
 8012f34:	2280      	movs	r2, #128	; 0x80
 8012f36:	589b      	ldr	r3, [r3, r2]
 8012f38:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8012f3a:	4b4c      	ldr	r3, [pc, #304]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012f3c:	4a4c      	ldr	r2, [pc, #304]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012f3e:	589b      	ldr	r3, [r3, r2]
 8012f40:	2205      	movs	r2, #5
 8012f42:	569a      	ldrsb	r2, [r3, r2]
 8012f44:	230f      	movs	r3, #15
 8012f46:	18fb      	adds	r3, r7, r3
 8012f48:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012f4a:	4b48      	ldr	r3, [pc, #288]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012f4c:	4a48      	ldr	r2, [pc, #288]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012f4e:	589b      	ldr	r3, [r3, r2]
 8012f50:	2204      	movs	r2, #4
 8012f52:	569a      	ldrsb	r2, [r3, r2]
 8012f54:	230e      	movs	r3, #14
 8012f56:	18fb      	adds	r3, r7, r3
 8012f58:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d101      	bne.n	8012f68 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f64:	2303      	movs	r3, #3
 8012f66:	e07d      	b.n	8013064 <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8012f68:	4b40      	ldr	r3, [pc, #256]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012f6a:	4a41      	ldr	r2, [pc, #260]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012f6c:	5899      	ldr	r1, [r3, r2]
 8012f6e:	2014      	movs	r0, #20
 8012f70:	183b      	adds	r3, r7, r0
 8012f72:	22b0      	movs	r2, #176	; 0xb0
 8012f74:	0052      	lsls	r2, r2, #1
 8012f76:	588a      	ldr	r2, [r1, r2]
 8012f78:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 8012f7a:	183b      	adds	r3, r7, r0
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8012f80:	4b3a      	ldr	r3, [pc, #232]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012f82:	4a3b      	ldr	r2, [pc, #236]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012f84:	589b      	ldr	r3, [r3, r2]
 8012f86:	227e      	movs	r2, #126	; 0x7e
 8012f88:	5c9a      	ldrb	r2, [r3, r2]
 8012f8a:	183b      	adds	r3, r7, r0
 8012f8c:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8012f8e:	4b37      	ldr	r3, [pc, #220]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012f90:	4a37      	ldr	r2, [pc, #220]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012f92:	589b      	ldr	r3, [r3, r2]
 8012f94:	2280      	movs	r2, #128	; 0x80
 8012f96:	589a      	ldr	r2, [r3, r2]
 8012f98:	183b      	adds	r3, r7, r0
 8012f9a:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012f9c:	4a33      	ldr	r2, [pc, #204]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012f9e:	23fd      	movs	r3, #253	; 0xfd
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	5ad2      	ldrh	r2, [r2, r3]
 8012fa4:	183b      	adds	r3, r7, r0
 8012fa6:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012fa8:	4b30      	ldr	r3, [pc, #192]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012faa:	4a32      	ldr	r2, [pc, #200]	; (8013074 <LoRaMacQueryTxPossible+0x154>)
 8012fac:	5a9a      	ldrh	r2, [r3, r2]
 8012fae:	183b      	adds	r3, r7, r0
 8012fb0:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012fb2:	4b2e      	ldr	r3, [pc, #184]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012fb4:	4a2e      	ldr	r2, [pc, #184]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012fb6:	589b      	ldr	r3, [r3, r2]
 8012fb8:	2285      	movs	r2, #133	; 0x85
 8012fba:	569a      	ldrsb	r2, [r3, r2]
 8012fbc:	183b      	adds	r3, r7, r0
 8012fbe:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012fc0:	4b2a      	ldr	r3, [pc, #168]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012fc2:	4a2b      	ldr	r2, [pc, #172]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012fc4:	589b      	ldr	r3, [r3, r2]
 8012fc6:	2284      	movs	r2, #132	; 0x84
 8012fc8:	569a      	ldrsb	r2, [r3, r2]
 8012fca:	183b      	adds	r3, r7, r0
 8012fcc:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012fce:	4b27      	ldr	r3, [pc, #156]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012fd0:	4a27      	ldr	r2, [pc, #156]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012fd2:	589b      	ldr	r3, [r3, r2]
 8012fd4:	22b8      	movs	r2, #184	; 0xb8
 8012fd6:	5c9a      	ldrb	r2, [r3, r2]
 8012fd8:	183b      	adds	r3, r7, r0
 8012fda:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8012fdc:	4b23      	ldr	r3, [pc, #140]	; (801306c <LoRaMacQueryTxPossible+0x14c>)
 8012fde:	4a24      	ldr	r2, [pc, #144]	; (8013070 <LoRaMacQueryTxPossible+0x150>)
 8012fe0:	589b      	ldr	r3, [r3, r2]
 8012fe2:	781a      	ldrb	r2, [r3, #0]
 8012fe4:	183b      	adds	r3, r7, r0
 8012fe6:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8012fe8:	2310      	movs	r3, #16
 8012fea:	18fb      	adds	r3, r7, r3
 8012fec:	220e      	movs	r2, #14
 8012fee:	18ba      	adds	r2, r7, r2
 8012ff0:	240f      	movs	r4, #15
 8012ff2:	1939      	adds	r1, r7, r4
 8012ff4:	1838      	adds	r0, r7, r0
 8012ff6:	f001 f8c4 	bl	8014182 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012ffa:	193b      	adds	r3, r7, r4
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	b25b      	sxtb	r3, r3
 8013000:	0018      	movs	r0, r3
 8013002:	f7fd f9e7 	bl	80103d4 <GetMaxAppPayloadWithoutFOptsLength>
 8013006:	0003      	movs	r3, r0
 8013008:	001a      	movs	r2, r3
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801300e:	2308      	movs	r3, #8
 8013010:	18fb      	adds	r3, r7, r3
 8013012:	0018      	movs	r0, r3
 8013014:	f001 fbf6 	bl	8014804 <LoRaMacCommandsGetSizeSerializedCmds>
 8013018:	1e03      	subs	r3, r0, #0
 801301a:	d001      	beq.n	8013020 <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801301c:	2313      	movs	r3, #19
 801301e:	e021      	b.n	8013064 <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	2b0f      	cmp	r3, #15
 8013024:	d81a      	bhi.n	801305c <LoRaMacQueryTxPossible+0x13c>
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	785b      	ldrb	r3, [r3, #1]
 801302a:	001a      	movs	r2, r3
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	429a      	cmp	r2, r3
 8013030:	d314      	bcc.n	801305c <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	785a      	ldrb	r2, [r3, #1]
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	b2db      	uxtb	r3, r3
 801303a:	1ad3      	subs	r3, r2, r3
 801303c:	b2da      	uxtb	r2, r3
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	785b      	ldrb	r3, [r3, #1]
 8013046:	0019      	movs	r1, r3
 8013048:	1dfb      	adds	r3, r7, #7
 801304a:	781a      	ldrb	r2, [r3, #0]
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	18d3      	adds	r3, r2, r3
 8013050:	4299      	cmp	r1, r3
 8013052:	d301      	bcc.n	8013058 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 8013054:	2300      	movs	r3, #0
 8013056:	e005      	b.n	8013064 <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013058:	2308      	movs	r3, #8
 801305a:	e003      	b.n	8013064 <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	2200      	movs	r2, #0
 8013060:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013062:	2308      	movs	r3, #8
    }
}
 8013064:	0018      	movs	r0, r3
 8013066:	46bd      	mov	sp, r7
 8013068:	b00b      	add	sp, #44	; 0x2c
 801306a:	bd90      	pop	{r4, r7, pc}
 801306c:	200005b4 	.word	0x200005b4
 8013070:	00000484 	.word	0x00000484
 8013074:	000003f6 	.word	0x000003f6

08013078 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013078:	b590      	push	{r4, r7, lr}
 801307a:	b087      	sub	sp, #28
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013080:	2317      	movs	r3, #23
 8013082:	18fb      	adds	r3, r7, r3
 8013084:	2200      	movs	r2, #0
 8013086:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d101      	bne.n	8013092 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801308e:	2303      	movs	r3, #3
 8013090:	e146      	b.n	8013320 <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	2b28      	cmp	r3, #40	; 0x28
 8013098:	d900      	bls.n	801309c <LoRaMacMibGetRequestConfirm+0x24>
 801309a:	e135      	b.n	8013308 <LoRaMacMibGetRequestConfirm+0x290>
 801309c:	009a      	lsls	r2, r3, #2
 801309e:	4ba2      	ldr	r3, [pc, #648]	; (8013328 <LoRaMacMibGetRequestConfirm+0x2b0>)
 80130a0:	18d3      	adds	r3, r2, r3
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 80130a6:	4ba1      	ldr	r3, [pc, #644]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80130a8:	4aa1      	ldr	r2, [pc, #644]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80130aa:	589b      	ldr	r3, [r3, r2]
 80130ac:	227c      	movs	r2, #124	; 0x7c
 80130ae:	5c9a      	ldrb	r2, [r3, r2]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	711a      	strb	r2, [r3, #4]
            break;
 80130b4:	e131      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 80130b6:	4b9d      	ldr	r3, [pc, #628]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80130b8:	4a9d      	ldr	r2, [pc, #628]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80130ba:	589a      	ldr	r2, [r3, r2]
 80130bc:	23b2      	movs	r3, #178	; 0xb2
 80130be:	005b      	lsls	r3, r3, #1
 80130c0:	5cd2      	ldrb	r2, [r2, r3]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	711a      	strb	r2, [r3, #4]
            break;
 80130c6:	e128      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80130c8:	f7fa fade 	bl	800d688 <SecureElementGetDevEui>
 80130cc:	0002      	movs	r2, r0
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	605a      	str	r2, [r3, #4]
            break;
 80130d2:	e122      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80130d4:	f7fa fafc 	bl	800d6d0 <SecureElementGetJoinEui>
 80130d8:	0002      	movs	r2, r0
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	605a      	str	r2, [r3, #4]
            break;
 80130de:	e11c      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 80130e0:	4b92      	ldr	r3, [pc, #584]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80130e2:	4a93      	ldr	r2, [pc, #588]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80130e4:	589b      	ldr	r3, [r3, r2]
 80130e6:	227e      	movs	r2, #126	; 0x7e
 80130e8:	5c9a      	ldrb	r2, [r3, r2]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	711a      	strb	r2, [r3, #4]
            break;
 80130ee:	e114      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 80130f0:	4b8e      	ldr	r3, [pc, #568]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80130f2:	4a8f      	ldr	r2, [pc, #572]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80130f4:	589b      	ldr	r3, [r3, r2]
 80130f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	605a      	str	r2, [r3, #4]
            break;
 80130fc:	e10d      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 80130fe:	4b8b      	ldr	r3, [pc, #556]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013100:	4a8b      	ldr	r2, [pc, #556]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013102:	589b      	ldr	r3, [r3, r2]
 8013104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	605a      	str	r2, [r3, #4]
            break;
 801310a:	e106      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 801310c:	4b87      	ldr	r3, [pc, #540]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801310e:	4a88      	ldr	r2, [pc, #544]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013110:	589b      	ldr	r3, [r3, r2]
 8013112:	227d      	movs	r2, #125	; 0x7d
 8013114:	5c9a      	ldrb	r2, [r3, r2]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	711a      	strb	r2, [r3, #4]
            break;
 801311a:	e0fe      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801311c:	4b83      	ldr	r3, [pc, #524]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801311e:	4a84      	ldr	r2, [pc, #528]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013120:	589b      	ldr	r3, [r3, r2]
 8013122:	22ca      	movs	r2, #202	; 0xca
 8013124:	5c9a      	ldrb	r2, [r3, r2]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	711a      	strb	r2, [r3, #4]
            break;
 801312a:	e0f6      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801312c:	2110      	movs	r1, #16
 801312e:	187b      	adds	r3, r7, r1
 8013130:	221d      	movs	r2, #29
 8013132:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013134:	4b7d      	ldr	r3, [pc, #500]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013136:	4a7e      	ldr	r2, [pc, #504]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013138:	589b      	ldr	r3, [r3, r2]
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	187a      	adds	r2, r7, r1
 801313e:	0011      	movs	r1, r2
 8013140:	0018      	movs	r0, r3
 8013142:	f003 fa38 	bl	80165b6 <RegionGetPhyParam>
 8013146:	0003      	movs	r3, r0
 8013148:	001a      	movs	r2, r3
 801314a:	210c      	movs	r1, #12
 801314c:	187b      	adds	r3, r7, r1
 801314e:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013150:	187b      	adds	r3, r7, r1
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	605a      	str	r2, [r3, #4]
            break;
 8013158:	e0df      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 801315a:	4b74      	ldr	r3, [pc, #464]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801315c:	4a74      	ldr	r2, [pc, #464]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801315e:	589a      	ldr	r2, [r3, r2]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	21a8      	movs	r1, #168	; 0xa8
 8013164:	3304      	adds	r3, #4
 8013166:	1852      	adds	r2, r2, r1
 8013168:	ca03      	ldmia	r2!, {r0, r1}
 801316a:	c303      	stmia	r3!, {r0, r1}
            break;
 801316c:	e0d5      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 801316e:	4b6f      	ldr	r3, [pc, #444]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013170:	4a6f      	ldr	r2, [pc, #444]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013172:	589a      	ldr	r2, [r3, r2]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	3304      	adds	r3, #4
 8013178:	3228      	adds	r2, #40	; 0x28
 801317a:	ca03      	ldmia	r2!, {r0, r1}
 801317c:	c303      	stmia	r3!, {r0, r1}
            break;
 801317e:	e0cc      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8013180:	4b6a      	ldr	r3, [pc, #424]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013182:	4a6b      	ldr	r2, [pc, #428]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013184:	589a      	ldr	r2, [r3, r2]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	21b0      	movs	r1, #176	; 0xb0
 801318a:	3304      	adds	r3, #4
 801318c:	1852      	adds	r2, r2, r1
 801318e:	ca03      	ldmia	r2!, {r0, r1}
 8013190:	c303      	stmia	r3!, {r0, r1}
            break;
 8013192:	e0c2      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8013194:	4b65      	ldr	r3, [pc, #404]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013196:	4a66      	ldr	r2, [pc, #408]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013198:	589a      	ldr	r2, [r3, r2]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	3304      	adds	r3, #4
 801319e:	3230      	adds	r2, #48	; 0x30
 80131a0:	ca03      	ldmia	r2!, {r0, r1}
 80131a2:	c303      	stmia	r3!, {r0, r1}
            break;
 80131a4:	e0b9      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80131a6:	2110      	movs	r1, #16
 80131a8:	187b      	adds	r3, r7, r1
 80131aa:	221b      	movs	r2, #27
 80131ac:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131ae:	4b5f      	ldr	r3, [pc, #380]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80131b0:	4a5f      	ldr	r2, [pc, #380]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80131b2:	589b      	ldr	r3, [r3, r2]
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	187a      	adds	r2, r7, r1
 80131b8:	0011      	movs	r1, r2
 80131ba:	0018      	movs	r0, r3
 80131bc:	f003 f9fb 	bl	80165b6 <RegionGetPhyParam>
 80131c0:	0003      	movs	r3, r0
 80131c2:	001a      	movs	r2, r3
 80131c4:	210c      	movs	r1, #12
 80131c6:	187b      	adds	r3, r7, r1
 80131c8:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80131ca:	187b      	adds	r3, r7, r1
 80131cc:	681a      	ldr	r2, [r3, #0]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	605a      	str	r2, [r3, #4]
            break;
 80131d2:	e0a2      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80131d4:	2110      	movs	r1, #16
 80131d6:	187b      	adds	r3, r7, r1
 80131d8:	221a      	movs	r2, #26
 80131da:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131dc:	4b53      	ldr	r3, [pc, #332]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80131de:	4a54      	ldr	r2, [pc, #336]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80131e0:	589b      	ldr	r3, [r3, r2]
 80131e2:	781b      	ldrb	r3, [r3, #0]
 80131e4:	187a      	adds	r2, r7, r1
 80131e6:	0011      	movs	r1, r2
 80131e8:	0018      	movs	r0, r3
 80131ea:	f003 f9e4 	bl	80165b6 <RegionGetPhyParam>
 80131ee:	0003      	movs	r3, r0
 80131f0:	001a      	movs	r2, r3
 80131f2:	210c      	movs	r1, #12
 80131f4:	187b      	adds	r3, r7, r1
 80131f6:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80131f8:	187b      	adds	r3, r7, r1
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	605a      	str	r2, [r3, #4]
            break;
 8013200:	e08b      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8013202:	4b4a      	ldr	r3, [pc, #296]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013204:	4a4a      	ldr	r2, [pc, #296]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013206:	589b      	ldr	r3, [r3, r2]
 8013208:	22a4      	movs	r2, #164	; 0xa4
 801320a:	5c9a      	ldrb	r2, [r3, r2]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	711a      	strb	r2, [r3, #4]
            break;
 8013210:	e083      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8013212:	4b46      	ldr	r3, [pc, #280]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013214:	4a46      	ldr	r2, [pc, #280]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013216:	589b      	ldr	r3, [r3, r2]
 8013218:	2290      	movs	r2, #144	; 0x90
 801321a:	589a      	ldr	r2, [r3, r2]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	605a      	str	r2, [r3, #4]
            break;
 8013220:	e07b      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8013222:	4b42      	ldr	r3, [pc, #264]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013224:	4a42      	ldr	r2, [pc, #264]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013226:	589b      	ldr	r3, [r3, r2]
 8013228:	2294      	movs	r2, #148	; 0x94
 801322a:	589a      	ldr	r2, [r3, r2]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	605a      	str	r2, [r3, #4]
            break;
 8013230:	e073      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8013232:	4b3e      	ldr	r3, [pc, #248]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013234:	4a3e      	ldr	r2, [pc, #248]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013236:	589b      	ldr	r3, [r3, r2]
 8013238:	2298      	movs	r2, #152	; 0x98
 801323a:	589a      	ldr	r2, [r3, r2]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	605a      	str	r2, [r3, #4]
            break;
 8013240:	e06b      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8013242:	4b3a      	ldr	r3, [pc, #232]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013244:	4a3a      	ldr	r2, [pc, #232]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013246:	589b      	ldr	r3, [r3, r2]
 8013248:	229c      	movs	r2, #156	; 0x9c
 801324a:	589a      	ldr	r2, [r3, r2]
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	605a      	str	r2, [r3, #4]
            break;
 8013250:	e063      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8013252:	4b36      	ldr	r3, [pc, #216]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013254:	4a36      	ldr	r2, [pc, #216]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013256:	589b      	ldr	r3, [r3, r2]
 8013258:	22a0      	movs	r2, #160	; 0xa0
 801325a:	589a      	ldr	r2, [r3, r2]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	605a      	str	r2, [r3, #4]
            break;
 8013260:	e05b      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8013262:	4b32      	ldr	r3, [pc, #200]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013264:	4a32      	ldr	r2, [pc, #200]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013266:	589b      	ldr	r3, [r3, r2]
 8013268:	2205      	movs	r2, #5
 801326a:	569a      	ldrsb	r2, [r3, r2]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	711a      	strb	r2, [r3, #4]
            break;
 8013270:	e053      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013272:	4b2e      	ldr	r3, [pc, #184]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013274:	4a2e      	ldr	r2, [pc, #184]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013276:	589b      	ldr	r3, [r3, r2]
 8013278:	2285      	movs	r2, #133	; 0x85
 801327a:	569a      	ldrsb	r2, [r3, r2]
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	711a      	strb	r2, [r3, #4]
            break;
 8013280:	e04b      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8013282:	4b2a      	ldr	r3, [pc, #168]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013284:	4a2a      	ldr	r2, [pc, #168]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013286:	589b      	ldr	r3, [r3, r2]
 8013288:	2204      	movs	r2, #4
 801328a:	569a      	ldrsb	r2, [r3, r2]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	711a      	strb	r2, [r3, #4]
            break;
 8013290:	e043      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013292:	4b26      	ldr	r3, [pc, #152]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013294:	4a26      	ldr	r2, [pc, #152]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013296:	589b      	ldr	r3, [r3, r2]
 8013298:	2284      	movs	r2, #132	; 0x84
 801329a:	569a      	ldrsb	r2, [r3, r2]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	711a      	strb	r2, [r3, #4]
            break;
 80132a0:	e03b      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 80132a2:	4b22      	ldr	r3, [pc, #136]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80132a4:	4a22      	ldr	r2, [pc, #136]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80132a6:	589b      	ldr	r3, [r3, r2]
 80132a8:	2288      	movs	r2, #136	; 0x88
 80132aa:	589a      	ldr	r2, [r3, r2]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	605a      	str	r2, [r3, #4]
            break;
 80132b0:	e033      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 80132b2:	4b1e      	ldr	r3, [pc, #120]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80132b4:	4a1e      	ldr	r2, [pc, #120]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80132b6:	589b      	ldr	r3, [r3, r2]
 80132b8:	228c      	movs	r2, #140	; 0x8c
 80132ba:	5c9a      	ldrb	r2, [r3, r2]
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	711a      	strb	r2, [r3, #4]
            break;
 80132c0:	e02b      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80132c2:	4b1a      	ldr	r3, [pc, #104]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80132c4:	4a1a      	ldr	r2, [pc, #104]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80132c6:	589b      	ldr	r3, [r3, r2]
 80132c8:	22c0      	movs	r2, #192	; 0xc0
 80132ca:	589a      	ldr	r2, [r3, r2]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	605a      	str	r2, [r3, #4]
            break;
 80132d0:	e023      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 80132d2:	f7fe ff23 	bl	801211c <GetCtxs>
 80132d6:	0002      	movs	r2, r0
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	605a      	str	r2, [r3, #4]
            break;
 80132dc:	e01d      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80132de:	4b13      	ldr	r3, [pc, #76]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80132e0:	4a13      	ldr	r2, [pc, #76]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80132e2:	589b      	ldr	r3, [r3, r2]
 80132e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	605a      	str	r2, [r3, #4]
            break;
 80132ea:	e016      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 80132ec:	4b0f      	ldr	r3, [pc, #60]	; (801332c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80132ee:	4a10      	ldr	r2, [pc, #64]	; (8013330 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80132f0:	5899      	ldr	r1, [r3, r2]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	22b0      	movs	r2, #176	; 0xb0
 80132f6:	0052      	lsls	r2, r2, #1
 80132f8:	588a      	ldr	r2, [r1, r2]
 80132fa:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80132fc:	687c      	ldr	r4, [r7, #4]
 80132fe:	f003 fb55 	bl	80169ac <RegionGetVersion>
 8013302:	0003      	movs	r3, r0
 8013304:	60a3      	str	r3, [r4, #8]
            break;
 8013306:	e008      	b.n	801331a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013308:	2317      	movs	r3, #23
 801330a:	18fc      	adds	r4, r7, r3
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	0018      	movs	r0, r3
 8013310:	f000 ffed 	bl	80142ee <LoRaMacClassBMibGetRequestConfirm>
 8013314:	0003      	movs	r3, r0
 8013316:	7023      	strb	r3, [r4, #0]
            break;
 8013318:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 801331a:	2317      	movs	r3, #23
 801331c:	18fb      	adds	r3, r7, r3
 801331e:	781b      	ldrb	r3, [r3, #0]
}
 8013320:	0018      	movs	r0, r3
 8013322:	46bd      	mov	sp, r7
 8013324:	b007      	add	sp, #28
 8013326:	bd90      	pop	{r4, r7, pc}
 8013328:	0801ef24 	.word	0x0801ef24
 801332c:	200005b4 	.word	0x200005b4
 8013330:	00000484 	.word	0x00000484

08013334 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013334:	b590      	push	{r4, r7, lr}
 8013336:	b087      	sub	sp, #28
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801333c:	2317      	movs	r3, #23
 801333e:	18fb      	adds	r3, r7, r3
 8013340:	2200      	movs	r2, #0
 8013342:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d102      	bne.n	8013350 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801334a:	2303      	movs	r3, #3
 801334c:	f000 fb74 	bl	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013350:	4ac3      	ldr	r2, [pc, #780]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013352:	23d0      	movs	r3, #208	; 0xd0
 8013354:	009b      	lsls	r3, r3, #2
 8013356:	58d3      	ldr	r3, [r2, r3]
 8013358:	2202      	movs	r2, #2
 801335a:	4013      	ands	r3, r2
 801335c:	d002      	beq.n	8013364 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 801335e:	2301      	movs	r3, #1
 8013360:	f000 fb6a 	bl	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	2b27      	cmp	r3, #39	; 0x27
 801336a:	d900      	bls.n	801336e <LoRaMacMibSetRequestConfirm+0x3a>
 801336c:	e333      	b.n	80139d6 <LoRaMacMibSetRequestConfirm+0x6a2>
 801336e:	009a      	lsls	r2, r3, #2
 8013370:	4bbc      	ldr	r3, [pc, #752]	; (8013664 <LoRaMacMibSetRequestConfirm+0x330>)
 8013372:	18d3      	adds	r3, r2, r3
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	791b      	ldrb	r3, [r3, #4]
 801337c:	2217      	movs	r2, #23
 801337e:	18bc      	adds	r4, r7, r2
 8013380:	0018      	movs	r0, r3
 8013382:	f7fc ff07 	bl	8010194 <SwitchClass>
 8013386:	0003      	movs	r3, r0
 8013388:	7023      	strb	r3, [r4, #0]
            break;
 801338a:	e34e      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	791b      	ldrb	r3, [r3, #4]
 8013390:	2b02      	cmp	r3, #2
 8013392:	d008      	beq.n	80133a6 <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8013394:	4bb2      	ldr	r3, [pc, #712]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013396:	4ab4      	ldr	r2, [pc, #720]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013398:	589a      	ldr	r2, [r3, r2]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	7919      	ldrb	r1, [r3, #4]
 801339e:	23b2      	movs	r3, #178	; 0xb2
 80133a0:	005b      	lsls	r3, r3, #1
 80133a2:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80133a4:	e341      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133a6:	2317      	movs	r3, #23
 80133a8:	18fb      	adds	r3, r7, r3
 80133aa:	2203      	movs	r2, #3
 80133ac:	701a      	strb	r2, [r3, #0]
            break;
 80133ae:	e33c      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	0018      	movs	r0, r3
 80133b6:	f7fa f94b 	bl	800d650 <SecureElementSetDevEui>
 80133ba:	1e03      	subs	r3, r0, #0
 80133bc:	d100      	bne.n	80133c0 <LoRaMacMibSetRequestConfirm+0x8c>
 80133be:	e319      	b.n	80139f4 <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133c0:	2317      	movs	r3, #23
 80133c2:	18fb      	adds	r3, r7, r3
 80133c4:	2203      	movs	r2, #3
 80133c6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80133c8:	e314      	b.n	80139f4 <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	0018      	movs	r0, r3
 80133d0:	f7fa f962 	bl	800d698 <SecureElementSetJoinEui>
 80133d4:	1e03      	subs	r3, r0, #0
 80133d6:	d100      	bne.n	80133da <LoRaMacMibSetRequestConfirm+0xa6>
 80133d8:	e30e      	b.n	80139f8 <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133da:	2317      	movs	r3, #23
 80133dc:	18fb      	adds	r3, r7, r3
 80133de:	2203      	movs	r2, #3
 80133e0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80133e2:	e309      	b.n	80139f8 <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 80133e4:	4b9e      	ldr	r3, [pc, #632]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 80133e6:	4aa0      	ldr	r2, [pc, #640]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 80133e8:	589b      	ldr	r3, [r3, r2]
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	7911      	ldrb	r1, [r2, #4]
 80133ee:	227e      	movs	r2, #126	; 0x7e
 80133f0:	5499      	strb	r1, [r3, r2]
            break;
 80133f2:	e31a      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 80133f4:	4b9a      	ldr	r3, [pc, #616]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 80133f6:	4a9c      	ldr	r2, [pc, #624]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 80133f8:	589b      	ldr	r3, [r3, r2]
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	6852      	ldr	r2, [r2, #4]
 80133fe:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013400:	e313      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8013402:	4b97      	ldr	r3, [pc, #604]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013404:	4a98      	ldr	r2, [pc, #608]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013406:	589b      	ldr	r3, [r3, r2]
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	6852      	ldr	r2, [r2, #4]
 801340c:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 801340e:	e30c      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00a      	beq.n	801342e <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	0019      	movs	r1, r3
 801341e:	2000      	movs	r0, #0
 8013420:	f002 fa00 	bl	8015824 <LoRaMacCryptoSetKey>
 8013424:	1e03      	subs	r3, r0, #0
 8013426:	d100      	bne.n	801342a <LoRaMacMibSetRequestConfirm+0xf6>
 8013428:	e2e8      	b.n	80139fc <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801342a:	2311      	movs	r3, #17
 801342c:	e304      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801342e:	2317      	movs	r3, #23
 8013430:	18fb      	adds	r3, r7, r3
 8013432:	2203      	movs	r2, #3
 8013434:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013436:	e2e1      	b.n	80139fc <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d00a      	beq.n	8013456 <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	0019      	movs	r1, r3
 8013446:	2001      	movs	r0, #1
 8013448:	f002 f9ec 	bl	8015824 <LoRaMacCryptoSetKey>
 801344c:	1e03      	subs	r3, r0, #0
 801344e:	d100      	bne.n	8013452 <LoRaMacMibSetRequestConfirm+0x11e>
 8013450:	e2d6      	b.n	8013a00 <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013452:	2311      	movs	r3, #17
 8013454:	e2f0      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013456:	2317      	movs	r3, #23
 8013458:	18fb      	adds	r3, r7, r3
 801345a:	2203      	movs	r2, #3
 801345c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801345e:	e2cf      	b.n	8013a00 <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d00a      	beq.n	801347e <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	0019      	movs	r1, r3
 801346e:	2002      	movs	r0, #2
 8013470:	f002 f9d8 	bl	8015824 <LoRaMacCryptoSetKey>
 8013474:	1e03      	subs	r3, r0, #0
 8013476:	d100      	bne.n	801347a <LoRaMacMibSetRequestConfirm+0x146>
 8013478:	e2c4      	b.n	8013a04 <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801347a:	2311      	movs	r3, #17
 801347c:	e2dc      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801347e:	2317      	movs	r3, #23
 8013480:	18fb      	adds	r3, r7, r3
 8013482:	2203      	movs	r2, #3
 8013484:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013486:	e2bd      	b.n	8013a04 <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d00a      	beq.n	80134a6 <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	0019      	movs	r1, r3
 8013496:	2003      	movs	r0, #3
 8013498:	f002 f9c4 	bl	8015824 <LoRaMacCryptoSetKey>
 801349c:	1e03      	subs	r3, r0, #0
 801349e:	d100      	bne.n	80134a2 <LoRaMacMibSetRequestConfirm+0x16e>
 80134a0:	e2b2      	b.n	8013a08 <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80134a2:	2311      	movs	r3, #17
 80134a4:	e2c8      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134a6:	2317      	movs	r3, #23
 80134a8:	18fb      	adds	r3, r7, r3
 80134aa:	2203      	movs	r2, #3
 80134ac:	701a      	strb	r2, [r3, #0]
            }
            break;
 80134ae:	e2ab      	b.n	8013a08 <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00a      	beq.n	80134ce <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	0019      	movs	r1, r3
 80134be:	207f      	movs	r0, #127	; 0x7f
 80134c0:	f002 f9b0 	bl	8015824 <LoRaMacCryptoSetKey>
 80134c4:	1e03      	subs	r3, r0, #0
 80134c6:	d100      	bne.n	80134ca <LoRaMacMibSetRequestConfirm+0x196>
 80134c8:	e2a0      	b.n	8013a0c <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80134ca:	2311      	movs	r3, #17
 80134cc:	e2b4      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134ce:	2317      	movs	r3, #23
 80134d0:	18fb      	adds	r3, r7, r3
 80134d2:	2203      	movs	r2, #3
 80134d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80134d6:	e299      	b.n	8013a0c <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	685b      	ldr	r3, [r3, #4]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d00a      	beq.n	80134f6 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	0019      	movs	r1, r3
 80134e6:	2080      	movs	r0, #128	; 0x80
 80134e8:	f002 f99c 	bl	8015824 <LoRaMacCryptoSetKey>
 80134ec:	1e03      	subs	r3, r0, #0
 80134ee:	d100      	bne.n	80134f2 <LoRaMacMibSetRequestConfirm+0x1be>
 80134f0:	e28e      	b.n	8013a10 <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80134f2:	2311      	movs	r3, #17
 80134f4:	e2a0      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134f6:	2317      	movs	r3, #23
 80134f8:	18fb      	adds	r3, r7, r3
 80134fa:	2203      	movs	r2, #3
 80134fc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80134fe:	e287      	b.n	8013a10 <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d00a      	beq.n	801351e <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	685b      	ldr	r3, [r3, #4]
 801350c:	0019      	movs	r1, r3
 801350e:	2081      	movs	r0, #129	; 0x81
 8013510:	f002 f988 	bl	8015824 <LoRaMacCryptoSetKey>
 8013514:	1e03      	subs	r3, r0, #0
 8013516:	d100      	bne.n	801351a <LoRaMacMibSetRequestConfirm+0x1e6>
 8013518:	e27c      	b.n	8013a14 <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801351a:	2311      	movs	r3, #17
 801351c:	e28c      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801351e:	2317      	movs	r3, #23
 8013520:	18fb      	adds	r3, r7, r3
 8013522:	2203      	movs	r2, #3
 8013524:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013526:	e275      	b.n	8013a14 <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00a      	beq.n	8013546 <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	0019      	movs	r1, r3
 8013536:	2082      	movs	r0, #130	; 0x82
 8013538:	f002 f974 	bl	8015824 <LoRaMacCryptoSetKey>
 801353c:	1e03      	subs	r3, r0, #0
 801353e:	d100      	bne.n	8013542 <LoRaMacMibSetRequestConfirm+0x20e>
 8013540:	e26a      	b.n	8013a18 <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013542:	2311      	movs	r3, #17
 8013544:	e278      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013546:	2317      	movs	r3, #23
 8013548:	18fb      	adds	r3, r7, r3
 801354a:	2203      	movs	r2, #3
 801354c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801354e:	e263      	b.n	8013a18 <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013550:	4b43      	ldr	r3, [pc, #268]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013552:	4a45      	ldr	r2, [pc, #276]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013554:	589b      	ldr	r3, [r3, r2]
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	7911      	ldrb	r1, [r2, #4]
 801355a:	227d      	movs	r2, #125	; 0x7d
 801355c:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 801355e:	4b43      	ldr	r3, [pc, #268]	; (801366c <LoRaMacMibSetRequestConfirm+0x338>)
 8013560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013562:	4a3f      	ldr	r2, [pc, #252]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013564:	4940      	ldr	r1, [pc, #256]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013566:	5852      	ldr	r2, [r2, r1]
 8013568:	217d      	movs	r1, #125	; 0x7d
 801356a:	5c52      	ldrb	r2, [r2, r1]
 801356c:	0010      	movs	r0, r2
 801356e:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8013570:	4b3e      	ldr	r3, [pc, #248]	; (801366c <LoRaMacMibSetRequestConfirm+0x338>)
 8013572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013574:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013576:	e258      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013578:	4b39      	ldr	r3, [pc, #228]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 801357a:	4a3b      	ldr	r2, [pc, #236]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 801357c:	589b      	ldr	r3, [r3, r2]
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	7911      	ldrb	r1, [r2, #4]
 8013582:	22ca      	movs	r2, #202	; 0xca
 8013584:	5499      	strb	r1, [r3, r2]
            break;
 8013586:	e250      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	7a1b      	ldrb	r3, [r3, #8]
 801358c:	b25a      	sxtb	r2, r3
 801358e:	2108      	movs	r1, #8
 8013590:	187b      	adds	r3, r7, r1
 8013592:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013594:	4b32      	ldr	r3, [pc, #200]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013596:	4a34      	ldr	r2, [pc, #208]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013598:	589b      	ldr	r3, [r3, r2]
 801359a:	22b9      	movs	r2, #185	; 0xb9
 801359c:	5c9a      	ldrb	r2, [r3, r2]
 801359e:	187b      	adds	r3, r7, r1
 80135a0:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 80135a2:	4b2f      	ldr	r3, [pc, #188]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 80135a4:	4a30      	ldr	r2, [pc, #192]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 80135a6:	589b      	ldr	r3, [r3, r2]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	1879      	adds	r1, r7, r1
 80135ac:	2207      	movs	r2, #7
 80135ae:	0018      	movs	r0, r3
 80135b0:	f003 f868 	bl	8016684 <RegionVerify>
 80135b4:	0003      	movs	r3, r0
 80135b6:	001a      	movs	r2, r3
 80135b8:	2301      	movs	r3, #1
 80135ba:	4053      	eors	r3, r2
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d004      	beq.n	80135cc <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135c2:	2317      	movs	r3, #23
 80135c4:	18fb      	adds	r3, r7, r3
 80135c6:	2203      	movs	r2, #3
 80135c8:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80135ca:	e22e      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	685a      	ldr	r2, [r3, #4]
 80135d0:	2108      	movs	r1, #8
 80135d2:	187b      	adds	r3, r7, r1
 80135d4:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 80135d6:	4b22      	ldr	r3, [pc, #136]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 80135d8:	4a23      	ldr	r2, [pc, #140]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 80135da:	589b      	ldr	r3, [r3, r2]
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	1879      	adds	r1, r7, r1
 80135e0:	2200      	movs	r2, #0
 80135e2:	0018      	movs	r0, r3
 80135e4:	f003 f84e 	bl	8016684 <RegionVerify>
 80135e8:	0003      	movs	r3, r0
 80135ea:	001a      	movs	r2, r3
 80135ec:	2301      	movs	r3, #1
 80135ee:	4053      	eors	r3, r2
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d004      	beq.n	8013600 <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135f6:	2317      	movs	r3, #23
 80135f8:	18fb      	adds	r3, r7, r3
 80135fa:	2203      	movs	r2, #3
 80135fc:	701a      	strb	r2, [r3, #0]
            break;
 80135fe:	e214      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013600:	4b17      	ldr	r3, [pc, #92]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013602:	4a19      	ldr	r2, [pc, #100]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013604:	589b      	ldr	r3, [r3, r2]
 8013606:	21a8      	movs	r1, #168	; 0xa8
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	185b      	adds	r3, r3, r1
 801360c:	3204      	adds	r2, #4
 801360e:	ca03      	ldmia	r2!, {r0, r1}
 8013610:	c303      	stmia	r3!, {r0, r1}
            break;
 8013612:	e20a      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	7a1b      	ldrb	r3, [r3, #8]
 8013618:	b25a      	sxtb	r2, r3
 801361a:	2108      	movs	r1, #8
 801361c:	187b      	adds	r3, r7, r1
 801361e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013620:	4b0f      	ldr	r3, [pc, #60]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013622:	4a11      	ldr	r2, [pc, #68]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013624:	589b      	ldr	r3, [r3, r2]
 8013626:	22b9      	movs	r2, #185	; 0xb9
 8013628:	5c9a      	ldrb	r2, [r3, r2]
 801362a:	187b      	adds	r3, r7, r1
 801362c:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 801362e:	4b0c      	ldr	r3, [pc, #48]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013630:	4a0d      	ldr	r2, [pc, #52]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013632:	589b      	ldr	r3, [r3, r2]
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	1879      	adds	r1, r7, r1
 8013638:	2207      	movs	r2, #7
 801363a:	0018      	movs	r0, r3
 801363c:	f003 f822 	bl	8016684 <RegionVerify>
 8013640:	1e03      	subs	r3, r0, #0
 8013642:	d008      	beq.n	8013656 <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013644:	4b06      	ldr	r3, [pc, #24]	; (8013660 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013646:	4a08      	ldr	r2, [pc, #32]	; (8013668 <LoRaMacMibSetRequestConfirm+0x334>)
 8013648:	589b      	ldr	r3, [r3, r2]
 801364a:	687a      	ldr	r2, [r7, #4]
 801364c:	3328      	adds	r3, #40	; 0x28
 801364e:	3204      	adds	r2, #4
 8013650:	ca03      	ldmia	r2!, {r0, r1}
 8013652:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013654:	e1e9      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013656:	2317      	movs	r3, #23
 8013658:	18fb      	adds	r3, r7, r3
 801365a:	2203      	movs	r2, #3
 801365c:	701a      	strb	r2, [r3, #0]
            break;
 801365e:	e1e4      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
 8013660:	200005b4 	.word	0x200005b4
 8013664:	0801efc8 	.word	0x0801efc8
 8013668:	00000484 	.word	0x00000484
 801366c:	0801f358 	.word	0x0801f358
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	7a1b      	ldrb	r3, [r3, #8]
 8013674:	b25a      	sxtb	r2, r3
 8013676:	2108      	movs	r1, #8
 8013678:	187b      	adds	r3, r7, r1
 801367a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801367c:	4bda      	ldr	r3, [pc, #872]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801367e:	4adb      	ldr	r2, [pc, #876]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013680:	589b      	ldr	r3, [r3, r2]
 8013682:	22b9      	movs	r2, #185	; 0xb9
 8013684:	5c9a      	ldrb	r2, [r3, r2]
 8013686:	187b      	adds	r3, r7, r1
 8013688:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 801368a:	4bd7      	ldr	r3, [pc, #860]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801368c:	4ad7      	ldr	r2, [pc, #860]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 801368e:	589b      	ldr	r3, [r3, r2]
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	1879      	adds	r1, r7, r1
 8013694:	2207      	movs	r2, #7
 8013696:	0018      	movs	r0, r3
 8013698:	f002 fff4 	bl	8016684 <RegionVerify>
 801369c:	1e03      	subs	r3, r0, #0
 801369e:	d01f      	beq.n	80136e0 <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80136a0:	4bd1      	ldr	r3, [pc, #836]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80136a2:	4ad2      	ldr	r2, [pc, #840]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80136a4:	589b      	ldr	r3, [r3, r2]
 80136a6:	21b0      	movs	r1, #176	; 0xb0
 80136a8:	687a      	ldr	r2, [r7, #4]
 80136aa:	185b      	adds	r3, r3, r1
 80136ac:	3204      	adds	r2, #4
 80136ae:	ca03      	ldmia	r2!, {r0, r1}
 80136b0:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80136b2:	4bcd      	ldr	r3, [pc, #820]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80136b4:	4acd      	ldr	r2, [pc, #820]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80136b6:	589b      	ldr	r3, [r3, r2]
 80136b8:	227c      	movs	r2, #124	; 0x7c
 80136ba:	5c9b      	ldrb	r3, [r3, r2]
 80136bc:	2b02      	cmp	r3, #2
 80136be:	d000      	beq.n	80136c2 <LoRaMacMibSetRequestConfirm+0x38e>
 80136c0:	e1ac      	b.n	8013a1c <LoRaMacMibSetRequestConfirm+0x6e8>
 80136c2:	4bc9      	ldr	r3, [pc, #804]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80136c4:	4ac9      	ldr	r2, [pc, #804]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80136c6:	589a      	ldr	r2, [r3, r2]
 80136c8:	23b2      	movs	r3, #178	; 0xb2
 80136ca:	005b      	lsls	r3, r3, #1
 80136cc:	5cd3      	ldrb	r3, [r2, r3]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d100      	bne.n	80136d4 <LoRaMacMibSetRequestConfirm+0x3a0>
 80136d2:	e1a3      	b.n	8013a1c <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80136d4:	4bc6      	ldr	r3, [pc, #792]	; (80139f0 <LoRaMacMibSetRequestConfirm+0x6bc>)
 80136d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80136da:	f7fe fa33 	bl	8011b44 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80136de:	e19d      	b.n	8013a1c <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136e0:	2317      	movs	r3, #23
 80136e2:	18fb      	adds	r3, r7, r3
 80136e4:	2203      	movs	r2, #3
 80136e6:	701a      	strb	r2, [r3, #0]
            break;
 80136e8:	e198      	b.n	8013a1c <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	7a1b      	ldrb	r3, [r3, #8]
 80136ee:	b25a      	sxtb	r2, r3
 80136f0:	2108      	movs	r1, #8
 80136f2:	187b      	adds	r3, r7, r1
 80136f4:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80136f6:	4bbc      	ldr	r3, [pc, #752]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80136f8:	4abc      	ldr	r2, [pc, #752]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80136fa:	589b      	ldr	r3, [r3, r2]
 80136fc:	22b9      	movs	r2, #185	; 0xb9
 80136fe:	5c9a      	ldrb	r2, [r3, r2]
 8013700:	187b      	adds	r3, r7, r1
 8013702:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013704:	4bb8      	ldr	r3, [pc, #736]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013706:	4ab9      	ldr	r2, [pc, #740]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013708:	589b      	ldr	r3, [r3, r2]
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	1879      	adds	r1, r7, r1
 801370e:	2207      	movs	r2, #7
 8013710:	0018      	movs	r0, r3
 8013712:	f002 ffb7 	bl	8016684 <RegionVerify>
 8013716:	1e03      	subs	r3, r0, #0
 8013718:	d008      	beq.n	801372c <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801371a:	4bb3      	ldr	r3, [pc, #716]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801371c:	4ab3      	ldr	r2, [pc, #716]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 801371e:	589b      	ldr	r3, [r3, r2]
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	3330      	adds	r3, #48	; 0x30
 8013724:	3204      	adds	r2, #4
 8013726:	ca03      	ldmia	r2!, {r0, r1}
 8013728:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801372a:	e17e      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801372c:	2317      	movs	r3, #23
 801372e:	18fb      	adds	r3, r7, r3
 8013730:	2203      	movs	r2, #3
 8013732:	701a      	strb	r2, [r3, #0]
            break;
 8013734:	e179      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	685a      	ldr	r2, [r3, #4]
 801373a:	210c      	movs	r1, #12
 801373c:	187b      	adds	r3, r7, r1
 801373e:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013740:	187b      	adds	r3, r7, r1
 8013742:	2201      	movs	r2, #1
 8013744:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013746:	4ba8      	ldr	r3, [pc, #672]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013748:	4aa8      	ldr	r2, [pc, #672]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 801374a:	589b      	ldr	r3, [r3, r2]
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	187a      	adds	r2, r7, r1
 8013750:	0011      	movs	r1, r2
 8013752:	0018      	movs	r0, r3
 8013754:	f002 ffc8 	bl	80166e8 <RegionChanMaskSet>
 8013758:	0003      	movs	r3, r0
 801375a:	001a      	movs	r2, r3
 801375c:	2301      	movs	r3, #1
 801375e:	4053      	eors	r3, r2
 8013760:	b2db      	uxtb	r3, r3
 8013762:	2b00      	cmp	r3, #0
 8013764:	d100      	bne.n	8013768 <LoRaMacMibSetRequestConfirm+0x434>
 8013766:	e15b      	b.n	8013a20 <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013768:	2317      	movs	r3, #23
 801376a:	18fb      	adds	r3, r7, r3
 801376c:	2203      	movs	r2, #3
 801376e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013770:	e156      	b.n	8013a20 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	685a      	ldr	r2, [r3, #4]
 8013776:	210c      	movs	r1, #12
 8013778:	187b      	adds	r3, r7, r1
 801377a:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801377c:	187b      	adds	r3, r7, r1
 801377e:	2200      	movs	r2, #0
 8013780:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013782:	4b99      	ldr	r3, [pc, #612]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013784:	4a99      	ldr	r2, [pc, #612]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013786:	589b      	ldr	r3, [r3, r2]
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	187a      	adds	r2, r7, r1
 801378c:	0011      	movs	r1, r2
 801378e:	0018      	movs	r0, r3
 8013790:	f002 ffaa 	bl	80166e8 <RegionChanMaskSet>
 8013794:	0003      	movs	r3, r0
 8013796:	001a      	movs	r2, r3
 8013798:	2301      	movs	r3, #1
 801379a:	4053      	eors	r3, r2
 801379c:	b2db      	uxtb	r3, r3
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d100      	bne.n	80137a4 <LoRaMacMibSetRequestConfirm+0x470>
 80137a2:	e13f      	b.n	8013a24 <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137a4:	2317      	movs	r3, #23
 80137a6:	18fb      	adds	r3, r7, r3
 80137a8:	2203      	movs	r2, #3
 80137aa:	701a      	strb	r2, [r3, #0]
            }
            break;
 80137ac:	e13a      	b.n	8013a24 <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	791b      	ldrb	r3, [r3, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00b      	beq.n	80137ce <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80137ba:	2b0f      	cmp	r3, #15
 80137bc:	d807      	bhi.n	80137ce <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80137be:	4b8a      	ldr	r3, [pc, #552]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80137c0:	4a8a      	ldr	r2, [pc, #552]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80137c2:	589b      	ldr	r3, [r3, r2]
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	7911      	ldrb	r1, [r2, #4]
 80137c8:	22a4      	movs	r2, #164	; 0xa4
 80137ca:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80137cc:	e12d      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137ce:	2317      	movs	r3, #23
 80137d0:	18fb      	adds	r3, r7, r3
 80137d2:	2203      	movs	r2, #3
 80137d4:	701a      	strb	r2, [r3, #0]
            break;
 80137d6:	e128      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80137d8:	4b83      	ldr	r3, [pc, #524]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80137da:	4a84      	ldr	r2, [pc, #528]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80137dc:	589a      	ldr	r2, [r3, r2]
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	2190      	movs	r1, #144	; 0x90
 80137e4:	5053      	str	r3, [r2, r1]
            break;
 80137e6:	e120      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80137e8:	4b7f      	ldr	r3, [pc, #508]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80137ea:	4a80      	ldr	r2, [pc, #512]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80137ec:	589a      	ldr	r2, [r3, r2]
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	685b      	ldr	r3, [r3, #4]
 80137f2:	2194      	movs	r1, #148	; 0x94
 80137f4:	5053      	str	r3, [r2, r1]
            break;
 80137f6:	e118      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80137f8:	4b7b      	ldr	r3, [pc, #492]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80137fa:	4a7c      	ldr	r2, [pc, #496]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80137fc:	589a      	ldr	r2, [r3, r2]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	2198      	movs	r1, #152	; 0x98
 8013804:	5053      	str	r3, [r2, r1]
            break;
 8013806:	e110      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013808:	4b77      	ldr	r3, [pc, #476]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801380a:	4a78      	ldr	r2, [pc, #480]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 801380c:	589a      	ldr	r2, [r3, r2]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	219c      	movs	r1, #156	; 0x9c
 8013814:	5053      	str	r3, [r2, r1]
            break;
 8013816:	e108      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013818:	4b73      	ldr	r3, [pc, #460]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801381a:	4a74      	ldr	r2, [pc, #464]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 801381c:	589a      	ldr	r2, [r3, r2]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	21a0      	movs	r1, #160	; 0xa0
 8013824:	5053      	str	r3, [r2, r1]
            break;
 8013826:	e100      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2204      	movs	r2, #4
 801382c:	569a      	ldrsb	r2, [r3, r2]
 801382e:	2408      	movs	r4, #8
 8013830:	193b      	adds	r3, r7, r4
 8013832:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8013834:	4b6c      	ldr	r3, [pc, #432]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013836:	4a6d      	ldr	r2, [pc, #436]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013838:	589b      	ldr	r3, [r3, r2]
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	1939      	adds	r1, r7, r4
 801383e:	2206      	movs	r2, #6
 8013840:	0018      	movs	r0, r3
 8013842:	f002 ff1f 	bl	8016684 <RegionVerify>
 8013846:	1e03      	subs	r3, r0, #0
 8013848:	d007      	beq.n	801385a <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 801384a:	4b67      	ldr	r3, [pc, #412]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801384c:	4a67      	ldr	r2, [pc, #412]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 801384e:	589b      	ldr	r3, [r3, r2]
 8013850:	193a      	adds	r2, r7, r4
 8013852:	7812      	ldrb	r2, [r2, #0]
 8013854:	b252      	sxtb	r2, r2
 8013856:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013858:	e0e7      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801385a:	2317      	movs	r3, #23
 801385c:	18fb      	adds	r3, r7, r3
 801385e:	2203      	movs	r2, #3
 8013860:	701a      	strb	r2, [r3, #0]
            break;
 8013862:	e0e2      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2204      	movs	r2, #4
 8013868:	569a      	ldrsb	r2, [r3, r2]
 801386a:	2408      	movs	r4, #8
 801386c:	193b      	adds	r3, r7, r4
 801386e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013870:	4b5d      	ldr	r3, [pc, #372]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013872:	4a5e      	ldr	r2, [pc, #376]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013874:	589b      	ldr	r3, [r3, r2]
 8013876:	22b8      	movs	r2, #184	; 0xb8
 8013878:	5c9a      	ldrb	r2, [r3, r2]
 801387a:	193b      	adds	r3, r7, r4
 801387c:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 801387e:	4b5a      	ldr	r3, [pc, #360]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013880:	4a5a      	ldr	r2, [pc, #360]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013882:	589b      	ldr	r3, [r3, r2]
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	1939      	adds	r1, r7, r4
 8013888:	2205      	movs	r2, #5
 801388a:	0018      	movs	r0, r3
 801388c:	f002 fefa 	bl	8016684 <RegionVerify>
 8013890:	1e03      	subs	r3, r0, #0
 8013892:	d008      	beq.n	80138a6 <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013894:	4b54      	ldr	r3, [pc, #336]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013896:	4a55      	ldr	r2, [pc, #340]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013898:	589b      	ldr	r3, [r3, r2]
 801389a:	193a      	adds	r2, r7, r4
 801389c:	2100      	movs	r1, #0
 801389e:	5651      	ldrsb	r1, [r2, r1]
 80138a0:	2285      	movs	r2, #133	; 0x85
 80138a2:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80138a4:	e0c1      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138a6:	2317      	movs	r3, #23
 80138a8:	18fb      	adds	r3, r7, r3
 80138aa:	2203      	movs	r2, #3
 80138ac:	701a      	strb	r2, [r3, #0]
            break;
 80138ae:	e0bc      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2204      	movs	r2, #4
 80138b4:	569a      	ldrsb	r2, [r3, r2]
 80138b6:	2408      	movs	r4, #8
 80138b8:	193b      	adds	r3, r7, r4
 80138ba:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 80138bc:	4b4a      	ldr	r3, [pc, #296]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80138be:	4a4b      	ldr	r2, [pc, #300]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80138c0:	589b      	ldr	r3, [r3, r2]
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	1939      	adds	r1, r7, r4
 80138c6:	220a      	movs	r2, #10
 80138c8:	0018      	movs	r0, r3
 80138ca:	f002 fedb 	bl	8016684 <RegionVerify>
 80138ce:	1e03      	subs	r3, r0, #0
 80138d0:	d007      	beq.n	80138e2 <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80138d2:	4b45      	ldr	r3, [pc, #276]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80138d4:	4a45      	ldr	r2, [pc, #276]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80138d6:	589b      	ldr	r3, [r3, r2]
 80138d8:	193a      	adds	r2, r7, r4
 80138da:	7812      	ldrb	r2, [r2, #0]
 80138dc:	b252      	sxtb	r2, r2
 80138de:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80138e0:	e0a3      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138e2:	2317      	movs	r3, #23
 80138e4:	18fb      	adds	r3, r7, r3
 80138e6:	2203      	movs	r2, #3
 80138e8:	701a      	strb	r2, [r3, #0]
            break;
 80138ea:	e09e      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2204      	movs	r2, #4
 80138f0:	569a      	ldrsb	r2, [r3, r2]
 80138f2:	2408      	movs	r4, #8
 80138f4:	193b      	adds	r3, r7, r4
 80138f6:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 80138f8:	4b3b      	ldr	r3, [pc, #236]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80138fa:	4a3c      	ldr	r2, [pc, #240]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80138fc:	589b      	ldr	r3, [r3, r2]
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	1939      	adds	r1, r7, r4
 8013902:	2209      	movs	r2, #9
 8013904:	0018      	movs	r0, r3
 8013906:	f002 febd 	bl	8016684 <RegionVerify>
 801390a:	1e03      	subs	r3, r0, #0
 801390c:	d008      	beq.n	8013920 <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 801390e:	4b36      	ldr	r3, [pc, #216]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013910:	4a36      	ldr	r2, [pc, #216]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013912:	589b      	ldr	r3, [r3, r2]
 8013914:	193a      	adds	r2, r7, r4
 8013916:	2100      	movs	r1, #0
 8013918:	5651      	ldrsb	r1, [r2, r1]
 801391a:	2284      	movs	r2, #132	; 0x84
 801391c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801391e:	e084      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013920:	2317      	movs	r3, #23
 8013922:	18fb      	adds	r3, r7, r3
 8013924:	2203      	movs	r2, #3
 8013926:	701a      	strb	r2, [r3, #0]
            break;
 8013928:	e07f      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801392a:	4b2f      	ldr	r3, [pc, #188]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801392c:	4a2f      	ldr	r2, [pc, #188]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 801392e:	589b      	ldr	r3, [r3, r2]
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	6852      	ldr	r2, [r2, #4]
 8013934:	609a      	str	r2, [r3, #8]
 8013936:	4a2c      	ldr	r2, [pc, #176]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013938:	492c      	ldr	r1, [pc, #176]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 801393a:	5852      	ldr	r2, [r2, r1]
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	2188      	movs	r1, #136	; 0x88
 8013940:	5053      	str	r3, [r2, r1]
            break;
 8013942:	e072      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013944:	4b28      	ldr	r3, [pc, #160]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013946:	4a29      	ldr	r2, [pc, #164]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013948:	589b      	ldr	r3, [r3, r2]
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	7912      	ldrb	r2, [r2, #4]
 801394e:	731a      	strb	r2, [r3, #12]
 8013950:	4a25      	ldr	r2, [pc, #148]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013952:	4926      	ldr	r1, [pc, #152]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013954:	5852      	ldr	r2, [r2, r1]
 8013956:	7b19      	ldrb	r1, [r3, #12]
 8013958:	238c      	movs	r3, #140	; 0x8c
 801395a:	54d1      	strb	r1, [r2, r3]
            break;
 801395c:	e065      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801395e:	4b22      	ldr	r3, [pc, #136]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013960:	4a22      	ldr	r2, [pc, #136]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013962:	589a      	ldr	r2, [r3, r2]
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	685b      	ldr	r3, [r3, #4]
 8013968:	21c0      	movs	r1, #192	; 0xc0
 801396a:	5053      	str	r3, [r2, r1]
            break;
 801396c:	e05d      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801396e:	4b1e      	ldr	r3, [pc, #120]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013970:	4a1e      	ldr	r2, [pc, #120]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013972:	589b      	ldr	r3, [r3, r2]
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	6852      	ldr	r2, [r2, #4]
 8013978:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 801397a:	e056      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d009      	beq.n	8013998 <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	2217      	movs	r2, #23
 801398a:	18bc      	adds	r4, r7, r2
 801398c:	0018      	movs	r0, r3
 801398e:	f7fe fc1b 	bl	80121c8 <RestoreCtxs>
 8013992:	0003      	movs	r3, r0
 8013994:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013996:	e048      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013998:	2317      	movs	r3, #23
 801399a:	18fb      	adds	r3, r7, r3
 801399c:	2203      	movs	r2, #3
 801399e:	701a      	strb	r2, [r3, #0]
            break;
 80139a0:	e043      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	799b      	ldrb	r3, [r3, #6]
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d810      	bhi.n	80139cc <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 80139aa:	4b0f      	ldr	r3, [pc, #60]	; (80139e8 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80139ac:	4a0f      	ldr	r2, [pc, #60]	; (80139ec <LoRaMacMibSetRequestConfirm+0x6b8>)
 80139ae:	5899      	ldr	r1, [r3, r2]
 80139b0:	23b0      	movs	r3, #176	; 0xb0
 80139b2:	005a      	lsls	r2, r3, #1
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	0018      	movs	r0, r3
 80139c0:	f001 fe3a 	bl	8015638 <LoRaMacCryptoSetLrWanVersion>
 80139c4:	1e03      	subs	r3, r0, #0
 80139c6:	d02f      	beq.n	8013a28 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80139c8:	2311      	movs	r3, #17
 80139ca:	e035      	b.n	8013a38 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139cc:	2317      	movs	r3, #23
 80139ce:	18fb      	adds	r3, r7, r3
 80139d0:	2203      	movs	r2, #3
 80139d2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80139d4:	e028      	b.n	8013a28 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80139d6:	2317      	movs	r3, #23
 80139d8:	18fc      	adds	r4, r7, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	0018      	movs	r0, r3
 80139de:	f000 fc8f 	bl	8014300 <LoRaMacMibClassBSetRequestConfirm>
 80139e2:	0003      	movs	r3, r0
 80139e4:	7023      	strb	r3, [r4, #0]
            break;
 80139e6:	e020      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
 80139e8:	200005b4 	.word	0x200005b4
 80139ec:	00000484 	.word	0x00000484
 80139f0:	0801f358 	.word	0x0801f358
            break;
 80139f4:	46c0      	nop			; (mov r8, r8)
 80139f6:	e018      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80139f8:	46c0      	nop			; (mov r8, r8)
 80139fa:	e016      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80139fc:	46c0      	nop			; (mov r8, r8)
 80139fe:	e014      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a00:	46c0      	nop			; (mov r8, r8)
 8013a02:	e012      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a04:	46c0      	nop			; (mov r8, r8)
 8013a06:	e010      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a08:	46c0      	nop			; (mov r8, r8)
 8013a0a:	e00e      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a0c:	46c0      	nop			; (mov r8, r8)
 8013a0e:	e00c      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a10:	46c0      	nop			; (mov r8, r8)
 8013a12:	e00a      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a14:	46c0      	nop			; (mov r8, r8)
 8013a16:	e008      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a18:	46c0      	nop			; (mov r8, r8)
 8013a1a:	e006      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a1c:	46c0      	nop			; (mov r8, r8)
 8013a1e:	e004      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a20:	46c0      	nop			; (mov r8, r8)
 8013a22:	e002      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a24:	46c0      	nop			; (mov r8, r8)
 8013a26:	e000      	b.n	8013a2a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013a28:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 8013a2a:	f7fe fe19 	bl	8012660 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8013a2e:	f7fe fe0f 	bl	8012650 <EventMacNvmCtxChanged>
    return status;
 8013a32:	2317      	movs	r3, #23
 8013a34:	18fb      	adds	r3, r7, r3
 8013a36:	781b      	ldrb	r3, [r3, #0]
}
 8013a38:	0018      	movs	r0, r3
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	b007      	add	sp, #28
 8013a3e:	bd90      	pop	{r4, r7, pc}

08013a40 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013a40:	b5b0      	push	{r4, r5, r7, lr}
 8013a42:	b086      	sub	sp, #24
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013a48:	2317      	movs	r3, #23
 8013a4a:	18fb      	adds	r3, r7, r3
 8013a4c:	2202      	movs	r2, #2
 8013a4e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013a50:	230c      	movs	r3, #12
 8013a52:	18fb      	adds	r3, r7, r3
 8013a54:	2200      	movs	r2, #0
 8013a56:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d101      	bne.n	8013a62 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a5e:	2303      	movs	r3, #3
 8013a60:	e133      	b.n	8013cca <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 8013a62:	f7fe fe49 	bl	80126f8 <LoRaMacIsBusy>
 8013a66:	1e03      	subs	r3, r0, #0
 8013a68:	d001      	beq.n	8013a6e <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	e12d      	b.n	8013cca <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013a6e:	f001 fa0b 	bl	8014e88 <LoRaMacConfirmQueueIsFull>
 8013a72:	1e03      	subs	r3, r0, #0
 8013a74:	d001      	beq.n	8013a7a <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 8013a76:	2301      	movs	r3, #1
 8013a78:	e127      	b.n	8013cca <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013a7a:	f001 f9fb 	bl	8014e74 <LoRaMacConfirmQueueGetCnt>
 8013a7e:	1e03      	subs	r3, r0, #0
 8013a80:	d105      	bne.n	8013a8e <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013a82:	4b94      	ldr	r3, [pc, #592]	; (8013cd4 <LoRaMacMlmeRequest+0x294>)
 8013a84:	2214      	movs	r2, #20
 8013a86:	2100      	movs	r1, #0
 8013a88:	0018      	movs	r0, r3
 8013a8a:	f005 fa61 	bl	8018f50 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a8e:	4b92      	ldr	r3, [pc, #584]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013a90:	4a92      	ldr	r2, [pc, #584]	; (8013cdc <LoRaMacMlmeRequest+0x29c>)
 8013a92:	2101      	movs	r1, #1
 8013a94:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013a96:	4b90      	ldr	r3, [pc, #576]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013a98:	4a91      	ldr	r2, [pc, #580]	; (8013ce0 <LoRaMacMlmeRequest+0x2a0>)
 8013a9a:	5c99      	ldrb	r1, [r3, r2]
 8013a9c:	2004      	movs	r0, #4
 8013a9e:	4301      	orrs	r1, r0
 8013aa0:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	781a      	ldrb	r2, [r3, #0]
 8013aa6:	2110      	movs	r1, #16
 8013aa8:	187b      	adds	r3, r7, r1
 8013aaa:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013aac:	187b      	adds	r3, r7, r1
 8013aae:	2201      	movs	r2, #1
 8013ab0:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8013ab2:	187b      	adds	r3, r7, r1
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	2b0e      	cmp	r3, #14
 8013abe:	d900      	bls.n	8013ac2 <LoRaMacMlmeRequest+0x82>
 8013ac0:	e0d4      	b.n	8013c6c <LoRaMacMlmeRequest+0x22c>
 8013ac2:	009a      	lsls	r2, r3, #2
 8013ac4:	4b87      	ldr	r3, [pc, #540]	; (8013ce4 <LoRaMacMlmeRequest+0x2a4>)
 8013ac6:	18d3      	adds	r3, r2, r3
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013acc:	4a82      	ldr	r2, [pc, #520]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013ace:	23d0      	movs	r3, #208	; 0xd0
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	58d3      	ldr	r3, [r2, r3]
 8013ad4:	2220      	movs	r2, #32
 8013ad6:	4013      	ands	r3, r2
 8013ad8:	d001      	beq.n	8013ade <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 8013ada:	2301      	movs	r3, #1
 8013adc:	e0f5      	b.n	8013cca <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 8013ade:	f7fd feff 	bl	80118e0 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013ae2:	4b7d      	ldr	r3, [pc, #500]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013ae4:	4a80      	ldr	r2, [pc, #512]	; (8013ce8 <LoRaMacMlmeRequest+0x2a8>)
 8013ae6:	589b      	ldr	r3, [r3, r2]
 8013ae8:	7818      	ldrb	r0, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	791b      	ldrb	r3, [r3, #4]
 8013aee:	b259      	sxtb	r1, r3
 8013af0:	4b79      	ldr	r3, [pc, #484]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013af2:	4a7d      	ldr	r2, [pc, #500]	; (8013ce8 <LoRaMacMlmeRequest+0x2a8>)
 8013af4:	589c      	ldr	r4, [r3, r2]
 8013af6:	2200      	movs	r2, #0
 8013af8:	f002 fedb 	bl	80168b2 <RegionAlternateDr>
 8013afc:	0003      	movs	r3, r0
 8013afe:	001a      	movs	r2, r3
 8013b00:	2385      	movs	r3, #133	; 0x85
 8013b02:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013b04:	2310      	movs	r3, #16
 8013b06:	18fb      	adds	r3, r7, r3
 8013b08:	2207      	movs	r2, #7
 8013b0a:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 8013b0c:	2517      	movs	r5, #23
 8013b0e:	197c      	adds	r4, r7, r5
 8013b10:	20ff      	movs	r0, #255	; 0xff
 8013b12:	f7fd fbab 	bl	801126c <SendReJoinReq>
 8013b16:	0003      	movs	r3, r0
 8013b18:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 8013b1a:	197b      	adds	r3, r7, r5
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d100      	bne.n	8013b24 <LoRaMacMlmeRequest+0xe4>
 8013b22:	e0a5      	b.n	8013c70 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013b24:	4b6c      	ldr	r3, [pc, #432]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013b26:	4a70      	ldr	r2, [pc, #448]	; (8013ce8 <LoRaMacMlmeRequest+0x2a8>)
 8013b28:	589b      	ldr	r3, [r3, r2]
 8013b2a:	7818      	ldrb	r0, [r3, #0]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	791b      	ldrb	r3, [r3, #4]
 8013b30:	b259      	sxtb	r1, r3
 8013b32:	4b69      	ldr	r3, [pc, #420]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013b34:	4a6c      	ldr	r2, [pc, #432]	; (8013ce8 <LoRaMacMlmeRequest+0x2a8>)
 8013b36:	589c      	ldr	r4, [r3, r2]
 8013b38:	2201      	movs	r2, #1
 8013b3a:	f002 feba 	bl	80168b2 <RegionAlternateDr>
 8013b3e:	0003      	movs	r3, r0
 8013b40:	001a      	movs	r2, r3
 8013b42:	2385      	movs	r3, #133	; 0x85
 8013b44:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8013b46:	e093      	b.n	8013c70 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013b48:	2417      	movs	r4, #23
 8013b4a:	193b      	adds	r3, r7, r4
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013b50:	230c      	movs	r3, #12
 8013b52:	18fb      	adds	r3, r7, r3
 8013b54:	2200      	movs	r2, #0
 8013b56:	0019      	movs	r1, r3
 8013b58:	2002      	movs	r0, #2
 8013b5a:	f000 fd7d 	bl	8014658 <LoRaMacCommandsAddCmd>
 8013b5e:	1e03      	subs	r3, r0, #0
 8013b60:	d100      	bne.n	8013b64 <LoRaMacMlmeRequest+0x124>
 8013b62:	e087      	b.n	8013c74 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b64:	193b      	adds	r3, r7, r4
 8013b66:	2213      	movs	r2, #19
 8013b68:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b6a:	e083      	b.n	8013c74 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	889b      	ldrh	r3, [r3, #4]
 8013b70:	2217      	movs	r2, #23
 8013b72:	18bc      	adds	r4, r7, r2
 8013b74:	0018      	movs	r0, r3
 8013b76:	f7fe fa5d 	bl	8012034 <SetTxContinuousWave>
 8013b7a:	0003      	movs	r3, r0
 8013b7c:	7023      	strb	r3, [r4, #0]
            break;
 8013b7e:	e080      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	8898      	ldrh	r0, [r3, #4]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6899      	ldr	r1, [r3, #8]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	7b1b      	ldrb	r3, [r3, #12]
 8013b8c:	2217      	movs	r2, #23
 8013b8e:	18bc      	adds	r4, r7, r2
 8013b90:	001a      	movs	r2, r3
 8013b92:	f7fe fa9b 	bl	80120cc <SetTxContinuousWave1>
 8013b96:	0003      	movs	r3, r0
 8013b98:	7023      	strb	r3, [r4, #0]
            break;
 8013b9a:	e072      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013b9c:	2417      	movs	r4, #23
 8013b9e:	193b      	adds	r3, r7, r4
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013ba4:	230c      	movs	r3, #12
 8013ba6:	18fb      	adds	r3, r7, r3
 8013ba8:	2200      	movs	r2, #0
 8013baa:	0019      	movs	r1, r3
 8013bac:	200d      	movs	r0, #13
 8013bae:	f000 fd53 	bl	8014658 <LoRaMacCommandsAddCmd>
 8013bb2:	1e03      	subs	r3, r0, #0
 8013bb4:	d060      	beq.n	8013c78 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013bb6:	193b      	adds	r3, r7, r4
 8013bb8:	2213      	movs	r2, #19
 8013bba:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013bbc:	e05c      	b.n	8013c78 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8013bbe:	4b46      	ldr	r3, [pc, #280]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013bc0:	4a49      	ldr	r2, [pc, #292]	; (8013ce8 <LoRaMacMlmeRequest+0x2a8>)
 8013bc2:	589b      	ldr	r3, [r3, r2]
 8013bc4:	227c      	movs	r2, #124	; 0x7c
 8013bc6:	5c9b      	ldrb	r3, [r3, r2]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d157      	bne.n	8013c7c <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013bcc:	2416      	movs	r4, #22
 8013bce:	193b      	adds	r3, r7, r4
 8013bd0:	687a      	ldr	r2, [r7, #4]
 8013bd2:	7912      	ldrb	r2, [r2, #4]
 8013bd4:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	791b      	ldrb	r3, [r3, #4]
 8013bda:	075b      	lsls	r3, r3, #29
 8013bdc:	0f5b      	lsrs	r3, r3, #29
 8013bde:	b2db      	uxtb	r3, r3
 8013be0:	0018      	movs	r0, r3
 8013be2:	f000 fb65 	bl	80142b0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013be6:	210c      	movs	r1, #12
 8013be8:	187b      	adds	r3, r7, r1
 8013bea:	193a      	adds	r2, r7, r4
 8013bec:	7812      	ldrb	r2, [r2, #0]
 8013bee:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8013bf0:	2417      	movs	r4, #23
 8013bf2:	193b      	adds	r3, r7, r4
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013bf8:	187b      	adds	r3, r7, r1
 8013bfa:	2201      	movs	r2, #1
 8013bfc:	0019      	movs	r1, r3
 8013bfe:	2010      	movs	r0, #16
 8013c00:	f000 fd2a 	bl	8014658 <LoRaMacCommandsAddCmd>
 8013c04:	1e03      	subs	r3, r0, #0
 8013c06:	d039      	beq.n	8013c7c <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013c08:	193b      	adds	r3, r7, r4
 8013c0a:	2213      	movs	r2, #19
 8013c0c:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8013c0e:	e035      	b.n	8013c7c <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013c10:	2417      	movs	r4, #23
 8013c12:	193b      	adds	r3, r7, r4
 8013c14:	2200      	movs	r2, #0
 8013c16:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013c18:	230c      	movs	r3, #12
 8013c1a:	18fb      	adds	r3, r7, r3
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	0019      	movs	r1, r3
 8013c20:	2012      	movs	r0, #18
 8013c22:	f000 fd19 	bl	8014658 <LoRaMacCommandsAddCmd>
 8013c26:	1e03      	subs	r3, r0, #0
 8013c28:	d02a      	beq.n	8013c80 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013c2a:	193b      	adds	r3, r7, r4
 8013c2c:	2213      	movs	r2, #19
 8013c2e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013c30:	e026      	b.n	8013c80 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013c32:	2310      	movs	r3, #16
 8013c34:	18fb      	adds	r3, r7, r3
 8013c36:	2201      	movs	r2, #1
 8013c38:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013c3a:	f000 faf7 	bl	801422c <LoRaMacClassBIsAcquisitionInProgress>
 8013c3e:	0003      	movs	r3, r0
 8013c40:	001a      	movs	r2, r3
 8013c42:	2301      	movs	r3, #1
 8013c44:	4053      	eors	r3, r2
 8013c46:	b2db      	uxtb	r3, r3
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d00a      	beq.n	8013c62 <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	f000 facf 	bl	80141f0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013c52:	2000      	movs	r0, #0
 8013c54:	f000 faf0 	bl	8014238 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013c58:	2317      	movs	r3, #23
 8013c5a:	18fb      	adds	r3, r7, r3
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013c60:	e00f      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 8013c62:	2317      	movs	r3, #23
 8013c64:	18fb      	adds	r3, r7, r3
 8013c66:	2201      	movs	r2, #1
 8013c68:	701a      	strb	r2, [r3, #0]
            break;
 8013c6a:	e00a      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 8013c6c:	46c0      	nop			; (mov r8, r8)
 8013c6e:	e008      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
            break;
 8013c70:	46c0      	nop			; (mov r8, r8)
 8013c72:	e006      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
            break;
 8013c74:	46c0      	nop			; (mov r8, r8)
 8013c76:	e004      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
            break;
 8013c78:	46c0      	nop			; (mov r8, r8)
 8013c7a:	e002      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
            break;
 8013c7c:	46c0      	nop			; (mov r8, r8)
 8013c7e:	e000      	b.n	8013c82 <LoRaMacMlmeRequest+0x242>
            break;
 8013c80:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013c82:	4a15      	ldr	r2, [pc, #84]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013c84:	2391      	movs	r3, #145	; 0x91
 8013c86:	00db      	lsls	r3, r3, #3
 8013c88:	58d2      	ldr	r2, [r2, r3]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013c8e:	2317      	movs	r3, #23
 8013c90:	18fb      	adds	r3, r7, r3
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d00e      	beq.n	8013cb6 <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013c98:	f001 f8ec 	bl	8014e74 <LoRaMacConfirmQueueGetCnt>
 8013c9c:	1e03      	subs	r3, r0, #0
 8013c9e:	d111      	bne.n	8013cc4 <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 8013ca0:	4b0d      	ldr	r3, [pc, #52]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013ca2:	4a12      	ldr	r2, [pc, #72]	; (8013cec <LoRaMacMlmeRequest+0x2ac>)
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013ca8:	4b0b      	ldr	r3, [pc, #44]	; (8013cd8 <LoRaMacMlmeRequest+0x298>)
 8013caa:	4a0d      	ldr	r2, [pc, #52]	; (8013ce0 <LoRaMacMlmeRequest+0x2a0>)
 8013cac:	5c99      	ldrb	r1, [r3, r2]
 8013cae:	2004      	movs	r0, #4
 8013cb0:	4381      	bics	r1, r0
 8013cb2:	5499      	strb	r1, [r3, r2]
 8013cb4:	e006      	b.n	8013cc4 <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013cb6:	2310      	movs	r3, #16
 8013cb8:	18fb      	adds	r3, r7, r3
 8013cba:	0018      	movs	r0, r3
 8013cbc:	f000 ff6c 	bl	8014b98 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8013cc0:	f7fe fcc6 	bl	8012650 <EventMacNvmCtxChanged>
    }
    return status;
 8013cc4:	2317      	movs	r3, #23
 8013cc6:	18fb      	adds	r3, r7, r3
 8013cc8:	781b      	ldrb	r3, [r3, #0]
}
 8013cca:	0018      	movs	r0, r3
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	b006      	add	sp, #24
 8013cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8013cd2:	46c0      	nop			; (mov r8, r8)
 8013cd4:	20000a04 	.word	0x20000a04
 8013cd8:	200005b4 	.word	0x200005b4
 8013cdc:	00000451 	.word	0x00000451
 8013ce0:	00000481 	.word	0x00000481
 8013ce4:	0801f068 	.word	0x0801f068
 8013ce8:	00000484 	.word	0x00000484
 8013cec:	00000414 	.word	0x00000414

08013cf0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cf2:	b08d      	sub	sp, #52	; 0x34
 8013cf4:	af02      	add	r7, sp, #8
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	000a      	movs	r2, r1
 8013cfa:	1cfb      	adds	r3, r7, #3
 8013cfc:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013cfe:	2327      	movs	r3, #39	; 0x27
 8013d00:	18fb      	adds	r3, r7, r3
 8013d02:	2202      	movs	r2, #2
 8013d04:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8013d06:	2326      	movs	r3, #38	; 0x26
 8013d08:	18fb      	adds	r3, r7, r3
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8013d0e:	231d      	movs	r3, #29
 8013d10:	18fb      	adds	r3, r7, r3
 8013d12:	2200      	movs	r2, #0
 8013d14:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 8013d16:	231c      	movs	r3, #28
 8013d18:	18fb      	adds	r3, r7, r3
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d101      	bne.n	8013d28 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013d24:	2303      	movs	r3, #3
 8013d26:	e11b      	b.n	8013f60 <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 8013d28:	f7fe fce6 	bl	80126f8 <LoRaMacIsBusy>
 8013d2c:	1e03      	subs	r3, r0, #0
 8013d2e:	d001      	beq.n	8013d34 <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8013d30:	2301      	movs	r3, #1
 8013d32:	e115      	b.n	8013f60 <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 8013d34:	230c      	movs	r3, #12
 8013d36:	18fb      	adds	r3, r7, r3
 8013d38:	2200      	movs	r2, #0
 8013d3a:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013d3c:	4b8a      	ldr	r3, [pc, #552]	; (8013f68 <LoRaMacMcpsRequest+0x278>)
 8013d3e:	2214      	movs	r2, #20
 8013d40:	2100      	movs	r1, #0
 8013d42:	0018      	movs	r0, r3
 8013d44:	f005 f904 	bl	8018f50 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d48:	4b88      	ldr	r3, [pc, #544]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013d4a:	4a89      	ldr	r2, [pc, #548]	; (8013f70 <LoRaMacMcpsRequest+0x280>)
 8013d4c:	2101      	movs	r1, #1
 8013d4e:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013d50:	4b86      	ldr	r3, [pc, #536]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013d52:	4a88      	ldr	r2, [pc, #544]	; (8013f74 <LoRaMacMcpsRequest+0x284>)
 8013d54:	2101      	movs	r1, #1
 8013d56:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	2b03      	cmp	r3, #3
 8013d5e:	d056      	beq.n	8013e0e <LoRaMacMcpsRequest+0x11e>
 8013d60:	dc72      	bgt.n	8013e48 <LoRaMacMcpsRequest+0x158>
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d002      	beq.n	8013d6c <LoRaMacMcpsRequest+0x7c>
 8013d66:	2b01      	cmp	r3, #1
 8013d68:	d024      	beq.n	8013db4 <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013d6a:	e06d      	b.n	8013e48 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 8013d6c:	231c      	movs	r3, #28
 8013d6e:	18fb      	adds	r3, r7, r3
 8013d70:	2201      	movs	r2, #1
 8013d72:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8013d74:	4b7d      	ldr	r3, [pc, #500]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013d76:	4a80      	ldr	r2, [pc, #512]	; (8013f78 <LoRaMacMcpsRequest+0x288>)
 8013d78:	2101      	movs	r1, #1
 8013d7a:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013d7c:	230c      	movs	r3, #12
 8013d7e:	18fb      	adds	r3, r7, r3
 8013d80:	781a      	ldrb	r2, [r3, #0]
 8013d82:	211f      	movs	r1, #31
 8013d84:	400a      	ands	r2, r1
 8013d86:	1c11      	adds	r1, r2, #0
 8013d88:	2240      	movs	r2, #64	; 0x40
 8013d8a:	430a      	orrs	r2, r1
 8013d8c:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8013d8e:	2326      	movs	r3, #38	; 0x26
 8013d90:	18fb      	adds	r3, r7, r3
 8013d92:	687a      	ldr	r2, [r7, #4]
 8013d94:	7912      	ldrb	r2, [r2, #4]
 8013d96:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	689b      	ldr	r3, [r3, #8]
 8013d9c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8013d9e:	231e      	movs	r3, #30
 8013da0:	18fb      	adds	r3, r7, r3
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	8992      	ldrh	r2, [r2, #12]
 8013da6:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8013da8:	231d      	movs	r3, #29
 8013daa:	18fb      	adds	r3, r7, r3
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	7b92      	ldrb	r2, [r2, #14]
 8013db0:	701a      	strb	r2, [r3, #0]
            break;
 8013db2:	e04a      	b.n	8013e4a <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8013db4:	231c      	movs	r3, #28
 8013db6:	18fb      	adds	r3, r7, r3
 8013db8:	2201      	movs	r2, #1
 8013dba:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	7bdb      	ldrb	r3, [r3, #15]
 8013dc0:	1c1a      	adds	r2, r3, #0
 8013dc2:	b2d3      	uxtb	r3, r2
 8013dc4:	2b08      	cmp	r3, #8
 8013dc6:	d901      	bls.n	8013dcc <LoRaMacMcpsRequest+0xdc>
 8013dc8:	2308      	movs	r3, #8
 8013dca:	1c1a      	adds	r2, r3, #0
 8013dcc:	b2d1      	uxtb	r1, r2
 8013dce:	4b67      	ldr	r3, [pc, #412]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013dd0:	4a69      	ldr	r2, [pc, #420]	; (8013f78 <LoRaMacMcpsRequest+0x288>)
 8013dd2:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013dd4:	230c      	movs	r3, #12
 8013dd6:	18fb      	adds	r3, r7, r3
 8013dd8:	781a      	ldrb	r2, [r3, #0]
 8013dda:	211f      	movs	r1, #31
 8013ddc:	400a      	ands	r2, r1
 8013dde:	1c11      	adds	r1, r2, #0
 8013de0:	2280      	movs	r2, #128	; 0x80
 8013de2:	4252      	negs	r2, r2
 8013de4:	430a      	orrs	r2, r1
 8013de6:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8013de8:	2326      	movs	r3, #38	; 0x26
 8013dea:	18fb      	adds	r3, r7, r3
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	7912      	ldrb	r2, [r2, #4]
 8013df0:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	689b      	ldr	r3, [r3, #8]
 8013df6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8013df8:	231e      	movs	r3, #30
 8013dfa:	18fb      	adds	r3, r7, r3
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	8992      	ldrh	r2, [r2, #12]
 8013e00:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8013e02:	231d      	movs	r3, #29
 8013e04:	18fb      	adds	r3, r7, r3
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	7b92      	ldrb	r2, [r2, #14]
 8013e0a:	701a      	strb	r2, [r3, #0]
            break;
 8013e0c:	e01d      	b.n	8013e4a <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8013e0e:	231c      	movs	r3, #28
 8013e10:	18fb      	adds	r3, r7, r3
 8013e12:	2201      	movs	r2, #1
 8013e14:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8013e16:	4b55      	ldr	r3, [pc, #340]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013e18:	4a57      	ldr	r2, [pc, #348]	; (8013f78 <LoRaMacMcpsRequest+0x288>)
 8013e1a:	2101      	movs	r1, #1
 8013e1c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013e1e:	230c      	movs	r3, #12
 8013e20:	18fb      	adds	r3, r7, r3
 8013e22:	781a      	ldrb	r2, [r3, #0]
 8013e24:	2120      	movs	r1, #32
 8013e26:	4249      	negs	r1, r1
 8013e28:	430a      	orrs	r2, r1
 8013e2a:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8013e32:	231e      	movs	r3, #30
 8013e34:	18fb      	adds	r3, r7, r3
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	8912      	ldrh	r2, [r2, #8]
 8013e3a:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8013e3c:	231d      	movs	r3, #29
 8013e3e:	18fb      	adds	r3, r7, r3
 8013e40:	687a      	ldr	r2, [r7, #4]
 8013e42:	7a92      	ldrb	r2, [r2, #10]
 8013e44:	701a      	strb	r2, [r3, #0]
            break;
 8013e46:	e000      	b.n	8013e4a <LoRaMacMcpsRequest+0x15a>
            break;
 8013e48:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013e4a:	2114      	movs	r1, #20
 8013e4c:	187b      	adds	r3, r7, r1
 8013e4e:	2202      	movs	r2, #2
 8013e50:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013e52:	4b46      	ldr	r3, [pc, #280]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013e54:	4a49      	ldr	r2, [pc, #292]	; (8013f7c <LoRaMacMcpsRequest+0x28c>)
 8013e56:	589b      	ldr	r3, [r3, r2]
 8013e58:	22b8      	movs	r2, #184	; 0xb8
 8013e5a:	5c9a      	ldrb	r2, [r3, r2]
 8013e5c:	187b      	adds	r3, r7, r1
 8013e5e:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013e60:	4b42      	ldr	r3, [pc, #264]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013e62:	4a46      	ldr	r2, [pc, #280]	; (8013f7c <LoRaMacMcpsRequest+0x28c>)
 8013e64:	589b      	ldr	r3, [r3, r2]
 8013e66:	781b      	ldrb	r3, [r3, #0]
 8013e68:	187a      	adds	r2, r7, r1
 8013e6a:	0011      	movs	r1, r2
 8013e6c:	0018      	movs	r0, r3
 8013e6e:	f002 fba2 	bl	80165b6 <RegionGetPhyParam>
 8013e72:	0003      	movs	r3, r0
 8013e74:	001a      	movs	r2, r3
 8013e76:	2110      	movs	r1, #16
 8013e78:	187b      	adds	r3, r7, r1
 8013e7a:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013e7c:	187b      	adds	r3, r7, r1
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	b259      	sxtb	r1, r3
 8013e82:	231d      	movs	r3, #29
 8013e84:	18fa      	adds	r2, r7, r3
 8013e86:	18fb      	adds	r3, r7, r3
 8013e88:	1c0c      	adds	r4, r1, #0
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	b258      	sxtb	r0, r3
 8013e8e:	b261      	sxtb	r1, r4
 8013e90:	4288      	cmp	r0, r1
 8013e92:	da00      	bge.n	8013e96 <LoRaMacMcpsRequest+0x1a6>
 8013e94:	1c23      	adds	r3, r4, #0
 8013e96:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8013e98:	231c      	movs	r3, #28
 8013e9a:	18fb      	adds	r3, r7, r3
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d055      	beq.n	8013f4e <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8013ea2:	4b32      	ldr	r3, [pc, #200]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013ea4:	4a35      	ldr	r2, [pc, #212]	; (8013f7c <LoRaMacMcpsRequest+0x28c>)
 8013ea6:	589b      	ldr	r3, [r3, r2]
 8013ea8:	227e      	movs	r2, #126	; 0x7e
 8013eaa:	5c9b      	ldrb	r3, [r3, r2]
 8013eac:	2201      	movs	r2, #1
 8013eae:	4053      	eors	r3, r2
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d022      	beq.n	8013efc <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 8013eb6:	2408      	movs	r4, #8
 8013eb8:	193b      	adds	r3, r7, r4
 8013eba:	221d      	movs	r2, #29
 8013ebc:	18ba      	adds	r2, r7, r2
 8013ebe:	7812      	ldrb	r2, [r2, #0]
 8013ec0:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013ec2:	4b2a      	ldr	r3, [pc, #168]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013ec4:	4a2d      	ldr	r2, [pc, #180]	; (8013f7c <LoRaMacMcpsRequest+0x28c>)
 8013ec6:	589b      	ldr	r3, [r3, r2]
 8013ec8:	22b8      	movs	r2, #184	; 0xb8
 8013eca:	5c9a      	ldrb	r2, [r3, r2]
 8013ecc:	193b      	adds	r3, r7, r4
 8013ece:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013ed0:	4b26      	ldr	r3, [pc, #152]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013ed2:	4a2a      	ldr	r2, [pc, #168]	; (8013f7c <LoRaMacMcpsRequest+0x28c>)
 8013ed4:	589b      	ldr	r3, [r3, r2]
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	1939      	adds	r1, r7, r4
 8013eda:	2205      	movs	r2, #5
 8013edc:	0018      	movs	r0, r3
 8013ede:	f002 fbd1 	bl	8016684 <RegionVerify>
 8013ee2:	1e03      	subs	r3, r0, #0
 8013ee4:	d008      	beq.n	8013ef8 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013ee6:	4b21      	ldr	r3, [pc, #132]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013ee8:	4a24      	ldr	r2, [pc, #144]	; (8013f7c <LoRaMacMcpsRequest+0x28c>)
 8013eea:	589b      	ldr	r3, [r3, r2]
 8013eec:	193a      	adds	r2, r7, r4
 8013eee:	2100      	movs	r1, #0
 8013ef0:	5651      	ldrsb	r1, [r2, r1]
 8013ef2:	2285      	movs	r2, #133	; 0x85
 8013ef4:	5499      	strb	r1, [r3, r2]
 8013ef6:	e001      	b.n	8013efc <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ef8:	2303      	movs	r3, #3
 8013efa:	e031      	b.n	8013f60 <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8013efc:	2627      	movs	r6, #39	; 0x27
 8013efe:	19bc      	adds	r4, r7, r6
 8013f00:	231e      	movs	r3, #30
 8013f02:	18fb      	adds	r3, r7, r3
 8013f04:	881d      	ldrh	r5, [r3, #0]
 8013f06:	6a3a      	ldr	r2, [r7, #32]
 8013f08:	2326      	movs	r3, #38	; 0x26
 8013f0a:	18fb      	adds	r3, r7, r3
 8013f0c:	7819      	ldrb	r1, [r3, #0]
 8013f0e:	230c      	movs	r3, #12
 8013f10:	18f8      	adds	r0, r7, r3
 8013f12:	1cfb      	adds	r3, r7, #3
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	9300      	str	r3, [sp, #0]
 8013f18:	002b      	movs	r3, r5
 8013f1a:	f7fd f86d 	bl	8010ff8 <Send>
 8013f1e:	0003      	movs	r3, r0
 8013f20:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8013f22:	19bb      	adds	r3, r7, r6
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d10d      	bne.n	8013f46 <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	7819      	ldrb	r1, [r3, #0]
 8013f2e:	4b0f      	ldr	r3, [pc, #60]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013f30:	4a13      	ldr	r2, [pc, #76]	; (8013f80 <LoRaMacMcpsRequest+0x290>)
 8013f32:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013f34:	4b0d      	ldr	r3, [pc, #52]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013f36:	4a13      	ldr	r2, [pc, #76]	; (8013f84 <LoRaMacMcpsRequest+0x294>)
 8013f38:	5c99      	ldrb	r1, [r3, r2]
 8013f3a:	2001      	movs	r0, #1
 8013f3c:	4301      	orrs	r1, r0
 8013f3e:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 8013f40:	f7fe fb86 	bl	8012650 <EventMacNvmCtxChanged>
 8013f44:	e003      	b.n	8013f4e <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013f46:	4b09      	ldr	r3, [pc, #36]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013f48:	4a0f      	ldr	r2, [pc, #60]	; (8013f88 <LoRaMacMcpsRequest+0x298>)
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013f4e:	4a07      	ldr	r2, [pc, #28]	; (8013f6c <LoRaMacMcpsRequest+0x27c>)
 8013f50:	2391      	movs	r3, #145	; 0x91
 8013f52:	00db      	lsls	r3, r3, #3
 8013f54:	58d2      	ldr	r2, [r2, r3]
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	611a      	str	r2, [r3, #16]

    return status;
 8013f5a:	2327      	movs	r3, #39	; 0x27
 8013f5c:	18fb      	adds	r3, r7, r3
 8013f5e:	781b      	ldrb	r3, [r3, #0]
}
 8013f60:	0018      	movs	r0, r3
 8013f62:	46bd      	mov	sp, r7
 8013f64:	b00b      	add	sp, #44	; 0x2c
 8013f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f68:	200009f0 	.word	0x200009f0
 8013f6c:	200005b4 	.word	0x200005b4
 8013f70:	0000043d 	.word	0x0000043d
 8013f74:	00000412 	.word	0x00000412
 8013f78:	00000411 	.word	0x00000411
 8013f7c:	00000484 	.word	0x00000484
 8013f80:	0000043c 	.word	0x0000043c
 8013f84:	00000481 	.word	0x00000481
 8013f88:	00000414 	.word	0x00000414

08013f8c <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b084      	sub	sp, #16
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	0002      	movs	r2, r0
 8013f94:	1dfb      	adds	r3, r7, #7
 8013f96:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013f98:	210c      	movs	r1, #12
 8013f9a:	187b      	adds	r3, r7, r1
 8013f9c:	1dfa      	adds	r2, r7, #7
 8013f9e:	7812      	ldrb	r2, [r2, #0]
 8013fa0:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013fa2:	4b0b      	ldr	r3, [pc, #44]	; (8013fd0 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013fa4:	4a0b      	ldr	r2, [pc, #44]	; (8013fd4 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013fa6:	589b      	ldr	r3, [r3, r2]
 8013fa8:	781b      	ldrb	r3, [r3, #0]
 8013faa:	1879      	adds	r1, r7, r1
 8013fac:	220f      	movs	r2, #15
 8013fae:	0018      	movs	r0, r3
 8013fb0:	f002 fb68 	bl	8016684 <RegionVerify>
 8013fb4:	1e03      	subs	r3, r0, #0
 8013fb6:	d006      	beq.n	8013fc6 <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8013fb8:	4b05      	ldr	r3, [pc, #20]	; (8013fd0 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013fba:	4a06      	ldr	r2, [pc, #24]	; (8013fd4 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013fbc:	589b      	ldr	r3, [r3, r2]
 8013fbe:	1dfa      	adds	r2, r7, #7
 8013fc0:	21c9      	movs	r1, #201	; 0xc9
 8013fc2:	7812      	ldrb	r2, [r2, #0]
 8013fc4:	545a      	strb	r2, [r3, r1]
    }
}
 8013fc6:	46c0      	nop			; (mov r8, r8)
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	b004      	add	sp, #16
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	46c0      	nop			; (mov r8, r8)
 8013fd0:	200005b4 	.word	0x200005b4
 8013fd4:	00000484 	.word	0x00000484

08013fd8 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fda:	b08b      	sub	sp, #44	; 0x2c
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	60f8      	str	r0, [r7, #12]
 8013fe0:	60b9      	str	r1, [r7, #8]
 8013fe2:	607a      	str	r2, [r7, #4]
 8013fe4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013fe6:	2327      	movs	r3, #39	; 0x27
 8013fe8:	18fb      	adds	r3, r7, r3
 8013fea:	2200      	movs	r2, #0
 8013fec:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8013fee:	2426      	movs	r4, #38	; 0x26
 8013ff0:	193b      	adds	r3, r7, r4
 8013ff2:	68fa      	ldr	r2, [r7, #12]
 8013ff4:	7c12      	ldrb	r2, [r2, #16]
 8013ff6:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8013ff8:	2325      	movs	r3, #37	; 0x25
 8013ffa:	18fb      	adds	r3, r7, r3
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	7c52      	ldrb	r2, [r2, #17]
 8014000:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	689a      	ldr	r2, [r3, #8]
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	795b      	ldrb	r3, [r3, #5]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d100      	bne.n	8014014 <CalcNextV10X+0x3c>
 8014012:	e0a5      	b.n	8014160 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014014:	211c      	movs	r1, #28
 8014016:	187b      	adds	r3, r7, r1
 8014018:	2202      	movs	r2, #2
 801401a:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	7c9a      	ldrb	r2, [r3, #18]
 8014020:	187b      	adds	r3, r7, r1
 8014022:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	7cdb      	ldrb	r3, [r3, #19]
 8014028:	187a      	adds	r2, r7, r1
 801402a:	0011      	movs	r1, r2
 801402c:	0018      	movs	r0, r3
 801402e:	f002 fac2 	bl	80165b6 <RegionGetPhyParam>
 8014032:	0003      	movs	r3, r0
 8014034:	001a      	movs	r2, r3
 8014036:	2118      	movs	r1, #24
 8014038:	187b      	adds	r3, r7, r1
 801403a:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 801403c:	187b      	adds	r3, r7, r1
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	2124      	movs	r1, #36	; 0x24
 8014042:	187b      	adds	r3, r7, r1
 8014044:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8014046:	193a      	adds	r2, r7, r4
 8014048:	187b      	adds	r3, r7, r1
 801404a:	1939      	adds	r1, r7, r4
 801404c:	780c      	ldrb	r4, [r1, #0]
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	b258      	sxtb	r0, r3
 8014052:	b261      	sxtb	r1, r4
 8014054:	4288      	cmp	r0, r1
 8014056:	da00      	bge.n	801405a <CalcNextV10X+0x82>
 8014058:	1c23      	adds	r3, r4, #0
 801405a:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 801405c:	2326      	movs	r3, #38	; 0x26
 801405e:	18fa      	adds	r2, r7, r3
 8014060:	2324      	movs	r3, #36	; 0x24
 8014062:	18fb      	adds	r3, r7, r3
 8014064:	7812      	ldrb	r2, [r2, #0]
 8014066:	b252      	sxtb	r2, r2
 8014068:	781b      	ldrb	r3, [r3, #0]
 801406a:	b25b      	sxtb	r3, r3
 801406c:	429a      	cmp	r2, r3
 801406e:	d107      	bne.n	8014080 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	2200      	movs	r2, #0
 8014074:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8014076:	2327      	movs	r3, #39	; 0x27
 8014078:	18fb      	adds	r3, r7, r3
 801407a:	2200      	movs	r2, #0
 801407c:	701a      	strb	r2, [r3, #0]
 801407e:	e06f      	b.n	8014160 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	8992      	ldrh	r2, [r2, #12]
 8014088:	4293      	cmp	r3, r2
 801408a:	d304      	bcc.n	8014096 <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 801408c:	2327      	movs	r3, #39	; 0x27
 801408e:	18fb      	adds	r3, r7, r3
 8014090:	2201      	movs	r2, #1
 8014092:	701a      	strb	r2, [r3, #0]
 8014094:	e003      	b.n	801409e <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 8014096:	2327      	movs	r3, #39	; 0x27
 8014098:	18fb      	adds	r3, r7, r3
 801409a:	2200      	movs	r2, #0
 801409c:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	68fa      	ldr	r2, [r7, #12]
 80140a4:	8992      	ldrh	r2, [r2, #12]
 80140a6:	0011      	movs	r1, r2
 80140a8:	68fa      	ldr	r2, [r7, #12]
 80140aa:	89d2      	ldrh	r2, [r2, #14]
 80140ac:	188a      	adds	r2, r1, r2
 80140ae:	4293      	cmp	r3, r2
 80140b0:	d356      	bcc.n	8014160 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80140b2:	241c      	movs	r4, #28
 80140b4:	193b      	adds	r3, r7, r4
 80140b6:	2208      	movs	r2, #8
 80140b8:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	7cdb      	ldrb	r3, [r3, #19]
 80140be:	193a      	adds	r2, r7, r4
 80140c0:	0011      	movs	r1, r2
 80140c2:	0018      	movs	r0, r3
 80140c4:	f002 fa77 	bl	80165b6 <RegionGetPhyParam>
 80140c8:	0003      	movs	r3, r0
 80140ca:	001a      	movs	r2, r3
 80140cc:	2518      	movs	r5, #24
 80140ce:	197b      	adds	r3, r7, r5
 80140d0:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 80140d2:	197b      	adds	r3, r7, r5
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	2325      	movs	r3, #37	; 0x25
 80140d8:	18fb      	adds	r3, r7, r3
 80140da:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	689a      	ldr	r2, [r3, #8]
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	89db      	ldrh	r3, [r3, #14]
 80140e4:	0019      	movs	r1, r3
 80140e6:	0010      	movs	r0, r2
 80140e8:	f7ec f8a6 	bl	8000238 <__aeabi_uidivmod>
 80140ec:	000b      	movs	r3, r1
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d136      	bne.n	8014160 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80140f2:	193b      	adds	r3, r7, r4
 80140f4:	2222      	movs	r2, #34	; 0x22
 80140f6:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 80140f8:	193b      	adds	r3, r7, r4
 80140fa:	2626      	movs	r6, #38	; 0x26
 80140fc:	19ba      	adds	r2, r7, r6
 80140fe:	7812      	ldrb	r2, [r2, #0]
 8014100:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	7c9a      	ldrb	r2, [r3, #18]
 8014106:	193b      	adds	r3, r7, r4
 8014108:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	7cdb      	ldrb	r3, [r3, #19]
 801410e:	193a      	adds	r2, r7, r4
 8014110:	0011      	movs	r1, r2
 8014112:	0018      	movs	r0, r3
 8014114:	f002 fa4f 	bl	80165b6 <RegionGetPhyParam>
 8014118:	0003      	movs	r3, r0
 801411a:	001a      	movs	r2, r3
 801411c:	197b      	adds	r3, r7, r5
 801411e:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8014120:	197b      	adds	r3, r7, r5
 8014122:	681a      	ldr	r2, [r3, #0]
 8014124:	19bb      	adds	r3, r7, r6
 8014126:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8014128:	19ba      	adds	r2, r7, r6
 801412a:	2324      	movs	r3, #36	; 0x24
 801412c:	18fb      	adds	r3, r7, r3
 801412e:	7812      	ldrb	r2, [r2, #0]
 8014130:	b252      	sxtb	r2, r2
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	b25b      	sxtb	r3, r3
 8014136:	429a      	cmp	r2, r3
 8014138:	d112      	bne.n	8014160 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801413a:	2327      	movs	r3, #39	; 0x27
 801413c:	18fb      	adds	r3, r7, r3
 801413e:	2200      	movs	r2, #0
 8014140:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	791b      	ldrb	r3, [r3, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00a      	beq.n	8014160 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801414a:	2110      	movs	r1, #16
 801414c:	187b      	adds	r3, r7, r1
 801414e:	2202      	movs	r2, #2
 8014150:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	7cdb      	ldrb	r3, [r3, #19]
 8014156:	187a      	adds	r2, r7, r1
 8014158:	0011      	movs	r1, r2
 801415a:	0018      	movs	r0, r3
 801415c:	f002 fa67 	bl	801662e <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	2226      	movs	r2, #38	; 0x26
 8014164:	18ba      	adds	r2, r7, r2
 8014166:	7812      	ldrb	r2, [r2, #0]
 8014168:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2225      	movs	r2, #37	; 0x25
 801416e:	18ba      	adds	r2, r7, r2
 8014170:	7812      	ldrb	r2, [r2, #0]
 8014172:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014174:	2327      	movs	r3, #39	; 0x27
 8014176:	18fb      	adds	r3, r7, r3
 8014178:	781b      	ldrb	r3, [r3, #0]
}
 801417a:	0018      	movs	r0, r3
 801417c:	46bd      	mov	sp, r7
 801417e:	b00b      	add	sp, #44	; 0x2c
 8014180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014182 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014182:	b580      	push	{r7, lr}
 8014184:	b084      	sub	sp, #16
 8014186:	af00      	add	r7, sp, #0
 8014188:	60f8      	str	r0, [r7, #12]
 801418a:	60b9      	str	r1, [r7, #8]
 801418c:	607a      	str	r2, [r7, #4]
 801418e:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	789b      	ldrb	r3, [r3, #2]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d107      	bne.n	80141a8 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	68b9      	ldr	r1, [r7, #8]
 801419e:	68f8      	ldr	r0, [r7, #12]
 80141a0:	f7ff ff1a 	bl	8013fd8 <CalcNextV10X>
 80141a4:	0003      	movs	r3, r0
 80141a6:	e000      	b.n	80141aa <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80141a8:	2300      	movs	r3, #0
}
 80141aa:	0018      	movs	r0, r3
 80141ac:	46bd      	mov	sp, r7
 80141ae:	b004      	add	sp, #16
 80141b0:	bd80      	pop	{r7, pc}

080141b2 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 80141b2:	b580      	push	{r7, lr}
 80141b4:	b084      	sub	sp, #16
 80141b6:	af00      	add	r7, sp, #0
 80141b8:	60f8      	str	r0, [r7, #12]
 80141ba:	60b9      	str	r1, [r7, #8]
 80141bc:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80141be:	46c0      	nop			; (mov r8, r8)
 80141c0:	46bd      	mov	sp, r7
 80141c2:	b004      	add	sp, #16
 80141c4:	bd80      	pop	{r7, pc}

080141c6 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 80141c6:	b580      	push	{r7, lr}
 80141c8:	b082      	sub	sp, #8
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 80141ce:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 80141d0:	0018      	movs	r0, r3
 80141d2:	46bd      	mov	sp, r7
 80141d4:	b002      	add	sp, #8
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2200      	movs	r2, #0
 80141e4:	601a      	str	r2, [r3, #0]
    return NULL;
 80141e6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80141e8:	0018      	movs	r0, r3
 80141ea:	46bd      	mov	sp, r7
 80141ec:	b002      	add	sp, #8
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	0002      	movs	r2, r0
 80141f8:	1dfb      	adds	r3, r7, #7
 80141fa:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 80141fc:	46c0      	nop			; (mov r8, r8)
 80141fe:	46bd      	mov	sp, r7
 8014200:	b002      	add	sp, #8
 8014202:	bd80      	pop	{r7, pc}

08014204 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	0002      	movs	r2, r0
 801420c:	1dfb      	adds	r3, r7, #7
 801420e:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014210:	46c0      	nop			; (mov r8, r8)
 8014212:	46bd      	mov	sp, r7
 8014214:	b002      	add	sp, #8
 8014216:	bd80      	pop	{r7, pc}

08014218 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	0002      	movs	r2, r0
 8014220:	1dfb      	adds	r3, r7, #7
 8014222:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014224:	46c0      	nop			; (mov r8, r8)
 8014226:	46bd      	mov	sp, r7
 8014228:	b002      	add	sp, #8
 801422a:	bd80      	pop	{r7, pc}

0801422c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014230:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014232:	0018      	movs	r0, r3
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014240:	46c0      	nop			; (mov r8, r8)
 8014242:	46bd      	mov	sp, r7
 8014244:	b002      	add	sp, #8
 8014246:	bd80      	pop	{r7, pc}

08014248 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014250:	46c0      	nop			; (mov r8, r8)
 8014252:	46bd      	mov	sp, r7
 8014254:	b002      	add	sp, #8
 8014256:	bd80      	pop	{r7, pc}

08014258 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014260:	46c0      	nop			; (mov r8, r8)
 8014262:	46bd      	mov	sp, r7
 8014264:	b002      	add	sp, #8
 8014266:	bd80      	pop	{r7, pc}

08014268 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	000a      	movs	r2, r1
 8014272:	1cbb      	adds	r3, r7, #2
 8014274:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014276:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014278:	0018      	movs	r0, r3
 801427a:	46bd      	mov	sp, r7
 801427c:	b002      	add	sp, #8
 801427e:	bd80      	pop	{r7, pc}

08014280 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8014280:	b580      	push	{r7, lr}
 8014282:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014284:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014286:	0018      	movs	r0, r3
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801428c:	b580      	push	{r7, lr}
 801428e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014290:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014292:	0018      	movs	r0, r3
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}

08014298 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014298:	b580      	push	{r7, lr}
 801429a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801429c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801429e:	0018      	movs	r0, r3
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80142a8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80142aa:	0018      	movs	r0, r3
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	0002      	movs	r2, r0
 80142b8:	1dfb      	adds	r3, r7, #7
 80142ba:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80142bc:	46c0      	nop			; (mov r8, r8)
 80142be:	46bd      	mov	sp, r7
 80142c0:	b002      	add	sp, #8
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80142c8:	46c0      	nop			; (mov r8, r8)
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80142d2:	46c0      	nop			; (mov r8, r8)
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	0002      	movs	r2, r0
 80142e0:	1dfb      	adds	r3, r7, #7
 80142e2:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80142e4:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 80142e6:	0018      	movs	r0, r3
 80142e8:	46bd      	mov	sp, r7
 80142ea:	b002      	add	sp, #8
 80142ec:	bd80      	pop	{r7, pc}

080142ee <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80142ee:	b580      	push	{r7, lr}
 80142f0:	b082      	sub	sp, #8
 80142f2:	af00      	add	r7, sp, #0
 80142f4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80142f6:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 80142f8:	0018      	movs	r0, r3
 80142fa:	46bd      	mov	sp, r7
 80142fc:	b002      	add	sp, #8
 80142fe:	bd80      	pop	{r7, pc}

08014300 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014308:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 801430a:	0018      	movs	r0, r3
 801430c:	46bd      	mov	sp, r7
 801430e:	b002      	add	sp, #8
 8014310:	bd80      	pop	{r7, pc}

08014312 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014312:	b580      	push	{r7, lr}
 8014314:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014316:	46c0      	nop			; (mov r8, r8)
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}

0801431c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	0002      	movs	r2, r0
 8014324:	6039      	str	r1, [r7, #0]
 8014326:	1dfb      	adds	r3, r7, #7
 8014328:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 801432a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801432c:	0018      	movs	r0, r3
 801432e:	46bd      	mov	sp, r7
 8014330:	b002      	add	sp, #8
 8014332:	bd80      	pop	{r7, pc}

08014334 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	603a      	str	r2, [r7, #0]
 801433c:	1dbb      	adds	r3, r7, #6
 801433e:	1c02      	adds	r2, r0, #0
 8014340:	801a      	strh	r2, [r3, #0]
 8014342:	1d7b      	adds	r3, r7, #5
 8014344:	1c0a      	adds	r2, r1, #0
 8014346:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014348:	46c0      	nop			; (mov r8, r8)
 801434a:	46bd      	mov	sp, r7
 801434c:	b002      	add	sp, #8
 801434e:	bd80      	pop	{r7, pc}

08014350 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014350:	b580      	push	{r7, lr}
 8014352:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014354:	46c0      	nop			; (mov r8, r8)
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}

0801435a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801435a:	b580      	push	{r7, lr}
 801435c:	b082      	sub	sp, #8
 801435e:	af00      	add	r7, sp, #0
 8014360:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8014362:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014364:	0018      	movs	r0, r3
 8014366:	46bd      	mov	sp, r7
 8014368:	b002      	add	sp, #8
 801436a:	bd80      	pop	{r7, pc}

0801436c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b082      	sub	sp, #8
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8014374:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014376:	0018      	movs	r0, r3
 8014378:	46bd      	mov	sp, r7
 801437a:	b002      	add	sp, #8
 801437c:	bd80      	pop	{r7, pc}

0801437e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801437e:	b580      	push	{r7, lr}
 8014380:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014382:	46c0      	nop			; (mov r8, r8)
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}

08014388 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8014388:	b580      	push	{r7, lr}
 801438a:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801438c:	46c0      	nop			; (mov r8, r8)
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}

08014392 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014392:	b580      	push	{r7, lr}
 8014394:	b084      	sub	sp, #16
 8014396:	af00      	add	r7, sp, #0
 8014398:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801439e:	230e      	movs	r3, #14
 80143a0:	18fb      	adds	r3, r7, r3
 80143a2:	2200      	movs	r2, #0
 80143a4:	801a      	strh	r2, [r3, #0]
 80143a6:	e00f      	b.n	80143c8 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 80143a8:	230e      	movs	r3, #14
 80143aa:	18fb      	adds	r3, r7, r3
 80143ac:	881b      	ldrh	r3, [r3, #0]
 80143ae:	68ba      	ldr	r2, [r7, #8]
 80143b0:	18d3      	adds	r3, r2, r3
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <IsSlotFree+0x2a>
        {
            return false;
 80143b8:	2300      	movs	r3, #0
 80143ba:	e00b      	b.n	80143d4 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80143bc:	210e      	movs	r1, #14
 80143be:	187b      	adds	r3, r7, r1
 80143c0:	881a      	ldrh	r2, [r3, #0]
 80143c2:	187b      	adds	r3, r7, r1
 80143c4:	3201      	adds	r2, #1
 80143c6:	801a      	strh	r2, [r3, #0]
 80143c8:	230e      	movs	r3, #14
 80143ca:	18fb      	adds	r3, r7, r3
 80143cc:	881b      	ldrh	r3, [r3, #0]
 80143ce:	2b0f      	cmp	r3, #15
 80143d0:	d9ea      	bls.n	80143a8 <IsSlotFree+0x16>
        }
    }
    return true;
 80143d2:	2301      	movs	r3, #1
}
 80143d4:	0018      	movs	r0, r3
 80143d6:	46bd      	mov	sp, r7
 80143d8:	b004      	add	sp, #16
 80143da:	bd80      	pop	{r7, pc}

080143dc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b082      	sub	sp, #8
 80143e0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80143e2:	1dfb      	adds	r3, r7, #7
 80143e4:	2200      	movs	r2, #0
 80143e6:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 80143e8:	e00a      	b.n	8014400 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 80143ea:	1dfb      	adds	r3, r7, #7
 80143ec:	781a      	ldrb	r2, [r3, #0]
 80143ee:	1dfb      	adds	r3, r7, #7
 80143f0:	3201      	adds	r2, #1
 80143f2:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 80143f4:	1dfb      	adds	r3, r7, #7
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	2b0f      	cmp	r3, #15
 80143fa:	d101      	bne.n	8014400 <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 80143fc:	2300      	movs	r3, #0
 80143fe:	e017      	b.n	8014430 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014400:	1dfb      	adds	r3, r7, #7
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	011b      	lsls	r3, r3, #4
 8014406:	3308      	adds	r3, #8
 8014408:	001a      	movs	r2, r3
 801440a:	4b0b      	ldr	r3, [pc, #44]	; (8014438 <MallocNewMacCommandSlot+0x5c>)
 801440c:	18d3      	adds	r3, r2, r3
 801440e:	0018      	movs	r0, r3
 8014410:	f7ff ffbf 	bl	8014392 <IsSlotFree>
 8014414:	0003      	movs	r3, r0
 8014416:	001a      	movs	r2, r3
 8014418:	2301      	movs	r3, #1
 801441a:	4053      	eors	r3, r2
 801441c:	b2db      	uxtb	r3, r3
 801441e:	2b00      	cmp	r3, #0
 8014420:	d1e3      	bne.n	80143ea <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8014422:	1dfb      	adds	r3, r7, #7
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	011b      	lsls	r3, r3, #4
 8014428:	3308      	adds	r3, #8
 801442a:	001a      	movs	r2, r3
 801442c:	4b02      	ldr	r3, [pc, #8]	; (8014438 <MallocNewMacCommandSlot+0x5c>)
 801442e:	18d3      	adds	r3, r2, r3
}
 8014430:	0018      	movs	r0, r3
 8014432:	46bd      	mov	sp, r7
 8014434:	b002      	add	sp, #8
 8014436:	bd80      	pop	{r7, pc}
 8014438:	20000bec 	.word	0x20000bec

0801443c <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d101      	bne.n	801444e <FreeMacCommandSlot+0x12>
    {
        return false;
 801444a:	2300      	movs	r3, #0
 801444c:	e006      	b.n	801445c <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2210      	movs	r2, #16
 8014452:	2100      	movs	r1, #0
 8014454:	0018      	movs	r0, r3
 8014456:	f004 fd7b 	bl	8018f50 <memset1>

    return true;
 801445a:	2301      	movs	r3, #1
}
 801445c:	0018      	movs	r0, r3
 801445e:	46bd      	mov	sp, r7
 8014460:	b002      	add	sp, #8
 8014462:	bd80      	pop	{r7, pc}

08014464 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d101      	bne.n	8014476 <LinkedListInit+0x12>
    {
        return false;
 8014472:	2300      	movs	r3, #0
 8014474:	e006      	b.n	8014484 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2200      	movs	r2, #0
 801447a:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2200      	movs	r2, #0
 8014480:	605a      	str	r2, [r3, #4]

    return true;
 8014482:	2301      	movs	r3, #1
}
 8014484:	0018      	movs	r0, r3
 8014486:	46bd      	mov	sp, r7
 8014488:	b002      	add	sp, #8
 801448a:	bd80      	pop	{r7, pc}

0801448c <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d002      	beq.n	80144a2 <LinkedListAdd+0x16>
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d101      	bne.n	80144a6 <LinkedListAdd+0x1a>
    {
        return false;
 80144a2:	2300      	movs	r3, #0
 80144a4:	e015      	b.n	80144d2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d102      	bne.n	80144b4 <LinkedListAdd+0x28>
    {
        list->First = element;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	683a      	ldr	r2, [r7, #0]
 80144b2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d003      	beq.n	80144c4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	683a      	ldr	r2, [r7, #0]
 80144c2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	2200      	movs	r2, #0
 80144c8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	683a      	ldr	r2, [r7, #0]
 80144ce:	605a      	str	r2, [r3, #4]

    return true;
 80144d0:	2301      	movs	r3, #1
}
 80144d2:	0018      	movs	r0, r3
 80144d4:	46bd      	mov	sp, r7
 80144d6:	b002      	add	sp, #8
 80144d8:	bd80      	pop	{r7, pc}

080144da <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80144da:	b580      	push	{r7, lr}
 80144dc:	b084      	sub	sp, #16
 80144de:	af00      	add	r7, sp, #0
 80144e0:	6078      	str	r0, [r7, #4]
 80144e2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d002      	beq.n	80144f0 <LinkedListGetPrevious+0x16>
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d101      	bne.n	80144f4 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80144f0:	2300      	movs	r3, #0
 80144f2:	e016      	b.n	8014522 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80144fa:	683a      	ldr	r2, [r7, #0]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	429a      	cmp	r2, r3
 8014500:	d00c      	beq.n	801451c <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014502:	e002      	b.n	801450a <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d007      	beq.n	8014520 <LinkedListGetPrevious+0x46>
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	683a      	ldr	r2, [r7, #0]
 8014516:	429a      	cmp	r2, r3
 8014518:	d1f4      	bne.n	8014504 <LinkedListGetPrevious+0x2a>
 801451a:	e001      	b.n	8014520 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801451c:	2300      	movs	r3, #0
 801451e:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014520:	68fb      	ldr	r3, [r7, #12]
}
 8014522:	0018      	movs	r0, r3
 8014524:	46bd      	mov	sp, r7
 8014526:	b004      	add	sp, #16
 8014528:	bd80      	pop	{r7, pc}

0801452a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801452a:	b580      	push	{r7, lr}
 801452c:	b084      	sub	sp, #16
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
 8014532:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d002      	beq.n	8014540 <LinkedListRemove+0x16>
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d101      	bne.n	8014544 <LinkedListRemove+0x1a>
    {
        return false;
 8014540:	2300      	movs	r3, #0
 8014542:	e023      	b.n	801458c <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014544:	683a      	ldr	r2, [r7, #0]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	0011      	movs	r1, r2
 801454a:	0018      	movs	r0, r3
 801454c:	f7ff ffc5 	bl	80144da <LinkedListGetPrevious>
 8014550:	0003      	movs	r3, r0
 8014552:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	683a      	ldr	r2, [r7, #0]
 801455a:	429a      	cmp	r2, r3
 801455c:	d103      	bne.n	8014566 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	681a      	ldr	r2, [r3, #0]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	683a      	ldr	r2, [r7, #0]
 801456c:	429a      	cmp	r2, r3
 801456e:	d102      	bne.n	8014576 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	68fa      	ldr	r2, [r7, #12]
 8014574:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d003      	beq.n	8014584 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	2200      	movs	r2, #0
 8014588:	601a      	str	r2, [r3, #0]

    return true;
 801458a:	2301      	movs	r3, #1
}
 801458c:	0018      	movs	r0, r3
 801458e:	46bd      	mov	sp, r7
 8014590:	b004      	add	sp, #16
 8014592:	bd80      	pop	{r7, pc}

08014594 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b082      	sub	sp, #8
 8014598:	af00      	add	r7, sp, #0
 801459a:	0002      	movs	r2, r0
 801459c:	1dfb      	adds	r3, r7, #7
 801459e:	701a      	strb	r2, [r3, #0]
    switch( cid )
 80145a0:	1dfb      	adds	r3, r7, #7
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	2b05      	cmp	r3, #5
 80145a6:	d003      	beq.n	80145b0 <IsSticky+0x1c>
 80145a8:	db04      	blt.n	80145b4 <IsSticky+0x20>
 80145aa:	3b08      	subs	r3, #8
 80145ac:	2b02      	cmp	r3, #2
 80145ae:	d801      	bhi.n	80145b4 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80145b0:	2301      	movs	r3, #1
 80145b2:	e000      	b.n	80145b6 <IsSticky+0x22>
        default:
            return false;
 80145b4:	2300      	movs	r3, #0
    }
}
 80145b6:	0018      	movs	r0, r3
 80145b8:	46bd      	mov	sp, r7
 80145ba:	b002      	add	sp, #8
 80145bc:	bd80      	pop	{r7, pc}
	...

080145c0 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 80145c4:	4b04      	ldr	r3, [pc, #16]	; (80145d8 <NvmCtxCallback+0x18>)
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d002      	beq.n	80145d2 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 80145cc:	4b02      	ldr	r3, [pc, #8]	; (80145d8 <NvmCtxCallback+0x18>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	4798      	blx	r3
    }
}
 80145d2:	46c0      	nop			; (mov r8, r8)
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	20000be8 	.word	0x20000be8

080145dc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 80145e4:	4b08      	ldr	r3, [pc, #32]	; (8014608 <LoRaMacCommandsInit+0x2c>)
 80145e6:	22fc      	movs	r2, #252	; 0xfc
 80145e8:	2100      	movs	r1, #0
 80145ea:	0018      	movs	r0, r3
 80145ec:	f004 fcb0 	bl	8018f50 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 80145f0:	4b05      	ldr	r3, [pc, #20]	; (8014608 <LoRaMacCommandsInit+0x2c>)
 80145f2:	0018      	movs	r0, r3
 80145f4:	f7ff ff36 	bl	8014464 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 80145f8:	4b04      	ldr	r3, [pc, #16]	; (801460c <LoRaMacCommandsInit+0x30>)
 80145fa:	687a      	ldr	r2, [r7, #4]
 80145fc:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 80145fe:	2300      	movs	r3, #0
}
 8014600:	0018      	movs	r0, r3
 8014602:	46bd      	mov	sp, r7
 8014604:	b002      	add	sp, #8
 8014606:	bd80      	pop	{r7, pc}
 8014608:	20000bec 	.word	0x20000bec
 801460c:	20000be8 	.word	0x20000be8

08014610 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d007      	beq.n	801462e <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 801461e:	6879      	ldr	r1, [r7, #4]
 8014620:	4b05      	ldr	r3, [pc, #20]	; (8014638 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8014622:	22fc      	movs	r2, #252	; 0xfc
 8014624:	0018      	movs	r0, r3
 8014626:	f004 fc55 	bl	8018ed4 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 801462a:	2300      	movs	r3, #0
 801462c:	e000      	b.n	8014630 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801462e:	2301      	movs	r3, #1
    }
}
 8014630:	0018      	movs	r0, r3
 8014632:	46bd      	mov	sp, r7
 8014634:	b002      	add	sp, #8
 8014636:	bd80      	pop	{r7, pc}
 8014638:	20000bec 	.word	0x20000bec

0801463c <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	22fc      	movs	r2, #252	; 0xfc
 8014648:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 801464a:	4b02      	ldr	r3, [pc, #8]	; (8014654 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 801464c:	0018      	movs	r0, r3
 801464e:	46bd      	mov	sp, r7
 8014650:	b002      	add	sp, #8
 8014652:	bd80      	pop	{r7, pc}
 8014654:	20000bec 	.word	0x20000bec

08014658 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014658:	b590      	push	{r4, r7, lr}
 801465a:	b087      	sub	sp, #28
 801465c:	af00      	add	r7, sp, #0
 801465e:	60b9      	str	r1, [r7, #8]
 8014660:	607a      	str	r2, [r7, #4]
 8014662:	230f      	movs	r3, #15
 8014664:	18fb      	adds	r3, r7, r3
 8014666:	1c02      	adds	r2, r0, #0
 8014668:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d101      	bne.n	8014674 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014670:	2301      	movs	r3, #1
 8014672:	e03c      	b.n	80146ee <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014674:	f7ff feb2 	bl	80143dc <MallocNewMacCommandSlot>
 8014678:	0003      	movs	r3, r0
 801467a:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d101      	bne.n	8014686 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014682:	2302      	movs	r3, #2
 8014684:	e033      	b.n	80146ee <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8014686:	697a      	ldr	r2, [r7, #20]
 8014688:	4b1b      	ldr	r3, [pc, #108]	; (80146f8 <LoRaMacCommandsAddCmd+0xa0>)
 801468a:	0011      	movs	r1, r2
 801468c:	0018      	movs	r0, r3
 801468e:	f7ff fefd 	bl	801448c <LinkedListAdd>
 8014692:	0003      	movs	r3, r0
 8014694:	001a      	movs	r2, r3
 8014696:	2301      	movs	r3, #1
 8014698:	4053      	eors	r3, r2
 801469a:	b2db      	uxtb	r3, r3
 801469c:	2b00      	cmp	r3, #0
 801469e:	d001      	beq.n	80146a4 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 80146a0:	2305      	movs	r3, #5
 80146a2:	e024      	b.n	80146ee <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 80146a4:	697b      	ldr	r3, [r7, #20]
 80146a6:	240f      	movs	r4, #15
 80146a8:	193a      	adds	r2, r7, r4
 80146aa:	7812      	ldrb	r2, [r2, #0]
 80146ac:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	687a      	ldr	r2, [r7, #4]
 80146b2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	3305      	adds	r3, #5
 80146b8:	687a      	ldr	r2, [r7, #4]
 80146ba:	b292      	uxth	r2, r2
 80146bc:	68b9      	ldr	r1, [r7, #8]
 80146be:	0018      	movs	r0, r3
 80146c0:	f004 fc08 	bl	8018ed4 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80146c4:	193b      	adds	r3, r7, r4
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	0018      	movs	r0, r3
 80146ca:	f7ff ff63 	bl	8014594 <IsSticky>
 80146ce:	0003      	movs	r3, r0
 80146d0:	001a      	movs	r2, r3
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80146d6:	4b08      	ldr	r3, [pc, #32]	; (80146f8 <LoRaMacCommandsAddCmd+0xa0>)
 80146d8:	22f8      	movs	r2, #248	; 0xf8
 80146da:	589a      	ldr	r2, [r3, r2]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	18d3      	adds	r3, r2, r3
 80146e0:	1c5a      	adds	r2, r3, #1
 80146e2:	4b05      	ldr	r3, [pc, #20]	; (80146f8 <LoRaMacCommandsAddCmd+0xa0>)
 80146e4:	21f8      	movs	r1, #248	; 0xf8
 80146e6:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 80146e8:	f7ff ff6a 	bl	80145c0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80146ec:	2300      	movs	r3, #0
}
 80146ee:	0018      	movs	r0, r3
 80146f0:	46bd      	mov	sp, r7
 80146f2:	b007      	add	sp, #28
 80146f4:	bd90      	pop	{r4, r7, pc}
 80146f6:	46c0      	nop			; (mov r8, r8)
 80146f8:	20000bec 	.word	0x20000bec

080146fc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d101      	bne.n	801470e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801470a:	2301      	movs	r3, #1
 801470c:	e028      	b.n	8014760 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	4b15      	ldr	r3, [pc, #84]	; (8014768 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014712:	0011      	movs	r1, r2
 8014714:	0018      	movs	r0, r3
 8014716:	f7ff ff08 	bl	801452a <LinkedListRemove>
 801471a:	0003      	movs	r3, r0
 801471c:	001a      	movs	r2, r3
 801471e:	2301      	movs	r3, #1
 8014720:	4053      	eors	r3, r2
 8014722:	b2db      	uxtb	r3, r3
 8014724:	2b00      	cmp	r3, #0
 8014726:	d001      	beq.n	801472c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014728:	2303      	movs	r3, #3
 801472a:	e019      	b.n	8014760 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801472c:	4b0e      	ldr	r3, [pc, #56]	; (8014768 <LoRaMacCommandsRemoveCmd+0x6c>)
 801472e:	22f8      	movs	r2, #248	; 0xf8
 8014730:	589a      	ldr	r2, [r3, r2]
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	689b      	ldr	r3, [r3, #8]
 8014736:	1ad3      	subs	r3, r2, r3
 8014738:	1e5a      	subs	r2, r3, #1
 801473a:	4b0b      	ldr	r3, [pc, #44]	; (8014768 <LoRaMacCommandsRemoveCmd+0x6c>)
 801473c:	21f8      	movs	r1, #248	; 0xf8
 801473e:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	0018      	movs	r0, r3
 8014744:	f7ff fe7a 	bl	801443c <FreeMacCommandSlot>
 8014748:	0003      	movs	r3, r0
 801474a:	001a      	movs	r2, r3
 801474c:	2301      	movs	r3, #1
 801474e:	4053      	eors	r3, r2
 8014750:	b2db      	uxtb	r3, r3
 8014752:	2b00      	cmp	r3, #0
 8014754:	d001      	beq.n	801475a <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014756:	2305      	movs	r3, #5
 8014758:	e002      	b.n	8014760 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 801475a:	f7ff ff31 	bl	80145c0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801475e:	2300      	movs	r3, #0
}
 8014760:	0018      	movs	r0, r3
 8014762:	46bd      	mov	sp, r7
 8014764:	b002      	add	sp, #8
 8014766:	bd80      	pop	{r7, pc}
 8014768:	20000bec 	.word	0x20000bec

0801476c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014772:	4b11      	ldr	r3, [pc, #68]	; (80147b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014778:	e013      	b.n	80147a2 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	7b1b      	ldrb	r3, [r3, #12]
 801477e:	2201      	movs	r2, #1
 8014780:	4053      	eors	r3, r2
 8014782:	b2db      	uxtb	r3, r3
 8014784:	2b00      	cmp	r3, #0
 8014786:	d009      	beq.n	801479c <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	0018      	movs	r0, r3
 8014792:	f7ff ffb3 	bl	80146fc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	607b      	str	r3, [r7, #4]
 801479a:	e002      	b.n	80147a2 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d1e8      	bne.n	801477a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 80147a8:	f7ff ff0a 	bl	80145c0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80147ac:	2300      	movs	r3, #0
}
 80147ae:	0018      	movs	r0, r3
 80147b0:	46bd      	mov	sp, r7
 80147b2:	b002      	add	sp, #8
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	46c0      	nop			; (mov r8, r8)
 80147b8:	20000bec 	.word	0x20000bec

080147bc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 80147c2:	4b0f      	ldr	r3, [pc, #60]	; (8014800 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80147c8:	e00f      	b.n	80147ea <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	791b      	ldrb	r3, [r3, #4]
 80147d4:	0018      	movs	r0, r3
 80147d6:	f7ff fedd 	bl	8014594 <IsSticky>
 80147da:	1e03      	subs	r3, r0, #0
 80147dc:	d003      	beq.n	80147e6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	0018      	movs	r0, r3
 80147e2:	f7ff ff8b 	bl	80146fc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d1ec      	bne.n	80147ca <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 80147f0:	f7ff fee6 	bl	80145c0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80147f4:	2300      	movs	r3, #0
}
 80147f6:	0018      	movs	r0, r3
 80147f8:	46bd      	mov	sp, r7
 80147fa:	b002      	add	sp, #8
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	46c0      	nop			; (mov r8, r8)
 8014800:	20000bec 	.word	0x20000bec

08014804 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d101      	bne.n	8014816 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014812:	2301      	movs	r3, #1
 8014814:	e005      	b.n	8014822 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8014816:	4b05      	ldr	r3, [pc, #20]	; (801482c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014818:	22f8      	movs	r2, #248	; 0xf8
 801481a:	589a      	ldr	r2, [r3, r2]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014820:	2300      	movs	r3, #0
}
 8014822:	0018      	movs	r0, r3
 8014824:	46bd      	mov	sp, r7
 8014826:	b002      	add	sp, #8
 8014828:	bd80      	pop	{r7, pc}
 801482a:	46c0      	nop			; (mov r8, r8)
 801482c:	20000bec 	.word	0x20000bec

08014830 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014830:	b590      	push	{r4, r7, lr}
 8014832:	b089      	sub	sp, #36	; 0x24
 8014834:	af00      	add	r7, sp, #0
 8014836:	60f8      	str	r0, [r7, #12]
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 801483c:	4b2a      	ldr	r3, [pc, #168]	; (80148e8 <LoRaMacCommandsSerializeCmds+0xb8>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014842:	231b      	movs	r3, #27
 8014844:	18fb      	adds	r3, r7, r3
 8014846:	2200      	movs	r2, #0
 8014848:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d002      	beq.n	8014856 <LoRaMacCommandsSerializeCmds+0x26>
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d12d      	bne.n	80148b2 <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014856:	2301      	movs	r3, #1
 8014858:	e042      	b.n	80148e0 <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801485a:	241b      	movs	r4, #27
 801485c:	193b      	adds	r3, r7, r4
 801485e:	781b      	ldrb	r3, [r3, #0]
 8014860:	68fa      	ldr	r2, [r7, #12]
 8014862:	1ad2      	subs	r2, r2, r3
 8014864:	69fb      	ldr	r3, [r7, #28]
 8014866:	689b      	ldr	r3, [r3, #8]
 8014868:	3301      	adds	r3, #1
 801486a:	429a      	cmp	r2, r3
 801486c:	d325      	bcc.n	80148ba <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 801486e:	193b      	adds	r3, r7, r4
 8014870:	781b      	ldrb	r3, [r3, #0]
 8014872:	193a      	adds	r2, r7, r4
 8014874:	1c59      	adds	r1, r3, #1
 8014876:	7011      	strb	r1, [r2, #0]
 8014878:	001a      	movs	r2, r3
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	189b      	adds	r3, r3, r2
 801487e:	69fa      	ldr	r2, [r7, #28]
 8014880:	7912      	ldrb	r2, [r2, #4]
 8014882:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014884:	193b      	adds	r3, r7, r4
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	687a      	ldr	r2, [r7, #4]
 801488a:	18d0      	adds	r0, r2, r3
 801488c:	69fb      	ldr	r3, [r7, #28]
 801488e:	1d59      	adds	r1, r3, #5
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	689b      	ldr	r3, [r3, #8]
 8014894:	b29b      	uxth	r3, r3
 8014896:	001a      	movs	r2, r3
 8014898:	f004 fb1c 	bl	8018ed4 <memcpy1>
            itr += curElement->PayloadSize;
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	689b      	ldr	r3, [r3, #8]
 80148a0:	b2d9      	uxtb	r1, r3
 80148a2:	193b      	adds	r3, r7, r4
 80148a4:	193a      	adds	r2, r7, r4
 80148a6:	7812      	ldrb	r2, [r2, #0]
 80148a8:	188a      	adds	r2, r1, r2
 80148aa:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80148b2:	69fb      	ldr	r3, [r7, #28]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d1d0      	bne.n	801485a <LoRaMacCommandsSerializeCmds+0x2a>
 80148b8:	e00a      	b.n	80148d0 <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 80148ba:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80148bc:	e008      	b.n	80148d0 <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80148be:	69fb      	ldr	r3, [r7, #28]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80148c4:	69fb      	ldr	r3, [r7, #28]
 80148c6:	0018      	movs	r0, r3
 80148c8:	f7ff ff18 	bl	80146fc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80148d0:	69fb      	ldr	r3, [r7, #28]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d1f3      	bne.n	80148be <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	0018      	movs	r0, r3
 80148da:	f7ff ff93 	bl	8014804 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80148de:	2300      	movs	r3, #0
}
 80148e0:	0018      	movs	r0, r3
 80148e2:	46bd      	mov	sp, r7
 80148e4:	b009      	add	sp, #36	; 0x24
 80148e6:	bd90      	pop	{r4, r7, pc}
 80148e8:	20000bec 	.word	0x20000bec

080148ec <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b084      	sub	sp, #16
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d101      	bne.n	80148fe <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80148fa:	2301      	movs	r3, #1
 80148fc:	e016      	b.n	801492c <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80148fe:	4b0d      	ldr	r3, [pc, #52]	; (8014934 <LoRaMacCommandsStickyCmdsPending+0x48>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2200      	movs	r2, #0
 8014908:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801490a:	e00b      	b.n	8014924 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	7b1b      	ldrb	r3, [r3, #12]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d004      	beq.n	801491e <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2201      	movs	r2, #1
 8014918:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801491a:	2300      	movs	r3, #0
 801491c:	e006      	b.n	801492c <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d1f0      	bne.n	801490c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801492a:	2300      	movs	r3, #0
}
 801492c:	0018      	movs	r0, r3
 801492e:	46bd      	mov	sp, r7
 8014930:	b004      	add	sp, #16
 8014932:	bd80      	pop	{r7, pc}
 8014934:	20000bec 	.word	0x20000bec

08014938 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	0002      	movs	r2, r0
 8014940:	1dfb      	adds	r3, r7, #7
 8014942:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 8014944:	230f      	movs	r3, #15
 8014946:	18fb      	adds	r3, r7, r3
 8014948:	2200      	movs	r2, #0
 801494a:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 801494c:	1dfb      	adds	r3, r7, #7
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	2b13      	cmp	r3, #19
 8014952:	d84a      	bhi.n	80149ea <LoRaMacCommandsGetCmdSize+0xb2>
 8014954:	009a      	lsls	r2, r3, #2
 8014956:	4b29      	ldr	r3, [pc, #164]	; (80149fc <LoRaMacCommandsGetCmdSize+0xc4>)
 8014958:	18d3      	adds	r3, r2, r3
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801495e:	230f      	movs	r3, #15
 8014960:	18fb      	adds	r3, r7, r3
 8014962:	2203      	movs	r2, #3
 8014964:	701a      	strb	r2, [r3, #0]
            break;
 8014966:	e041      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014968:	230f      	movs	r3, #15
 801496a:	18fb      	adds	r3, r7, r3
 801496c:	2205      	movs	r2, #5
 801496e:	701a      	strb	r2, [r3, #0]
            break;
 8014970:	e03c      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014972:	230f      	movs	r3, #15
 8014974:	18fb      	adds	r3, r7, r3
 8014976:	2202      	movs	r2, #2
 8014978:	701a      	strb	r2, [r3, #0]
            break;
 801497a:	e037      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801497c:	230f      	movs	r3, #15
 801497e:	18fb      	adds	r3, r7, r3
 8014980:	2205      	movs	r2, #5
 8014982:	701a      	strb	r2, [r3, #0]
            break;
 8014984:	e032      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014986:	230f      	movs	r3, #15
 8014988:	18fb      	adds	r3, r7, r3
 801498a:	2201      	movs	r2, #1
 801498c:	701a      	strb	r2, [r3, #0]
            break;
 801498e:	e02d      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014990:	230f      	movs	r3, #15
 8014992:	18fb      	adds	r3, r7, r3
 8014994:	2206      	movs	r2, #6
 8014996:	701a      	strb	r2, [r3, #0]
            break;
 8014998:	e028      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801499a:	230f      	movs	r3, #15
 801499c:	18fb      	adds	r3, r7, r3
 801499e:	2202      	movs	r2, #2
 80149a0:	701a      	strb	r2, [r3, #0]
            break;
 80149a2:	e023      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80149a4:	230f      	movs	r3, #15
 80149a6:	18fb      	adds	r3, r7, r3
 80149a8:	2202      	movs	r2, #2
 80149aa:	701a      	strb	r2, [r3, #0]
            break;
 80149ac:	e01e      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80149ae:	230f      	movs	r3, #15
 80149b0:	18fb      	adds	r3, r7, r3
 80149b2:	2205      	movs	r2, #5
 80149b4:	701a      	strb	r2, [r3, #0]
            break;
 80149b6:	e019      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80149b8:	230f      	movs	r3, #15
 80149ba:	18fb      	adds	r3, r7, r3
 80149bc:	2206      	movs	r2, #6
 80149be:	701a      	strb	r2, [r3, #0]
            break;
 80149c0:	e014      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80149c2:	230f      	movs	r3, #15
 80149c4:	18fb      	adds	r3, r7, r3
 80149c6:	2201      	movs	r2, #1
 80149c8:	701a      	strb	r2, [r3, #0]
            break;
 80149ca:	e00f      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80149cc:	230f      	movs	r3, #15
 80149ce:	18fb      	adds	r3, r7, r3
 80149d0:	2205      	movs	r2, #5
 80149d2:	701a      	strb	r2, [r3, #0]
            break;
 80149d4:	e00a      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80149d6:	230f      	movs	r3, #15
 80149d8:	18fb      	adds	r3, r7, r3
 80149da:	2204      	movs	r2, #4
 80149dc:	701a      	strb	r2, [r3, #0]
            break;
 80149de:	e005      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80149e0:	230f      	movs	r3, #15
 80149e2:	18fb      	adds	r3, r7, r3
 80149e4:	2204      	movs	r2, #4
 80149e6:	701a      	strb	r2, [r3, #0]
            break;
 80149e8:	e000      	b.n	80149ec <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80149ea:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 80149ec:	230f      	movs	r3, #15
 80149ee:	18fb      	adds	r3, r7, r3
 80149f0:	781b      	ldrb	r3, [r3, #0]
}
 80149f2:	0018      	movs	r0, r3
 80149f4:	46bd      	mov	sp, r7
 80149f6:	b004      	add	sp, #16
 80149f8:	bd80      	pop	{r7, pc}
 80149fa:	46c0      	nop			; (mov r8, r8)
 80149fc:	0801f0b4 	.word	0x0801f0b4

08014a00 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014a08:	4b08      	ldr	r3, [pc, #32]	; (8014a2c <IncreaseBufferPointer+0x2c>)
 8014a0a:	691b      	ldr	r3, [r3, #16]
 8014a0c:	3310      	adds	r3, #16
 8014a0e:	687a      	ldr	r2, [r7, #4]
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d103      	bne.n	8014a1c <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014a14:	4b05      	ldr	r3, [pc, #20]	; (8014a2c <IncreaseBufferPointer+0x2c>)
 8014a16:	691b      	ldr	r3, [r3, #16]
 8014a18:	607b      	str	r3, [r7, #4]
 8014a1a:	e002      	b.n	8014a22 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	3304      	adds	r3, #4
 8014a20:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014a22:	687b      	ldr	r3, [r7, #4]
}
 8014a24:	0018      	movs	r0, r3
 8014a26:	46bd      	mov	sp, r7
 8014a28:	b002      	add	sp, #8
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	20000d00 	.word	0x20000d00

08014a30 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	0002      	movs	r2, r0
 8014a38:	1dfb      	adds	r3, r7, #7
 8014a3a:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 8014a3c:	1dfb      	adds	r3, r7, #7
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d101      	bne.n	8014a48 <IsListEmpty+0x18>
    {
        return true;
 8014a44:	2301      	movs	r3, #1
 8014a46:	e000      	b.n	8014a4a <IsListEmpty+0x1a>
    }
    return false;
 8014a48:	2300      	movs	r3, #0
}
 8014a4a:	0018      	movs	r0, r3
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	b002      	add	sp, #8
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b082      	sub	sp, #8
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	0002      	movs	r2, r0
 8014a5a:	1dfb      	adds	r3, r7, #7
 8014a5c:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014a5e:	1dfb      	adds	r3, r7, #7
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	2b04      	cmp	r3, #4
 8014a64:	d901      	bls.n	8014a6a <IsListFull+0x18>
    {
        return true;
 8014a66:	2301      	movs	r3, #1
 8014a68:	e000      	b.n	8014a6c <IsListFull+0x1a>
    }
    return false;
 8014a6a:	2300      	movs	r3, #0
}
 8014a6c:	0018      	movs	r0, r3
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	b002      	add	sp, #8
 8014a72:	bd80      	pop	{r7, pc}

08014a74 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b086      	sub	sp, #24
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	60b9      	str	r1, [r7, #8]
 8014a7c:	607a      	str	r2, [r7, #4]
 8014a7e:	230f      	movs	r3, #15
 8014a80:	18fb      	adds	r3, r7, r3
 8014a82:	1c02      	adds	r2, r0, #0
 8014a84:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014a8a:	4b18      	ldr	r3, [pc, #96]	; (8014aec <GetElement+0x78>)
 8014a8c:	691b      	ldr	r3, [r3, #16]
 8014a8e:	7d1b      	ldrb	r3, [r3, #20]
 8014a90:	0018      	movs	r0, r3
 8014a92:	f7ff ffcd 	bl	8014a30 <IsListEmpty>
 8014a96:	1e03      	subs	r3, r0, #0
 8014a98:	d001      	beq.n	8014a9e <GetElement+0x2a>
    {
        return NULL;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	e022      	b.n	8014ae4 <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8014a9e:	2313      	movs	r3, #19
 8014aa0:	18fb      	adds	r3, r7, r3
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	701a      	strb	r2, [r3, #0]
 8014aa6:	e014      	b.n	8014ad2 <GetElement+0x5e>
    {
        if( element->Request == request )
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	220f      	movs	r2, #15
 8014aae:	18ba      	adds	r2, r7, r2
 8014ab0:	7812      	ldrb	r2, [r2, #0]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d101      	bne.n	8014aba <GetElement+0x46>
        {
            // We have found the element
            return element;
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	e014      	b.n	8014ae4 <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	0018      	movs	r0, r3
 8014abe:	f7ff ff9f 	bl	8014a00 <IncreaseBufferPointer>
 8014ac2:	0003      	movs	r3, r0
 8014ac4:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8014ac6:	2113      	movs	r1, #19
 8014ac8:	187b      	adds	r3, r7, r1
 8014aca:	781a      	ldrb	r2, [r3, #0]
 8014acc:	187b      	adds	r3, r7, r1
 8014ace:	3201      	adds	r2, #1
 8014ad0:	701a      	strb	r2, [r3, #0]
 8014ad2:	4b06      	ldr	r3, [pc, #24]	; (8014aec <GetElement+0x78>)
 8014ad4:	691b      	ldr	r3, [r3, #16]
 8014ad6:	7d1b      	ldrb	r3, [r3, #20]
 8014ad8:	2213      	movs	r2, #19
 8014ada:	18ba      	adds	r2, r7, r2
 8014adc:	7812      	ldrb	r2, [r2, #0]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d3e2      	bcc.n	8014aa8 <GetElement+0x34>
    }

    return NULL;
 8014ae2:	2300      	movs	r3, #0
}
 8014ae4:	0018      	movs	r0, r3
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	b006      	add	sp, #24
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	20000d00 	.word	0x20000d00

08014af0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8014afa:	4b13      	ldr	r3, [pc, #76]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8014b00:	4b11      	ldr	r3, [pc, #68]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b02:	4a12      	ldr	r2, [pc, #72]	; (8014b4c <LoRaMacConfirmQueueInit+0x5c>)
 8014b04:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8014b06:	4b10      	ldr	r3, [pc, #64]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b08:	691b      	ldr	r3, [r3, #16]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014b0e:	4b0e      	ldr	r3, [pc, #56]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b10:	691b      	ldr	r3, [r3, #16]
 8014b12:	001a      	movs	r2, r3
 8014b14:	4b0c      	ldr	r3, [pc, #48]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b16:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014b18:	4b0b      	ldr	r3, [pc, #44]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b1a:	691b      	ldr	r3, [r3, #16]
 8014b1c:	001a      	movs	r2, r3
 8014b1e:	4b0a      	ldr	r3, [pc, #40]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b20:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8014b22:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b24:	691b      	ldr	r3, [r3, #16]
 8014b26:	2214      	movs	r2, #20
 8014b28:	21ff      	movs	r1, #255	; 0xff
 8014b2a:	0018      	movs	r0, r3
 8014b2c:	f004 fa10 	bl	8018f50 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014b30:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b32:	691b      	ldr	r3, [r3, #16]
 8014b34:	2201      	movs	r2, #1
 8014b36:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8014b38:	4b03      	ldr	r3, [pc, #12]	; (8014b48 <LoRaMacConfirmQueueInit+0x58>)
 8014b3a:	683a      	ldr	r2, [r7, #0]
 8014b3c:	60da      	str	r2, [r3, #12]
}
 8014b3e:	46c0      	nop			; (mov r8, r8)
 8014b40:	46bd      	mov	sp, r7
 8014b42:	b002      	add	sp, #8
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	46c0      	nop			; (mov r8, r8)
 8014b48:	20000d00 	.word	0x20000d00
 8014b4c:	20000ce8 	.word	0x20000ce8

08014b50 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d007      	beq.n	8014b6e <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8014b5e:	6879      	ldr	r1, [r7, #4]
 8014b60:	4b05      	ldr	r3, [pc, #20]	; (8014b78 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 8014b62:	2216      	movs	r2, #22
 8014b64:	0018      	movs	r0, r3
 8014b66:	f004 f9b5 	bl	8018ed4 <memcpy1>
        return true;
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	e000      	b.n	8014b70 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8014b6e:	2300      	movs	r3, #0
    }
}
 8014b70:	0018      	movs	r0, r3
 8014b72:	46bd      	mov	sp, r7
 8014b74:	b002      	add	sp, #8
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	20000ce8 	.word	0x20000ce8

08014b7c <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2216      	movs	r2, #22
 8014b88:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8014b8a:	4b02      	ldr	r3, [pc, #8]	; (8014b94 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8014b8c:	0018      	movs	r0, r3
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	b002      	add	sp, #8
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	20000ce8 	.word	0x20000ce8

08014b98 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014ba0:	4b17      	ldr	r3, [pc, #92]	; (8014c00 <LoRaMacConfirmQueueAdd+0x68>)
 8014ba2:	691b      	ldr	r3, [r3, #16]
 8014ba4:	7d1b      	ldrb	r3, [r3, #20]
 8014ba6:	0018      	movs	r0, r3
 8014ba8:	f7ff ff53 	bl	8014a52 <IsListFull>
 8014bac:	1e03      	subs	r3, r0, #0
 8014bae:	d001      	beq.n	8014bb4 <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	e021      	b.n	8014bf8 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014bb4:	4b12      	ldr	r3, [pc, #72]	; (8014c00 <LoRaMacConfirmQueueAdd+0x68>)
 8014bb6:	689b      	ldr	r3, [r3, #8]
 8014bb8:	687a      	ldr	r2, [r7, #4]
 8014bba:	7812      	ldrb	r2, [r2, #0]
 8014bbc:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014bbe:	4b10      	ldr	r3, [pc, #64]	; (8014c00 <LoRaMacConfirmQueueAdd+0x68>)
 8014bc0:	689b      	ldr	r3, [r3, #8]
 8014bc2:	687a      	ldr	r2, [r7, #4]
 8014bc4:	7852      	ldrb	r2, [r2, #1]
 8014bc6:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014bc8:	4b0d      	ldr	r3, [pc, #52]	; (8014c00 <LoRaMacConfirmQueueAdd+0x68>)
 8014bca:	689b      	ldr	r3, [r3, #8]
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	78d2      	ldrb	r2, [r2, #3]
 8014bd0:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8014bd2:	4b0b      	ldr	r3, [pc, #44]	; (8014c00 <LoRaMacConfirmQueueAdd+0x68>)
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8014bda:	4b09      	ldr	r3, [pc, #36]	; (8014c00 <LoRaMacConfirmQueueAdd+0x68>)
 8014bdc:	691b      	ldr	r3, [r3, #16]
 8014bde:	7d1a      	ldrb	r2, [r3, #20]
 8014be0:	3201      	adds	r2, #1
 8014be2:	b2d2      	uxtb	r2, r2
 8014be4:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8014be6:	4b06      	ldr	r3, [pc, #24]	; (8014c00 <LoRaMacConfirmQueueAdd+0x68>)
 8014be8:	689b      	ldr	r3, [r3, #8]
 8014bea:	0018      	movs	r0, r3
 8014bec:	f7ff ff08 	bl	8014a00 <IncreaseBufferPointer>
 8014bf0:	0002      	movs	r2, r0
 8014bf2:	4b03      	ldr	r3, [pc, #12]	; (8014c00 <LoRaMacConfirmQueueAdd+0x68>)
 8014bf4:	609a      	str	r2, [r3, #8]

    return true;
 8014bf6:	2301      	movs	r3, #1
}
 8014bf8:	0018      	movs	r0, r3
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	b002      	add	sp, #8
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	20000d00 	.word	0x20000d00

08014c04 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014c08:	4b0d      	ldr	r3, [pc, #52]	; (8014c40 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8014c0a:	691b      	ldr	r3, [r3, #16]
 8014c0c:	7d1b      	ldrb	r3, [r3, #20]
 8014c0e:	0018      	movs	r0, r3
 8014c10:	f7ff ff0e 	bl	8014a30 <IsListEmpty>
 8014c14:	1e03      	subs	r3, r0, #0
 8014c16:	d001      	beq.n	8014c1c <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	e00e      	b.n	8014c3a <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8014c1c:	4b08      	ldr	r3, [pc, #32]	; (8014c40 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8014c1e:	691b      	ldr	r3, [r3, #16]
 8014c20:	7d1a      	ldrb	r2, [r3, #20]
 8014c22:	3a01      	subs	r2, #1
 8014c24:	b2d2      	uxtb	r2, r2
 8014c26:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014c28:	4b05      	ldr	r3, [pc, #20]	; (8014c40 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	0018      	movs	r0, r3
 8014c2e:	f7ff fee7 	bl	8014a00 <IncreaseBufferPointer>
 8014c32:	0002      	movs	r2, r0
 8014c34:	4b02      	ldr	r3, [pc, #8]	; (8014c40 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8014c36:	605a      	str	r2, [r3, #4]

    return true;
 8014c38:	2301      	movs	r3, #1
}
 8014c3a:	0018      	movs	r0, r3
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd80      	pop	{r7, pc}
 8014c40:	20000d00 	.word	0x20000d00

08014c44 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	0002      	movs	r2, r0
 8014c4c:	1dfb      	adds	r3, r7, #7
 8014c4e:	701a      	strb	r2, [r3, #0]
 8014c50:	1dbb      	adds	r3, r7, #6
 8014c52:	1c0a      	adds	r2, r1, #0
 8014c54:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8014c56:	2300      	movs	r3, #0
 8014c58:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8014c5a:	4b13      	ldr	r3, [pc, #76]	; (8014ca8 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014c5c:	691b      	ldr	r3, [r3, #16]
 8014c5e:	7d1b      	ldrb	r3, [r3, #20]
 8014c60:	0018      	movs	r0, r3
 8014c62:	f7ff fee5 	bl	8014a30 <IsListEmpty>
 8014c66:	0003      	movs	r3, r0
 8014c68:	001a      	movs	r2, r3
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	4053      	eors	r3, r2
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d014      	beq.n	8014c9e <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014c74:	4b0c      	ldr	r3, [pc, #48]	; (8014ca8 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014c76:	6859      	ldr	r1, [r3, #4]
 8014c78:	4b0b      	ldr	r3, [pc, #44]	; (8014ca8 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014c7a:	689a      	ldr	r2, [r3, #8]
 8014c7c:	1dbb      	adds	r3, r7, #6
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	0018      	movs	r0, r3
 8014c82:	f7ff fef7 	bl	8014a74 <GetElement>
 8014c86:	0003      	movs	r3, r0
 8014c88:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d006      	beq.n	8014c9e <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	1dfa      	adds	r2, r7, #7
 8014c94:	7812      	ldrb	r2, [r2, #0]
 8014c96:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2201      	movs	r2, #1
 8014c9c:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014c9e:	46c0      	nop			; (mov r8, r8)
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	b004      	add	sp, #16
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	46c0      	nop			; (mov r8, r8)
 8014ca8:	20000d00 	.word	0x20000d00

08014cac <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	0002      	movs	r2, r0
 8014cb4:	1dfb      	adds	r3, r7, #7
 8014cb6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8014cbc:	4b11      	ldr	r3, [pc, #68]	; (8014d04 <LoRaMacConfirmQueueGetStatus+0x58>)
 8014cbe:	691b      	ldr	r3, [r3, #16]
 8014cc0:	7d1b      	ldrb	r3, [r3, #20]
 8014cc2:	0018      	movs	r0, r3
 8014cc4:	f7ff feb4 	bl	8014a30 <IsListEmpty>
 8014cc8:	0003      	movs	r3, r0
 8014cca:	001a      	movs	r2, r3
 8014ccc:	2301      	movs	r3, #1
 8014cce:	4053      	eors	r3, r2
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d010      	beq.n	8014cf8 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014cd6:	4b0b      	ldr	r3, [pc, #44]	; (8014d04 <LoRaMacConfirmQueueGetStatus+0x58>)
 8014cd8:	6859      	ldr	r1, [r3, #4]
 8014cda:	4b0a      	ldr	r3, [pc, #40]	; (8014d04 <LoRaMacConfirmQueueGetStatus+0x58>)
 8014cdc:	689a      	ldr	r2, [r3, #8]
 8014cde:	1dfb      	adds	r3, r7, #7
 8014ce0:	781b      	ldrb	r3, [r3, #0]
 8014ce2:	0018      	movs	r0, r3
 8014ce4:	f7ff fec6 	bl	8014a74 <GetElement>
 8014ce8:	0003      	movs	r3, r0
 8014cea:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d002      	beq.n	8014cf8 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	785b      	ldrb	r3, [r3, #1]
 8014cf6:	e000      	b.n	8014cfa <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014cf8:	2301      	movs	r3, #1
}
 8014cfa:	0018      	movs	r0, r3
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	b004      	add	sp, #16
 8014d00:	bd80      	pop	{r7, pc}
 8014d02:	46c0      	nop			; (mov r8, r8)
 8014d04:	20000d00 	.word	0x20000d00

08014d08 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b084      	sub	sp, #16
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	0002      	movs	r2, r0
 8014d10:	1dfb      	adds	r3, r7, #7
 8014d12:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014d14:	4b18      	ldr	r3, [pc, #96]	; (8014d78 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8014d1a:	4b17      	ldr	r3, [pc, #92]	; (8014d78 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014d1c:	691b      	ldr	r3, [r3, #16]
 8014d1e:	1dfa      	adds	r2, r7, #7
 8014d20:	7812      	ldrb	r2, [r2, #0]
 8014d22:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8014d24:	4b14      	ldr	r3, [pc, #80]	; (8014d78 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014d26:	691b      	ldr	r3, [r3, #16]
 8014d28:	7d1b      	ldrb	r3, [r3, #20]
 8014d2a:	0018      	movs	r0, r3
 8014d2c:	f7ff fe80 	bl	8014a30 <IsListEmpty>
 8014d30:	0003      	movs	r3, r0
 8014d32:	001a      	movs	r2, r3
 8014d34:	2301      	movs	r3, #1
 8014d36:	4053      	eors	r3, r2
 8014d38:	b2db      	uxtb	r3, r3
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d018      	beq.n	8014d70 <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	1dfa      	adds	r2, r7, #7
 8014d42:	7812      	ldrb	r2, [r2, #0]
 8014d44:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	78db      	ldrb	r3, [r3, #3]
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	4053      	eors	r3, r2
 8014d4e:	b2db      	uxtb	r3, r3
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d002      	beq.n	8014d5a <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	2201      	movs	r2, #1
 8014d58:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	0018      	movs	r0, r3
 8014d5e:	f7ff fe4f 	bl	8014a00 <IncreaseBufferPointer>
 8014d62:	0003      	movs	r3, r0
 8014d64:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014d66:	4b04      	ldr	r3, [pc, #16]	; (8014d78 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014d68:	689b      	ldr	r3, [r3, #8]
 8014d6a:	68fa      	ldr	r2, [r7, #12]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d1e6      	bne.n	8014d3e <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 8014d70:	46c0      	nop			; (mov r8, r8)
 8014d72:	46bd      	mov	sp, r7
 8014d74:	b004      	add	sp, #16
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	20000d00 	.word	0x20000d00

08014d7c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	0002      	movs	r2, r0
 8014d84:	1dfb      	adds	r3, r7, #7
 8014d86:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014d88:	4b08      	ldr	r3, [pc, #32]	; (8014dac <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014d8a:	6859      	ldr	r1, [r3, #4]
 8014d8c:	4b07      	ldr	r3, [pc, #28]	; (8014dac <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014d8e:	689a      	ldr	r2, [r3, #8]
 8014d90:	1dfb      	adds	r3, r7, #7
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	0018      	movs	r0, r3
 8014d96:	f7ff fe6d 	bl	8014a74 <GetElement>
 8014d9a:	1e03      	subs	r3, r0, #0
 8014d9c:	d001      	beq.n	8014da2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	e000      	b.n	8014da4 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 8014da2:	2300      	movs	r3, #0
}
 8014da4:	0018      	movs	r0, r3
 8014da6:	46bd      	mov	sp, r7
 8014da8:	b002      	add	sp, #8
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	20000d00 	.word	0x20000d00

08014db0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b084      	sub	sp, #16
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8014db8:	4b2d      	ldr	r3, [pc, #180]	; (8014e70 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014dba:	691a      	ldr	r2, [r3, #16]
 8014dbc:	230e      	movs	r3, #14
 8014dbe:	18fb      	adds	r3, r7, r3
 8014dc0:	7d12      	ldrb	r2, [r2, #20]
 8014dc2:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8014dc4:	230d      	movs	r3, #13
 8014dc6:	18fb      	adds	r3, r7, r3
 8014dc8:	2200      	movs	r2, #0
 8014dca:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014dcc:	230f      	movs	r3, #15
 8014dce:	18fb      	adds	r3, r7, r3
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	701a      	strb	r2, [r3, #0]
 8014dd4:	e03f      	b.n	8014e56 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014dd6:	4b26      	ldr	r3, [pc, #152]	; (8014e70 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014dd8:	685b      	ldr	r3, [r3, #4]
 8014dda:	781a      	ldrb	r2, [r3, #0]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014de0:	4b23      	ldr	r3, [pc, #140]	; (8014e70 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014de2:	685b      	ldr	r3, [r3, #4]
 8014de4:	785a      	ldrb	r2, [r3, #1]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014dea:	4b21      	ldr	r3, [pc, #132]	; (8014e70 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014dec:	685a      	ldr	r2, [r3, #4]
 8014dee:	210d      	movs	r1, #13
 8014df0:	187b      	adds	r3, r7, r1
 8014df2:	7892      	ldrb	r2, [r2, #2]
 8014df4:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 8014df6:	187b      	adds	r3, r7, r1
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d006      	beq.n	8014e0c <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014dfe:	4b1c      	ldr	r3, [pc, #112]	; (8014e70 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	689b      	ldr	r3, [r3, #8]
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	0010      	movs	r0, r2
 8014e08:	4798      	blx	r3
 8014e0a:	e00f      	b.n	8014e2c <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014e0c:	4b18      	ldr	r3, [pc, #96]	; (8014e70 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014e0e:	685b      	ldr	r3, [r3, #4]
 8014e10:	781a      	ldrb	r2, [r3, #0]
 8014e12:	2108      	movs	r1, #8
 8014e14:	187b      	adds	r3, r7, r1
 8014e16:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014e18:	4b15      	ldr	r3, [pc, #84]	; (8014e70 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014e1a:	685b      	ldr	r3, [r3, #4]
 8014e1c:	785a      	ldrb	r2, [r3, #1]
 8014e1e:	187b      	adds	r3, r7, r1
 8014e20:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014e22:	4b13      	ldr	r3, [pc, #76]	; (8014e70 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	78da      	ldrb	r2, [r3, #3]
 8014e28:	187b      	adds	r3, r7, r1
 8014e2a:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014e2c:	f7ff feea 	bl	8014c04 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014e30:	230d      	movs	r3, #13
 8014e32:	18fb      	adds	r3, r7, r3
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	2201      	movs	r2, #1
 8014e38:	4053      	eors	r3, r2
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d004      	beq.n	8014e4a <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014e40:	2308      	movs	r3, #8
 8014e42:	18fb      	adds	r3, r7, r3
 8014e44:	0018      	movs	r0, r3
 8014e46:	f7ff fea7 	bl	8014b98 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014e4a:	210f      	movs	r1, #15
 8014e4c:	187b      	adds	r3, r7, r1
 8014e4e:	781a      	ldrb	r2, [r3, #0]
 8014e50:	187b      	adds	r3, r7, r1
 8014e52:	3201      	adds	r2, #1
 8014e54:	701a      	strb	r2, [r3, #0]
 8014e56:	230f      	movs	r3, #15
 8014e58:	18fa      	adds	r2, r7, r3
 8014e5a:	230e      	movs	r3, #14
 8014e5c:	18fb      	adds	r3, r7, r3
 8014e5e:	7812      	ldrb	r2, [r2, #0]
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d3b7      	bcc.n	8014dd6 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 8014e66:	46c0      	nop			; (mov r8, r8)
 8014e68:	46c0      	nop			; (mov r8, r8)
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	b004      	add	sp, #16
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	20000d00 	.word	0x20000d00

08014e74 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8014e78:	4b02      	ldr	r3, [pc, #8]	; (8014e84 <LoRaMacConfirmQueueGetCnt+0x10>)
 8014e7a:	691b      	ldr	r3, [r3, #16]
 8014e7c:	7d1b      	ldrb	r3, [r3, #20]
}
 8014e7e:	0018      	movs	r0, r3
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	20000d00 	.word	0x20000d00

08014e88 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014e8c:	4b06      	ldr	r3, [pc, #24]	; (8014ea8 <LoRaMacConfirmQueueIsFull+0x20>)
 8014e8e:	691b      	ldr	r3, [r3, #16]
 8014e90:	7d1b      	ldrb	r3, [r3, #20]
 8014e92:	0018      	movs	r0, r3
 8014e94:	f7ff fddd 	bl	8014a52 <IsListFull>
 8014e98:	1e03      	subs	r3, r0, #0
 8014e9a:	d001      	beq.n	8014ea0 <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	e000      	b.n	8014ea2 <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 8014ea0:	2300      	movs	r3, #0
    }
}
 8014ea2:	0018      	movs	r0, r3
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	20000d00 	.word	0x20000d00

08014eac <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014eac:	b590      	push	{r4, r7, lr}
 8014eae:	b08f      	sub	sp, #60	; 0x3c
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	60f8      	str	r0, [r7, #12]
 8014eb4:	0008      	movs	r0, r1
 8014eb6:	0011      	movs	r1, r2
 8014eb8:	607b      	str	r3, [r7, #4]
 8014eba:	230a      	movs	r3, #10
 8014ebc:	18fb      	adds	r3, r7, r3
 8014ebe:	1c02      	adds	r2, r0, #0
 8014ec0:	801a      	strh	r2, [r3, #0]
 8014ec2:	2309      	movs	r3, #9
 8014ec4:	18fb      	adds	r3, r7, r3
 8014ec6:	1c0a      	adds	r2, r1, #0
 8014ec8:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d101      	bne.n	8014ed4 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ed0:	230a      	movs	r3, #10
 8014ed2:	e0ae      	b.n	8015032 <PayloadEncrypt+0x186>
    }

    uint8_t bufferIndex = 0;
 8014ed4:	2337      	movs	r3, #55	; 0x37
 8014ed6:	18fb      	adds	r3, r7, r3
 8014ed8:	2200      	movs	r2, #0
 8014eda:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8014edc:	2334      	movs	r3, #52	; 0x34
 8014ede:	18fb      	adds	r3, r7, r3
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8014ee4:	2320      	movs	r3, #32
 8014ee6:	18fb      	adds	r3, r7, r3
 8014ee8:	2200      	movs	r2, #0
 8014eea:	601a      	str	r2, [r3, #0]
 8014eec:	3304      	adds	r3, #4
 8014eee:	220c      	movs	r2, #12
 8014ef0:	2100      	movs	r1, #0
 8014ef2:	0018      	movs	r0, r3
 8014ef4:	f008 fd49 	bl	801d98a <memset>
    uint8_t aBlock[16] = { 0 };
 8014ef8:	2410      	movs	r4, #16
 8014efa:	193b      	adds	r3, r7, r4
 8014efc:	2200      	movs	r2, #0
 8014efe:	601a      	str	r2, [r3, #0]
 8014f00:	3304      	adds	r3, #4
 8014f02:	220c      	movs	r2, #12
 8014f04:	2100      	movs	r1, #0
 8014f06:	0018      	movs	r0, r3
 8014f08:	f008 fd3f 	bl	801d98a <memset>

    aBlock[0] = 0x01;
 8014f0c:	0021      	movs	r1, r4
 8014f0e:	187b      	adds	r3, r7, r1
 8014f10:	2201      	movs	r2, #1
 8014f12:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8014f14:	187a      	adds	r2, r7, r1
 8014f16:	2340      	movs	r3, #64	; 0x40
 8014f18:	2008      	movs	r0, #8
 8014f1a:	4684      	mov	ip, r0
 8014f1c:	44bc      	add	ip, r7
 8014f1e:	4463      	add	r3, ip
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	b2da      	uxtb	r2, r3
 8014f28:	187b      	adds	r3, r7, r1
 8014f2a:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	0a1b      	lsrs	r3, r3, #8
 8014f30:	b2da      	uxtb	r2, r3
 8014f32:	187b      	adds	r3, r7, r1
 8014f34:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	0c1b      	lsrs	r3, r3, #16
 8014f3a:	b2da      	uxtb	r2, r3
 8014f3c:	187b      	adds	r3, r7, r1
 8014f3e:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	0e1b      	lsrs	r3, r3, #24
 8014f44:	b2da      	uxtb	r2, r3
 8014f46:	187b      	adds	r3, r7, r1
 8014f48:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8014f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f4c:	b2da      	uxtb	r2, r3
 8014f4e:	187b      	adds	r3, r7, r1
 8014f50:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f54:	0a1b      	lsrs	r3, r3, #8
 8014f56:	b2da      	uxtb	r2, r3
 8014f58:	187b      	adds	r3, r7, r1
 8014f5a:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f5e:	0c1b      	lsrs	r3, r3, #16
 8014f60:	b2da      	uxtb	r2, r3
 8014f62:	187b      	adds	r3, r7, r1
 8014f64:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f68:	0e1b      	lsrs	r3, r3, #24
 8014f6a:	b2da      	uxtb	r2, r3
 8014f6c:	187b      	adds	r3, r7, r1
 8014f6e:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 8014f70:	e058      	b.n	8015024 <PayloadEncrypt+0x178>
    {
        aBlock[15] = ctr & 0xFF;
 8014f72:	2134      	movs	r1, #52	; 0x34
 8014f74:	187b      	adds	r3, r7, r1
 8014f76:	881b      	ldrh	r3, [r3, #0]
 8014f78:	b2da      	uxtb	r2, r3
 8014f7a:	2010      	movs	r0, #16
 8014f7c:	183b      	adds	r3, r7, r0
 8014f7e:	73da      	strb	r2, [r3, #15]
        ctr++;
 8014f80:	187b      	adds	r3, r7, r1
 8014f82:	881a      	ldrh	r2, [r3, #0]
 8014f84:	187b      	adds	r3, r7, r1
 8014f86:	3201      	adds	r2, #1
 8014f88:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014f8a:	2320      	movs	r3, #32
 8014f8c:	18f9      	adds	r1, r7, r3
 8014f8e:	2309      	movs	r3, #9
 8014f90:	18fb      	adds	r3, r7, r3
 8014f92:	781a      	ldrb	r2, [r3, #0]
 8014f94:	1838      	adds	r0, r7, r0
 8014f96:	000b      	movs	r3, r1
 8014f98:	2110      	movs	r1, #16
 8014f9a:	f7f8 f9f6 	bl	800d38a <SecureElementAesEncrypt>
 8014f9e:	1e03      	subs	r3, r0, #0
 8014fa0:	d001      	beq.n	8014fa6 <PayloadEncrypt+0xfa>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014fa2:	230f      	movs	r3, #15
 8014fa4:	e045      	b.n	8015032 <PayloadEncrypt+0x186>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014fa6:	2333      	movs	r3, #51	; 0x33
 8014fa8:	18fb      	adds	r3, r7, r3
 8014faa:	2200      	movs	r2, #0
 8014fac:	701a      	strb	r2, [r3, #0]
 8014fae:	e01f      	b.n	8014ff0 <PayloadEncrypt+0x144>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014fb0:	2037      	movs	r0, #55	; 0x37
 8014fb2:	183b      	adds	r3, r7, r0
 8014fb4:	781a      	ldrb	r2, [r3, #0]
 8014fb6:	2433      	movs	r4, #51	; 0x33
 8014fb8:	193b      	adds	r3, r7, r4
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	18d3      	adds	r3, r2, r3
 8014fbe:	001a      	movs	r2, r3
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	189b      	adds	r3, r3, r2
 8014fc4:	7819      	ldrb	r1, [r3, #0]
 8014fc6:	193b      	adds	r3, r7, r4
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	2220      	movs	r2, #32
 8014fcc:	18ba      	adds	r2, r7, r2
 8014fce:	5cd2      	ldrb	r2, [r2, r3]
 8014fd0:	183b      	adds	r3, r7, r0
 8014fd2:	7818      	ldrb	r0, [r3, #0]
 8014fd4:	193b      	adds	r3, r7, r4
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	18c3      	adds	r3, r0, r3
 8014fda:	0018      	movs	r0, r3
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	181b      	adds	r3, r3, r0
 8014fe0:	404a      	eors	r2, r1
 8014fe2:	b2d2      	uxtb	r2, r2
 8014fe4:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014fe6:	193b      	adds	r3, r7, r4
 8014fe8:	781a      	ldrb	r2, [r3, #0]
 8014fea:	193b      	adds	r3, r7, r4
 8014fec:	3201      	adds	r2, #1
 8014fee:	701a      	strb	r2, [r3, #0]
 8014ff0:	2333      	movs	r3, #51	; 0x33
 8014ff2:	18fb      	adds	r3, r7, r3
 8014ff4:	781a      	ldrb	r2, [r3, #0]
 8014ff6:	230a      	movs	r3, #10
 8014ff8:	18fb      	adds	r3, r7, r3
 8014ffa:	881b      	ldrh	r3, [r3, #0]
 8014ffc:	b219      	sxth	r1, r3
 8014ffe:	2910      	cmp	r1, #16
 8015000:	dd00      	ble.n	8015004 <PayloadEncrypt+0x158>
 8015002:	2310      	movs	r3, #16
 8015004:	b21b      	sxth	r3, r3
 8015006:	429a      	cmp	r2, r3
 8015008:	dbd2      	blt.n	8014fb0 <PayloadEncrypt+0x104>
        }
        size -= 16;
 801500a:	210a      	movs	r1, #10
 801500c:	187b      	adds	r3, r7, r1
 801500e:	881b      	ldrh	r3, [r3, #0]
 8015010:	3b10      	subs	r3, #16
 8015012:	b29a      	uxth	r2, r3
 8015014:	187b      	adds	r3, r7, r1
 8015016:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8015018:	2237      	movs	r2, #55	; 0x37
 801501a:	18bb      	adds	r3, r7, r2
 801501c:	18ba      	adds	r2, r7, r2
 801501e:	7812      	ldrb	r2, [r2, #0]
 8015020:	3210      	adds	r2, #16
 8015022:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015024:	230a      	movs	r3, #10
 8015026:	18fb      	adds	r3, r7, r3
 8015028:	2200      	movs	r2, #0
 801502a:	5e9b      	ldrsh	r3, [r3, r2]
 801502c:	2b00      	cmp	r3, #0
 801502e:	dca0      	bgt.n	8014f72 <PayloadEncrypt+0xc6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015030:	2300      	movs	r3, #0
}
 8015032:	0018      	movs	r0, r3
 8015034:	46bd      	mov	sp, r7
 8015036:	b00f      	add	sp, #60	; 0x3c
 8015038:	bd90      	pop	{r4, r7, pc}

0801503a <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801503a:	b5b0      	push	{r4, r5, r7, lr}
 801503c:	b082      	sub	sp, #8
 801503e:	af00      	add	r7, sp, #0
 8015040:	0005      	movs	r5, r0
 8015042:	000c      	movs	r4, r1
 8015044:	0010      	movs	r0, r2
 8015046:	0019      	movs	r1, r3
 8015048:	1dbb      	adds	r3, r7, #6
 801504a:	1c2a      	adds	r2, r5, #0
 801504c:	801a      	strh	r2, [r3, #0]
 801504e:	1d7b      	adds	r3, r7, #5
 8015050:	1c22      	adds	r2, r4, #0
 8015052:	701a      	strb	r2, [r3, #0]
 8015054:	1d3b      	adds	r3, r7, #4
 8015056:	1c02      	adds	r2, r0, #0
 8015058:	701a      	strb	r2, [r3, #0]
 801505a:	1cfb      	adds	r3, r7, #3
 801505c:	1c0a      	adds	r2, r1, #0
 801505e:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8015060:	6a3b      	ldr	r3, [r7, #32]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d101      	bne.n	801506a <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015066:	230a      	movs	r3, #10
 8015068:	e050      	b.n	801510c <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 801506a:	6a3b      	ldr	r3, [r7, #32]
 801506c:	2249      	movs	r2, #73	; 0x49
 801506e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8015070:	6a3b      	ldr	r3, [r7, #32]
 8015072:	3301      	adds	r3, #1
 8015074:	2200      	movs	r2, #0
 8015076:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015078:	6a3b      	ldr	r3, [r7, #32]
 801507a:	3302      	adds	r3, #2
 801507c:	2200      	movs	r2, #0
 801507e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015080:	6a3b      	ldr	r3, [r7, #32]
 8015082:	3303      	adds	r3, #3
 8015084:	2200      	movs	r2, #0
 8015086:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015088:	6a3b      	ldr	r3, [r7, #32]
 801508a:	3304      	adds	r3, #4
 801508c:	2200      	movs	r2, #0
 801508e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015090:	6a3b      	ldr	r3, [r7, #32]
 8015092:	3305      	adds	r3, #5
 8015094:	1cfa      	adds	r2, r7, #3
 8015096:	7812      	ldrb	r2, [r2, #0]
 8015098:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801509a:	6a3b      	ldr	r3, [r7, #32]
 801509c:	3306      	adds	r3, #6
 801509e:	69ba      	ldr	r2, [r7, #24]
 80150a0:	b2d2      	uxtb	r2, r2
 80150a2:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80150a4:	69bb      	ldr	r3, [r7, #24]
 80150a6:	0a1a      	lsrs	r2, r3, #8
 80150a8:	6a3b      	ldr	r3, [r7, #32]
 80150aa:	3307      	adds	r3, #7
 80150ac:	b2d2      	uxtb	r2, r2
 80150ae:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	0c1a      	lsrs	r2, r3, #16
 80150b4:	6a3b      	ldr	r3, [r7, #32]
 80150b6:	3308      	adds	r3, #8
 80150b8:	b2d2      	uxtb	r2, r2
 80150ba:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80150bc:	69bb      	ldr	r3, [r7, #24]
 80150be:	0e1a      	lsrs	r2, r3, #24
 80150c0:	6a3b      	ldr	r3, [r7, #32]
 80150c2:	3309      	adds	r3, #9
 80150c4:	b2d2      	uxtb	r2, r2
 80150c6:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80150c8:	6a3b      	ldr	r3, [r7, #32]
 80150ca:	330a      	adds	r3, #10
 80150cc:	69fa      	ldr	r2, [r7, #28]
 80150ce:	b2d2      	uxtb	r2, r2
 80150d0:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80150d2:	69fb      	ldr	r3, [r7, #28]
 80150d4:	0a1a      	lsrs	r2, r3, #8
 80150d6:	6a3b      	ldr	r3, [r7, #32]
 80150d8:	330b      	adds	r3, #11
 80150da:	b2d2      	uxtb	r2, r2
 80150dc:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80150de:	69fb      	ldr	r3, [r7, #28]
 80150e0:	0c1a      	lsrs	r2, r3, #16
 80150e2:	6a3b      	ldr	r3, [r7, #32]
 80150e4:	330c      	adds	r3, #12
 80150e6:	b2d2      	uxtb	r2, r2
 80150e8:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80150ea:	69fb      	ldr	r3, [r7, #28]
 80150ec:	0e1a      	lsrs	r2, r3, #24
 80150ee:	6a3b      	ldr	r3, [r7, #32]
 80150f0:	330d      	adds	r3, #13
 80150f2:	b2d2      	uxtb	r2, r2
 80150f4:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80150f6:	6a3b      	ldr	r3, [r7, #32]
 80150f8:	330e      	adds	r3, #14
 80150fa:	2200      	movs	r2, #0
 80150fc:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80150fe:	6a3b      	ldr	r3, [r7, #32]
 8015100:	330f      	adds	r3, #15
 8015102:	1dba      	adds	r2, r7, #6
 8015104:	8812      	ldrh	r2, [r2, #0]
 8015106:	b2d2      	uxtb	r2, r2
 8015108:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801510a:	2300      	movs	r3, #0
}
 801510c:	0018      	movs	r0, r3
 801510e:	46bd      	mov	sp, r7
 8015110:	b002      	add	sp, #8
 8015112:	bdb0      	pop	{r4, r5, r7, pc}

08015114 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015114:	b5b0      	push	{r4, r5, r7, lr}
 8015116:	b08a      	sub	sp, #40	; 0x28
 8015118:	af04      	add	r7, sp, #16
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	000c      	movs	r4, r1
 801511e:	0010      	movs	r0, r2
 8015120:	0019      	movs	r1, r3
 8015122:	1cbb      	adds	r3, r7, #2
 8015124:	1c22      	adds	r2, r4, #0
 8015126:	801a      	strh	r2, [r3, #0]
 8015128:	1c7b      	adds	r3, r7, #1
 801512a:	1c02      	adds	r2, r0, #0
 801512c:	701a      	strb	r2, [r3, #0]
 801512e:	003b      	movs	r3, r7
 8015130:	1c0a      	adds	r2, r1, #0
 8015132:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d002      	beq.n	8015140 <ComputeCmacB0+0x2c>
 801513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801513c:	2b00      	cmp	r3, #0
 801513e:	d101      	bne.n	8015144 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015140:	230a      	movs	r3, #10
 8015142:	e02a      	b.n	801519a <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015144:	1cbb      	adds	r3, r7, #2
 8015146:	881a      	ldrh	r2, [r3, #0]
 8015148:	2380      	movs	r3, #128	; 0x80
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	429a      	cmp	r2, r3
 801514e:	d901      	bls.n	8015154 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015150:	230e      	movs	r3, #14
 8015152:	e022      	b.n	801519a <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015154:	2328      	movs	r3, #40	; 0x28
 8015156:	18fb      	adds	r3, r7, r3
 8015158:	781c      	ldrb	r4, [r3, #0]
 801515a:	003b      	movs	r3, r7
 801515c:	781a      	ldrb	r2, [r3, #0]
 801515e:	1c7b      	adds	r3, r7, #1
 8015160:	7819      	ldrb	r1, [r3, #0]
 8015162:	1cbb      	adds	r3, r7, #2
 8015164:	8818      	ldrh	r0, [r3, #0]
 8015166:	2508      	movs	r5, #8
 8015168:	197b      	adds	r3, r7, r5
 801516a:	9302      	str	r3, [sp, #8]
 801516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801516e:	9301      	str	r3, [sp, #4]
 8015170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015172:	9300      	str	r3, [sp, #0]
 8015174:	0023      	movs	r3, r4
 8015176:	f7ff ff60 	bl	801503a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801517a:	1c7b      	adds	r3, r7, #1
 801517c:	781c      	ldrb	r4, [r3, #0]
 801517e:	1cbb      	adds	r3, r7, #2
 8015180:	881a      	ldrh	r2, [r3, #0]
 8015182:	6879      	ldr	r1, [r7, #4]
 8015184:	1978      	adds	r0, r7, r5
 8015186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015188:	9300      	str	r3, [sp, #0]
 801518a:	0023      	movs	r3, r4
 801518c:	f7f8 f89a 	bl	800d2c4 <SecureElementComputeAesCmac>
 8015190:	1e03      	subs	r3, r0, #0
 8015192:	d001      	beq.n	8015198 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015194:	230f      	movs	r3, #15
 8015196:	e000      	b.n	801519a <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015198:	2300      	movs	r3, #0
}
 801519a:	0018      	movs	r0, r3
 801519c:	46bd      	mov	sp, r7
 801519e:	b006      	add	sp, #24
 80151a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080151a4 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80151a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151a6:	b0cd      	sub	sp, #308	; 0x134
 80151a8:	af04      	add	r7, sp, #16
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	000c      	movs	r4, r1
 80151ae:	0010      	movs	r0, r2
 80151b0:	0019      	movs	r1, r3
 80151b2:	4b52      	ldr	r3, [pc, #328]	; (80152fc <VerifyCmacB0+0x158>)
 80151b4:	2290      	movs	r2, #144	; 0x90
 80151b6:	0052      	lsls	r2, r2, #1
 80151b8:	4694      	mov	ip, r2
 80151ba:	44bc      	add	ip, r7
 80151bc:	4463      	add	r3, ip
 80151be:	1c22      	adds	r2, r4, #0
 80151c0:	801a      	strh	r2, [r3, #0]
 80151c2:	4b4f      	ldr	r3, [pc, #316]	; (8015300 <VerifyCmacB0+0x15c>)
 80151c4:	2290      	movs	r2, #144	; 0x90
 80151c6:	0052      	lsls	r2, r2, #1
 80151c8:	4694      	mov	ip, r2
 80151ca:	44bc      	add	ip, r7
 80151cc:	4463      	add	r3, ip
 80151ce:	1c02      	adds	r2, r0, #0
 80151d0:	701a      	strb	r2, [r3, #0]
 80151d2:	4b4c      	ldr	r3, [pc, #304]	; (8015304 <VerifyCmacB0+0x160>)
 80151d4:	2290      	movs	r2, #144	; 0x90
 80151d6:	0052      	lsls	r2, r2, #1
 80151d8:	4694      	mov	ip, r2
 80151da:	44bc      	add	ip, r7
 80151dc:	4463      	add	r3, ip
 80151de:	1c0a      	adds	r2, r1, #0
 80151e0:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d101      	bne.n	80151ec <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80151e8:	230a      	movs	r3, #10
 80151ea:	e083      	b.n	80152f4 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80151ec:	4b43      	ldr	r3, [pc, #268]	; (80152fc <VerifyCmacB0+0x158>)
 80151ee:	2290      	movs	r2, #144	; 0x90
 80151f0:	0052      	lsls	r2, r2, #1
 80151f2:	4694      	mov	ip, r2
 80151f4:	44bc      	add	ip, r7
 80151f6:	4463      	add	r3, ip
 80151f8:	881a      	ldrh	r2, [r3, #0]
 80151fa:	2380      	movs	r3, #128	; 0x80
 80151fc:	005b      	lsls	r3, r3, #1
 80151fe:	429a      	cmp	r2, r3
 8015200:	d901      	bls.n	8015206 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015202:	230e      	movs	r3, #14
 8015204:	e076      	b.n	80152f4 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015206:	2388      	movs	r3, #136	; 0x88
 8015208:	005a      	lsls	r2, r3, #1
 801520a:	250c      	movs	r5, #12
 801520c:	197b      	adds	r3, r7, r5
 801520e:	2100      	movs	r1, #0
 8015210:	0018      	movs	r0, r3
 8015212:	f003 fe9d 	bl	8018f50 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015216:	2398      	movs	r3, #152	; 0x98
 8015218:	005b      	lsls	r3, r3, #1
 801521a:	2208      	movs	r2, #8
 801521c:	4694      	mov	ip, r2
 801521e:	44bc      	add	ip, r7
 8015220:	4463      	add	r3, ip
 8015222:	781c      	ldrb	r4, [r3, #0]
 8015224:	4b37      	ldr	r3, [pc, #220]	; (8015304 <VerifyCmacB0+0x160>)
 8015226:	2290      	movs	r2, #144	; 0x90
 8015228:	0052      	lsls	r2, r2, #1
 801522a:	4694      	mov	ip, r2
 801522c:	44bc      	add	ip, r7
 801522e:	4463      	add	r3, ip
 8015230:	781a      	ldrb	r2, [r3, #0]
 8015232:	4b33      	ldr	r3, [pc, #204]	; (8015300 <VerifyCmacB0+0x15c>)
 8015234:	2190      	movs	r1, #144	; 0x90
 8015236:	0049      	lsls	r1, r1, #1
 8015238:	468c      	mov	ip, r1
 801523a:	44bc      	add	ip, r7
 801523c:	4463      	add	r3, ip
 801523e:	7819      	ldrb	r1, [r3, #0]
 8015240:	4b2e      	ldr	r3, [pc, #184]	; (80152fc <VerifyCmacB0+0x158>)
 8015242:	2090      	movs	r0, #144	; 0x90
 8015244:	0040      	lsls	r0, r0, #1
 8015246:	4684      	mov	ip, r0
 8015248:	44bc      	add	ip, r7
 801524a:	4463      	add	r3, ip
 801524c:	8818      	ldrh	r0, [r3, #0]
 801524e:	197b      	adds	r3, r7, r5
 8015250:	9302      	str	r3, [sp, #8]
 8015252:	239c      	movs	r3, #156	; 0x9c
 8015254:	005b      	lsls	r3, r3, #1
 8015256:	2608      	movs	r6, #8
 8015258:	46b4      	mov	ip, r6
 801525a:	44bc      	add	ip, r7
 801525c:	4463      	add	r3, ip
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	9301      	str	r3, [sp, #4]
 8015262:	239a      	movs	r3, #154	; 0x9a
 8015264:	005b      	lsls	r3, r3, #1
 8015266:	2608      	movs	r6, #8
 8015268:	46b4      	mov	ip, r6
 801526a:	44bc      	add	ip, r7
 801526c:	4463      	add	r3, ip
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	9300      	str	r3, [sp, #0]
 8015272:	0023      	movs	r3, r4
 8015274:	f7ff fee1 	bl	801503a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015278:	197b      	adds	r3, r7, r5
 801527a:	3310      	adds	r3, #16
 801527c:	4a1f      	ldr	r2, [pc, #124]	; (80152fc <VerifyCmacB0+0x158>)
 801527e:	2190      	movs	r1, #144	; 0x90
 8015280:	0049      	lsls	r1, r1, #1
 8015282:	468c      	mov	ip, r1
 8015284:	44bc      	add	ip, r7
 8015286:	4462      	add	r2, ip
 8015288:	8812      	ldrh	r2, [r2, #0]
 801528a:	6879      	ldr	r1, [r7, #4]
 801528c:	0018      	movs	r0, r3
 801528e:	f003 fe21 	bl	8018ed4 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015292:	2620      	movs	r6, #32
 8015294:	36ff      	adds	r6, #255	; 0xff
 8015296:	19bb      	adds	r3, r7, r6
 8015298:	2206      	movs	r2, #6
 801529a:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801529c:	4b17      	ldr	r3, [pc, #92]	; (80152fc <VerifyCmacB0+0x158>)
 801529e:	2290      	movs	r2, #144	; 0x90
 80152a0:	0052      	lsls	r2, r2, #1
 80152a2:	4694      	mov	ip, r2
 80152a4:	44bc      	add	ip, r7
 80152a6:	4463      	add	r3, ip
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	3310      	adds	r3, #16
 80152ac:	b299      	uxth	r1, r3
 80152ae:	19bc      	adds	r4, r7, r6
 80152b0:	4b13      	ldr	r3, [pc, #76]	; (8015300 <VerifyCmacB0+0x15c>)
 80152b2:	2290      	movs	r2, #144	; 0x90
 80152b4:	0052      	lsls	r2, r2, #1
 80152b6:	4694      	mov	ip, r2
 80152b8:	44bc      	add	ip, r7
 80152ba:	4463      	add	r3, ip
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	229e      	movs	r2, #158	; 0x9e
 80152c0:	0052      	lsls	r2, r2, #1
 80152c2:	2008      	movs	r0, #8
 80152c4:	4684      	mov	ip, r0
 80152c6:	44bc      	add	ip, r7
 80152c8:	4462      	add	r2, ip
 80152ca:	6812      	ldr	r2, [r2, #0]
 80152cc:	1978      	adds	r0, r7, r5
 80152ce:	f7f8 f81a 	bl	800d306 <SecureElementVerifyAesCmac>
 80152d2:	0003      	movs	r3, r0
 80152d4:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 80152d6:	19bb      	adds	r3, r7, r6
 80152d8:	781b      	ldrb	r3, [r3, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d101      	bne.n	80152e2 <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80152de:	2300      	movs	r3, #0
 80152e0:	e008      	b.n	80152f4 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80152e2:	2320      	movs	r3, #32
 80152e4:	33ff      	adds	r3, #255	; 0xff
 80152e6:	18fb      	adds	r3, r7, r3
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	2b01      	cmp	r3, #1
 80152ec:	d101      	bne.n	80152f2 <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80152ee:	2301      	movs	r3, #1
 80152f0:	e000      	b.n	80152f4 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80152f2:	230f      	movs	r3, #15
}
 80152f4:	0018      	movs	r0, r3
 80152f6:	46bd      	mov	sp, r7
 80152f8:	b049      	add	sp, #292	; 0x124
 80152fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152fc:	fffffee2 	.word	0xfffffee2
 8015300:	fffffee1 	.word	0xfffffee1
 8015304:	fffffee0 	.word	0xfffffee0

08015308 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b084      	sub	sp, #16
 801530c:	af00      	add	r7, sp, #0
 801530e:	0002      	movs	r2, r0
 8015310:	6039      	str	r1, [r7, #0]
 8015312:	1dfb      	adds	r3, r7, #7
 8015314:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015316:	230f      	movs	r3, #15
 8015318:	18fb      	adds	r3, r7, r3
 801531a:	2200      	movs	r2, #0
 801531c:	701a      	strb	r2, [r3, #0]
 801531e:	e018      	b.n	8015352 <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015320:	210f      	movs	r1, #15
 8015322:	187b      	adds	r3, r7, r1
 8015324:	781a      	ldrb	r2, [r3, #0]
 8015326:	4b10      	ldr	r3, [pc, #64]	; (8015368 <GetKeyAddrItem+0x60>)
 8015328:	0092      	lsls	r2, r2, #2
 801532a:	5cd3      	ldrb	r3, [r2, r3]
 801532c:	1dfa      	adds	r2, r7, #7
 801532e:	7812      	ldrb	r2, [r2, #0]
 8015330:	429a      	cmp	r2, r3
 8015332:	d108      	bne.n	8015346 <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8015334:	187b      	adds	r3, r7, r1
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	009a      	lsls	r2, r3, #2
 801533a:	4b0b      	ldr	r3, [pc, #44]	; (8015368 <GetKeyAddrItem+0x60>)
 801533c:	18d2      	adds	r2, r2, r3
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015342:	2300      	movs	r3, #0
 8015344:	e00b      	b.n	801535e <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015346:	210f      	movs	r1, #15
 8015348:	187b      	adds	r3, r7, r1
 801534a:	781a      	ldrb	r2, [r3, #0]
 801534c:	187b      	adds	r3, r7, r1
 801534e:	3201      	adds	r2, #1
 8015350:	701a      	strb	r2, [r3, #0]
 8015352:	230f      	movs	r3, #15
 8015354:	18fb      	adds	r3, r7, r3
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	2b01      	cmp	r3, #1
 801535a:	d9e1      	bls.n	8015320 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801535c:	230c      	movs	r3, #12
}
 801535e:	0018      	movs	r0, r3
 8015360:	46bd      	mov	sp, r7
 8015362:	b004      	add	sp, #16
 8015364:	bd80      	pop	{r7, pc}
 8015366:	46c0      	nop			; (mov r8, r8)
 8015368:	200001a4 	.word	0x200001a4

0801536c <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 801536c:	b590      	push	{r4, r7, lr}
 801536e:	b089      	sub	sp, #36	; 0x24
 8015370:	af00      	add	r7, sp, #0
 8015372:	60b9      	str	r1, [r7, #8]
 8015374:	607a      	str	r2, [r7, #4]
 8015376:	603b      	str	r3, [r7, #0]
 8015378:	230f      	movs	r3, #15
 801537a:	18fb      	adds	r3, r7, r3
 801537c:	1c02      	adds	r2, r0, #0
 801537e:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d005      	beq.n	8015392 <DeriveSessionKey10x+0x26>
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d002      	beq.n	8015392 <DeriveSessionKey10x+0x26>
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d101      	bne.n	8015396 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015392:	230a      	movs	r3, #10
 8015394:	e043      	b.n	801541e <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 8015396:	2310      	movs	r3, #16
 8015398:	18fb      	adds	r3, r7, r3
 801539a:	2200      	movs	r2, #0
 801539c:	601a      	str	r2, [r3, #0]
 801539e:	3304      	adds	r3, #4
 80153a0:	220c      	movs	r2, #12
 80153a2:	2100      	movs	r1, #0
 80153a4:	0018      	movs	r0, r3
 80153a6:	f008 faf0 	bl	801d98a <memset>

    switch( keyID )
 80153aa:	230f      	movs	r3, #15
 80153ac:	18fb      	adds	r3, r7, r3
 80153ae:	781b      	ldrb	r3, [r3, #0]
 80153b0:	2b02      	cmp	r3, #2
 80153b2:	d002      	beq.n	80153ba <DeriveSessionKey10x+0x4e>
 80153b4:	2b03      	cmp	r3, #3
 80153b6:	d005      	beq.n	80153c4 <DeriveSessionKey10x+0x58>
 80153b8:	e009      	b.n	80153ce <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80153ba:	2310      	movs	r3, #16
 80153bc:	18fb      	adds	r3, r7, r3
 80153be:	2201      	movs	r2, #1
 80153c0:	701a      	strb	r2, [r3, #0]
            break;
 80153c2:	e006      	b.n	80153d2 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80153c4:	2310      	movs	r3, #16
 80153c6:	18fb      	adds	r3, r7, r3
 80153c8:	2202      	movs	r2, #2
 80153ca:	701a      	strb	r2, [r3, #0]
            break;
 80153cc:	e001      	b.n	80153d2 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80153ce:	230b      	movs	r3, #11
 80153d0:	e025      	b.n	801541e <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80153d2:	2410      	movs	r4, #16
 80153d4:	193b      	adds	r3, r7, r4
 80153d6:	3301      	adds	r3, #1
 80153d8:	68b9      	ldr	r1, [r7, #8]
 80153da:	2203      	movs	r2, #3
 80153dc:	0018      	movs	r0, r3
 80153de:	f003 fd79 	bl	8018ed4 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 80153e2:	193b      	adds	r3, r7, r4
 80153e4:	3304      	adds	r3, #4
 80153e6:	6879      	ldr	r1, [r7, #4]
 80153e8:	2203      	movs	r2, #3
 80153ea:	0018      	movs	r0, r3
 80153ec:	f003 fd72 	bl	8018ed4 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 80153f0:	193b      	adds	r3, r7, r4
 80153f2:	3307      	adds	r3, #7
 80153f4:	6839      	ldr	r1, [r7, #0]
 80153f6:	2202      	movs	r2, #2
 80153f8:	0018      	movs	r0, r3
 80153fa:	f003 fd6b 	bl	8018ed4 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80153fe:	4b0a      	ldr	r3, [pc, #40]	; (8015428 <DeriveSessionKey10x+0xbc>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	220f      	movs	r2, #15
 8015404:	18ba      	adds	r2, r7, r2
 8015406:	7812      	ldrb	r2, [r2, #0]
 8015408:	1939      	adds	r1, r7, r4
 801540a:	6818      	ldr	r0, [r3, #0]
 801540c:	0013      	movs	r3, r2
 801540e:	2201      	movs	r2, #1
 8015410:	f7f8 f82c 	bl	800d46c <SecureElementDeriveAndStoreKey>
 8015414:	1e03      	subs	r3, r0, #0
 8015416:	d001      	beq.n	801541c <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015418:	230f      	movs	r3, #15
 801541a:	e000      	b.n	801541e <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801541c:	2300      	movs	r3, #0
}
 801541e:	0018      	movs	r0, r3
 8015420:	46bd      	mov	sp, r7
 8015422:	b009      	add	sp, #36	; 0x24
 8015424:	bd90      	pop	{r4, r7, pc}
 8015426:	46c0      	nop			; (mov r8, r8)
 8015428:	20000d14 	.word	0x20000d14

0801542c <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
 8015432:	0002      	movs	r2, r0
 8015434:	6039      	str	r1, [r7, #0]
 8015436:	1dfb      	adds	r3, r7, #7
 8015438:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d101      	bne.n	8015444 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015440:	230a      	movs	r3, #10
 8015442:	e039      	b.n	80154b8 <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8015444:	1dfb      	adds	r3, r7, #7
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	2b04      	cmp	r3, #4
 801544a:	d02c      	beq.n	80154a6 <GetLastFcntDown+0x7a>
 801544c:	dc31      	bgt.n	80154b2 <GetLastFcntDown+0x86>
 801544e:	2b03      	cmp	r3, #3
 8015450:	d01d      	beq.n	801548e <GetLastFcntDown+0x62>
 8015452:	dc2e      	bgt.n	80154b2 <GetLastFcntDown+0x86>
 8015454:	2b01      	cmp	r3, #1
 8015456:	d002      	beq.n	801545e <GetLastFcntDown+0x32>
 8015458:	2b02      	cmp	r3, #2
 801545a:	d00c      	beq.n	8015476 <GetLastFcntDown+0x4a>
 801545c:	e029      	b.n	80154b2 <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 801545e:	4b18      	ldr	r3, [pc, #96]	; (80154c0 <GetLastFcntDown+0x94>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	691a      	ldr	r2, [r3, #16]
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015468:	4b15      	ldr	r3, [pc, #84]	; (80154c0 <GetLastFcntDown+0x94>)
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	4b14      	ldr	r3, [pc, #80]	; (80154c0 <GetLastFcntDown+0x94>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	3210      	adds	r2, #16
 8015472:	621a      	str	r2, [r3, #32]
            break;
 8015474:	e01f      	b.n	80154b6 <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015476:	4b12      	ldr	r3, [pc, #72]	; (80154c0 <GetLastFcntDown+0x94>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	695a      	ldr	r2, [r3, #20]
 801547c:	683b      	ldr	r3, [r7, #0]
 801547e:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015480:	4b0f      	ldr	r3, [pc, #60]	; (80154c0 <GetLastFcntDown+0x94>)
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	4b0e      	ldr	r3, [pc, #56]	; (80154c0 <GetLastFcntDown+0x94>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	3214      	adds	r2, #20
 801548a:	621a      	str	r2, [r3, #32]
            break;
 801548c:	e013      	b.n	80154b6 <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 801548e:	4b0c      	ldr	r3, [pc, #48]	; (80154c0 <GetLastFcntDown+0x94>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	699a      	ldr	r2, [r3, #24]
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015498:	4b09      	ldr	r3, [pc, #36]	; (80154c0 <GetLastFcntDown+0x94>)
 801549a:	681a      	ldr	r2, [r3, #0]
 801549c:	4b08      	ldr	r3, [pc, #32]	; (80154c0 <GetLastFcntDown+0x94>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	3218      	adds	r2, #24
 80154a2:	621a      	str	r2, [r3, #32]
            break;
 80154a4:	e007      	b.n	80154b6 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 80154a6:	4b06      	ldr	r3, [pc, #24]	; (80154c0 <GetLastFcntDown+0x94>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	69da      	ldr	r2, [r3, #28]
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	601a      	str	r2, [r3, #0]
            break;
 80154b0:	e001      	b.n	80154b6 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80154b2:	2305      	movs	r3, #5
 80154b4:	e000      	b.n	80154b8 <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80154b6:	2300      	movs	r3, #0
}
 80154b8:	0018      	movs	r0, r3
 80154ba:	46bd      	mov	sp, r7
 80154bc:	b002      	add	sp, #8
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	20000d14 	.word	0x20000d14

080154c4 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b084      	sub	sp, #16
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	0002      	movs	r2, r0
 80154cc:	6039      	str	r1, [r7, #0]
 80154ce:	1dfb      	adds	r3, r7, #7
 80154d0:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 80154d2:	2300      	movs	r3, #0
 80154d4:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80154d6:	230c      	movs	r3, #12
 80154d8:	18fa      	adds	r2, r7, r3
 80154da:	1dfb      	adds	r3, r7, #7
 80154dc:	781b      	ldrb	r3, [r3, #0]
 80154de:	0011      	movs	r1, r2
 80154e0:	0018      	movs	r0, r3
 80154e2:	f7ff ffa3 	bl	801542c <GetLastFcntDown>
 80154e6:	1e03      	subs	r3, r0, #0
 80154e8:	d001      	beq.n	80154ee <CheckFCntDown+0x2a>
    {
        return false;
 80154ea:	2300      	movs	r3, #0
 80154ec:	e009      	b.n	8015502 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	683a      	ldr	r2, [r7, #0]
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d802      	bhi.n	80154fc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80154f6:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80154f8:	3301      	adds	r3, #1
 80154fa:	d101      	bne.n	8015500 <CheckFCntDown+0x3c>
    {
        return true;
 80154fc:	2301      	movs	r3, #1
 80154fe:	e000      	b.n	8015502 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015500:	2300      	movs	r3, #0
    }
}
 8015502:	0018      	movs	r0, r3
 8015504:	46bd      	mov	sp, r7
 8015506:	b004      	add	sp, #16
 8015508:	bd80      	pop	{r7, pc}
	...

0801550c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	0002      	movs	r2, r0
 8015514:	6039      	str	r1, [r7, #0]
 8015516:	1dfb      	adds	r3, r7, #7
 8015518:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 801551a:	1dfb      	adds	r3, r7, #7
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	2b04      	cmp	r3, #4
 8015520:	d017      	beq.n	8015552 <UpdateFCntDown+0x46>
 8015522:	dc1b      	bgt.n	801555c <UpdateFCntDown+0x50>
 8015524:	2b03      	cmp	r3, #3
 8015526:	d00f      	beq.n	8015548 <UpdateFCntDown+0x3c>
 8015528:	dc18      	bgt.n	801555c <UpdateFCntDown+0x50>
 801552a:	2b01      	cmp	r3, #1
 801552c:	d002      	beq.n	8015534 <UpdateFCntDown+0x28>
 801552e:	2b02      	cmp	r3, #2
 8015530:	d005      	beq.n	801553e <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 8015532:	e013      	b.n	801555c <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8015534:	4b0d      	ldr	r3, [pc, #52]	; (801556c <UpdateFCntDown+0x60>)
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	683a      	ldr	r2, [r7, #0]
 801553a:	611a      	str	r2, [r3, #16]
            break;
 801553c:	e00f      	b.n	801555e <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 801553e:	4b0b      	ldr	r3, [pc, #44]	; (801556c <UpdateFCntDown+0x60>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	683a      	ldr	r2, [r7, #0]
 8015544:	615a      	str	r2, [r3, #20]
            break;
 8015546:	e00a      	b.n	801555e <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8015548:	4b08      	ldr	r3, [pc, #32]	; (801556c <UpdateFCntDown+0x60>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	683a      	ldr	r2, [r7, #0]
 801554e:	619a      	str	r2, [r3, #24]
            break;
 8015550:	e005      	b.n	801555e <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8015552:	4b06      	ldr	r3, [pc, #24]	; (801556c <UpdateFCntDown+0x60>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	683a      	ldr	r2, [r7, #0]
 8015558:	61da      	str	r2, [r3, #28]
            break;
 801555a:	e000      	b.n	801555e <UpdateFCntDown+0x52>
            break;
 801555c:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801555e:	4b03      	ldr	r3, [pc, #12]	; (801556c <UpdateFCntDown+0x60>)
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	4798      	blx	r3
}
 8015564:	46c0      	nop			; (mov r8, r8)
 8015566:	46bd      	mov	sp, r7
 8015568:	b002      	add	sp, #8
 801556a:	bd80      	pop	{r7, pc}
 801556c:	20000d14 	.word	0x20000d14

08015570 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015570:	b580      	push	{r7, lr}
 8015572:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015574:	4b11      	ldr	r3, [pc, #68]	; (80155bc <ResetFCnts+0x4c>)
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	2200      	movs	r2, #0
 801557a:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801557c:	4b0f      	ldr	r3, [pc, #60]	; (80155bc <ResetFCnts+0x4c>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	2201      	movs	r2, #1
 8015582:	4252      	negs	r2, r2
 8015584:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015586:	4b0d      	ldr	r3, [pc, #52]	; (80155bc <ResetFCnts+0x4c>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	2201      	movs	r2, #1
 801558c:	4252      	negs	r2, r2
 801558e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015590:	4b0a      	ldr	r3, [pc, #40]	; (80155bc <ResetFCnts+0x4c>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	2201      	movs	r2, #1
 8015596:	4252      	negs	r2, r2
 8015598:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 801559a:	4b08      	ldr	r3, [pc, #32]	; (80155bc <ResetFCnts+0x4c>)
 801559c:	681a      	ldr	r2, [r3, #0]
 801559e:	4b07      	ldr	r3, [pc, #28]	; (80155bc <ResetFCnts+0x4c>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	3218      	adds	r2, #24
 80155a4:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 80155a6:	4b05      	ldr	r3, [pc, #20]	; (80155bc <ResetFCnts+0x4c>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2201      	movs	r2, #1
 80155ac:	4252      	negs	r2, r2
 80155ae:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80155b0:	4b02      	ldr	r3, [pc, #8]	; (80155bc <ResetFCnts+0x4c>)
 80155b2:	685b      	ldr	r3, [r3, #4]
 80155b4:	4798      	blx	r3
}
 80155b6:	46c0      	nop			; (mov r8, r8)
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}
 80155bc:	20000d14 	.word	0x20000d14

080155c0 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	af00      	add	r7, sp, #0
    return;
 80155c4:	46c0      	nop			; (mov r8, r8)
}
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
	...

080155cc <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b082      	sub	sp, #8
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 80155d4:	4b15      	ldr	r3, [pc, #84]	; (801562c <LoRaMacCryptoInit+0x60>)
 80155d6:	4a16      	ldr	r2, [pc, #88]	; (8015630 <LoRaMacCryptoInit+0x64>)
 80155d8:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d003      	beq.n	80155e8 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 80155e0:	4b12      	ldr	r3, [pc, #72]	; (801562c <LoRaMacCryptoInit+0x60>)
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	605a      	str	r2, [r3, #4]
 80155e6:	e002      	b.n	80155ee <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 80155e8:	4b10      	ldr	r3, [pc, #64]	; (801562c <LoRaMacCryptoInit+0x60>)
 80155ea:	4a12      	ldr	r2, [pc, #72]	; (8015634 <LoRaMacCryptoInit+0x68>)
 80155ec:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 80155ee:	4b0f      	ldr	r3, [pc, #60]	; (801562c <LoRaMacCryptoInit+0x60>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	2224      	movs	r2, #36	; 0x24
 80155f4:	2100      	movs	r1, #0
 80155f6:	0018      	movs	r0, r3
 80155f8:	f003 fcaa 	bl	8018f50 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 80155fc:	4b0b      	ldr	r3, [pc, #44]	; (801562c <LoRaMacCryptoInit+0x60>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	2201      	movs	r2, #1
 8015602:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8015604:	4b09      	ldr	r3, [pc, #36]	; (801562c <LoRaMacCryptoInit+0x60>)
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	2201      	movs	r2, #1
 801560a:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 801560c:	4b07      	ldr	r3, [pc, #28]	; (801562c <LoRaMacCryptoInit+0x60>)
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	2201      	movs	r2, #1
 8015612:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8015614:	4b05      	ldr	r3, [pc, #20]	; (801562c <LoRaMacCryptoInit+0x60>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2200      	movs	r2, #0
 801561a:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801561c:	f7ff ffa8 	bl	8015570 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015620:	2300      	movs	r3, #0
}
 8015622:	0018      	movs	r0, r3
 8015624:	46bd      	mov	sp, r7
 8015626:	b002      	add	sp, #8
 8015628:	bd80      	pop	{r7, pc}
 801562a:	46c0      	nop			; (mov r8, r8)
 801562c:	20000d14 	.word	0x20000d14
 8015630:	20000d1c 	.word	0x20000d1c
 8015634:	080155c1 	.word	0x080155c1

08015638 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8015640:	4b04      	ldr	r3, [pc, #16]	; (8015654 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015648:	2300      	movs	r3, #0
}
 801564a:	0018      	movs	r0, r3
 801564c:	46bd      	mov	sp, r7
 801564e:	b002      	add	sp, #8
 8015650:	bd80      	pop	{r7, pc}
 8015652:	46c0      	nop			; (mov r8, r8)
 8015654:	20000d14 	.word	0x20000d14

08015658 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b082      	sub	sp, #8
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d007      	beq.n	8015676 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8015666:	6879      	ldr	r1, [r7, #4]
 8015668:	4b05      	ldr	r3, [pc, #20]	; (8015680 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 801566a:	2224      	movs	r2, #36	; 0x24
 801566c:	0018      	movs	r0, r3
 801566e:	f003 fc31 	bl	8018ed4 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8015672:	2300      	movs	r3, #0
 8015674:	e000      	b.n	8015678 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015676:	230a      	movs	r3, #10
    }
}
 8015678:	0018      	movs	r0, r3
 801567a:	46bd      	mov	sp, r7
 801567c:	b002      	add	sp, #8
 801567e:	bd80      	pop	{r7, pc}
 8015680:	20000d1c 	.word	0x20000d1c

08015684 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2224      	movs	r2, #36	; 0x24
 8015690:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015692:	4b02      	ldr	r3, [pc, #8]	; (801569c <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015694:	0018      	movs	r0, r3
 8015696:	46bd      	mov	sp, r7
 8015698:	b002      	add	sp, #8
 801569a:	bd80      	pop	{r7, pc}
 801569c:	20000d1c 	.word	0x20000d1c

080156a0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d101      	bne.n	80156b2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80156ae:	230a      	movs	r3, #10
 80156b0:	e006      	b.n	80156c0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 80156b2:	4b05      	ldr	r3, [pc, #20]	; (80156c8 <LoRaMacCryptoGetFCntUp+0x28>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	1c5a      	adds	r2, r3, #1
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80156be:	2300      	movs	r3, #0
}
 80156c0:	0018      	movs	r0, r3
 80156c2:	46bd      	mov	sp, r7
 80156c4:	b002      	add	sp, #8
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	20000d14 	.word	0x20000d14

080156cc <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80156cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156ce:	b08d      	sub	sp, #52	; 0x34
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	61ba      	str	r2, [r7, #24]
 80156d4:	617b      	str	r3, [r7, #20]
 80156d6:	230f      	movs	r3, #15
 80156d8:	2210      	movs	r2, #16
 80156da:	4694      	mov	ip, r2
 80156dc:	44bc      	add	ip, r7
 80156de:	4463      	add	r3, ip
 80156e0:	1c02      	adds	r2, r0, #0
 80156e2:	701a      	strb	r2, [r3, #0]
 80156e4:	230c      	movs	r3, #12
 80156e6:	2210      	movs	r2, #16
 80156e8:	4694      	mov	ip, r2
 80156ea:	44bc      	add	ip, r7
 80156ec:	4463      	add	r3, ip
 80156ee:	1c0a      	adds	r2, r1, #0
 80156f0:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 80156f2:	2300      	movs	r3, #0
 80156f4:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 80156f6:	2300      	movs	r3, #0
 80156f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80156fa:	231b      	movs	r3, #27
 80156fc:	2210      	movs	r2, #16
 80156fe:	4694      	mov	ip, r2
 8015700:	44bc      	add	ip, r7
 8015702:	4463      	add	r3, ip
 8015704:	2213      	movs	r2, #19
 8015706:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d101      	bne.n	8015712 <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801570e:	230a      	movs	r3, #10
 8015710:	e06b      	b.n	80157ea <LoRaMacCryptoGetFCntDown+0x11e>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015712:	221b      	movs	r2, #27
 8015714:	2110      	movs	r1, #16
 8015716:	187b      	adds	r3, r7, r1
 8015718:	189e      	adds	r6, r3, r2
 801571a:	2314      	movs	r3, #20
 801571c:	187a      	adds	r2, r7, r1
 801571e:	18d2      	adds	r2, r2, r3
 8015720:	230f      	movs	r3, #15
 8015722:	2010      	movs	r0, #16
 8015724:	4684      	mov	ip, r0
 8015726:	44bc      	add	ip, r7
 8015728:	4463      	add	r3, ip
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	0011      	movs	r1, r2
 801572e:	0018      	movs	r0, r3
 8015730:	f7ff fe7c 	bl	801542c <GetLastFcntDown>
 8015734:	0003      	movs	r3, r0
 8015736:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015738:	221b      	movs	r2, #27
 801573a:	2110      	movs	r1, #16
 801573c:	187b      	adds	r3, r7, r1
 801573e:	189b      	adds	r3, r3, r2
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d003      	beq.n	801574e <LoRaMacCryptoGetFCntDown+0x82>
    {
        return cryptoStatus;
 8015746:	187b      	adds	r3, r7, r1
 8015748:	189b      	adds	r3, r3, r2
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	e04d      	b.n	80157ea <LoRaMacCryptoGetFCntDown+0x11e>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015750:	3301      	adds	r3, #1
 8015752:	d103      	bne.n	801575c <LoRaMacCryptoGetFCntDown+0x90>
    {
        *currentDown = frameFcnt;
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	69ba      	ldr	r2, [r7, #24]
 8015758:	601a      	str	r2, [r3, #0]
 801575a:	e020      	b.n	801579e <LoRaMacCryptoGetFCntDown+0xd2>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801575e:	041b      	lsls	r3, r3, #16
 8015760:	0c1b      	lsrs	r3, r3, #16
 8015762:	69ba      	ldr	r2, [r7, #24]
 8015764:	1ad3      	subs	r3, r2, r3
 8015766:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8015768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576a:	2b00      	cmp	r3, #0
 801576c:	dd05      	ble.n	801577a <LoRaMacCryptoGetFCntDown+0xae>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801576e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015772:	18d2      	adds	r2, r2, r3
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	601a      	str	r2, [r3, #0]
 8015778:	e011      	b.n	801579e <LoRaMacCryptoGetFCntDown+0xd2>
        }
        else if( fCntDiff == 0 )
 801577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801577c:	2b00      	cmp	r3, #0
 801577e:	d104      	bne.n	801578a <LoRaMacCryptoGetFCntDown+0xbe>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015786:	2307      	movs	r3, #7
 8015788:	e02f      	b.n	80157ea <LoRaMacCryptoGetFCntDown+0x11e>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578c:	0c1b      	lsrs	r3, r3, #16
 801578e:	041a      	lsls	r2, r3, #16
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	18d3      	adds	r3, r2, r3
 8015794:	2280      	movs	r2, #128	; 0x80
 8015796:	0252      	lsls	r2, r2, #9
 8015798:	189a      	adds	r2, r3, r2
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 801579e:	4b15      	ldr	r3, [pc, #84]	; (80157f4 <LoRaMacCryptoGetFCntDown+0x128>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	789b      	ldrb	r3, [r3, #2]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d11f      	bne.n	80157e8 <LoRaMacCryptoGetFCntDown+0x11c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	60bb      	str	r3, [r7, #8]
 80157ae:	2300      	movs	r3, #0
 80157b0:	60fb      	str	r3, [r7, #12]
 80157b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b4:	603b      	str	r3, [r7, #0]
 80157b6:	2300      	movs	r3, #0
 80157b8:	607b      	str	r3, [r7, #4]
 80157ba:	68ba      	ldr	r2, [r7, #8]
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	6838      	ldr	r0, [r7, #0]
 80157c0:	6879      	ldr	r1, [r7, #4]
 80157c2:	1a12      	subs	r2, r2, r0
 80157c4:	418b      	sbcs	r3, r1
 80157c6:	210c      	movs	r1, #12
 80157c8:	2010      	movs	r0, #16
 80157ca:	4684      	mov	ip, r0
 80157cc:	44bc      	add	ip, r7
 80157ce:	4461      	add	r1, ip
 80157d0:	8809      	ldrh	r1, [r1, #0]
 80157d2:	b289      	uxth	r1, r1
 80157d4:	000c      	movs	r4, r1
 80157d6:	2100      	movs	r1, #0
 80157d8:	000d      	movs	r5, r1
 80157da:	429d      	cmp	r5, r3
 80157dc:	dc04      	bgt.n	80157e8 <LoRaMacCryptoGetFCntDown+0x11c>
 80157de:	d101      	bne.n	80157e4 <LoRaMacCryptoGetFCntDown+0x118>
 80157e0:	4294      	cmp	r4, r2
 80157e2:	d801      	bhi.n	80157e8 <LoRaMacCryptoGetFCntDown+0x11c>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80157e4:	2308      	movs	r3, #8
 80157e6:	e000      	b.n	80157ea <LoRaMacCryptoGetFCntDown+0x11e>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80157e8:	2300      	movs	r3, #0
}
 80157ea:	0018      	movs	r0, r3
 80157ec:	46bd      	mov	sp, r7
 80157ee:	b00d      	add	sp, #52	; 0x34
 80157f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157f2:	46c0      	nop			; (mov r8, r8)
 80157f4:	20000d14 	.word	0x20000d14

080157f8 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d101      	bne.n	801580a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015806:	230a      	movs	r3, #10
 8015808:	e006      	b.n	8015818 <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 801580a:	4b05      	ldr	r3, [pc, #20]	; (8015820 <LoRaMacCryptoSetMulticastReference+0x28>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	331c      	adds	r3, #28
 8015810:	001a      	movs	r2, r3
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 8015816:	2300      	movs	r3, #0
}
 8015818:	0018      	movs	r0, r3
 801581a:	46bd      	mov	sp, r7
 801581c:	b002      	add	sp, #8
 801581e:	bd80      	pop	{r7, pc}
 8015820:	20000d14 	.word	0x20000d14

08015824 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	0002      	movs	r2, r0
 801582c:	6039      	str	r1, [r7, #0]
 801582e:	1dfb      	adds	r3, r7, #7
 8015830:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015832:	683a      	ldr	r2, [r7, #0]
 8015834:	1dfb      	adds	r3, r7, #7
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	0011      	movs	r1, r2
 801583a:	0018      	movs	r0, r3
 801583c:	f7f7 fcc8 	bl	800d1d0 <SecureElementSetKey>
 8015840:	1e03      	subs	r3, r0, #0
 8015842:	d001      	beq.n	8015848 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015844:	230f      	movs	r3, #15
 8015846:	e014      	b.n	8015872 <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8015848:	1dfb      	adds	r3, r7, #7
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d10f      	bne.n	8015870 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015850:	1dfb      	adds	r3, r7, #7
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	0018      	movs	r0, r3
 8015856:	f000 fa79 	bl	8015d4c <LoRaMacCryptoDeriveMcRootKey>
 801585a:	1e03      	subs	r3, r0, #0
 801585c:	d001      	beq.n	8015862 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801585e:	230f      	movs	r3, #15
 8015860:	e007      	b.n	8015872 <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015862:	2004      	movs	r0, #4
 8015864:	f000 faa6 	bl	8015db4 <LoRaMacCryptoDeriveMcKEKey>
 8015868:	1e03      	subs	r3, r0, #0
 801586a:	d001      	beq.n	8015870 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801586c:	230f      	movs	r3, #15
 801586e:	e000      	b.n	8015872 <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015870:	2300      	movs	r3, #0
}
 8015872:	0018      	movs	r0, r3
 8015874:	46bd      	mov	sp, r7
 8015876:	b002      	add	sp, #8
 8015878:	bd80      	pop	{r7, pc}
	...

0801587c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b086      	sub	sp, #24
 8015880:	af02      	add	r7, sp, #8
 8015882:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d101      	bne.n	801588e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801588a:	230a      	movs	r3, #10
 801588c:	e039      	b.n	8015902 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801588e:	230f      	movs	r3, #15
 8015890:	18fb      	adds	r3, r7, r3
 8015892:	2201      	movs	r2, #1
 8015894:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015896:	2300      	movs	r3, #0
 8015898:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801589a:	2308      	movs	r3, #8
 801589c:	18fb      	adds	r3, r7, r3
 801589e:	0018      	movs	r0, r3
 80158a0:	f7f7 fec0 	bl	800d624 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 80158a4:	68ba      	ldr	r2, [r7, #8]
 80158a6:	4b19      	ldr	r3, [pc, #100]	; (801590c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	b292      	uxth	r2, r2
 80158ac:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80158ae:	4b17      	ldr	r3, [pc, #92]	; (801590c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80158b4:	4b15      	ldr	r3, [pc, #84]	; (801590c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	889a      	ldrh	r2, [r3, #4]
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	0018      	movs	r0, r3
 80158c2:	f000 fca1 	bl	8016208 <LoRaMacSerializerJoinRequest>
 80158c6:	1e03      	subs	r3, r0, #0
 80158c8:	d001      	beq.n	80158ce <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80158ca:	2311      	movs	r3, #17
 80158cc:	e019      	b.n	8015902 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	6819      	ldr	r1, [r3, #0]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	3318      	adds	r3, #24
 80158d6:	220f      	movs	r2, #15
 80158d8:	18ba      	adds	r2, r7, r2
 80158da:	7812      	ldrb	r2, [r2, #0]
 80158dc:	9300      	str	r3, [sp, #0]
 80158de:	0013      	movs	r3, r2
 80158e0:	2213      	movs	r2, #19
 80158e2:	2000      	movs	r0, #0
 80158e4:	f7f7 fcee 	bl	800d2c4 <SecureElementComputeAesCmac>
 80158e8:	1e03      	subs	r3, r0, #0
 80158ea:	d001      	beq.n	80158f0 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80158ec:	230f      	movs	r3, #15
 80158ee:	e008      	b.n	8015902 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	0018      	movs	r0, r3
 80158f4:	f000 fc88 	bl	8016208 <LoRaMacSerializerJoinRequest>
 80158f8:	1e03      	subs	r3, r0, #0
 80158fa:	d001      	beq.n	8015900 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80158fc:	2311      	movs	r3, #17
 80158fe:	e000      	b.n	8015902 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015900:	2300      	movs	r3, #0
}
 8015902:	0018      	movs	r0, r3
 8015904:	46bd      	mov	sp, r7
 8015906:	b004      	add	sp, #16
 8015908:	bd80      	pop	{r7, pc}
 801590a:	46c0      	nop			; (mov r8, r8)
 801590c:	20000d14 	.word	0x20000d14

08015910 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015912:	b095      	sub	sp, #84	; 0x54
 8015914:	af04      	add	r7, sp, #16
 8015916:	60b9      	str	r1, [r7, #8]
 8015918:	607a      	str	r2, [r7, #4]
 801591a:	230f      	movs	r3, #15
 801591c:	18fb      	adds	r3, r7, r3
 801591e:	1c02      	adds	r2, r0, #0
 8015920:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d002      	beq.n	801592e <LoRaMacCryptoHandleJoinAccept+0x1e>
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d101      	bne.n	8015932 <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801592e:	230a      	movs	r3, #10
 8015930:	e0a7      	b.n	8015a82 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015932:	233f      	movs	r3, #63	; 0x3f
 8015934:	18fb      	adds	r3, r7, r3
 8015936:	2213      	movs	r2, #19
 8015938:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801593a:	2614      	movs	r6, #20
 801593c:	19bb      	adds	r3, r7, r6
 801593e:	2200      	movs	r2, #0
 8015940:	601a      	str	r2, [r3, #0]
 8015942:	3304      	adds	r3, #4
 8015944:	221d      	movs	r2, #29
 8015946:	2100      	movs	r1, #0
 8015948:	0018      	movs	r0, r3
 801594a:	f008 f81e 	bl	801d98a <memset>
    uint8_t versionMinor         = 0;
 801594e:	2313      	movs	r3, #19
 8015950:	18fb      	adds	r3, r7, r3
 8015952:	2200      	movs	r2, #0
 8015954:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8015956:	4b4d      	ldr	r3, [pc, #308]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	3304      	adds	r3, #4
 801595c:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 801595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	b29c      	uxth	r4, r3
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681d      	ldr	r5, [r3, #0]
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	791b      	ldrb	r3, [r3, #4]
 801596c:	68b9      	ldr	r1, [r7, #8]
 801596e:	200f      	movs	r0, #15
 8015970:	183a      	adds	r2, r7, r0
 8015972:	7810      	ldrb	r0, [r2, #0]
 8015974:	2213      	movs	r2, #19
 8015976:	18ba      	adds	r2, r7, r2
 8015978:	9202      	str	r2, [sp, #8]
 801597a:	19ba      	adds	r2, r7, r6
 801597c:	9201      	str	r2, [sp, #4]
 801597e:	9300      	str	r3, [sp, #0]
 8015980:	002b      	movs	r3, r5
 8015982:	0022      	movs	r2, r4
 8015984:	f7f7 fdc7 	bl	800d516 <SecureElementProcessJoinAccept>
 8015988:	1e03      	subs	r3, r0, #0
 801598a:	d001      	beq.n	8015990 <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801598c:	230f      	movs	r3, #15
 801598e:	e078      	b.n	8015a82 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	6818      	ldr	r0, [r3, #0]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	791b      	ldrb	r3, [r3, #4]
 8015998:	b29a      	uxth	r2, r3
 801599a:	2314      	movs	r3, #20
 801599c:	18fb      	adds	r3, r7, r3
 801599e:	0019      	movs	r1, r3
 80159a0:	f003 fa98 	bl	8018ed4 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	0018      	movs	r0, r3
 80159a8:	f000 fa2e 	bl	8015e08 <LoRaMacParserJoinAccept>
 80159ac:	1e03      	subs	r3, r0, #0
 80159ae:	d001      	beq.n	80159b4 <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80159b0:	2310      	movs	r3, #16
 80159b2:	e066      	b.n	8015a82 <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 80159b4:	253f      	movs	r5, #63	; 0x3f
 80159b6:	197c      	adds	r4, r7, r5
 80159b8:	2000      	movs	r0, #0
 80159ba:	f000 f9c7 	bl	8015d4c <LoRaMacCryptoDeriveMcRootKey>
 80159be:	0003      	movs	r3, r0
 80159c0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80159c2:	002a      	movs	r2, r5
 80159c4:	18bb      	adds	r3, r7, r2
 80159c6:	781b      	ldrb	r3, [r3, #0]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d002      	beq.n	80159d2 <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 80159cc:	18bb      	adds	r3, r7, r2
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	e057      	b.n	8015a82 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80159d2:	253f      	movs	r5, #63	; 0x3f
 80159d4:	197c      	adds	r4, r7, r5
 80159d6:	2004      	movs	r0, #4
 80159d8:	f000 f9ec 	bl	8015db4 <LoRaMacCryptoDeriveMcKEKey>
 80159dc:	0003      	movs	r3, r0
 80159de:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80159e0:	002a      	movs	r2, r5
 80159e2:	18bb      	adds	r3, r7, r2
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d002      	beq.n	80159f0 <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 80159ea:	18bb      	adds	r3, r7, r2
 80159ec:	781b      	ldrb	r3, [r3, #0]
 80159ee:	e048      	b.n	8015a82 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	1d99      	adds	r1, r3, #6
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	3309      	adds	r3, #9
 80159f8:	001a      	movs	r2, r3
 80159fa:	4b24      	ldr	r3, [pc, #144]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	3304      	adds	r3, #4
 8015a00:	253f      	movs	r5, #63	; 0x3f
 8015a02:	197c      	adds	r4, r7, r5
 8015a04:	2003      	movs	r0, #3
 8015a06:	f7ff fcb1 	bl	801536c <DeriveSessionKey10x>
 8015a0a:	0003      	movs	r3, r0
 8015a0c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a0e:	197b      	adds	r3, r7, r5
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d002      	beq.n	8015a1c <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 8015a16:	197b      	adds	r3, r7, r5
 8015a18:	781b      	ldrb	r3, [r3, #0]
 8015a1a:	e032      	b.n	8015a82 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	1d99      	adds	r1, r3, #6
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	3309      	adds	r3, #9
 8015a24:	001a      	movs	r2, r3
 8015a26:	4b19      	ldr	r3, [pc, #100]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	3304      	adds	r3, #4
 8015a2c:	253f      	movs	r5, #63	; 0x3f
 8015a2e:	197c      	adds	r4, r7, r5
 8015a30:	2002      	movs	r0, #2
 8015a32:	f7ff fc9b 	bl	801536c <DeriveSessionKey10x>
 8015a36:	0003      	movs	r3, r0
 8015a38:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a3a:	197b      	adds	r3, r7, r5
 8015a3c:	781b      	ldrb	r3, [r3, #0]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d002      	beq.n	8015a48 <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 8015a42:	197b      	adds	r3, r7, r5
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	e01c      	b.n	8015a82 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 8015a48:	4b10      	ldr	r3, [pc, #64]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	2213      	movs	r2, #19
 8015a4e:	18ba      	adds	r2, r7, r2
 8015a50:	7812      	ldrb	r2, [r2, #0]
 8015a52:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015a54:	4b0d      	ldr	r3, [pc, #52]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015a5c:	4b0b      	ldr	r3, [pc, #44]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	2201      	movs	r2, #1
 8015a62:	4252      	negs	r2, r2
 8015a64:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015a66:	4b09      	ldr	r3, [pc, #36]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	2201      	movs	r2, #1
 8015a6c:	4252      	negs	r2, r2
 8015a6e:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015a70:	4b06      	ldr	r3, [pc, #24]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2201      	movs	r2, #1
 8015a76:	4252      	negs	r2, r2
 8015a78:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015a7a:	4b04      	ldr	r3, [pc, #16]	; (8015a8c <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015a7c:	685b      	ldr	r3, [r3, #4]
 8015a7e:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015a80:	2300      	movs	r3, #0
}
 8015a82:	0018      	movs	r0, r3
 8015a84:	46bd      	mov	sp, r7
 8015a86:	b011      	add	sp, #68	; 0x44
 8015a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a8a:	46c0      	nop			; (mov r8, r8)
 8015a8c:	20000d14 	.word	0x20000d14

08015a90 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a92:	b08b      	sub	sp, #44	; 0x2c
 8015a94:	af04      	add	r7, sp, #16
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	0008      	movs	r0, r1
 8015a9a:	0011      	movs	r1, r2
 8015a9c:	607b      	str	r3, [r7, #4]
 8015a9e:	230b      	movs	r3, #11
 8015aa0:	18fb      	adds	r3, r7, r3
 8015aa2:	1c02      	adds	r2, r0, #0
 8015aa4:	701a      	strb	r2, [r3, #0]
 8015aa6:	230a      	movs	r3, #10
 8015aa8:	18fb      	adds	r3, r7, r3
 8015aaa:	1c0a      	adds	r2, r1, #0
 8015aac:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015aae:	2316      	movs	r3, #22
 8015ab0:	18fb      	adds	r3, r7, r3
 8015ab2:	2213      	movs	r2, #19
 8015ab4:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015ab6:	2317      	movs	r3, #23
 8015ab8:	18fb      	adds	r3, r7, r3
 8015aba:	2203      	movs	r2, #3
 8015abc:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d101      	bne.n	8015ac8 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ac4:	230a      	movs	r3, #10
 8015ac6:	e072      	b.n	8015bae <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8015ac8:	4b3b      	ldr	r3, [pc, #236]	; (8015bb8 <LoRaMacCryptoSecureMessage+0x128>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	68db      	ldr	r3, [r3, #12]
 8015ace:	68fa      	ldr	r2, [r7, #12]
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d201      	bcs.n	8015ad8 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015ad4:	2306      	movs	r3, #6
 8015ad6:	e06a      	b.n	8015bae <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2220      	movs	r2, #32
 8015adc:	5c9b      	ldrb	r3, [r3, r2]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d103      	bne.n	8015aea <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015ae2:	2317      	movs	r3, #23
 8015ae4:	18fb      	adds	r3, r7, r3
 8015ae6:	2202      	movs	r2, #2
 8015ae8:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8015aea:	4b33      	ldr	r3, [pc, #204]	; (8015bb8 <LoRaMacCryptoSecureMessage+0x128>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	68db      	ldr	r3, [r3, #12]
 8015af0:	68fa      	ldr	r2, [r7, #12]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d91c      	bls.n	8015b30 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2228      	movs	r2, #40	; 0x28
 8015afe:	5c9b      	ldrb	r3, [r3, r2]
 8015b00:	b219      	sxth	r1, r3
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	689d      	ldr	r5, [r3, #8]
 8015b06:	2616      	movs	r6, #22
 8015b08:	19bc      	adds	r4, r7, r6
 8015b0a:	2317      	movs	r3, #23
 8015b0c:	18fb      	adds	r3, r7, r3
 8015b0e:	781a      	ldrb	r2, [r3, #0]
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	9301      	str	r3, [sp, #4]
 8015b14:	2300      	movs	r3, #0
 8015b16:	9300      	str	r3, [sp, #0]
 8015b18:	002b      	movs	r3, r5
 8015b1a:	f7ff f9c7 	bl	8014eac <PayloadEncrypt>
 8015b1e:	0003      	movs	r3, r0
 8015b20:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b22:	19bb      	adds	r3, r7, r6
 8015b24:	781b      	ldrb	r3, [r3, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d002      	beq.n	8015b30 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 8015b2a:	19bb      	adds	r3, r7, r6
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	e03e      	b.n	8015bae <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	0018      	movs	r0, r3
 8015b34:	f000 fc03 	bl	801633e <LoRaMacSerializerData>
 8015b38:	1e03      	subs	r3, r0, #0
 8015b3a:	d001      	beq.n	8015b40 <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015b3c:	2311      	movs	r3, #17
 8015b3e:	e036      	b.n	8015bae <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015b40:	2117      	movs	r1, #23
 8015b42:	187b      	adds	r3, r7, r1
 8015b44:	2202      	movs	r2, #2
 8015b46:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	6818      	ldr	r0, [r3, #0]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	791b      	ldrb	r3, [r3, #4]
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	3b04      	subs	r3, #4
 8015b54:	b29d      	uxth	r5, r3
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	689b      	ldr	r3, [r3, #8]
 8015b5a:	687a      	ldr	r2, [r7, #4]
 8015b5c:	322c      	adds	r2, #44	; 0x2c
 8015b5e:	2616      	movs	r6, #22
 8015b60:	19bc      	adds	r4, r7, r6
 8015b62:	1879      	adds	r1, r7, r1
 8015b64:	7809      	ldrb	r1, [r1, #0]
 8015b66:	9203      	str	r2, [sp, #12]
 8015b68:	68fa      	ldr	r2, [r7, #12]
 8015b6a:	9202      	str	r2, [sp, #8]
 8015b6c:	9301      	str	r3, [sp, #4]
 8015b6e:	2300      	movs	r3, #0
 8015b70:	9300      	str	r3, [sp, #0]
 8015b72:	2300      	movs	r3, #0
 8015b74:	000a      	movs	r2, r1
 8015b76:	0029      	movs	r1, r5
 8015b78:	f7ff facc 	bl	8015114 <ComputeCmacB0>
 8015b7c:	0003      	movs	r3, r0
 8015b7e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b80:	19bb      	adds	r3, r7, r6
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d002      	beq.n	8015b8e <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 8015b88:	19bb      	adds	r3, r7, r6
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	e00f      	b.n	8015bae <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	0018      	movs	r0, r3
 8015b92:	f000 fbd4 	bl	801633e <LoRaMacSerializerData>
 8015b96:	1e03      	subs	r3, r0, #0
 8015b98:	d001      	beq.n	8015b9e <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015b9a:	2311      	movs	r3, #17
 8015b9c:	e007      	b.n	8015bae <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8015b9e:	4b06      	ldr	r3, [pc, #24]	; (8015bb8 <LoRaMacCryptoSecureMessage+0x128>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	68fa      	ldr	r2, [r7, #12]
 8015ba4:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015ba6:	4b04      	ldr	r3, [pc, #16]	; (8015bb8 <LoRaMacCryptoSecureMessage+0x128>)
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015bac:	2300      	movs	r3, #0
}
 8015bae:	0018      	movs	r0, r3
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	b007      	add	sp, #28
 8015bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bb6:	46c0      	nop			; (mov r8, r8)
 8015bb8:	20000d14 	.word	0x20000d14

08015bbc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bbe:	b08b      	sub	sp, #44	; 0x2c
 8015bc0:	af04      	add	r7, sp, #16
 8015bc2:	60b9      	str	r1, [r7, #8]
 8015bc4:	0011      	movs	r1, r2
 8015bc6:	607b      	str	r3, [r7, #4]
 8015bc8:	230f      	movs	r3, #15
 8015bca:	18fb      	adds	r3, r7, r3
 8015bcc:	1c02      	adds	r2, r0, #0
 8015bce:	701a      	strb	r2, [r3, #0]
 8015bd0:	230e      	movs	r3, #14
 8015bd2:	18fb      	adds	r3, r7, r3
 8015bd4:	1c0a      	adds	r2, r1, #0
 8015bd6:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8015bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d101      	bne.n	8015be2 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015bde:	230a      	movs	r3, #10
 8015be0:	e0ae      	b.n	8015d40 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	230e      	movs	r3, #14
 8015be6:	18fb      	adds	r3, r7, r3
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	0011      	movs	r1, r2
 8015bec:	0018      	movs	r0, r3
 8015bee:	f7ff fc69 	bl	80154c4 <CheckFCntDown>
 8015bf2:	0003      	movs	r3, r0
 8015bf4:	001a      	movs	r2, r3
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	4053      	eors	r3, r2
 8015bfa:	b2db      	uxtb	r3, r3
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d001      	beq.n	8015c04 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015c00:	2306      	movs	r3, #6
 8015c02:	e09d      	b.n	8015d40 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015c04:	2315      	movs	r3, #21
 8015c06:	18fb      	adds	r3, r7, r3
 8015c08:	2213      	movs	r2, #19
 8015c0a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015c0c:	2317      	movs	r3, #23
 8015c0e:	18fb      	adds	r3, r7, r3
 8015c10:	2203      	movs	r2, #3
 8015c12:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015c14:	2314      	movs	r3, #20
 8015c16:	18fb      	adds	r3, r7, r3
 8015c18:	2202      	movs	r2, #2
 8015c1a:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1e:	0018      	movs	r0, r3
 8015c20:	f000 f9e2 	bl	8015fe8 <LoRaMacParserData>
 8015c24:	1e03      	subs	r3, r0, #0
 8015c26:	d001      	beq.n	8015c2c <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015c28:	2310      	movs	r3, #16
 8015c2a:	e089      	b.n	8015d40 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015c2c:	2515      	movs	r5, #21
 8015c2e:	197c      	adds	r4, r7, r5
 8015c30:	2310      	movs	r3, #16
 8015c32:	18fa      	adds	r2, r7, r3
 8015c34:	230f      	movs	r3, #15
 8015c36:	18fb      	adds	r3, r7, r3
 8015c38:	781b      	ldrb	r3, [r3, #0]
 8015c3a:	0011      	movs	r1, r2
 8015c3c:	0018      	movs	r0, r3
 8015c3e:	f7ff fb63 	bl	8015308 <GetKeyAddrItem>
 8015c42:	0003      	movs	r3, r0
 8015c44:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015c46:	197b      	adds	r3, r7, r5
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d002      	beq.n	8015c54 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 8015c4e:	197b      	adds	r3, r7, r5
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	e075      	b.n	8015d40 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015c54:	693a      	ldr	r2, [r7, #16]
 8015c56:	2317      	movs	r3, #23
 8015c58:	18fb      	adds	r3, r7, r3
 8015c5a:	7852      	ldrb	r2, [r2, #1]
 8015c5c:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8015c5e:	693a      	ldr	r2, [r7, #16]
 8015c60:	2314      	movs	r3, #20
 8015c62:	18fb      	adds	r3, r7, r3
 8015c64:	7892      	ldrb	r2, [r2, #2]
 8015c66:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c6a:	689b      	ldr	r3, [r3, #8]
 8015c6c:	68ba      	ldr	r2, [r7, #8]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d001      	beq.n	8015c76 <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015c72:	2302      	movs	r3, #2
 8015c74:	e064      	b.n	8015d40 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c78:	7b1b      	ldrb	r3, [r3, #12]
 8015c7a:	069b      	lsls	r3, r3, #26
 8015c7c:	0fdb      	lsrs	r3, r3, #31
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	001a      	movs	r2, r3
 8015c82:	2016      	movs	r0, #22
 8015c84:	183b      	adds	r3, r7, r0
 8015c86:	1e51      	subs	r1, r2, #1
 8015c88:	418a      	sbcs	r2, r1
 8015c8a:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015c8c:	4b2e      	ldr	r3, [pc, #184]	; (8015d48 <LoRaMacCryptoUnsecureMessage+0x18c>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	789b      	ldrb	r3, [r3, #2]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d102      	bne.n	8015c9c <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015c96:	183b      	adds	r3, r7, r0
 8015c98:	2200      	movs	r2, #0
 8015c9a:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c9e:	6818      	ldr	r0, [r3, #0]
 8015ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca2:	791b      	ldrb	r3, [r3, #4]
 8015ca4:	b29b      	uxth	r3, r3
 8015ca6:	3b04      	subs	r3, #4
 8015ca8:	b299      	uxth	r1, r3
 8015caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cae:	2615      	movs	r6, #21
 8015cb0:	19bc      	adds	r4, r7, r6
 8015cb2:	2216      	movs	r2, #22
 8015cb4:	18ba      	adds	r2, r7, r2
 8015cb6:	7815      	ldrb	r5, [r2, #0]
 8015cb8:	2214      	movs	r2, #20
 8015cba:	18ba      	adds	r2, r7, r2
 8015cbc:	7812      	ldrb	r2, [r2, #0]
 8015cbe:	9303      	str	r3, [sp, #12]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	9302      	str	r3, [sp, #8]
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	9301      	str	r3, [sp, #4]
 8015cc8:	2301      	movs	r3, #1
 8015cca:	9300      	str	r3, [sp, #0]
 8015ccc:	002b      	movs	r3, r5
 8015cce:	f7ff fa69 	bl	80151a4 <VerifyCmacB0>
 8015cd2:	0003      	movs	r3, r0
 8015cd4:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cd6:	19bb      	adds	r3, r7, r6
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d002      	beq.n	8015ce4 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 8015cde:	19bb      	adds	r3, r7, r6
 8015ce0:	781b      	ldrb	r3, [r3, #0]
 8015ce2:	e02d      	b.n	8015d40 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce6:	2220      	movs	r2, #32
 8015ce8:	5c9b      	ldrb	r3, [r3, r2]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d103      	bne.n	8015cf6 <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015cee:	2317      	movs	r3, #23
 8015cf0:	18fb      	adds	r3, r7, r3
 8015cf2:	2202      	movs	r2, #2
 8015cf4:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	2228      	movs	r2, #40	; 0x28
 8015cfe:	5c9b      	ldrb	r3, [r3, r2]
 8015d00:	b219      	sxth	r1, r3
 8015d02:	2615      	movs	r6, #21
 8015d04:	19bc      	adds	r4, r7, r6
 8015d06:	68bd      	ldr	r5, [r7, #8]
 8015d08:	2317      	movs	r3, #23
 8015d0a:	18fb      	adds	r3, r7, r3
 8015d0c:	781a      	ldrb	r2, [r3, #0]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	9301      	str	r3, [sp, #4]
 8015d12:	2301      	movs	r3, #1
 8015d14:	9300      	str	r3, [sp, #0]
 8015d16:	002b      	movs	r3, r5
 8015d18:	f7ff f8c8 	bl	8014eac <PayloadEncrypt>
 8015d1c:	0003      	movs	r3, r0
 8015d1e:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d20:	19bb      	adds	r3, r7, r6
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d002      	beq.n	8015d2e <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 8015d28:	19bb      	adds	r3, r7, r6
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	e008      	b.n	8015d40 <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	230e      	movs	r3, #14
 8015d32:	18fb      	adds	r3, r7, r3
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	0011      	movs	r1, r2
 8015d38:	0018      	movs	r0, r3
 8015d3a:	f7ff fbe7 	bl	801550c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015d3e:	2300      	movs	r3, #0
}
 8015d40:	0018      	movs	r0, r3
 8015d42:	46bd      	mov	sp, r7
 8015d44:	b007      	add	sp, #28
 8015d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d48:	20000d14 	.word	0x20000d14

08015d4c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8015d4c:	b590      	push	{r4, r7, lr}
 8015d4e:	b087      	sub	sp, #28
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	0002      	movs	r2, r0
 8015d54:	1dfb      	adds	r3, r7, #7
 8015d56:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8015d58:	1dfb      	adds	r3, r7, #7
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d001      	beq.n	8015d64 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015d60:	230b      	movs	r3, #11
 8015d62:	e020      	b.n	8015da6 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 8015d64:	2408      	movs	r4, #8
 8015d66:	193b      	adds	r3, r7, r4
 8015d68:	2200      	movs	r2, #0
 8015d6a:	601a      	str	r2, [r3, #0]
 8015d6c:	3304      	adds	r3, #4
 8015d6e:	220c      	movs	r2, #12
 8015d70:	2100      	movs	r1, #0
 8015d72:	0018      	movs	r0, r3
 8015d74:	f007 fe09 	bl	801d98a <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8015d78:	4b0d      	ldr	r3, [pc, #52]	; (8015db0 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	789b      	ldrb	r3, [r3, #2]
 8015d7e:	2b01      	cmp	r3, #1
 8015d80:	d102      	bne.n	8015d88 <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 8015d82:	193b      	adds	r3, r7, r4
 8015d84:	2220      	movs	r2, #32
 8015d86:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015d88:	4b09      	ldr	r3, [pc, #36]	; (8015db0 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	1dfa      	adds	r2, r7, #7
 8015d8e:	7812      	ldrb	r2, [r2, #0]
 8015d90:	2108      	movs	r1, #8
 8015d92:	1879      	adds	r1, r7, r1
 8015d94:	6818      	ldr	r0, [r3, #0]
 8015d96:	2304      	movs	r3, #4
 8015d98:	f7f7 fb68 	bl	800d46c <SecureElementDeriveAndStoreKey>
 8015d9c:	1e03      	subs	r3, r0, #0
 8015d9e:	d001      	beq.n	8015da4 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015da0:	230f      	movs	r3, #15
 8015da2:	e000      	b.n	8015da6 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015da4:	2300      	movs	r3, #0
}
 8015da6:	0018      	movs	r0, r3
 8015da8:	46bd      	mov	sp, r7
 8015daa:	b007      	add	sp, #28
 8015dac:	bd90      	pop	{r4, r7, pc}
 8015dae:	46c0      	nop			; (mov r8, r8)
 8015db0:	20000d14 	.word	0x20000d14

08015db4 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8015db4:	b590      	push	{r4, r7, lr}
 8015db6:	b087      	sub	sp, #28
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	0002      	movs	r2, r0
 8015dbc:	1dfb      	adds	r3, r7, #7
 8015dbe:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8015dc0:	1dfb      	adds	r3, r7, #7
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	2b04      	cmp	r3, #4
 8015dc6:	d001      	beq.n	8015dcc <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015dc8:	230b      	movs	r3, #11
 8015dca:	e017      	b.n	8015dfc <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8015dcc:	2408      	movs	r4, #8
 8015dce:	193b      	adds	r3, r7, r4
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	601a      	str	r2, [r3, #0]
 8015dd4:	3304      	adds	r3, #4
 8015dd6:	220c      	movs	r2, #12
 8015dd8:	2100      	movs	r1, #0
 8015dda:	0018      	movs	r0, r3
 8015ddc:	f007 fdd5 	bl	801d98a <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015de0:	4b08      	ldr	r3, [pc, #32]	; (8015e04 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	1dfa      	adds	r2, r7, #7
 8015de6:	7812      	ldrb	r2, [r2, #0]
 8015de8:	1939      	adds	r1, r7, r4
 8015dea:	6818      	ldr	r0, [r3, #0]
 8015dec:	237f      	movs	r3, #127	; 0x7f
 8015dee:	f7f7 fb3d 	bl	800d46c <SecureElementDeriveAndStoreKey>
 8015df2:	1e03      	subs	r3, r0, #0
 8015df4:	d001      	beq.n	8015dfa <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015df6:	230f      	movs	r3, #15
 8015df8:	e000      	b.n	8015dfc <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015dfa:	2300      	movs	r3, #0
}
 8015dfc:	0018      	movs	r0, r3
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	b007      	add	sp, #28
 8015e02:	bd90      	pop	{r4, r7, pc}
 8015e04:	20000d14 	.word	0x20000d14

08015e08 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015e08:	b590      	push	{r4, r7, lr}
 8015e0a:	b085      	sub	sp, #20
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d003      	beq.n	8015e1e <LoRaMacParserJoinAccept+0x16>
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d101      	bne.n	8015e22 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015e1e:	2302      	movs	r3, #2
 8015e20:	e0de      	b.n	8015fe0 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8015e22:	240e      	movs	r4, #14
 8015e24:	193b      	adds	r3, r7, r4
 8015e26:	2200      	movs	r2, #0
 8015e28:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681a      	ldr	r2, [r3, #0]
 8015e2e:	193b      	adds	r3, r7, r4
 8015e30:	881b      	ldrh	r3, [r3, #0]
 8015e32:	1939      	adds	r1, r7, r4
 8015e34:	1c58      	adds	r0, r3, #1
 8015e36:	8008      	strh	r0, [r1, #0]
 8015e38:	18d3      	adds	r3, r2, r3
 8015e3a:	781a      	ldrb	r2, [r3, #0]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	1d98      	adds	r0, r3, #6
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	193b      	adds	r3, r7, r4
 8015e4a:	881b      	ldrh	r3, [r3, #0]
 8015e4c:	18d3      	adds	r3, r2, r3
 8015e4e:	2203      	movs	r2, #3
 8015e50:	0019      	movs	r1, r3
 8015e52:	f003 f83f 	bl	8018ed4 <memcpy1>
    bufItr = bufItr + 3;
 8015e56:	193b      	adds	r3, r7, r4
 8015e58:	193a      	adds	r2, r7, r4
 8015e5a:	8812      	ldrh	r2, [r2, #0]
 8015e5c:	3203      	adds	r2, #3
 8015e5e:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	3309      	adds	r3, #9
 8015e64:	0018      	movs	r0, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681a      	ldr	r2, [r3, #0]
 8015e6a:	193b      	adds	r3, r7, r4
 8015e6c:	881b      	ldrh	r3, [r3, #0]
 8015e6e:	18d3      	adds	r3, r2, r3
 8015e70:	2203      	movs	r2, #3
 8015e72:	0019      	movs	r1, r3
 8015e74:	f003 f82e 	bl	8018ed4 <memcpy1>
    bufItr = bufItr + 3;
 8015e78:	193b      	adds	r3, r7, r4
 8015e7a:	193a      	adds	r2, r7, r4
 8015e7c:	8812      	ldrh	r2, [r2, #0]
 8015e7e:	3203      	adds	r2, #3
 8015e80:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681a      	ldr	r2, [r3, #0]
 8015e86:	193b      	adds	r3, r7, r4
 8015e88:	881b      	ldrh	r3, [r3, #0]
 8015e8a:	1939      	adds	r1, r7, r4
 8015e8c:	1c58      	adds	r0, r3, #1
 8015e8e:	8008      	strh	r0, [r1, #0]
 8015e90:	18d3      	adds	r3, r2, r3
 8015e92:	781b      	ldrb	r3, [r3, #0]
 8015e94:	001a      	movs	r2, r3
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681a      	ldr	r2, [r3, #0]
 8015e9e:	193b      	adds	r3, r7, r4
 8015ea0:	881b      	ldrh	r3, [r3, #0]
 8015ea2:	1939      	adds	r1, r7, r4
 8015ea4:	1c58      	adds	r0, r3, #1
 8015ea6:	8008      	strh	r0, [r1, #0]
 8015ea8:	18d3      	adds	r3, r2, r3
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	021a      	lsls	r2, r3, #8
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	68db      	ldr	r3, [r3, #12]
 8015eb2:	431a      	orrs	r2, r3
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681a      	ldr	r2, [r3, #0]
 8015ebc:	193b      	adds	r3, r7, r4
 8015ebe:	881b      	ldrh	r3, [r3, #0]
 8015ec0:	1939      	adds	r1, r7, r4
 8015ec2:	1c58      	adds	r0, r3, #1
 8015ec4:	8008      	strh	r0, [r1, #0]
 8015ec6:	18d3      	adds	r3, r2, r3
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	041a      	lsls	r2, r3, #16
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	68db      	ldr	r3, [r3, #12]
 8015ed0:	431a      	orrs	r2, r3
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681a      	ldr	r2, [r3, #0]
 8015eda:	193b      	adds	r3, r7, r4
 8015edc:	881b      	ldrh	r3, [r3, #0]
 8015ede:	1939      	adds	r1, r7, r4
 8015ee0:	1c58      	adds	r0, r3, #1
 8015ee2:	8008      	strh	r0, [r1, #0]
 8015ee4:	18d3      	adds	r3, r2, r3
 8015ee6:	781b      	ldrb	r3, [r3, #0]
 8015ee8:	061a      	lsls	r2, r3, #24
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	68db      	ldr	r3, [r3, #12]
 8015eee:	431a      	orrs	r2, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681a      	ldr	r2, [r3, #0]
 8015ef8:	193b      	adds	r3, r7, r4
 8015efa:	881b      	ldrh	r3, [r3, #0]
 8015efc:	1939      	adds	r1, r7, r4
 8015efe:	1c58      	adds	r0, r3, #1
 8015f00:	8008      	strh	r0, [r1, #0]
 8015f02:	18d3      	adds	r3, r2, r3
 8015f04:	781a      	ldrb	r2, [r3, #0]
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681a      	ldr	r2, [r3, #0]
 8015f0e:	193b      	adds	r3, r7, r4
 8015f10:	881b      	ldrh	r3, [r3, #0]
 8015f12:	1939      	adds	r1, r7, r4
 8015f14:	1c58      	adds	r0, r3, #1
 8015f16:	8008      	strh	r0, [r1, #0]
 8015f18:	18d3      	adds	r3, r2, r3
 8015f1a:	781a      	ldrb	r2, [r3, #0]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	791b      	ldrb	r3, [r3, #4]
 8015f24:	1f1a      	subs	r2, r3, #4
 8015f26:	193b      	adds	r3, r7, r4
 8015f28:	881b      	ldrh	r3, [r3, #0]
 8015f2a:	1ad3      	subs	r3, r2, r3
 8015f2c:	2b10      	cmp	r3, #16
 8015f2e:	d111      	bne.n	8015f54 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	3312      	adds	r3, #18
 8015f34:	0018      	movs	r0, r3
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	193b      	adds	r3, r7, r4
 8015f3c:	881b      	ldrh	r3, [r3, #0]
 8015f3e:	18d3      	adds	r3, r2, r3
 8015f40:	2210      	movs	r2, #16
 8015f42:	0019      	movs	r1, r3
 8015f44:	f002 ffc6 	bl	8018ed4 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015f48:	193b      	adds	r3, r7, r4
 8015f4a:	193a      	adds	r2, r7, r4
 8015f4c:	8812      	ldrh	r2, [r2, #0]
 8015f4e:	3210      	adds	r2, #16
 8015f50:	801a      	strh	r2, [r3, #0]
 8015f52:	e00a      	b.n	8015f6a <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	791b      	ldrb	r3, [r3, #4]
 8015f58:	1f1a      	subs	r2, r3, #4
 8015f5a:	230e      	movs	r3, #14
 8015f5c:	18fb      	adds	r3, r7, r3
 8015f5e:	881b      	ldrh	r3, [r3, #0]
 8015f60:	1ad3      	subs	r3, r2, r3
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	dd01      	ble.n	8015f6a <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 8015f66:	2301      	movs	r3, #1
 8015f68:	e03a      	b.n	8015fe0 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	240e      	movs	r4, #14
 8015f70:	193b      	adds	r3, r7, r4
 8015f72:	881b      	ldrh	r3, [r3, #0]
 8015f74:	1939      	adds	r1, r7, r4
 8015f76:	1c58      	adds	r0, r3, #1
 8015f78:	8008      	strh	r0, [r1, #0]
 8015f7a:	18d3      	adds	r3, r2, r3
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	001a      	movs	r2, r3
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681a      	ldr	r2, [r3, #0]
 8015f88:	193b      	adds	r3, r7, r4
 8015f8a:	881b      	ldrh	r3, [r3, #0]
 8015f8c:	1939      	adds	r1, r7, r4
 8015f8e:	1c58      	adds	r0, r3, #1
 8015f90:	8008      	strh	r0, [r1, #0]
 8015f92:	18d3      	adds	r3, r2, r3
 8015f94:	781b      	ldrb	r3, [r3, #0]
 8015f96:	021a      	lsls	r2, r3, #8
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f9c:	431a      	orrs	r2, r3
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681a      	ldr	r2, [r3, #0]
 8015fa6:	193b      	adds	r3, r7, r4
 8015fa8:	881b      	ldrh	r3, [r3, #0]
 8015faa:	1939      	adds	r1, r7, r4
 8015fac:	1c58      	adds	r0, r3, #1
 8015fae:	8008      	strh	r0, [r1, #0]
 8015fb0:	18d3      	adds	r3, r2, r3
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	041a      	lsls	r2, r3, #16
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fba:	431a      	orrs	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681a      	ldr	r2, [r3, #0]
 8015fc4:	193b      	adds	r3, r7, r4
 8015fc6:	881b      	ldrh	r3, [r3, #0]
 8015fc8:	1939      	adds	r1, r7, r4
 8015fca:	1c58      	adds	r0, r3, #1
 8015fcc:	8008      	strh	r0, [r1, #0]
 8015fce:	18d3      	adds	r3, r2, r3
 8015fd0:	781b      	ldrb	r3, [r3, #0]
 8015fd2:	061a      	lsls	r2, r3, #24
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fd8:	431a      	orrs	r2, r3
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015fde:	2300      	movs	r3, #0
}
 8015fe0:	0018      	movs	r0, r3
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	b005      	add	sp, #20
 8015fe6:	bd90      	pop	{r4, r7, pc}

08015fe8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015fe8:	b590      	push	{r4, r7, lr}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d003      	beq.n	8015ffe <LoRaMacParserData+0x16>
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d101      	bne.n	8016002 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015ffe:	2302      	movs	r3, #2
 8016000:	e0fe      	b.n	8016200 <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 8016002:	240e      	movs	r4, #14
 8016004:	193b      	adds	r3, r7, r4
 8016006:	2200      	movs	r2, #0
 8016008:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681a      	ldr	r2, [r3, #0]
 801600e:	193b      	adds	r3, r7, r4
 8016010:	881b      	ldrh	r3, [r3, #0]
 8016012:	1939      	adds	r1, r7, r4
 8016014:	1c58      	adds	r0, r3, #1
 8016016:	8008      	strh	r0, [r1, #0]
 8016018:	18d3      	adds	r3, r2, r3
 801601a:	781a      	ldrb	r2, [r3, #0]
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681a      	ldr	r2, [r3, #0]
 8016024:	193b      	adds	r3, r7, r4
 8016026:	881b      	ldrh	r3, [r3, #0]
 8016028:	1939      	adds	r1, r7, r4
 801602a:	1c58      	adds	r0, r3, #1
 801602c:	8008      	strh	r0, [r1, #0]
 801602e:	18d3      	adds	r3, r2, r3
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	001a      	movs	r2, r3
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681a      	ldr	r2, [r3, #0]
 801603c:	193b      	adds	r3, r7, r4
 801603e:	881b      	ldrh	r3, [r3, #0]
 8016040:	1939      	adds	r1, r7, r4
 8016042:	1c58      	adds	r0, r3, #1
 8016044:	8008      	strh	r0, [r1, #0]
 8016046:	18d3      	adds	r3, r2, r3
 8016048:	781b      	ldrb	r3, [r3, #0]
 801604a:	021a      	lsls	r2, r3, #8
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	689b      	ldr	r3, [r3, #8]
 8016050:	431a      	orrs	r2, r3
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	193b      	adds	r3, r7, r4
 801605c:	881b      	ldrh	r3, [r3, #0]
 801605e:	1939      	adds	r1, r7, r4
 8016060:	1c58      	adds	r0, r3, #1
 8016062:	8008      	strh	r0, [r1, #0]
 8016064:	18d3      	adds	r3, r2, r3
 8016066:	781b      	ldrb	r3, [r3, #0]
 8016068:	041a      	lsls	r2, r3, #16
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	689b      	ldr	r3, [r3, #8]
 801606e:	431a      	orrs	r2, r3
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	681a      	ldr	r2, [r3, #0]
 8016078:	193b      	adds	r3, r7, r4
 801607a:	881b      	ldrh	r3, [r3, #0]
 801607c:	1939      	adds	r1, r7, r4
 801607e:	1c58      	adds	r0, r3, #1
 8016080:	8008      	strh	r0, [r1, #0]
 8016082:	18d3      	adds	r3, r2, r3
 8016084:	781b      	ldrb	r3, [r3, #0]
 8016086:	061a      	lsls	r2, r3, #24
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	689b      	ldr	r3, [r3, #8]
 801608c:	431a      	orrs	r2, r3
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	681a      	ldr	r2, [r3, #0]
 8016096:	193b      	adds	r3, r7, r4
 8016098:	881b      	ldrh	r3, [r3, #0]
 801609a:	1939      	adds	r1, r7, r4
 801609c:	1c58      	adds	r0, r3, #1
 801609e:	8008      	strh	r0, [r1, #0]
 80160a0:	18d3      	adds	r3, r2, r3
 80160a2:	781a      	ldrb	r2, [r3, #0]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681a      	ldr	r2, [r3, #0]
 80160ac:	193b      	adds	r3, r7, r4
 80160ae:	881b      	ldrh	r3, [r3, #0]
 80160b0:	1939      	adds	r1, r7, r4
 80160b2:	1c58      	adds	r0, r3, #1
 80160b4:	8008      	strh	r0, [r1, #0]
 80160b6:	18d3      	adds	r3, r2, r3
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	b29a      	uxth	r2, r3
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	681a      	ldr	r2, [r3, #0]
 80160c4:	193b      	adds	r3, r7, r4
 80160c6:	881b      	ldrh	r3, [r3, #0]
 80160c8:	1939      	adds	r1, r7, r4
 80160ca:	1c58      	adds	r0, r3, #1
 80160cc:	8008      	strh	r0, [r1, #0]
 80160ce:	18d3      	adds	r3, r2, r3
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	0219      	lsls	r1, r3, #8
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	89db      	ldrh	r3, [r3, #14]
 80160d8:	b21a      	sxth	r2, r3
 80160da:	b20b      	sxth	r3, r1
 80160dc:	4313      	orrs	r3, r2
 80160de:	b21b      	sxth	r3, r3
 80160e0:	b29a      	uxth	r2, r3
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	3310      	adds	r3, #16
 80160ea:	0018      	movs	r0, r3
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	681a      	ldr	r2, [r3, #0]
 80160f0:	193b      	adds	r3, r7, r4
 80160f2:	881b      	ldrh	r3, [r3, #0]
 80160f4:	18d1      	adds	r1, r2, r3
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	7b1b      	ldrb	r3, [r3, #12]
 80160fa:	071b      	lsls	r3, r3, #28
 80160fc:	0f1b      	lsrs	r3, r3, #28
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	b29b      	uxth	r3, r3
 8016102:	001a      	movs	r2, r3
 8016104:	f002 fee6 	bl	8018ed4 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	7b1b      	ldrb	r3, [r3, #12]
 801610c:	071b      	lsls	r3, r3, #28
 801610e:	0f1b      	lsrs	r3, r3, #28
 8016110:	b2db      	uxtb	r3, r3
 8016112:	b299      	uxth	r1, r3
 8016114:	193b      	adds	r3, r7, r4
 8016116:	193a      	adds	r2, r7, r4
 8016118:	8812      	ldrh	r2, [r2, #0]
 801611a:	188a      	adds	r2, r1, r2
 801611c:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	2220      	movs	r2, #32
 8016122:	2100      	movs	r1, #0
 8016124:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2228      	movs	r2, #40	; 0x28
 801612a:	2100      	movs	r1, #0
 801612c:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	791b      	ldrb	r3, [r3, #4]
 8016132:	001a      	movs	r2, r3
 8016134:	193b      	adds	r3, r7, r4
 8016136:	881b      	ldrh	r3, [r3, #0]
 8016138:	1ad3      	subs	r3, r2, r3
 801613a:	2b04      	cmp	r3, #4
 801613c:	dd2e      	ble.n	801619c <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	681a      	ldr	r2, [r3, #0]
 8016142:	193b      	adds	r3, r7, r4
 8016144:	881b      	ldrh	r3, [r3, #0]
 8016146:	1939      	adds	r1, r7, r4
 8016148:	1c58      	adds	r0, r3, #1
 801614a:	8008      	strh	r0, [r1, #0]
 801614c:	18d3      	adds	r3, r2, r3
 801614e:	7819      	ldrb	r1, [r3, #0]
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	2220      	movs	r2, #32
 8016154:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	791a      	ldrb	r2, [r3, #4]
 801615a:	193b      	adds	r3, r7, r4
 801615c:	881b      	ldrh	r3, [r3, #0]
 801615e:	b2db      	uxtb	r3, r3
 8016160:	1ad3      	subs	r3, r2, r3
 8016162:	b2db      	uxtb	r3, r3
 8016164:	3b04      	subs	r3, #4
 8016166:	b2d9      	uxtb	r1, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	2228      	movs	r2, #40	; 0x28
 801616c:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681a      	ldr	r2, [r3, #0]
 8016176:	193b      	adds	r3, r7, r4
 8016178:	881b      	ldrh	r3, [r3, #0]
 801617a:	18d1      	adds	r1, r2, r3
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2228      	movs	r2, #40	; 0x28
 8016180:	5c9b      	ldrb	r3, [r3, r2]
 8016182:	b29b      	uxth	r3, r3
 8016184:	001a      	movs	r2, r3
 8016186:	f002 fea5 	bl	8018ed4 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2228      	movs	r2, #40	; 0x28
 801618e:	5c9b      	ldrb	r3, [r3, r2]
 8016190:	b299      	uxth	r1, r3
 8016192:	193b      	adds	r3, r7, r4
 8016194:	193a      	adds	r2, r7, r4
 8016196:	8812      	ldrh	r2, [r2, #0]
 8016198:	188a      	adds	r2, r1, r2
 801619a:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681a      	ldr	r2, [r3, #0]
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	791b      	ldrb	r3, [r3, #4]
 80161a4:	3b04      	subs	r3, #4
 80161a6:	18d3      	adds	r3, r2, r3
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	001a      	movs	r2, r3
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6819      	ldr	r1, [r3, #0]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	791b      	ldrb	r3, [r3, #4]
 80161bc:	3b03      	subs	r3, #3
 80161be:	18cb      	adds	r3, r1, r3
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	021b      	lsls	r3, r3, #8
 80161c4:	431a      	orrs	r2, r3
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6819      	ldr	r1, [r3, #0]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	791b      	ldrb	r3, [r3, #4]
 80161d6:	3b02      	subs	r3, #2
 80161d8:	18cb      	adds	r3, r1, r3
 80161da:	781b      	ldrb	r3, [r3, #0]
 80161dc:	041b      	lsls	r3, r3, #16
 80161de:	431a      	orrs	r2, r3
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	6819      	ldr	r1, [r3, #0]
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	791b      	ldrb	r3, [r3, #4]
 80161f0:	3b01      	subs	r3, #1
 80161f2:	18cb      	adds	r3, r1, r3
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	061b      	lsls	r3, r3, #24
 80161f8:	431a      	orrs	r2, r3
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80161fe:	2300      	movs	r3, #0
}
 8016200:	0018      	movs	r0, r3
 8016202:	46bd      	mov	sp, r7
 8016204:	b005      	add	sp, #20
 8016206:	bd90      	pop	{r4, r7, pc}

08016208 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016208:	b5b0      	push	{r4, r5, r7, lr}
 801620a:	b084      	sub	sp, #16
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d003      	beq.n	801621e <LoRaMacSerializerJoinRequest+0x16>
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d101      	bne.n	8016222 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801621e:	2301      	movs	r3, #1
 8016220:	e089      	b.n	8016336 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8016222:	230e      	movs	r3, #14
 8016224:	18fb      	adds	r3, r7, r3
 8016226:	2200      	movs	r2, #0
 8016228:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	791b      	ldrb	r3, [r3, #4]
 801622e:	2b16      	cmp	r3, #22
 8016230:	d801      	bhi.n	8016236 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016232:	2302      	movs	r3, #2
 8016234:	e07f      	b.n	8016336 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681a      	ldr	r2, [r3, #0]
 801623a:	240e      	movs	r4, #14
 801623c:	193b      	adds	r3, r7, r4
 801623e:	881b      	ldrh	r3, [r3, #0]
 8016240:	1939      	adds	r1, r7, r4
 8016242:	1c58      	adds	r0, r3, #1
 8016244:	8008      	strh	r0, [r1, #0]
 8016246:	18d3      	adds	r3, r2, r3
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	7952      	ldrb	r2, [r2, #5]
 801624c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681a      	ldr	r2, [r3, #0]
 8016252:	193b      	adds	r3, r7, r4
 8016254:	881b      	ldrh	r3, [r3, #0]
 8016256:	18d0      	adds	r0, r2, r3
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	3306      	adds	r3, #6
 801625c:	2208      	movs	r2, #8
 801625e:	0019      	movs	r1, r3
 8016260:	f002 fe54 	bl	8018f0c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016264:	193b      	adds	r3, r7, r4
 8016266:	193a      	adds	r2, r7, r4
 8016268:	8812      	ldrh	r2, [r2, #0]
 801626a:	3208      	adds	r2, #8
 801626c:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	193b      	adds	r3, r7, r4
 8016274:	881b      	ldrh	r3, [r3, #0]
 8016276:	18d0      	adds	r0, r2, r3
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	330e      	adds	r3, #14
 801627c:	2208      	movs	r2, #8
 801627e:	0019      	movs	r1, r3
 8016280:	f002 fe44 	bl	8018f0c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016284:	193b      	adds	r3, r7, r4
 8016286:	0025      	movs	r5, r4
 8016288:	193a      	adds	r2, r7, r4
 801628a:	8812      	ldrh	r2, [r2, #0]
 801628c:	3208      	adds	r2, #8
 801628e:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	8ad8      	ldrh	r0, [r3, #22]
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681a      	ldr	r2, [r3, #0]
 8016298:	197b      	adds	r3, r7, r5
 801629a:	881b      	ldrh	r3, [r3, #0]
 801629c:	1979      	adds	r1, r7, r5
 801629e:	1c5c      	adds	r4, r3, #1
 80162a0:	800c      	strh	r4, [r1, #0]
 80162a2:	18d3      	adds	r3, r2, r3
 80162a4:	b2c2      	uxtb	r2, r0
 80162a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	8adb      	ldrh	r3, [r3, #22]
 80162ac:	0a1b      	lsrs	r3, r3, #8
 80162ae:	b298      	uxth	r0, r3
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681a      	ldr	r2, [r3, #0]
 80162b4:	197b      	adds	r3, r7, r5
 80162b6:	881b      	ldrh	r3, [r3, #0]
 80162b8:	1979      	adds	r1, r7, r5
 80162ba:	1c5c      	adds	r4, r3, #1
 80162bc:	800c      	strh	r4, [r1, #0]
 80162be:	18d3      	adds	r3, r2, r3
 80162c0:	b2c2      	uxtb	r2, r0
 80162c2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	6998      	ldr	r0, [r3, #24]
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681a      	ldr	r2, [r3, #0]
 80162cc:	197b      	adds	r3, r7, r5
 80162ce:	881b      	ldrh	r3, [r3, #0]
 80162d0:	1979      	adds	r1, r7, r5
 80162d2:	1c5c      	adds	r4, r3, #1
 80162d4:	800c      	strh	r4, [r1, #0]
 80162d6:	18d3      	adds	r3, r2, r3
 80162d8:	b2c2      	uxtb	r2, r0
 80162da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	699b      	ldr	r3, [r3, #24]
 80162e0:	0a18      	lsrs	r0, r3, #8
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	681a      	ldr	r2, [r3, #0]
 80162e6:	197b      	adds	r3, r7, r5
 80162e8:	881b      	ldrh	r3, [r3, #0]
 80162ea:	1979      	adds	r1, r7, r5
 80162ec:	1c5c      	adds	r4, r3, #1
 80162ee:	800c      	strh	r4, [r1, #0]
 80162f0:	18d3      	adds	r3, r2, r3
 80162f2:	b2c2      	uxtb	r2, r0
 80162f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	699b      	ldr	r3, [r3, #24]
 80162fa:	0c18      	lsrs	r0, r3, #16
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681a      	ldr	r2, [r3, #0]
 8016300:	197b      	adds	r3, r7, r5
 8016302:	881b      	ldrh	r3, [r3, #0]
 8016304:	1979      	adds	r1, r7, r5
 8016306:	1c5c      	adds	r4, r3, #1
 8016308:	800c      	strh	r4, [r1, #0]
 801630a:	18d3      	adds	r3, r2, r3
 801630c:	b2c2      	uxtb	r2, r0
 801630e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	699b      	ldr	r3, [r3, #24]
 8016314:	0e18      	lsrs	r0, r3, #24
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681a      	ldr	r2, [r3, #0]
 801631a:	197b      	adds	r3, r7, r5
 801631c:	881b      	ldrh	r3, [r3, #0]
 801631e:	1979      	adds	r1, r7, r5
 8016320:	1c5c      	adds	r4, r3, #1
 8016322:	800c      	strh	r4, [r1, #0]
 8016324:	18d3      	adds	r3, r2, r3
 8016326:	b2c2      	uxtb	r2, r0
 8016328:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801632a:	197b      	adds	r3, r7, r5
 801632c:	881b      	ldrh	r3, [r3, #0]
 801632e:	b2da      	uxtb	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016334:	2300      	movs	r3, #0
}
 8016336:	0018      	movs	r0, r3
 8016338:	46bd      	mov	sp, r7
 801633a:	b004      	add	sp, #16
 801633c:	bdb0      	pop	{r4, r5, r7, pc}

0801633e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801633e:	b5b0      	push	{r4, r5, r7, lr}
 8016340:	b084      	sub	sp, #16
 8016342:	af00      	add	r7, sp, #0
 8016344:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d003      	beq.n	8016354 <LoRaMacSerializerData+0x16>
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d101      	bne.n	8016358 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016354:	2301      	movs	r3, #1
 8016356:	e119      	b.n	801658c <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 8016358:	230e      	movs	r3, #14
 801635a:	18fb      	adds	r3, r7, r3
 801635c:	2200      	movs	r2, #0
 801635e:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8016360:	200c      	movs	r0, #12
 8016362:	183b      	adds	r3, r7, r0
 8016364:	2208      	movs	r2, #8
 8016366:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	7b1b      	ldrb	r3, [r3, #12]
 801636c:	071b      	lsls	r3, r3, #28
 801636e:	0f1b      	lsrs	r3, r3, #28
 8016370:	b2db      	uxtb	r3, r3
 8016372:	b299      	uxth	r1, r3
 8016374:	183b      	adds	r3, r7, r0
 8016376:	183a      	adds	r2, r7, r0
 8016378:	8812      	ldrh	r2, [r2, #0]
 801637a:	188a      	adds	r2, r1, r2
 801637c:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2228      	movs	r2, #40	; 0x28
 8016382:	5c9b      	ldrb	r3, [r3, r2]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d004      	beq.n	8016392 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016388:	183b      	adds	r3, r7, r0
 801638a:	183a      	adds	r2, r7, r0
 801638c:	8812      	ldrh	r2, [r2, #0]
 801638e:	3201      	adds	r2, #1
 8016390:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2228      	movs	r2, #40	; 0x28
 8016396:	5c9b      	ldrb	r3, [r3, r2]
 8016398:	b299      	uxth	r1, r3
 801639a:	200c      	movs	r0, #12
 801639c:	183b      	adds	r3, r7, r0
 801639e:	183a      	adds	r2, r7, r0
 80163a0:	8812      	ldrh	r2, [r2, #0]
 80163a2:	188a      	adds	r2, r1, r2
 80163a4:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80163a6:	0001      	movs	r1, r0
 80163a8:	187b      	adds	r3, r7, r1
 80163aa:	187a      	adds	r2, r7, r1
 80163ac:	8812      	ldrh	r2, [r2, #0]
 80163ae:	3204      	adds	r2, #4
 80163b0:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	791b      	ldrb	r3, [r3, #4]
 80163b6:	b29b      	uxth	r3, r3
 80163b8:	187a      	adds	r2, r7, r1
 80163ba:	8812      	ldrh	r2, [r2, #0]
 80163bc:	429a      	cmp	r2, r3
 80163be:	d901      	bls.n	80163c4 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80163c0:	2302      	movs	r3, #2
 80163c2:	e0e3      	b.n	801658c <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	250e      	movs	r5, #14
 80163ca:	197b      	adds	r3, r7, r5
 80163cc:	881b      	ldrh	r3, [r3, #0]
 80163ce:	1979      	adds	r1, r7, r5
 80163d0:	1c58      	adds	r0, r3, #1
 80163d2:	8008      	strh	r0, [r1, #0]
 80163d4:	18d3      	adds	r3, r2, r3
 80163d6:	687a      	ldr	r2, [r7, #4]
 80163d8:	7952      	ldrb	r2, [r2, #5]
 80163da:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6898      	ldr	r0, [r3, #8]
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681a      	ldr	r2, [r3, #0]
 80163e4:	197b      	adds	r3, r7, r5
 80163e6:	881b      	ldrh	r3, [r3, #0]
 80163e8:	1979      	adds	r1, r7, r5
 80163ea:	1c5c      	adds	r4, r3, #1
 80163ec:	800c      	strh	r4, [r1, #0]
 80163ee:	18d3      	adds	r3, r2, r3
 80163f0:	b2c2      	uxtb	r2, r0
 80163f2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	689b      	ldr	r3, [r3, #8]
 80163f8:	0a18      	lsrs	r0, r3, #8
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	681a      	ldr	r2, [r3, #0]
 80163fe:	197b      	adds	r3, r7, r5
 8016400:	881b      	ldrh	r3, [r3, #0]
 8016402:	1979      	adds	r1, r7, r5
 8016404:	1c5c      	adds	r4, r3, #1
 8016406:	800c      	strh	r4, [r1, #0]
 8016408:	18d3      	adds	r3, r2, r3
 801640a:	b2c2      	uxtb	r2, r0
 801640c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	689b      	ldr	r3, [r3, #8]
 8016412:	0c18      	lsrs	r0, r3, #16
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681a      	ldr	r2, [r3, #0]
 8016418:	197b      	adds	r3, r7, r5
 801641a:	881b      	ldrh	r3, [r3, #0]
 801641c:	1979      	adds	r1, r7, r5
 801641e:	1c5c      	adds	r4, r3, #1
 8016420:	800c      	strh	r4, [r1, #0]
 8016422:	18d3      	adds	r3, r2, r3
 8016424:	b2c2      	uxtb	r2, r0
 8016426:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	689b      	ldr	r3, [r3, #8]
 801642c:	0e18      	lsrs	r0, r3, #24
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681a      	ldr	r2, [r3, #0]
 8016432:	197b      	adds	r3, r7, r5
 8016434:	881b      	ldrh	r3, [r3, #0]
 8016436:	1979      	adds	r1, r7, r5
 8016438:	1c5c      	adds	r4, r3, #1
 801643a:	800c      	strh	r4, [r1, #0]
 801643c:	18d3      	adds	r3, r2, r3
 801643e:	b2c2      	uxtb	r2, r0
 8016440:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681a      	ldr	r2, [r3, #0]
 8016446:	197b      	adds	r3, r7, r5
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	1979      	adds	r1, r7, r5
 801644c:	1c58      	adds	r0, r3, #1
 801644e:	8008      	strh	r0, [r1, #0]
 8016450:	18d3      	adds	r3, r2, r3
 8016452:	687a      	ldr	r2, [r7, #4]
 8016454:	7b12      	ldrb	r2, [r2, #12]
 8016456:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	89d8      	ldrh	r0, [r3, #14]
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681a      	ldr	r2, [r3, #0]
 8016460:	197b      	adds	r3, r7, r5
 8016462:	881b      	ldrh	r3, [r3, #0]
 8016464:	1979      	adds	r1, r7, r5
 8016466:	1c5c      	adds	r4, r3, #1
 8016468:	800c      	strh	r4, [r1, #0]
 801646a:	18d3      	adds	r3, r2, r3
 801646c:	b2c2      	uxtb	r2, r0
 801646e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	89db      	ldrh	r3, [r3, #14]
 8016474:	0a1b      	lsrs	r3, r3, #8
 8016476:	b298      	uxth	r0, r3
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681a      	ldr	r2, [r3, #0]
 801647c:	197b      	adds	r3, r7, r5
 801647e:	881b      	ldrh	r3, [r3, #0]
 8016480:	1979      	adds	r1, r7, r5
 8016482:	1c5c      	adds	r4, r3, #1
 8016484:	800c      	strh	r4, [r1, #0]
 8016486:	18d3      	adds	r3, r2, r3
 8016488:	b2c2      	uxtb	r2, r0
 801648a:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681a      	ldr	r2, [r3, #0]
 8016490:	002c      	movs	r4, r5
 8016492:	197b      	adds	r3, r7, r5
 8016494:	881b      	ldrh	r3, [r3, #0]
 8016496:	18d0      	adds	r0, r2, r3
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	3310      	adds	r3, #16
 801649c:	0019      	movs	r1, r3
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	7b1b      	ldrb	r3, [r3, #12]
 80164a2:	071b      	lsls	r3, r3, #28
 80164a4:	0f1b      	lsrs	r3, r3, #28
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	b29b      	uxth	r3, r3
 80164aa:	001a      	movs	r2, r3
 80164ac:	f002 fd12 	bl	8018ed4 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	7b1b      	ldrb	r3, [r3, #12]
 80164b4:	071b      	lsls	r3, r3, #28
 80164b6:	0f1b      	lsrs	r3, r3, #28
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	b299      	uxth	r1, r3
 80164bc:	193b      	adds	r3, r7, r4
 80164be:	193a      	adds	r2, r7, r4
 80164c0:	8812      	ldrh	r2, [r2, #0]
 80164c2:	188a      	adds	r2, r1, r2
 80164c4:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2228      	movs	r2, #40	; 0x28
 80164ca:	5c9b      	ldrb	r3, [r3, r2]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d00b      	beq.n	80164e8 <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	681a      	ldr	r2, [r3, #0]
 80164d4:	193b      	adds	r3, r7, r4
 80164d6:	881b      	ldrh	r3, [r3, #0]
 80164d8:	1939      	adds	r1, r7, r4
 80164da:	1c58      	adds	r0, r3, #1
 80164dc:	8008      	strh	r0, [r1, #0]
 80164de:	18d3      	adds	r3, r2, r3
 80164e0:	687a      	ldr	r2, [r7, #4]
 80164e2:	2120      	movs	r1, #32
 80164e4:	5c52      	ldrb	r2, [r2, r1]
 80164e6:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681a      	ldr	r2, [r3, #0]
 80164ec:	240e      	movs	r4, #14
 80164ee:	193b      	adds	r3, r7, r4
 80164f0:	881b      	ldrh	r3, [r3, #0]
 80164f2:	18d0      	adds	r0, r2, r3
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2228      	movs	r2, #40	; 0x28
 80164fc:	5c9b      	ldrb	r3, [r3, r2]
 80164fe:	b29b      	uxth	r3, r3
 8016500:	001a      	movs	r2, r3
 8016502:	f002 fce7 	bl	8018ed4 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	2228      	movs	r2, #40	; 0x28
 801650a:	5c9b      	ldrb	r3, [r3, r2]
 801650c:	b299      	uxth	r1, r3
 801650e:	193b      	adds	r3, r7, r4
 8016510:	193a      	adds	r2, r7, r4
 8016512:	8812      	ldrh	r2, [r2, #0]
 8016514:	188a      	adds	r2, r1, r2
 8016516:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681a      	ldr	r2, [r3, #0]
 8016520:	193b      	adds	r3, r7, r4
 8016522:	881b      	ldrh	r3, [r3, #0]
 8016524:	0025      	movs	r5, r4
 8016526:	1939      	adds	r1, r7, r4
 8016528:	1c5c      	adds	r4, r3, #1
 801652a:	800c      	strh	r4, [r1, #0]
 801652c:	18d3      	adds	r3, r2, r3
 801652e:	b2c2      	uxtb	r2, r0
 8016530:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016536:	0a18      	lsrs	r0, r3, #8
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	197b      	adds	r3, r7, r5
 801653e:	881b      	ldrh	r3, [r3, #0]
 8016540:	1979      	adds	r1, r7, r5
 8016542:	1c5c      	adds	r4, r3, #1
 8016544:	800c      	strh	r4, [r1, #0]
 8016546:	18d3      	adds	r3, r2, r3
 8016548:	b2c2      	uxtb	r2, r0
 801654a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016550:	0c18      	lsrs	r0, r3, #16
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	681a      	ldr	r2, [r3, #0]
 8016556:	197b      	adds	r3, r7, r5
 8016558:	881b      	ldrh	r3, [r3, #0]
 801655a:	1979      	adds	r1, r7, r5
 801655c:	1c5c      	adds	r4, r3, #1
 801655e:	800c      	strh	r4, [r1, #0]
 8016560:	18d3      	adds	r3, r2, r3
 8016562:	b2c2      	uxtb	r2, r0
 8016564:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801656a:	0e18      	lsrs	r0, r3, #24
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681a      	ldr	r2, [r3, #0]
 8016570:	197b      	adds	r3, r7, r5
 8016572:	881b      	ldrh	r3, [r3, #0]
 8016574:	1979      	adds	r1, r7, r5
 8016576:	1c5c      	adds	r4, r3, #1
 8016578:	800c      	strh	r4, [r1, #0]
 801657a:	18d3      	adds	r3, r2, r3
 801657c:	b2c2      	uxtb	r2, r0
 801657e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016580:	197b      	adds	r3, r7, r5
 8016582:	881b      	ldrh	r3, [r3, #0]
 8016584:	b2da      	uxtb	r2, r3
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801658a:	2300      	movs	r3, #0
}
 801658c:	0018      	movs	r0, r3
 801658e:	46bd      	mov	sp, r7
 8016590:	b004      	add	sp, #16
 8016592:	bdb0      	pop	{r4, r5, r7, pc}

08016594 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
 801659a:	0002      	movs	r2, r0
 801659c:	1dfb      	adds	r3, r7, #7
 801659e:	701a      	strb	r2, [r3, #0]
    switch( region )
 80165a0:	1dfb      	adds	r3, r7, #7
 80165a2:	781b      	ldrb	r3, [r3, #0]
 80165a4:	2b05      	cmp	r3, #5
 80165a6:	d101      	bne.n	80165ac <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80165a8:	2301      	movs	r3, #1
 80165aa:	e000      	b.n	80165ae <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80165ac:	2300      	movs	r3, #0
        }
    }
}
 80165ae:	0018      	movs	r0, r3
 80165b0:	46bd      	mov	sp, r7
 80165b2:	b002      	add	sp, #8
 80165b4:	bd80      	pop	{r7, pc}

080165b6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80165b6:	b580      	push	{r7, lr}
 80165b8:	b084      	sub	sp, #16
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	0002      	movs	r2, r0
 80165be:	6039      	str	r1, [r7, #0]
 80165c0:	1dfb      	adds	r3, r7, #7
 80165c2:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 80165c4:	2308      	movs	r3, #8
 80165c6:	18fb      	adds	r3, r7, r3
 80165c8:	2200      	movs	r2, #0
 80165ca:	601a      	str	r2, [r3, #0]
    switch( region )
 80165cc:	1dfb      	adds	r3, r7, #7
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	2b05      	cmp	r3, #5
 80165d2:	d109      	bne.n	80165e8 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	0018      	movs	r0, r3
 80165d8:	f001 fa5e 	bl	8017a98 <RegionEU868GetPhyParam>
 80165dc:	0003      	movs	r3, r0
 80165de:	001a      	movs	r2, r3
 80165e0:	230c      	movs	r3, #12
 80165e2:	18fb      	adds	r3, r7, r3
 80165e4:	601a      	str	r2, [r3, #0]
 80165e6:	e005      	b.n	80165f4 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80165e8:	230c      	movs	r3, #12
 80165ea:	18fb      	adds	r3, r7, r3
 80165ec:	2208      	movs	r2, #8
 80165ee:	18ba      	adds	r2, r7, r2
 80165f0:	6812      	ldr	r2, [r2, #0]
 80165f2:	601a      	str	r2, [r3, #0]
 80165f4:	230c      	movs	r3, #12
 80165f6:	18fb      	adds	r3, r7, r3
 80165f8:	2200      	movs	r2, #0
 80165fa:	681a      	ldr	r2, [r3, #0]
 80165fc:	0013      	movs	r3, r2
        }
    }
}
 80165fe:	0018      	movs	r0, r3
 8016600:	46bd      	mov	sp, r7
 8016602:	b004      	add	sp, #16
 8016604:	bd80      	pop	{r7, pc}

08016606 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016606:	b580      	push	{r7, lr}
 8016608:	b082      	sub	sp, #8
 801660a:	af00      	add	r7, sp, #0
 801660c:	0002      	movs	r2, r0
 801660e:	6039      	str	r1, [r7, #0]
 8016610:	1dfb      	adds	r3, r7, #7
 8016612:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016614:	1dfb      	adds	r3, r7, #7
 8016616:	781b      	ldrb	r3, [r3, #0]
 8016618:	2b05      	cmp	r3, #5
 801661a:	d104      	bne.n	8016626 <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801661c:	683b      	ldr	r3, [r7, #0]
 801661e:	0018      	movs	r0, r3
 8016620:	f001 fb5a 	bl	8017cd8 <RegionEU868SetBandTxDone>
 8016624:	e000      	b.n	8016628 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016626:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016628:	46bd      	mov	sp, r7
 801662a:	b002      	add	sp, #8
 801662c:	bd80      	pop	{r7, pc}

0801662e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b082      	sub	sp, #8
 8016632:	af00      	add	r7, sp, #0
 8016634:	0002      	movs	r2, r0
 8016636:	6039      	str	r1, [r7, #0]
 8016638:	1dfb      	adds	r3, r7, #7
 801663a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801663c:	1dfb      	adds	r3, r7, #7
 801663e:	781b      	ldrb	r3, [r3, #0]
 8016640:	2b05      	cmp	r3, #5
 8016642:	d104      	bne.n	801664e <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	0018      	movs	r0, r3
 8016648:	f001 fb72 	bl	8017d30 <RegionEU868InitDefaults>
 801664c:	e000      	b.n	8016650 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801664e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016650:	46c0      	nop			; (mov r8, r8)
 8016652:	46bd      	mov	sp, r7
 8016654:	b002      	add	sp, #8
 8016656:	bd80      	pop	{r7, pc}

08016658 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
 801665e:	0002      	movs	r2, r0
 8016660:	6039      	str	r1, [r7, #0]
 8016662:	1dfb      	adds	r3, r7, #7
 8016664:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016666:	1dfb      	adds	r3, r7, #7
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	2b05      	cmp	r3, #5
 801666c:	d105      	bne.n	801667a <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 801666e:	683b      	ldr	r3, [r7, #0]
 8016670:	0018      	movs	r0, r3
 8016672:	f001 fbf1 	bl	8017e58 <RegionEU868GetNvmCtx>
 8016676:	0003      	movs	r3, r0
 8016678:	e000      	b.n	801667c <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 801667a:	2300      	movs	r3, #0
        }
    }
}
 801667c:	0018      	movs	r0, r3
 801667e:	46bd      	mov	sp, r7
 8016680:	b002      	add	sp, #8
 8016682:	bd80      	pop	{r7, pc}

08016684 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6039      	str	r1, [r7, #0]
 801668c:	0011      	movs	r1, r2
 801668e:	1dfb      	adds	r3, r7, #7
 8016690:	1c02      	adds	r2, r0, #0
 8016692:	701a      	strb	r2, [r3, #0]
 8016694:	1dbb      	adds	r3, r7, #6
 8016696:	1c0a      	adds	r2, r1, #0
 8016698:	701a      	strb	r2, [r3, #0]
    switch( region )
 801669a:	1dfb      	adds	r3, r7, #7
 801669c:	781b      	ldrb	r3, [r3, #0]
 801669e:	2b05      	cmp	r3, #5
 80166a0:	d108      	bne.n	80166b4 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80166a2:	1dbb      	adds	r3, r7, #6
 80166a4:	781a      	ldrb	r2, [r3, #0]
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	0011      	movs	r1, r2
 80166aa:	0018      	movs	r0, r3
 80166ac:	f001 fbe4 	bl	8017e78 <RegionEU868Verify>
 80166b0:	0003      	movs	r3, r0
 80166b2:	e000      	b.n	80166b6 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80166b4:	2300      	movs	r3, #0
        }
    }
}
 80166b6:	0018      	movs	r0, r3
 80166b8:	46bd      	mov	sp, r7
 80166ba:	b002      	add	sp, #8
 80166bc:	bd80      	pop	{r7, pc}

080166be <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80166be:	b580      	push	{r7, lr}
 80166c0:	b082      	sub	sp, #8
 80166c2:	af00      	add	r7, sp, #0
 80166c4:	0002      	movs	r2, r0
 80166c6:	6039      	str	r1, [r7, #0]
 80166c8:	1dfb      	adds	r3, r7, #7
 80166ca:	701a      	strb	r2, [r3, #0]
    switch( region )
 80166cc:	1dfb      	adds	r3, r7, #7
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	2b05      	cmp	r3, #5
 80166d2:	d104      	bne.n	80166de <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	0018      	movs	r0, r3
 80166d8:	f001 fc28 	bl	8017f2c <RegionEU868ApplyCFList>
 80166dc:	e000      	b.n	80166e0 <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80166de:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80166e0:	46c0      	nop			; (mov r8, r8)
 80166e2:	46bd      	mov	sp, r7
 80166e4:	b002      	add	sp, #8
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	0002      	movs	r2, r0
 80166f0:	6039      	str	r1, [r7, #0]
 80166f2:	1dfb      	adds	r3, r7, #7
 80166f4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80166f6:	1dfb      	adds	r3, r7, #7
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	2b05      	cmp	r3, #5
 80166fc:	d105      	bne.n	801670a <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	0018      	movs	r0, r3
 8016702:	f001 fca3 	bl	801804c <RegionEU868ChanMaskSet>
 8016706:	0003      	movs	r3, r0
 8016708:	e000      	b.n	801670c <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801670a:	2300      	movs	r3, #0
        }
    }
}
 801670c:	0018      	movs	r0, r3
 801670e:	46bd      	mov	sp, r7
 8016710:	b002      	add	sp, #8
 8016712:	bd80      	pop	{r7, pc}

08016714 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016714:	b590      	push	{r4, r7, lr}
 8016716:	b083      	sub	sp, #12
 8016718:	af00      	add	r7, sp, #0
 801671a:	0004      	movs	r4, r0
 801671c:	0008      	movs	r0, r1
 801671e:	0011      	movs	r1, r2
 8016720:	603b      	str	r3, [r7, #0]
 8016722:	1dfb      	adds	r3, r7, #7
 8016724:	1c22      	adds	r2, r4, #0
 8016726:	701a      	strb	r2, [r3, #0]
 8016728:	1dbb      	adds	r3, r7, #6
 801672a:	1c02      	adds	r2, r0, #0
 801672c:	701a      	strb	r2, [r3, #0]
 801672e:	1d7b      	adds	r3, r7, #5
 8016730:	1c0a      	adds	r2, r1, #0
 8016732:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016734:	1dfb      	adds	r3, r7, #7
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	2b05      	cmp	r3, #5
 801673a:	d10a      	bne.n	8016752 <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801673c:	69bc      	ldr	r4, [r7, #24]
 801673e:	683a      	ldr	r2, [r7, #0]
 8016740:	1d7b      	adds	r3, r7, #5
 8016742:	7819      	ldrb	r1, [r3, #0]
 8016744:	1dbb      	adds	r3, r7, #6
 8016746:	2000      	movs	r0, #0
 8016748:	5618      	ldrsb	r0, [r3, r0]
 801674a:	0023      	movs	r3, r4
 801674c:	f001 fca4 	bl	8018098 <RegionEU868ComputeRxWindowParameters>
 8016750:	e000      	b.n	8016754 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016752:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016754:	46c0      	nop			; (mov r8, r8)
 8016756:	46bd      	mov	sp, r7
 8016758:	b003      	add	sp, #12
 801675a:	bd90      	pop	{r4, r7, pc}

0801675c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af00      	add	r7, sp, #0
 8016762:	60b9      	str	r1, [r7, #8]
 8016764:	607a      	str	r2, [r7, #4]
 8016766:	210f      	movs	r1, #15
 8016768:	187b      	adds	r3, r7, r1
 801676a:	1c02      	adds	r2, r0, #0
 801676c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801676e:	187b      	adds	r3, r7, r1
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	2b05      	cmp	r3, #5
 8016774:	d107      	bne.n	8016786 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016776:	687a      	ldr	r2, [r7, #4]
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	0011      	movs	r1, r2
 801677c:	0018      	movs	r0, r3
 801677e:	f001 fced 	bl	801815c <RegionEU868RxConfig>
 8016782:	0003      	movs	r3, r0
 8016784:	e000      	b.n	8016788 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016786:	2300      	movs	r3, #0
        }
    }
}
 8016788:	0018      	movs	r0, r3
 801678a:	46bd      	mov	sp, r7
 801678c:	b004      	add	sp, #16
 801678e:	bd80      	pop	{r7, pc}

08016790 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b084      	sub	sp, #16
 8016794:	af00      	add	r7, sp, #0
 8016796:	60b9      	str	r1, [r7, #8]
 8016798:	607a      	str	r2, [r7, #4]
 801679a:	603b      	str	r3, [r7, #0]
 801679c:	210f      	movs	r1, #15
 801679e:	187b      	adds	r3, r7, r1
 80167a0:	1c02      	adds	r2, r0, #0
 80167a2:	701a      	strb	r2, [r3, #0]
    switch( region )
 80167a4:	187b      	adds	r3, r7, r1
 80167a6:	781b      	ldrb	r3, [r3, #0]
 80167a8:	2b05      	cmp	r3, #5
 80167aa:	d107      	bne.n	80167bc <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80167ac:	683a      	ldr	r2, [r7, #0]
 80167ae:	6879      	ldr	r1, [r7, #4]
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	0018      	movs	r0, r3
 80167b4:	f001 fdc6 	bl	8018344 <RegionEU868TxConfig>
 80167b8:	0003      	movs	r3, r0
 80167ba:	e000      	b.n	80167be <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80167bc:	2300      	movs	r3, #0
        }
    }
}
 80167be:	0018      	movs	r0, r3
 80167c0:	46bd      	mov	sp, r7
 80167c2:	b004      	add	sp, #16
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80167c6:	b590      	push	{r4, r7, lr}
 80167c8:	b087      	sub	sp, #28
 80167ca:	af02      	add	r7, sp, #8
 80167cc:	60b9      	str	r1, [r7, #8]
 80167ce:	607a      	str	r2, [r7, #4]
 80167d0:	603b      	str	r3, [r7, #0]
 80167d2:	210f      	movs	r1, #15
 80167d4:	187b      	adds	r3, r7, r1
 80167d6:	1c02      	adds	r2, r0, #0
 80167d8:	701a      	strb	r2, [r3, #0]
    switch( region )
 80167da:	187b      	adds	r3, r7, r1
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	2b05      	cmp	r3, #5
 80167e0:	d10a      	bne.n	80167f8 <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80167e2:	6a3c      	ldr	r4, [r7, #32]
 80167e4:	683a      	ldr	r2, [r7, #0]
 80167e6:	6879      	ldr	r1, [r7, #4]
 80167e8:	68b8      	ldr	r0, [r7, #8]
 80167ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ec:	9300      	str	r3, [sp, #0]
 80167ee:	0023      	movs	r3, r4
 80167f0:	f001 fe94 	bl	801851c <RegionEU868LinkAdrReq>
 80167f4:	0003      	movs	r3, r0
 80167f6:	e000      	b.n	80167fa <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80167f8:	2300      	movs	r3, #0
        }
    }
}
 80167fa:	0018      	movs	r0, r3
 80167fc:	46bd      	mov	sp, r7
 80167fe:	b005      	add	sp, #20
 8016800:	bd90      	pop	{r4, r7, pc}

08016802 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016802:	b580      	push	{r7, lr}
 8016804:	b082      	sub	sp, #8
 8016806:	af00      	add	r7, sp, #0
 8016808:	0002      	movs	r2, r0
 801680a:	6039      	str	r1, [r7, #0]
 801680c:	1dfb      	adds	r3, r7, #7
 801680e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016810:	1dfb      	adds	r3, r7, #7
 8016812:	781b      	ldrb	r3, [r3, #0]
 8016814:	2b05      	cmp	r3, #5
 8016816:	d105      	bne.n	8016824 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	0018      	movs	r0, r3
 801681c:	f001 ffd6 	bl	80187cc <RegionEU868RxParamSetupReq>
 8016820:	0003      	movs	r3, r0
 8016822:	e000      	b.n	8016826 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016824:	2300      	movs	r3, #0
        }
    }
}
 8016826:	0018      	movs	r0, r3
 8016828:	46bd      	mov	sp, r7
 801682a:	b002      	add	sp, #8
 801682c:	bd80      	pop	{r7, pc}

0801682e <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801682e:	b580      	push	{r7, lr}
 8016830:	b082      	sub	sp, #8
 8016832:	af00      	add	r7, sp, #0
 8016834:	0002      	movs	r2, r0
 8016836:	6039      	str	r1, [r7, #0]
 8016838:	1dfb      	adds	r3, r7, #7
 801683a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801683c:	1dfb      	adds	r3, r7, #7
 801683e:	781b      	ldrb	r3, [r3, #0]
 8016840:	2b05      	cmp	r3, #5
 8016842:	d105      	bne.n	8016850 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	0018      	movs	r0, r3
 8016848:	f002 f809 	bl	801885e <RegionEU868NewChannelReq>
 801684c:	0003      	movs	r3, r0
 801684e:	e000      	b.n	8016852 <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016850:	2300      	movs	r3, #0
        }
    }
}
 8016852:	0018      	movs	r0, r3
 8016854:	46bd      	mov	sp, r7
 8016856:	b002      	add	sp, #8
 8016858:	bd80      	pop	{r7, pc}

0801685a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801685a:	b580      	push	{r7, lr}
 801685c:	b082      	sub	sp, #8
 801685e:	af00      	add	r7, sp, #0
 8016860:	0002      	movs	r2, r0
 8016862:	6039      	str	r1, [r7, #0]
 8016864:	1dfb      	adds	r3, r7, #7
 8016866:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016868:	1dfb      	adds	r3, r7, #7
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	2b05      	cmp	r3, #5
 801686e:	d105      	bne.n	801687c <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	0018      	movs	r0, r3
 8016874:	f002 f85b 	bl	801892e <RegionEU868TxParamSetupReq>
 8016878:	0003      	movs	r3, r0
 801687a:	e000      	b.n	801687e <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801687c:	2300      	movs	r3, #0
        }
    }
}
 801687e:	0018      	movs	r0, r3
 8016880:	46bd      	mov	sp, r7
 8016882:	b002      	add	sp, #8
 8016884:	bd80      	pop	{r7, pc}

08016886 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016886:	b580      	push	{r7, lr}
 8016888:	b082      	sub	sp, #8
 801688a:	af00      	add	r7, sp, #0
 801688c:	0002      	movs	r2, r0
 801688e:	6039      	str	r1, [r7, #0]
 8016890:	1dfb      	adds	r3, r7, #7
 8016892:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016894:	1dfb      	adds	r3, r7, #7
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	2b05      	cmp	r3, #5
 801689a:	d105      	bne.n	80168a8 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801689c:	683b      	ldr	r3, [r7, #0]
 801689e:	0018      	movs	r0, r3
 80168a0:	f002 f850 	bl	8018944 <RegionEU868DlChannelReq>
 80168a4:	0003      	movs	r3, r0
 80168a6:	e000      	b.n	80168aa <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80168a8:	2300      	movs	r3, #0
        }
    }
}
 80168aa:	0018      	movs	r0, r3
 80168ac:	46bd      	mov	sp, r7
 80168ae:	b002      	add	sp, #8
 80168b0:	bd80      	pop	{r7, pc}

080168b2 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80168b2:	b590      	push	{r4, r7, lr}
 80168b4:	b083      	sub	sp, #12
 80168b6:	af00      	add	r7, sp, #0
 80168b8:	0004      	movs	r4, r0
 80168ba:	0008      	movs	r0, r1
 80168bc:	0011      	movs	r1, r2
 80168be:	1dfb      	adds	r3, r7, #7
 80168c0:	1c22      	adds	r2, r4, #0
 80168c2:	701a      	strb	r2, [r3, #0]
 80168c4:	1dbb      	adds	r3, r7, #6
 80168c6:	1c02      	adds	r2, r0, #0
 80168c8:	701a      	strb	r2, [r3, #0]
 80168ca:	1d7b      	adds	r3, r7, #5
 80168cc:	1c0a      	adds	r2, r1, #0
 80168ce:	701a      	strb	r2, [r3, #0]
    switch( region )
 80168d0:	1dfb      	adds	r3, r7, #7
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	2b05      	cmp	r3, #5
 80168d6:	d10a      	bne.n	80168ee <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80168d8:	1d7b      	adds	r3, r7, #5
 80168da:	781a      	ldrb	r2, [r3, #0]
 80168dc:	1dbb      	adds	r3, r7, #6
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	b25b      	sxtb	r3, r3
 80168e2:	0011      	movs	r1, r2
 80168e4:	0018      	movs	r0, r3
 80168e6:	f002 f87b 	bl	80189e0 <RegionEU868AlternateDr>
 80168ea:	0003      	movs	r3, r0
 80168ec:	e000      	b.n	80168f0 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80168ee:	2300      	movs	r3, #0
        }
    }
}
 80168f0:	0018      	movs	r0, r3
 80168f2:	46bd      	mov	sp, r7
 80168f4:	b003      	add	sp, #12
 80168f6:	bd90      	pop	{r4, r7, pc}

080168f8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	60b9      	str	r1, [r7, #8]
 8016900:	607a      	str	r2, [r7, #4]
 8016902:	603b      	str	r3, [r7, #0]
 8016904:	210f      	movs	r1, #15
 8016906:	187b      	adds	r3, r7, r1
 8016908:	1c02      	adds	r2, r0, #0
 801690a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801690c:	187b      	adds	r3, r7, r1
 801690e:	781b      	ldrb	r3, [r3, #0]
 8016910:	2b05      	cmp	r3, #5
 8016912:	d107      	bne.n	8016924 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016914:	69bb      	ldr	r3, [r7, #24]
 8016916:	683a      	ldr	r2, [r7, #0]
 8016918:	6879      	ldr	r1, [r7, #4]
 801691a:	68b8      	ldr	r0, [r7, #8]
 801691c:	f002 f870 	bl	8018a00 <RegionEU868NextChannel>
 8016920:	0003      	movs	r3, r0
 8016922:	e000      	b.n	8016926 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016924:	2309      	movs	r3, #9
        }
    }
}
 8016926:	0018      	movs	r0, r3
 8016928:	46bd      	mov	sp, r7
 801692a:	b004      	add	sp, #16
 801692c:	bd80      	pop	{r7, pc}

0801692e <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b082      	sub	sp, #8
 8016932:	af00      	add	r7, sp, #0
 8016934:	0002      	movs	r2, r0
 8016936:	6039      	str	r1, [r7, #0]
 8016938:	1dfb      	adds	r3, r7, #7
 801693a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801693c:	1dfb      	adds	r3, r7, #7
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	2b05      	cmp	r3, #5
 8016942:	d104      	bne.n	801694e <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	0018      	movs	r0, r3
 8016948:	f002 fa04 	bl	8018d54 <RegionEU868SetContinuousWave>
 801694c:	e000      	b.n	8016950 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801694e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016950:	46c0      	nop			; (mov r8, r8)
 8016952:	46bd      	mov	sp, r7
 8016954:	b002      	add	sp, #8
 8016956:	bd80      	pop	{r7, pc}

08016958 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016958:	b5b0      	push	{r4, r5, r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	0005      	movs	r5, r0
 8016960:	000c      	movs	r4, r1
 8016962:	0010      	movs	r0, r2
 8016964:	0019      	movs	r1, r3
 8016966:	1dfb      	adds	r3, r7, #7
 8016968:	1c2a      	adds	r2, r5, #0
 801696a:	701a      	strb	r2, [r3, #0]
 801696c:	1dbb      	adds	r3, r7, #6
 801696e:	1c22      	adds	r2, r4, #0
 8016970:	701a      	strb	r2, [r3, #0]
 8016972:	1d7b      	adds	r3, r7, #5
 8016974:	1c02      	adds	r2, r0, #0
 8016976:	701a      	strb	r2, [r3, #0]
 8016978:	1d3b      	adds	r3, r7, #4
 801697a:	1c0a      	adds	r2, r1, #0
 801697c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801697e:	1dfb      	adds	r3, r7, #7
 8016980:	781b      	ldrb	r3, [r3, #0]
 8016982:	2b05      	cmp	r3, #5
 8016984:	d10c      	bne.n	80169a0 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016986:	1d3b      	adds	r3, r7, #4
 8016988:	2200      	movs	r2, #0
 801698a:	569a      	ldrsb	r2, [r3, r2]
 801698c:	1d7b      	adds	r3, r7, #5
 801698e:	2100      	movs	r1, #0
 8016990:	5659      	ldrsb	r1, [r3, r1]
 8016992:	1dbb      	adds	r3, r7, #6
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	0018      	movs	r0, r3
 8016998:	f002 fa34 	bl	8018e04 <RegionEU868ApplyDrOffset>
 801699c:	0003      	movs	r3, r0
 801699e:	e001      	b.n	80169a4 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80169a0:	1d7b      	adds	r3, r7, #5
 80169a2:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 80169a4:	0018      	movs	r0, r3
 80169a6:	46bd      	mov	sp, r7
 80169a8:	b002      	add	sp, #8
 80169aa:	bdb0      	pop	{r4, r5, r7, pc}

080169ac <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80169b2:	4b03      	ldr	r3, [pc, #12]	; (80169c0 <RegionGetVersion+0x14>)
 80169b4:	607b      	str	r3, [r7, #4]

    return version;
 80169b6:	687b      	ldr	r3, [r7, #4]
}
 80169b8:	0018      	movs	r0, r3
 80169ba:	46bd      	mov	sp, r7
 80169bc:	b002      	add	sp, #8
 80169be:	bd80      	pop	{r7, pc}
 80169c0:	01000300 	.word	0x01000300

080169c4 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80169c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169c6:	b087      	sub	sp, #28
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	0008      	movs	r0, r1
 80169ce:	0039      	movs	r1, r7
 80169d0:	600a      	str	r2, [r1, #0]
 80169d2:	604b      	str	r3, [r1, #4]
 80169d4:	230b      	movs	r3, #11
 80169d6:	18fb      	adds	r3, r7, r3
 80169d8:	1c02      	adds	r2, r0, #0
 80169da:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 80169dc:	2514      	movs	r5, #20
 80169de:	197c      	adds	r4, r7, r5
 80169e0:	003b      	movs	r3, r7
 80169e2:	6818      	ldr	r0, [r3, #0]
 80169e4:	6859      	ldr	r1, [r3, #4]
 80169e6:	f000 f91b 	bl	8016c20 <RegionCommonGetJoinDc>
 80169ea:	0003      	movs	r3, r0
 80169ec:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 80169ee:	2616      	movs	r6, #22
 80169f0:	19bb      	adds	r3, r7, r6
 80169f2:	68fa      	ldr	r2, [r7, #12]
 80169f4:	8812      	ldrh	r2, [r2, #0]
 80169f6:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 80169f8:	230b      	movs	r3, #11
 80169fa:	18fb      	adds	r3, r7, r3
 80169fc:	781b      	ldrb	r3, [r3, #0]
 80169fe:	2201      	movs	r2, #1
 8016a00:	4053      	eors	r3, r2
 8016a02:	b2db      	uxtb	r3, r3
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d012      	beq.n	8016a2e <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016a08:	197c      	adds	r4, r7, r5
 8016a0a:	003b      	movs	r3, r7
 8016a0c:	6818      	ldr	r0, [r3, #0]
 8016a0e:	6859      	ldr	r1, [r3, #4]
 8016a10:	f000 f906 	bl	8016c20 <RegionCommonGetJoinDc>
 8016a14:	0003      	movs	r3, r0
 8016a16:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016a18:	19ba      	adds	r2, r7, r6
 8016a1a:	197b      	adds	r3, r7, r5
 8016a1c:	19b9      	adds	r1, r7, r6
 8016a1e:	880c      	ldrh	r4, [r1, #0]
 8016a20:	881b      	ldrh	r3, [r3, #0]
 8016a22:	b298      	uxth	r0, r3
 8016a24:	b2a1      	uxth	r1, r4
 8016a26:	4288      	cmp	r0, r1
 8016a28:	d200      	bcs.n	8016a2c <GetDutyCycle+0x68>
 8016a2a:	1c23      	adds	r3, r4, #0
 8016a2c:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016a2e:	2216      	movs	r2, #22
 8016a30:	18bb      	adds	r3, r7, r2
 8016a32:	881b      	ldrh	r3, [r3, #0]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d102      	bne.n	8016a3e <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 8016a38:	18bb      	adds	r3, r7, r2
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 8016a3e:	2316      	movs	r3, #22
 8016a40:	18fb      	adds	r3, r7, r3
 8016a42:	881b      	ldrh	r3, [r3, #0]
}
 8016a44:	0018      	movs	r0, r3
 8016a46:	46bd      	mov	sp, r7
 8016a48:	b007      	add	sp, #28
 8016a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a4c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a4e:	b087      	sub	sp, #28
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	0008      	movs	r0, r1
 8016a56:	0039      	movs	r1, r7
 8016a58:	600a      	str	r2, [r1, #0]
 8016a5a:	604b      	str	r3, [r1, #4]
 8016a5c:	210b      	movs	r1, #11
 8016a5e:	187b      	adds	r3, r7, r1
 8016a60:	1c02      	adds	r2, r0, #0
 8016a62:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 8016a64:	2614      	movs	r6, #20
 8016a66:	19bb      	adds	r3, r7, r6
 8016a68:	68fa      	ldr	r2, [r7, #12]
 8016a6a:	8812      	ldrh	r2, [r2, #0]
 8016a6c:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 8016a6e:	2317      	movs	r3, #23
 8016a70:	18fb      	adds	r3, r7, r3
 8016a72:	2201      	movs	r2, #1
 8016a74:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016a76:	19bc      	adds	r4, r7, r6
 8016a78:	003b      	movs	r3, r7
 8016a7a:	000d      	movs	r5, r1
 8016a7c:	187a      	adds	r2, r7, r1
 8016a7e:	7811      	ldrb	r1, [r2, #0]
 8016a80:	68f8      	ldr	r0, [r7, #12]
 8016a82:	681a      	ldr	r2, [r3, #0]
 8016a84:	685b      	ldr	r3, [r3, #4]
 8016a86:	f7ff ff9d 	bl	80169c4 <GetDutyCycle>
 8016a8a:	0003      	movs	r3, r0
 8016a8c:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016a8e:	197b      	adds	r3, r7, r5
 8016a90:	781b      	ldrb	r3, [r3, #0]
 8016a92:	2201      	movs	r2, #1
 8016a94:	4053      	eors	r3, r2
 8016a96:	b2db      	uxtb	r3, r3
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d00a      	beq.n	8016ab2 <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8016a9c:	19bb      	adds	r3, r7, r6
 8016a9e:	881b      	ldrh	r3, [r3, #0]
 8016aa0:	2164      	movs	r1, #100	; 0x64
 8016aa2:	0018      	movs	r0, r3
 8016aa4:	f7e9 fb42 	bl	800012c <__udivsi3>
 8016aa8:	0003      	movs	r3, r0
 8016aaa:	b29a      	uxth	r2, r3
 8016aac:	2317      	movs	r3, #23
 8016aae:	18fb      	adds	r3, r7, r3
 8016ab0:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 8016ab2:	2317      	movs	r3, #23
 8016ab4:	18fb      	adds	r3, r7, r3
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	4a09      	ldr	r2, [pc, #36]	; (8016ae0 <SetMaxTimeCredits+0x94>)
 8016aba:	4353      	muls	r3, r2
 8016abc:	001a      	movs	r2, r3
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	685b      	ldr	r3, [r3, #4]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d103      	bne.n	8016ad2 <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	68da      	ldr	r2, [r3, #12]
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 8016ad2:	2314      	movs	r3, #20
 8016ad4:	18fb      	adds	r3, r7, r3
 8016ad6:	881b      	ldrh	r3, [r3, #0]
}
 8016ad8:	0018      	movs	r0, r3
 8016ada:	46bd      	mov	sp, r7
 8016adc:	b007      	add	sp, #28
 8016ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ae0:	0036ee80 	.word	0x0036ee80

08016ae4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016ae4:	b590      	push	{r4, r7, lr}
 8016ae6:	b085      	sub	sp, #20
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	000c      	movs	r4, r1
 8016aee:	0010      	movs	r0, r2
 8016af0:	0019      	movs	r1, r3
 8016af2:	1cfb      	adds	r3, r7, #3
 8016af4:	1c22      	adds	r2, r4, #0
 8016af6:	701a      	strb	r2, [r3, #0]
 8016af8:	1cbb      	adds	r3, r7, #2
 8016afa:	1c02      	adds	r2, r0, #0
 8016afc:	701a      	strb	r2, [r3, #0]
 8016afe:	1c7b      	adds	r3, r7, #1
 8016b00:	1c0a      	adds	r2, r1, #0
 8016b02:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8016b04:	230e      	movs	r3, #14
 8016b06:	18fc      	adds	r4, r7, r3
 8016b08:	2320      	movs	r3, #32
 8016b0a:	18fb      	adds	r3, r7, r3
 8016b0c:	1cfa      	adds	r2, r7, #3
 8016b0e:	7811      	ldrb	r1, [r2, #0]
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	681a      	ldr	r2, [r3, #0]
 8016b14:	685b      	ldr	r3, [r3, #4]
 8016b16:	f7ff ff99 	bl	8016a4c <SetMaxTimeCredits>
 8016b1a:	0003      	movs	r3, r0
 8016b1c:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016b1e:	1cfb      	adds	r3, r7, #3
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	2201      	movs	r2, #1
 8016b24:	4053      	eors	r3, r2
 8016b26:	b2db      	uxtb	r3, r3
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d012      	beq.n	8016b52 <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8016b2c:	1cbb      	adds	r3, r7, #2
 8016b2e:	781b      	ldrb	r3, [r3, #0]
 8016b30:	2201      	movs	r2, #1
 8016b32:	4053      	eors	r3, r2
 8016b34:	b2db      	uxtb	r3, r3
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d016      	beq.n	8016b68 <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 8016b3a:	1c7b      	adds	r3, r7, #1
 8016b3c:	781b      	ldrb	r3, [r3, #0]
 8016b3e:	2201      	movs	r2, #1
 8016b40:	4053      	eors	r3, r2
 8016b42:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d00f      	beq.n	8016b68 <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	68da      	ldr	r2, [r3, #12]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	609a      	str	r2, [r3, #8]
 8016b50:	e00a      	b.n	8016b68 <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016b52:	1cbb      	adds	r3, r7, #2
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	2201      	movs	r2, #1
 8016b58:	4053      	eors	r3, r2
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d003      	beq.n	8016b68 <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	68da      	ldr	r2, [r3, #12]
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	685b      	ldr	r3, [r3, #4]
 8016b6c:	0018      	movs	r0, r3
 8016b6e:	f005 feab 	bl	801c8c8 <UTIL_TIMER_GetElapsedTime>
 8016b72:	0002      	movs	r2, r0
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	689b      	ldr	r3, [r3, #8]
 8016b78:	18d2      	adds	r2, r2, r3
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	689a      	ldr	r2, [r3, #8]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	68db      	ldr	r3, [r3, #12]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d903      	bls.n	8016b92 <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	68da      	ldr	r2, [r3, #12]
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b96:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016b98:	230e      	movs	r3, #14
 8016b9a:	18fb      	adds	r3, r7, r3
 8016b9c:	881b      	ldrh	r3, [r3, #0]
}
 8016b9e:	0018      	movs	r0, r3
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	b005      	add	sp, #20
 8016ba4:	bd90      	pop	{r4, r7, pc}

08016ba6 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b084      	sub	sp, #16
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	0002      	movs	r2, r0
 8016bae:	1dbb      	adds	r3, r7, #6
 8016bb0:	801a      	strh	r2, [r3, #0]
 8016bb2:	1d7b      	adds	r3, r7, #5
 8016bb4:	1c0a      	adds	r2, r1, #0
 8016bb6:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8016bb8:	230f      	movs	r3, #15
 8016bba:	18fb      	adds	r3, r7, r3
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016bc0:	230e      	movs	r3, #14
 8016bc2:	18fb      	adds	r3, r7, r3
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	701a      	strb	r2, [r3, #0]
 8016bc8:	e01b      	b.n	8016c02 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016bca:	1dbb      	adds	r3, r7, #6
 8016bcc:	881b      	ldrh	r3, [r3, #0]
 8016bce:	200e      	movs	r0, #14
 8016bd0:	183a      	adds	r2, r7, r0
 8016bd2:	7812      	ldrb	r2, [r2, #0]
 8016bd4:	2101      	movs	r1, #1
 8016bd6:	4091      	lsls	r1, r2
 8016bd8:	000a      	movs	r2, r1
 8016bda:	401a      	ands	r2, r3
 8016bdc:	183b      	adds	r3, r7, r0
 8016bde:	781b      	ldrb	r3, [r3, #0]
 8016be0:	2101      	movs	r1, #1
 8016be2:	4099      	lsls	r1, r3
 8016be4:	000b      	movs	r3, r1
 8016be6:	429a      	cmp	r2, r3
 8016be8:	d105      	bne.n	8016bf6 <CountChannels+0x50>
        {
            nbActiveBits++;
 8016bea:	210f      	movs	r1, #15
 8016bec:	187b      	adds	r3, r7, r1
 8016bee:	781a      	ldrb	r2, [r3, #0]
 8016bf0:	187b      	adds	r3, r7, r1
 8016bf2:	3201      	adds	r2, #1
 8016bf4:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016bf6:	210e      	movs	r1, #14
 8016bf8:	187b      	adds	r3, r7, r1
 8016bfa:	781a      	ldrb	r2, [r3, #0]
 8016bfc:	187b      	adds	r3, r7, r1
 8016bfe:	3201      	adds	r2, #1
 8016c00:	701a      	strb	r2, [r3, #0]
 8016c02:	230e      	movs	r3, #14
 8016c04:	18fa      	adds	r2, r7, r3
 8016c06:	1d7b      	adds	r3, r7, #5
 8016c08:	7812      	ldrb	r2, [r2, #0]
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	429a      	cmp	r2, r3
 8016c0e:	d3dc      	bcc.n	8016bca <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8016c10:	230f      	movs	r3, #15
 8016c12:	18fb      	adds	r3, r7, r3
 8016c14:	781b      	ldrb	r3, [r3, #0]
}
 8016c16:	0018      	movs	r0, r3
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	b004      	add	sp, #16
 8016c1c:	bd80      	pop	{r7, pc}
	...

08016c20 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	003b      	movs	r3, r7
 8016c28:	6018      	str	r0, [r3, #0]
 8016c2a:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 8016c2c:	210e      	movs	r1, #14
 8016c2e:	187b      	adds	r3, r7, r1
 8016c30:	2200      	movs	r2, #0
 8016c32:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 8016c34:	003b      	movs	r3, r7
 8016c36:	681a      	ldr	r2, [r3, #0]
 8016c38:	23e1      	movs	r3, #225	; 0xe1
 8016c3a:	011b      	lsls	r3, r3, #4
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d203      	bcs.n	8016c48 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8016c40:	187b      	adds	r3, r7, r1
 8016c42:	2264      	movs	r2, #100	; 0x64
 8016c44:	801a      	strh	r2, [r3, #0]
 8016c46:	e00e      	b.n	8016c66 <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 8016c48:	003b      	movs	r3, r7
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	4a09      	ldr	r2, [pc, #36]	; (8016c74 <RegionCommonGetJoinDc+0x54>)
 8016c4e:	4293      	cmp	r3, r2
 8016c50:	d805      	bhi.n	8016c5e <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8016c52:	230e      	movs	r3, #14
 8016c54:	18fb      	adds	r3, r7, r3
 8016c56:	22fa      	movs	r2, #250	; 0xfa
 8016c58:	0092      	lsls	r2, r2, #2
 8016c5a:	801a      	strh	r2, [r3, #0]
 8016c5c:	e003      	b.n	8016c66 <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8016c5e:	230e      	movs	r3, #14
 8016c60:	18fb      	adds	r3, r7, r3
 8016c62:	4a05      	ldr	r2, [pc, #20]	; (8016c78 <RegionCommonGetJoinDc+0x58>)
 8016c64:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8016c66:	230e      	movs	r3, #14
 8016c68:	18fb      	adds	r3, r7, r3
 8016c6a:	881b      	ldrh	r3, [r3, #0]
}
 8016c6c:	0018      	movs	r0, r3
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	b004      	add	sp, #16
 8016c72:	bd80      	pop	{r7, pc}
 8016c74:	00009aaf 	.word	0x00009aaf
 8016c78:	00002710 	.word	0x00002710

08016c7c <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016c7c:	b590      	push	{r4, r7, lr}
 8016c7e:	b085      	sub	sp, #20
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	0004      	movs	r4, r0
 8016c84:	6039      	str	r1, [r7, #0]
 8016c86:	0010      	movs	r0, r2
 8016c88:	0019      	movs	r1, r3
 8016c8a:	1dfb      	adds	r3, r7, #7
 8016c8c:	1c22      	adds	r2, r4, #0
 8016c8e:	701a      	strb	r2, [r3, #0]
 8016c90:	1dbb      	adds	r3, r7, #6
 8016c92:	1c02      	adds	r2, r0, #0
 8016c94:	701a      	strb	r2, [r3, #0]
 8016c96:	1d7b      	adds	r3, r7, #5
 8016c98:	1c0a      	adds	r2, r1, #0
 8016c9a:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016c9c:	2320      	movs	r3, #32
 8016c9e:	18fb      	adds	r3, r7, r3
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	569a      	ldrsb	r2, [r3, r2]
 8016ca4:	1d7b      	adds	r3, r7, #5
 8016ca6:	2100      	movs	r1, #0
 8016ca8:	5659      	ldrsb	r1, [r3, r1]
 8016caa:	1dbb      	adds	r3, r7, #6
 8016cac:	781b      	ldrb	r3, [r3, #0]
 8016cae:	b25b      	sxtb	r3, r3
 8016cb0:	0018      	movs	r0, r3
 8016cb2:	f000 f87c 	bl	8016dae <RegionCommonValueInRange>
 8016cb6:	1e03      	subs	r3, r0, #0
 8016cb8:	d101      	bne.n	8016cbe <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	e073      	b.n	8016da6 <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016cbe:	230f      	movs	r3, #15
 8016cc0:	18fb      	adds	r3, r7, r3
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	701a      	strb	r2, [r3, #0]
 8016cc6:	230e      	movs	r3, #14
 8016cc8:	18fb      	adds	r3, r7, r3
 8016cca:	2200      	movs	r2, #0
 8016ccc:	701a      	strb	r2, [r3, #0]
 8016cce:	e062      	b.n	8016d96 <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016cd0:	230d      	movs	r3, #13
 8016cd2:	18fb      	adds	r3, r7, r3
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	701a      	strb	r2, [r3, #0]
 8016cd8:	e04c      	b.n	8016d74 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016cda:	230e      	movs	r3, #14
 8016cdc:	18fb      	adds	r3, r7, r3
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	683a      	ldr	r2, [r7, #0]
 8016ce4:	18d3      	adds	r3, r2, r3
 8016ce6:	881b      	ldrh	r3, [r3, #0]
 8016ce8:	001a      	movs	r2, r3
 8016cea:	200d      	movs	r0, #13
 8016cec:	183b      	adds	r3, r7, r0
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	411a      	asrs	r2, r3
 8016cf2:	0013      	movs	r3, r2
 8016cf4:	2201      	movs	r2, #1
 8016cf6:	4013      	ands	r3, r2
 8016cf8:	d036      	beq.n	8016d68 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016cfa:	240f      	movs	r4, #15
 8016cfc:	193b      	adds	r3, r7, r4
 8016cfe:	781a      	ldrb	r2, [r3, #0]
 8016d00:	183b      	adds	r3, r7, r0
 8016d02:	781b      	ldrb	r3, [r3, #0]
 8016d04:	18d3      	adds	r3, r2, r3
 8016d06:	001a      	movs	r2, r3
 8016d08:	0013      	movs	r3, r2
 8016d0a:	005b      	lsls	r3, r3, #1
 8016d0c:	189b      	adds	r3, r3, r2
 8016d0e:	009b      	lsls	r3, r3, #2
 8016d10:	001a      	movs	r2, r3
 8016d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d14:	189b      	adds	r3, r3, r2
 8016d16:	7a1b      	ldrb	r3, [r3, #8]
 8016d18:	011b      	lsls	r3, r3, #4
 8016d1a:	b25b      	sxtb	r3, r3
 8016d1c:	111b      	asrs	r3, r3, #4
 8016d1e:	b25b      	sxtb	r3, r3
 8016d20:	001a      	movs	r2, r3
 8016d22:	230f      	movs	r3, #15
 8016d24:	4013      	ands	r3, r2
 8016d26:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016d28:	193b      	adds	r3, r7, r4
 8016d2a:	781a      	ldrb	r2, [r3, #0]
 8016d2c:	183b      	adds	r3, r7, r0
 8016d2e:	781b      	ldrb	r3, [r3, #0]
 8016d30:	18d3      	adds	r3, r2, r3
 8016d32:	001a      	movs	r2, r3
 8016d34:	0013      	movs	r3, r2
 8016d36:	005b      	lsls	r3, r3, #1
 8016d38:	189b      	adds	r3, r3, r2
 8016d3a:	009b      	lsls	r3, r3, #2
 8016d3c:	001a      	movs	r2, r3
 8016d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d40:	189b      	adds	r3, r3, r2
 8016d42:	7a1b      	ldrb	r3, [r3, #8]
 8016d44:	b25b      	sxtb	r3, r3
 8016d46:	111b      	asrs	r3, r3, #4
 8016d48:	b25b      	sxtb	r3, r3
 8016d4a:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016d4c:	230f      	movs	r3, #15
 8016d4e:	4013      	ands	r3, r2
 8016d50:	b25a      	sxtb	r2, r3
 8016d52:	1dbb      	adds	r3, r7, #6
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	b25b      	sxtb	r3, r3
 8016d58:	0018      	movs	r0, r3
 8016d5a:	f000 f828 	bl	8016dae <RegionCommonValueInRange>
 8016d5e:	0003      	movs	r3, r0
 8016d60:	2b01      	cmp	r3, #1
 8016d62:	d101      	bne.n	8016d68 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016d64:	2301      	movs	r3, #1
 8016d66:	e01e      	b.n	8016da6 <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 8016d68:	210d      	movs	r1, #13
 8016d6a:	187b      	adds	r3, r7, r1
 8016d6c:	781a      	ldrb	r2, [r3, #0]
 8016d6e:	187b      	adds	r3, r7, r1
 8016d70:	3201      	adds	r2, #1
 8016d72:	701a      	strb	r2, [r3, #0]
 8016d74:	230d      	movs	r3, #13
 8016d76:	18fb      	adds	r3, r7, r3
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	2b0f      	cmp	r3, #15
 8016d7c:	d9ad      	bls.n	8016cda <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016d7e:	220f      	movs	r2, #15
 8016d80:	18bb      	adds	r3, r7, r2
 8016d82:	18ba      	adds	r2, r7, r2
 8016d84:	7812      	ldrb	r2, [r2, #0]
 8016d86:	3210      	adds	r2, #16
 8016d88:	701a      	strb	r2, [r3, #0]
 8016d8a:	210e      	movs	r1, #14
 8016d8c:	187b      	adds	r3, r7, r1
 8016d8e:	781a      	ldrb	r2, [r3, #0]
 8016d90:	187b      	adds	r3, r7, r1
 8016d92:	3201      	adds	r2, #1
 8016d94:	701a      	strb	r2, [r3, #0]
 8016d96:	230f      	movs	r3, #15
 8016d98:	18fa      	adds	r2, r7, r3
 8016d9a:	1dfb      	adds	r3, r7, #7
 8016d9c:	7812      	ldrb	r2, [r2, #0]
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d395      	bcc.n	8016cd0 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8016da4:	2300      	movs	r3, #0
}
 8016da6:	0018      	movs	r0, r3
 8016da8:	46bd      	mov	sp, r7
 8016daa:	b005      	add	sp, #20
 8016dac:	bd90      	pop	{r4, r7, pc}

08016dae <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016dae:	b590      	push	{r4, r7, lr}
 8016db0:	b083      	sub	sp, #12
 8016db2:	af00      	add	r7, sp, #0
 8016db4:	0004      	movs	r4, r0
 8016db6:	0008      	movs	r0, r1
 8016db8:	0011      	movs	r1, r2
 8016dba:	1dfb      	adds	r3, r7, #7
 8016dbc:	1c22      	adds	r2, r4, #0
 8016dbe:	701a      	strb	r2, [r3, #0]
 8016dc0:	1dbb      	adds	r3, r7, #6
 8016dc2:	1c02      	adds	r2, r0, #0
 8016dc4:	701a      	strb	r2, [r3, #0]
 8016dc6:	1d7b      	adds	r3, r7, #5
 8016dc8:	1c0a      	adds	r2, r1, #0
 8016dca:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8016dcc:	1dfa      	adds	r2, r7, #7
 8016dce:	1dbb      	adds	r3, r7, #6
 8016dd0:	7812      	ldrb	r2, [r2, #0]
 8016dd2:	b252      	sxtb	r2, r2
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	b25b      	sxtb	r3, r3
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	db09      	blt.n	8016df0 <RegionCommonValueInRange+0x42>
 8016ddc:	1dfa      	adds	r2, r7, #7
 8016dde:	1d7b      	adds	r3, r7, #5
 8016de0:	7812      	ldrb	r2, [r2, #0]
 8016de2:	b252      	sxtb	r2, r2
 8016de4:	781b      	ldrb	r3, [r3, #0]
 8016de6:	b25b      	sxtb	r3, r3
 8016de8:	429a      	cmp	r2, r3
 8016dea:	dc01      	bgt.n	8016df0 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8016dec:	2301      	movs	r3, #1
 8016dee:	e000      	b.n	8016df2 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8016df0:	2300      	movs	r3, #0
}
 8016df2:	0018      	movs	r0, r3
 8016df4:	46bd      	mov	sp, r7
 8016df6:	b003      	add	sp, #12
 8016df8:	bd90      	pop	{r4, r7, pc}

08016dfa <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016dfa:	b580      	push	{r7, lr}
 8016dfc:	b084      	sub	sp, #16
 8016dfe:	af00      	add	r7, sp, #0
 8016e00:	6078      	str	r0, [r7, #4]
 8016e02:	0008      	movs	r0, r1
 8016e04:	0011      	movs	r1, r2
 8016e06:	1cfb      	adds	r3, r7, #3
 8016e08:	1c02      	adds	r2, r0, #0
 8016e0a:	701a      	strb	r2, [r3, #0]
 8016e0c:	1cbb      	adds	r3, r7, #2
 8016e0e:	1c0a      	adds	r2, r1, #0
 8016e10:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8016e12:	210f      	movs	r1, #15
 8016e14:	187b      	adds	r3, r7, r1
 8016e16:	1cfa      	adds	r2, r7, #3
 8016e18:	7812      	ldrb	r2, [r2, #0]
 8016e1a:	0912      	lsrs	r2, r2, #4
 8016e1c:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016e1e:	1cbb      	adds	r3, r7, #2
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	091b      	lsrs	r3, r3, #4
 8016e24:	b2db      	uxtb	r3, r3
 8016e26:	187a      	adds	r2, r7, r1
 8016e28:	7812      	ldrb	r2, [r2, #0]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d805      	bhi.n	8016e3a <RegionCommonChanDisable+0x40>
 8016e2e:	1cfa      	adds	r2, r7, #3
 8016e30:	1cbb      	adds	r3, r7, #2
 8016e32:	7812      	ldrb	r2, [r2, #0]
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	429a      	cmp	r2, r3
 8016e38:	d301      	bcc.n	8016e3e <RegionCommonChanDisable+0x44>
    {
        return false;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	e01b      	b.n	8016e76 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016e3e:	200f      	movs	r0, #15
 8016e40:	183b      	adds	r3, r7, r0
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	005b      	lsls	r3, r3, #1
 8016e46:	687a      	ldr	r2, [r7, #4]
 8016e48:	18d3      	adds	r3, r2, r3
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	b21b      	sxth	r3, r3
 8016e4e:	1cfa      	adds	r2, r7, #3
 8016e50:	7812      	ldrb	r2, [r2, #0]
 8016e52:	210f      	movs	r1, #15
 8016e54:	400a      	ands	r2, r1
 8016e56:	2101      	movs	r1, #1
 8016e58:	4091      	lsls	r1, r2
 8016e5a:	000a      	movs	r2, r1
 8016e5c:	b212      	sxth	r2, r2
 8016e5e:	43d2      	mvns	r2, r2
 8016e60:	b212      	sxth	r2, r2
 8016e62:	4013      	ands	r3, r2
 8016e64:	b219      	sxth	r1, r3
 8016e66:	183b      	adds	r3, r7, r0
 8016e68:	781b      	ldrb	r3, [r3, #0]
 8016e6a:	005b      	lsls	r3, r3, #1
 8016e6c:	687a      	ldr	r2, [r7, #4]
 8016e6e:	18d3      	adds	r3, r2, r3
 8016e70:	b28a      	uxth	r2, r1
 8016e72:	801a      	strh	r2, [r3, #0]

    return true;
 8016e74:	2301      	movs	r3, #1
}
 8016e76:	0018      	movs	r0, r3
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	b004      	add	sp, #16
 8016e7c:	bd80      	pop	{r7, pc}

08016e7e <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016e7e:	b590      	push	{r4, r7, lr}
 8016e80:	b085      	sub	sp, #20
 8016e82:	af00      	add	r7, sp, #0
 8016e84:	6078      	str	r0, [r7, #4]
 8016e86:	0008      	movs	r0, r1
 8016e88:	0011      	movs	r1, r2
 8016e8a:	1cfb      	adds	r3, r7, #3
 8016e8c:	1c02      	adds	r2, r0, #0
 8016e8e:	701a      	strb	r2, [r3, #0]
 8016e90:	1cbb      	adds	r3, r7, #2
 8016e92:	1c0a      	adds	r2, r1, #0
 8016e94:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8016e96:	230f      	movs	r3, #15
 8016e98:	18fb      	adds	r3, r7, r3
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d101      	bne.n	8016ea8 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	e027      	b.n	8016ef8 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016ea8:	230e      	movs	r3, #14
 8016eaa:	18fb      	adds	r3, r7, r3
 8016eac:	1cfa      	adds	r2, r7, #3
 8016eae:	7812      	ldrb	r2, [r2, #0]
 8016eb0:	701a      	strb	r2, [r3, #0]
 8016eb2:	e017      	b.n	8016ee4 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016eb4:	240e      	movs	r4, #14
 8016eb6:	193b      	adds	r3, r7, r4
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	005b      	lsls	r3, r3, #1
 8016ebc:	687a      	ldr	r2, [r7, #4]
 8016ebe:	18d3      	adds	r3, r2, r3
 8016ec0:	881b      	ldrh	r3, [r3, #0]
 8016ec2:	2110      	movs	r1, #16
 8016ec4:	0018      	movs	r0, r3
 8016ec6:	f7ff fe6e 	bl	8016ba6 <CountChannels>
 8016eca:	0003      	movs	r3, r0
 8016ecc:	0019      	movs	r1, r3
 8016ece:	220f      	movs	r2, #15
 8016ed0:	18bb      	adds	r3, r7, r2
 8016ed2:	18ba      	adds	r2, r7, r2
 8016ed4:	7812      	ldrb	r2, [r2, #0]
 8016ed6:	188a      	adds	r2, r1, r2
 8016ed8:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016eda:	193b      	adds	r3, r7, r4
 8016edc:	781a      	ldrb	r2, [r3, #0]
 8016ede:	193b      	adds	r3, r7, r4
 8016ee0:	3201      	adds	r2, #1
 8016ee2:	701a      	strb	r2, [r3, #0]
 8016ee4:	230e      	movs	r3, #14
 8016ee6:	18fa      	adds	r2, r7, r3
 8016ee8:	1cbb      	adds	r3, r7, #2
 8016eea:	7812      	ldrb	r2, [r2, #0]
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	429a      	cmp	r2, r3
 8016ef0:	d3e0      	bcc.n	8016eb4 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8016ef2:	230f      	movs	r3, #15
 8016ef4:	18fb      	adds	r3, r7, r3
 8016ef6:	781b      	ldrb	r3, [r3, #0]
}
 8016ef8:	0018      	movs	r0, r3
 8016efa:	46bd      	mov	sp, r7
 8016efc:	b005      	add	sp, #20
 8016efe:	bd90      	pop	{r4, r7, pc}

08016f00 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b086      	sub	sp, #24
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	60b9      	str	r1, [r7, #8]
 8016f0a:	1dfb      	adds	r3, r7, #7
 8016f0c:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d020      	beq.n	8016f56 <RegionCommonChanMaskCopy+0x56>
 8016f14:	68bb      	ldr	r3, [r7, #8]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d01d      	beq.n	8016f56 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016f1a:	2317      	movs	r3, #23
 8016f1c:	18fb      	adds	r3, r7, r3
 8016f1e:	2200      	movs	r2, #0
 8016f20:	701a      	strb	r2, [r3, #0]
 8016f22:	e011      	b.n	8016f48 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016f24:	2017      	movs	r0, #23
 8016f26:	183b      	adds	r3, r7, r0
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	005b      	lsls	r3, r3, #1
 8016f2c:	68ba      	ldr	r2, [r7, #8]
 8016f2e:	18d2      	adds	r2, r2, r3
 8016f30:	183b      	adds	r3, r7, r0
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	005b      	lsls	r3, r3, #1
 8016f36:	68f9      	ldr	r1, [r7, #12]
 8016f38:	18cb      	adds	r3, r1, r3
 8016f3a:	8812      	ldrh	r2, [r2, #0]
 8016f3c:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016f3e:	183b      	adds	r3, r7, r0
 8016f40:	781a      	ldrb	r2, [r3, #0]
 8016f42:	183b      	adds	r3, r7, r0
 8016f44:	3201      	adds	r2, #1
 8016f46:	701a      	strb	r2, [r3, #0]
 8016f48:	2317      	movs	r3, #23
 8016f4a:	18fa      	adds	r2, r7, r3
 8016f4c:	1dfb      	adds	r3, r7, #7
 8016f4e:	7812      	ldrb	r2, [r2, #0]
 8016f50:	781b      	ldrb	r3, [r3, #0]
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d3e6      	bcc.n	8016f24 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8016f56:	46c0      	nop			; (mov r8, r8)
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	b006      	add	sp, #24
 8016f5c:	bd80      	pop	{r7, pc}

08016f5e <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016f5e:	b082      	sub	sp, #8
 8016f60:	b5b0      	push	{r4, r5, r7, lr}
 8016f62:	b086      	sub	sp, #24
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	60f8      	str	r0, [r7, #12]
 8016f68:	60b9      	str	r1, [r7, #8]
 8016f6a:	0011      	movs	r1, r2
 8016f6c:	2204      	movs	r2, #4
 8016f6e:	2028      	movs	r0, #40	; 0x28
 8016f70:	4684      	mov	ip, r0
 8016f72:	44bc      	add	ip, r7
 8016f74:	4462      	add	r2, ip
 8016f76:	6013      	str	r3, [r2, #0]
 8016f78:	1dfb      	adds	r3, r7, #7
 8016f7a:	1c0a      	adds	r2, r1, #0
 8016f7c:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016f7e:	2516      	movs	r5, #22
 8016f80:	197c      	adds	r4, r7, r5
 8016f82:	2304      	movs	r3, #4
 8016f84:	2228      	movs	r2, #40	; 0x28
 8016f86:	4694      	mov	ip, r2
 8016f88:	44bc      	add	ip, r7
 8016f8a:	4463      	add	r3, ip
 8016f8c:	1dfa      	adds	r2, r7, #7
 8016f8e:	7811      	ldrb	r1, [r2, #0]
 8016f90:	68f8      	ldr	r0, [r7, #12]
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	f7ff fd15 	bl	80169c4 <GetDutyCycle>
 8016f9a:	0003      	movs	r3, r0
 8016f9c:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	689a      	ldr	r2, [r3, #8]
 8016fa2:	197b      	adds	r3, r7, r5
 8016fa4:	881b      	ldrh	r3, [r3, #0]
 8016fa6:	68b9      	ldr	r1, [r7, #8]
 8016fa8:	434b      	muls	r3, r1
 8016faa:	429a      	cmp	r2, r3
 8016fac:	d909      	bls.n	8016fc2 <RegionCommonSetBandTxDone+0x64>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	689a      	ldr	r2, [r3, #8]
 8016fb2:	197b      	adds	r3, r7, r5
 8016fb4:	881b      	ldrh	r3, [r3, #0]
 8016fb6:	68b9      	ldr	r1, [r7, #8]
 8016fb8:	434b      	muls	r3, r1
 8016fba:	1ad2      	subs	r2, r2, r3
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016fc0:	e002      	b.n	8016fc8 <RegionCommonSetBandTxDone+0x6a>
        band->TimeCredits = 0;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	609a      	str	r2, [r3, #8]
}
 8016fc8:	46c0      	nop			; (mov r8, r8)
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	b006      	add	sp, #24
 8016fce:	bcb0      	pop	{r4, r5, r7}
 8016fd0:	bc08      	pop	{r3}
 8016fd2:	b002      	add	sp, #8
 8016fd4:	4718      	bx	r3

08016fd6 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd8:	46c6      	mov	lr, r8
 8016fda:	b500      	push	{lr}
 8016fdc:	b08c      	sub	sp, #48	; 0x30
 8016fde:	af04      	add	r7, sp, #16
 8016fe0:	0004      	movs	r4, r0
 8016fe2:	6039      	str	r1, [r7, #0]
 8016fe4:	0010      	movs	r0, r2
 8016fe6:	0019      	movs	r1, r3
 8016fe8:	1dfb      	adds	r3, r7, #7
 8016fea:	1c22      	adds	r2, r4, #0
 8016fec:	701a      	strb	r2, [r3, #0]
 8016fee:	1dbb      	adds	r3, r7, #6
 8016ff0:	1c02      	adds	r2, r0, #0
 8016ff2:	701a      	strb	r2, [r3, #0]
 8016ff4:	1d7b      	adds	r3, r7, #5
 8016ff6:	1c0a      	adds	r2, r1, #0
 8016ff8:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016ffa:	2301      	movs	r3, #1
 8016ffc:	425b      	negs	r3, r3
 8016ffe:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017000:	f005 fc4e 	bl	801c8a0 <UTIL_TIMER_GetCurrentTime>
 8017004:	0003      	movs	r3, r0
 8017006:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 8017008:	2300      	movs	r3, #0
 801700a:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 801700c:	230e      	movs	r3, #14
 801700e:	18fb      	adds	r3, r7, r3
 8017010:	2201      	movs	r2, #1
 8017012:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 8017014:	231b      	movs	r3, #27
 8017016:	18fb      	adds	r3, r7, r3
 8017018:	2200      	movs	r2, #0
 801701a:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 801701c:	231a      	movs	r3, #26
 801701e:	18fb      	adds	r3, r7, r3
 8017020:	2200      	movs	r2, #0
 8017022:	701a      	strb	r2, [r3, #0]
 8017024:	e089      	b.n	801713a <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017026:	231a      	movs	r3, #26
 8017028:	18fb      	adds	r3, r7, r3
 801702a:	781a      	ldrb	r2, [r3, #0]
 801702c:	0013      	movs	r3, r2
 801702e:	009b      	lsls	r3, r3, #2
 8017030:	189b      	adds	r3, r3, r2
 8017032:	009b      	lsls	r3, r3, #2
 8017034:	001a      	movs	r2, r3
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	469c      	mov	ip, r3
 801703a:	4494      	add	ip, r2
 801703c:	220e      	movs	r2, #14
 801703e:	18bc      	adds	r4, r7, r2
 8017040:	2138      	movs	r1, #56	; 0x38
 8017042:	000a      	movs	r2, r1
 8017044:	187b      	adds	r3, r7, r1
 8017046:	781e      	ldrb	r6, [r3, #0]
 8017048:	1d7b      	adds	r3, r7, #5
 801704a:	781d      	ldrb	r5, [r3, #0]
 801704c:	1dfb      	adds	r3, r7, #7
 801704e:	781b      	ldrb	r3, [r3, #0]
 8017050:	4698      	mov	r8, r3
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	9302      	str	r3, [sp, #8]
 8017056:	2304      	movs	r3, #4
 8017058:	18ba      	adds	r2, r7, r2
 801705a:	18d2      	adds	r2, r2, r3
 801705c:	466b      	mov	r3, sp
 801705e:	ca03      	ldmia	r2!, {r0, r1}
 8017060:	c303      	stmia	r3!, {r0, r1}
 8017062:	0033      	movs	r3, r6
 8017064:	002a      	movs	r2, r5
 8017066:	4641      	mov	r1, r8
 8017068:	4660      	mov	r0, ip
 801706a:	f7ff fd3b 	bl	8016ae4 <UpdateTimeCredits>
 801706e:	0003      	movs	r3, r0
 8017070:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017072:	220e      	movs	r2, #14
 8017074:	18bb      	adds	r3, r7, r2
 8017076:	881a      	ldrh	r2, [r3, #0]
 8017078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801707a:	4353      	muls	r3, r2
 801707c:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801707e:	231a      	movs	r3, #26
 8017080:	18fb      	adds	r3, r7, r3
 8017082:	781a      	ldrb	r2, [r3, #0]
 8017084:	0013      	movs	r3, r2
 8017086:	009b      	lsls	r3, r3, #2
 8017088:	189b      	adds	r3, r3, r2
 801708a:	009b      	lsls	r3, r3, #2
 801708c:	001a      	movs	r2, r3
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	189b      	adds	r3, r3, r2
 8017092:	689b      	ldr	r3, [r3, #8]
 8017094:	693a      	ldr	r2, [r7, #16]
 8017096:	429a      	cmp	r2, r3
 8017098:	d306      	bcc.n	80170a8 <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 801709a:	1d7b      	adds	r3, r7, #5
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	2201      	movs	r2, #1
 80170a0:	4053      	eors	r3, r2
 80170a2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d012      	beq.n	80170ce <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 80170a8:	231a      	movs	r3, #26
 80170aa:	18fb      	adds	r3, r7, r3
 80170ac:	781a      	ldrb	r2, [r3, #0]
 80170ae:	0013      	movs	r3, r2
 80170b0:	009b      	lsls	r3, r3, #2
 80170b2:	189b      	adds	r3, r3, r2
 80170b4:	009b      	lsls	r3, r3, #2
 80170b6:	001a      	movs	r2, r3
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	189b      	adds	r3, r3, r2
 80170bc:	2201      	movs	r2, #1
 80170be:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80170c0:	211b      	movs	r1, #27
 80170c2:	187b      	adds	r3, r7, r1
 80170c4:	781a      	ldrb	r2, [r3, #0]
 80170c6:	187b      	adds	r3, r7, r1
 80170c8:	3201      	adds	r2, #1
 80170ca:	701a      	strb	r2, [r3, #0]
 80170cc:	e02f      	b.n	801712e <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80170ce:	211a      	movs	r1, #26
 80170d0:	187b      	adds	r3, r7, r1
 80170d2:	781a      	ldrb	r2, [r3, #0]
 80170d4:	0013      	movs	r3, r2
 80170d6:	009b      	lsls	r3, r3, #2
 80170d8:	189b      	adds	r3, r3, r2
 80170da:	009b      	lsls	r3, r3, #2
 80170dc:	001a      	movs	r2, r3
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	189b      	adds	r3, r3, r2
 80170e2:	2200      	movs	r2, #0
 80170e4:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 80170e6:	187b      	adds	r3, r7, r1
 80170e8:	781a      	ldrb	r2, [r3, #0]
 80170ea:	0013      	movs	r3, r2
 80170ec:	009b      	lsls	r3, r3, #2
 80170ee:	189b      	adds	r3, r3, r2
 80170f0:	009b      	lsls	r3, r3, #2
 80170f2:	001a      	movs	r2, r3
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	189b      	adds	r3, r3, r2
 80170f8:	68db      	ldr	r3, [r3, #12]
 80170fa:	693a      	ldr	r2, [r7, #16]
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d216      	bcs.n	801712e <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017100:	187b      	adds	r3, r7, r1
 8017102:	781a      	ldrb	r2, [r3, #0]
 8017104:	0013      	movs	r3, r2
 8017106:	009b      	lsls	r3, r3, #2
 8017108:	189b      	adds	r3, r3, r2
 801710a:	009b      	lsls	r3, r3, #2
 801710c:	001a      	movs	r2, r3
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	189b      	adds	r3, r3, r2
 8017112:	689b      	ldr	r3, [r3, #8]
 8017114:	693a      	ldr	r2, [r7, #16]
 8017116:	1ad2      	subs	r2, r2, r3
 8017118:	69fb      	ldr	r3, [r7, #28]
 801711a:	4293      	cmp	r3, r2
 801711c:	d900      	bls.n	8017120 <RegionCommonUpdateBandTimeOff+0x14a>
 801711e:	0013      	movs	r3, r2
 8017120:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017122:	211b      	movs	r1, #27
 8017124:	187b      	adds	r3, r7, r1
 8017126:	781a      	ldrb	r2, [r3, #0]
 8017128:	187b      	adds	r3, r7, r1
 801712a:	3201      	adds	r2, #1
 801712c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 801712e:	211a      	movs	r1, #26
 8017130:	187b      	adds	r3, r7, r1
 8017132:	781a      	ldrb	r2, [r3, #0]
 8017134:	187b      	adds	r3, r7, r1
 8017136:	3201      	adds	r2, #1
 8017138:	701a      	strb	r2, [r3, #0]
 801713a:	231a      	movs	r3, #26
 801713c:	18fa      	adds	r2, r7, r3
 801713e:	1dbb      	adds	r3, r7, #6
 8017140:	7812      	ldrb	r2, [r2, #0]
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	429a      	cmp	r2, r3
 8017146:	d200      	bcs.n	801714a <RegionCommonUpdateBandTimeOff+0x174>
 8017148:	e76d      	b.n	8017026 <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 801714a:	231b      	movs	r3, #27
 801714c:	18fb      	adds	r3, r7, r3
 801714e:	781b      	ldrb	r3, [r3, #0]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d102      	bne.n	801715a <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017154:	2301      	movs	r3, #1
 8017156:	425b      	negs	r3, r3
 8017158:	e000      	b.n	801715c <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 801715a:	69fb      	ldr	r3, [r7, #28]
}
 801715c:	0018      	movs	r0, r3
 801715e:	46bd      	mov	sp, r7
 8017160:	b008      	add	sp, #32
 8017162:	bc80      	pop	{r7}
 8017164:	46b8      	mov	r8, r7
 8017166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017168 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b084      	sub	sp, #16
 801716c:	af00      	add	r7, sp, #0
 801716e:	6078      	str	r0, [r7, #4]
 8017170:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017172:	210f      	movs	r1, #15
 8017174:	187b      	adds	r3, r7, r1
 8017176:	2200      	movs	r2, #0
 8017178:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	2b03      	cmp	r3, #3
 8017180:	d140      	bne.n	8017204 <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	3301      	adds	r3, #1
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	b25a      	sxtb	r2, r3
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	785b      	ldrb	r3, [r3, #1]
 8017192:	b25b      	sxtb	r3, r3
 8017194:	220f      	movs	r2, #15
 8017196:	4013      	ands	r3, r2
 8017198:	b25a      	sxtb	r2, r3
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	785b      	ldrb	r3, [r3, #1]
 80171a2:	b25b      	sxtb	r3, r3
 80171a4:	b2db      	uxtb	r3, r3
 80171a6:	091b      	lsrs	r3, r3, #4
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	b25a      	sxtb	r2, r3
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	3302      	adds	r3, #2
 80171b4:	781b      	ldrb	r3, [r3, #0]
 80171b6:	b29a      	uxth	r2, r3
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	889b      	ldrh	r3, [r3, #4]
 80171c0:	b21a      	sxth	r2, r3
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	3303      	adds	r3, #3
 80171c6:	781b      	ldrb	r3, [r3, #0]
 80171c8:	021b      	lsls	r3, r3, #8
 80171ca:	b21b      	sxth	r3, r3
 80171cc:	4313      	orrs	r3, r2
 80171ce:	b21b      	sxth	r3, r3
 80171d0:	b29a      	uxth	r2, r3
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	791a      	ldrb	r2, [r3, #4]
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	091b      	lsrs	r3, r3, #4
 80171e4:	b2db      	uxtb	r3, r3
 80171e6:	2207      	movs	r2, #7
 80171e8:	4013      	ands	r3, r2
 80171ea:	b2da      	uxtb	r2, r3
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	220f      	movs	r2, #15
 80171f6:	4013      	ands	r3, r2
 80171f8:	b2da      	uxtb	r2, r3
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80171fe:	187b      	adds	r3, r7, r1
 8017200:	2205      	movs	r2, #5
 8017202:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8017204:	230f      	movs	r3, #15
 8017206:	18fb      	adds	r3, r7, r3
 8017208:	781b      	ldrb	r3, [r3, #0]
}
 801720a:	0018      	movs	r0, r3
 801720c:	46bd      	mov	sp, r7
 801720e:	b004      	add	sp, #16
 8017210:	bd80      	pop	{r7, pc}

08017212 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017214:	b089      	sub	sp, #36	; 0x24
 8017216:	af02      	add	r7, sp, #8
 8017218:	60f8      	str	r0, [r7, #12]
 801721a:	60b9      	str	r1, [r7, #8]
 801721c:	607a      	str	r2, [r7, #4]
 801721e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017220:	2317      	movs	r3, #23
 8017222:	18fb      	adds	r3, r7, r3
 8017224:	68fa      	ldr	r2, [r7, #12]
 8017226:	7912      	ldrb	r2, [r2, #4]
 8017228:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 801722a:	2116      	movs	r1, #22
 801722c:	187b      	adds	r3, r7, r1
 801722e:	68fa      	ldr	r2, [r7, #12]
 8017230:	7992      	ldrb	r2, [r2, #6]
 8017232:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8017234:	2015      	movs	r0, #21
 8017236:	183b      	adds	r3, r7, r0
 8017238:	68fa      	ldr	r2, [r7, #12]
 801723a:	79d2      	ldrb	r2, [r2, #7]
 801723c:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	7a1a      	ldrb	r2, [r3, #8]
 8017242:	2414      	movs	r4, #20
 8017244:	193b      	adds	r3, r7, r4
 8017246:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	795b      	ldrb	r3, [r3, #5]
 801724c:	2201      	movs	r2, #1
 801724e:	4053      	eors	r3, r2
 8017250:	b2db      	uxtb	r3, r3
 8017252:	2b00      	cmp	r3, #0
 8017254:	d00b      	beq.n	801726e <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017256:	193b      	adds	r3, r7, r4
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	7ad2      	ldrb	r2, [r2, #11]
 801725c:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 801725e:	187b      	adds	r3, r7, r1
 8017260:	68fa      	ldr	r2, [r7, #12]
 8017262:	7a52      	ldrb	r2, [r2, #9]
 8017264:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8017266:	183b      	adds	r3, r7, r0
 8017268:	68fa      	ldr	r2, [r7, #12]
 801726a:	7a92      	ldrb	r2, [r2, #10]
 801726c:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 801726e:	2617      	movs	r6, #23
 8017270:	19bb      	adds	r3, r7, r6
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d046      	beq.n	8017306 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	7b18      	ldrb	r0, [r3, #12]
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	691c      	ldr	r4, [r3, #16]
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	2514      	movs	r5, #20
 8017284:	575d      	ldrsb	r5, [r3, r5]
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	2215      	movs	r2, #21
 801728a:	569a      	ldrsb	r2, [r3, r2]
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	699b      	ldr	r3, [r3, #24]
 8017290:	2116      	movs	r1, #22
 8017292:	1879      	adds	r1, r7, r1
 8017294:	7809      	ldrb	r1, [r1, #0]
 8017296:	b249      	sxtb	r1, r1
 8017298:	9301      	str	r3, [sp, #4]
 801729a:	9200      	str	r2, [sp, #0]
 801729c:	002b      	movs	r3, r5
 801729e:	000a      	movs	r2, r1
 80172a0:	0021      	movs	r1, r4
 80172a2:	f7ff fceb 	bl	8016c7c <RegionCommonChanVerifyDr>
 80172a6:	0003      	movs	r3, r0
 80172a8:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80172aa:	2301      	movs	r3, #1
 80172ac:	4053      	eors	r3, r2
 80172ae:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d005      	beq.n	80172c0 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 80172b4:	19bb      	adds	r3, r7, r6
 80172b6:	19ba      	adds	r2, r7, r6
 80172b8:	7812      	ldrb	r2, [r2, #0]
 80172ba:	2102      	movs	r1, #2
 80172bc:	438a      	bics	r2, r1
 80172be:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	211d      	movs	r1, #29
 80172c4:	5659      	ldrsb	r1, [r3, r1]
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	221c      	movs	r2, #28
 80172ca:	569a      	ldrsb	r2, [r3, r2]
 80172cc:	2415      	movs	r4, #21
 80172ce:	193b      	adds	r3, r7, r4
 80172d0:	781b      	ldrb	r3, [r3, #0]
 80172d2:	b25b      	sxtb	r3, r3
 80172d4:	0018      	movs	r0, r3
 80172d6:	f7ff fd6a 	bl	8016dae <RegionCommonValueInRange>
 80172da:	1e03      	subs	r3, r0, #0
 80172dc:	d113      	bne.n	8017306 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	7f5b      	ldrb	r3, [r3, #29]
 80172e2:	b25b      	sxtb	r3, r3
 80172e4:	193a      	adds	r2, r7, r4
 80172e6:	7812      	ldrb	r2, [r2, #0]
 80172e8:	b252      	sxtb	r2, r2
 80172ea:	429a      	cmp	r2, r3
 80172ec:	da04      	bge.n	80172f8 <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80172ee:	193b      	adds	r3, r7, r4
 80172f0:	68fa      	ldr	r2, [r7, #12]
 80172f2:	7f52      	ldrb	r2, [r2, #29]
 80172f4:	701a      	strb	r2, [r3, #0]
 80172f6:	e006      	b.n	8017306 <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80172f8:	2217      	movs	r2, #23
 80172fa:	18bb      	adds	r3, r7, r2
 80172fc:	18ba      	adds	r2, r7, r2
 80172fe:	7812      	ldrb	r2, [r2, #0]
 8017300:	2104      	movs	r1, #4
 8017302:	438a      	bics	r2, r1
 8017304:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017306:	2317      	movs	r3, #23
 8017308:	18fb      	adds	r3, r7, r3
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	2b07      	cmp	r3, #7
 801730e:	d108      	bne.n	8017322 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8017310:	2214      	movs	r2, #20
 8017312:	18bb      	adds	r3, r7, r2
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	b25b      	sxtb	r3, r3
 8017318:	2b00      	cmp	r3, #0
 801731a:	d102      	bne.n	8017322 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801731c:	18bb      	adds	r3, r7, r2
 801731e:	2201      	movs	r2, #1
 8017320:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8017322:	68bb      	ldr	r3, [r7, #8]
 8017324:	2216      	movs	r2, #22
 8017326:	18ba      	adds	r2, r7, r2
 8017328:	7812      	ldrb	r2, [r2, #0]
 801732a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2215      	movs	r2, #21
 8017330:	18ba      	adds	r2, r7, r2
 8017332:	7812      	ldrb	r2, [r2, #0]
 8017334:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017336:	2314      	movs	r3, #20
 8017338:	18fb      	adds	r3, r7, r3
 801733a:	781a      	ldrb	r2, [r3, #0]
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	701a      	strb	r2, [r3, #0]

    return status;
 8017340:	2317      	movs	r3, #23
 8017342:	18fb      	adds	r3, r7, r3
 8017344:	781b      	ldrb	r3, [r3, #0]
}
 8017346:	0018      	movs	r0, r3
 8017348:	46bd      	mov	sp, r7
 801734a:	b007      	add	sp, #28
 801734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017350 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	0002      	movs	r2, r0
 8017358:	6039      	str	r1, [r7, #0]
 801735a:	1dfb      	adds	r3, r7, #7
 801735c:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 801735e:	6839      	ldr	r1, [r7, #0]
 8017360:	4806      	ldr	r0, [pc, #24]	; (801737c <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 8017362:	f7e8 fee3 	bl	800012c <__udivsi3>
 8017366:	0003      	movs	r3, r0
 8017368:	001a      	movs	r2, r3
 801736a:	1dfb      	adds	r3, r7, #7
 801736c:	781b      	ldrb	r3, [r3, #0]
 801736e:	409a      	lsls	r2, r3
 8017370:	0013      	movs	r3, r2
}
 8017372:	0018      	movs	r0, r3
 8017374:	46bd      	mov	sp, r7
 8017376:	b002      	add	sp, #8
 8017378:	bd80      	pop	{r7, pc}
 801737a:	46c0      	nop			; (mov r8, r8)
 801737c:	3b9aca00 	.word	0x3b9aca00

08017380 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b082      	sub	sp, #8
 8017384:	af00      	add	r7, sp, #0
 8017386:	0002      	movs	r2, r0
 8017388:	1dfb      	adds	r3, r7, #7
 801738a:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 801738c:	4b02      	ldr	r3, [pc, #8]	; (8017398 <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 801738e:	0018      	movs	r0, r3
 8017390:	46bd      	mov	sp, r7
 8017392:	b002      	add	sp, #8
 8017394:	bd80      	pop	{r7, pc}
 8017396:	46c0      	nop			; (mov r8, r8)
 8017398:	00027100 	.word	0x00027100

0801739c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 801739c:	b5b0      	push	{r4, r5, r7, lr}
 801739e:	b084      	sub	sp, #16
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	60f8      	str	r0, [r7, #12]
 80173a4:	607a      	str	r2, [r7, #4]
 80173a6:	603b      	str	r3, [r7, #0]
 80173a8:	200b      	movs	r0, #11
 80173aa:	183b      	adds	r3, r7, r0
 80173ac:	1c0a      	adds	r2, r1, #0
 80173ae:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 80173b0:	0002      	movs	r2, r0
 80173b2:	18bb      	adds	r3, r7, r2
 80173b4:	781d      	ldrb	r5, [r3, #0]
 80173b6:	18bb      	adds	r3, r7, r2
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	4a1c      	ldr	r2, [pc, #112]	; (801742c <RegionCommonComputeRxWindowParameters+0x90>)
 80173bc:	4694      	mov	ip, r2
 80173be:	4463      	add	r3, ip
 80173c0:	005c      	lsls	r4, r3, #1
 80173c2:	6879      	ldr	r1, [r7, #4]
 80173c4:	000a      	movs	r2, r1
 80173c6:	0152      	lsls	r2, r2, #5
 80173c8:	1a52      	subs	r2, r2, r1
 80173ca:	0193      	lsls	r3, r2, #6
 80173cc:	1a9b      	subs	r3, r3, r2
 80173ce:	00db      	lsls	r3, r3, #3
 80173d0:	185b      	adds	r3, r3, r1
 80173d2:	01db      	lsls	r3, r3, #7
 80173d4:	001a      	movs	r2, r3
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	18d3      	adds	r3, r2, r3
 80173da:	3b01      	subs	r3, #1
 80173dc:	68f9      	ldr	r1, [r7, #12]
 80173de:	0018      	movs	r0, r3
 80173e0:	f7e8 fea4 	bl	800012c <__udivsi3>
 80173e4:	0003      	movs	r3, r0
 80173e6:	18e2      	adds	r2, r4, r3
 80173e8:	002b      	movs	r3, r5
 80173ea:	4293      	cmp	r3, r2
 80173ec:	d200      	bcs.n	80173f0 <RegionCommonComputeRxWindowParameters+0x54>
 80173ee:	0013      	movs	r3, r2
 80173f0:	6a3a      	ldr	r2, [r7, #32]
 80173f2:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	009a      	lsls	r2, r3, #2
 80173f8:	6a3b      	ldr	r3, [r7, #32]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	68f9      	ldr	r1, [r7, #12]
 80173fe:	434b      	muls	r3, r1
 8017400:	085b      	lsrs	r3, r3, #1
 8017402:	1ad3      	subs	r3, r2, r3
 8017404:	4a0a      	ldr	r2, [pc, #40]	; (8017430 <RegionCommonComputeRxWindowParameters+0x94>)
 8017406:	4694      	mov	ip, r2
 8017408:	4463      	add	r3, ip
 801740a:	490a      	ldr	r1, [pc, #40]	; (8017434 <RegionCommonComputeRxWindowParameters+0x98>)
 801740c:	0018      	movs	r0, r3
 801740e:	f7e8 ff17 	bl	8000240 <__divsi3>
 8017412:	0003      	movs	r3, r0
 8017414:	001a      	movs	r2, r3
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	1ad3      	subs	r3, r2, r3
 801741a:	3b01      	subs	r3, #1
 801741c:	001a      	movs	r2, r3
 801741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017420:	601a      	str	r2, [r3, #0]
}
 8017422:	46c0      	nop			; (mov r8, r8)
 8017424:	46bd      	mov	sp, r7
 8017426:	b004      	add	sp, #16
 8017428:	bdb0      	pop	{r4, r5, r7, pc}
 801742a:	46c0      	nop			; (mov r8, r8)
 801742c:	7ffffffc 	.word	0x7ffffffc
 8017430:	000f423f 	.word	0x000f423f
 8017434:	000f4240 	.word	0x000f4240

08017438 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017438:	b5b0      	push	{r4, r5, r7, lr}
 801743a:	b086      	sub	sp, #24
 801743c:	af00      	add	r7, sp, #0
 801743e:	60b9      	str	r1, [r7, #8]
 8017440:	607a      	str	r2, [r7, #4]
 8017442:	210f      	movs	r1, #15
 8017444:	187b      	adds	r3, r7, r1
 8017446:	1c02      	adds	r2, r0, #0
 8017448:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 801744a:	2417      	movs	r4, #23
 801744c:	193b      	adds	r3, r7, r4
 801744e:	2200      	movs	r2, #0
 8017450:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017452:	187b      	adds	r3, r7, r1
 8017454:	781b      	ldrb	r3, [r3, #0]
 8017456:	b25b      	sxtb	r3, r3
 8017458:	005b      	lsls	r3, r3, #1
 801745a:	0018      	movs	r0, r3
 801745c:	f7e9 fdd8 	bl	8001010 <__aeabi_ui2f>
 8017460:	1c03      	adds	r3, r0, #0
 8017462:	1c19      	adds	r1, r3, #0
 8017464:	68b8      	ldr	r0, [r7, #8]
 8017466:	f7e9 fba5 	bl	8000bb4 <__aeabi_fsub>
 801746a:	1c03      	adds	r3, r0, #0
 801746c:	6879      	ldr	r1, [r7, #4]
 801746e:	1c18      	adds	r0, r3, #0
 8017470:	f7e9 fba0 	bl	8000bb4 <__aeabi_fsub>
 8017474:	1c03      	adds	r3, r0, #0
 8017476:	1c18      	adds	r0, r3, #0
 8017478:	f7eb fc00 	bl	8002c7c <__aeabi_f2d>
 801747c:	0002      	movs	r2, r0
 801747e:	000b      	movs	r3, r1
 8017480:	0010      	movs	r0, r2
 8017482:	0019      	movs	r1, r3
 8017484:	f006 fea6 	bl	801e1d4 <floor>
 8017488:	0002      	movs	r2, r0
 801748a:	000b      	movs	r3, r1
 801748c:	0025      	movs	r5, r4
 801748e:	193c      	adds	r4, r7, r4
 8017490:	0010      	movs	r0, r2
 8017492:	0019      	movs	r1, r3
 8017494:	f7eb fb66 	bl	8002b64 <__aeabi_d2iz>
 8017498:	0003      	movs	r3, r0
 801749a:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 801749c:	197b      	adds	r3, r7, r5
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	b25b      	sxtb	r3, r3
}
 80174a2:	0018      	movs	r0, r3
 80174a4:	46bd      	mov	sp, r7
 80174a6:	b006      	add	sp, #24
 80174a8:	bdb0      	pop	{r4, r5, r7, pc}

080174aa <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80174aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174ac:	b087      	sub	sp, #28
 80174ae:	af00      	add	r7, sp, #0
 80174b0:	60f8      	str	r0, [r7, #12]
 80174b2:	60b9      	str	r1, [r7, #8]
 80174b4:	607a      	str	r2, [r7, #4]
 80174b6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80174b8:	2317      	movs	r3, #23
 80174ba:	18fb      	adds	r3, r7, r3
 80174bc:	2200      	movs	r2, #0
 80174be:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 80174c0:	2316      	movs	r3, #22
 80174c2:	18fb      	adds	r3, r7, r3
 80174c4:	2200      	movs	r2, #0
 80174c6:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80174c8:	2315      	movs	r3, #21
 80174ca:	18fb      	adds	r3, r7, r3
 80174cc:	2200      	movs	r2, #0
 80174ce:	701a      	strb	r2, [r3, #0]
 80174d0:	2314      	movs	r3, #20
 80174d2:	18fb      	adds	r3, r7, r3
 80174d4:	2200      	movs	r2, #0
 80174d6:	701a      	strb	r2, [r3, #0]
 80174d8:	e0bf      	b.n	801765a <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80174da:	2313      	movs	r3, #19
 80174dc:	18fb      	adds	r3, r7, r3
 80174de:	2200      	movs	r2, #0
 80174e0:	701a      	strb	r2, [r3, #0]
 80174e2:	e0a8      	b.n	8017636 <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	685a      	ldr	r2, [r3, #4]
 80174e8:	2314      	movs	r3, #20
 80174ea:	18fb      	adds	r3, r7, r3
 80174ec:	781b      	ldrb	r3, [r3, #0]
 80174ee:	005b      	lsls	r3, r3, #1
 80174f0:	18d3      	adds	r3, r2, r3
 80174f2:	881b      	ldrh	r3, [r3, #0]
 80174f4:	001a      	movs	r2, r3
 80174f6:	2013      	movs	r0, #19
 80174f8:	183b      	adds	r3, r7, r0
 80174fa:	781b      	ldrb	r3, [r3, #0]
 80174fc:	411a      	asrs	r2, r3
 80174fe:	0013      	movs	r3, r2
 8017500:	2201      	movs	r2, #1
 8017502:	4013      	ands	r3, r2
 8017504:	d100      	bne.n	8017508 <RegionCommonCountNbOfEnabledChannels+0x5e>
 8017506:	e090      	b.n	801762a <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	689a      	ldr	r2, [r3, #8]
 801750c:	2315      	movs	r3, #21
 801750e:	18fb      	adds	r3, r7, r3
 8017510:	7819      	ldrb	r1, [r3, #0]
 8017512:	183b      	adds	r3, r7, r0
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	18cb      	adds	r3, r1, r3
 8017518:	0019      	movs	r1, r3
 801751a:	000b      	movs	r3, r1
 801751c:	005b      	lsls	r3, r3, #1
 801751e:	185b      	adds	r3, r3, r1
 8017520:	009b      	lsls	r3, r3, #2
 8017522:	18d3      	adds	r3, r2, r3
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d100      	bne.n	801752c <RegionCommonCountNbOfEnabledChannels+0x82>
 801752a:	e079      	b.n	8017620 <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	781b      	ldrb	r3, [r3, #0]
 8017530:	2201      	movs	r2, #1
 8017532:	4053      	eors	r3, r2
 8017534:	b2db      	uxtb	r3, r3
 8017536:	2b00      	cmp	r3, #0
 8017538:	d00d      	beq.n	8017556 <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801753e:	2b00      	cmp	r3, #0
 8017540:	d009      	beq.n	8017556 <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	8a5b      	ldrh	r3, [r3, #18]
 8017546:	001a      	movs	r2, r3
 8017548:	183b      	adds	r3, r7, r0
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	411a      	asrs	r2, r3
 801754e:	0013      	movs	r3, r2
 8017550:	2201      	movs	r2, #1
 8017552:	4013      	ands	r3, r2
 8017554:	d066      	beq.n	8017624 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	785b      	ldrb	r3, [r3, #1]
 801755a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	689a      	ldr	r2, [r3, #8]
 8017560:	2515      	movs	r5, #21
 8017562:	197b      	adds	r3, r7, r5
 8017564:	7819      	ldrb	r1, [r3, #0]
 8017566:	2613      	movs	r6, #19
 8017568:	19bb      	adds	r3, r7, r6
 801756a:	781b      	ldrb	r3, [r3, #0]
 801756c:	18cb      	adds	r3, r1, r3
 801756e:	0019      	movs	r1, r3
 8017570:	000b      	movs	r3, r1
 8017572:	005b      	lsls	r3, r3, #1
 8017574:	185b      	adds	r3, r3, r1
 8017576:	009b      	lsls	r3, r3, #2
 8017578:	18d3      	adds	r3, r2, r3
 801757a:	7a1b      	ldrb	r3, [r3, #8]
 801757c:	011b      	lsls	r3, r3, #4
 801757e:	b25b      	sxtb	r3, r3
 8017580:	111b      	asrs	r3, r3, #4
 8017582:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017584:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	689a      	ldr	r2, [r3, #8]
 801758a:	197b      	adds	r3, r7, r5
 801758c:	7819      	ldrb	r1, [r3, #0]
 801758e:	19bb      	adds	r3, r7, r6
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	18cb      	adds	r3, r1, r3
 8017594:	0019      	movs	r1, r3
 8017596:	000b      	movs	r3, r1
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	185b      	adds	r3, r3, r1
 801759c:	009b      	lsls	r3, r3, #2
 801759e:	18d3      	adds	r3, r2, r3
 80175a0:	7a1b      	ldrb	r3, [r3, #8]
 80175a2:	b25b      	sxtb	r3, r3
 80175a4:	111b      	asrs	r3, r3, #4
 80175a6:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80175a8:	001a      	movs	r2, r3
 80175aa:	0021      	movs	r1, r4
 80175ac:	f7ff fbff 	bl	8016dae <RegionCommonValueInRange>
 80175b0:	1e03      	subs	r3, r0, #0
 80175b2:	d039      	beq.n	8017628 <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	68da      	ldr	r2, [r3, #12]
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	6899      	ldr	r1, [r3, #8]
 80175bc:	197b      	adds	r3, r7, r5
 80175be:	7818      	ldrb	r0, [r3, #0]
 80175c0:	19bb      	adds	r3, r7, r6
 80175c2:	781b      	ldrb	r3, [r3, #0]
 80175c4:	18c3      	adds	r3, r0, r3
 80175c6:	0018      	movs	r0, r3
 80175c8:	0003      	movs	r3, r0
 80175ca:	005b      	lsls	r3, r3, #1
 80175cc:	181b      	adds	r3, r3, r0
 80175ce:	009b      	lsls	r3, r3, #2
 80175d0:	18cb      	adds	r3, r1, r3
 80175d2:	7a5b      	ldrb	r3, [r3, #9]
 80175d4:	0019      	movs	r1, r3
 80175d6:	000b      	movs	r3, r1
 80175d8:	009b      	lsls	r3, r3, #2
 80175da:	185b      	adds	r3, r3, r1
 80175dc:	009b      	lsls	r3, r3, #2
 80175de:	18d3      	adds	r3, r2, r3
 80175e0:	7c1b      	ldrb	r3, [r3, #16]
 80175e2:	2201      	movs	r2, #1
 80175e4:	4053      	eors	r3, r2
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d006      	beq.n	80175fa <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80175ec:	2116      	movs	r1, #22
 80175ee:	187b      	adds	r3, r7, r1
 80175f0:	781a      	ldrb	r2, [r3, #0]
 80175f2:	187b      	adds	r3, r7, r1
 80175f4:	3201      	adds	r2, #1
 80175f6:	701a      	strb	r2, [r3, #0]
                    continue;
 80175f8:	e017      	b.n	801762a <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80175fa:	2217      	movs	r2, #23
 80175fc:	18bb      	adds	r3, r7, r2
 80175fe:	781b      	ldrb	r3, [r3, #0]
 8017600:	18ba      	adds	r2, r7, r2
 8017602:	1c59      	adds	r1, r3, #1
 8017604:	7011      	strb	r1, [r2, #0]
 8017606:	001a      	movs	r2, r3
 8017608:	68bb      	ldr	r3, [r7, #8]
 801760a:	189b      	adds	r3, r3, r2
 801760c:	2215      	movs	r2, #21
 801760e:	18b9      	adds	r1, r7, r2
 8017610:	2213      	movs	r2, #19
 8017612:	18ba      	adds	r2, r7, r2
 8017614:	7809      	ldrb	r1, [r1, #0]
 8017616:	7812      	ldrb	r2, [r2, #0]
 8017618:	188a      	adds	r2, r1, r2
 801761a:	b2d2      	uxtb	r2, r2
 801761c:	701a      	strb	r2, [r3, #0]
 801761e:	e004      	b.n	801762a <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017620:	46c0      	nop			; (mov r8, r8)
 8017622:	e002      	b.n	801762a <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8017624:	46c0      	nop			; (mov r8, r8)
 8017626:	e000      	b.n	801762a <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017628:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801762a:	2113      	movs	r1, #19
 801762c:	187b      	adds	r3, r7, r1
 801762e:	781a      	ldrb	r2, [r3, #0]
 8017630:	187b      	adds	r3, r7, r1
 8017632:	3201      	adds	r2, #1
 8017634:	701a      	strb	r2, [r3, #0]
 8017636:	2313      	movs	r3, #19
 8017638:	18fb      	adds	r3, r7, r3
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	2b0f      	cmp	r3, #15
 801763e:	d800      	bhi.n	8017642 <RegionCommonCountNbOfEnabledChannels+0x198>
 8017640:	e750      	b.n	80174e4 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017642:	2215      	movs	r2, #21
 8017644:	18bb      	adds	r3, r7, r2
 8017646:	18ba      	adds	r2, r7, r2
 8017648:	7812      	ldrb	r2, [r2, #0]
 801764a:	3210      	adds	r2, #16
 801764c:	701a      	strb	r2, [r3, #0]
 801764e:	2114      	movs	r1, #20
 8017650:	187b      	adds	r3, r7, r1
 8017652:	781a      	ldrb	r2, [r3, #0]
 8017654:	187b      	adds	r3, r7, r1
 8017656:	3201      	adds	r2, #1
 8017658:	701a      	strb	r2, [r3, #0]
 801765a:	2315      	movs	r3, #21
 801765c:	18fb      	adds	r3, r7, r3
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	b29a      	uxth	r2, r3
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	8a1b      	ldrh	r3, [r3, #16]
 8017666:	429a      	cmp	r2, r3
 8017668:	d200      	bcs.n	801766c <RegionCommonCountNbOfEnabledChannels+0x1c2>
 801766a:	e736      	b.n	80174da <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2217      	movs	r2, #23
 8017670:	18ba      	adds	r2, r7, r2
 8017672:	7812      	ldrb	r2, [r2, #0]
 8017674:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	2216      	movs	r2, #22
 801767a:	18ba      	adds	r2, r7, r2
 801767c:	7812      	ldrb	r2, [r2, #0]
 801767e:	701a      	strb	r2, [r3, #0]
}
 8017680:	46c0      	nop			; (mov r8, r8)
 8017682:	46bd      	mov	sp, r7
 8017684:	b007      	add	sp, #28
 8017686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017688 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801768a:	46c6      	mov	lr, r8
 801768c:	b500      	push	{lr}
 801768e:	b08a      	sub	sp, #40	; 0x28
 8017690:	af04      	add	r7, sp, #16
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
 8017698:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	685b      	ldr	r3, [r3, #4]
 801769e:	0018      	movs	r0, r3
 80176a0:	f005 f912 	bl	801c8c8 <UTIL_TIMER_GetElapsedTime>
 80176a4:	0003      	movs	r3, r0
 80176a6:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	681a      	ldr	r2, [r3, #0]
 80176ac:	697b      	ldr	r3, [r7, #20]
 80176ae:	1ad2      	subs	r2, r2, r3
 80176b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176b2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80176b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b6:	2201      	movs	r2, #1
 80176b8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	2200      	movs	r2, #0
 80176be:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	685b      	ldr	r3, [r3, #4]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d004      	beq.n	80176d2 <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80176cc:	697a      	ldr	r2, [r7, #20]
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d32b      	bcc.n	801772a <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80176d2:	68bb      	ldr	r3, [r7, #8]
 80176d4:	2200      	movs	r2, #0
 80176d6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	69db      	ldr	r3, [r3, #28]
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80176e4:	68dc      	ldr	r4, [r3, #12]
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	7a5d      	ldrb	r5, [r3, #9]
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	7a1e      	ldrb	r6, [r3, #8]
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	7d1b      	ldrb	r3, [r3, #20]
 80176f2:	4698      	mov	r8, r3
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	699b      	ldr	r3, [r3, #24]
 80176f8:	9303      	str	r3, [sp, #12]
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	2204      	movs	r2, #4
 80176fe:	446a      	add	r2, sp
 8017700:	330c      	adds	r3, #12
 8017702:	cb03      	ldmia	r3!, {r0, r1}
 8017704:	c203      	stmia	r2!, {r0, r1}
 8017706:	4643      	mov	r3, r8
 8017708:	9300      	str	r3, [sp, #0]
 801770a:	0033      	movs	r3, r6
 801770c:	002a      	movs	r2, r5
 801770e:	0021      	movs	r1, r4
 8017710:	4660      	mov	r0, ip
 8017712:	f7ff fc60 	bl	8016fd6 <RegionCommonUpdateBandTimeOff>
 8017716:	0002      	movs	r2, r0
 8017718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801771a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	69d8      	ldr	r0, [r3, #28]
 8017720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017722:	683a      	ldr	r2, [r7, #0]
 8017724:	6879      	ldr	r1, [r7, #4]
 8017726:	f7ff fec0 	bl	80174aa <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	781b      	ldrb	r3, [r3, #0]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d004      	beq.n	801773c <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 8017732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017734:	2200      	movs	r2, #0
 8017736:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017738:	2300      	movs	r3, #0
 801773a:	e006      	b.n	801774a <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 801773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773e:	781b      	ldrb	r3, [r3, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d001      	beq.n	8017748 <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017744:	230b      	movs	r3, #11
 8017746:	e000      	b.n	801774a <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017748:	230c      	movs	r3, #12
    }
}
 801774a:	0018      	movs	r0, r3
 801774c:	46bd      	mov	sp, r7
 801774e:	b006      	add	sp, #24
 8017750:	bc80      	pop	{r7}
 8017752:	46b8      	mov	r8, r7
 8017754:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017758 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017758:	b5b0      	push	{r4, r5, r7, lr}
 801775a:	b08c      	sub	sp, #48	; 0x30
 801775c:	af04      	add	r7, sp, #16
 801775e:	6039      	str	r1, [r7, #0]
 8017760:	0011      	movs	r1, r2
 8017762:	1dfb      	adds	r3, r7, #7
 8017764:	1c02      	adds	r2, r0, #0
 8017766:	701a      	strb	r2, [r3, #0]
 8017768:	1dbb      	adds	r3, r7, #6
 801776a:	1c0a      	adds	r2, r1, #0
 801776c:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 801776e:	2108      	movs	r1, #8
 8017770:	187b      	adds	r3, r7, r1
 8017772:	4a17      	ldr	r2, [pc, #92]	; (80177d0 <RegionCommonRxConfigPrint+0x78>)
 8017774:	ca31      	ldmia	r2!, {r0, r4, r5}
 8017776:	c331      	stmia	r3!, {r0, r4, r5}
 8017778:	ca31      	ldmia	r2!, {r0, r4, r5}
 801777a:	c331      	stmia	r3!, {r0, r4, r5}

    if ( rxSlot < RX_SLOT_NONE )
 801777c:	1dfb      	adds	r3, r7, #7
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	2b05      	cmp	r3, #5
 8017782:	d813      	bhi.n	80177ac <RegionCommonRxConfigPrint+0x54>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8017784:	1dfb      	adds	r3, r7, #7
 8017786:	781a      	ldrb	r2, [r3, #0]
 8017788:	187b      	adds	r3, r7, r1
 801778a:	0092      	lsls	r2, r2, #2
 801778c:	58d3      	ldr	r3, [r2, r3]
 801778e:	1dba      	adds	r2, r7, #6
 8017790:	7812      	ldrb	r2, [r2, #0]
 8017792:	b252      	sxtb	r2, r2
 8017794:	490f      	ldr	r1, [pc, #60]	; (80177d4 <RegionCommonRxConfigPrint+0x7c>)
 8017796:	9202      	str	r2, [sp, #8]
 8017798:	683a      	ldr	r2, [r7, #0]
 801779a:	9201      	str	r2, [sp, #4]
 801779c:	9300      	str	r3, [sp, #0]
 801779e:	000b      	movs	r3, r1
 80177a0:	2201      	movs	r2, #1
 80177a2:	2100      	movs	r1, #0
 80177a4:	2002      	movs	r0, #2
 80177a6:	f004 f807 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80177aa:	e00c      	b.n	80177c6 <RegionCommonRxConfigPrint+0x6e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80177ac:	1dbb      	adds	r3, r7, #6
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	b25b      	sxtb	r3, r3
 80177b2:	4a09      	ldr	r2, [pc, #36]	; (80177d8 <RegionCommonRxConfigPrint+0x80>)
 80177b4:	9301      	str	r3, [sp, #4]
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	9300      	str	r3, [sp, #0]
 80177ba:	0013      	movs	r3, r2
 80177bc:	2201      	movs	r2, #1
 80177be:	2100      	movs	r1, #0
 80177c0:	2002      	movs	r0, #2
 80177c2:	f003 fff9 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80177c6:	46c0      	nop			; (mov r8, r8)
 80177c8:	46bd      	mov	sp, r7
 80177ca:	b008      	add	sp, #32
 80177cc:	bdb0      	pop	{r4, r5, r7, pc}
 80177ce:	46c0      	nop			; (mov r8, r8)
 80177d0:	0801f190 	.word	0x0801f190
 80177d4:	0801f154 	.word	0x0801f154
 80177d8:	0801f174 	.word	0x0801f174

080177dc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b084      	sub	sp, #16
 80177e0:	af02      	add	r7, sp, #8
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	000a      	movs	r2, r1
 80177e6:	1cfb      	adds	r3, r7, #3
 80177e8:	701a      	strb	r2, [r3, #0]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80177ea:	1cfb      	adds	r3, r7, #3
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	b25b      	sxtb	r3, r3
 80177f0:	4a06      	ldr	r2, [pc, #24]	; (801780c <RegionCommonTxConfigPrint+0x30>)
 80177f2:	9301      	str	r3, [sp, #4]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	9300      	str	r3, [sp, #0]
 80177f8:	0013      	movs	r3, r2
 80177fa:	2201      	movs	r2, #1
 80177fc:	2100      	movs	r1, #0
 80177fe:	2002      	movs	r0, #2
 8017800:	f003 ffda 	bl	801b7b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8017804:	46c0      	nop			; (mov r8, r8)
 8017806:	46bd      	mov	sp, r7
 8017808:	b002      	add	sp, #8
 801780a:	bd80      	pop	{r7, pc}
 801780c:	0801f1a8 	.word	0x0801f1a8

08017810 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b084      	sub	sp, #16
 8017814:	af00      	add	r7, sp, #0
 8017816:	0002      	movs	r2, r0
 8017818:	1dfb      	adds	r3, r7, #7
 801781a:	701a      	strb	r2, [r3, #0]
 801781c:	1dbb      	adds	r3, r7, #6
 801781e:	1c0a      	adds	r2, r1, #0
 8017820:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017822:	210f      	movs	r1, #15
 8017824:	187b      	adds	r3, r7, r1
 8017826:	2200      	movs	r2, #0
 8017828:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 801782a:	1dfa      	adds	r2, r7, #7
 801782c:	1dbb      	adds	r3, r7, #6
 801782e:	7812      	ldrb	r2, [r2, #0]
 8017830:	b252      	sxtb	r2, r2
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	b25b      	sxtb	r3, r3
 8017836:	429a      	cmp	r2, r3
 8017838:	d104      	bne.n	8017844 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 801783a:	187b      	adds	r3, r7, r1
 801783c:	1dba      	adds	r2, r7, #6
 801783e:	7812      	ldrb	r2, [r2, #0]
 8017840:	701a      	strb	r2, [r3, #0]
 8017842:	e005      	b.n	8017850 <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017844:	1dfb      	adds	r3, r7, #7
 8017846:	781a      	ldrb	r2, [r3, #0]
 8017848:	230f      	movs	r3, #15
 801784a:	18fb      	adds	r3, r7, r3
 801784c:	3a01      	subs	r2, #1
 801784e:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8017850:	230f      	movs	r3, #15
 8017852:	18fb      	adds	r3, r7, r3
 8017854:	781b      	ldrb	r3, [r3, #0]
 8017856:	b25b      	sxtb	r3, r3
}
 8017858:	0018      	movs	r0, r3
 801785a:	46bd      	mov	sp, r7
 801785c:	b004      	add	sp, #16
 801785e:	bd80      	pop	{r7, pc}

08017860 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8017868:	4b09      	ldr	r3, [pc, #36]	; (8017890 <GetBandwidth+0x30>)
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	0092      	lsls	r2, r2, #2
 801786e:	58d3      	ldr	r3, [r2, r3]
 8017870:	4a08      	ldr	r2, [pc, #32]	; (8017894 <GetBandwidth+0x34>)
 8017872:	4293      	cmp	r3, r2
 8017874:	d004      	beq.n	8017880 <GetBandwidth+0x20>
 8017876:	4a08      	ldr	r2, [pc, #32]	; (8017898 <GetBandwidth+0x38>)
 8017878:	4293      	cmp	r3, r2
 801787a:	d003      	beq.n	8017884 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 801787c:	2300      	movs	r3, #0
 801787e:	e002      	b.n	8017886 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8017880:	2301      	movs	r3, #1
 8017882:	e000      	b.n	8017886 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8017884:	2302      	movs	r3, #2
    }
}
 8017886:	0018      	movs	r0, r3
 8017888:	46bd      	mov	sp, r7
 801788a:	b002      	add	sp, #8
 801788c:	bd80      	pop	{r7, pc}
 801788e:	46c0      	nop			; (mov r8, r8)
 8017890:	0801f1dc 	.word	0x0801f1dc
 8017894:	0003d090 	.word	0x0003d090
 8017898:	0007a120 	.word	0x0007a120

0801789c <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801789c:	b590      	push	{r4, r7, lr}
 801789e:	b085      	sub	sp, #20
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	0004      	movs	r4, r0
 80178a4:	0008      	movs	r0, r1
 80178a6:	0011      	movs	r1, r2
 80178a8:	603b      	str	r3, [r7, #0]
 80178aa:	1dfb      	adds	r3, r7, #7
 80178ac:	1c22      	adds	r2, r4, #0
 80178ae:	701a      	strb	r2, [r3, #0]
 80178b0:	1dbb      	adds	r3, r7, #6
 80178b2:	1c02      	adds	r2, r0, #0
 80178b4:	701a      	strb	r2, [r3, #0]
 80178b6:	1d7b      	adds	r3, r7, #5
 80178b8:	1c0a      	adds	r2, r1, #0
 80178ba:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 80178bc:	210f      	movs	r1, #15
 80178be:	187b      	adds	r3, r7, r1
 80178c0:	1dfa      	adds	r2, r7, #7
 80178c2:	7812      	ldrb	r2, [r2, #0]
 80178c4:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80178c6:	187a      	adds	r2, r7, r1
 80178c8:	1dbb      	adds	r3, r7, #6
 80178ca:	1df9      	adds	r1, r7, #7
 80178cc:	780c      	ldrb	r4, [r1, #0]
 80178ce:	781b      	ldrb	r3, [r3, #0]
 80178d0:	b258      	sxtb	r0, r3
 80178d2:	b261      	sxtb	r1, r4
 80178d4:	4288      	cmp	r0, r1
 80178d6:	da00      	bge.n	80178da <LimitTxPower+0x3e>
 80178d8:	1c23      	adds	r3, r4, #0
 80178da:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 80178dc:	230f      	movs	r3, #15
 80178de:	18fb      	adds	r3, r7, r3
 80178e0:	781b      	ldrb	r3, [r3, #0]
 80178e2:	b25b      	sxtb	r3, r3
}
 80178e4:	0018      	movs	r0, r3
 80178e6:	46bd      	mov	sp, r7
 80178e8:	b005      	add	sp, #20
 80178ea:	bd90      	pop	{r4, r7, pc}

080178ec <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b082      	sub	sp, #8
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
 80178f4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80178f6:	4b2e      	ldr	r3, [pc, #184]	; (80179b0 <VerifyRfFreq+0xc4>)
 80178f8:	6a1b      	ldr	r3, [r3, #32]
 80178fa:	687a      	ldr	r2, [r7, #4]
 80178fc:	0010      	movs	r0, r2
 80178fe:	4798      	blx	r3
 8017900:	0003      	movs	r3, r0
 8017902:	001a      	movs	r2, r3
 8017904:	2301      	movs	r3, #1
 8017906:	4053      	eors	r3, r2
 8017908:	b2db      	uxtb	r3, r3
 801790a:	2b00      	cmp	r3, #0
 801790c:	d001      	beq.n	8017912 <VerifyRfFreq+0x26>
    {
        return false;
 801790e:	2300      	movs	r3, #0
 8017910:	e04a      	b.n	80179a8 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	4a27      	ldr	r2, [pc, #156]	; (80179b4 <VerifyRfFreq+0xc8>)
 8017916:	4293      	cmp	r3, r2
 8017918:	d907      	bls.n	801792a <VerifyRfFreq+0x3e>
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	4a26      	ldr	r2, [pc, #152]	; (80179b8 <VerifyRfFreq+0xcc>)
 801791e:	4293      	cmp	r3, r2
 8017920:	d803      	bhi.n	801792a <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	2202      	movs	r2, #2
 8017926:	701a      	strb	r2, [r3, #0]
 8017928:	e03d      	b.n	80179a6 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	4a22      	ldr	r2, [pc, #136]	; (80179b8 <VerifyRfFreq+0xcc>)
 801792e:	4293      	cmp	r3, r2
 8017930:	d907      	bls.n	8017942 <VerifyRfFreq+0x56>
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	4a21      	ldr	r2, [pc, #132]	; (80179bc <VerifyRfFreq+0xd0>)
 8017936:	4293      	cmp	r3, r2
 8017938:	d803      	bhi.n	8017942 <VerifyRfFreq+0x56>
    {
        *band = 0;
 801793a:	683b      	ldr	r3, [r7, #0]
 801793c:	2200      	movs	r2, #0
 801793e:	701a      	strb	r2, [r3, #0]
 8017940:	e031      	b.n	80179a6 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	4a1d      	ldr	r2, [pc, #116]	; (80179bc <VerifyRfFreq+0xd0>)
 8017946:	4293      	cmp	r3, r2
 8017948:	d907      	bls.n	801795a <VerifyRfFreq+0x6e>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	4a1c      	ldr	r2, [pc, #112]	; (80179c0 <VerifyRfFreq+0xd4>)
 801794e:	4293      	cmp	r3, r2
 8017950:	d803      	bhi.n	801795a <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	2201      	movs	r2, #1
 8017956:	701a      	strb	r2, [r3, #0]
 8017958:	e025      	b.n	80179a6 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	4a19      	ldr	r2, [pc, #100]	; (80179c4 <VerifyRfFreq+0xd8>)
 801795e:	4293      	cmp	r3, r2
 8017960:	d907      	bls.n	8017972 <VerifyRfFreq+0x86>
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	4a18      	ldr	r2, [pc, #96]	; (80179c8 <VerifyRfFreq+0xdc>)
 8017966:	4293      	cmp	r3, r2
 8017968:	d803      	bhi.n	8017972 <VerifyRfFreq+0x86>
    {
        *band = 5;
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	2205      	movs	r2, #5
 801796e:	701a      	strb	r2, [r3, #0]
 8017970:	e019      	b.n	80179a6 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	4a15      	ldr	r2, [pc, #84]	; (80179cc <VerifyRfFreq+0xe0>)
 8017976:	4293      	cmp	r3, r2
 8017978:	d907      	bls.n	801798a <VerifyRfFreq+0x9e>
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	4a14      	ldr	r2, [pc, #80]	; (80179d0 <VerifyRfFreq+0xe4>)
 801797e:	4293      	cmp	r3, r2
 8017980:	d803      	bhi.n	801798a <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8017982:	683b      	ldr	r3, [r7, #0]
 8017984:	2203      	movs	r2, #3
 8017986:	701a      	strb	r2, [r3, #0]
 8017988:	e00d      	b.n	80179a6 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	4a11      	ldr	r2, [pc, #68]	; (80179d4 <VerifyRfFreq+0xe8>)
 801798e:	4293      	cmp	r3, r2
 8017990:	d907      	bls.n	80179a2 <VerifyRfFreq+0xb6>
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	4a10      	ldr	r2, [pc, #64]	; (80179d8 <VerifyRfFreq+0xec>)
 8017996:	4293      	cmp	r3, r2
 8017998:	d803      	bhi.n	80179a2 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 801799a:	683b      	ldr	r3, [r7, #0]
 801799c:	2204      	movs	r2, #4
 801799e:	701a      	strb	r2, [r3, #0]
 80179a0:	e001      	b.n	80179a6 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 80179a2:	2300      	movs	r3, #0
 80179a4:	e000      	b.n	80179a8 <VerifyRfFreq+0xbc>
    }
    return true;
 80179a6:	2301      	movs	r3, #1
}
 80179a8:	0018      	movs	r0, r3
 80179aa:	46bd      	mov	sp, r7
 80179ac:	b002      	add	sp, #8
 80179ae:	bd80      	pop	{r7, pc}
 80179b0:	0801f358 	.word	0x0801f358
 80179b4:	337055bf 	.word	0x337055bf
 80179b8:	338eda3f 	.word	0x338eda3f
 80179bc:	33bca100 	.word	0x33bca100
 80179c0:	33c5c8c0 	.word	0x33c5c8c0
 80179c4:	33c74f5f 	.word	0x33c74f5f
 80179c8:	33cef080 	.word	0x33cef080
 80179cc:	33d1fdbf 	.word	0x33d1fdbf
 80179d0:	33d5ce50 	.word	0x33d5ce50
 80179d4:	33d6919f 	.word	0x33d6919f
 80179d8:	33db2580 	.word	0x33db2580

080179dc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80179dc:	b5b0      	push	{r4, r5, r7, lr}
 80179de:	b08a      	sub	sp, #40	; 0x28
 80179e0:	af04      	add	r7, sp, #16
 80179e2:	0002      	movs	r2, r0
 80179e4:	1dfb      	adds	r3, r7, #7
 80179e6:	701a      	strb	r2, [r3, #0]
 80179e8:	1d3b      	adds	r3, r7, #4
 80179ea:	1c0a      	adds	r2, r1, #0
 80179ec:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 80179ee:	1dfb      	adds	r3, r7, #7
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	b25b      	sxtb	r3, r3
 80179f4:	4a26      	ldr	r2, [pc, #152]	; (8017a90 <GetTimeOnAir+0xb4>)
 80179f6:	5cd2      	ldrb	r2, [r2, r3]
 80179f8:	2513      	movs	r5, #19
 80179fa:	197b      	adds	r3, r7, r5
 80179fc:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 80179fe:	1dfb      	adds	r3, r7, #7
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	b25b      	sxtb	r3, r3
 8017a04:	0018      	movs	r0, r3
 8017a06:	f7ff ff2b 	bl	8017860 <GetBandwidth>
 8017a0a:	0003      	movs	r3, r0
 8017a0c:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017a12:	1dfb      	adds	r3, r7, #7
 8017a14:	781b      	ldrb	r3, [r3, #0]
 8017a16:	b25b      	sxtb	r3, r3
 8017a18:	2b07      	cmp	r3, #7
 8017a1a:	d11d      	bne.n	8017a58 <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017a1c:	4b1d      	ldr	r3, [pc, #116]	; (8017a94 <GetTimeOnAir+0xb8>)
 8017a1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017a20:	197b      	adds	r3, r7, r5
 8017a22:	2200      	movs	r2, #0
 8017a24:	569a      	ldrsb	r2, [r3, r2]
 8017a26:	0013      	movs	r3, r2
 8017a28:	015b      	lsls	r3, r3, #5
 8017a2a:	1a9b      	subs	r3, r3, r2
 8017a2c:	009b      	lsls	r3, r3, #2
 8017a2e:	189b      	adds	r3, r3, r2
 8017a30:	00db      	lsls	r3, r3, #3
 8017a32:	0018      	movs	r0, r3
 8017a34:	1d3b      	adds	r3, r7, #4
 8017a36:	881b      	ldrh	r3, [r3, #0]
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	68f9      	ldr	r1, [r7, #12]
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	9203      	str	r2, [sp, #12]
 8017a40:	9302      	str	r3, [sp, #8]
 8017a42:	2300      	movs	r3, #0
 8017a44:	9301      	str	r3, [sp, #4]
 8017a46:	2305      	movs	r3, #5
 8017a48:	9300      	str	r3, [sp, #0]
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	0002      	movs	r2, r0
 8017a4e:	2000      	movs	r0, #0
 8017a50:	47a0      	blx	r4
 8017a52:	0003      	movs	r3, r0
 8017a54:	617b      	str	r3, [r7, #20]
 8017a56:	e015      	b.n	8017a84 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017a58:	4b0e      	ldr	r3, [pc, #56]	; (8017a94 <GetTimeOnAir+0xb8>)
 8017a5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017a5c:	2313      	movs	r3, #19
 8017a5e:	18fb      	adds	r3, r7, r3
 8017a60:	2200      	movs	r2, #0
 8017a62:	569a      	ldrsb	r2, [r3, r2]
 8017a64:	1d3b      	adds	r3, r7, #4
 8017a66:	881b      	ldrh	r3, [r3, #0]
 8017a68:	b2db      	uxtb	r3, r3
 8017a6a:	68f9      	ldr	r1, [r7, #12]
 8017a6c:	2001      	movs	r0, #1
 8017a6e:	9003      	str	r0, [sp, #12]
 8017a70:	9302      	str	r3, [sp, #8]
 8017a72:	2300      	movs	r3, #0
 8017a74:	9301      	str	r3, [sp, #4]
 8017a76:	2308      	movs	r3, #8
 8017a78:	9300      	str	r3, [sp, #0]
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	2001      	movs	r0, #1
 8017a7e:	47a0      	blx	r4
 8017a80:	0003      	movs	r3, r0
 8017a82:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 8017a84:	697b      	ldr	r3, [r7, #20]
}
 8017a86:	0018      	movs	r0, r3
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	b006      	add	sp, #24
 8017a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8017a8e:	46c0      	nop			; (mov r8, r8)
 8017a90:	0801f1d4 	.word	0x0801f1d4
 8017a94:	0801f358 	.word	0x0801f358

08017a98 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b084      	sub	sp, #16
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017aa0:	2308      	movs	r3, #8
 8017aa2:	18fb      	adds	r3, r7, r3
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	2b39      	cmp	r3, #57	; 0x39
 8017aae:	d900      	bls.n	8017ab2 <RegionEU868GetPhyParam+0x1a>
 8017ab0:	e0e9      	b.n	8017c86 <RegionEU868GetPhyParam+0x1ee>
 8017ab2:	009a      	lsls	r2, r3, #2
 8017ab4:	4b7b      	ldr	r3, [pc, #492]	; (8017ca4 <RegionEU868GetPhyParam+0x20c>)
 8017ab6:	18d3      	adds	r3, r2, r3
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017abc:	2308      	movs	r3, #8
 8017abe:	18fb      	adds	r3, r7, r3
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	601a      	str	r2, [r3, #0]
            break;
 8017ac4:	e0e0      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017ac6:	2308      	movs	r3, #8
 8017ac8:	18fb      	adds	r3, r7, r3
 8017aca:	2200      	movs	r2, #0
 8017acc:	601a      	str	r2, [r3, #0]
            break;
 8017ace:	e0db      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017ad0:	2308      	movs	r3, #8
 8017ad2:	18fb      	adds	r3, r7, r3
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	601a      	str	r2, [r3, #0]
            break;
 8017ad8:	e0d6      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	785b      	ldrb	r3, [r3, #1]
 8017ade:	b25b      	sxtb	r3, r3
 8017ae0:	2100      	movs	r1, #0
 8017ae2:	0018      	movs	r0, r3
 8017ae4:	f7ff fe94 	bl	8017810 <GetNextLowerTxDr>
 8017ae8:	0003      	movs	r3, r0
 8017aea:	001a      	movs	r2, r3
 8017aec:	2308      	movs	r3, #8
 8017aee:	18fb      	adds	r3, r7, r3
 8017af0:	601a      	str	r2, [r3, #0]
            break;
 8017af2:	e0c9      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017af4:	2308      	movs	r3, #8
 8017af6:	18fb      	adds	r3, r7, r3
 8017af8:	2200      	movs	r2, #0
 8017afa:	601a      	str	r2, [r3, #0]
            break;
 8017afc:	e0c4      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017afe:	2308      	movs	r3, #8
 8017b00:	18fb      	adds	r3, r7, r3
 8017b02:	2200      	movs	r2, #0
 8017b04:	601a      	str	r2, [r3, #0]
            break;
 8017b06:	e0bf      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8017b08:	2308      	movs	r3, #8
 8017b0a:	18fb      	adds	r3, r7, r3
 8017b0c:	2240      	movs	r2, #64	; 0x40
 8017b0e:	601a      	str	r2, [r3, #0]
            break;
 8017b10:	e0ba      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8017b12:	2308      	movs	r3, #8
 8017b14:	18fb      	adds	r3, r7, r3
 8017b16:	2220      	movs	r2, #32
 8017b18:	601a      	str	r2, [r3, #0]
            break;
 8017b1a:	e0b5      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	785b      	ldrb	r3, [r3, #1]
 8017b20:	b25b      	sxtb	r3, r3
 8017b22:	001a      	movs	r2, r3
 8017b24:	4b60      	ldr	r3, [pc, #384]	; (8017ca8 <RegionEU868GetPhyParam+0x210>)
 8017b26:	5c9b      	ldrb	r3, [r3, r2]
 8017b28:	001a      	movs	r2, r3
 8017b2a:	2308      	movs	r3, #8
 8017b2c:	18fb      	adds	r3, r7, r3
 8017b2e:	601a      	str	r2, [r3, #0]
            break;
 8017b30:	e0aa      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	785b      	ldrb	r3, [r3, #1]
 8017b36:	b25b      	sxtb	r3, r3
 8017b38:	001a      	movs	r2, r3
 8017b3a:	4b5c      	ldr	r3, [pc, #368]	; (8017cac <RegionEU868GetPhyParam+0x214>)
 8017b3c:	5c9b      	ldrb	r3, [r3, r2]
 8017b3e:	001a      	movs	r2, r3
 8017b40:	2308      	movs	r3, #8
 8017b42:	18fb      	adds	r3, r7, r3
 8017b44:	601a      	str	r2, [r3, #0]
            break;
 8017b46:	e09f      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017b48:	2308      	movs	r3, #8
 8017b4a:	18fb      	adds	r3, r7, r3
 8017b4c:	2201      	movs	r2, #1
 8017b4e:	601a      	str	r2, [r3, #0]
            break;
 8017b50:	e09a      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017b52:	2308      	movs	r3, #8
 8017b54:	18fb      	adds	r3, r7, r3
 8017b56:	4a56      	ldr	r2, [pc, #344]	; (8017cb0 <RegionEU868GetPhyParam+0x218>)
 8017b58:	601a      	str	r2, [r3, #0]
            break;
 8017b5a:	e095      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8017b5c:	2308      	movs	r3, #8
 8017b5e:	18fb      	adds	r3, r7, r3
 8017b60:	22fa      	movs	r2, #250	; 0xfa
 8017b62:	0092      	lsls	r2, r2, #2
 8017b64:	601a      	str	r2, [r3, #0]
            break;
 8017b66:	e08f      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8017b68:	2308      	movs	r3, #8
 8017b6a:	18fb      	adds	r3, r7, r3
 8017b6c:	22fa      	movs	r2, #250	; 0xfa
 8017b6e:	00d2      	lsls	r2, r2, #3
 8017b70:	601a      	str	r2, [r3, #0]
            break;
 8017b72:	e089      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8017b74:	2308      	movs	r3, #8
 8017b76:	18fb      	adds	r3, r7, r3
 8017b78:	4a4e      	ldr	r2, [pc, #312]	; (8017cb4 <RegionEU868GetPhyParam+0x21c>)
 8017b7a:	601a      	str	r2, [r3, #0]
            break;
 8017b7c:	e084      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8017b7e:	2308      	movs	r3, #8
 8017b80:	18fb      	adds	r3, r7, r3
 8017b82:	4a4d      	ldr	r2, [pc, #308]	; (8017cb8 <RegionEU868GetPhyParam+0x220>)
 8017b84:	601a      	str	r2, [r3, #0]
            break;
 8017b86:	e07f      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8017b88:	2308      	movs	r3, #8
 8017b8a:	18fb      	adds	r3, r7, r3
 8017b8c:	2280      	movs	r2, #128	; 0x80
 8017b8e:	01d2      	lsls	r2, r2, #7
 8017b90:	601a      	str	r2, [r3, #0]
            break;
 8017b92:	e079      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8017b94:	23fa      	movs	r3, #250	; 0xfa
 8017b96:	009b      	lsls	r3, r3, #2
 8017b98:	4a48      	ldr	r2, [pc, #288]	; (8017cbc <RegionEU868GetPhyParam+0x224>)
 8017b9a:	0019      	movs	r1, r3
 8017b9c:	0010      	movs	r0, r2
 8017b9e:	f001 f983 	bl	8018ea8 <randr>
 8017ba2:	0003      	movs	r3, r0
 8017ba4:	22fa      	movs	r2, #250	; 0xfa
 8017ba6:	00d2      	lsls	r2, r2, #3
 8017ba8:	4694      	mov	ip, r2
 8017baa:	4463      	add	r3, ip
 8017bac:	001a      	movs	r2, r3
 8017bae:	2308      	movs	r3, #8
 8017bb0:	18fb      	adds	r3, r7, r3
 8017bb2:	601a      	str	r2, [r3, #0]
            break;
 8017bb4:	e068      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8017bb6:	2308      	movs	r3, #8
 8017bb8:	18fb      	adds	r3, r7, r3
 8017bba:	2200      	movs	r2, #0
 8017bbc:	601a      	str	r2, [r3, #0]
            break;
 8017bbe:	e063      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017bc0:	2308      	movs	r3, #8
 8017bc2:	18fb      	adds	r3, r7, r3
 8017bc4:	4a3e      	ldr	r2, [pc, #248]	; (8017cc0 <RegionEU868GetPhyParam+0x228>)
 8017bc6:	601a      	str	r2, [r3, #0]
            break;
 8017bc8:	e05e      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017bca:	2308      	movs	r3, #8
 8017bcc:	18fb      	adds	r3, r7, r3
 8017bce:	2200      	movs	r2, #0
 8017bd0:	601a      	str	r2, [r3, #0]
            break;
 8017bd2:	e059      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8017bd4:	2308      	movs	r3, #8
 8017bd6:	18fb      	adds	r3, r7, r3
 8017bd8:	4a3a      	ldr	r2, [pc, #232]	; (8017cc4 <RegionEU868GetPhyParam+0x22c>)
 8017bda:	601a      	str	r2, [r3, #0]
            break;
 8017bdc:	e054      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8017bde:	2308      	movs	r3, #8
 8017be0:	18fb      	adds	r3, r7, r3
 8017be2:	4a39      	ldr	r2, [pc, #228]	; (8017cc8 <RegionEU868GetPhyParam+0x230>)
 8017be4:	601a      	str	r2, [r3, #0]
            break;
 8017be6:	e04f      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017be8:	2308      	movs	r3, #8
 8017bea:	18fb      	adds	r3, r7, r3
 8017bec:	2210      	movs	r2, #16
 8017bee:	601a      	str	r2, [r3, #0]
            break;
 8017bf0:	e04a      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8017bf2:	2308      	movs	r3, #8
 8017bf4:	18fb      	adds	r3, r7, r3
 8017bf6:	4a35      	ldr	r2, [pc, #212]	; (8017ccc <RegionEU868GetPhyParam+0x234>)
 8017bf8:	601a      	str	r2, [r3, #0]
            break;
 8017bfa:	e045      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8017bfc:	2308      	movs	r3, #8
 8017bfe:	18fb      	adds	r3, r7, r3
 8017c00:	2200      	movs	r2, #0
 8017c02:	601a      	str	r2, [r3, #0]
            break;
 8017c04:	e040      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017c06:	2308      	movs	r3, #8
 8017c08:	18fb      	adds	r3, r7, r3
 8017c0a:	2283      	movs	r2, #131	; 0x83
 8017c0c:	05d2      	lsls	r2, r2, #23
 8017c0e:	601a      	str	r2, [r3, #0]
            break;
 8017c10:	e03a      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017c12:	2308      	movs	r3, #8
 8017c14:	18fb      	adds	r3, r7, r3
 8017c16:	4a2e      	ldr	r2, [pc, #184]	; (8017cd0 <RegionEU868GetPhyParam+0x238>)
 8017c18:	601a      	str	r2, [r3, #0]
            break;
 8017c1a:	e035      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017c1c:	2308      	movs	r3, #8
 8017c1e:	18fb      	adds	r3, r7, r3
 8017c20:	4a27      	ldr	r2, [pc, #156]	; (8017cc0 <RegionEU868GetPhyParam+0x228>)
 8017c22:	601a      	str	r2, [r3, #0]
            break;
 8017c24:	e030      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017c26:	2108      	movs	r1, #8
 8017c28:	187b      	adds	r3, r7, r1
 8017c2a:	2211      	movs	r2, #17
 8017c2c:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017c2e:	187b      	adds	r3, r7, r1
 8017c30:	2202      	movs	r2, #2
 8017c32:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017c34:	187b      	adds	r3, r7, r1
 8017c36:	2200      	movs	r2, #0
 8017c38:	709a      	strb	r2, [r3, #2]
            break;
 8017c3a:	e025      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017c3c:	2308      	movs	r3, #8
 8017c3e:	18fb      	adds	r3, r7, r3
 8017c40:	2203      	movs	r2, #3
 8017c42:	601a      	str	r2, [r3, #0]
            break;
 8017c44:	e020      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017c46:	2308      	movs	r3, #8
 8017c48:	18fb      	adds	r3, r7, r3
 8017c4a:	4a1d      	ldr	r2, [pc, #116]	; (8017cc0 <RegionEU868GetPhyParam+0x228>)
 8017c4c:	601a      	str	r2, [r3, #0]
            break;
 8017c4e:	e01b      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017c50:	2308      	movs	r3, #8
 8017c52:	18fb      	adds	r3, r7, r3
 8017c54:	2203      	movs	r2, #3
 8017c56:	601a      	str	r2, [r3, #0]
            break;
 8017c58:	e016      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	785b      	ldrb	r3, [r3, #1]
 8017c5e:	b25b      	sxtb	r3, r3
 8017c60:	001a      	movs	r2, r3
 8017c62:	4b1c      	ldr	r3, [pc, #112]	; (8017cd4 <RegionEU868GetPhyParam+0x23c>)
 8017c64:	5c9b      	ldrb	r3, [r3, r2]
 8017c66:	001a      	movs	r2, r3
 8017c68:	2308      	movs	r3, #8
 8017c6a:	18fb      	adds	r3, r7, r3
 8017c6c:	601a      	str	r2, [r3, #0]
            break;
 8017c6e:	e00b      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	785b      	ldrb	r3, [r3, #1]
 8017c74:	b25b      	sxtb	r3, r3
 8017c76:	0018      	movs	r0, r3
 8017c78:	f7ff fdf2 	bl	8017860 <GetBandwidth>
 8017c7c:	0002      	movs	r2, r0
 8017c7e:	2308      	movs	r3, #8
 8017c80:	18fb      	adds	r3, r7, r3
 8017c82:	601a      	str	r2, [r3, #0]
            break;
 8017c84:	e000      	b.n	8017c88 <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 8017c86:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8017c88:	210c      	movs	r1, #12
 8017c8a:	187b      	adds	r3, r7, r1
 8017c8c:	2208      	movs	r2, #8
 8017c8e:	18ba      	adds	r2, r7, r2
 8017c90:	6812      	ldr	r2, [r2, #0]
 8017c92:	601a      	str	r2, [r3, #0]
 8017c94:	187b      	adds	r3, r7, r1
 8017c96:	2200      	movs	r2, #0
 8017c98:	681a      	ldr	r2, [r3, #0]
 8017c9a:	0013      	movs	r3, r2
}
 8017c9c:	0018      	movs	r0, r3
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	b004      	add	sp, #16
 8017ca2:	bd80      	pop	{r7, pc}
 8017ca4:	0801f20c 	.word	0x0801f20c
 8017ca8:	0801f1fc 	.word	0x0801f1fc
 8017cac:	0801f204 	.word	0x0801f204
 8017cb0:	00000bb8 	.word	0x00000bb8
 8017cb4:	00001388 	.word	0x00001388
 8017cb8:	00001770 	.word	0x00001770
 8017cbc:	fffffc18 	.word	0xfffffc18
 8017cc0:	33d3e608 	.word	0x33d3e608
 8017cc4:	20000e78 	.word	0x20000e78
 8017cc8:	20000e7a 	.word	0x20000e7a
 8017ccc:	20000d40 	.word	0x20000d40
 8017cd0:	4009999a 	.word	0x4009999a
 8017cd4:	0801f1d4 	.word	0x0801f1d4

08017cd8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017cd8:	b5b0      	push	{r4, r5, r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af02      	add	r7, sp, #8
 8017cde:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	0019      	movs	r1, r3
 8017ce6:	4a11      	ldr	r2, [pc, #68]	; (8017d2c <RegionEU868SetBandTxDone+0x54>)
 8017ce8:	000b      	movs	r3, r1
 8017cea:	005b      	lsls	r3, r3, #1
 8017cec:	185b      	adds	r3, r3, r1
 8017cee:	009b      	lsls	r3, r3, #2
 8017cf0:	18d3      	adds	r3, r2, r3
 8017cf2:	3309      	adds	r3, #9
 8017cf4:	781b      	ldrb	r3, [r3, #0]
 8017cf6:	001a      	movs	r2, r3
 8017cf8:	0013      	movs	r3, r2
 8017cfa:	009b      	lsls	r3, r3, #2
 8017cfc:	189b      	adds	r3, r3, r2
 8017cfe:	009b      	lsls	r3, r3, #2
 8017d00:	33c0      	adds	r3, #192	; 0xc0
 8017d02:	001a      	movs	r2, r3
 8017d04:	4b09      	ldr	r3, [pc, #36]	; (8017d2c <RegionEU868SetBandTxDone+0x54>)
 8017d06:	18d0      	adds	r0, r2, r3
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	689c      	ldr	r4, [r3, #8]
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	785d      	ldrb	r5, [r3, #1]
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	466a      	mov	r2, sp
 8017d14:	6919      	ldr	r1, [r3, #16]
 8017d16:	6011      	str	r1, [r2, #0]
 8017d18:	68db      	ldr	r3, [r3, #12]
 8017d1a:	002a      	movs	r2, r5
 8017d1c:	0021      	movs	r1, r4
 8017d1e:	f7ff f91e 	bl	8016f5e <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8017d22:	46c0      	nop			; (mov r8, r8)
 8017d24:	46bd      	mov	sp, r7
 8017d26:	b002      	add	sp, #8
 8017d28:	bdb0      	pop	{r4, r5, r7, pc}
 8017d2a:	46c0      	nop			; (mov r8, r8)
 8017d2c:	20000d40 	.word	0x20000d40

08017d30 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017d30:	b590      	push	{r4, r7, lr}
 8017d32:	b0ab      	sub	sp, #172	; 0xac
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017d38:	2430      	movs	r4, #48	; 0x30
 8017d3a:	193b      	adds	r3, r7, r4
 8017d3c:	0018      	movs	r0, r3
 8017d3e:	2378      	movs	r3, #120	; 0x78
 8017d40:	001a      	movs	r2, r3
 8017d42:	2100      	movs	r1, #0
 8017d44:	f005 fe21 	bl	801d98a <memset>
 8017d48:	0021      	movs	r1, r4
 8017d4a:	187b      	adds	r3, r7, r1
 8017d4c:	2264      	movs	r2, #100	; 0x64
 8017d4e:	801a      	strh	r2, [r3, #0]
 8017d50:	187b      	adds	r3, r7, r1
 8017d52:	2264      	movs	r2, #100	; 0x64
 8017d54:	829a      	strh	r2, [r3, #20]
 8017d56:	187b      	adds	r3, r7, r1
 8017d58:	22fa      	movs	r2, #250	; 0xfa
 8017d5a:	0092      	lsls	r2, r2, #2
 8017d5c:	851a      	strh	r2, [r3, #40]	; 0x28
 8017d5e:	187b      	adds	r3, r7, r1
 8017d60:	220a      	movs	r2, #10
 8017d62:	879a      	strh	r2, [r3, #60]	; 0x3c
 8017d64:	0008      	movs	r0, r1
 8017d66:	187b      	adds	r3, r7, r1
 8017d68:	2250      	movs	r2, #80	; 0x50
 8017d6a:	2164      	movs	r1, #100	; 0x64
 8017d6c:	5299      	strh	r1, [r3, r2]
 8017d6e:	183b      	adds	r3, r7, r0
 8017d70:	2264      	movs	r2, #100	; 0x64
 8017d72:	21fa      	movs	r1, #250	; 0xfa
 8017d74:	0089      	lsls	r1, r1, #2
 8017d76:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	791b      	ldrb	r3, [r3, #4]
 8017d7c:	2b03      	cmp	r3, #3
 8017d7e:	d048      	beq.n	8017e12 <RegionEU868InitDefaults+0xe2>
 8017d80:	dc54      	bgt.n	8017e2c <RegionEU868InitDefaults+0xfc>
 8017d82:	2b02      	cmp	r3, #2
 8017d84:	d036      	beq.n	8017df4 <RegionEU868InitDefaults+0xc4>
 8017d86:	dc51      	bgt.n	8017e2c <RegionEU868InitDefaults+0xfc>
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d002      	beq.n	8017d92 <RegionEU868InitDefaults+0x62>
 8017d8c:	2b01      	cmp	r3, #1
 8017d8e:	d021      	beq.n	8017dd4 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 8017d90:	e04c      	b.n	8017e2c <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017d92:	2330      	movs	r3, #48	; 0x30
 8017d94:	18f9      	adds	r1, r7, r3
 8017d96:	4b29      	ldr	r3, [pc, #164]	; (8017e3c <RegionEU868InitDefaults+0x10c>)
 8017d98:	2278      	movs	r2, #120	; 0x78
 8017d9a:	0018      	movs	r0, r3
 8017d9c:	f001 f89a 	bl	8018ed4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017da0:	4b27      	ldr	r3, [pc, #156]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017da2:	4a28      	ldr	r2, [pc, #160]	; (8017e44 <RegionEU868InitDefaults+0x114>)
 8017da4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017da6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017da8:	4b25      	ldr	r3, [pc, #148]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017daa:	4a27      	ldr	r2, [pc, #156]	; (8017e48 <RegionEU868InitDefaults+0x118>)
 8017dac:	330c      	adds	r3, #12
 8017dae:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017db0:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017db2:	4b23      	ldr	r3, [pc, #140]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017db4:	4a25      	ldr	r2, [pc, #148]	; (8017e4c <RegionEU868InitDefaults+0x11c>)
 8017db6:	3318      	adds	r3, #24
 8017db8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017dba:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017dbc:	4a20      	ldr	r2, [pc, #128]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017dbe:	239d      	movs	r3, #157	; 0x9d
 8017dc0:	005b      	lsls	r3, r3, #1
 8017dc2:	2107      	movs	r1, #7
 8017dc4:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017dc6:	4922      	ldr	r1, [pc, #136]	; (8017e50 <RegionEU868InitDefaults+0x120>)
 8017dc8:	4b22      	ldr	r3, [pc, #136]	; (8017e54 <RegionEU868InitDefaults+0x124>)
 8017dca:	2201      	movs	r2, #1
 8017dcc:	0018      	movs	r0, r3
 8017dce:	f7ff f897 	bl	8016f00 <RegionCommonChanMaskCopy>
            break;
 8017dd2:	e02e      	b.n	8017e32 <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8017dd4:	4b1a      	ldr	r3, [pc, #104]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 8017dda:	4b19      	ldr	r3, [pc, #100]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017ddc:	2200      	movs	r2, #0
 8017dde:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8017de0:	4b17      	ldr	r3, [pc, #92]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017de2:	2200      	movs	r2, #0
 8017de4:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017de6:	491a      	ldr	r1, [pc, #104]	; (8017e50 <RegionEU868InitDefaults+0x120>)
 8017de8:	4b1a      	ldr	r3, [pc, #104]	; (8017e54 <RegionEU868InitDefaults+0x124>)
 8017dea:	2201      	movs	r2, #1
 8017dec:	0018      	movs	r0, r3
 8017dee:	f7ff f887 	bl	8016f00 <RegionCommonChanMaskCopy>
            break;
 8017df2:	e01e      	b.n	8017e32 <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8017df4:	4a12      	ldr	r2, [pc, #72]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017df6:	239c      	movs	r3, #156	; 0x9c
 8017df8:	005b      	lsls	r3, r3, #1
 8017dfa:	5ad2      	ldrh	r2, [r2, r3]
 8017dfc:	4910      	ldr	r1, [pc, #64]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017dfe:	239d      	movs	r3, #157	; 0x9d
 8017e00:	005b      	lsls	r3, r3, #1
 8017e02:	5acb      	ldrh	r3, [r1, r3]
 8017e04:	4313      	orrs	r3, r2
 8017e06:	b299      	uxth	r1, r3
 8017e08:	4a0d      	ldr	r2, [pc, #52]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017e0a:	239c      	movs	r3, #156	; 0x9c
 8017e0c:	005b      	lsls	r3, r3, #1
 8017e0e:	52d1      	strh	r1, [r2, r3]
            break;
 8017e10:	e00f      	b.n	8017e32 <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d00a      	beq.n	8017e30 <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	6819      	ldr	r1, [r3, #0]
 8017e1e:	239e      	movs	r3, #158	; 0x9e
 8017e20:	005a      	lsls	r2, r3, #1
 8017e22:	4b07      	ldr	r3, [pc, #28]	; (8017e40 <RegionEU868InitDefaults+0x110>)
 8017e24:	0018      	movs	r0, r3
 8017e26:	f001 f855 	bl	8018ed4 <memcpy1>
            break;
 8017e2a:	e001      	b.n	8017e30 <RegionEU868InitDefaults+0x100>
            break;
 8017e2c:	46c0      	nop			; (mov r8, r8)
 8017e2e:	e000      	b.n	8017e32 <RegionEU868InitDefaults+0x102>
            break;
 8017e30:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017e32:	46c0      	nop			; (mov r8, r8)
 8017e34:	46bd      	mov	sp, r7
 8017e36:	b02b      	add	sp, #172	; 0xac
 8017e38:	bd90      	pop	{r4, r7, pc}
 8017e3a:	46c0      	nop			; (mov r8, r8)
 8017e3c:	20000e00 	.word	0x20000e00
 8017e40:	20000d40 	.word	0x20000d40
 8017e44:	0801f2f4 	.word	0x0801f2f4
 8017e48:	0801f300 	.word	0x0801f300
 8017e4c:	0801f30c 	.word	0x0801f30c
 8017e50:	20000e7a 	.word	0x20000e7a
 8017e54:	20000e78 	.word	0x20000e78

08017e58 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b082      	sub	sp, #8
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	229e      	movs	r2, #158	; 0x9e
 8017e64:	0052      	lsls	r2, r2, #1
 8017e66:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8017e68:	4b02      	ldr	r3, [pc, #8]	; (8017e74 <RegionEU868GetNvmCtx+0x1c>)
}
 8017e6a:	0018      	movs	r0, r3
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	b002      	add	sp, #8
 8017e70:	bd80      	pop	{r7, pc}
 8017e72:	46c0      	nop			; (mov r8, r8)
 8017e74:	20000d40 	.word	0x20000d40

08017e78 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b084      	sub	sp, #16
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
 8017e80:	000a      	movs	r2, r1
 8017e82:	1cfb      	adds	r3, r7, #3
 8017e84:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8017e86:	1cfb      	adds	r3, r7, #3
 8017e88:	781b      	ldrb	r3, [r3, #0]
 8017e8a:	2b0f      	cmp	r3, #15
 8017e8c:	d847      	bhi.n	8017f1e <RegionEU868Verify+0xa6>
 8017e8e:	009a      	lsls	r2, r3, #2
 8017e90:	4b25      	ldr	r3, [pc, #148]	; (8017f28 <RegionEU868Verify+0xb0>)
 8017e92:	18d3      	adds	r3, r2, r3
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017e98:	210f      	movs	r1, #15
 8017e9a:	187b      	adds	r3, r7, r1
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	187a      	adds	r2, r7, r1
 8017ea6:	0011      	movs	r1, r2
 8017ea8:	0018      	movs	r0, r3
 8017eaa:	f7ff fd1f 	bl	80178ec <VerifyRfFreq>
 8017eae:	0003      	movs	r3, r0
 8017eb0:	e036      	b.n	8017f20 <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	781b      	ldrb	r3, [r3, #0]
 8017eb6:	b25b      	sxtb	r3, r3
 8017eb8:	2207      	movs	r2, #7
 8017eba:	2100      	movs	r1, #0
 8017ebc:	0018      	movs	r0, r3
 8017ebe:	f7fe ff76 	bl	8016dae <RegionCommonValueInRange>
 8017ec2:	0003      	movs	r3, r0
 8017ec4:	1e5a      	subs	r2, r3, #1
 8017ec6:	4193      	sbcs	r3, r2
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	e029      	b.n	8017f20 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	781b      	ldrb	r3, [r3, #0]
 8017ed0:	b25b      	sxtb	r3, r3
 8017ed2:	2205      	movs	r2, #5
 8017ed4:	2100      	movs	r1, #0
 8017ed6:	0018      	movs	r0, r3
 8017ed8:	f7fe ff69 	bl	8016dae <RegionCommonValueInRange>
 8017edc:	0003      	movs	r3, r0
 8017ede:	1e5a      	subs	r2, r3, #1
 8017ee0:	4193      	sbcs	r3, r2
 8017ee2:	b2db      	uxtb	r3, r3
 8017ee4:	e01c      	b.n	8017f20 <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	781b      	ldrb	r3, [r3, #0]
 8017eea:	b25b      	sxtb	r3, r3
 8017eec:	2207      	movs	r2, #7
 8017eee:	2100      	movs	r1, #0
 8017ef0:	0018      	movs	r0, r3
 8017ef2:	f7fe ff5c 	bl	8016dae <RegionCommonValueInRange>
 8017ef6:	0003      	movs	r3, r0
 8017ef8:	1e5a      	subs	r2, r3, #1
 8017efa:	4193      	sbcs	r3, r2
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	e00f      	b.n	8017f20 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	781b      	ldrb	r3, [r3, #0]
 8017f04:	b25b      	sxtb	r3, r3
 8017f06:	2207      	movs	r2, #7
 8017f08:	2100      	movs	r1, #0
 8017f0a:	0018      	movs	r0, r3
 8017f0c:	f7fe ff4f 	bl	8016dae <RegionCommonValueInRange>
 8017f10:	0003      	movs	r3, r0
 8017f12:	1e5a      	subs	r2, r3, #1
 8017f14:	4193      	sbcs	r3, r2
 8017f16:	b2db      	uxtb	r3, r3
 8017f18:	e002      	b.n	8017f20 <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	e000      	b.n	8017f20 <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 8017f1e:	2300      	movs	r3, #0
    }
}
 8017f20:	0018      	movs	r0, r3
 8017f22:	46bd      	mov	sp, r7
 8017f24:	b004      	add	sp, #16
 8017f26:	bd80      	pop	{r7, pc}
 8017f28:	0801f318 	.word	0x0801f318

08017f2c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017f2c:	b590      	push	{r4, r7, lr}
 8017f2e:	b08b      	sub	sp, #44	; 0x2c
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017f34:	2318      	movs	r3, #24
 8017f36:	18fb      	adds	r3, r7, r3
 8017f38:	2250      	movs	r2, #80	; 0x50
 8017f3a:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	791b      	ldrb	r3, [r3, #4]
 8017f40:	2b10      	cmp	r3, #16
 8017f42:	d000      	beq.n	8017f46 <RegionEU868ApplyCFList+0x1a>
 8017f44:	e07c      	b.n	8018040 <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	330f      	adds	r3, #15
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d000      	beq.n	8017f54 <RegionEU868ApplyCFList+0x28>
 8017f52:	e077      	b.n	8018044 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017f54:	2327      	movs	r3, #39	; 0x27
 8017f56:	18fb      	adds	r3, r7, r3
 8017f58:	2200      	movs	r2, #0
 8017f5a:	701a      	strb	r2, [r3, #0]
 8017f5c:	2326      	movs	r3, #38	; 0x26
 8017f5e:	18fb      	adds	r3, r7, r3
 8017f60:	2203      	movs	r2, #3
 8017f62:	701a      	strb	r2, [r3, #0]
 8017f64:	e066      	b.n	8018034 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017f66:	2326      	movs	r3, #38	; 0x26
 8017f68:	18fb      	adds	r3, r7, r3
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	2b07      	cmp	r3, #7
 8017f6e:	d82e      	bhi.n	8017fce <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	2427      	movs	r4, #39	; 0x27
 8017f76:	193b      	adds	r3, r7, r4
 8017f78:	781b      	ldrb	r3, [r3, #0]
 8017f7a:	18d3      	adds	r3, r2, r3
 8017f7c:	781b      	ldrb	r3, [r3, #0]
 8017f7e:	001a      	movs	r2, r3
 8017f80:	2018      	movs	r0, #24
 8017f82:	183b      	adds	r3, r7, r0
 8017f84:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017f86:	183b      	adds	r3, r7, r0
 8017f88:	681a      	ldr	r2, [r3, #0]
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	6819      	ldr	r1, [r3, #0]
 8017f8e:	193b      	adds	r3, r7, r4
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	3301      	adds	r3, #1
 8017f94:	18cb      	adds	r3, r1, r3
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	021b      	lsls	r3, r3, #8
 8017f9a:	431a      	orrs	r2, r3
 8017f9c:	183b      	adds	r3, r7, r0
 8017f9e:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017fa0:	183b      	adds	r3, r7, r0
 8017fa2:	681a      	ldr	r2, [r3, #0]
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6819      	ldr	r1, [r3, #0]
 8017fa8:	193b      	adds	r3, r7, r4
 8017faa:	781b      	ldrb	r3, [r3, #0]
 8017fac:	3302      	adds	r3, #2
 8017fae:	18cb      	adds	r3, r1, r3
 8017fb0:	781b      	ldrb	r3, [r3, #0]
 8017fb2:	041b      	lsls	r3, r3, #16
 8017fb4:	431a      	orrs	r2, r3
 8017fb6:	183b      	adds	r3, r7, r0
 8017fb8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8017fba:	183b      	adds	r3, r7, r0
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	2264      	movs	r2, #100	; 0x64
 8017fc0:	435a      	muls	r2, r3
 8017fc2:	183b      	adds	r3, r7, r0
 8017fc4:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017fc6:	183b      	adds	r3, r7, r0
 8017fc8:	2200      	movs	r2, #0
 8017fca:	605a      	str	r2, [r3, #4]
 8017fcc:	e009      	b.n	8017fe2 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8017fce:	2118      	movs	r1, #24
 8017fd0:	187b      	adds	r3, r7, r1
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8017fd6:	187b      	adds	r3, r7, r1
 8017fd8:	2200      	movs	r2, #0
 8017fda:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8017fdc:	187b      	adds	r3, r7, r1
 8017fde:	2200      	movs	r2, #0
 8017fe0:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8017fe2:	2218      	movs	r2, #24
 8017fe4:	18bb      	adds	r3, r7, r2
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d00d      	beq.n	8018008 <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8017fec:	2110      	movs	r1, #16
 8017fee:	187b      	adds	r3, r7, r1
 8017ff0:	18ba      	adds	r2, r7, r2
 8017ff2:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8017ff4:	187b      	adds	r3, r7, r1
 8017ff6:	2226      	movs	r2, #38	; 0x26
 8017ff8:	18ba      	adds	r2, r7, r2
 8017ffa:	7812      	ldrb	r2, [r2, #0]
 8017ffc:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017ffe:	187b      	adds	r3, r7, r1
 8018000:	0018      	movs	r0, r3
 8018002:	f000 fdb5 	bl	8018b70 <RegionEU868ChannelAdd>
 8018006:	e009      	b.n	801801c <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018008:	210c      	movs	r1, #12
 801800a:	187b      	adds	r3, r7, r1
 801800c:	2226      	movs	r2, #38	; 0x26
 801800e:	18ba      	adds	r2, r7, r2
 8018010:	7812      	ldrb	r2, [r2, #0]
 8018012:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8018014:	187b      	adds	r3, r7, r1
 8018016:	0018      	movs	r0, r3
 8018018:	f000 fe6e 	bl	8018cf8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801801c:	2227      	movs	r2, #39	; 0x27
 801801e:	18bb      	adds	r3, r7, r2
 8018020:	18ba      	adds	r2, r7, r2
 8018022:	7812      	ldrb	r2, [r2, #0]
 8018024:	3203      	adds	r2, #3
 8018026:	701a      	strb	r2, [r3, #0]
 8018028:	2126      	movs	r1, #38	; 0x26
 801802a:	187b      	adds	r3, r7, r1
 801802c:	781a      	ldrb	r2, [r3, #0]
 801802e:	187b      	adds	r3, r7, r1
 8018030:	3201      	adds	r2, #1
 8018032:	701a      	strb	r2, [r3, #0]
 8018034:	2326      	movs	r3, #38	; 0x26
 8018036:	18fb      	adds	r3, r7, r3
 8018038:	781b      	ldrb	r3, [r3, #0]
 801803a:	2b0f      	cmp	r3, #15
 801803c:	d993      	bls.n	8017f66 <RegionEU868ApplyCFList+0x3a>
 801803e:	e002      	b.n	8018046 <RegionEU868ApplyCFList+0x11a>
        return;
 8018040:	46c0      	nop			; (mov r8, r8)
 8018042:	e000      	b.n	8018046 <RegionEU868ApplyCFList+0x11a>
        return;
 8018044:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018046:	46bd      	mov	sp, r7
 8018048:	b00b      	add	sp, #44	; 0x2c
 801804a:	bd90      	pop	{r4, r7, pc}

0801804c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	791b      	ldrb	r3, [r3, #4]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d002      	beq.n	8018062 <RegionEU868ChanMaskSet+0x16>
 801805c:	2b01      	cmp	r3, #1
 801805e:	d008      	beq.n	8018072 <RegionEU868ChanMaskSet+0x26>
 8018060:	e00f      	b.n	8018082 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	6819      	ldr	r1, [r3, #0]
 8018066:	4b0a      	ldr	r3, [pc, #40]	; (8018090 <RegionEU868ChanMaskSet+0x44>)
 8018068:	2201      	movs	r2, #1
 801806a:	0018      	movs	r0, r3
 801806c:	f7fe ff48 	bl	8016f00 <RegionCommonChanMaskCopy>
            break;
 8018070:	e009      	b.n	8018086 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	6819      	ldr	r1, [r3, #0]
 8018076:	4b07      	ldr	r3, [pc, #28]	; (8018094 <RegionEU868ChanMaskSet+0x48>)
 8018078:	2201      	movs	r2, #1
 801807a:	0018      	movs	r0, r3
 801807c:	f7fe ff40 	bl	8016f00 <RegionCommonChanMaskCopy>
            break;
 8018080:	e001      	b.n	8018086 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 8018082:	2300      	movs	r3, #0
 8018084:	e000      	b.n	8018088 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 8018086:	2301      	movs	r3, #1
}
 8018088:	0018      	movs	r0, r3
 801808a:	46bd      	mov	sp, r7
 801808c:	b002      	add	sp, #8
 801808e:	bd80      	pop	{r7, pc}
 8018090:	20000e78 	.word	0x20000e78
 8018094:	20000e7a 	.word	0x20000e7a

08018098 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018098:	b5b0      	push	{r4, r5, r7, lr}
 801809a:	b088      	sub	sp, #32
 801809c:	af02      	add	r7, sp, #8
 801809e:	60ba      	str	r2, [r7, #8]
 80180a0:	607b      	str	r3, [r7, #4]
 80180a2:	240f      	movs	r4, #15
 80180a4:	193b      	adds	r3, r7, r4
 80180a6:	1c02      	adds	r2, r0, #0
 80180a8:	701a      	strb	r2, [r3, #0]
 80180aa:	230e      	movs	r3, #14
 80180ac:	18fb      	adds	r3, r7, r3
 80180ae:	1c0a      	adds	r2, r1, #0
 80180b0:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 80180b2:	2300      	movs	r3, #0
 80180b4:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80180b6:	193b      	adds	r3, r7, r4
 80180b8:	781b      	ldrb	r3, [r3, #0]
 80180ba:	b25a      	sxtb	r2, r3
 80180bc:	2a07      	cmp	r2, #7
 80180be:	dd00      	ble.n	80180c2 <RegionEU868ComputeRxWindowParameters+0x2a>
 80180c0:	2307      	movs	r3, #7
 80180c2:	b25a      	sxtb	r2, r3
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	785b      	ldrb	r3, [r3, #1]
 80180cc:	b25b      	sxtb	r3, r3
 80180ce:	0018      	movs	r0, r3
 80180d0:	f7ff fbc6 	bl	8017860 <GetBandwidth>
 80180d4:	0003      	movs	r3, r0
 80180d6:	b2da      	uxtb	r2, r3
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	785b      	ldrb	r3, [r3, #1]
 80180e0:	b25b      	sxtb	r3, r3
 80180e2:	2b07      	cmp	r3, #7
 80180e4:	d10b      	bne.n	80180fe <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	785b      	ldrb	r3, [r3, #1]
 80180ea:	b25b      	sxtb	r3, r3
 80180ec:	001a      	movs	r2, r3
 80180ee:	4b18      	ldr	r3, [pc, #96]	; (8018150 <RegionEU868ComputeRxWindowParameters+0xb8>)
 80180f0:	5c9b      	ldrb	r3, [r3, r2]
 80180f2:	0018      	movs	r0, r3
 80180f4:	f7ff f944 	bl	8017380 <RegionCommonComputeSymbolTimeFsk>
 80180f8:	0003      	movs	r3, r0
 80180fa:	617b      	str	r3, [r7, #20]
 80180fc:	e011      	b.n	8018122 <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	785b      	ldrb	r3, [r3, #1]
 8018102:	b25b      	sxtb	r3, r3
 8018104:	001a      	movs	r2, r3
 8018106:	4b12      	ldr	r3, [pc, #72]	; (8018150 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018108:	5c98      	ldrb	r0, [r3, r2]
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	785b      	ldrb	r3, [r3, #1]
 801810e:	b25b      	sxtb	r3, r3
 8018110:	001a      	movs	r2, r3
 8018112:	4b10      	ldr	r3, [pc, #64]	; (8018154 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8018114:	0092      	lsls	r2, r2, #2
 8018116:	58d3      	ldr	r3, [r2, r3]
 8018118:	0019      	movs	r1, r3
 801811a:	f7ff f919 	bl	8017350 <RegionCommonComputeSymbolTimeLoRa>
 801811e:	0003      	movs	r3, r0
 8018120:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018122:	4b0d      	ldr	r3, [pc, #52]	; (8018158 <RegionEU868ComputeRxWindowParameters+0xc0>)
 8018124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018126:	4798      	blx	r3
 8018128:	0005      	movs	r5, r0
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	3308      	adds	r3, #8
 801812e:	687a      	ldr	r2, [r7, #4]
 8018130:	320c      	adds	r2, #12
 8018132:	68bc      	ldr	r4, [r7, #8]
 8018134:	210e      	movs	r1, #14
 8018136:	1879      	adds	r1, r7, r1
 8018138:	7809      	ldrb	r1, [r1, #0]
 801813a:	6978      	ldr	r0, [r7, #20]
 801813c:	9201      	str	r2, [sp, #4]
 801813e:	9300      	str	r3, [sp, #0]
 8018140:	002b      	movs	r3, r5
 8018142:	0022      	movs	r2, r4
 8018144:	f7ff f92a 	bl	801739c <RegionCommonComputeRxWindowParameters>
}
 8018148:	46c0      	nop			; (mov r8, r8)
 801814a:	46bd      	mov	sp, r7
 801814c:	b006      	add	sp, #24
 801814e:	bdb0      	pop	{r4, r5, r7, pc}
 8018150:	0801f1d4 	.word	0x0801f1d4
 8018154:	0801f1dc 	.word	0x0801f1dc
 8018158:	0801f358 	.word	0x0801f358

0801815c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801815c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801815e:	b091      	sub	sp, #68	; 0x44
 8018160:	af0a      	add	r7, sp, #40	; 0x28
 8018162:	6078      	str	r0, [r7, #4]
 8018164:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018166:	230f      	movs	r3, #15
 8018168:	18fb      	adds	r3, r7, r3
 801816a:	687a      	ldr	r2, [r7, #4]
 801816c:	7852      	ldrb	r2, [r2, #1]
 801816e:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8018170:	2316      	movs	r3, #22
 8018172:	18fb      	adds	r3, r7, r3
 8018174:	2200      	movs	r2, #0
 8018176:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8018178:	230e      	movs	r3, #14
 801817a:	18fb      	adds	r3, r7, r3
 801817c:	2200      	movs	r2, #0
 801817e:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	685b      	ldr	r3, [r3, #4]
 8018184:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018186:	4b68      	ldr	r3, [pc, #416]	; (8018328 <RegionEU868RxConfig+0x1cc>)
 8018188:	685b      	ldr	r3, [r3, #4]
 801818a:	4798      	blx	r3
 801818c:	1e03      	subs	r3, r0, #0
 801818e:	d001      	beq.n	8018194 <RegionEU868RxConfig+0x38>
    {
        return false;
 8018190:	2300      	movs	r3, #0
 8018192:	e0c4      	b.n	801831e <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	7cdb      	ldrb	r3, [r3, #19]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d122      	bne.n	80181e2 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	0019      	movs	r1, r3
 80181a2:	4a62      	ldr	r2, [pc, #392]	; (801832c <RegionEU868RxConfig+0x1d0>)
 80181a4:	000b      	movs	r3, r1
 80181a6:	005b      	lsls	r3, r3, #1
 80181a8:	185b      	adds	r3, r3, r1
 80181aa:	009b      	lsls	r3, r3, #2
 80181ac:	589b      	ldr	r3, [r3, r2]
 80181ae:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	781b      	ldrb	r3, [r3, #0]
 80181b4:	0019      	movs	r1, r3
 80181b6:	4a5d      	ldr	r2, [pc, #372]	; (801832c <RegionEU868RxConfig+0x1d0>)
 80181b8:	000b      	movs	r3, r1
 80181ba:	005b      	lsls	r3, r3, #1
 80181bc:	185b      	adds	r3, r3, r1
 80181be:	009b      	lsls	r3, r3, #2
 80181c0:	18d3      	adds	r3, r2, r3
 80181c2:	3304      	adds	r3, #4
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00b      	beq.n	80181e2 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	781b      	ldrb	r3, [r3, #0]
 80181ce:	0019      	movs	r1, r3
 80181d0:	4a56      	ldr	r2, [pc, #344]	; (801832c <RegionEU868RxConfig+0x1d0>)
 80181d2:	000b      	movs	r3, r1
 80181d4:	005b      	lsls	r3, r3, #1
 80181d6:	185b      	adds	r3, r3, r1
 80181d8:	009b      	lsls	r3, r3, #2
 80181da:	18d3      	adds	r3, r2, r3
 80181dc:	3304      	adds	r3, #4
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80181e2:	240f      	movs	r4, #15
 80181e4:	193b      	adds	r3, r7, r4
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	b25b      	sxtb	r3, r3
 80181ea:	4a51      	ldr	r2, [pc, #324]	; (8018330 <RegionEU868RxConfig+0x1d4>)
 80181ec:	5cd2      	ldrb	r2, [r2, r3]
 80181ee:	250e      	movs	r5, #14
 80181f0:	197b      	adds	r3, r7, r5
 80181f2:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 80181f4:	4b4c      	ldr	r3, [pc, #304]	; (8018328 <RegionEU868RxConfig+0x1cc>)
 80181f6:	68db      	ldr	r3, [r3, #12]
 80181f8:	693a      	ldr	r2, [r7, #16]
 80181fa:	0010      	movs	r0, r2
 80181fc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80181fe:	193b      	adds	r3, r7, r4
 8018200:	781b      	ldrb	r3, [r3, #0]
 8018202:	b25b      	sxtb	r3, r3
 8018204:	2b07      	cmp	r3, #7
 8018206:	d12e      	bne.n	8018266 <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8018208:	2117      	movs	r1, #23
 801820a:	187b      	adds	r3, r7, r1
 801820c:	2200      	movs	r2, #0
 801820e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018210:	4b45      	ldr	r3, [pc, #276]	; (8018328 <RegionEU868RxConfig+0x1cc>)
 8018212:	699c      	ldr	r4, [r3, #24]
 8018214:	197b      	adds	r3, r7, r5
 8018216:	2200      	movs	r2, #0
 8018218:	569a      	ldrsb	r2, [r3, r2]
 801821a:	0013      	movs	r3, r2
 801821c:	015b      	lsls	r3, r3, #5
 801821e:	1a9b      	subs	r3, r3, r2
 8018220:	009b      	lsls	r3, r3, #2
 8018222:	189b      	adds	r3, r3, r2
 8018224:	00db      	lsls	r3, r3, #3
 8018226:	001e      	movs	r6, r3
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	689b      	ldr	r3, [r3, #8]
 801822c:	b29b      	uxth	r3, r3
 801822e:	687a      	ldr	r2, [r7, #4]
 8018230:	7c92      	ldrb	r2, [r2, #18]
 8018232:	4d40      	ldr	r5, [pc, #256]	; (8018334 <RegionEU868RxConfig+0x1d8>)
 8018234:	1879      	adds	r1, r7, r1
 8018236:	7808      	ldrb	r0, [r1, #0]
 8018238:	9209      	str	r2, [sp, #36]	; 0x24
 801823a:	2200      	movs	r2, #0
 801823c:	9208      	str	r2, [sp, #32]
 801823e:	2200      	movs	r2, #0
 8018240:	9207      	str	r2, [sp, #28]
 8018242:	2200      	movs	r2, #0
 8018244:	9206      	str	r2, [sp, #24]
 8018246:	2201      	movs	r2, #1
 8018248:	9205      	str	r2, [sp, #20]
 801824a:	2200      	movs	r2, #0
 801824c:	9204      	str	r2, [sp, #16]
 801824e:	2200      	movs	r2, #0
 8018250:	9203      	str	r2, [sp, #12]
 8018252:	9302      	str	r3, [sp, #8]
 8018254:	2305      	movs	r3, #5
 8018256:	9301      	str	r3, [sp, #4]
 8018258:	4b37      	ldr	r3, [pc, #220]	; (8018338 <RegionEU868RxConfig+0x1dc>)
 801825a:	9300      	str	r3, [sp, #0]
 801825c:	2300      	movs	r3, #0
 801825e:	0032      	movs	r2, r6
 8018260:	0029      	movs	r1, r5
 8018262:	47a0      	blx	r4
 8018264:	e029      	b.n	80182ba <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 8018266:	2117      	movs	r1, #23
 8018268:	187b      	adds	r3, r7, r1
 801826a:	2201      	movs	r2, #1
 801826c:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801826e:	4b2e      	ldr	r3, [pc, #184]	; (8018328 <RegionEU868RxConfig+0x1cc>)
 8018270:	699c      	ldr	r4, [r3, #24]
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	789b      	ldrb	r3, [r3, #2]
 8018276:	001e      	movs	r6, r3
 8018278:	230e      	movs	r3, #14
 801827a:	18fb      	adds	r3, r7, r3
 801827c:	2500      	movs	r5, #0
 801827e:	575d      	ldrsb	r5, [r3, r5]
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	689b      	ldr	r3, [r3, #8]
 8018284:	b29b      	uxth	r3, r3
 8018286:	687a      	ldr	r2, [r7, #4]
 8018288:	7c92      	ldrb	r2, [r2, #18]
 801828a:	1879      	adds	r1, r7, r1
 801828c:	7808      	ldrb	r0, [r1, #0]
 801828e:	9209      	str	r2, [sp, #36]	; 0x24
 8018290:	2201      	movs	r2, #1
 8018292:	9208      	str	r2, [sp, #32]
 8018294:	2200      	movs	r2, #0
 8018296:	9207      	str	r2, [sp, #28]
 8018298:	2200      	movs	r2, #0
 801829a:	9206      	str	r2, [sp, #24]
 801829c:	2200      	movs	r2, #0
 801829e:	9205      	str	r2, [sp, #20]
 80182a0:	2200      	movs	r2, #0
 80182a2:	9204      	str	r2, [sp, #16]
 80182a4:	2200      	movs	r2, #0
 80182a6:	9203      	str	r2, [sp, #12]
 80182a8:	9302      	str	r3, [sp, #8]
 80182aa:	2308      	movs	r3, #8
 80182ac:	9301      	str	r3, [sp, #4]
 80182ae:	2300      	movs	r3, #0
 80182b0:	9300      	str	r3, [sp, #0]
 80182b2:	2301      	movs	r3, #1
 80182b4:	002a      	movs	r2, r5
 80182b6:	0031      	movs	r1, r6
 80182b8:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	7c5b      	ldrb	r3, [r3, #17]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d009      	beq.n	80182d6 <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80182c2:	230f      	movs	r3, #15
 80182c4:	18fb      	adds	r3, r7, r3
 80182c6:	2200      	movs	r2, #0
 80182c8:	569a      	ldrsb	r2, [r3, r2]
 80182ca:	2316      	movs	r3, #22
 80182cc:	18fb      	adds	r3, r7, r3
 80182ce:	491b      	ldr	r1, [pc, #108]	; (801833c <RegionEU868RxConfig+0x1e0>)
 80182d0:	5c8a      	ldrb	r2, [r1, r2]
 80182d2:	701a      	strb	r2, [r3, #0]
 80182d4:	e008      	b.n	80182e8 <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80182d6:	230f      	movs	r3, #15
 80182d8:	18fb      	adds	r3, r7, r3
 80182da:	2200      	movs	r2, #0
 80182dc:	569a      	ldrsb	r2, [r3, r2]
 80182de:	2316      	movs	r3, #22
 80182e0:	18fb      	adds	r3, r7, r3
 80182e2:	4917      	ldr	r1, [pc, #92]	; (8018340 <RegionEU868RxConfig+0x1e4>)
 80182e4:	5c8a      	ldrb	r2, [r1, r2]
 80182e6:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80182e8:	4b0f      	ldr	r3, [pc, #60]	; (8018328 <RegionEU868RxConfig+0x1cc>)
 80182ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80182ec:	2216      	movs	r2, #22
 80182ee:	18ba      	adds	r2, r7, r2
 80182f0:	7812      	ldrb	r2, [r2, #0]
 80182f2:	320d      	adds	r2, #13
 80182f4:	b2d1      	uxtb	r1, r2
 80182f6:	2217      	movs	r2, #23
 80182f8:	18ba      	adds	r2, r7, r2
 80182fa:	7812      	ldrb	r2, [r2, #0]
 80182fc:	0010      	movs	r0, r2
 80182fe:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	7cd8      	ldrb	r0, [r3, #19]
 8018304:	240f      	movs	r4, #15
 8018306:	193b      	adds	r3, r7, r4
 8018308:	2200      	movs	r2, #0
 801830a:	569a      	ldrsb	r2, [r3, r2]
 801830c:	693b      	ldr	r3, [r7, #16]
 801830e:	0019      	movs	r1, r3
 8018310:	f7ff fa22 	bl	8017758 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	193a      	adds	r2, r7, r4
 8018318:	7812      	ldrb	r2, [r2, #0]
 801831a:	701a      	strb	r2, [r3, #0]
    return true;
 801831c:	2301      	movs	r3, #1
}
 801831e:	0018      	movs	r0, r3
 8018320:	46bd      	mov	sp, r7
 8018322:	b007      	add	sp, #28
 8018324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018326:	46c0      	nop			; (mov r8, r8)
 8018328:	0801f358 	.word	0x0801f358
 801832c:	20000d40 	.word	0x20000d40
 8018330:	0801f1d4 	.word	0x0801f1d4
 8018334:	0000c350 	.word	0x0000c350
 8018338:	00014585 	.word	0x00014585
 801833c:	0801f204 	.word	0x0801f204
 8018340:	0801f1fc 	.word	0x0801f1fc

08018344 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018346:	b093      	sub	sp, #76	; 0x4c
 8018348:	af0a      	add	r7, sp, #40	; 0x28
 801834a:	60f8      	str	r0, [r7, #12]
 801834c:	60b9      	str	r1, [r7, #8]
 801834e:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	785b      	ldrb	r3, [r3, #1]
 8018354:	b25b      	sxtb	r3, r3
 8018356:	001a      	movs	r2, r3
 8018358:	4b6b      	ldr	r3, [pc, #428]	; (8018508 <RegionEU868TxConfig+0x1c4>)
 801835a:	5c9a      	ldrb	r2, [r3, r2]
 801835c:	251e      	movs	r5, #30
 801835e:	197b      	adds	r3, r7, r5
 8018360:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	2002      	movs	r0, #2
 8018366:	5618      	ldrsb	r0, [r3, r0]
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	781b      	ldrb	r3, [r3, #0]
 801836c:	0019      	movs	r1, r3
 801836e:	4a67      	ldr	r2, [pc, #412]	; (801850c <RegionEU868TxConfig+0x1c8>)
 8018370:	000b      	movs	r3, r1
 8018372:	005b      	lsls	r3, r3, #1
 8018374:	185b      	adds	r3, r3, r1
 8018376:	009b      	lsls	r3, r3, #2
 8018378:	18d3      	adds	r3, r2, r3
 801837a:	3309      	adds	r3, #9
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	001c      	movs	r4, r3
 8018380:	4a62      	ldr	r2, [pc, #392]	; (801850c <RegionEU868TxConfig+0x1c8>)
 8018382:	21c2      	movs	r1, #194	; 0xc2
 8018384:	0023      	movs	r3, r4
 8018386:	009b      	lsls	r3, r3, #2
 8018388:	191b      	adds	r3, r3, r4
 801838a:	009b      	lsls	r3, r3, #2
 801838c:	18d3      	adds	r3, r2, r3
 801838e:	185b      	adds	r3, r3, r1
 8018390:	2100      	movs	r1, #0
 8018392:	5659      	ldrsb	r1, [r3, r1]
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	2201      	movs	r2, #1
 8018398:	569a      	ldrsb	r2, [r3, r2]
 801839a:	261d      	movs	r6, #29
 801839c:	19bc      	adds	r4, r7, r6
 801839e:	4b5c      	ldr	r3, [pc, #368]	; (8018510 <RegionEU868TxConfig+0x1cc>)
 80183a0:	f7ff fa7c 	bl	801789c <LimitTxPower>
 80183a4:	0003      	movs	r3, r0
 80183a6:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	785b      	ldrb	r3, [r3, #1]
 80183ac:	b25b      	sxtb	r3, r3
 80183ae:	0018      	movs	r0, r3
 80183b0:	f7ff fa56 	bl	8017860 <GetBandwidth>
 80183b4:	0003      	movs	r3, r0
 80183b6:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80183b8:	2017      	movs	r0, #23
 80183ba:	183b      	adds	r3, r7, r0
 80183bc:	2200      	movs	r2, #0
 80183be:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	6859      	ldr	r1, [r3, #4]
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	689a      	ldr	r2, [r3, #8]
 80183c8:	183c      	adds	r4, r7, r0
 80183ca:	19bb      	adds	r3, r7, r6
 80183cc:	781b      	ldrb	r3, [r3, #0]
 80183ce:	b25b      	sxtb	r3, r3
 80183d0:	0018      	movs	r0, r3
 80183d2:	f7ff f831 	bl	8017438 <RegionCommonComputeTxPower>
 80183d6:	0003      	movs	r3, r0
 80183d8:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80183da:	4b4e      	ldr	r3, [pc, #312]	; (8018514 <RegionEU868TxConfig+0x1d0>)
 80183dc:	68da      	ldr	r2, [r3, #12]
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	781b      	ldrb	r3, [r3, #0]
 80183e2:	0018      	movs	r0, r3
 80183e4:	4949      	ldr	r1, [pc, #292]	; (801850c <RegionEU868TxConfig+0x1c8>)
 80183e6:	0003      	movs	r3, r0
 80183e8:	005b      	lsls	r3, r3, #1
 80183ea:	181b      	adds	r3, r3, r0
 80183ec:	009b      	lsls	r3, r3, #2
 80183ee:	585b      	ldr	r3, [r3, r1]
 80183f0:	0018      	movs	r0, r3
 80183f2:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	785b      	ldrb	r3, [r3, #1]
 80183f8:	b25b      	sxtb	r3, r3
 80183fa:	2b07      	cmp	r3, #7
 80183fc:	d12e      	bne.n	801845c <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80183fe:	231f      	movs	r3, #31
 8018400:	18fb      	adds	r3, r7, r3
 8018402:	2200      	movs	r2, #0
 8018404:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018406:	4b43      	ldr	r3, [pc, #268]	; (8018514 <RegionEU868TxConfig+0x1d0>)
 8018408:	69dc      	ldr	r4, [r3, #28]
 801840a:	197b      	adds	r3, r7, r5
 801840c:	2200      	movs	r2, #0
 801840e:	569a      	ldrsb	r2, [r3, r2]
 8018410:	0013      	movs	r3, r2
 8018412:	015b      	lsls	r3, r3, #5
 8018414:	1a9b      	subs	r3, r3, r2
 8018416:	009b      	lsls	r3, r3, #2
 8018418:	189b      	adds	r3, r3, r2
 801841a:	00db      	lsls	r3, r3, #3
 801841c:	001e      	movs	r6, r3
 801841e:	69ba      	ldr	r2, [r7, #24]
 8018420:	4d3d      	ldr	r5, [pc, #244]	; (8018518 <RegionEU868TxConfig+0x1d4>)
 8018422:	2017      	movs	r0, #23
 8018424:	183b      	adds	r3, r7, r0
 8018426:	2100      	movs	r1, #0
 8018428:	5659      	ldrsb	r1, [r3, r1]
 801842a:	231f      	movs	r3, #31
 801842c:	18fb      	adds	r3, r7, r3
 801842e:	7818      	ldrb	r0, [r3, #0]
 8018430:	23fa      	movs	r3, #250	; 0xfa
 8018432:	011b      	lsls	r3, r3, #4
 8018434:	9308      	str	r3, [sp, #32]
 8018436:	2300      	movs	r3, #0
 8018438:	9307      	str	r3, [sp, #28]
 801843a:	2300      	movs	r3, #0
 801843c:	9306      	str	r3, [sp, #24]
 801843e:	2300      	movs	r3, #0
 8018440:	9305      	str	r3, [sp, #20]
 8018442:	2301      	movs	r3, #1
 8018444:	9304      	str	r3, [sp, #16]
 8018446:	2300      	movs	r3, #0
 8018448:	9303      	str	r3, [sp, #12]
 801844a:	2305      	movs	r3, #5
 801844c:	9302      	str	r3, [sp, #8]
 801844e:	2300      	movs	r3, #0
 8018450:	9301      	str	r3, [sp, #4]
 8018452:	9600      	str	r6, [sp, #0]
 8018454:	0013      	movs	r3, r2
 8018456:	002a      	movs	r2, r5
 8018458:	47a0      	blx	r4
 801845a:	e025      	b.n	80184a8 <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 801845c:	201f      	movs	r0, #31
 801845e:	183b      	adds	r3, r7, r0
 8018460:	2201      	movs	r2, #1
 8018462:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018464:	4b2b      	ldr	r3, [pc, #172]	; (8018514 <RegionEU868TxConfig+0x1d0>)
 8018466:	69dc      	ldr	r4, [r3, #28]
 8018468:	231e      	movs	r3, #30
 801846a:	18fb      	adds	r3, r7, r3
 801846c:	781b      	ldrb	r3, [r3, #0]
 801846e:	b25b      	sxtb	r3, r3
 8018470:	69bd      	ldr	r5, [r7, #24]
 8018472:	2217      	movs	r2, #23
 8018474:	18ba      	adds	r2, r7, r2
 8018476:	2100      	movs	r1, #0
 8018478:	5651      	ldrsb	r1, [r2, r1]
 801847a:	183a      	adds	r2, r7, r0
 801847c:	7810      	ldrb	r0, [r2, #0]
 801847e:	22fa      	movs	r2, #250	; 0xfa
 8018480:	0112      	lsls	r2, r2, #4
 8018482:	9208      	str	r2, [sp, #32]
 8018484:	2200      	movs	r2, #0
 8018486:	9207      	str	r2, [sp, #28]
 8018488:	2200      	movs	r2, #0
 801848a:	9206      	str	r2, [sp, #24]
 801848c:	2200      	movs	r2, #0
 801848e:	9205      	str	r2, [sp, #20]
 8018490:	2201      	movs	r2, #1
 8018492:	9204      	str	r2, [sp, #16]
 8018494:	2200      	movs	r2, #0
 8018496:	9203      	str	r2, [sp, #12]
 8018498:	2208      	movs	r2, #8
 801849a:	9202      	str	r2, [sp, #8]
 801849c:	2201      	movs	r2, #1
 801849e:	9201      	str	r2, [sp, #4]
 80184a0:	9300      	str	r3, [sp, #0]
 80184a2:	002b      	movs	r3, r5
 80184a4:	2200      	movs	r2, #0
 80184a6:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	781b      	ldrb	r3, [r3, #0]
 80184ac:	0019      	movs	r1, r3
 80184ae:	4a17      	ldr	r2, [pc, #92]	; (801850c <RegionEU868TxConfig+0x1c8>)
 80184b0:	000b      	movs	r3, r1
 80184b2:	005b      	lsls	r3, r3, #1
 80184b4:	185b      	adds	r3, r3, r1
 80184b6:	009b      	lsls	r3, r3, #2
 80184b8:	589a      	ldr	r2, [r3, r2]
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	785b      	ldrb	r3, [r3, #1]
 80184be:	b25b      	sxtb	r3, r3
 80184c0:	0019      	movs	r1, r3
 80184c2:	0010      	movs	r0, r2
 80184c4:	f7ff f98a 	bl	80177dc <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	2201      	movs	r2, #1
 80184cc:	569a      	ldrsb	r2, [r3, r2]
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	899b      	ldrh	r3, [r3, #12]
 80184d2:	0019      	movs	r1, r3
 80184d4:	0010      	movs	r0, r2
 80184d6:	f7ff fa81 	bl	80179dc <GetTimeOnAir>
 80184da:	0002      	movs	r2, r0
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80184e0:	4b0c      	ldr	r3, [pc, #48]	; (8018514 <RegionEU868TxConfig+0x1d0>)
 80184e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184e4:	68fa      	ldr	r2, [r7, #12]
 80184e6:	8992      	ldrh	r2, [r2, #12]
 80184e8:	b2d1      	uxtb	r1, r2
 80184ea:	221f      	movs	r2, #31
 80184ec:	18ba      	adds	r2, r7, r2
 80184ee:	7812      	ldrb	r2, [r2, #0]
 80184f0:	0010      	movs	r0, r2
 80184f2:	4798      	blx	r3

    *txPower = txPowerLimited;
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	221d      	movs	r2, #29
 80184f8:	18ba      	adds	r2, r7, r2
 80184fa:	7812      	ldrb	r2, [r2, #0]
 80184fc:	701a      	strb	r2, [r3, #0]
    return true;
 80184fe:	2301      	movs	r3, #1
}
 8018500:	0018      	movs	r0, r3
 8018502:	46bd      	mov	sp, r7
 8018504:	b009      	add	sp, #36	; 0x24
 8018506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018508:	0801f1d4 	.word	0x0801f1d4
 801850c:	20000d40 	.word	0x20000d40
 8018510:	20000e78 	.word	0x20000e78
 8018514:	0801f358 	.word	0x0801f358
 8018518:	000061a8 	.word	0x000061a8

0801851c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801851c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801851e:	b093      	sub	sp, #76	; 0x4c
 8018520:	af00      	add	r7, sp, #0
 8018522:	60f8      	str	r0, [r7, #12]
 8018524:	60b9      	str	r1, [r7, #8]
 8018526:	607a      	str	r2, [r7, #4]
 8018528:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801852a:	2347      	movs	r3, #71	; 0x47
 801852c:	18fb      	adds	r3, r7, r3
 801852e:	2207      	movs	r2, #7
 8018530:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018532:	233c      	movs	r3, #60	; 0x3c
 8018534:	18fb      	adds	r3, r7, r3
 8018536:	0018      	movs	r0, r3
 8018538:	2306      	movs	r3, #6
 801853a:	001a      	movs	r2, r3
 801853c:	2100      	movs	r1, #0
 801853e:	f005 fa24 	bl	801d98a <memset>
    uint8_t nextIndex = 0;
 8018542:	2344      	movs	r3, #68	; 0x44
 8018544:	18fb      	adds	r3, r7, r3
 8018546:	2200      	movs	r2, #0
 8018548:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801854a:	2346      	movs	r3, #70	; 0x46
 801854c:	18fb      	adds	r3, r7, r3
 801854e:	2200      	movs	r2, #0
 8018550:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8018552:	233a      	movs	r3, #58	; 0x3a
 8018554:	18fb      	adds	r3, r7, r3
 8018556:	2200      	movs	r2, #0
 8018558:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801855a:	e098      	b.n	801868e <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	685a      	ldr	r2, [r3, #4]
 8018560:	2546      	movs	r5, #70	; 0x46
 8018562:	197b      	adds	r3, r7, r5
 8018564:	781b      	ldrb	r3, [r3, #0]
 8018566:	18d3      	adds	r3, r2, r3
 8018568:	2644      	movs	r6, #68	; 0x44
 801856a:	19bc      	adds	r4, r7, r6
 801856c:	203c      	movs	r0, #60	; 0x3c
 801856e:	183a      	adds	r2, r7, r0
 8018570:	0011      	movs	r1, r2
 8018572:	0018      	movs	r0, r3
 8018574:	f7fe fdf8 	bl	8017168 <RegionCommonParseLinkAdrReq>
 8018578:	0003      	movs	r3, r0
 801857a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801857c:	0032      	movs	r2, r6
 801857e:	18bb      	adds	r3, r7, r2
 8018580:	781b      	ldrb	r3, [r3, #0]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d100      	bne.n	8018588 <RegionEU868LinkAdrReq+0x6c>
 8018586:	e08b      	b.n	80186a0 <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018588:	197b      	adds	r3, r7, r5
 801858a:	1979      	adds	r1, r7, r5
 801858c:	18ba      	adds	r2, r7, r2
 801858e:	7809      	ldrb	r1, [r1, #0]
 8018590:	7812      	ldrb	r2, [r2, #0]
 8018592:	188a      	adds	r2, r1, r2
 8018594:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018596:	2147      	movs	r1, #71	; 0x47
 8018598:	187b      	adds	r3, r7, r1
 801859a:	2207      	movs	r2, #7
 801859c:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801859e:	203c      	movs	r0, #60	; 0x3c
 80185a0:	183b      	adds	r3, r7, r0
 80185a2:	889a      	ldrh	r2, [r3, #4]
 80185a4:	243a      	movs	r4, #58	; 0x3a
 80185a6:	193b      	adds	r3, r7, r4
 80185a8:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80185aa:	183b      	adds	r3, r7, r0
 80185ac:	78db      	ldrb	r3, [r3, #3]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d10a      	bne.n	80185c8 <RegionEU868LinkAdrReq+0xac>
 80185b2:	193b      	adds	r3, r7, r4
 80185b4:	881b      	ldrh	r3, [r3, #0]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d106      	bne.n	80185c8 <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 80185ba:	187b      	adds	r3, r7, r1
 80185bc:	187a      	adds	r2, r7, r1
 80185be:	7812      	ldrb	r2, [r2, #0]
 80185c0:	2101      	movs	r1, #1
 80185c2:	438a      	bics	r2, r1
 80185c4:	701a      	strb	r2, [r3, #0]
 80185c6:	e062      	b.n	801868e <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80185c8:	223c      	movs	r2, #60	; 0x3c
 80185ca:	18bb      	adds	r3, r7, r2
 80185cc:	78db      	ldrb	r3, [r3, #3]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d003      	beq.n	80185da <RegionEU868LinkAdrReq+0xbe>
 80185d2:	18bb      	adds	r3, r7, r2
 80185d4:	78db      	ldrb	r3, [r3, #3]
 80185d6:	2b05      	cmp	r3, #5
 80185d8:	d904      	bls.n	80185e4 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80185da:	233c      	movs	r3, #60	; 0x3c
 80185dc:	18fb      	adds	r3, r7, r3
 80185de:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80185e0:	2b06      	cmp	r3, #6
 80185e2:	d907      	bls.n	80185f4 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80185e4:	2247      	movs	r2, #71	; 0x47
 80185e6:	18bb      	adds	r3, r7, r2
 80185e8:	18ba      	adds	r2, r7, r2
 80185ea:	7812      	ldrb	r2, [r2, #0]
 80185ec:	2101      	movs	r1, #1
 80185ee:	438a      	bics	r2, r1
 80185f0:	701a      	strb	r2, [r3, #0]
 80185f2:	e04c      	b.n	801868e <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80185f4:	2345      	movs	r3, #69	; 0x45
 80185f6:	18fb      	adds	r3, r7, r3
 80185f8:	2200      	movs	r2, #0
 80185fa:	701a      	strb	r2, [r3, #0]
 80185fc:	e042      	b.n	8018684 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80185fe:	233c      	movs	r3, #60	; 0x3c
 8018600:	18fb      	adds	r3, r7, r3
 8018602:	78db      	ldrb	r3, [r3, #3]
 8018604:	2b06      	cmp	r3, #6
 8018606:	d11a      	bne.n	801863e <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8018608:	2045      	movs	r0, #69	; 0x45
 801860a:	183b      	adds	r3, r7, r0
 801860c:	781a      	ldrb	r2, [r3, #0]
 801860e:	496d      	ldr	r1, [pc, #436]	; (80187c4 <RegionEU868LinkAdrReq+0x2a8>)
 8018610:	0013      	movs	r3, r2
 8018612:	005b      	lsls	r3, r3, #1
 8018614:	189b      	adds	r3, r3, r2
 8018616:	009b      	lsls	r3, r3, #2
 8018618:	585b      	ldr	r3, [r3, r1]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d02c      	beq.n	8018678 <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 801861e:	183b      	adds	r3, r7, r0
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	2201      	movs	r2, #1
 8018624:	409a      	lsls	r2, r3
 8018626:	0013      	movs	r3, r2
 8018628:	b21a      	sxth	r2, r3
 801862a:	213a      	movs	r1, #58	; 0x3a
 801862c:	187b      	adds	r3, r7, r1
 801862e:	881b      	ldrh	r3, [r3, #0]
 8018630:	b21b      	sxth	r3, r3
 8018632:	4313      	orrs	r3, r2
 8018634:	b21b      	sxth	r3, r3
 8018636:	b29a      	uxth	r2, r3
 8018638:	187b      	adds	r3, r7, r1
 801863a:	801a      	strh	r2, [r3, #0]
 801863c:	e01c      	b.n	8018678 <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801863e:	233a      	movs	r3, #58	; 0x3a
 8018640:	18fb      	adds	r3, r7, r3
 8018642:	881b      	ldrh	r3, [r3, #0]
 8018644:	001a      	movs	r2, r3
 8018646:	2145      	movs	r1, #69	; 0x45
 8018648:	187b      	adds	r3, r7, r1
 801864a:	781b      	ldrb	r3, [r3, #0]
 801864c:	411a      	asrs	r2, r3
 801864e:	0013      	movs	r3, r2
 8018650:	2201      	movs	r2, #1
 8018652:	4013      	ands	r3, r2
 8018654:	d010      	beq.n	8018678 <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018656:	187b      	adds	r3, r7, r1
 8018658:	781a      	ldrb	r2, [r3, #0]
 801865a:	495a      	ldr	r1, [pc, #360]	; (80187c4 <RegionEU868LinkAdrReq+0x2a8>)
 801865c:	0013      	movs	r3, r2
 801865e:	005b      	lsls	r3, r3, #1
 8018660:	189b      	adds	r3, r3, r2
 8018662:	009b      	lsls	r3, r3, #2
 8018664:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018666:	2b00      	cmp	r3, #0
 8018668:	d106      	bne.n	8018678 <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801866a:	2247      	movs	r2, #71	; 0x47
 801866c:	18bb      	adds	r3, r7, r2
 801866e:	18ba      	adds	r2, r7, r2
 8018670:	7812      	ldrb	r2, [r2, #0]
 8018672:	2101      	movs	r1, #1
 8018674:	438a      	bics	r2, r1
 8018676:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018678:	2145      	movs	r1, #69	; 0x45
 801867a:	187b      	adds	r3, r7, r1
 801867c:	781a      	ldrb	r2, [r3, #0]
 801867e:	187b      	adds	r3, r7, r1
 8018680:	3201      	adds	r2, #1
 8018682:	701a      	strb	r2, [r3, #0]
 8018684:	2345      	movs	r3, #69	; 0x45
 8018686:	18fb      	adds	r3, r7, r3
 8018688:	781b      	ldrb	r3, [r3, #0]
 801868a:	2b0f      	cmp	r3, #15
 801868c:	d9b7      	bls.n	80185fe <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	7a1b      	ldrb	r3, [r3, #8]
 8018692:	2246      	movs	r2, #70	; 0x46
 8018694:	18ba      	adds	r2, r7, r2
 8018696:	7812      	ldrb	r2, [r2, #0]
 8018698:	429a      	cmp	r2, r3
 801869a:	d200      	bcs.n	801869e <RegionEU868LinkAdrReq+0x182>
 801869c:	e75e      	b.n	801855c <RegionEU868LinkAdrReq+0x40>
 801869e:	e000      	b.n	80186a2 <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 80186a0:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80186a2:	2134      	movs	r1, #52	; 0x34
 80186a4:	187b      	adds	r3, r7, r1
 80186a6:	2202      	movs	r2, #2
 80186a8:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	7a5a      	ldrb	r2, [r3, #9]
 80186ae:	187b      	adds	r3, r7, r1
 80186b0:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80186b2:	187b      	adds	r3, r7, r1
 80186b4:	0018      	movs	r0, r3
 80186b6:	f7ff f9ef 	bl	8017a98 <RegionEU868GetPhyParam>
 80186ba:	0003      	movs	r3, r0
 80186bc:	001a      	movs	r2, r3
 80186be:	2030      	movs	r0, #48	; 0x30
 80186c0:	183b      	adds	r3, r7, r0
 80186c2:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80186c4:	2110      	movs	r1, #16
 80186c6:	187b      	adds	r3, r7, r1
 80186c8:	2447      	movs	r4, #71	; 0x47
 80186ca:	193a      	adds	r2, r7, r4
 80186cc:	7812      	ldrb	r2, [r2, #0]
 80186ce:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	7a9a      	ldrb	r2, [r3, #10]
 80186d4:	187b      	adds	r3, r7, r1
 80186d6:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80186d8:	253c      	movs	r5, #60	; 0x3c
 80186da:	197b      	adds	r3, r7, r5
 80186dc:	2201      	movs	r2, #1
 80186de:	569a      	ldrsb	r2, [r3, r2]
 80186e0:	187b      	adds	r3, r7, r1
 80186e2:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80186e4:	197b      	adds	r3, r7, r5
 80186e6:	2202      	movs	r2, #2
 80186e8:	569a      	ldrsb	r2, [r3, r2]
 80186ea:	187b      	adds	r3, r7, r1
 80186ec:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80186ee:	197b      	adds	r3, r7, r5
 80186f0:	781a      	ldrb	r2, [r3, #0]
 80186f2:	187b      	adds	r3, r7, r1
 80186f4:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	220b      	movs	r2, #11
 80186fa:	569a      	ldrsb	r2, [r3, r2]
 80186fc:	187b      	adds	r3, r7, r1
 80186fe:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	220c      	movs	r2, #12
 8018704:	569a      	ldrsb	r2, [r3, r2]
 8018706:	187b      	adds	r3, r7, r1
 8018708:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	7b5b      	ldrb	r3, [r3, #13]
 801870e:	b25a      	sxtb	r2, r3
 8018710:	187b      	adds	r3, r7, r1
 8018712:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018714:	187b      	adds	r3, r7, r1
 8018716:	2210      	movs	r2, #16
 8018718:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801871a:	187b      	adds	r3, r7, r1
 801871c:	223a      	movs	r2, #58	; 0x3a
 801871e:	18ba      	adds	r2, r7, r2
 8018720:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018722:	183b      	adds	r3, r7, r0
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	b25a      	sxtb	r2, r3
 8018728:	0008      	movs	r0, r1
 801872a:	183b      	adds	r3, r7, r0
 801872c:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801872e:	183b      	adds	r3, r7, r0
 8018730:	2207      	movs	r2, #7
 8018732:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018734:	183b      	adds	r3, r7, r0
 8018736:	4a23      	ldr	r2, [pc, #140]	; (80187c4 <RegionEU868LinkAdrReq+0x2a8>)
 8018738:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801873a:	183b      	adds	r3, r7, r0
 801873c:	2207      	movs	r2, #7
 801873e:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018740:	183b      	adds	r3, r7, r0
 8018742:	2200      	movs	r2, #0
 8018744:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018746:	183b      	adds	r3, r7, r0
 8018748:	68fa      	ldr	r2, [r7, #12]
 801874a:	6812      	ldr	r2, [r2, #0]
 801874c:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801874e:	0026      	movs	r6, r4
 8018750:	193c      	adds	r4, r7, r4
 8018752:	0029      	movs	r1, r5
 8018754:	187d      	adds	r5, r7, r1
 8018756:	187b      	adds	r3, r7, r1
 8018758:	1c9a      	adds	r2, r3, #2
 801875a:	187b      	adds	r3, r7, r1
 801875c:	1c59      	adds	r1, r3, #1
 801875e:	1838      	adds	r0, r7, r0
 8018760:	002b      	movs	r3, r5
 8018762:	f7fe fd56 	bl	8017212 <RegionCommonLinkAdrReqVerifyParams>
 8018766:	0003      	movs	r3, r0
 8018768:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801876a:	19bb      	adds	r3, r7, r6
 801876c:	781b      	ldrb	r3, [r3, #0]
 801876e:	2b07      	cmp	r3, #7
 8018770:	d10c      	bne.n	801878c <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018772:	4b15      	ldr	r3, [pc, #84]	; (80187c8 <RegionEU868LinkAdrReq+0x2ac>)
 8018774:	2202      	movs	r2, #2
 8018776:	2100      	movs	r1, #0
 8018778:	0018      	movs	r0, r3
 801877a:	f000 fbe9 	bl	8018f50 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 801877e:	223a      	movs	r2, #58	; 0x3a
 8018780:	18bb      	adds	r3, r7, r2
 8018782:	8819      	ldrh	r1, [r3, #0]
 8018784:	4a0f      	ldr	r2, [pc, #60]	; (80187c4 <RegionEU868LinkAdrReq+0x2a8>)
 8018786:	239c      	movs	r3, #156	; 0x9c
 8018788:	005b      	lsls	r3, r3, #1
 801878a:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801878c:	213c      	movs	r1, #60	; 0x3c
 801878e:	187b      	adds	r3, r7, r1
 8018790:	2201      	movs	r2, #1
 8018792:	569a      	ldrsb	r2, [r3, r2]
 8018794:	68bb      	ldr	r3, [r7, #8]
 8018796:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018798:	187b      	adds	r3, r7, r1
 801879a:	2202      	movs	r2, #2
 801879c:	569a      	ldrsb	r2, [r3, r2]
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80187a2:	187b      	adds	r3, r7, r1
 80187a4:	781a      	ldrb	r2, [r3, #0]
 80187a6:	683b      	ldr	r3, [r7, #0]
 80187a8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80187aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80187ac:	2246      	movs	r2, #70	; 0x46
 80187ae:	18ba      	adds	r2, r7, r2
 80187b0:	7812      	ldrb	r2, [r2, #0]
 80187b2:	701a      	strb	r2, [r3, #0]

    return status;
 80187b4:	2347      	movs	r3, #71	; 0x47
 80187b6:	18fb      	adds	r3, r7, r3
 80187b8:	781b      	ldrb	r3, [r3, #0]
}
 80187ba:	0018      	movs	r0, r3
 80187bc:	46bd      	mov	sp, r7
 80187be:	b013      	add	sp, #76	; 0x4c
 80187c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187c2:	46c0      	nop			; (mov r8, r8)
 80187c4:	20000d40 	.word	0x20000d40
 80187c8:	20000e78 	.word	0x20000e78

080187cc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80187cc:	b590      	push	{r4, r7, lr}
 80187ce:	b085      	sub	sp, #20
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80187d4:	240f      	movs	r4, #15
 80187d6:	193b      	adds	r3, r7, r4
 80187d8:	2207      	movs	r2, #7
 80187da:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 80187dc:	210e      	movs	r1, #14
 80187de:	187b      	adds	r3, r7, r1
 80187e0:	2200      	movs	r2, #0
 80187e2:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	187a      	adds	r2, r7, r1
 80187ea:	0011      	movs	r1, r2
 80187ec:	0018      	movs	r0, r3
 80187ee:	f7ff f87d 	bl	80178ec <VerifyRfFreq>
 80187f2:	0003      	movs	r3, r0
 80187f4:	001a      	movs	r2, r3
 80187f6:	2301      	movs	r3, #1
 80187f8:	4053      	eors	r3, r2
 80187fa:	b2db      	uxtb	r3, r3
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d005      	beq.n	801880c <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018800:	193b      	adds	r3, r7, r4
 8018802:	193a      	adds	r2, r7, r4
 8018804:	7812      	ldrb	r2, [r2, #0]
 8018806:	2101      	movs	r1, #1
 8018808:	438a      	bics	r2, r1
 801880a:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	781b      	ldrb	r3, [r3, #0]
 8018810:	b25b      	sxtb	r3, r3
 8018812:	2207      	movs	r2, #7
 8018814:	2100      	movs	r1, #0
 8018816:	0018      	movs	r0, r3
 8018818:	f7fe fac9 	bl	8016dae <RegionCommonValueInRange>
 801881c:	1e03      	subs	r3, r0, #0
 801881e:	d106      	bne.n	801882e <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 8018820:	220f      	movs	r2, #15
 8018822:	18bb      	adds	r3, r7, r2
 8018824:	18ba      	adds	r2, r7, r2
 8018826:	7812      	ldrb	r2, [r2, #0]
 8018828:	2102      	movs	r1, #2
 801882a:	438a      	bics	r2, r1
 801882c:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	785b      	ldrb	r3, [r3, #1]
 8018832:	b25b      	sxtb	r3, r3
 8018834:	2205      	movs	r2, #5
 8018836:	2100      	movs	r1, #0
 8018838:	0018      	movs	r0, r3
 801883a:	f7fe fab8 	bl	8016dae <RegionCommonValueInRange>
 801883e:	1e03      	subs	r3, r0, #0
 8018840:	d106      	bne.n	8018850 <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018842:	220f      	movs	r2, #15
 8018844:	18bb      	adds	r3, r7, r2
 8018846:	18ba      	adds	r2, r7, r2
 8018848:	7812      	ldrb	r2, [r2, #0]
 801884a:	2104      	movs	r1, #4
 801884c:	438a      	bics	r2, r1
 801884e:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8018850:	230f      	movs	r3, #15
 8018852:	18fb      	adds	r3, r7, r3
 8018854:	781b      	ldrb	r3, [r3, #0]
}
 8018856:	0018      	movs	r0, r3
 8018858:	46bd      	mov	sp, r7
 801885a:	b005      	add	sp, #20
 801885c:	bd90      	pop	{r4, r7, pc}

0801885e <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801885e:	b590      	push	{r4, r7, lr}
 8018860:	b087      	sub	sp, #28
 8018862:	af00      	add	r7, sp, #0
 8018864:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018866:	2417      	movs	r4, #23
 8018868:	193b      	adds	r3, r7, r4
 801886a:	2203      	movs	r2, #3
 801886c:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d118      	bne.n	80188aa <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	791b      	ldrb	r3, [r3, #4]
 801887c:	b25b      	sxtb	r3, r3
 801887e:	b2da      	uxtb	r2, r3
 8018880:	2108      	movs	r1, #8
 8018882:	187b      	adds	r3, r7, r1
 8018884:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018886:	187b      	adds	r3, r7, r1
 8018888:	0018      	movs	r0, r3
 801888a:	f000 fa35 	bl	8018cf8 <RegionEU868ChannelsRemove>
 801888e:	0003      	movs	r3, r0
 8018890:	001a      	movs	r2, r3
 8018892:	2301      	movs	r3, #1
 8018894:	4053      	eors	r3, r2
 8018896:	b2db      	uxtb	r3, r3
 8018898:	2b00      	cmp	r3, #0
 801889a:	d041      	beq.n	8018920 <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 801889c:	193b      	adds	r3, r7, r4
 801889e:	193a      	adds	r2, r7, r4
 80188a0:	7812      	ldrb	r2, [r2, #0]
 80188a2:	2103      	movs	r1, #3
 80188a4:	438a      	bics	r2, r1
 80188a6:	701a      	strb	r2, [r3, #0]
 80188a8:	e03a      	b.n	8018920 <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681a      	ldr	r2, [r3, #0]
 80188ae:	210c      	movs	r1, #12
 80188b0:	187b      	adds	r3, r7, r1
 80188b2:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	791b      	ldrb	r3, [r3, #4]
 80188b8:	b25b      	sxtb	r3, r3
 80188ba:	b2da      	uxtb	r2, r3
 80188bc:	187b      	adds	r3, r7, r1
 80188be:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80188c0:	187b      	adds	r3, r7, r1
 80188c2:	0018      	movs	r0, r3
 80188c4:	f000 f954 	bl	8018b70 <RegionEU868ChannelAdd>
 80188c8:	0003      	movs	r3, r0
 80188ca:	2b06      	cmp	r3, #6
 80188cc:	d017      	beq.n	80188fe <RegionEU868NewChannelReq+0xa0>
 80188ce:	dc1e      	bgt.n	801890e <RegionEU868NewChannelReq+0xb0>
 80188d0:	2b05      	cmp	r3, #5
 80188d2:	d00c      	beq.n	80188ee <RegionEU868NewChannelReq+0x90>
 80188d4:	dc1b      	bgt.n	801890e <RegionEU868NewChannelReq+0xb0>
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d021      	beq.n	801891e <RegionEU868NewChannelReq+0xc0>
 80188da:	2b04      	cmp	r3, #4
 80188dc:	d117      	bne.n	801890e <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80188de:	2217      	movs	r2, #23
 80188e0:	18bb      	adds	r3, r7, r2
 80188e2:	18ba      	adds	r2, r7, r2
 80188e4:	7812      	ldrb	r2, [r2, #0]
 80188e6:	2101      	movs	r1, #1
 80188e8:	438a      	bics	r2, r1
 80188ea:	701a      	strb	r2, [r3, #0]
                break;
 80188ec:	e018      	b.n	8018920 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80188ee:	2217      	movs	r2, #23
 80188f0:	18bb      	adds	r3, r7, r2
 80188f2:	18ba      	adds	r2, r7, r2
 80188f4:	7812      	ldrb	r2, [r2, #0]
 80188f6:	2102      	movs	r1, #2
 80188f8:	438a      	bics	r2, r1
 80188fa:	701a      	strb	r2, [r3, #0]
                break;
 80188fc:	e010      	b.n	8018920 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80188fe:	2217      	movs	r2, #23
 8018900:	18bb      	adds	r3, r7, r2
 8018902:	18ba      	adds	r2, r7, r2
 8018904:	7812      	ldrb	r2, [r2, #0]
 8018906:	2103      	movs	r1, #3
 8018908:	438a      	bics	r2, r1
 801890a:	701a      	strb	r2, [r3, #0]
                break;
 801890c:	e008      	b.n	8018920 <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 801890e:	2217      	movs	r2, #23
 8018910:	18bb      	adds	r3, r7, r2
 8018912:	18ba      	adds	r2, r7, r2
 8018914:	7812      	ldrb	r2, [r2, #0]
 8018916:	2103      	movs	r1, #3
 8018918:	438a      	bics	r2, r1
 801891a:	701a      	strb	r2, [r3, #0]
                break;
 801891c:	e000      	b.n	8018920 <RegionEU868NewChannelReq+0xc2>
                break;
 801891e:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8018920:	2317      	movs	r3, #23
 8018922:	18fb      	adds	r3, r7, r3
 8018924:	781b      	ldrb	r3, [r3, #0]
}
 8018926:	0018      	movs	r0, r3
 8018928:	46bd      	mov	sp, r7
 801892a:	b007      	add	sp, #28
 801892c:	bd90      	pop	{r4, r7, pc}

0801892e <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801892e:	b580      	push	{r7, lr}
 8018930:	b082      	sub	sp, #8
 8018932:	af00      	add	r7, sp, #0
 8018934:	6078      	str	r0, [r7, #4]
    return -1;
 8018936:	2301      	movs	r3, #1
 8018938:	425b      	negs	r3, r3
}
 801893a:	0018      	movs	r0, r3
 801893c:	46bd      	mov	sp, r7
 801893e:	b002      	add	sp, #8
 8018940:	bd80      	pop	{r7, pc}
	...

08018944 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018944:	b590      	push	{r4, r7, lr}
 8018946:	b085      	sub	sp, #20
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801894c:	240f      	movs	r4, #15
 801894e:	193b      	adds	r3, r7, r4
 8018950:	2203      	movs	r2, #3
 8018952:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018954:	210e      	movs	r1, #14
 8018956:	187b      	adds	r3, r7, r1
 8018958:	2200      	movs	r2, #0
 801895a:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	685b      	ldr	r3, [r3, #4]
 8018960:	187a      	adds	r2, r7, r1
 8018962:	0011      	movs	r1, r2
 8018964:	0018      	movs	r0, r3
 8018966:	f7fe ffc1 	bl	80178ec <VerifyRfFreq>
 801896a:	0003      	movs	r3, r0
 801896c:	001a      	movs	r2, r3
 801896e:	2301      	movs	r3, #1
 8018970:	4053      	eors	r3, r2
 8018972:	b2db      	uxtb	r3, r3
 8018974:	2b00      	cmp	r3, #0
 8018976:	d005      	beq.n	8018984 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018978:	193b      	adds	r3, r7, r4
 801897a:	193a      	adds	r2, r7, r4
 801897c:	7812      	ldrb	r2, [r2, #0]
 801897e:	2101      	movs	r1, #1
 8018980:	438a      	bics	r2, r1
 8018982:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	781b      	ldrb	r3, [r3, #0]
 8018988:	0019      	movs	r1, r3
 801898a:	4a14      	ldr	r2, [pc, #80]	; (80189dc <RegionEU868DlChannelReq+0x98>)
 801898c:	000b      	movs	r3, r1
 801898e:	005b      	lsls	r3, r3, #1
 8018990:	185b      	adds	r3, r3, r1
 8018992:	009b      	lsls	r3, r3, #2
 8018994:	589b      	ldr	r3, [r3, r2]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d106      	bne.n	80189a8 <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 801899a:	220f      	movs	r2, #15
 801899c:	18bb      	adds	r3, r7, r2
 801899e:	18ba      	adds	r2, r7, r2
 80189a0:	7812      	ldrb	r2, [r2, #0]
 80189a2:	2102      	movs	r1, #2
 80189a4:	438a      	bics	r2, r1
 80189a6:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80189a8:	230f      	movs	r3, #15
 80189aa:	18fb      	adds	r3, r7, r3
 80189ac:	781b      	ldrb	r3, [r3, #0]
 80189ae:	2b03      	cmp	r3, #3
 80189b0:	d10c      	bne.n	80189cc <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	781b      	ldrb	r3, [r3, #0]
 80189b6:	0018      	movs	r0, r3
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	685a      	ldr	r2, [r3, #4]
 80189bc:	4907      	ldr	r1, [pc, #28]	; (80189dc <RegionEU868DlChannelReq+0x98>)
 80189be:	0003      	movs	r3, r0
 80189c0:	005b      	lsls	r3, r3, #1
 80189c2:	181b      	adds	r3, r3, r0
 80189c4:	009b      	lsls	r3, r3, #2
 80189c6:	18cb      	adds	r3, r1, r3
 80189c8:	3304      	adds	r3, #4
 80189ca:	601a      	str	r2, [r3, #0]
    }

    return status;
 80189cc:	230f      	movs	r3, #15
 80189ce:	18fb      	adds	r3, r7, r3
 80189d0:	781b      	ldrb	r3, [r3, #0]
}
 80189d2:	0018      	movs	r0, r3
 80189d4:	46bd      	mov	sp, r7
 80189d6:	b005      	add	sp, #20
 80189d8:	bd90      	pop	{r4, r7, pc}
 80189da:	46c0      	nop			; (mov r8, r8)
 80189dc:	20000d40 	.word	0x20000d40

080189e0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b082      	sub	sp, #8
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	0002      	movs	r2, r0
 80189e8:	1dfb      	adds	r3, r7, #7
 80189ea:	701a      	strb	r2, [r3, #0]
 80189ec:	1dbb      	adds	r3, r7, #6
 80189ee:	1c0a      	adds	r2, r1, #0
 80189f0:	701a      	strb	r2, [r3, #0]
    return currentDr;
 80189f2:	1dfb      	adds	r3, r7, #7
 80189f4:	781b      	ldrb	r3, [r3, #0]
 80189f6:	b25b      	sxtb	r3, r3
}
 80189f8:	0018      	movs	r0, r3
 80189fa:	46bd      	mov	sp, r7
 80189fc:	b002      	add	sp, #8
 80189fe:	bd80      	pop	{r7, pc}

08018a00 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a02:	b099      	sub	sp, #100	; 0x64
 8018a04:	af02      	add	r7, sp, #8
 8018a06:	60f8      	str	r0, [r7, #12]
 8018a08:	60b9      	str	r1, [r7, #8]
 8018a0a:	607a      	str	r2, [r7, #4]
 8018a0c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8018a0e:	2356      	movs	r3, #86	; 0x56
 8018a10:	18fb      	adds	r3, r7, r3
 8018a12:	2200      	movs	r2, #0
 8018a14:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8018a16:	2355      	movs	r3, #85	; 0x55
 8018a18:	18fb      	adds	r3, r7, r3
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018a1e:	2344      	movs	r3, #68	; 0x44
 8018a20:	18fb      	adds	r3, r7, r3
 8018a22:	2200      	movs	r2, #0
 8018a24:	601a      	str	r2, [r3, #0]
 8018a26:	3304      	adds	r3, #4
 8018a28:	220c      	movs	r2, #12
 8018a2a:	2100      	movs	r1, #0
 8018a2c:	0018      	movs	r0, r3
 8018a2e:	f004 ffac 	bl	801d98a <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018a32:	2357      	movs	r3, #87	; 0x57
 8018a34:	18fb      	adds	r3, r7, r3
 8018a36:	220c      	movs	r2, #12
 8018a38:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8018a3a:	4b4a      	ldr	r3, [pc, #296]	; (8018b64 <RegionEU868NextChannel+0x164>)
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	2100      	movs	r1, #0
 8018a40:	0018      	movs	r0, r3
 8018a42:	f7fe fa1c 	bl	8016e7e <RegionCommonCountChannels>
 8018a46:	1e03      	subs	r3, r0, #0
 8018a48:	d10a      	bne.n	8018a60 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018a4a:	4a47      	ldr	r2, [pc, #284]	; (8018b68 <RegionEU868NextChannel+0x168>)
 8018a4c:	239c      	movs	r3, #156	; 0x9c
 8018a4e:	005b      	lsls	r3, r3, #1
 8018a50:	5ad3      	ldrh	r3, [r2, r3]
 8018a52:	2207      	movs	r2, #7
 8018a54:	4313      	orrs	r3, r2
 8018a56:	b299      	uxth	r1, r3
 8018a58:	4a43      	ldr	r2, [pc, #268]	; (8018b68 <RegionEU868NextChannel+0x168>)
 8018a5a:	239c      	movs	r3, #156	; 0x9c
 8018a5c:	005b      	lsls	r3, r3, #1
 8018a5e:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	7a5a      	ldrb	r2, [r3, #9]
 8018a64:	2110      	movs	r1, #16
 8018a66:	187b      	adds	r3, r7, r1
 8018a68:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	7a1b      	ldrb	r3, [r3, #8]
 8018a6e:	b25b      	sxtb	r3, r3
 8018a70:	b2da      	uxtb	r2, r3
 8018a72:	187b      	adds	r3, r7, r1
 8018a74:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 8018a76:	000d      	movs	r5, r1
 8018a78:	197b      	adds	r3, r7, r5
 8018a7a:	4a3a      	ldr	r2, [pc, #232]	; (8018b64 <RegionEU868NextChannel+0x164>)
 8018a7c:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 8018a7e:	197b      	adds	r3, r7, r5
 8018a80:	4a39      	ldr	r2, [pc, #228]	; (8018b68 <RegionEU868NextChannel+0x168>)
 8018a82:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 8018a84:	197b      	adds	r3, r7, r5
 8018a86:	4a39      	ldr	r2, [pc, #228]	; (8018b6c <RegionEU868NextChannel+0x16c>)
 8018a88:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018a8a:	197b      	adds	r3, r7, r5
 8018a8c:	2210      	movs	r2, #16
 8018a8e:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 8018a90:	197b      	adds	r3, r7, r5
 8018a92:	2207      	movs	r2, #7
 8018a94:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	681a      	ldr	r2, [r3, #0]
 8018a9a:	2424      	movs	r4, #36	; 0x24
 8018a9c:	193b      	adds	r3, r7, r4
 8018a9e:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	685a      	ldr	r2, [r3, #4]
 8018aa4:	193b      	adds	r3, r7, r4
 8018aa6:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	7a9a      	ldrb	r2, [r3, #10]
 8018aac:	193b      	adds	r3, r7, r4
 8018aae:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018ab0:	193b      	adds	r3, r7, r4
 8018ab2:	2206      	movs	r2, #6
 8018ab4:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018ab6:	193b      	adds	r3, r7, r4
 8018ab8:	68fa      	ldr	r2, [r7, #12]
 8018aba:	330c      	adds	r3, #12
 8018abc:	320c      	adds	r2, #12
 8018abe:	ca03      	ldmia	r2!, {r0, r1}
 8018ac0:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	7d1a      	ldrb	r2, [r3, #20]
 8018ac6:	193b      	adds	r3, r7, r4
 8018ac8:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	2208      	movs	r2, #8
 8018ace:	569a      	ldrsb	r2, [r3, r2]
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	8adb      	ldrh	r3, [r3, #22]
 8018ad4:	0019      	movs	r1, r3
 8018ad6:	0010      	movs	r0, r2
 8018ad8:	f7fe ff80 	bl	80179dc <GetTimeOnAir>
 8018adc:	0002      	movs	r2, r0
 8018ade:	0020      	movs	r0, r4
 8018ae0:	183b      	adds	r3, r7, r0
 8018ae2:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018ae4:	183b      	adds	r3, r7, r0
 8018ae6:	197a      	adds	r2, r7, r5
 8018ae8:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018aea:	2657      	movs	r6, #87	; 0x57
 8018aec:	19bc      	adds	r4, r7, r6
 8018aee:	2356      	movs	r3, #86	; 0x56
 8018af0:	18fd      	adds	r5, r7, r3
 8018af2:	2244      	movs	r2, #68	; 0x44
 8018af4:	18ba      	adds	r2, r7, r2
 8018af6:	6839      	ldr	r1, [r7, #0]
 8018af8:	1838      	adds	r0, r7, r0
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	9301      	str	r3, [sp, #4]
 8018afe:	2355      	movs	r3, #85	; 0x55
 8018b00:	18fb      	adds	r3, r7, r3
 8018b02:	9300      	str	r3, [sp, #0]
 8018b04:	002b      	movs	r3, r5
 8018b06:	f7fe fdbf 	bl	8017688 <RegionCommonIdentifyChannels>
 8018b0a:	0003      	movs	r3, r0
 8018b0c:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018b0e:	19bb      	adds	r3, r7, r6
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d10e      	bne.n	8018b34 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018b16:	2356      	movs	r3, #86	; 0x56
 8018b18:	18fb      	adds	r3, r7, r3
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	3b01      	subs	r3, #1
 8018b1e:	0019      	movs	r1, r3
 8018b20:	2000      	movs	r0, #0
 8018b22:	f000 f9c1 	bl	8018ea8 <randr>
 8018b26:	0002      	movs	r2, r0
 8018b28:	2344      	movs	r3, #68	; 0x44
 8018b2a:	18fb      	adds	r3, r7, r3
 8018b2c:	5c9a      	ldrb	r2, [r3, r2]
 8018b2e:	68bb      	ldr	r3, [r7, #8]
 8018b30:	701a      	strb	r2, [r3, #0]
 8018b32:	e00f      	b.n	8018b54 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018b34:	2357      	movs	r3, #87	; 0x57
 8018b36:	18fb      	adds	r3, r7, r3
 8018b38:	781b      	ldrb	r3, [r3, #0]
 8018b3a:	2b0c      	cmp	r3, #12
 8018b3c:	d10a      	bne.n	8018b54 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018b3e:	4a0a      	ldr	r2, [pc, #40]	; (8018b68 <RegionEU868NextChannel+0x168>)
 8018b40:	239c      	movs	r3, #156	; 0x9c
 8018b42:	005b      	lsls	r3, r3, #1
 8018b44:	5ad3      	ldrh	r3, [r2, r3]
 8018b46:	2207      	movs	r2, #7
 8018b48:	4313      	orrs	r3, r2
 8018b4a:	b299      	uxth	r1, r3
 8018b4c:	4a06      	ldr	r2, [pc, #24]	; (8018b68 <RegionEU868NextChannel+0x168>)
 8018b4e:	239c      	movs	r3, #156	; 0x9c
 8018b50:	005b      	lsls	r3, r3, #1
 8018b52:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8018b54:	2357      	movs	r3, #87	; 0x57
 8018b56:	18fb      	adds	r3, r7, r3
 8018b58:	781b      	ldrb	r3, [r3, #0]
}
 8018b5a:	0018      	movs	r0, r3
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	b017      	add	sp, #92	; 0x5c
 8018b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b62:	46c0      	nop			; (mov r8, r8)
 8018b64:	20000e78 	.word	0x20000e78
 8018b68:	20000d40 	.word	0x20000d40
 8018b6c:	20000e00 	.word	0x20000e00

08018b70 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018b70:	b590      	push	{r4, r7, lr}
 8018b72:	b085      	sub	sp, #20
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8018b78:	230c      	movs	r3, #12
 8018b7a:	18fb      	adds	r3, r7, r3
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8018b80:	230f      	movs	r3, #15
 8018b82:	18fb      	adds	r3, r7, r3
 8018b84:	2200      	movs	r2, #0
 8018b86:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8018b88:	230e      	movs	r3, #14
 8018b8a:	18fb      	adds	r3, r7, r3
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8018b90:	210d      	movs	r1, #13
 8018b92:	187b      	adds	r3, r7, r1
 8018b94:	687a      	ldr	r2, [r7, #4]
 8018b96:	7912      	ldrb	r2, [r2, #4]
 8018b98:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018b9a:	187b      	adds	r3, r7, r1
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	2b02      	cmp	r3, #2
 8018ba0:	d801      	bhi.n	8018ba6 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018ba2:	2306      	movs	r3, #6
 8018ba4:	e0a1      	b.n	8018cea <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018ba6:	230d      	movs	r3, #13
 8018ba8:	18fb      	adds	r3, r7, r3
 8018baa:	781b      	ldrb	r3, [r3, #0]
 8018bac:	2b0f      	cmp	r3, #15
 8018bae:	d901      	bls.n	8018bb4 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018bb0:	2303      	movs	r3, #3
 8018bb2:	e09a      	b.n	8018cea <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	7a1b      	ldrb	r3, [r3, #8]
 8018bba:	011b      	lsls	r3, r3, #4
 8018bbc:	b25b      	sxtb	r3, r3
 8018bbe:	111b      	asrs	r3, r3, #4
 8018bc0:	b25b      	sxtb	r3, r3
 8018bc2:	2207      	movs	r2, #7
 8018bc4:	2100      	movs	r1, #0
 8018bc6:	0018      	movs	r0, r3
 8018bc8:	f7fe f8f1 	bl	8016dae <RegionCommonValueInRange>
 8018bcc:	1e03      	subs	r3, r0, #0
 8018bce:	d103      	bne.n	8018bd8 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8018bd0:	230f      	movs	r3, #15
 8018bd2:	18fb      	adds	r3, r7, r3
 8018bd4:	2201      	movs	r2, #1
 8018bd6:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	7a1b      	ldrb	r3, [r3, #8]
 8018bde:	b25b      	sxtb	r3, r3
 8018be0:	111b      	asrs	r3, r3, #4
 8018be2:	b25b      	sxtb	r3, r3
 8018be4:	2207      	movs	r2, #7
 8018be6:	2100      	movs	r1, #0
 8018be8:	0018      	movs	r0, r3
 8018bea:	f7fe f8e0 	bl	8016dae <RegionCommonValueInRange>
 8018bee:	1e03      	subs	r3, r0, #0
 8018bf0:	d103      	bne.n	8018bfa <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8018bf2:	230f      	movs	r3, #15
 8018bf4:	18fb      	adds	r3, r7, r3
 8018bf6:	2201      	movs	r2, #1
 8018bf8:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	7a1b      	ldrb	r3, [r3, #8]
 8018c00:	011b      	lsls	r3, r3, #4
 8018c02:	b25b      	sxtb	r3, r3
 8018c04:	111b      	asrs	r3, r3, #4
 8018c06:	b25a      	sxtb	r2, r3
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	7a1b      	ldrb	r3, [r3, #8]
 8018c0e:	b25b      	sxtb	r3, r3
 8018c10:	111b      	asrs	r3, r3, #4
 8018c12:	b25b      	sxtb	r3, r3
 8018c14:	429a      	cmp	r2, r3
 8018c16:	dd03      	ble.n	8018c20 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8018c18:	230f      	movs	r3, #15
 8018c1a:	18fb      	adds	r3, r7, r3
 8018c1c:	2201      	movs	r2, #1
 8018c1e:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8018c20:	240e      	movs	r4, #14
 8018c22:	193b      	adds	r3, r7, r4
 8018c24:	781b      	ldrb	r3, [r3, #0]
 8018c26:	2201      	movs	r2, #1
 8018c28:	4053      	eors	r3, r2
 8018c2a:	b2db      	uxtb	r3, r3
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d012      	beq.n	8018c56 <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	220c      	movs	r2, #12
 8018c38:	18ba      	adds	r2, r7, r2
 8018c3a:	0011      	movs	r1, r2
 8018c3c:	0018      	movs	r0, r3
 8018c3e:	f7fe fe55 	bl	80178ec <VerifyRfFreq>
 8018c42:	0003      	movs	r3, r0
 8018c44:	001a      	movs	r2, r3
 8018c46:	2301      	movs	r3, #1
 8018c48:	4053      	eors	r3, r2
 8018c4a:	b2db      	uxtb	r3, r3
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d002      	beq.n	8018c56 <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 8018c50:	193b      	adds	r3, r7, r4
 8018c52:	2201      	movs	r2, #1
 8018c54:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018c56:	230f      	movs	r3, #15
 8018c58:	18fb      	adds	r3, r7, r3
 8018c5a:	781b      	ldrb	r3, [r3, #0]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d006      	beq.n	8018c6e <RegionEU868ChannelAdd+0xfe>
 8018c60:	230e      	movs	r3, #14
 8018c62:	18fb      	adds	r3, r7, r3
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d001      	beq.n	8018c6e <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018c6a:	2306      	movs	r3, #6
 8018c6c:	e03d      	b.n	8018cea <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 8018c6e:	230f      	movs	r3, #15
 8018c70:	18fb      	adds	r3, r7, r3
 8018c72:	781b      	ldrb	r3, [r3, #0]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d001      	beq.n	8018c7c <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018c78:	2305      	movs	r3, #5
 8018c7a:	e036      	b.n	8018cea <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 8018c7c:	230e      	movs	r3, #14
 8018c7e:	18fb      	adds	r3, r7, r3
 8018c80:	781b      	ldrb	r3, [r3, #0]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d001      	beq.n	8018c8a <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018c86:	2304      	movs	r3, #4
 8018c88:	e02f      	b.n	8018cea <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8018c8a:	240d      	movs	r4, #13
 8018c8c:	193b      	adds	r3, r7, r4
 8018c8e:	781a      	ldrb	r2, [r3, #0]
 8018c90:	0013      	movs	r3, r2
 8018c92:	005b      	lsls	r3, r3, #1
 8018c94:	189b      	adds	r3, r3, r2
 8018c96:	009b      	lsls	r3, r3, #2
 8018c98:	4a16      	ldr	r2, [pc, #88]	; (8018cf4 <RegionEU868ChannelAdd+0x184>)
 8018c9a:	1898      	adds	r0, r3, r2
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	220c      	movs	r2, #12
 8018ca2:	0019      	movs	r1, r3
 8018ca4:	f000 f916 	bl	8018ed4 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8018ca8:	193b      	adds	r3, r7, r4
 8018caa:	781a      	ldrb	r2, [r3, #0]
 8018cac:	230c      	movs	r3, #12
 8018cae:	18fb      	adds	r3, r7, r3
 8018cb0:	7818      	ldrb	r0, [r3, #0]
 8018cb2:	4910      	ldr	r1, [pc, #64]	; (8018cf4 <RegionEU868ChannelAdd+0x184>)
 8018cb4:	0013      	movs	r3, r2
 8018cb6:	005b      	lsls	r3, r3, #1
 8018cb8:	189b      	adds	r3, r3, r2
 8018cba:	009b      	lsls	r3, r3, #2
 8018cbc:	18cb      	adds	r3, r1, r3
 8018cbe:	3309      	adds	r3, #9
 8018cc0:	1c02      	adds	r2, r0, #0
 8018cc2:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8018cc4:	4a0b      	ldr	r2, [pc, #44]	; (8018cf4 <RegionEU868ChannelAdd+0x184>)
 8018cc6:	239c      	movs	r3, #156	; 0x9c
 8018cc8:	005b      	lsls	r3, r3, #1
 8018cca:	5ad3      	ldrh	r3, [r2, r3]
 8018ccc:	b21a      	sxth	r2, r3
 8018cce:	193b      	adds	r3, r7, r4
 8018cd0:	781b      	ldrb	r3, [r3, #0]
 8018cd2:	2101      	movs	r1, #1
 8018cd4:	4099      	lsls	r1, r3
 8018cd6:	000b      	movs	r3, r1
 8018cd8:	b21b      	sxth	r3, r3
 8018cda:	4313      	orrs	r3, r2
 8018cdc:	b21b      	sxth	r3, r3
 8018cde:	b299      	uxth	r1, r3
 8018ce0:	4a04      	ldr	r2, [pc, #16]	; (8018cf4 <RegionEU868ChannelAdd+0x184>)
 8018ce2:	239c      	movs	r3, #156	; 0x9c
 8018ce4:	005b      	lsls	r3, r3, #1
 8018ce6:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8018ce8:	2300      	movs	r3, #0
}
 8018cea:	0018      	movs	r0, r3
 8018cec:	46bd      	mov	sp, r7
 8018cee:	b005      	add	sp, #20
 8018cf0:	bd90      	pop	{r4, r7, pc}
 8018cf2:	46c0      	nop			; (mov r8, r8)
 8018cf4:	20000d40 	.word	0x20000d40

08018cf8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018cf8:	b590      	push	{r4, r7, lr}
 8018cfa:	b087      	sub	sp, #28
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8018d00:	2117      	movs	r1, #23
 8018d02:	187b      	adds	r3, r7, r1
 8018d04:	687a      	ldr	r2, [r7, #4]
 8018d06:	7812      	ldrb	r2, [r2, #0]
 8018d08:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018d0a:	187b      	adds	r3, r7, r1
 8018d0c:	781b      	ldrb	r3, [r3, #0]
 8018d0e:	2b02      	cmp	r3, #2
 8018d10:	d801      	bhi.n	8018d16 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8018d12:	2300      	movs	r3, #0
 8018d14:	e015      	b.n	8018d42 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018d16:	2417      	movs	r4, #23
 8018d18:	193b      	adds	r3, r7, r4
 8018d1a:	781a      	ldrb	r2, [r3, #0]
 8018d1c:	490b      	ldr	r1, [pc, #44]	; (8018d4c <RegionEU868ChannelsRemove+0x54>)
 8018d1e:	0013      	movs	r3, r2
 8018d20:	005b      	lsls	r3, r3, #1
 8018d22:	189b      	adds	r3, r3, r2
 8018d24:	009b      	lsls	r3, r3, #2
 8018d26:	18cb      	adds	r3, r1, r3
 8018d28:	220c      	movs	r2, #12
 8018d2a:	2100      	movs	r1, #0
 8018d2c:	0018      	movs	r0, r3
 8018d2e:	f004 fe2c 	bl	801d98a <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018d32:	193b      	adds	r3, r7, r4
 8018d34:	7819      	ldrb	r1, [r3, #0]
 8018d36:	4b06      	ldr	r3, [pc, #24]	; (8018d50 <RegionEU868ChannelsRemove+0x58>)
 8018d38:	2210      	movs	r2, #16
 8018d3a:	0018      	movs	r0, r3
 8018d3c:	f7fe f85d 	bl	8016dfa <RegionCommonChanDisable>
 8018d40:	0003      	movs	r3, r0
}
 8018d42:	0018      	movs	r0, r3
 8018d44:	46bd      	mov	sp, r7
 8018d46:	b007      	add	sp, #28
 8018d48:	bd90      	pop	{r4, r7, pc}
 8018d4a:	46c0      	nop			; (mov r8, r8)
 8018d4c:	20000d40 	.word	0x20000d40
 8018d50:	20000e78 	.word	0x20000e78

08018d54 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d56:	b085      	sub	sp, #20
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	2002      	movs	r0, #2
 8018d60:	5618      	ldrsb	r0, [r3, r0]
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	781b      	ldrb	r3, [r3, #0]
 8018d66:	0019      	movs	r1, r3
 8018d68:	4a23      	ldr	r2, [pc, #140]	; (8018df8 <RegionEU868SetContinuousWave+0xa4>)
 8018d6a:	000b      	movs	r3, r1
 8018d6c:	005b      	lsls	r3, r3, #1
 8018d6e:	185b      	adds	r3, r3, r1
 8018d70:	009b      	lsls	r3, r3, #2
 8018d72:	18d3      	adds	r3, r2, r3
 8018d74:	3309      	adds	r3, #9
 8018d76:	781b      	ldrb	r3, [r3, #0]
 8018d78:	001c      	movs	r4, r3
 8018d7a:	4a1f      	ldr	r2, [pc, #124]	; (8018df8 <RegionEU868SetContinuousWave+0xa4>)
 8018d7c:	21c2      	movs	r1, #194	; 0xc2
 8018d7e:	0023      	movs	r3, r4
 8018d80:	009b      	lsls	r3, r3, #2
 8018d82:	191b      	adds	r3, r3, r4
 8018d84:	009b      	lsls	r3, r3, #2
 8018d86:	18d3      	adds	r3, r2, r3
 8018d88:	185b      	adds	r3, r3, r1
 8018d8a:	2100      	movs	r1, #0
 8018d8c:	5659      	ldrsb	r1, [r3, r1]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	2201      	movs	r2, #1
 8018d92:	569a      	ldrsb	r2, [r3, r2]
 8018d94:	260f      	movs	r6, #15
 8018d96:	19bc      	adds	r4, r7, r6
 8018d98:	4b18      	ldr	r3, [pc, #96]	; (8018dfc <RegionEU868SetContinuousWave+0xa8>)
 8018d9a:	f7fe fd7f 	bl	801789c <LimitTxPower>
 8018d9e:	0003      	movs	r3, r0
 8018da0:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8018da2:	200e      	movs	r0, #14
 8018da4:	183b      	adds	r3, r7, r0
 8018da6:	2200      	movs	r2, #0
 8018da8:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	781b      	ldrb	r3, [r3, #0]
 8018dae:	0019      	movs	r1, r3
 8018db0:	4a11      	ldr	r2, [pc, #68]	; (8018df8 <RegionEU868SetContinuousWave+0xa4>)
 8018db2:	000b      	movs	r3, r1
 8018db4:	005b      	lsls	r3, r3, #1
 8018db6:	185b      	adds	r3, r3, r1
 8018db8:	009b      	lsls	r3, r3, #2
 8018dba:	589b      	ldr	r3, [r3, r2]
 8018dbc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	6859      	ldr	r1, [r3, #4]
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	689a      	ldr	r2, [r3, #8]
 8018dc6:	0005      	movs	r5, r0
 8018dc8:	183c      	adds	r4, r7, r0
 8018dca:	19bb      	adds	r3, r7, r6
 8018dcc:	781b      	ldrb	r3, [r3, #0]
 8018dce:	b25b      	sxtb	r3, r3
 8018dd0:	0018      	movs	r0, r3
 8018dd2:	f7fe fb31 	bl	8017438 <RegionCommonComputeTxPower>
 8018dd6:	0003      	movs	r3, r0
 8018dd8:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018dda:	4b09      	ldr	r3, [pc, #36]	; (8018e00 <RegionEU868SetContinuousWave+0xac>)
 8018ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dde:	687a      	ldr	r2, [r7, #4]
 8018de0:	8994      	ldrh	r4, [r2, #12]
 8018de2:	197a      	adds	r2, r7, r5
 8018de4:	2100      	movs	r1, #0
 8018de6:	5651      	ldrsb	r1, [r2, r1]
 8018de8:	68b8      	ldr	r0, [r7, #8]
 8018dea:	0022      	movs	r2, r4
 8018dec:	4798      	blx	r3
}
 8018dee:	46c0      	nop			; (mov r8, r8)
 8018df0:	46bd      	mov	sp, r7
 8018df2:	b005      	add	sp, #20
 8018df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018df6:	46c0      	nop			; (mov r8, r8)
 8018df8:	20000d40 	.word	0x20000d40
 8018dfc:	20000e78 	.word	0x20000e78
 8018e00:	0801f358 	.word	0x0801f358

08018e04 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018e04:	b590      	push	{r4, r7, lr}
 8018e06:	b085      	sub	sp, #20
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	0004      	movs	r4, r0
 8018e0c:	0008      	movs	r0, r1
 8018e0e:	0011      	movs	r1, r2
 8018e10:	1dfb      	adds	r3, r7, #7
 8018e12:	1c22      	adds	r2, r4, #0
 8018e14:	701a      	strb	r2, [r3, #0]
 8018e16:	1dbb      	adds	r3, r7, #6
 8018e18:	1c02      	adds	r2, r0, #0
 8018e1a:	701a      	strb	r2, [r3, #0]
 8018e1c:	1d7b      	adds	r3, r7, #5
 8018e1e:	1c0a      	adds	r2, r1, #0
 8018e20:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8018e22:	1dbb      	adds	r3, r7, #6
 8018e24:	781a      	ldrb	r2, [r3, #0]
 8018e26:	1d7b      	adds	r3, r7, #5
 8018e28:	781b      	ldrb	r3, [r3, #0]
 8018e2a:	1ad3      	subs	r3, r2, r3
 8018e2c:	b2da      	uxtb	r2, r3
 8018e2e:	210f      	movs	r1, #15
 8018e30:	187b      	adds	r3, r7, r1
 8018e32:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8018e34:	000a      	movs	r2, r1
 8018e36:	18bb      	adds	r3, r7, r2
 8018e38:	781b      	ldrb	r3, [r3, #0]
 8018e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8018e3c:	d902      	bls.n	8018e44 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8018e3e:	18bb      	adds	r3, r7, r2
 8018e40:	2200      	movs	r2, #0
 8018e42:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8018e44:	230f      	movs	r3, #15
 8018e46:	18fb      	adds	r3, r7, r3
 8018e48:	781b      	ldrb	r3, [r3, #0]
}
 8018e4a:	0018      	movs	r0, r3
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	b005      	add	sp, #20
 8018e50:	bd90      	pop	{r4, r7, pc}
	...

08018e54 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018e58:	4b08      	ldr	r3, [pc, #32]	; (8018e7c <rand1+0x28>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	4a08      	ldr	r2, [pc, #32]	; (8018e80 <rand1+0x2c>)
 8018e5e:	4353      	muls	r3, r2
 8018e60:	4a08      	ldr	r2, [pc, #32]	; (8018e84 <rand1+0x30>)
 8018e62:	189a      	adds	r2, r3, r2
 8018e64:	4b05      	ldr	r3, [pc, #20]	; (8018e7c <rand1+0x28>)
 8018e66:	601a      	str	r2, [r3, #0]
 8018e68:	4b04      	ldr	r3, [pc, #16]	; (8018e7c <rand1+0x28>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	4906      	ldr	r1, [pc, #24]	; (8018e88 <rand1+0x34>)
 8018e6e:	0018      	movs	r0, r3
 8018e70:	f7e7 f9e2 	bl	8000238 <__aeabi_uidivmod>
 8018e74:	000b      	movs	r3, r1
}
 8018e76:	0018      	movs	r0, r3
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	200001ac 	.word	0x200001ac
 8018e80:	41c64e6d 	.word	0x41c64e6d
 8018e84:	00003039 	.word	0x00003039
 8018e88:	7fffffff 	.word	0x7fffffff

08018e8c <srand1>:

void srand1( uint32_t seed )
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b082      	sub	sp, #8
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
    next = seed;
 8018e94:	4b03      	ldr	r3, [pc, #12]	; (8018ea4 <srand1+0x18>)
 8018e96:	687a      	ldr	r2, [r7, #4]
 8018e98:	601a      	str	r2, [r3, #0]
}
 8018e9a:	46c0      	nop			; (mov r8, r8)
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	b002      	add	sp, #8
 8018ea0:	bd80      	pop	{r7, pc}
 8018ea2:	46c0      	nop			; (mov r8, r8)
 8018ea4:	200001ac 	.word	0x200001ac

08018ea8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b082      	sub	sp, #8
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	6078      	str	r0, [r7, #4]
 8018eb0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018eb2:	f7ff ffcf 	bl	8018e54 <rand1>
 8018eb6:	683a      	ldr	r2, [r7, #0]
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	1ad3      	subs	r3, r2, r3
 8018ebc:	3301      	adds	r3, #1
 8018ebe:	0019      	movs	r1, r3
 8018ec0:	f7e7 faa4 	bl	800040c <__aeabi_idivmod>
 8018ec4:	000b      	movs	r3, r1
 8018ec6:	001a      	movs	r2, r3
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	18d3      	adds	r3, r2, r3
}
 8018ecc:	0018      	movs	r0, r3
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	b002      	add	sp, #8
 8018ed2:	bd80      	pop	{r7, pc}

08018ed4 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b084      	sub	sp, #16
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	60f8      	str	r0, [r7, #12]
 8018edc:	60b9      	str	r1, [r7, #8]
 8018ede:	1dbb      	adds	r3, r7, #6
 8018ee0:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8018ee2:	e007      	b.n	8018ef4 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018ee4:	68ba      	ldr	r2, [r7, #8]
 8018ee6:	1c53      	adds	r3, r2, #1
 8018ee8:	60bb      	str	r3, [r7, #8]
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	1c59      	adds	r1, r3, #1
 8018eee:	60f9      	str	r1, [r7, #12]
 8018ef0:	7812      	ldrb	r2, [r2, #0]
 8018ef2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ef4:	1dbb      	adds	r3, r7, #6
 8018ef6:	881b      	ldrh	r3, [r3, #0]
 8018ef8:	1dba      	adds	r2, r7, #6
 8018efa:	1e59      	subs	r1, r3, #1
 8018efc:	8011      	strh	r1, [r2, #0]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d1f0      	bne.n	8018ee4 <memcpy1+0x10>
    }
}
 8018f02:	46c0      	nop			; (mov r8, r8)
 8018f04:	46c0      	nop			; (mov r8, r8)
 8018f06:	46bd      	mov	sp, r7
 8018f08:	b004      	add	sp, #16
 8018f0a:	bd80      	pop	{r7, pc}

08018f0c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b084      	sub	sp, #16
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	60f8      	str	r0, [r7, #12]
 8018f14:	60b9      	str	r1, [r7, #8]
 8018f16:	1dbb      	adds	r3, r7, #6
 8018f18:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8018f1a:	1dbb      	adds	r3, r7, #6
 8018f1c:	881b      	ldrh	r3, [r3, #0]
 8018f1e:	3b01      	subs	r3, #1
 8018f20:	68fa      	ldr	r2, [r7, #12]
 8018f22:	18d3      	adds	r3, r2, r3
 8018f24:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018f26:	e007      	b.n	8018f38 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8018f28:	68ba      	ldr	r2, [r7, #8]
 8018f2a:	1c53      	adds	r3, r2, #1
 8018f2c:	60bb      	str	r3, [r7, #8]
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	1e59      	subs	r1, r3, #1
 8018f32:	60f9      	str	r1, [r7, #12]
 8018f34:	7812      	ldrb	r2, [r2, #0]
 8018f36:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f38:	1dbb      	adds	r3, r7, #6
 8018f3a:	881b      	ldrh	r3, [r3, #0]
 8018f3c:	1dba      	adds	r2, r7, #6
 8018f3e:	1e59      	subs	r1, r3, #1
 8018f40:	8011      	strh	r1, [r2, #0]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d1f0      	bne.n	8018f28 <memcpyr+0x1c>
    }
}
 8018f46:	46c0      	nop			; (mov r8, r8)
 8018f48:	46c0      	nop			; (mov r8, r8)
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	b004      	add	sp, #16
 8018f4e:	bd80      	pop	{r7, pc}

08018f50 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b082      	sub	sp, #8
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	0008      	movs	r0, r1
 8018f5a:	0011      	movs	r1, r2
 8018f5c:	1cfb      	adds	r3, r7, #3
 8018f5e:	1c02      	adds	r2, r0, #0
 8018f60:	701a      	strb	r2, [r3, #0]
 8018f62:	003b      	movs	r3, r7
 8018f64:	1c0a      	adds	r2, r1, #0
 8018f66:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8018f68:	e005      	b.n	8018f76 <memset1+0x26>
    {
        *dst++ = value;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	1c5a      	adds	r2, r3, #1
 8018f6e:	607a      	str	r2, [r7, #4]
 8018f70:	1cfa      	adds	r2, r7, #3
 8018f72:	7812      	ldrb	r2, [r2, #0]
 8018f74:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f76:	003b      	movs	r3, r7
 8018f78:	881b      	ldrh	r3, [r3, #0]
 8018f7a:	003a      	movs	r2, r7
 8018f7c:	1e59      	subs	r1, r3, #1
 8018f7e:	8011      	strh	r1, [r2, #0]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d1f2      	bne.n	8018f6a <memset1+0x1a>
    }
}
 8018f84:	46c0      	nop			; (mov r8, r8)
 8018f86:	46c0      	nop			; (mov r8, r8)
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	b002      	add	sp, #8
 8018f8c:	bd80      	pop	{r7, pc}
	...

08018f90 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 8018f90:	b590      	push	{r4, r7, lr}
 8018f92:	b087      	sub	sp, #28
 8018f94:	af02      	add	r7, sp, #8
 8018f96:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8018f98:	4b34      	ldr	r3, [pc, #208]	; (801906c <SX1276Init+0xdc>)
 8018f9a:	687a      	ldr	r2, [r7, #4]
 8018f9c:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8018f9e:	4b34      	ldr	r3, [pc, #208]	; (8019070 <SX1276Init+0xe0>)
 8018fa0:	2201      	movs	r2, #1
 8018fa2:	4251      	negs	r1, r2
 8018fa4:	4833      	ldr	r0, [pc, #204]	; (8019074 <SX1276Init+0xe4>)
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	9200      	str	r2, [sp, #0]
 8018faa:	2200      	movs	r2, #0
 8018fac:	f003 fa98 	bl	801c4e0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8018fb0:	4b2f      	ldr	r3, [pc, #188]	; (8019070 <SX1276Init+0xe0>)
 8018fb2:	2201      	movs	r2, #1
 8018fb4:	4251      	negs	r1, r2
 8018fb6:	4830      	ldr	r0, [pc, #192]	; (8019078 <SX1276Init+0xe8>)
 8018fb8:	2200      	movs	r2, #0
 8018fba:	9200      	str	r2, [sp, #0]
 8018fbc:	2200      	movs	r2, #0
 8018fbe:	f003 fa8f 	bl	801c4e0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8018fc2:	4b2b      	ldr	r3, [pc, #172]	; (8019070 <SX1276Init+0xe0>)
 8018fc4:	2201      	movs	r2, #1
 8018fc6:	4251      	negs	r1, r2
 8018fc8:	482c      	ldr	r0, [pc, #176]	; (801907c <SX1276Init+0xec>)
 8018fca:	2200      	movs	r2, #0
 8018fcc:	9200      	str	r2, [sp, #0]
 8018fce:	2200      	movs	r2, #0
 8018fd0:	f003 fa86 	bl	801c4e0 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 8018fd4:	2001      	movs	r0, #1
 8018fd6:	f7ec fbe7 	bl	80057a8 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 8018fda:	f001 fbef 	bl	801a7bc <SX1276Reset>

    RxChainCalibration( );
 8018fde:	f000 f937 	bl	8019250 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8018fe2:	2000      	movs	r0, #0
 8018fe4:	f001 fbf1 	bl	801a7ca <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 8018fe8:	4b25      	ldr	r3, [pc, #148]	; (8019080 <SX1276Init+0xf0>)
 8018fea:	0018      	movs	r0, r3
 8018fec:	f7ec fd3c 	bl	8005a68 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8018ff0:	230f      	movs	r3, #15
 8018ff2:	18fb      	adds	r3, r7, r3
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	701a      	strb	r2, [r3, #0]
 8018ff8:	e025      	b.n	8019046 <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8018ffa:	240f      	movs	r4, #15
 8018ffc:	193b      	adds	r3, r7, r4
 8018ffe:	781a      	ldrb	r2, [r3, #0]
 8019000:	4920      	ldr	r1, [pc, #128]	; (8019084 <SX1276Init+0xf4>)
 8019002:	0013      	movs	r3, r2
 8019004:	005b      	lsls	r3, r3, #1
 8019006:	189b      	adds	r3, r3, r2
 8019008:	5c5b      	ldrb	r3, [r3, r1]
 801900a:	0018      	movs	r0, r3
 801900c:	f001 fc4a 	bl	801a8a4 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8019010:	193b      	adds	r3, r7, r4
 8019012:	781a      	ldrb	r2, [r3, #0]
 8019014:	491b      	ldr	r1, [pc, #108]	; (8019084 <SX1276Init+0xf4>)
 8019016:	0013      	movs	r3, r2
 8019018:	005b      	lsls	r3, r3, #1
 801901a:	189b      	adds	r3, r3, r2
 801901c:	18cb      	adds	r3, r1, r3
 801901e:	3301      	adds	r3, #1
 8019020:	781b      	ldrb	r3, [r3, #0]
 8019022:	0018      	movs	r0, r3
 8019024:	193b      	adds	r3, r7, r4
 8019026:	781a      	ldrb	r2, [r3, #0]
 8019028:	4916      	ldr	r1, [pc, #88]	; (8019084 <SX1276Init+0xf4>)
 801902a:	0013      	movs	r3, r2
 801902c:	005b      	lsls	r3, r3, #1
 801902e:	189b      	adds	r3, r3, r2
 8019030:	18cb      	adds	r3, r1, r3
 8019032:	3302      	adds	r3, #2
 8019034:	781b      	ldrb	r3, [r3, #0]
 8019036:	0019      	movs	r1, r3
 8019038:	f001 fc8e 	bl	801a958 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801903c:	193b      	adds	r3, r7, r4
 801903e:	781a      	ldrb	r2, [r3, #0]
 8019040:	193b      	adds	r3, r7, r4
 8019042:	3201      	adds	r2, #1
 8019044:	701a      	strb	r2, [r3, #0]
 8019046:	230f      	movs	r3, #15
 8019048:	18fb      	adds	r3, r7, r3
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	2b0f      	cmp	r3, #15
 801904e:	d9d4      	bls.n	8018ffa <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 8019050:	2000      	movs	r0, #0
 8019052:	f001 fc27 	bl	801a8a4 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8019056:	4b0c      	ldr	r3, [pc, #48]	; (8019088 <SX1276Init+0xf8>)
 8019058:	2200      	movs	r2, #0
 801905a:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801905c:	f7ec fb9e 	bl	800579c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8019060:	0003      	movs	r3, r0
 8019062:	3302      	adds	r3, #2
}
 8019064:	0018      	movs	r0, r3
 8019066:	46bd      	mov	sp, r7
 8019068:	b005      	add	sp, #20
 801906a:	bd90      	pop	{r4, r7, pc}
 801906c:	20000e7c 	.word	0x20000e7c
 8019070:	0801add1 	.word	0x0801add1
 8019074:	2000173c 	.word	0x2000173c
 8019078:	200017d4 	.word	0x200017d4
 801907c:	20001754 	.word	0x20001754
 8019080:	200001b0 	.word	0x200001b0
 8019084:	0801f3c4 	.word	0x0801f3c4
 8019088:	2000176c 	.word	0x2000176c

0801908c <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 801908c:	b580      	push	{r7, lr}
 801908e:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8019090:	4b02      	ldr	r3, [pc, #8]	; (801909c <SX1276GetStatus+0x10>)
 8019092:	791b      	ldrb	r3, [r3, #4]
}
 8019094:	0018      	movs	r0, r3
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}
 801909a:	46c0      	nop			; (mov r8, r8)
 801909c:	2000176c 	.word	0x2000176c

080190a0 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80190a0:	b590      	push	{r4, r7, lr}
 80190a2:	b087      	sub	sp, #28
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 80190a8:	4b1d      	ldr	r3, [pc, #116]	; (8019120 <SX1276SetChannel+0x80>)
 80190aa:	687a      	ldr	r2, [r7, #4]
 80190ac:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	491c      	ldr	r1, [pc, #112]	; (8019124 <SX1276SetChannel+0x84>)
 80190b2:	0018      	movs	r0, r3
 80190b4:	f7e7 f83a 	bl	800012c <__udivsi3>
 80190b8:	0003      	movs	r3, r0
 80190ba:	617b      	str	r3, [r7, #20]
 80190bc:	6979      	ldr	r1, [r7, #20]
 80190be:	000b      	movs	r3, r1
 80190c0:	015b      	lsls	r3, r3, #5
 80190c2:	1a5b      	subs	r3, r3, r1
 80190c4:	019a      	lsls	r2, r3, #6
 80190c6:	1ad2      	subs	r2, r2, r3
 80190c8:	00d2      	lsls	r2, r2, #3
 80190ca:	1853      	adds	r3, r2, r1
 80190cc:	687a      	ldr	r2, [r7, #4]
 80190ce:	1ad3      	subs	r3, r2, r3
 80190d0:	613b      	str	r3, [r7, #16]
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	021c      	lsls	r4, r3, #8
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	021b      	lsls	r3, r3, #8
 80190da:	4a13      	ldr	r2, [pc, #76]	; (8019128 <SX1276SetChannel+0x88>)
 80190dc:	4694      	mov	ip, r2
 80190de:	4463      	add	r3, ip
 80190e0:	4910      	ldr	r1, [pc, #64]	; (8019124 <SX1276SetChannel+0x84>)
 80190e2:	0018      	movs	r0, r3
 80190e4:	f7e7 f822 	bl	800012c <__udivsi3>
 80190e8:	0003      	movs	r3, r0
 80190ea:	18e3      	adds	r3, r4, r3
 80190ec:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	0c1b      	lsrs	r3, r3, #16
 80190f2:	b2db      	uxtb	r3, r3
 80190f4:	0019      	movs	r1, r3
 80190f6:	2006      	movs	r0, #6
 80190f8:	f001 fc2e 	bl	801a958 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	0a1b      	lsrs	r3, r3, #8
 8019100:	b2db      	uxtb	r3, r3
 8019102:	0019      	movs	r1, r3
 8019104:	2007      	movs	r0, #7
 8019106:	f001 fc27 	bl	801a958 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	b2db      	uxtb	r3, r3
 801910e:	0019      	movs	r1, r3
 8019110:	2008      	movs	r0, #8
 8019112:	f001 fc21 	bl	801a958 <SX1276Write>
}
 8019116:	46c0      	nop			; (mov r8, r8)
 8019118:	46bd      	mov	sp, r7
 801911a:	b007      	add	sp, #28
 801911c:	bd90      	pop	{r4, r7, pc}
 801911e:	46c0      	nop			; (mov r8, r8)
 8019120:	2000176c 	.word	0x2000176c
 8019124:	00003d09 	.word	0x00003d09
 8019128:	00001e84 	.word	0x00001e84

0801912c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801912c:	b5b0      	push	{r4, r5, r7, lr}
 801912e:	b086      	sub	sp, #24
 8019130:	af00      	add	r7, sp, #0
 8019132:	60f8      	str	r0, [r7, #12]
 8019134:	60b9      	str	r1, [r7, #8]
 8019136:	603b      	str	r3, [r7, #0]
 8019138:	1dbb      	adds	r3, r7, #6
 801913a:	801a      	strh	r2, [r3, #0]
    bool status = true;
 801913c:	2317      	movs	r3, #23
 801913e:	18fb      	adds	r3, r7, r3
 8019140:	2201      	movs	r2, #1
 8019142:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8019144:	2314      	movs	r3, #20
 8019146:	18fb      	adds	r3, r7, r3
 8019148:	2200      	movs	r2, #0
 801914a:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 801914c:	2300      	movs	r3, #0
 801914e:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8019150:	f001 f80a 	bl	801a168 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8019154:	2000      	movs	r0, #0
 8019156:	f001 fba5 	bl	801a8a4 <SX1276SetModem>

    SX1276SetChannel( freq );
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	0018      	movs	r0, r3
 801915e:	f7ff ff9f 	bl	80190a0 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8019162:	68bb      	ldr	r3, [r7, #8]
 8019164:	0018      	movs	r0, r3
 8019166:	f001 fd05 	bl	801ab74 <GetFskBandwidthRegValue>
 801916a:	0003      	movs	r3, r0
 801916c:	0019      	movs	r1, r3
 801916e:	2012      	movs	r0, #18
 8019170:	f001 fbf2 	bl	801a958 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8019174:	68bb      	ldr	r3, [r7, #8]
 8019176:	0018      	movs	r0, r3
 8019178:	f001 fcfc 	bl	801ab74 <GetFskBandwidthRegValue>
 801917c:	0003      	movs	r3, r0
 801917e:	0019      	movs	r1, r3
 8019180:	2013      	movs	r0, #19
 8019182:	f001 fbe9 	bl	801a958 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8019186:	2005      	movs	r0, #5
 8019188:	f001 fb1f 	bl	801a7ca <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 801918c:	2001      	movs	r0, #1
 801918e:	f7eb fcb0 	bl	8004af2 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019192:	f003 fb85 	bl	801c8a0 <UTIL_TIMER_GetCurrentTime>
 8019196:	0003      	movs	r3, r0
 8019198:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801919a:	e013      	b.n	80191c4 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 801919c:	2514      	movs	r5, #20
 801919e:	197c      	adds	r4, r7, r5
 80191a0:	2000      	movs	r0, #0
 80191a2:	f001 fabf 	bl	801a724 <SX1276ReadRssi>
 80191a6:	0003      	movs	r3, r0
 80191a8:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 80191aa:	197a      	adds	r2, r7, r5
 80191ac:	1dbb      	adds	r3, r7, #6
 80191ae:	2100      	movs	r1, #0
 80191b0:	5e52      	ldrsh	r2, [r2, r1]
 80191b2:	2100      	movs	r1, #0
 80191b4:	5e5b      	ldrsh	r3, [r3, r1]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	dd04      	ble.n	80191c4 <SX1276IsChannelFree+0x98>
        {
            status = false;
 80191ba:	2317      	movs	r3, #23
 80191bc:	18fb      	adds	r3, r7, r3
 80191be:	2200      	movs	r2, #0
 80191c0:	701a      	strb	r2, [r3, #0]
            break;
 80191c2:	e007      	b.n	80191d4 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80191c4:	693b      	ldr	r3, [r7, #16]
 80191c6:	0018      	movs	r0, r3
 80191c8:	f003 fb7e 	bl	801c8c8 <UTIL_TIMER_GetElapsedTime>
 80191cc:	0002      	movs	r2, r0
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	4293      	cmp	r3, r2
 80191d2:	d8e3      	bhi.n	801919c <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 80191d4:	f000 ffc8 	bl	801a168 <SX1276SetSleep>
    return status;
 80191d8:	2317      	movs	r3, #23
 80191da:	18fb      	adds	r3, r7, r3
 80191dc:	781b      	ldrb	r3, [r3, #0]
}
 80191de:	0018      	movs	r0, r3
 80191e0:	46bd      	mov	sp, r7
 80191e2:	b006      	add	sp, #24
 80191e4:	bdb0      	pop	{r4, r5, r7, pc}

080191e6 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80191e6:	b580      	push	{r7, lr}
 80191e8:	b082      	sub	sp, #8
 80191ea:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80191ec:	2300      	movs	r3, #0
 80191ee:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80191f0:	2001      	movs	r0, #1
 80191f2:	f001 fb57 	bl	801a8a4 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80191f6:	21ff      	movs	r1, #255	; 0xff
 80191f8:	2011      	movs	r0, #17
 80191fa:	f001 fbad 	bl	801a958 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80191fe:	2005      	movs	r0, #5
 8019200:	f001 fae3 	bl	801a7ca <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8019204:	1dfb      	adds	r3, r7, #7
 8019206:	2200      	movs	r2, #0
 8019208:	701a      	strb	r2, [r3, #0]
 801920a:	e015      	b.n	8019238 <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 801920c:	2001      	movs	r0, #1
 801920e:	f7eb fc70 	bl	8004af2 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8019212:	202c      	movs	r0, #44	; 0x2c
 8019214:	f001 fbb1 	bl	801a97a <SX1276Read>
 8019218:	0003      	movs	r3, r0
 801921a:	001a      	movs	r2, r3
 801921c:	2301      	movs	r3, #1
 801921e:	401a      	ands	r2, r3
 8019220:	1dfb      	adds	r3, r7, #7
 8019222:	781b      	ldrb	r3, [r3, #0]
 8019224:	409a      	lsls	r2, r3
 8019226:	0013      	movs	r3, r2
 8019228:	683a      	ldr	r2, [r7, #0]
 801922a:	4313      	orrs	r3, r2
 801922c:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 801922e:	1dfb      	adds	r3, r7, #7
 8019230:	781a      	ldrb	r2, [r3, #0]
 8019232:	1dfb      	adds	r3, r7, #7
 8019234:	3201      	adds	r2, #1
 8019236:	701a      	strb	r2, [r3, #0]
 8019238:	1dfb      	adds	r3, r7, #7
 801923a:	781b      	ldrb	r3, [r3, #0]
 801923c:	2b1f      	cmp	r3, #31
 801923e:	d9e5      	bls.n	801920c <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8019240:	f000 ff92 	bl	801a168 <SX1276SetSleep>

    return rnd;
 8019244:	683b      	ldr	r3, [r7, #0]
}
 8019246:	0018      	movs	r0, r3
 8019248:	46bd      	mov	sp, r7
 801924a:	b002      	add	sp, #8
 801924c:	bd80      	pop	{r7, pc}
	...

08019250 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8019250:	b590      	push	{r4, r7, lr}
 8019252:	b087      	sub	sp, #28
 8019254:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8019256:	2317      	movs	r3, #23
 8019258:	18fc      	adds	r4, r7, r3
 801925a:	2009      	movs	r0, #9
 801925c:	f001 fb8d 	bl	801a97a <SX1276Read>
 8019260:	0003      	movs	r3, r0
 8019262:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8019264:	2006      	movs	r0, #6
 8019266:	f001 fb88 	bl	801a97a <SX1276Read>
 801926a:	0003      	movs	r3, r0
 801926c:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801926e:	2007      	movs	r0, #7
 8019270:	f001 fb83 	bl	801a97a <SX1276Read>
 8019274:	0003      	movs	r3, r0
 8019276:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8019278:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801927a:	2008      	movs	r0, #8
 801927c:	f001 fb7d 	bl	801a97a <SX1276Read>
 8019280:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8019282:	4323      	orrs	r3, r4
 8019284:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8019286:	693b      	ldr	r3, [r7, #16]
 8019288:	0a1b      	lsrs	r3, r3, #8
 801928a:	60fb      	str	r3, [r7, #12]
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	021b      	lsls	r3, r3, #8
 8019290:	693a      	ldr	r2, [r7, #16]
 8019292:	1ad3      	subs	r3, r2, r3
 8019294:	60bb      	str	r3, [r7, #8]
 8019296:	68f9      	ldr	r1, [r7, #12]
 8019298:	000b      	movs	r3, r1
 801929a:	015b      	lsls	r3, r3, #5
 801929c:	1a5b      	subs	r3, r3, r1
 801929e:	019a      	lsls	r2, r3, #6
 80192a0:	1ad2      	subs	r2, r2, r3
 80192a2:	00d2      	lsls	r2, r2, #3
 80192a4:	1850      	adds	r0, r2, r1
 80192a6:	68b9      	ldr	r1, [r7, #8]
 80192a8:	000b      	movs	r3, r1
 80192aa:	015b      	lsls	r3, r3, #5
 80192ac:	1a5b      	subs	r3, r3, r1
 80192ae:	019a      	lsls	r2, r3, #6
 80192b0:	1ad2      	subs	r2, r2, r3
 80192b2:	00d2      	lsls	r2, r2, #3
 80192b4:	1853      	adds	r3, r2, r1
 80192b6:	3380      	adds	r3, #128	; 0x80
 80192b8:	0a1b      	lsrs	r3, r3, #8
 80192ba:	18c3      	adds	r3, r0, r3
 80192bc:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80192be:	2100      	movs	r1, #0
 80192c0:	2009      	movs	r0, #9
 80192c2:	f001 fb49 	bl	801a958 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80192c6:	203b      	movs	r0, #59	; 0x3b
 80192c8:	f001 fb57 	bl	801a97a <SX1276Read>
 80192cc:	0003      	movs	r3, r0
 80192ce:	001a      	movs	r2, r3
 80192d0:	2340      	movs	r3, #64	; 0x40
 80192d2:	4313      	orrs	r3, r2
 80192d4:	b2db      	uxtb	r3, r3
 80192d6:	0019      	movs	r1, r3
 80192d8:	203b      	movs	r0, #59	; 0x3b
 80192da:	f001 fb3d 	bl	801a958 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80192de:	46c0      	nop			; (mov r8, r8)
 80192e0:	203b      	movs	r0, #59	; 0x3b
 80192e2:	f001 fb4a 	bl	801a97a <SX1276Read>
 80192e6:	0003      	movs	r3, r0
 80192e8:	001a      	movs	r2, r3
 80192ea:	2320      	movs	r3, #32
 80192ec:	4013      	ands	r3, r2
 80192ee:	2b20      	cmp	r3, #32
 80192f0:	d0f6      	beq.n	80192e0 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80192f2:	4b14      	ldr	r3, [pc, #80]	; (8019344 <RxChainCalibration+0xf4>)
 80192f4:	0018      	movs	r0, r3
 80192f6:	f7ff fed3 	bl	80190a0 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80192fa:	203b      	movs	r0, #59	; 0x3b
 80192fc:	f001 fb3d 	bl	801a97a <SX1276Read>
 8019300:	0003      	movs	r3, r0
 8019302:	001a      	movs	r2, r3
 8019304:	2340      	movs	r3, #64	; 0x40
 8019306:	4313      	orrs	r3, r2
 8019308:	b2db      	uxtb	r3, r3
 801930a:	0019      	movs	r1, r3
 801930c:	203b      	movs	r0, #59	; 0x3b
 801930e:	f001 fb23 	bl	801a958 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019312:	46c0      	nop			; (mov r8, r8)
 8019314:	203b      	movs	r0, #59	; 0x3b
 8019316:	f001 fb30 	bl	801a97a <SX1276Read>
 801931a:	0003      	movs	r3, r0
 801931c:	001a      	movs	r2, r3
 801931e:	2320      	movs	r3, #32
 8019320:	4013      	ands	r3, r2
 8019322:	2b20      	cmp	r3, #32
 8019324:	d0f6      	beq.n	8019314 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8019326:	2317      	movs	r3, #23
 8019328:	18fb      	adds	r3, r7, r3
 801932a:	781b      	ldrb	r3, [r3, #0]
 801932c:	0019      	movs	r1, r3
 801932e:	2009      	movs	r0, #9
 8019330:	f001 fb12 	bl	801a958 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	0018      	movs	r0, r3
 8019338:	f7ff feb2 	bl	80190a0 <SX1276SetChannel>
}
 801933c:	46c0      	nop			; (mov r8, r8)
 801933e:	46bd      	mov	sp, r7
 8019340:	b007      	add	sp, #28
 8019342:	bd90      	pop	{r4, r7, pc}
 8019344:	33bca100 	.word	0x33bca100

08019348 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8019348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801934a:	46c6      	mov	lr, r8
 801934c:	b500      	push	{lr}
 801934e:	b084      	sub	sp, #16
 8019350:	af00      	add	r7, sp, #0
 8019352:	60b9      	str	r1, [r7, #8]
 8019354:	607a      	str	r2, [r7, #4]
 8019356:	0019      	movs	r1, r3
 8019358:	240f      	movs	r4, #15
 801935a:	193b      	adds	r3, r7, r4
 801935c:	1c02      	adds	r2, r0, #0
 801935e:	701a      	strb	r2, [r3, #0]
 8019360:	230e      	movs	r3, #14
 8019362:	18fb      	adds	r3, r7, r3
 8019364:	1c0a      	adds	r2, r1, #0
 8019366:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8019368:	193b      	adds	r3, r7, r4
 801936a:	781b      	ldrb	r3, [r3, #0]
 801936c:	0018      	movs	r0, r3
 801936e:	f001 fa99 	bl	801a8a4 <SX1276SetModem>

    switch( modem )
 8019372:	193b      	adds	r3, r7, r4
 8019374:	781b      	ldrb	r3, [r3, #0]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d003      	beq.n	8019382 <SX1276SetRxConfig+0x3a>
 801937a:	2b01      	cmp	r3, #1
 801937c:	d100      	bne.n	8019380 <SX1276SetRxConfig+0x38>
 801937e:	e0fb      	b.n	8019578 <SX1276SetRxConfig+0x230>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019380:	e26e      	b.n	8019860 <SX1276SetRxConfig+0x518>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019382:	4bbd      	ldr	r3, [pc, #756]	; (8019678 <SX1276SetRxConfig+0x330>)
 8019384:	68ba      	ldr	r2, [r7, #8]
 8019386:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019388:	4bbb      	ldr	r3, [pc, #748]	; (8019678 <SX1276SetRxConfig+0x330>)
 801938a:	687a      	ldr	r2, [r7, #4]
 801938c:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 801938e:	4bba      	ldr	r3, [pc, #744]	; (8019678 <SX1276SetRxConfig+0x330>)
 8019390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019392:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019394:	4bb8      	ldr	r3, [pc, #736]	; (8019678 <SX1276SetRxConfig+0x330>)
 8019396:	222c      	movs	r2, #44	; 0x2c
 8019398:	2108      	movs	r1, #8
 801939a:	468c      	mov	ip, r1
 801939c:	44bc      	add	ip, r7
 801939e:	4462      	add	r2, ip
 80193a0:	2122      	movs	r1, #34	; 0x22
 80193a2:	7812      	ldrb	r2, [r2, #0]
 80193a4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80193a6:	4bb4      	ldr	r3, [pc, #720]	; (8019678 <SX1276SetRxConfig+0x330>)
 80193a8:	2130      	movs	r1, #48	; 0x30
 80193aa:	2408      	movs	r4, #8
 80193ac:	193a      	adds	r2, r7, r4
 80193ae:	1852      	adds	r2, r2, r1
 80193b0:	2123      	movs	r1, #35	; 0x23
 80193b2:	7812      	ldrb	r2, [r2, #0]
 80193b4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80193b6:	4bb0      	ldr	r3, [pc, #704]	; (8019678 <SX1276SetRxConfig+0x330>)
 80193b8:	2034      	movs	r0, #52	; 0x34
 80193ba:	193a      	adds	r2, r7, r4
 80193bc:	1812      	adds	r2, r2, r0
 80193be:	2124      	movs	r1, #36	; 0x24
 80193c0:	7812      	ldrb	r2, [r2, #0]
 80193c2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80193c4:	4bac      	ldr	r3, [pc, #688]	; (8019678 <SX1276SetRxConfig+0x330>)
 80193c6:	2220      	movs	r2, #32
 80193c8:	2020      	movs	r0, #32
 80193ca:	4684      	mov	ip, r0
 80193cc:	2108      	movs	r1, #8
 80193ce:	4688      	mov	r8, r1
 80193d0:	44b8      	add	r8, r7
 80193d2:	44c4      	add	ip, r8
 80193d4:	4462      	add	r2, ip
 80193d6:	2125      	movs	r1, #37	; 0x25
 80193d8:	7812      	ldrb	r2, [r2, #0]
 80193da:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80193dc:	4ba6      	ldr	r3, [pc, #664]	; (8019678 <SX1276SetRxConfig+0x330>)
 80193de:	2224      	movs	r2, #36	; 0x24
 80193e0:	2020      	movs	r0, #32
 80193e2:	4684      	mov	ip, r0
 80193e4:	2108      	movs	r1, #8
 80193e6:	4688      	mov	r8, r1
 80193e8:	44b8      	add	r8, r7
 80193ea:	44c4      	add	ip, r8
 80193ec:	4462      	add	r2, ip
 80193ee:	2126      	movs	r1, #38	; 0x26
 80193f0:	7812      	ldrb	r2, [r2, #0]
 80193f2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80193f4:	4ba0      	ldr	r3, [pc, #640]	; (8019678 <SX1276SetRxConfig+0x330>)
 80193f6:	2624      	movs	r6, #36	; 0x24
 80193f8:	193a      	adds	r2, r7, r4
 80193fa:	1992      	adds	r2, r2, r6
 80193fc:	8812      	ldrh	r2, [r2, #0]
 80193fe:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8019400:	2328      	movs	r3, #40	; 0x28
 8019402:	2208      	movs	r2, #8
 8019404:	4694      	mov	ip, r2
 8019406:	44bc      	add	ip, r7
 8019408:	4463      	add	r3, ip
 801940a:	881b      	ldrh	r3, [r3, #0]
 801940c:	0018      	movs	r0, r3
 801940e:	f7e9 fbdf 	bl	8002bd0 <__aeabi_i2d>
 8019412:	0004      	movs	r4, r0
 8019414:	000d      	movs	r5, r1
 8019416:	6878      	ldr	r0, [r7, #4]
 8019418:	f7e9 fc0a 	bl	8002c30 <__aeabi_ui2d>
 801941c:	0002      	movs	r2, r0
 801941e:	000b      	movs	r3, r1
 8019420:	2000      	movs	r0, #0
 8019422:	4996      	ldr	r1, [pc, #600]	; (801967c <SX1276SetRxConfig+0x334>)
 8019424:	f7e8 f99a 	bl	800175c <__aeabi_ddiv>
 8019428:	0002      	movs	r2, r0
 801942a:	000b      	movs	r3, r1
 801942c:	0010      	movs	r0, r2
 801942e:	0019      	movs	r1, r3
 8019430:	2200      	movs	r2, #0
 8019432:	4b93      	ldr	r3, [pc, #588]	; (8019680 <SX1276SetRxConfig+0x338>)
 8019434:	f7e8 fd98 	bl	8001f68 <__aeabi_dmul>
 8019438:	0002      	movs	r2, r0
 801943a:	000b      	movs	r3, r1
 801943c:	0020      	movs	r0, r4
 801943e:	0029      	movs	r1, r5
 8019440:	f7e8 fd92 	bl	8001f68 <__aeabi_dmul>
 8019444:	0002      	movs	r2, r0
 8019446:	000b      	movs	r3, r1
 8019448:	0010      	movs	r0, r2
 801944a:	0019      	movs	r1, r3
 801944c:	2200      	movs	r2, #0
 801944e:	4b8d      	ldr	r3, [pc, #564]	; (8019684 <SX1276SetRxConfig+0x33c>)
 8019450:	f7e8 fd8a 	bl	8001f68 <__aeabi_dmul>
 8019454:	0002      	movs	r2, r0
 8019456:	000b      	movs	r3, r1
 8019458:	0010      	movs	r0, r2
 801945a:	0019      	movs	r1, r3
 801945c:	f7e7 f8d8 	bl	8000610 <__aeabi_d2uiz>
 8019460:	0002      	movs	r2, r0
 8019462:	4b85      	ldr	r3, [pc, #532]	; (8019678 <SX1276SetRxConfig+0x330>)
 8019464:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019466:	6878      	ldr	r0, [r7, #4]
 8019468:	f7e9 fbe2 	bl	8002c30 <__aeabi_ui2d>
 801946c:	0002      	movs	r2, r0
 801946e:	000b      	movs	r3, r1
 8019470:	2000      	movs	r0, #0
 8019472:	4985      	ldr	r1, [pc, #532]	; (8019688 <SX1276SetRxConfig+0x340>)
 8019474:	f7e8 f972 	bl	800175c <__aeabi_ddiv>
 8019478:	0002      	movs	r2, r0
 801947a:	000b      	movs	r3, r1
 801947c:	0010      	movs	r0, r2
 801947e:	0019      	movs	r1, r3
 8019480:	f7e7 f8c6 	bl	8000610 <__aeabi_d2uiz>
 8019484:	0003      	movs	r3, r0
 8019486:	b29b      	uxth	r3, r3
 8019488:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	0a1b      	lsrs	r3, r3, #8
 801948e:	b2db      	uxtb	r3, r3
 8019490:	0019      	movs	r1, r3
 8019492:	2002      	movs	r0, #2
 8019494:	f001 fa60 	bl	801a958 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	b2db      	uxtb	r3, r3
 801949c:	0019      	movs	r1, r3
 801949e:	2003      	movs	r0, #3
 80194a0:	f001 fa5a 	bl	801a958 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80194a4:	68bb      	ldr	r3, [r7, #8]
 80194a6:	0018      	movs	r0, r3
 80194a8:	f001 fb64 	bl	801ab74 <GetFskBandwidthRegValue>
 80194ac:	0003      	movs	r3, r0
 80194ae:	0019      	movs	r1, r3
 80194b0:	2012      	movs	r0, #18
 80194b2:	f001 fa51 	bl	801a958 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80194b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194b8:	0018      	movs	r0, r3
 80194ba:	f001 fb5b 	bl	801ab74 <GetFskBandwidthRegValue>
 80194be:	0003      	movs	r3, r0
 80194c0:	0019      	movs	r1, r3
 80194c2:	2013      	movs	r0, #19
 80194c4:	f001 fa48 	bl	801a958 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80194c8:	2408      	movs	r4, #8
 80194ca:	193b      	adds	r3, r7, r4
 80194cc:	199b      	adds	r3, r3, r6
 80194ce:	881b      	ldrh	r3, [r3, #0]
 80194d0:	0a1b      	lsrs	r3, r3, #8
 80194d2:	b29b      	uxth	r3, r3
 80194d4:	b2db      	uxtb	r3, r3
 80194d6:	0019      	movs	r1, r3
 80194d8:	2025      	movs	r0, #37	; 0x25
 80194da:	f001 fa3d 	bl	801a958 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80194de:	193b      	adds	r3, r7, r4
 80194e0:	199b      	adds	r3, r3, r6
 80194e2:	881b      	ldrh	r3, [r3, #0]
 80194e4:	b2db      	uxtb	r3, r3
 80194e6:	0019      	movs	r1, r3
 80194e8:	2026      	movs	r0, #38	; 0x26
 80194ea:	f001 fa35 	bl	801a958 <SX1276Write>
            if( fixLen == 1 )
 80194ee:	222c      	movs	r2, #44	; 0x2c
 80194f0:	193b      	adds	r3, r7, r4
 80194f2:	189b      	adds	r3, r3, r2
 80194f4:	781b      	ldrb	r3, [r3, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d008      	beq.n	801950c <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 80194fa:	2130      	movs	r1, #48	; 0x30
 80194fc:	193b      	adds	r3, r7, r4
 80194fe:	185b      	adds	r3, r3, r1
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	0019      	movs	r1, r3
 8019504:	2032      	movs	r0, #50	; 0x32
 8019506:	f001 fa27 	bl	801a958 <SX1276Write>
 801950a:	e003      	b.n	8019514 <SX1276SetRxConfig+0x1cc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 801950c:	21ff      	movs	r1, #255	; 0xff
 801950e:	2032      	movs	r0, #50	; 0x32
 8019510:	f001 fa22 	bl	801a958 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019514:	2030      	movs	r0, #48	; 0x30
 8019516:	f001 fa30 	bl	801a97a <SX1276Read>
 801951a:	0003      	movs	r3, r0
 801951c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801951e:	226f      	movs	r2, #111	; 0x6f
 8019520:	4013      	ands	r3, r2
 8019522:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019524:	232c      	movs	r3, #44	; 0x2c
 8019526:	2108      	movs	r1, #8
 8019528:	468c      	mov	ip, r1
 801952a:	44bc      	add	ip, r7
 801952c:	4463      	add	r3, ip
 801952e:	781b      	ldrb	r3, [r3, #0]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d001      	beq.n	8019538 <SX1276SetRxConfig+0x1f0>
 8019534:	2300      	movs	r3, #0
 8019536:	e001      	b.n	801953c <SX1276SetRxConfig+0x1f4>
 8019538:	2380      	movs	r3, #128	; 0x80
 801953a:	425b      	negs	r3, r3
 801953c:	4313      	orrs	r3, r2
 801953e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019540:	2334      	movs	r3, #52	; 0x34
 8019542:	2108      	movs	r1, #8
 8019544:	468c      	mov	ip, r1
 8019546:	44bc      	add	ip, r7
 8019548:	4463      	add	r3, ip
 801954a:	781b      	ldrb	r3, [r3, #0]
 801954c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801954e:	b25b      	sxtb	r3, r3
 8019550:	4313      	orrs	r3, r2
 8019552:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019554:	b2db      	uxtb	r3, r3
 8019556:	0019      	movs	r1, r3
 8019558:	2030      	movs	r0, #48	; 0x30
 801955a:	f001 f9fd 	bl	801a958 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801955e:	2031      	movs	r0, #49	; 0x31
 8019560:	f001 fa0b 	bl	801a97a <SX1276Read>
 8019564:	0003      	movs	r3, r0
 8019566:	001a      	movs	r2, r3
 8019568:	2340      	movs	r3, #64	; 0x40
 801956a:	4313      	orrs	r3, r2
 801956c:	b2db      	uxtb	r3, r3
 801956e:	0019      	movs	r1, r3
 8019570:	2031      	movs	r0, #49	; 0x31
 8019572:	f001 f9f1 	bl	801a958 <SX1276Write>
        break;
 8019576:	e173      	b.n	8019860 <SX1276SetRxConfig+0x518>
            if( bandwidth > 2 )
 8019578:	68bb      	ldr	r3, [r7, #8]
 801957a:	2b02      	cmp	r3, #2
 801957c:	d900      	bls.n	8019580 <SX1276SetRxConfig+0x238>
                while( 1 );
 801957e:	e7fe      	b.n	801957e <SX1276SetRxConfig+0x236>
            bandwidth += 7;
 8019580:	68bb      	ldr	r3, [r7, #8]
 8019582:	3307      	adds	r3, #7
 8019584:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019586:	4b3c      	ldr	r3, [pc, #240]	; (8019678 <SX1276SetRxConfig+0x330>)
 8019588:	68ba      	ldr	r2, [r7, #8]
 801958a:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801958c:	4b3a      	ldr	r3, [pc, #232]	; (8019678 <SX1276SetRxConfig+0x330>)
 801958e:	687a      	ldr	r2, [r7, #4]
 8019590:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019592:	4b39      	ldr	r3, [pc, #228]	; (8019678 <SX1276SetRxConfig+0x330>)
 8019594:	220e      	movs	r2, #14
 8019596:	18ba      	adds	r2, r7, r2
 8019598:	214d      	movs	r1, #77	; 0x4d
 801959a:	7812      	ldrb	r2, [r2, #0]
 801959c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801959e:	4b36      	ldr	r3, [pc, #216]	; (8019678 <SX1276SetRxConfig+0x330>)
 80195a0:	2224      	movs	r2, #36	; 0x24
 80195a2:	2108      	movs	r1, #8
 80195a4:	468c      	mov	ip, r1
 80195a6:	44bc      	add	ip, r7
 80195a8:	4462      	add	r2, ip
 80195aa:	214e      	movs	r1, #78	; 0x4e
 80195ac:	8812      	ldrh	r2, [r2, #0]
 80195ae:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80195b0:	4b31      	ldr	r3, [pc, #196]	; (8019678 <SX1276SetRxConfig+0x330>)
 80195b2:	222c      	movs	r2, #44	; 0x2c
 80195b4:	2108      	movs	r1, #8
 80195b6:	468c      	mov	ip, r1
 80195b8:	44bc      	add	ip, r7
 80195ba:	4462      	add	r2, ip
 80195bc:	2150      	movs	r1, #80	; 0x50
 80195be:	7812      	ldrb	r2, [r2, #0]
 80195c0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80195c2:	4b2d      	ldr	r3, [pc, #180]	; (8019678 <SX1276SetRxConfig+0x330>)
 80195c4:	2230      	movs	r2, #48	; 0x30
 80195c6:	2108      	movs	r1, #8
 80195c8:	468c      	mov	ip, r1
 80195ca:	44bc      	add	ip, r7
 80195cc:	4462      	add	r2, ip
 80195ce:	2151      	movs	r1, #81	; 0x51
 80195d0:	7812      	ldrb	r2, [r2, #0]
 80195d2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80195d4:	4b28      	ldr	r3, [pc, #160]	; (8019678 <SX1276SetRxConfig+0x330>)
 80195d6:	2234      	movs	r2, #52	; 0x34
 80195d8:	2108      	movs	r1, #8
 80195da:	468c      	mov	ip, r1
 80195dc:	44bc      	add	ip, r7
 80195de:	4462      	add	r2, ip
 80195e0:	2152      	movs	r1, #82	; 0x52
 80195e2:	7812      	ldrb	r2, [r2, #0]
 80195e4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80195e6:	4b24      	ldr	r3, [pc, #144]	; (8019678 <SX1276SetRxConfig+0x330>)
 80195e8:	2238      	movs	r2, #56	; 0x38
 80195ea:	2108      	movs	r1, #8
 80195ec:	468c      	mov	ip, r1
 80195ee:	44bc      	add	ip, r7
 80195f0:	4462      	add	r2, ip
 80195f2:	2153      	movs	r1, #83	; 0x53
 80195f4:	7812      	ldrb	r2, [r2, #0]
 80195f6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80195f8:	4b1f      	ldr	r3, [pc, #124]	; (8019678 <SX1276SetRxConfig+0x330>)
 80195fa:	223c      	movs	r2, #60	; 0x3c
 80195fc:	2108      	movs	r1, #8
 80195fe:	468c      	mov	ip, r1
 8019600:	44bc      	add	ip, r7
 8019602:	4462      	add	r2, ip
 8019604:	2154      	movs	r1, #84	; 0x54
 8019606:	7812      	ldrb	r2, [r2, #0]
 8019608:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801960a:	4b1b      	ldr	r3, [pc, #108]	; (8019678 <SX1276SetRxConfig+0x330>)
 801960c:	2220      	movs	r2, #32
 801960e:	2120      	movs	r1, #32
 8019610:	468c      	mov	ip, r1
 8019612:	2108      	movs	r1, #8
 8019614:	4688      	mov	r8, r1
 8019616:	44b8      	add	r8, r7
 8019618:	44c4      	add	ip, r8
 801961a:	4462      	add	r2, ip
 801961c:	2155      	movs	r1, #85	; 0x55
 801961e:	7812      	ldrb	r2, [r2, #0]
 8019620:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019622:	4b15      	ldr	r3, [pc, #84]	; (8019678 <SX1276SetRxConfig+0x330>)
 8019624:	2224      	movs	r2, #36	; 0x24
 8019626:	2120      	movs	r1, #32
 8019628:	468c      	mov	ip, r1
 801962a:	2108      	movs	r1, #8
 801962c:	4688      	mov	r8, r1
 801962e:	44b8      	add	r8, r7
 8019630:	44c4      	add	ip, r8
 8019632:	4462      	add	r2, ip
 8019634:	2156      	movs	r1, #86	; 0x56
 8019636:	7812      	ldrb	r2, [r2, #0]
 8019638:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	2b0c      	cmp	r3, #12
 801963e:	d902      	bls.n	8019646 <SX1276SetRxConfig+0x2fe>
                datarate = 12;
 8019640:	230c      	movs	r3, #12
 8019642:	607b      	str	r3, [r7, #4]
 8019644:	e004      	b.n	8019650 <SX1276SetRxConfig+0x308>
            else if( datarate < 6 )
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	2b05      	cmp	r3, #5
 801964a:	d801      	bhi.n	8019650 <SX1276SetRxConfig+0x308>
                datarate = 6;
 801964c:	2306      	movs	r3, #6
 801964e:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019650:	68bb      	ldr	r3, [r7, #8]
 8019652:	2b07      	cmp	r3, #7
 8019654:	d105      	bne.n	8019662 <SX1276SetRxConfig+0x31a>
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	2b0b      	cmp	r3, #11
 801965a:	d008      	beq.n	801966e <SX1276SetRxConfig+0x326>
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	2b0c      	cmp	r3, #12
 8019660:	d005      	beq.n	801966e <SX1276SetRxConfig+0x326>
 8019662:	68bb      	ldr	r3, [r7, #8]
 8019664:	2b08      	cmp	r3, #8
 8019666:	d111      	bne.n	801968c <SX1276SetRxConfig+0x344>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	2b0c      	cmp	r3, #12
 801966c:	d10e      	bne.n	801968c <SX1276SetRxConfig+0x344>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801966e:	4b02      	ldr	r3, [pc, #8]	; (8019678 <SX1276SetRxConfig+0x330>)
 8019670:	224c      	movs	r2, #76	; 0x4c
 8019672:	2101      	movs	r1, #1
 8019674:	5499      	strb	r1, [r3, r2]
 8019676:	e00d      	b.n	8019694 <SX1276SetRxConfig+0x34c>
 8019678:	2000176c 	.word	0x2000176c
 801967c:	3ff00000 	.word	0x3ff00000
 8019680:	40200000 	.word	0x40200000
 8019684:	408f4000 	.word	0x408f4000
 8019688:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801968c:	4b77      	ldr	r3, [pc, #476]	; (801986c <SX1276SetRxConfig+0x524>)
 801968e:	224c      	movs	r2, #76	; 0x4c
 8019690:	2100      	movs	r1, #0
 8019692:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019694:	201d      	movs	r0, #29
 8019696:	f001 f970 	bl	801a97a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	b2db      	uxtb	r3, r3
 801969e:	011b      	lsls	r3, r3, #4
 80196a0:	b2da      	uxtb	r2, r3
 80196a2:	230e      	movs	r3, #14
 80196a4:	18fb      	adds	r3, r7, r3
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	18db      	adds	r3, r3, r3
 80196aa:	b2db      	uxtb	r3, r3
 80196ac:	4313      	orrs	r3, r2
 80196ae:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80196b0:	242c      	movs	r4, #44	; 0x2c
 80196b2:	2608      	movs	r6, #8
 80196b4:	19bb      	adds	r3, r7, r6
 80196b6:	191b      	adds	r3, r3, r4
 80196b8:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80196ba:	4313      	orrs	r3, r2
 80196bc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80196be:	0019      	movs	r1, r3
 80196c0:	201d      	movs	r0, #29
 80196c2:	f001 f949 	bl	801a958 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80196c6:	201e      	movs	r0, #30
 80196c8:	f001 f957 	bl	801a97a <SX1276Read>
 80196cc:	0003      	movs	r3, r0
 80196ce:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80196d0:	2308      	movs	r3, #8
 80196d2:	4013      	ands	r3, r2
 80196d4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	b2db      	uxtb	r3, r3
 80196da:	011b      	lsls	r3, r3, #4
 80196dc:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80196de:	4313      	orrs	r3, r2
 80196e0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80196e2:	2334      	movs	r3, #52	; 0x34
 80196e4:	2108      	movs	r1, #8
 80196e6:	468c      	mov	ip, r1
 80196e8:	44bc      	add	ip, r7
 80196ea:	4463      	add	r3, ip
 80196ec:	781b      	ldrb	r3, [r3, #0]
 80196ee:	009b      	lsls	r3, r3, #2
 80196f0:	b2db      	uxtb	r3, r3
 80196f2:	4313      	orrs	r3, r2
 80196f4:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80196f6:	2528      	movs	r5, #40	; 0x28
 80196f8:	19bb      	adds	r3, r7, r6
 80196fa:	195b      	adds	r3, r3, r5
 80196fc:	881b      	ldrh	r3, [r3, #0]
 80196fe:	0a1b      	lsrs	r3, r3, #8
 8019700:	b29b      	uxth	r3, r3
 8019702:	b2db      	uxtb	r3, r3
 8019704:	2103      	movs	r1, #3
 8019706:	400b      	ands	r3, r1
 8019708:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801970a:	4313      	orrs	r3, r2
 801970c:	b2db      	uxtb	r3, r3
 801970e:	0019      	movs	r1, r3
 8019710:	201e      	movs	r0, #30
 8019712:	f001 f921 	bl	801a958 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019716:	2026      	movs	r0, #38	; 0x26
 8019718:	f001 f92f 	bl	801a97a <SX1276Read>
 801971c:	0003      	movs	r3, r0
 801971e:	b25b      	sxtb	r3, r3
 8019720:	2208      	movs	r2, #8
 8019722:	4393      	bics	r3, r2
 8019724:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019726:	4b51      	ldr	r3, [pc, #324]	; (801986c <SX1276SetRxConfig+0x524>)
 8019728:	214c      	movs	r1, #76	; 0x4c
 801972a:	5c5b      	ldrb	r3, [r3, r1]
 801972c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801972e:	b25b      	sxtb	r3, r3
 8019730:	4313      	orrs	r3, r2
 8019732:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019734:	b2db      	uxtb	r3, r3
 8019736:	0019      	movs	r1, r3
 8019738:	2026      	movs	r0, #38	; 0x26
 801973a:	f001 f90d 	bl	801a958 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 801973e:	19bb      	adds	r3, r7, r6
 8019740:	195b      	adds	r3, r3, r5
 8019742:	881b      	ldrh	r3, [r3, #0]
 8019744:	b2db      	uxtb	r3, r3
 8019746:	0019      	movs	r1, r3
 8019748:	201f      	movs	r0, #31
 801974a:	f001 f905 	bl	801a958 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801974e:	2524      	movs	r5, #36	; 0x24
 8019750:	19bb      	adds	r3, r7, r6
 8019752:	195b      	adds	r3, r3, r5
 8019754:	881b      	ldrh	r3, [r3, #0]
 8019756:	0a1b      	lsrs	r3, r3, #8
 8019758:	b29b      	uxth	r3, r3
 801975a:	b2db      	uxtb	r3, r3
 801975c:	0019      	movs	r1, r3
 801975e:	2020      	movs	r0, #32
 8019760:	f001 f8fa 	bl	801a958 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019764:	19bb      	adds	r3, r7, r6
 8019766:	195b      	adds	r3, r3, r5
 8019768:	881b      	ldrh	r3, [r3, #0]
 801976a:	b2db      	uxtb	r3, r3
 801976c:	0019      	movs	r1, r3
 801976e:	2021      	movs	r0, #33	; 0x21
 8019770:	f001 f8f2 	bl	801a958 <SX1276Write>
            if( fixLen == 1 )
 8019774:	19bb      	adds	r3, r7, r6
 8019776:	191b      	adds	r3, r3, r4
 8019778:	781b      	ldrb	r3, [r3, #0]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d009      	beq.n	8019792 <SX1276SetRxConfig+0x44a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 801977e:	2330      	movs	r3, #48	; 0x30
 8019780:	2208      	movs	r2, #8
 8019782:	4694      	mov	ip, r2
 8019784:	44bc      	add	ip, r7
 8019786:	4463      	add	r3, ip
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	0019      	movs	r1, r3
 801978c:	2022      	movs	r0, #34	; 0x22
 801978e:	f001 f8e3 	bl	801a958 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019792:	4b36      	ldr	r3, [pc, #216]	; (801986c <SX1276SetRxConfig+0x524>)
 8019794:	2253      	movs	r2, #83	; 0x53
 8019796:	5c9b      	ldrb	r3, [r3, r2]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d013      	beq.n	80197c4 <SX1276SetRxConfig+0x47c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801979c:	2044      	movs	r0, #68	; 0x44
 801979e:	f001 f8ec 	bl	801a97a <SX1276Read>
 80197a2:	0003      	movs	r3, r0
 80197a4:	001a      	movs	r2, r3
 80197a6:	2380      	movs	r3, #128	; 0x80
 80197a8:	425b      	negs	r3, r3
 80197aa:	4313      	orrs	r3, r2
 80197ac:	b2db      	uxtb	r3, r3
 80197ae:	0019      	movs	r1, r3
 80197b0:	2044      	movs	r0, #68	; 0x44
 80197b2:	f001 f8d1 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80197b6:	4b2d      	ldr	r3, [pc, #180]	; (801986c <SX1276SetRxConfig+0x524>)
 80197b8:	2254      	movs	r2, #84	; 0x54
 80197ba:	5c9b      	ldrb	r3, [r3, r2]
 80197bc:	0019      	movs	r1, r3
 80197be:	2024      	movs	r0, #36	; 0x24
 80197c0:	f001 f8ca 	bl	801a958 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	2b09      	cmp	r3, #9
 80197c8:	d10d      	bne.n	80197e6 <SX1276SetRxConfig+0x49e>
 80197ca:	4b28      	ldr	r3, [pc, #160]	; (801986c <SX1276SetRxConfig+0x524>)
 80197cc:	689b      	ldr	r3, [r3, #8]
 80197ce:	4a28      	ldr	r2, [pc, #160]	; (8019870 <SX1276SetRxConfig+0x528>)
 80197d0:	4293      	cmp	r3, r2
 80197d2:	d908      	bls.n	80197e6 <SX1276SetRxConfig+0x49e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80197d4:	2102      	movs	r1, #2
 80197d6:	2036      	movs	r0, #54	; 0x36
 80197d8:	f001 f8be 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80197dc:	2164      	movs	r1, #100	; 0x64
 80197de:	203a      	movs	r0, #58	; 0x3a
 80197e0:	f001 f8ba 	bl	801a958 <SX1276Write>
 80197e4:	e00f      	b.n	8019806 <SX1276SetRxConfig+0x4be>
            else if( bandwidth == 9 )
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	2b09      	cmp	r3, #9
 80197ea:	d108      	bne.n	80197fe <SX1276SetRxConfig+0x4b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80197ec:	2102      	movs	r1, #2
 80197ee:	2036      	movs	r0, #54	; 0x36
 80197f0:	f001 f8b2 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80197f4:	217f      	movs	r1, #127	; 0x7f
 80197f6:	203a      	movs	r0, #58	; 0x3a
 80197f8:	f001 f8ae 	bl	801a958 <SX1276Write>
 80197fc:	e003      	b.n	8019806 <SX1276SetRxConfig+0x4be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80197fe:	2103      	movs	r1, #3
 8019800:	2036      	movs	r0, #54	; 0x36
 8019802:	f001 f8a9 	bl	801a958 <SX1276Write>
            if( datarate == 6 )
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	2b06      	cmp	r3, #6
 801980a:	d114      	bne.n	8019836 <SX1276SetRxConfig+0x4ee>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801980c:	2031      	movs	r0, #49	; 0x31
 801980e:	f001 f8b4 	bl	801a97a <SX1276Read>
 8019812:	0003      	movs	r3, r0
 8019814:	b25b      	sxtb	r3, r3
 8019816:	2207      	movs	r2, #7
 8019818:	4393      	bics	r3, r2
 801981a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801981c:	2205      	movs	r2, #5
 801981e:	4313      	orrs	r3, r2
 8019820:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019822:	b2db      	uxtb	r3, r3
 8019824:	0019      	movs	r1, r3
 8019826:	2031      	movs	r0, #49	; 0x31
 8019828:	f001 f896 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801982c:	210c      	movs	r1, #12
 801982e:	2037      	movs	r0, #55	; 0x37
 8019830:	f001 f892 	bl	801a958 <SX1276Write>
        break;
 8019834:	e013      	b.n	801985e <SX1276SetRxConfig+0x516>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019836:	2031      	movs	r0, #49	; 0x31
 8019838:	f001 f89f 	bl	801a97a <SX1276Read>
 801983c:	0003      	movs	r3, r0
 801983e:	b25b      	sxtb	r3, r3
 8019840:	2207      	movs	r2, #7
 8019842:	4393      	bics	r3, r2
 8019844:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019846:	2203      	movs	r2, #3
 8019848:	4313      	orrs	r3, r2
 801984a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801984c:	b2db      	uxtb	r3, r3
 801984e:	0019      	movs	r1, r3
 8019850:	2031      	movs	r0, #49	; 0x31
 8019852:	f001 f881 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019856:	210a      	movs	r1, #10
 8019858:	2037      	movs	r0, #55	; 0x37
 801985a:	f001 f87d 	bl	801a958 <SX1276Write>
        break;
 801985e:	46c0      	nop			; (mov r8, r8)
}
 8019860:	46c0      	nop			; (mov r8, r8)
 8019862:	46bd      	mov	sp, r7
 8019864:	b004      	add	sp, #16
 8019866:	bc80      	pop	{r7}
 8019868:	46b8      	mov	r8, r7
 801986a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801986c:	2000176c 	.word	0x2000176c
 8019870:	1f4add40 	.word	0x1f4add40

08019874 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019876:	46c6      	mov	lr, r8
 8019878:	b500      	push	{lr}
 801987a:	b084      	sub	sp, #16
 801987c:	af00      	add	r7, sp, #0
 801987e:	60ba      	str	r2, [r7, #8]
 8019880:	607b      	str	r3, [r7, #4]
 8019882:	240f      	movs	r4, #15
 8019884:	193b      	adds	r3, r7, r4
 8019886:	1c02      	adds	r2, r0, #0
 8019888:	701a      	strb	r2, [r3, #0]
 801988a:	230e      	movs	r3, #14
 801988c:	18fb      	adds	r3, r7, r3
 801988e:	1c0a      	adds	r2, r1, #0
 8019890:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8019892:	4bb6      	ldr	r3, [pc, #728]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019894:	791b      	ldrb	r3, [r3, #4]
 8019896:	2b01      	cmp	r3, #1
 8019898:	d108      	bne.n	80198ac <SX1276SetTxConfig+0x38>
 801989a:	193b      	adds	r3, r7, r4
 801989c:	781b      	ldrb	r3, [r3, #0]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d104      	bne.n	80198ac <SX1276SetTxConfig+0x38>
    {
        SX1276SetSleep( );
 80198a2:	f000 fc61 	bl	801a168 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 80198a6:	2001      	movs	r0, #1
 80198a8:	f7eb f923 	bl	8004af2 <HAL_Delay>
    }

    SX1276SetModem( modem );
 80198ac:	240f      	movs	r4, #15
 80198ae:	193b      	adds	r3, r7, r4
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	0018      	movs	r0, r3
 80198b4:	f000 fff6 	bl	801a8a4 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 80198b8:	230e      	movs	r3, #14
 80198ba:	18fb      	adds	r3, r7, r3
 80198bc:	781b      	ldrb	r3, [r3, #0]
 80198be:	b25b      	sxtb	r3, r3
 80198c0:	0018      	movs	r0, r3
 80198c2:	f000 fb3f 	bl	8019f44 <SX1276SetRfTxPower>
    //power = 5;// 5 , 14 , 17
    switch( modem )
 80198c6:	193b      	adds	r3, r7, r4
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d003      	beq.n	80198d6 <SX1276SetTxConfig+0x62>
 80198ce:	2b01      	cmp	r3, #1
 80198d0:	d100      	bne.n	80198d4 <SX1276SetTxConfig+0x60>
 80198d2:	e0c1      	b.n	8019a58 <SX1276SetTxConfig+0x1e4>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80198d4:	e208      	b.n	8019ce8 <SX1276SetTxConfig+0x474>
            SX1276.Settings.Fsk.Power = power;
 80198d6:	4ba5      	ldr	r3, [pc, #660]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 80198d8:	220e      	movs	r2, #14
 80198da:	18ba      	adds	r2, r7, r2
 80198dc:	7812      	ldrb	r2, [r2, #0]
 80198de:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80198e0:	4ba2      	ldr	r3, [pc, #648]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 80198e2:	68ba      	ldr	r2, [r7, #8]
 80198e4:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80198e6:	4ba1      	ldr	r3, [pc, #644]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 80198e8:	687a      	ldr	r2, [r7, #4]
 80198ea:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80198ec:	4b9f      	ldr	r3, [pc, #636]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 80198ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198f0:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80198f2:	4b9e      	ldr	r3, [pc, #632]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 80198f4:	2420      	movs	r4, #32
 80198f6:	2608      	movs	r6, #8
 80198f8:	2208      	movs	r2, #8
 80198fa:	18ba      	adds	r2, r7, r2
 80198fc:	1992      	adds	r2, r2, r6
 80198fe:	1912      	adds	r2, r2, r4
 8019900:	8812      	ldrh	r2, [r2, #0]
 8019902:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019904:	4b99      	ldr	r3, [pc, #612]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019906:	2524      	movs	r5, #36	; 0x24
 8019908:	2208      	movs	r2, #8
 801990a:	18ba      	adds	r2, r7, r2
 801990c:	1992      	adds	r2, r2, r6
 801990e:	1952      	adds	r2, r2, r5
 8019910:	2122      	movs	r1, #34	; 0x22
 8019912:	7812      	ldrb	r2, [r2, #0]
 8019914:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019916:	4b95      	ldr	r3, [pc, #596]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019918:	2228      	movs	r2, #40	; 0x28
 801991a:	2108      	movs	r1, #8
 801991c:	468c      	mov	ip, r1
 801991e:	2108      	movs	r1, #8
 8019920:	4688      	mov	r8, r1
 8019922:	44b8      	add	r8, r7
 8019924:	44c4      	add	ip, r8
 8019926:	4462      	add	r2, ip
 8019928:	2124      	movs	r1, #36	; 0x24
 801992a:	7812      	ldrb	r2, [r2, #0]
 801992c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801992e:	4b8f      	ldr	r3, [pc, #572]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019930:	2234      	movs	r2, #52	; 0x34
 8019932:	2108      	movs	r1, #8
 8019934:	468c      	mov	ip, r1
 8019936:	2108      	movs	r1, #8
 8019938:	4688      	mov	r8, r1
 801993a:	44b8      	add	r8, r7
 801993c:	44c4      	add	ip, r8
 801993e:	4462      	add	r2, ip
 8019940:	2125      	movs	r1, #37	; 0x25
 8019942:	7812      	ldrb	r2, [r2, #0]
 8019944:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8019946:	4b89      	ldr	r3, [pc, #548]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801994a:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 801994c:	68b8      	ldr	r0, [r7, #8]
 801994e:	f7e9 f96f 	bl	8002c30 <__aeabi_ui2d>
 8019952:	2200      	movs	r2, #0
 8019954:	4b86      	ldr	r3, [pc, #536]	; (8019b70 <SX1276SetTxConfig+0x2fc>)
 8019956:	f7e7 ff01 	bl	800175c <__aeabi_ddiv>
 801995a:	0002      	movs	r2, r0
 801995c:	000b      	movs	r3, r1
 801995e:	0010      	movs	r0, r2
 8019960:	0019      	movs	r1, r3
 8019962:	f7e6 fe55 	bl	8000610 <__aeabi_d2uiz>
 8019966:	0003      	movs	r3, r0
 8019968:	b29b      	uxth	r3, r3
 801996a:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	0a1b      	lsrs	r3, r3, #8
 8019970:	b2db      	uxtb	r3, r3
 8019972:	0019      	movs	r1, r3
 8019974:	2004      	movs	r0, #4
 8019976:	f000 ffef 	bl	801a958 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 801997a:	68bb      	ldr	r3, [r7, #8]
 801997c:	b2db      	uxtb	r3, r3
 801997e:	0019      	movs	r1, r3
 8019980:	2005      	movs	r0, #5
 8019982:	f000 ffe9 	bl	801a958 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019988:	f7e9 f952 	bl	8002c30 <__aeabi_ui2d>
 801998c:	0002      	movs	r2, r0
 801998e:	000b      	movs	r3, r1
 8019990:	2000      	movs	r0, #0
 8019992:	4978      	ldr	r1, [pc, #480]	; (8019b74 <SX1276SetTxConfig+0x300>)
 8019994:	f7e7 fee2 	bl	800175c <__aeabi_ddiv>
 8019998:	0002      	movs	r2, r0
 801999a:	000b      	movs	r3, r1
 801999c:	0010      	movs	r0, r2
 801999e:	0019      	movs	r1, r3
 80199a0:	f7e6 fe36 	bl	8000610 <__aeabi_d2uiz>
 80199a4:	0003      	movs	r3, r0
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80199aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ac:	0a1b      	lsrs	r3, r3, #8
 80199ae:	b2db      	uxtb	r3, r3
 80199b0:	0019      	movs	r1, r3
 80199b2:	2002      	movs	r0, #2
 80199b4:	f000 ffd0 	bl	801a958 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80199b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ba:	b2db      	uxtb	r3, r3
 80199bc:	0019      	movs	r1, r3
 80199be:	2003      	movs	r0, #3
 80199c0:	f000 ffca 	bl	801a958 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80199c4:	2308      	movs	r3, #8
 80199c6:	18fb      	adds	r3, r7, r3
 80199c8:	199b      	adds	r3, r3, r6
 80199ca:	191b      	adds	r3, r3, r4
 80199cc:	881b      	ldrh	r3, [r3, #0]
 80199ce:	0a1b      	lsrs	r3, r3, #8
 80199d0:	b29b      	uxth	r3, r3
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	0019      	movs	r1, r3
 80199d6:	2025      	movs	r0, #37	; 0x25
 80199d8:	f000 ffbe 	bl	801a958 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80199dc:	2308      	movs	r3, #8
 80199de:	18fb      	adds	r3, r7, r3
 80199e0:	199b      	adds	r3, r3, r6
 80199e2:	191b      	adds	r3, r3, r4
 80199e4:	881b      	ldrh	r3, [r3, #0]
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	0019      	movs	r1, r3
 80199ea:	2026      	movs	r0, #38	; 0x26
 80199ec:	f000 ffb4 	bl	801a958 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80199f0:	2030      	movs	r0, #48	; 0x30
 80199f2:	f000 ffc2 	bl	801a97a <SX1276Read>
 80199f6:	0003      	movs	r3, r0
 80199f8:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80199fa:	226f      	movs	r2, #111	; 0x6f
 80199fc:	4013      	ands	r3, r2
 80199fe:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019a00:	2308      	movs	r3, #8
 8019a02:	18fb      	adds	r3, r7, r3
 8019a04:	199b      	adds	r3, r3, r6
 8019a06:	195b      	adds	r3, r3, r5
 8019a08:	781b      	ldrb	r3, [r3, #0]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d001      	beq.n	8019a12 <SX1276SetTxConfig+0x19e>
 8019a0e:	2300      	movs	r3, #0
 8019a10:	e001      	b.n	8019a16 <SX1276SetTxConfig+0x1a2>
 8019a12:	2380      	movs	r3, #128	; 0x80
 8019a14:	425b      	negs	r3, r3
 8019a16:	4313      	orrs	r3, r2
 8019a18:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019a1a:	2328      	movs	r3, #40	; 0x28
 8019a1c:	2108      	movs	r1, #8
 8019a1e:	468c      	mov	ip, r1
 8019a20:	2108      	movs	r1, #8
 8019a22:	4688      	mov	r8, r1
 8019a24:	44b8      	add	r8, r7
 8019a26:	44c4      	add	ip, r8
 8019a28:	4463      	add	r3, ip
 8019a2a:	781b      	ldrb	r3, [r3, #0]
 8019a2c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019a2e:	b25b      	sxtb	r3, r3
 8019a30:	4313      	orrs	r3, r2
 8019a32:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019a34:	b2db      	uxtb	r3, r3
 8019a36:	0019      	movs	r1, r3
 8019a38:	2030      	movs	r0, #48	; 0x30
 8019a3a:	f000 ff8d 	bl	801a958 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019a3e:	2031      	movs	r0, #49	; 0x31
 8019a40:	f000 ff9b 	bl	801a97a <SX1276Read>
 8019a44:	0003      	movs	r3, r0
 8019a46:	001a      	movs	r2, r3
 8019a48:	2340      	movs	r3, #64	; 0x40
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	0019      	movs	r1, r3
 8019a50:	2031      	movs	r0, #49	; 0x31
 8019a52:	f000 ff81 	bl	801a958 <SX1276Write>
        break;
 8019a56:	e147      	b.n	8019ce8 <SX1276SetTxConfig+0x474>
            SX1276.Settings.LoRa.Power = power;
 8019a58:	4b44      	ldr	r3, [pc, #272]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019a5a:	220e      	movs	r2, #14
 8019a5c:	18ba      	adds	r2, r7, r2
 8019a5e:	2140      	movs	r1, #64	; 0x40
 8019a60:	7812      	ldrb	r2, [r2, #0]
 8019a62:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	2b02      	cmp	r3, #2
 8019a68:	d900      	bls.n	8019a6c <SX1276SetTxConfig+0x1f8>
                while( 1 );
 8019a6a:	e7fe      	b.n	8019a6a <SX1276SetTxConfig+0x1f6>
            bandwidth += 7;
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	3307      	adds	r3, #7
 8019a70:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019a72:	4b3e      	ldr	r3, [pc, #248]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019a78:	4b3c      	ldr	r3, [pc, #240]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a7c:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019a7e:	4b3b      	ldr	r3, [pc, #236]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019a80:	221c      	movs	r2, #28
 8019a82:	2108      	movs	r1, #8
 8019a84:	468c      	mov	ip, r1
 8019a86:	2108      	movs	r1, #8
 8019a88:	4688      	mov	r8, r1
 8019a8a:	44b8      	add	r8, r7
 8019a8c:	44c4      	add	ip, r8
 8019a8e:	4462      	add	r2, ip
 8019a90:	214d      	movs	r1, #77	; 0x4d
 8019a92:	7812      	ldrb	r2, [r2, #0]
 8019a94:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019a96:	4b35      	ldr	r3, [pc, #212]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019a98:	2220      	movs	r2, #32
 8019a9a:	2108      	movs	r1, #8
 8019a9c:	468c      	mov	ip, r1
 8019a9e:	2108      	movs	r1, #8
 8019aa0:	4688      	mov	r8, r1
 8019aa2:	44b8      	add	r8, r7
 8019aa4:	44c4      	add	ip, r8
 8019aa6:	4462      	add	r2, ip
 8019aa8:	214e      	movs	r1, #78	; 0x4e
 8019aaa:	8812      	ldrh	r2, [r2, #0]
 8019aac:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019aae:	4b2f      	ldr	r3, [pc, #188]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019ab0:	2224      	movs	r2, #36	; 0x24
 8019ab2:	2108      	movs	r1, #8
 8019ab4:	468c      	mov	ip, r1
 8019ab6:	2108      	movs	r1, #8
 8019ab8:	4688      	mov	r8, r1
 8019aba:	44b8      	add	r8, r7
 8019abc:	44c4      	add	ip, r8
 8019abe:	4462      	add	r2, ip
 8019ac0:	2150      	movs	r1, #80	; 0x50
 8019ac2:	7812      	ldrb	r2, [r2, #0]
 8019ac4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019ac6:	4b29      	ldr	r3, [pc, #164]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019ac8:	222c      	movs	r2, #44	; 0x2c
 8019aca:	2108      	movs	r1, #8
 8019acc:	468c      	mov	ip, r1
 8019ace:	2108      	movs	r1, #8
 8019ad0:	4688      	mov	r8, r1
 8019ad2:	44b8      	add	r8, r7
 8019ad4:	44c4      	add	ip, r8
 8019ad6:	4462      	add	r2, ip
 8019ad8:	2153      	movs	r1, #83	; 0x53
 8019ada:	7812      	ldrb	r2, [r2, #0]
 8019adc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019ade:	4b23      	ldr	r3, [pc, #140]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019ae0:	2230      	movs	r2, #48	; 0x30
 8019ae2:	2108      	movs	r1, #8
 8019ae4:	468c      	mov	ip, r1
 8019ae6:	2108      	movs	r1, #8
 8019ae8:	4688      	mov	r8, r1
 8019aea:	44b8      	add	r8, r7
 8019aec:	44c4      	add	ip, r8
 8019aee:	4462      	add	r2, ip
 8019af0:	2154      	movs	r1, #84	; 0x54
 8019af2:	7812      	ldrb	r2, [r2, #0]
 8019af4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019af6:	4b1d      	ldr	r3, [pc, #116]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019af8:	2228      	movs	r2, #40	; 0x28
 8019afa:	2108      	movs	r1, #8
 8019afc:	468c      	mov	ip, r1
 8019afe:	2108      	movs	r1, #8
 8019b00:	4688      	mov	r8, r1
 8019b02:	44b8      	add	r8, r7
 8019b04:	44c4      	add	ip, r8
 8019b06:	4462      	add	r2, ip
 8019b08:	2152      	movs	r1, #82	; 0x52
 8019b0a:	7812      	ldrb	r2, [r2, #0]
 8019b0c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019b0e:	4b17      	ldr	r3, [pc, #92]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019b10:	2234      	movs	r2, #52	; 0x34
 8019b12:	2108      	movs	r1, #8
 8019b14:	468c      	mov	ip, r1
 8019b16:	2108      	movs	r1, #8
 8019b18:	4688      	mov	r8, r1
 8019b1a:	44b8      	add	r8, r7
 8019b1c:	44c4      	add	ip, r8
 8019b1e:	4462      	add	r2, ip
 8019b20:	2155      	movs	r1, #85	; 0x55
 8019b22:	7812      	ldrb	r2, [r2, #0]
 8019b24:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8019b26:	4b11      	ldr	r3, [pc, #68]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019b2a:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8019b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b2e:	2b0c      	cmp	r3, #12
 8019b30:	d902      	bls.n	8019b38 <SX1276SetTxConfig+0x2c4>
                datarate = 12;
 8019b32:	230c      	movs	r3, #12
 8019b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8019b36:	e004      	b.n	8019b42 <SX1276SetTxConfig+0x2ce>
            else if( datarate < 6 )
 8019b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b3a:	2b05      	cmp	r3, #5
 8019b3c:	d801      	bhi.n	8019b42 <SX1276SetTxConfig+0x2ce>
                datarate = 6;
 8019b3e:	2306      	movs	r3, #6
 8019b40:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	2b07      	cmp	r3, #7
 8019b46:	d105      	bne.n	8019b54 <SX1276SetTxConfig+0x2e0>
 8019b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b4a:	2b0b      	cmp	r3, #11
 8019b4c:	d008      	beq.n	8019b60 <SX1276SetTxConfig+0x2ec>
 8019b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b50:	2b0c      	cmp	r3, #12
 8019b52:	d005      	beq.n	8019b60 <SX1276SetTxConfig+0x2ec>
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	2b08      	cmp	r3, #8
 8019b58:	d10e      	bne.n	8019b78 <SX1276SetTxConfig+0x304>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b5c:	2b0c      	cmp	r3, #12
 8019b5e:	d10b      	bne.n	8019b78 <SX1276SetTxConfig+0x304>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019b60:	4b02      	ldr	r3, [pc, #8]	; (8019b6c <SX1276SetTxConfig+0x2f8>)
 8019b62:	224c      	movs	r2, #76	; 0x4c
 8019b64:	2101      	movs	r1, #1
 8019b66:	5499      	strb	r1, [r3, r2]
 8019b68:	e00a      	b.n	8019b80 <SX1276SetTxConfig+0x30c>
 8019b6a:	46c0      	nop			; (mov r8, r8)
 8019b6c:	2000176c 	.word	0x2000176c
 8019b70:	404e8480 	.word	0x404e8480
 8019b74:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019b78:	4b5e      	ldr	r3, [pc, #376]	; (8019cf4 <SX1276SetTxConfig+0x480>)
 8019b7a:	224c      	movs	r2, #76	; 0x4c
 8019b7c:	2100      	movs	r1, #0
 8019b7e:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019b80:	4b5c      	ldr	r3, [pc, #368]	; (8019cf4 <SX1276SetTxConfig+0x480>)
 8019b82:	2253      	movs	r2, #83	; 0x53
 8019b84:	5c9b      	ldrb	r3, [r3, r2]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d013      	beq.n	8019bb2 <SX1276SetTxConfig+0x33e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019b8a:	2044      	movs	r0, #68	; 0x44
 8019b8c:	f000 fef5 	bl	801a97a <SX1276Read>
 8019b90:	0003      	movs	r3, r0
 8019b92:	001a      	movs	r2, r3
 8019b94:	2380      	movs	r3, #128	; 0x80
 8019b96:	425b      	negs	r3, r3
 8019b98:	4313      	orrs	r3, r2
 8019b9a:	b2db      	uxtb	r3, r3
 8019b9c:	0019      	movs	r1, r3
 8019b9e:	2044      	movs	r0, #68	; 0x44
 8019ba0:	f000 feda 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019ba4:	4b53      	ldr	r3, [pc, #332]	; (8019cf4 <SX1276SetTxConfig+0x480>)
 8019ba6:	2254      	movs	r2, #84	; 0x54
 8019ba8:	5c9b      	ldrb	r3, [r3, r2]
 8019baa:	0019      	movs	r1, r3
 8019bac:	2024      	movs	r0, #36	; 0x24
 8019bae:	f000 fed3 	bl	801a958 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019bb2:	201d      	movs	r0, #29
 8019bb4:	f000 fee1 	bl	801a97a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	b2db      	uxtb	r3, r3
 8019bbc:	011b      	lsls	r3, r3, #4
 8019bbe:	b2da      	uxtb	r2, r3
 8019bc0:	231c      	movs	r3, #28
 8019bc2:	2108      	movs	r1, #8
 8019bc4:	468c      	mov	ip, r1
 8019bc6:	2108      	movs	r1, #8
 8019bc8:	4688      	mov	r8, r1
 8019bca:	44b8      	add	r8, r7
 8019bcc:	44c4      	add	ip, r8
 8019bce:	4463      	add	r3, ip
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	18db      	adds	r3, r3, r3
 8019bd4:	b2db      	uxtb	r3, r3
 8019bd6:	4313      	orrs	r3, r2
 8019bd8:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019bda:	2324      	movs	r3, #36	; 0x24
 8019bdc:	2108      	movs	r1, #8
 8019bde:	468c      	mov	ip, r1
 8019be0:	2108      	movs	r1, #8
 8019be2:	4688      	mov	r8, r1
 8019be4:	44b8      	add	r8, r7
 8019be6:	44c4      	add	ip, r8
 8019be8:	4463      	add	r3, ip
 8019bea:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019bec:	4313      	orrs	r3, r2
 8019bee:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019bf0:	0019      	movs	r1, r3
 8019bf2:	201d      	movs	r0, #29
 8019bf4:	f000 feb0 	bl	801a958 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019bf8:	201e      	movs	r0, #30
 8019bfa:	f000 febe 	bl	801a97a <SX1276Read>
 8019bfe:	0003      	movs	r3, r0
 8019c00:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8019c02:	230b      	movs	r3, #11
 8019c04:	4013      	ands	r3, r2
 8019c06:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8019c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c0a:	b2db      	uxtb	r3, r3
 8019c0c:	011b      	lsls	r3, r3, #4
 8019c0e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8019c10:	4313      	orrs	r3, r2
 8019c12:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8019c14:	2328      	movs	r3, #40	; 0x28
 8019c16:	2108      	movs	r1, #8
 8019c18:	468c      	mov	ip, r1
 8019c1a:	2108      	movs	r1, #8
 8019c1c:	4688      	mov	r8, r1
 8019c1e:	44b8      	add	r8, r7
 8019c20:	44c4      	add	ip, r8
 8019c22:	4463      	add	r3, ip
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	009b      	lsls	r3, r3, #2
 8019c28:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019c2a:	4313      	orrs	r3, r2
 8019c2c:	b2db      	uxtb	r3, r3
 8019c2e:	0019      	movs	r1, r3
 8019c30:	201e      	movs	r0, #30
 8019c32:	f000 fe91 	bl	801a958 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019c36:	2026      	movs	r0, #38	; 0x26
 8019c38:	f000 fe9f 	bl	801a97a <SX1276Read>
 8019c3c:	0003      	movs	r3, r0
 8019c3e:	b25b      	sxtb	r3, r3
 8019c40:	2208      	movs	r2, #8
 8019c42:	4393      	bics	r3, r2
 8019c44:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019c46:	4b2b      	ldr	r3, [pc, #172]	; (8019cf4 <SX1276SetTxConfig+0x480>)
 8019c48:	214c      	movs	r1, #76	; 0x4c
 8019c4a:	5c5b      	ldrb	r3, [r3, r1]
 8019c4c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019c4e:	b25b      	sxtb	r3, r3
 8019c50:	4313      	orrs	r3, r2
 8019c52:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019c54:	b2db      	uxtb	r3, r3
 8019c56:	0019      	movs	r1, r3
 8019c58:	2026      	movs	r0, #38	; 0x26
 8019c5a:	f000 fe7d 	bl	801a958 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8019c5e:	2420      	movs	r4, #32
 8019c60:	2508      	movs	r5, #8
 8019c62:	2308      	movs	r3, #8
 8019c64:	18fb      	adds	r3, r7, r3
 8019c66:	195b      	adds	r3, r3, r5
 8019c68:	191b      	adds	r3, r3, r4
 8019c6a:	881b      	ldrh	r3, [r3, #0]
 8019c6c:	0a1b      	lsrs	r3, r3, #8
 8019c6e:	b29b      	uxth	r3, r3
 8019c70:	b2db      	uxtb	r3, r3
 8019c72:	0019      	movs	r1, r3
 8019c74:	2020      	movs	r0, #32
 8019c76:	f000 fe6f 	bl	801a958 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8019c7a:	2308      	movs	r3, #8
 8019c7c:	18fb      	adds	r3, r7, r3
 8019c7e:	195b      	adds	r3, r3, r5
 8019c80:	191b      	adds	r3, r3, r4
 8019c82:	881b      	ldrh	r3, [r3, #0]
 8019c84:	b2db      	uxtb	r3, r3
 8019c86:	0019      	movs	r1, r3
 8019c88:	2021      	movs	r0, #33	; 0x21
 8019c8a:	f000 fe65 	bl	801a958 <SX1276Write>
            if( datarate == 6 )
 8019c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c90:	2b06      	cmp	r3, #6
 8019c92:	d114      	bne.n	8019cbe <SX1276SetTxConfig+0x44a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019c94:	2031      	movs	r0, #49	; 0x31
 8019c96:	f000 fe70 	bl	801a97a <SX1276Read>
 8019c9a:	0003      	movs	r3, r0
 8019c9c:	b25b      	sxtb	r3, r3
 8019c9e:	2207      	movs	r2, #7
 8019ca0:	4393      	bics	r3, r2
 8019ca2:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019ca4:	2205      	movs	r2, #5
 8019ca6:	4313      	orrs	r3, r2
 8019ca8:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019caa:	b2db      	uxtb	r3, r3
 8019cac:	0019      	movs	r1, r3
 8019cae:	2031      	movs	r0, #49	; 0x31
 8019cb0:	f000 fe52 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019cb4:	210c      	movs	r1, #12
 8019cb6:	2037      	movs	r0, #55	; 0x37
 8019cb8:	f000 fe4e 	bl	801a958 <SX1276Write>
        break;
 8019cbc:	e013      	b.n	8019ce6 <SX1276SetTxConfig+0x472>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019cbe:	2031      	movs	r0, #49	; 0x31
 8019cc0:	f000 fe5b 	bl	801a97a <SX1276Read>
 8019cc4:	0003      	movs	r3, r0
 8019cc6:	b25b      	sxtb	r3, r3
 8019cc8:	2207      	movs	r2, #7
 8019cca:	4393      	bics	r3, r2
 8019ccc:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019cce:	2203      	movs	r2, #3
 8019cd0:	4313      	orrs	r3, r2
 8019cd2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019cd4:	b2db      	uxtb	r3, r3
 8019cd6:	0019      	movs	r1, r3
 8019cd8:	2031      	movs	r0, #49	; 0x31
 8019cda:	f000 fe3d 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019cde:	210a      	movs	r1, #10
 8019ce0:	2037      	movs	r0, #55	; 0x37
 8019ce2:	f000 fe39 	bl	801a958 <SX1276Write>
        break;
 8019ce6:	46c0      	nop			; (mov r8, r8)
}
 8019ce8:	46c0      	nop			; (mov r8, r8)
 8019cea:	46bd      	mov	sp, r7
 8019cec:	b004      	add	sp, #16
 8019cee:	bc80      	pop	{r7}
 8019cf0:	46b8      	mov	r8, r7
 8019cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cf4:	2000176c 	.word	0x2000176c

08019cf8 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8019cf8:	b590      	push	{r4, r7, lr}
 8019cfa:	b08b      	sub	sp, #44	; 0x2c
 8019cfc:	af04      	add	r7, sp, #16
 8019cfe:	60b9      	str	r1, [r7, #8]
 8019d00:	607a      	str	r2, [r7, #4]
 8019d02:	0019      	movs	r1, r3
 8019d04:	240f      	movs	r4, #15
 8019d06:	193b      	adds	r3, r7, r4
 8019d08:	1c02      	adds	r2, r0, #0
 8019d0a:	701a      	strb	r2, [r3, #0]
 8019d0c:	230e      	movs	r3, #14
 8019d0e:	18fb      	adds	r3, r7, r3
 8019d10:	1c0a      	adds	r2, r1, #0
 8019d12:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 8019d14:	2300      	movs	r3, #0
 8019d16:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019d18:	2301      	movs	r3, #1
 8019d1a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019d1c:	193b      	adds	r3, r7, r4
 8019d1e:	781b      	ldrb	r3, [r3, #0]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d002      	beq.n	8019d2a <SX1276GetTimeOnAir+0x32>
 8019d24:	2b01      	cmp	r3, #1
 8019d26:	d01a      	beq.n	8019d5e <SX1276GetTimeOnAir+0x66>
 8019d28:	e03f      	b.n	8019daa <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8019d2a:	2334      	movs	r3, #52	; 0x34
 8019d2c:	18fb      	adds	r3, r7, r3
 8019d2e:	781c      	ldrb	r4, [r3, #0]
 8019d30:	2330      	movs	r3, #48	; 0x30
 8019d32:	18fb      	adds	r3, r7, r3
 8019d34:	781a      	ldrb	r2, [r3, #0]
 8019d36:	232c      	movs	r3, #44	; 0x2c
 8019d38:	18fb      	adds	r3, r7, r3
 8019d3a:	7819      	ldrb	r1, [r3, #0]
 8019d3c:	2328      	movs	r3, #40	; 0x28
 8019d3e:	18fb      	adds	r3, r7, r3
 8019d40:	8818      	ldrh	r0, [r3, #0]
 8019d42:	0023      	movs	r3, r4
 8019d44:	f000 ff7e 	bl	801ac44 <SX1276GetGfskTimeOnAirNumerator>
 8019d48:	0002      	movs	r2, r0
 8019d4a:	0013      	movs	r3, r2
 8019d4c:	015b      	lsls	r3, r3, #5
 8019d4e:	1a9b      	subs	r3, r3, r2
 8019d50:	009b      	lsls	r3, r3, #2
 8019d52:	189b      	adds	r3, r3, r2
 8019d54:	00db      	lsls	r3, r3, #3
 8019d56:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	613b      	str	r3, [r7, #16]
        }
        break;
 8019d5c:	e025      	b.n	8019daa <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8019d5e:	2328      	movs	r3, #40	; 0x28
 8019d60:	18fb      	adds	r3, r7, r3
 8019d62:	881c      	ldrh	r4, [r3, #0]
 8019d64:	230e      	movs	r3, #14
 8019d66:	18fb      	adds	r3, r7, r3
 8019d68:	781a      	ldrb	r2, [r3, #0]
 8019d6a:	6879      	ldr	r1, [r7, #4]
 8019d6c:	68b8      	ldr	r0, [r7, #8]
 8019d6e:	2334      	movs	r3, #52	; 0x34
 8019d70:	18fb      	adds	r3, r7, r3
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	9302      	str	r3, [sp, #8]
 8019d76:	2330      	movs	r3, #48	; 0x30
 8019d78:	18fb      	adds	r3, r7, r3
 8019d7a:	781b      	ldrb	r3, [r3, #0]
 8019d7c:	9301      	str	r3, [sp, #4]
 8019d7e:	232c      	movs	r3, #44	; 0x2c
 8019d80:	18fb      	adds	r3, r7, r3
 8019d82:	781b      	ldrb	r3, [r3, #0]
 8019d84:	9300      	str	r3, [sp, #0]
 8019d86:	0023      	movs	r3, r4
 8019d88:	f000 ff96 	bl	801acb8 <SX1276GetLoRaTimeOnAirNumerator>
 8019d8c:	0002      	movs	r2, r0
 8019d8e:	0013      	movs	r3, r2
 8019d90:	015b      	lsls	r3, r3, #5
 8019d92:	1a9b      	subs	r3, r3, r2
 8019d94:	009b      	lsls	r3, r3, #2
 8019d96:	189b      	adds	r3, r3, r2
 8019d98:	00db      	lsls	r3, r3, #3
 8019d9a:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 8019d9c:	68bb      	ldr	r3, [r7, #8]
 8019d9e:	0018      	movs	r0, r3
 8019da0:	f000 ff1e 	bl	801abe0 <SX1276GetLoRaBandwidthInHz>
 8019da4:	0003      	movs	r3, r0
 8019da6:	613b      	str	r3, [r7, #16]
        }
        break;
 8019da8:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 8019daa:	697a      	ldr	r2, [r7, #20]
 8019dac:	693b      	ldr	r3, [r7, #16]
 8019dae:	18d3      	adds	r3, r2, r3
 8019db0:	3b01      	subs	r3, #1
 8019db2:	6939      	ldr	r1, [r7, #16]
 8019db4:	0018      	movs	r0, r3
 8019db6:	f7e6 f9b9 	bl	800012c <__udivsi3>
 8019dba:	0003      	movs	r3, r0
}
 8019dbc:	0018      	movs	r0, r3
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	b007      	add	sp, #28
 8019dc2:	bd90      	pop	{r4, r7, pc}

08019dc4 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b084      	sub	sp, #16
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
 8019dcc:	000a      	movs	r2, r1
 8019dce:	1cfb      	adds	r3, r7, #3
 8019dd0:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8019dd6:	4b59      	ldr	r3, [pc, #356]	; (8019f3c <SX1276Send+0x178>)
 8019dd8:	795b      	ldrb	r3, [r3, #5]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d002      	beq.n	8019de4 <SX1276Send+0x20>
 8019dde:	2b01      	cmp	r3, #1
 8019de0:	d04c      	beq.n	8019e7c <SX1276Send+0xb8>
 8019de2:	e0a2      	b.n	8019f2a <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8019de4:	4b55      	ldr	r3, [pc, #340]	; (8019f3c <SX1276Send+0x178>)
 8019de6:	2200      	movs	r2, #0
 8019de8:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8019dea:	1cfb      	adds	r3, r7, #3
 8019dec:	781b      	ldrb	r3, [r3, #0]
 8019dee:	b29a      	uxth	r2, r3
 8019df0:	4b52      	ldr	r3, [pc, #328]	; (8019f3c <SX1276Send+0x178>)
 8019df2:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8019df4:	4b51      	ldr	r3, [pc, #324]	; (8019f3c <SX1276Send+0x178>)
 8019df6:	2222      	movs	r2, #34	; 0x22
 8019df8:	5c9b      	ldrb	r3, [r3, r2]
 8019dfa:	2201      	movs	r2, #1
 8019dfc:	4053      	eors	r3, r2
 8019dfe:	b2db      	uxtb	r3, r3
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d005      	beq.n	8019e10 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8019e04:	1cfb      	adds	r3, r7, #3
 8019e06:	2101      	movs	r1, #1
 8019e08:	0018      	movs	r0, r3
 8019e0a:	f000 fe31 	bl	801aa70 <SX1276WriteFifo>
 8019e0e:	e005      	b.n	8019e1c <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8019e10:	1cfb      	adds	r3, r7, #3
 8019e12:	781b      	ldrb	r3, [r3, #0]
 8019e14:	0019      	movs	r1, r3
 8019e16:	2032      	movs	r0, #50	; 0x32
 8019e18:	f000 fd9e 	bl	801a958 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8019e1c:	1cfb      	adds	r3, r7, #3
 8019e1e:	781b      	ldrb	r3, [r3, #0]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d009      	beq.n	8019e38 <SX1276Send+0x74>
 8019e24:	1cfb      	adds	r3, r7, #3
 8019e26:	781b      	ldrb	r3, [r3, #0]
 8019e28:	2b40      	cmp	r3, #64	; 0x40
 8019e2a:	d805      	bhi.n	8019e38 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8019e2c:	1cfb      	adds	r3, r7, #3
 8019e2e:	7819      	ldrb	r1, [r3, #0]
 8019e30:	4b42      	ldr	r3, [pc, #264]	; (8019f3c <SX1276Send+0x178>)
 8019e32:	223f      	movs	r2, #63	; 0x3f
 8019e34:	5499      	strb	r1, [r3, r2]
 8019e36:	e00b      	b.n	8019e50 <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8019e38:	1cfb      	adds	r3, r7, #3
 8019e3a:	781b      	ldrb	r3, [r3, #0]
 8019e3c:	b29a      	uxth	r2, r3
 8019e3e:	6879      	ldr	r1, [r7, #4]
 8019e40:	4b3f      	ldr	r3, [pc, #252]	; (8019f40 <SX1276Send+0x17c>)
 8019e42:	0018      	movs	r0, r3
 8019e44:	f002 f838 	bl	801beb8 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8019e48:	4b3c      	ldr	r3, [pc, #240]	; (8019f3c <SX1276Send+0x178>)
 8019e4a:	223f      	movs	r2, #63	; 0x3f
 8019e4c:	2120      	movs	r1, #32
 8019e4e:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8019e50:	4b3a      	ldr	r3, [pc, #232]	; (8019f3c <SX1276Send+0x178>)
 8019e52:	223f      	movs	r2, #63	; 0x3f
 8019e54:	5c9a      	ldrb	r2, [r3, r2]
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	0011      	movs	r1, r2
 8019e5a:	0018      	movs	r0, r3
 8019e5c:	f000 fe08 	bl	801aa70 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8019e60:	4b36      	ldr	r3, [pc, #216]	; (8019f3c <SX1276Send+0x178>)
 8019e62:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8019e64:	4b35      	ldr	r3, [pc, #212]	; (8019f3c <SX1276Send+0x178>)
 8019e66:	213f      	movs	r1, #63	; 0x3f
 8019e68:	5c5b      	ldrb	r3, [r3, r1]
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	18d3      	adds	r3, r2, r3
 8019e6e:	b29a      	uxth	r2, r3
 8019e70:	4b32      	ldr	r3, [pc, #200]	; (8019f3c <SX1276Send+0x178>)
 8019e72:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8019e74:	4b31      	ldr	r3, [pc, #196]	; (8019f3c <SX1276Send+0x178>)
 8019e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e78:	60fb      	str	r3, [r7, #12]
        }
        break;
 8019e7a:	e056      	b.n	8019f2a <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8019e7c:	4b2f      	ldr	r3, [pc, #188]	; (8019f3c <SX1276Send+0x178>)
 8019e7e:	2255      	movs	r2, #85	; 0x55
 8019e80:	5c9b      	ldrb	r3, [r3, r2]
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d011      	beq.n	8019eaa <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8019e86:	2033      	movs	r0, #51	; 0x33
 8019e88:	f000 fd77 	bl	801a97a <SX1276Read>
 8019e8c:	0003      	movs	r3, r0
 8019e8e:	001a      	movs	r2, r3
 8019e90:	2341      	movs	r3, #65	; 0x41
 8019e92:	439a      	bics	r2, r3
 8019e94:	0013      	movs	r3, r2
 8019e96:	b2db      	uxtb	r3, r3
 8019e98:	0019      	movs	r1, r3
 8019e9a:	2033      	movs	r0, #51	; 0x33
 8019e9c:	f000 fd5c 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8019ea0:	2119      	movs	r1, #25
 8019ea2:	203b      	movs	r0, #59	; 0x3b
 8019ea4:	f000 fd58 	bl	801a958 <SX1276Write>
 8019ea8:	e013      	b.n	8019ed2 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8019eaa:	2033      	movs	r0, #51	; 0x33
 8019eac:	f000 fd65 	bl	801a97a <SX1276Read>
 8019eb0:	0003      	movs	r3, r0
 8019eb2:	b25b      	sxtb	r3, r3
 8019eb4:	2241      	movs	r2, #65	; 0x41
 8019eb6:	4393      	bics	r3, r2
 8019eb8:	b25b      	sxtb	r3, r3
 8019eba:	2201      	movs	r2, #1
 8019ebc:	4313      	orrs	r3, r2
 8019ebe:	b25b      	sxtb	r3, r3
 8019ec0:	b2db      	uxtb	r3, r3
 8019ec2:	0019      	movs	r1, r3
 8019ec4:	2033      	movs	r0, #51	; 0x33
 8019ec6:	f000 fd47 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8019eca:	211d      	movs	r1, #29
 8019ecc:	203b      	movs	r0, #59	; 0x3b
 8019ece:	f000 fd43 	bl	801a958 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8019ed2:	1cfb      	adds	r3, r7, #3
 8019ed4:	7819      	ldrb	r1, [r3, #0]
 8019ed6:	4b19      	ldr	r3, [pc, #100]	; (8019f3c <SX1276Send+0x178>)
 8019ed8:	2264      	movs	r2, #100	; 0x64
 8019eda:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8019edc:	1cfb      	adds	r3, r7, #3
 8019ede:	781b      	ldrb	r3, [r3, #0]
 8019ee0:	0019      	movs	r1, r3
 8019ee2:	2022      	movs	r0, #34	; 0x22
 8019ee4:	f000 fd38 	bl	801a958 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8019ee8:	2100      	movs	r1, #0
 8019eea:	200e      	movs	r0, #14
 8019eec:	f000 fd34 	bl	801a958 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8019ef0:	2100      	movs	r1, #0
 8019ef2:	200d      	movs	r0, #13
 8019ef4:	f000 fd30 	bl	801a958 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8019ef8:	2001      	movs	r0, #1
 8019efa:	f000 fd3e 	bl	801a97a <SX1276Read>
 8019efe:	0003      	movs	r3, r0
 8019f00:	001a      	movs	r2, r3
 8019f02:	23f8      	movs	r3, #248	; 0xf8
 8019f04:	439a      	bics	r2, r3
 8019f06:	1e13      	subs	r3, r2, #0
 8019f08:	d104      	bne.n	8019f14 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8019f0a:	f000 f94f 	bl	801a1ac <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 8019f0e:	2001      	movs	r0, #1
 8019f10:	f7ea fdef 	bl	8004af2 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8019f14:	1cfb      	adds	r3, r7, #3
 8019f16:	781a      	ldrb	r2, [r3, #0]
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	0011      	movs	r1, r2
 8019f1c:	0018      	movs	r0, r3
 8019f1e:	f000 fda7 	bl	801aa70 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8019f22:	4b06      	ldr	r3, [pc, #24]	; (8019f3c <SX1276Send+0x178>)
 8019f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f26:	60fb      	str	r3, [r7, #12]
        }
        break;
 8019f28:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	0018      	movs	r0, r3
 8019f2e:	f000 faf3 	bl	801a518 <SX1276SetTx>
}
 8019f32:	46c0      	nop			; (mov r8, r8)
 8019f34:	46bd      	mov	sp, r7
 8019f36:	b004      	add	sp, #16
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	46c0      	nop			; (mov r8, r8)
 8019f3c:	2000176c 	.word	0x2000176c
 8019f40:	20000e80 	.word	0x20000e80

08019f44 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 8019f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f46:	b085      	sub	sp, #20
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	0002      	movs	r2, r0
 8019f4c:	1dfb      	adds	r3, r7, #7
 8019f4e:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8019f50:	210f      	movs	r1, #15
 8019f52:	187b      	adds	r3, r7, r1
 8019f54:	2200      	movs	r2, #0
 8019f56:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8019f58:	250e      	movs	r5, #14
 8019f5a:	197b      	adds	r3, r7, r5
 8019f5c:	2200      	movs	r2, #0
 8019f5e:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 8019f60:	260d      	movs	r6, #13
 8019f62:	19bb      	adds	r3, r7, r6
 8019f64:	2200      	movs	r2, #0
 8019f66:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8019f68:	187c      	adds	r4, r7, r1
 8019f6a:	2009      	movs	r0, #9
 8019f6c:	f000 fd05 	bl	801a97a <SX1276Read>
 8019f70:	0003      	movs	r3, r0
 8019f72:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8019f74:	197c      	adds	r4, r7, r5
 8019f76:	204d      	movs	r0, #77	; 0x4d
 8019f78:	f000 fcff 	bl	801a97a <SX1276Read>
 8019f7c:	0003      	movs	r3, r0
 8019f7e:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8019f80:	4b78      	ldr	r3, [pc, #480]	; (801a164 <SX1276SetRfTxPower+0x220>)
 8019f82:	689b      	ldr	r3, [r3, #8]
 8019f84:	0018      	movs	r0, r3
 8019f86:	f7eb fdc3 	bl	8005b10 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 8019f8a:	0003      	movs	r3, r0
 8019f8c:	2b03      	cmp	r3, #3
 8019f8e:	d01f      	beq.n	8019fd0 <SX1276SetRfTxPower+0x8c>
 8019f90:	dc23      	bgt.n	8019fda <SX1276SetRfTxPower+0x96>
 8019f92:	2b02      	cmp	r3, #2
 8019f94:	d008      	beq.n	8019fa8 <SX1276SetRfTxPower+0x64>
 8019f96:	dc20      	bgt.n	8019fda <SX1276SetRfTxPower+0x96>
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d00a      	beq.n	8019fb2 <SX1276SetRfTxPower+0x6e>
 8019f9c:	2b01      	cmp	r3, #1
 8019f9e:	d11c      	bne.n	8019fda <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 8019fa0:	19bb      	adds	r3, r7, r6
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	701a      	strb	r2, [r3, #0]
        break;
 8019fa6:	e019      	b.n	8019fdc <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 8019fa8:	230d      	movs	r3, #13
 8019faa:	18fb      	adds	r3, r7, r3
 8019fac:	2280      	movs	r2, #128	; 0x80
 8019fae:	701a      	strb	r2, [r3, #0]
        break;
 8019fb0:	e014      	b.n	8019fdc <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 8019fb2:	1dfb      	adds	r3, r7, #7
 8019fb4:	781b      	ldrb	r3, [r3, #0]
 8019fb6:	b25b      	sxtb	r3, r3
 8019fb8:	2b0e      	cmp	r3, #14
 8019fba:	dd04      	ble.n	8019fc6 <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 8019fbc:	230d      	movs	r3, #13
 8019fbe:	18fb      	adds	r3, r7, r3
 8019fc0:	2280      	movs	r2, #128	; 0x80
 8019fc2:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 8019fc4:	e00a      	b.n	8019fdc <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 8019fc6:	230d      	movs	r3, #13
 8019fc8:	18fb      	adds	r3, r7, r3
 8019fca:	2200      	movs	r2, #0
 8019fcc:	701a      	strb	r2, [r3, #0]
        break;
 8019fce:	e005      	b.n	8019fdc <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 8019fd0:	230d      	movs	r3, #13
 8019fd2:	18fb      	adds	r3, r7, r3
 8019fd4:	2280      	movs	r2, #128	; 0x80
 8019fd6:	701a      	strb	r2, [r3, #0]
          break;
 8019fd8:	e000      	b.n	8019fdc <SX1276SetRfTxPower+0x98>
        default:
        break;
 8019fda:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8019fdc:	210f      	movs	r1, #15
 8019fde:	187b      	adds	r3, r7, r1
 8019fe0:	781b      	ldrb	r3, [r3, #0]
 8019fe2:	b25b      	sxtb	r3, r3
 8019fe4:	227f      	movs	r2, #127	; 0x7f
 8019fe6:	4013      	ands	r3, r2
 8019fe8:	b25a      	sxtb	r2, r3
 8019fea:	230d      	movs	r3, #13
 8019fec:	18fb      	adds	r3, r7, r3
 8019fee:	781b      	ldrb	r3, [r3, #0]
 8019ff0:	b25b      	sxtb	r3, r3
 8019ff2:	4313      	orrs	r3, r2
 8019ff4:	b25a      	sxtb	r2, r3
 8019ff6:	187b      	adds	r3, r7, r1
 8019ff8:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8019ffa:	187b      	adds	r3, r7, r1
 8019ffc:	781b      	ldrb	r3, [r3, #0]
 8019ffe:	b25b      	sxtb	r3, r3
 801a000:	2b00      	cmp	r3, #0
 801a002:	da67      	bge.n	801a0d4 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801a004:	1dfb      	adds	r3, r7, #7
 801a006:	781b      	ldrb	r3, [r3, #0]
 801a008:	b25b      	sxtb	r3, r3
 801a00a:	2b11      	cmp	r3, #17
 801a00c:	dd07      	ble.n	801a01e <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801a00e:	220e      	movs	r2, #14
 801a010:	18bb      	adds	r3, r7, r2
 801a012:	18ba      	adds	r2, r7, r2
 801a014:	7812      	ldrb	r2, [r2, #0]
 801a016:	2107      	movs	r1, #7
 801a018:	430a      	orrs	r2, r1
 801a01a:	701a      	strb	r2, [r3, #0]
 801a01c:	e00b      	b.n	801a036 <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801a01e:	210e      	movs	r1, #14
 801a020:	187b      	adds	r3, r7, r1
 801a022:	781b      	ldrb	r3, [r3, #0]
 801a024:	b25b      	sxtb	r3, r3
 801a026:	2207      	movs	r2, #7
 801a028:	4393      	bics	r3, r2
 801a02a:	b25b      	sxtb	r3, r3
 801a02c:	2204      	movs	r2, #4
 801a02e:	4313      	orrs	r3, r2
 801a030:	b25a      	sxtb	r2, r3
 801a032:	187b      	adds	r3, r7, r1
 801a034:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801a036:	230e      	movs	r3, #14
 801a038:	18fb      	adds	r3, r7, r3
 801a03a:	781b      	ldrb	r3, [r3, #0]
 801a03c:	2207      	movs	r2, #7
 801a03e:	4013      	ands	r3, r2
 801a040:	2b07      	cmp	r3, #7
 801a042:	d123      	bne.n	801a08c <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801a044:	1dfb      	adds	r3, r7, #7
 801a046:	781b      	ldrb	r3, [r3, #0]
 801a048:	b25b      	sxtb	r3, r3
 801a04a:	2b04      	cmp	r3, #4
 801a04c:	dc02      	bgt.n	801a054 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801a04e:	1dfb      	adds	r3, r7, #7
 801a050:	2205      	movs	r2, #5
 801a052:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801a054:	1dfb      	adds	r3, r7, #7
 801a056:	781b      	ldrb	r3, [r3, #0]
 801a058:	b25b      	sxtb	r3, r3
 801a05a:	2b14      	cmp	r3, #20
 801a05c:	dd02      	ble.n	801a064 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801a05e:	1dfb      	adds	r3, r7, #7
 801a060:	2214      	movs	r2, #20
 801a062:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801a064:	200f      	movs	r0, #15
 801a066:	183b      	adds	r3, r7, r0
 801a068:	781b      	ldrb	r3, [r3, #0]
 801a06a:	b25b      	sxtb	r3, r3
 801a06c:	220f      	movs	r2, #15
 801a06e:	4393      	bics	r3, r2
 801a070:	b25a      	sxtb	r2, r3
 801a072:	1dfb      	adds	r3, r7, #7
 801a074:	781b      	ldrb	r3, [r3, #0]
 801a076:	3b05      	subs	r3, #5
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	b25b      	sxtb	r3, r3
 801a07c:	210f      	movs	r1, #15
 801a07e:	400b      	ands	r3, r1
 801a080:	b25b      	sxtb	r3, r3
 801a082:	4313      	orrs	r3, r2
 801a084:	b25a      	sxtb	r2, r3
 801a086:	183b      	adds	r3, r7, r0
 801a088:	701a      	strb	r2, [r3, #0]
 801a08a:	e059      	b.n	801a140 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801a08c:	1dfb      	adds	r3, r7, #7
 801a08e:	781b      	ldrb	r3, [r3, #0]
 801a090:	b25b      	sxtb	r3, r3
 801a092:	2b01      	cmp	r3, #1
 801a094:	dc02      	bgt.n	801a09c <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801a096:	1dfb      	adds	r3, r7, #7
 801a098:	2202      	movs	r2, #2
 801a09a:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801a09c:	1dfb      	adds	r3, r7, #7
 801a09e:	781b      	ldrb	r3, [r3, #0]
 801a0a0:	b25b      	sxtb	r3, r3
 801a0a2:	2b11      	cmp	r3, #17
 801a0a4:	dd02      	ble.n	801a0ac <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801a0a6:	1dfb      	adds	r3, r7, #7
 801a0a8:	2211      	movs	r2, #17
 801a0aa:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801a0ac:	200f      	movs	r0, #15
 801a0ae:	183b      	adds	r3, r7, r0
 801a0b0:	781b      	ldrb	r3, [r3, #0]
 801a0b2:	b25b      	sxtb	r3, r3
 801a0b4:	220f      	movs	r2, #15
 801a0b6:	4393      	bics	r3, r2
 801a0b8:	b25a      	sxtb	r2, r3
 801a0ba:	1dfb      	adds	r3, r7, #7
 801a0bc:	781b      	ldrb	r3, [r3, #0]
 801a0be:	3b02      	subs	r3, #2
 801a0c0:	b2db      	uxtb	r3, r3
 801a0c2:	b25b      	sxtb	r3, r3
 801a0c4:	210f      	movs	r1, #15
 801a0c6:	400b      	ands	r3, r1
 801a0c8:	b25b      	sxtb	r3, r3
 801a0ca:	4313      	orrs	r3, r2
 801a0cc:	b25a      	sxtb	r2, r3
 801a0ce:	183b      	adds	r3, r7, r0
 801a0d0:	701a      	strb	r2, [r3, #0]
 801a0d2:	e035      	b.n	801a140 <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801a0d4:	1dfb      	adds	r3, r7, #7
 801a0d6:	781b      	ldrb	r3, [r3, #0]
 801a0d8:	b25b      	sxtb	r3, r3
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	dd18      	ble.n	801a110 <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801a0de:	1dfb      	adds	r3, r7, #7
 801a0e0:	781b      	ldrb	r3, [r3, #0]
 801a0e2:	b25b      	sxtb	r3, r3
 801a0e4:	2b0f      	cmp	r3, #15
 801a0e6:	dd02      	ble.n	801a0ee <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801a0e8:	1dfb      	adds	r3, r7, #7
 801a0ea:	220f      	movs	r2, #15
 801a0ec:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801a0ee:	210f      	movs	r1, #15
 801a0f0:	187b      	adds	r3, r7, r1
 801a0f2:	781b      	ldrb	r3, [r3, #0]
 801a0f4:	b25b      	sxtb	r3, r3
 801a0f6:	227f      	movs	r2, #127	; 0x7f
 801a0f8:	4393      	bics	r3, r2
 801a0fa:	b25b      	sxtb	r3, r3
 801a0fc:	2270      	movs	r2, #112	; 0x70
 801a0fe:	4313      	orrs	r3, r2
 801a100:	b25a      	sxtb	r2, r3
 801a102:	1dfb      	adds	r3, r7, #7
 801a104:	781b      	ldrb	r3, [r3, #0]
 801a106:	4313      	orrs	r3, r2
 801a108:	b25a      	sxtb	r2, r3
 801a10a:	187b      	adds	r3, r7, r1
 801a10c:	701a      	strb	r2, [r3, #0]
 801a10e:	e017      	b.n	801a140 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801a110:	1dfb      	adds	r3, r7, #7
 801a112:	781b      	ldrb	r3, [r3, #0]
 801a114:	b25b      	sxtb	r3, r3
 801a116:	3304      	adds	r3, #4
 801a118:	da02      	bge.n	801a120 <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801a11a:	1dfb      	adds	r3, r7, #7
 801a11c:	22fc      	movs	r2, #252	; 0xfc
 801a11e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801a120:	210f      	movs	r1, #15
 801a122:	187b      	adds	r3, r7, r1
 801a124:	781b      	ldrb	r3, [r3, #0]
 801a126:	b25b      	sxtb	r3, r3
 801a128:	227f      	movs	r2, #127	; 0x7f
 801a12a:	4393      	bics	r3, r2
 801a12c:	b25a      	sxtb	r2, r3
 801a12e:	1dfb      	adds	r3, r7, #7
 801a130:	781b      	ldrb	r3, [r3, #0]
 801a132:	3304      	adds	r3, #4
 801a134:	b2db      	uxtb	r3, r3
 801a136:	b25b      	sxtb	r3, r3
 801a138:	4313      	orrs	r3, r2
 801a13a:	b25a      	sxtb	r2, r3
 801a13c:	187b      	adds	r3, r7, r1
 801a13e:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801a140:	230f      	movs	r3, #15
 801a142:	18fb      	adds	r3, r7, r3
 801a144:	781b      	ldrb	r3, [r3, #0]
 801a146:	0019      	movs	r1, r3
 801a148:	2009      	movs	r0, #9
 801a14a:	f000 fc05 	bl	801a958 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801a14e:	230e      	movs	r3, #14
 801a150:	18fb      	adds	r3, r7, r3
 801a152:	781b      	ldrb	r3, [r3, #0]
 801a154:	0019      	movs	r1, r3
 801a156:	204d      	movs	r0, #77	; 0x4d
 801a158:	f000 fbfe 	bl	801a958 <SX1276Write>
}
 801a15c:	46c0      	nop			; (mov r8, r8)
 801a15e:	46bd      	mov	sp, r7
 801a160:	b005      	add	sp, #20
 801a162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a164:	2000176c 	.word	0x2000176c

0801a168 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801a16c:	4b0b      	ldr	r3, [pc, #44]	; (801a19c <SX1276SetSleep+0x34>)
 801a16e:	0018      	movs	r0, r3
 801a170:	f002 fa66 	bl	801c640 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a174:	4b0a      	ldr	r3, [pc, #40]	; (801a1a0 <SX1276SetSleep+0x38>)
 801a176:	0018      	movs	r0, r3
 801a178:	f002 fa62 	bl	801c640 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a17c:	4b09      	ldr	r3, [pc, #36]	; (801a1a4 <SX1276SetSleep+0x3c>)
 801a17e:	0018      	movs	r0, r3
 801a180:	f002 fa5e 	bl	801c640 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a184:	2000      	movs	r0, #0
 801a186:	f000 fb20 	bl	801a7ca <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801a18a:	2000      	movs	r0, #0
 801a18c:	f7eb fb0c 	bl	80057a8 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801a190:	4b05      	ldr	r3, [pc, #20]	; (801a1a8 <SX1276SetSleep+0x40>)
 801a192:	2200      	movs	r2, #0
 801a194:	711a      	strb	r2, [r3, #4]
}
 801a196:	46c0      	nop			; (mov r8, r8)
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}
 801a19c:	200017d4 	.word	0x200017d4
 801a1a0:	2000173c 	.word	0x2000173c
 801a1a4:	20001754 	.word	0x20001754
 801a1a8:	2000176c 	.word	0x2000176c

0801a1ac <SX1276SetStby>:

void SX1276SetStby( void )
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801a1b0:	4b0a      	ldr	r3, [pc, #40]	; (801a1dc <SX1276SetStby+0x30>)
 801a1b2:	0018      	movs	r0, r3
 801a1b4:	f002 fa44 	bl	801c640 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a1b8:	4b09      	ldr	r3, [pc, #36]	; (801a1e0 <SX1276SetStby+0x34>)
 801a1ba:	0018      	movs	r0, r3
 801a1bc:	f002 fa40 	bl	801c640 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a1c0:	4b08      	ldr	r3, [pc, #32]	; (801a1e4 <SX1276SetStby+0x38>)
 801a1c2:	0018      	movs	r0, r3
 801a1c4:	f002 fa3c 	bl	801c640 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801a1c8:	2001      	movs	r0, #1
 801a1ca:	f000 fafe 	bl	801a7ca <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801a1ce:	4b06      	ldr	r3, [pc, #24]	; (801a1e8 <SX1276SetStby+0x3c>)
 801a1d0:	2200      	movs	r2, #0
 801a1d2:	711a      	strb	r2, [r3, #4]
}
 801a1d4:	46c0      	nop			; (mov r8, r8)
 801a1d6:	46bd      	mov	sp, r7
 801a1d8:	bd80      	pop	{r7, pc}
 801a1da:	46c0      	nop			; (mov r8, r8)
 801a1dc:	200017d4 	.word	0x200017d4
 801a1e0:	2000173c 	.word	0x2000173c
 801a1e4:	20001754 	.word	0x20001754
 801a1e8:	2000176c 	.word	0x2000176c

0801a1ec <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b084      	sub	sp, #16
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801a1f4:	230f      	movs	r3, #15
 801a1f6:	18fb      	adds	r3, r7, r3
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801a1fc:	4bba      	ldr	r3, [pc, #744]	; (801a4e8 <SX1276SetRx+0x2fc>)
 801a1fe:	0018      	movs	r0, r3
 801a200:	f002 fa1e 	bl	801c640 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801a204:	4bb9      	ldr	r3, [pc, #740]	; (801a4ec <SX1276SetRx+0x300>)
 801a206:	795b      	ldrb	r3, [r3, #5]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d002      	beq.n	801a212 <SX1276SetRx+0x26>
 801a20c:	2b01      	cmp	r3, #1
 801a20e:	d041      	beq.n	801a294 <SX1276SetRx+0xa8>
 801a210:	e127      	b.n	801a462 <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801a212:	230f      	movs	r3, #15
 801a214:	18fb      	adds	r3, r7, r3
 801a216:	4ab5      	ldr	r2, [pc, #724]	; (801a4ec <SX1276SetRx+0x300>)
 801a218:	2126      	movs	r1, #38	; 0x26
 801a21a:	5c52      	ldrb	r2, [r2, r1]
 801a21c:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a21e:	2040      	movs	r0, #64	; 0x40
 801a220:	f000 fbab 	bl	801a97a <SX1276Read>
 801a224:	0003      	movs	r3, r0
 801a226:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801a228:	2203      	movs	r2, #3
 801a22a:	4013      	ands	r3, r2
 801a22c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801a22e:	220c      	movs	r2, #12
 801a230:	4313      	orrs	r3, r2
 801a232:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a234:	b2db      	uxtb	r3, r3
 801a236:	0019      	movs	r1, r3
 801a238:	2040      	movs	r0, #64	; 0x40
 801a23a:	f000 fb8d 	bl	801a958 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a23e:	2041      	movs	r0, #65	; 0x41
 801a240:	f000 fb9b 	bl	801a97a <SX1276Read>
 801a244:	0003      	movs	r3, r0
 801a246:	001a      	movs	r2, r3
 801a248:	233f      	movs	r3, #63	; 0x3f
 801a24a:	425b      	negs	r3, r3
 801a24c:	4313      	orrs	r3, r2
 801a24e:	b2db      	uxtb	r3, r3
 801a250:	0019      	movs	r1, r3
 801a252:	2041      	movs	r0, #65	; 0x41
 801a254:	f000 fb80 	bl	801a958 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a258:	2035      	movs	r0, #53	; 0x35
 801a25a:	f000 fb8e 	bl	801a97a <SX1276Read>
 801a25e:	0003      	movs	r3, r0
 801a260:	001a      	movs	r2, r3
 801a262:	233f      	movs	r3, #63	; 0x3f
 801a264:	4013      	ands	r3, r2
 801a266:	b2d9      	uxtb	r1, r3
 801a268:	4ba0      	ldr	r3, [pc, #640]	; (801a4ec <SX1276SetRx+0x300>)
 801a26a:	223e      	movs	r2, #62	; 0x3e
 801a26c:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801a26e:	211e      	movs	r1, #30
 801a270:	200d      	movs	r0, #13
 801a272:	f000 fb71 	bl	801a958 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a276:	4b9d      	ldr	r3, [pc, #628]	; (801a4ec <SX1276SetRx+0x300>)
 801a278:	2230      	movs	r2, #48	; 0x30
 801a27a:	2100      	movs	r1, #0
 801a27c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a27e:	4b9b      	ldr	r3, [pc, #620]	; (801a4ec <SX1276SetRx+0x300>)
 801a280:	2231      	movs	r2, #49	; 0x31
 801a282:	2100      	movs	r1, #0
 801a284:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a286:	4b99      	ldr	r3, [pc, #612]	; (801a4ec <SX1276SetRx+0x300>)
 801a288:	2200      	movs	r2, #0
 801a28a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a28c:	4b97      	ldr	r3, [pc, #604]	; (801a4ec <SX1276SetRx+0x300>)
 801a28e:	2200      	movs	r2, #0
 801a290:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801a292:	e0e6      	b.n	801a462 <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a294:	4b95      	ldr	r3, [pc, #596]	; (801a4ec <SX1276SetRx+0x300>)
 801a296:	2255      	movs	r2, #85	; 0x55
 801a298:	5c9b      	ldrb	r3, [r3, r2]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d010      	beq.n	801a2c0 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801a29e:	2033      	movs	r0, #51	; 0x33
 801a2a0:	f000 fb6b 	bl	801a97a <SX1276Read>
 801a2a4:	0003      	movs	r3, r0
 801a2a6:	001a      	movs	r2, r3
 801a2a8:	2341      	movs	r3, #65	; 0x41
 801a2aa:	4313      	orrs	r3, r2
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	0019      	movs	r1, r3
 801a2b0:	2033      	movs	r0, #51	; 0x33
 801a2b2:	f000 fb51 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a2b6:	2119      	movs	r1, #25
 801a2b8:	203b      	movs	r0, #59	; 0x3b
 801a2ba:	f000 fb4d 	bl	801a958 <SX1276Write>
 801a2be:	e013      	b.n	801a2e8 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a2c0:	2033      	movs	r0, #51	; 0x33
 801a2c2:	f000 fb5a 	bl	801a97a <SX1276Read>
 801a2c6:	0003      	movs	r3, r0
 801a2c8:	b25b      	sxtb	r3, r3
 801a2ca:	2241      	movs	r2, #65	; 0x41
 801a2cc:	4393      	bics	r3, r2
 801a2ce:	b25b      	sxtb	r3, r3
 801a2d0:	2201      	movs	r2, #1
 801a2d2:	4313      	orrs	r3, r2
 801a2d4:	b25b      	sxtb	r3, r3
 801a2d6:	b2db      	uxtb	r3, r3
 801a2d8:	0019      	movs	r1, r3
 801a2da:	2033      	movs	r0, #51	; 0x33
 801a2dc:	f000 fb3c 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a2e0:	211d      	movs	r1, #29
 801a2e2:	203b      	movs	r0, #59	; 0x3b
 801a2e4:	f000 fb38 	bl	801a958 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801a2e8:	4b80      	ldr	r3, [pc, #512]	; (801a4ec <SX1276SetRx+0x300>)
 801a2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a2ec:	2b08      	cmp	r3, #8
 801a2ee:	d900      	bls.n	801a2f2 <SX1276SetRx+0x106>
 801a2f0:	e075      	b.n	801a3de <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801a2f2:	2031      	movs	r0, #49	; 0x31
 801a2f4:	f000 fb41 	bl	801a97a <SX1276Read>
 801a2f8:	0003      	movs	r3, r0
 801a2fa:	001a      	movs	r2, r3
 801a2fc:	237f      	movs	r3, #127	; 0x7f
 801a2fe:	4013      	ands	r3, r2
 801a300:	b2db      	uxtb	r3, r3
 801a302:	0019      	movs	r1, r3
 801a304:	2031      	movs	r0, #49	; 0x31
 801a306:	f000 fb27 	bl	801a958 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801a30a:	2100      	movs	r1, #0
 801a30c:	2030      	movs	r0, #48	; 0x30
 801a30e:	f000 fb23 	bl	801a958 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801a312:	4b76      	ldr	r3, [pc, #472]	; (801a4ec <SX1276SetRx+0x300>)
 801a314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a316:	2b08      	cmp	r3, #8
 801a318:	d86e      	bhi.n	801a3f8 <SX1276SetRx+0x20c>
 801a31a:	009a      	lsls	r2, r3, #2
 801a31c:	4b74      	ldr	r3, [pc, #464]	; (801a4f0 <SX1276SetRx+0x304>)
 801a31e:	18d3      	adds	r3, r2, r3
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801a324:	2148      	movs	r1, #72	; 0x48
 801a326:	202f      	movs	r0, #47	; 0x2f
 801a328:	f000 fb16 	bl	801a958 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801a32c:	4b6f      	ldr	r3, [pc, #444]	; (801a4ec <SX1276SetRx+0x300>)
 801a32e:	689b      	ldr	r3, [r3, #8]
 801a330:	4a70      	ldr	r2, [pc, #448]	; (801a4f4 <SX1276SetRx+0x308>)
 801a332:	4694      	mov	ip, r2
 801a334:	4463      	add	r3, ip
 801a336:	0018      	movs	r0, r3
 801a338:	f7fe feb2 	bl	80190a0 <SX1276SetChannel>
                    break;
 801a33c:	e05c      	b.n	801a3f8 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a33e:	2144      	movs	r1, #68	; 0x44
 801a340:	202f      	movs	r0, #47	; 0x2f
 801a342:	f000 fb09 	bl	801a958 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801a346:	4b69      	ldr	r3, [pc, #420]	; (801a4ec <SX1276SetRx+0x300>)
 801a348:	689b      	ldr	r3, [r3, #8]
 801a34a:	4a6b      	ldr	r2, [pc, #428]	; (801a4f8 <SX1276SetRx+0x30c>)
 801a34c:	4694      	mov	ip, r2
 801a34e:	4463      	add	r3, ip
 801a350:	0018      	movs	r0, r3
 801a352:	f7fe fea5 	bl	80190a0 <SX1276SetChannel>
                    break;
 801a356:	e04f      	b.n	801a3f8 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a358:	2144      	movs	r1, #68	; 0x44
 801a35a:	202f      	movs	r0, #47	; 0x2f
 801a35c:	f000 fafc 	bl	801a958 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801a360:	4b62      	ldr	r3, [pc, #392]	; (801a4ec <SX1276SetRx+0x300>)
 801a362:	689b      	ldr	r3, [r3, #8]
 801a364:	4a65      	ldr	r2, [pc, #404]	; (801a4fc <SX1276SetRx+0x310>)
 801a366:	4694      	mov	ip, r2
 801a368:	4463      	add	r3, ip
 801a36a:	0018      	movs	r0, r3
 801a36c:	f7fe fe98 	bl	80190a0 <SX1276SetChannel>
                    break;
 801a370:	e042      	b.n	801a3f8 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a372:	2144      	movs	r1, #68	; 0x44
 801a374:	202f      	movs	r0, #47	; 0x2f
 801a376:	f000 faef 	bl	801a958 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801a37a:	4b5c      	ldr	r3, [pc, #368]	; (801a4ec <SX1276SetRx+0x300>)
 801a37c:	689b      	ldr	r3, [r3, #8]
 801a37e:	4a60      	ldr	r2, [pc, #384]	; (801a500 <SX1276SetRx+0x314>)
 801a380:	4694      	mov	ip, r2
 801a382:	4463      	add	r3, ip
 801a384:	0018      	movs	r0, r3
 801a386:	f7fe fe8b 	bl	80190a0 <SX1276SetChannel>
                    break;
 801a38a:	e035      	b.n	801a3f8 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a38c:	2144      	movs	r1, #68	; 0x44
 801a38e:	202f      	movs	r0, #47	; 0x2f
 801a390:	f000 fae2 	bl	801a958 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801a394:	4b55      	ldr	r3, [pc, #340]	; (801a4ec <SX1276SetRx+0x300>)
 801a396:	689b      	ldr	r3, [r3, #8]
 801a398:	4a5a      	ldr	r2, [pc, #360]	; (801a504 <SX1276SetRx+0x318>)
 801a39a:	4694      	mov	ip, r2
 801a39c:	4463      	add	r3, ip
 801a39e:	0018      	movs	r0, r3
 801a3a0:	f7fe fe7e 	bl	80190a0 <SX1276SetChannel>
                    break;
 801a3a4:	e028      	b.n	801a3f8 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a3a6:	2144      	movs	r1, #68	; 0x44
 801a3a8:	202f      	movs	r0, #47	; 0x2f
 801a3aa:	f000 fad5 	bl	801a958 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801a3ae:	4b4f      	ldr	r3, [pc, #316]	; (801a4ec <SX1276SetRx+0x300>)
 801a3b0:	689b      	ldr	r3, [r3, #8]
 801a3b2:	4a55      	ldr	r2, [pc, #340]	; (801a508 <SX1276SetRx+0x31c>)
 801a3b4:	4694      	mov	ip, r2
 801a3b6:	4463      	add	r3, ip
 801a3b8:	0018      	movs	r0, r3
 801a3ba:	f7fe fe71 	bl	80190a0 <SX1276SetChannel>
                    break;
 801a3be:	e01b      	b.n	801a3f8 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a3c0:	2140      	movs	r1, #64	; 0x40
 801a3c2:	202f      	movs	r0, #47	; 0x2f
 801a3c4:	f000 fac8 	bl	801a958 <SX1276Write>
                    break;
 801a3c8:	e016      	b.n	801a3f8 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a3ca:	2140      	movs	r1, #64	; 0x40
 801a3cc:	202f      	movs	r0, #47	; 0x2f
 801a3ce:	f000 fac3 	bl	801a958 <SX1276Write>
                    break;
 801a3d2:	e011      	b.n	801a3f8 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a3d4:	2140      	movs	r1, #64	; 0x40
 801a3d6:	202f      	movs	r0, #47	; 0x2f
 801a3d8:	f000 fabe 	bl	801a958 <SX1276Write>
                    break;
 801a3dc:	e00c      	b.n	801a3f8 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801a3de:	2031      	movs	r0, #49	; 0x31
 801a3e0:	f000 facb 	bl	801a97a <SX1276Read>
 801a3e4:	0003      	movs	r3, r0
 801a3e6:	001a      	movs	r2, r3
 801a3e8:	2380      	movs	r3, #128	; 0x80
 801a3ea:	425b      	negs	r3, r3
 801a3ec:	4313      	orrs	r3, r2
 801a3ee:	b2db      	uxtb	r3, r3
 801a3f0:	0019      	movs	r1, r3
 801a3f2:	2031      	movs	r0, #49	; 0x31
 801a3f4:	f000 fab0 	bl	801a958 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801a3f8:	230f      	movs	r3, #15
 801a3fa:	18fb      	adds	r3, r7, r3
 801a3fc:	4a3b      	ldr	r2, [pc, #236]	; (801a4ec <SX1276SetRx+0x300>)
 801a3fe:	2156      	movs	r1, #86	; 0x56
 801a400:	5c52      	ldrb	r2, [r2, r1]
 801a402:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a404:	4b39      	ldr	r3, [pc, #228]	; (801a4ec <SX1276SetRx+0x300>)
 801a406:	2253      	movs	r2, #83	; 0x53
 801a408:	5c9b      	ldrb	r3, [r3, r2]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d010      	beq.n	801a430 <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801a40e:	211d      	movs	r1, #29
 801a410:	2011      	movs	r0, #17
 801a412:	f000 faa1 	bl	801a958 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801a416:	2040      	movs	r0, #64	; 0x40
 801a418:	f000 faaf 	bl	801a97a <SX1276Read>
 801a41c:	0003      	movs	r3, r0
 801a41e:	001a      	movs	r2, r3
 801a420:	2333      	movs	r3, #51	; 0x33
 801a422:	4013      	ands	r3, r2
 801a424:	b2db      	uxtb	r3, r3
 801a426:	0019      	movs	r1, r3
 801a428:	2040      	movs	r0, #64	; 0x40
 801a42a:	f000 fa95 	bl	801a958 <SX1276Write>
 801a42e:	e00f      	b.n	801a450 <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801a430:	211f      	movs	r1, #31
 801a432:	2011      	movs	r0, #17
 801a434:	f000 fa90 	bl	801a958 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801a438:	2040      	movs	r0, #64	; 0x40
 801a43a:	f000 fa9e 	bl	801a97a <SX1276Read>
 801a43e:	0003      	movs	r3, r0
 801a440:	001a      	movs	r2, r3
 801a442:	233f      	movs	r3, #63	; 0x3f
 801a444:	4013      	ands	r3, r2
 801a446:	b2db      	uxtb	r3, r3
 801a448:	0019      	movs	r1, r3
 801a44a:	2040      	movs	r0, #64	; 0x40
 801a44c:	f000 fa84 	bl	801a958 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801a450:	2100      	movs	r1, #0
 801a452:	200f      	movs	r0, #15
 801a454:	f000 fa80 	bl	801a958 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a458:	2100      	movs	r1, #0
 801a45a:	200d      	movs	r0, #13
 801a45c:	f000 fa7c 	bl	801a958 <SX1276Write>
        }
        break;
 801a460:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801a462:	2380      	movs	r3, #128	; 0x80
 801a464:	005a      	lsls	r2, r3, #1
 801a466:	4b29      	ldr	r3, [pc, #164]	; (801a50c <SX1276SetRx+0x320>)
 801a468:	2100      	movs	r1, #0
 801a46a:	0018      	movs	r0, r3
 801a46c:	f003 fa8d 	bl	801d98a <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801a470:	4b1e      	ldr	r3, [pc, #120]	; (801a4ec <SX1276SetRx+0x300>)
 801a472:	2201      	movs	r2, #1
 801a474:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d009      	beq.n	801a490 <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a47c:	687a      	ldr	r2, [r7, #4]
 801a47e:	4b24      	ldr	r3, [pc, #144]	; (801a510 <SX1276SetRx+0x324>)
 801a480:	0011      	movs	r1, r2
 801a482:	0018      	movs	r0, r3
 801a484:	f002 f954 	bl	801c730 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a488:	4b21      	ldr	r3, [pc, #132]	; (801a510 <SX1276SetRx+0x324>)
 801a48a:	0018      	movs	r0, r3
 801a48c:	f002 f860 	bl	801c550 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801a490:	4b16      	ldr	r3, [pc, #88]	; (801a4ec <SX1276SetRx+0x300>)
 801a492:	795b      	ldrb	r3, [r3, #5]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d116      	bne.n	801a4c6 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801a498:	2005      	movs	r0, #5
 801a49a:	f000 f996 	bl	801a7ca <SX1276SetOpMode>

        if( rxContinuous == false )
 801a49e:	230f      	movs	r3, #15
 801a4a0:	18fb      	adds	r3, r7, r3
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	2201      	movs	r2, #1
 801a4a6:	4053      	eors	r3, r2
 801a4a8:	b2db      	uxtb	r3, r3
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d017      	beq.n	801a4de <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801a4ae:	4b0f      	ldr	r3, [pc, #60]	; (801a4ec <SX1276SetRx+0x300>)
 801a4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a4b2:	4b18      	ldr	r3, [pc, #96]	; (801a514 <SX1276SetRx+0x328>)
 801a4b4:	0011      	movs	r1, r2
 801a4b6:	0018      	movs	r0, r3
 801a4b8:	f002 f93a 	bl	801c730 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801a4bc:	4b15      	ldr	r3, [pc, #84]	; (801a514 <SX1276SetRx+0x328>)
 801a4be:	0018      	movs	r0, r3
 801a4c0:	f002 f846 	bl	801c550 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801a4c4:	e00b      	b.n	801a4de <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801a4c6:	230f      	movs	r3, #15
 801a4c8:	18fb      	adds	r3, r7, r3
 801a4ca:	781b      	ldrb	r3, [r3, #0]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d003      	beq.n	801a4d8 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801a4d0:	2005      	movs	r0, #5
 801a4d2:	f000 f97a 	bl	801a7ca <SX1276SetOpMode>
}
 801a4d6:	e002      	b.n	801a4de <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801a4d8:	2006      	movs	r0, #6
 801a4da:	f000 f976 	bl	801a7ca <SX1276SetOpMode>
}
 801a4de:	46c0      	nop			; (mov r8, r8)
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	b004      	add	sp, #16
 801a4e4:	bd80      	pop	{r7, pc}
 801a4e6:	46c0      	nop			; (mov r8, r8)
 801a4e8:	2000173c 	.word	0x2000173c
 801a4ec:	2000176c 	.word	0x2000176c
 801a4f0:	0801f4a4 	.word	0x0801f4a4
 801a4f4:	00001e82 	.word	0x00001e82
 801a4f8:	000028b4 	.word	0x000028b4
 801a4fc:	00003d04 	.word	0x00003d04
 801a500:	0000515e 	.word	0x0000515e
 801a504:	00007a12 	.word	0x00007a12
 801a508:	0000a2c6 	.word	0x0000a2c6
 801a50c:	20000e80 	.word	0x20000e80
 801a510:	200017d4 	.word	0x200017d4
 801a514:	20001754 	.word	0x20001754

0801a518 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b082      	sub	sp, #8
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801a520:	4b38      	ldr	r3, [pc, #224]	; (801a604 <SX1276SetTx+0xec>)
 801a522:	0018      	movs	r0, r3
 801a524:	f002 f88c 	bl	801c640 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a528:	687a      	ldr	r2, [r7, #4]
 801a52a:	4b37      	ldr	r3, [pc, #220]	; (801a608 <SX1276SetTx+0xf0>)
 801a52c:	0011      	movs	r1, r2
 801a52e:	0018      	movs	r0, r3
 801a530:	f002 f8fe 	bl	801c730 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801a534:	4b35      	ldr	r3, [pc, #212]	; (801a60c <SX1276SetTx+0xf4>)
 801a536:	795b      	ldrb	r3, [r3, #5]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d002      	beq.n	801a542 <SX1276SetTx+0x2a>
 801a53c:	2b01      	cmp	r3, #1
 801a53e:	d024      	beq.n	801a58a <SX1276SetTx+0x72>
 801a540:	e052      	b.n	801a5e8 <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a542:	2040      	movs	r0, #64	; 0x40
 801a544:	f000 fa19 	bl	801a97a <SX1276Read>
 801a548:	0003      	movs	r3, r0
 801a54a:	001a      	movs	r2, r3
 801a54c:	2303      	movs	r3, #3
 801a54e:	4013      	ands	r3, r2
 801a550:	b2db      	uxtb	r3, r3
 801a552:	0019      	movs	r1, r3
 801a554:	2040      	movs	r0, #64	; 0x40
 801a556:	f000 f9ff 	bl	801a958 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a55a:	2041      	movs	r0, #65	; 0x41
 801a55c:	f000 fa0d 	bl	801a97a <SX1276Read>
 801a560:	0003      	movs	r3, r0
 801a562:	001a      	movs	r2, r3
 801a564:	233e      	movs	r3, #62	; 0x3e
 801a566:	4013      	ands	r3, r2
 801a568:	b2db      	uxtb	r3, r3
 801a56a:	0019      	movs	r1, r3
 801a56c:	2041      	movs	r0, #65	; 0x41
 801a56e:	f000 f9f3 	bl	801a958 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a572:	2035      	movs	r0, #53	; 0x35
 801a574:	f000 fa01 	bl	801a97a <SX1276Read>
 801a578:	0003      	movs	r3, r0
 801a57a:	001a      	movs	r2, r3
 801a57c:	233f      	movs	r3, #63	; 0x3f
 801a57e:	4013      	ands	r3, r2
 801a580:	b2d9      	uxtb	r1, r3
 801a582:	4b22      	ldr	r3, [pc, #136]	; (801a60c <SX1276SetTx+0xf4>)
 801a584:	223e      	movs	r2, #62	; 0x3e
 801a586:	5499      	strb	r1, [r3, r2]
        }
        break;
 801a588:	e02e      	b.n	801a5e8 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a58a:	4b20      	ldr	r3, [pc, #128]	; (801a60c <SX1276SetTx+0xf4>)
 801a58c:	2253      	movs	r2, #83	; 0x53
 801a58e:	5c9b      	ldrb	r3, [r3, r2]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d014      	beq.n	801a5be <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a594:	21f5      	movs	r1, #245	; 0xf5
 801a596:	2011      	movs	r0, #17
 801a598:	f000 f9de 	bl	801a958 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801a59c:	2040      	movs	r0, #64	; 0x40
 801a59e:	f000 f9ec 	bl	801a97a <SX1276Read>
 801a5a2:	0003      	movs	r3, r0
 801a5a4:	b25b      	sxtb	r3, r3
 801a5a6:	2233      	movs	r2, #51	; 0x33
 801a5a8:	4013      	ands	r3, r2
 801a5aa:	b25b      	sxtb	r3, r3
 801a5ac:	2240      	movs	r2, #64	; 0x40
 801a5ae:	4313      	orrs	r3, r2
 801a5b0:	b25b      	sxtb	r3, r3
 801a5b2:	b2db      	uxtb	r3, r3
 801a5b4:	0019      	movs	r1, r3
 801a5b6:	2040      	movs	r0, #64	; 0x40
 801a5b8:	f000 f9ce 	bl	801a958 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801a5bc:	e013      	b.n	801a5e6 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a5be:	21f7      	movs	r1, #247	; 0xf7
 801a5c0:	2011      	movs	r0, #17
 801a5c2:	f000 f9c9 	bl	801a958 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801a5c6:	2040      	movs	r0, #64	; 0x40
 801a5c8:	f000 f9d7 	bl	801a97a <SX1276Read>
 801a5cc:	0003      	movs	r3, r0
 801a5ce:	b25b      	sxtb	r3, r3
 801a5d0:	223f      	movs	r2, #63	; 0x3f
 801a5d2:	4013      	ands	r3, r2
 801a5d4:	b25b      	sxtb	r3, r3
 801a5d6:	2240      	movs	r2, #64	; 0x40
 801a5d8:	4313      	orrs	r3, r2
 801a5da:	b25b      	sxtb	r3, r3
 801a5dc:	b2db      	uxtb	r3, r3
 801a5de:	0019      	movs	r1, r3
 801a5e0:	2040      	movs	r0, #64	; 0x40
 801a5e2:	f000 f9b9 	bl	801a958 <SX1276Write>
        break;
 801a5e6:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801a5e8:	4b08      	ldr	r3, [pc, #32]	; (801a60c <SX1276SetTx+0xf4>)
 801a5ea:	2202      	movs	r2, #2
 801a5ec:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801a5ee:	4b06      	ldr	r3, [pc, #24]	; (801a608 <SX1276SetTx+0xf0>)
 801a5f0:	0018      	movs	r0, r3
 801a5f2:	f001 ffad 	bl	801c550 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801a5f6:	2003      	movs	r0, #3
 801a5f8:	f000 f8e7 	bl	801a7ca <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801a5fc:	46c0      	nop			; (mov r8, r8)
 801a5fe:	46bd      	mov	sp, r7
 801a600:	b002      	add	sp, #8
 801a602:	bd80      	pop	{r7, pc}
 801a604:	200017d4 	.word	0x200017d4
 801a608:	2000173c 	.word	0x2000173c
 801a60c:	2000176c 	.word	0x2000176c

0801a610 <SX1276StartCad>:

void SX1276StartCad( void )
{
 801a610:	b580      	push	{r7, lr}
 801a612:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801a614:	4b11      	ldr	r3, [pc, #68]	; (801a65c <SX1276StartCad+0x4c>)
 801a616:	795b      	ldrb	r3, [r3, #5]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d01a      	beq.n	801a652 <SX1276StartCad+0x42>
 801a61c:	2b01      	cmp	r3, #1
 801a61e:	d000      	beq.n	801a622 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801a620:	e018      	b.n	801a654 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a622:	21fa      	movs	r1, #250	; 0xfa
 801a624:	2011      	movs	r0, #17
 801a626:	f000 f997 	bl	801a958 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801a62a:	2040      	movs	r0, #64	; 0x40
 801a62c:	f000 f9a5 	bl	801a97a <SX1276Read>
 801a630:	0003      	movs	r3, r0
 801a632:	001a      	movs	r2, r3
 801a634:	2303      	movs	r3, #3
 801a636:	439a      	bics	r2, r3
 801a638:	0013      	movs	r3, r2
 801a63a:	b2db      	uxtb	r3, r3
 801a63c:	0019      	movs	r1, r3
 801a63e:	2040      	movs	r0, #64	; 0x40
 801a640:	f000 f98a 	bl	801a958 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801a644:	4b05      	ldr	r3, [pc, #20]	; (801a65c <SX1276StartCad+0x4c>)
 801a646:	2203      	movs	r2, #3
 801a648:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801a64a:	2007      	movs	r0, #7
 801a64c:	f000 f8bd 	bl	801a7ca <SX1276SetOpMode>
        break;
 801a650:	e000      	b.n	801a654 <SX1276StartCad+0x44>
        break;
 801a652:	46c0      	nop			; (mov r8, r8)
    }
}
 801a654:	46c0      	nop			; (mov r8, r8)
 801a656:	46bd      	mov	sp, r7
 801a658:	bd80      	pop	{r7, pc}
 801a65a:	46c0      	nop			; (mov r8, r8)
 801a65c:	2000176c 	.word	0x2000176c

0801a660 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b08e      	sub	sp, #56	; 0x38
 801a664:	af0a      	add	r7, sp, #40	; 0x28
 801a666:	6078      	str	r0, [r7, #4]
 801a668:	0008      	movs	r0, r1
 801a66a:	0011      	movs	r1, r2
 801a66c:	1cfb      	adds	r3, r7, #3
 801a66e:	1c02      	adds	r2, r0, #0
 801a670:	701a      	strb	r2, [r3, #0]
 801a672:	003b      	movs	r3, r7
 801a674:	1c0a      	adds	r2, r1, #0
 801a676:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801a678:	003b      	movs	r3, r7
 801a67a:	881a      	ldrh	r2, [r3, #0]
 801a67c:	0013      	movs	r3, r2
 801a67e:	015b      	lsls	r3, r3, #5
 801a680:	1a9b      	subs	r3, r3, r2
 801a682:	009b      	lsls	r3, r3, #2
 801a684:	189b      	adds	r3, r3, r2
 801a686:	00db      	lsls	r3, r3, #3
 801a688:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	0018      	movs	r0, r3
 801a68e:	f7fe fd07 	bl	80190a0 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801a692:	1cfb      	adds	r3, r7, #3
 801a694:	2100      	movs	r1, #0
 801a696:	5659      	ldrsb	r1, [r3, r1]
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	9308      	str	r3, [sp, #32]
 801a69c:	2300      	movs	r3, #0
 801a69e:	9307      	str	r3, [sp, #28]
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	9306      	str	r3, [sp, #24]
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	9305      	str	r3, [sp, #20]
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	9304      	str	r3, [sp, #16]
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	9303      	str	r3, [sp, #12]
 801a6b0:	2305      	movs	r3, #5
 801a6b2:	9302      	str	r3, [sp, #8]
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	9301      	str	r3, [sp, #4]
 801a6b8:	2396      	movs	r3, #150	; 0x96
 801a6ba:	015b      	lsls	r3, r3, #5
 801a6bc:	9300      	str	r3, [sp, #0]
 801a6be:	2300      	movs	r3, #0
 801a6c0:	2200      	movs	r2, #0
 801a6c2:	2000      	movs	r0, #0
 801a6c4:	f7ff f8d6 	bl	8019874 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801a6c8:	2031      	movs	r0, #49	; 0x31
 801a6ca:	f000 f956 	bl	801a97a <SX1276Read>
 801a6ce:	0003      	movs	r3, r0
 801a6d0:	001a      	movs	r2, r3
 801a6d2:	2340      	movs	r3, #64	; 0x40
 801a6d4:	439a      	bics	r2, r3
 801a6d6:	0013      	movs	r3, r2
 801a6d8:	b2db      	uxtb	r3, r3
 801a6da:	0019      	movs	r1, r3
 801a6dc:	2031      	movs	r0, #49	; 0x31
 801a6de:	f000 f93b 	bl	801a958 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801a6e2:	21f0      	movs	r1, #240	; 0xf0
 801a6e4:	2040      	movs	r0, #64	; 0x40
 801a6e6:	f000 f937 	bl	801a958 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801a6ea:	21a0      	movs	r1, #160	; 0xa0
 801a6ec:	2041      	movs	r0, #65	; 0x41
 801a6ee:	f000 f933 	bl	801a958 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a6f2:	68fa      	ldr	r2, [r7, #12]
 801a6f4:	4b09      	ldr	r3, [pc, #36]	; (801a71c <SX1276SetTxContinuousWave+0xbc>)
 801a6f6:	0011      	movs	r1, r2
 801a6f8:	0018      	movs	r0, r3
 801a6fa:	f002 f819 	bl	801c730 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801a6fe:	4b08      	ldr	r3, [pc, #32]	; (801a720 <SX1276SetTxContinuousWave+0xc0>)
 801a700:	2202      	movs	r2, #2
 801a702:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801a704:	4b05      	ldr	r3, [pc, #20]	; (801a71c <SX1276SetTxContinuousWave+0xbc>)
 801a706:	0018      	movs	r0, r3
 801a708:	f001 ff22 	bl	801c550 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801a70c:	2003      	movs	r0, #3
 801a70e:	f000 f85c 	bl	801a7ca <SX1276SetOpMode>
}
 801a712:	46c0      	nop			; (mov r8, r8)
 801a714:	46bd      	mov	sp, r7
 801a716:	b004      	add	sp, #16
 801a718:	bd80      	pop	{r7, pc}
 801a71a:	46c0      	nop			; (mov r8, r8)
 801a71c:	2000173c 	.word	0x2000173c
 801a720:	2000176c 	.word	0x2000176c

0801a724 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801a724:	b580      	push	{r7, lr}
 801a726:	b084      	sub	sp, #16
 801a728:	af00      	add	r7, sp, #0
 801a72a:	0002      	movs	r2, r0
 801a72c:	1dfb      	adds	r3, r7, #7
 801a72e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801a730:	230e      	movs	r3, #14
 801a732:	18fb      	adds	r3, r7, r3
 801a734:	2200      	movs	r2, #0
 801a736:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801a738:	1dfb      	adds	r3, r7, #7
 801a73a:	781b      	ldrb	r3, [r3, #0]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d002      	beq.n	801a746 <SX1276ReadRssi+0x22>
 801a740:	2b01      	cmp	r3, #1
 801a742:	d00d      	beq.n	801a760 <SX1276ReadRssi+0x3c>
 801a744:	e027      	b.n	801a796 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801a746:	2011      	movs	r0, #17
 801a748:	f000 f917 	bl	801a97a <SX1276Read>
 801a74c:	0003      	movs	r3, r0
 801a74e:	085b      	lsrs	r3, r3, #1
 801a750:	b2db      	uxtb	r3, r3
 801a752:	b29b      	uxth	r3, r3
 801a754:	425b      	negs	r3, r3
 801a756:	b29a      	uxth	r2, r3
 801a758:	230e      	movs	r3, #14
 801a75a:	18fb      	adds	r3, r7, r3
 801a75c:	801a      	strh	r2, [r3, #0]
        break;
 801a75e:	e020      	b.n	801a7a2 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801a760:	4b14      	ldr	r3, [pc, #80]	; (801a7b4 <SX1276ReadRssi+0x90>)
 801a762:	689b      	ldr	r3, [r3, #8]
 801a764:	4a14      	ldr	r2, [pc, #80]	; (801a7b8 <SX1276ReadRssi+0x94>)
 801a766:	4293      	cmp	r3, r2
 801a768:	d90a      	bls.n	801a780 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801a76a:	201b      	movs	r0, #27
 801a76c:	f000 f905 	bl	801a97a <SX1276Read>
 801a770:	0003      	movs	r3, r0
 801a772:	b29b      	uxth	r3, r3
 801a774:	3b9d      	subs	r3, #157	; 0x9d
 801a776:	b29a      	uxth	r2, r3
 801a778:	230e      	movs	r3, #14
 801a77a:	18fb      	adds	r3, r7, r3
 801a77c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801a77e:	e010      	b.n	801a7a2 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801a780:	201b      	movs	r0, #27
 801a782:	f000 f8fa 	bl	801a97a <SX1276Read>
 801a786:	0003      	movs	r3, r0
 801a788:	b29b      	uxth	r3, r3
 801a78a:	3ba4      	subs	r3, #164	; 0xa4
 801a78c:	b29a      	uxth	r2, r3
 801a78e:	230e      	movs	r3, #14
 801a790:	18fb      	adds	r3, r7, r3
 801a792:	801a      	strh	r2, [r3, #0]
        break;
 801a794:	e005      	b.n	801a7a2 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801a796:	230e      	movs	r3, #14
 801a798:	18fb      	adds	r3, r7, r3
 801a79a:	2201      	movs	r2, #1
 801a79c:	4252      	negs	r2, r2
 801a79e:	801a      	strh	r2, [r3, #0]
        break;
 801a7a0:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801a7a2:	230e      	movs	r3, #14
 801a7a4:	18fb      	adds	r3, r7, r3
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	5e9b      	ldrsh	r3, [r3, r2]
}
 801a7aa:	0018      	movs	r0, r3
 801a7ac:	46bd      	mov	sp, r7
 801a7ae:	b004      	add	sp, #16
 801a7b0:	bd80      	pop	{r7, pc}
 801a7b2:	46c0      	nop			; (mov r8, r8)
 801a7b4:	2000176c 	.word	0x2000176c
 801a7b8:	1f4add40 	.word	0x1f4add40

0801a7bc <SX1276Reset>:

static void SX1276Reset( void )
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801a7c0:	f7eb fa10 	bl	8005be4 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801a7c4:	46c0      	nop			; (mov r8, r8)
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}

0801a7ca <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801a7ca:	b5b0      	push	{r4, r5, r7, lr}
 801a7cc:	b084      	sub	sp, #16
 801a7ce:	af00      	add	r7, sp, #0
 801a7d0:	0002      	movs	r2, r0
 801a7d2:	1dfb      	adds	r3, r7, #7
 801a7d4:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801a7d6:	1dfb      	adds	r3, r7, #7
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d118      	bne.n	801a810 <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a7de:	2001      	movs	r0, #1
 801a7e0:	f000 f8cb 	bl	801a97a <SX1276Read>
 801a7e4:	0003      	movs	r3, r0
 801a7e6:	b25b      	sxtb	r3, r3
 801a7e8:	2207      	movs	r2, #7
 801a7ea:	4393      	bics	r3, r2
 801a7ec:	b25a      	sxtb	r2, r3
 801a7ee:	1dfb      	adds	r3, r7, #7
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	b25b      	sxtb	r3, r3
 801a7f4:	4313      	orrs	r3, r2
 801a7f6:	b25b      	sxtb	r3, r3
 801a7f8:	b2db      	uxtb	r3, r3
 801a7fa:	0019      	movs	r1, r3
 801a7fc:	2001      	movs	r0, #1
 801a7fe:	f000 f8ab 	bl	801a958 <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801a802:	2000      	movs	r0, #0
 801a804:	f7eb f98e 	bl	8005b24 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801a808:	2000      	movs	r0, #0
 801a80a:	f7ea ffcd 	bl	80057a8 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801a80e:	e044      	b.n	801a89a <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801a810:	1dfb      	adds	r3, r7, #7
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	2b05      	cmp	r3, #5
 801a816:	d118      	bne.n	801a84a <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801a818:	2001      	movs	r0, #1
 801a81a:	f7ea ffc5 	bl	80057a8 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801a81e:	2001      	movs	r0, #1
 801a820:	f7eb f980 	bl	8005b24 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a824:	2001      	movs	r0, #1
 801a826:	f000 f8a8 	bl	801a97a <SX1276Read>
 801a82a:	0003      	movs	r3, r0
 801a82c:	b25b      	sxtb	r3, r3
 801a82e:	2207      	movs	r2, #7
 801a830:	4393      	bics	r3, r2
 801a832:	b25a      	sxtb	r2, r3
 801a834:	1dfb      	adds	r3, r7, #7
 801a836:	781b      	ldrb	r3, [r3, #0]
 801a838:	b25b      	sxtb	r3, r3
 801a83a:	4313      	orrs	r3, r2
 801a83c:	b25b      	sxtb	r3, r3
 801a83e:	b2db      	uxtb	r3, r3
 801a840:	0019      	movs	r1, r3
 801a842:	2001      	movs	r0, #1
 801a844:	f000 f888 	bl	801a958 <SX1276Write>
}
 801a848:	e027      	b.n	801a89a <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801a84a:	250f      	movs	r5, #15
 801a84c:	197c      	adds	r4, r7, r5
 801a84e:	2009      	movs	r0, #9
 801a850:	f000 f893 	bl	801a97a <SX1276Read>
 801a854:	0003      	movs	r3, r0
 801a856:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801a858:	2001      	movs	r0, #1
 801a85a:	f7ea ffa5 	bl	80057a8 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a85e:	197b      	adds	r3, r7, r5
 801a860:	781b      	ldrb	r3, [r3, #0]
 801a862:	b25b      	sxtb	r3, r3
 801a864:	2b00      	cmp	r3, #0
 801a866:	da03      	bge.n	801a870 <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801a868:	2003      	movs	r0, #3
 801a86a:	f7eb f95b 	bl	8005b24 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801a86e:	e002      	b.n	801a876 <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801a870:	2002      	movs	r0, #2
 801a872:	f7eb f957 	bl	8005b24 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a876:	2001      	movs	r0, #1
 801a878:	f000 f87f 	bl	801a97a <SX1276Read>
 801a87c:	0003      	movs	r3, r0
 801a87e:	b25b      	sxtb	r3, r3
 801a880:	2207      	movs	r2, #7
 801a882:	4393      	bics	r3, r2
 801a884:	b25a      	sxtb	r2, r3
 801a886:	1dfb      	adds	r3, r7, #7
 801a888:	781b      	ldrb	r3, [r3, #0]
 801a88a:	b25b      	sxtb	r3, r3
 801a88c:	4313      	orrs	r3, r2
 801a88e:	b25b      	sxtb	r3, r3
 801a890:	b2db      	uxtb	r3, r3
 801a892:	0019      	movs	r1, r3
 801a894:	2001      	movs	r0, #1
 801a896:	f000 f85f 	bl	801a958 <SX1276Write>
}
 801a89a:	46c0      	nop			; (mov r8, r8)
 801a89c:	46bd      	mov	sp, r7
 801a89e:	b004      	add	sp, #16
 801a8a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a8a4 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b082      	sub	sp, #8
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	0002      	movs	r2, r0
 801a8ac:	1dfb      	adds	r3, r7, #7
 801a8ae:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801a8b0:	2001      	movs	r0, #1
 801a8b2:	f000 f862 	bl	801a97a <SX1276Read>
 801a8b6:	0003      	movs	r3, r0
 801a8b8:	b25b      	sxtb	r3, r3
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	da03      	bge.n	801a8c6 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801a8be:	4b25      	ldr	r3, [pc, #148]	; (801a954 <SX1276SetModem+0xb0>)
 801a8c0:	2201      	movs	r2, #1
 801a8c2:	715a      	strb	r2, [r3, #5]
 801a8c4:	e002      	b.n	801a8cc <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801a8c6:	4b23      	ldr	r3, [pc, #140]	; (801a954 <SX1276SetModem+0xb0>)
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801a8cc:	4b21      	ldr	r3, [pc, #132]	; (801a954 <SX1276SetModem+0xb0>)
 801a8ce:	795b      	ldrb	r3, [r3, #5]
 801a8d0:	1dfa      	adds	r2, r7, #7
 801a8d2:	7812      	ldrb	r2, [r2, #0]
 801a8d4:	429a      	cmp	r2, r3
 801a8d6:	d038      	beq.n	801a94a <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801a8d8:	4b1e      	ldr	r3, [pc, #120]	; (801a954 <SX1276SetModem+0xb0>)
 801a8da:	1dfa      	adds	r2, r7, #7
 801a8dc:	7812      	ldrb	r2, [r2, #0]
 801a8de:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801a8e0:	4b1c      	ldr	r3, [pc, #112]	; (801a954 <SX1276SetModem+0xb0>)
 801a8e2:	795b      	ldrb	r3, [r3, #5]
 801a8e4:	2b01      	cmp	r3, #1
 801a8e6:	d017      	beq.n	801a918 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a8e8:	2000      	movs	r0, #0
 801a8ea:	f7ff ff6e 	bl	801a7ca <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801a8ee:	2001      	movs	r0, #1
 801a8f0:	f000 f843 	bl	801a97a <SX1276Read>
 801a8f4:	0003      	movs	r3, r0
 801a8f6:	001a      	movs	r2, r3
 801a8f8:	237f      	movs	r3, #127	; 0x7f
 801a8fa:	4013      	ands	r3, r2
 801a8fc:	b2db      	uxtb	r3, r3
 801a8fe:	0019      	movs	r1, r3
 801a900:	2001      	movs	r0, #1
 801a902:	f000 f829 	bl	801a958 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801a906:	2100      	movs	r1, #0
 801a908:	2040      	movs	r0, #64	; 0x40
 801a90a:	f000 f825 	bl	801a958 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801a90e:	2130      	movs	r1, #48	; 0x30
 801a910:	2041      	movs	r0, #65	; 0x41
 801a912:	f000 f821 	bl	801a958 <SX1276Write>
        break;
 801a916:	e019      	b.n	801a94c <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a918:	2000      	movs	r0, #0
 801a91a:	f7ff ff56 	bl	801a7ca <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801a91e:	2001      	movs	r0, #1
 801a920:	f000 f82b 	bl	801a97a <SX1276Read>
 801a924:	0003      	movs	r3, r0
 801a926:	001a      	movs	r2, r3
 801a928:	2380      	movs	r3, #128	; 0x80
 801a92a:	425b      	negs	r3, r3
 801a92c:	4313      	orrs	r3, r2
 801a92e:	b2db      	uxtb	r3, r3
 801a930:	0019      	movs	r1, r3
 801a932:	2001      	movs	r0, #1
 801a934:	f000 f810 	bl	801a958 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801a938:	2100      	movs	r1, #0
 801a93a:	2040      	movs	r0, #64	; 0x40
 801a93c:	f000 f80c 	bl	801a958 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801a940:	2100      	movs	r1, #0
 801a942:	2041      	movs	r0, #65	; 0x41
 801a944:	f000 f808 	bl	801a958 <SX1276Write>
        break;
 801a948:	e000      	b.n	801a94c <SX1276SetModem+0xa8>
        return;
 801a94a:	46c0      	nop			; (mov r8, r8)
    }
}
 801a94c:	46bd      	mov	sp, r7
 801a94e:	b002      	add	sp, #8
 801a950:	bd80      	pop	{r7, pc}
 801a952:	46c0      	nop			; (mov r8, r8)
 801a954:	2000176c 	.word	0x2000176c

0801a958 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
 801a960:	000a      	movs	r2, r1
 801a962:	1cfb      	adds	r3, r7, #3
 801a964:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801a966:	1cf9      	adds	r1, r7, #3
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2201      	movs	r2, #1
 801a96c:	0018      	movs	r0, r3
 801a96e:	f000 f815 	bl	801a99c <SX1276WriteBuffer>
}
 801a972:	46c0      	nop			; (mov r8, r8)
 801a974:	46bd      	mov	sp, r7
 801a976:	b002      	add	sp, #8
 801a978:	bd80      	pop	{r7, pc}

0801a97a <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801a97a:	b590      	push	{r4, r7, lr}
 801a97c:	b085      	sub	sp, #20
 801a97e:	af00      	add	r7, sp, #0
 801a980:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801a982:	240f      	movs	r4, #15
 801a984:	1939      	adds	r1, r7, r4
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	2201      	movs	r2, #1
 801a98a:	0018      	movs	r0, r3
 801a98c:	f000 f83a 	bl	801aa04 <SX1276ReadBuffer>
    return data;
 801a990:	193b      	adds	r3, r7, r4
 801a992:	781b      	ldrb	r3, [r3, #0]
}
 801a994:	0018      	movs	r0, r3
 801a996:	46bd      	mov	sp, r7
 801a998:	b005      	add	sp, #20
 801a99a:	bd90      	pop	{r4, r7, pc}

0801a99c <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801a99c:	b590      	push	{r4, r7, lr}
 801a99e:	b087      	sub	sp, #28
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	60f8      	str	r0, [r7, #12]
 801a9a4:	60b9      	str	r1, [r7, #8]
 801a9a6:	1dfb      	adds	r3, r7, #7
 801a9a8:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801a9aa:	2000      	movs	r0, #0
 801a9ac:	f7eb f96c 	bl	8005c88 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	2280      	movs	r2, #128	; 0x80
 801a9b6:	4313      	orrs	r3, r2
 801a9b8:	b29b      	uxth	r3, r3
 801a9ba:	0018      	movs	r0, r3
 801a9bc:	f7eb f951 	bl	8005c62 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801a9c0:	2317      	movs	r3, #23
 801a9c2:	18fb      	adds	r3, r7, r3
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	701a      	strb	r2, [r3, #0]
 801a9c8:	e00e      	b.n	801a9e8 <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801a9ca:	2417      	movs	r4, #23
 801a9cc:	193b      	adds	r3, r7, r4
 801a9ce:	781b      	ldrb	r3, [r3, #0]
 801a9d0:	68ba      	ldr	r2, [r7, #8]
 801a9d2:	18d3      	adds	r3, r2, r3
 801a9d4:	781b      	ldrb	r3, [r3, #0]
 801a9d6:	b29b      	uxth	r3, r3
 801a9d8:	0018      	movs	r0, r3
 801a9da:	f7eb f942 	bl	8005c62 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801a9de:	193b      	adds	r3, r7, r4
 801a9e0:	781a      	ldrb	r2, [r3, #0]
 801a9e2:	193b      	adds	r3, r7, r4
 801a9e4:	3201      	adds	r2, #1
 801a9e6:	701a      	strb	r2, [r3, #0]
 801a9e8:	2317      	movs	r3, #23
 801a9ea:	18fa      	adds	r2, r7, r3
 801a9ec:	1dfb      	adds	r3, r7, #7
 801a9ee:	7812      	ldrb	r2, [r2, #0]
 801a9f0:	781b      	ldrb	r3, [r3, #0]
 801a9f2:	429a      	cmp	r2, r3
 801a9f4:	d3e9      	bcc.n	801a9ca <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801a9f6:	2001      	movs	r0, #1
 801a9f8:	f7eb f946 	bl	8005c88 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801a9fc:	46c0      	nop			; (mov r8, r8)
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	b007      	add	sp, #28
 801aa02:	bd90      	pop	{r4, r7, pc}

0801aa04 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b086      	sub	sp, #24
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	60f8      	str	r0, [r7, #12]
 801aa0c:	60b9      	str	r1, [r7, #8]
 801aa0e:	1dfb      	adds	r3, r7, #7
 801aa10:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801aa12:	2000      	movs	r0, #0
 801aa14:	f7eb f938 	bl	8005c88 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	b29b      	uxth	r3, r3
 801aa1c:	227f      	movs	r2, #127	; 0x7f
 801aa1e:	4013      	ands	r3, r2
 801aa20:	b29b      	uxth	r3, r3
 801aa22:	0018      	movs	r0, r3
 801aa24:	f7eb f91d 	bl	8005c62 <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801aa28:	2317      	movs	r3, #23
 801aa2a:	18fb      	adds	r3, r7, r3
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	701a      	strb	r2, [r3, #0]
 801aa30:	e010      	b.n	801aa54 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801aa32:	2000      	movs	r0, #0
 801aa34:	f7eb f915 	bl	8005c62 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801aa38:	0003      	movs	r3, r0
 801aa3a:	0019      	movs	r1, r3
 801aa3c:	2017      	movs	r0, #23
 801aa3e:	183b      	adds	r3, r7, r0
 801aa40:	781b      	ldrb	r3, [r3, #0]
 801aa42:	68ba      	ldr	r2, [r7, #8]
 801aa44:	18d3      	adds	r3, r2, r3
 801aa46:	b2ca      	uxtb	r2, r1
 801aa48:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801aa4a:	183b      	adds	r3, r7, r0
 801aa4c:	781a      	ldrb	r2, [r3, #0]
 801aa4e:	183b      	adds	r3, r7, r0
 801aa50:	3201      	adds	r2, #1
 801aa52:	701a      	strb	r2, [r3, #0]
 801aa54:	2317      	movs	r3, #23
 801aa56:	18fa      	adds	r2, r7, r3
 801aa58:	1dfb      	adds	r3, r7, #7
 801aa5a:	7812      	ldrb	r2, [r2, #0]
 801aa5c:	781b      	ldrb	r3, [r3, #0]
 801aa5e:	429a      	cmp	r2, r3
 801aa60:	d3e7      	bcc.n	801aa32 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801aa62:	2001      	movs	r0, #1
 801aa64:	f7eb f910 	bl	8005c88 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801aa68:	46c0      	nop			; (mov r8, r8)
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	b006      	add	sp, #24
 801aa6e:	bd80      	pop	{r7, pc}

0801aa70 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	000a      	movs	r2, r1
 801aa7a:	1cfb      	adds	r3, r7, #3
 801aa7c:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801aa7e:	1cfb      	adds	r3, r7, #3
 801aa80:	781a      	ldrb	r2, [r3, #0]
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	0019      	movs	r1, r3
 801aa86:	2000      	movs	r0, #0
 801aa88:	f7ff ff88 	bl	801a99c <SX1276WriteBuffer>
}
 801aa8c:	46c0      	nop			; (mov r8, r8)
 801aa8e:	46bd      	mov	sp, r7
 801aa90:	b002      	add	sp, #8
 801aa92:	bd80      	pop	{r7, pc}

0801aa94 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801aa94:	b580      	push	{r7, lr}
 801aa96:	b082      	sub	sp, #8
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	6078      	str	r0, [r7, #4]
 801aa9c:	000a      	movs	r2, r1
 801aa9e:	1cfb      	adds	r3, r7, #3
 801aaa0:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801aaa2:	1cfb      	adds	r3, r7, #3
 801aaa4:	781a      	ldrb	r2, [r3, #0]
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	0019      	movs	r1, r3
 801aaaa:	2000      	movs	r0, #0
 801aaac:	f7ff ffaa 	bl	801aa04 <SX1276ReadBuffer>
}
 801aab0:	46c0      	nop			; (mov r8, r8)
 801aab2:	46bd      	mov	sp, r7
 801aab4:	b002      	add	sp, #8
 801aab6:	bd80      	pop	{r7, pc}

0801aab8 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	0002      	movs	r2, r0
 801aac0:	1dfb      	adds	r3, r7, #7
 801aac2:	701a      	strb	r2, [r3, #0]
 801aac4:	1dbb      	adds	r3, r7, #6
 801aac6:	1c0a      	adds	r2, r1, #0
 801aac8:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801aaca:	1dfb      	adds	r3, r7, #7
 801aacc:	781b      	ldrb	r3, [r3, #0]
 801aace:	0018      	movs	r0, r3
 801aad0:	f7ff fee8 	bl	801a8a4 <SX1276SetModem>

    switch( modem )
 801aad4:	1dfb      	adds	r3, r7, #7
 801aad6:	781b      	ldrb	r3, [r3, #0]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d002      	beq.n	801aae2 <SX1276SetMaxPayloadLength+0x2a>
 801aadc:	2b01      	cmp	r3, #1
 801aade:	d00f      	beq.n	801ab00 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801aae0:	e016      	b.n	801ab10 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801aae2:	4b0d      	ldr	r3, [pc, #52]	; (801ab18 <SX1276SetMaxPayloadLength+0x60>)
 801aae4:	2222      	movs	r2, #34	; 0x22
 801aae6:	5c9b      	ldrb	r3, [r3, r2]
 801aae8:	2201      	movs	r2, #1
 801aaea:	4053      	eors	r3, r2
 801aaec:	b2db      	uxtb	r3, r3
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d00d      	beq.n	801ab0e <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801aaf2:	1dbb      	adds	r3, r7, #6
 801aaf4:	781b      	ldrb	r3, [r3, #0]
 801aaf6:	0019      	movs	r1, r3
 801aaf8:	2032      	movs	r0, #50	; 0x32
 801aafa:	f7ff ff2d 	bl	801a958 <SX1276Write>
        break;
 801aafe:	e006      	b.n	801ab0e <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801ab00:	1dbb      	adds	r3, r7, #6
 801ab02:	781b      	ldrb	r3, [r3, #0]
 801ab04:	0019      	movs	r1, r3
 801ab06:	2023      	movs	r0, #35	; 0x23
 801ab08:	f7ff ff26 	bl	801a958 <SX1276Write>
        break;
 801ab0c:	e000      	b.n	801ab10 <SX1276SetMaxPayloadLength+0x58>
        break;
 801ab0e:	46c0      	nop			; (mov r8, r8)
}
 801ab10:	46c0      	nop			; (mov r8, r8)
 801ab12:	46bd      	mov	sp, r7
 801ab14:	b002      	add	sp, #8
 801ab16:	bd80      	pop	{r7, pc}
 801ab18:	2000176c 	.word	0x2000176c

0801ab1c <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801ab1c:	b580      	push	{r7, lr}
 801ab1e:	b082      	sub	sp, #8
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	0002      	movs	r2, r0
 801ab24:	1dfb      	adds	r3, r7, #7
 801ab26:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801ab28:	2001      	movs	r0, #1
 801ab2a:	f7ff febb 	bl	801a8a4 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801ab2e:	4b0b      	ldr	r3, [pc, #44]	; (801ab5c <SX1276SetPublicNetwork+0x40>)
 801ab30:	1dfa      	adds	r2, r7, #7
 801ab32:	215c      	movs	r1, #92	; 0x5c
 801ab34:	7812      	ldrb	r2, [r2, #0]
 801ab36:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801ab38:	1dfb      	adds	r3, r7, #7
 801ab3a:	781b      	ldrb	r3, [r3, #0]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d004      	beq.n	801ab4a <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801ab40:	2134      	movs	r1, #52	; 0x34
 801ab42:	2039      	movs	r0, #57	; 0x39
 801ab44:	f7ff ff08 	bl	801a958 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801ab48:	e003      	b.n	801ab52 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801ab4a:	2112      	movs	r1, #18
 801ab4c:	2039      	movs	r0, #57	; 0x39
 801ab4e:	f7ff ff03 	bl	801a958 <SX1276Write>
}
 801ab52:	46c0      	nop			; (mov r8, r8)
 801ab54:	46bd      	mov	sp, r7
 801ab56:	b002      	add	sp, #8
 801ab58:	bd80      	pop	{r7, pc}
 801ab5a:	46c0      	nop			; (mov r8, r8)
 801ab5c:	2000176c 	.word	0x2000176c

0801ab60 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801ab60:	b580      	push	{r7, lr}
 801ab62:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801ab64:	f7ea fe1a 	bl	800579c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801ab68:	0003      	movs	r3, r0
 801ab6a:	3302      	adds	r3, #2
}
 801ab6c:	0018      	movs	r0, r3
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
	...

0801ab74 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b084      	sub	sp, #16
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801ab7c:	230f      	movs	r3, #15
 801ab7e:	18fb      	adds	r3, r7, r3
 801ab80:	2200      	movs	r2, #0
 801ab82:	701a      	strb	r2, [r3, #0]
 801ab84:	e01f      	b.n	801abc6 <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801ab86:	210f      	movs	r1, #15
 801ab88:	187b      	adds	r3, r7, r1
 801ab8a:	781a      	ldrb	r2, [r3, #0]
 801ab8c:	4b13      	ldr	r3, [pc, #76]	; (801abdc <GetFskBandwidthRegValue+0x68>)
 801ab8e:	00d2      	lsls	r2, r2, #3
 801ab90:	58d3      	ldr	r3, [r2, r3]
 801ab92:	687a      	ldr	r2, [r7, #4]
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d310      	bcc.n	801abba <GetFskBandwidthRegValue+0x46>
 801ab98:	187b      	adds	r3, r7, r1
 801ab9a:	781b      	ldrb	r3, [r3, #0]
 801ab9c:	1c5a      	adds	r2, r3, #1
 801ab9e:	4b0f      	ldr	r3, [pc, #60]	; (801abdc <GetFskBandwidthRegValue+0x68>)
 801aba0:	00d2      	lsls	r2, r2, #3
 801aba2:	58d3      	ldr	r3, [r2, r3]
 801aba4:	687a      	ldr	r2, [r7, #4]
 801aba6:	429a      	cmp	r2, r3
 801aba8:	d207      	bcs.n	801abba <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801abaa:	187b      	adds	r3, r7, r1
 801abac:	781b      	ldrb	r3, [r3, #0]
 801abae:	4a0b      	ldr	r2, [pc, #44]	; (801abdc <GetFskBandwidthRegValue+0x68>)
 801abb0:	00db      	lsls	r3, r3, #3
 801abb2:	18d3      	adds	r3, r2, r3
 801abb4:	3304      	adds	r3, #4
 801abb6:	781b      	ldrb	r3, [r3, #0]
 801abb8:	e00b      	b.n	801abd2 <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801abba:	210f      	movs	r1, #15
 801abbc:	187b      	adds	r3, r7, r1
 801abbe:	781a      	ldrb	r2, [r3, #0]
 801abc0:	187b      	adds	r3, r7, r1
 801abc2:	3201      	adds	r2, #1
 801abc4:	701a      	strb	r2, [r3, #0]
 801abc6:	230f      	movs	r3, #15
 801abc8:	18fb      	adds	r3, r7, r3
 801abca:	781b      	ldrb	r3, [r3, #0]
 801abcc:	2b14      	cmp	r3, #20
 801abce:	d9da      	bls.n	801ab86 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801abd0:	e7fe      	b.n	801abd0 <GetFskBandwidthRegValue+0x5c>
}
 801abd2:	0018      	movs	r0, r3
 801abd4:	46bd      	mov	sp, r7
 801abd6:	b004      	add	sp, #16
 801abd8:	bd80      	pop	{r7, pc}
 801abda:	46c0      	nop			; (mov r8, r8)
 801abdc:	0801f3f4 	.word	0x0801f3f4

0801abe0 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b084      	sub	sp, #16
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801abe8:	2300      	movs	r3, #0
 801abea:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	2b03      	cmp	r3, #3
 801abf0:	d018      	beq.n	801ac24 <SX1276GetLoRaBandwidthInHz+0x44>
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	2b03      	cmp	r3, #3
 801abf6:	d818      	bhi.n	801ac2a <SX1276GetLoRaBandwidthInHz+0x4a>
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2b02      	cmp	r3, #2
 801abfc:	d00f      	beq.n	801ac1e <SX1276GetLoRaBandwidthInHz+0x3e>
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	2b02      	cmp	r3, #2
 801ac02:	d812      	bhi.n	801ac2a <SX1276GetLoRaBandwidthInHz+0x4a>
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d003      	beq.n	801ac12 <SX1276GetLoRaBandwidthInHz+0x32>
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2b01      	cmp	r3, #1
 801ac0e:	d003      	beq.n	801ac18 <SX1276GetLoRaBandwidthInHz+0x38>
 801ac10:	e00b      	b.n	801ac2a <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801ac12:	4b08      	ldr	r3, [pc, #32]	; (801ac34 <SX1276GetLoRaBandwidthInHz+0x54>)
 801ac14:	60fb      	str	r3, [r7, #12]
        break;
 801ac16:	e008      	b.n	801ac2a <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801ac18:	4b07      	ldr	r3, [pc, #28]	; (801ac38 <SX1276GetLoRaBandwidthInHz+0x58>)
 801ac1a:	60fb      	str	r3, [r7, #12]
        break;
 801ac1c:	e005      	b.n	801ac2a <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801ac1e:	4b07      	ldr	r3, [pc, #28]	; (801ac3c <SX1276GetLoRaBandwidthInHz+0x5c>)
 801ac20:	60fb      	str	r3, [r7, #12]
        break;
 801ac22:	e002      	b.n	801ac2a <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801ac24:	4b06      	ldr	r3, [pc, #24]	; (801ac40 <SX1276GetLoRaBandwidthInHz+0x60>)
 801ac26:	60fb      	str	r3, [r7, #12]
            break;
 801ac28:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801ac2a:	68fb      	ldr	r3, [r7, #12]
}
 801ac2c:	0018      	movs	r0, r3
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	b004      	add	sp, #16
 801ac32:	bd80      	pop	{r7, pc}
 801ac34:	0001e848 	.word	0x0001e848
 801ac38:	0003d090 	.word	0x0003d090
 801ac3c:	0007a120 	.word	0x0007a120
 801ac40:	0000f424 	.word	0x0000f424

0801ac44 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801ac44:	b5b0      	push	{r4, r5, r7, lr}
 801ac46:	b084      	sub	sp, #16
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	0005      	movs	r5, r0
 801ac4c:	000c      	movs	r4, r1
 801ac4e:	0010      	movs	r0, r2
 801ac50:	0019      	movs	r1, r3
 801ac52:	1dbb      	adds	r3, r7, #6
 801ac54:	1c2a      	adds	r2, r5, #0
 801ac56:	801a      	strh	r2, [r3, #0]
 801ac58:	1d7b      	adds	r3, r7, #5
 801ac5a:	1c22      	adds	r2, r4, #0
 801ac5c:	701a      	strb	r2, [r3, #0]
 801ac5e:	1d3b      	adds	r3, r7, #4
 801ac60:	1c02      	adds	r2, r0, #0
 801ac62:	701a      	strb	r2, [r3, #0]
 801ac64:	1cfb      	adds	r3, r7, #3
 801ac66:	1c0a      	adds	r2, r1, #0
 801ac68:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801ac6a:	230f      	movs	r3, #15
 801ac6c:	18fb      	adds	r3, r7, r3
 801ac6e:	2203      	movs	r2, #3
 801ac70:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801ac72:	1dbb      	adds	r3, r7, #6
 801ac74:	881b      	ldrh	r3, [r3, #0]
 801ac76:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801ac78:	1d7b      	adds	r3, r7, #5
 801ac7a:	781b      	ldrb	r3, [r3, #0]
 801ac7c:	2101      	movs	r1, #1
 801ac7e:	404b      	eors	r3, r1
 801ac80:	b2db      	uxtb	r3, r3
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d001      	beq.n	801ac8a <SX1276GetGfskTimeOnAirNumerator+0x46>
 801ac86:	2308      	movs	r3, #8
 801ac88:	e000      	b.n	801ac8c <SX1276GetGfskTimeOnAirNumerator+0x48>
 801ac8a:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801ac8c:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801ac8e:	230f      	movs	r3, #15
 801ac90:	18fb      	adds	r3, r7, r3
 801ac92:	781b      	ldrb	r3, [r3, #0]
 801ac94:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801ac96:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801ac98:	1d3b      	adds	r3, r7, #4
 801ac9a:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801ac9c:	1cfb      	adds	r3, r7, #3
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d001      	beq.n	801aca8 <SX1276GetGfskTimeOnAirNumerator+0x64>
 801aca4:	2302      	movs	r3, #2
 801aca6:	e000      	b.n	801acaa <SX1276GetGfskTimeOnAirNumerator+0x66>
 801aca8:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801acaa:	185b      	adds	r3, r3, r1
               ) << 3 
 801acac:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801acae:	18d3      	adds	r3, r2, r3
             );
}
 801acb0:	0018      	movs	r0, r3
 801acb2:	46bd      	mov	sp, r7
 801acb4:	b004      	add	sp, #16
 801acb6:	bdb0      	pop	{r4, r5, r7, pc}

0801acb8 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b08a      	sub	sp, #40	; 0x28
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	60f8      	str	r0, [r7, #12]
 801acc0:	60b9      	str	r1, [r7, #8]
 801acc2:	0019      	movs	r1, r3
 801acc4:	1dfb      	adds	r3, r7, #7
 801acc6:	701a      	strb	r2, [r3, #0]
 801acc8:	1d3b      	adds	r3, r7, #4
 801acca:	1c0a      	adds	r2, r1, #0
 801accc:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801acce:	1dfb      	adds	r3, r7, #7
 801acd0:	781b      	ldrb	r3, [r3, #0]
 801acd2:	3304      	adds	r3, #4
 801acd4:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801acd6:	2327      	movs	r3, #39	; 0x27
 801acd8:	18fb      	adds	r3, r7, r3
 801acda:	2200      	movs	r2, #0
 801acdc:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801acde:	68bb      	ldr	r3, [r7, #8]
 801ace0:	2b05      	cmp	r3, #5
 801ace2:	d002      	beq.n	801acea <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	2b06      	cmp	r3, #6
 801ace8:	d106      	bne.n	801acf8 <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801acea:	1d3b      	adds	r3, r7, #4
 801acec:	881b      	ldrh	r3, [r3, #0]
 801acee:	2b0b      	cmp	r3, #11
 801acf0:	d802      	bhi.n	801acf8 <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801acf2:	1d3b      	adds	r3, r7, #4
 801acf4:	220c      	movs	r2, #12
 801acf6:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d105      	bne.n	801ad0a <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801acfe:	68bb      	ldr	r3, [r7, #8]
 801ad00:	2b0b      	cmp	r3, #11
 801ad02:	d008      	beq.n	801ad16 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801ad04:	68bb      	ldr	r3, [r7, #8]
 801ad06:	2b0c      	cmp	r3, #12
 801ad08:	d005      	beq.n	801ad16 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	2b01      	cmp	r3, #1
 801ad0e:	d106      	bne.n	801ad1e <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ad10:	68bb      	ldr	r3, [r7, #8]
 801ad12:	2b0c      	cmp	r3, #12
 801ad14:	d103      	bne.n	801ad1e <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801ad16:	2327      	movs	r3, #39	; 0x27
 801ad18:	18fb      	adds	r3, r7, r3
 801ad1a:	2201      	movs	r2, #1
 801ad1c:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ad1e:	2334      	movs	r3, #52	; 0x34
 801ad20:	18fb      	adds	r3, r7, r3
 801ad22:	781b      	ldrb	r3, [r3, #0]
 801ad24:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801ad26:	2338      	movs	r3, #56	; 0x38
 801ad28:	18fb      	adds	r3, r7, r3
 801ad2a:	781b      	ldrb	r3, [r3, #0]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d001      	beq.n	801ad34 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801ad30:	2310      	movs	r3, #16
 801ad32:	e000      	b.n	801ad36 <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801ad34:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ad36:	189b      	adds	r3, r3, r2
 801ad38:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801ad3a:	68bb      	ldr	r3, [r7, #8]
 801ad3c:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801ad3e:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801ad40:	2330      	movs	r3, #48	; 0x30
 801ad42:	18fb      	adds	r3, r7, r3
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d001      	beq.n	801ad4e <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	e000      	b.n	801ad50 <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801ad4e:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801ad50:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ad52:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	2b06      	cmp	r3, #6
 801ad58:	d803      	bhi.n	801ad62 <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	009b      	lsls	r3, r3, #2
 801ad5e:	623b      	str	r3, [r7, #32]
 801ad60:	e00f      	b.n	801ad82 <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801ad62:	69fb      	ldr	r3, [r7, #28]
 801ad64:	3308      	adds	r3, #8
 801ad66:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801ad68:	2327      	movs	r3, #39	; 0x27
 801ad6a:	18fb      	adds	r3, r7, r3
 801ad6c:	781b      	ldrb	r3, [r3, #0]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d004      	beq.n	801ad7c <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801ad72:	68bb      	ldr	r3, [r7, #8]
 801ad74:	3b02      	subs	r3, #2
 801ad76:	009b      	lsls	r3, r3, #2
 801ad78:	623b      	str	r3, [r7, #32]
 801ad7a:	e002      	b.n	801ad82 <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801ad7c:	68bb      	ldr	r3, [r7, #8]
 801ad7e:	009b      	lsls	r3, r3, #2
 801ad80:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801ad82:	69fb      	ldr	r3, [r7, #28]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	da01      	bge.n	801ad8c <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801ad88:	2300      	movs	r3, #0
 801ad8a:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801ad8c:	69fa      	ldr	r2, [r7, #28]
 801ad8e:	6a3b      	ldr	r3, [r7, #32]
 801ad90:	18d3      	adds	r3, r2, r3
 801ad92:	3b01      	subs	r3, #1
 801ad94:	6a39      	ldr	r1, [r7, #32]
 801ad96:	0018      	movs	r0, r3
 801ad98:	f7e5 fa52 	bl	8000240 <__divsi3>
 801ad9c:	0003      	movs	r3, r0
 801ad9e:	001a      	movs	r2, r3
 801ada0:	697b      	ldr	r3, [r7, #20]
 801ada2:	435a      	muls	r2, r3
 801ada4:	1d3b      	adds	r3, r7, #4
 801ada6:	881b      	ldrh	r3, [r3, #0]
 801ada8:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801adaa:	330c      	adds	r3, #12
 801adac:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801adae:	68bb      	ldr	r3, [r7, #8]
 801adb0:	2b06      	cmp	r3, #6
 801adb2:	d802      	bhi.n	801adba <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801adb4:	69bb      	ldr	r3, [r7, #24]
 801adb6:	3302      	adds	r3, #2
 801adb8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801adba:	69bb      	ldr	r3, [r7, #24]
 801adbc:	009b      	lsls	r3, r3, #2
 801adbe:	1c5a      	adds	r2, r3, #1
 801adc0:	68bb      	ldr	r3, [r7, #8]
 801adc2:	3b02      	subs	r3, #2
 801adc4:	409a      	lsls	r2, r3
 801adc6:	0013      	movs	r3, r2
}
 801adc8:	0018      	movs	r0, r3
 801adca:	46bd      	mov	sp, r7
 801adcc:	b00a      	add	sp, #40	; 0x28
 801adce:	bd80      	pop	{r7, pc}

0801add0 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801add0:	b590      	push	{r4, r7, lr}
 801add2:	b085      	sub	sp, #20
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801add8:	4b4f      	ldr	r3, [pc, #316]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801adda:	791b      	ldrb	r3, [r3, #4]
 801addc:	2b01      	cmp	r3, #1
 801adde:	d002      	beq.n	801ade6 <SX1276OnTimeoutIrq+0x16>
 801ade0:	2b02      	cmp	r3, #2
 801ade2:	d041      	beq.n	801ae68 <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801ade4:	e094      	b.n	801af10 <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801ade6:	4b4c      	ldr	r3, [pc, #304]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801ade8:	795b      	ldrb	r3, [r3, #5]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d12e      	bne.n	801ae4c <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801adee:	4b4a      	ldr	r3, [pc, #296]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801adf0:	2230      	movs	r2, #48	; 0x30
 801adf2:	2100      	movs	r1, #0
 801adf4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801adf6:	4b48      	ldr	r3, [pc, #288]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801adf8:	2231      	movs	r2, #49	; 0x31
 801adfa:	2100      	movs	r1, #0
 801adfc:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801adfe:	4b46      	ldr	r3, [pc, #280]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801ae00:	2200      	movs	r2, #0
 801ae02:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801ae04:	4b44      	ldr	r3, [pc, #272]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801ae06:	2200      	movs	r2, #0
 801ae08:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801ae0a:	210b      	movs	r1, #11
 801ae0c:	203e      	movs	r0, #62	; 0x3e
 801ae0e:	f7ff fda3 	bl	801a958 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801ae12:	2110      	movs	r1, #16
 801ae14:	203f      	movs	r0, #63	; 0x3f
 801ae16:	f7ff fd9f 	bl	801a958 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801ae1a:	4b3f      	ldr	r3, [pc, #252]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801ae1c:	2226      	movs	r2, #38	; 0x26
 801ae1e:	5c9b      	ldrb	r3, [r3, r2]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d00c      	beq.n	801ae3e <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801ae24:	200d      	movs	r0, #13
 801ae26:	f7ff fda8 	bl	801a97a <SX1276Read>
 801ae2a:	0003      	movs	r3, r0
 801ae2c:	001a      	movs	r2, r3
 801ae2e:	2340      	movs	r3, #64	; 0x40
 801ae30:	4313      	orrs	r3, r2
 801ae32:	b2db      	uxtb	r3, r3
 801ae34:	0019      	movs	r1, r3
 801ae36:	200d      	movs	r0, #13
 801ae38:	f7ff fd8e 	bl	801a958 <SX1276Write>
 801ae3c:	e006      	b.n	801ae4c <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801ae3e:	4b36      	ldr	r3, [pc, #216]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801ae40:	2200      	movs	r2, #0
 801ae42:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801ae44:	4b35      	ldr	r3, [pc, #212]	; (801af1c <SX1276OnTimeoutIrq+0x14c>)
 801ae46:	0018      	movs	r0, r3
 801ae48:	f001 fbfa 	bl	801c640 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ae4c:	4b34      	ldr	r3, [pc, #208]	; (801af20 <SX1276OnTimeoutIrq+0x150>)
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d05a      	beq.n	801af0a <SX1276OnTimeoutIrq+0x13a>
 801ae54:	4b32      	ldr	r3, [pc, #200]	; (801af20 <SX1276OnTimeoutIrq+0x150>)
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	68db      	ldr	r3, [r3, #12]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d055      	beq.n	801af0a <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801ae5e:	4b30      	ldr	r3, [pc, #192]	; (801af20 <SX1276OnTimeoutIrq+0x150>)
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	68db      	ldr	r3, [r3, #12]
 801ae64:	4798      	blx	r3
        break;
 801ae66:	e050      	b.n	801af0a <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801ae68:	f7ff fca8 	bl	801a7bc <SX1276Reset>
        RxChainCalibration( );
 801ae6c:	f7fe f9f0 	bl	8019250 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801ae70:	2000      	movs	r0, #0
 801ae72:	f7ff fcaa 	bl	801a7ca <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801ae76:	230f      	movs	r3, #15
 801ae78:	18fb      	adds	r3, r7, r3
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	701a      	strb	r2, [r3, #0]
 801ae7e:	e025      	b.n	801aecc <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801ae80:	240f      	movs	r4, #15
 801ae82:	193b      	adds	r3, r7, r4
 801ae84:	781a      	ldrb	r2, [r3, #0]
 801ae86:	4927      	ldr	r1, [pc, #156]	; (801af24 <SX1276OnTimeoutIrq+0x154>)
 801ae88:	0013      	movs	r3, r2
 801ae8a:	005b      	lsls	r3, r3, #1
 801ae8c:	189b      	adds	r3, r3, r2
 801ae8e:	5c5b      	ldrb	r3, [r3, r1]
 801ae90:	0018      	movs	r0, r3
 801ae92:	f7ff fd07 	bl	801a8a4 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801ae96:	193b      	adds	r3, r7, r4
 801ae98:	781a      	ldrb	r2, [r3, #0]
 801ae9a:	4922      	ldr	r1, [pc, #136]	; (801af24 <SX1276OnTimeoutIrq+0x154>)
 801ae9c:	0013      	movs	r3, r2
 801ae9e:	005b      	lsls	r3, r3, #1
 801aea0:	189b      	adds	r3, r3, r2
 801aea2:	18cb      	adds	r3, r1, r3
 801aea4:	3301      	adds	r3, #1
 801aea6:	781b      	ldrb	r3, [r3, #0]
 801aea8:	0018      	movs	r0, r3
 801aeaa:	193b      	adds	r3, r7, r4
 801aeac:	781a      	ldrb	r2, [r3, #0]
 801aeae:	491d      	ldr	r1, [pc, #116]	; (801af24 <SX1276OnTimeoutIrq+0x154>)
 801aeb0:	0013      	movs	r3, r2
 801aeb2:	005b      	lsls	r3, r3, #1
 801aeb4:	189b      	adds	r3, r3, r2
 801aeb6:	18cb      	adds	r3, r1, r3
 801aeb8:	3302      	adds	r3, #2
 801aeba:	781b      	ldrb	r3, [r3, #0]
 801aebc:	0019      	movs	r1, r3
 801aebe:	f7ff fd4b 	bl	801a958 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801aec2:	193b      	adds	r3, r7, r4
 801aec4:	781a      	ldrb	r2, [r3, #0]
 801aec6:	193b      	adds	r3, r7, r4
 801aec8:	3201      	adds	r2, #1
 801aeca:	701a      	strb	r2, [r3, #0]
 801aecc:	230f      	movs	r3, #15
 801aece:	18fb      	adds	r3, r7, r3
 801aed0:	781b      	ldrb	r3, [r3, #0]
 801aed2:	2b0f      	cmp	r3, #15
 801aed4:	d9d4      	bls.n	801ae80 <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801aed6:	2000      	movs	r0, #0
 801aed8:	f7ff fce4 	bl	801a8a4 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801aedc:	4b0e      	ldr	r3, [pc, #56]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801aede:	225c      	movs	r2, #92	; 0x5c
 801aee0:	5c9b      	ldrb	r3, [r3, r2]
 801aee2:	0018      	movs	r0, r3
 801aee4:	f7ff fe1a 	bl	801ab1c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801aee8:	4b0b      	ldr	r3, [pc, #44]	; (801af18 <SX1276OnTimeoutIrq+0x148>)
 801aeea:	2200      	movs	r2, #0
 801aeec:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801aeee:	4b0c      	ldr	r3, [pc, #48]	; (801af20 <SX1276OnTimeoutIrq+0x150>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d00b      	beq.n	801af0e <SX1276OnTimeoutIrq+0x13e>
 801aef6:	4b0a      	ldr	r3, [pc, #40]	; (801af20 <SX1276OnTimeoutIrq+0x150>)
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	685b      	ldr	r3, [r3, #4]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d006      	beq.n	801af0e <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801af00:	4b07      	ldr	r3, [pc, #28]	; (801af20 <SX1276OnTimeoutIrq+0x150>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	685b      	ldr	r3, [r3, #4]
 801af06:	4798      	blx	r3
        break;
 801af08:	e001      	b.n	801af0e <SX1276OnTimeoutIrq+0x13e>
        break;
 801af0a:	46c0      	nop			; (mov r8, r8)
 801af0c:	e000      	b.n	801af10 <SX1276OnTimeoutIrq+0x140>
        break;
 801af0e:	46c0      	nop			; (mov r8, r8)
    }
}
 801af10:	46c0      	nop			; (mov r8, r8)
 801af12:	46bd      	mov	sp, r7
 801af14:	b005      	add	sp, #20
 801af16:	bd90      	pop	{r4, r7, pc}
 801af18:	2000176c 	.word	0x2000176c
 801af1c:	20001754 	.word	0x20001754
 801af20:	20000e7c 	.word	0x20000e7c
 801af24:	0801f3c4 	.word	0x0801f3c4

0801af28 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801af28:	b590      	push	{r4, r7, lr}
 801af2a:	b083      	sub	sp, #12
 801af2c:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801af2e:	1d7b      	adds	r3, r7, #5
 801af30:	2200      	movs	r2, #0
 801af32:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801af34:	4bc3      	ldr	r3, [pc, #780]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801af36:	791b      	ldrb	r3, [r3, #4]
 801af38:	2b01      	cmp	r3, #1
 801af3a:	d003      	beq.n	801af44 <SX1276OnDio0Irq+0x1c>
 801af3c:	2b02      	cmp	r3, #2
 801af3e:	d100      	bne.n	801af42 <SX1276OnDio0Irq+0x1a>
 801af40:	e1e2      	b.n	801b308 <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801af42:	e1ff      	b.n	801b344 <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801af44:	4bbf      	ldr	r3, [pc, #764]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801af46:	795b      	ldrb	r3, [r3, #5]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d003      	beq.n	801af54 <SX1276OnDio0Irq+0x2c>
 801af4c:	2b01      	cmp	r3, #1
 801af4e:	d100      	bne.n	801af52 <SX1276OnDio0Irq+0x2a>
 801af50:	e0e2      	b.n	801b118 <SX1276OnDio0Irq+0x1f0>
                break;
 801af52:	e1d8      	b.n	801b306 <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801af54:	4bbb      	ldr	r3, [pc, #748]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801af56:	2224      	movs	r2, #36	; 0x24
 801af58:	5c9b      	ldrb	r3, [r3, r2]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d052      	beq.n	801b004 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801af5e:	203f      	movs	r0, #63	; 0x3f
 801af60:	f7ff fd0b 	bl	801a97a <SX1276Read>
 801af64:	0003      	movs	r3, r0
 801af66:	001a      	movs	r2, r3
 801af68:	1d7b      	adds	r3, r7, #5
 801af6a:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801af6c:	1d7b      	adds	r3, r7, #5
 801af6e:	781b      	ldrb	r3, [r3, #0]
 801af70:	b2db      	uxtb	r3, r3
 801af72:	001a      	movs	r2, r3
 801af74:	2302      	movs	r3, #2
 801af76:	4013      	ands	r3, r2
 801af78:	2b02      	cmp	r3, #2
 801af7a:	d043      	beq.n	801b004 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801af7c:	210b      	movs	r1, #11
 801af7e:	203e      	movs	r0, #62	; 0x3e
 801af80:	f7ff fcea 	bl	801a958 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801af84:	2110      	movs	r1, #16
 801af86:	203f      	movs	r0, #63	; 0x3f
 801af88:	f7ff fce6 	bl	801a958 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801af8c:	4bae      	ldr	r3, [pc, #696]	; (801b248 <SX1276OnDio0Irq+0x320>)
 801af8e:	0018      	movs	r0, r3
 801af90:	f001 fb56 	bl	801c640 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801af94:	4bab      	ldr	r3, [pc, #684]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801af96:	2226      	movs	r2, #38	; 0x26
 801af98:	5c9b      	ldrb	r3, [r3, r2]
 801af9a:	2201      	movs	r2, #1
 801af9c:	4053      	eors	r3, r2
 801af9e:	b2db      	uxtb	r3, r3
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d007      	beq.n	801afb4 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801afa4:	4ba9      	ldr	r3, [pc, #676]	; (801b24c <SX1276OnDio0Irq+0x324>)
 801afa6:	0018      	movs	r0, r3
 801afa8:	f001 fb4a 	bl	801c640 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801afac:	4ba5      	ldr	r3, [pc, #660]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801afae:	2200      	movs	r2, #0
 801afb0:	711a      	strb	r2, [r3, #4]
 801afb2:	e00b      	b.n	801afcc <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801afb4:	200d      	movs	r0, #13
 801afb6:	f7ff fce0 	bl	801a97a <SX1276Read>
 801afba:	0003      	movs	r3, r0
 801afbc:	001a      	movs	r2, r3
 801afbe:	2340      	movs	r3, #64	; 0x40
 801afc0:	4313      	orrs	r3, r2
 801afc2:	b2db      	uxtb	r3, r3
 801afc4:	0019      	movs	r1, r3
 801afc6:	200d      	movs	r0, #13
 801afc8:	f7ff fcc6 	bl	801a958 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801afcc:	4ba0      	ldr	r3, [pc, #640]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d008      	beq.n	801afe6 <SX1276OnDio0Irq+0xbe>
 801afd4:	4b9e      	ldr	r3, [pc, #632]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	691b      	ldr	r3, [r3, #16]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d003      	beq.n	801afe6 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801afde:	4b9c      	ldr	r3, [pc, #624]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	691b      	ldr	r3, [r3, #16]
 801afe4:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801afe6:	4b97      	ldr	r3, [pc, #604]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801afe8:	2230      	movs	r2, #48	; 0x30
 801afea:	2100      	movs	r1, #0
 801afec:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801afee:	4b95      	ldr	r3, [pc, #596]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801aff0:	2231      	movs	r2, #49	; 0x31
 801aff2:	2100      	movs	r1, #0
 801aff4:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801aff6:	4b93      	ldr	r3, [pc, #588]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801aff8:	2200      	movs	r2, #0
 801affa:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801affc:	4b91      	ldr	r3, [pc, #580]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801affe:	2200      	movs	r2, #0
 801b000:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801b002:	e180      	b.n	801b306 <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b004:	4b8f      	ldr	r3, [pc, #572]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b006:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d12d      	bne.n	801b068 <SX1276OnDio0Irq+0x140>
 801b00c:	4b8d      	ldr	r3, [pc, #564]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b00e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b010:	2b00      	cmp	r3, #0
 801b012:	d129      	bne.n	801b068 <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b014:	4b8b      	ldr	r3, [pc, #556]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b016:	2222      	movs	r2, #34	; 0x22
 801b018:	5c9b      	ldrb	r3, [r3, r2]
 801b01a:	2201      	movs	r2, #1
 801b01c:	4053      	eors	r3, r2
 801b01e:	b2db      	uxtb	r3, r3
 801b020:	2b00      	cmp	r3, #0
 801b022:	d005      	beq.n	801b030 <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b024:	4b8b      	ldr	r3, [pc, #556]	; (801b254 <SX1276OnDio0Irq+0x32c>)
 801b026:	2101      	movs	r1, #1
 801b028:	0018      	movs	r0, r3
 801b02a:	f7ff fd33 	bl	801aa94 <SX1276ReadFifo>
 801b02e:	e006      	b.n	801b03e <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b030:	2032      	movs	r0, #50	; 0x32
 801b032:	f7ff fca2 	bl	801a97a <SX1276Read>
 801b036:	0003      	movs	r3, r0
 801b038:	b29a      	uxth	r2, r3
 801b03a:	4b82      	ldr	r3, [pc, #520]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b03c:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b03e:	4b81      	ldr	r3, [pc, #516]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b040:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b042:	001a      	movs	r2, r3
 801b044:	4b84      	ldr	r3, [pc, #528]	; (801b258 <SX1276OnDio0Irq+0x330>)
 801b046:	18d0      	adds	r0, r2, r3
 801b048:	4b7e      	ldr	r3, [pc, #504]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b04a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b04c:	b2da      	uxtb	r2, r3
 801b04e:	4b7d      	ldr	r3, [pc, #500]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b050:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b052:	b2db      	uxtb	r3, r3
 801b054:	1ad3      	subs	r3, r2, r3
 801b056:	b2db      	uxtb	r3, r3
 801b058:	0019      	movs	r1, r3
 801b05a:	f7ff fd1b 	bl	801aa94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b05e:	4b79      	ldr	r3, [pc, #484]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b060:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b062:	4b78      	ldr	r3, [pc, #480]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b064:	879a      	strh	r2, [r3, #60]	; 0x3c
 801b066:	e013      	b.n	801b090 <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b068:	4b76      	ldr	r3, [pc, #472]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b06a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b06c:	001a      	movs	r2, r3
 801b06e:	4b7a      	ldr	r3, [pc, #488]	; (801b258 <SX1276OnDio0Irq+0x330>)
 801b070:	18d0      	adds	r0, r2, r3
 801b072:	4b74      	ldr	r3, [pc, #464]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b074:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b076:	b2da      	uxtb	r2, r3
 801b078:	4b72      	ldr	r3, [pc, #456]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b07a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	1ad3      	subs	r3, r2, r3
 801b080:	b2db      	uxtb	r3, r3
 801b082:	0019      	movs	r1, r3
 801b084:	f7ff fd06 	bl	801aa94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b088:	4b6e      	ldr	r3, [pc, #440]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b08a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b08c:	4b6d      	ldr	r3, [pc, #436]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b08e:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801b090:	4b6d      	ldr	r3, [pc, #436]	; (801b248 <SX1276OnDio0Irq+0x320>)
 801b092:	0018      	movs	r0, r3
 801b094:	f001 fad4 	bl	801c640 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801b098:	4b6a      	ldr	r3, [pc, #424]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b09a:	2226      	movs	r2, #38	; 0x26
 801b09c:	5c9b      	ldrb	r3, [r3, r2]
 801b09e:	2201      	movs	r2, #1
 801b0a0:	4053      	eors	r3, r2
 801b0a2:	b2db      	uxtb	r3, r3
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d007      	beq.n	801b0b8 <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801b0a8:	4b66      	ldr	r3, [pc, #408]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801b0ae:	4b67      	ldr	r3, [pc, #412]	; (801b24c <SX1276OnDio0Irq+0x324>)
 801b0b0:	0018      	movs	r0, r3
 801b0b2:	f001 fac5 	bl	801c640 <UTIL_TIMER_Stop>
 801b0b6:	e00b      	b.n	801b0d0 <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b0b8:	200d      	movs	r0, #13
 801b0ba:	f7ff fc5e 	bl	801a97a <SX1276Read>
 801b0be:	0003      	movs	r3, r0
 801b0c0:	001a      	movs	r2, r3
 801b0c2:	2340      	movs	r3, #64	; 0x40
 801b0c4:	4313      	orrs	r3, r2
 801b0c6:	b2db      	uxtb	r3, r3
 801b0c8:	0019      	movs	r1, r3
 801b0ca:	200d      	movs	r0, #13
 801b0cc:	f7ff fc44 	bl	801a958 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b0d0:	4b5f      	ldr	r3, [pc, #380]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d010      	beq.n	801b0fa <SX1276OnDio0Irq+0x1d2>
 801b0d8:	4b5d      	ldr	r3, [pc, #372]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	689b      	ldr	r3, [r3, #8]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d00b      	beq.n	801b0fa <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801b0e2:	4b5b      	ldr	r3, [pc, #364]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	689c      	ldr	r4, [r3, #8]
 801b0e8:	4b56      	ldr	r3, [pc, #344]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b0ea:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801b0ec:	4b55      	ldr	r3, [pc, #340]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b0ee:	2232      	movs	r2, #50	; 0x32
 801b0f0:	569b      	ldrsb	r3, [r3, r2]
 801b0f2:	b21a      	sxth	r2, r3
 801b0f4:	4858      	ldr	r0, [pc, #352]	; (801b258 <SX1276OnDio0Irq+0x330>)
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b0fa:	4b52      	ldr	r3, [pc, #328]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b0fc:	2230      	movs	r2, #48	; 0x30
 801b0fe:	2100      	movs	r1, #0
 801b100:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b102:	4b50      	ldr	r3, [pc, #320]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b104:	2231      	movs	r2, #49	; 0x31
 801b106:	2100      	movs	r1, #0
 801b108:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b10a:	4b4e      	ldr	r3, [pc, #312]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b10c:	2200      	movs	r2, #0
 801b10e:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801b110:	4b4c      	ldr	r3, [pc, #304]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b112:	2200      	movs	r2, #0
 801b114:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801b116:	e0f6      	b.n	801b306 <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801b118:	2140      	movs	r1, #64	; 0x40
 801b11a:	2012      	movs	r0, #18
 801b11c:	f7ff fc1c 	bl	801a958 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801b120:	2012      	movs	r0, #18
 801b122:	f7ff fc2a 	bl	801a97a <SX1276Read>
 801b126:	0003      	movs	r3, r0
 801b128:	001a      	movs	r2, r3
 801b12a:	1d7b      	adds	r3, r7, #5
 801b12c:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801b12e:	1d7b      	adds	r3, r7, #5
 801b130:	781b      	ldrb	r3, [r3, #0]
 801b132:	b2db      	uxtb	r3, r3
 801b134:	001a      	movs	r2, r3
 801b136:	2320      	movs	r3, #32
 801b138:	4013      	ands	r3, r2
 801b13a:	2b20      	cmp	r3, #32
 801b13c:	d122      	bne.n	801b184 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801b13e:	2120      	movs	r1, #32
 801b140:	2012      	movs	r0, #18
 801b142:	f7ff fc09 	bl	801a958 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801b146:	4b3f      	ldr	r3, [pc, #252]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b148:	2256      	movs	r2, #86	; 0x56
 801b14a:	5c9b      	ldrb	r3, [r3, r2]
 801b14c:	2201      	movs	r2, #1
 801b14e:	4053      	eors	r3, r2
 801b150:	b2db      	uxtb	r3, r3
 801b152:	2b00      	cmp	r3, #0
 801b154:	d002      	beq.n	801b15c <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801b156:	4b3b      	ldr	r3, [pc, #236]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b158:	2200      	movs	r2, #0
 801b15a:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801b15c:	4b3a      	ldr	r3, [pc, #232]	; (801b248 <SX1276OnDio0Irq+0x320>)
 801b15e:	0018      	movs	r0, r3
 801b160:	f001 fa6e 	bl	801c640 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b164:	4b3a      	ldr	r3, [pc, #232]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d100      	bne.n	801b16e <SX1276OnDio0Irq+0x246>
 801b16c:	e0c8      	b.n	801b300 <SX1276OnDio0Irq+0x3d8>
 801b16e:	4b38      	ldr	r3, [pc, #224]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	691b      	ldr	r3, [r3, #16]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d100      	bne.n	801b17a <SX1276OnDio0Irq+0x252>
 801b178:	e0c2      	b.n	801b300 <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801b17a:	4b35      	ldr	r3, [pc, #212]	; (801b250 <SX1276OnDio0Irq+0x328>)
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	691b      	ldr	r3, [r3, #16]
 801b180:	4798      	blx	r3
                        break;
 801b182:	e0bd      	b.n	801b300 <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801b184:	2019      	movs	r0, #25
 801b186:	f7ff fbf8 	bl	801a97a <SX1276Read>
 801b18a:	0003      	movs	r3, r0
 801b18c:	b25b      	sxtb	r3, r3
 801b18e:	3302      	adds	r3, #2
 801b190:	109b      	asrs	r3, r3, #2
 801b192:	b259      	sxtb	r1, r3
 801b194:	4b2b      	ldr	r3, [pc, #172]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b196:	2260      	movs	r2, #96	; 0x60
 801b198:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801b19a:	201a      	movs	r0, #26
 801b19c:	f7ff fbed 	bl	801a97a <SX1276Read>
 801b1a0:	0003      	movs	r3, r0
 801b1a2:	001a      	movs	r2, r3
 801b1a4:	1dbb      	adds	r3, r7, #6
 801b1a6:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801b1a8:	4b26      	ldr	r3, [pc, #152]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b1aa:	2260      	movs	r2, #96	; 0x60
 801b1ac:	569b      	ldrsb	r3, [r3, r2]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	da32      	bge.n	801b218 <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b1b2:	4b24      	ldr	r3, [pc, #144]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b1b4:	689b      	ldr	r3, [r3, #8]
 801b1b6:	4a29      	ldr	r2, [pc, #164]	; (801b25c <SX1276OnDio0Irq+0x334>)
 801b1b8:	4293      	cmp	r3, r2
 801b1ba:	d916      	bls.n	801b1ea <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b1bc:	1dbb      	adds	r3, r7, #6
 801b1be:	2200      	movs	r2, #0
 801b1c0:	5e9b      	ldrsh	r3, [r3, r2]
 801b1c2:	111b      	asrs	r3, r3, #4
 801b1c4:	b21b      	sxth	r3, r3
 801b1c6:	b29a      	uxth	r2, r3
 801b1c8:	1dbb      	adds	r3, r7, #6
 801b1ca:	881b      	ldrh	r3, [r3, #0]
 801b1cc:	18d3      	adds	r3, r2, r3
 801b1ce:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b1d0:	4b1c      	ldr	r3, [pc, #112]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b1d2:	2160      	movs	r1, #96	; 0x60
 801b1d4:	565b      	ldrsb	r3, [r3, r1]
 801b1d6:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b1d8:	18d3      	adds	r3, r2, r3
 801b1da:	b29b      	uxth	r3, r3
 801b1dc:	3b9d      	subs	r3, #157	; 0x9d
 801b1de:	b29b      	uxth	r3, r3
 801b1e0:	b219      	sxth	r1, r3
 801b1e2:	4b18      	ldr	r3, [pc, #96]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b1e4:	2262      	movs	r2, #98	; 0x62
 801b1e6:	5299      	strh	r1, [r3, r2]
 801b1e8:	e04a      	b.n	801b280 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b1ea:	1dbb      	adds	r3, r7, #6
 801b1ec:	2200      	movs	r2, #0
 801b1ee:	5e9b      	ldrsh	r3, [r3, r2]
 801b1f0:	111b      	asrs	r3, r3, #4
 801b1f2:	b21b      	sxth	r3, r3
 801b1f4:	b29a      	uxth	r2, r3
 801b1f6:	1dbb      	adds	r3, r7, #6
 801b1f8:	881b      	ldrh	r3, [r3, #0]
 801b1fa:	18d3      	adds	r3, r2, r3
 801b1fc:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b1fe:	4b11      	ldr	r3, [pc, #68]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b200:	2160      	movs	r1, #96	; 0x60
 801b202:	565b      	ldrsb	r3, [r3, r1]
 801b204:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b206:	18d3      	adds	r3, r2, r3
 801b208:	b29b      	uxth	r3, r3
 801b20a:	3ba4      	subs	r3, #164	; 0xa4
 801b20c:	b29b      	uxth	r3, r3
 801b20e:	b219      	sxth	r1, r3
 801b210:	4b0c      	ldr	r3, [pc, #48]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b212:	2262      	movs	r2, #98	; 0x62
 801b214:	5299      	strh	r1, [r3, r2]
 801b216:	e033      	b.n	801b280 <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b218:	4b0a      	ldr	r3, [pc, #40]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b21a:	689b      	ldr	r3, [r3, #8]
 801b21c:	4a0f      	ldr	r2, [pc, #60]	; (801b25c <SX1276OnDio0Irq+0x334>)
 801b21e:	4293      	cmp	r3, r2
 801b220:	d91e      	bls.n	801b260 <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801b222:	1dbb      	adds	r3, r7, #6
 801b224:	2200      	movs	r2, #0
 801b226:	5e9b      	ldrsh	r3, [r3, r2]
 801b228:	111b      	asrs	r3, r3, #4
 801b22a:	b21b      	sxth	r3, r3
 801b22c:	b29a      	uxth	r2, r3
 801b22e:	1dbb      	adds	r3, r7, #6
 801b230:	881b      	ldrh	r3, [r3, #0]
 801b232:	18d3      	adds	r3, r2, r3
 801b234:	b29b      	uxth	r3, r3
 801b236:	3b9d      	subs	r3, #157	; 0x9d
 801b238:	b29b      	uxth	r3, r3
 801b23a:	b219      	sxth	r1, r3
 801b23c:	4b01      	ldr	r3, [pc, #4]	; (801b244 <SX1276OnDio0Irq+0x31c>)
 801b23e:	2262      	movs	r2, #98	; 0x62
 801b240:	5299      	strh	r1, [r3, r2]
 801b242:	e01d      	b.n	801b280 <SX1276OnDio0Irq+0x358>
 801b244:	2000176c 	.word	0x2000176c
 801b248:	200017d4 	.word	0x200017d4
 801b24c:	20001754 	.word	0x20001754
 801b250:	20000e7c 	.word	0x20000e7c
 801b254:	200017a6 	.word	0x200017a6
 801b258:	20000e80 	.word	0x20000e80
 801b25c:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801b260:	1dbb      	adds	r3, r7, #6
 801b262:	2200      	movs	r2, #0
 801b264:	5e9b      	ldrsh	r3, [r3, r2]
 801b266:	111b      	asrs	r3, r3, #4
 801b268:	b21b      	sxth	r3, r3
 801b26a:	b29a      	uxth	r2, r3
 801b26c:	1dbb      	adds	r3, r7, #6
 801b26e:	881b      	ldrh	r3, [r3, #0]
 801b270:	18d3      	adds	r3, r2, r3
 801b272:	b29b      	uxth	r3, r3
 801b274:	3ba4      	subs	r3, #164	; 0xa4
 801b276:	b29b      	uxth	r3, r3
 801b278:	b219      	sxth	r1, r3
 801b27a:	4b34      	ldr	r3, [pc, #208]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b27c:	2262      	movs	r2, #98	; 0x62
 801b27e:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801b280:	2013      	movs	r0, #19
 801b282:	f7ff fb7a 	bl	801a97a <SX1276Read>
 801b286:	0003      	movs	r3, r0
 801b288:	0019      	movs	r1, r3
 801b28a:	4b30      	ldr	r3, [pc, #192]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b28c:	2264      	movs	r2, #100	; 0x64
 801b28e:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801b290:	2010      	movs	r0, #16
 801b292:	f7ff fb72 	bl	801a97a <SX1276Read>
 801b296:	0003      	movs	r3, r0
 801b298:	0019      	movs	r1, r3
 801b29a:	200d      	movs	r0, #13
 801b29c:	f7ff fb5c 	bl	801a958 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801b2a0:	4b2a      	ldr	r3, [pc, #168]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b2a2:	2264      	movs	r2, #100	; 0x64
 801b2a4:	5c9a      	ldrb	r2, [r3, r2]
 801b2a6:	4b2a      	ldr	r3, [pc, #168]	; (801b350 <SX1276OnDio0Irq+0x428>)
 801b2a8:	0011      	movs	r1, r2
 801b2aa:	0018      	movs	r0, r3
 801b2ac:	f7ff fbf2 	bl	801aa94 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801b2b0:	4b26      	ldr	r3, [pc, #152]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b2b2:	2256      	movs	r2, #86	; 0x56
 801b2b4:	5c9b      	ldrb	r3, [r3, r2]
 801b2b6:	2201      	movs	r2, #1
 801b2b8:	4053      	eors	r3, r2
 801b2ba:	b2db      	uxtb	r3, r3
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d002      	beq.n	801b2c6 <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801b2c0:	4b22      	ldr	r3, [pc, #136]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801b2c6:	4b23      	ldr	r3, [pc, #140]	; (801b354 <SX1276OnDio0Irq+0x42c>)
 801b2c8:	0018      	movs	r0, r3
 801b2ca:	f001 f9b9 	bl	801c640 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b2ce:	4b22      	ldr	r3, [pc, #136]	; (801b358 <SX1276OnDio0Irq+0x430>)
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d016      	beq.n	801b304 <SX1276OnDio0Irq+0x3dc>
 801b2d6:	4b20      	ldr	r3, [pc, #128]	; (801b358 <SX1276OnDio0Irq+0x430>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	689b      	ldr	r3, [r3, #8]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d011      	beq.n	801b304 <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801b2e0:	4b1d      	ldr	r3, [pc, #116]	; (801b358 <SX1276OnDio0Irq+0x430>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	689c      	ldr	r4, [r3, #8]
 801b2e6:	4b19      	ldr	r3, [pc, #100]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b2e8:	2264      	movs	r2, #100	; 0x64
 801b2ea:	5c9b      	ldrb	r3, [r3, r2]
 801b2ec:	b299      	uxth	r1, r3
 801b2ee:	4b17      	ldr	r3, [pc, #92]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b2f0:	2262      	movs	r2, #98	; 0x62
 801b2f2:	5e9a      	ldrsh	r2, [r3, r2]
 801b2f4:	4b15      	ldr	r3, [pc, #84]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b2f6:	2060      	movs	r0, #96	; 0x60
 801b2f8:	561b      	ldrsb	r3, [r3, r0]
 801b2fa:	4815      	ldr	r0, [pc, #84]	; (801b350 <SX1276OnDio0Irq+0x428>)
 801b2fc:	47a0      	blx	r4
                break;
 801b2fe:	e001      	b.n	801b304 <SX1276OnDio0Irq+0x3dc>
                        break;
 801b300:	46c0      	nop			; (mov r8, r8)
 801b302:	e01f      	b.n	801b344 <SX1276OnDio0Irq+0x41c>
                break;
 801b304:	46c0      	nop			; (mov r8, r8)
            break;
 801b306:	e01d      	b.n	801b344 <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801b308:	4b14      	ldr	r3, [pc, #80]	; (801b35c <SX1276OnDio0Irq+0x434>)
 801b30a:	0018      	movs	r0, r3
 801b30c:	f001 f998 	bl	801c640 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801b310:	4b0e      	ldr	r3, [pc, #56]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b312:	795b      	ldrb	r3, [r3, #5]
 801b314:	2b01      	cmp	r3, #1
 801b316:	d103      	bne.n	801b320 <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801b318:	2108      	movs	r1, #8
 801b31a:	2012      	movs	r0, #18
 801b31c:	f7ff fb1c 	bl	801a958 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b320:	4b0a      	ldr	r3, [pc, #40]	; (801b34c <SX1276OnDio0Irq+0x424>)
 801b322:	2200      	movs	r2, #0
 801b324:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b326:	4b0c      	ldr	r3, [pc, #48]	; (801b358 <SX1276OnDio0Irq+0x430>)
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d008      	beq.n	801b340 <SX1276OnDio0Irq+0x418>
 801b32e:	4b0a      	ldr	r3, [pc, #40]	; (801b358 <SX1276OnDio0Irq+0x430>)
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d003      	beq.n	801b340 <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801b338:	4b07      	ldr	r3, [pc, #28]	; (801b358 <SX1276OnDio0Irq+0x430>)
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	4798      	blx	r3
                break;
 801b340:	46c0      	nop			; (mov r8, r8)
            break;
 801b342:	46c0      	nop			; (mov r8, r8)
    }
}
 801b344:	46c0      	nop			; (mov r8, r8)
 801b346:	46bd      	mov	sp, r7
 801b348:	b003      	add	sp, #12
 801b34a:	bd90      	pop	{r4, r7, pc}
 801b34c:	2000176c 	.word	0x2000176c
 801b350:	20000e80 	.word	0x20000e80
 801b354:	200017d4 	.word	0x200017d4
 801b358:	20000e7c 	.word	0x20000e7c
 801b35c:	2000173c 	.word	0x2000173c

0801b360 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801b360:	b580      	push	{r7, lr}
 801b362:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801b364:	4b6c      	ldr	r3, [pc, #432]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b366:	791b      	ldrb	r3, [r3, #4]
 801b368:	2b01      	cmp	r3, #1
 801b36a:	d003      	beq.n	801b374 <SX1276OnDio1Irq+0x14>
 801b36c:	2b02      	cmp	r3, #2
 801b36e:	d100      	bne.n	801b372 <SX1276OnDio1Irq+0x12>
 801b370:	e08b      	b.n	801b48a <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801b372:	e0ce      	b.n	801b512 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b374:	4b68      	ldr	r3, [pc, #416]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b376:	795b      	ldrb	r3, [r3, #5]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d002      	beq.n	801b382 <SX1276OnDio1Irq+0x22>
 801b37c:	2b01      	cmp	r3, #1
 801b37e:	d061      	beq.n	801b444 <SX1276OnDio1Irq+0xe4>
                break;
 801b380:	e082      	b.n	801b488 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b382:	f7ea fc9d 	bl	8005cc0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b386:	1e03      	subs	r3, r0, #0
 801b388:	d100      	bne.n	801b38c <SX1276OnDio1Irq+0x2c>
 801b38a:	e078      	b.n	801b47e <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801b38c:	4b63      	ldr	r3, [pc, #396]	; (801b51c <SX1276OnDio1Irq+0x1bc>)
 801b38e:	0018      	movs	r0, r3
 801b390:	f001 f956 	bl	801c640 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b394:	4b60      	ldr	r3, [pc, #384]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b396:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d118      	bne.n	801b3ce <SX1276OnDio1Irq+0x6e>
 801b39c:	4b5e      	ldr	r3, [pc, #376]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b39e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d114      	bne.n	801b3ce <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b3a4:	4b5c      	ldr	r3, [pc, #368]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b3a6:	2222      	movs	r2, #34	; 0x22
 801b3a8:	5c9b      	ldrb	r3, [r3, r2]
 801b3aa:	2201      	movs	r2, #1
 801b3ac:	4053      	eors	r3, r2
 801b3ae:	b2db      	uxtb	r3, r3
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d005      	beq.n	801b3c0 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b3b4:	4b5a      	ldr	r3, [pc, #360]	; (801b520 <SX1276OnDio1Irq+0x1c0>)
 801b3b6:	2101      	movs	r1, #1
 801b3b8:	0018      	movs	r0, r3
 801b3ba:	f7ff fb6b 	bl	801aa94 <SX1276ReadFifo>
 801b3be:	e006      	b.n	801b3ce <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b3c0:	2032      	movs	r0, #50	; 0x32
 801b3c2:	f7ff fada 	bl	801a97a <SX1276Read>
 801b3c6:	0003      	movs	r3, r0
 801b3c8:	b29a      	uxth	r2, r3
 801b3ca:	4b53      	ldr	r3, [pc, #332]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b3cc:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801b3ce:	4b52      	ldr	r3, [pc, #328]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b3d0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b3d2:	001a      	movs	r2, r3
 801b3d4:	4b50      	ldr	r3, [pc, #320]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b3d6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b3d8:	1ad3      	subs	r3, r2, r3
 801b3da:	4a4f      	ldr	r2, [pc, #316]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b3dc:	213e      	movs	r1, #62	; 0x3e
 801b3de:	5c52      	ldrb	r2, [r2, r1]
 801b3e0:	4293      	cmp	r3, r2
 801b3e2:	db1a      	blt.n	801b41a <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801b3e4:	4b4c      	ldr	r3, [pc, #304]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b3e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b3e8:	001a      	movs	r2, r3
 801b3ea:	4b4e      	ldr	r3, [pc, #312]	; (801b524 <SX1276OnDio1Irq+0x1c4>)
 801b3ec:	18d2      	adds	r2, r2, r3
 801b3ee:	4b4a      	ldr	r3, [pc, #296]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b3f0:	213e      	movs	r1, #62	; 0x3e
 801b3f2:	5c5b      	ldrb	r3, [r3, r1]
 801b3f4:	3b01      	subs	r3, #1
 801b3f6:	b2db      	uxtb	r3, r3
 801b3f8:	0019      	movs	r1, r3
 801b3fa:	0010      	movs	r0, r2
 801b3fc:	f7ff fb4a 	bl	801aa94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801b400:	4b45      	ldr	r3, [pc, #276]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b402:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b404:	4b44      	ldr	r3, [pc, #272]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b406:	213e      	movs	r1, #62	; 0x3e
 801b408:	5c5b      	ldrb	r3, [r3, r1]
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	18d3      	adds	r3, r2, r3
 801b40e:	b29b      	uxth	r3, r3
 801b410:	3b01      	subs	r3, #1
 801b412:	b29a      	uxth	r2, r3
 801b414:	4b40      	ldr	r3, [pc, #256]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b416:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b418:	e036      	b.n	801b488 <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b41a:	4b3f      	ldr	r3, [pc, #252]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b41c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b41e:	001a      	movs	r2, r3
 801b420:	4b40      	ldr	r3, [pc, #256]	; (801b524 <SX1276OnDio1Irq+0x1c4>)
 801b422:	18d0      	adds	r0, r2, r3
 801b424:	4b3c      	ldr	r3, [pc, #240]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b426:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b428:	b2da      	uxtb	r2, r3
 801b42a:	4b3b      	ldr	r3, [pc, #236]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b42c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b42e:	b2db      	uxtb	r3, r3
 801b430:	1ad3      	subs	r3, r2, r3
 801b432:	b2db      	uxtb	r3, r3
 801b434:	0019      	movs	r1, r3
 801b436:	f7ff fb2d 	bl	801aa94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b43a:	4b37      	ldr	r3, [pc, #220]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b43c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b43e:	4b36      	ldr	r3, [pc, #216]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b440:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b442:	e021      	b.n	801b488 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b444:	f7ea fc3c 	bl	8005cc0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b448:	1e03      	subs	r3, r0, #0
 801b44a:	d01a      	beq.n	801b482 <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801b44c:	4b36      	ldr	r3, [pc, #216]	; (801b528 <SX1276OnDio1Irq+0x1c8>)
 801b44e:	0018      	movs	r0, r3
 801b450:	f001 f8f6 	bl	801c640 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801b454:	2180      	movs	r1, #128	; 0x80
 801b456:	2012      	movs	r0, #18
 801b458:	f7ff fa7e 	bl	801a958 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b45c:	4b2e      	ldr	r3, [pc, #184]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b45e:	2200      	movs	r2, #0
 801b460:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b462:	4b32      	ldr	r3, [pc, #200]	; (801b52c <SX1276OnDio1Irq+0x1cc>)
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d00d      	beq.n	801b486 <SX1276OnDio1Irq+0x126>
 801b46a:	4b30      	ldr	r3, [pc, #192]	; (801b52c <SX1276OnDio1Irq+0x1cc>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	68db      	ldr	r3, [r3, #12]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d008      	beq.n	801b486 <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801b474:	4b2d      	ldr	r3, [pc, #180]	; (801b52c <SX1276OnDio1Irq+0x1cc>)
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	68db      	ldr	r3, [r3, #12]
 801b47a:	4798      	blx	r3
                break;
 801b47c:	e003      	b.n	801b486 <SX1276OnDio1Irq+0x126>
                    break;
 801b47e:	46c0      	nop			; (mov r8, r8)
 801b480:	e047      	b.n	801b512 <SX1276OnDio1Irq+0x1b2>
                    break;
 801b482:	46c0      	nop			; (mov r8, r8)
 801b484:	e045      	b.n	801b512 <SX1276OnDio1Irq+0x1b2>
                break;
 801b486:	46c0      	nop			; (mov r8, r8)
            break;
 801b488:	e043      	b.n	801b512 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b48a:	4b23      	ldr	r3, [pc, #140]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b48c:	795b      	ldrb	r3, [r3, #5]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d13b      	bne.n	801b50a <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801b492:	f7ea fc15 	bl	8005cc0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b496:	0003      	movs	r3, r0
 801b498:	2b01      	cmp	r3, #1
 801b49a:	d038      	beq.n	801b50e <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801b49c:	4b1e      	ldr	r3, [pc, #120]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b49e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b4a0:	001a      	movs	r2, r3
 801b4a2:	4b1d      	ldr	r3, [pc, #116]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4a4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4a6:	1ad3      	subs	r3, r2, r3
 801b4a8:	4a1b      	ldr	r2, [pc, #108]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4aa:	213f      	movs	r1, #63	; 0x3f
 801b4ac:	5c52      	ldrb	r2, [r2, r1]
 801b4ae:	4293      	cmp	r3, r2
 801b4b0:	dd16      	ble.n	801b4e0 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801b4b2:	4b19      	ldr	r3, [pc, #100]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4b6:	001a      	movs	r2, r3
 801b4b8:	4b1a      	ldr	r3, [pc, #104]	; (801b524 <SX1276OnDio1Irq+0x1c4>)
 801b4ba:	18d2      	adds	r2, r2, r3
 801b4bc:	4b16      	ldr	r3, [pc, #88]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4be:	213f      	movs	r1, #63	; 0x3f
 801b4c0:	5c5b      	ldrb	r3, [r3, r1]
 801b4c2:	0019      	movs	r1, r3
 801b4c4:	0010      	movs	r0, r2
 801b4c6:	f7ff fad3 	bl	801aa70 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801b4ca:	4b13      	ldr	r3, [pc, #76]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4cc:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b4ce:	4b12      	ldr	r3, [pc, #72]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4d0:	213f      	movs	r1, #63	; 0x3f
 801b4d2:	5c5b      	ldrb	r3, [r3, r1]
 801b4d4:	b29b      	uxth	r3, r3
 801b4d6:	18d3      	adds	r3, r2, r3
 801b4d8:	b29a      	uxth	r2, r3
 801b4da:	4b0f      	ldr	r3, [pc, #60]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4dc:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b4de:	e017      	b.n	801b510 <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b4e0:	4b0d      	ldr	r3, [pc, #52]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4e4:	001a      	movs	r2, r3
 801b4e6:	4b0f      	ldr	r3, [pc, #60]	; (801b524 <SX1276OnDio1Irq+0x1c4>)
 801b4e8:	18d0      	adds	r0, r2, r3
 801b4ea:	4b0b      	ldr	r3, [pc, #44]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b4ee:	b2da      	uxtb	r2, r3
 801b4f0:	4b09      	ldr	r3, [pc, #36]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b4f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4f4:	b2db      	uxtb	r3, r3
 801b4f6:	1ad3      	subs	r3, r2, r3
 801b4f8:	b2db      	uxtb	r3, r3
 801b4fa:	0019      	movs	r1, r3
 801b4fc:	f7ff fab8 	bl	801aa70 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801b500:	4b05      	ldr	r3, [pc, #20]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b502:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b504:	4b04      	ldr	r3, [pc, #16]	; (801b518 <SX1276OnDio1Irq+0x1b8>)
 801b506:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b508:	e002      	b.n	801b510 <SX1276OnDio1Irq+0x1b0>
                break;
 801b50a:	46c0      	nop			; (mov r8, r8)
 801b50c:	e000      	b.n	801b510 <SX1276OnDio1Irq+0x1b0>
                    break;
 801b50e:	46c0      	nop			; (mov r8, r8)
            break;
 801b510:	46c0      	nop			; (mov r8, r8)
    }
}
 801b512:	46c0      	nop			; (mov r8, r8)
 801b514:	46bd      	mov	sp, r7
 801b516:	bd80      	pop	{r7, pc}
 801b518:	2000176c 	.word	0x2000176c
 801b51c:	20001754 	.word	0x20001754
 801b520:	200017a6 	.word	0x200017a6
 801b524:	20000e80 	.word	0x20000e80
 801b528:	200017d4 	.word	0x200017d4
 801b52c:	20000e7c 	.word	0x20000e7c

0801b530 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801b530:	b590      	push	{r4, r7, lr}
 801b532:	b085      	sub	sp, #20
 801b534:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801b536:	2300      	movs	r3, #0
 801b538:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801b53a:	4b5d      	ldr	r3, [pc, #372]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b53c:	791b      	ldrb	r3, [r3, #4]
 801b53e:	2b01      	cmp	r3, #1
 801b540:	d003      	beq.n	801b54a <SX1276OnDio2Irq+0x1a>
 801b542:	2b02      	cmp	r3, #2
 801b544:	d100      	bne.n	801b548 <SX1276OnDio2Irq+0x18>
 801b546:	e083      	b.n	801b650 <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801b548:	e0ae      	b.n	801b6a8 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801b54a:	4b59      	ldr	r3, [pc, #356]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b54c:	795b      	ldrb	r3, [r3, #5]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d002      	beq.n	801b558 <SX1276OnDio2Irq+0x28>
 801b552:	2b01      	cmp	r3, #1
 801b554:	d058      	beq.n	801b608 <SX1276OnDio2Irq+0xd8>
                break;
 801b556:	e07a      	b.n	801b64e <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801b558:	4b55      	ldr	r3, [pc, #340]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b55a:	2230      	movs	r2, #48	; 0x30
 801b55c:	2101      	movs	r1, #1
 801b55e:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801b560:	4b53      	ldr	r3, [pc, #332]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b562:	2230      	movs	r2, #48	; 0x30
 801b564:	5c9b      	ldrb	r3, [r3, r2]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d06e      	beq.n	801b648 <SX1276OnDio2Irq+0x118>
 801b56a:	4b51      	ldr	r3, [pc, #324]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b56c:	2231      	movs	r2, #49	; 0x31
 801b56e:	5c9b      	ldrb	r3, [r3, r2]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d169      	bne.n	801b648 <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801b574:	4b4f      	ldr	r3, [pc, #316]	; (801b6b4 <SX1276OnDio2Irq+0x184>)
 801b576:	0018      	movs	r0, r3
 801b578:	f001 f862 	bl	801c640 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801b57c:	4b4c      	ldr	r3, [pc, #304]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b57e:	2231      	movs	r2, #49	; 0x31
 801b580:	2101      	movs	r1, #1
 801b582:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801b584:	2011      	movs	r0, #17
 801b586:	f7ff f9f8 	bl	801a97a <SX1276Read>
 801b58a:	0003      	movs	r3, r0
 801b58c:	085b      	lsrs	r3, r3, #1
 801b58e:	b2db      	uxtb	r3, r3
 801b590:	425b      	negs	r3, r3
 801b592:	b2db      	uxtb	r3, r3
 801b594:	b259      	sxtb	r1, r3
 801b596:	4b46      	ldr	r3, [pc, #280]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b598:	2232      	movs	r2, #50	; 0x32
 801b59a:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801b59c:	201b      	movs	r0, #27
 801b59e:	f7ff f9ec 	bl	801a97a <SX1276Read>
 801b5a2:	0003      	movs	r3, r0
 801b5a4:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801b5a6:	201c      	movs	r0, #28
 801b5a8:	f7ff f9e7 	bl	801a97a <SX1276Read>
 801b5ac:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801b5ae:	4323      	orrs	r3, r4
 801b5b0:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	0a1b      	lsrs	r3, r3, #8
 801b5b6:	60bb      	str	r3, [r7, #8]
 801b5b8:	68bb      	ldr	r3, [r7, #8]
 801b5ba:	021b      	lsls	r3, r3, #8
 801b5bc:	68fa      	ldr	r2, [r7, #12]
 801b5be:	1ad3      	subs	r3, r2, r3
 801b5c0:	607b      	str	r3, [r7, #4]
 801b5c2:	68b9      	ldr	r1, [r7, #8]
 801b5c4:	000b      	movs	r3, r1
 801b5c6:	015b      	lsls	r3, r3, #5
 801b5c8:	1a5b      	subs	r3, r3, r1
 801b5ca:	019a      	lsls	r2, r3, #6
 801b5cc:	1ad2      	subs	r2, r2, r3
 801b5ce:	00d2      	lsls	r2, r2, #3
 801b5d0:	1850      	adds	r0, r2, r1
 801b5d2:	6879      	ldr	r1, [r7, #4]
 801b5d4:	000b      	movs	r3, r1
 801b5d6:	015b      	lsls	r3, r3, #5
 801b5d8:	1a5b      	subs	r3, r3, r1
 801b5da:	019a      	lsls	r2, r3, #6
 801b5dc:	1ad2      	subs	r2, r2, r3
 801b5de:	00d2      	lsls	r2, r2, #3
 801b5e0:	1853      	adds	r3, r2, r1
 801b5e2:	3380      	adds	r3, #128	; 0x80
 801b5e4:	0a1b      	lsrs	r3, r3, #8
 801b5e6:	18c3      	adds	r3, r0, r3
 801b5e8:	001a      	movs	r2, r3
 801b5ea:	4b31      	ldr	r3, [pc, #196]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b5ec:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801b5ee:	200c      	movs	r0, #12
 801b5f0:	f7ff f9c3 	bl	801a97a <SX1276Read>
 801b5f4:	0003      	movs	r3, r0
 801b5f6:	095b      	lsrs	r3, r3, #5
 801b5f8:	b2db      	uxtb	r3, r3
 801b5fa:	2207      	movs	r2, #7
 801b5fc:	4013      	ands	r3, r2
 801b5fe:	b2d9      	uxtb	r1, r3
 801b600:	4b2b      	ldr	r3, [pc, #172]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b602:	2238      	movs	r2, #56	; 0x38
 801b604:	5499      	strb	r1, [r3, r2]
                break;
 801b606:	e01f      	b.n	801b648 <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b608:	4b29      	ldr	r3, [pc, #164]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b60a:	2253      	movs	r2, #83	; 0x53
 801b60c:	5c9b      	ldrb	r3, [r3, r2]
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d01c      	beq.n	801b64c <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801b612:	2102      	movs	r1, #2
 801b614:	2012      	movs	r0, #18
 801b616:	f7ff f99f 	bl	801a958 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801b61a:	4b27      	ldr	r3, [pc, #156]	; (801b6b8 <SX1276OnDio2Irq+0x188>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d014      	beq.n	801b64c <SX1276OnDio2Irq+0x11c>
 801b622:	4b25      	ldr	r3, [pc, #148]	; (801b6b8 <SX1276OnDio2Irq+0x188>)
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	695b      	ldr	r3, [r3, #20]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d00f      	beq.n	801b64c <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801b62c:	4b22      	ldr	r3, [pc, #136]	; (801b6b8 <SX1276OnDio2Irq+0x188>)
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	695c      	ldr	r4, [r3, #20]
 801b632:	201c      	movs	r0, #28
 801b634:	f7ff f9a1 	bl	801a97a <SX1276Read>
 801b638:	0003      	movs	r3, r0
 801b63a:	001a      	movs	r2, r3
 801b63c:	233f      	movs	r3, #63	; 0x3f
 801b63e:	4013      	ands	r3, r2
 801b640:	b2db      	uxtb	r3, r3
 801b642:	0018      	movs	r0, r3
 801b644:	47a0      	blx	r4
                break;
 801b646:	e001      	b.n	801b64c <SX1276OnDio2Irq+0x11c>
                break;
 801b648:	46c0      	nop			; (mov r8, r8)
 801b64a:	e02d      	b.n	801b6a8 <SX1276OnDio2Irq+0x178>
                break;
 801b64c:	46c0      	nop			; (mov r8, r8)
            break;
 801b64e:	e02b      	b.n	801b6a8 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801b650:	4b17      	ldr	r3, [pc, #92]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b652:	795b      	ldrb	r3, [r3, #5]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d021      	beq.n	801b69c <SX1276OnDio2Irq+0x16c>
 801b658:	2b01      	cmp	r3, #1
 801b65a:	d121      	bne.n	801b6a0 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b65c:	4b14      	ldr	r3, [pc, #80]	; (801b6b0 <SX1276OnDio2Irq+0x180>)
 801b65e:	2253      	movs	r2, #83	; 0x53
 801b660:	5c9b      	ldrb	r3, [r3, r2]
 801b662:	2b00      	cmp	r3, #0
 801b664:	d01e      	beq.n	801b6a4 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801b666:	2102      	movs	r1, #2
 801b668:	2012      	movs	r0, #18
 801b66a:	f7ff f975 	bl	801a958 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801b66e:	4b12      	ldr	r3, [pc, #72]	; (801b6b8 <SX1276OnDio2Irq+0x188>)
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d016      	beq.n	801b6a4 <SX1276OnDio2Irq+0x174>
 801b676:	4b10      	ldr	r3, [pc, #64]	; (801b6b8 <SX1276OnDio2Irq+0x188>)
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	695b      	ldr	r3, [r3, #20]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d011      	beq.n	801b6a4 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801b680:	4b0d      	ldr	r3, [pc, #52]	; (801b6b8 <SX1276OnDio2Irq+0x188>)
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	695c      	ldr	r4, [r3, #20]
 801b686:	201c      	movs	r0, #28
 801b688:	f7ff f977 	bl	801a97a <SX1276Read>
 801b68c:	0003      	movs	r3, r0
 801b68e:	001a      	movs	r2, r3
 801b690:	233f      	movs	r3, #63	; 0x3f
 801b692:	4013      	ands	r3, r2
 801b694:	b2db      	uxtb	r3, r3
 801b696:	0018      	movs	r0, r3
 801b698:	47a0      	blx	r4
                break;
 801b69a:	e003      	b.n	801b6a4 <SX1276OnDio2Irq+0x174>
                break;
 801b69c:	46c0      	nop			; (mov r8, r8)
 801b69e:	e002      	b.n	801b6a6 <SX1276OnDio2Irq+0x176>
                break;
 801b6a0:	46c0      	nop			; (mov r8, r8)
 801b6a2:	e000      	b.n	801b6a6 <SX1276OnDio2Irq+0x176>
                break;
 801b6a4:	46c0      	nop			; (mov r8, r8)
            break;
 801b6a6:	46c0      	nop			; (mov r8, r8)
    }
}
 801b6a8:	46c0      	nop			; (mov r8, r8)
 801b6aa:	46bd      	mov	sp, r7
 801b6ac:	b005      	add	sp, #20
 801b6ae:	bd90      	pop	{r4, r7, pc}
 801b6b0:	2000176c 	.word	0x2000176c
 801b6b4:	20001754 	.word	0x20001754
 801b6b8:	20000e7c 	.word	0x20000e7c

0801b6bc <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b6c0:	4b1d      	ldr	r3, [pc, #116]	; (801b738 <SX1276OnDio3Irq+0x7c>)
 801b6c2:	795b      	ldrb	r3, [r3, #5]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d031      	beq.n	801b72c <SX1276OnDio3Irq+0x70>
 801b6c8:	2b01      	cmp	r3, #1
 801b6ca:	d000      	beq.n	801b6ce <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801b6cc:	e031      	b.n	801b732 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801b6ce:	2012      	movs	r0, #18
 801b6d0:	f7ff f953 	bl	801a97a <SX1276Read>
 801b6d4:	0003      	movs	r3, r0
 801b6d6:	001a      	movs	r2, r3
 801b6d8:	2301      	movs	r3, #1
 801b6da:	4013      	ands	r3, r2
 801b6dc:	2b01      	cmp	r3, #1
 801b6de:	d112      	bne.n	801b706 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801b6e0:	2105      	movs	r1, #5
 801b6e2:	2012      	movs	r0, #18
 801b6e4:	f7ff f938 	bl	801a958 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b6e8:	4b14      	ldr	r3, [pc, #80]	; (801b73c <SX1276OnDio3Irq+0x80>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d01f      	beq.n	801b730 <SX1276OnDio3Irq+0x74>
 801b6f0:	4b12      	ldr	r3, [pc, #72]	; (801b73c <SX1276OnDio3Irq+0x80>)
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	699b      	ldr	r3, [r3, #24]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d01a      	beq.n	801b730 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801b6fa:	4b10      	ldr	r3, [pc, #64]	; (801b73c <SX1276OnDio3Irq+0x80>)
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	699b      	ldr	r3, [r3, #24]
 801b700:	2001      	movs	r0, #1
 801b702:	4798      	blx	r3
        break;
 801b704:	e014      	b.n	801b730 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801b706:	2104      	movs	r1, #4
 801b708:	2012      	movs	r0, #18
 801b70a:	f7ff f925 	bl	801a958 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b70e:	4b0b      	ldr	r3, [pc, #44]	; (801b73c <SX1276OnDio3Irq+0x80>)
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d00c      	beq.n	801b730 <SX1276OnDio3Irq+0x74>
 801b716:	4b09      	ldr	r3, [pc, #36]	; (801b73c <SX1276OnDio3Irq+0x80>)
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	699b      	ldr	r3, [r3, #24]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d007      	beq.n	801b730 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801b720:	4b06      	ldr	r3, [pc, #24]	; (801b73c <SX1276OnDio3Irq+0x80>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	699b      	ldr	r3, [r3, #24]
 801b726:	2000      	movs	r0, #0
 801b728:	4798      	blx	r3
        break;
 801b72a:	e001      	b.n	801b730 <SX1276OnDio3Irq+0x74>
        break;
 801b72c:	46c0      	nop			; (mov r8, r8)
 801b72e:	e000      	b.n	801b732 <SX1276OnDio3Irq+0x76>
        break;
 801b730:	46c0      	nop			; (mov r8, r8)
    }
}
 801b732:	46c0      	nop			; (mov r8, r8)
 801b734:	46bd      	mov	sp, r7
 801b736:	bd80      	pop	{r7, pc}
 801b738:	2000176c 	.word	0x2000176c
 801b73c:	20000e7c 	.word	0x20000e7c

0801b740 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801b740:	b580      	push	{r7, lr}
 801b742:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b744:	4b0b      	ldr	r3, [pc, #44]	; (801b774 <SX1276OnDio4Irq+0x34>)
 801b746:	795b      	ldrb	r3, [r3, #5]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d002      	beq.n	801b752 <SX1276OnDio4Irq+0x12>
 801b74c:	2b01      	cmp	r3, #1
 801b74e:	d00a      	beq.n	801b766 <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801b750:	e00c      	b.n	801b76c <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801b752:	4b08      	ldr	r3, [pc, #32]	; (801b774 <SX1276OnDio4Irq+0x34>)
 801b754:	2230      	movs	r2, #48	; 0x30
 801b756:	5c9b      	ldrb	r3, [r3, r2]
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d106      	bne.n	801b76a <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801b75c:	4b05      	ldr	r3, [pc, #20]	; (801b774 <SX1276OnDio4Irq+0x34>)
 801b75e:	2230      	movs	r2, #48	; 0x30
 801b760:	2101      	movs	r1, #1
 801b762:	5499      	strb	r1, [r3, r2]
        break;
 801b764:	e001      	b.n	801b76a <SX1276OnDio4Irq+0x2a>
        break;
 801b766:	46c0      	nop			; (mov r8, r8)
 801b768:	e000      	b.n	801b76c <SX1276OnDio4Irq+0x2c>
        break;
 801b76a:	46c0      	nop			; (mov r8, r8)
    }
}
 801b76c:	46c0      	nop			; (mov r8, r8)
 801b76e:	46bd      	mov	sp, r7
 801b770:	bd80      	pop	{r7, pc}
 801b772:	46c0      	nop			; (mov r8, r8)
 801b774:	2000176c 	.word	0x2000176c

0801b778 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b77c:	4b0a      	ldr	r3, [pc, #40]	; (801b7a8 <UTIL_ADV_TRACE_Init+0x30>)
 801b77e:	2218      	movs	r2, #24
 801b780:	2100      	movs	r1, #0
 801b782:	0018      	movs	r0, r3
 801b784:	f000 fbb8 	bl	801bef8 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b788:	2380      	movs	r3, #128	; 0x80
 801b78a:	009a      	lsls	r2, r3, #2
 801b78c:	4b07      	ldr	r3, [pc, #28]	; (801b7ac <UTIL_ADV_TRACE_Init+0x34>)
 801b78e:	2100      	movs	r1, #0
 801b790:	0018      	movs	r0, r3
 801b792:	f000 fbb1 	bl	801bef8 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b796:	4b06      	ldr	r3, [pc, #24]	; (801b7b0 <UTIL_ADV_TRACE_Init+0x38>)
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	4a06      	ldr	r2, [pc, #24]	; (801b7b4 <UTIL_ADV_TRACE_Init+0x3c>)
 801b79c:	0010      	movs	r0, r2
 801b79e:	4798      	blx	r3
 801b7a0:	0003      	movs	r3, r0
}
 801b7a2:	0018      	movs	r0, r3
 801b7a4:	46bd      	mov	sp, r7
 801b7a6:	bd80      	pop	{r7, pc}
 801b7a8:	20000f80 	.word	0x20000f80
 801b7ac:	20000f98 	.word	0x20000f98
 801b7b0:	0801e688 	.word	0x0801e688
 801b7b4:	0801ba39 	.word	0x0801ba39

0801b7b8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b7b8:	b408      	push	{r3}
 801b7ba:	b590      	push	{r4, r7, lr}
 801b7bc:	b08c      	sub	sp, #48	; 0x30
 801b7be:	af00      	add	r7, sp, #0
 801b7c0:	60f8      	str	r0, [r7, #12]
 801b7c2:	60b9      	str	r1, [r7, #8]
 801b7c4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b7c6:	2316      	movs	r3, #22
 801b7c8:	18fb      	adds	r3, r7, r3
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b7ce:	232c      	movs	r3, #44	; 0x2c
 801b7d0:	18fb      	adds	r3, r7, r3
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b7d6:	4b41      	ldr	r3, [pc, #260]	; (801b8dc <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b7d8:	7a1b      	ldrb	r3, [r3, #8]
 801b7da:	001a      	movs	r2, r3
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	4293      	cmp	r3, r2
 801b7e0:	d902      	bls.n	801b7e8 <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b7e2:	2305      	movs	r3, #5
 801b7e4:	425b      	negs	r3, r3
 801b7e6:	e072      	b.n	801b8ce <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b7e8:	4b3c      	ldr	r3, [pc, #240]	; (801b8dc <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b7ea:	68db      	ldr	r3, [r3, #12]
 801b7ec:	68ba      	ldr	r2, [r7, #8]
 801b7ee:	4013      	ands	r3, r2
 801b7f0:	68ba      	ldr	r2, [r7, #8]
 801b7f2:	429a      	cmp	r2, r3
 801b7f4:	d002      	beq.n	801b7fc <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b7f6:	2306      	movs	r3, #6
 801b7f8:	425b      	negs	r3, r3
 801b7fa:	e068      	b.n	801b8ce <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b7fc:	4b37      	ldr	r3, [pc, #220]	; (801b8dc <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	2b00      	cmp	r3, #0
 801b802:	d00a      	beq.n	801b81a <UTIL_ADV_TRACE_COND_FSend+0x62>
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	2b00      	cmp	r3, #0
 801b808:	d007      	beq.n	801b81a <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b80a:	4b34      	ldr	r3, [pc, #208]	; (801b8dc <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b80c:	685b      	ldr	r3, [r3, #4]
 801b80e:	2216      	movs	r2, #22
 801b810:	18b9      	adds	r1, r7, r2
 801b812:	2218      	movs	r2, #24
 801b814:	18ba      	adds	r2, r7, r2
 801b816:	0010      	movs	r0, r2
 801b818:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b81a:	2340      	movs	r3, #64	; 0x40
 801b81c:	18fb      	adds	r3, r7, r3
 801b81e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b824:	2180      	movs	r1, #128	; 0x80
 801b826:	0049      	lsls	r1, r1, #1
 801b828:	482d      	ldr	r0, [pc, #180]	; (801b8e0 <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801b82a:	f001 fa13 	bl	801cc54 <tiny_vsnprintf_like>
 801b82e:	0002      	movs	r2, r0
 801b830:	242c      	movs	r4, #44	; 0x2c
 801b832:	193b      	adds	r3, r7, r4
 801b834:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801b836:	f000 fa23 	bl	801bc80 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b83a:	2316      	movs	r3, #22
 801b83c:	18fb      	adds	r3, r7, r3
 801b83e:	881a      	ldrh	r2, [r3, #0]
 801b840:	193b      	adds	r3, r7, r4
 801b842:	881b      	ldrh	r3, [r3, #0]
 801b844:	18d3      	adds	r3, r2, r3
 801b846:	b29b      	uxth	r3, r3
 801b848:	2214      	movs	r2, #20
 801b84a:	18ba      	adds	r2, r7, r2
 801b84c:	0011      	movs	r1, r2
 801b84e:	0018      	movs	r0, r3
 801b850:	f000 f97c 	bl	801bb4c <TRACE_AllocateBufer>
 801b854:	0003      	movs	r3, r0
 801b856:	3301      	adds	r3, #1
 801b858:	d035      	beq.n	801b8c6 <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b85a:	232e      	movs	r3, #46	; 0x2e
 801b85c:	18fb      	adds	r3, r7, r3
 801b85e:	2200      	movs	r2, #0
 801b860:	801a      	strh	r2, [r3, #0]
 801b862:	e016      	b.n	801b892 <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b864:	202e      	movs	r0, #46	; 0x2e
 801b866:	183b      	adds	r3, r7, r0
 801b868:	881b      	ldrh	r3, [r3, #0]
 801b86a:	2414      	movs	r4, #20
 801b86c:	193a      	adds	r2, r7, r4
 801b86e:	8812      	ldrh	r2, [r2, #0]
 801b870:	0011      	movs	r1, r2
 801b872:	2218      	movs	r2, #24
 801b874:	18ba      	adds	r2, r7, r2
 801b876:	5cd2      	ldrb	r2, [r2, r3]
 801b878:	4b1a      	ldr	r3, [pc, #104]	; (801b8e4 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801b87a:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801b87c:	193b      	adds	r3, r7, r4
 801b87e:	881b      	ldrh	r3, [r3, #0]
 801b880:	3301      	adds	r3, #1
 801b882:	b29a      	uxth	r2, r3
 801b884:	193b      	adds	r3, r7, r4
 801b886:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b888:	183b      	adds	r3, r7, r0
 801b88a:	881a      	ldrh	r2, [r3, #0]
 801b88c:	183b      	adds	r3, r7, r0
 801b88e:	3201      	adds	r2, #1
 801b890:	801a      	strh	r2, [r3, #0]
 801b892:	2316      	movs	r3, #22
 801b894:	18fb      	adds	r3, r7, r3
 801b896:	881b      	ldrh	r3, [r3, #0]
 801b898:	222e      	movs	r2, #46	; 0x2e
 801b89a:	18ba      	adds	r2, r7, r2
 801b89c:	8812      	ldrh	r2, [r2, #0]
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	d3e0      	bcc.n	801b864 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b8a2:	2314      	movs	r3, #20
 801b8a4:	18fb      	adds	r3, r7, r3
 801b8a6:	881b      	ldrh	r3, [r3, #0]
 801b8a8:	001a      	movs	r2, r3
 801b8aa:	4b0e      	ldr	r3, [pc, #56]	; (801b8e4 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801b8ac:	18d0      	adds	r0, r2, r3
 801b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b8b2:	2180      	movs	r1, #128	; 0x80
 801b8b4:	0049      	lsls	r1, r1, #1
 801b8b6:	f001 f9cd 	bl	801cc54 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b8ba:	f000 f9fd 	bl	801bcb8 <TRACE_UnLock>

    return TRACE_Send();
 801b8be:	f000 f831 	bl	801b924 <TRACE_Send>
 801b8c2:	0003      	movs	r3, r0
 801b8c4:	e003      	b.n	801b8ce <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b8c6:	f000 f9f7 	bl	801bcb8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b8ca:	2303      	movs	r3, #3
 801b8cc:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b8ce:	0018      	movs	r0, r3
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	b00c      	add	sp, #48	; 0x30
 801b8d4:	bc90      	pop	{r4, r7}
 801b8d6:	bc08      	pop	{r3}
 801b8d8:	b001      	add	sp, #4
 801b8da:	4718      	bx	r3
 801b8dc:	20000f80 	.word	0x20000f80
 801b8e0:	20001198 	.word	0x20001198
 801b8e4:	20000f98 	.word	0x20000f98

0801b8e8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b8e8:	b580      	push	{r7, lr}
 801b8ea:	b082      	sub	sp, #8
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801b8f0:	4b03      	ldr	r3, [pc, #12]	; (801b900 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b8f2:	687a      	ldr	r2, [r7, #4]
 801b8f4:	605a      	str	r2, [r3, #4]
}
 801b8f6:	46c0      	nop			; (mov r8, r8)
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	b002      	add	sp, #8
 801b8fc:	bd80      	pop	{r7, pc}
 801b8fe:	46c0      	nop			; (mov r8, r8)
 801b900:	20000f80 	.word	0x20000f80

0801b904 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b082      	sub	sp, #8
 801b908:	af00      	add	r7, sp, #0
 801b90a:	0002      	movs	r2, r0
 801b90c:	1dfb      	adds	r3, r7, #7
 801b90e:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b910:	4b03      	ldr	r3, [pc, #12]	; (801b920 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b912:	1dfa      	adds	r2, r7, #7
 801b914:	7812      	ldrb	r2, [r2, #0]
 801b916:	721a      	strb	r2, [r3, #8]
}
 801b918:	46c0      	nop			; (mov r8, r8)
 801b91a:	46bd      	mov	sp, r7
 801b91c:	b002      	add	sp, #8
 801b91e:	bd80      	pop	{r7, pc}
 801b920:	20000f80 	.word	0x20000f80

0801b924 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b924:	b590      	push	{r4, r7, lr}
 801b926:	b089      	sub	sp, #36	; 0x24
 801b928:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801b92a:	231f      	movs	r3, #31
 801b92c:	18fb      	adds	r3, r7, r3
 801b92e:	2200      	movs	r2, #0
 801b930:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801b932:	2300      	movs	r3, #0
 801b934:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b936:	f3ef 8310 	mrs	r3, PRIMASK
 801b93a:	613b      	str	r3, [r7, #16]
  return(result);
 801b93c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801b93e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b940:	b672      	cpsid	i
}
 801b942:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801b944:	f000 f9d4 	bl	801bcf0 <TRACE_IsLocked>
 801b948:	1e03      	subs	r3, r0, #0
 801b94a:	d160      	bne.n	801ba0e <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801b94c:	f000 f998 	bl	801bc80 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b950:	4b36      	ldr	r3, [pc, #216]	; (801ba2c <TRACE_Send+0x108>)
 801b952:	8a1a      	ldrh	r2, [r3, #16]
 801b954:	4b35      	ldr	r3, [pc, #212]	; (801ba2c <TRACE_Send+0x108>)
 801b956:	8a5b      	ldrh	r3, [r3, #18]
 801b958:	429a      	cmp	r2, r3
 801b95a:	d050      	beq.n	801b9fe <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b95c:	4b33      	ldr	r3, [pc, #204]	; (801ba2c <TRACE_Send+0x108>)
 801b95e:	789b      	ldrb	r3, [r3, #2]
 801b960:	2b01      	cmp	r3, #1
 801b962:	d117      	bne.n	801b994 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b964:	4b31      	ldr	r3, [pc, #196]	; (801ba2c <TRACE_Send+0x108>)
 801b966:	881a      	ldrh	r2, [r3, #0]
 801b968:	4b30      	ldr	r3, [pc, #192]	; (801ba2c <TRACE_Send+0x108>)
 801b96a:	8a1b      	ldrh	r3, [r3, #16]
 801b96c:	1ad3      	subs	r3, r2, r3
 801b96e:	b29a      	uxth	r2, r3
 801b970:	4b2e      	ldr	r3, [pc, #184]	; (801ba2c <TRACE_Send+0x108>)
 801b972:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b974:	4b2d      	ldr	r3, [pc, #180]	; (801ba2c <TRACE_Send+0x108>)
 801b976:	2202      	movs	r2, #2
 801b978:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b97a:	4b2c      	ldr	r3, [pc, #176]	; (801ba2c <TRACE_Send+0x108>)
 801b97c:	2200      	movs	r2, #0
 801b97e:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801b980:	4b2a      	ldr	r3, [pc, #168]	; (801ba2c <TRACE_Send+0x108>)
 801b982:	8a9b      	ldrh	r3, [r3, #20]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d105      	bne.n	801b994 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b988:	4b28      	ldr	r3, [pc, #160]	; (801ba2c <TRACE_Send+0x108>)
 801b98a:	2200      	movs	r2, #0
 801b98c:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b98e:	4b27      	ldr	r3, [pc, #156]	; (801ba2c <TRACE_Send+0x108>)
 801b990:	2200      	movs	r2, #0
 801b992:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b994:	4b25      	ldr	r3, [pc, #148]	; (801ba2c <TRACE_Send+0x108>)
 801b996:	789b      	ldrb	r3, [r3, #2]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d116      	bne.n	801b9ca <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b99c:	4b23      	ldr	r3, [pc, #140]	; (801ba2c <TRACE_Send+0x108>)
 801b99e:	8a5a      	ldrh	r2, [r3, #18]
 801b9a0:	4b22      	ldr	r3, [pc, #136]	; (801ba2c <TRACE_Send+0x108>)
 801b9a2:	8a1b      	ldrh	r3, [r3, #16]
 801b9a4:	429a      	cmp	r2, r3
 801b9a6:	d908      	bls.n	801b9ba <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b9a8:	4b20      	ldr	r3, [pc, #128]	; (801ba2c <TRACE_Send+0x108>)
 801b9aa:	8a5a      	ldrh	r2, [r3, #18]
 801b9ac:	4b1f      	ldr	r3, [pc, #124]	; (801ba2c <TRACE_Send+0x108>)
 801b9ae:	8a1b      	ldrh	r3, [r3, #16]
 801b9b0:	1ad3      	subs	r3, r2, r3
 801b9b2:	b29a      	uxth	r2, r3
 801b9b4:	4b1d      	ldr	r3, [pc, #116]	; (801ba2c <TRACE_Send+0x108>)
 801b9b6:	829a      	strh	r2, [r3, #20]
 801b9b8:	e007      	b.n	801b9ca <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b9ba:	4b1c      	ldr	r3, [pc, #112]	; (801ba2c <TRACE_Send+0x108>)
 801b9bc:	8a1b      	ldrh	r3, [r3, #16]
 801b9be:	2280      	movs	r2, #128	; 0x80
 801b9c0:	0092      	lsls	r2, r2, #2
 801b9c2:	1ad3      	subs	r3, r2, r3
 801b9c4:	b29a      	uxth	r2, r3
 801b9c6:	4b19      	ldr	r3, [pc, #100]	; (801ba2c <TRACE_Send+0x108>)
 801b9c8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b9ca:	4b18      	ldr	r3, [pc, #96]	; (801ba2c <TRACE_Send+0x108>)
 801b9cc:	8a1b      	ldrh	r3, [r3, #16]
 801b9ce:	001a      	movs	r2, r3
 801b9d0:	4b17      	ldr	r3, [pc, #92]	; (801ba30 <TRACE_Send+0x10c>)
 801b9d2:	18d3      	adds	r3, r2, r3
 801b9d4:	61bb      	str	r3, [r7, #24]
 801b9d6:	697b      	ldr	r3, [r7, #20]
 801b9d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	f383 8810 	msr	PRIMASK, r3
}
 801b9e0:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801b9e2:	f7e9 f84d 	bl	8004a80 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b9e6:	4b13      	ldr	r3, [pc, #76]	; (801ba34 <TRACE_Send+0x110>)
 801b9e8:	68db      	ldr	r3, [r3, #12]
 801b9ea:	4a10      	ldr	r2, [pc, #64]	; (801ba2c <TRACE_Send+0x108>)
 801b9ec:	8a91      	ldrh	r1, [r2, #20]
 801b9ee:	221f      	movs	r2, #31
 801b9f0:	18bc      	adds	r4, r7, r2
 801b9f2:	69ba      	ldr	r2, [r7, #24]
 801b9f4:	0010      	movs	r0, r2
 801b9f6:	4798      	blx	r3
 801b9f8:	0003      	movs	r3, r0
 801b9fa:	7023      	strb	r3, [r4, #0]
 801b9fc:	e00d      	b.n	801ba1a <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801b9fe:	f000 f95b 	bl	801bcb8 <TRACE_UnLock>
 801ba02:	697b      	ldr	r3, [r7, #20]
 801ba04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba06:	68bb      	ldr	r3, [r7, #8]
 801ba08:	f383 8810 	msr	PRIMASK, r3
}
 801ba0c:	e005      	b.n	801ba1a <TRACE_Send+0xf6>
 801ba0e:	697b      	ldr	r3, [r7, #20]
 801ba10:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	f383 8810 	msr	PRIMASK, r3
}
 801ba18:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801ba1a:	231f      	movs	r3, #31
 801ba1c:	18fb      	adds	r3, r7, r3
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	b25b      	sxtb	r3, r3
}
 801ba22:	0018      	movs	r0, r3
 801ba24:	46bd      	mov	sp, r7
 801ba26:	b009      	add	sp, #36	; 0x24
 801ba28:	bd90      	pop	{r4, r7, pc}
 801ba2a:	46c0      	nop			; (mov r8, r8)
 801ba2c:	20000f80 	.word	0x20000f80
 801ba30:	20000f98 	.word	0x20000f98
 801ba34:	0801e688 	.word	0x0801e688

0801ba38 <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b086      	sub	sp, #24
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba40:	f3ef 8310 	mrs	r3, PRIMASK
 801ba44:	613b      	str	r3, [r7, #16]
  return(result);
 801ba46:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ba48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba4a:	b672      	cpsid	i
}
 801ba4c:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ba4e:	4b3c      	ldr	r3, [pc, #240]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba50:	789b      	ldrb	r3, [r3, #2]
 801ba52:	2b02      	cmp	r3, #2
 801ba54:	d106      	bne.n	801ba64 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ba56:	4b3a      	ldr	r3, [pc, #232]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba58:	2200      	movs	r2, #0
 801ba5a:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ba5c:	4b38      	ldr	r3, [pc, #224]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba5e:	2200      	movs	r2, #0
 801ba60:	821a      	strh	r2, [r3, #16]
 801ba62:	e00a      	b.n	801ba7a <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ba64:	4b36      	ldr	r3, [pc, #216]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba66:	8a1a      	ldrh	r2, [r3, #16]
 801ba68:	4b35      	ldr	r3, [pc, #212]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba6a:	8a9b      	ldrh	r3, [r3, #20]
 801ba6c:	18d3      	adds	r3, r2, r3
 801ba6e:	b29b      	uxth	r3, r3
 801ba70:	05db      	lsls	r3, r3, #23
 801ba72:	0ddb      	lsrs	r3, r3, #23
 801ba74:	b29a      	uxth	r2, r3
 801ba76:	4b32      	ldr	r3, [pc, #200]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba78:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ba7a:	4b31      	ldr	r3, [pc, #196]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba7c:	8a1a      	ldrh	r2, [r3, #16]
 801ba7e:	4b30      	ldr	r3, [pc, #192]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba80:	8a5b      	ldrh	r3, [r3, #18]
 801ba82:	429a      	cmp	r2, r3
 801ba84:	d04c      	beq.n	801bb20 <TRACE_TxCpltCallback+0xe8>
 801ba86:	4b2e      	ldr	r3, [pc, #184]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba88:	8adb      	ldrh	r3, [r3, #22]
 801ba8a:	2b01      	cmp	r3, #1
 801ba8c:	d148      	bne.n	801bb20 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ba8e:	4b2c      	ldr	r3, [pc, #176]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba90:	789b      	ldrb	r3, [r3, #2]
 801ba92:	2b01      	cmp	r3, #1
 801ba94:	d117      	bne.n	801bac6 <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ba96:	4b2a      	ldr	r3, [pc, #168]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba98:	881a      	ldrh	r2, [r3, #0]
 801ba9a:	4b29      	ldr	r3, [pc, #164]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801ba9c:	8a1b      	ldrh	r3, [r3, #16]
 801ba9e:	1ad3      	subs	r3, r2, r3
 801baa0:	b29a      	uxth	r2, r3
 801baa2:	4b27      	ldr	r3, [pc, #156]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801baa4:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801baa6:	4b26      	ldr	r3, [pc, #152]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801baa8:	2202      	movs	r2, #2
 801baaa:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801baac:	4b24      	ldr	r3, [pc, #144]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801baae:	2200      	movs	r2, #0
 801bab0:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801bab2:	4b23      	ldr	r3, [pc, #140]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bab4:	8a9b      	ldrh	r3, [r3, #20]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d105      	bne.n	801bac6 <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801baba:	4b21      	ldr	r3, [pc, #132]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801babc:	2200      	movs	r2, #0
 801babe:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bac0:	4b1f      	ldr	r3, [pc, #124]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bac2:	2200      	movs	r2, #0
 801bac4:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bac6:	4b1e      	ldr	r3, [pc, #120]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bac8:	789b      	ldrb	r3, [r3, #2]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d116      	bne.n	801bafc <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bace:	4b1c      	ldr	r3, [pc, #112]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bad0:	8a5a      	ldrh	r2, [r3, #18]
 801bad2:	4b1b      	ldr	r3, [pc, #108]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bad4:	8a1b      	ldrh	r3, [r3, #16]
 801bad6:	429a      	cmp	r2, r3
 801bad8:	d908      	bls.n	801baec <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bada:	4b19      	ldr	r3, [pc, #100]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801badc:	8a5a      	ldrh	r2, [r3, #18]
 801bade:	4b18      	ldr	r3, [pc, #96]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bae0:	8a1b      	ldrh	r3, [r3, #16]
 801bae2:	1ad3      	subs	r3, r2, r3
 801bae4:	b29a      	uxth	r2, r3
 801bae6:	4b16      	ldr	r3, [pc, #88]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bae8:	829a      	strh	r2, [r3, #20]
 801baea:	e007      	b.n	801bafc <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801baec:	4b14      	ldr	r3, [pc, #80]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801baee:	8a1b      	ldrh	r3, [r3, #16]
 801baf0:	2280      	movs	r2, #128	; 0x80
 801baf2:	0092      	lsls	r2, r2, #2
 801baf4:	1ad3      	subs	r3, r2, r3
 801baf6:	b29a      	uxth	r2, r3
 801baf8:	4b11      	ldr	r3, [pc, #68]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bafa:	829a      	strh	r2, [r3, #20]
 801bafc:	697b      	ldr	r3, [r7, #20]
 801bafe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	f383 8810 	msr	PRIMASK, r3
}
 801bb06:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801bb08:	4b0e      	ldr	r3, [pc, #56]	; (801bb44 <TRACE_TxCpltCallback+0x10c>)
 801bb0a:	68db      	ldr	r3, [r3, #12]
 801bb0c:	4a0c      	ldr	r2, [pc, #48]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bb0e:	8a12      	ldrh	r2, [r2, #16]
 801bb10:	0011      	movs	r1, r2
 801bb12:	4a0d      	ldr	r2, [pc, #52]	; (801bb48 <TRACE_TxCpltCallback+0x110>)
 801bb14:	1888      	adds	r0, r1, r2
 801bb16:	4a0a      	ldr	r2, [pc, #40]	; (801bb40 <TRACE_TxCpltCallback+0x108>)
 801bb18:	8a92      	ldrh	r2, [r2, #20]
 801bb1a:	0011      	movs	r1, r2
 801bb1c:	4798      	blx	r3
 801bb1e:	e00a      	b.n	801bb36 <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801bb20:	f7e8 ffb7 	bl	8004a92 <UTIL_ADV_TRACE_PostSendHook>
 801bb24:	697b      	ldr	r3, [r7, #20]
 801bb26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb28:	68bb      	ldr	r3, [r7, #8]
 801bb2a:	f383 8810 	msr	PRIMASK, r3
}
 801bb2e:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801bb30:	f000 f8c2 	bl	801bcb8 <TRACE_UnLock>
  }
}
 801bb34:	46c0      	nop			; (mov r8, r8)
 801bb36:	46c0      	nop			; (mov r8, r8)
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	b006      	add	sp, #24
 801bb3c:	bd80      	pop	{r7, pc}
 801bb3e:	46c0      	nop			; (mov r8, r8)
 801bb40:	20000f80 	.word	0x20000f80
 801bb44:	0801e688 	.word	0x0801e688
 801bb48:	20000f98 	.word	0x20000f98

0801bb4c <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b086      	sub	sp, #24
 801bb50:	af00      	add	r7, sp, #0
 801bb52:	0002      	movs	r2, r0
 801bb54:	6039      	str	r1, [r7, #0]
 801bb56:	1dbb      	adds	r3, r7, #6
 801bb58:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801bb5a:	2314      	movs	r3, #20
 801bb5c:	18fb      	adds	r3, r7, r3
 801bb5e:	2201      	movs	r2, #1
 801bb60:	4252      	negs	r2, r2
 801bb62:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb64:	f3ef 8310 	mrs	r3, PRIMASK
 801bb68:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb6a:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bb6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb6e:	b672      	cpsid	i
}
 801bb70:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bb72:	4b42      	ldr	r3, [pc, #264]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bb74:	8a5a      	ldrh	r2, [r3, #18]
 801bb76:	4b41      	ldr	r3, [pc, #260]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bb78:	8a1b      	ldrh	r3, [r3, #16]
 801bb7a:	429a      	cmp	r2, r3
 801bb7c:	d123      	bne.n	801bbc6 <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bb7e:	4b3f      	ldr	r3, [pc, #252]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bb80:	8a5a      	ldrh	r2, [r3, #18]
 801bb82:	2016      	movs	r0, #22
 801bb84:	183b      	adds	r3, r7, r0
 801bb86:	2180      	movs	r1, #128	; 0x80
 801bb88:	0089      	lsls	r1, r1, #2
 801bb8a:	1a8a      	subs	r2, r1, r2
 801bb8c:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bb8e:	1dba      	adds	r2, r7, #6
 801bb90:	0001      	movs	r1, r0
 801bb92:	187b      	adds	r3, r7, r1
 801bb94:	8812      	ldrh	r2, [r2, #0]
 801bb96:	881b      	ldrh	r3, [r3, #0]
 801bb98:	429a      	cmp	r2, r3
 801bb9a:	d346      	bcc.n	801bc2a <TRACE_AllocateBufer+0xde>
 801bb9c:	4b37      	ldr	r3, [pc, #220]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bb9e:	8a1b      	ldrh	r3, [r3, #16]
 801bba0:	1dba      	adds	r2, r7, #6
 801bba2:	8812      	ldrh	r2, [r2, #0]
 801bba4:	429a      	cmp	r2, r3
 801bba6:	d240      	bcs.n	801bc2a <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bba8:	4b34      	ldr	r3, [pc, #208]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbaa:	2201      	movs	r2, #1
 801bbac:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bbae:	4b33      	ldr	r3, [pc, #204]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbb0:	8a5a      	ldrh	r2, [r3, #18]
 801bbb2:	4b32      	ldr	r3, [pc, #200]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbb4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bbb6:	187b      	adds	r3, r7, r1
 801bbb8:	4a30      	ldr	r2, [pc, #192]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbba:	8a12      	ldrh	r2, [r2, #16]
 801bbbc:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bbbe:	4b2f      	ldr	r3, [pc, #188]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	825a      	strh	r2, [r3, #18]
 801bbc4:	e031      	b.n	801bc2a <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bbc6:	4b2d      	ldr	r3, [pc, #180]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbc8:	8a5a      	ldrh	r2, [r3, #18]
 801bbca:	4b2c      	ldr	r3, [pc, #176]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbcc:	8a1b      	ldrh	r3, [r3, #16]
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d923      	bls.n	801bc1a <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bbd2:	4b2a      	ldr	r3, [pc, #168]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbd4:	8a5a      	ldrh	r2, [r3, #18]
 801bbd6:	2016      	movs	r0, #22
 801bbd8:	183b      	adds	r3, r7, r0
 801bbda:	2180      	movs	r1, #128	; 0x80
 801bbdc:	0089      	lsls	r1, r1, #2
 801bbde:	1a8a      	subs	r2, r1, r2
 801bbe0:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801bbe2:	1dba      	adds	r2, r7, #6
 801bbe4:	0001      	movs	r1, r0
 801bbe6:	187b      	adds	r3, r7, r1
 801bbe8:	8812      	ldrh	r2, [r2, #0]
 801bbea:	881b      	ldrh	r3, [r3, #0]
 801bbec:	429a      	cmp	r2, r3
 801bbee:	d31c      	bcc.n	801bc2a <TRACE_AllocateBufer+0xde>
 801bbf0:	4b22      	ldr	r3, [pc, #136]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbf2:	8a1b      	ldrh	r3, [r3, #16]
 801bbf4:	1dba      	adds	r2, r7, #6
 801bbf6:	8812      	ldrh	r2, [r2, #0]
 801bbf8:	429a      	cmp	r2, r3
 801bbfa:	d216      	bcs.n	801bc2a <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bbfc:	4b1f      	ldr	r3, [pc, #124]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bbfe:	2201      	movs	r2, #1
 801bc00:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bc02:	4b1e      	ldr	r3, [pc, #120]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc04:	8a5a      	ldrh	r2, [r3, #18]
 801bc06:	4b1d      	ldr	r3, [pc, #116]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc08:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bc0a:	187b      	adds	r3, r7, r1
 801bc0c:	4a1b      	ldr	r2, [pc, #108]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc0e:	8a12      	ldrh	r2, [r2, #16]
 801bc10:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bc12:	4b1a      	ldr	r3, [pc, #104]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc14:	2200      	movs	r2, #0
 801bc16:	825a      	strh	r2, [r3, #18]
 801bc18:	e007      	b.n	801bc2a <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bc1a:	4b18      	ldr	r3, [pc, #96]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc1c:	8a19      	ldrh	r1, [r3, #16]
 801bc1e:	4b17      	ldr	r3, [pc, #92]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc20:	8a5a      	ldrh	r2, [r3, #18]
 801bc22:	2316      	movs	r3, #22
 801bc24:	18fb      	adds	r3, r7, r3
 801bc26:	1a8a      	subs	r2, r1, r2
 801bc28:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801bc2a:	2316      	movs	r3, #22
 801bc2c:	18fa      	adds	r2, r7, r3
 801bc2e:	1dbb      	adds	r3, r7, #6
 801bc30:	8812      	ldrh	r2, [r2, #0]
 801bc32:	881b      	ldrh	r3, [r3, #0]
 801bc34:	429a      	cmp	r2, r3
 801bc36:	d912      	bls.n	801bc5e <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bc38:	4b10      	ldr	r3, [pc, #64]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc3a:	8a5a      	ldrh	r2, [r3, #18]
 801bc3c:	683b      	ldr	r3, [r7, #0]
 801bc3e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bc40:	4b0e      	ldr	r3, [pc, #56]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc42:	8a5a      	ldrh	r2, [r3, #18]
 801bc44:	1dbb      	adds	r3, r7, #6
 801bc46:	881b      	ldrh	r3, [r3, #0]
 801bc48:	18d3      	adds	r3, r2, r3
 801bc4a:	b29b      	uxth	r3, r3
 801bc4c:	05db      	lsls	r3, r3, #23
 801bc4e:	0ddb      	lsrs	r3, r3, #23
 801bc50:	b29a      	uxth	r2, r3
 801bc52:	4b0a      	ldr	r3, [pc, #40]	; (801bc7c <TRACE_AllocateBufer+0x130>)
 801bc54:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bc56:	2314      	movs	r3, #20
 801bc58:	18fb      	adds	r3, r7, r3
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	801a      	strh	r2, [r3, #0]
 801bc5e:	693b      	ldr	r3, [r7, #16]
 801bc60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc62:	68bb      	ldr	r3, [r7, #8]
 801bc64:	f383 8810 	msr	PRIMASK, r3
}
 801bc68:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801bc6a:	2314      	movs	r3, #20
 801bc6c:	18fb      	adds	r3, r7, r3
 801bc6e:	2200      	movs	r2, #0
 801bc70:	5e9b      	ldrsh	r3, [r3, r2]
}
 801bc72:	0018      	movs	r0, r3
 801bc74:	46bd      	mov	sp, r7
 801bc76:	b006      	add	sp, #24
 801bc78:	bd80      	pop	{r7, pc}
 801bc7a:	46c0      	nop			; (mov r8, r8)
 801bc7c:	20000f80 	.word	0x20000f80

0801bc80 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b084      	sub	sp, #16
 801bc84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc86:	f3ef 8310 	mrs	r3, PRIMASK
 801bc8a:	607b      	str	r3, [r7, #4]
  return(result);
 801bc8c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bc8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc90:	b672      	cpsid	i
}
 801bc92:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801bc94:	4b07      	ldr	r3, [pc, #28]	; (801bcb4 <TRACE_Lock+0x34>)
 801bc96:	8adb      	ldrh	r3, [r3, #22]
 801bc98:	3301      	adds	r3, #1
 801bc9a:	b29a      	uxth	r2, r3
 801bc9c:	4b05      	ldr	r3, [pc, #20]	; (801bcb4 <TRACE_Lock+0x34>)
 801bc9e:	82da      	strh	r2, [r3, #22]
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bca4:	68bb      	ldr	r3, [r7, #8]
 801bca6:	f383 8810 	msr	PRIMASK, r3
}
 801bcaa:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bcac:	46c0      	nop			; (mov r8, r8)
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	b004      	add	sp, #16
 801bcb2:	bd80      	pop	{r7, pc}
 801bcb4:	20000f80 	.word	0x20000f80

0801bcb8 <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b084      	sub	sp, #16
 801bcbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bcbe:	f3ef 8310 	mrs	r3, PRIMASK
 801bcc2:	607b      	str	r3, [r7, #4]
  return(result);
 801bcc4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bcc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcc8:	b672      	cpsid	i
}
 801bcca:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801bccc:	4b07      	ldr	r3, [pc, #28]	; (801bcec <TRACE_UnLock+0x34>)
 801bcce:	8adb      	ldrh	r3, [r3, #22]
 801bcd0:	3b01      	subs	r3, #1
 801bcd2:	b29a      	uxth	r2, r3
 801bcd4:	4b05      	ldr	r3, [pc, #20]	; (801bcec <TRACE_UnLock+0x34>)
 801bcd6:	82da      	strh	r2, [r3, #22]
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcdc:	68bb      	ldr	r3, [r7, #8]
 801bcde:	f383 8810 	msr	PRIMASK, r3
}
 801bce2:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bce4:	46c0      	nop			; (mov r8, r8)
 801bce6:	46bd      	mov	sp, r7
 801bce8:	b004      	add	sp, #16
 801bcea:	bd80      	pop	{r7, pc}
 801bcec:	20000f80 	.word	0x20000f80

0801bcf0 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bcf4:	4b03      	ldr	r3, [pc, #12]	; (801bd04 <TRACE_IsLocked+0x14>)
 801bcf6:	8adb      	ldrh	r3, [r3, #22]
 801bcf8:	1e5a      	subs	r2, r3, #1
 801bcfa:	4193      	sbcs	r3, r2
 801bcfc:	b2db      	uxtb	r3, r3
}
 801bcfe:	0018      	movs	r0, r3
 801bd00:	46bd      	mov	sp, r7
 801bd02:	bd80      	pop	{r7, pc}
 801bd04:	20000f80 	.word	0x20000f80

0801bd08 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801bd0c:	4b04      	ldr	r3, [pc, #16]	; (801bd20 <UTIL_LPM_Init+0x18>)
 801bd0e:	2200      	movs	r2, #0
 801bd10:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801bd12:	4b04      	ldr	r3, [pc, #16]	; (801bd24 <UTIL_LPM_Init+0x1c>)
 801bd14:	2200      	movs	r2, #0
 801bd16:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801bd18:	46c0      	nop			; (mov r8, r8)
 801bd1a:	46bd      	mov	sp, r7
 801bd1c:	bd80      	pop	{r7, pc}
 801bd1e:	46c0      	nop			; (mov r8, r8)
 801bd20:	20001298 	.word	0x20001298
 801bd24:	2000129c 	.word	0x2000129c

0801bd28 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b086      	sub	sp, #24
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
 801bd30:	000a      	movs	r2, r1
 801bd32:	1cfb      	adds	r3, r7, #3
 801bd34:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd36:	f3ef 8310 	mrs	r3, PRIMASK
 801bd3a:	613b      	str	r3, [r7, #16]
  return(result);
 801bd3c:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bd3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd40:	b672      	cpsid	i
}
 801bd42:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801bd44:	1cfb      	adds	r3, r7, #3
 801bd46:	781b      	ldrb	r3, [r3, #0]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d008      	beq.n	801bd5e <UTIL_LPM_SetStopMode+0x36>
 801bd4c:	2b01      	cmp	r3, #1
 801bd4e:	d10e      	bne.n	801bd6e <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801bd50:	4b0c      	ldr	r3, [pc, #48]	; (801bd84 <UTIL_LPM_SetStopMode+0x5c>)
 801bd52:	681a      	ldr	r2, [r3, #0]
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	431a      	orrs	r2, r3
 801bd58:	4b0a      	ldr	r3, [pc, #40]	; (801bd84 <UTIL_LPM_SetStopMode+0x5c>)
 801bd5a:	601a      	str	r2, [r3, #0]
      break;
 801bd5c:	e008      	b.n	801bd70 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	43da      	mvns	r2, r3
 801bd62:	4b08      	ldr	r3, [pc, #32]	; (801bd84 <UTIL_LPM_SetStopMode+0x5c>)
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	401a      	ands	r2, r3
 801bd68:	4b06      	ldr	r3, [pc, #24]	; (801bd84 <UTIL_LPM_SetStopMode+0x5c>)
 801bd6a:	601a      	str	r2, [r3, #0]
      break;
 801bd6c:	e000      	b.n	801bd70 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801bd6e:	46c0      	nop			; (mov r8, r8)
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	f383 8810 	msr	PRIMASK, r3
}
 801bd7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bd7c:	46c0      	nop			; (mov r8, r8)
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	b006      	add	sp, #24
 801bd82:	bd80      	pop	{r7, pc}
 801bd84:	20001298 	.word	0x20001298

0801bd88 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	b086      	sub	sp, #24
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	6078      	str	r0, [r7, #4]
 801bd90:	000a      	movs	r2, r1
 801bd92:	1cfb      	adds	r3, r7, #3
 801bd94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd96:	f3ef 8310 	mrs	r3, PRIMASK
 801bd9a:	613b      	str	r3, [r7, #16]
  return(result);
 801bd9c:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bd9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bda0:	b672      	cpsid	i
}
 801bda2:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801bda4:	1cfb      	adds	r3, r7, #3
 801bda6:	781b      	ldrb	r3, [r3, #0]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d008      	beq.n	801bdbe <UTIL_LPM_SetOffMode+0x36>
 801bdac:	2b01      	cmp	r3, #1
 801bdae:	d10e      	bne.n	801bdce <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801bdb0:	4b0c      	ldr	r3, [pc, #48]	; (801bde4 <UTIL_LPM_SetOffMode+0x5c>)
 801bdb2:	681a      	ldr	r2, [r3, #0]
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	431a      	orrs	r2, r3
 801bdb8:	4b0a      	ldr	r3, [pc, #40]	; (801bde4 <UTIL_LPM_SetOffMode+0x5c>)
 801bdba:	601a      	str	r2, [r3, #0]
      break;
 801bdbc:	e008      	b.n	801bdd0 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	43da      	mvns	r2, r3
 801bdc2:	4b08      	ldr	r3, [pc, #32]	; (801bde4 <UTIL_LPM_SetOffMode+0x5c>)
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	401a      	ands	r2, r3
 801bdc8:	4b06      	ldr	r3, [pc, #24]	; (801bde4 <UTIL_LPM_SetOffMode+0x5c>)
 801bdca:	601a      	str	r2, [r3, #0]
      break;
 801bdcc:	e000      	b.n	801bdd0 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801bdce:	46c0      	nop			; (mov r8, r8)
 801bdd0:	697b      	ldr	r3, [r7, #20]
 801bdd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	f383 8810 	msr	PRIMASK, r3
}
 801bdda:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bddc:	46c0      	nop			; (mov r8, r8)
 801bdde:	46bd      	mov	sp, r7
 801bde0:	b006      	add	sp, #24
 801bde2:	bd80      	pop	{r7, pc}
 801bde4:	2000129c 	.word	0x2000129c

0801bde8 <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b084      	sub	sp, #16
 801bdec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bdee:	f3ef 8310 	mrs	r3, PRIMASK
 801bdf2:	607b      	str	r3, [r7, #4]
  return(result);
 801bdf4:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bdf6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdf8:	b672      	cpsid	i
}
 801bdfa:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801bdfc:	4b11      	ldr	r3, [pc, #68]	; (801be44 <UTIL_LPM_GetMode+0x5c>)
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	2b00      	cmp	r3, #0
 801be02:	d004      	beq.n	801be0e <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801be04:	230f      	movs	r3, #15
 801be06:	18fb      	adds	r3, r7, r3
 801be08:	2200      	movs	r2, #0
 801be0a:	701a      	strb	r2, [r3, #0]
 801be0c:	e00c      	b.n	801be28 <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801be0e:	4b0e      	ldr	r3, [pc, #56]	; (801be48 <UTIL_LPM_GetMode+0x60>)
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d004      	beq.n	801be20 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801be16:	230f      	movs	r3, #15
 801be18:	18fb      	adds	r3, r7, r3
 801be1a:	2201      	movs	r2, #1
 801be1c:	701a      	strb	r2, [r3, #0]
 801be1e:	e003      	b.n	801be28 <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801be20:	230f      	movs	r3, #15
 801be22:	18fb      	adds	r3, r7, r3
 801be24:	2202      	movs	r2, #2
 801be26:	701a      	strb	r2, [r3, #0]
 801be28:	68bb      	ldr	r3, [r7, #8]
 801be2a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be2c:	683b      	ldr	r3, [r7, #0]
 801be2e:	f383 8810 	msr	PRIMASK, r3
}
 801be32:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801be34:	230f      	movs	r3, #15
 801be36:	18fb      	adds	r3, r7, r3
 801be38:	781b      	ldrb	r3, [r3, #0]
}
 801be3a:	0018      	movs	r0, r3
 801be3c:	46bd      	mov	sp, r7
 801be3e:	b004      	add	sp, #16
 801be40:	bd80      	pop	{r7, pc}
 801be42:	46c0      	nop			; (mov r8, r8)
 801be44:	20001298 	.word	0x20001298
 801be48:	2000129c 	.word	0x2000129c

0801be4c <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b084      	sub	sp, #16
 801be50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be52:	f3ef 8310 	mrs	r3, PRIMASK
 801be56:	60bb      	str	r3, [r7, #8]
  return(result);
 801be58:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801be5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801be5c:	b672      	cpsid	i
}
 801be5e:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801be60:	4b12      	ldr	r3, [pc, #72]	; (801beac <UTIL_LPM_EnterLowPower+0x60>)
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d006      	beq.n	801be76 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801be68:	4b11      	ldr	r3, [pc, #68]	; (801beb0 <UTIL_LPM_EnterLowPower+0x64>)
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801be6e:	4b10      	ldr	r3, [pc, #64]	; (801beb0 <UTIL_LPM_EnterLowPower+0x64>)
 801be70:	685b      	ldr	r3, [r3, #4]
 801be72:	4798      	blx	r3
 801be74:	e010      	b.n	801be98 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801be76:	4b0f      	ldr	r3, [pc, #60]	; (801beb4 <UTIL_LPM_EnterLowPower+0x68>)
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d006      	beq.n	801be8c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801be7e:	4b0c      	ldr	r3, [pc, #48]	; (801beb0 <UTIL_LPM_EnterLowPower+0x64>)
 801be80:	689b      	ldr	r3, [r3, #8]
 801be82:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801be84:	4b0a      	ldr	r3, [pc, #40]	; (801beb0 <UTIL_LPM_EnterLowPower+0x64>)
 801be86:	68db      	ldr	r3, [r3, #12]
 801be88:	4798      	blx	r3
 801be8a:	e005      	b.n	801be98 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801be8c:	4b08      	ldr	r3, [pc, #32]	; (801beb0 <UTIL_LPM_EnterLowPower+0x64>)
 801be8e:	691b      	ldr	r3, [r3, #16]
 801be90:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801be92:	4b07      	ldr	r3, [pc, #28]	; (801beb0 <UTIL_LPM_EnterLowPower+0x64>)
 801be94:	695b      	ldr	r3, [r3, #20]
 801be96:	4798      	blx	r3
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	f383 8810 	msr	PRIMASK, r3
}
 801bea2:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801bea4:	46c0      	nop			; (mov r8, r8)
 801bea6:	46bd      	mov	sp, r7
 801bea8:	b004      	add	sp, #16
 801beaa:	bd80      	pop	{r7, pc}
 801beac:	20001298 	.word	0x20001298
 801beb0:	0801e658 	.word	0x0801e658
 801beb4:	2000129c 	.word	0x2000129c

0801beb8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801beb8:	b580      	push	{r7, lr}
 801beba:	b086      	sub	sp, #24
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	60f8      	str	r0, [r7, #12]
 801bec0:	60b9      	str	r1, [r7, #8]
 801bec2:	1dbb      	adds	r3, r7, #6
 801bec4:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801beca:	68bb      	ldr	r3, [r7, #8]
 801becc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801bece:	e007      	b.n	801bee0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801bed0:	693a      	ldr	r2, [r7, #16]
 801bed2:	1c53      	adds	r3, r2, #1
 801bed4:	613b      	str	r3, [r7, #16]
 801bed6:	697b      	ldr	r3, [r7, #20]
 801bed8:	1c59      	adds	r1, r3, #1
 801beda:	6179      	str	r1, [r7, #20]
 801bedc:	7812      	ldrb	r2, [r2, #0]
 801bede:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bee0:	1dbb      	adds	r3, r7, #6
 801bee2:	881b      	ldrh	r3, [r3, #0]
 801bee4:	1dba      	adds	r2, r7, #6
 801bee6:	1e59      	subs	r1, r3, #1
 801bee8:	8011      	strh	r1, [r2, #0]
 801beea:	2b00      	cmp	r3, #0
 801beec:	d1f0      	bne.n	801bed0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801beee:	46c0      	nop			; (mov r8, r8)
 801bef0:	46c0      	nop			; (mov r8, r8)
 801bef2:	46bd      	mov	sp, r7
 801bef4:	b006      	add	sp, #24
 801bef6:	bd80      	pop	{r7, pc}

0801bef8 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b084      	sub	sp, #16
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
 801bf00:	0008      	movs	r0, r1
 801bf02:	0011      	movs	r1, r2
 801bf04:	1cfb      	adds	r3, r7, #3
 801bf06:	1c02      	adds	r2, r0, #0
 801bf08:	701a      	strb	r2, [r3, #0]
 801bf0a:	003b      	movs	r3, r7
 801bf0c:	1c0a      	adds	r2, r1, #0
 801bf0e:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801bf14:	e005      	b.n	801bf22 <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	1c5a      	adds	r2, r3, #1
 801bf1a:	60fa      	str	r2, [r7, #12]
 801bf1c:	1cfa      	adds	r2, r7, #3
 801bf1e:	7812      	ldrb	r2, [r2, #0]
 801bf20:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bf22:	003b      	movs	r3, r7
 801bf24:	881b      	ldrh	r3, [r3, #0]
 801bf26:	003a      	movs	r2, r7
 801bf28:	1e59      	subs	r1, r3, #1
 801bf2a:	8011      	strh	r1, [r2, #0]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d1f2      	bne.n	801bf16 <UTIL_MEM_set_8+0x1e>
  }
}
 801bf30:	46c0      	nop			; (mov r8, r8)
 801bf32:	46c0      	nop			; (mov r8, r8)
 801bf34:	46bd      	mov	sp, r7
 801bf36:	b004      	add	sp, #16
 801bf38:	bd80      	pop	{r7, pc}
	...

0801bf3c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801bf3c:	b580      	push	{r7, lr}
 801bf3e:	b08c      	sub	sp, #48	; 0x30
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801bf44:	4b66      	ldr	r3, [pc, #408]	; (801c0e0 <UTIL_SEQ_Run+0x1a4>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801bf4a:	4b65      	ldr	r3, [pc, #404]	; (801c0e0 <UTIL_SEQ_Run+0x1a4>)
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	687a      	ldr	r2, [r7, #4]
 801bf50:	401a      	ands	r2, r3
 801bf52:	4b63      	ldr	r3, [pc, #396]	; (801c0e0 <UTIL_SEQ_Run+0x1a4>)
 801bf54:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801bf56:	e086      	b.n	801c066 <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801bf58:	2300      	movs	r3, #0
 801bf5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801bf5c:	e002      	b.n	801bf64 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801bf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf60:	3301      	adds	r3, #1
 801bf62:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801bf64:	4b5f      	ldr	r3, [pc, #380]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801bf66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf68:	00d2      	lsls	r2, r2, #3
 801bf6a:	58d2      	ldr	r2, [r2, r3]
 801bf6c:	4b5e      	ldr	r3, [pc, #376]	; (801c0e8 <UTIL_SEQ_Run+0x1ac>)
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	401a      	ands	r2, r3
 801bf72:	4b5b      	ldr	r3, [pc, #364]	; (801c0e0 <UTIL_SEQ_Run+0x1a4>)
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	4013      	ands	r3, r2
 801bf78:	d0f1      	beq.n	801bf5e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801bf7a:	4b5a      	ldr	r3, [pc, #360]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801bf7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf7e:	00d2      	lsls	r2, r2, #3
 801bf80:	58d2      	ldr	r2, [r2, r3]
 801bf82:	4b59      	ldr	r3, [pc, #356]	; (801c0e8 <UTIL_SEQ_Run+0x1ac>)
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	401a      	ands	r2, r3
 801bf88:	4b55      	ldr	r3, [pc, #340]	; (801c0e0 <UTIL_SEQ_Run+0x1a4>)
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	4013      	ands	r3, r2
 801bf8e:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801bf90:	4a54      	ldr	r2, [pc, #336]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801bf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf94:	00db      	lsls	r3, r3, #3
 801bf96:	18d3      	adds	r3, r2, r3
 801bf98:	3304      	adds	r3, #4
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf9e:	4013      	ands	r3, r2
 801bfa0:	d107      	bne.n	801bfb2 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801bfa2:	4a50      	ldr	r2, [pc, #320]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801bfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfa6:	00db      	lsls	r3, r3, #3
 801bfa8:	18d3      	adds	r3, r2, r3
 801bfaa:	3304      	adds	r3, #4
 801bfac:	2201      	movs	r2, #1
 801bfae:	4252      	negs	r2, r2
 801bfb0:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801bfb2:	4a4c      	ldr	r2, [pc, #304]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfb6:	00db      	lsls	r3, r3, #3
 801bfb8:	18d3      	adds	r3, r2, r3
 801bfba:	3304      	adds	r3, #4
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bfc0:	4013      	ands	r3, r2
 801bfc2:	0018      	movs	r0, r3
 801bfc4:	f000 f8f6 	bl	801c1b4 <SEQ_BitPosition>
 801bfc8:	0003      	movs	r3, r0
 801bfca:	001a      	movs	r2, r3
 801bfcc:	4b47      	ldr	r3, [pc, #284]	; (801c0ec <UTIL_SEQ_Run+0x1b0>)
 801bfce:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801bfd0:	4a44      	ldr	r2, [pc, #272]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfd4:	00db      	lsls	r3, r3, #3
 801bfd6:	18d3      	adds	r3, r2, r3
 801bfd8:	3304      	adds	r3, #4
 801bfda:	681a      	ldr	r2, [r3, #0]
 801bfdc:	4b43      	ldr	r3, [pc, #268]	; (801c0ec <UTIL_SEQ_Run+0x1b0>)
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	2101      	movs	r1, #1
 801bfe2:	4099      	lsls	r1, r3
 801bfe4:	000b      	movs	r3, r1
 801bfe6:	43db      	mvns	r3, r3
 801bfe8:	401a      	ands	r2, r3
 801bfea:	493e      	ldr	r1, [pc, #248]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfee:	00db      	lsls	r3, r3, #3
 801bff0:	18cb      	adds	r3, r1, r3
 801bff2:	3304      	adds	r3, #4
 801bff4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bff6:	f3ef 8310 	mrs	r3, PRIMASK
 801bffa:	61bb      	str	r3, [r7, #24]
  return(result);
 801bffc:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bffe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c000:	b672      	cpsid	i
}
 801c002:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c004:	4b39      	ldr	r3, [pc, #228]	; (801c0ec <UTIL_SEQ_Run+0x1b0>)
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	2201      	movs	r2, #1
 801c00a:	409a      	lsls	r2, r3
 801c00c:	0013      	movs	r3, r2
 801c00e:	43da      	mvns	r2, r3
 801c010:	4b37      	ldr	r3, [pc, #220]	; (801c0f0 <UTIL_SEQ_Run+0x1b4>)
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	401a      	ands	r2, r3
 801c016:	4b36      	ldr	r3, [pc, #216]	; (801c0f0 <UTIL_SEQ_Run+0x1b4>)
 801c018:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c01a:	2302      	movs	r3, #2
 801c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c01e:	e013      	b.n	801c048 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c022:	1e5a      	subs	r2, r3, #1
 801c024:	4b2f      	ldr	r3, [pc, #188]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801c026:	00d2      	lsls	r2, r2, #3
 801c028:	58d1      	ldr	r1, [r2, r3]
 801c02a:	4b30      	ldr	r3, [pc, #192]	; (801c0ec <UTIL_SEQ_Run+0x1b0>)
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	2201      	movs	r2, #1
 801c030:	409a      	lsls	r2, r3
 801c032:	0013      	movs	r3, r2
 801c034:	43db      	mvns	r3, r3
 801c036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c038:	3a01      	subs	r2, #1
 801c03a:	4019      	ands	r1, r3
 801c03c:	4b29      	ldr	r3, [pc, #164]	; (801c0e4 <UTIL_SEQ_Run+0x1a8>)
 801c03e:	00d2      	lsls	r2, r2, #3
 801c040:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c044:	3b01      	subs	r3, #1
 801c046:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d1e8      	bne.n	801c020 <UTIL_SEQ_Run+0xe4>
 801c04e:	6a3b      	ldr	r3, [r7, #32]
 801c050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c052:	697b      	ldr	r3, [r7, #20]
 801c054:	f383 8810 	msr	PRIMASK, r3
}
 801c058:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c05a:	4b24      	ldr	r3, [pc, #144]	; (801c0ec <UTIL_SEQ_Run+0x1b0>)
 801c05c:	681a      	ldr	r2, [r3, #0]
 801c05e:	4b25      	ldr	r3, [pc, #148]	; (801c0f4 <UTIL_SEQ_Run+0x1b8>)
 801c060:	0092      	lsls	r2, r2, #2
 801c062:	58d3      	ldr	r3, [r2, r3]
 801c064:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c066:	4b22      	ldr	r3, [pc, #136]	; (801c0f0 <UTIL_SEQ_Run+0x1b4>)
 801c068:	681a      	ldr	r2, [r3, #0]
 801c06a:	4b1f      	ldr	r3, [pc, #124]	; (801c0e8 <UTIL_SEQ_Run+0x1ac>)
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	401a      	ands	r2, r3
 801c070:	4b1b      	ldr	r3, [pc, #108]	; (801c0e0 <UTIL_SEQ_Run+0x1a4>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	4013      	ands	r3, r2
 801c076:	d006      	beq.n	801c086 <UTIL_SEQ_Run+0x14a>
 801c078:	4b1f      	ldr	r3, [pc, #124]	; (801c0f8 <UTIL_SEQ_Run+0x1bc>)
 801c07a:	681a      	ldr	r2, [r3, #0]
 801c07c:	4b1f      	ldr	r3, [pc, #124]	; (801c0fc <UTIL_SEQ_Run+0x1c0>)
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	4013      	ands	r3, r2
 801c082:	d100      	bne.n	801c086 <UTIL_SEQ_Run+0x14a>
 801c084:	e768      	b.n	801bf58 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c086:	4b19      	ldr	r3, [pc, #100]	; (801c0ec <UTIL_SEQ_Run+0x1b0>)
 801c088:	2201      	movs	r2, #1
 801c08a:	4252      	negs	r2, r2
 801c08c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c08e:	f000 f887 	bl	801c1a0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c092:	f3ef 8310 	mrs	r3, PRIMASK
 801c096:	613b      	str	r3, [r7, #16]
  return(result);
 801c098:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c09a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c09c:	b672      	cpsid	i
}
 801c09e:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c0a0:	4b13      	ldr	r3, [pc, #76]	; (801c0f0 <UTIL_SEQ_Run+0x1b4>)
 801c0a2:	681a      	ldr	r2, [r3, #0]
 801c0a4:	4b10      	ldr	r3, [pc, #64]	; (801c0e8 <UTIL_SEQ_Run+0x1ac>)
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	401a      	ands	r2, r3
 801c0aa:	4b0d      	ldr	r3, [pc, #52]	; (801c0e0 <UTIL_SEQ_Run+0x1a4>)
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	4013      	ands	r3, r2
 801c0b0:	d107      	bne.n	801c0c2 <UTIL_SEQ_Run+0x186>
 801c0b2:	4b11      	ldr	r3, [pc, #68]	; (801c0f8 <UTIL_SEQ_Run+0x1bc>)
 801c0b4:	681a      	ldr	r2, [r3, #0]
 801c0b6:	4b11      	ldr	r3, [pc, #68]	; (801c0fc <UTIL_SEQ_Run+0x1c0>)
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	4013      	ands	r3, r2
 801c0bc:	d101      	bne.n	801c0c2 <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801c0be:	f7e8 fb7b 	bl	80047b8 <UTIL_SEQ_Idle>
 801c0c2:	69fb      	ldr	r3, [r7, #28]
 801c0c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	f383 8810 	msr	PRIMASK, r3
}
 801c0cc:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c0ce:	f000 f86c 	bl	801c1aa <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c0d2:	4b03      	ldr	r3, [pc, #12]	; (801c0e0 <UTIL_SEQ_Run+0x1a4>)
 801c0d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c0d6:	601a      	str	r2, [r3, #0]

  return;
 801c0d8:	46c0      	nop			; (mov r8, r8)
}
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	b00c      	add	sp, #48	; 0x30
 801c0de:	bd80      	pop	{r7, pc}
 801c0e0:	200001cc 	.word	0x200001cc
 801c0e4:	20001330 	.word	0x20001330
 801c0e8:	200001c8 	.word	0x200001c8
 801c0ec:	200012ac 	.word	0x200012ac
 801c0f0:	200012a0 	.word	0x200012a0
 801c0f4:	200012b0 	.word	0x200012b0
 801c0f8:	200012a4 	.word	0x200012a4
 801c0fc:	200012a8 	.word	0x200012a8

0801c100 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c100:	b580      	push	{r7, lr}
 801c102:	b088      	sub	sp, #32
 801c104:	af00      	add	r7, sp, #0
 801c106:	60f8      	str	r0, [r7, #12]
 801c108:	60b9      	str	r1, [r7, #8]
 801c10a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c10c:	f3ef 8310 	mrs	r3, PRIMASK
 801c110:	617b      	str	r3, [r7, #20]
  return(result);
 801c112:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c114:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c116:	b672      	cpsid	i
}
 801c118:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	0018      	movs	r0, r3
 801c11e:	f000 f849 	bl	801c1b4 <SEQ_BitPosition>
 801c122:	0003      	movs	r3, r0
 801c124:	001a      	movs	r2, r3
 801c126:	4b07      	ldr	r3, [pc, #28]	; (801c144 <UTIL_SEQ_RegTask+0x44>)
 801c128:	0092      	lsls	r2, r2, #2
 801c12a:	6879      	ldr	r1, [r7, #4]
 801c12c:	50d1      	str	r1, [r2, r3]
 801c12e:	69fb      	ldr	r3, [r7, #28]
 801c130:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c132:	69bb      	ldr	r3, [r7, #24]
 801c134:	f383 8810 	msr	PRIMASK, r3
}
 801c138:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c13a:	46c0      	nop			; (mov r8, r8)
}
 801c13c:	46bd      	mov	sp, r7
 801c13e:	b008      	add	sp, #32
 801c140:	bd80      	pop	{r7, pc}
 801c142:	46c0      	nop			; (mov r8, r8)
 801c144:	200012b0 	.word	0x200012b0

0801c148 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c148:	b580      	push	{r7, lr}
 801c14a:	b086      	sub	sp, #24
 801c14c:	af00      	add	r7, sp, #0
 801c14e:	6078      	str	r0, [r7, #4]
 801c150:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c152:	f3ef 8310 	mrs	r3, PRIMASK
 801c156:	60fb      	str	r3, [r7, #12]
  return(result);
 801c158:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c15a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c15c:	b672      	cpsid	i
}
 801c15e:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801c160:	4b0d      	ldr	r3, [pc, #52]	; (801c198 <UTIL_SEQ_SetTask+0x50>)
 801c162:	681a      	ldr	r2, [r3, #0]
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	431a      	orrs	r2, r3
 801c168:	4b0b      	ldr	r3, [pc, #44]	; (801c198 <UTIL_SEQ_SetTask+0x50>)
 801c16a:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c16c:	4b0b      	ldr	r3, [pc, #44]	; (801c19c <UTIL_SEQ_SetTask+0x54>)
 801c16e:	683a      	ldr	r2, [r7, #0]
 801c170:	00d2      	lsls	r2, r2, #3
 801c172:	58d2      	ldr	r2, [r2, r3]
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	431a      	orrs	r2, r3
 801c178:	0011      	movs	r1, r2
 801c17a:	4b08      	ldr	r3, [pc, #32]	; (801c19c <UTIL_SEQ_SetTask+0x54>)
 801c17c:	683a      	ldr	r2, [r7, #0]
 801c17e:	00d2      	lsls	r2, r2, #3
 801c180:	50d1      	str	r1, [r2, r3]
 801c182:	697b      	ldr	r3, [r7, #20]
 801c184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c186:	693b      	ldr	r3, [r7, #16]
 801c188:	f383 8810 	msr	PRIMASK, r3
}
 801c18c:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c18e:	46c0      	nop			; (mov r8, r8)
}
 801c190:	46bd      	mov	sp, r7
 801c192:	b006      	add	sp, #24
 801c194:	bd80      	pop	{r7, pc}
 801c196:	46c0      	nop			; (mov r8, r8)
 801c198:	200012a0 	.word	0x200012a0
 801c19c:	20001330 	.word	0x20001330

0801c1a0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c1a4:	46c0      	nop			; (mov r8, r8)
}
 801c1a6:	46bd      	mov	sp, r7
 801c1a8:	bd80      	pop	{r7, pc}

0801c1aa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c1aa:	b580      	push	{r7, lr}
 801c1ac:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c1ae:	46c0      	nop			; (mov r8, r8)
}
 801c1b0:	46bd      	mov	sp, r7
 801c1b2:	bd80      	pop	{r7, pc}

0801c1b4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b084      	sub	sp, #16
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c1bc:	210f      	movs	r1, #15
 801c1be:	187b      	adds	r3, r7, r1
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	0c1b      	lsrs	r3, r3, #16
 801c1c8:	041b      	lsls	r3, r3, #16
 801c1ca:	d105      	bne.n	801c1d8 <SEQ_BitPosition+0x24>
 801c1cc:	187b      	adds	r3, r7, r1
 801c1ce:	2210      	movs	r2, #16
 801c1d0:	701a      	strb	r2, [r3, #0]
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	041b      	lsls	r3, r3, #16
 801c1d6:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	0e1b      	lsrs	r3, r3, #24
 801c1dc:	061b      	lsls	r3, r3, #24
 801c1de:	d108      	bne.n	801c1f2 <SEQ_BitPosition+0x3e>
 801c1e0:	220f      	movs	r2, #15
 801c1e2:	18bb      	adds	r3, r7, r2
 801c1e4:	18ba      	adds	r2, r7, r2
 801c1e6:	7812      	ldrb	r2, [r2, #0]
 801c1e8:	3208      	adds	r2, #8
 801c1ea:	701a      	strb	r2, [r3, #0]
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	021b      	lsls	r3, r3, #8
 801c1f0:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	0f1b      	lsrs	r3, r3, #28
 801c1f6:	071b      	lsls	r3, r3, #28
 801c1f8:	d108      	bne.n	801c20c <SEQ_BitPosition+0x58>
 801c1fa:	220f      	movs	r2, #15
 801c1fc:	18bb      	adds	r3, r7, r2
 801c1fe:	18ba      	adds	r2, r7, r2
 801c200:	7812      	ldrb	r2, [r2, #0]
 801c202:	3204      	adds	r2, #4
 801c204:	701a      	strb	r2, [r3, #0]
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	011b      	lsls	r3, r3, #4
 801c20a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	0f1b      	lsrs	r3, r3, #28
 801c210:	4a08      	ldr	r2, [pc, #32]	; (801c234 <SEQ_BitPosition+0x80>)
 801c212:	5cd1      	ldrb	r1, [r2, r3]
 801c214:	200f      	movs	r0, #15
 801c216:	183b      	adds	r3, r7, r0
 801c218:	183a      	adds	r2, r7, r0
 801c21a:	7812      	ldrb	r2, [r2, #0]
 801c21c:	188a      	adds	r2, r1, r2
 801c21e:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801c220:	183b      	adds	r3, r7, r0
 801c222:	781b      	ldrb	r3, [r3, #0]
 801c224:	221f      	movs	r2, #31
 801c226:	1ad3      	subs	r3, r2, r3
 801c228:	b2db      	uxtb	r3, r3
}
 801c22a:	0018      	movs	r0, r3
 801c22c:	46bd      	mov	sp, r7
 801c22e:	b004      	add	sp, #16
 801c230:	bd80      	pop	{r7, pc}
 801c232:	46c0      	nop			; (mov r8, r8)
 801c234:	0801f4c8 	.word	0x0801f4c8

0801c238 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c238:	b082      	sub	sp, #8
 801c23a:	b580      	push	{r7, lr}
 801c23c:	b086      	sub	sp, #24
 801c23e:	af00      	add	r7, sp, #0
 801c240:	60f8      	str	r0, [r7, #12]
 801c242:	1d38      	adds	r0, r7, #4
 801c244:	6001      	str	r1, [r0, #0]
 801c246:	6042      	str	r2, [r0, #4]
 801c248:	2204      	movs	r2, #4
 801c24a:	2120      	movs	r1, #32
 801c24c:	468c      	mov	ip, r1
 801c24e:	44bc      	add	ip, r7
 801c250:	4462      	add	r2, ip
 801c252:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c254:	2110      	movs	r1, #16
 801c256:	187b      	adds	r3, r7, r1
 801c258:	2200      	movs	r2, #0
 801c25a:	601a      	str	r2, [r3, #0]
 801c25c:	187b      	adds	r3, r7, r1
 801c25e:	2200      	movs	r2, #0
 801c260:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801c262:	1d3b      	adds	r3, r7, #4
 801c264:	681a      	ldr	r2, [r3, #0]
 801c266:	2304      	movs	r3, #4
 801c268:	2020      	movs	r0, #32
 801c26a:	4684      	mov	ip, r0
 801c26c:	44bc      	add	ip, r7
 801c26e:	4463      	add	r3, ip
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	18d2      	adds	r2, r2, r3
 801c274:	187b      	adds	r3, r7, r1
 801c276:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c278:	1d3b      	adds	r3, r7, #4
 801c27a:	2204      	movs	r2, #4
 801c27c:	5e9b      	ldrsh	r3, [r3, r2]
 801c27e:	b29a      	uxth	r2, r3
 801c280:	2304      	movs	r3, #4
 801c282:	2020      	movs	r0, #32
 801c284:	4684      	mov	ip, r0
 801c286:	44bc      	add	ip, r7
 801c288:	4463      	add	r3, ip
 801c28a:	2004      	movs	r0, #4
 801c28c:	5e1b      	ldrsh	r3, [r3, r0]
 801c28e:	b29b      	uxth	r3, r3
 801c290:	18d3      	adds	r3, r2, r3
 801c292:	b29b      	uxth	r3, r3
 801c294:	b21a      	sxth	r2, r3
 801c296:	187b      	adds	r3, r7, r1
 801c298:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801c29a:	187b      	adds	r3, r7, r1
 801c29c:	2204      	movs	r2, #4
 801c29e:	5e9a      	ldrsh	r2, [r3, r2]
 801c2a0:	23fa      	movs	r3, #250	; 0xfa
 801c2a2:	009b      	lsls	r3, r3, #2
 801c2a4:	429a      	cmp	r2, r3
 801c2a6:	db0f      	blt.n	801c2c8 <SysTimeAdd+0x90>
  {
    c.Seconds++;
 801c2a8:	187b      	adds	r3, r7, r1
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	1c5a      	adds	r2, r3, #1
 801c2ae:	187b      	adds	r3, r7, r1
 801c2b0:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801c2b2:	187b      	adds	r3, r7, r1
 801c2b4:	2204      	movs	r2, #4
 801c2b6:	5e9b      	ldrsh	r3, [r3, r2]
 801c2b8:	b29b      	uxth	r3, r3
 801c2ba:	4a09      	ldr	r2, [pc, #36]	; (801c2e0 <SysTimeAdd+0xa8>)
 801c2bc:	4694      	mov	ip, r2
 801c2be:	4463      	add	r3, ip
 801c2c0:	b29b      	uxth	r3, r3
 801c2c2:	b21a      	sxth	r2, r3
 801c2c4:	187b      	adds	r3, r7, r1
 801c2c6:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	2210      	movs	r2, #16
 801c2cc:	18ba      	adds	r2, r7, r2
 801c2ce:	ca03      	ldmia	r2!, {r0, r1}
 801c2d0:	c303      	stmia	r3!, {r0, r1}
}
 801c2d2:	68f8      	ldr	r0, [r7, #12]
 801c2d4:	46bd      	mov	sp, r7
 801c2d6:	b006      	add	sp, #24
 801c2d8:	bc80      	pop	{r7}
 801c2da:	bc08      	pop	{r3}
 801c2dc:	b002      	add	sp, #8
 801c2de:	4718      	bx	r3
 801c2e0:	fffffc18 	.word	0xfffffc18

0801c2e4 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c2e4:	b082      	sub	sp, #8
 801c2e6:	b580      	push	{r7, lr}
 801c2e8:	b086      	sub	sp, #24
 801c2ea:	af00      	add	r7, sp, #0
 801c2ec:	60f8      	str	r0, [r7, #12]
 801c2ee:	1d38      	adds	r0, r7, #4
 801c2f0:	6001      	str	r1, [r0, #0]
 801c2f2:	6042      	str	r2, [r0, #4]
 801c2f4:	2204      	movs	r2, #4
 801c2f6:	2120      	movs	r1, #32
 801c2f8:	468c      	mov	ip, r1
 801c2fa:	44bc      	add	ip, r7
 801c2fc:	4462      	add	r2, ip
 801c2fe:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c300:	2110      	movs	r1, #16
 801c302:	187b      	adds	r3, r7, r1
 801c304:	2200      	movs	r2, #0
 801c306:	601a      	str	r2, [r3, #0]
 801c308:	187b      	adds	r3, r7, r1
 801c30a:	2200      	movs	r2, #0
 801c30c:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801c30e:	1d3b      	adds	r3, r7, #4
 801c310:	681a      	ldr	r2, [r3, #0]
 801c312:	2304      	movs	r3, #4
 801c314:	2020      	movs	r0, #32
 801c316:	4684      	mov	ip, r0
 801c318:	44bc      	add	ip, r7
 801c31a:	4463      	add	r3, ip
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	1ad2      	subs	r2, r2, r3
 801c320:	187b      	adds	r3, r7, r1
 801c322:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c324:	1d3b      	adds	r3, r7, #4
 801c326:	2204      	movs	r2, #4
 801c328:	5e9b      	ldrsh	r3, [r3, r2]
 801c32a:	b29a      	uxth	r2, r3
 801c32c:	2304      	movs	r3, #4
 801c32e:	2020      	movs	r0, #32
 801c330:	4684      	mov	ip, r0
 801c332:	44bc      	add	ip, r7
 801c334:	4463      	add	r3, ip
 801c336:	2004      	movs	r0, #4
 801c338:	5e1b      	ldrsh	r3, [r3, r0]
 801c33a:	b29b      	uxth	r3, r3
 801c33c:	1ad3      	subs	r3, r2, r3
 801c33e:	b29b      	uxth	r3, r3
 801c340:	b21a      	sxth	r2, r3
 801c342:	187b      	adds	r3, r7, r1
 801c344:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801c346:	187b      	adds	r3, r7, r1
 801c348:	2204      	movs	r2, #4
 801c34a:	5e9b      	ldrsh	r3, [r3, r2]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	da10      	bge.n	801c372 <SysTimeSub+0x8e>
  {
    c.Seconds--;
 801c350:	187b      	adds	r3, r7, r1
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	1e5a      	subs	r2, r3, #1
 801c356:	187b      	adds	r3, r7, r1
 801c358:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801c35a:	187b      	adds	r3, r7, r1
 801c35c:	2204      	movs	r2, #4
 801c35e:	5e9b      	ldrsh	r3, [r3, r2]
 801c360:	b29b      	uxth	r3, r3
 801c362:	22fa      	movs	r2, #250	; 0xfa
 801c364:	0092      	lsls	r2, r2, #2
 801c366:	4694      	mov	ip, r2
 801c368:	4463      	add	r3, ip
 801c36a:	b29b      	uxth	r3, r3
 801c36c:	b21a      	sxth	r2, r3
 801c36e:	187b      	adds	r3, r7, r1
 801c370:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	2210      	movs	r2, #16
 801c376:	18ba      	adds	r2, r7, r2
 801c378:	ca03      	ldmia	r2!, {r0, r1}
 801c37a:	c303      	stmia	r3!, {r0, r1}
}
 801c37c:	68f8      	ldr	r0, [r7, #12]
 801c37e:	46bd      	mov	sp, r7
 801c380:	b006      	add	sp, #24
 801c382:	bc80      	pop	{r7}
 801c384:	bc08      	pop	{r3}
 801c386:	b002      	add	sp, #8
 801c388:	4718      	bx	r3
	...

0801c38c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c38c:	b5b0      	push	{r4, r5, r7, lr}
 801c38e:	b088      	sub	sp, #32
 801c390:	af02      	add	r7, sp, #8
 801c392:	003b      	movs	r3, r7
 801c394:	6018      	str	r0, [r3, #0]
 801c396:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c398:	2108      	movs	r1, #8
 801c39a:	187b      	adds	r3, r7, r1
 801c39c:	2200      	movs	r2, #0
 801c39e:	601a      	str	r2, [r3, #0]
 801c3a0:	187b      	adds	r3, r7, r1
 801c3a2:	2200      	movs	r2, #0
 801c3a4:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c3a6:	4b14      	ldr	r3, [pc, #80]	; (801c3f8 <SysTimeSet+0x6c>)
 801c3a8:	691b      	ldr	r3, [r3, #16]
 801c3aa:	000c      	movs	r4, r1
 801c3ac:	187a      	adds	r2, r7, r1
 801c3ae:	3204      	adds	r2, #4
 801c3b0:	0010      	movs	r0, r2
 801c3b2:	4798      	blx	r3
 801c3b4:	0002      	movs	r2, r0
 801c3b6:	0021      	movs	r1, r4
 801c3b8:	187b      	adds	r3, r7, r1
 801c3ba:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c3bc:	2510      	movs	r5, #16
 801c3be:	197c      	adds	r4, r7, r5
 801c3c0:	187b      	adds	r3, r7, r1
 801c3c2:	003a      	movs	r2, r7
 801c3c4:	4669      	mov	r1, sp
 801c3c6:	6858      	ldr	r0, [r3, #4]
 801c3c8:	6008      	str	r0, [r1, #0]
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	6811      	ldr	r1, [r2, #0]
 801c3ce:	6852      	ldr	r2, [r2, #4]
 801c3d0:	0020      	movs	r0, r4
 801c3d2:	f7ff ff87 	bl	801c2e4 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c3d6:	4b08      	ldr	r3, [pc, #32]	; (801c3f8 <SysTimeSet+0x6c>)
 801c3d8:	681a      	ldr	r2, [r3, #0]
 801c3da:	197b      	adds	r3, r7, r5
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	0018      	movs	r0, r3
 801c3e0:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c3e2:	4b05      	ldr	r3, [pc, #20]	; (801c3f8 <SysTimeSet+0x6c>)
 801c3e4:	689b      	ldr	r3, [r3, #8]
 801c3e6:	197a      	adds	r2, r7, r5
 801c3e8:	2104      	movs	r1, #4
 801c3ea:	5e52      	ldrsh	r2, [r2, r1]
 801c3ec:	0010      	movs	r0, r2
 801c3ee:	4798      	blx	r3
}
 801c3f0:	46c0      	nop			; (mov r8, r8)
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	b006      	add	sp, #24
 801c3f6:	bdb0      	pop	{r4, r5, r7, pc}
 801c3f8:	0801e644 	.word	0x0801e644

0801c3fc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3fe:	b08b      	sub	sp, #44	; 0x2c
 801c400:	af02      	add	r7, sp, #8
 801c402:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c404:	2518      	movs	r5, #24
 801c406:	197b      	adds	r3, r7, r5
 801c408:	2200      	movs	r2, #0
 801c40a:	601a      	str	r2, [r3, #0]
 801c40c:	197b      	adds	r3, r7, r5
 801c40e:	2200      	movs	r2, #0
 801c410:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c412:	2410      	movs	r4, #16
 801c414:	193b      	adds	r3, r7, r4
 801c416:	2200      	movs	r2, #0
 801c418:	601a      	str	r2, [r3, #0]
 801c41a:	193b      	adds	r3, r7, r4
 801c41c:	2200      	movs	r2, #0
 801c41e:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c420:	4b16      	ldr	r3, [pc, #88]	; (801c47c <SysTimeGet+0x80>)
 801c422:	691b      	ldr	r3, [r3, #16]
 801c424:	197a      	adds	r2, r7, r5
 801c426:	3204      	adds	r2, #4
 801c428:	0010      	movs	r0, r2
 801c42a:	4798      	blx	r3
 801c42c:	0002      	movs	r2, r0
 801c42e:	197b      	adds	r3, r7, r5
 801c430:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c432:	4b12      	ldr	r3, [pc, #72]	; (801c47c <SysTimeGet+0x80>)
 801c434:	68db      	ldr	r3, [r3, #12]
 801c436:	4798      	blx	r3
 801c438:	0003      	movs	r3, r0
 801c43a:	b21a      	sxth	r2, r3
 801c43c:	2608      	movs	r6, #8
 801c43e:	19bb      	adds	r3, r7, r6
 801c440:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c442:	4b0e      	ldr	r3, [pc, #56]	; (801c47c <SysTimeGet+0x80>)
 801c444:	685b      	ldr	r3, [r3, #4]
 801c446:	4798      	blx	r3
 801c448:	0002      	movs	r2, r0
 801c44a:	0031      	movs	r1, r6
 801c44c:	187b      	adds	r3, r7, r1
 801c44e:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c450:	0026      	movs	r6, r4
 801c452:	193c      	adds	r4, r7, r4
 801c454:	197b      	adds	r3, r7, r5
 801c456:	187a      	adds	r2, r7, r1
 801c458:	4669      	mov	r1, sp
 801c45a:	6858      	ldr	r0, [r3, #4]
 801c45c:	6008      	str	r0, [r1, #0]
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	6811      	ldr	r1, [r2, #0]
 801c462:	6852      	ldr	r2, [r2, #4]
 801c464:	0020      	movs	r0, r4
 801c466:	f7ff fee7 	bl	801c238 <SysTimeAdd>

  return sysTime;
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	19ba      	adds	r2, r7, r6
 801c46e:	ca03      	ldmia	r2!, {r0, r1}
 801c470:	c303      	stmia	r3!, {r0, r1}
}
 801c472:	6878      	ldr	r0, [r7, #4]
 801c474:	46bd      	mov	sp, r7
 801c476:	b009      	add	sp, #36	; 0x24
 801c478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c47a:	46c0      	nop			; (mov r8, r8)
 801c47c:	0801e644 	.word	0x0801e644

0801c480 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c480:	b590      	push	{r4, r7, lr}
 801c482:	b085      	sub	sp, #20
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c488:	2108      	movs	r1, #8
 801c48a:	187b      	adds	r3, r7, r1
 801c48c:	2200      	movs	r2, #0
 801c48e:	601a      	str	r2, [r3, #0]
 801c490:	187b      	adds	r3, r7, r1
 801c492:	2200      	movs	r2, #0
 801c494:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c496:	4b09      	ldr	r3, [pc, #36]	; (801c4bc <SysTimeGetMcuTime+0x3c>)
 801c498:	691b      	ldr	r3, [r3, #16]
 801c49a:	000c      	movs	r4, r1
 801c49c:	187a      	adds	r2, r7, r1
 801c49e:	3204      	adds	r2, #4
 801c4a0:	0010      	movs	r0, r2
 801c4a2:	4798      	blx	r3
 801c4a4:	0002      	movs	r2, r0
 801c4a6:	193b      	adds	r3, r7, r4
 801c4a8:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	193a      	adds	r2, r7, r4
 801c4ae:	ca03      	ldmia	r2!, {r0, r1}
 801c4b0:	c303      	stmia	r3!, {r0, r1}
}
 801c4b2:	6878      	ldr	r0, [r7, #4]
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	b005      	add	sp, #20
 801c4b8:	bd90      	pop	{r4, r7, pc}
 801c4ba:	46c0      	nop			; (mov r8, r8)
 801c4bc:	0801e644 	.word	0x0801e644

0801c4c0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c4c4:	4b04      	ldr	r3, [pc, #16]	; (801c4d8 <UTIL_TIMER_Init+0x18>)
 801c4c6:	2200      	movs	r2, #0
 801c4c8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c4ca:	4b04      	ldr	r3, [pc, #16]	; (801c4dc <UTIL_TIMER_Init+0x1c>)
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	4798      	blx	r3
 801c4d0:	0003      	movs	r3, r0
}
 801c4d2:	0018      	movs	r0, r3
 801c4d4:	46bd      	mov	sp, r7
 801c4d6:	bd80      	pop	{r7, pc}
 801c4d8:	20001340 	.word	0x20001340
 801c4dc:	0801e618 	.word	0x0801e618

0801c4e0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c4e0:	b580      	push	{r7, lr}
 801c4e2:	b084      	sub	sp, #16
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	60f8      	str	r0, [r7, #12]
 801c4e8:	60b9      	str	r1, [r7, #8]
 801c4ea:	603b      	str	r3, [r7, #0]
 801c4ec:	1dfb      	adds	r3, r7, #7
 801c4ee:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d025      	beq.n	801c542 <UTIL_TIMER_Create+0x62>
 801c4f6:	683b      	ldr	r3, [r7, #0]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d022      	beq.n	801c542 <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	2200      	movs	r2, #0
 801c500:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c502:	4b12      	ldr	r3, [pc, #72]	; (801c54c <UTIL_TIMER_Create+0x6c>)
 801c504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c506:	68ba      	ldr	r2, [r7, #8]
 801c508:	0010      	movs	r0, r2
 801c50a:	4798      	blx	r3
 801c50c:	0002      	movs	r2, r0
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	2200      	movs	r2, #0
 801c516:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	2200      	movs	r2, #0
 801c51c:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	2200      	movs	r2, #0
 801c522:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	683a      	ldr	r2, [r7, #0]
 801c528:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	69ba      	ldr	r2, [r7, #24]
 801c52e:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	1dfa      	adds	r2, r7, #7
 801c534:	7812      	ldrb	r2, [r2, #0]
 801c536:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	2200      	movs	r2, #0
 801c53c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c53e:	2300      	movs	r3, #0
 801c540:	e000      	b.n	801c544 <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c542:	2301      	movs	r3, #1
  }
}
 801c544:	0018      	movs	r0, r3
 801c546:	46bd      	mov	sp, r7
 801c548:	b004      	add	sp, #16
 801c54a:	bd80      	pop	{r7, pc}
 801c54c:	0801e618 	.word	0x0801e618

0801c550 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b08a      	sub	sp, #40	; 0x28
 801c554:	af00      	add	r7, sp, #0
 801c556:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c558:	2327      	movs	r3, #39	; 0x27
 801c55a:	18fb      	adds	r3, r7, r3
 801c55c:	2200      	movs	r2, #0
 801c55e:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d05d      	beq.n	801c622 <UTIL_TIMER_Start+0xd2>
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	0018      	movs	r0, r3
 801c56a:	f000 f9cb 	bl	801c904 <TimerExists>
 801c56e:	0003      	movs	r3, r0
 801c570:	001a      	movs	r2, r3
 801c572:	2301      	movs	r3, #1
 801c574:	4053      	eors	r3, r2
 801c576:	b2db      	uxtb	r3, r3
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d052      	beq.n	801c622 <UTIL_TIMER_Start+0xd2>
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	7a5b      	ldrb	r3, [r3, #9]
 801c580:	2b00      	cmp	r3, #0
 801c582:	d14e      	bne.n	801c622 <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c584:	f3ef 8310 	mrs	r3, PRIMASK
 801c588:	613b      	str	r3, [r7, #16]
  return(result);
 801c58a:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c58c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c58e:	b672      	cpsid	i
}
 801c590:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	685b      	ldr	r3, [r3, #4]
 801c596:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c598:	4b27      	ldr	r3, [pc, #156]	; (801c638 <UTIL_TIMER_Start+0xe8>)
 801c59a:	6a1b      	ldr	r3, [r3, #32]
 801c59c:	4798      	blx	r3
 801c59e:	0003      	movs	r3, r0
 801c5a0:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801c5a2:	6a3a      	ldr	r2, [r7, #32]
 801c5a4:	69bb      	ldr	r3, [r7, #24]
 801c5a6:	429a      	cmp	r2, r3
 801c5a8:	d201      	bcs.n	801c5ae <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801c5aa:	69bb      	ldr	r3, [r7, #24]
 801c5ac:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	6a3a      	ldr	r2, [r7, #32]
 801c5b2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	2200      	movs	r2, #0
 801c5b8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	2201      	movs	r2, #1
 801c5be:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c5c6:	4b1d      	ldr	r3, [pc, #116]	; (801c63c <UTIL_TIMER_Start+0xec>)
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d107      	bne.n	801c5de <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c5ce:	4b1a      	ldr	r3, [pc, #104]	; (801c638 <UTIL_TIMER_Start+0xe8>)
 801c5d0:	691b      	ldr	r3, [r3, #16]
 801c5d2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	0018      	movs	r0, r3
 801c5d8:	f000 fa08 	bl	801c9ec <TimerInsertNewHeadTimer>
 801c5dc:	e01a      	b.n	801c614 <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c5de:	4b16      	ldr	r3, [pc, #88]	; (801c638 <UTIL_TIMER_Start+0xe8>)
 801c5e0:	699b      	ldr	r3, [r3, #24]
 801c5e2:	4798      	blx	r3
 801c5e4:	0003      	movs	r3, r0
 801c5e6:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	681a      	ldr	r2, [r3, #0]
 801c5ec:	697b      	ldr	r3, [r7, #20]
 801c5ee:	18d2      	adds	r2, r2, r3
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	681a      	ldr	r2, [r3, #0]
 801c5f8:	4b10      	ldr	r3, [pc, #64]	; (801c63c <UTIL_TIMER_Start+0xec>)
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	429a      	cmp	r2, r3
 801c600:	d204      	bcs.n	801c60c <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	0018      	movs	r0, r3
 801c606:	f000 f9f1 	bl	801c9ec <TimerInsertNewHeadTimer>
 801c60a:	e003      	b.n	801c614 <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	0018      	movs	r0, r3
 801c610:	f000 f9be 	bl	801c990 <TimerInsertTimer>
 801c614:	69fb      	ldr	r3, [r7, #28]
 801c616:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	f383 8810 	msr	PRIMASK, r3
}
 801c61e:	46c0      	nop			; (mov r8, r8)
  {
 801c620:	e003      	b.n	801c62a <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c622:	2327      	movs	r3, #39	; 0x27
 801c624:	18fb      	adds	r3, r7, r3
 801c626:	2201      	movs	r2, #1
 801c628:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801c62a:	2327      	movs	r3, #39	; 0x27
 801c62c:	18fb      	adds	r3, r7, r3
 801c62e:	781b      	ldrb	r3, [r3, #0]
}
 801c630:	0018      	movs	r0, r3
 801c632:	46bd      	mov	sp, r7
 801c634:	b00a      	add	sp, #40	; 0x28
 801c636:	bd80      	pop	{r7, pc}
 801c638:	0801e618 	.word	0x0801e618
 801c63c:	20001340 	.word	0x20001340

0801c640 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b088      	sub	sp, #32
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c648:	231f      	movs	r3, #31
 801c64a:	18fb      	adds	r3, r7, r3
 801c64c:	2200      	movs	r2, #0
 801c64e:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d05d      	beq.n	801c712 <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c656:	f3ef 8310 	mrs	r3, PRIMASK
 801c65a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c65c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c65e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c660:	b672      	cpsid	i
}
 801c662:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c664:	4b30      	ldr	r3, [pc, #192]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c66a:	4b2f      	ldr	r3, [pc, #188]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	2201      	movs	r2, #1
 801c674:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c676:	4b2c      	ldr	r3, [pc, #176]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d043      	beq.n	801c706 <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	2200      	movs	r2, #0
 801c682:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c684:	4b28      	ldr	r3, [pc, #160]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	687a      	ldr	r2, [r7, #4]
 801c68a:	429a      	cmp	r2, r3
 801c68c:	d134      	bne.n	801c6f8 <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801c68e:	4b26      	ldr	r3, [pc, #152]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	2200      	movs	r2, #0
 801c694:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c696:	4b24      	ldr	r3, [pc, #144]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	695b      	ldr	r3, [r3, #20]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d00a      	beq.n	801c6b6 <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801c6a0:	4b21      	ldr	r3, [pc, #132]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	695a      	ldr	r2, [r3, #20]
 801c6a6:	4b20      	ldr	r3, [pc, #128]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c6a8:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801c6aa:	4b1f      	ldr	r3, [pc, #124]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	0018      	movs	r0, r3
 801c6b0:	f000 f944 	bl	801c93c <TimerSetTimeout>
 801c6b4:	e023      	b.n	801c6fe <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c6b6:	4b1d      	ldr	r3, [pc, #116]	; (801c72c <UTIL_TIMER_Stop+0xec>)
 801c6b8:	68db      	ldr	r3, [r3, #12]
 801c6ba:	4798      	blx	r3
            TimerListHead = NULL;
 801c6bc:	4b1a      	ldr	r3, [pc, #104]	; (801c728 <UTIL_TIMER_Stop+0xe8>)
 801c6be:	2200      	movs	r2, #0
 801c6c0:	601a      	str	r2, [r3, #0]
 801c6c2:	e01c      	b.n	801c6fe <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c6c4:	697a      	ldr	r2, [r7, #20]
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	429a      	cmp	r2, r3
 801c6ca:	d110      	bne.n	801c6ee <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801c6cc:	697b      	ldr	r3, [r7, #20]
 801c6ce:	695b      	ldr	r3, [r3, #20]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d006      	beq.n	801c6e2 <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801c6d4:	697b      	ldr	r3, [r7, #20]
 801c6d6:	695b      	ldr	r3, [r3, #20]
 801c6d8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c6da:	69bb      	ldr	r3, [r7, #24]
 801c6dc:	697a      	ldr	r2, [r7, #20]
 801c6de:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c6e0:	e00d      	b.n	801c6fe <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c6e6:	69bb      	ldr	r3, [r7, #24]
 801c6e8:	697a      	ldr	r2, [r7, #20]
 801c6ea:	615a      	str	r2, [r3, #20]
            break;
 801c6ec:	e007      	b.n	801c6fe <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801c6ee:	697b      	ldr	r3, [r7, #20]
 801c6f0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c6f2:	697b      	ldr	r3, [r7, #20]
 801c6f4:	695b      	ldr	r3, [r3, #20]
 801c6f6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c6f8:	697b      	ldr	r3, [r7, #20]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d1e2      	bne.n	801c6c4 <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c6fe:	231f      	movs	r3, #31
 801c700:	18fb      	adds	r3, r7, r3
 801c702:	2200      	movs	r2, #0
 801c704:	701a      	strb	r2, [r3, #0]
 801c706:	693b      	ldr	r3, [r7, #16]
 801c708:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c70a:	68bb      	ldr	r3, [r7, #8]
 801c70c:	f383 8810 	msr	PRIMASK, r3
}
 801c710:	e003      	b.n	801c71a <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c712:	231f      	movs	r3, #31
 801c714:	18fb      	adds	r3, r7, r3
 801c716:	2201      	movs	r2, #1
 801c718:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801c71a:	231f      	movs	r3, #31
 801c71c:	18fb      	adds	r3, r7, r3
 801c71e:	781b      	ldrb	r3, [r3, #0]
}
 801c720:	0018      	movs	r0, r3
 801c722:	46bd      	mov	sp, r7
 801c724:	b008      	add	sp, #32
 801c726:	bd80      	pop	{r7, pc}
 801c728:	20001340 	.word	0x20001340
 801c72c:	0801e618 	.word	0x0801e618

0801c730 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c730:	b590      	push	{r4, r7, lr}
 801c732:	b085      	sub	sp, #20
 801c734:	af00      	add	r7, sp, #0
 801c736:	6078      	str	r0, [r7, #4]
 801c738:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c73a:	210f      	movs	r1, #15
 801c73c:	187b      	adds	r3, r7, r1
 801c73e:	2200      	movs	r2, #0
 801c740:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d103      	bne.n	801c750 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c748:	187b      	adds	r3, r7, r1
 801c74a:	2201      	movs	r2, #1
 801c74c:	701a      	strb	r2, [r3, #0]
 801c74e:	e019      	b.n	801c784 <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c750:	4b10      	ldr	r3, [pc, #64]	; (801c794 <UTIL_TIMER_SetPeriod+0x64>)
 801c752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c754:	683a      	ldr	r2, [r7, #0]
 801c756:	0010      	movs	r0, r2
 801c758:	4798      	blx	r3
 801c75a:	0002      	movs	r2, r0
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	0018      	movs	r0, r3
 801c764:	f000 f8ce 	bl	801c904 <TimerExists>
 801c768:	1e03      	subs	r3, r0, #0
 801c76a:	d00b      	beq.n	801c784 <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	0018      	movs	r0, r3
 801c770:	f7ff ff66 	bl	801c640 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c774:	230f      	movs	r3, #15
 801c776:	18fc      	adds	r4, r7, r3
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	0018      	movs	r0, r3
 801c77c:	f7ff fee8 	bl	801c550 <UTIL_TIMER_Start>
 801c780:	0003      	movs	r3, r0
 801c782:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801c784:	230f      	movs	r3, #15
 801c786:	18fb      	adds	r3, r7, r3
 801c788:	781b      	ldrb	r3, [r3, #0]
}
 801c78a:	0018      	movs	r0, r3
 801c78c:	46bd      	mov	sp, r7
 801c78e:	b005      	add	sp, #20
 801c790:	bd90      	pop	{r4, r7, pc}
 801c792:	46c0      	nop			; (mov r8, r8)
 801c794:	0801e618 	.word	0x0801e618

0801c798 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c798:	b590      	push	{r4, r7, lr}
 801c79a:	b089      	sub	sp, #36	; 0x24
 801c79c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c79e:	f3ef 8310 	mrs	r3, PRIMASK
 801c7a2:	60bb      	str	r3, [r7, #8]
  return(result);
 801c7a4:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c7a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7a8:	b672      	cpsid	i
}
 801c7aa:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c7ac:	4b3a      	ldr	r3, [pc, #232]	; (801c898 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c7ae:	695b      	ldr	r3, [r3, #20]
 801c7b0:	4798      	blx	r3
 801c7b2:	0003      	movs	r3, r0
 801c7b4:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c7b6:	4b38      	ldr	r3, [pc, #224]	; (801c898 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c7b8:	691b      	ldr	r3, [r3, #16]
 801c7ba:	4798      	blx	r3
 801c7bc:	0003      	movs	r3, r0
 801c7be:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c7c0:	693a      	ldr	r2, [r7, #16]
 801c7c2:	697b      	ldr	r3, [r7, #20]
 801c7c4:	1ad3      	subs	r3, r2, r3
 801c7c6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c7c8:	4b34      	ldr	r3, [pc, #208]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d038      	beq.n	801c842 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801c7d0:	4b32      	ldr	r3, [pc, #200]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c7d6:	69fb      	ldr	r3, [r7, #28]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	68fa      	ldr	r2, [r7, #12]
 801c7dc:	429a      	cmp	r2, r3
 801c7de:	d206      	bcs.n	801c7ee <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801c7e0:	69fb      	ldr	r3, [r7, #28]
 801c7e2:	681a      	ldr	r2, [r3, #0]
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	1ad2      	subs	r2, r2, r3
 801c7e8:	69fb      	ldr	r3, [r7, #28]
 801c7ea:	601a      	str	r2, [r3, #0]
 801c7ec:	e002      	b.n	801c7f4 <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801c7ee:	69fb      	ldr	r3, [r7, #28]
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c7f4:	69fb      	ldr	r3, [r7, #28]
 801c7f6:	695b      	ldr	r3, [r3, #20]
 801c7f8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c7fa:	69fb      	ldr	r3, [r7, #28]
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d1ea      	bne.n	801c7d6 <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c800:	e01f      	b.n	801c842 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801c802:	4b26      	ldr	r3, [pc, #152]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c808:	4b24      	ldr	r3, [pc, #144]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	695a      	ldr	r2, [r3, #20]
 801c80e:	4b23      	ldr	r3, [pc, #140]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c810:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801c812:	69fb      	ldr	r3, [r7, #28]
 801c814:	2200      	movs	r2, #0
 801c816:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c818:	69fb      	ldr	r3, [r7, #28]
 801c81a:	2200      	movs	r2, #0
 801c81c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c81e:	69fb      	ldr	r3, [r7, #28]
 801c820:	68da      	ldr	r2, [r3, #12]
 801c822:	69fb      	ldr	r3, [r7, #28]
 801c824:	691b      	ldr	r3, [r3, #16]
 801c826:	0018      	movs	r0, r3
 801c828:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c82a:	69fb      	ldr	r3, [r7, #28]
 801c82c:	7adb      	ldrb	r3, [r3, #11]
 801c82e:	2b01      	cmp	r3, #1
 801c830:	d107      	bne.n	801c842 <UTIL_TIMER_IRQ_Handler+0xaa>
 801c832:	69fb      	ldr	r3, [r7, #28]
 801c834:	7a9b      	ldrb	r3, [r3, #10]
 801c836:	2b00      	cmp	r3, #0
 801c838:	d103      	bne.n	801c842 <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801c83a:	69fb      	ldr	r3, [r7, #28]
 801c83c:	0018      	movs	r0, r3
 801c83e:	f7ff fe87 	bl	801c550 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c842:	4b16      	ldr	r3, [pc, #88]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d00d      	beq.n	801c866 <UTIL_TIMER_IRQ_Handler+0xce>
 801c84a:	4b14      	ldr	r3, [pc, #80]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	2b00      	cmp	r3, #0
 801c852:	d0d6      	beq.n	801c802 <UTIL_TIMER_IRQ_Handler+0x6a>
 801c854:	4b11      	ldr	r3, [pc, #68]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	681c      	ldr	r4, [r3, #0]
 801c85a:	4b0f      	ldr	r3, [pc, #60]	; (801c898 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c85c:	699b      	ldr	r3, [r3, #24]
 801c85e:	4798      	blx	r3
 801c860:	0003      	movs	r3, r0
 801c862:	429c      	cmp	r4, r3
 801c864:	d3cd      	bcc.n	801c802 <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c866:	4b0d      	ldr	r3, [pc, #52]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d009      	beq.n	801c882 <UTIL_TIMER_IRQ_Handler+0xea>
 801c86e:	4b0b      	ldr	r3, [pc, #44]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	7a1b      	ldrb	r3, [r3, #8]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d104      	bne.n	801c882 <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801c878:	4b08      	ldr	r3, [pc, #32]	; (801c89c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	0018      	movs	r0, r3
 801c87e:	f000 f85d 	bl	801c93c <TimerSetTimeout>
 801c882:	69bb      	ldr	r3, [r7, #24]
 801c884:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	f383 8810 	msr	PRIMASK, r3
}
 801c88c:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c88e:	46c0      	nop			; (mov r8, r8)
 801c890:	46bd      	mov	sp, r7
 801c892:	b009      	add	sp, #36	; 0x24
 801c894:	bd90      	pop	{r4, r7, pc}
 801c896:	46c0      	nop			; (mov r8, r8)
 801c898:	0801e618 	.word	0x0801e618
 801c89c:	20001340 	.word	0x20001340

0801c8a0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	b082      	sub	sp, #8
 801c8a4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c8a6:	4b07      	ldr	r3, [pc, #28]	; (801c8c4 <UTIL_TIMER_GetCurrentTime+0x24>)
 801c8a8:	69db      	ldr	r3, [r3, #28]
 801c8aa:	4798      	blx	r3
 801c8ac:	0003      	movs	r3, r0
 801c8ae:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c8b0:	4b04      	ldr	r3, [pc, #16]	; (801c8c4 <UTIL_TIMER_GetCurrentTime+0x24>)
 801c8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8b4:	687a      	ldr	r2, [r7, #4]
 801c8b6:	0010      	movs	r0, r2
 801c8b8:	4798      	blx	r3
 801c8ba:	0003      	movs	r3, r0
}
 801c8bc:	0018      	movs	r0, r3
 801c8be:	46bd      	mov	sp, r7
 801c8c0:	b002      	add	sp, #8
 801c8c2:	bd80      	pop	{r7, pc}
 801c8c4:	0801e618 	.word	0x0801e618

0801c8c8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b084      	sub	sp, #16
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c8d0:	4b0b      	ldr	r3, [pc, #44]	; (801c900 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c8d2:	69db      	ldr	r3, [r3, #28]
 801c8d4:	4798      	blx	r3
 801c8d6:	0003      	movs	r3, r0
 801c8d8:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c8da:	4b09      	ldr	r3, [pc, #36]	; (801c900 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8de:	687a      	ldr	r2, [r7, #4]
 801c8e0:	0010      	movs	r0, r2
 801c8e2:	4798      	blx	r3
 801c8e4:	0003      	movs	r3, r0
 801c8e6:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c8e8:	4b05      	ldr	r3, [pc, #20]	; (801c900 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8ec:	68f9      	ldr	r1, [r7, #12]
 801c8ee:	68ba      	ldr	r2, [r7, #8]
 801c8f0:	1a8a      	subs	r2, r1, r2
 801c8f2:	0010      	movs	r0, r2
 801c8f4:	4798      	blx	r3
 801c8f6:	0003      	movs	r3, r0
}
 801c8f8:	0018      	movs	r0, r3
 801c8fa:	46bd      	mov	sp, r7
 801c8fc:	b004      	add	sp, #16
 801c8fe:	bd80      	pop	{r7, pc}
 801c900:	0801e618 	.word	0x0801e618

0801c904 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c904:	b580      	push	{r7, lr}
 801c906:	b084      	sub	sp, #16
 801c908:	af00      	add	r7, sp, #0
 801c90a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c90c:	4b0a      	ldr	r3, [pc, #40]	; (801c938 <TimerExists+0x34>)
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c912:	e008      	b.n	801c926 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c914:	68fa      	ldr	r2, [r7, #12]
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	429a      	cmp	r2, r3
 801c91a:	d101      	bne.n	801c920 <TimerExists+0x1c>
    {
      return true;
 801c91c:	2301      	movs	r3, #1
 801c91e:	e006      	b.n	801c92e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	695b      	ldr	r3, [r3, #20]
 801c924:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d1f3      	bne.n	801c914 <TimerExists+0x10>
  }
  return false;
 801c92c:	2300      	movs	r3, #0
}
 801c92e:	0018      	movs	r0, r3
 801c930:	46bd      	mov	sp, r7
 801c932:	b004      	add	sp, #16
 801c934:	bd80      	pop	{r7, pc}
 801c936:	46c0      	nop			; (mov r8, r8)
 801c938:	20001340 	.word	0x20001340

0801c93c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c93c:	b590      	push	{r4, r7, lr}
 801c93e:	b085      	sub	sp, #20
 801c940:	af00      	add	r7, sp, #0
 801c942:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c944:	4b11      	ldr	r3, [pc, #68]	; (801c98c <TimerSetTimeout+0x50>)
 801c946:	6a1b      	ldr	r3, [r3, #32]
 801c948:	4798      	blx	r3
 801c94a:	0003      	movs	r3, r0
 801c94c:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	2201      	movs	r2, #1
 801c952:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	681c      	ldr	r4, [r3, #0]
 801c958:	4b0c      	ldr	r3, [pc, #48]	; (801c98c <TimerSetTimeout+0x50>)
 801c95a:	699b      	ldr	r3, [r3, #24]
 801c95c:	4798      	blx	r3
 801c95e:	0002      	movs	r2, r0
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	18d3      	adds	r3, r2, r3
 801c964:	429c      	cmp	r4, r3
 801c966:	d207      	bcs.n	801c978 <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c968:	4b08      	ldr	r3, [pc, #32]	; (801c98c <TimerSetTimeout+0x50>)
 801c96a:	699b      	ldr	r3, [r3, #24]
 801c96c:	4798      	blx	r3
 801c96e:	0002      	movs	r2, r0
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	18d2      	adds	r2, r2, r3
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c978:	4b04      	ldr	r3, [pc, #16]	; (801c98c <TimerSetTimeout+0x50>)
 801c97a:	689a      	ldr	r2, [r3, #8]
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	681b      	ldr	r3, [r3, #0]
 801c980:	0018      	movs	r0, r3
 801c982:	4790      	blx	r2
}
 801c984:	46c0      	nop			; (mov r8, r8)
 801c986:	46bd      	mov	sp, r7
 801c988:	b005      	add	sp, #20
 801c98a:	bd90      	pop	{r4, r7, pc}
 801c98c:	0801e618 	.word	0x0801e618

0801c990 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b084      	sub	sp, #16
 801c994:	af00      	add	r7, sp, #0
 801c996:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c998:	4b13      	ldr	r3, [pc, #76]	; (801c9e8 <TimerInsertTimer+0x58>)
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c99e:	4b12      	ldr	r3, [pc, #72]	; (801c9e8 <TimerInsertTimer+0x58>)
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	695b      	ldr	r3, [r3, #20]
 801c9a4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c9a6:	e012      	b.n	801c9ce <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	681a      	ldr	r2, [r3, #0]
 801c9ac:	68bb      	ldr	r3, [r7, #8]
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	429a      	cmp	r2, r3
 801c9b2:	d905      	bls.n	801c9c0 <TimerInsertTimer+0x30>
    {
        cur = next;
 801c9b4:	68bb      	ldr	r3, [r7, #8]
 801c9b6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c9b8:	68bb      	ldr	r3, [r7, #8]
 801c9ba:	695b      	ldr	r3, [r3, #20]
 801c9bc:	60bb      	str	r3, [r7, #8]
 801c9be:	e006      	b.n	801c9ce <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c9c0:	68fb      	ldr	r3, [r7, #12]
 801c9c2:	687a      	ldr	r2, [r7, #4]
 801c9c4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	68ba      	ldr	r2, [r7, #8]
 801c9ca:	615a      	str	r2, [r3, #20]
        return;
 801c9cc:	e009      	b.n	801c9e2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	695b      	ldr	r3, [r3, #20]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d1e8      	bne.n	801c9a8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	687a      	ldr	r2, [r7, #4]
 801c9da:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	2200      	movs	r2, #0
 801c9e0:	615a      	str	r2, [r3, #20]
}
 801c9e2:	46bd      	mov	sp, r7
 801c9e4:	b004      	add	sp, #16
 801c9e6:	bd80      	pop	{r7, pc}
 801c9e8:	20001340 	.word	0x20001340

0801c9ec <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	b084      	sub	sp, #16
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c9f4:	4b0b      	ldr	r3, [pc, #44]	; (801ca24 <TimerInsertNewHeadTimer+0x38>)
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d002      	beq.n	801ca06 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	2200      	movs	r2, #0
 801ca04:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	68fa      	ldr	r2, [r7, #12]
 801ca0a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ca0c:	4b05      	ldr	r3, [pc, #20]	; (801ca24 <TimerInsertNewHeadTimer+0x38>)
 801ca0e:	687a      	ldr	r2, [r7, #4]
 801ca10:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801ca12:	4b04      	ldr	r3, [pc, #16]	; (801ca24 <TimerInsertNewHeadTimer+0x38>)
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	0018      	movs	r0, r3
 801ca18:	f7ff ff90 	bl	801c93c <TimerSetTimeout>
}
 801ca1c:	46c0      	nop			; (mov r8, r8)
 801ca1e:	46bd      	mov	sp, r7
 801ca20:	b004      	add	sp, #16
 801ca22:	bd80      	pop	{r7, pc}
 801ca24:	20001340 	.word	0x20001340

0801ca28 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b084      	sub	sp, #16
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ca30:	2300      	movs	r3, #0
 801ca32:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ca34:	e00e      	b.n	801ca54 <ee_skip_atoi+0x2c>
 801ca36:	68fa      	ldr	r2, [r7, #12]
 801ca38:	0013      	movs	r3, r2
 801ca3a:	009b      	lsls	r3, r3, #2
 801ca3c:	189b      	adds	r3, r3, r2
 801ca3e:	005b      	lsls	r3, r3, #1
 801ca40:	0018      	movs	r0, r3
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	1c59      	adds	r1, r3, #1
 801ca48:	687a      	ldr	r2, [r7, #4]
 801ca4a:	6011      	str	r1, [r2, #0]
 801ca4c:	781b      	ldrb	r3, [r3, #0]
 801ca4e:	18c3      	adds	r3, r0, r3
 801ca50:	3b30      	subs	r3, #48	; 0x30
 801ca52:	60fb      	str	r3, [r7, #12]
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	781b      	ldrb	r3, [r3, #0]
 801ca5a:	2b2f      	cmp	r3, #47	; 0x2f
 801ca5c:	d904      	bls.n	801ca68 <ee_skip_atoi+0x40>
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	781b      	ldrb	r3, [r3, #0]
 801ca64:	2b39      	cmp	r3, #57	; 0x39
 801ca66:	d9e6      	bls.n	801ca36 <ee_skip_atoi+0xe>
  return i;
 801ca68:	68fb      	ldr	r3, [r7, #12]
}
 801ca6a:	0018      	movs	r0, r3
 801ca6c:	46bd      	mov	sp, r7
 801ca6e:	b004      	add	sp, #16
 801ca70:	bd80      	pop	{r7, pc}
	...

0801ca74 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b098      	sub	sp, #96	; 0x60
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	60f8      	str	r0, [r7, #12]
 801ca7c:	60b9      	str	r1, [r7, #8]
 801ca7e:	607a      	str	r2, [r7, #4]
 801ca80:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ca82:	4b72      	ldr	r3, [pc, #456]	; (801cc4c <ee_number+0x1d8>)
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ca88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca8a:	2240      	movs	r2, #64	; 0x40
 801ca8c:	4013      	ands	r3, r2
 801ca8e:	d002      	beq.n	801ca96 <ee_number+0x22>
 801ca90:	4b6f      	ldr	r3, [pc, #444]	; (801cc50 <ee_number+0x1dc>)
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ca96:	683b      	ldr	r3, [r7, #0]
 801ca98:	2b01      	cmp	r3, #1
 801ca9a:	dd02      	ble.n	801caa2 <ee_number+0x2e>
 801ca9c:	683b      	ldr	r3, [r7, #0]
 801ca9e:	2b24      	cmp	r3, #36	; 0x24
 801caa0:	dd01      	ble.n	801caa6 <ee_number+0x32>
 801caa2:	2300      	movs	r3, #0
 801caa4:	e0cd      	b.n	801cc42 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801caa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801caa8:	2201      	movs	r2, #1
 801caaa:	4013      	ands	r3, r2
 801caac:	d001      	beq.n	801cab2 <ee_number+0x3e>
 801caae:	2230      	movs	r2, #48	; 0x30
 801cab0:	e000      	b.n	801cab4 <ee_number+0x40>
 801cab2:	2220      	movs	r2, #32
 801cab4:	2353      	movs	r3, #83	; 0x53
 801cab6:	18fb      	adds	r3, r7, r3
 801cab8:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801caba:	215f      	movs	r1, #95	; 0x5f
 801cabc:	187b      	adds	r3, r7, r1
 801cabe:	2200      	movs	r2, #0
 801cac0:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801cac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cac4:	2202      	movs	r2, #2
 801cac6:	4013      	ands	r3, r2
 801cac8:	d00b      	beq.n	801cae2 <ee_number+0x6e>
  {
    if (num < 0)
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	da08      	bge.n	801cae2 <ee_number+0x6e>
    {
      sign = '-';
 801cad0:	187b      	adds	r3, r7, r1
 801cad2:	222d      	movs	r2, #45	; 0x2d
 801cad4:	701a      	strb	r2, [r3, #0]
      num = -num;
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	425b      	negs	r3, r3
 801cada:	607b      	str	r3, [r7, #4]
      size--;
 801cadc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cade:	3b01      	subs	r3, #1
 801cae0:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801cae2:	2300      	movs	r3, #0
 801cae4:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d120      	bne.n	801cb2e <ee_number+0xba>
    tmp[i++] = '0';
 801caec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801caee:	1c5a      	adds	r2, r3, #1
 801caf0:	657a      	str	r2, [r7, #84]	; 0x54
 801caf2:	2210      	movs	r2, #16
 801caf4:	18ba      	adds	r2, r7, r2
 801caf6:	2130      	movs	r1, #48	; 0x30
 801caf8:	54d1      	strb	r1, [r2, r3]
 801cafa:	e01b      	b.n	801cb34 <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	683a      	ldr	r2, [r7, #0]
 801cb00:	0011      	movs	r1, r2
 801cb02:	0018      	movs	r0, r3
 801cb04:	f7e3 fb98 	bl	8000238 <__aeabi_uidivmod>
 801cb08:	000b      	movs	r3, r1
 801cb0a:	001a      	movs	r2, r3
 801cb0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cb0e:	189a      	adds	r2, r3, r2
 801cb10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb12:	1c59      	adds	r1, r3, #1
 801cb14:	6579      	str	r1, [r7, #84]	; 0x54
 801cb16:	7811      	ldrb	r1, [r2, #0]
 801cb18:	2210      	movs	r2, #16
 801cb1a:	18ba      	adds	r2, r7, r2
 801cb1c:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	683a      	ldr	r2, [r7, #0]
 801cb22:	0011      	movs	r1, r2
 801cb24:	0018      	movs	r0, r3
 801cb26:	f7e3 fb01 	bl	800012c <__udivsi3>
 801cb2a:	0003      	movs	r3, r0
 801cb2c:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d1e3      	bne.n	801cafc <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801cb34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cb36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cb38:	429a      	cmp	r2, r3
 801cb3a:	dd01      	ble.n	801cb40 <ee_number+0xcc>
 801cb3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801cb40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cb42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cb44:	1ad3      	subs	r3, r2, r3
 801cb46:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801cb48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cb4a:	2201      	movs	r2, #1
 801cb4c:	4013      	ands	r3, r2
 801cb4e:	d112      	bne.n	801cb76 <ee_number+0x102>
 801cb50:	e00c      	b.n	801cb6c <ee_number+0xf8>
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	1c5a      	adds	r2, r3, #1
 801cb56:	60fa      	str	r2, [r7, #12]
 801cb58:	2220      	movs	r2, #32
 801cb5a:	701a      	strb	r2, [r3, #0]
 801cb5c:	68bb      	ldr	r3, [r7, #8]
 801cb5e:	3b01      	subs	r3, #1
 801cb60:	60bb      	str	r3, [r7, #8]
 801cb62:	68bb      	ldr	r3, [r7, #8]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d101      	bne.n	801cb6c <ee_number+0xf8>
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	e06a      	b.n	801cc42 <ee_number+0x1ce>
 801cb6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cb6e:	1e5a      	subs	r2, r3, #1
 801cb70:	66ba      	str	r2, [r7, #104]	; 0x68
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	dced      	bgt.n	801cb52 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801cb76:	215f      	movs	r1, #95	; 0x5f
 801cb78:	187b      	adds	r3, r7, r1
 801cb7a:	781b      	ldrb	r3, [r3, #0]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d01c      	beq.n	801cbba <ee_number+0x146>
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	1c5a      	adds	r2, r3, #1
 801cb84:	60fa      	str	r2, [r7, #12]
 801cb86:	187a      	adds	r2, r7, r1
 801cb88:	7812      	ldrb	r2, [r2, #0]
 801cb8a:	701a      	strb	r2, [r3, #0]
 801cb8c:	68bb      	ldr	r3, [r7, #8]
 801cb8e:	3b01      	subs	r3, #1
 801cb90:	60bb      	str	r3, [r7, #8]
 801cb92:	68bb      	ldr	r3, [r7, #8]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d110      	bne.n	801cbba <ee_number+0x146>
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	e052      	b.n	801cc42 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	1c5a      	adds	r2, r3, #1
 801cba0:	60fa      	str	r2, [r7, #12]
 801cba2:	2253      	movs	r2, #83	; 0x53
 801cba4:	18ba      	adds	r2, r7, r2
 801cba6:	7812      	ldrb	r2, [r2, #0]
 801cba8:	701a      	strb	r2, [r3, #0]
 801cbaa:	68bb      	ldr	r3, [r7, #8]
 801cbac:	3b01      	subs	r3, #1
 801cbae:	60bb      	str	r3, [r7, #8]
 801cbb0:	68bb      	ldr	r3, [r7, #8]
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d101      	bne.n	801cbba <ee_number+0x146>
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	e043      	b.n	801cc42 <ee_number+0x1ce>
 801cbba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cbbc:	1e5a      	subs	r2, r3, #1
 801cbbe:	66ba      	str	r2, [r7, #104]	; 0x68
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	dceb      	bgt.n	801cb9c <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801cbc4:	e00c      	b.n	801cbe0 <ee_number+0x16c>
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	1c5a      	adds	r2, r3, #1
 801cbca:	60fa      	str	r2, [r7, #12]
 801cbcc:	2230      	movs	r2, #48	; 0x30
 801cbce:	701a      	strb	r2, [r3, #0]
 801cbd0:	68bb      	ldr	r3, [r7, #8]
 801cbd2:	3b01      	subs	r3, #1
 801cbd4:	60bb      	str	r3, [r7, #8]
 801cbd6:	68bb      	ldr	r3, [r7, #8]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d101      	bne.n	801cbe0 <ee_number+0x16c>
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	e030      	b.n	801cc42 <ee_number+0x1ce>
 801cbe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cbe2:	1e5a      	subs	r2, r3, #1
 801cbe4:	66fa      	str	r2, [r7, #108]	; 0x6c
 801cbe6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cbe8:	429a      	cmp	r2, r3
 801cbea:	dbec      	blt.n	801cbc6 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801cbec:	e010      	b.n	801cc10 <ee_number+0x19c>
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	1c5a      	adds	r2, r3, #1
 801cbf2:	60fa      	str	r2, [r7, #12]
 801cbf4:	2210      	movs	r2, #16
 801cbf6:	18b9      	adds	r1, r7, r2
 801cbf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cbfa:	188a      	adds	r2, r1, r2
 801cbfc:	7812      	ldrb	r2, [r2, #0]
 801cbfe:	701a      	strb	r2, [r3, #0]
 801cc00:	68bb      	ldr	r3, [r7, #8]
 801cc02:	3b01      	subs	r3, #1
 801cc04:	60bb      	str	r3, [r7, #8]
 801cc06:	68bb      	ldr	r3, [r7, #8]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d101      	bne.n	801cc10 <ee_number+0x19c>
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	e018      	b.n	801cc42 <ee_number+0x1ce>
 801cc10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cc12:	1e5a      	subs	r2, r3, #1
 801cc14:	657a      	str	r2, [r7, #84]	; 0x54
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	dce9      	bgt.n	801cbee <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801cc1a:	e00c      	b.n	801cc36 <ee_number+0x1c2>
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	1c5a      	adds	r2, r3, #1
 801cc20:	60fa      	str	r2, [r7, #12]
 801cc22:	2220      	movs	r2, #32
 801cc24:	701a      	strb	r2, [r3, #0]
 801cc26:	68bb      	ldr	r3, [r7, #8]
 801cc28:	3b01      	subs	r3, #1
 801cc2a:	60bb      	str	r3, [r7, #8]
 801cc2c:	68bb      	ldr	r3, [r7, #8]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d101      	bne.n	801cc36 <ee_number+0x1c2>
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	e005      	b.n	801cc42 <ee_number+0x1ce>
 801cc36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cc38:	1e5a      	subs	r2, r3, #1
 801cc3a:	66ba      	str	r2, [r7, #104]	; 0x68
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	dced      	bgt.n	801cc1c <ee_number+0x1a8>

  return str;
 801cc40:	68fb      	ldr	r3, [r7, #12]
}
 801cc42:	0018      	movs	r0, r3
 801cc44:	46bd      	mov	sp, r7
 801cc46:	b018      	add	sp, #96	; 0x60
 801cc48:	bd80      	pop	{r7, pc}
 801cc4a:	46c0      	nop			; (mov r8, r8)
 801cc4c:	200001d0 	.word	0x200001d0
 801cc50:	200001d4 	.word	0x200001d4

0801cc54 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801cc54:	b590      	push	{r4, r7, lr}
 801cc56:	b093      	sub	sp, #76	; 0x4c
 801cc58:	af04      	add	r7, sp, #16
 801cc5a:	60f8      	str	r0, [r7, #12]
 801cc5c:	60b9      	str	r1, [r7, #8]
 801cc5e:	607a      	str	r2, [r7, #4]
 801cc60:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801cc62:	68bb      	ldr	r3, [r7, #8]
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	dc01      	bgt.n	801cc6c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801cc68:	2300      	movs	r3, #0
 801cc6a:	e104      	b.n	801ce76 <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cc70:	e0ec      	b.n	801ce4c <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801cc72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	1ad2      	subs	r2, r2, r3
 801cc78:	68bb      	ldr	r3, [r7, #8]
 801cc7a:	3b01      	subs	r3, #1
 801cc7c:	429a      	cmp	r2, r3
 801cc7e:	db00      	blt.n	801cc82 <tiny_vsnprintf_like+0x2e>
 801cc80:	e0f2      	b.n	801ce68 <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	781b      	ldrb	r3, [r3, #0]
 801cc86:	2b25      	cmp	r3, #37	; 0x25
 801cc88:	d006      	beq.n	801cc98 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801cc8a:	687a      	ldr	r2, [r7, #4]
 801cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc8e:	1c59      	adds	r1, r3, #1
 801cc90:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cc92:	7812      	ldrb	r2, [r2, #0]
 801cc94:	701a      	strb	r2, [r3, #0]
      continue;
 801cc96:	e0d6      	b.n	801ce46 <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801cc98:	2300      	movs	r3, #0
 801cc9a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	3301      	adds	r3, #1
 801cca0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	781b      	ldrb	r3, [r3, #0]
 801cca6:	2b30      	cmp	r3, #48	; 0x30
 801cca8:	d103      	bne.n	801ccb2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801ccaa:	6a3b      	ldr	r3, [r7, #32]
 801ccac:	2201      	movs	r2, #1
 801ccae:	4313      	orrs	r3, r2
 801ccb0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801ccb2:	2301      	movs	r3, #1
 801ccb4:	425b      	negs	r3, r3
 801ccb6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	2b2f      	cmp	r3, #47	; 0x2f
 801ccbe:	d909      	bls.n	801ccd4 <tiny_vsnprintf_like+0x80>
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	781b      	ldrb	r3, [r3, #0]
 801ccc4:	2b39      	cmp	r3, #57	; 0x39
 801ccc6:	d805      	bhi.n	801ccd4 <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801ccc8:	1d3b      	adds	r3, r7, #4
 801ccca:	0018      	movs	r0, r3
 801cccc:	f7ff feac 	bl	801ca28 <ee_skip_atoi>
 801ccd0:	0003      	movs	r3, r0
 801ccd2:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801ccd4:	2301      	movs	r3, #1
 801ccd6:	425b      	negs	r3, r3
 801ccd8:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801ccda:	2301      	movs	r3, #1
 801ccdc:	425b      	negs	r3, r3
 801ccde:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801cce0:	230a      	movs	r3, #10
 801cce2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	781b      	ldrb	r3, [r3, #0]
 801cce8:	3b58      	subs	r3, #88	; 0x58
 801ccea:	2b20      	cmp	r3, #32
 801ccec:	d854      	bhi.n	801cd98 <tiny_vsnprintf_like+0x144>
 801ccee:	009a      	lsls	r2, r3, #2
 801ccf0:	4b63      	ldr	r3, [pc, #396]	; (801ce80 <tiny_vsnprintf_like+0x22c>)
 801ccf2:	18d3      	adds	r3, r2, r3
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccfa:	1c5a      	adds	r2, r3, #1
 801ccfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ccfe:	2220      	movs	r2, #32
 801cd00:	701a      	strb	r2, [r3, #0]
 801cd02:	69fb      	ldr	r3, [r7, #28]
 801cd04:	3b01      	subs	r3, #1
 801cd06:	61fb      	str	r3, [r7, #28]
 801cd08:	69fb      	ldr	r3, [r7, #28]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	dcf4      	bgt.n	801ccf8 <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	1d1a      	adds	r2, r3, #4
 801cd12:	603a      	str	r2, [r7, #0]
 801cd14:	6819      	ldr	r1, [r3, #0]
 801cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd18:	1c5a      	adds	r2, r3, #1
 801cd1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd1c:	b2ca      	uxtb	r2, r1
 801cd1e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801cd20:	e091      	b.n	801ce46 <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801cd22:	683b      	ldr	r3, [r7, #0]
 801cd24:	1d1a      	adds	r2, r3, #4
 801cd26:	603a      	str	r2, [r7, #0]
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801cd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d101      	bne.n	801cd36 <tiny_vsnprintf_like+0xe2>
 801cd32:	4b54      	ldr	r3, [pc, #336]	; (801ce84 <tiny_vsnprintf_like+0x230>)
 801cd34:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd38:	0018      	movs	r0, r3
 801cd3a:	f7e3 f9e5 	bl	8000108 <strlen>
 801cd3e:	0003      	movs	r3, r0
 801cd40:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801cd42:	e004      	b.n	801cd4e <tiny_vsnprintf_like+0xfa>
 801cd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd46:	1c5a      	adds	r2, r3, #1
 801cd48:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd4a:	2220      	movs	r2, #32
 801cd4c:	701a      	strb	r2, [r3, #0]
 801cd4e:	69fb      	ldr	r3, [r7, #28]
 801cd50:	1e5a      	subs	r2, r3, #1
 801cd52:	61fa      	str	r2, [r7, #28]
 801cd54:	693a      	ldr	r2, [r7, #16]
 801cd56:	429a      	cmp	r2, r3
 801cd58:	dbf4      	blt.n	801cd44 <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd5e:	e00a      	b.n	801cd76 <tiny_vsnprintf_like+0x122>
 801cd60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd62:	1c53      	adds	r3, r2, #1
 801cd64:	627b      	str	r3, [r7, #36]	; 0x24
 801cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd68:	1c59      	adds	r1, r3, #1
 801cd6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cd6c:	7812      	ldrb	r2, [r2, #0]
 801cd6e:	701a      	strb	r2, [r3, #0]
 801cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd72:	3301      	adds	r3, #1
 801cd74:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cd78:	693b      	ldr	r3, [r7, #16]
 801cd7a:	429a      	cmp	r2, r3
 801cd7c:	dbf0      	blt.n	801cd60 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801cd7e:	e062      	b.n	801ce46 <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801cd80:	6a3b      	ldr	r3, [r7, #32]
 801cd82:	2240      	movs	r2, #64	; 0x40
 801cd84:	4313      	orrs	r3, r2
 801cd86:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801cd88:	2310      	movs	r3, #16
 801cd8a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801cd8c:	e02d      	b.n	801cdea <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801cd8e:	6a3b      	ldr	r3, [r7, #32]
 801cd90:	2202      	movs	r2, #2
 801cd92:	4313      	orrs	r3, r2
 801cd94:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801cd96:	e025      	b.n	801cde4 <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	781b      	ldrb	r3, [r3, #0]
 801cd9c:	2b25      	cmp	r3, #37	; 0x25
 801cd9e:	d004      	beq.n	801cdaa <tiny_vsnprintf_like+0x156>
 801cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cda2:	1c5a      	adds	r2, r3, #1
 801cda4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cda6:	2225      	movs	r2, #37	; 0x25
 801cda8:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801cdaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cdac:	68fb      	ldr	r3, [r7, #12]
 801cdae:	1ad2      	subs	r2, r2, r3
 801cdb0:	68bb      	ldr	r3, [r7, #8]
 801cdb2:	3b01      	subs	r3, #1
 801cdb4:	429a      	cmp	r2, r3
 801cdb6:	da17      	bge.n	801cde8 <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	781b      	ldrb	r3, [r3, #0]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d006      	beq.n	801cdce <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801cdc0:	687a      	ldr	r2, [r7, #4]
 801cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdc4:	1c59      	adds	r1, r3, #1
 801cdc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cdc8:	7812      	ldrb	r2, [r2, #0]
 801cdca:	701a      	strb	r2, [r3, #0]
 801cdcc:	e002      	b.n	801cdd4 <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	3b01      	subs	r3, #1
 801cdd2:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801cdd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	1ad2      	subs	r2, r2, r3
 801cdda:	68bb      	ldr	r3, [r7, #8]
 801cddc:	3b01      	subs	r3, #1
 801cdde:	429a      	cmp	r2, r3
 801cde0:	db30      	blt.n	801ce44 <tiny_vsnprintf_like+0x1f0>
 801cde2:	e002      	b.n	801cdea <tiny_vsnprintf_like+0x196>
        break;
 801cde4:	46c0      	nop			; (mov r8, r8)
 801cde6:	e000      	b.n	801cdea <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801cde8:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	2b6c      	cmp	r3, #108	; 0x6c
 801cdee:	d105      	bne.n	801cdfc <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801cdf0:	683b      	ldr	r3, [r7, #0]
 801cdf2:	1d1a      	adds	r2, r3, #4
 801cdf4:	603a      	str	r2, [r7, #0]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	637b      	str	r3, [r7, #52]	; 0x34
 801cdfa:	e00e      	b.n	801ce1a <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801cdfc:	6a3b      	ldr	r3, [r7, #32]
 801cdfe:	2202      	movs	r2, #2
 801ce00:	4013      	ands	r3, r2
 801ce02:	d005      	beq.n	801ce10 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801ce04:	683b      	ldr	r3, [r7, #0]
 801ce06:	1d1a      	adds	r2, r3, #4
 801ce08:	603a      	str	r2, [r7, #0]
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	637b      	str	r3, [r7, #52]	; 0x34
 801ce0e:	e004      	b.n	801ce1a <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801ce10:	683b      	ldr	r3, [r7, #0]
 801ce12:	1d1a      	adds	r2, r3, #4
 801ce14:	603a      	str	r2, [r7, #0]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ce1a:	68bb      	ldr	r3, [r7, #8]
 801ce1c:	1e5a      	subs	r2, r3, #1
 801ce1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	1acb      	subs	r3, r1, r3
 801ce24:	1ad1      	subs	r1, r2, r3
 801ce26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ce28:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801ce2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ce2c:	6a3b      	ldr	r3, [r7, #32]
 801ce2e:	9302      	str	r3, [sp, #8]
 801ce30:	69bb      	ldr	r3, [r7, #24]
 801ce32:	9301      	str	r3, [sp, #4]
 801ce34:	69fb      	ldr	r3, [r7, #28]
 801ce36:	9300      	str	r3, [sp, #0]
 801ce38:	0023      	movs	r3, r4
 801ce3a:	f7ff fe1b 	bl	801ca74 <ee_number>
 801ce3e:	0003      	movs	r3, r0
 801ce40:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ce42:	e000      	b.n	801ce46 <tiny_vsnprintf_like+0x1f2>
        continue;
 801ce44:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	3301      	adds	r3, #1
 801ce4a:	607b      	str	r3, [r7, #4]
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	781b      	ldrb	r3, [r3, #0]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d000      	beq.n	801ce56 <tiny_vsnprintf_like+0x202>
 801ce54:	e70d      	b.n	801cc72 <tiny_vsnprintf_like+0x1e>
 801ce56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	1ad2      	subs	r2, r2, r3
 801ce5c:	68bb      	ldr	r3, [r7, #8]
 801ce5e:	3b01      	subs	r3, #1
 801ce60:	429a      	cmp	r2, r3
 801ce62:	db00      	blt.n	801ce66 <tiny_vsnprintf_like+0x212>
 801ce64:	e705      	b.n	801cc72 <tiny_vsnprintf_like+0x1e>
 801ce66:	e000      	b.n	801ce6a <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801ce68:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801ce70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce72:	68fb      	ldr	r3, [r7, #12]
 801ce74:	1ad3      	subs	r3, r2, r3
}
 801ce76:	0018      	movs	r0, r3
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	b00f      	add	sp, #60	; 0x3c
 801ce7c:	bd90      	pop	{r4, r7, pc}
 801ce7e:	46c0      	nop			; (mov r8, r8)
 801ce80:	0801f530 	.word	0x0801f530
 801ce84:	0801f528 	.word	0x0801f528

0801ce88 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b082      	sub	sp, #8
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	2203      	movs	r2, #3
 801ce94:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	2200      	movs	r2, #0
 801ce9a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	2203      	movs	r2, #3
 801cea0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	2203      	movs	r2, #3
 801cea6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	2203      	movs	r2, #3
 801ceac:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	2203      	movs	r2, #3
 801ceb2:	715a      	strb	r2, [r3, #5]
}
 801ceb4:	46c0      	nop			; (mov r8, r8)
 801ceb6:	46bd      	mov	sp, r7
 801ceb8:	b002      	add	sp, #8
 801ceba:	bd80      	pop	{r7, pc}

0801cebc <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801cebc:	b590      	push	{r4, r7, lr}
 801cebe:	b08b      	sub	sp, #44	; 0x2c
 801cec0:	af04      	add	r7, sp, #16
 801cec2:	60f8      	str	r0, [r7, #12]
 801cec4:	607a      	str	r2, [r7, #4]
 801cec6:	240b      	movs	r4, #11
 801cec8:	193b      	adds	r3, r7, r4
 801ceca:	1c0a      	adds	r2, r1, #0
 801cecc:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ced2:	2116      	movs	r1, #22
 801ced4:	187a      	adds	r2, r7, r1
 801ced6:	18db      	adds	r3, r3, r3
 801ced8:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801cede:	193b      	adds	r3, r7, r4
 801cee0:	781b      	ldrb	r3, [r3, #0]
 801cee2:	b29a      	uxth	r2, r3
 801cee4:	187b      	adds	r3, r7, r1
 801cee6:	8819      	ldrh	r1, [r3, #0]
 801cee8:	4b0f      	ldr	r3, [pc, #60]	; (801cf28 <read_register16+0x6c>)
 801ceea:	9302      	str	r3, [sp, #8]
 801ceec:	2302      	movs	r3, #2
 801ceee:	9301      	str	r3, [sp, #4]
 801cef0:	2414      	movs	r4, #20
 801cef2:	193b      	adds	r3, r7, r4
 801cef4:	9300      	str	r3, [sp, #0]
 801cef6:	2301      	movs	r3, #1
 801cef8:	f7ea fe28 	bl	8007b4c <HAL_I2C_Mem_Read>
 801cefc:	1e03      	subs	r3, r0, #0
 801cefe:	d10e      	bne.n	801cf1e <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801cf00:	0021      	movs	r1, r4
 801cf02:	187b      	adds	r3, r7, r1
 801cf04:	785b      	ldrb	r3, [r3, #1]
 801cf06:	021b      	lsls	r3, r3, #8
 801cf08:	b21a      	sxth	r2, r3
 801cf0a:	187b      	adds	r3, r7, r1
 801cf0c:	781b      	ldrb	r3, [r3, #0]
 801cf0e:	b21b      	sxth	r3, r3
 801cf10:	4313      	orrs	r3, r2
 801cf12:	b21b      	sxth	r3, r3
 801cf14:	b29a      	uxth	r2, r3
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	801a      	strh	r2, [r3, #0]
		return true;
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	e000      	b.n	801cf20 <read_register16+0x64>
	} else
		return false;
 801cf1e:	2300      	movs	r3, #0

}
 801cf20:	0018      	movs	r0, r3
 801cf22:	46bd      	mov	sp, r7
 801cf24:	b007      	add	sp, #28
 801cf26:	bd90      	pop	{r4, r7, pc}
 801cf28:	00001388 	.word	0x00001388

0801cf2c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801cf2c:	b5b0      	push	{r4, r5, r7, lr}
 801cf2e:	b08a      	sub	sp, #40	; 0x28
 801cf30:	af04      	add	r7, sp, #16
 801cf32:	60f8      	str	r0, [r7, #12]
 801cf34:	0008      	movs	r0, r1
 801cf36:	607a      	str	r2, [r7, #4]
 801cf38:	0019      	movs	r1, r3
 801cf3a:	240b      	movs	r4, #11
 801cf3c:	193b      	adds	r3, r7, r4
 801cf3e:	1c02      	adds	r2, r0, #0
 801cf40:	701a      	strb	r2, [r3, #0]
 801cf42:	250a      	movs	r5, #10
 801cf44:	197b      	adds	r3, r7, r5
 801cf46:	1c0a      	adds	r2, r1, #0
 801cf48:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cf4e:	2116      	movs	r1, #22
 801cf50:	187a      	adds	r2, r7, r1
 801cf52:	18db      	adds	r3, r3, r3
 801cf54:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801cf56:	68fb      	ldr	r3, [r7, #12]
 801cf58:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801cf5a:	193b      	adds	r3, r7, r4
 801cf5c:	781b      	ldrb	r3, [r3, #0]
 801cf5e:	b29c      	uxth	r4, r3
 801cf60:	197b      	adds	r3, r7, r5
 801cf62:	781b      	ldrb	r3, [r3, #0]
 801cf64:	b29b      	uxth	r3, r3
 801cf66:	187a      	adds	r2, r7, r1
 801cf68:	8811      	ldrh	r1, [r2, #0]
 801cf6a:	4a09      	ldr	r2, [pc, #36]	; (801cf90 <read_data+0x64>)
 801cf6c:	9202      	str	r2, [sp, #8]
 801cf6e:	9301      	str	r3, [sp, #4]
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	9300      	str	r3, [sp, #0]
 801cf74:	2301      	movs	r3, #1
 801cf76:	0022      	movs	r2, r4
 801cf78:	f7ea fde8 	bl	8007b4c <HAL_I2C_Mem_Read>
 801cf7c:	1e03      	subs	r3, r0, #0
 801cf7e:	d101      	bne.n	801cf84 <read_data+0x58>
		return 0;
 801cf80:	2300      	movs	r3, #0
 801cf82:	e000      	b.n	801cf86 <read_data+0x5a>
	else
		return 1;
 801cf84:	2301      	movs	r3, #1

}
 801cf86:	0018      	movs	r0, r3
 801cf88:	46bd      	mov	sp, r7
 801cf8a:	b006      	add	sp, #24
 801cf8c:	bdb0      	pop	{r4, r5, r7, pc}
 801cf8e:	46c0      	nop			; (mov r8, r8)
 801cf90:	00001388 	.word	0x00001388

0801cf94 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801cf94:	b580      	push	{r7, lr}
 801cf96:	b082      	sub	sp, #8
 801cf98:	af00      	add	r7, sp, #0
 801cf9a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801cf9c:	687a      	ldr	r2, [r7, #4]
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	2188      	movs	r1, #136	; 0x88
 801cfa2:	0018      	movs	r0, r3
 801cfa4:	f7ff ff8a 	bl	801cebc <read_register16>
 801cfa8:	1e03      	subs	r3, r0, #0
 801cfaa:	d100      	bne.n	801cfae <read_calibration_data+0x1a>
 801cfac:	e06d      	b.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	1c9a      	adds	r2, r3, #2
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	218a      	movs	r1, #138	; 0x8a
 801cfb6:	0018      	movs	r0, r3
 801cfb8:	f7ff ff80 	bl	801cebc <read_register16>
 801cfbc:	1e03      	subs	r3, r0, #0
 801cfbe:	d100      	bne.n	801cfc2 <read_calibration_data+0x2e>
 801cfc0:	e063      	b.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	1d1a      	adds	r2, r3, #4
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	218c      	movs	r1, #140	; 0x8c
 801cfca:	0018      	movs	r0, r3
 801cfcc:	f7ff ff76 	bl	801cebc <read_register16>
 801cfd0:	1e03      	subs	r3, r0, #0
 801cfd2:	d05a      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	1d9a      	adds	r2, r3, #6
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	218e      	movs	r1, #142	; 0x8e
 801cfdc:	0018      	movs	r0, r3
 801cfde:	f7ff ff6d 	bl	801cebc <read_register16>
 801cfe2:	1e03      	subs	r3, r0, #0
 801cfe4:	d051      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	3308      	adds	r3, #8
 801cfea:	001a      	movs	r2, r3
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	2190      	movs	r1, #144	; 0x90
 801cff0:	0018      	movs	r0, r3
 801cff2:	f7ff ff63 	bl	801cebc <read_register16>
 801cff6:	1e03      	subs	r3, r0, #0
 801cff8:	d047      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	330a      	adds	r3, #10
 801cffe:	001a      	movs	r2, r3
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	2192      	movs	r1, #146	; 0x92
 801d004:	0018      	movs	r0, r3
 801d006:	f7ff ff59 	bl	801cebc <read_register16>
 801d00a:	1e03      	subs	r3, r0, #0
 801d00c:	d03d      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	330c      	adds	r3, #12
 801d012:	001a      	movs	r2, r3
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	2194      	movs	r1, #148	; 0x94
 801d018:	0018      	movs	r0, r3
 801d01a:	f7ff ff4f 	bl	801cebc <read_register16>
 801d01e:	1e03      	subs	r3, r0, #0
 801d020:	d033      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	330e      	adds	r3, #14
 801d026:	001a      	movs	r2, r3
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	2196      	movs	r1, #150	; 0x96
 801d02c:	0018      	movs	r0, r3
 801d02e:	f7ff ff45 	bl	801cebc <read_register16>
 801d032:	1e03      	subs	r3, r0, #0
 801d034:	d029      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	3310      	adds	r3, #16
 801d03a:	001a      	movs	r2, r3
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	2198      	movs	r1, #152	; 0x98
 801d040:	0018      	movs	r0, r3
 801d042:	f7ff ff3b 	bl	801cebc <read_register16>
 801d046:	1e03      	subs	r3, r0, #0
 801d048:	d01f      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	3312      	adds	r3, #18
 801d04e:	001a      	movs	r2, r3
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	219a      	movs	r1, #154	; 0x9a
 801d054:	0018      	movs	r0, r3
 801d056:	f7ff ff31 	bl	801cebc <read_register16>
 801d05a:	1e03      	subs	r3, r0, #0
 801d05c:	d015      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	3314      	adds	r3, #20
 801d062:	001a      	movs	r2, r3
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	219c      	movs	r1, #156	; 0x9c
 801d068:	0018      	movs	r0, r3
 801d06a:	f7ff ff27 	bl	801cebc <read_register16>
 801d06e:	1e03      	subs	r3, r0, #0
 801d070:	d00b      	beq.n	801d08a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	3316      	adds	r3, #22
 801d076:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	219e      	movs	r1, #158	; 0x9e
 801d07c:	0018      	movs	r0, r3
 801d07e:	f7ff ff1d 	bl	801cebc <read_register16>
 801d082:	1e03      	subs	r3, r0, #0
 801d084:	d001      	beq.n	801d08a <read_calibration_data+0xf6>

		return true;
 801d086:	2301      	movs	r3, #1
 801d088:	e000      	b.n	801d08c <read_calibration_data+0xf8>
	}

	return false;
 801d08a:	2300      	movs	r3, #0
}
 801d08c:	0018      	movs	r0, r3
 801d08e:	46bd      	mov	sp, r7
 801d090:	b002      	add	sp, #8
 801d092:	bd80      	pop	{r7, pc}

0801d094 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d094:	b5b0      	push	{r4, r5, r7, lr}
 801d096:	b084      	sub	sp, #16
 801d098:	af00      	add	r7, sp, #0
 801d09a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	3318      	adds	r3, #24
 801d0a0:	001a      	movs	r2, r3
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	2301      	movs	r3, #1
 801d0a6:	21a1      	movs	r1, #161	; 0xa1
 801d0a8:	f7ff ff40 	bl	801cf2c <read_data>
 801d0ac:	1e03      	subs	r3, r0, #0
 801d0ae:	d14b      	bne.n	801d148 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	331a      	adds	r3, #26
 801d0b4:	001a      	movs	r2, r3
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	21e1      	movs	r1, #225	; 0xe1
 801d0ba:	0018      	movs	r0, r3
 801d0bc:	f7ff fefe 	bl	801cebc <read_register16>
 801d0c0:	1e03      	subs	r3, r0, #0
 801d0c2:	d041      	beq.n	801d148 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	331c      	adds	r3, #28
 801d0c8:	001a      	movs	r2, r3
 801d0ca:	6878      	ldr	r0, [r7, #4]
 801d0cc:	2301      	movs	r3, #1
 801d0ce:	21e3      	movs	r1, #227	; 0xe3
 801d0d0:	f7ff ff2c 	bl	801cf2c <read_data>
 801d0d4:	1e03      	subs	r3, r0, #0
 801d0d6:	d137      	bne.n	801d148 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801d0d8:	240e      	movs	r4, #14
 801d0da:	193a      	adds	r2, r7, r4
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	21e4      	movs	r1, #228	; 0xe4
 801d0e0:	0018      	movs	r0, r3
 801d0e2:	f7ff feeb 	bl	801cebc <read_register16>
 801d0e6:	1e03      	subs	r3, r0, #0
 801d0e8:	d02e      	beq.n	801d148 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801d0ea:	250c      	movs	r5, #12
 801d0ec:	197a      	adds	r2, r7, r5
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	21e5      	movs	r1, #229	; 0xe5
 801d0f2:	0018      	movs	r0, r3
 801d0f4:	f7ff fee2 	bl	801cebc <read_register16>
 801d0f8:	1e03      	subs	r3, r0, #0
 801d0fa:	d025      	beq.n	801d148 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	3322      	adds	r3, #34	; 0x22
 801d100:	001a      	movs	r2, r3
 801d102:	6878      	ldr	r0, [r7, #4]
 801d104:	2301      	movs	r3, #1
 801d106:	21e7      	movs	r1, #231	; 0xe7
 801d108:	f7ff ff10 	bl	801cf2c <read_data>
 801d10c:	1e03      	subs	r3, r0, #0
 801d10e:	d11b      	bne.n	801d148 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d110:	193b      	adds	r3, r7, r4
 801d112:	881b      	ldrh	r3, [r3, #0]
 801d114:	011b      	lsls	r3, r3, #4
 801d116:	b21a      	sxth	r2, r3
 801d118:	23ff      	movs	r3, #255	; 0xff
 801d11a:	011b      	lsls	r3, r3, #4
 801d11c:	4013      	ands	r3, r2
 801d11e:	b21a      	sxth	r2, r3
 801d120:	193b      	adds	r3, r7, r4
 801d122:	881b      	ldrh	r3, [r3, #0]
 801d124:	121b      	asrs	r3, r3, #8
 801d126:	b21b      	sxth	r3, r3
 801d128:	210f      	movs	r1, #15
 801d12a:	400b      	ands	r3, r1
 801d12c:	b21b      	sxth	r3, r3
 801d12e:	4313      	orrs	r3, r2
 801d130:	b21a      	sxth	r2, r3
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d136:	197b      	adds	r3, r7, r5
 801d138:	881b      	ldrh	r3, [r3, #0]
 801d13a:	091b      	lsrs	r3, r3, #4
 801d13c:	b29b      	uxth	r3, r3
 801d13e:	b21a      	sxth	r2, r3
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	841a      	strh	r2, [r3, #32]

		return true;
 801d144:	2301      	movs	r3, #1
 801d146:	e000      	b.n	801d14a <read_hum_calibration_data+0xb6>
	}

	return false;
 801d148:	2300      	movs	r3, #0
}
 801d14a:	0018      	movs	r0, r3
 801d14c:	46bd      	mov	sp, r7
 801d14e:	b004      	add	sp, #16
 801d150:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d154 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d154:	b580      	push	{r7, lr}
 801d156:	b088      	sub	sp, #32
 801d158:	af04      	add	r7, sp, #16
 801d15a:	6078      	str	r0, [r7, #4]
 801d15c:	0008      	movs	r0, r1
 801d15e:	0011      	movs	r1, r2
 801d160:	1cfb      	adds	r3, r7, #3
 801d162:	1c02      	adds	r2, r0, #0
 801d164:	701a      	strb	r2, [r3, #0]
 801d166:	1cbb      	adds	r3, r7, #2
 801d168:	1c0a      	adds	r2, r1, #0
 801d16a:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d170:	210e      	movs	r1, #14
 801d172:	187a      	adds	r2, r7, r1
 801d174:	18db      	adds	r3, r3, r3
 801d176:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d17c:	1cfb      	adds	r3, r7, #3
 801d17e:	781b      	ldrb	r3, [r3, #0]
 801d180:	b29a      	uxth	r2, r3
 801d182:	187b      	adds	r3, r7, r1
 801d184:	8819      	ldrh	r1, [r3, #0]
 801d186:	4b09      	ldr	r3, [pc, #36]	; (801d1ac <write_register8+0x58>)
 801d188:	9302      	str	r3, [sp, #8]
 801d18a:	2301      	movs	r3, #1
 801d18c:	9301      	str	r3, [sp, #4]
 801d18e:	1cbb      	adds	r3, r7, #2
 801d190:	9300      	str	r3, [sp, #0]
 801d192:	2301      	movs	r3, #1
 801d194:	f7ea fbac 	bl	80078f0 <HAL_I2C_Mem_Write>
 801d198:	1e03      	subs	r3, r0, #0
 801d19a:	d101      	bne.n	801d1a0 <write_register8+0x4c>
		return false;
 801d19c:	2300      	movs	r3, #0
 801d19e:	e000      	b.n	801d1a2 <write_register8+0x4e>
	else
		return true;
 801d1a0:	2301      	movs	r3, #1
}
 801d1a2:	0018      	movs	r0, r3
 801d1a4:	46bd      	mov	sp, r7
 801d1a6:	b004      	add	sp, #16
 801d1a8:	bd80      	pop	{r7, pc}
 801d1aa:	46c0      	nop			; (mov r8, r8)
 801d1ac:	00002710 	.word	0x00002710

0801d1b0 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d1b0:	b590      	push	{r4, r7, lr}
 801d1b2:	b085      	sub	sp, #20
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	6078      	str	r0, [r7, #4]
 801d1b8:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d1be:	2b76      	cmp	r3, #118	; 0x76
 801d1c0:	d005      	beq.n	801d1ce <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d1c6:	2b77      	cmp	r3, #119	; 0x77
 801d1c8:	d001      	beq.n	801d1ce <bmp280_init+0x1e>

		return false;
 801d1ca:	2300      	movs	r3, #0
 801d1cc:	e0a3      	b.n	801d316 <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	3332      	adds	r3, #50	; 0x32
 801d1d2:	001a      	movs	r2, r3
 801d1d4:	6878      	ldr	r0, [r7, #4]
 801d1d6:	2301      	movs	r3, #1
 801d1d8:	21d0      	movs	r1, #208	; 0xd0
 801d1da:	f7ff fea7 	bl	801cf2c <read_data>
 801d1de:	1e03      	subs	r3, r0, #0
 801d1e0:	d001      	beq.n	801d1e6 <bmp280_init+0x36>
		return false;
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	e097      	b.n	801d316 <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	2232      	movs	r2, #50	; 0x32
 801d1ea:	5c9b      	ldrb	r3, [r3, r2]
 801d1ec:	2b58      	cmp	r3, #88	; 0x58
 801d1ee:	d006      	beq.n	801d1fe <bmp280_init+0x4e>
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	2232      	movs	r2, #50	; 0x32
 801d1f4:	5c9b      	ldrb	r3, [r3, r2]
 801d1f6:	2b60      	cmp	r3, #96	; 0x60
 801d1f8:	d001      	beq.n	801d1fe <bmp280_init+0x4e>

		return false;
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	e08b      	b.n	801d316 <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	22b6      	movs	r2, #182	; 0xb6
 801d202:	21e0      	movs	r1, #224	; 0xe0
 801d204:	0018      	movs	r0, r3
 801d206:	f7ff ffa5 	bl	801d154 <write_register8>
 801d20a:	1e03      	subs	r3, r0, #0
 801d20c:	d001      	beq.n	801d212 <bmp280_init+0x62>
		return false;
 801d20e:	2300      	movs	r3, #0
 801d210:	e081      	b.n	801d316 <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d212:	240c      	movs	r4, #12
 801d214:	193a      	adds	r2, r7, r4
 801d216:	6878      	ldr	r0, [r7, #4]
 801d218:	2301      	movs	r3, #1
 801d21a:	21f3      	movs	r1, #243	; 0xf3
 801d21c:	f7ff fe86 	bl	801cf2c <read_data>
 801d220:	1e03      	subs	r3, r0, #0
 801d222:	d1f6      	bne.n	801d212 <bmp280_init+0x62>
				&& (status & 1) == 0)
 801d224:	193b      	adds	r3, r7, r4
 801d226:	781b      	ldrb	r3, [r3, #0]
 801d228:	001a      	movs	r2, r3
 801d22a:	2301      	movs	r3, #1
 801d22c:	4013      	ands	r3, r2
 801d22e:	d1f0      	bne.n	801d212 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	0018      	movs	r0, r3
 801d234:	f7ff feae 	bl	801cf94 <read_calibration_data>
 801d238:	0003      	movs	r3, r0
 801d23a:	001a      	movs	r2, r3
 801d23c:	2301      	movs	r3, #1
 801d23e:	4053      	eors	r3, r2
 801d240:	b2db      	uxtb	r3, r3
 801d242:	2b00      	cmp	r3, #0
 801d244:	d100      	bne.n	801d248 <bmp280_init+0x98>
 801d246:	e001      	b.n	801d24c <bmp280_init+0x9c>
		return false;
 801d248:	2300      	movs	r3, #0
 801d24a:	e064      	b.n	801d316 <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	2232      	movs	r2, #50	; 0x32
 801d250:	5c9b      	ldrb	r3, [r3, r2]
 801d252:	2b60      	cmp	r3, #96	; 0x60
 801d254:	d10c      	bne.n	801d270 <bmp280_init+0xc0>
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	0018      	movs	r0, r3
 801d25a:	f7ff ff1b 	bl	801d094 <read_hum_calibration_data>
 801d25e:	0003      	movs	r3, r0
 801d260:	001a      	movs	r2, r3
 801d262:	2301      	movs	r3, #1
 801d264:	4053      	eors	r3, r2
 801d266:	b2db      	uxtb	r3, r3
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d001      	beq.n	801d270 <bmp280_init+0xc0>
		return false;
 801d26c:	2300      	movs	r3, #0
 801d26e:	e052      	b.n	801d316 <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d270:	683b      	ldr	r3, [r7, #0]
 801d272:	795b      	ldrb	r3, [r3, #5]
 801d274:	015b      	lsls	r3, r3, #5
 801d276:	b25a      	sxtb	r2, r3
 801d278:	683b      	ldr	r3, [r7, #0]
 801d27a:	785b      	ldrb	r3, [r3, #1]
 801d27c:	009b      	lsls	r3, r3, #2
 801d27e:	b25b      	sxtb	r3, r3
 801d280:	4313      	orrs	r3, r2
 801d282:	b25a      	sxtb	r2, r3
 801d284:	210f      	movs	r1, #15
 801d286:	187b      	adds	r3, r7, r1
 801d288:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d28a:	187b      	adds	r3, r7, r1
 801d28c:	781a      	ldrb	r2, [r3, #0]
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	21f5      	movs	r1, #245	; 0xf5
 801d292:	0018      	movs	r0, r3
 801d294:	f7ff ff5e 	bl	801d154 <write_register8>
 801d298:	1e03      	subs	r3, r0, #0
 801d29a:	d001      	beq.n	801d2a0 <bmp280_init+0xf0>
		return false;
 801d29c:	2300      	movs	r3, #0
 801d29e:	e03a      	b.n	801d316 <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d2a0:	683b      	ldr	r3, [r7, #0]
 801d2a2:	781b      	ldrb	r3, [r3, #0]
 801d2a4:	2b01      	cmp	r3, #1
 801d2a6:	d102      	bne.n	801d2ae <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d2a8:	683b      	ldr	r3, [r7, #0]
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d2ae:	683b      	ldr	r3, [r7, #0]
 801d2b0:	78db      	ldrb	r3, [r3, #3]
 801d2b2:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d2b4:	b25a      	sxtb	r2, r3
 801d2b6:	683b      	ldr	r3, [r7, #0]
 801d2b8:	789b      	ldrb	r3, [r3, #2]
 801d2ba:	009b      	lsls	r3, r3, #2
 801d2bc:	b25b      	sxtb	r3, r3
 801d2be:	4313      	orrs	r3, r2
 801d2c0:	b25a      	sxtb	r2, r3
 801d2c2:	683b      	ldr	r3, [r7, #0]
 801d2c4:	781b      	ldrb	r3, [r3, #0]
 801d2c6:	b25b      	sxtb	r3, r3
 801d2c8:	4313      	orrs	r3, r2
 801d2ca:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d2cc:	230e      	movs	r3, #14
 801d2ce:	18fb      	adds	r3, r7, r3
 801d2d0:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	2232      	movs	r2, #50	; 0x32
 801d2d6:	5c9b      	ldrb	r3, [r3, r2]
 801d2d8:	2b60      	cmp	r3, #96	; 0x60
 801d2da:	d10f      	bne.n	801d2fc <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801d2dc:	210d      	movs	r1, #13
 801d2de:	187b      	adds	r3, r7, r1
 801d2e0:	683a      	ldr	r2, [r7, #0]
 801d2e2:	7912      	ldrb	r2, [r2, #4]
 801d2e4:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801d2e6:	187b      	adds	r3, r7, r1
 801d2e8:	781a      	ldrb	r2, [r3, #0]
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	21f2      	movs	r1, #242	; 0xf2
 801d2ee:	0018      	movs	r0, r3
 801d2f0:	f7ff ff30 	bl	801d154 <write_register8>
 801d2f4:	1e03      	subs	r3, r0, #0
 801d2f6:	d001      	beq.n	801d2fc <bmp280_init+0x14c>
			return false;
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	e00c      	b.n	801d316 <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801d2fc:	230e      	movs	r3, #14
 801d2fe:	18fb      	adds	r3, r7, r3
 801d300:	781a      	ldrb	r2, [r3, #0]
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	21f4      	movs	r1, #244	; 0xf4
 801d306:	0018      	movs	r0, r3
 801d308:	f7ff ff24 	bl	801d154 <write_register8>
 801d30c:	1e03      	subs	r3, r0, #0
 801d30e:	d001      	beq.n	801d314 <bmp280_init+0x164>
		return false;
 801d310:	2300      	movs	r3, #0
 801d312:	e000      	b.n	801d316 <bmp280_init+0x166>
	}

	return true;
 801d314:	2301      	movs	r3, #1
}
 801d316:	0018      	movs	r0, r3
 801d318:	46bd      	mov	sp, r7
 801d31a:	b005      	add	sp, #20
 801d31c:	bd90      	pop	{r4, r7, pc}

0801d31e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801d31e:	b580      	push	{r7, lr}
 801d320:	b086      	sub	sp, #24
 801d322:	af00      	add	r7, sp, #0
 801d324:	60f8      	str	r0, [r7, #12]
 801d326:	60b9      	str	r1, [r7, #8]
 801d328:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d32a:	68bb      	ldr	r3, [r7, #8]
 801d32c:	10da      	asrs	r2, r3, #3
 801d32e:	68fb      	ldr	r3, [r7, #12]
 801d330:	881b      	ldrh	r3, [r3, #0]
 801d332:	005b      	lsls	r3, r3, #1
 801d334:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801d336:	68fa      	ldr	r2, [r7, #12]
 801d338:	2102      	movs	r1, #2
 801d33a:	5e52      	ldrsh	r2, [r2, r1]
 801d33c:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d33e:	12db      	asrs	r3, r3, #11
 801d340:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d342:	68bb      	ldr	r3, [r7, #8]
 801d344:	111b      	asrs	r3, r3, #4
 801d346:	68fa      	ldr	r2, [r7, #12]
 801d348:	8812      	ldrh	r2, [r2, #0]
 801d34a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801d34c:	68ba      	ldr	r2, [r7, #8]
 801d34e:	1112      	asrs	r2, r2, #4
 801d350:	68f9      	ldr	r1, [r7, #12]
 801d352:	8809      	ldrh	r1, [r1, #0]
 801d354:	1a52      	subs	r2, r2, r1
 801d356:	4353      	muls	r3, r2
 801d358:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801d35a:	68fa      	ldr	r2, [r7, #12]
 801d35c:	2104      	movs	r1, #4
 801d35e:	5e52      	ldrsh	r2, [r2, r1]
 801d360:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d362:	139b      	asrs	r3, r3, #14
 801d364:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801d366:	697a      	ldr	r2, [r7, #20]
 801d368:	693b      	ldr	r3, [r7, #16]
 801d36a:	18d2      	adds	r2, r2, r3
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	681a      	ldr	r2, [r3, #0]
 801d374:	0013      	movs	r3, r2
 801d376:	009b      	lsls	r3, r3, #2
 801d378:	189b      	adds	r3, r3, r2
 801d37a:	3380      	adds	r3, #128	; 0x80
 801d37c:	121b      	asrs	r3, r3, #8
}
 801d37e:	0018      	movs	r0, r3
 801d380:	46bd      	mov	sp, r7
 801d382:	b006      	add	sp, #24
 801d384:	bd80      	pop	{r7, pc}
	...

0801d388 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801d388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d38a:	b0af      	sub	sp, #188	; 0xbc
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	239c      	movs	r3, #156	; 0x9c
 801d390:	18fe      	adds	r6, r7, r3
 801d392:	6030      	str	r0, [r6, #0]
 801d394:	2098      	movs	r0, #152	; 0x98
 801d396:	1838      	adds	r0, r7, r0
 801d398:	6001      	str	r1, [r0, #0]
 801d39a:	2194      	movs	r1, #148	; 0x94
 801d39c:	1878      	adds	r0, r7, r1
 801d39e:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801d3a0:	187a      	adds	r2, r7, r1
 801d3a2:	6813      	ldr	r3, [r2, #0]
 801d3a4:	65bb      	str	r3, [r7, #88]	; 0x58
 801d3a6:	17db      	asrs	r3, r3, #31
 801d3a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d3aa:	4ace      	ldr	r2, [pc, #824]	; (801d6e4 <compensate_pressure+0x35c>)
 801d3ac:	2301      	movs	r3, #1
 801d3ae:	425b      	negs	r3, r3
 801d3b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d3b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801d3b4:	1880      	adds	r0, r0, r2
 801d3b6:	4159      	adcs	r1, r3
 801d3b8:	0002      	movs	r2, r0
 801d3ba:	000b      	movs	r3, r1
 801d3bc:	26b0      	movs	r6, #176	; 0xb0
 801d3be:	19b9      	adds	r1, r7, r6
 801d3c0:	600a      	str	r2, [r1, #0]
 801d3c2:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801d3c4:	19ba      	adds	r2, r7, r6
 801d3c6:	6853      	ldr	r3, [r2, #4]
 801d3c8:	6812      	ldr	r2, [r2, #0]
 801d3ca:	19b9      	adds	r1, r7, r6
 801d3cc:	6808      	ldr	r0, [r1, #0]
 801d3ce:	6849      	ldr	r1, [r1, #4]
 801d3d0:	f7e3 f8de 	bl	8000590 <__aeabi_lmul>
 801d3d4:	0002      	movs	r2, r0
 801d3d6:	000b      	movs	r3, r1
 801d3d8:	0010      	movs	r0, r2
 801d3da:	0019      	movs	r1, r3
 801d3dc:	239c      	movs	r3, #156	; 0x9c
 801d3de:	18fa      	adds	r2, r7, r3
 801d3e0:	6813      	ldr	r3, [r2, #0]
 801d3e2:	2210      	movs	r2, #16
 801d3e4:	5e9b      	ldrsh	r3, [r3, r2]
 801d3e6:	653b      	str	r3, [r7, #80]	; 0x50
 801d3e8:	17db      	asrs	r3, r3, #31
 801d3ea:	657b      	str	r3, [r7, #84]	; 0x54
 801d3ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d3f0:	f7e3 f8ce 	bl	8000590 <__aeabi_lmul>
 801d3f4:	0002      	movs	r2, r0
 801d3f6:	000b      	movs	r3, r1
 801d3f8:	21a8      	movs	r1, #168	; 0xa8
 801d3fa:	1878      	adds	r0, r7, r1
 801d3fc:	6002      	str	r2, [r0, #0]
 801d3fe:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801d400:	239c      	movs	r3, #156	; 0x9c
 801d402:	18fa      	adds	r2, r7, r3
 801d404:	6813      	ldr	r3, [r2, #0]
 801d406:	220e      	movs	r2, #14
 801d408:	5e9b      	ldrsh	r3, [r3, r2]
 801d40a:	64bb      	str	r3, [r7, #72]	; 0x48
 801d40c:	17db      	asrs	r3, r3, #31
 801d40e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d410:	19ba      	adds	r2, r7, r6
 801d412:	6853      	ldr	r3, [r2, #4]
 801d414:	6812      	ldr	r2, [r2, #0]
 801d416:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d418:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d41a:	f7e3 f8b9 	bl	8000590 <__aeabi_lmul>
 801d41e:	0002      	movs	r2, r0
 801d420:	000b      	movs	r3, r1
 801d422:	0bd1      	lsrs	r1, r2, #15
 801d424:	045d      	lsls	r5, r3, #17
 801d426:	430d      	orrs	r5, r1
 801d428:	0454      	lsls	r4, r2, #17
 801d42a:	21a8      	movs	r1, #168	; 0xa8
 801d42c:	187a      	adds	r2, r7, r1
 801d42e:	6853      	ldr	r3, [r2, #4]
 801d430:	6812      	ldr	r2, [r2, #0]
 801d432:	1912      	adds	r2, r2, r4
 801d434:	416b      	adcs	r3, r5
 801d436:	1878      	adds	r0, r7, r1
 801d438:	6002      	str	r2, [r0, #0]
 801d43a:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801d43c:	259c      	movs	r5, #156	; 0x9c
 801d43e:	197b      	adds	r3, r7, r5
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	220c      	movs	r2, #12
 801d444:	5e9b      	ldrsh	r3, [r3, r2]
 801d446:	643b      	str	r3, [r7, #64]	; 0x40
 801d448:	17db      	asrs	r3, r3, #31
 801d44a:	647b      	str	r3, [r7, #68]	; 0x44
 801d44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d44e:	00db      	lsls	r3, r3, #3
 801d450:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d452:	2300      	movs	r3, #0
 801d454:	63bb      	str	r3, [r7, #56]	; 0x38
 801d456:	000c      	movs	r4, r1
 801d458:	187b      	adds	r3, r7, r1
 801d45a:	681a      	ldr	r2, [r3, #0]
 801d45c:	685b      	ldr	r3, [r3, #4]
 801d45e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d462:	1812      	adds	r2, r2, r0
 801d464:	414b      	adcs	r3, r1
 801d466:	1939      	adds	r1, r7, r4
 801d468:	600a      	str	r2, [r1, #0]
 801d46a:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d46c:	0034      	movs	r4, r6
 801d46e:	193b      	adds	r3, r7, r4
 801d470:	681a      	ldr	r2, [r3, #0]
 801d472:	685b      	ldr	r3, [r3, #4]
 801d474:	1939      	adds	r1, r7, r4
 801d476:	6808      	ldr	r0, [r1, #0]
 801d478:	6849      	ldr	r1, [r1, #4]
 801d47a:	f7e3 f889 	bl	8000590 <__aeabi_lmul>
 801d47e:	0002      	movs	r2, r0
 801d480:	000b      	movs	r3, r1
 801d482:	0010      	movs	r0, r2
 801d484:	0019      	movs	r1, r3
 801d486:	197b      	adds	r3, r7, r5
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	220a      	movs	r2, #10
 801d48c:	5e9b      	ldrsh	r3, [r3, r2]
 801d48e:	633b      	str	r3, [r7, #48]	; 0x30
 801d490:	17db      	asrs	r3, r3, #31
 801d492:	637b      	str	r3, [r7, #52]	; 0x34
 801d494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d498:	f7e3 f87a 	bl	8000590 <__aeabi_lmul>
 801d49c:	0002      	movs	r2, r0
 801d49e:	000b      	movs	r3, r1
 801d4a0:	0619      	lsls	r1, r3, #24
 801d4a2:	468c      	mov	ip, r1
 801d4a4:	0a10      	lsrs	r0, r2, #8
 801d4a6:	2688      	movs	r6, #136	; 0x88
 801d4a8:	19b9      	adds	r1, r7, r6
 801d4aa:	6008      	str	r0, [r1, #0]
 801d4ac:	19b8      	adds	r0, r7, r6
 801d4ae:	6800      	ldr	r0, [r0, #0]
 801d4b0:	4661      	mov	r1, ip
 801d4b2:	4308      	orrs	r0, r1
 801d4b4:	19b9      	adds	r1, r7, r6
 801d4b6:	6008      	str	r0, [r1, #0]
 801d4b8:	121b      	asrs	r3, r3, #8
 801d4ba:	228c      	movs	r2, #140	; 0x8c
 801d4bc:	18ba      	adds	r2, r7, r2
 801d4be:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801d4c0:	197b      	adds	r3, r7, r5
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	2208      	movs	r2, #8
 801d4c6:	5e9b      	ldrsh	r3, [r3, r2]
 801d4c8:	62bb      	str	r3, [r7, #40]	; 0x28
 801d4ca:	17db      	asrs	r3, r3, #31
 801d4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d4ce:	193b      	adds	r3, r7, r4
 801d4d0:	681a      	ldr	r2, [r3, #0]
 801d4d2:	685b      	ldr	r3, [r3, #4]
 801d4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d4d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d4d8:	f7e3 f85a 	bl	8000590 <__aeabi_lmul>
 801d4dc:	0002      	movs	r2, r0
 801d4de:	000b      	movs	r3, r1
 801d4e0:	0d11      	lsrs	r1, r2, #20
 801d4e2:	468c      	mov	ip, r1
 801d4e4:	0318      	lsls	r0, r3, #12
 801d4e6:	2184      	movs	r1, #132	; 0x84
 801d4e8:	1879      	adds	r1, r7, r1
 801d4ea:	6008      	str	r0, [r1, #0]
 801d4ec:	2084      	movs	r0, #132	; 0x84
 801d4ee:	1839      	adds	r1, r7, r0
 801d4f0:	6808      	ldr	r0, [r1, #0]
 801d4f2:	4661      	mov	r1, ip
 801d4f4:	4308      	orrs	r0, r1
 801d4f6:	2184      	movs	r1, #132	; 0x84
 801d4f8:	1879      	adds	r1, r7, r1
 801d4fa:	6008      	str	r0, [r1, #0]
 801d4fc:	0313      	lsls	r3, r2, #12
 801d4fe:	2180      	movs	r1, #128	; 0x80
 801d500:	187a      	adds	r2, r7, r1
 801d502:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d504:	19bb      	adds	r3, r7, r6
 801d506:	681a      	ldr	r2, [r3, #0]
 801d508:	685b      	ldr	r3, [r3, #4]
 801d50a:	1879      	adds	r1, r7, r1
 801d50c:	6808      	ldr	r0, [r1, #0]
 801d50e:	6849      	ldr	r1, [r1, #4]
 801d510:	1812      	adds	r2, r2, r0
 801d512:	414b      	adcs	r3, r1
 801d514:	1939      	adds	r1, r7, r4
 801d516:	600a      	str	r2, [r1, #0]
 801d518:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801d51a:	193b      	adds	r3, r7, r4
 801d51c:	6818      	ldr	r0, [r3, #0]
 801d51e:	6859      	ldr	r1, [r3, #4]
 801d520:	2200      	movs	r2, #0
 801d522:	2380      	movs	r3, #128	; 0x80
 801d524:	021b      	lsls	r3, r3, #8
 801d526:	1880      	adds	r0, r0, r2
 801d528:	4159      	adcs	r1, r3
 801d52a:	197b      	adds	r3, r7, r5
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	88db      	ldrh	r3, [r3, #6]
 801d530:	623b      	str	r3, [r7, #32]
 801d532:	2300      	movs	r3, #0
 801d534:	627b      	str	r3, [r7, #36]	; 0x24
 801d536:	6a3a      	ldr	r2, [r7, #32]
 801d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d53a:	f7e3 f829 	bl	8000590 <__aeabi_lmul>
 801d53e:	0002      	movs	r2, r0
 801d540:	000b      	movs	r3, r1
 801d542:	1059      	asrs	r1, r3, #1
 801d544:	1938      	adds	r0, r7, r4
 801d546:	6001      	str	r1, [r0, #0]
 801d548:	17db      	asrs	r3, r3, #31
 801d54a:	21b4      	movs	r1, #180	; 0xb4
 801d54c:	187a      	adds	r2, r7, r1
 801d54e:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801d550:	193b      	adds	r3, r7, r4
 801d552:	681a      	ldr	r2, [r3, #0]
 801d554:	187b      	adds	r3, r7, r1
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	431a      	orrs	r2, r3
 801d55a:	d101      	bne.n	801d560 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801d55c:	2300      	movs	r3, #0
 801d55e:	e0bc      	b.n	801d6da <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801d560:	2398      	movs	r3, #152	; 0x98
 801d562:	18fb      	adds	r3, r7, r3
 801d564:	681a      	ldr	r2, [r3, #0]
 801d566:	2380      	movs	r3, #128	; 0x80
 801d568:	035b      	lsls	r3, r3, #13
 801d56a:	1a9b      	subs	r3, r3, r2
 801d56c:	24a0      	movs	r4, #160	; 0xa0
 801d56e:	193a      	adds	r2, r7, r4
 801d570:	6013      	str	r3, [r2, #0]
 801d572:	17db      	asrs	r3, r3, #31
 801d574:	25a4      	movs	r5, #164	; 0xa4
 801d576:	197a      	adds	r2, r7, r5
 801d578:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801d57a:	193b      	adds	r3, r7, r4
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	105b      	asrs	r3, r3, #1
 801d580:	61fb      	str	r3, [r7, #28]
 801d582:	193b      	adds	r3, r7, r4
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	07db      	lsls	r3, r3, #31
 801d588:	61bb      	str	r3, [r7, #24]
 801d58a:	20a8      	movs	r0, #168	; 0xa8
 801d58c:	183a      	adds	r2, r7, r0
 801d58e:	6853      	ldr	r3, [r2, #4]
 801d590:	6812      	ldr	r2, [r2, #0]
 801d592:	69b8      	ldr	r0, [r7, #24]
 801d594:	69f9      	ldr	r1, [r7, #28]
 801d596:	1a80      	subs	r0, r0, r2
 801d598:	4199      	sbcs	r1, r3
 801d59a:	4a53      	ldr	r2, [pc, #332]	; (801d6e8 <compensate_pressure+0x360>)
 801d59c:	2300      	movs	r3, #0
 801d59e:	f7e2 fff7 	bl	8000590 <__aeabi_lmul>
 801d5a2:	0002      	movs	r2, r0
 801d5a4:	000b      	movs	r3, r1
 801d5a6:	0010      	movs	r0, r2
 801d5a8:	0019      	movs	r1, r3
 801d5aa:	23b0      	movs	r3, #176	; 0xb0
 801d5ac:	18fa      	adds	r2, r7, r3
 801d5ae:	6853      	ldr	r3, [r2, #4]
 801d5b0:	6812      	ldr	r2, [r2, #0]
 801d5b2:	f7e2 ffa9 	bl	8000508 <__aeabi_ldivmod>
 801d5b6:	0002      	movs	r2, r0
 801d5b8:	000b      	movs	r3, r1
 801d5ba:	1939      	adds	r1, r7, r4
 801d5bc:	600a      	str	r2, [r1, #0]
 801d5be:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801d5c0:	269c      	movs	r6, #156	; 0x9c
 801d5c2:	19ba      	adds	r2, r7, r6
 801d5c4:	6813      	ldr	r3, [r2, #0]
 801d5c6:	2216      	movs	r2, #22
 801d5c8:	5e9b      	ldrsh	r3, [r3, r2]
 801d5ca:	613b      	str	r3, [r7, #16]
 801d5cc:	17db      	asrs	r3, r3, #31
 801d5ce:	617b      	str	r3, [r7, #20]
 801d5d0:	197a      	adds	r2, r7, r5
 801d5d2:	6813      	ldr	r3, [r2, #0]
 801d5d4:	04da      	lsls	r2, r3, #19
 801d5d6:	1939      	adds	r1, r7, r4
 801d5d8:	680b      	ldr	r3, [r1, #0]
 801d5da:	0b5b      	lsrs	r3, r3, #13
 801d5dc:	67bb      	str	r3, [r7, #120]	; 0x78
 801d5de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d5e0:	4313      	orrs	r3, r2
 801d5e2:	67bb      	str	r3, [r7, #120]	; 0x78
 801d5e4:	197a      	adds	r2, r7, r5
 801d5e6:	6813      	ldr	r3, [r2, #0]
 801d5e8:	135b      	asrs	r3, r3, #13
 801d5ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d5ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801d5ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d5f0:	6938      	ldr	r0, [r7, #16]
 801d5f2:	6979      	ldr	r1, [r7, #20]
 801d5f4:	f7e2 ffcc 	bl	8000590 <__aeabi_lmul>
 801d5f8:	0002      	movs	r2, r0
 801d5fa:	000b      	movs	r3, r1
 801d5fc:	0010      	movs	r0, r2
 801d5fe:	0019      	movs	r1, r3
 801d600:	197a      	adds	r2, r7, r5
 801d602:	6813      	ldr	r3, [r2, #0]
 801d604:	04da      	lsls	r2, r3, #19
 801d606:	193b      	adds	r3, r7, r4
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	0b5b      	lsrs	r3, r3, #13
 801d60c:	673b      	str	r3, [r7, #112]	; 0x70
 801d60e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d610:	4313      	orrs	r3, r2
 801d612:	673b      	str	r3, [r7, #112]	; 0x70
 801d614:	197a      	adds	r2, r7, r5
 801d616:	6813      	ldr	r3, [r2, #0]
 801d618:	135b      	asrs	r3, r3, #13
 801d61a:	677b      	str	r3, [r7, #116]	; 0x74
 801d61c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d61e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d620:	f7e2 ffb6 	bl	8000590 <__aeabi_lmul>
 801d624:	0002      	movs	r2, r0
 801d626:	000b      	movs	r3, r1
 801d628:	01d9      	lsls	r1, r3, #7
 801d62a:	0e50      	lsrs	r0, r2, #25
 801d62c:	4301      	orrs	r1, r0
 801d62e:	25b0      	movs	r5, #176	; 0xb0
 801d630:	1978      	adds	r0, r7, r5
 801d632:	6001      	str	r1, [r0, #0]
 801d634:	165b      	asrs	r3, r3, #25
 801d636:	22b4      	movs	r2, #180	; 0xb4
 801d638:	18ba      	adds	r2, r7, r2
 801d63a:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801d63c:	19ba      	adds	r2, r7, r6
 801d63e:	6813      	ldr	r3, [r2, #0]
 801d640:	2214      	movs	r2, #20
 801d642:	5e9b      	ldrsh	r3, [r3, r2]
 801d644:	60bb      	str	r3, [r7, #8]
 801d646:	17db      	asrs	r3, r3, #31
 801d648:	60fb      	str	r3, [r7, #12]
 801d64a:	193a      	adds	r2, r7, r4
 801d64c:	6853      	ldr	r3, [r2, #4]
 801d64e:	6812      	ldr	r2, [r2, #0]
 801d650:	68b8      	ldr	r0, [r7, #8]
 801d652:	68f9      	ldr	r1, [r7, #12]
 801d654:	f7e2 ff9c 	bl	8000590 <__aeabi_lmul>
 801d658:	0002      	movs	r2, r0
 801d65a:	000b      	movs	r3, r1
 801d65c:	0359      	lsls	r1, r3, #13
 801d65e:	0cd0      	lsrs	r0, r2, #19
 801d660:	4301      	orrs	r1, r0
 801d662:	20a8      	movs	r0, #168	; 0xa8
 801d664:	1838      	adds	r0, r7, r0
 801d666:	6001      	str	r1, [r0, #0]
 801d668:	14db      	asrs	r3, r3, #19
 801d66a:	22ac      	movs	r2, #172	; 0xac
 801d66c:	18ba      	adds	r2, r7, r2
 801d66e:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801d670:	193a      	adds	r2, r7, r4
 801d672:	6810      	ldr	r0, [r2, #0]
 801d674:	6851      	ldr	r1, [r2, #4]
 801d676:	197a      	adds	r2, r7, r5
 801d678:	6853      	ldr	r3, [r2, #4]
 801d67a:	6812      	ldr	r2, [r2, #0]
 801d67c:	1880      	adds	r0, r0, r2
 801d67e:	4159      	adcs	r1, r3
 801d680:	23a8      	movs	r3, #168	; 0xa8
 801d682:	18fb      	adds	r3, r7, r3
 801d684:	681a      	ldr	r2, [r3, #0]
 801d686:	685b      	ldr	r3, [r3, #4]
 801d688:	1812      	adds	r2, r2, r0
 801d68a:	414b      	adcs	r3, r1
 801d68c:	0619      	lsls	r1, r3, #24
 801d68e:	0a10      	lsrs	r0, r2, #8
 801d690:	66b8      	str	r0, [r7, #104]	; 0x68
 801d692:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d694:	4308      	orrs	r0, r1
 801d696:	66b8      	str	r0, [r7, #104]	; 0x68
 801d698:	121b      	asrs	r3, r3, #8
 801d69a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d69c:	19bb      	adds	r3, r7, r6
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	2212      	movs	r2, #18
 801d6a2:	5e9b      	ldrsh	r3, [r3, r2]
 801d6a4:	603b      	str	r3, [r7, #0]
 801d6a6:	17db      	asrs	r3, r3, #31
 801d6a8:	607b      	str	r3, [r7, #4]
 801d6aa:	6839      	ldr	r1, [r7, #0]
 801d6ac:	687a      	ldr	r2, [r7, #4]
 801d6ae:	000b      	movs	r3, r1
 801d6b0:	0f1b      	lsrs	r3, r3, #28
 801d6b2:	0010      	movs	r0, r2
 801d6b4:	0100      	lsls	r0, r0, #4
 801d6b6:	6678      	str	r0, [r7, #100]	; 0x64
 801d6b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d6ba:	4318      	orrs	r0, r3
 801d6bc:	6678      	str	r0, [r7, #100]	; 0x64
 801d6be:	000b      	movs	r3, r1
 801d6c0:	011b      	lsls	r3, r3, #4
 801d6c2:	663b      	str	r3, [r7, #96]	; 0x60
 801d6c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d6c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d6ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d6cc:	1812      	adds	r2, r2, r0
 801d6ce:	414b      	adcs	r3, r1
 801d6d0:	1939      	adds	r1, r7, r4
 801d6d2:	600a      	str	r2, [r1, #0]
 801d6d4:	604b      	str	r3, [r1, #4]
	return p;
 801d6d6:	193b      	adds	r3, r7, r4
 801d6d8:	681b      	ldr	r3, [r3, #0]
}
 801d6da:	0018      	movs	r0, r3
 801d6dc:	46bd      	mov	sp, r7
 801d6de:	b02f      	add	sp, #188	; 0xbc
 801d6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6e2:	46c0      	nop			; (mov r8, r8)
 801d6e4:	fffe0c00 	.word	0xfffe0c00
 801d6e8:	00000c35 	.word	0x00000c35

0801d6ec <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801d6ec:	b580      	push	{r7, lr}
 801d6ee:	b086      	sub	sp, #24
 801d6f0:	af00      	add	r7, sp, #0
 801d6f2:	60f8      	str	r0, [r7, #12]
 801d6f4:	60b9      	str	r1, [r7, #8]
 801d6f6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	4a2c      	ldr	r2, [pc, #176]	; (801d7ac <compensate_humidity+0xc0>)
 801d6fc:	4694      	mov	ip, r2
 801d6fe:	4463      	add	r3, ip
 801d700:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801d702:	68bb      	ldr	r3, [r7, #8]
 801d704:	039a      	lsls	r2, r3, #14
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	211e      	movs	r1, #30
 801d70a:	5e5b      	ldrsh	r3, [r3, r1]
 801d70c:	051b      	lsls	r3, r3, #20
 801d70e:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	2120      	movs	r1, #32
 801d714:	5e5b      	ldrsh	r3, [r3, r1]
 801d716:	0019      	movs	r1, r3
 801d718:	697b      	ldr	r3, [r7, #20]
 801d71a:	434b      	muls	r3, r1
 801d71c:	1ad3      	subs	r3, r2, r3
 801d71e:	2280      	movs	r2, #128	; 0x80
 801d720:	01d2      	lsls	r2, r2, #7
 801d722:	4694      	mov	ip, r2
 801d724:	4463      	add	r3, ip
 801d726:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801d728:	68fa      	ldr	r2, [r7, #12]
 801d72a:	2122      	movs	r1, #34	; 0x22
 801d72c:	5652      	ldrsb	r2, [r2, r1]
 801d72e:	0011      	movs	r1, r2
 801d730:	697a      	ldr	r2, [r7, #20]
 801d732:	434a      	muls	r2, r1
 801d734:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801d736:	68f9      	ldr	r1, [r7, #12]
 801d738:	7f09      	ldrb	r1, [r1, #28]
 801d73a:	0008      	movs	r0, r1
 801d73c:	6979      	ldr	r1, [r7, #20]
 801d73e:	4341      	muls	r1, r0
 801d740:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801d742:	2080      	movs	r0, #128	; 0x80
 801d744:	0200      	lsls	r0, r0, #8
 801d746:	4684      	mov	ip, r0
 801d748:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801d74a:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801d74c:	1292      	asrs	r2, r2, #10
 801d74e:	2180      	movs	r1, #128	; 0x80
 801d750:	0389      	lsls	r1, r1, #14
 801d752:	468c      	mov	ip, r1
 801d754:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801d756:	68f9      	ldr	r1, [r7, #12]
 801d758:	201a      	movs	r0, #26
 801d75a:	5e09      	ldrsh	r1, [r1, r0]
 801d75c:	434a      	muls	r2, r1
 801d75e:	2180      	movs	r1, #128	; 0x80
 801d760:	0189      	lsls	r1, r1, #6
 801d762:	468c      	mov	ip, r1
 801d764:	4462      	add	r2, ip
 801d766:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801d768:	4353      	muls	r3, r2
 801d76a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801d76c:	697b      	ldr	r3, [r7, #20]
 801d76e:	13db      	asrs	r3, r3, #15
 801d770:	697a      	ldr	r2, [r7, #20]
 801d772:	13d2      	asrs	r2, r2, #15
 801d774:	4353      	muls	r3, r2
 801d776:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801d778:	68fa      	ldr	r2, [r7, #12]
 801d77a:	7e12      	ldrb	r2, [r2, #24]
 801d77c:	4353      	muls	r3, r2
 801d77e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801d780:	697a      	ldr	r2, [r7, #20]
 801d782:	1ad3      	subs	r3, r2, r3
 801d784:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801d786:	697b      	ldr	r3, [r7, #20]
 801d788:	2b00      	cmp	r3, #0
 801d78a:	da00      	bge.n	801d78e <compensate_humidity+0xa2>
 801d78c:	2300      	movs	r3, #0
 801d78e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801d790:	697b      	ldr	r3, [r7, #20]
 801d792:	22c8      	movs	r2, #200	; 0xc8
 801d794:	0552      	lsls	r2, r2, #21
 801d796:	4293      	cmp	r3, r2
 801d798:	dd01      	ble.n	801d79e <compensate_humidity+0xb2>
 801d79a:	23c8      	movs	r3, #200	; 0xc8
 801d79c:	055b      	lsls	r3, r3, #21
 801d79e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801d7a0:	697b      	ldr	r3, [r7, #20]
 801d7a2:	131b      	asrs	r3, r3, #12
}
 801d7a4:	0018      	movs	r0, r3
 801d7a6:	46bd      	mov	sp, r7
 801d7a8:	b006      	add	sp, #24
 801d7aa:	bd80      	pop	{r7, pc}
 801d7ac:	fffed400 	.word	0xfffed400

0801d7b0 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801d7b0:	b590      	push	{r4, r7, lr}
 801d7b2:	b08d      	sub	sp, #52	; 0x34
 801d7b4:	af00      	add	r7, sp, #0
 801d7b6:	60f8      	str	r0, [r7, #12]
 801d7b8:	60b9      	str	r1, [r7, #8]
 801d7ba:	607a      	str	r2, [r7, #4]
 801d7bc:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	2232      	movs	r2, #50	; 0x32
 801d7c2:	5c9b      	ldrb	r3, [r3, r2]
 801d7c4:	2b60      	cmp	r3, #96	; 0x60
 801d7c6:	d007      	beq.n	801d7d8 <bmp280_read_fixed+0x28>
		if (humidity)
 801d7c8:	683b      	ldr	r3, [r7, #0]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d002      	beq.n	801d7d4 <bmp280_read_fixed+0x24>
			*humidity = 0;
 801d7ce:	683b      	ldr	r3, [r7, #0]
 801d7d0:	2200      	movs	r2, #0
 801d7d2:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801d7d8:	683b      	ldr	r3, [r7, #0]
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d001      	beq.n	801d7e2 <bmp280_read_fixed+0x32>
 801d7de:	2308      	movs	r3, #8
 801d7e0:	e000      	b.n	801d7e4 <bmp280_read_fixed+0x34>
 801d7e2:	2306      	movs	r3, #6
 801d7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7e8:	b2db      	uxtb	r3, r3
 801d7ea:	2218      	movs	r2, #24
 801d7ec:	18ba      	adds	r2, r7, r2
 801d7ee:	68f8      	ldr	r0, [r7, #12]
 801d7f0:	21f7      	movs	r1, #247	; 0xf7
 801d7f2:	f7ff fb9b 	bl	801cf2c <read_data>
 801d7f6:	1e03      	subs	r3, r0, #0
 801d7f8:	d001      	beq.n	801d7fe <bmp280_read_fixed+0x4e>
		return false;
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	e041      	b.n	801d882 <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801d7fe:	2418      	movs	r4, #24
 801d800:	193b      	adds	r3, r7, r4
 801d802:	781b      	ldrb	r3, [r3, #0]
 801d804:	031a      	lsls	r2, r3, #12
 801d806:	193b      	adds	r3, r7, r4
 801d808:	785b      	ldrb	r3, [r3, #1]
 801d80a:	011b      	lsls	r3, r3, #4
 801d80c:	4313      	orrs	r3, r2
 801d80e:	193a      	adds	r2, r7, r4
 801d810:	7892      	ldrb	r2, [r2, #2]
 801d812:	0912      	lsrs	r2, r2, #4
 801d814:	b2d2      	uxtb	r2, r2
 801d816:	4313      	orrs	r3, r2
 801d818:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801d81a:	193b      	adds	r3, r7, r4
 801d81c:	78db      	ldrb	r3, [r3, #3]
 801d81e:	031a      	lsls	r2, r3, #12
 801d820:	193b      	adds	r3, r7, r4
 801d822:	791b      	ldrb	r3, [r3, #4]
 801d824:	011b      	lsls	r3, r3, #4
 801d826:	4313      	orrs	r3, r2
 801d828:	193a      	adds	r2, r7, r4
 801d82a:	7952      	ldrb	r2, [r2, #5]
 801d82c:	0912      	lsrs	r2, r2, #4
 801d82e:	b2d2      	uxtb	r2, r2
 801d830:	4313      	orrs	r3, r2
 801d832:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801d834:	2314      	movs	r3, #20
 801d836:	18fa      	adds	r2, r7, r3
 801d838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	0018      	movs	r0, r3
 801d83e:	f7ff fd6e 	bl	801d31e <compensate_temperature>
 801d842:	0002      	movs	r2, r0
 801d844:	68bb      	ldr	r3, [r7, #8]
 801d846:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801d848:	697a      	ldr	r2, [r7, #20]
 801d84a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	0018      	movs	r0, r3
 801d850:	f7ff fd9a 	bl	801d388 <compensate_pressure>
 801d854:	0002      	movs	r2, r0
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801d85a:	683b      	ldr	r3, [r7, #0]
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d00f      	beq.n	801d880 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801d860:	193b      	adds	r3, r7, r4
 801d862:	799b      	ldrb	r3, [r3, #6]
 801d864:	021b      	lsls	r3, r3, #8
 801d866:	193a      	adds	r2, r7, r4
 801d868:	79d2      	ldrb	r2, [r2, #7]
 801d86a:	4313      	orrs	r3, r2
 801d86c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801d86e:	697a      	ldr	r2, [r7, #20]
 801d870:	6a39      	ldr	r1, [r7, #32]
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	0018      	movs	r0, r3
 801d876:	f7ff ff39 	bl	801d6ec <compensate_humidity>
 801d87a:	0002      	movs	r2, r0
 801d87c:	683b      	ldr	r3, [r7, #0]
 801d87e:	601a      	str	r2, [r3, #0]
	}

	return true;
 801d880:	2301      	movs	r3, #1
}
 801d882:	0018      	movs	r0, r3
 801d884:	46bd      	mov	sp, r7
 801d886:	b00d      	add	sp, #52	; 0x34
 801d888:	bd90      	pop	{r4, r7, pc}
	...

0801d88c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 801d88c:	b580      	push	{r7, lr}
 801d88e:	b088      	sub	sp, #32
 801d890:	af00      	add	r7, sp, #0
 801d892:	60f8      	str	r0, [r7, #12]
 801d894:	60b9      	str	r1, [r7, #8]
 801d896:	607a      	str	r2, [r7, #4]
 801d898:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 801d89a:	683b      	ldr	r3, [r7, #0]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d002      	beq.n	801d8a6 <bmp280_read_float+0x1a>
 801d8a0:	2314      	movs	r3, #20
 801d8a2:	18fb      	adds	r3, r7, r3
 801d8a4:	e000      	b.n	801d8a8 <bmp280_read_float+0x1c>
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	2218      	movs	r2, #24
 801d8aa:	18ba      	adds	r2, r7, r2
 801d8ac:	211c      	movs	r1, #28
 801d8ae:	1879      	adds	r1, r7, r1
 801d8b0:	68f8      	ldr	r0, [r7, #12]
 801d8b2:	f7ff ff7d 	bl	801d7b0 <bmp280_read_fixed>
 801d8b6:	1e03      	subs	r3, r0, #0
 801d8b8:	d02d      	beq.n	801d916 <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 801d8ba:	69fb      	ldr	r3, [r7, #28]
 801d8bc:	0018      	movs	r0, r3
 801d8be:	f7e3 fb61 	bl	8000f84 <__aeabi_i2f>
 801d8c2:	1c03      	adds	r3, r0, #0
 801d8c4:	4916      	ldr	r1, [pc, #88]	; (801d920 <bmp280_read_float+0x94>)
 801d8c6:	1c18      	adds	r0, r3, #0
 801d8c8:	f7e2 ffaa 	bl	8000820 <__aeabi_fdiv>
 801d8cc:	1c03      	adds	r3, r0, #0
 801d8ce:	1c1a      	adds	r2, r3, #0
 801d8d0:	68bb      	ldr	r3, [r7, #8]
 801d8d2:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 801d8d4:	69bb      	ldr	r3, [r7, #24]
 801d8d6:	0018      	movs	r0, r3
 801d8d8:	f7e3 fb9a 	bl	8001010 <__aeabi_ui2f>
 801d8dc:	1c03      	adds	r3, r0, #0
 801d8de:	2187      	movs	r1, #135	; 0x87
 801d8e0:	05c9      	lsls	r1, r1, #23
 801d8e2:	1c18      	adds	r0, r3, #0
 801d8e4:	f7e2 ff9c 	bl	8000820 <__aeabi_fdiv>
 801d8e8:	1c03      	adds	r3, r0, #0
 801d8ea:	1c1a      	adds	r2, r3, #0
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	601a      	str	r2, [r3, #0]
		if (humidity)
 801d8f0:	683b      	ldr	r3, [r7, #0]
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d00d      	beq.n	801d912 <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 801d8f6:	697b      	ldr	r3, [r7, #20]
 801d8f8:	0018      	movs	r0, r3
 801d8fa:	f7e3 fb89 	bl	8001010 <__aeabi_ui2f>
 801d8fe:	1c03      	adds	r3, r0, #0
 801d900:	2189      	movs	r1, #137	; 0x89
 801d902:	05c9      	lsls	r1, r1, #23
 801d904:	1c18      	adds	r0, r3, #0
 801d906:	f7e2 ff8b 	bl	8000820 <__aeabi_fdiv>
 801d90a:	1c03      	adds	r3, r0, #0
 801d90c:	1c1a      	adds	r2, r3, #0
 801d90e:	683b      	ldr	r3, [r7, #0]
 801d910:	601a      	str	r2, [r3, #0]
		return true;
 801d912:	2301      	movs	r3, #1
 801d914:	e000      	b.n	801d918 <bmp280_read_float+0x8c>
	}

	return false;
 801d916:	2300      	movs	r3, #0
}
 801d918:	0018      	movs	r0, r3
 801d91a:	46bd      	mov	sp, r7
 801d91c:	b008      	add	sp, #32
 801d91e:	bd80      	pop	{r7, pc}
 801d920:	42c80000 	.word	0x42c80000

0801d924 <__errno>:
 801d924:	4b01      	ldr	r3, [pc, #4]	; (801d92c <__errno+0x8>)
 801d926:	6818      	ldr	r0, [r3, #0]
 801d928:	4770      	bx	lr
 801d92a:	46c0      	nop			; (mov r8, r8)
 801d92c:	200001d8 	.word	0x200001d8

0801d930 <__libc_init_array>:
 801d930:	b570      	push	{r4, r5, r6, lr}
 801d932:	2600      	movs	r6, #0
 801d934:	4d0c      	ldr	r5, [pc, #48]	; (801d968 <__libc_init_array+0x38>)
 801d936:	4c0d      	ldr	r4, [pc, #52]	; (801d96c <__libc_init_array+0x3c>)
 801d938:	1b64      	subs	r4, r4, r5
 801d93a:	10a4      	asrs	r4, r4, #2
 801d93c:	42a6      	cmp	r6, r4
 801d93e:	d109      	bne.n	801d954 <__libc_init_array+0x24>
 801d940:	2600      	movs	r6, #0
 801d942:	f000 fcd1 	bl	801e2e8 <_init>
 801d946:	4d0a      	ldr	r5, [pc, #40]	; (801d970 <__libc_init_array+0x40>)
 801d948:	4c0a      	ldr	r4, [pc, #40]	; (801d974 <__libc_init_array+0x44>)
 801d94a:	1b64      	subs	r4, r4, r5
 801d94c:	10a4      	asrs	r4, r4, #2
 801d94e:	42a6      	cmp	r6, r4
 801d950:	d105      	bne.n	801d95e <__libc_init_array+0x2e>
 801d952:	bd70      	pop	{r4, r5, r6, pc}
 801d954:	00b3      	lsls	r3, r6, #2
 801d956:	58eb      	ldr	r3, [r5, r3]
 801d958:	4798      	blx	r3
 801d95a:	3601      	adds	r6, #1
 801d95c:	e7ee      	b.n	801d93c <__libc_init_array+0xc>
 801d95e:	00b3      	lsls	r3, r6, #2
 801d960:	58eb      	ldr	r3, [r5, r3]
 801d962:	4798      	blx	r3
 801d964:	3601      	adds	r6, #1
 801d966:	e7f2      	b.n	801d94e <__libc_init_array+0x1e>
 801d968:	0801f6f0 	.word	0x0801f6f0
 801d96c:	0801f6f0 	.word	0x0801f6f0
 801d970:	0801f6f0 	.word	0x0801f6f0
 801d974:	0801f6f4 	.word	0x0801f6f4

0801d978 <memcpy>:
 801d978:	2300      	movs	r3, #0
 801d97a:	b510      	push	{r4, lr}
 801d97c:	429a      	cmp	r2, r3
 801d97e:	d100      	bne.n	801d982 <memcpy+0xa>
 801d980:	bd10      	pop	{r4, pc}
 801d982:	5ccc      	ldrb	r4, [r1, r3]
 801d984:	54c4      	strb	r4, [r0, r3]
 801d986:	3301      	adds	r3, #1
 801d988:	e7f8      	b.n	801d97c <memcpy+0x4>

0801d98a <memset>:
 801d98a:	0003      	movs	r3, r0
 801d98c:	1882      	adds	r2, r0, r2
 801d98e:	4293      	cmp	r3, r2
 801d990:	d100      	bne.n	801d994 <memset+0xa>
 801d992:	4770      	bx	lr
 801d994:	7019      	strb	r1, [r3, #0]
 801d996:	3301      	adds	r3, #1
 801d998:	e7f9      	b.n	801d98e <memset+0x4>
	...

0801d99c <siprintf>:
 801d99c:	b40e      	push	{r1, r2, r3}
 801d99e:	b500      	push	{lr}
 801d9a0:	490b      	ldr	r1, [pc, #44]	; (801d9d0 <siprintf+0x34>)
 801d9a2:	b09c      	sub	sp, #112	; 0x70
 801d9a4:	ab1d      	add	r3, sp, #116	; 0x74
 801d9a6:	9002      	str	r0, [sp, #8]
 801d9a8:	9006      	str	r0, [sp, #24]
 801d9aa:	9107      	str	r1, [sp, #28]
 801d9ac:	9104      	str	r1, [sp, #16]
 801d9ae:	4809      	ldr	r0, [pc, #36]	; (801d9d4 <siprintf+0x38>)
 801d9b0:	4909      	ldr	r1, [pc, #36]	; (801d9d8 <siprintf+0x3c>)
 801d9b2:	cb04      	ldmia	r3!, {r2}
 801d9b4:	9105      	str	r1, [sp, #20]
 801d9b6:	6800      	ldr	r0, [r0, #0]
 801d9b8:	a902      	add	r1, sp, #8
 801d9ba:	9301      	str	r3, [sp, #4]
 801d9bc:	f000 f870 	bl	801daa0 <_svfiprintf_r>
 801d9c0:	2300      	movs	r3, #0
 801d9c2:	9a02      	ldr	r2, [sp, #8]
 801d9c4:	7013      	strb	r3, [r2, #0]
 801d9c6:	b01c      	add	sp, #112	; 0x70
 801d9c8:	bc08      	pop	{r3}
 801d9ca:	b003      	add	sp, #12
 801d9cc:	4718      	bx	r3
 801d9ce:	46c0      	nop			; (mov r8, r8)
 801d9d0:	7fffffff 	.word	0x7fffffff
 801d9d4:	200001d8 	.word	0x200001d8
 801d9d8:	ffff0208 	.word	0xffff0208

0801d9dc <__ssputs_r>:
 801d9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9de:	688e      	ldr	r6, [r1, #8]
 801d9e0:	b085      	sub	sp, #20
 801d9e2:	0007      	movs	r7, r0
 801d9e4:	000c      	movs	r4, r1
 801d9e6:	9203      	str	r2, [sp, #12]
 801d9e8:	9301      	str	r3, [sp, #4]
 801d9ea:	429e      	cmp	r6, r3
 801d9ec:	d83c      	bhi.n	801da68 <__ssputs_r+0x8c>
 801d9ee:	2390      	movs	r3, #144	; 0x90
 801d9f0:	898a      	ldrh	r2, [r1, #12]
 801d9f2:	00db      	lsls	r3, r3, #3
 801d9f4:	421a      	tst	r2, r3
 801d9f6:	d034      	beq.n	801da62 <__ssputs_r+0x86>
 801d9f8:	2503      	movs	r5, #3
 801d9fa:	6909      	ldr	r1, [r1, #16]
 801d9fc:	6823      	ldr	r3, [r4, #0]
 801d9fe:	1a5b      	subs	r3, r3, r1
 801da00:	9302      	str	r3, [sp, #8]
 801da02:	6963      	ldr	r3, [r4, #20]
 801da04:	9802      	ldr	r0, [sp, #8]
 801da06:	435d      	muls	r5, r3
 801da08:	0feb      	lsrs	r3, r5, #31
 801da0a:	195d      	adds	r5, r3, r5
 801da0c:	9b01      	ldr	r3, [sp, #4]
 801da0e:	106d      	asrs	r5, r5, #1
 801da10:	3301      	adds	r3, #1
 801da12:	181b      	adds	r3, r3, r0
 801da14:	42ab      	cmp	r3, r5
 801da16:	d900      	bls.n	801da1a <__ssputs_r+0x3e>
 801da18:	001d      	movs	r5, r3
 801da1a:	0553      	lsls	r3, r2, #21
 801da1c:	d532      	bpl.n	801da84 <__ssputs_r+0xa8>
 801da1e:	0029      	movs	r1, r5
 801da20:	0038      	movs	r0, r7
 801da22:	f000 fb27 	bl	801e074 <_malloc_r>
 801da26:	1e06      	subs	r6, r0, #0
 801da28:	d109      	bne.n	801da3e <__ssputs_r+0x62>
 801da2a:	230c      	movs	r3, #12
 801da2c:	603b      	str	r3, [r7, #0]
 801da2e:	2340      	movs	r3, #64	; 0x40
 801da30:	2001      	movs	r0, #1
 801da32:	89a2      	ldrh	r2, [r4, #12]
 801da34:	4240      	negs	r0, r0
 801da36:	4313      	orrs	r3, r2
 801da38:	81a3      	strh	r3, [r4, #12]
 801da3a:	b005      	add	sp, #20
 801da3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da3e:	9a02      	ldr	r2, [sp, #8]
 801da40:	6921      	ldr	r1, [r4, #16]
 801da42:	f7ff ff99 	bl	801d978 <memcpy>
 801da46:	89a3      	ldrh	r3, [r4, #12]
 801da48:	4a14      	ldr	r2, [pc, #80]	; (801da9c <__ssputs_r+0xc0>)
 801da4a:	401a      	ands	r2, r3
 801da4c:	2380      	movs	r3, #128	; 0x80
 801da4e:	4313      	orrs	r3, r2
 801da50:	81a3      	strh	r3, [r4, #12]
 801da52:	9b02      	ldr	r3, [sp, #8]
 801da54:	6126      	str	r6, [r4, #16]
 801da56:	18f6      	adds	r6, r6, r3
 801da58:	6026      	str	r6, [r4, #0]
 801da5a:	6165      	str	r5, [r4, #20]
 801da5c:	9e01      	ldr	r6, [sp, #4]
 801da5e:	1aed      	subs	r5, r5, r3
 801da60:	60a5      	str	r5, [r4, #8]
 801da62:	9b01      	ldr	r3, [sp, #4]
 801da64:	429e      	cmp	r6, r3
 801da66:	d900      	bls.n	801da6a <__ssputs_r+0x8e>
 801da68:	9e01      	ldr	r6, [sp, #4]
 801da6a:	0032      	movs	r2, r6
 801da6c:	9903      	ldr	r1, [sp, #12]
 801da6e:	6820      	ldr	r0, [r4, #0]
 801da70:	f000 faa3 	bl	801dfba <memmove>
 801da74:	68a3      	ldr	r3, [r4, #8]
 801da76:	2000      	movs	r0, #0
 801da78:	1b9b      	subs	r3, r3, r6
 801da7a:	60a3      	str	r3, [r4, #8]
 801da7c:	6823      	ldr	r3, [r4, #0]
 801da7e:	199e      	adds	r6, r3, r6
 801da80:	6026      	str	r6, [r4, #0]
 801da82:	e7da      	b.n	801da3a <__ssputs_r+0x5e>
 801da84:	002a      	movs	r2, r5
 801da86:	0038      	movs	r0, r7
 801da88:	f000 fb52 	bl	801e130 <_realloc_r>
 801da8c:	1e06      	subs	r6, r0, #0
 801da8e:	d1e0      	bne.n	801da52 <__ssputs_r+0x76>
 801da90:	0038      	movs	r0, r7
 801da92:	6921      	ldr	r1, [r4, #16]
 801da94:	f000 faa4 	bl	801dfe0 <_free_r>
 801da98:	e7c7      	b.n	801da2a <__ssputs_r+0x4e>
 801da9a:	46c0      	nop			; (mov r8, r8)
 801da9c:	fffffb7f 	.word	0xfffffb7f

0801daa0 <_svfiprintf_r>:
 801daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801daa2:	b0a1      	sub	sp, #132	; 0x84
 801daa4:	9003      	str	r0, [sp, #12]
 801daa6:	001d      	movs	r5, r3
 801daa8:	898b      	ldrh	r3, [r1, #12]
 801daaa:	000f      	movs	r7, r1
 801daac:	0016      	movs	r6, r2
 801daae:	061b      	lsls	r3, r3, #24
 801dab0:	d511      	bpl.n	801dad6 <_svfiprintf_r+0x36>
 801dab2:	690b      	ldr	r3, [r1, #16]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d10e      	bne.n	801dad6 <_svfiprintf_r+0x36>
 801dab8:	2140      	movs	r1, #64	; 0x40
 801daba:	f000 fadb 	bl	801e074 <_malloc_r>
 801dabe:	6038      	str	r0, [r7, #0]
 801dac0:	6138      	str	r0, [r7, #16]
 801dac2:	2800      	cmp	r0, #0
 801dac4:	d105      	bne.n	801dad2 <_svfiprintf_r+0x32>
 801dac6:	230c      	movs	r3, #12
 801dac8:	9a03      	ldr	r2, [sp, #12]
 801daca:	3801      	subs	r0, #1
 801dacc:	6013      	str	r3, [r2, #0]
 801dace:	b021      	add	sp, #132	; 0x84
 801dad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dad2:	2340      	movs	r3, #64	; 0x40
 801dad4:	617b      	str	r3, [r7, #20]
 801dad6:	2300      	movs	r3, #0
 801dad8:	ac08      	add	r4, sp, #32
 801dada:	6163      	str	r3, [r4, #20]
 801dadc:	3320      	adds	r3, #32
 801dade:	7663      	strb	r3, [r4, #25]
 801dae0:	3310      	adds	r3, #16
 801dae2:	76a3      	strb	r3, [r4, #26]
 801dae4:	9507      	str	r5, [sp, #28]
 801dae6:	0035      	movs	r5, r6
 801dae8:	782b      	ldrb	r3, [r5, #0]
 801daea:	2b00      	cmp	r3, #0
 801daec:	d001      	beq.n	801daf2 <_svfiprintf_r+0x52>
 801daee:	2b25      	cmp	r3, #37	; 0x25
 801daf0:	d147      	bne.n	801db82 <_svfiprintf_r+0xe2>
 801daf2:	1bab      	subs	r3, r5, r6
 801daf4:	9305      	str	r3, [sp, #20]
 801daf6:	42b5      	cmp	r5, r6
 801daf8:	d00c      	beq.n	801db14 <_svfiprintf_r+0x74>
 801dafa:	0032      	movs	r2, r6
 801dafc:	0039      	movs	r1, r7
 801dafe:	9803      	ldr	r0, [sp, #12]
 801db00:	f7ff ff6c 	bl	801d9dc <__ssputs_r>
 801db04:	1c43      	adds	r3, r0, #1
 801db06:	d100      	bne.n	801db0a <_svfiprintf_r+0x6a>
 801db08:	e0ae      	b.n	801dc68 <_svfiprintf_r+0x1c8>
 801db0a:	6962      	ldr	r2, [r4, #20]
 801db0c:	9b05      	ldr	r3, [sp, #20]
 801db0e:	4694      	mov	ip, r2
 801db10:	4463      	add	r3, ip
 801db12:	6163      	str	r3, [r4, #20]
 801db14:	782b      	ldrb	r3, [r5, #0]
 801db16:	2b00      	cmp	r3, #0
 801db18:	d100      	bne.n	801db1c <_svfiprintf_r+0x7c>
 801db1a:	e0a5      	b.n	801dc68 <_svfiprintf_r+0x1c8>
 801db1c:	2201      	movs	r2, #1
 801db1e:	2300      	movs	r3, #0
 801db20:	4252      	negs	r2, r2
 801db22:	6062      	str	r2, [r4, #4]
 801db24:	a904      	add	r1, sp, #16
 801db26:	3254      	adds	r2, #84	; 0x54
 801db28:	1852      	adds	r2, r2, r1
 801db2a:	1c6e      	adds	r6, r5, #1
 801db2c:	6023      	str	r3, [r4, #0]
 801db2e:	60e3      	str	r3, [r4, #12]
 801db30:	60a3      	str	r3, [r4, #8]
 801db32:	7013      	strb	r3, [r2, #0]
 801db34:	65a3      	str	r3, [r4, #88]	; 0x58
 801db36:	2205      	movs	r2, #5
 801db38:	7831      	ldrb	r1, [r6, #0]
 801db3a:	4854      	ldr	r0, [pc, #336]	; (801dc8c <_svfiprintf_r+0x1ec>)
 801db3c:	f000 fa32 	bl	801dfa4 <memchr>
 801db40:	1c75      	adds	r5, r6, #1
 801db42:	2800      	cmp	r0, #0
 801db44:	d11f      	bne.n	801db86 <_svfiprintf_r+0xe6>
 801db46:	6822      	ldr	r2, [r4, #0]
 801db48:	06d3      	lsls	r3, r2, #27
 801db4a:	d504      	bpl.n	801db56 <_svfiprintf_r+0xb6>
 801db4c:	2353      	movs	r3, #83	; 0x53
 801db4e:	a904      	add	r1, sp, #16
 801db50:	185b      	adds	r3, r3, r1
 801db52:	2120      	movs	r1, #32
 801db54:	7019      	strb	r1, [r3, #0]
 801db56:	0713      	lsls	r3, r2, #28
 801db58:	d504      	bpl.n	801db64 <_svfiprintf_r+0xc4>
 801db5a:	2353      	movs	r3, #83	; 0x53
 801db5c:	a904      	add	r1, sp, #16
 801db5e:	185b      	adds	r3, r3, r1
 801db60:	212b      	movs	r1, #43	; 0x2b
 801db62:	7019      	strb	r1, [r3, #0]
 801db64:	7833      	ldrb	r3, [r6, #0]
 801db66:	2b2a      	cmp	r3, #42	; 0x2a
 801db68:	d016      	beq.n	801db98 <_svfiprintf_r+0xf8>
 801db6a:	0035      	movs	r5, r6
 801db6c:	2100      	movs	r1, #0
 801db6e:	200a      	movs	r0, #10
 801db70:	68e3      	ldr	r3, [r4, #12]
 801db72:	782a      	ldrb	r2, [r5, #0]
 801db74:	1c6e      	adds	r6, r5, #1
 801db76:	3a30      	subs	r2, #48	; 0x30
 801db78:	2a09      	cmp	r2, #9
 801db7a:	d94e      	bls.n	801dc1a <_svfiprintf_r+0x17a>
 801db7c:	2900      	cmp	r1, #0
 801db7e:	d111      	bne.n	801dba4 <_svfiprintf_r+0x104>
 801db80:	e017      	b.n	801dbb2 <_svfiprintf_r+0x112>
 801db82:	3501      	adds	r5, #1
 801db84:	e7b0      	b.n	801dae8 <_svfiprintf_r+0x48>
 801db86:	4b41      	ldr	r3, [pc, #260]	; (801dc8c <_svfiprintf_r+0x1ec>)
 801db88:	6822      	ldr	r2, [r4, #0]
 801db8a:	1ac0      	subs	r0, r0, r3
 801db8c:	2301      	movs	r3, #1
 801db8e:	4083      	lsls	r3, r0
 801db90:	4313      	orrs	r3, r2
 801db92:	002e      	movs	r6, r5
 801db94:	6023      	str	r3, [r4, #0]
 801db96:	e7ce      	b.n	801db36 <_svfiprintf_r+0x96>
 801db98:	9b07      	ldr	r3, [sp, #28]
 801db9a:	1d19      	adds	r1, r3, #4
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	9107      	str	r1, [sp, #28]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	db01      	blt.n	801dba8 <_svfiprintf_r+0x108>
 801dba4:	930b      	str	r3, [sp, #44]	; 0x2c
 801dba6:	e004      	b.n	801dbb2 <_svfiprintf_r+0x112>
 801dba8:	425b      	negs	r3, r3
 801dbaa:	60e3      	str	r3, [r4, #12]
 801dbac:	2302      	movs	r3, #2
 801dbae:	4313      	orrs	r3, r2
 801dbb0:	6023      	str	r3, [r4, #0]
 801dbb2:	782b      	ldrb	r3, [r5, #0]
 801dbb4:	2b2e      	cmp	r3, #46	; 0x2e
 801dbb6:	d10a      	bne.n	801dbce <_svfiprintf_r+0x12e>
 801dbb8:	786b      	ldrb	r3, [r5, #1]
 801dbba:	2b2a      	cmp	r3, #42	; 0x2a
 801dbbc:	d135      	bne.n	801dc2a <_svfiprintf_r+0x18a>
 801dbbe:	9b07      	ldr	r3, [sp, #28]
 801dbc0:	3502      	adds	r5, #2
 801dbc2:	1d1a      	adds	r2, r3, #4
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	9207      	str	r2, [sp, #28]
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	db2b      	blt.n	801dc24 <_svfiprintf_r+0x184>
 801dbcc:	9309      	str	r3, [sp, #36]	; 0x24
 801dbce:	4e30      	ldr	r6, [pc, #192]	; (801dc90 <_svfiprintf_r+0x1f0>)
 801dbd0:	2203      	movs	r2, #3
 801dbd2:	0030      	movs	r0, r6
 801dbd4:	7829      	ldrb	r1, [r5, #0]
 801dbd6:	f000 f9e5 	bl	801dfa4 <memchr>
 801dbda:	2800      	cmp	r0, #0
 801dbdc:	d006      	beq.n	801dbec <_svfiprintf_r+0x14c>
 801dbde:	2340      	movs	r3, #64	; 0x40
 801dbe0:	1b80      	subs	r0, r0, r6
 801dbe2:	4083      	lsls	r3, r0
 801dbe4:	6822      	ldr	r2, [r4, #0]
 801dbe6:	3501      	adds	r5, #1
 801dbe8:	4313      	orrs	r3, r2
 801dbea:	6023      	str	r3, [r4, #0]
 801dbec:	7829      	ldrb	r1, [r5, #0]
 801dbee:	2206      	movs	r2, #6
 801dbf0:	4828      	ldr	r0, [pc, #160]	; (801dc94 <_svfiprintf_r+0x1f4>)
 801dbf2:	1c6e      	adds	r6, r5, #1
 801dbf4:	7621      	strb	r1, [r4, #24]
 801dbf6:	f000 f9d5 	bl	801dfa4 <memchr>
 801dbfa:	2800      	cmp	r0, #0
 801dbfc:	d03c      	beq.n	801dc78 <_svfiprintf_r+0x1d8>
 801dbfe:	4b26      	ldr	r3, [pc, #152]	; (801dc98 <_svfiprintf_r+0x1f8>)
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d125      	bne.n	801dc50 <_svfiprintf_r+0x1b0>
 801dc04:	2207      	movs	r2, #7
 801dc06:	9b07      	ldr	r3, [sp, #28]
 801dc08:	3307      	adds	r3, #7
 801dc0a:	4393      	bics	r3, r2
 801dc0c:	3308      	adds	r3, #8
 801dc0e:	9307      	str	r3, [sp, #28]
 801dc10:	6963      	ldr	r3, [r4, #20]
 801dc12:	9a04      	ldr	r2, [sp, #16]
 801dc14:	189b      	adds	r3, r3, r2
 801dc16:	6163      	str	r3, [r4, #20]
 801dc18:	e765      	b.n	801dae6 <_svfiprintf_r+0x46>
 801dc1a:	4343      	muls	r3, r0
 801dc1c:	0035      	movs	r5, r6
 801dc1e:	2101      	movs	r1, #1
 801dc20:	189b      	adds	r3, r3, r2
 801dc22:	e7a6      	b.n	801db72 <_svfiprintf_r+0xd2>
 801dc24:	2301      	movs	r3, #1
 801dc26:	425b      	negs	r3, r3
 801dc28:	e7d0      	b.n	801dbcc <_svfiprintf_r+0x12c>
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	200a      	movs	r0, #10
 801dc2e:	001a      	movs	r2, r3
 801dc30:	3501      	adds	r5, #1
 801dc32:	6063      	str	r3, [r4, #4]
 801dc34:	7829      	ldrb	r1, [r5, #0]
 801dc36:	1c6e      	adds	r6, r5, #1
 801dc38:	3930      	subs	r1, #48	; 0x30
 801dc3a:	2909      	cmp	r1, #9
 801dc3c:	d903      	bls.n	801dc46 <_svfiprintf_r+0x1a6>
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d0c5      	beq.n	801dbce <_svfiprintf_r+0x12e>
 801dc42:	9209      	str	r2, [sp, #36]	; 0x24
 801dc44:	e7c3      	b.n	801dbce <_svfiprintf_r+0x12e>
 801dc46:	4342      	muls	r2, r0
 801dc48:	0035      	movs	r5, r6
 801dc4a:	2301      	movs	r3, #1
 801dc4c:	1852      	adds	r2, r2, r1
 801dc4e:	e7f1      	b.n	801dc34 <_svfiprintf_r+0x194>
 801dc50:	ab07      	add	r3, sp, #28
 801dc52:	9300      	str	r3, [sp, #0]
 801dc54:	003a      	movs	r2, r7
 801dc56:	0021      	movs	r1, r4
 801dc58:	4b10      	ldr	r3, [pc, #64]	; (801dc9c <_svfiprintf_r+0x1fc>)
 801dc5a:	9803      	ldr	r0, [sp, #12]
 801dc5c:	e000      	b.n	801dc60 <_svfiprintf_r+0x1c0>
 801dc5e:	bf00      	nop
 801dc60:	9004      	str	r0, [sp, #16]
 801dc62:	9b04      	ldr	r3, [sp, #16]
 801dc64:	3301      	adds	r3, #1
 801dc66:	d1d3      	bne.n	801dc10 <_svfiprintf_r+0x170>
 801dc68:	89bb      	ldrh	r3, [r7, #12]
 801dc6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dc6c:	065b      	lsls	r3, r3, #25
 801dc6e:	d400      	bmi.n	801dc72 <_svfiprintf_r+0x1d2>
 801dc70:	e72d      	b.n	801dace <_svfiprintf_r+0x2e>
 801dc72:	2001      	movs	r0, #1
 801dc74:	4240      	negs	r0, r0
 801dc76:	e72a      	b.n	801dace <_svfiprintf_r+0x2e>
 801dc78:	ab07      	add	r3, sp, #28
 801dc7a:	9300      	str	r3, [sp, #0]
 801dc7c:	003a      	movs	r2, r7
 801dc7e:	0021      	movs	r1, r4
 801dc80:	4b06      	ldr	r3, [pc, #24]	; (801dc9c <_svfiprintf_r+0x1fc>)
 801dc82:	9803      	ldr	r0, [sp, #12]
 801dc84:	f000 f87c 	bl	801dd80 <_printf_i>
 801dc88:	e7ea      	b.n	801dc60 <_svfiprintf_r+0x1c0>
 801dc8a:	46c0      	nop			; (mov r8, r8)
 801dc8c:	0801f6b4 	.word	0x0801f6b4
 801dc90:	0801f6ba 	.word	0x0801f6ba
 801dc94:	0801f6be 	.word	0x0801f6be
 801dc98:	00000000 	.word	0x00000000
 801dc9c:	0801d9dd 	.word	0x0801d9dd

0801dca0 <_printf_common>:
 801dca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dca2:	0015      	movs	r5, r2
 801dca4:	9301      	str	r3, [sp, #4]
 801dca6:	688a      	ldr	r2, [r1, #8]
 801dca8:	690b      	ldr	r3, [r1, #16]
 801dcaa:	000c      	movs	r4, r1
 801dcac:	9000      	str	r0, [sp, #0]
 801dcae:	4293      	cmp	r3, r2
 801dcb0:	da00      	bge.n	801dcb4 <_printf_common+0x14>
 801dcb2:	0013      	movs	r3, r2
 801dcb4:	0022      	movs	r2, r4
 801dcb6:	602b      	str	r3, [r5, #0]
 801dcb8:	3243      	adds	r2, #67	; 0x43
 801dcba:	7812      	ldrb	r2, [r2, #0]
 801dcbc:	2a00      	cmp	r2, #0
 801dcbe:	d001      	beq.n	801dcc4 <_printf_common+0x24>
 801dcc0:	3301      	adds	r3, #1
 801dcc2:	602b      	str	r3, [r5, #0]
 801dcc4:	6823      	ldr	r3, [r4, #0]
 801dcc6:	069b      	lsls	r3, r3, #26
 801dcc8:	d502      	bpl.n	801dcd0 <_printf_common+0x30>
 801dcca:	682b      	ldr	r3, [r5, #0]
 801dccc:	3302      	adds	r3, #2
 801dcce:	602b      	str	r3, [r5, #0]
 801dcd0:	6822      	ldr	r2, [r4, #0]
 801dcd2:	2306      	movs	r3, #6
 801dcd4:	0017      	movs	r7, r2
 801dcd6:	401f      	ands	r7, r3
 801dcd8:	421a      	tst	r2, r3
 801dcda:	d027      	beq.n	801dd2c <_printf_common+0x8c>
 801dcdc:	0023      	movs	r3, r4
 801dcde:	3343      	adds	r3, #67	; 0x43
 801dce0:	781b      	ldrb	r3, [r3, #0]
 801dce2:	1e5a      	subs	r2, r3, #1
 801dce4:	4193      	sbcs	r3, r2
 801dce6:	6822      	ldr	r2, [r4, #0]
 801dce8:	0692      	lsls	r2, r2, #26
 801dcea:	d430      	bmi.n	801dd4e <_printf_common+0xae>
 801dcec:	0022      	movs	r2, r4
 801dcee:	9901      	ldr	r1, [sp, #4]
 801dcf0:	9800      	ldr	r0, [sp, #0]
 801dcf2:	9e08      	ldr	r6, [sp, #32]
 801dcf4:	3243      	adds	r2, #67	; 0x43
 801dcf6:	47b0      	blx	r6
 801dcf8:	1c43      	adds	r3, r0, #1
 801dcfa:	d025      	beq.n	801dd48 <_printf_common+0xa8>
 801dcfc:	2306      	movs	r3, #6
 801dcfe:	6820      	ldr	r0, [r4, #0]
 801dd00:	682a      	ldr	r2, [r5, #0]
 801dd02:	68e1      	ldr	r1, [r4, #12]
 801dd04:	2500      	movs	r5, #0
 801dd06:	4003      	ands	r3, r0
 801dd08:	2b04      	cmp	r3, #4
 801dd0a:	d103      	bne.n	801dd14 <_printf_common+0x74>
 801dd0c:	1a8d      	subs	r5, r1, r2
 801dd0e:	43eb      	mvns	r3, r5
 801dd10:	17db      	asrs	r3, r3, #31
 801dd12:	401d      	ands	r5, r3
 801dd14:	68a3      	ldr	r3, [r4, #8]
 801dd16:	6922      	ldr	r2, [r4, #16]
 801dd18:	4293      	cmp	r3, r2
 801dd1a:	dd01      	ble.n	801dd20 <_printf_common+0x80>
 801dd1c:	1a9b      	subs	r3, r3, r2
 801dd1e:	18ed      	adds	r5, r5, r3
 801dd20:	2700      	movs	r7, #0
 801dd22:	42bd      	cmp	r5, r7
 801dd24:	d120      	bne.n	801dd68 <_printf_common+0xc8>
 801dd26:	2000      	movs	r0, #0
 801dd28:	e010      	b.n	801dd4c <_printf_common+0xac>
 801dd2a:	3701      	adds	r7, #1
 801dd2c:	68e3      	ldr	r3, [r4, #12]
 801dd2e:	682a      	ldr	r2, [r5, #0]
 801dd30:	1a9b      	subs	r3, r3, r2
 801dd32:	42bb      	cmp	r3, r7
 801dd34:	ddd2      	ble.n	801dcdc <_printf_common+0x3c>
 801dd36:	0022      	movs	r2, r4
 801dd38:	2301      	movs	r3, #1
 801dd3a:	9901      	ldr	r1, [sp, #4]
 801dd3c:	9800      	ldr	r0, [sp, #0]
 801dd3e:	9e08      	ldr	r6, [sp, #32]
 801dd40:	3219      	adds	r2, #25
 801dd42:	47b0      	blx	r6
 801dd44:	1c43      	adds	r3, r0, #1
 801dd46:	d1f0      	bne.n	801dd2a <_printf_common+0x8a>
 801dd48:	2001      	movs	r0, #1
 801dd4a:	4240      	negs	r0, r0
 801dd4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dd4e:	2030      	movs	r0, #48	; 0x30
 801dd50:	18e1      	adds	r1, r4, r3
 801dd52:	3143      	adds	r1, #67	; 0x43
 801dd54:	7008      	strb	r0, [r1, #0]
 801dd56:	0021      	movs	r1, r4
 801dd58:	1c5a      	adds	r2, r3, #1
 801dd5a:	3145      	adds	r1, #69	; 0x45
 801dd5c:	7809      	ldrb	r1, [r1, #0]
 801dd5e:	18a2      	adds	r2, r4, r2
 801dd60:	3243      	adds	r2, #67	; 0x43
 801dd62:	3302      	adds	r3, #2
 801dd64:	7011      	strb	r1, [r2, #0]
 801dd66:	e7c1      	b.n	801dcec <_printf_common+0x4c>
 801dd68:	0022      	movs	r2, r4
 801dd6a:	2301      	movs	r3, #1
 801dd6c:	9901      	ldr	r1, [sp, #4]
 801dd6e:	9800      	ldr	r0, [sp, #0]
 801dd70:	9e08      	ldr	r6, [sp, #32]
 801dd72:	321a      	adds	r2, #26
 801dd74:	47b0      	blx	r6
 801dd76:	1c43      	adds	r3, r0, #1
 801dd78:	d0e6      	beq.n	801dd48 <_printf_common+0xa8>
 801dd7a:	3701      	adds	r7, #1
 801dd7c:	e7d1      	b.n	801dd22 <_printf_common+0x82>
	...

0801dd80 <_printf_i>:
 801dd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd82:	b08b      	sub	sp, #44	; 0x2c
 801dd84:	9206      	str	r2, [sp, #24]
 801dd86:	000a      	movs	r2, r1
 801dd88:	3243      	adds	r2, #67	; 0x43
 801dd8a:	9307      	str	r3, [sp, #28]
 801dd8c:	9005      	str	r0, [sp, #20]
 801dd8e:	9204      	str	r2, [sp, #16]
 801dd90:	7e0a      	ldrb	r2, [r1, #24]
 801dd92:	000c      	movs	r4, r1
 801dd94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd96:	2a78      	cmp	r2, #120	; 0x78
 801dd98:	d806      	bhi.n	801dda8 <_printf_i+0x28>
 801dd9a:	2a62      	cmp	r2, #98	; 0x62
 801dd9c:	d808      	bhi.n	801ddb0 <_printf_i+0x30>
 801dd9e:	2a00      	cmp	r2, #0
 801dda0:	d100      	bne.n	801dda4 <_printf_i+0x24>
 801dda2:	e0c0      	b.n	801df26 <_printf_i+0x1a6>
 801dda4:	2a58      	cmp	r2, #88	; 0x58
 801dda6:	d052      	beq.n	801de4e <_printf_i+0xce>
 801dda8:	0026      	movs	r6, r4
 801ddaa:	3642      	adds	r6, #66	; 0x42
 801ddac:	7032      	strb	r2, [r6, #0]
 801ddae:	e022      	b.n	801ddf6 <_printf_i+0x76>
 801ddb0:	0010      	movs	r0, r2
 801ddb2:	3863      	subs	r0, #99	; 0x63
 801ddb4:	2815      	cmp	r0, #21
 801ddb6:	d8f7      	bhi.n	801dda8 <_printf_i+0x28>
 801ddb8:	f7e2 f9ae 	bl	8000118 <__gnu_thumb1_case_shi>
 801ddbc:	001f0016 	.word	0x001f0016
 801ddc0:	fff6fff6 	.word	0xfff6fff6
 801ddc4:	fff6fff6 	.word	0xfff6fff6
 801ddc8:	fff6001f 	.word	0xfff6001f
 801ddcc:	fff6fff6 	.word	0xfff6fff6
 801ddd0:	00a8fff6 	.word	0x00a8fff6
 801ddd4:	009a0036 	.word	0x009a0036
 801ddd8:	fff6fff6 	.word	0xfff6fff6
 801dddc:	fff600b9 	.word	0xfff600b9
 801dde0:	fff60036 	.word	0xfff60036
 801dde4:	009efff6 	.word	0x009efff6
 801dde8:	0026      	movs	r6, r4
 801ddea:	681a      	ldr	r2, [r3, #0]
 801ddec:	3642      	adds	r6, #66	; 0x42
 801ddee:	1d11      	adds	r1, r2, #4
 801ddf0:	6019      	str	r1, [r3, #0]
 801ddf2:	6813      	ldr	r3, [r2, #0]
 801ddf4:	7033      	strb	r3, [r6, #0]
 801ddf6:	2301      	movs	r3, #1
 801ddf8:	e0a7      	b.n	801df4a <_printf_i+0x1ca>
 801ddfa:	6808      	ldr	r0, [r1, #0]
 801ddfc:	6819      	ldr	r1, [r3, #0]
 801ddfe:	1d0a      	adds	r2, r1, #4
 801de00:	0605      	lsls	r5, r0, #24
 801de02:	d50b      	bpl.n	801de1c <_printf_i+0x9c>
 801de04:	680d      	ldr	r5, [r1, #0]
 801de06:	601a      	str	r2, [r3, #0]
 801de08:	2d00      	cmp	r5, #0
 801de0a:	da03      	bge.n	801de14 <_printf_i+0x94>
 801de0c:	232d      	movs	r3, #45	; 0x2d
 801de0e:	9a04      	ldr	r2, [sp, #16]
 801de10:	426d      	negs	r5, r5
 801de12:	7013      	strb	r3, [r2, #0]
 801de14:	4b61      	ldr	r3, [pc, #388]	; (801df9c <_printf_i+0x21c>)
 801de16:	270a      	movs	r7, #10
 801de18:	9303      	str	r3, [sp, #12]
 801de1a:	e032      	b.n	801de82 <_printf_i+0x102>
 801de1c:	680d      	ldr	r5, [r1, #0]
 801de1e:	601a      	str	r2, [r3, #0]
 801de20:	0641      	lsls	r1, r0, #25
 801de22:	d5f1      	bpl.n	801de08 <_printf_i+0x88>
 801de24:	b22d      	sxth	r5, r5
 801de26:	e7ef      	b.n	801de08 <_printf_i+0x88>
 801de28:	680d      	ldr	r5, [r1, #0]
 801de2a:	6819      	ldr	r1, [r3, #0]
 801de2c:	1d08      	adds	r0, r1, #4
 801de2e:	6018      	str	r0, [r3, #0]
 801de30:	062e      	lsls	r6, r5, #24
 801de32:	d501      	bpl.n	801de38 <_printf_i+0xb8>
 801de34:	680d      	ldr	r5, [r1, #0]
 801de36:	e003      	b.n	801de40 <_printf_i+0xc0>
 801de38:	066d      	lsls	r5, r5, #25
 801de3a:	d5fb      	bpl.n	801de34 <_printf_i+0xb4>
 801de3c:	680d      	ldr	r5, [r1, #0]
 801de3e:	b2ad      	uxth	r5, r5
 801de40:	4b56      	ldr	r3, [pc, #344]	; (801df9c <_printf_i+0x21c>)
 801de42:	270a      	movs	r7, #10
 801de44:	9303      	str	r3, [sp, #12]
 801de46:	2a6f      	cmp	r2, #111	; 0x6f
 801de48:	d117      	bne.n	801de7a <_printf_i+0xfa>
 801de4a:	2708      	movs	r7, #8
 801de4c:	e015      	b.n	801de7a <_printf_i+0xfa>
 801de4e:	3145      	adds	r1, #69	; 0x45
 801de50:	700a      	strb	r2, [r1, #0]
 801de52:	4a52      	ldr	r2, [pc, #328]	; (801df9c <_printf_i+0x21c>)
 801de54:	9203      	str	r2, [sp, #12]
 801de56:	681a      	ldr	r2, [r3, #0]
 801de58:	6821      	ldr	r1, [r4, #0]
 801de5a:	ca20      	ldmia	r2!, {r5}
 801de5c:	601a      	str	r2, [r3, #0]
 801de5e:	0608      	lsls	r0, r1, #24
 801de60:	d550      	bpl.n	801df04 <_printf_i+0x184>
 801de62:	07cb      	lsls	r3, r1, #31
 801de64:	d502      	bpl.n	801de6c <_printf_i+0xec>
 801de66:	2320      	movs	r3, #32
 801de68:	4319      	orrs	r1, r3
 801de6a:	6021      	str	r1, [r4, #0]
 801de6c:	2710      	movs	r7, #16
 801de6e:	2d00      	cmp	r5, #0
 801de70:	d103      	bne.n	801de7a <_printf_i+0xfa>
 801de72:	2320      	movs	r3, #32
 801de74:	6822      	ldr	r2, [r4, #0]
 801de76:	439a      	bics	r2, r3
 801de78:	6022      	str	r2, [r4, #0]
 801de7a:	0023      	movs	r3, r4
 801de7c:	2200      	movs	r2, #0
 801de7e:	3343      	adds	r3, #67	; 0x43
 801de80:	701a      	strb	r2, [r3, #0]
 801de82:	6863      	ldr	r3, [r4, #4]
 801de84:	60a3      	str	r3, [r4, #8]
 801de86:	2b00      	cmp	r3, #0
 801de88:	db03      	blt.n	801de92 <_printf_i+0x112>
 801de8a:	2204      	movs	r2, #4
 801de8c:	6821      	ldr	r1, [r4, #0]
 801de8e:	4391      	bics	r1, r2
 801de90:	6021      	str	r1, [r4, #0]
 801de92:	2d00      	cmp	r5, #0
 801de94:	d102      	bne.n	801de9c <_printf_i+0x11c>
 801de96:	9e04      	ldr	r6, [sp, #16]
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d00c      	beq.n	801deb6 <_printf_i+0x136>
 801de9c:	9e04      	ldr	r6, [sp, #16]
 801de9e:	0028      	movs	r0, r5
 801dea0:	0039      	movs	r1, r7
 801dea2:	f7e2 f9c9 	bl	8000238 <__aeabi_uidivmod>
 801dea6:	9b03      	ldr	r3, [sp, #12]
 801dea8:	3e01      	subs	r6, #1
 801deaa:	5c5b      	ldrb	r3, [r3, r1]
 801deac:	7033      	strb	r3, [r6, #0]
 801deae:	002b      	movs	r3, r5
 801deb0:	0005      	movs	r5, r0
 801deb2:	429f      	cmp	r7, r3
 801deb4:	d9f3      	bls.n	801de9e <_printf_i+0x11e>
 801deb6:	2f08      	cmp	r7, #8
 801deb8:	d109      	bne.n	801dece <_printf_i+0x14e>
 801deba:	6823      	ldr	r3, [r4, #0]
 801debc:	07db      	lsls	r3, r3, #31
 801debe:	d506      	bpl.n	801dece <_printf_i+0x14e>
 801dec0:	6863      	ldr	r3, [r4, #4]
 801dec2:	6922      	ldr	r2, [r4, #16]
 801dec4:	4293      	cmp	r3, r2
 801dec6:	dc02      	bgt.n	801dece <_printf_i+0x14e>
 801dec8:	2330      	movs	r3, #48	; 0x30
 801deca:	3e01      	subs	r6, #1
 801decc:	7033      	strb	r3, [r6, #0]
 801dece:	9b04      	ldr	r3, [sp, #16]
 801ded0:	1b9b      	subs	r3, r3, r6
 801ded2:	6123      	str	r3, [r4, #16]
 801ded4:	9b07      	ldr	r3, [sp, #28]
 801ded6:	0021      	movs	r1, r4
 801ded8:	9300      	str	r3, [sp, #0]
 801deda:	9805      	ldr	r0, [sp, #20]
 801dedc:	9b06      	ldr	r3, [sp, #24]
 801dede:	aa09      	add	r2, sp, #36	; 0x24
 801dee0:	f7ff fede 	bl	801dca0 <_printf_common>
 801dee4:	1c43      	adds	r3, r0, #1
 801dee6:	d135      	bne.n	801df54 <_printf_i+0x1d4>
 801dee8:	2001      	movs	r0, #1
 801deea:	4240      	negs	r0, r0
 801deec:	b00b      	add	sp, #44	; 0x2c
 801deee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801def0:	2220      	movs	r2, #32
 801def2:	6809      	ldr	r1, [r1, #0]
 801def4:	430a      	orrs	r2, r1
 801def6:	6022      	str	r2, [r4, #0]
 801def8:	0022      	movs	r2, r4
 801defa:	2178      	movs	r1, #120	; 0x78
 801defc:	3245      	adds	r2, #69	; 0x45
 801defe:	7011      	strb	r1, [r2, #0]
 801df00:	4a27      	ldr	r2, [pc, #156]	; (801dfa0 <_printf_i+0x220>)
 801df02:	e7a7      	b.n	801de54 <_printf_i+0xd4>
 801df04:	0648      	lsls	r0, r1, #25
 801df06:	d5ac      	bpl.n	801de62 <_printf_i+0xe2>
 801df08:	b2ad      	uxth	r5, r5
 801df0a:	e7aa      	b.n	801de62 <_printf_i+0xe2>
 801df0c:	681a      	ldr	r2, [r3, #0]
 801df0e:	680d      	ldr	r5, [r1, #0]
 801df10:	1d10      	adds	r0, r2, #4
 801df12:	6949      	ldr	r1, [r1, #20]
 801df14:	6018      	str	r0, [r3, #0]
 801df16:	6813      	ldr	r3, [r2, #0]
 801df18:	062e      	lsls	r6, r5, #24
 801df1a:	d501      	bpl.n	801df20 <_printf_i+0x1a0>
 801df1c:	6019      	str	r1, [r3, #0]
 801df1e:	e002      	b.n	801df26 <_printf_i+0x1a6>
 801df20:	066d      	lsls	r5, r5, #25
 801df22:	d5fb      	bpl.n	801df1c <_printf_i+0x19c>
 801df24:	8019      	strh	r1, [r3, #0]
 801df26:	2300      	movs	r3, #0
 801df28:	9e04      	ldr	r6, [sp, #16]
 801df2a:	6123      	str	r3, [r4, #16]
 801df2c:	e7d2      	b.n	801ded4 <_printf_i+0x154>
 801df2e:	681a      	ldr	r2, [r3, #0]
 801df30:	1d11      	adds	r1, r2, #4
 801df32:	6019      	str	r1, [r3, #0]
 801df34:	6816      	ldr	r6, [r2, #0]
 801df36:	2100      	movs	r1, #0
 801df38:	0030      	movs	r0, r6
 801df3a:	6862      	ldr	r2, [r4, #4]
 801df3c:	f000 f832 	bl	801dfa4 <memchr>
 801df40:	2800      	cmp	r0, #0
 801df42:	d001      	beq.n	801df48 <_printf_i+0x1c8>
 801df44:	1b80      	subs	r0, r0, r6
 801df46:	6060      	str	r0, [r4, #4]
 801df48:	6863      	ldr	r3, [r4, #4]
 801df4a:	6123      	str	r3, [r4, #16]
 801df4c:	2300      	movs	r3, #0
 801df4e:	9a04      	ldr	r2, [sp, #16]
 801df50:	7013      	strb	r3, [r2, #0]
 801df52:	e7bf      	b.n	801ded4 <_printf_i+0x154>
 801df54:	6923      	ldr	r3, [r4, #16]
 801df56:	0032      	movs	r2, r6
 801df58:	9906      	ldr	r1, [sp, #24]
 801df5a:	9805      	ldr	r0, [sp, #20]
 801df5c:	9d07      	ldr	r5, [sp, #28]
 801df5e:	47a8      	blx	r5
 801df60:	1c43      	adds	r3, r0, #1
 801df62:	d0c1      	beq.n	801dee8 <_printf_i+0x168>
 801df64:	6823      	ldr	r3, [r4, #0]
 801df66:	079b      	lsls	r3, r3, #30
 801df68:	d415      	bmi.n	801df96 <_printf_i+0x216>
 801df6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df6c:	68e0      	ldr	r0, [r4, #12]
 801df6e:	4298      	cmp	r0, r3
 801df70:	dabc      	bge.n	801deec <_printf_i+0x16c>
 801df72:	0018      	movs	r0, r3
 801df74:	e7ba      	b.n	801deec <_printf_i+0x16c>
 801df76:	0022      	movs	r2, r4
 801df78:	2301      	movs	r3, #1
 801df7a:	9906      	ldr	r1, [sp, #24]
 801df7c:	9805      	ldr	r0, [sp, #20]
 801df7e:	9e07      	ldr	r6, [sp, #28]
 801df80:	3219      	adds	r2, #25
 801df82:	47b0      	blx	r6
 801df84:	1c43      	adds	r3, r0, #1
 801df86:	d0af      	beq.n	801dee8 <_printf_i+0x168>
 801df88:	3501      	adds	r5, #1
 801df8a:	68e3      	ldr	r3, [r4, #12]
 801df8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801df8e:	1a9b      	subs	r3, r3, r2
 801df90:	42ab      	cmp	r3, r5
 801df92:	dcf0      	bgt.n	801df76 <_printf_i+0x1f6>
 801df94:	e7e9      	b.n	801df6a <_printf_i+0x1ea>
 801df96:	2500      	movs	r5, #0
 801df98:	e7f7      	b.n	801df8a <_printf_i+0x20a>
 801df9a:	46c0      	nop			; (mov r8, r8)
 801df9c:	0801f6c5 	.word	0x0801f6c5
 801dfa0:	0801f6d6 	.word	0x0801f6d6

0801dfa4 <memchr>:
 801dfa4:	b2c9      	uxtb	r1, r1
 801dfa6:	1882      	adds	r2, r0, r2
 801dfa8:	4290      	cmp	r0, r2
 801dfaa:	d101      	bne.n	801dfb0 <memchr+0xc>
 801dfac:	2000      	movs	r0, #0
 801dfae:	4770      	bx	lr
 801dfb0:	7803      	ldrb	r3, [r0, #0]
 801dfb2:	428b      	cmp	r3, r1
 801dfb4:	d0fb      	beq.n	801dfae <memchr+0xa>
 801dfb6:	3001      	adds	r0, #1
 801dfb8:	e7f6      	b.n	801dfa8 <memchr+0x4>

0801dfba <memmove>:
 801dfba:	b510      	push	{r4, lr}
 801dfbc:	4288      	cmp	r0, r1
 801dfbe:	d902      	bls.n	801dfc6 <memmove+0xc>
 801dfc0:	188b      	adds	r3, r1, r2
 801dfc2:	4298      	cmp	r0, r3
 801dfc4:	d303      	bcc.n	801dfce <memmove+0x14>
 801dfc6:	2300      	movs	r3, #0
 801dfc8:	e007      	b.n	801dfda <memmove+0x20>
 801dfca:	5c8b      	ldrb	r3, [r1, r2]
 801dfcc:	5483      	strb	r3, [r0, r2]
 801dfce:	3a01      	subs	r2, #1
 801dfd0:	d2fb      	bcs.n	801dfca <memmove+0x10>
 801dfd2:	bd10      	pop	{r4, pc}
 801dfd4:	5ccc      	ldrb	r4, [r1, r3]
 801dfd6:	54c4      	strb	r4, [r0, r3]
 801dfd8:	3301      	adds	r3, #1
 801dfda:	429a      	cmp	r2, r3
 801dfdc:	d1fa      	bne.n	801dfd4 <memmove+0x1a>
 801dfde:	e7f8      	b.n	801dfd2 <memmove+0x18>

0801dfe0 <_free_r>:
 801dfe0:	b570      	push	{r4, r5, r6, lr}
 801dfe2:	0005      	movs	r5, r0
 801dfe4:	2900      	cmp	r1, #0
 801dfe6:	d010      	beq.n	801e00a <_free_r+0x2a>
 801dfe8:	1f0c      	subs	r4, r1, #4
 801dfea:	6823      	ldr	r3, [r4, #0]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	da00      	bge.n	801dff2 <_free_r+0x12>
 801dff0:	18e4      	adds	r4, r4, r3
 801dff2:	0028      	movs	r0, r5
 801dff4:	f000 f8d4 	bl	801e1a0 <__malloc_lock>
 801dff8:	4a1d      	ldr	r2, [pc, #116]	; (801e070 <_free_r+0x90>)
 801dffa:	6813      	ldr	r3, [r2, #0]
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d105      	bne.n	801e00c <_free_r+0x2c>
 801e000:	6063      	str	r3, [r4, #4]
 801e002:	6014      	str	r4, [r2, #0]
 801e004:	0028      	movs	r0, r5
 801e006:	f000 f8d3 	bl	801e1b0 <__malloc_unlock>
 801e00a:	bd70      	pop	{r4, r5, r6, pc}
 801e00c:	42a3      	cmp	r3, r4
 801e00e:	d908      	bls.n	801e022 <_free_r+0x42>
 801e010:	6821      	ldr	r1, [r4, #0]
 801e012:	1860      	adds	r0, r4, r1
 801e014:	4283      	cmp	r3, r0
 801e016:	d1f3      	bne.n	801e000 <_free_r+0x20>
 801e018:	6818      	ldr	r0, [r3, #0]
 801e01a:	685b      	ldr	r3, [r3, #4]
 801e01c:	1841      	adds	r1, r0, r1
 801e01e:	6021      	str	r1, [r4, #0]
 801e020:	e7ee      	b.n	801e000 <_free_r+0x20>
 801e022:	001a      	movs	r2, r3
 801e024:	685b      	ldr	r3, [r3, #4]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d001      	beq.n	801e02e <_free_r+0x4e>
 801e02a:	42a3      	cmp	r3, r4
 801e02c:	d9f9      	bls.n	801e022 <_free_r+0x42>
 801e02e:	6811      	ldr	r1, [r2, #0]
 801e030:	1850      	adds	r0, r2, r1
 801e032:	42a0      	cmp	r0, r4
 801e034:	d10b      	bne.n	801e04e <_free_r+0x6e>
 801e036:	6820      	ldr	r0, [r4, #0]
 801e038:	1809      	adds	r1, r1, r0
 801e03a:	1850      	adds	r0, r2, r1
 801e03c:	6011      	str	r1, [r2, #0]
 801e03e:	4283      	cmp	r3, r0
 801e040:	d1e0      	bne.n	801e004 <_free_r+0x24>
 801e042:	6818      	ldr	r0, [r3, #0]
 801e044:	685b      	ldr	r3, [r3, #4]
 801e046:	1841      	adds	r1, r0, r1
 801e048:	6011      	str	r1, [r2, #0]
 801e04a:	6053      	str	r3, [r2, #4]
 801e04c:	e7da      	b.n	801e004 <_free_r+0x24>
 801e04e:	42a0      	cmp	r0, r4
 801e050:	d902      	bls.n	801e058 <_free_r+0x78>
 801e052:	230c      	movs	r3, #12
 801e054:	602b      	str	r3, [r5, #0]
 801e056:	e7d5      	b.n	801e004 <_free_r+0x24>
 801e058:	6821      	ldr	r1, [r4, #0]
 801e05a:	1860      	adds	r0, r4, r1
 801e05c:	4283      	cmp	r3, r0
 801e05e:	d103      	bne.n	801e068 <_free_r+0x88>
 801e060:	6818      	ldr	r0, [r3, #0]
 801e062:	685b      	ldr	r3, [r3, #4]
 801e064:	1841      	adds	r1, r0, r1
 801e066:	6021      	str	r1, [r4, #0]
 801e068:	6063      	str	r3, [r4, #4]
 801e06a:	6054      	str	r4, [r2, #4]
 801e06c:	e7ca      	b.n	801e004 <_free_r+0x24>
 801e06e:	46c0      	nop			; (mov r8, r8)
 801e070:	20001344 	.word	0x20001344

0801e074 <_malloc_r>:
 801e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e076:	2303      	movs	r3, #3
 801e078:	1ccd      	adds	r5, r1, #3
 801e07a:	439d      	bics	r5, r3
 801e07c:	3508      	adds	r5, #8
 801e07e:	0006      	movs	r6, r0
 801e080:	2d0c      	cmp	r5, #12
 801e082:	d21f      	bcs.n	801e0c4 <_malloc_r+0x50>
 801e084:	250c      	movs	r5, #12
 801e086:	42a9      	cmp	r1, r5
 801e088:	d81e      	bhi.n	801e0c8 <_malloc_r+0x54>
 801e08a:	0030      	movs	r0, r6
 801e08c:	f000 f888 	bl	801e1a0 <__malloc_lock>
 801e090:	4925      	ldr	r1, [pc, #148]	; (801e128 <_malloc_r+0xb4>)
 801e092:	680a      	ldr	r2, [r1, #0]
 801e094:	0014      	movs	r4, r2
 801e096:	2c00      	cmp	r4, #0
 801e098:	d11a      	bne.n	801e0d0 <_malloc_r+0x5c>
 801e09a:	4f24      	ldr	r7, [pc, #144]	; (801e12c <_malloc_r+0xb8>)
 801e09c:	683b      	ldr	r3, [r7, #0]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d104      	bne.n	801e0ac <_malloc_r+0x38>
 801e0a2:	0021      	movs	r1, r4
 801e0a4:	0030      	movs	r0, r6
 801e0a6:	f000 f869 	bl	801e17c <_sbrk_r>
 801e0aa:	6038      	str	r0, [r7, #0]
 801e0ac:	0029      	movs	r1, r5
 801e0ae:	0030      	movs	r0, r6
 801e0b0:	f000 f864 	bl	801e17c <_sbrk_r>
 801e0b4:	1c43      	adds	r3, r0, #1
 801e0b6:	d12b      	bne.n	801e110 <_malloc_r+0x9c>
 801e0b8:	230c      	movs	r3, #12
 801e0ba:	0030      	movs	r0, r6
 801e0bc:	6033      	str	r3, [r6, #0]
 801e0be:	f000 f877 	bl	801e1b0 <__malloc_unlock>
 801e0c2:	e003      	b.n	801e0cc <_malloc_r+0x58>
 801e0c4:	2d00      	cmp	r5, #0
 801e0c6:	dade      	bge.n	801e086 <_malloc_r+0x12>
 801e0c8:	230c      	movs	r3, #12
 801e0ca:	6033      	str	r3, [r6, #0]
 801e0cc:	2000      	movs	r0, #0
 801e0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0d0:	6823      	ldr	r3, [r4, #0]
 801e0d2:	1b5b      	subs	r3, r3, r5
 801e0d4:	d419      	bmi.n	801e10a <_malloc_r+0x96>
 801e0d6:	2b0b      	cmp	r3, #11
 801e0d8:	d903      	bls.n	801e0e2 <_malloc_r+0x6e>
 801e0da:	6023      	str	r3, [r4, #0]
 801e0dc:	18e4      	adds	r4, r4, r3
 801e0de:	6025      	str	r5, [r4, #0]
 801e0e0:	e003      	b.n	801e0ea <_malloc_r+0x76>
 801e0e2:	6863      	ldr	r3, [r4, #4]
 801e0e4:	42a2      	cmp	r2, r4
 801e0e6:	d10e      	bne.n	801e106 <_malloc_r+0x92>
 801e0e8:	600b      	str	r3, [r1, #0]
 801e0ea:	0030      	movs	r0, r6
 801e0ec:	f000 f860 	bl	801e1b0 <__malloc_unlock>
 801e0f0:	0020      	movs	r0, r4
 801e0f2:	2207      	movs	r2, #7
 801e0f4:	300b      	adds	r0, #11
 801e0f6:	1d23      	adds	r3, r4, #4
 801e0f8:	4390      	bics	r0, r2
 801e0fa:	1ac2      	subs	r2, r0, r3
 801e0fc:	4298      	cmp	r0, r3
 801e0fe:	d0e6      	beq.n	801e0ce <_malloc_r+0x5a>
 801e100:	1a1b      	subs	r3, r3, r0
 801e102:	50a3      	str	r3, [r4, r2]
 801e104:	e7e3      	b.n	801e0ce <_malloc_r+0x5a>
 801e106:	6053      	str	r3, [r2, #4]
 801e108:	e7ef      	b.n	801e0ea <_malloc_r+0x76>
 801e10a:	0022      	movs	r2, r4
 801e10c:	6864      	ldr	r4, [r4, #4]
 801e10e:	e7c2      	b.n	801e096 <_malloc_r+0x22>
 801e110:	2303      	movs	r3, #3
 801e112:	1cc4      	adds	r4, r0, #3
 801e114:	439c      	bics	r4, r3
 801e116:	42a0      	cmp	r0, r4
 801e118:	d0e1      	beq.n	801e0de <_malloc_r+0x6a>
 801e11a:	1a21      	subs	r1, r4, r0
 801e11c:	0030      	movs	r0, r6
 801e11e:	f000 f82d 	bl	801e17c <_sbrk_r>
 801e122:	1c43      	adds	r3, r0, #1
 801e124:	d1db      	bne.n	801e0de <_malloc_r+0x6a>
 801e126:	e7c7      	b.n	801e0b8 <_malloc_r+0x44>
 801e128:	20001344 	.word	0x20001344
 801e12c:	20001348 	.word	0x20001348

0801e130 <_realloc_r>:
 801e130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e132:	0007      	movs	r7, r0
 801e134:	000d      	movs	r5, r1
 801e136:	0016      	movs	r6, r2
 801e138:	2900      	cmp	r1, #0
 801e13a:	d105      	bne.n	801e148 <_realloc_r+0x18>
 801e13c:	0011      	movs	r1, r2
 801e13e:	f7ff ff99 	bl	801e074 <_malloc_r>
 801e142:	0004      	movs	r4, r0
 801e144:	0020      	movs	r0, r4
 801e146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e148:	2a00      	cmp	r2, #0
 801e14a:	d103      	bne.n	801e154 <_realloc_r+0x24>
 801e14c:	f7ff ff48 	bl	801dfe0 <_free_r>
 801e150:	0034      	movs	r4, r6
 801e152:	e7f7      	b.n	801e144 <_realloc_r+0x14>
 801e154:	f000 f834 	bl	801e1c0 <_malloc_usable_size_r>
 801e158:	002c      	movs	r4, r5
 801e15a:	42b0      	cmp	r0, r6
 801e15c:	d2f2      	bcs.n	801e144 <_realloc_r+0x14>
 801e15e:	0031      	movs	r1, r6
 801e160:	0038      	movs	r0, r7
 801e162:	f7ff ff87 	bl	801e074 <_malloc_r>
 801e166:	1e04      	subs	r4, r0, #0
 801e168:	d0ec      	beq.n	801e144 <_realloc_r+0x14>
 801e16a:	0029      	movs	r1, r5
 801e16c:	0032      	movs	r2, r6
 801e16e:	f7ff fc03 	bl	801d978 <memcpy>
 801e172:	0029      	movs	r1, r5
 801e174:	0038      	movs	r0, r7
 801e176:	f7ff ff33 	bl	801dfe0 <_free_r>
 801e17a:	e7e3      	b.n	801e144 <_realloc_r+0x14>

0801e17c <_sbrk_r>:
 801e17c:	2300      	movs	r3, #0
 801e17e:	b570      	push	{r4, r5, r6, lr}
 801e180:	4d06      	ldr	r5, [pc, #24]	; (801e19c <_sbrk_r+0x20>)
 801e182:	0004      	movs	r4, r0
 801e184:	0008      	movs	r0, r1
 801e186:	602b      	str	r3, [r5, #0]
 801e188:	f7e6 ff70 	bl	800506c <_sbrk>
 801e18c:	1c43      	adds	r3, r0, #1
 801e18e:	d103      	bne.n	801e198 <_sbrk_r+0x1c>
 801e190:	682b      	ldr	r3, [r5, #0]
 801e192:	2b00      	cmp	r3, #0
 801e194:	d000      	beq.n	801e198 <_sbrk_r+0x1c>
 801e196:	6023      	str	r3, [r4, #0]
 801e198:	bd70      	pop	{r4, r5, r6, pc}
 801e19a:	46c0      	nop			; (mov r8, r8)
 801e19c:	200017ec 	.word	0x200017ec

0801e1a0 <__malloc_lock>:
 801e1a0:	b510      	push	{r4, lr}
 801e1a2:	4802      	ldr	r0, [pc, #8]	; (801e1ac <__malloc_lock+0xc>)
 801e1a4:	f000 f814 	bl	801e1d0 <__retarget_lock_acquire_recursive>
 801e1a8:	bd10      	pop	{r4, pc}
 801e1aa:	46c0      	nop			; (mov r8, r8)
 801e1ac:	200017f4 	.word	0x200017f4

0801e1b0 <__malloc_unlock>:
 801e1b0:	b510      	push	{r4, lr}
 801e1b2:	4802      	ldr	r0, [pc, #8]	; (801e1bc <__malloc_unlock+0xc>)
 801e1b4:	f000 f80d 	bl	801e1d2 <__retarget_lock_release_recursive>
 801e1b8:	bd10      	pop	{r4, pc}
 801e1ba:	46c0      	nop			; (mov r8, r8)
 801e1bc:	200017f4 	.word	0x200017f4

0801e1c0 <_malloc_usable_size_r>:
 801e1c0:	1f0b      	subs	r3, r1, #4
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	1f18      	subs	r0, r3, #4
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	da01      	bge.n	801e1ce <_malloc_usable_size_r+0xe>
 801e1ca:	580b      	ldr	r3, [r1, r0]
 801e1cc:	18c0      	adds	r0, r0, r3
 801e1ce:	4770      	bx	lr

0801e1d0 <__retarget_lock_acquire_recursive>:
 801e1d0:	4770      	bx	lr

0801e1d2 <__retarget_lock_release_recursive>:
 801e1d2:	4770      	bx	lr

0801e1d4 <floor>:
 801e1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e1d6:	004b      	lsls	r3, r1, #1
 801e1d8:	4a3d      	ldr	r2, [pc, #244]	; (801e2d0 <floor+0xfc>)
 801e1da:	0d5b      	lsrs	r3, r3, #21
 801e1dc:	189f      	adds	r7, r3, r2
 801e1de:	4684      	mov	ip, r0
 801e1e0:	000e      	movs	r6, r1
 801e1e2:	000d      	movs	r5, r1
 801e1e4:	0004      	movs	r4, r0
 801e1e6:	9001      	str	r0, [sp, #4]
 801e1e8:	2f13      	cmp	r7, #19
 801e1ea:	dc34      	bgt.n	801e256 <floor+0x82>
 801e1ec:	2f00      	cmp	r7, #0
 801e1ee:	da16      	bge.n	801e21e <floor+0x4a>
 801e1f0:	4a38      	ldr	r2, [pc, #224]	; (801e2d4 <floor+0x100>)
 801e1f2:	4b39      	ldr	r3, [pc, #228]	; (801e2d8 <floor+0x104>)
 801e1f4:	4660      	mov	r0, ip
 801e1f6:	0031      	movs	r1, r6
 801e1f8:	f7e2 ff46 	bl	8001088 <__aeabi_dadd>
 801e1fc:	2200      	movs	r2, #0
 801e1fe:	2300      	movs	r3, #0
 801e200:	f7e2 f934 	bl	800046c <__aeabi_dcmpgt>
 801e204:	2800      	cmp	r0, #0
 801e206:	d007      	beq.n	801e218 <floor+0x44>
 801e208:	2e00      	cmp	r6, #0
 801e20a:	da5d      	bge.n	801e2c8 <floor+0xf4>
 801e20c:	0073      	lsls	r3, r6, #1
 801e20e:	085b      	lsrs	r3, r3, #1
 801e210:	431c      	orrs	r4, r3
 801e212:	d001      	beq.n	801e218 <floor+0x44>
 801e214:	2400      	movs	r4, #0
 801e216:	4d31      	ldr	r5, [pc, #196]	; (801e2dc <floor+0x108>)
 801e218:	46a4      	mov	ip, r4
 801e21a:	002e      	movs	r6, r5
 801e21c:	e029      	b.n	801e272 <floor+0x9e>
 801e21e:	4b30      	ldr	r3, [pc, #192]	; (801e2e0 <floor+0x10c>)
 801e220:	413b      	asrs	r3, r7
 801e222:	9300      	str	r3, [sp, #0]
 801e224:	400b      	ands	r3, r1
 801e226:	4303      	orrs	r3, r0
 801e228:	d023      	beq.n	801e272 <floor+0x9e>
 801e22a:	4a2a      	ldr	r2, [pc, #168]	; (801e2d4 <floor+0x100>)
 801e22c:	4b2a      	ldr	r3, [pc, #168]	; (801e2d8 <floor+0x104>)
 801e22e:	4660      	mov	r0, ip
 801e230:	0031      	movs	r1, r6
 801e232:	f7e2 ff29 	bl	8001088 <__aeabi_dadd>
 801e236:	2200      	movs	r2, #0
 801e238:	2300      	movs	r3, #0
 801e23a:	f7e2 f917 	bl	800046c <__aeabi_dcmpgt>
 801e23e:	2800      	cmp	r0, #0
 801e240:	d0ea      	beq.n	801e218 <floor+0x44>
 801e242:	2e00      	cmp	r6, #0
 801e244:	da03      	bge.n	801e24e <floor+0x7a>
 801e246:	2380      	movs	r3, #128	; 0x80
 801e248:	035b      	lsls	r3, r3, #13
 801e24a:	413b      	asrs	r3, r7
 801e24c:	18f5      	adds	r5, r6, r3
 801e24e:	9b00      	ldr	r3, [sp, #0]
 801e250:	2400      	movs	r4, #0
 801e252:	439d      	bics	r5, r3
 801e254:	e7e0      	b.n	801e218 <floor+0x44>
 801e256:	2f33      	cmp	r7, #51	; 0x33
 801e258:	dd0f      	ble.n	801e27a <floor+0xa6>
 801e25a:	2380      	movs	r3, #128	; 0x80
 801e25c:	00db      	lsls	r3, r3, #3
 801e25e:	429f      	cmp	r7, r3
 801e260:	d107      	bne.n	801e272 <floor+0x9e>
 801e262:	0002      	movs	r2, r0
 801e264:	000b      	movs	r3, r1
 801e266:	4660      	mov	r0, ip
 801e268:	0031      	movs	r1, r6
 801e26a:	f7e2 ff0d 	bl	8001088 <__aeabi_dadd>
 801e26e:	4684      	mov	ip, r0
 801e270:	000e      	movs	r6, r1
 801e272:	4660      	mov	r0, ip
 801e274:	0031      	movs	r1, r6
 801e276:	b003      	add	sp, #12
 801e278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e27a:	4a1a      	ldr	r2, [pc, #104]	; (801e2e4 <floor+0x110>)
 801e27c:	189b      	adds	r3, r3, r2
 801e27e:	2201      	movs	r2, #1
 801e280:	4252      	negs	r2, r2
 801e282:	40da      	lsrs	r2, r3
 801e284:	9200      	str	r2, [sp, #0]
 801e286:	4210      	tst	r0, r2
 801e288:	d0f3      	beq.n	801e272 <floor+0x9e>
 801e28a:	4a12      	ldr	r2, [pc, #72]	; (801e2d4 <floor+0x100>)
 801e28c:	4b12      	ldr	r3, [pc, #72]	; (801e2d8 <floor+0x104>)
 801e28e:	4660      	mov	r0, ip
 801e290:	0031      	movs	r1, r6
 801e292:	f7e2 fef9 	bl	8001088 <__aeabi_dadd>
 801e296:	2200      	movs	r2, #0
 801e298:	2300      	movs	r3, #0
 801e29a:	f7e2 f8e7 	bl	800046c <__aeabi_dcmpgt>
 801e29e:	2800      	cmp	r0, #0
 801e2a0:	d0ba      	beq.n	801e218 <floor+0x44>
 801e2a2:	2e00      	cmp	r6, #0
 801e2a4:	da02      	bge.n	801e2ac <floor+0xd8>
 801e2a6:	2f14      	cmp	r7, #20
 801e2a8:	d103      	bne.n	801e2b2 <floor+0xde>
 801e2aa:	3501      	adds	r5, #1
 801e2ac:	9b00      	ldr	r3, [sp, #0]
 801e2ae:	439c      	bics	r4, r3
 801e2b0:	e7b2      	b.n	801e218 <floor+0x44>
 801e2b2:	2334      	movs	r3, #52	; 0x34
 801e2b4:	1bdf      	subs	r7, r3, r7
 801e2b6:	3b33      	subs	r3, #51	; 0x33
 801e2b8:	40bb      	lsls	r3, r7
 801e2ba:	18e4      	adds	r4, r4, r3
 801e2bc:	9b01      	ldr	r3, [sp, #4]
 801e2be:	429c      	cmp	r4, r3
 801e2c0:	419b      	sbcs	r3, r3
 801e2c2:	425b      	negs	r3, r3
 801e2c4:	18f5      	adds	r5, r6, r3
 801e2c6:	e7f1      	b.n	801e2ac <floor+0xd8>
 801e2c8:	2400      	movs	r4, #0
 801e2ca:	0025      	movs	r5, r4
 801e2cc:	e7a4      	b.n	801e218 <floor+0x44>
 801e2ce:	46c0      	nop			; (mov r8, r8)
 801e2d0:	fffffc01 	.word	0xfffffc01
 801e2d4:	8800759c 	.word	0x8800759c
 801e2d8:	7e37e43c 	.word	0x7e37e43c
 801e2dc:	bff00000 	.word	0xbff00000
 801e2e0:	000fffff 	.word	0x000fffff
 801e2e4:	fffffbed 	.word	0xfffffbed

0801e2e8 <_init>:
 801e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2ea:	46c0      	nop			; (mov r8, r8)
 801e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e2ee:	bc08      	pop	{r3}
 801e2f0:	469e      	mov	lr, r3
 801e2f2:	4770      	bx	lr

0801e2f4 <_fini>:
 801e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2f6:	46c0      	nop			; (mov r8, r8)
 801e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e2fa:	bc08      	pop	{r3}
 801e2fc:	469e      	mov	lr, r3
 801e2fe:	4770      	bx	lr
