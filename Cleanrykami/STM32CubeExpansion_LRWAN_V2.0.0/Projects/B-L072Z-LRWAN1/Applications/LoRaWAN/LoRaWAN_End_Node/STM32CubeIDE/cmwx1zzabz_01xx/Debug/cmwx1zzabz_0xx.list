
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d354  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b4  0801d414  0801d414  0001e414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e8c8  0801e8c8  0001f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e8d0  0801e8d0  0001f8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e8d4  0801e8d4  0001f8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  20000000  0801e8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017d4  200001d8  0801eab0  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  200019ac  0801eab0  000209ac  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000348f3  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009455  00000000  00000000  00054af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a58  00000000  00000000  0005df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002067  00000000  00000000  000609a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021a7e  00000000  00000000  00062a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003e616  00000000  00000000  00084485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b22d3  00000000  00000000  000c2a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00174d6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009748  00000000  00000000  00174db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000174  00000000  00000000  0017e4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801d3fc 	.word	0x0801d3fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0801d3fc 	.word	0x0801d3fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fac9 	bl	80019ac <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fa09 	bl	800183c <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fabb 	bl	80019ac <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fab1 	bl	80019ac <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa33 	bl	80018c4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa29 	bl	80018c4 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	@ 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	@ (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	@ (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f93e 	bl	8000738 <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			@ (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	0008      	movs	r0, r1
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	@ (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	@ (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f852 	bl	80005a0 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4699      	mov	r9, r3
 800050e:	0c03      	lsrs	r3, r0, #16
 8000510:	469c      	mov	ip, r3
 8000512:	0413      	lsls	r3, r2, #16
 8000514:	4647      	mov	r7, r8
 8000516:	0c1b      	lsrs	r3, r3, #16
 8000518:	001d      	movs	r5, r3
 800051a:	000e      	movs	r6, r1
 800051c:	4661      	mov	r1, ip
 800051e:	0404      	lsls	r4, r0, #16
 8000520:	0c24      	lsrs	r4, r4, #16
 8000522:	b580      	push	{r7, lr}
 8000524:	0007      	movs	r7, r0
 8000526:	0c10      	lsrs	r0, r2, #16
 8000528:	434b      	muls	r3, r1
 800052a:	4365      	muls	r5, r4
 800052c:	4341      	muls	r1, r0
 800052e:	4360      	muls	r0, r4
 8000530:	0c2c      	lsrs	r4, r5, #16
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	1824      	adds	r4, r4, r0
 8000536:	468c      	mov	ip, r1
 8000538:	42a3      	cmp	r3, r4
 800053a:	d903      	bls.n	8000544 <__aeabi_lmul+0x3c>
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	025b      	lsls	r3, r3, #9
 8000540:	4698      	mov	r8, r3
 8000542:	44c4      	add	ip, r8
 8000544:	4649      	mov	r1, r9
 8000546:	4379      	muls	r1, r7
 8000548:	4356      	muls	r6, r2
 800054a:	0c23      	lsrs	r3, r4, #16
 800054c:	042d      	lsls	r5, r5, #16
 800054e:	0c2d      	lsrs	r5, r5, #16
 8000550:	1989      	adds	r1, r1, r6
 8000552:	4463      	add	r3, ip
 8000554:	0424      	lsls	r4, r4, #16
 8000556:	1960      	adds	r0, r4, r5
 8000558:	18c9      	adds	r1, r1, r3
 800055a:	bcc0      	pop	{r6, r7}
 800055c:	46b9      	mov	r9, r7
 800055e:	46b0      	mov	r8, r6
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)

08000564 <__aeabi_d2uiz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	2200      	movs	r2, #0
 8000568:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <__aeabi_d2uiz+0x38>)
 800056a:	0004      	movs	r4, r0
 800056c:	000d      	movs	r5, r1
 800056e:	f7ff ff7d 	bl	800046c <__aeabi_dcmpge>
 8000572:	2800      	cmp	r0, #0
 8000574:	d104      	bne.n	8000580 <__aeabi_d2uiz+0x1c>
 8000576:	0020      	movs	r0, r4
 8000578:	0029      	movs	r1, r5
 800057a:	f002 f8ed 	bl	8002758 <__aeabi_d2iz>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <__aeabi_d2uiz+0x38>)
 8000582:	2200      	movs	r2, #0
 8000584:	0020      	movs	r0, r4
 8000586:	0029      	movs	r1, r5
 8000588:	f001 fd4a 	bl	8002020 <__aeabi_dsub>
 800058c:	f002 f8e4 	bl	8002758 <__aeabi_d2iz>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	061b      	lsls	r3, r3, #24
 8000594:	469c      	mov	ip, r3
 8000596:	4460      	add	r0, ip
 8000598:	e7f1      	b.n	800057e <__aeabi_d2uiz+0x1a>
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	41e00000 	.word	0x41e00000

080005a0 <__udivmoddi4>:
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	4657      	mov	r7, sl
 80005a4:	464e      	mov	r6, r9
 80005a6:	4645      	mov	r5, r8
 80005a8:	46de      	mov	lr, fp
 80005aa:	b5e0      	push	{r5, r6, r7, lr}
 80005ac:	0004      	movs	r4, r0
 80005ae:	000d      	movs	r5, r1
 80005b0:	4692      	mov	sl, r2
 80005b2:	4699      	mov	r9, r3
 80005b4:	b083      	sub	sp, #12
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d830      	bhi.n	800061c <__udivmoddi4+0x7c>
 80005ba:	d02d      	beq.n	8000618 <__udivmoddi4+0x78>
 80005bc:	4649      	mov	r1, r9
 80005be:	4650      	mov	r0, sl
 80005c0:	f002 f9be 	bl	8002940 <__clzdi2>
 80005c4:	0029      	movs	r1, r5
 80005c6:	0006      	movs	r6, r0
 80005c8:	0020      	movs	r0, r4
 80005ca:	f002 f9b9 	bl	8002940 <__clzdi2>
 80005ce:	1a33      	subs	r3, r6, r0
 80005d0:	4698      	mov	r8, r3
 80005d2:	3b20      	subs	r3, #32
 80005d4:	d434      	bmi.n	8000640 <__udivmoddi4+0xa0>
 80005d6:	469b      	mov	fp, r3
 80005d8:	4653      	mov	r3, sl
 80005da:	465a      	mov	r2, fp
 80005dc:	4093      	lsls	r3, r2
 80005de:	4642      	mov	r2, r8
 80005e0:	001f      	movs	r7, r3
 80005e2:	4653      	mov	r3, sl
 80005e4:	4093      	lsls	r3, r2
 80005e6:	001e      	movs	r6, r3
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d83b      	bhi.n	8000664 <__udivmoddi4+0xc4>
 80005ec:	42af      	cmp	r7, r5
 80005ee:	d100      	bne.n	80005f2 <__udivmoddi4+0x52>
 80005f0:	e079      	b.n	80006e6 <__udivmoddi4+0x146>
 80005f2:	465b      	mov	r3, fp
 80005f4:	1ba4      	subs	r4, r4, r6
 80005f6:	41bd      	sbcs	r5, r7
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	da00      	bge.n	80005fe <__udivmoddi4+0x5e>
 80005fc:	e076      	b.n	80006ec <__udivmoddi4+0x14c>
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2301      	movs	r3, #1
 8000608:	465a      	mov	r2, fp
 800060a:	4093      	lsls	r3, r2
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2301      	movs	r3, #1
 8000610:	4642      	mov	r2, r8
 8000612:	4093      	lsls	r3, r2
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	e029      	b.n	800066c <__udivmoddi4+0xcc>
 8000618:	4282      	cmp	r2, r0
 800061a:	d9cf      	bls.n	80005bc <__udivmoddi4+0x1c>
 800061c:	2200      	movs	r2, #0
 800061e:	2300      	movs	r3, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <__udivmoddi4+0x8e>
 800062a:	601c      	str	r4, [r3, #0]
 800062c:	605d      	str	r5, [r3, #4]
 800062e:	9800      	ldr	r0, [sp, #0]
 8000630:	9901      	ldr	r1, [sp, #4]
 8000632:	b003      	add	sp, #12
 8000634:	bcf0      	pop	{r4, r5, r6, r7}
 8000636:	46bb      	mov	fp, r7
 8000638:	46b2      	mov	sl, r6
 800063a:	46a9      	mov	r9, r5
 800063c:	46a0      	mov	r8, r4
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000640:	4642      	mov	r2, r8
 8000642:	469b      	mov	fp, r3
 8000644:	2320      	movs	r3, #32
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	4652      	mov	r2, sl
 800064a:	40da      	lsrs	r2, r3
 800064c:	4641      	mov	r1, r8
 800064e:	0013      	movs	r3, r2
 8000650:	464a      	mov	r2, r9
 8000652:	408a      	lsls	r2, r1
 8000654:	0017      	movs	r7, r2
 8000656:	4642      	mov	r2, r8
 8000658:	431f      	orrs	r7, r3
 800065a:	4653      	mov	r3, sl
 800065c:	4093      	lsls	r3, r2
 800065e:	001e      	movs	r6, r3
 8000660:	42af      	cmp	r7, r5
 8000662:	d9c3      	bls.n	80005ec <__udivmoddi4+0x4c>
 8000664:	2200      	movs	r2, #0
 8000666:	2300      	movs	r3, #0
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	4643      	mov	r3, r8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0d8      	beq.n	8000624 <__udivmoddi4+0x84>
 8000672:	07fb      	lsls	r3, r7, #31
 8000674:	0872      	lsrs	r2, r6, #1
 8000676:	431a      	orrs	r2, r3
 8000678:	4646      	mov	r6, r8
 800067a:	087b      	lsrs	r3, r7, #1
 800067c:	e00e      	b.n	800069c <__udivmoddi4+0xfc>
 800067e:	42ab      	cmp	r3, r5
 8000680:	d101      	bne.n	8000686 <__udivmoddi4+0xe6>
 8000682:	42a2      	cmp	r2, r4
 8000684:	d80c      	bhi.n	80006a0 <__udivmoddi4+0x100>
 8000686:	1aa4      	subs	r4, r4, r2
 8000688:	419d      	sbcs	r5, r3
 800068a:	2001      	movs	r0, #1
 800068c:	1924      	adds	r4, r4, r4
 800068e:	416d      	adcs	r5, r5
 8000690:	2100      	movs	r1, #0
 8000692:	3e01      	subs	r6, #1
 8000694:	1824      	adds	r4, r4, r0
 8000696:	414d      	adcs	r5, r1
 8000698:	2e00      	cmp	r6, #0
 800069a:	d006      	beq.n	80006aa <__udivmoddi4+0x10a>
 800069c:	42ab      	cmp	r3, r5
 800069e:	d9ee      	bls.n	800067e <__udivmoddi4+0xde>
 80006a0:	3e01      	subs	r6, #1
 80006a2:	1924      	adds	r4, r4, r4
 80006a4:	416d      	adcs	r5, r5
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d1f8      	bne.n	800069c <__udivmoddi4+0xfc>
 80006aa:	9800      	ldr	r0, [sp, #0]
 80006ac:	9901      	ldr	r1, [sp, #4]
 80006ae:	465b      	mov	r3, fp
 80006b0:	1900      	adds	r0, r0, r4
 80006b2:	4169      	adcs	r1, r5
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db24      	blt.n	8000702 <__udivmoddi4+0x162>
 80006b8:	002b      	movs	r3, r5
 80006ba:	465a      	mov	r2, fp
 80006bc:	4644      	mov	r4, r8
 80006be:	40d3      	lsrs	r3, r2
 80006c0:	002a      	movs	r2, r5
 80006c2:	40e2      	lsrs	r2, r4
 80006c4:	001c      	movs	r4, r3
 80006c6:	465b      	mov	r3, fp
 80006c8:	0015      	movs	r5, r2
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db2a      	blt.n	8000724 <__udivmoddi4+0x184>
 80006ce:	0026      	movs	r6, r4
 80006d0:	409e      	lsls	r6, r3
 80006d2:	0033      	movs	r3, r6
 80006d4:	0026      	movs	r6, r4
 80006d6:	4647      	mov	r7, r8
 80006d8:	40be      	lsls	r6, r7
 80006da:	0032      	movs	r2, r6
 80006dc:	1a80      	subs	r0, r0, r2
 80006de:	4199      	sbcs	r1, r3
 80006e0:	9000      	str	r0, [sp, #0]
 80006e2:	9101      	str	r1, [sp, #4]
 80006e4:	e79e      	b.n	8000624 <__udivmoddi4+0x84>
 80006e6:	42a3      	cmp	r3, r4
 80006e8:	d8bc      	bhi.n	8000664 <__udivmoddi4+0xc4>
 80006ea:	e782      	b.n	80005f2 <__udivmoddi4+0x52>
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	2100      	movs	r1, #0
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	2200      	movs	r2, #0
 80006f6:	9100      	str	r1, [sp, #0]
 80006f8:	9201      	str	r2, [sp, #4]
 80006fa:	2201      	movs	r2, #1
 80006fc:	40da      	lsrs	r2, r3
 80006fe:	9201      	str	r2, [sp, #4]
 8000700:	e785      	b.n	800060e <__udivmoddi4+0x6e>
 8000702:	4642      	mov	r2, r8
 8000704:	2320      	movs	r3, #32
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	4646      	mov	r6, r8
 800070c:	409a      	lsls	r2, r3
 800070e:	0023      	movs	r3, r4
 8000710:	40f3      	lsrs	r3, r6
 8000712:	4644      	mov	r4, r8
 8000714:	4313      	orrs	r3, r2
 8000716:	002a      	movs	r2, r5
 8000718:	40e2      	lsrs	r2, r4
 800071a:	001c      	movs	r4, r3
 800071c:	465b      	mov	r3, fp
 800071e:	0015      	movs	r5, r2
 8000720:	2b00      	cmp	r3, #0
 8000722:	dad4      	bge.n	80006ce <__udivmoddi4+0x12e>
 8000724:	4642      	mov	r2, r8
 8000726:	002f      	movs	r7, r5
 8000728:	2320      	movs	r3, #32
 800072a:	0026      	movs	r6, r4
 800072c:	4097      	lsls	r7, r2
 800072e:	1a9b      	subs	r3, r3, r2
 8000730:	40de      	lsrs	r6, r3
 8000732:	003b      	movs	r3, r7
 8000734:	4333      	orrs	r3, r6
 8000736:	e7cd      	b.n	80006d4 <__udivmoddi4+0x134>

08000738 <__gnu_ldivmod_helper>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	46ce      	mov	lr, r9
 800073c:	4647      	mov	r7, r8
 800073e:	b580      	push	{r7, lr}
 8000740:	4691      	mov	r9, r2
 8000742:	4698      	mov	r8, r3
 8000744:	0004      	movs	r4, r0
 8000746:	000d      	movs	r5, r1
 8000748:	f002 f906 	bl	8002958 <__divdi3>
 800074c:	0007      	movs	r7, r0
 800074e:	000e      	movs	r6, r1
 8000750:	0002      	movs	r2, r0
 8000752:	000b      	movs	r3, r1
 8000754:	4648      	mov	r0, r9
 8000756:	4641      	mov	r1, r8
 8000758:	f7ff fed6 	bl	8000508 <__aeabi_lmul>
 800075c:	1a24      	subs	r4, r4, r0
 800075e:	418d      	sbcs	r5, r1
 8000760:	9b08      	ldr	r3, [sp, #32]
 8000762:	0038      	movs	r0, r7
 8000764:	0031      	movs	r1, r6
 8000766:	601c      	str	r4, [r3, #0]
 8000768:	605d      	str	r5, [r3, #4]
 800076a:	bcc0      	pop	{r6, r7}
 800076c:	46b9      	mov	r9, r7
 800076e:	46b0      	mov	r8, r6
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)

08000774 <__aeabi_fsub>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	4647      	mov	r7, r8
 8000778:	46ce      	mov	lr, r9
 800077a:	024e      	lsls	r6, r1, #9
 800077c:	0243      	lsls	r3, r0, #9
 800077e:	0045      	lsls	r5, r0, #1
 8000780:	0a72      	lsrs	r2, r6, #9
 8000782:	0fc4      	lsrs	r4, r0, #31
 8000784:	0048      	lsls	r0, r1, #1
 8000786:	b580      	push	{r7, lr}
 8000788:	4694      	mov	ip, r2
 800078a:	0a5f      	lsrs	r7, r3, #9
 800078c:	0e2d      	lsrs	r5, r5, #24
 800078e:	099b      	lsrs	r3, r3, #6
 8000790:	0e00      	lsrs	r0, r0, #24
 8000792:	0fc9      	lsrs	r1, r1, #31
 8000794:	09b6      	lsrs	r6, r6, #6
 8000796:	28ff      	cmp	r0, #255	@ 0xff
 8000798:	d024      	beq.n	80007e4 <__aeabi_fsub+0x70>
 800079a:	2201      	movs	r2, #1
 800079c:	4051      	eors	r1, r2
 800079e:	1a2a      	subs	r2, r5, r0
 80007a0:	428c      	cmp	r4, r1
 80007a2:	d00f      	beq.n	80007c4 <__aeabi_fsub+0x50>
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	dc00      	bgt.n	80007aa <__aeabi_fsub+0x36>
 80007a8:	e16a      	b.n	8000a80 <__aeabi_fsub+0x30c>
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d135      	bne.n	800081a <__aeabi_fsub+0xa6>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fsub+0x40>
 80007b2:	e0a2      	b.n	80008fa <__aeabi_fsub+0x186>
 80007b4:	1e51      	subs	r1, r2, #1
 80007b6:	2a01      	cmp	r2, #1
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0x48>
 80007ba:	e124      	b.n	8000a06 <__aeabi_fsub+0x292>
 80007bc:	2aff      	cmp	r2, #255	@ 0xff
 80007be:	d021      	beq.n	8000804 <__aeabi_fsub+0x90>
 80007c0:	000a      	movs	r2, r1
 80007c2:	e02f      	b.n	8000824 <__aeabi_fsub+0xb0>
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fsub+0x56>
 80007c8:	e167      	b.n	8000a9a <__aeabi_fsub+0x326>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d05e      	beq.n	800088c <__aeabi_fsub+0x118>
 80007ce:	2dff      	cmp	r5, #255	@ 0xff
 80007d0:	d018      	beq.n	8000804 <__aeabi_fsub+0x90>
 80007d2:	2180      	movs	r1, #128	@ 0x80
 80007d4:	04c9      	lsls	r1, r1, #19
 80007d6:	430e      	orrs	r6, r1
 80007d8:	2a1b      	cmp	r2, #27
 80007da:	dc00      	bgt.n	80007de <__aeabi_fsub+0x6a>
 80007dc:	e076      	b.n	80008cc <__aeabi_fsub+0x158>
 80007de:	002a      	movs	r2, r5
 80007e0:	3301      	adds	r3, #1
 80007e2:	e032      	b.n	800084a <__aeabi_fsub+0xd6>
 80007e4:	002a      	movs	r2, r5
 80007e6:	3aff      	subs	r2, #255	@ 0xff
 80007e8:	4691      	mov	r9, r2
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d042      	beq.n	8000874 <__aeabi_fsub+0x100>
 80007ee:	428c      	cmp	r4, r1
 80007f0:	d055      	beq.n	800089e <__aeabi_fsub+0x12a>
 80007f2:	464a      	mov	r2, r9
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x86>
 80007f8:	e09c      	b.n	8000934 <__aeabi_fsub+0x1c0>
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0x8c>
 80007fe:	e077      	b.n	80008f0 <__aeabi_fsub+0x17c>
 8000800:	000c      	movs	r4, r1
 8000802:	0033      	movs	r3, r6
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fsub+0x98>
 800080a:	e06e      	b.n	80008ea <__aeabi_fsub+0x176>
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	03d2      	lsls	r2, r2, #15
 8000810:	4313      	orrs	r3, r2
 8000812:	025b      	lsls	r3, r3, #9
 8000814:	20ff      	movs	r0, #255	@ 0xff
 8000816:	0a5b      	lsrs	r3, r3, #9
 8000818:	e024      	b.n	8000864 <__aeabi_fsub+0xf0>
 800081a:	2dff      	cmp	r5, #255	@ 0xff
 800081c:	d0f2      	beq.n	8000804 <__aeabi_fsub+0x90>
 800081e:	2180      	movs	r1, #128	@ 0x80
 8000820:	04c9      	lsls	r1, r1, #19
 8000822:	430e      	orrs	r6, r1
 8000824:	2101      	movs	r1, #1
 8000826:	2a1b      	cmp	r2, #27
 8000828:	dc08      	bgt.n	800083c <__aeabi_fsub+0xc8>
 800082a:	0031      	movs	r1, r6
 800082c:	2020      	movs	r0, #32
 800082e:	40d1      	lsrs	r1, r2
 8000830:	1a82      	subs	r2, r0, r2
 8000832:	4096      	lsls	r6, r2
 8000834:	0032      	movs	r2, r6
 8000836:	1e50      	subs	r0, r2, #1
 8000838:	4182      	sbcs	r2, r0
 800083a:	4311      	orrs	r1, r2
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	015a      	lsls	r2, r3, #5
 8000840:	d460      	bmi.n	8000904 <__aeabi_fsub+0x190>
 8000842:	2107      	movs	r1, #7
 8000844:	002a      	movs	r2, r5
 8000846:	4019      	ands	r1, r3
 8000848:	d057      	beq.n	80008fa <__aeabi_fsub+0x186>
 800084a:	210f      	movs	r1, #15
 800084c:	4019      	ands	r1, r3
 800084e:	2904      	cmp	r1, #4
 8000850:	d000      	beq.n	8000854 <__aeabi_fsub+0xe0>
 8000852:	3304      	adds	r3, #4
 8000854:	0159      	lsls	r1, r3, #5
 8000856:	d550      	bpl.n	80008fa <__aeabi_fsub+0x186>
 8000858:	1c50      	adds	r0, r2, #1
 800085a:	2afe      	cmp	r2, #254	@ 0xfe
 800085c:	d045      	beq.n	80008ea <__aeabi_fsub+0x176>
 800085e:	019b      	lsls	r3, r3, #6
 8000860:	b2c0      	uxtb	r0, r0
 8000862:	0a5b      	lsrs	r3, r3, #9
 8000864:	05c0      	lsls	r0, r0, #23
 8000866:	4318      	orrs	r0, r3
 8000868:	07e4      	lsls	r4, r4, #31
 800086a:	4320      	orrs	r0, r4
 800086c:	bcc0      	pop	{r6, r7}
 800086e:	46b9      	mov	r9, r7
 8000870:	46b0      	mov	r8, r6
 8000872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000874:	2201      	movs	r2, #1
 8000876:	4051      	eors	r1, r2
 8000878:	428c      	cmp	r4, r1
 800087a:	d1ba      	bne.n	80007f2 <__aeabi_fsub+0x7e>
 800087c:	464a      	mov	r2, r9
 800087e:	2a00      	cmp	r2, #0
 8000880:	d010      	beq.n	80008a4 <__aeabi_fsub+0x130>
 8000882:	2d00      	cmp	r5, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fsub+0x114>
 8000886:	e098      	b.n	80009ba <__aeabi_fsub+0x246>
 8000888:	2300      	movs	r3, #0
 800088a:	e7bb      	b.n	8000804 <__aeabi_fsub+0x90>
 800088c:	2e00      	cmp	r6, #0
 800088e:	d034      	beq.n	80008fa <__aeabi_fsub+0x186>
 8000890:	1e51      	subs	r1, r2, #1
 8000892:	2a01      	cmp	r2, #1
 8000894:	d06e      	beq.n	8000974 <__aeabi_fsub+0x200>
 8000896:	2aff      	cmp	r2, #255	@ 0xff
 8000898:	d0b4      	beq.n	8000804 <__aeabi_fsub+0x90>
 800089a:	000a      	movs	r2, r1
 800089c:	e79c      	b.n	80007d8 <__aeabi_fsub+0x64>
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fsub+0x130>
 80008a2:	e088      	b.n	80009b6 <__aeabi_fsub+0x242>
 80008a4:	20fe      	movs	r0, #254	@ 0xfe
 80008a6:	1c6a      	adds	r2, r5, #1
 80008a8:	4210      	tst	r0, r2
 80008aa:	d000      	beq.n	80008ae <__aeabi_fsub+0x13a>
 80008ac:	e092      	b.n	80009d4 <__aeabi_fsub+0x260>
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fsub+0x140>
 80008b2:	e0a4      	b.n	80009fe <__aeabi_fsub+0x28a>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_fsub+0x146>
 80008b8:	e0cb      	b.n	8000a52 <__aeabi_fsub+0x2de>
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fsub+0x14c>
 80008be:	e0ca      	b.n	8000a56 <__aeabi_fsub+0x2e2>
 80008c0:	2200      	movs	r2, #0
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	0a5b      	lsrs	r3, r3, #9
 80008c8:	b2d0      	uxtb	r0, r2
 80008ca:	e7cb      	b.n	8000864 <__aeabi_fsub+0xf0>
 80008cc:	0031      	movs	r1, r6
 80008ce:	2020      	movs	r0, #32
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1a82      	subs	r2, r0, r2
 80008d4:	4096      	lsls	r6, r2
 80008d6:	0032      	movs	r2, r6
 80008d8:	1e50      	subs	r0, r2, #1
 80008da:	4182      	sbcs	r2, r0
 80008dc:	430a      	orrs	r2, r1
 80008de:	189b      	adds	r3, r3, r2
 80008e0:	015a      	lsls	r2, r3, #5
 80008e2:	d5ae      	bpl.n	8000842 <__aeabi_fsub+0xce>
 80008e4:	1c6a      	adds	r2, r5, #1
 80008e6:	2dfe      	cmp	r5, #254	@ 0xfe
 80008e8:	d14a      	bne.n	8000980 <__aeabi_fsub+0x20c>
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	2300      	movs	r3, #0
 80008ee:	e7b9      	b.n	8000864 <__aeabi_fsub+0xf0>
 80008f0:	22ff      	movs	r2, #255	@ 0xff
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d14b      	bne.n	800098e <__aeabi_fsub+0x21a>
 80008f6:	000c      	movs	r4, r1
 80008f8:	0033      	movs	r3, r6
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	2aff      	cmp	r2, #255	@ 0xff
 80008fe:	d100      	bne.n	8000902 <__aeabi_fsub+0x18e>
 8000900:	e781      	b.n	8000806 <__aeabi_fsub+0x92>
 8000902:	e7df      	b.n	80008c4 <__aeabi_fsub+0x150>
 8000904:	019f      	lsls	r7, r3, #6
 8000906:	09bf      	lsrs	r7, r7, #6
 8000908:	0038      	movs	r0, r7
 800090a:	f001 fffb 	bl	8002904 <__clzsi2>
 800090e:	3805      	subs	r0, #5
 8000910:	4087      	lsls	r7, r0
 8000912:	4285      	cmp	r5, r0
 8000914:	dc21      	bgt.n	800095a <__aeabi_fsub+0x1e6>
 8000916:	003b      	movs	r3, r7
 8000918:	2120      	movs	r1, #32
 800091a:	1b42      	subs	r2, r0, r5
 800091c:	3201      	adds	r2, #1
 800091e:	40d3      	lsrs	r3, r2
 8000920:	1a8a      	subs	r2, r1, r2
 8000922:	4097      	lsls	r7, r2
 8000924:	1e7a      	subs	r2, r7, #1
 8000926:	4197      	sbcs	r7, r2
 8000928:	2200      	movs	r2, #0
 800092a:	433b      	orrs	r3, r7
 800092c:	0759      	lsls	r1, r3, #29
 800092e:	d000      	beq.n	8000932 <__aeabi_fsub+0x1be>
 8000930:	e78b      	b.n	800084a <__aeabi_fsub+0xd6>
 8000932:	e78f      	b.n	8000854 <__aeabi_fsub+0xe0>
 8000934:	20fe      	movs	r0, #254	@ 0xfe
 8000936:	1c6a      	adds	r2, r5, #1
 8000938:	4210      	tst	r0, r2
 800093a:	d112      	bne.n	8000962 <__aeabi_fsub+0x1ee>
 800093c:	2d00      	cmp	r5, #0
 800093e:	d152      	bne.n	80009e6 <__aeabi_fsub+0x272>
 8000940:	2b00      	cmp	r3, #0
 8000942:	d07c      	beq.n	8000a3e <__aeabi_fsub+0x2ca>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0bb      	beq.n	80008c0 <__aeabi_fsub+0x14c>
 8000948:	1b9a      	subs	r2, r3, r6
 800094a:	0150      	lsls	r0, r2, #5
 800094c:	d400      	bmi.n	8000950 <__aeabi_fsub+0x1dc>
 800094e:	e08b      	b.n	8000a68 <__aeabi_fsub+0x2f4>
 8000950:	2401      	movs	r4, #1
 8000952:	2200      	movs	r2, #0
 8000954:	1af3      	subs	r3, r6, r3
 8000956:	400c      	ands	r4, r1
 8000958:	e7e8      	b.n	800092c <__aeabi_fsub+0x1b8>
 800095a:	4b56      	ldr	r3, [pc, #344]	@ (8000ab4 <__aeabi_fsub+0x340>)
 800095c:	1a2a      	subs	r2, r5, r0
 800095e:	403b      	ands	r3, r7
 8000960:	e7e4      	b.n	800092c <__aeabi_fsub+0x1b8>
 8000962:	1b9f      	subs	r7, r3, r6
 8000964:	017a      	lsls	r2, r7, #5
 8000966:	d446      	bmi.n	80009f6 <__aeabi_fsub+0x282>
 8000968:	2f00      	cmp	r7, #0
 800096a:	d1cd      	bne.n	8000908 <__aeabi_fsub+0x194>
 800096c:	2400      	movs	r4, #0
 800096e:	2000      	movs	r0, #0
 8000970:	2300      	movs	r3, #0
 8000972:	e777      	b.n	8000864 <__aeabi_fsub+0xf0>
 8000974:	199b      	adds	r3, r3, r6
 8000976:	2501      	movs	r5, #1
 8000978:	3201      	adds	r2, #1
 800097a:	0159      	lsls	r1, r3, #5
 800097c:	d400      	bmi.n	8000980 <__aeabi_fsub+0x20c>
 800097e:	e760      	b.n	8000842 <__aeabi_fsub+0xce>
 8000980:	2101      	movs	r1, #1
 8000982:	484d      	ldr	r0, [pc, #308]	@ (8000ab8 <__aeabi_fsub+0x344>)
 8000984:	4019      	ands	r1, r3
 8000986:	085b      	lsrs	r3, r3, #1
 8000988:	4003      	ands	r3, r0
 800098a:	430b      	orrs	r3, r1
 800098c:	e7ce      	b.n	800092c <__aeabi_fsub+0x1b8>
 800098e:	1e57      	subs	r7, r2, #1
 8000990:	2a01      	cmp	r2, #1
 8000992:	d05a      	beq.n	8000a4a <__aeabi_fsub+0x2d6>
 8000994:	000c      	movs	r4, r1
 8000996:	2aff      	cmp	r2, #255	@ 0xff
 8000998:	d033      	beq.n	8000a02 <__aeabi_fsub+0x28e>
 800099a:	2201      	movs	r2, #1
 800099c:	2f1b      	cmp	r7, #27
 800099e:	dc07      	bgt.n	80009b0 <__aeabi_fsub+0x23c>
 80009a0:	2120      	movs	r1, #32
 80009a2:	1bc9      	subs	r1, r1, r7
 80009a4:	001a      	movs	r2, r3
 80009a6:	408b      	lsls	r3, r1
 80009a8:	40fa      	lsrs	r2, r7
 80009aa:	1e59      	subs	r1, r3, #1
 80009ac:	418b      	sbcs	r3, r1
 80009ae:	431a      	orrs	r2, r3
 80009b0:	0005      	movs	r5, r0
 80009b2:	1ab3      	subs	r3, r6, r2
 80009b4:	e743      	b.n	800083e <__aeabi_fsub+0xca>
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d123      	bne.n	8000a02 <__aeabi_fsub+0x28e>
 80009ba:	22ff      	movs	r2, #255	@ 0xff
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d09b      	beq.n	80008f8 <__aeabi_fsub+0x184>
 80009c0:	1e51      	subs	r1, r2, #1
 80009c2:	2a01      	cmp	r2, #1
 80009c4:	d0d6      	beq.n	8000974 <__aeabi_fsub+0x200>
 80009c6:	2aff      	cmp	r2, #255	@ 0xff
 80009c8:	d01b      	beq.n	8000a02 <__aeabi_fsub+0x28e>
 80009ca:	291b      	cmp	r1, #27
 80009cc:	dd2c      	ble.n	8000a28 <__aeabi_fsub+0x2b4>
 80009ce:	0002      	movs	r2, r0
 80009d0:	1c73      	adds	r3, r6, #1
 80009d2:	e73a      	b.n	800084a <__aeabi_fsub+0xd6>
 80009d4:	2aff      	cmp	r2, #255	@ 0xff
 80009d6:	d088      	beq.n	80008ea <__aeabi_fsub+0x176>
 80009d8:	199b      	adds	r3, r3, r6
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	0759      	lsls	r1, r3, #29
 80009de:	d000      	beq.n	80009e2 <__aeabi_fsub+0x26e>
 80009e0:	e733      	b.n	800084a <__aeabi_fsub+0xd6>
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	e76e      	b.n	80008c4 <__aeabi_fsub+0x150>
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d110      	bne.n	8000a0c <__aeabi_fsub+0x298>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d043      	beq.n	8000a76 <__aeabi_fsub+0x302>
 80009ee:	2401      	movs	r4, #1
 80009f0:	0033      	movs	r3, r6
 80009f2:	400c      	ands	r4, r1
 80009f4:	e706      	b.n	8000804 <__aeabi_fsub+0x90>
 80009f6:	2401      	movs	r4, #1
 80009f8:	1af7      	subs	r7, r6, r3
 80009fa:	400c      	ands	r4, r1
 80009fc:	e784      	b.n	8000908 <__aeabi_fsub+0x194>
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d104      	bne.n	8000a0c <__aeabi_fsub+0x298>
 8000a02:	0033      	movs	r3, r6
 8000a04:	e6fe      	b.n	8000804 <__aeabi_fsub+0x90>
 8000a06:	2501      	movs	r5, #1
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	e718      	b.n	800083e <__aeabi_fsub+0xca>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fsub+0x29e>
 8000a10:	e6f8      	b.n	8000804 <__aeabi_fsub+0x90>
 8000a12:	2280      	movs	r2, #128	@ 0x80
 8000a14:	03d2      	lsls	r2, r2, #15
 8000a16:	4297      	cmp	r7, r2
 8000a18:	d304      	bcc.n	8000a24 <__aeabi_fsub+0x2b0>
 8000a1a:	4594      	cmp	ip, r2
 8000a1c:	d202      	bcs.n	8000a24 <__aeabi_fsub+0x2b0>
 8000a1e:	2401      	movs	r4, #1
 8000a20:	0033      	movs	r3, r6
 8000a22:	400c      	ands	r4, r1
 8000a24:	08db      	lsrs	r3, r3, #3
 8000a26:	e6f1      	b.n	800080c <__aeabi_fsub+0x98>
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2520      	movs	r5, #32
 8000a2c:	40ca      	lsrs	r2, r1
 8000a2e:	1a69      	subs	r1, r5, r1
 8000a30:	408b      	lsls	r3, r1
 8000a32:	1e59      	subs	r1, r3, #1
 8000a34:	418b      	sbcs	r3, r1
 8000a36:	4313      	orrs	r3, r2
 8000a38:	0005      	movs	r5, r0
 8000a3a:	199b      	adds	r3, r3, r6
 8000a3c:	e750      	b.n	80008e0 <__aeabi_fsub+0x16c>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d094      	beq.n	800096c <__aeabi_fsub+0x1f8>
 8000a42:	2401      	movs	r4, #1
 8000a44:	0033      	movs	r3, r6
 8000a46:	400c      	ands	r4, r1
 8000a48:	e73a      	b.n	80008c0 <__aeabi_fsub+0x14c>
 8000a4a:	000c      	movs	r4, r1
 8000a4c:	2501      	movs	r5, #1
 8000a4e:	1af3      	subs	r3, r6, r3
 8000a50:	e6f5      	b.n	800083e <__aeabi_fsub+0xca>
 8000a52:	0033      	movs	r3, r6
 8000a54:	e734      	b.n	80008c0 <__aeabi_fsub+0x14c>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	2200      	movs	r2, #0
 8000a5a:	0159      	lsls	r1, r3, #5
 8000a5c:	d5c1      	bpl.n	80009e2 <__aeabi_fsub+0x26e>
 8000a5e:	4a15      	ldr	r2, [pc, #84]	@ (8000ab4 <__aeabi_fsub+0x340>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	2201      	movs	r2, #1
 8000a66:	e72d      	b.n	80008c4 <__aeabi_fsub+0x150>
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fsub+0x2fa>
 8000a6c:	e77e      	b.n	800096c <__aeabi_fsub+0x1f8>
 8000a6e:	0013      	movs	r3, r2
 8000a70:	2200      	movs	r2, #0
 8000a72:	08db      	lsrs	r3, r3, #3
 8000a74:	e726      	b.n	80008c4 <__aeabi_fsub+0x150>
 8000a76:	2380      	movs	r3, #128	@ 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	20ff      	movs	r0, #255	@ 0xff
 8000a7c:	03db      	lsls	r3, r3, #15
 8000a7e:	e6f1      	b.n	8000864 <__aeabi_fsub+0xf0>
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	d100      	bne.n	8000a86 <__aeabi_fsub+0x312>
 8000a84:	e756      	b.n	8000934 <__aeabi_fsub+0x1c0>
 8000a86:	1b47      	subs	r7, r0, r5
 8000a88:	003a      	movs	r2, r7
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x31c>
 8000a8e:	e730      	b.n	80008f2 <__aeabi_fsub+0x17e>
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	04d2      	lsls	r2, r2, #19
 8000a94:	000c      	movs	r4, r1
 8000a96:	4313      	orrs	r3, r2
 8000a98:	e77f      	b.n	800099a <__aeabi_fsub+0x226>
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_fsub+0x32c>
 8000a9e:	e701      	b.n	80008a4 <__aeabi_fsub+0x130>
 8000aa0:	1b41      	subs	r1, r0, r5
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d101      	bne.n	8000aaa <__aeabi_fsub+0x336>
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	e788      	b.n	80009bc <__aeabi_fsub+0x248>
 8000aaa:	2280      	movs	r2, #128	@ 0x80
 8000aac:	04d2      	lsls	r2, r2, #19
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	e78b      	b.n	80009ca <__aeabi_fsub+0x256>
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	fbffffff 	.word	0xfbffffff
 8000ab8:	7dffffff 	.word	0x7dffffff

08000abc <__aeabi_ui2f>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	1e04      	subs	r4, r0, #0
 8000ac0:	d00e      	beq.n	8000ae0 <__aeabi_ui2f+0x24>
 8000ac2:	f001 ff1f 	bl	8002904 <__clzsi2>
 8000ac6:	239e      	movs	r3, #158	@ 0x9e
 8000ac8:	0001      	movs	r1, r0
 8000aca:	1a1b      	subs	r3, r3, r0
 8000acc:	2b96      	cmp	r3, #150	@ 0x96
 8000ace:	dc0c      	bgt.n	8000aea <__aeabi_ui2f+0x2e>
 8000ad0:	2808      	cmp	r0, #8
 8000ad2:	d02f      	beq.n	8000b34 <__aeabi_ui2f+0x78>
 8000ad4:	3908      	subs	r1, #8
 8000ad6:	408c      	lsls	r4, r1
 8000ad8:	0264      	lsls	r4, r4, #9
 8000ada:	0a64      	lsrs	r4, r4, #9
 8000adc:	b2d8      	uxtb	r0, r3
 8000ade:	e001      	b.n	8000ae4 <__aeabi_ui2f+0x28>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	05c0      	lsls	r0, r0, #23
 8000ae6:	4320      	orrs	r0, r4
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	2b99      	cmp	r3, #153	@ 0x99
 8000aec:	dc16      	bgt.n	8000b1c <__aeabi_ui2f+0x60>
 8000aee:	1f42      	subs	r2, r0, #5
 8000af0:	2805      	cmp	r0, #5
 8000af2:	d000      	beq.n	8000af6 <__aeabi_ui2f+0x3a>
 8000af4:	4094      	lsls	r4, r2
 8000af6:	0022      	movs	r2, r4
 8000af8:	4810      	ldr	r0, [pc, #64]	@ (8000b3c <__aeabi_ui2f+0x80>)
 8000afa:	4002      	ands	r2, r0
 8000afc:	0765      	lsls	r5, r4, #29
 8000afe:	d009      	beq.n	8000b14 <__aeabi_ui2f+0x58>
 8000b00:	250f      	movs	r5, #15
 8000b02:	402c      	ands	r4, r5
 8000b04:	2c04      	cmp	r4, #4
 8000b06:	d005      	beq.n	8000b14 <__aeabi_ui2f+0x58>
 8000b08:	3204      	adds	r2, #4
 8000b0a:	0154      	lsls	r4, r2, #5
 8000b0c:	d502      	bpl.n	8000b14 <__aeabi_ui2f+0x58>
 8000b0e:	239f      	movs	r3, #159	@ 0x9f
 8000b10:	4002      	ands	r2, r0
 8000b12:	1a5b      	subs	r3, r3, r1
 8000b14:	0192      	lsls	r2, r2, #6
 8000b16:	0a54      	lsrs	r4, r2, #9
 8000b18:	b2d8      	uxtb	r0, r3
 8000b1a:	e7e3      	b.n	8000ae4 <__aeabi_ui2f+0x28>
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	0020      	movs	r0, r4
 8000b20:	321b      	adds	r2, #27
 8000b22:	4090      	lsls	r0, r2
 8000b24:	0002      	movs	r2, r0
 8000b26:	1e50      	subs	r0, r2, #1
 8000b28:	4182      	sbcs	r2, r0
 8000b2a:	2005      	movs	r0, #5
 8000b2c:	1a40      	subs	r0, r0, r1
 8000b2e:	40c4      	lsrs	r4, r0
 8000b30:	4314      	orrs	r4, r2
 8000b32:	e7e0      	b.n	8000af6 <__aeabi_ui2f+0x3a>
 8000b34:	0264      	lsls	r4, r4, #9
 8000b36:	2096      	movs	r0, #150	@ 0x96
 8000b38:	0a64      	lsrs	r4, r4, #9
 8000b3a:	e7d3      	b.n	8000ae4 <__aeabi_ui2f+0x28>
 8000b3c:	fbffffff 	.word	0xfbffffff

08000b40 <__aeabi_dadd>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	4657      	mov	r7, sl
 8000b44:	464e      	mov	r6, r9
 8000b46:	4645      	mov	r5, r8
 8000b48:	46de      	mov	lr, fp
 8000b4a:	b5e0      	push	{r5, r6, r7, lr}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	9000      	str	r0, [sp, #0]
 8000b50:	9101      	str	r1, [sp, #4]
 8000b52:	030c      	lsls	r4, r1, #12
 8000b54:	004f      	lsls	r7, r1, #1
 8000b56:	0fce      	lsrs	r6, r1, #31
 8000b58:	0a61      	lsrs	r1, r4, #9
 8000b5a:	9c00      	ldr	r4, [sp, #0]
 8000b5c:	031d      	lsls	r5, r3, #12
 8000b5e:	0f64      	lsrs	r4, r4, #29
 8000b60:	430c      	orrs	r4, r1
 8000b62:	9900      	ldr	r1, [sp, #0]
 8000b64:	9200      	str	r2, [sp, #0]
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	00c8      	lsls	r0, r1, #3
 8000b6a:	0059      	lsls	r1, r3, #1
 8000b6c:	0d4b      	lsrs	r3, r1, #21
 8000b6e:	4699      	mov	r9, r3
 8000b70:	9a00      	ldr	r2, [sp, #0]
 8000b72:	9b01      	ldr	r3, [sp, #4]
 8000b74:	0a6d      	lsrs	r5, r5, #9
 8000b76:	0fd9      	lsrs	r1, r3, #31
 8000b78:	0f53      	lsrs	r3, r2, #29
 8000b7a:	432b      	orrs	r3, r5
 8000b7c:	469a      	mov	sl, r3
 8000b7e:	9b00      	ldr	r3, [sp, #0]
 8000b80:	0d7f      	lsrs	r7, r7, #21
 8000b82:	00da      	lsls	r2, r3, #3
 8000b84:	4694      	mov	ip, r2
 8000b86:	464a      	mov	r2, r9
 8000b88:	46b0      	mov	r8, r6
 8000b8a:	1aba      	subs	r2, r7, r2
 8000b8c:	428e      	cmp	r6, r1
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x52>
 8000b90:	e0b0      	b.n	8000cf4 <__aeabi_dadd+0x1b4>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	dc00      	bgt.n	8000b98 <__aeabi_dadd+0x58>
 8000b96:	e078      	b.n	8000c8a <__aeabi_dadd+0x14a>
 8000b98:	4649      	mov	r1, r9
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x60>
 8000b9e:	e0e9      	b.n	8000d74 <__aeabi_dadd+0x234>
 8000ba0:	49c9      	ldr	r1, [pc, #804]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000ba2:	428f      	cmp	r7, r1
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_dadd+0x68>
 8000ba6:	e195      	b.n	8000ed4 <__aeabi_dadd+0x394>
 8000ba8:	2501      	movs	r5, #1
 8000baa:	2a38      	cmp	r2, #56	@ 0x38
 8000bac:	dc16      	bgt.n	8000bdc <__aeabi_dadd+0x9c>
 8000bae:	2180      	movs	r1, #128	@ 0x80
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	0409      	lsls	r1, r1, #16
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	469a      	mov	sl, r3
 8000bb8:	2a1f      	cmp	r2, #31
 8000bba:	dd00      	ble.n	8000bbe <__aeabi_dadd+0x7e>
 8000bbc:	e1e7      	b.n	8000f8e <__aeabi_dadd+0x44e>
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	4655      	mov	r5, sl
 8000bc2:	1a8b      	subs	r3, r1, r2
 8000bc4:	4661      	mov	r1, ip
 8000bc6:	409d      	lsls	r5, r3
 8000bc8:	40d1      	lsrs	r1, r2
 8000bca:	430d      	orrs	r5, r1
 8000bcc:	4661      	mov	r1, ip
 8000bce:	4099      	lsls	r1, r3
 8000bd0:	1e4b      	subs	r3, r1, #1
 8000bd2:	4199      	sbcs	r1, r3
 8000bd4:	4653      	mov	r3, sl
 8000bd6:	40d3      	lsrs	r3, r2
 8000bd8:	430d      	orrs	r5, r1
 8000bda:	1ae4      	subs	r4, r4, r3
 8000bdc:	1b45      	subs	r5, r0, r5
 8000bde:	42a8      	cmp	r0, r5
 8000be0:	4180      	sbcs	r0, r0
 8000be2:	4240      	negs	r0, r0
 8000be4:	1a24      	subs	r4, r4, r0
 8000be6:	0223      	lsls	r3, r4, #8
 8000be8:	d400      	bmi.n	8000bec <__aeabi_dadd+0xac>
 8000bea:	e10f      	b.n	8000e0c <__aeabi_dadd+0x2cc>
 8000bec:	0264      	lsls	r4, r4, #9
 8000bee:	0a64      	lsrs	r4, r4, #9
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dadd+0xb6>
 8000bf4:	e139      	b.n	8000e6a <__aeabi_dadd+0x32a>
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	f001 fe84 	bl	8002904 <__clzsi2>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	3b08      	subs	r3, #8
 8000c00:	2120      	movs	r1, #32
 8000c02:	0028      	movs	r0, r5
 8000c04:	1aca      	subs	r2, r1, r3
 8000c06:	40d0      	lsrs	r0, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	0002      	movs	r2, r0
 8000c0c:	409d      	lsls	r5, r3
 8000c0e:	4322      	orrs	r2, r4
 8000c10:	429f      	cmp	r7, r3
 8000c12:	dd00      	ble.n	8000c16 <__aeabi_dadd+0xd6>
 8000c14:	e173      	b.n	8000efe <__aeabi_dadd+0x3be>
 8000c16:	1bd8      	subs	r0, r3, r7
 8000c18:	3001      	adds	r0, #1
 8000c1a:	1a09      	subs	r1, r1, r0
 8000c1c:	002c      	movs	r4, r5
 8000c1e:	408d      	lsls	r5, r1
 8000c20:	40c4      	lsrs	r4, r0
 8000c22:	1e6b      	subs	r3, r5, #1
 8000c24:	419d      	sbcs	r5, r3
 8000c26:	0013      	movs	r3, r2
 8000c28:	40c2      	lsrs	r2, r0
 8000c2a:	408b      	lsls	r3, r1
 8000c2c:	4325      	orrs	r5, r4
 8000c2e:	2700      	movs	r7, #0
 8000c30:	0014      	movs	r4, r2
 8000c32:	431d      	orrs	r5, r3
 8000c34:	076b      	lsls	r3, r5, #29
 8000c36:	d009      	beq.n	8000c4c <__aeabi_dadd+0x10c>
 8000c38:	230f      	movs	r3, #15
 8000c3a:	402b      	ands	r3, r5
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d005      	beq.n	8000c4c <__aeabi_dadd+0x10c>
 8000c40:	1d2b      	adds	r3, r5, #4
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	41ad      	sbcs	r5, r5
 8000c46:	426d      	negs	r5, r5
 8000c48:	1964      	adds	r4, r4, r5
 8000c4a:	001d      	movs	r5, r3
 8000c4c:	0223      	lsls	r3, r4, #8
 8000c4e:	d400      	bmi.n	8000c52 <__aeabi_dadd+0x112>
 8000c50:	e12d      	b.n	8000eae <__aeabi_dadd+0x36e>
 8000c52:	4a9d      	ldr	r2, [pc, #628]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000c54:	3701      	adds	r7, #1
 8000c56:	4297      	cmp	r7, r2
 8000c58:	d100      	bne.n	8000c5c <__aeabi_dadd+0x11c>
 8000c5a:	e0d3      	b.n	8000e04 <__aeabi_dadd+0x2c4>
 8000c5c:	4646      	mov	r6, r8
 8000c5e:	499b      	ldr	r1, [pc, #620]	@ (8000ecc <__aeabi_dadd+0x38c>)
 8000c60:	08ed      	lsrs	r5, r5, #3
 8000c62:	4021      	ands	r1, r4
 8000c64:	074a      	lsls	r2, r1, #29
 8000c66:	432a      	orrs	r2, r5
 8000c68:	057c      	lsls	r4, r7, #21
 8000c6a:	024d      	lsls	r5, r1, #9
 8000c6c:	0b2d      	lsrs	r5, r5, #12
 8000c6e:	0d64      	lsrs	r4, r4, #21
 8000c70:	0524      	lsls	r4, r4, #20
 8000c72:	432c      	orrs	r4, r5
 8000c74:	07f6      	lsls	r6, r6, #31
 8000c76:	4334      	orrs	r4, r6
 8000c78:	0010      	movs	r0, r2
 8000c7a:	0021      	movs	r1, r4
 8000c7c:	b003      	add	sp, #12
 8000c7e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c80:	46bb      	mov	fp, r7
 8000c82:	46b2      	mov	sl, r6
 8000c84:	46a9      	mov	r9, r5
 8000c86:	46a0      	mov	r8, r4
 8000c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x150>
 8000c8e:	e084      	b.n	8000d9a <__aeabi_dadd+0x25a>
 8000c90:	464a      	mov	r2, r9
 8000c92:	1bd2      	subs	r2, r2, r7
 8000c94:	2f00      	cmp	r7, #0
 8000c96:	d000      	beq.n	8000c9a <__aeabi_dadd+0x15a>
 8000c98:	e16d      	b.n	8000f76 <__aeabi_dadd+0x436>
 8000c9a:	0025      	movs	r5, r4
 8000c9c:	4305      	orrs	r5, r0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x162>
 8000ca0:	e127      	b.n	8000ef2 <__aeabi_dadd+0x3b2>
 8000ca2:	1e56      	subs	r6, r2, #1
 8000ca4:	2a01      	cmp	r2, #1
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dadd+0x16a>
 8000ca8:	e23b      	b.n	8001122 <__aeabi_dadd+0x5e2>
 8000caa:	4d87      	ldr	r5, [pc, #540]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000cac:	42aa      	cmp	r2, r5
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dadd+0x172>
 8000cb0:	e26a      	b.n	8001188 <__aeabi_dadd+0x648>
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	2e38      	cmp	r6, #56	@ 0x38
 8000cb6:	dc12      	bgt.n	8000cde <__aeabi_dadd+0x19e>
 8000cb8:	0032      	movs	r2, r6
 8000cba:	2a1f      	cmp	r2, #31
 8000cbc:	dd00      	ble.n	8000cc0 <__aeabi_dadd+0x180>
 8000cbe:	e1f8      	b.n	80010b2 <__aeabi_dadd+0x572>
 8000cc0:	2620      	movs	r6, #32
 8000cc2:	0025      	movs	r5, r4
 8000cc4:	1ab6      	subs	r6, r6, r2
 8000cc6:	0007      	movs	r7, r0
 8000cc8:	4653      	mov	r3, sl
 8000cca:	40b0      	lsls	r0, r6
 8000ccc:	40d4      	lsrs	r4, r2
 8000cce:	40b5      	lsls	r5, r6
 8000cd0:	40d7      	lsrs	r7, r2
 8000cd2:	1e46      	subs	r6, r0, #1
 8000cd4:	41b0      	sbcs	r0, r6
 8000cd6:	1b1b      	subs	r3, r3, r4
 8000cd8:	469a      	mov	sl, r3
 8000cda:	433d      	orrs	r5, r7
 8000cdc:	4305      	orrs	r5, r0
 8000cde:	4662      	mov	r2, ip
 8000ce0:	1b55      	subs	r5, r2, r5
 8000ce2:	45ac      	cmp	ip, r5
 8000ce4:	4192      	sbcs	r2, r2
 8000ce6:	4653      	mov	r3, sl
 8000ce8:	4252      	negs	r2, r2
 8000cea:	000e      	movs	r6, r1
 8000cec:	464f      	mov	r7, r9
 8000cee:	4688      	mov	r8, r1
 8000cf0:	1a9c      	subs	r4, r3, r2
 8000cf2:	e778      	b.n	8000be6 <__aeabi_dadd+0xa6>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_dadd+0x1ba>
 8000cf8:	e08e      	b.n	8000e18 <__aeabi_dadd+0x2d8>
 8000cfa:	4649      	mov	r1, r9
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	d175      	bne.n	8000dec <__aeabi_dadd+0x2ac>
 8000d00:	4661      	mov	r1, ip
 8000d02:	4653      	mov	r3, sl
 8000d04:	4319      	orrs	r1, r3
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dadd+0x1ca>
 8000d08:	e0f6      	b.n	8000ef8 <__aeabi_dadd+0x3b8>
 8000d0a:	1e51      	subs	r1, r2, #1
 8000d0c:	2a01      	cmp	r2, #1
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x1d2>
 8000d10:	e191      	b.n	8001036 <__aeabi_dadd+0x4f6>
 8000d12:	4d6d      	ldr	r5, [pc, #436]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000d14:	42aa      	cmp	r2, r5
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x1da>
 8000d18:	e0dc      	b.n	8000ed4 <__aeabi_dadd+0x394>
 8000d1a:	2501      	movs	r5, #1
 8000d1c:	2938      	cmp	r1, #56	@ 0x38
 8000d1e:	dc14      	bgt.n	8000d4a <__aeabi_dadd+0x20a>
 8000d20:	000a      	movs	r2, r1
 8000d22:	2a1f      	cmp	r2, #31
 8000d24:	dd00      	ble.n	8000d28 <__aeabi_dadd+0x1e8>
 8000d26:	e1a2      	b.n	800106e <__aeabi_dadd+0x52e>
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4653      	mov	r3, sl
 8000d2c:	1a89      	subs	r1, r1, r2
 8000d2e:	408b      	lsls	r3, r1
 8000d30:	001d      	movs	r5, r3
 8000d32:	4663      	mov	r3, ip
 8000d34:	40d3      	lsrs	r3, r2
 8000d36:	431d      	orrs	r5, r3
 8000d38:	4663      	mov	r3, ip
 8000d3a:	408b      	lsls	r3, r1
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	1e4b      	subs	r3, r1, #1
 8000d40:	4199      	sbcs	r1, r3
 8000d42:	4653      	mov	r3, sl
 8000d44:	40d3      	lsrs	r3, r2
 8000d46:	430d      	orrs	r5, r1
 8000d48:	18e4      	adds	r4, r4, r3
 8000d4a:	182d      	adds	r5, r5, r0
 8000d4c:	4285      	cmp	r5, r0
 8000d4e:	4180      	sbcs	r0, r0
 8000d50:	4240      	negs	r0, r0
 8000d52:	1824      	adds	r4, r4, r0
 8000d54:	0223      	lsls	r3, r4, #8
 8000d56:	d559      	bpl.n	8000e0c <__aeabi_dadd+0x2cc>
 8000d58:	4b5b      	ldr	r3, [pc, #364]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000d5a:	3701      	adds	r7, #1
 8000d5c:	429f      	cmp	r7, r3
 8000d5e:	d051      	beq.n	8000e04 <__aeabi_dadd+0x2c4>
 8000d60:	2101      	movs	r1, #1
 8000d62:	4b5a      	ldr	r3, [pc, #360]	@ (8000ecc <__aeabi_dadd+0x38c>)
 8000d64:	086a      	lsrs	r2, r5, #1
 8000d66:	401c      	ands	r4, r3
 8000d68:	4029      	ands	r1, r5
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	07e5      	lsls	r5, r4, #31
 8000d6e:	4315      	orrs	r5, r2
 8000d70:	0864      	lsrs	r4, r4, #1
 8000d72:	e75f      	b.n	8000c34 <__aeabi_dadd+0xf4>
 8000d74:	4661      	mov	r1, ip
 8000d76:	4653      	mov	r3, sl
 8000d78:	4319      	orrs	r1, r3
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_dadd+0x23e>
 8000d7c:	e0bc      	b.n	8000ef8 <__aeabi_dadd+0x3b8>
 8000d7e:	1e51      	subs	r1, r2, #1
 8000d80:	2a01      	cmp	r2, #1
 8000d82:	d100      	bne.n	8000d86 <__aeabi_dadd+0x246>
 8000d84:	e164      	b.n	8001050 <__aeabi_dadd+0x510>
 8000d86:	4d50      	ldr	r5, [pc, #320]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000d88:	42aa      	cmp	r2, r5
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dadd+0x24e>
 8000d8c:	e16a      	b.n	8001064 <__aeabi_dadd+0x524>
 8000d8e:	2501      	movs	r5, #1
 8000d90:	2938      	cmp	r1, #56	@ 0x38
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_dadd+0x256>
 8000d94:	e722      	b.n	8000bdc <__aeabi_dadd+0x9c>
 8000d96:	000a      	movs	r2, r1
 8000d98:	e70e      	b.n	8000bb8 <__aeabi_dadd+0x78>
 8000d9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000ed0 <__aeabi_dadd+0x390>)
 8000d9c:	1c7d      	adds	r5, r7, #1
 8000d9e:	4215      	tst	r5, r2
 8000da0:	d000      	beq.n	8000da4 <__aeabi_dadd+0x264>
 8000da2:	e0d0      	b.n	8000f46 <__aeabi_dadd+0x406>
 8000da4:	0025      	movs	r5, r4
 8000da6:	4662      	mov	r2, ip
 8000da8:	4653      	mov	r3, sl
 8000daa:	4305      	orrs	r5, r0
 8000dac:	431a      	orrs	r2, r3
 8000dae:	2f00      	cmp	r7, #0
 8000db0:	d000      	beq.n	8000db4 <__aeabi_dadd+0x274>
 8000db2:	e137      	b.n	8001024 <__aeabi_dadd+0x4e4>
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_dadd+0x27a>
 8000db8:	e1a8      	b.n	800110c <__aeabi_dadd+0x5cc>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x280>
 8000dbe:	e16a      	b.n	8001096 <__aeabi_dadd+0x556>
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	1ac5      	subs	r5, r0, r3
 8000dc4:	4653      	mov	r3, sl
 8000dc6:	1ae2      	subs	r2, r4, r3
 8000dc8:	42a8      	cmp	r0, r5
 8000dca:	419b      	sbcs	r3, r3
 8000dcc:	425b      	negs	r3, r3
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	021a      	lsls	r2, r3, #8
 8000dd2:	d400      	bmi.n	8000dd6 <__aeabi_dadd+0x296>
 8000dd4:	e203      	b.n	80011de <__aeabi_dadd+0x69e>
 8000dd6:	4663      	mov	r3, ip
 8000dd8:	1a1d      	subs	r5, r3, r0
 8000dda:	45ac      	cmp	ip, r5
 8000ddc:	4192      	sbcs	r2, r2
 8000dde:	4653      	mov	r3, sl
 8000de0:	4252      	negs	r2, r2
 8000de2:	1b1c      	subs	r4, r3, r4
 8000de4:	000e      	movs	r6, r1
 8000de6:	4688      	mov	r8, r1
 8000de8:	1aa4      	subs	r4, r4, r2
 8000dea:	e723      	b.n	8000c34 <__aeabi_dadd+0xf4>
 8000dec:	4936      	ldr	r1, [pc, #216]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000dee:	428f      	cmp	r7, r1
 8000df0:	d070      	beq.n	8000ed4 <__aeabi_dadd+0x394>
 8000df2:	2501      	movs	r5, #1
 8000df4:	2a38      	cmp	r2, #56	@ 0x38
 8000df6:	dca8      	bgt.n	8000d4a <__aeabi_dadd+0x20a>
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	4653      	mov	r3, sl
 8000dfc:	0409      	lsls	r1, r1, #16
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	469a      	mov	sl, r3
 8000e02:	e78e      	b.n	8000d22 <__aeabi_dadd+0x1e2>
 8000e04:	003c      	movs	r4, r7
 8000e06:	2500      	movs	r5, #0
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e731      	b.n	8000c70 <__aeabi_dadd+0x130>
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	402b      	ands	r3, r5
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d000      	beq.n	8000e16 <__aeabi_dadd+0x2d6>
 8000e14:	e710      	b.n	8000c38 <__aeabi_dadd+0xf8>
 8000e16:	e093      	b.n	8000f40 <__aeabi_dadd+0x400>
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d074      	beq.n	8000f06 <__aeabi_dadd+0x3c6>
 8000e1c:	464a      	mov	r2, r9
 8000e1e:	1bd2      	subs	r2, r2, r7
 8000e20:	2f00      	cmp	r7, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dadd+0x2e6>
 8000e24:	e0c7      	b.n	8000fb6 <__aeabi_dadd+0x476>
 8000e26:	4928      	ldr	r1, [pc, #160]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000e28:	4589      	cmp	r9, r1
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0x2ee>
 8000e2c:	e185      	b.n	800113a <__aeabi_dadd+0x5fa>
 8000e2e:	2501      	movs	r5, #1
 8000e30:	2a38      	cmp	r2, #56	@ 0x38
 8000e32:	dc12      	bgt.n	8000e5a <__aeabi_dadd+0x31a>
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	0409      	lsls	r1, r1, #16
 8000e38:	430c      	orrs	r4, r1
 8000e3a:	2a1f      	cmp	r2, #31
 8000e3c:	dd00      	ble.n	8000e40 <__aeabi_dadd+0x300>
 8000e3e:	e1ab      	b.n	8001198 <__aeabi_dadd+0x658>
 8000e40:	2120      	movs	r1, #32
 8000e42:	0025      	movs	r5, r4
 8000e44:	1a89      	subs	r1, r1, r2
 8000e46:	0007      	movs	r7, r0
 8000e48:	4088      	lsls	r0, r1
 8000e4a:	408d      	lsls	r5, r1
 8000e4c:	40d7      	lsrs	r7, r2
 8000e4e:	1e41      	subs	r1, r0, #1
 8000e50:	4188      	sbcs	r0, r1
 8000e52:	40d4      	lsrs	r4, r2
 8000e54:	433d      	orrs	r5, r7
 8000e56:	4305      	orrs	r5, r0
 8000e58:	44a2      	add	sl, r4
 8000e5a:	4465      	add	r5, ip
 8000e5c:	4565      	cmp	r5, ip
 8000e5e:	4192      	sbcs	r2, r2
 8000e60:	4252      	negs	r2, r2
 8000e62:	4452      	add	r2, sl
 8000e64:	0014      	movs	r4, r2
 8000e66:	464f      	mov	r7, r9
 8000e68:	e774      	b.n	8000d54 <__aeabi_dadd+0x214>
 8000e6a:	0028      	movs	r0, r5
 8000e6c:	f001 fd4a 	bl	8002904 <__clzsi2>
 8000e70:	0003      	movs	r3, r0
 8000e72:	3318      	adds	r3, #24
 8000e74:	2b1f      	cmp	r3, #31
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_dadd+0x33a>
 8000e78:	e6c2      	b.n	8000c00 <__aeabi_dadd+0xc0>
 8000e7a:	002a      	movs	r2, r5
 8000e7c:	3808      	subs	r0, #8
 8000e7e:	4082      	lsls	r2, r0
 8000e80:	429f      	cmp	r7, r3
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_dadd+0x346>
 8000e84:	e0a9      	b.n	8000fda <__aeabi_dadd+0x49a>
 8000e86:	1bdb      	subs	r3, r3, r7
 8000e88:	1c58      	adds	r0, r3, #1
 8000e8a:	281f      	cmp	r0, #31
 8000e8c:	dc00      	bgt.n	8000e90 <__aeabi_dadd+0x350>
 8000e8e:	e1ac      	b.n	80011ea <__aeabi_dadd+0x6aa>
 8000e90:	0015      	movs	r5, r2
 8000e92:	3b1f      	subs	r3, #31
 8000e94:	40dd      	lsrs	r5, r3
 8000e96:	2820      	cmp	r0, #32
 8000e98:	d005      	beq.n	8000ea6 <__aeabi_dadd+0x366>
 8000e9a:	2340      	movs	r3, #64	@ 0x40
 8000e9c:	1a1b      	subs	r3, r3, r0
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	1e53      	subs	r3, r2, #1
 8000ea2:	419a      	sbcs	r2, r3
 8000ea4:	4315      	orrs	r5, r2
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	402b      	ands	r3, r5
 8000eac:	e7b0      	b.n	8000e10 <__aeabi_dadd+0x2d0>
 8000eae:	08ed      	lsrs	r5, r5, #3
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <__aeabi_dadd+0x388>)
 8000eb2:	0762      	lsls	r2, r4, #29
 8000eb4:	432a      	orrs	r2, r5
 8000eb6:	08e4      	lsrs	r4, r4, #3
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	d00f      	beq.n	8000edc <__aeabi_dadd+0x39c>
 8000ebc:	0324      	lsls	r4, r4, #12
 8000ebe:	0b25      	lsrs	r5, r4, #12
 8000ec0:	057c      	lsls	r4, r7, #21
 8000ec2:	0d64      	lsrs	r4, r4, #21
 8000ec4:	e6d4      	b.n	8000c70 <__aeabi_dadd+0x130>
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	ff7fffff 	.word	0xff7fffff
 8000ed0:	000007fe 	.word	0x000007fe
 8000ed4:	08c0      	lsrs	r0, r0, #3
 8000ed6:	0762      	lsls	r2, r4, #29
 8000ed8:	4302      	orrs	r2, r0
 8000eda:	08e4      	lsrs	r4, r4, #3
 8000edc:	0013      	movs	r3, r2
 8000ede:	4323      	orrs	r3, r4
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x3a4>
 8000ee2:	e186      	b.n	80011f2 <__aeabi_dadd+0x6b2>
 8000ee4:	2580      	movs	r5, #128	@ 0x80
 8000ee6:	032d      	lsls	r5, r5, #12
 8000ee8:	4325      	orrs	r5, r4
 8000eea:	032d      	lsls	r5, r5, #12
 8000eec:	4cc3      	ldr	r4, [pc, #780]	@ (80011fc <__aeabi_dadd+0x6bc>)
 8000eee:	0b2d      	lsrs	r5, r5, #12
 8000ef0:	e6be      	b.n	8000c70 <__aeabi_dadd+0x130>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	4654      	mov	r4, sl
 8000ef6:	000e      	movs	r6, r1
 8000ef8:	0017      	movs	r7, r2
 8000efa:	08c5      	lsrs	r5, r0, #3
 8000efc:	e7d8      	b.n	8000eb0 <__aeabi_dadd+0x370>
 8000efe:	4cc0      	ldr	r4, [pc, #768]	@ (8001200 <__aeabi_dadd+0x6c0>)
 8000f00:	1aff      	subs	r7, r7, r3
 8000f02:	4014      	ands	r4, r2
 8000f04:	e696      	b.n	8000c34 <__aeabi_dadd+0xf4>
 8000f06:	4abf      	ldr	r2, [pc, #764]	@ (8001204 <__aeabi_dadd+0x6c4>)
 8000f08:	1c79      	adds	r1, r7, #1
 8000f0a:	4211      	tst	r1, r2
 8000f0c:	d16b      	bne.n	8000fe6 <__aeabi_dadd+0x4a6>
 8000f0e:	0022      	movs	r2, r4
 8000f10:	4302      	orrs	r2, r0
 8000f12:	2f00      	cmp	r7, #0
 8000f14:	d000      	beq.n	8000f18 <__aeabi_dadd+0x3d8>
 8000f16:	e0db      	b.n	80010d0 <__aeabi_dadd+0x590>
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_dadd+0x3de>
 8000f1c:	e12d      	b.n	800117a <__aeabi_dadd+0x63a>
 8000f1e:	4662      	mov	r2, ip
 8000f20:	4653      	mov	r3, sl
 8000f22:	431a      	orrs	r2, r3
 8000f24:	d100      	bne.n	8000f28 <__aeabi_dadd+0x3e8>
 8000f26:	e0b6      	b.n	8001096 <__aeabi_dadd+0x556>
 8000f28:	4663      	mov	r3, ip
 8000f2a:	18c5      	adds	r5, r0, r3
 8000f2c:	4285      	cmp	r5, r0
 8000f2e:	4180      	sbcs	r0, r0
 8000f30:	4454      	add	r4, sl
 8000f32:	4240      	negs	r0, r0
 8000f34:	1824      	adds	r4, r4, r0
 8000f36:	0223      	lsls	r3, r4, #8
 8000f38:	d502      	bpl.n	8000f40 <__aeabi_dadd+0x400>
 8000f3a:	000f      	movs	r7, r1
 8000f3c:	4bb0      	ldr	r3, [pc, #704]	@ (8001200 <__aeabi_dadd+0x6c0>)
 8000f3e:	401c      	ands	r4, r3
 8000f40:	003a      	movs	r2, r7
 8000f42:	0028      	movs	r0, r5
 8000f44:	e7d8      	b.n	8000ef8 <__aeabi_dadd+0x3b8>
 8000f46:	4662      	mov	r2, ip
 8000f48:	1a85      	subs	r5, r0, r2
 8000f4a:	42a8      	cmp	r0, r5
 8000f4c:	4192      	sbcs	r2, r2
 8000f4e:	4653      	mov	r3, sl
 8000f50:	4252      	negs	r2, r2
 8000f52:	4691      	mov	r9, r2
 8000f54:	1ae3      	subs	r3, r4, r3
 8000f56:	001a      	movs	r2, r3
 8000f58:	464b      	mov	r3, r9
 8000f5a:	1ad2      	subs	r2, r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	4691      	mov	r9, r2
 8000f60:	021a      	lsls	r2, r3, #8
 8000f62:	d454      	bmi.n	800100e <__aeabi_dadd+0x4ce>
 8000f64:	464a      	mov	r2, r9
 8000f66:	464c      	mov	r4, r9
 8000f68:	432a      	orrs	r2, r5
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_dadd+0x42e>
 8000f6c:	e640      	b.n	8000bf0 <__aeabi_dadd+0xb0>
 8000f6e:	2600      	movs	r6, #0
 8000f70:	2400      	movs	r4, #0
 8000f72:	2500      	movs	r5, #0
 8000f74:	e67c      	b.n	8000c70 <__aeabi_dadd+0x130>
 8000f76:	4da1      	ldr	r5, [pc, #644]	@ (80011fc <__aeabi_dadd+0x6bc>)
 8000f78:	45a9      	cmp	r9, r5
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_dadd+0x43e>
 8000f7c:	e090      	b.n	80010a0 <__aeabi_dadd+0x560>
 8000f7e:	2501      	movs	r5, #1
 8000f80:	2a38      	cmp	r2, #56	@ 0x38
 8000f82:	dd00      	ble.n	8000f86 <__aeabi_dadd+0x446>
 8000f84:	e6ab      	b.n	8000cde <__aeabi_dadd+0x19e>
 8000f86:	2580      	movs	r5, #128	@ 0x80
 8000f88:	042d      	lsls	r5, r5, #16
 8000f8a:	432c      	orrs	r4, r5
 8000f8c:	e695      	b.n	8000cba <__aeabi_dadd+0x17a>
 8000f8e:	0011      	movs	r1, r2
 8000f90:	4655      	mov	r5, sl
 8000f92:	3920      	subs	r1, #32
 8000f94:	40cd      	lsrs	r5, r1
 8000f96:	46a9      	mov	r9, r5
 8000f98:	2a20      	cmp	r2, #32
 8000f9a:	d006      	beq.n	8000faa <__aeabi_dadd+0x46a>
 8000f9c:	2140      	movs	r1, #64	@ 0x40
 8000f9e:	4653      	mov	r3, sl
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	4662      	mov	r2, ip
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	4694      	mov	ip, r2
 8000faa:	4665      	mov	r5, ip
 8000fac:	1e6b      	subs	r3, r5, #1
 8000fae:	419d      	sbcs	r5, r3
 8000fb0:	464b      	mov	r3, r9
 8000fb2:	431d      	orrs	r5, r3
 8000fb4:	e612      	b.n	8000bdc <__aeabi_dadd+0x9c>
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	4301      	orrs	r1, r0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dadd+0x47e>
 8000fbc:	e0c4      	b.n	8001148 <__aeabi_dadd+0x608>
 8000fbe:	1e51      	subs	r1, r2, #1
 8000fc0:	2a01      	cmp	r2, #1
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_dadd+0x486>
 8000fc4:	e0fb      	b.n	80011be <__aeabi_dadd+0x67e>
 8000fc6:	4d8d      	ldr	r5, [pc, #564]	@ (80011fc <__aeabi_dadd+0x6bc>)
 8000fc8:	42aa      	cmp	r2, r5
 8000fca:	d100      	bne.n	8000fce <__aeabi_dadd+0x48e>
 8000fcc:	e0b5      	b.n	800113a <__aeabi_dadd+0x5fa>
 8000fce:	2501      	movs	r5, #1
 8000fd0:	2938      	cmp	r1, #56	@ 0x38
 8000fd2:	dd00      	ble.n	8000fd6 <__aeabi_dadd+0x496>
 8000fd4:	e741      	b.n	8000e5a <__aeabi_dadd+0x31a>
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	e72f      	b.n	8000e3a <__aeabi_dadd+0x2fa>
 8000fda:	4c89      	ldr	r4, [pc, #548]	@ (8001200 <__aeabi_dadd+0x6c0>)
 8000fdc:	1aff      	subs	r7, r7, r3
 8000fde:	4014      	ands	r4, r2
 8000fe0:	0762      	lsls	r2, r4, #29
 8000fe2:	08e4      	lsrs	r4, r4, #3
 8000fe4:	e76a      	b.n	8000ebc <__aeabi_dadd+0x37c>
 8000fe6:	4a85      	ldr	r2, [pc, #532]	@ (80011fc <__aeabi_dadd+0x6bc>)
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d100      	bne.n	8000fee <__aeabi_dadd+0x4ae>
 8000fec:	e0e3      	b.n	80011b6 <__aeabi_dadd+0x676>
 8000fee:	4663      	mov	r3, ip
 8000ff0:	18c2      	adds	r2, r0, r3
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	4180      	sbcs	r0, r0
 8000ff6:	0023      	movs	r3, r4
 8000ff8:	4240      	negs	r0, r0
 8000ffa:	4453      	add	r3, sl
 8000ffc:	181b      	adds	r3, r3, r0
 8000ffe:	07dd      	lsls	r5, r3, #31
 8001000:	085c      	lsrs	r4, r3, #1
 8001002:	2307      	movs	r3, #7
 8001004:	0852      	lsrs	r2, r2, #1
 8001006:	4315      	orrs	r5, r2
 8001008:	000f      	movs	r7, r1
 800100a:	402b      	ands	r3, r5
 800100c:	e700      	b.n	8000e10 <__aeabi_dadd+0x2d0>
 800100e:	4663      	mov	r3, ip
 8001010:	1a1d      	subs	r5, r3, r0
 8001012:	45ac      	cmp	ip, r5
 8001014:	4192      	sbcs	r2, r2
 8001016:	4653      	mov	r3, sl
 8001018:	4252      	negs	r2, r2
 800101a:	1b1c      	subs	r4, r3, r4
 800101c:	000e      	movs	r6, r1
 800101e:	4688      	mov	r8, r1
 8001020:	1aa4      	subs	r4, r4, r2
 8001022:	e5e5      	b.n	8000bf0 <__aeabi_dadd+0xb0>
 8001024:	2d00      	cmp	r5, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x4ea>
 8001028:	e091      	b.n	800114e <__aeabi_dadd+0x60e>
 800102a:	2a00      	cmp	r2, #0
 800102c:	d138      	bne.n	80010a0 <__aeabi_dadd+0x560>
 800102e:	2480      	movs	r4, #128	@ 0x80
 8001030:	2600      	movs	r6, #0
 8001032:	0324      	lsls	r4, r4, #12
 8001034:	e756      	b.n	8000ee4 <__aeabi_dadd+0x3a4>
 8001036:	4663      	mov	r3, ip
 8001038:	18c5      	adds	r5, r0, r3
 800103a:	4285      	cmp	r5, r0
 800103c:	4180      	sbcs	r0, r0
 800103e:	4454      	add	r4, sl
 8001040:	4240      	negs	r0, r0
 8001042:	1824      	adds	r4, r4, r0
 8001044:	2701      	movs	r7, #1
 8001046:	0223      	lsls	r3, r4, #8
 8001048:	d400      	bmi.n	800104c <__aeabi_dadd+0x50c>
 800104a:	e6df      	b.n	8000e0c <__aeabi_dadd+0x2cc>
 800104c:	2702      	movs	r7, #2
 800104e:	e687      	b.n	8000d60 <__aeabi_dadd+0x220>
 8001050:	4663      	mov	r3, ip
 8001052:	1ac5      	subs	r5, r0, r3
 8001054:	42a8      	cmp	r0, r5
 8001056:	4180      	sbcs	r0, r0
 8001058:	4653      	mov	r3, sl
 800105a:	4240      	negs	r0, r0
 800105c:	1ae4      	subs	r4, r4, r3
 800105e:	2701      	movs	r7, #1
 8001060:	1a24      	subs	r4, r4, r0
 8001062:	e5c0      	b.n	8000be6 <__aeabi_dadd+0xa6>
 8001064:	0762      	lsls	r2, r4, #29
 8001066:	08c0      	lsrs	r0, r0, #3
 8001068:	4302      	orrs	r2, r0
 800106a:	08e4      	lsrs	r4, r4, #3
 800106c:	e736      	b.n	8000edc <__aeabi_dadd+0x39c>
 800106e:	0011      	movs	r1, r2
 8001070:	4653      	mov	r3, sl
 8001072:	3920      	subs	r1, #32
 8001074:	40cb      	lsrs	r3, r1
 8001076:	4699      	mov	r9, r3
 8001078:	2a20      	cmp	r2, #32
 800107a:	d006      	beq.n	800108a <__aeabi_dadd+0x54a>
 800107c:	2140      	movs	r1, #64	@ 0x40
 800107e:	4653      	mov	r3, sl
 8001080:	1a8a      	subs	r2, r1, r2
 8001082:	4093      	lsls	r3, r2
 8001084:	4662      	mov	r2, ip
 8001086:	431a      	orrs	r2, r3
 8001088:	4694      	mov	ip, r2
 800108a:	4665      	mov	r5, ip
 800108c:	1e6b      	subs	r3, r5, #1
 800108e:	419d      	sbcs	r5, r3
 8001090:	464b      	mov	r3, r9
 8001092:	431d      	orrs	r5, r3
 8001094:	e659      	b.n	8000d4a <__aeabi_dadd+0x20a>
 8001096:	0762      	lsls	r2, r4, #29
 8001098:	08c0      	lsrs	r0, r0, #3
 800109a:	4302      	orrs	r2, r0
 800109c:	08e4      	lsrs	r4, r4, #3
 800109e:	e70d      	b.n	8000ebc <__aeabi_dadd+0x37c>
 80010a0:	4653      	mov	r3, sl
 80010a2:	075a      	lsls	r2, r3, #29
 80010a4:	4663      	mov	r3, ip
 80010a6:	08d8      	lsrs	r0, r3, #3
 80010a8:	4653      	mov	r3, sl
 80010aa:	000e      	movs	r6, r1
 80010ac:	4302      	orrs	r2, r0
 80010ae:	08dc      	lsrs	r4, r3, #3
 80010b0:	e714      	b.n	8000edc <__aeabi_dadd+0x39c>
 80010b2:	0015      	movs	r5, r2
 80010b4:	0026      	movs	r6, r4
 80010b6:	3d20      	subs	r5, #32
 80010b8:	40ee      	lsrs	r6, r5
 80010ba:	2a20      	cmp	r2, #32
 80010bc:	d003      	beq.n	80010c6 <__aeabi_dadd+0x586>
 80010be:	2540      	movs	r5, #64	@ 0x40
 80010c0:	1aaa      	subs	r2, r5, r2
 80010c2:	4094      	lsls	r4, r2
 80010c4:	4320      	orrs	r0, r4
 80010c6:	1e42      	subs	r2, r0, #1
 80010c8:	4190      	sbcs	r0, r2
 80010ca:	0005      	movs	r5, r0
 80010cc:	4335      	orrs	r5, r6
 80010ce:	e606      	b.n	8000cde <__aeabi_dadd+0x19e>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d07c      	beq.n	80011ce <__aeabi_dadd+0x68e>
 80010d4:	4662      	mov	r2, ip
 80010d6:	4653      	mov	r3, sl
 80010d8:	08c0      	lsrs	r0, r0, #3
 80010da:	431a      	orrs	r2, r3
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dadd+0x5a0>
 80010de:	e6fa      	b.n	8000ed6 <__aeabi_dadd+0x396>
 80010e0:	0762      	lsls	r2, r4, #29
 80010e2:	4310      	orrs	r0, r2
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	08e4      	lsrs	r4, r4, #3
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	4214      	tst	r4, r2
 80010ec:	d008      	beq.n	8001100 <__aeabi_dadd+0x5c0>
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	4211      	tst	r1, r2
 80010f2:	d105      	bne.n	8001100 <__aeabi_dadd+0x5c0>
 80010f4:	4663      	mov	r3, ip
 80010f6:	08d8      	lsrs	r0, r3, #3
 80010f8:	4653      	mov	r3, sl
 80010fa:	000c      	movs	r4, r1
 80010fc:	075b      	lsls	r3, r3, #29
 80010fe:	4318      	orrs	r0, r3
 8001100:	0f42      	lsrs	r2, r0, #29
 8001102:	00c0      	lsls	r0, r0, #3
 8001104:	08c0      	lsrs	r0, r0, #3
 8001106:	0752      	lsls	r2, r2, #29
 8001108:	4302      	orrs	r2, r0
 800110a:	e6e7      	b.n	8000edc <__aeabi_dadd+0x39c>
 800110c:	2a00      	cmp	r2, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_dadd+0x5d2>
 8001110:	e72d      	b.n	8000f6e <__aeabi_dadd+0x42e>
 8001112:	4663      	mov	r3, ip
 8001114:	08d8      	lsrs	r0, r3, #3
 8001116:	4653      	mov	r3, sl
 8001118:	075a      	lsls	r2, r3, #29
 800111a:	000e      	movs	r6, r1
 800111c:	4302      	orrs	r2, r0
 800111e:	08dc      	lsrs	r4, r3, #3
 8001120:	e6cc      	b.n	8000ebc <__aeabi_dadd+0x37c>
 8001122:	4663      	mov	r3, ip
 8001124:	1a1d      	subs	r5, r3, r0
 8001126:	45ac      	cmp	ip, r5
 8001128:	4192      	sbcs	r2, r2
 800112a:	4653      	mov	r3, sl
 800112c:	4252      	negs	r2, r2
 800112e:	1b1c      	subs	r4, r3, r4
 8001130:	000e      	movs	r6, r1
 8001132:	4688      	mov	r8, r1
 8001134:	1aa4      	subs	r4, r4, r2
 8001136:	3701      	adds	r7, #1
 8001138:	e555      	b.n	8000be6 <__aeabi_dadd+0xa6>
 800113a:	4663      	mov	r3, ip
 800113c:	08d9      	lsrs	r1, r3, #3
 800113e:	4653      	mov	r3, sl
 8001140:	075a      	lsls	r2, r3, #29
 8001142:	430a      	orrs	r2, r1
 8001144:	08dc      	lsrs	r4, r3, #3
 8001146:	e6c9      	b.n	8000edc <__aeabi_dadd+0x39c>
 8001148:	4660      	mov	r0, ip
 800114a:	4654      	mov	r4, sl
 800114c:	e6d4      	b.n	8000ef8 <__aeabi_dadd+0x3b8>
 800114e:	08c0      	lsrs	r0, r0, #3
 8001150:	2a00      	cmp	r2, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x616>
 8001154:	e6bf      	b.n	8000ed6 <__aeabi_dadd+0x396>
 8001156:	0762      	lsls	r2, r4, #29
 8001158:	4310      	orrs	r0, r2
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	08e4      	lsrs	r4, r4, #3
 800115e:	0312      	lsls	r2, r2, #12
 8001160:	4214      	tst	r4, r2
 8001162:	d0cd      	beq.n	8001100 <__aeabi_dadd+0x5c0>
 8001164:	08dd      	lsrs	r5, r3, #3
 8001166:	4215      	tst	r5, r2
 8001168:	d1ca      	bne.n	8001100 <__aeabi_dadd+0x5c0>
 800116a:	4663      	mov	r3, ip
 800116c:	08d8      	lsrs	r0, r3, #3
 800116e:	4653      	mov	r3, sl
 8001170:	075b      	lsls	r3, r3, #29
 8001172:	000e      	movs	r6, r1
 8001174:	002c      	movs	r4, r5
 8001176:	4318      	orrs	r0, r3
 8001178:	e7c2      	b.n	8001100 <__aeabi_dadd+0x5c0>
 800117a:	4663      	mov	r3, ip
 800117c:	08d9      	lsrs	r1, r3, #3
 800117e:	4653      	mov	r3, sl
 8001180:	075a      	lsls	r2, r3, #29
 8001182:	430a      	orrs	r2, r1
 8001184:	08dc      	lsrs	r4, r3, #3
 8001186:	e699      	b.n	8000ebc <__aeabi_dadd+0x37c>
 8001188:	4663      	mov	r3, ip
 800118a:	08d8      	lsrs	r0, r3, #3
 800118c:	4653      	mov	r3, sl
 800118e:	075a      	lsls	r2, r3, #29
 8001190:	000e      	movs	r6, r1
 8001192:	4302      	orrs	r2, r0
 8001194:	08dc      	lsrs	r4, r3, #3
 8001196:	e6a1      	b.n	8000edc <__aeabi_dadd+0x39c>
 8001198:	0011      	movs	r1, r2
 800119a:	0027      	movs	r7, r4
 800119c:	3920      	subs	r1, #32
 800119e:	40cf      	lsrs	r7, r1
 80011a0:	2a20      	cmp	r2, #32
 80011a2:	d003      	beq.n	80011ac <__aeabi_dadd+0x66c>
 80011a4:	2140      	movs	r1, #64	@ 0x40
 80011a6:	1a8a      	subs	r2, r1, r2
 80011a8:	4094      	lsls	r4, r2
 80011aa:	4320      	orrs	r0, r4
 80011ac:	1e42      	subs	r2, r0, #1
 80011ae:	4190      	sbcs	r0, r2
 80011b0:	0005      	movs	r5, r0
 80011b2:	433d      	orrs	r5, r7
 80011b4:	e651      	b.n	8000e5a <__aeabi_dadd+0x31a>
 80011b6:	000c      	movs	r4, r1
 80011b8:	2500      	movs	r5, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	e558      	b.n	8000c70 <__aeabi_dadd+0x130>
 80011be:	4460      	add	r0, ip
 80011c0:	4560      	cmp	r0, ip
 80011c2:	4192      	sbcs	r2, r2
 80011c4:	4454      	add	r4, sl
 80011c6:	4252      	negs	r2, r2
 80011c8:	0005      	movs	r5, r0
 80011ca:	18a4      	adds	r4, r4, r2
 80011cc:	e73a      	b.n	8001044 <__aeabi_dadd+0x504>
 80011ce:	4653      	mov	r3, sl
 80011d0:	075a      	lsls	r2, r3, #29
 80011d2:	4663      	mov	r3, ip
 80011d4:	08d9      	lsrs	r1, r3, #3
 80011d6:	4653      	mov	r3, sl
 80011d8:	430a      	orrs	r2, r1
 80011da:	08dc      	lsrs	r4, r3, #3
 80011dc:	e67e      	b.n	8000edc <__aeabi_dadd+0x39c>
 80011de:	001a      	movs	r2, r3
 80011e0:	001c      	movs	r4, r3
 80011e2:	432a      	orrs	r2, r5
 80011e4:	d000      	beq.n	80011e8 <__aeabi_dadd+0x6a8>
 80011e6:	e6ab      	b.n	8000f40 <__aeabi_dadd+0x400>
 80011e8:	e6c1      	b.n	8000f6e <__aeabi_dadd+0x42e>
 80011ea:	2120      	movs	r1, #32
 80011ec:	2500      	movs	r5, #0
 80011ee:	1a09      	subs	r1, r1, r0
 80011f0:	e519      	b.n	8000c26 <__aeabi_dadd+0xe6>
 80011f2:	2200      	movs	r2, #0
 80011f4:	2500      	movs	r5, #0
 80011f6:	4c01      	ldr	r4, [pc, #4]	@ (80011fc <__aeabi_dadd+0x6bc>)
 80011f8:	e53a      	b.n	8000c70 <__aeabi_dadd+0x130>
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	000007ff 	.word	0x000007ff
 8001200:	ff7fffff 	.word	0xff7fffff
 8001204:	000007fe 	.word	0x000007fe

08001208 <__aeabi_ddiv>:
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	46de      	mov	lr, fp
 800120c:	4645      	mov	r5, r8
 800120e:	4657      	mov	r7, sl
 8001210:	464e      	mov	r6, r9
 8001212:	b5e0      	push	{r5, r6, r7, lr}
 8001214:	b087      	sub	sp, #28
 8001216:	9200      	str	r2, [sp, #0]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	030b      	lsls	r3, r1, #12
 800121c:	0b1b      	lsrs	r3, r3, #12
 800121e:	469b      	mov	fp, r3
 8001220:	0fca      	lsrs	r2, r1, #31
 8001222:	004b      	lsls	r3, r1, #1
 8001224:	0004      	movs	r4, r0
 8001226:	4680      	mov	r8, r0
 8001228:	0d5b      	lsrs	r3, r3, #21
 800122a:	9202      	str	r2, [sp, #8]
 800122c:	d100      	bne.n	8001230 <__aeabi_ddiv+0x28>
 800122e:	e16a      	b.n	8001506 <__aeabi_ddiv+0x2fe>
 8001230:	4ad4      	ldr	r2, [pc, #848]	@ (8001584 <__aeabi_ddiv+0x37c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d100      	bne.n	8001238 <__aeabi_ddiv+0x30>
 8001236:	e18c      	b.n	8001552 <__aeabi_ddiv+0x34a>
 8001238:	4659      	mov	r1, fp
 800123a:	0f42      	lsrs	r2, r0, #29
 800123c:	00c9      	lsls	r1, r1, #3
 800123e:	430a      	orrs	r2, r1
 8001240:	2180      	movs	r1, #128	@ 0x80
 8001242:	0409      	lsls	r1, r1, #16
 8001244:	4311      	orrs	r1, r2
 8001246:	00c2      	lsls	r2, r0, #3
 8001248:	4690      	mov	r8, r2
 800124a:	4acf      	ldr	r2, [pc, #828]	@ (8001588 <__aeabi_ddiv+0x380>)
 800124c:	4689      	mov	r9, r1
 800124e:	4692      	mov	sl, r2
 8001250:	449a      	add	sl, r3
 8001252:	2300      	movs	r3, #0
 8001254:	2400      	movs	r4, #0
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	9e00      	ldr	r6, [sp, #0]
 800125a:	9f01      	ldr	r7, [sp, #4]
 800125c:	033b      	lsls	r3, r7, #12
 800125e:	0b1b      	lsrs	r3, r3, #12
 8001260:	469b      	mov	fp, r3
 8001262:	007b      	lsls	r3, r7, #1
 8001264:	0030      	movs	r0, r6
 8001266:	0d5b      	lsrs	r3, r3, #21
 8001268:	0ffd      	lsrs	r5, r7, #31
 800126a:	2b00      	cmp	r3, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x68>
 800126e:	e128      	b.n	80014c2 <__aeabi_ddiv+0x2ba>
 8001270:	4ac4      	ldr	r2, [pc, #784]	@ (8001584 <__aeabi_ddiv+0x37c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x70>
 8001276:	e177      	b.n	8001568 <__aeabi_ddiv+0x360>
 8001278:	4659      	mov	r1, fp
 800127a:	0f72      	lsrs	r2, r6, #29
 800127c:	00c9      	lsls	r1, r1, #3
 800127e:	430a      	orrs	r2, r1
 8001280:	2180      	movs	r1, #128	@ 0x80
 8001282:	0409      	lsls	r1, r1, #16
 8001284:	4311      	orrs	r1, r2
 8001286:	468b      	mov	fp, r1
 8001288:	49bf      	ldr	r1, [pc, #764]	@ (8001588 <__aeabi_ddiv+0x380>)
 800128a:	00f2      	lsls	r2, r6, #3
 800128c:	468c      	mov	ip, r1
 800128e:	4651      	mov	r1, sl
 8001290:	4463      	add	r3, ip
 8001292:	1acb      	subs	r3, r1, r3
 8001294:	469a      	mov	sl, r3
 8001296:	2300      	movs	r3, #0
 8001298:	9e02      	ldr	r6, [sp, #8]
 800129a:	406e      	eors	r6, r5
 800129c:	2c0f      	cmp	r4, #15
 800129e:	d827      	bhi.n	80012f0 <__aeabi_ddiv+0xe8>
 80012a0:	49ba      	ldr	r1, [pc, #744]	@ (800158c <__aeabi_ddiv+0x384>)
 80012a2:	00a4      	lsls	r4, r4, #2
 80012a4:	5909      	ldr	r1, [r1, r4]
 80012a6:	468f      	mov	pc, r1
 80012a8:	46cb      	mov	fp, r9
 80012aa:	4642      	mov	r2, r8
 80012ac:	9e02      	ldr	r6, [sp, #8]
 80012ae:	9b03      	ldr	r3, [sp, #12]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d016      	beq.n	80012e2 <__aeabi_ddiv+0xda>
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d100      	bne.n	80012ba <__aeabi_ddiv+0xb2>
 80012b8:	e2a6      	b.n	8001808 <__aeabi_ddiv+0x600>
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d000      	beq.n	80012c0 <__aeabi_ddiv+0xb8>
 80012be:	e0df      	b.n	8001480 <__aeabi_ddiv+0x278>
 80012c0:	2200      	movs	r2, #0
 80012c2:	2300      	movs	r3, #0
 80012c4:	2400      	movs	r4, #0
 80012c6:	4690      	mov	r8, r2
 80012c8:	051b      	lsls	r3, r3, #20
 80012ca:	4323      	orrs	r3, r4
 80012cc:	07f6      	lsls	r6, r6, #31
 80012ce:	4333      	orrs	r3, r6
 80012d0:	4640      	mov	r0, r8
 80012d2:	0019      	movs	r1, r3
 80012d4:	b007      	add	sp, #28
 80012d6:	bcf0      	pop	{r4, r5, r6, r7}
 80012d8:	46bb      	mov	fp, r7
 80012da:	46b2      	mov	sl, r6
 80012dc:	46a9      	mov	r9, r5
 80012de:	46a0      	mov	r8, r4
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	2200      	movs	r2, #0
 80012e4:	2400      	movs	r4, #0
 80012e6:	4690      	mov	r8, r2
 80012e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001584 <__aeabi_ddiv+0x37c>)
 80012ea:	e7ed      	b.n	80012c8 <__aeabi_ddiv+0xc0>
 80012ec:	002e      	movs	r6, r5
 80012ee:	e7df      	b.n	80012b0 <__aeabi_ddiv+0xa8>
 80012f0:	45cb      	cmp	fp, r9
 80012f2:	d200      	bcs.n	80012f6 <__aeabi_ddiv+0xee>
 80012f4:	e1d4      	b.n	80016a0 <__aeabi_ddiv+0x498>
 80012f6:	d100      	bne.n	80012fa <__aeabi_ddiv+0xf2>
 80012f8:	e1cf      	b.n	800169a <__aeabi_ddiv+0x492>
 80012fa:	2301      	movs	r3, #1
 80012fc:	425b      	negs	r3, r3
 80012fe:	469c      	mov	ip, r3
 8001300:	4644      	mov	r4, r8
 8001302:	4648      	mov	r0, r9
 8001304:	2700      	movs	r7, #0
 8001306:	44e2      	add	sl, ip
 8001308:	465b      	mov	r3, fp
 800130a:	0e15      	lsrs	r5, r2, #24
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	431d      	orrs	r5, r3
 8001310:	0c19      	lsrs	r1, r3, #16
 8001312:	042b      	lsls	r3, r5, #16
 8001314:	0212      	lsls	r2, r2, #8
 8001316:	9500      	str	r5, [sp, #0]
 8001318:	0c1d      	lsrs	r5, r3, #16
 800131a:	4691      	mov	r9, r2
 800131c:	9102      	str	r1, [sp, #8]
 800131e:	9503      	str	r5, [sp, #12]
 8001320:	f7fe ff80 	bl	8000224 <__aeabi_uidivmod>
 8001324:	0002      	movs	r2, r0
 8001326:	436a      	muls	r2, r5
 8001328:	040b      	lsls	r3, r1, #16
 800132a:	0c21      	lsrs	r1, r4, #16
 800132c:	4680      	mov	r8, r0
 800132e:	4319      	orrs	r1, r3
 8001330:	428a      	cmp	r2, r1
 8001332:	d909      	bls.n	8001348 <__aeabi_ddiv+0x140>
 8001334:	9d00      	ldr	r5, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	46ac      	mov	ip, r5
 800133a:	425b      	negs	r3, r3
 800133c:	4461      	add	r1, ip
 800133e:	469c      	mov	ip, r3
 8001340:	44e0      	add	r8, ip
 8001342:	428d      	cmp	r5, r1
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x140>
 8001346:	e1fb      	b.n	8001740 <__aeabi_ddiv+0x538>
 8001348:	1a88      	subs	r0, r1, r2
 800134a:	9902      	ldr	r1, [sp, #8]
 800134c:	f7fe ff6a 	bl	8000224 <__aeabi_uidivmod>
 8001350:	9a03      	ldr	r2, [sp, #12]
 8001352:	0424      	lsls	r4, r4, #16
 8001354:	4342      	muls	r2, r0
 8001356:	0409      	lsls	r1, r1, #16
 8001358:	0c24      	lsrs	r4, r4, #16
 800135a:	0003      	movs	r3, r0
 800135c:	430c      	orrs	r4, r1
 800135e:	42a2      	cmp	r2, r4
 8001360:	d906      	bls.n	8001370 <__aeabi_ddiv+0x168>
 8001362:	9900      	ldr	r1, [sp, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	468c      	mov	ip, r1
 8001368:	4464      	add	r4, ip
 800136a:	42a1      	cmp	r1, r4
 800136c:	d800      	bhi.n	8001370 <__aeabi_ddiv+0x168>
 800136e:	e1e1      	b.n	8001734 <__aeabi_ddiv+0x52c>
 8001370:	1aa0      	subs	r0, r4, r2
 8001372:	4642      	mov	r2, r8
 8001374:	0412      	lsls	r2, r2, #16
 8001376:	431a      	orrs	r2, r3
 8001378:	4693      	mov	fp, r2
 800137a:	464b      	mov	r3, r9
 800137c:	4659      	mov	r1, fp
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	001d      	movs	r5, r3
 8001382:	9304      	str	r3, [sp, #16]
 8001384:	040b      	lsls	r3, r1, #16
 8001386:	4649      	mov	r1, r9
 8001388:	0409      	lsls	r1, r1, #16
 800138a:	0c09      	lsrs	r1, r1, #16
 800138c:	000c      	movs	r4, r1
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	435c      	muls	r4, r3
 8001392:	0c12      	lsrs	r2, r2, #16
 8001394:	436b      	muls	r3, r5
 8001396:	4688      	mov	r8, r1
 8001398:	4351      	muls	r1, r2
 800139a:	436a      	muls	r2, r5
 800139c:	0c25      	lsrs	r5, r4, #16
 800139e:	46ac      	mov	ip, r5
 80013a0:	185b      	adds	r3, r3, r1
 80013a2:	4463      	add	r3, ip
 80013a4:	4299      	cmp	r1, r3
 80013a6:	d903      	bls.n	80013b0 <__aeabi_ddiv+0x1a8>
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	0249      	lsls	r1, r1, #9
 80013ac:	468c      	mov	ip, r1
 80013ae:	4462      	add	r2, ip
 80013b0:	0c19      	lsrs	r1, r3, #16
 80013b2:	0424      	lsls	r4, r4, #16
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	0c24      	lsrs	r4, r4, #16
 80013b8:	188a      	adds	r2, r1, r2
 80013ba:	191c      	adds	r4, r3, r4
 80013bc:	4290      	cmp	r0, r2
 80013be:	d302      	bcc.n	80013c6 <__aeabi_ddiv+0x1be>
 80013c0:	d116      	bne.n	80013f0 <__aeabi_ddiv+0x1e8>
 80013c2:	42a7      	cmp	r7, r4
 80013c4:	d214      	bcs.n	80013f0 <__aeabi_ddiv+0x1e8>
 80013c6:	465b      	mov	r3, fp
 80013c8:	9d00      	ldr	r5, [sp, #0]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	444f      	add	r7, r9
 80013ce:	9305      	str	r3, [sp, #20]
 80013d0:	454f      	cmp	r7, r9
 80013d2:	419b      	sbcs	r3, r3
 80013d4:	46ac      	mov	ip, r5
 80013d6:	425b      	negs	r3, r3
 80013d8:	4463      	add	r3, ip
 80013da:	18c0      	adds	r0, r0, r3
 80013dc:	4285      	cmp	r5, r0
 80013de:	d300      	bcc.n	80013e2 <__aeabi_ddiv+0x1da>
 80013e0:	e1a1      	b.n	8001726 <__aeabi_ddiv+0x51e>
 80013e2:	4282      	cmp	r2, r0
 80013e4:	d900      	bls.n	80013e8 <__aeabi_ddiv+0x1e0>
 80013e6:	e1f6      	b.n	80017d6 <__aeabi_ddiv+0x5ce>
 80013e8:	d100      	bne.n	80013ec <__aeabi_ddiv+0x1e4>
 80013ea:	e1f1      	b.n	80017d0 <__aeabi_ddiv+0x5c8>
 80013ec:	9b05      	ldr	r3, [sp, #20]
 80013ee:	469b      	mov	fp, r3
 80013f0:	1b3c      	subs	r4, r7, r4
 80013f2:	42a7      	cmp	r7, r4
 80013f4:	41bf      	sbcs	r7, r7
 80013f6:	9d00      	ldr	r5, [sp, #0]
 80013f8:	1a80      	subs	r0, r0, r2
 80013fa:	427f      	negs	r7, r7
 80013fc:	1bc0      	subs	r0, r0, r7
 80013fe:	4285      	cmp	r5, r0
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x1fc>
 8001402:	e1d0      	b.n	80017a6 <__aeabi_ddiv+0x59e>
 8001404:	9902      	ldr	r1, [sp, #8]
 8001406:	f7fe ff0d 	bl	8000224 <__aeabi_uidivmod>
 800140a:	9a03      	ldr	r2, [sp, #12]
 800140c:	040b      	lsls	r3, r1, #16
 800140e:	4342      	muls	r2, r0
 8001410:	0c21      	lsrs	r1, r4, #16
 8001412:	0007      	movs	r7, r0
 8001414:	4319      	orrs	r1, r3
 8001416:	428a      	cmp	r2, r1
 8001418:	d900      	bls.n	800141c <__aeabi_ddiv+0x214>
 800141a:	e178      	b.n	800170e <__aeabi_ddiv+0x506>
 800141c:	1a88      	subs	r0, r1, r2
 800141e:	9902      	ldr	r1, [sp, #8]
 8001420:	f7fe ff00 	bl	8000224 <__aeabi_uidivmod>
 8001424:	9a03      	ldr	r2, [sp, #12]
 8001426:	0424      	lsls	r4, r4, #16
 8001428:	4342      	muls	r2, r0
 800142a:	0409      	lsls	r1, r1, #16
 800142c:	0c24      	lsrs	r4, r4, #16
 800142e:	0003      	movs	r3, r0
 8001430:	430c      	orrs	r4, r1
 8001432:	42a2      	cmp	r2, r4
 8001434:	d900      	bls.n	8001438 <__aeabi_ddiv+0x230>
 8001436:	e15d      	b.n	80016f4 <__aeabi_ddiv+0x4ec>
 8001438:	4641      	mov	r1, r8
 800143a:	1aa4      	subs	r4, r4, r2
 800143c:	043a      	lsls	r2, r7, #16
 800143e:	431a      	orrs	r2, r3
 8001440:	9d04      	ldr	r5, [sp, #16]
 8001442:	0413      	lsls	r3, r2, #16
 8001444:	0c1b      	lsrs	r3, r3, #16
 8001446:	4359      	muls	r1, r3
 8001448:	4647      	mov	r7, r8
 800144a:	436b      	muls	r3, r5
 800144c:	469c      	mov	ip, r3
 800144e:	0c10      	lsrs	r0, r2, #16
 8001450:	4347      	muls	r7, r0
 8001452:	0c0b      	lsrs	r3, r1, #16
 8001454:	44bc      	add	ip, r7
 8001456:	4463      	add	r3, ip
 8001458:	4368      	muls	r0, r5
 800145a:	429f      	cmp	r7, r3
 800145c:	d903      	bls.n	8001466 <__aeabi_ddiv+0x25e>
 800145e:	2580      	movs	r5, #128	@ 0x80
 8001460:	026d      	lsls	r5, r5, #9
 8001462:	46ac      	mov	ip, r5
 8001464:	4460      	add	r0, ip
 8001466:	0c1f      	lsrs	r7, r3, #16
 8001468:	0409      	lsls	r1, r1, #16
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	0c09      	lsrs	r1, r1, #16
 800146e:	183f      	adds	r7, r7, r0
 8001470:	185b      	adds	r3, r3, r1
 8001472:	42bc      	cmp	r4, r7
 8001474:	d200      	bcs.n	8001478 <__aeabi_ddiv+0x270>
 8001476:	e102      	b.n	800167e <__aeabi_ddiv+0x476>
 8001478:	d100      	bne.n	800147c <__aeabi_ddiv+0x274>
 800147a:	e0fd      	b.n	8001678 <__aeabi_ddiv+0x470>
 800147c:	2301      	movs	r3, #1
 800147e:	431a      	orrs	r2, r3
 8001480:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <__aeabi_ddiv+0x388>)
 8001482:	4453      	add	r3, sl
 8001484:	2b00      	cmp	r3, #0
 8001486:	dc00      	bgt.n	800148a <__aeabi_ddiv+0x282>
 8001488:	e0ae      	b.n	80015e8 <__aeabi_ddiv+0x3e0>
 800148a:	0751      	lsls	r1, r2, #29
 800148c:	d000      	beq.n	8001490 <__aeabi_ddiv+0x288>
 800148e:	e198      	b.n	80017c2 <__aeabi_ddiv+0x5ba>
 8001490:	4659      	mov	r1, fp
 8001492:	01c9      	lsls	r1, r1, #7
 8001494:	d506      	bpl.n	80014a4 <__aeabi_ddiv+0x29c>
 8001496:	4659      	mov	r1, fp
 8001498:	4b3e      	ldr	r3, [pc, #248]	@ (8001594 <__aeabi_ddiv+0x38c>)
 800149a:	4019      	ands	r1, r3
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	468b      	mov	fp, r1
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4453      	add	r3, sl
 80014a4:	493c      	ldr	r1, [pc, #240]	@ (8001598 <__aeabi_ddiv+0x390>)
 80014a6:	428b      	cmp	r3, r1
 80014a8:	dd00      	ble.n	80014ac <__aeabi_ddiv+0x2a4>
 80014aa:	e71a      	b.n	80012e2 <__aeabi_ddiv+0xda>
 80014ac:	4659      	mov	r1, fp
 80014ae:	08d2      	lsrs	r2, r2, #3
 80014b0:	0749      	lsls	r1, r1, #29
 80014b2:	4311      	orrs	r1, r2
 80014b4:	465a      	mov	r2, fp
 80014b6:	055b      	lsls	r3, r3, #21
 80014b8:	0254      	lsls	r4, r2, #9
 80014ba:	4688      	mov	r8, r1
 80014bc:	0b24      	lsrs	r4, r4, #12
 80014be:	0d5b      	lsrs	r3, r3, #21
 80014c0:	e702      	b.n	80012c8 <__aeabi_ddiv+0xc0>
 80014c2:	465a      	mov	r2, fp
 80014c4:	9b00      	ldr	r3, [sp, #0]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	d100      	bne.n	80014cc <__aeabi_ddiv+0x2c4>
 80014ca:	e07e      	b.n	80015ca <__aeabi_ddiv+0x3c2>
 80014cc:	465b      	mov	r3, fp
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d100      	bne.n	80014d4 <__aeabi_ddiv+0x2cc>
 80014d2:	e100      	b.n	80016d6 <__aeabi_ddiv+0x4ce>
 80014d4:	4658      	mov	r0, fp
 80014d6:	f001 fa15 	bl	8002904 <__clzsi2>
 80014da:	0002      	movs	r2, r0
 80014dc:	0003      	movs	r3, r0
 80014de:	3a0b      	subs	r2, #11
 80014e0:	271d      	movs	r7, #29
 80014e2:	9e00      	ldr	r6, [sp, #0]
 80014e4:	1aba      	subs	r2, r7, r2
 80014e6:	0019      	movs	r1, r3
 80014e8:	4658      	mov	r0, fp
 80014ea:	40d6      	lsrs	r6, r2
 80014ec:	3908      	subs	r1, #8
 80014ee:	4088      	lsls	r0, r1
 80014f0:	0032      	movs	r2, r6
 80014f2:	4302      	orrs	r2, r0
 80014f4:	4693      	mov	fp, r2
 80014f6:	9a00      	ldr	r2, [sp, #0]
 80014f8:	408a      	lsls	r2, r1
 80014fa:	4928      	ldr	r1, [pc, #160]	@ (800159c <__aeabi_ddiv+0x394>)
 80014fc:	4453      	add	r3, sl
 80014fe:	468a      	mov	sl, r1
 8001500:	449a      	add	sl, r3
 8001502:	2300      	movs	r3, #0
 8001504:	e6c8      	b.n	8001298 <__aeabi_ddiv+0x90>
 8001506:	465b      	mov	r3, fp
 8001508:	4303      	orrs	r3, r0
 800150a:	4699      	mov	r9, r3
 800150c:	d056      	beq.n	80015bc <__aeabi_ddiv+0x3b4>
 800150e:	465b      	mov	r3, fp
 8001510:	2b00      	cmp	r3, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_ddiv+0x30e>
 8001514:	e0cd      	b.n	80016b2 <__aeabi_ddiv+0x4aa>
 8001516:	4658      	mov	r0, fp
 8001518:	f001 f9f4 	bl	8002904 <__clzsi2>
 800151c:	230b      	movs	r3, #11
 800151e:	425b      	negs	r3, r3
 8001520:	469c      	mov	ip, r3
 8001522:	0002      	movs	r2, r0
 8001524:	4484      	add	ip, r0
 8001526:	4666      	mov	r6, ip
 8001528:	231d      	movs	r3, #29
 800152a:	1b9b      	subs	r3, r3, r6
 800152c:	0026      	movs	r6, r4
 800152e:	0011      	movs	r1, r2
 8001530:	4658      	mov	r0, fp
 8001532:	40de      	lsrs	r6, r3
 8001534:	3908      	subs	r1, #8
 8001536:	4088      	lsls	r0, r1
 8001538:	0033      	movs	r3, r6
 800153a:	4303      	orrs	r3, r0
 800153c:	4699      	mov	r9, r3
 800153e:	0023      	movs	r3, r4
 8001540:	408b      	lsls	r3, r1
 8001542:	4698      	mov	r8, r3
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <__aeabi_ddiv+0x398>)
 8001546:	2400      	movs	r4, #0
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	469a      	mov	sl, r3
 800154c:	2300      	movs	r3, #0
 800154e:	9303      	str	r3, [sp, #12]
 8001550:	e682      	b.n	8001258 <__aeabi_ddiv+0x50>
 8001552:	465a      	mov	r2, fp
 8001554:	4302      	orrs	r2, r0
 8001556:	4691      	mov	r9, r2
 8001558:	d12a      	bne.n	80015b0 <__aeabi_ddiv+0x3a8>
 800155a:	2200      	movs	r2, #0
 800155c:	469a      	mov	sl, r3
 800155e:	2302      	movs	r3, #2
 8001560:	4690      	mov	r8, r2
 8001562:	2408      	movs	r4, #8
 8001564:	9303      	str	r3, [sp, #12]
 8001566:	e677      	b.n	8001258 <__aeabi_ddiv+0x50>
 8001568:	465a      	mov	r2, fp
 800156a:	9b00      	ldr	r3, [sp, #0]
 800156c:	431a      	orrs	r2, r3
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <__aeabi_ddiv+0x39c>)
 8001570:	469c      	mov	ip, r3
 8001572:	44e2      	add	sl, ip
 8001574:	2a00      	cmp	r2, #0
 8001576:	d117      	bne.n	80015a8 <__aeabi_ddiv+0x3a0>
 8001578:	2302      	movs	r3, #2
 800157a:	431c      	orrs	r4, r3
 800157c:	2300      	movs	r3, #0
 800157e:	469b      	mov	fp, r3
 8001580:	3302      	adds	r3, #2
 8001582:	e689      	b.n	8001298 <__aeabi_ddiv+0x90>
 8001584:	000007ff 	.word	0x000007ff
 8001588:	fffffc01 	.word	0xfffffc01
 800158c:	0801e888 	.word	0x0801e888
 8001590:	000003ff 	.word	0x000003ff
 8001594:	feffffff 	.word	0xfeffffff
 8001598:	000007fe 	.word	0x000007fe
 800159c:	000003f3 	.word	0x000003f3
 80015a0:	fffffc0d 	.word	0xfffffc0d
 80015a4:	fffff801 	.word	0xfffff801
 80015a8:	2303      	movs	r3, #3
 80015aa:	0032      	movs	r2, r6
 80015ac:	431c      	orrs	r4, r3
 80015ae:	e673      	b.n	8001298 <__aeabi_ddiv+0x90>
 80015b0:	469a      	mov	sl, r3
 80015b2:	2303      	movs	r3, #3
 80015b4:	46d9      	mov	r9, fp
 80015b6:	240c      	movs	r4, #12
 80015b8:	9303      	str	r3, [sp, #12]
 80015ba:	e64d      	b.n	8001258 <__aeabi_ddiv+0x50>
 80015bc:	2300      	movs	r3, #0
 80015be:	4698      	mov	r8, r3
 80015c0:	469a      	mov	sl, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	2404      	movs	r4, #4
 80015c6:	9303      	str	r3, [sp, #12]
 80015c8:	e646      	b.n	8001258 <__aeabi_ddiv+0x50>
 80015ca:	2301      	movs	r3, #1
 80015cc:	431c      	orrs	r4, r3
 80015ce:	2300      	movs	r3, #0
 80015d0:	469b      	mov	fp, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	e660      	b.n	8001298 <__aeabi_ddiv+0x90>
 80015d6:	2300      	movs	r3, #0
 80015d8:	2480      	movs	r4, #128	@ 0x80
 80015da:	4698      	mov	r8, r3
 80015dc:	2600      	movs	r6, #0
 80015de:	4b92      	ldr	r3, [pc, #584]	@ (8001828 <__aeabi_ddiv+0x620>)
 80015e0:	0324      	lsls	r4, r4, #12
 80015e2:	e671      	b.n	80012c8 <__aeabi_ddiv+0xc0>
 80015e4:	2201      	movs	r2, #1
 80015e6:	4252      	negs	r2, r2
 80015e8:	2101      	movs	r1, #1
 80015ea:	1ac9      	subs	r1, r1, r3
 80015ec:	2938      	cmp	r1, #56	@ 0x38
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_ddiv+0x3ea>
 80015f0:	e666      	b.n	80012c0 <__aeabi_ddiv+0xb8>
 80015f2:	291f      	cmp	r1, #31
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_ddiv+0x3f0>
 80015f6:	e0ab      	b.n	8001750 <__aeabi_ddiv+0x548>
 80015f8:	201f      	movs	r0, #31
 80015fa:	4240      	negs	r0, r0
 80015fc:	1ac3      	subs	r3, r0, r3
 80015fe:	4658      	mov	r0, fp
 8001600:	40d8      	lsrs	r0, r3
 8001602:	0003      	movs	r3, r0
 8001604:	2920      	cmp	r1, #32
 8001606:	d004      	beq.n	8001612 <__aeabi_ddiv+0x40a>
 8001608:	4658      	mov	r0, fp
 800160a:	4988      	ldr	r1, [pc, #544]	@ (800182c <__aeabi_ddiv+0x624>)
 800160c:	4451      	add	r1, sl
 800160e:	4088      	lsls	r0, r1
 8001610:	4302      	orrs	r2, r0
 8001612:	1e51      	subs	r1, r2, #1
 8001614:	418a      	sbcs	r2, r1
 8001616:	431a      	orrs	r2, r3
 8001618:	2307      	movs	r3, #7
 800161a:	0019      	movs	r1, r3
 800161c:	2400      	movs	r4, #0
 800161e:	4011      	ands	r1, r2
 8001620:	4213      	tst	r3, r2
 8001622:	d00c      	beq.n	800163e <__aeabi_ddiv+0x436>
 8001624:	230f      	movs	r3, #15
 8001626:	4013      	ands	r3, r2
 8001628:	2b04      	cmp	r3, #4
 800162a:	d100      	bne.n	800162e <__aeabi_ddiv+0x426>
 800162c:	e0f9      	b.n	8001822 <__aeabi_ddiv+0x61a>
 800162e:	1d11      	adds	r1, r2, #4
 8001630:	4291      	cmp	r1, r2
 8001632:	419b      	sbcs	r3, r3
 8001634:	000a      	movs	r2, r1
 8001636:	425b      	negs	r3, r3
 8001638:	0759      	lsls	r1, r3, #29
 800163a:	025b      	lsls	r3, r3, #9
 800163c:	0b1c      	lsrs	r4, r3, #12
 800163e:	08d2      	lsrs	r2, r2, #3
 8001640:	430a      	orrs	r2, r1
 8001642:	4690      	mov	r8, r2
 8001644:	2300      	movs	r3, #0
 8001646:	e63f      	b.n	80012c8 <__aeabi_ddiv+0xc0>
 8001648:	2480      	movs	r4, #128	@ 0x80
 800164a:	464b      	mov	r3, r9
 800164c:	0324      	lsls	r4, r4, #12
 800164e:	4223      	tst	r3, r4
 8001650:	d009      	beq.n	8001666 <__aeabi_ddiv+0x45e>
 8001652:	465b      	mov	r3, fp
 8001654:	4223      	tst	r3, r4
 8001656:	d106      	bne.n	8001666 <__aeabi_ddiv+0x45e>
 8001658:	431c      	orrs	r4, r3
 800165a:	0324      	lsls	r4, r4, #12
 800165c:	002e      	movs	r6, r5
 800165e:	4690      	mov	r8, r2
 8001660:	4b71      	ldr	r3, [pc, #452]	@ (8001828 <__aeabi_ddiv+0x620>)
 8001662:	0b24      	lsrs	r4, r4, #12
 8001664:	e630      	b.n	80012c8 <__aeabi_ddiv+0xc0>
 8001666:	2480      	movs	r4, #128	@ 0x80
 8001668:	464b      	mov	r3, r9
 800166a:	0324      	lsls	r4, r4, #12
 800166c:	431c      	orrs	r4, r3
 800166e:	0324      	lsls	r4, r4, #12
 8001670:	9e02      	ldr	r6, [sp, #8]
 8001672:	4b6d      	ldr	r3, [pc, #436]	@ (8001828 <__aeabi_ddiv+0x620>)
 8001674:	0b24      	lsrs	r4, r4, #12
 8001676:	e627      	b.n	80012c8 <__aeabi_ddiv+0xc0>
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x476>
 800167c:	e700      	b.n	8001480 <__aeabi_ddiv+0x278>
 800167e:	9800      	ldr	r0, [sp, #0]
 8001680:	1e51      	subs	r1, r2, #1
 8001682:	4684      	mov	ip, r0
 8001684:	4464      	add	r4, ip
 8001686:	4284      	cmp	r4, r0
 8001688:	d200      	bcs.n	800168c <__aeabi_ddiv+0x484>
 800168a:	e084      	b.n	8001796 <__aeabi_ddiv+0x58e>
 800168c:	42bc      	cmp	r4, r7
 800168e:	d200      	bcs.n	8001692 <__aeabi_ddiv+0x48a>
 8001690:	e0ae      	b.n	80017f0 <__aeabi_ddiv+0x5e8>
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x48e>
 8001694:	e0c1      	b.n	800181a <__aeabi_ddiv+0x612>
 8001696:	000a      	movs	r2, r1
 8001698:	e6f0      	b.n	800147c <__aeabi_ddiv+0x274>
 800169a:	4542      	cmp	r2, r8
 800169c:	d900      	bls.n	80016a0 <__aeabi_ddiv+0x498>
 800169e:	e62c      	b.n	80012fa <__aeabi_ddiv+0xf2>
 80016a0:	464b      	mov	r3, r9
 80016a2:	07dc      	lsls	r4, r3, #31
 80016a4:	0858      	lsrs	r0, r3, #1
 80016a6:	4643      	mov	r3, r8
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	431c      	orrs	r4, r3
 80016ac:	4643      	mov	r3, r8
 80016ae:	07df      	lsls	r7, r3, #31
 80016b0:	e62a      	b.n	8001308 <__aeabi_ddiv+0x100>
 80016b2:	f001 f927 	bl	8002904 <__clzsi2>
 80016b6:	2315      	movs	r3, #21
 80016b8:	469c      	mov	ip, r3
 80016ba:	4484      	add	ip, r0
 80016bc:	0002      	movs	r2, r0
 80016be:	4663      	mov	r3, ip
 80016c0:	3220      	adds	r2, #32
 80016c2:	2b1c      	cmp	r3, #28
 80016c4:	dc00      	bgt.n	80016c8 <__aeabi_ddiv+0x4c0>
 80016c6:	e72e      	b.n	8001526 <__aeabi_ddiv+0x31e>
 80016c8:	0023      	movs	r3, r4
 80016ca:	3808      	subs	r0, #8
 80016cc:	4083      	lsls	r3, r0
 80016ce:	4699      	mov	r9, r3
 80016d0:	2300      	movs	r3, #0
 80016d2:	4698      	mov	r8, r3
 80016d4:	e736      	b.n	8001544 <__aeabi_ddiv+0x33c>
 80016d6:	f001 f915 	bl	8002904 <__clzsi2>
 80016da:	0002      	movs	r2, r0
 80016dc:	0003      	movs	r3, r0
 80016de:	3215      	adds	r2, #21
 80016e0:	3320      	adds	r3, #32
 80016e2:	2a1c      	cmp	r2, #28
 80016e4:	dc00      	bgt.n	80016e8 <__aeabi_ddiv+0x4e0>
 80016e6:	e6fb      	b.n	80014e0 <__aeabi_ddiv+0x2d8>
 80016e8:	9900      	ldr	r1, [sp, #0]
 80016ea:	3808      	subs	r0, #8
 80016ec:	4081      	lsls	r1, r0
 80016ee:	2200      	movs	r2, #0
 80016f0:	468b      	mov	fp, r1
 80016f2:	e702      	b.n	80014fa <__aeabi_ddiv+0x2f2>
 80016f4:	9900      	ldr	r1, [sp, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	468c      	mov	ip, r1
 80016fa:	4464      	add	r4, ip
 80016fc:	42a1      	cmp	r1, r4
 80016fe:	d900      	bls.n	8001702 <__aeabi_ddiv+0x4fa>
 8001700:	e69a      	b.n	8001438 <__aeabi_ddiv+0x230>
 8001702:	42a2      	cmp	r2, r4
 8001704:	d800      	bhi.n	8001708 <__aeabi_ddiv+0x500>
 8001706:	e697      	b.n	8001438 <__aeabi_ddiv+0x230>
 8001708:	1e83      	subs	r3, r0, #2
 800170a:	4464      	add	r4, ip
 800170c:	e694      	b.n	8001438 <__aeabi_ddiv+0x230>
 800170e:	46ac      	mov	ip, r5
 8001710:	4461      	add	r1, ip
 8001712:	3f01      	subs	r7, #1
 8001714:	428d      	cmp	r5, r1
 8001716:	d900      	bls.n	800171a <__aeabi_ddiv+0x512>
 8001718:	e680      	b.n	800141c <__aeabi_ddiv+0x214>
 800171a:	428a      	cmp	r2, r1
 800171c:	d800      	bhi.n	8001720 <__aeabi_ddiv+0x518>
 800171e:	e67d      	b.n	800141c <__aeabi_ddiv+0x214>
 8001720:	1e87      	subs	r7, r0, #2
 8001722:	4461      	add	r1, ip
 8001724:	e67a      	b.n	800141c <__aeabi_ddiv+0x214>
 8001726:	4285      	cmp	r5, r0
 8001728:	d000      	beq.n	800172c <__aeabi_ddiv+0x524>
 800172a:	e65f      	b.n	80013ec <__aeabi_ddiv+0x1e4>
 800172c:	45b9      	cmp	r9, r7
 800172e:	d900      	bls.n	8001732 <__aeabi_ddiv+0x52a>
 8001730:	e65c      	b.n	80013ec <__aeabi_ddiv+0x1e4>
 8001732:	e656      	b.n	80013e2 <__aeabi_ddiv+0x1da>
 8001734:	42a2      	cmp	r2, r4
 8001736:	d800      	bhi.n	800173a <__aeabi_ddiv+0x532>
 8001738:	e61a      	b.n	8001370 <__aeabi_ddiv+0x168>
 800173a:	1e83      	subs	r3, r0, #2
 800173c:	4464      	add	r4, ip
 800173e:	e617      	b.n	8001370 <__aeabi_ddiv+0x168>
 8001740:	428a      	cmp	r2, r1
 8001742:	d800      	bhi.n	8001746 <__aeabi_ddiv+0x53e>
 8001744:	e600      	b.n	8001348 <__aeabi_ddiv+0x140>
 8001746:	46ac      	mov	ip, r5
 8001748:	1e83      	subs	r3, r0, #2
 800174a:	4698      	mov	r8, r3
 800174c:	4461      	add	r1, ip
 800174e:	e5fb      	b.n	8001348 <__aeabi_ddiv+0x140>
 8001750:	4837      	ldr	r0, [pc, #220]	@ (8001830 <__aeabi_ddiv+0x628>)
 8001752:	0014      	movs	r4, r2
 8001754:	4450      	add	r0, sl
 8001756:	4082      	lsls	r2, r0
 8001758:	465b      	mov	r3, fp
 800175a:	0017      	movs	r7, r2
 800175c:	4083      	lsls	r3, r0
 800175e:	40cc      	lsrs	r4, r1
 8001760:	1e7a      	subs	r2, r7, #1
 8001762:	4197      	sbcs	r7, r2
 8001764:	4323      	orrs	r3, r4
 8001766:	433b      	orrs	r3, r7
 8001768:	001a      	movs	r2, r3
 800176a:	465b      	mov	r3, fp
 800176c:	40cb      	lsrs	r3, r1
 800176e:	0751      	lsls	r1, r2, #29
 8001770:	d009      	beq.n	8001786 <__aeabi_ddiv+0x57e>
 8001772:	210f      	movs	r1, #15
 8001774:	4011      	ands	r1, r2
 8001776:	2904      	cmp	r1, #4
 8001778:	d005      	beq.n	8001786 <__aeabi_ddiv+0x57e>
 800177a:	1d11      	adds	r1, r2, #4
 800177c:	4291      	cmp	r1, r2
 800177e:	4192      	sbcs	r2, r2
 8001780:	4252      	negs	r2, r2
 8001782:	189b      	adds	r3, r3, r2
 8001784:	000a      	movs	r2, r1
 8001786:	0219      	lsls	r1, r3, #8
 8001788:	d400      	bmi.n	800178c <__aeabi_ddiv+0x584>
 800178a:	e755      	b.n	8001638 <__aeabi_ddiv+0x430>
 800178c:	2200      	movs	r2, #0
 800178e:	2301      	movs	r3, #1
 8001790:	2400      	movs	r4, #0
 8001792:	4690      	mov	r8, r2
 8001794:	e598      	b.n	80012c8 <__aeabi_ddiv+0xc0>
 8001796:	000a      	movs	r2, r1
 8001798:	42bc      	cmp	r4, r7
 800179a:	d000      	beq.n	800179e <__aeabi_ddiv+0x596>
 800179c:	e66e      	b.n	800147c <__aeabi_ddiv+0x274>
 800179e:	454b      	cmp	r3, r9
 80017a0:	d000      	beq.n	80017a4 <__aeabi_ddiv+0x59c>
 80017a2:	e66b      	b.n	800147c <__aeabi_ddiv+0x274>
 80017a4:	e66c      	b.n	8001480 <__aeabi_ddiv+0x278>
 80017a6:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <__aeabi_ddiv+0x62c>)
 80017a8:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <__aeabi_ddiv+0x630>)
 80017aa:	4453      	add	r3, sl
 80017ac:	4592      	cmp	sl, r2
 80017ae:	da00      	bge.n	80017b2 <__aeabi_ddiv+0x5aa>
 80017b0:	e718      	b.n	80015e4 <__aeabi_ddiv+0x3dc>
 80017b2:	2101      	movs	r1, #1
 80017b4:	4249      	negs	r1, r1
 80017b6:	1d0a      	adds	r2, r1, #4
 80017b8:	428a      	cmp	r2, r1
 80017ba:	4189      	sbcs	r1, r1
 80017bc:	4249      	negs	r1, r1
 80017be:	448b      	add	fp, r1
 80017c0:	e666      	b.n	8001490 <__aeabi_ddiv+0x288>
 80017c2:	210f      	movs	r1, #15
 80017c4:	4011      	ands	r1, r2
 80017c6:	2904      	cmp	r1, #4
 80017c8:	d100      	bne.n	80017cc <__aeabi_ddiv+0x5c4>
 80017ca:	e661      	b.n	8001490 <__aeabi_ddiv+0x288>
 80017cc:	0011      	movs	r1, r2
 80017ce:	e7f2      	b.n	80017b6 <__aeabi_ddiv+0x5ae>
 80017d0:	42bc      	cmp	r4, r7
 80017d2:	d800      	bhi.n	80017d6 <__aeabi_ddiv+0x5ce>
 80017d4:	e60a      	b.n	80013ec <__aeabi_ddiv+0x1e4>
 80017d6:	2302      	movs	r3, #2
 80017d8:	425b      	negs	r3, r3
 80017da:	469c      	mov	ip, r3
 80017dc:	9900      	ldr	r1, [sp, #0]
 80017de:	444f      	add	r7, r9
 80017e0:	454f      	cmp	r7, r9
 80017e2:	419b      	sbcs	r3, r3
 80017e4:	44e3      	add	fp, ip
 80017e6:	468c      	mov	ip, r1
 80017e8:	425b      	negs	r3, r3
 80017ea:	4463      	add	r3, ip
 80017ec:	18c0      	adds	r0, r0, r3
 80017ee:	e5ff      	b.n	80013f0 <__aeabi_ddiv+0x1e8>
 80017f0:	4649      	mov	r1, r9
 80017f2:	9d00      	ldr	r5, [sp, #0]
 80017f4:	0048      	lsls	r0, r1, #1
 80017f6:	4548      	cmp	r0, r9
 80017f8:	4189      	sbcs	r1, r1
 80017fa:	46ac      	mov	ip, r5
 80017fc:	4249      	negs	r1, r1
 80017fe:	4461      	add	r1, ip
 8001800:	4681      	mov	r9, r0
 8001802:	3a02      	subs	r2, #2
 8001804:	1864      	adds	r4, r4, r1
 8001806:	e7c7      	b.n	8001798 <__aeabi_ddiv+0x590>
 8001808:	2480      	movs	r4, #128	@ 0x80
 800180a:	465b      	mov	r3, fp
 800180c:	0324      	lsls	r4, r4, #12
 800180e:	431c      	orrs	r4, r3
 8001810:	0324      	lsls	r4, r4, #12
 8001812:	4690      	mov	r8, r2
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <__aeabi_ddiv+0x620>)
 8001816:	0b24      	lsrs	r4, r4, #12
 8001818:	e556      	b.n	80012c8 <__aeabi_ddiv+0xc0>
 800181a:	4599      	cmp	r9, r3
 800181c:	d3e8      	bcc.n	80017f0 <__aeabi_ddiv+0x5e8>
 800181e:	000a      	movs	r2, r1
 8001820:	e7bd      	b.n	800179e <__aeabi_ddiv+0x596>
 8001822:	2300      	movs	r3, #0
 8001824:	e708      	b.n	8001638 <__aeabi_ddiv+0x430>
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	000007ff 	.word	0x000007ff
 800182c:	0000043e 	.word	0x0000043e
 8001830:	0000041e 	.word	0x0000041e
 8001834:	000003ff 	.word	0x000003ff
 8001838:	fffffc02 	.word	0xfffffc02

0800183c <__eqdf2>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4657      	mov	r7, sl
 8001840:	46de      	mov	lr, fp
 8001842:	464e      	mov	r6, r9
 8001844:	4645      	mov	r5, r8
 8001846:	b5e0      	push	{r5, r6, r7, lr}
 8001848:	000d      	movs	r5, r1
 800184a:	0004      	movs	r4, r0
 800184c:	0fe8      	lsrs	r0, r5, #31
 800184e:	4683      	mov	fp, r0
 8001850:	0309      	lsls	r1, r1, #12
 8001852:	0fd8      	lsrs	r0, r3, #31
 8001854:	0b09      	lsrs	r1, r1, #12
 8001856:	4682      	mov	sl, r0
 8001858:	4819      	ldr	r0, [pc, #100]	@ (80018c0 <__eqdf2+0x84>)
 800185a:	468c      	mov	ip, r1
 800185c:	031f      	lsls	r7, r3, #12
 800185e:	0069      	lsls	r1, r5, #1
 8001860:	005e      	lsls	r6, r3, #1
 8001862:	0d49      	lsrs	r1, r1, #21
 8001864:	0b3f      	lsrs	r7, r7, #12
 8001866:	0d76      	lsrs	r6, r6, #21
 8001868:	4281      	cmp	r1, r0
 800186a:	d018      	beq.n	800189e <__eqdf2+0x62>
 800186c:	4286      	cmp	r6, r0
 800186e:	d00f      	beq.n	8001890 <__eqdf2+0x54>
 8001870:	2001      	movs	r0, #1
 8001872:	42b1      	cmp	r1, r6
 8001874:	d10d      	bne.n	8001892 <__eqdf2+0x56>
 8001876:	45bc      	cmp	ip, r7
 8001878:	d10b      	bne.n	8001892 <__eqdf2+0x56>
 800187a:	4294      	cmp	r4, r2
 800187c:	d109      	bne.n	8001892 <__eqdf2+0x56>
 800187e:	45d3      	cmp	fp, sl
 8001880:	d01c      	beq.n	80018bc <__eqdf2+0x80>
 8001882:	2900      	cmp	r1, #0
 8001884:	d105      	bne.n	8001892 <__eqdf2+0x56>
 8001886:	4660      	mov	r0, ip
 8001888:	4320      	orrs	r0, r4
 800188a:	1e43      	subs	r3, r0, #1
 800188c:	4198      	sbcs	r0, r3
 800188e:	e000      	b.n	8001892 <__eqdf2+0x56>
 8001890:	2001      	movs	r0, #1
 8001892:	bcf0      	pop	{r4, r5, r6, r7}
 8001894:	46bb      	mov	fp, r7
 8001896:	46b2      	mov	sl, r6
 8001898:	46a9      	mov	r9, r5
 800189a:	46a0      	mov	r8, r4
 800189c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189e:	2001      	movs	r0, #1
 80018a0:	428e      	cmp	r6, r1
 80018a2:	d1f6      	bne.n	8001892 <__eqdf2+0x56>
 80018a4:	4661      	mov	r1, ip
 80018a6:	4339      	orrs	r1, r7
 80018a8:	000f      	movs	r7, r1
 80018aa:	4317      	orrs	r7, r2
 80018ac:	4327      	orrs	r7, r4
 80018ae:	d1f0      	bne.n	8001892 <__eqdf2+0x56>
 80018b0:	465b      	mov	r3, fp
 80018b2:	4652      	mov	r2, sl
 80018b4:	1a98      	subs	r0, r3, r2
 80018b6:	1e43      	subs	r3, r0, #1
 80018b8:	4198      	sbcs	r0, r3
 80018ba:	e7ea      	b.n	8001892 <__eqdf2+0x56>
 80018bc:	2000      	movs	r0, #0
 80018be:	e7e8      	b.n	8001892 <__eqdf2+0x56>
 80018c0:	000007ff 	.word	0x000007ff

080018c4 <__gedf2>:
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	4657      	mov	r7, sl
 80018c8:	464e      	mov	r6, r9
 80018ca:	4645      	mov	r5, r8
 80018cc:	46de      	mov	lr, fp
 80018ce:	b5e0      	push	{r5, r6, r7, lr}
 80018d0:	000d      	movs	r5, r1
 80018d2:	030f      	lsls	r7, r1, #12
 80018d4:	0b39      	lsrs	r1, r7, #12
 80018d6:	b083      	sub	sp, #12
 80018d8:	0004      	movs	r4, r0
 80018da:	4680      	mov	r8, r0
 80018dc:	9101      	str	r1, [sp, #4]
 80018de:	0058      	lsls	r0, r3, #1
 80018e0:	0fe9      	lsrs	r1, r5, #31
 80018e2:	4f31      	ldr	r7, [pc, #196]	@ (80019a8 <__gedf2+0xe4>)
 80018e4:	0d40      	lsrs	r0, r0, #21
 80018e6:	468c      	mov	ip, r1
 80018e8:	006e      	lsls	r6, r5, #1
 80018ea:	0319      	lsls	r1, r3, #12
 80018ec:	4682      	mov	sl, r0
 80018ee:	4691      	mov	r9, r2
 80018f0:	0d76      	lsrs	r6, r6, #21
 80018f2:	0b09      	lsrs	r1, r1, #12
 80018f4:	0fd8      	lsrs	r0, r3, #31
 80018f6:	42be      	cmp	r6, r7
 80018f8:	d01f      	beq.n	800193a <__gedf2+0x76>
 80018fa:	45ba      	cmp	sl, r7
 80018fc:	d00f      	beq.n	800191e <__gedf2+0x5a>
 80018fe:	2e00      	cmp	r6, #0
 8001900:	d12f      	bne.n	8001962 <__gedf2+0x9e>
 8001902:	4655      	mov	r5, sl
 8001904:	9e01      	ldr	r6, [sp, #4]
 8001906:	4334      	orrs	r4, r6
 8001908:	2d00      	cmp	r5, #0
 800190a:	d127      	bne.n	800195c <__gedf2+0x98>
 800190c:	430a      	orrs	r2, r1
 800190e:	d03a      	beq.n	8001986 <__gedf2+0xc2>
 8001910:	2c00      	cmp	r4, #0
 8001912:	d145      	bne.n	80019a0 <__gedf2+0xdc>
 8001914:	2800      	cmp	r0, #0
 8001916:	d11a      	bne.n	800194e <__gedf2+0x8a>
 8001918:	2001      	movs	r0, #1
 800191a:	4240      	negs	r0, r0
 800191c:	e017      	b.n	800194e <__gedf2+0x8a>
 800191e:	4311      	orrs	r1, r2
 8001920:	d13b      	bne.n	800199a <__gedf2+0xd6>
 8001922:	2e00      	cmp	r6, #0
 8001924:	d102      	bne.n	800192c <__gedf2+0x68>
 8001926:	9f01      	ldr	r7, [sp, #4]
 8001928:	4327      	orrs	r7, r4
 800192a:	d0f3      	beq.n	8001914 <__gedf2+0x50>
 800192c:	4584      	cmp	ip, r0
 800192e:	d109      	bne.n	8001944 <__gedf2+0x80>
 8001930:	4663      	mov	r3, ip
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <__gedf2+0x54>
 8001936:	4660      	mov	r0, ip
 8001938:	e009      	b.n	800194e <__gedf2+0x8a>
 800193a:	9f01      	ldr	r7, [sp, #4]
 800193c:	4327      	orrs	r7, r4
 800193e:	d12c      	bne.n	800199a <__gedf2+0xd6>
 8001940:	45b2      	cmp	sl, r6
 8001942:	d024      	beq.n	800198e <__gedf2+0xca>
 8001944:	4663      	mov	r3, ip
 8001946:	2002      	movs	r0, #2
 8001948:	3b01      	subs	r3, #1
 800194a:	4018      	ands	r0, r3
 800194c:	3801      	subs	r0, #1
 800194e:	b003      	add	sp, #12
 8001950:	bcf0      	pop	{r4, r5, r6, r7}
 8001952:	46bb      	mov	fp, r7
 8001954:	46b2      	mov	sl, r6
 8001956:	46a9      	mov	r9, r5
 8001958:	46a0      	mov	r8, r4
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195c:	2c00      	cmp	r4, #0
 800195e:	d0d9      	beq.n	8001914 <__gedf2+0x50>
 8001960:	e7e4      	b.n	800192c <__gedf2+0x68>
 8001962:	4654      	mov	r4, sl
 8001964:	2c00      	cmp	r4, #0
 8001966:	d0ed      	beq.n	8001944 <__gedf2+0x80>
 8001968:	4584      	cmp	ip, r0
 800196a:	d1eb      	bne.n	8001944 <__gedf2+0x80>
 800196c:	4556      	cmp	r6, sl
 800196e:	dce9      	bgt.n	8001944 <__gedf2+0x80>
 8001970:	dbde      	blt.n	8001930 <__gedf2+0x6c>
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	428b      	cmp	r3, r1
 8001976:	d8e5      	bhi.n	8001944 <__gedf2+0x80>
 8001978:	d1da      	bne.n	8001930 <__gedf2+0x6c>
 800197a:	45c8      	cmp	r8, r9
 800197c:	d8e2      	bhi.n	8001944 <__gedf2+0x80>
 800197e:	2000      	movs	r0, #0
 8001980:	45c8      	cmp	r8, r9
 8001982:	d2e4      	bcs.n	800194e <__gedf2+0x8a>
 8001984:	e7d4      	b.n	8001930 <__gedf2+0x6c>
 8001986:	2000      	movs	r0, #0
 8001988:	2c00      	cmp	r4, #0
 800198a:	d0e0      	beq.n	800194e <__gedf2+0x8a>
 800198c:	e7da      	b.n	8001944 <__gedf2+0x80>
 800198e:	4311      	orrs	r1, r2
 8001990:	d103      	bne.n	800199a <__gedf2+0xd6>
 8001992:	4584      	cmp	ip, r0
 8001994:	d1d6      	bne.n	8001944 <__gedf2+0x80>
 8001996:	2000      	movs	r0, #0
 8001998:	e7d9      	b.n	800194e <__gedf2+0x8a>
 800199a:	2002      	movs	r0, #2
 800199c:	4240      	negs	r0, r0
 800199e:	e7d6      	b.n	800194e <__gedf2+0x8a>
 80019a0:	4584      	cmp	ip, r0
 80019a2:	d0e6      	beq.n	8001972 <__gedf2+0xae>
 80019a4:	e7ce      	b.n	8001944 <__gedf2+0x80>
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	000007ff 	.word	0x000007ff

080019ac <__ledf2>:
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	4657      	mov	r7, sl
 80019b0:	464e      	mov	r6, r9
 80019b2:	4645      	mov	r5, r8
 80019b4:	46de      	mov	lr, fp
 80019b6:	b5e0      	push	{r5, r6, r7, lr}
 80019b8:	000d      	movs	r5, r1
 80019ba:	030f      	lsls	r7, r1, #12
 80019bc:	0004      	movs	r4, r0
 80019be:	4680      	mov	r8, r0
 80019c0:	0fe8      	lsrs	r0, r5, #31
 80019c2:	0b39      	lsrs	r1, r7, #12
 80019c4:	4684      	mov	ip, r0
 80019c6:	b083      	sub	sp, #12
 80019c8:	0058      	lsls	r0, r3, #1
 80019ca:	4f30      	ldr	r7, [pc, #192]	@ (8001a8c <__ledf2+0xe0>)
 80019cc:	0d40      	lsrs	r0, r0, #21
 80019ce:	9101      	str	r1, [sp, #4]
 80019d0:	031e      	lsls	r6, r3, #12
 80019d2:	0069      	lsls	r1, r5, #1
 80019d4:	4682      	mov	sl, r0
 80019d6:	4691      	mov	r9, r2
 80019d8:	0d49      	lsrs	r1, r1, #21
 80019da:	0b36      	lsrs	r6, r6, #12
 80019dc:	0fd8      	lsrs	r0, r3, #31
 80019de:	42b9      	cmp	r1, r7
 80019e0:	d020      	beq.n	8001a24 <__ledf2+0x78>
 80019e2:	45ba      	cmp	sl, r7
 80019e4:	d00f      	beq.n	8001a06 <__ledf2+0x5a>
 80019e6:	2900      	cmp	r1, #0
 80019e8:	d12b      	bne.n	8001a42 <__ledf2+0x96>
 80019ea:	9901      	ldr	r1, [sp, #4]
 80019ec:	430c      	orrs	r4, r1
 80019ee:	4651      	mov	r1, sl
 80019f0:	2900      	cmp	r1, #0
 80019f2:	d137      	bne.n	8001a64 <__ledf2+0xb8>
 80019f4:	4332      	orrs	r2, r6
 80019f6:	d038      	beq.n	8001a6a <__ledf2+0xbe>
 80019f8:	2c00      	cmp	r4, #0
 80019fa:	d144      	bne.n	8001a86 <__ledf2+0xda>
 80019fc:	2800      	cmp	r0, #0
 80019fe:	d119      	bne.n	8001a34 <__ledf2+0x88>
 8001a00:	2001      	movs	r0, #1
 8001a02:	4240      	negs	r0, r0
 8001a04:	e016      	b.n	8001a34 <__ledf2+0x88>
 8001a06:	4316      	orrs	r6, r2
 8001a08:	d113      	bne.n	8001a32 <__ledf2+0x86>
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d102      	bne.n	8001a14 <__ledf2+0x68>
 8001a0e:	9f01      	ldr	r7, [sp, #4]
 8001a10:	4327      	orrs	r7, r4
 8001a12:	d0f3      	beq.n	80019fc <__ledf2+0x50>
 8001a14:	4584      	cmp	ip, r0
 8001a16:	d020      	beq.n	8001a5a <__ledf2+0xae>
 8001a18:	4663      	mov	r3, ip
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	4018      	ands	r0, r3
 8001a20:	3801      	subs	r0, #1
 8001a22:	e007      	b.n	8001a34 <__ledf2+0x88>
 8001a24:	9f01      	ldr	r7, [sp, #4]
 8001a26:	4327      	orrs	r7, r4
 8001a28:	d103      	bne.n	8001a32 <__ledf2+0x86>
 8001a2a:	458a      	cmp	sl, r1
 8001a2c:	d1f4      	bne.n	8001a18 <__ledf2+0x6c>
 8001a2e:	4316      	orrs	r6, r2
 8001a30:	d01f      	beq.n	8001a72 <__ledf2+0xc6>
 8001a32:	2002      	movs	r0, #2
 8001a34:	b003      	add	sp, #12
 8001a36:	bcf0      	pop	{r4, r5, r6, r7}
 8001a38:	46bb      	mov	fp, r7
 8001a3a:	46b2      	mov	sl, r6
 8001a3c:	46a9      	mov	r9, r5
 8001a3e:	46a0      	mov	r8, r4
 8001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a42:	4654      	mov	r4, sl
 8001a44:	2c00      	cmp	r4, #0
 8001a46:	d0e7      	beq.n	8001a18 <__ledf2+0x6c>
 8001a48:	4584      	cmp	ip, r0
 8001a4a:	d1e5      	bne.n	8001a18 <__ledf2+0x6c>
 8001a4c:	4551      	cmp	r1, sl
 8001a4e:	dce3      	bgt.n	8001a18 <__ledf2+0x6c>
 8001a50:	db03      	blt.n	8001a5a <__ledf2+0xae>
 8001a52:	9b01      	ldr	r3, [sp, #4]
 8001a54:	42b3      	cmp	r3, r6
 8001a56:	d8df      	bhi.n	8001a18 <__ledf2+0x6c>
 8001a58:	d00f      	beq.n	8001a7a <__ledf2+0xce>
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0cf      	beq.n	8001a00 <__ledf2+0x54>
 8001a60:	4660      	mov	r0, ip
 8001a62:	e7e7      	b.n	8001a34 <__ledf2+0x88>
 8001a64:	2c00      	cmp	r4, #0
 8001a66:	d0c9      	beq.n	80019fc <__ledf2+0x50>
 8001a68:	e7d4      	b.n	8001a14 <__ledf2+0x68>
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	2c00      	cmp	r4, #0
 8001a6e:	d0e1      	beq.n	8001a34 <__ledf2+0x88>
 8001a70:	e7d2      	b.n	8001a18 <__ledf2+0x6c>
 8001a72:	4584      	cmp	ip, r0
 8001a74:	d1d0      	bne.n	8001a18 <__ledf2+0x6c>
 8001a76:	2000      	movs	r0, #0
 8001a78:	e7dc      	b.n	8001a34 <__ledf2+0x88>
 8001a7a:	45c8      	cmp	r8, r9
 8001a7c:	d8cc      	bhi.n	8001a18 <__ledf2+0x6c>
 8001a7e:	2000      	movs	r0, #0
 8001a80:	45c8      	cmp	r8, r9
 8001a82:	d2d7      	bcs.n	8001a34 <__ledf2+0x88>
 8001a84:	e7e9      	b.n	8001a5a <__ledf2+0xae>
 8001a86:	4584      	cmp	ip, r0
 8001a88:	d0e3      	beq.n	8001a52 <__ledf2+0xa6>
 8001a8a:	e7c5      	b.n	8001a18 <__ledf2+0x6c>
 8001a8c:	000007ff 	.word	0x000007ff

08001a90 <__aeabi_dmul>:
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a92:	4657      	mov	r7, sl
 8001a94:	46de      	mov	lr, fp
 8001a96:	464e      	mov	r6, r9
 8001a98:	4645      	mov	r5, r8
 8001a9a:	b5e0      	push	{r5, r6, r7, lr}
 8001a9c:	001f      	movs	r7, r3
 8001a9e:	030b      	lsls	r3, r1, #12
 8001aa0:	0b1b      	lsrs	r3, r3, #12
 8001aa2:	0016      	movs	r6, r2
 8001aa4:	469a      	mov	sl, r3
 8001aa6:	0fca      	lsrs	r2, r1, #31
 8001aa8:	004b      	lsls	r3, r1, #1
 8001aaa:	0004      	movs	r4, r0
 8001aac:	4693      	mov	fp, r2
 8001aae:	b087      	sub	sp, #28
 8001ab0:	0d5b      	lsrs	r3, r3, #21
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dmul+0x26>
 8001ab4:	e0d5      	b.n	8001c62 <__aeabi_dmul+0x1d2>
 8001ab6:	4abb      	ldr	r2, [pc, #748]	@ (8001da4 <__aeabi_dmul+0x314>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d100      	bne.n	8001abe <__aeabi_dmul+0x2e>
 8001abc:	e0f8      	b.n	8001cb0 <__aeabi_dmul+0x220>
 8001abe:	4651      	mov	r1, sl
 8001ac0:	0f42      	lsrs	r2, r0, #29
 8001ac2:	00c9      	lsls	r1, r1, #3
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	0409      	lsls	r1, r1, #16
 8001aca:	4311      	orrs	r1, r2
 8001acc:	00c2      	lsls	r2, r0, #3
 8001ace:	4691      	mov	r9, r2
 8001ad0:	4ab5      	ldr	r2, [pc, #724]	@ (8001da8 <__aeabi_dmul+0x318>)
 8001ad2:	468a      	mov	sl, r1
 8001ad4:	189d      	adds	r5, r3, r2
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	4698      	mov	r8, r3
 8001ada:	9302      	str	r3, [sp, #8]
 8001adc:	033c      	lsls	r4, r7, #12
 8001ade:	007b      	lsls	r3, r7, #1
 8001ae0:	0ffa      	lsrs	r2, r7, #31
 8001ae2:	0030      	movs	r0, r6
 8001ae4:	0b24      	lsrs	r4, r4, #12
 8001ae6:	0d5b      	lsrs	r3, r3, #21
 8001ae8:	9200      	str	r2, [sp, #0]
 8001aea:	d100      	bne.n	8001aee <__aeabi_dmul+0x5e>
 8001aec:	e096      	b.n	8001c1c <__aeabi_dmul+0x18c>
 8001aee:	4aad      	ldr	r2, [pc, #692]	@ (8001da4 <__aeabi_dmul+0x314>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d031      	beq.n	8001b58 <__aeabi_dmul+0xc8>
 8001af4:	0f72      	lsrs	r2, r6, #29
 8001af6:	00e4      	lsls	r4, r4, #3
 8001af8:	4322      	orrs	r2, r4
 8001afa:	2480      	movs	r4, #128	@ 0x80
 8001afc:	0424      	lsls	r4, r4, #16
 8001afe:	4314      	orrs	r4, r2
 8001b00:	4aa9      	ldr	r2, [pc, #676]	@ (8001da8 <__aeabi_dmul+0x318>)
 8001b02:	00f0      	lsls	r0, r6, #3
 8001b04:	4694      	mov	ip, r2
 8001b06:	4463      	add	r3, ip
 8001b08:	195b      	adds	r3, r3, r5
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	9201      	str	r2, [sp, #4]
 8001b0e:	4642      	mov	r2, r8
 8001b10:	2600      	movs	r6, #0
 8001b12:	2a0a      	cmp	r2, #10
 8001b14:	dc42      	bgt.n	8001b9c <__aeabi_dmul+0x10c>
 8001b16:	465a      	mov	r2, fp
 8001b18:	9900      	ldr	r1, [sp, #0]
 8001b1a:	404a      	eors	r2, r1
 8001b1c:	4693      	mov	fp, r2
 8001b1e:	4642      	mov	r2, r8
 8001b20:	2a02      	cmp	r2, #2
 8001b22:	dc32      	bgt.n	8001b8a <__aeabi_dmul+0xfa>
 8001b24:	3a01      	subs	r2, #1
 8001b26:	2a01      	cmp	r2, #1
 8001b28:	d900      	bls.n	8001b2c <__aeabi_dmul+0x9c>
 8001b2a:	e149      	b.n	8001dc0 <__aeabi_dmul+0x330>
 8001b2c:	2e02      	cmp	r6, #2
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dmul+0xa2>
 8001b30:	e0ca      	b.n	8001cc8 <__aeabi_dmul+0x238>
 8001b32:	2e01      	cmp	r6, #1
 8001b34:	d13d      	bne.n	8001bb2 <__aeabi_dmul+0x122>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2400      	movs	r4, #0
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	0010      	movs	r0, r2
 8001b3e:	465a      	mov	r2, fp
 8001b40:	051b      	lsls	r3, r3, #20
 8001b42:	4323      	orrs	r3, r4
 8001b44:	07d2      	lsls	r2, r2, #31
 8001b46:	4313      	orrs	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	b007      	add	sp, #28
 8001b4c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b4e:	46bb      	mov	fp, r7
 8001b50:	46b2      	mov	sl, r6
 8001b52:	46a9      	mov	r9, r5
 8001b54:	46a0      	mov	r8, r4
 8001b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b58:	4b92      	ldr	r3, [pc, #584]	@ (8001da4 <__aeabi_dmul+0x314>)
 8001b5a:	4326      	orrs	r6, r4
 8001b5c:	18eb      	adds	r3, r5, r3
 8001b5e:	2e00      	cmp	r6, #0
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dmul+0xd4>
 8001b62:	e0bb      	b.n	8001cdc <__aeabi_dmul+0x24c>
 8001b64:	2203      	movs	r2, #3
 8001b66:	4641      	mov	r1, r8
 8001b68:	4311      	orrs	r1, r2
 8001b6a:	465a      	mov	r2, fp
 8001b6c:	4688      	mov	r8, r1
 8001b6e:	9900      	ldr	r1, [sp, #0]
 8001b70:	404a      	eors	r2, r1
 8001b72:	2180      	movs	r1, #128	@ 0x80
 8001b74:	0109      	lsls	r1, r1, #4
 8001b76:	468c      	mov	ip, r1
 8001b78:	0029      	movs	r1, r5
 8001b7a:	4461      	add	r1, ip
 8001b7c:	9101      	str	r1, [sp, #4]
 8001b7e:	4641      	mov	r1, r8
 8001b80:	290a      	cmp	r1, #10
 8001b82:	dd00      	ble.n	8001b86 <__aeabi_dmul+0xf6>
 8001b84:	e233      	b.n	8001fee <__aeabi_dmul+0x55e>
 8001b86:	4693      	mov	fp, r2
 8001b88:	2603      	movs	r6, #3
 8001b8a:	4642      	mov	r2, r8
 8001b8c:	2701      	movs	r7, #1
 8001b8e:	4097      	lsls	r7, r2
 8001b90:	21a6      	movs	r1, #166	@ 0xa6
 8001b92:	003a      	movs	r2, r7
 8001b94:	00c9      	lsls	r1, r1, #3
 8001b96:	400a      	ands	r2, r1
 8001b98:	420f      	tst	r7, r1
 8001b9a:	d031      	beq.n	8001c00 <__aeabi_dmul+0x170>
 8001b9c:	9e02      	ldr	r6, [sp, #8]
 8001b9e:	2e02      	cmp	r6, #2
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dmul+0x114>
 8001ba2:	e235      	b.n	8002010 <__aeabi_dmul+0x580>
 8001ba4:	2e03      	cmp	r6, #3
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dmul+0x11a>
 8001ba8:	e1d2      	b.n	8001f50 <__aeabi_dmul+0x4c0>
 8001baa:	4654      	mov	r4, sl
 8001bac:	4648      	mov	r0, r9
 8001bae:	2e01      	cmp	r6, #1
 8001bb0:	d0c1      	beq.n	8001b36 <__aeabi_dmul+0xa6>
 8001bb2:	9a01      	ldr	r2, [sp, #4]
 8001bb4:	4b7d      	ldr	r3, [pc, #500]	@ (8001dac <__aeabi_dmul+0x31c>)
 8001bb6:	4694      	mov	ip, r2
 8001bb8:	4463      	add	r3, ip
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	dc00      	bgt.n	8001bc0 <__aeabi_dmul+0x130>
 8001bbe:	e0c0      	b.n	8001d42 <__aeabi_dmul+0x2b2>
 8001bc0:	0742      	lsls	r2, r0, #29
 8001bc2:	d009      	beq.n	8001bd8 <__aeabi_dmul+0x148>
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	4002      	ands	r2, r0
 8001bc8:	2a04      	cmp	r2, #4
 8001bca:	d005      	beq.n	8001bd8 <__aeabi_dmul+0x148>
 8001bcc:	1d02      	adds	r2, r0, #4
 8001bce:	4282      	cmp	r2, r0
 8001bd0:	4180      	sbcs	r0, r0
 8001bd2:	4240      	negs	r0, r0
 8001bd4:	1824      	adds	r4, r4, r0
 8001bd6:	0010      	movs	r0, r2
 8001bd8:	01e2      	lsls	r2, r4, #7
 8001bda:	d506      	bpl.n	8001bea <__aeabi_dmul+0x15a>
 8001bdc:	4b74      	ldr	r3, [pc, #464]	@ (8001db0 <__aeabi_dmul+0x320>)
 8001bde:	9a01      	ldr	r2, [sp, #4]
 8001be0:	401c      	ands	r4, r3
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	4694      	mov	ip, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4463      	add	r3, ip
 8001bea:	4a72      	ldr	r2, [pc, #456]	@ (8001db4 <__aeabi_dmul+0x324>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	dc6b      	bgt.n	8001cc8 <__aeabi_dmul+0x238>
 8001bf0:	0762      	lsls	r2, r4, #29
 8001bf2:	08c0      	lsrs	r0, r0, #3
 8001bf4:	0264      	lsls	r4, r4, #9
 8001bf6:	055b      	lsls	r3, r3, #21
 8001bf8:	4302      	orrs	r2, r0
 8001bfa:	0b24      	lsrs	r4, r4, #12
 8001bfc:	0d5b      	lsrs	r3, r3, #21
 8001bfe:	e79d      	b.n	8001b3c <__aeabi_dmul+0xac>
 8001c00:	2190      	movs	r1, #144	@ 0x90
 8001c02:	0089      	lsls	r1, r1, #2
 8001c04:	420f      	tst	r7, r1
 8001c06:	d163      	bne.n	8001cd0 <__aeabi_dmul+0x240>
 8001c08:	2288      	movs	r2, #136	@ 0x88
 8001c0a:	423a      	tst	r2, r7
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dmul+0x180>
 8001c0e:	e0d7      	b.n	8001dc0 <__aeabi_dmul+0x330>
 8001c10:	9b00      	ldr	r3, [sp, #0]
 8001c12:	46a2      	mov	sl, r4
 8001c14:	469b      	mov	fp, r3
 8001c16:	4681      	mov	r9, r0
 8001c18:	9602      	str	r6, [sp, #8]
 8001c1a:	e7bf      	b.n	8001b9c <__aeabi_dmul+0x10c>
 8001c1c:	0023      	movs	r3, r4
 8001c1e:	4333      	orrs	r3, r6
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dmul+0x194>
 8001c22:	e07f      	b.n	8001d24 <__aeabi_dmul+0x294>
 8001c24:	2c00      	cmp	r4, #0
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dmul+0x19a>
 8001c28:	e1ad      	b.n	8001f86 <__aeabi_dmul+0x4f6>
 8001c2a:	0020      	movs	r0, r4
 8001c2c:	f000 fe6a 	bl	8002904 <__clzsi2>
 8001c30:	0002      	movs	r2, r0
 8001c32:	0003      	movs	r3, r0
 8001c34:	3a0b      	subs	r2, #11
 8001c36:	201d      	movs	r0, #29
 8001c38:	0019      	movs	r1, r3
 8001c3a:	1a82      	subs	r2, r0, r2
 8001c3c:	0030      	movs	r0, r6
 8001c3e:	3908      	subs	r1, #8
 8001c40:	40d0      	lsrs	r0, r2
 8001c42:	408c      	lsls	r4, r1
 8001c44:	4304      	orrs	r4, r0
 8001c46:	0030      	movs	r0, r6
 8001c48:	4088      	lsls	r0, r1
 8001c4a:	4a5b      	ldr	r2, [pc, #364]	@ (8001db8 <__aeabi_dmul+0x328>)
 8001c4c:	1aeb      	subs	r3, r5, r3
 8001c4e:	4694      	mov	ip, r2
 8001c50:	4463      	add	r3, ip
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	4642      	mov	r2, r8
 8001c58:	2600      	movs	r6, #0
 8001c5a:	2a0a      	cmp	r2, #10
 8001c5c:	dc00      	bgt.n	8001c60 <__aeabi_dmul+0x1d0>
 8001c5e:	e75a      	b.n	8001b16 <__aeabi_dmul+0x86>
 8001c60:	e79c      	b.n	8001b9c <__aeabi_dmul+0x10c>
 8001c62:	4653      	mov	r3, sl
 8001c64:	4303      	orrs	r3, r0
 8001c66:	4699      	mov	r9, r3
 8001c68:	d054      	beq.n	8001d14 <__aeabi_dmul+0x284>
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_dmul+0x1e2>
 8001c70:	e177      	b.n	8001f62 <__aeabi_dmul+0x4d2>
 8001c72:	4650      	mov	r0, sl
 8001c74:	f000 fe46 	bl	8002904 <__clzsi2>
 8001c78:	230b      	movs	r3, #11
 8001c7a:	425b      	negs	r3, r3
 8001c7c:	469c      	mov	ip, r3
 8001c7e:	0002      	movs	r2, r0
 8001c80:	4484      	add	ip, r0
 8001c82:	0011      	movs	r1, r2
 8001c84:	4650      	mov	r0, sl
 8001c86:	3908      	subs	r1, #8
 8001c88:	4088      	lsls	r0, r1
 8001c8a:	231d      	movs	r3, #29
 8001c8c:	4680      	mov	r8, r0
 8001c8e:	4660      	mov	r0, ip
 8001c90:	1a1b      	subs	r3, r3, r0
 8001c92:	0020      	movs	r0, r4
 8001c94:	40d8      	lsrs	r0, r3
 8001c96:	0003      	movs	r3, r0
 8001c98:	4640      	mov	r0, r8
 8001c9a:	4303      	orrs	r3, r0
 8001c9c:	469a      	mov	sl, r3
 8001c9e:	0023      	movs	r3, r4
 8001ca0:	408b      	lsls	r3, r1
 8001ca2:	4699      	mov	r9, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4d44      	ldr	r5, [pc, #272]	@ (8001db8 <__aeabi_dmul+0x328>)
 8001ca8:	4698      	mov	r8, r3
 8001caa:	1aad      	subs	r5, r5, r2
 8001cac:	9302      	str	r3, [sp, #8]
 8001cae:	e715      	b.n	8001adc <__aeabi_dmul+0x4c>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	4302      	orrs	r2, r0
 8001cb4:	4691      	mov	r9, r2
 8001cb6:	d126      	bne.n	8001d06 <__aeabi_dmul+0x276>
 8001cb8:	2200      	movs	r2, #0
 8001cba:	001d      	movs	r5, r3
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	4692      	mov	sl, r2
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	4690      	mov	r8, r2
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	e709      	b.n	8001adc <__aeabi_dmul+0x4c>
 8001cc8:	2400      	movs	r4, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <__aeabi_dmul+0x314>)
 8001cce:	e735      	b.n	8001b3c <__aeabi_dmul+0xac>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2480      	movs	r4, #128	@ 0x80
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	0324      	lsls	r4, r4, #12
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <__aeabi_dmul+0x314>)
 8001cda:	e72f      	b.n	8001b3c <__aeabi_dmul+0xac>
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4641      	mov	r1, r8
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	2280      	movs	r2, #128	@ 0x80
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	4694      	mov	ip, r2
 8001ce8:	002a      	movs	r2, r5
 8001cea:	4462      	add	r2, ip
 8001cec:	4688      	mov	r8, r1
 8001cee:	9201      	str	r2, [sp, #4]
 8001cf0:	290a      	cmp	r1, #10
 8001cf2:	dd00      	ble.n	8001cf6 <__aeabi_dmul+0x266>
 8001cf4:	e752      	b.n	8001b9c <__aeabi_dmul+0x10c>
 8001cf6:	465a      	mov	r2, fp
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	9900      	ldr	r1, [sp, #0]
 8001cfc:	0004      	movs	r4, r0
 8001cfe:	404a      	eors	r2, r1
 8001d00:	4693      	mov	fp, r2
 8001d02:	2602      	movs	r6, #2
 8001d04:	e70b      	b.n	8001b1e <__aeabi_dmul+0x8e>
 8001d06:	220c      	movs	r2, #12
 8001d08:	001d      	movs	r5, r3
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	4681      	mov	r9, r0
 8001d0e:	4690      	mov	r8, r2
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	e6e3      	b.n	8001adc <__aeabi_dmul+0x4c>
 8001d14:	2300      	movs	r3, #0
 8001d16:	469a      	mov	sl, r3
 8001d18:	3304      	adds	r3, #4
 8001d1a:	4698      	mov	r8, r3
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	2500      	movs	r5, #0
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	e6db      	b.n	8001adc <__aeabi_dmul+0x4c>
 8001d24:	4642      	mov	r2, r8
 8001d26:	3301      	adds	r3, #1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	002b      	movs	r3, r5
 8001d2c:	4690      	mov	r8, r2
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	9201      	str	r2, [sp, #4]
 8001d32:	4642      	mov	r2, r8
 8001d34:	2400      	movs	r4, #0
 8001d36:	2000      	movs	r0, #0
 8001d38:	2601      	movs	r6, #1
 8001d3a:	2a0a      	cmp	r2, #10
 8001d3c:	dc00      	bgt.n	8001d40 <__aeabi_dmul+0x2b0>
 8001d3e:	e6ea      	b.n	8001b16 <__aeabi_dmul+0x86>
 8001d40:	e72c      	b.n	8001b9c <__aeabi_dmul+0x10c>
 8001d42:	2201      	movs	r2, #1
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	2a38      	cmp	r2, #56	@ 0x38
 8001d48:	dd00      	ble.n	8001d4c <__aeabi_dmul+0x2bc>
 8001d4a:	e6f4      	b.n	8001b36 <__aeabi_dmul+0xa6>
 8001d4c:	2a1f      	cmp	r2, #31
 8001d4e:	dc00      	bgt.n	8001d52 <__aeabi_dmul+0x2c2>
 8001d50:	e12a      	b.n	8001fa8 <__aeabi_dmul+0x518>
 8001d52:	211f      	movs	r1, #31
 8001d54:	4249      	negs	r1, r1
 8001d56:	1acb      	subs	r3, r1, r3
 8001d58:	0021      	movs	r1, r4
 8001d5a:	40d9      	lsrs	r1, r3
 8001d5c:	000b      	movs	r3, r1
 8001d5e:	2a20      	cmp	r2, #32
 8001d60:	d005      	beq.n	8001d6e <__aeabi_dmul+0x2de>
 8001d62:	4a16      	ldr	r2, [pc, #88]	@ (8001dbc <__aeabi_dmul+0x32c>)
 8001d64:	9d01      	ldr	r5, [sp, #4]
 8001d66:	4694      	mov	ip, r2
 8001d68:	4465      	add	r5, ip
 8001d6a:	40ac      	lsls	r4, r5
 8001d6c:	4320      	orrs	r0, r4
 8001d6e:	1e42      	subs	r2, r0, #1
 8001d70:	4190      	sbcs	r0, r2
 8001d72:	4318      	orrs	r0, r3
 8001d74:	2307      	movs	r3, #7
 8001d76:	0019      	movs	r1, r3
 8001d78:	2400      	movs	r4, #0
 8001d7a:	4001      	ands	r1, r0
 8001d7c:	4203      	tst	r3, r0
 8001d7e:	d00c      	beq.n	8001d9a <__aeabi_dmul+0x30a>
 8001d80:	230f      	movs	r3, #15
 8001d82:	4003      	ands	r3, r0
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dmul+0x2fa>
 8001d88:	e140      	b.n	800200c <__aeabi_dmul+0x57c>
 8001d8a:	1d03      	adds	r3, r0, #4
 8001d8c:	4283      	cmp	r3, r0
 8001d8e:	41a4      	sbcs	r4, r4
 8001d90:	0018      	movs	r0, r3
 8001d92:	4264      	negs	r4, r4
 8001d94:	0761      	lsls	r1, r4, #29
 8001d96:	0264      	lsls	r4, r4, #9
 8001d98:	0b24      	lsrs	r4, r4, #12
 8001d9a:	08c2      	lsrs	r2, r0, #3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	e6cc      	b.n	8001b3c <__aeabi_dmul+0xac>
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	000007ff 	.word	0x000007ff
 8001da8:	fffffc01 	.word	0xfffffc01
 8001dac:	000003ff 	.word	0x000003ff
 8001db0:	feffffff 	.word	0xfeffffff
 8001db4:	000007fe 	.word	0x000007fe
 8001db8:	fffffc0d 	.word	0xfffffc0d
 8001dbc:	0000043e 	.word	0x0000043e
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	464a      	mov	r2, r9
 8001dc4:	0409      	lsls	r1, r1, #16
 8001dc6:	0c09      	lsrs	r1, r1, #16
 8001dc8:	000d      	movs	r5, r1
 8001dca:	0c16      	lsrs	r6, r2, #16
 8001dcc:	0c02      	lsrs	r2, r0, #16
 8001dce:	0400      	lsls	r0, r0, #16
 8001dd0:	0c00      	lsrs	r0, r0, #16
 8001dd2:	4345      	muls	r5, r0
 8001dd4:	46ac      	mov	ip, r5
 8001dd6:	0005      	movs	r5, r0
 8001dd8:	4375      	muls	r5, r6
 8001dda:	46a8      	mov	r8, r5
 8001ddc:	0015      	movs	r5, r2
 8001dde:	000f      	movs	r7, r1
 8001de0:	4375      	muls	r5, r6
 8001de2:	9200      	str	r2, [sp, #0]
 8001de4:	9502      	str	r5, [sp, #8]
 8001de6:	002a      	movs	r2, r5
 8001de8:	9d00      	ldr	r5, [sp, #0]
 8001dea:	436f      	muls	r7, r5
 8001dec:	4665      	mov	r5, ip
 8001dee:	0c2d      	lsrs	r5, r5, #16
 8001df0:	46a9      	mov	r9, r5
 8001df2:	4447      	add	r7, r8
 8001df4:	444f      	add	r7, r9
 8001df6:	45b8      	cmp	r8, r7
 8001df8:	d905      	bls.n	8001e06 <__aeabi_dmul+0x376>
 8001dfa:	0015      	movs	r5, r2
 8001dfc:	2280      	movs	r2, #128	@ 0x80
 8001dfe:	0252      	lsls	r2, r2, #9
 8001e00:	4690      	mov	r8, r2
 8001e02:	4445      	add	r5, r8
 8001e04:	9502      	str	r5, [sp, #8]
 8001e06:	0c3d      	lsrs	r5, r7, #16
 8001e08:	9503      	str	r5, [sp, #12]
 8001e0a:	4665      	mov	r5, ip
 8001e0c:	042d      	lsls	r5, r5, #16
 8001e0e:	043f      	lsls	r7, r7, #16
 8001e10:	0c2d      	lsrs	r5, r5, #16
 8001e12:	46ac      	mov	ip, r5
 8001e14:	003d      	movs	r5, r7
 8001e16:	4465      	add	r5, ip
 8001e18:	9504      	str	r5, [sp, #16]
 8001e1a:	0c25      	lsrs	r5, r4, #16
 8001e1c:	0424      	lsls	r4, r4, #16
 8001e1e:	0c24      	lsrs	r4, r4, #16
 8001e20:	46ac      	mov	ip, r5
 8001e22:	0025      	movs	r5, r4
 8001e24:	4375      	muls	r5, r6
 8001e26:	46a8      	mov	r8, r5
 8001e28:	4665      	mov	r5, ip
 8001e2a:	000f      	movs	r7, r1
 8001e2c:	4369      	muls	r1, r5
 8001e2e:	4441      	add	r1, r8
 8001e30:	4689      	mov	r9, r1
 8001e32:	4367      	muls	r7, r4
 8001e34:	0c39      	lsrs	r1, r7, #16
 8001e36:	4449      	add	r1, r9
 8001e38:	436e      	muls	r6, r5
 8001e3a:	4588      	cmp	r8, r1
 8001e3c:	d903      	bls.n	8001e46 <__aeabi_dmul+0x3b6>
 8001e3e:	2280      	movs	r2, #128	@ 0x80
 8001e40:	0252      	lsls	r2, r2, #9
 8001e42:	4690      	mov	r8, r2
 8001e44:	4446      	add	r6, r8
 8001e46:	0c0d      	lsrs	r5, r1, #16
 8001e48:	46a8      	mov	r8, r5
 8001e4a:	0035      	movs	r5, r6
 8001e4c:	4445      	add	r5, r8
 8001e4e:	9505      	str	r5, [sp, #20]
 8001e50:	9d03      	ldr	r5, [sp, #12]
 8001e52:	043f      	lsls	r7, r7, #16
 8001e54:	46a8      	mov	r8, r5
 8001e56:	0c3f      	lsrs	r7, r7, #16
 8001e58:	0409      	lsls	r1, r1, #16
 8001e5a:	19c9      	adds	r1, r1, r7
 8001e5c:	4488      	add	r8, r1
 8001e5e:	4645      	mov	r5, r8
 8001e60:	9503      	str	r5, [sp, #12]
 8001e62:	4655      	mov	r5, sl
 8001e64:	042e      	lsls	r6, r5, #16
 8001e66:	0c36      	lsrs	r6, r6, #16
 8001e68:	0c2f      	lsrs	r7, r5, #16
 8001e6a:	0035      	movs	r5, r6
 8001e6c:	4345      	muls	r5, r0
 8001e6e:	4378      	muls	r0, r7
 8001e70:	4681      	mov	r9, r0
 8001e72:	0038      	movs	r0, r7
 8001e74:	46a8      	mov	r8, r5
 8001e76:	0c2d      	lsrs	r5, r5, #16
 8001e78:	46aa      	mov	sl, r5
 8001e7a:	9a00      	ldr	r2, [sp, #0]
 8001e7c:	4350      	muls	r0, r2
 8001e7e:	4372      	muls	r2, r6
 8001e80:	444a      	add	r2, r9
 8001e82:	4452      	add	r2, sl
 8001e84:	4591      	cmp	r9, r2
 8001e86:	d903      	bls.n	8001e90 <__aeabi_dmul+0x400>
 8001e88:	2580      	movs	r5, #128	@ 0x80
 8001e8a:	026d      	lsls	r5, r5, #9
 8001e8c:	46a9      	mov	r9, r5
 8001e8e:	4448      	add	r0, r9
 8001e90:	0c15      	lsrs	r5, r2, #16
 8001e92:	46a9      	mov	r9, r5
 8001e94:	4645      	mov	r5, r8
 8001e96:	042d      	lsls	r5, r5, #16
 8001e98:	0c2d      	lsrs	r5, r5, #16
 8001e9a:	46a8      	mov	r8, r5
 8001e9c:	4665      	mov	r5, ip
 8001e9e:	437d      	muls	r5, r7
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	4448      	add	r0, r9
 8001ea4:	4490      	add	r8, r2
 8001ea6:	46a9      	mov	r9, r5
 8001ea8:	0032      	movs	r2, r6
 8001eaa:	4665      	mov	r5, ip
 8001eac:	4362      	muls	r2, r4
 8001eae:	436e      	muls	r6, r5
 8001eb0:	437c      	muls	r4, r7
 8001eb2:	0c17      	lsrs	r7, r2, #16
 8001eb4:	1936      	adds	r6, r6, r4
 8001eb6:	19bf      	adds	r7, r7, r6
 8001eb8:	42bc      	cmp	r4, r7
 8001eba:	d903      	bls.n	8001ec4 <__aeabi_dmul+0x434>
 8001ebc:	2480      	movs	r4, #128	@ 0x80
 8001ebe:	0264      	lsls	r4, r4, #9
 8001ec0:	46a4      	mov	ip, r4
 8001ec2:	44e1      	add	r9, ip
 8001ec4:	9c02      	ldr	r4, [sp, #8]
 8001ec6:	9e03      	ldr	r6, [sp, #12]
 8001ec8:	46a4      	mov	ip, r4
 8001eca:	9d05      	ldr	r5, [sp, #20]
 8001ecc:	4466      	add	r6, ip
 8001ece:	428e      	cmp	r6, r1
 8001ed0:	4189      	sbcs	r1, r1
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	0412      	lsls	r2, r2, #16
 8001ed6:	043c      	lsls	r4, r7, #16
 8001ed8:	0c12      	lsrs	r2, r2, #16
 8001eda:	18a2      	adds	r2, r4, r2
 8001edc:	4462      	add	r2, ip
 8001ede:	4249      	negs	r1, r1
 8001ee0:	1854      	adds	r4, r2, r1
 8001ee2:	4446      	add	r6, r8
 8001ee4:	46a4      	mov	ip, r4
 8001ee6:	4546      	cmp	r6, r8
 8001ee8:	41a4      	sbcs	r4, r4
 8001eea:	4682      	mov	sl, r0
 8001eec:	4264      	negs	r4, r4
 8001eee:	46a0      	mov	r8, r4
 8001ef0:	42aa      	cmp	r2, r5
 8001ef2:	4192      	sbcs	r2, r2
 8001ef4:	458c      	cmp	ip, r1
 8001ef6:	4189      	sbcs	r1, r1
 8001ef8:	44e2      	add	sl, ip
 8001efa:	44d0      	add	r8, sl
 8001efc:	4249      	negs	r1, r1
 8001efe:	4252      	negs	r2, r2
 8001f00:	430a      	orrs	r2, r1
 8001f02:	45a0      	cmp	r8, r4
 8001f04:	41a4      	sbcs	r4, r4
 8001f06:	4582      	cmp	sl, r0
 8001f08:	4189      	sbcs	r1, r1
 8001f0a:	4264      	negs	r4, r4
 8001f0c:	4249      	negs	r1, r1
 8001f0e:	430c      	orrs	r4, r1
 8001f10:	4641      	mov	r1, r8
 8001f12:	0c3f      	lsrs	r7, r7, #16
 8001f14:	19d2      	adds	r2, r2, r7
 8001f16:	1912      	adds	r2, r2, r4
 8001f18:	0dcc      	lsrs	r4, r1, #23
 8001f1a:	9904      	ldr	r1, [sp, #16]
 8001f1c:	0270      	lsls	r0, r6, #9
 8001f1e:	4308      	orrs	r0, r1
 8001f20:	1e41      	subs	r1, r0, #1
 8001f22:	4188      	sbcs	r0, r1
 8001f24:	4641      	mov	r1, r8
 8001f26:	444a      	add	r2, r9
 8001f28:	0df6      	lsrs	r6, r6, #23
 8001f2a:	0252      	lsls	r2, r2, #9
 8001f2c:	4330      	orrs	r0, r6
 8001f2e:	0249      	lsls	r1, r1, #9
 8001f30:	4314      	orrs	r4, r2
 8001f32:	4308      	orrs	r0, r1
 8001f34:	01d2      	lsls	r2, r2, #7
 8001f36:	d535      	bpl.n	8001fa4 <__aeabi_dmul+0x514>
 8001f38:	2201      	movs	r2, #1
 8001f3a:	0843      	lsrs	r3, r0, #1
 8001f3c:	4002      	ands	r2, r0
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	07e0      	lsls	r0, r4, #31
 8001f42:	4318      	orrs	r0, r3
 8001f44:	0864      	lsrs	r4, r4, #1
 8001f46:	e634      	b.n	8001bb2 <__aeabi_dmul+0x122>
 8001f48:	9b00      	ldr	r3, [sp, #0]
 8001f4a:	46a2      	mov	sl, r4
 8001f4c:	469b      	mov	fp, r3
 8001f4e:	4681      	mov	r9, r0
 8001f50:	2480      	movs	r4, #128	@ 0x80
 8001f52:	4653      	mov	r3, sl
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	431c      	orrs	r4, r3
 8001f58:	0324      	lsls	r4, r4, #12
 8001f5a:	464a      	mov	r2, r9
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002018 <__aeabi_dmul+0x588>)
 8001f5e:	0b24      	lsrs	r4, r4, #12
 8001f60:	e5ec      	b.n	8001b3c <__aeabi_dmul+0xac>
 8001f62:	f000 fccf 	bl	8002904 <__clzsi2>
 8001f66:	2315      	movs	r3, #21
 8001f68:	469c      	mov	ip, r3
 8001f6a:	4484      	add	ip, r0
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	4663      	mov	r3, ip
 8001f70:	3220      	adds	r2, #32
 8001f72:	2b1c      	cmp	r3, #28
 8001f74:	dc00      	bgt.n	8001f78 <__aeabi_dmul+0x4e8>
 8001f76:	e684      	b.n	8001c82 <__aeabi_dmul+0x1f2>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	0023      	movs	r3, r4
 8001f7e:	3808      	subs	r0, #8
 8001f80:	4083      	lsls	r3, r0
 8001f82:	469a      	mov	sl, r3
 8001f84:	e68e      	b.n	8001ca4 <__aeabi_dmul+0x214>
 8001f86:	f000 fcbd 	bl	8002904 <__clzsi2>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	3215      	adds	r2, #21
 8001f90:	3320      	adds	r3, #32
 8001f92:	2a1c      	cmp	r2, #28
 8001f94:	dc00      	bgt.n	8001f98 <__aeabi_dmul+0x508>
 8001f96:	e64e      	b.n	8001c36 <__aeabi_dmul+0x1a6>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	0034      	movs	r4, r6
 8001f9c:	3a08      	subs	r2, #8
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	4094      	lsls	r4, r2
 8001fa2:	e652      	b.n	8001c4a <__aeabi_dmul+0x1ba>
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	e604      	b.n	8001bb2 <__aeabi_dmul+0x122>
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <__aeabi_dmul+0x58c>)
 8001faa:	0021      	movs	r1, r4
 8001fac:	469c      	mov	ip, r3
 8001fae:	0003      	movs	r3, r0
 8001fb0:	9d01      	ldr	r5, [sp, #4]
 8001fb2:	40d3      	lsrs	r3, r2
 8001fb4:	4465      	add	r5, ip
 8001fb6:	40a9      	lsls	r1, r5
 8001fb8:	4319      	orrs	r1, r3
 8001fba:	0003      	movs	r3, r0
 8001fbc:	40ab      	lsls	r3, r5
 8001fbe:	1e58      	subs	r0, r3, #1
 8001fc0:	4183      	sbcs	r3, r0
 8001fc2:	4319      	orrs	r1, r3
 8001fc4:	0008      	movs	r0, r1
 8001fc6:	40d4      	lsrs	r4, r2
 8001fc8:	074b      	lsls	r3, r1, #29
 8001fca:	d009      	beq.n	8001fe0 <__aeabi_dmul+0x550>
 8001fcc:	230f      	movs	r3, #15
 8001fce:	400b      	ands	r3, r1
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d005      	beq.n	8001fe0 <__aeabi_dmul+0x550>
 8001fd4:	1d0b      	adds	r3, r1, #4
 8001fd6:	428b      	cmp	r3, r1
 8001fd8:	4180      	sbcs	r0, r0
 8001fda:	4240      	negs	r0, r0
 8001fdc:	1824      	adds	r4, r4, r0
 8001fde:	0018      	movs	r0, r3
 8001fe0:	0223      	lsls	r3, r4, #8
 8001fe2:	d400      	bmi.n	8001fe6 <__aeabi_dmul+0x556>
 8001fe4:	e6d6      	b.n	8001d94 <__aeabi_dmul+0x304>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	2400      	movs	r4, #0
 8001fea:	2200      	movs	r2, #0
 8001fec:	e5a6      	b.n	8001b3c <__aeabi_dmul+0xac>
 8001fee:	290f      	cmp	r1, #15
 8001ff0:	d1aa      	bne.n	8001f48 <__aeabi_dmul+0x4b8>
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	4652      	mov	r2, sl
 8001ff6:	031b      	lsls	r3, r3, #12
 8001ff8:	421a      	tst	r2, r3
 8001ffa:	d0a9      	beq.n	8001f50 <__aeabi_dmul+0x4c0>
 8001ffc:	421c      	tst	r4, r3
 8001ffe:	d1a7      	bne.n	8001f50 <__aeabi_dmul+0x4c0>
 8002000:	431c      	orrs	r4, r3
 8002002:	9b00      	ldr	r3, [sp, #0]
 8002004:	0002      	movs	r2, r0
 8002006:	469b      	mov	fp, r3
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <__aeabi_dmul+0x588>)
 800200a:	e597      	b.n	8001b3c <__aeabi_dmul+0xac>
 800200c:	2400      	movs	r4, #0
 800200e:	e6c1      	b.n	8001d94 <__aeabi_dmul+0x304>
 8002010:	2400      	movs	r4, #0
 8002012:	4b01      	ldr	r3, [pc, #4]	@ (8002018 <__aeabi_dmul+0x588>)
 8002014:	0022      	movs	r2, r4
 8002016:	e591      	b.n	8001b3c <__aeabi_dmul+0xac>
 8002018:	000007ff 	.word	0x000007ff
 800201c:	0000041e 	.word	0x0000041e

08002020 <__aeabi_dsub>:
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	464e      	mov	r6, r9
 8002024:	4645      	mov	r5, r8
 8002026:	46de      	mov	lr, fp
 8002028:	4657      	mov	r7, sl
 800202a:	b5e0      	push	{r5, r6, r7, lr}
 800202c:	b085      	sub	sp, #20
 800202e:	9000      	str	r0, [sp, #0]
 8002030:	9101      	str	r1, [sp, #4]
 8002032:	030c      	lsls	r4, r1, #12
 8002034:	004f      	lsls	r7, r1, #1
 8002036:	0fce      	lsrs	r6, r1, #31
 8002038:	0a61      	lsrs	r1, r4, #9
 800203a:	9c00      	ldr	r4, [sp, #0]
 800203c:	46b0      	mov	r8, r6
 800203e:	0f64      	lsrs	r4, r4, #29
 8002040:	430c      	orrs	r4, r1
 8002042:	9900      	ldr	r1, [sp, #0]
 8002044:	0d7f      	lsrs	r7, r7, #21
 8002046:	00c8      	lsls	r0, r1, #3
 8002048:	0011      	movs	r1, r2
 800204a:	001a      	movs	r2, r3
 800204c:	031b      	lsls	r3, r3, #12
 800204e:	469c      	mov	ip, r3
 8002050:	9100      	str	r1, [sp, #0]
 8002052:	9201      	str	r2, [sp, #4]
 8002054:	0051      	lsls	r1, r2, #1
 8002056:	0d4b      	lsrs	r3, r1, #21
 8002058:	4699      	mov	r9, r3
 800205a:	9b01      	ldr	r3, [sp, #4]
 800205c:	9d00      	ldr	r5, [sp, #0]
 800205e:	0fd9      	lsrs	r1, r3, #31
 8002060:	4663      	mov	r3, ip
 8002062:	0f6a      	lsrs	r2, r5, #29
 8002064:	0a5b      	lsrs	r3, r3, #9
 8002066:	4313      	orrs	r3, r2
 8002068:	00ea      	lsls	r2, r5, #3
 800206a:	4694      	mov	ip, r2
 800206c:	4693      	mov	fp, r2
 800206e:	4ac1      	ldr	r2, [pc, #772]	@ (8002374 <__aeabi_dsub+0x354>)
 8002070:	9003      	str	r0, [sp, #12]
 8002072:	9302      	str	r3, [sp, #8]
 8002074:	4591      	cmp	r9, r2
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x5a>
 8002078:	e0cd      	b.n	8002216 <__aeabi_dsub+0x1f6>
 800207a:	2501      	movs	r5, #1
 800207c:	4069      	eors	r1, r5
 800207e:	464d      	mov	r5, r9
 8002080:	1b7d      	subs	r5, r7, r5
 8002082:	46aa      	mov	sl, r5
 8002084:	428e      	cmp	r6, r1
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x6a>
 8002088:	e080      	b.n	800218c <__aeabi_dsub+0x16c>
 800208a:	2d00      	cmp	r5, #0
 800208c:	dc00      	bgt.n	8002090 <__aeabi_dsub+0x70>
 800208e:	e335      	b.n	80026fc <__aeabi_dsub+0x6dc>
 8002090:	4649      	mov	r1, r9
 8002092:	2900      	cmp	r1, #0
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x78>
 8002096:	e0df      	b.n	8002258 <__aeabi_dsub+0x238>
 8002098:	4297      	cmp	r7, r2
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x7e>
 800209c:	e194      	b.n	80023c8 <__aeabi_dsub+0x3a8>
 800209e:	4652      	mov	r2, sl
 80020a0:	2501      	movs	r5, #1
 80020a2:	2a38      	cmp	r2, #56	@ 0x38
 80020a4:	dc19      	bgt.n	80020da <__aeabi_dsub+0xba>
 80020a6:	2280      	movs	r2, #128	@ 0x80
 80020a8:	9b02      	ldr	r3, [sp, #8]
 80020aa:	0412      	lsls	r2, r2, #16
 80020ac:	4313      	orrs	r3, r2
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	4652      	mov	r2, sl
 80020b2:	2a1f      	cmp	r2, #31
 80020b4:	dd00      	ble.n	80020b8 <__aeabi_dsub+0x98>
 80020b6:	e1e3      	b.n	8002480 <__aeabi_dsub+0x460>
 80020b8:	4653      	mov	r3, sl
 80020ba:	2220      	movs	r2, #32
 80020bc:	4661      	mov	r1, ip
 80020be:	9d02      	ldr	r5, [sp, #8]
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	4095      	lsls	r5, r2
 80020c4:	40d9      	lsrs	r1, r3
 80020c6:	430d      	orrs	r5, r1
 80020c8:	4661      	mov	r1, ip
 80020ca:	4091      	lsls	r1, r2
 80020cc:	000a      	movs	r2, r1
 80020ce:	1e51      	subs	r1, r2, #1
 80020d0:	418a      	sbcs	r2, r1
 80020d2:	4315      	orrs	r5, r2
 80020d4:	9a02      	ldr	r2, [sp, #8]
 80020d6:	40da      	lsrs	r2, r3
 80020d8:	1aa4      	subs	r4, r4, r2
 80020da:	1b45      	subs	r5, r0, r5
 80020dc:	42a8      	cmp	r0, r5
 80020de:	4180      	sbcs	r0, r0
 80020e0:	4240      	negs	r0, r0
 80020e2:	1a24      	subs	r4, r4, r0
 80020e4:	0223      	lsls	r3, r4, #8
 80020e6:	d400      	bmi.n	80020ea <__aeabi_dsub+0xca>
 80020e8:	e13d      	b.n	8002366 <__aeabi_dsub+0x346>
 80020ea:	0264      	lsls	r4, r4, #9
 80020ec:	0a64      	lsrs	r4, r4, #9
 80020ee:	2c00      	cmp	r4, #0
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0xd4>
 80020f2:	e147      	b.n	8002384 <__aeabi_dsub+0x364>
 80020f4:	0020      	movs	r0, r4
 80020f6:	f000 fc05 	bl	8002904 <__clzsi2>
 80020fa:	0003      	movs	r3, r0
 80020fc:	3b08      	subs	r3, #8
 80020fe:	2120      	movs	r1, #32
 8002100:	0028      	movs	r0, r5
 8002102:	1aca      	subs	r2, r1, r3
 8002104:	40d0      	lsrs	r0, r2
 8002106:	409c      	lsls	r4, r3
 8002108:	0002      	movs	r2, r0
 800210a:	409d      	lsls	r5, r3
 800210c:	4322      	orrs	r2, r4
 800210e:	429f      	cmp	r7, r3
 8002110:	dd00      	ble.n	8002114 <__aeabi_dsub+0xf4>
 8002112:	e177      	b.n	8002404 <__aeabi_dsub+0x3e4>
 8002114:	1bd8      	subs	r0, r3, r7
 8002116:	3001      	adds	r0, #1
 8002118:	1a09      	subs	r1, r1, r0
 800211a:	002c      	movs	r4, r5
 800211c:	408d      	lsls	r5, r1
 800211e:	40c4      	lsrs	r4, r0
 8002120:	1e6b      	subs	r3, r5, #1
 8002122:	419d      	sbcs	r5, r3
 8002124:	0013      	movs	r3, r2
 8002126:	40c2      	lsrs	r2, r0
 8002128:	408b      	lsls	r3, r1
 800212a:	4325      	orrs	r5, r4
 800212c:	2700      	movs	r7, #0
 800212e:	0014      	movs	r4, r2
 8002130:	431d      	orrs	r5, r3
 8002132:	076b      	lsls	r3, r5, #29
 8002134:	d009      	beq.n	800214a <__aeabi_dsub+0x12a>
 8002136:	230f      	movs	r3, #15
 8002138:	402b      	ands	r3, r5
 800213a:	2b04      	cmp	r3, #4
 800213c:	d005      	beq.n	800214a <__aeabi_dsub+0x12a>
 800213e:	1d2b      	adds	r3, r5, #4
 8002140:	42ab      	cmp	r3, r5
 8002142:	41ad      	sbcs	r5, r5
 8002144:	426d      	negs	r5, r5
 8002146:	1964      	adds	r4, r4, r5
 8002148:	001d      	movs	r5, r3
 800214a:	0223      	lsls	r3, r4, #8
 800214c:	d400      	bmi.n	8002150 <__aeabi_dsub+0x130>
 800214e:	e140      	b.n	80023d2 <__aeabi_dsub+0x3b2>
 8002150:	4a88      	ldr	r2, [pc, #544]	@ (8002374 <__aeabi_dsub+0x354>)
 8002152:	3701      	adds	r7, #1
 8002154:	4297      	cmp	r7, r2
 8002156:	d100      	bne.n	800215a <__aeabi_dsub+0x13a>
 8002158:	e101      	b.n	800235e <__aeabi_dsub+0x33e>
 800215a:	2601      	movs	r6, #1
 800215c:	4643      	mov	r3, r8
 800215e:	4986      	ldr	r1, [pc, #536]	@ (8002378 <__aeabi_dsub+0x358>)
 8002160:	08ed      	lsrs	r5, r5, #3
 8002162:	4021      	ands	r1, r4
 8002164:	074a      	lsls	r2, r1, #29
 8002166:	432a      	orrs	r2, r5
 8002168:	057c      	lsls	r4, r7, #21
 800216a:	024d      	lsls	r5, r1, #9
 800216c:	0b2d      	lsrs	r5, r5, #12
 800216e:	0d64      	lsrs	r4, r4, #21
 8002170:	401e      	ands	r6, r3
 8002172:	0524      	lsls	r4, r4, #20
 8002174:	432c      	orrs	r4, r5
 8002176:	07f6      	lsls	r6, r6, #31
 8002178:	4334      	orrs	r4, r6
 800217a:	0010      	movs	r0, r2
 800217c:	0021      	movs	r1, r4
 800217e:	b005      	add	sp, #20
 8002180:	bcf0      	pop	{r4, r5, r6, r7}
 8002182:	46bb      	mov	fp, r7
 8002184:	46b2      	mov	sl, r6
 8002186:	46a9      	mov	r9, r5
 8002188:	46a0      	mov	r8, r4
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218c:	2d00      	cmp	r5, #0
 800218e:	dc00      	bgt.n	8002192 <__aeabi_dsub+0x172>
 8002190:	e2d0      	b.n	8002734 <__aeabi_dsub+0x714>
 8002192:	4649      	mov	r1, r9
 8002194:	2900      	cmp	r1, #0
 8002196:	d000      	beq.n	800219a <__aeabi_dsub+0x17a>
 8002198:	e0d4      	b.n	8002344 <__aeabi_dsub+0x324>
 800219a:	4661      	mov	r1, ip
 800219c:	9b02      	ldr	r3, [sp, #8]
 800219e:	4319      	orrs	r1, r3
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dsub+0x184>
 80021a2:	e12b      	b.n	80023fc <__aeabi_dsub+0x3dc>
 80021a4:	1e69      	subs	r1, r5, #1
 80021a6:	2d01      	cmp	r5, #1
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x18c>
 80021aa:	e1d9      	b.n	8002560 <__aeabi_dsub+0x540>
 80021ac:	4295      	cmp	r5, r2
 80021ae:	d100      	bne.n	80021b2 <__aeabi_dsub+0x192>
 80021b0:	e10a      	b.n	80023c8 <__aeabi_dsub+0x3a8>
 80021b2:	2501      	movs	r5, #1
 80021b4:	2938      	cmp	r1, #56	@ 0x38
 80021b6:	dc17      	bgt.n	80021e8 <__aeabi_dsub+0x1c8>
 80021b8:	468a      	mov	sl, r1
 80021ba:	4653      	mov	r3, sl
 80021bc:	2b1f      	cmp	r3, #31
 80021be:	dd00      	ble.n	80021c2 <__aeabi_dsub+0x1a2>
 80021c0:	e1e7      	b.n	8002592 <__aeabi_dsub+0x572>
 80021c2:	2220      	movs	r2, #32
 80021c4:	1ad2      	subs	r2, r2, r3
 80021c6:	9b02      	ldr	r3, [sp, #8]
 80021c8:	4661      	mov	r1, ip
 80021ca:	4093      	lsls	r3, r2
 80021cc:	001d      	movs	r5, r3
 80021ce:	4653      	mov	r3, sl
 80021d0:	40d9      	lsrs	r1, r3
 80021d2:	4663      	mov	r3, ip
 80021d4:	4093      	lsls	r3, r2
 80021d6:	001a      	movs	r2, r3
 80021d8:	430d      	orrs	r5, r1
 80021da:	1e51      	subs	r1, r2, #1
 80021dc:	418a      	sbcs	r2, r1
 80021de:	4653      	mov	r3, sl
 80021e0:	4315      	orrs	r5, r2
 80021e2:	9a02      	ldr	r2, [sp, #8]
 80021e4:	40da      	lsrs	r2, r3
 80021e6:	18a4      	adds	r4, r4, r2
 80021e8:	182d      	adds	r5, r5, r0
 80021ea:	4285      	cmp	r5, r0
 80021ec:	4180      	sbcs	r0, r0
 80021ee:	4240      	negs	r0, r0
 80021f0:	1824      	adds	r4, r4, r0
 80021f2:	0223      	lsls	r3, r4, #8
 80021f4:	d400      	bmi.n	80021f8 <__aeabi_dsub+0x1d8>
 80021f6:	e0b6      	b.n	8002366 <__aeabi_dsub+0x346>
 80021f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002374 <__aeabi_dsub+0x354>)
 80021fa:	3701      	adds	r7, #1
 80021fc:	429f      	cmp	r7, r3
 80021fe:	d100      	bne.n	8002202 <__aeabi_dsub+0x1e2>
 8002200:	e0ad      	b.n	800235e <__aeabi_dsub+0x33e>
 8002202:	2101      	movs	r1, #1
 8002204:	4b5c      	ldr	r3, [pc, #368]	@ (8002378 <__aeabi_dsub+0x358>)
 8002206:	086a      	lsrs	r2, r5, #1
 8002208:	401c      	ands	r4, r3
 800220a:	4029      	ands	r1, r5
 800220c:	430a      	orrs	r2, r1
 800220e:	07e5      	lsls	r5, r4, #31
 8002210:	4315      	orrs	r5, r2
 8002212:	0864      	lsrs	r4, r4, #1
 8002214:	e78d      	b.n	8002132 <__aeabi_dsub+0x112>
 8002216:	4a59      	ldr	r2, [pc, #356]	@ (800237c <__aeabi_dsub+0x35c>)
 8002218:	9b02      	ldr	r3, [sp, #8]
 800221a:	4692      	mov	sl, r2
 800221c:	4662      	mov	r2, ip
 800221e:	44ba      	add	sl, r7
 8002220:	431a      	orrs	r2, r3
 8002222:	d02c      	beq.n	800227e <__aeabi_dsub+0x25e>
 8002224:	428e      	cmp	r6, r1
 8002226:	d02e      	beq.n	8002286 <__aeabi_dsub+0x266>
 8002228:	4652      	mov	r2, sl
 800222a:	2a00      	cmp	r2, #0
 800222c:	d060      	beq.n	80022f0 <__aeabi_dsub+0x2d0>
 800222e:	2f00      	cmp	r7, #0
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x214>
 8002232:	e0db      	b.n	80023ec <__aeabi_dsub+0x3cc>
 8002234:	4663      	mov	r3, ip
 8002236:	000e      	movs	r6, r1
 8002238:	9c02      	ldr	r4, [sp, #8]
 800223a:	08d8      	lsrs	r0, r3, #3
 800223c:	0762      	lsls	r2, r4, #29
 800223e:	4302      	orrs	r2, r0
 8002240:	08e4      	lsrs	r4, r4, #3
 8002242:	0013      	movs	r3, r2
 8002244:	4323      	orrs	r3, r4
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x22a>
 8002248:	e254      	b.n	80026f4 <__aeabi_dsub+0x6d4>
 800224a:	2580      	movs	r5, #128	@ 0x80
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	4325      	orrs	r5, r4
 8002250:	032d      	lsls	r5, r5, #12
 8002252:	4c48      	ldr	r4, [pc, #288]	@ (8002374 <__aeabi_dsub+0x354>)
 8002254:	0b2d      	lsrs	r5, r5, #12
 8002256:	e78c      	b.n	8002172 <__aeabi_dsub+0x152>
 8002258:	4661      	mov	r1, ip
 800225a:	9b02      	ldr	r3, [sp, #8]
 800225c:	4319      	orrs	r1, r3
 800225e:	d100      	bne.n	8002262 <__aeabi_dsub+0x242>
 8002260:	e0cc      	b.n	80023fc <__aeabi_dsub+0x3dc>
 8002262:	0029      	movs	r1, r5
 8002264:	3901      	subs	r1, #1
 8002266:	2d01      	cmp	r5, #1
 8002268:	d100      	bne.n	800226c <__aeabi_dsub+0x24c>
 800226a:	e188      	b.n	800257e <__aeabi_dsub+0x55e>
 800226c:	4295      	cmp	r5, r2
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x252>
 8002270:	e0aa      	b.n	80023c8 <__aeabi_dsub+0x3a8>
 8002272:	2501      	movs	r5, #1
 8002274:	2938      	cmp	r1, #56	@ 0x38
 8002276:	dd00      	ble.n	800227a <__aeabi_dsub+0x25a>
 8002278:	e72f      	b.n	80020da <__aeabi_dsub+0xba>
 800227a:	468a      	mov	sl, r1
 800227c:	e718      	b.n	80020b0 <__aeabi_dsub+0x90>
 800227e:	2201      	movs	r2, #1
 8002280:	4051      	eors	r1, r2
 8002282:	428e      	cmp	r6, r1
 8002284:	d1d0      	bne.n	8002228 <__aeabi_dsub+0x208>
 8002286:	4653      	mov	r3, sl
 8002288:	2b00      	cmp	r3, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x26e>
 800228c:	e0be      	b.n	800240c <__aeabi_dsub+0x3ec>
 800228e:	2f00      	cmp	r7, #0
 8002290:	d000      	beq.n	8002294 <__aeabi_dsub+0x274>
 8002292:	e138      	b.n	8002506 <__aeabi_dsub+0x4e6>
 8002294:	46ca      	mov	sl, r9
 8002296:	0022      	movs	r2, r4
 8002298:	4302      	orrs	r2, r0
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x27e>
 800229c:	e1e2      	b.n	8002664 <__aeabi_dsub+0x644>
 800229e:	4653      	mov	r3, sl
 80022a0:	1e59      	subs	r1, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d100      	bne.n	80022a8 <__aeabi_dsub+0x288>
 80022a6:	e20d      	b.n	80026c4 <__aeabi_dsub+0x6a4>
 80022a8:	4a32      	ldr	r2, [pc, #200]	@ (8002374 <__aeabi_dsub+0x354>)
 80022aa:	4592      	cmp	sl, r2
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x290>
 80022ae:	e1d2      	b.n	8002656 <__aeabi_dsub+0x636>
 80022b0:	2701      	movs	r7, #1
 80022b2:	2938      	cmp	r1, #56	@ 0x38
 80022b4:	dc13      	bgt.n	80022de <__aeabi_dsub+0x2be>
 80022b6:	291f      	cmp	r1, #31
 80022b8:	dd00      	ble.n	80022bc <__aeabi_dsub+0x29c>
 80022ba:	e1ee      	b.n	800269a <__aeabi_dsub+0x67a>
 80022bc:	2220      	movs	r2, #32
 80022be:	9b02      	ldr	r3, [sp, #8]
 80022c0:	1a52      	subs	r2, r2, r1
 80022c2:	0025      	movs	r5, r4
 80022c4:	0007      	movs	r7, r0
 80022c6:	469a      	mov	sl, r3
 80022c8:	40cc      	lsrs	r4, r1
 80022ca:	4090      	lsls	r0, r2
 80022cc:	4095      	lsls	r5, r2
 80022ce:	40cf      	lsrs	r7, r1
 80022d0:	44a2      	add	sl, r4
 80022d2:	1e42      	subs	r2, r0, #1
 80022d4:	4190      	sbcs	r0, r2
 80022d6:	4653      	mov	r3, sl
 80022d8:	432f      	orrs	r7, r5
 80022da:	4307      	orrs	r7, r0
 80022dc:	9302      	str	r3, [sp, #8]
 80022de:	003d      	movs	r5, r7
 80022e0:	4465      	add	r5, ip
 80022e2:	4565      	cmp	r5, ip
 80022e4:	4192      	sbcs	r2, r2
 80022e6:	9b02      	ldr	r3, [sp, #8]
 80022e8:	4252      	negs	r2, r2
 80022ea:	464f      	mov	r7, r9
 80022ec:	18d4      	adds	r4, r2, r3
 80022ee:	e780      	b.n	80021f2 <__aeabi_dsub+0x1d2>
 80022f0:	4a23      	ldr	r2, [pc, #140]	@ (8002380 <__aeabi_dsub+0x360>)
 80022f2:	1c7d      	adds	r5, r7, #1
 80022f4:	4215      	tst	r5, r2
 80022f6:	d000      	beq.n	80022fa <__aeabi_dsub+0x2da>
 80022f8:	e0aa      	b.n	8002450 <__aeabi_dsub+0x430>
 80022fa:	4662      	mov	r2, ip
 80022fc:	0025      	movs	r5, r4
 80022fe:	9b02      	ldr	r3, [sp, #8]
 8002300:	4305      	orrs	r5, r0
 8002302:	431a      	orrs	r2, r3
 8002304:	2f00      	cmp	r7, #0
 8002306:	d000      	beq.n	800230a <__aeabi_dsub+0x2ea>
 8002308:	e0f5      	b.n	80024f6 <__aeabi_dsub+0x4d6>
 800230a:	2d00      	cmp	r5, #0
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x2f0>
 800230e:	e16b      	b.n	80025e8 <__aeabi_dsub+0x5c8>
 8002310:	2a00      	cmp	r2, #0
 8002312:	d100      	bne.n	8002316 <__aeabi_dsub+0x2f6>
 8002314:	e152      	b.n	80025bc <__aeabi_dsub+0x59c>
 8002316:	4663      	mov	r3, ip
 8002318:	1ac5      	subs	r5, r0, r3
 800231a:	9b02      	ldr	r3, [sp, #8]
 800231c:	1ae2      	subs	r2, r4, r3
 800231e:	42a8      	cmp	r0, r5
 8002320:	419b      	sbcs	r3, r3
 8002322:	425b      	negs	r3, r3
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	021a      	lsls	r2, r3, #8
 8002328:	d400      	bmi.n	800232c <__aeabi_dsub+0x30c>
 800232a:	e1d5      	b.n	80026d8 <__aeabi_dsub+0x6b8>
 800232c:	4663      	mov	r3, ip
 800232e:	1a1d      	subs	r5, r3, r0
 8002330:	45ac      	cmp	ip, r5
 8002332:	4192      	sbcs	r2, r2
 8002334:	2601      	movs	r6, #1
 8002336:	9b02      	ldr	r3, [sp, #8]
 8002338:	4252      	negs	r2, r2
 800233a:	1b1c      	subs	r4, r3, r4
 800233c:	4688      	mov	r8, r1
 800233e:	1aa4      	subs	r4, r4, r2
 8002340:	400e      	ands	r6, r1
 8002342:	e6f6      	b.n	8002132 <__aeabi_dsub+0x112>
 8002344:	4297      	cmp	r7, r2
 8002346:	d03f      	beq.n	80023c8 <__aeabi_dsub+0x3a8>
 8002348:	4652      	mov	r2, sl
 800234a:	2501      	movs	r5, #1
 800234c:	2a38      	cmp	r2, #56	@ 0x38
 800234e:	dd00      	ble.n	8002352 <__aeabi_dsub+0x332>
 8002350:	e74a      	b.n	80021e8 <__aeabi_dsub+0x1c8>
 8002352:	2280      	movs	r2, #128	@ 0x80
 8002354:	9b02      	ldr	r3, [sp, #8]
 8002356:	0412      	lsls	r2, r2, #16
 8002358:	4313      	orrs	r3, r2
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	e72d      	b.n	80021ba <__aeabi_dsub+0x19a>
 800235e:	003c      	movs	r4, r7
 8002360:	2500      	movs	r5, #0
 8002362:	2200      	movs	r2, #0
 8002364:	e705      	b.n	8002172 <__aeabi_dsub+0x152>
 8002366:	2307      	movs	r3, #7
 8002368:	402b      	ands	r3, r5
 800236a:	2b00      	cmp	r3, #0
 800236c:	d000      	beq.n	8002370 <__aeabi_dsub+0x350>
 800236e:	e6e2      	b.n	8002136 <__aeabi_dsub+0x116>
 8002370:	e06b      	b.n	800244a <__aeabi_dsub+0x42a>
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	000007ff 	.word	0x000007ff
 8002378:	ff7fffff 	.word	0xff7fffff
 800237c:	fffff801 	.word	0xfffff801
 8002380:	000007fe 	.word	0x000007fe
 8002384:	0028      	movs	r0, r5
 8002386:	f000 fabd 	bl	8002904 <__clzsi2>
 800238a:	0003      	movs	r3, r0
 800238c:	3318      	adds	r3, #24
 800238e:	2b1f      	cmp	r3, #31
 8002390:	dc00      	bgt.n	8002394 <__aeabi_dsub+0x374>
 8002392:	e6b4      	b.n	80020fe <__aeabi_dsub+0xde>
 8002394:	002a      	movs	r2, r5
 8002396:	3808      	subs	r0, #8
 8002398:	4082      	lsls	r2, r0
 800239a:	429f      	cmp	r7, r3
 800239c:	dd00      	ble.n	80023a0 <__aeabi_dsub+0x380>
 800239e:	e0b9      	b.n	8002514 <__aeabi_dsub+0x4f4>
 80023a0:	1bdb      	subs	r3, r3, r7
 80023a2:	1c58      	adds	r0, r3, #1
 80023a4:	281f      	cmp	r0, #31
 80023a6:	dc00      	bgt.n	80023aa <__aeabi_dsub+0x38a>
 80023a8:	e1a0      	b.n	80026ec <__aeabi_dsub+0x6cc>
 80023aa:	0015      	movs	r5, r2
 80023ac:	3b1f      	subs	r3, #31
 80023ae:	40dd      	lsrs	r5, r3
 80023b0:	2820      	cmp	r0, #32
 80023b2:	d005      	beq.n	80023c0 <__aeabi_dsub+0x3a0>
 80023b4:	2340      	movs	r3, #64	@ 0x40
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	409a      	lsls	r2, r3
 80023ba:	1e53      	subs	r3, r2, #1
 80023bc:	419a      	sbcs	r2, r3
 80023be:	4315      	orrs	r5, r2
 80023c0:	2307      	movs	r3, #7
 80023c2:	2700      	movs	r7, #0
 80023c4:	402b      	ands	r3, r5
 80023c6:	e7d0      	b.n	800236a <__aeabi_dsub+0x34a>
 80023c8:	08c0      	lsrs	r0, r0, #3
 80023ca:	0762      	lsls	r2, r4, #29
 80023cc:	4302      	orrs	r2, r0
 80023ce:	08e4      	lsrs	r4, r4, #3
 80023d0:	e737      	b.n	8002242 <__aeabi_dsub+0x222>
 80023d2:	08ea      	lsrs	r2, r5, #3
 80023d4:	0763      	lsls	r3, r4, #29
 80023d6:	431a      	orrs	r2, r3
 80023d8:	4bd3      	ldr	r3, [pc, #844]	@ (8002728 <__aeabi_dsub+0x708>)
 80023da:	08e4      	lsrs	r4, r4, #3
 80023dc:	429f      	cmp	r7, r3
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0x3c2>
 80023e0:	e72f      	b.n	8002242 <__aeabi_dsub+0x222>
 80023e2:	0324      	lsls	r4, r4, #12
 80023e4:	0b25      	lsrs	r5, r4, #12
 80023e6:	057c      	lsls	r4, r7, #21
 80023e8:	0d64      	lsrs	r4, r4, #21
 80023ea:	e6c2      	b.n	8002172 <__aeabi_dsub+0x152>
 80023ec:	46ca      	mov	sl, r9
 80023ee:	0022      	movs	r2, r4
 80023f0:	4302      	orrs	r2, r0
 80023f2:	d158      	bne.n	80024a6 <__aeabi_dsub+0x486>
 80023f4:	4663      	mov	r3, ip
 80023f6:	000e      	movs	r6, r1
 80023f8:	9c02      	ldr	r4, [sp, #8]
 80023fa:	9303      	str	r3, [sp, #12]
 80023fc:	9b03      	ldr	r3, [sp, #12]
 80023fe:	4657      	mov	r7, sl
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	e7e7      	b.n	80023d4 <__aeabi_dsub+0x3b4>
 8002404:	4cc9      	ldr	r4, [pc, #804]	@ (800272c <__aeabi_dsub+0x70c>)
 8002406:	1aff      	subs	r7, r7, r3
 8002408:	4014      	ands	r4, r2
 800240a:	e692      	b.n	8002132 <__aeabi_dsub+0x112>
 800240c:	4dc8      	ldr	r5, [pc, #800]	@ (8002730 <__aeabi_dsub+0x710>)
 800240e:	1c7a      	adds	r2, r7, #1
 8002410:	422a      	tst	r2, r5
 8002412:	d000      	beq.n	8002416 <__aeabi_dsub+0x3f6>
 8002414:	e084      	b.n	8002520 <__aeabi_dsub+0x500>
 8002416:	0022      	movs	r2, r4
 8002418:	4302      	orrs	r2, r0
 800241a:	2f00      	cmp	r7, #0
 800241c:	d000      	beq.n	8002420 <__aeabi_dsub+0x400>
 800241e:	e0ef      	b.n	8002600 <__aeabi_dsub+0x5e0>
 8002420:	2a00      	cmp	r2, #0
 8002422:	d100      	bne.n	8002426 <__aeabi_dsub+0x406>
 8002424:	e0e5      	b.n	80025f2 <__aeabi_dsub+0x5d2>
 8002426:	4662      	mov	r2, ip
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	430a      	orrs	r2, r1
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x410>
 800242e:	e0c5      	b.n	80025bc <__aeabi_dsub+0x59c>
 8002430:	4663      	mov	r3, ip
 8002432:	18c5      	adds	r5, r0, r3
 8002434:	468c      	mov	ip, r1
 8002436:	4285      	cmp	r5, r0
 8002438:	4180      	sbcs	r0, r0
 800243a:	4464      	add	r4, ip
 800243c:	4240      	negs	r0, r0
 800243e:	1824      	adds	r4, r4, r0
 8002440:	0223      	lsls	r3, r4, #8
 8002442:	d502      	bpl.n	800244a <__aeabi_dsub+0x42a>
 8002444:	4bb9      	ldr	r3, [pc, #740]	@ (800272c <__aeabi_dsub+0x70c>)
 8002446:	3701      	adds	r7, #1
 8002448:	401c      	ands	r4, r3
 800244a:	46ba      	mov	sl, r7
 800244c:	9503      	str	r5, [sp, #12]
 800244e:	e7d5      	b.n	80023fc <__aeabi_dsub+0x3dc>
 8002450:	4662      	mov	r2, ip
 8002452:	1a85      	subs	r5, r0, r2
 8002454:	42a8      	cmp	r0, r5
 8002456:	4192      	sbcs	r2, r2
 8002458:	4252      	negs	r2, r2
 800245a:	4691      	mov	r9, r2
 800245c:	9b02      	ldr	r3, [sp, #8]
 800245e:	1ae3      	subs	r3, r4, r3
 8002460:	001a      	movs	r2, r3
 8002462:	464b      	mov	r3, r9
 8002464:	1ad2      	subs	r2, r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	4691      	mov	r9, r2
 800246a:	021a      	lsls	r2, r3, #8
 800246c:	d46c      	bmi.n	8002548 <__aeabi_dsub+0x528>
 800246e:	464a      	mov	r2, r9
 8002470:	464c      	mov	r4, r9
 8002472:	432a      	orrs	r2, r5
 8002474:	d000      	beq.n	8002478 <__aeabi_dsub+0x458>
 8002476:	e63a      	b.n	80020ee <__aeabi_dsub+0xce>
 8002478:	2600      	movs	r6, #0
 800247a:	2400      	movs	r4, #0
 800247c:	2500      	movs	r5, #0
 800247e:	e678      	b.n	8002172 <__aeabi_dsub+0x152>
 8002480:	9902      	ldr	r1, [sp, #8]
 8002482:	4653      	mov	r3, sl
 8002484:	000d      	movs	r5, r1
 8002486:	3a20      	subs	r2, #32
 8002488:	40d5      	lsrs	r5, r2
 800248a:	2b20      	cmp	r3, #32
 800248c:	d006      	beq.n	800249c <__aeabi_dsub+0x47c>
 800248e:	2240      	movs	r2, #64	@ 0x40
 8002490:	1ad2      	subs	r2, r2, r3
 8002492:	000b      	movs	r3, r1
 8002494:	4093      	lsls	r3, r2
 8002496:	4662      	mov	r2, ip
 8002498:	431a      	orrs	r2, r3
 800249a:	4693      	mov	fp, r2
 800249c:	465b      	mov	r3, fp
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	4193      	sbcs	r3, r2
 80024a2:	431d      	orrs	r5, r3
 80024a4:	e619      	b.n	80020da <__aeabi_dsub+0xba>
 80024a6:	4653      	mov	r3, sl
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dsub+0x490>
 80024ae:	e0c6      	b.n	800263e <__aeabi_dsub+0x61e>
 80024b0:	4e9d      	ldr	r6, [pc, #628]	@ (8002728 <__aeabi_dsub+0x708>)
 80024b2:	45b2      	cmp	sl, r6
 80024b4:	d100      	bne.n	80024b8 <__aeabi_dsub+0x498>
 80024b6:	e6bd      	b.n	8002234 <__aeabi_dsub+0x214>
 80024b8:	4688      	mov	r8, r1
 80024ba:	000e      	movs	r6, r1
 80024bc:	2501      	movs	r5, #1
 80024be:	2a38      	cmp	r2, #56	@ 0x38
 80024c0:	dc10      	bgt.n	80024e4 <__aeabi_dsub+0x4c4>
 80024c2:	2a1f      	cmp	r2, #31
 80024c4:	dc7f      	bgt.n	80025c6 <__aeabi_dsub+0x5a6>
 80024c6:	2120      	movs	r1, #32
 80024c8:	0025      	movs	r5, r4
 80024ca:	1a89      	subs	r1, r1, r2
 80024cc:	0007      	movs	r7, r0
 80024ce:	4088      	lsls	r0, r1
 80024d0:	408d      	lsls	r5, r1
 80024d2:	40d7      	lsrs	r7, r2
 80024d4:	40d4      	lsrs	r4, r2
 80024d6:	1e41      	subs	r1, r0, #1
 80024d8:	4188      	sbcs	r0, r1
 80024da:	9b02      	ldr	r3, [sp, #8]
 80024dc:	433d      	orrs	r5, r7
 80024de:	1b1b      	subs	r3, r3, r4
 80024e0:	4305      	orrs	r5, r0
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	4662      	mov	r2, ip
 80024e6:	1b55      	subs	r5, r2, r5
 80024e8:	45ac      	cmp	ip, r5
 80024ea:	4192      	sbcs	r2, r2
 80024ec:	9b02      	ldr	r3, [sp, #8]
 80024ee:	4252      	negs	r2, r2
 80024f0:	464f      	mov	r7, r9
 80024f2:	1a9c      	subs	r4, r3, r2
 80024f4:	e5f6      	b.n	80020e4 <__aeabi_dsub+0xc4>
 80024f6:	2d00      	cmp	r5, #0
 80024f8:	d000      	beq.n	80024fc <__aeabi_dsub+0x4dc>
 80024fa:	e0b7      	b.n	800266c <__aeabi_dsub+0x64c>
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x4e2>
 8002500:	e0f0      	b.n	80026e4 <__aeabi_dsub+0x6c4>
 8002502:	2601      	movs	r6, #1
 8002504:	400e      	ands	r6, r1
 8002506:	4663      	mov	r3, ip
 8002508:	9802      	ldr	r0, [sp, #8]
 800250a:	08d9      	lsrs	r1, r3, #3
 800250c:	0742      	lsls	r2, r0, #29
 800250e:	430a      	orrs	r2, r1
 8002510:	08c4      	lsrs	r4, r0, #3
 8002512:	e696      	b.n	8002242 <__aeabi_dsub+0x222>
 8002514:	4c85      	ldr	r4, [pc, #532]	@ (800272c <__aeabi_dsub+0x70c>)
 8002516:	1aff      	subs	r7, r7, r3
 8002518:	4014      	ands	r4, r2
 800251a:	0762      	lsls	r2, r4, #29
 800251c:	08e4      	lsrs	r4, r4, #3
 800251e:	e760      	b.n	80023e2 <__aeabi_dsub+0x3c2>
 8002520:	4981      	ldr	r1, [pc, #516]	@ (8002728 <__aeabi_dsub+0x708>)
 8002522:	428a      	cmp	r2, r1
 8002524:	d100      	bne.n	8002528 <__aeabi_dsub+0x508>
 8002526:	e0c9      	b.n	80026bc <__aeabi_dsub+0x69c>
 8002528:	4663      	mov	r3, ip
 800252a:	18c1      	adds	r1, r0, r3
 800252c:	4281      	cmp	r1, r0
 800252e:	4180      	sbcs	r0, r0
 8002530:	9b02      	ldr	r3, [sp, #8]
 8002532:	4240      	negs	r0, r0
 8002534:	18e3      	adds	r3, r4, r3
 8002536:	181b      	adds	r3, r3, r0
 8002538:	07dd      	lsls	r5, r3, #31
 800253a:	085c      	lsrs	r4, r3, #1
 800253c:	2307      	movs	r3, #7
 800253e:	0849      	lsrs	r1, r1, #1
 8002540:	430d      	orrs	r5, r1
 8002542:	0017      	movs	r7, r2
 8002544:	402b      	ands	r3, r5
 8002546:	e710      	b.n	800236a <__aeabi_dsub+0x34a>
 8002548:	4663      	mov	r3, ip
 800254a:	1a1d      	subs	r5, r3, r0
 800254c:	45ac      	cmp	ip, r5
 800254e:	4192      	sbcs	r2, r2
 8002550:	2601      	movs	r6, #1
 8002552:	9b02      	ldr	r3, [sp, #8]
 8002554:	4252      	negs	r2, r2
 8002556:	1b1c      	subs	r4, r3, r4
 8002558:	4688      	mov	r8, r1
 800255a:	1aa4      	subs	r4, r4, r2
 800255c:	400e      	ands	r6, r1
 800255e:	e5c6      	b.n	80020ee <__aeabi_dsub+0xce>
 8002560:	4663      	mov	r3, ip
 8002562:	18c5      	adds	r5, r0, r3
 8002564:	9b02      	ldr	r3, [sp, #8]
 8002566:	4285      	cmp	r5, r0
 8002568:	4180      	sbcs	r0, r0
 800256a:	469c      	mov	ip, r3
 800256c:	4240      	negs	r0, r0
 800256e:	4464      	add	r4, ip
 8002570:	1824      	adds	r4, r4, r0
 8002572:	2701      	movs	r7, #1
 8002574:	0223      	lsls	r3, r4, #8
 8002576:	d400      	bmi.n	800257a <__aeabi_dsub+0x55a>
 8002578:	e6f5      	b.n	8002366 <__aeabi_dsub+0x346>
 800257a:	2702      	movs	r7, #2
 800257c:	e641      	b.n	8002202 <__aeabi_dsub+0x1e2>
 800257e:	4663      	mov	r3, ip
 8002580:	1ac5      	subs	r5, r0, r3
 8002582:	42a8      	cmp	r0, r5
 8002584:	4180      	sbcs	r0, r0
 8002586:	9b02      	ldr	r3, [sp, #8]
 8002588:	4240      	negs	r0, r0
 800258a:	1ae4      	subs	r4, r4, r3
 800258c:	2701      	movs	r7, #1
 800258e:	1a24      	subs	r4, r4, r0
 8002590:	e5a8      	b.n	80020e4 <__aeabi_dsub+0xc4>
 8002592:	9d02      	ldr	r5, [sp, #8]
 8002594:	4652      	mov	r2, sl
 8002596:	002b      	movs	r3, r5
 8002598:	3a20      	subs	r2, #32
 800259a:	40d3      	lsrs	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	4653      	mov	r3, sl
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d006      	beq.n	80025b2 <__aeabi_dsub+0x592>
 80025a4:	2240      	movs	r2, #64	@ 0x40
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	002b      	movs	r3, r5
 80025aa:	4093      	lsls	r3, r2
 80025ac:	4662      	mov	r2, ip
 80025ae:	431a      	orrs	r2, r3
 80025b0:	4693      	mov	fp, r2
 80025b2:	465d      	mov	r5, fp
 80025b4:	1e6b      	subs	r3, r5, #1
 80025b6:	419d      	sbcs	r5, r3
 80025b8:	430d      	orrs	r5, r1
 80025ba:	e615      	b.n	80021e8 <__aeabi_dsub+0x1c8>
 80025bc:	0762      	lsls	r2, r4, #29
 80025be:	08c0      	lsrs	r0, r0, #3
 80025c0:	4302      	orrs	r2, r0
 80025c2:	08e4      	lsrs	r4, r4, #3
 80025c4:	e70d      	b.n	80023e2 <__aeabi_dsub+0x3c2>
 80025c6:	0011      	movs	r1, r2
 80025c8:	0027      	movs	r7, r4
 80025ca:	3920      	subs	r1, #32
 80025cc:	40cf      	lsrs	r7, r1
 80025ce:	2a20      	cmp	r2, #32
 80025d0:	d005      	beq.n	80025de <__aeabi_dsub+0x5be>
 80025d2:	2140      	movs	r1, #64	@ 0x40
 80025d4:	1a8a      	subs	r2, r1, r2
 80025d6:	4094      	lsls	r4, r2
 80025d8:	0025      	movs	r5, r4
 80025da:	4305      	orrs	r5, r0
 80025dc:	9503      	str	r5, [sp, #12]
 80025de:	9d03      	ldr	r5, [sp, #12]
 80025e0:	1e6a      	subs	r2, r5, #1
 80025e2:	4195      	sbcs	r5, r2
 80025e4:	433d      	orrs	r5, r7
 80025e6:	e77d      	b.n	80024e4 <__aeabi_dsub+0x4c4>
 80025e8:	2a00      	cmp	r2, #0
 80025ea:	d100      	bne.n	80025ee <__aeabi_dsub+0x5ce>
 80025ec:	e744      	b.n	8002478 <__aeabi_dsub+0x458>
 80025ee:	2601      	movs	r6, #1
 80025f0:	400e      	ands	r6, r1
 80025f2:	4663      	mov	r3, ip
 80025f4:	08d9      	lsrs	r1, r3, #3
 80025f6:	9b02      	ldr	r3, [sp, #8]
 80025f8:	075a      	lsls	r2, r3, #29
 80025fa:	430a      	orrs	r2, r1
 80025fc:	08dc      	lsrs	r4, r3, #3
 80025fe:	e6f0      	b.n	80023e2 <__aeabi_dsub+0x3c2>
 8002600:	2a00      	cmp	r2, #0
 8002602:	d028      	beq.n	8002656 <__aeabi_dsub+0x636>
 8002604:	4662      	mov	r2, ip
 8002606:	9f02      	ldr	r7, [sp, #8]
 8002608:	08c0      	lsrs	r0, r0, #3
 800260a:	433a      	orrs	r2, r7
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x5f0>
 800260e:	e6dc      	b.n	80023ca <__aeabi_dsub+0x3aa>
 8002610:	0762      	lsls	r2, r4, #29
 8002612:	4310      	orrs	r0, r2
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	08e4      	lsrs	r4, r4, #3
 8002618:	0312      	lsls	r2, r2, #12
 800261a:	4214      	tst	r4, r2
 800261c:	d009      	beq.n	8002632 <__aeabi_dsub+0x612>
 800261e:	08fd      	lsrs	r5, r7, #3
 8002620:	4215      	tst	r5, r2
 8002622:	d106      	bne.n	8002632 <__aeabi_dsub+0x612>
 8002624:	4663      	mov	r3, ip
 8002626:	2601      	movs	r6, #1
 8002628:	002c      	movs	r4, r5
 800262a:	08d8      	lsrs	r0, r3, #3
 800262c:	077b      	lsls	r3, r7, #29
 800262e:	4318      	orrs	r0, r3
 8002630:	400e      	ands	r6, r1
 8002632:	0f42      	lsrs	r2, r0, #29
 8002634:	00c0      	lsls	r0, r0, #3
 8002636:	08c0      	lsrs	r0, r0, #3
 8002638:	0752      	lsls	r2, r2, #29
 800263a:	4302      	orrs	r2, r0
 800263c:	e601      	b.n	8002242 <__aeabi_dsub+0x222>
 800263e:	4663      	mov	r3, ip
 8002640:	1a1d      	subs	r5, r3, r0
 8002642:	45ac      	cmp	ip, r5
 8002644:	4192      	sbcs	r2, r2
 8002646:	9b02      	ldr	r3, [sp, #8]
 8002648:	4252      	negs	r2, r2
 800264a:	1b1c      	subs	r4, r3, r4
 800264c:	000e      	movs	r6, r1
 800264e:	4688      	mov	r8, r1
 8002650:	2701      	movs	r7, #1
 8002652:	1aa4      	subs	r4, r4, r2
 8002654:	e546      	b.n	80020e4 <__aeabi_dsub+0xc4>
 8002656:	4663      	mov	r3, ip
 8002658:	08d9      	lsrs	r1, r3, #3
 800265a:	9b02      	ldr	r3, [sp, #8]
 800265c:	075a      	lsls	r2, r3, #29
 800265e:	430a      	orrs	r2, r1
 8002660:	08dc      	lsrs	r4, r3, #3
 8002662:	e5ee      	b.n	8002242 <__aeabi_dsub+0x222>
 8002664:	4663      	mov	r3, ip
 8002666:	9c02      	ldr	r4, [sp, #8]
 8002668:	9303      	str	r3, [sp, #12]
 800266a:	e6c7      	b.n	80023fc <__aeabi_dsub+0x3dc>
 800266c:	08c0      	lsrs	r0, r0, #3
 800266e:	2a00      	cmp	r2, #0
 8002670:	d100      	bne.n	8002674 <__aeabi_dsub+0x654>
 8002672:	e6aa      	b.n	80023ca <__aeabi_dsub+0x3aa>
 8002674:	0762      	lsls	r2, r4, #29
 8002676:	4310      	orrs	r0, r2
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	08e4      	lsrs	r4, r4, #3
 800267c:	0312      	lsls	r2, r2, #12
 800267e:	4214      	tst	r4, r2
 8002680:	d0d7      	beq.n	8002632 <__aeabi_dsub+0x612>
 8002682:	9f02      	ldr	r7, [sp, #8]
 8002684:	08fd      	lsrs	r5, r7, #3
 8002686:	4215      	tst	r5, r2
 8002688:	d1d3      	bne.n	8002632 <__aeabi_dsub+0x612>
 800268a:	4663      	mov	r3, ip
 800268c:	2601      	movs	r6, #1
 800268e:	08d8      	lsrs	r0, r3, #3
 8002690:	077b      	lsls	r3, r7, #29
 8002692:	002c      	movs	r4, r5
 8002694:	4318      	orrs	r0, r3
 8002696:	400e      	ands	r6, r1
 8002698:	e7cb      	b.n	8002632 <__aeabi_dsub+0x612>
 800269a:	000a      	movs	r2, r1
 800269c:	0027      	movs	r7, r4
 800269e:	3a20      	subs	r2, #32
 80026a0:	40d7      	lsrs	r7, r2
 80026a2:	2920      	cmp	r1, #32
 80026a4:	d005      	beq.n	80026b2 <__aeabi_dsub+0x692>
 80026a6:	2240      	movs	r2, #64	@ 0x40
 80026a8:	1a52      	subs	r2, r2, r1
 80026aa:	4094      	lsls	r4, r2
 80026ac:	0025      	movs	r5, r4
 80026ae:	4305      	orrs	r5, r0
 80026b0:	9503      	str	r5, [sp, #12]
 80026b2:	9d03      	ldr	r5, [sp, #12]
 80026b4:	1e6a      	subs	r2, r5, #1
 80026b6:	4195      	sbcs	r5, r2
 80026b8:	432f      	orrs	r7, r5
 80026ba:	e610      	b.n	80022de <__aeabi_dsub+0x2be>
 80026bc:	0014      	movs	r4, r2
 80026be:	2500      	movs	r5, #0
 80026c0:	2200      	movs	r2, #0
 80026c2:	e556      	b.n	8002172 <__aeabi_dsub+0x152>
 80026c4:	9b02      	ldr	r3, [sp, #8]
 80026c6:	4460      	add	r0, ip
 80026c8:	4699      	mov	r9, r3
 80026ca:	4560      	cmp	r0, ip
 80026cc:	4192      	sbcs	r2, r2
 80026ce:	444c      	add	r4, r9
 80026d0:	4252      	negs	r2, r2
 80026d2:	0005      	movs	r5, r0
 80026d4:	18a4      	adds	r4, r4, r2
 80026d6:	e74c      	b.n	8002572 <__aeabi_dsub+0x552>
 80026d8:	001a      	movs	r2, r3
 80026da:	001c      	movs	r4, r3
 80026dc:	432a      	orrs	r2, r5
 80026de:	d000      	beq.n	80026e2 <__aeabi_dsub+0x6c2>
 80026e0:	e6b3      	b.n	800244a <__aeabi_dsub+0x42a>
 80026e2:	e6c9      	b.n	8002478 <__aeabi_dsub+0x458>
 80026e4:	2480      	movs	r4, #128	@ 0x80
 80026e6:	2600      	movs	r6, #0
 80026e8:	0324      	lsls	r4, r4, #12
 80026ea:	e5ae      	b.n	800224a <__aeabi_dsub+0x22a>
 80026ec:	2120      	movs	r1, #32
 80026ee:	2500      	movs	r5, #0
 80026f0:	1a09      	subs	r1, r1, r0
 80026f2:	e517      	b.n	8002124 <__aeabi_dsub+0x104>
 80026f4:	2200      	movs	r2, #0
 80026f6:	2500      	movs	r5, #0
 80026f8:	4c0b      	ldr	r4, [pc, #44]	@ (8002728 <__aeabi_dsub+0x708>)
 80026fa:	e53a      	b.n	8002172 <__aeabi_dsub+0x152>
 80026fc:	2d00      	cmp	r5, #0
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x6e2>
 8002700:	e5f6      	b.n	80022f0 <__aeabi_dsub+0x2d0>
 8002702:	464b      	mov	r3, r9
 8002704:	1bda      	subs	r2, r3, r7
 8002706:	4692      	mov	sl, r2
 8002708:	2f00      	cmp	r7, #0
 800270a:	d100      	bne.n	800270e <__aeabi_dsub+0x6ee>
 800270c:	e66f      	b.n	80023ee <__aeabi_dsub+0x3ce>
 800270e:	2a38      	cmp	r2, #56	@ 0x38
 8002710:	dc05      	bgt.n	800271e <__aeabi_dsub+0x6fe>
 8002712:	2680      	movs	r6, #128	@ 0x80
 8002714:	0436      	lsls	r6, r6, #16
 8002716:	4334      	orrs	r4, r6
 8002718:	4688      	mov	r8, r1
 800271a:	000e      	movs	r6, r1
 800271c:	e6d1      	b.n	80024c2 <__aeabi_dsub+0x4a2>
 800271e:	4688      	mov	r8, r1
 8002720:	000e      	movs	r6, r1
 8002722:	2501      	movs	r5, #1
 8002724:	e6de      	b.n	80024e4 <__aeabi_dsub+0x4c4>
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	000007ff 	.word	0x000007ff
 800272c:	ff7fffff 	.word	0xff7fffff
 8002730:	000007fe 	.word	0x000007fe
 8002734:	2d00      	cmp	r5, #0
 8002736:	d100      	bne.n	800273a <__aeabi_dsub+0x71a>
 8002738:	e668      	b.n	800240c <__aeabi_dsub+0x3ec>
 800273a:	464b      	mov	r3, r9
 800273c:	1bd9      	subs	r1, r3, r7
 800273e:	2f00      	cmp	r7, #0
 8002740:	d101      	bne.n	8002746 <__aeabi_dsub+0x726>
 8002742:	468a      	mov	sl, r1
 8002744:	e5a7      	b.n	8002296 <__aeabi_dsub+0x276>
 8002746:	2701      	movs	r7, #1
 8002748:	2938      	cmp	r1, #56	@ 0x38
 800274a:	dd00      	ble.n	800274e <__aeabi_dsub+0x72e>
 800274c:	e5c7      	b.n	80022de <__aeabi_dsub+0x2be>
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	0412      	lsls	r2, r2, #16
 8002752:	4314      	orrs	r4, r2
 8002754:	e5af      	b.n	80022b6 <__aeabi_dsub+0x296>
 8002756:	46c0      	nop			@ (mov r8, r8)

08002758 <__aeabi_d2iz>:
 8002758:	000b      	movs	r3, r1
 800275a:	0002      	movs	r2, r0
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4d16      	ldr	r5, [pc, #88]	@ (80027b8 <__aeabi_d2iz+0x60>)
 8002760:	030c      	lsls	r4, r1, #12
 8002762:	b082      	sub	sp, #8
 8002764:	0049      	lsls	r1, r1, #1
 8002766:	2000      	movs	r0, #0
 8002768:	9200      	str	r2, [sp, #0]
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	0b24      	lsrs	r4, r4, #12
 800276e:	0d49      	lsrs	r1, r1, #21
 8002770:	0fde      	lsrs	r6, r3, #31
 8002772:	42a9      	cmp	r1, r5
 8002774:	dd04      	ble.n	8002780 <__aeabi_d2iz+0x28>
 8002776:	4811      	ldr	r0, [pc, #68]	@ (80027bc <__aeabi_d2iz+0x64>)
 8002778:	4281      	cmp	r1, r0
 800277a:	dd03      	ble.n	8002784 <__aeabi_d2iz+0x2c>
 800277c:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <__aeabi_d2iz+0x68>)
 800277e:	18f0      	adds	r0, r6, r3
 8002780:	b002      	add	sp, #8
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	2080      	movs	r0, #128	@ 0x80
 8002786:	0340      	lsls	r0, r0, #13
 8002788:	4320      	orrs	r0, r4
 800278a:	4c0e      	ldr	r4, [pc, #56]	@ (80027c4 <__aeabi_d2iz+0x6c>)
 800278c:	1a64      	subs	r4, r4, r1
 800278e:	2c1f      	cmp	r4, #31
 8002790:	dd08      	ble.n	80027a4 <__aeabi_d2iz+0x4c>
 8002792:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <__aeabi_d2iz+0x70>)
 8002794:	1a5b      	subs	r3, r3, r1
 8002796:	40d8      	lsrs	r0, r3
 8002798:	0003      	movs	r3, r0
 800279a:	4258      	negs	r0, r3
 800279c:	2e00      	cmp	r6, #0
 800279e:	d1ef      	bne.n	8002780 <__aeabi_d2iz+0x28>
 80027a0:	0018      	movs	r0, r3
 80027a2:	e7ed      	b.n	8002780 <__aeabi_d2iz+0x28>
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <__aeabi_d2iz+0x74>)
 80027a6:	9a00      	ldr	r2, [sp, #0]
 80027a8:	469c      	mov	ip, r3
 80027aa:	0003      	movs	r3, r0
 80027ac:	4461      	add	r1, ip
 80027ae:	408b      	lsls	r3, r1
 80027b0:	40e2      	lsrs	r2, r4
 80027b2:	4313      	orrs	r3, r2
 80027b4:	e7f1      	b.n	800279a <__aeabi_d2iz+0x42>
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	000003fe 	.word	0x000003fe
 80027bc:	0000041d 	.word	0x0000041d
 80027c0:	7fffffff 	.word	0x7fffffff
 80027c4:	00000433 	.word	0x00000433
 80027c8:	00000413 	.word	0x00000413
 80027cc:	fffffbed 	.word	0xfffffbed

080027d0 <__aeabi_i2d>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d016      	beq.n	8002804 <__aeabi_i2d+0x34>
 80027d6:	17c3      	asrs	r3, r0, #31
 80027d8:	18c5      	adds	r5, r0, r3
 80027da:	405d      	eors	r5, r3
 80027dc:	0fc4      	lsrs	r4, r0, #31
 80027de:	0028      	movs	r0, r5
 80027e0:	f000 f890 	bl	8002904 <__clzsi2>
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <__aeabi_i2d+0x58>)
 80027e6:	1a1b      	subs	r3, r3, r0
 80027e8:	055b      	lsls	r3, r3, #21
 80027ea:	0d5b      	lsrs	r3, r3, #21
 80027ec:	280a      	cmp	r0, #10
 80027ee:	dc14      	bgt.n	800281a <__aeabi_i2d+0x4a>
 80027f0:	0002      	movs	r2, r0
 80027f2:	002e      	movs	r6, r5
 80027f4:	3215      	adds	r2, #21
 80027f6:	4096      	lsls	r6, r2
 80027f8:	220b      	movs	r2, #11
 80027fa:	1a12      	subs	r2, r2, r0
 80027fc:	40d5      	lsrs	r5, r2
 80027fe:	032d      	lsls	r5, r5, #12
 8002800:	0b2d      	lsrs	r5, r5, #12
 8002802:	e003      	b.n	800280c <__aeabi_i2d+0x3c>
 8002804:	2400      	movs	r4, #0
 8002806:	2300      	movs	r3, #0
 8002808:	2500      	movs	r5, #0
 800280a:	2600      	movs	r6, #0
 800280c:	051b      	lsls	r3, r3, #20
 800280e:	432b      	orrs	r3, r5
 8002810:	07e4      	lsls	r4, r4, #31
 8002812:	4323      	orrs	r3, r4
 8002814:	0030      	movs	r0, r6
 8002816:	0019      	movs	r1, r3
 8002818:	bd70      	pop	{r4, r5, r6, pc}
 800281a:	380b      	subs	r0, #11
 800281c:	4085      	lsls	r5, r0
 800281e:	032d      	lsls	r5, r5, #12
 8002820:	2600      	movs	r6, #0
 8002822:	0b2d      	lsrs	r5, r5, #12
 8002824:	e7f2      	b.n	800280c <__aeabi_i2d+0x3c>
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	0000041e 	.word	0x0000041e

0800282c <__aeabi_ui2d>:
 800282c:	b510      	push	{r4, lr}
 800282e:	1e04      	subs	r4, r0, #0
 8002830:	d010      	beq.n	8002854 <__aeabi_ui2d+0x28>
 8002832:	f000 f867 	bl	8002904 <__clzsi2>
 8002836:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <__aeabi_ui2d+0x44>)
 8002838:	1a1b      	subs	r3, r3, r0
 800283a:	055b      	lsls	r3, r3, #21
 800283c:	0d5b      	lsrs	r3, r3, #21
 800283e:	280a      	cmp	r0, #10
 8002840:	dc0f      	bgt.n	8002862 <__aeabi_ui2d+0x36>
 8002842:	220b      	movs	r2, #11
 8002844:	0021      	movs	r1, r4
 8002846:	1a12      	subs	r2, r2, r0
 8002848:	40d1      	lsrs	r1, r2
 800284a:	3015      	adds	r0, #21
 800284c:	030a      	lsls	r2, r1, #12
 800284e:	4084      	lsls	r4, r0
 8002850:	0b12      	lsrs	r2, r2, #12
 8002852:	e001      	b.n	8002858 <__aeabi_ui2d+0x2c>
 8002854:	2300      	movs	r3, #0
 8002856:	2200      	movs	r2, #0
 8002858:	051b      	lsls	r3, r3, #20
 800285a:	4313      	orrs	r3, r2
 800285c:	0020      	movs	r0, r4
 800285e:	0019      	movs	r1, r3
 8002860:	bd10      	pop	{r4, pc}
 8002862:	0022      	movs	r2, r4
 8002864:	380b      	subs	r0, #11
 8002866:	4082      	lsls	r2, r0
 8002868:	0312      	lsls	r2, r2, #12
 800286a:	2400      	movs	r4, #0
 800286c:	0b12      	lsrs	r2, r2, #12
 800286e:	e7f3      	b.n	8002858 <__aeabi_ui2d+0x2c>
 8002870:	0000041e 	.word	0x0000041e

08002874 <__aeabi_f2d>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	0242      	lsls	r2, r0, #9
 8002878:	0043      	lsls	r3, r0, #1
 800287a:	0fc4      	lsrs	r4, r0, #31
 800287c:	20fe      	movs	r0, #254	@ 0xfe
 800287e:	0e1b      	lsrs	r3, r3, #24
 8002880:	1c59      	adds	r1, r3, #1
 8002882:	0a55      	lsrs	r5, r2, #9
 8002884:	4208      	tst	r0, r1
 8002886:	d00c      	beq.n	80028a2 <__aeabi_f2d+0x2e>
 8002888:	21e0      	movs	r1, #224	@ 0xe0
 800288a:	0089      	lsls	r1, r1, #2
 800288c:	468c      	mov	ip, r1
 800288e:	076d      	lsls	r5, r5, #29
 8002890:	0b12      	lsrs	r2, r2, #12
 8002892:	4463      	add	r3, ip
 8002894:	051b      	lsls	r3, r3, #20
 8002896:	4313      	orrs	r3, r2
 8002898:	07e4      	lsls	r4, r4, #31
 800289a:	4323      	orrs	r3, r4
 800289c:	0028      	movs	r0, r5
 800289e:	0019      	movs	r1, r3
 80028a0:	bd70      	pop	{r4, r5, r6, pc}
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d114      	bne.n	80028d0 <__aeabi_f2d+0x5c>
 80028a6:	2d00      	cmp	r5, #0
 80028a8:	d01b      	beq.n	80028e2 <__aeabi_f2d+0x6e>
 80028aa:	0028      	movs	r0, r5
 80028ac:	f000 f82a 	bl	8002904 <__clzsi2>
 80028b0:	280a      	cmp	r0, #10
 80028b2:	dc1c      	bgt.n	80028ee <__aeabi_f2d+0x7a>
 80028b4:	230b      	movs	r3, #11
 80028b6:	002a      	movs	r2, r5
 80028b8:	1a1b      	subs	r3, r3, r0
 80028ba:	40da      	lsrs	r2, r3
 80028bc:	0003      	movs	r3, r0
 80028be:	3315      	adds	r3, #21
 80028c0:	409d      	lsls	r5, r3
 80028c2:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <__aeabi_f2d+0x88>)
 80028c4:	0312      	lsls	r2, r2, #12
 80028c6:	1a1b      	subs	r3, r3, r0
 80028c8:	055b      	lsls	r3, r3, #21
 80028ca:	0b12      	lsrs	r2, r2, #12
 80028cc:	0d5b      	lsrs	r3, r3, #21
 80028ce:	e7e1      	b.n	8002894 <__aeabi_f2d+0x20>
 80028d0:	2d00      	cmp	r5, #0
 80028d2:	d009      	beq.n	80028e8 <__aeabi_f2d+0x74>
 80028d4:	0b13      	lsrs	r3, r2, #12
 80028d6:	2280      	movs	r2, #128	@ 0x80
 80028d8:	0312      	lsls	r2, r2, #12
 80028da:	431a      	orrs	r2, r3
 80028dc:	076d      	lsls	r5, r5, #29
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <__aeabi_f2d+0x8c>)
 80028e0:	e7d8      	b.n	8002894 <__aeabi_f2d+0x20>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2200      	movs	r2, #0
 80028e6:	e7d5      	b.n	8002894 <__aeabi_f2d+0x20>
 80028e8:	2200      	movs	r2, #0
 80028ea:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <__aeabi_f2d+0x8c>)
 80028ec:	e7d2      	b.n	8002894 <__aeabi_f2d+0x20>
 80028ee:	0003      	movs	r3, r0
 80028f0:	002a      	movs	r2, r5
 80028f2:	3b0b      	subs	r3, #11
 80028f4:	409a      	lsls	r2, r3
 80028f6:	2500      	movs	r5, #0
 80028f8:	e7e3      	b.n	80028c2 <__aeabi_f2d+0x4e>
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	00000389 	.word	0x00000389
 8002900:	000007ff 	.word	0x000007ff

08002904 <__clzsi2>:
 8002904:	211c      	movs	r1, #28
 8002906:	2301      	movs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	4298      	cmp	r0, r3
 800290c:	d301      	bcc.n	8002912 <__clzsi2+0xe>
 800290e:	0c00      	lsrs	r0, r0, #16
 8002910:	3910      	subs	r1, #16
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	4298      	cmp	r0, r3
 8002916:	d301      	bcc.n	800291c <__clzsi2+0x18>
 8002918:	0a00      	lsrs	r0, r0, #8
 800291a:	3908      	subs	r1, #8
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	4298      	cmp	r0, r3
 8002920:	d301      	bcc.n	8002926 <__clzsi2+0x22>
 8002922:	0900      	lsrs	r0, r0, #4
 8002924:	3904      	subs	r1, #4
 8002926:	a202      	add	r2, pc, #8	@ (adr r2, 8002930 <__clzsi2+0x2c>)
 8002928:	5c10      	ldrb	r0, [r2, r0]
 800292a:	1840      	adds	r0, r0, r1
 800292c:	4770      	bx	lr
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	02020304 	.word	0x02020304
 8002934:	01010101 	.word	0x01010101
	...

08002940 <__clzdi2>:
 8002940:	b510      	push	{r4, lr}
 8002942:	2900      	cmp	r1, #0
 8002944:	d103      	bne.n	800294e <__clzdi2+0xe>
 8002946:	f7ff ffdd 	bl	8002904 <__clzsi2>
 800294a:	3020      	adds	r0, #32
 800294c:	e002      	b.n	8002954 <__clzdi2+0x14>
 800294e:	0008      	movs	r0, r1
 8002950:	f7ff ffd8 	bl	8002904 <__clzsi2>
 8002954:	bd10      	pop	{r4, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)

08002958 <__divdi3>:
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	46d6      	mov	lr, sl
 800295c:	464f      	mov	r7, r9
 800295e:	4646      	mov	r6, r8
 8002960:	b5c0      	push	{r6, r7, lr}
 8002962:	0004      	movs	r4, r0
 8002964:	000d      	movs	r5, r1
 8002966:	0010      	movs	r0, r2
 8002968:	0019      	movs	r1, r3
 800296a:	b082      	sub	sp, #8
 800296c:	2d00      	cmp	r5, #0
 800296e:	da00      	bge.n	8002972 <__divdi3+0x1a>
 8002970:	e087      	b.n	8002a82 <__divdi3+0x12a>
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__divdi3+0x36>
 8002976:	0016      	movs	r6, r2
 8002978:	001f      	movs	r7, r3
 800297a:	42ab      	cmp	r3, r5
 800297c:	d919      	bls.n	80029b2 <__divdi3+0x5a>
 800297e:	2000      	movs	r0, #0
 8002980:	2100      	movs	r1, #0
 8002982:	b002      	add	sp, #8
 8002984:	bce0      	pop	{r5, r6, r7}
 8002986:	46ba      	mov	sl, r7
 8002988:	46b1      	mov	r9, r6
 800298a:	46a8      	mov	r8, r5
 800298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298e:	2700      	movs	r7, #0
 8002990:	4246      	negs	r6, r0
 8002992:	418f      	sbcs	r7, r1
 8002994:	42af      	cmp	r7, r5
 8002996:	d804      	bhi.n	80029a2 <__divdi3+0x4a>
 8002998:	d000      	beq.n	800299c <__divdi3+0x44>
 800299a:	e082      	b.n	8002aa2 <__divdi3+0x14a>
 800299c:	42a6      	cmp	r6, r4
 800299e:	d800      	bhi.n	80029a2 <__divdi3+0x4a>
 80029a0:	e07f      	b.n	8002aa2 <__divdi3+0x14a>
 80029a2:	2000      	movs	r0, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	e08f      	b.n	8002ac8 <__divdi3+0x170>
 80029a8:	2700      	movs	r7, #0
 80029aa:	4246      	negs	r6, r0
 80029ac:	418f      	sbcs	r7, r1
 80029ae:	429f      	cmp	r7, r3
 80029b0:	d8e5      	bhi.n	800297e <__divdi3+0x26>
 80029b2:	42af      	cmp	r7, r5
 80029b4:	d100      	bne.n	80029b8 <__divdi3+0x60>
 80029b6:	e098      	b.n	8002aea <__divdi3+0x192>
 80029b8:	2300      	movs	r3, #0
 80029ba:	4699      	mov	r9, r3
 80029bc:	0039      	movs	r1, r7
 80029be:	0030      	movs	r0, r6
 80029c0:	f7ff ffbe 	bl	8002940 <__clzdi2>
 80029c4:	4680      	mov	r8, r0
 80029c6:	0029      	movs	r1, r5
 80029c8:	0020      	movs	r0, r4
 80029ca:	f7ff ffb9 	bl	8002940 <__clzdi2>
 80029ce:	4643      	mov	r3, r8
 80029d0:	1a1b      	subs	r3, r3, r0
 80029d2:	4698      	mov	r8, r3
 80029d4:	3b20      	subs	r3, #32
 80029d6:	d500      	bpl.n	80029da <__divdi3+0x82>
 80029d8:	e07c      	b.n	8002ad4 <__divdi3+0x17c>
 80029da:	0031      	movs	r1, r6
 80029dc:	4099      	lsls	r1, r3
 80029de:	469a      	mov	sl, r3
 80029e0:	000b      	movs	r3, r1
 80029e2:	0031      	movs	r1, r6
 80029e4:	4640      	mov	r0, r8
 80029e6:	4081      	lsls	r1, r0
 80029e8:	000a      	movs	r2, r1
 80029ea:	42ab      	cmp	r3, r5
 80029ec:	d85f      	bhi.n	8002aae <__divdi3+0x156>
 80029ee:	d05c      	beq.n	8002aaa <__divdi3+0x152>
 80029f0:	4651      	mov	r1, sl
 80029f2:	1aa4      	subs	r4, r4, r2
 80029f4:	419d      	sbcs	r5, r3
 80029f6:	2900      	cmp	r1, #0
 80029f8:	da00      	bge.n	80029fc <__divdi3+0xa4>
 80029fa:	e093      	b.n	8002b24 <__divdi3+0x1cc>
 80029fc:	2100      	movs	r1, #0
 80029fe:	2000      	movs	r0, #0
 8002a00:	2601      	movs	r6, #1
 8002a02:	9000      	str	r0, [sp, #0]
 8002a04:	9101      	str	r1, [sp, #4]
 8002a06:	4651      	mov	r1, sl
 8002a08:	408e      	lsls	r6, r1
 8002a0a:	9601      	str	r6, [sp, #4]
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	2601      	movs	r6, #1
 8002a10:	408e      	lsls	r6, r1
 8002a12:	4641      	mov	r1, r8
 8002a14:	9600      	str	r6, [sp, #0]
 8002a16:	2900      	cmp	r1, #0
 8002a18:	d050      	beq.n	8002abc <__divdi3+0x164>
 8002a1a:	07d9      	lsls	r1, r3, #31
 8002a1c:	0856      	lsrs	r6, r2, #1
 8002a1e:	430e      	orrs	r6, r1
 8002a20:	085f      	lsrs	r7, r3, #1
 8002a22:	4641      	mov	r1, r8
 8002a24:	2201      	movs	r2, #1
 8002a26:	2300      	movs	r3, #0
 8002a28:	e00c      	b.n	8002a44 <__divdi3+0xec>
 8002a2a:	42af      	cmp	r7, r5
 8002a2c:	d101      	bne.n	8002a32 <__divdi3+0xda>
 8002a2e:	42a6      	cmp	r6, r4
 8002a30:	d80a      	bhi.n	8002a48 <__divdi3+0xf0>
 8002a32:	1ba4      	subs	r4, r4, r6
 8002a34:	41bd      	sbcs	r5, r7
 8002a36:	1924      	adds	r4, r4, r4
 8002a38:	416d      	adcs	r5, r5
 8002a3a:	3901      	subs	r1, #1
 8002a3c:	18a4      	adds	r4, r4, r2
 8002a3e:	415d      	adcs	r5, r3
 8002a40:	2900      	cmp	r1, #0
 8002a42:	d006      	beq.n	8002a52 <__divdi3+0xfa>
 8002a44:	42af      	cmp	r7, r5
 8002a46:	d9f0      	bls.n	8002a2a <__divdi3+0xd2>
 8002a48:	3901      	subs	r1, #1
 8002a4a:	1924      	adds	r4, r4, r4
 8002a4c:	416d      	adcs	r5, r5
 8002a4e:	2900      	cmp	r1, #0
 8002a50:	d1f8      	bne.n	8002a44 <__divdi3+0xec>
 8002a52:	9800      	ldr	r0, [sp, #0]
 8002a54:	9901      	ldr	r1, [sp, #4]
 8002a56:	4653      	mov	r3, sl
 8002a58:	1900      	adds	r0, r0, r4
 8002a5a:	4169      	adcs	r1, r5
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db48      	blt.n	8002af2 <__divdi3+0x19a>
 8002a60:	002e      	movs	r6, r5
 8002a62:	002c      	movs	r4, r5
 8002a64:	40de      	lsrs	r6, r3
 8002a66:	4643      	mov	r3, r8
 8002a68:	40dc      	lsrs	r4, r3
 8002a6a:	4653      	mov	r3, sl
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db50      	blt.n	8002b12 <__divdi3+0x1ba>
 8002a70:	0034      	movs	r4, r6
 8002a72:	409c      	lsls	r4, r3
 8002a74:	0023      	movs	r3, r4
 8002a76:	4644      	mov	r4, r8
 8002a78:	40a6      	lsls	r6, r4
 8002a7a:	0032      	movs	r2, r6
 8002a7c:	1a80      	subs	r0, r0, r2
 8002a7e:	4199      	sbcs	r1, r3
 8002a80:	e01e      	b.n	8002ac0 <__divdi3+0x168>
 8002a82:	2300      	movs	r3, #0
 8002a84:	4262      	negs	r2, r4
 8002a86:	41ab      	sbcs	r3, r5
 8002a88:	0014      	movs	r4, r2
 8002a8a:	001d      	movs	r5, r3
 8002a8c:	2900      	cmp	r1, #0
 8002a8e:	db8b      	blt.n	80029a8 <__divdi3+0x50>
 8002a90:	0006      	movs	r6, r0
 8002a92:	000f      	movs	r7, r1
 8002a94:	4299      	cmp	r1, r3
 8002a96:	d900      	bls.n	8002a9a <__divdi3+0x142>
 8002a98:	e771      	b.n	800297e <__divdi3+0x26>
 8002a9a:	d102      	bne.n	8002aa2 <__divdi3+0x14a>
 8002a9c:	4290      	cmp	r0, r2
 8002a9e:	d900      	bls.n	8002aa2 <__divdi3+0x14a>
 8002aa0:	e76d      	b.n	800297e <__divdi3+0x26>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	425b      	negs	r3, r3
 8002aa6:	4699      	mov	r9, r3
 8002aa8:	e788      	b.n	80029bc <__divdi3+0x64>
 8002aaa:	42a1      	cmp	r1, r4
 8002aac:	d9a0      	bls.n	80029f0 <__divdi3+0x98>
 8002aae:	2100      	movs	r1, #0
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	9000      	str	r0, [sp, #0]
 8002ab4:	9101      	str	r1, [sp, #4]
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	2900      	cmp	r1, #0
 8002aba:	d1ae      	bne.n	8002a1a <__divdi3+0xc2>
 8002abc:	9800      	ldr	r0, [sp, #0]
 8002abe:	9901      	ldr	r1, [sp, #4]
 8002ac0:	464b      	mov	r3, r9
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d100      	bne.n	8002ac8 <__divdi3+0x170>
 8002ac6:	e75c      	b.n	8002982 <__divdi3+0x2a>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	000c      	movs	r4, r1
 8002acc:	2100      	movs	r1, #0
 8002ace:	4258      	negs	r0, r3
 8002ad0:	41a1      	sbcs	r1, r4
 8002ad2:	e756      	b.n	8002982 <__divdi3+0x2a>
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	0038      	movs	r0, r7
 8002ad8:	469a      	mov	sl, r3
 8002ada:	2320      	movs	r3, #32
 8002adc:	0031      	movs	r1, r6
 8002ade:	4090      	lsls	r0, r2
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	40d9      	lsrs	r1, r3
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	e77b      	b.n	80029e2 <__divdi3+0x8a>
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d800      	bhi.n	8002af0 <__divdi3+0x198>
 8002aee:	e763      	b.n	80029b8 <__divdi3+0x60>
 8002af0:	e745      	b.n	800297e <__divdi3+0x26>
 8002af2:	4642      	mov	r2, r8
 8002af4:	2320      	movs	r3, #32
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	002a      	movs	r2, r5
 8002afa:	409a      	lsls	r2, r3
 8002afc:	0026      	movs	r6, r4
 8002afe:	0013      	movs	r3, r2
 8002b00:	4642      	mov	r2, r8
 8002b02:	40d6      	lsrs	r6, r2
 8002b04:	002c      	movs	r4, r5
 8002b06:	431e      	orrs	r6, r3
 8002b08:	4643      	mov	r3, r8
 8002b0a:	40dc      	lsrs	r4, r3
 8002b0c:	4653      	mov	r3, sl
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	daae      	bge.n	8002a70 <__divdi3+0x118>
 8002b12:	4642      	mov	r2, r8
 8002b14:	2320      	movs	r3, #32
 8002b16:	0035      	movs	r5, r6
 8002b18:	4094      	lsls	r4, r2
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	40dd      	lsrs	r5, r3
 8002b1e:	0023      	movs	r3, r4
 8002b20:	432b      	orrs	r3, r5
 8002b22:	e7a8      	b.n	8002a76 <__divdi3+0x11e>
 8002b24:	4641      	mov	r1, r8
 8002b26:	2620      	movs	r6, #32
 8002b28:	2701      	movs	r7, #1
 8002b2a:	1a76      	subs	r6, r6, r1
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	40f7      	lsrs	r7, r6
 8002b32:	9000      	str	r0, [sp, #0]
 8002b34:	9101      	str	r1, [sp, #4]
 8002b36:	9701      	str	r7, [sp, #4]
 8002b38:	e768      	b.n	8002a0c <__divdi3+0xb4>
 8002b3a:	46c0      	nop			@ (mov r8, r8)

08002b3c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002b40:	f001 fcf6 	bl	8004530 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002b44:	f000 f80e 	bl	8002b64 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002b52:	2301      	movs	r3, #1
 8002b54:	425b      	negs	r3, r3
 8002b56:	0018      	movs	r0, r3
 8002b58:	f018 ff02 	bl	801b960 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f002 fb9e 	bl	80052ac <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002b70:	2001      	movs	r0, #1
 8002b72:	f002 fb9b 	bl	80052ac <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002b76:	2003      	movs	r0, #3
 8002b78:	f002 fb98 	bl	80052ac <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "## Версия протокола:   V%X.%X.%X\r\n",
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c78 <LoRaWAN_Init+0x114>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	9202      	str	r2, [sp, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	9201      	str	r2, [sp, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	9200      	str	r2, [sp, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f018 fb24 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002b94:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <LoRaWAN_Init+0x118>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	4251      	negs	r1, r2
 8002b9a:	4839      	ldr	r0, [pc, #228]	@ (8002c80 <LoRaWAN_Init+0x11c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	9200      	str	r2, [sp, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f019 f9a7 	bl	801bef4 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	@ (8002c84 <LoRaWAN_Init+0x120>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4251      	negs	r1, r2
 8002bac:	4836      	ldr	r0, [pc, #216]	@ (8002c88 <LoRaWAN_Init+0x124>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f019 f99e 	bl	801bef4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002bb8:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <LoRaWAN_Init+0x128>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4251      	negs	r1, r2
 8002bbe:	4834      	ldr	r0, [pc, #208]	@ (8002c90 <LoRaWAN_Init+0x12c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	9200      	str	r2, [sp, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f019 f995 	bl	801bef4 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002bca:	23fa      	movs	r3, #250	@ 0xfa
 8002bcc:	005a      	lsls	r2, r3, #1
 8002bce:	4b2c      	ldr	r3, [pc, #176]	@ (8002c80 <LoRaWAN_Init+0x11c>)
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f019 fab6 	bl	801c144 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002bd8:	23fa      	movs	r3, #250	@ 0xfa
 8002bda:	005a      	lsls	r2, r3, #1
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <LoRaWAN_Init+0x124>)
 8002bde:	0011      	movs	r1, r2
 8002be0:	0018      	movs	r0, r3
 8002be2:	f019 faaf 	bl	801c144 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002be6:	23fa      	movs	r3, #250	@ 0xfa
 8002be8:	005a      	lsls	r2, r3, #1
 8002bea:	4b29      	ldr	r3, [pc, #164]	@ (8002c90 <LoRaWAN_Init+0x12c>)
 8002bec:	0011      	movs	r1, r2
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f019 faa8 	bl	801c144 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002bf4:	4b27      	ldr	r3, [pc, #156]	@ (8002c94 <LoRaWAN_Init+0x130>)
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f018 ff92 	bl	801bb24 <UTIL_SEQ_RegTask>
 8002c00:	4b25      	ldr	r3, [pc, #148]	@ (8002c98 <LoRaWAN_Init+0x134>)
 8002c02:	001a      	movs	r2, r3
 8002c04:	2100      	movs	r1, #0
 8002c06:	2002      	movs	r0, #2
 8002c08:	f018 ff8c 	bl	801bb24 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002c0c:	f000 fb44 	bl	8003298 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8002c10:	4b22      	ldr	r3, [pc, #136]	@ (8002c9c <LoRaWAN_Init+0x138>)
 8002c12:	0018      	movs	r0, r3
 8002c14:	f00a fb2e 	bl	800d274 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8002c18:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <LoRaWAN_Init+0x13c>)
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f00a fb70 	bl	800d300 <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8002c20:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <LoRaWAN_Init+0x12c>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f019 f99e 	bl	801bf64 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8002c28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <LoRaWAN_Init+0x140>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f00a fcad 	bl	800d58c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8002c32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <LoRaWAN_Init+0x144>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d115      	bne.n	8002c66 <LoRaWAN_Init+0x102>
  {
    /* send every time timer elapses */
 uint32_t APPTXDUTYCYCLE; // Для конфигурации периода передачи только нужно добавить в EEPROM
 APPTXDUTYCYCLE = 10000; // Для конфигурации периода передачи
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cac <LoRaWAN_Init+0x148>)
 8002c3c:	607b      	str	r3, [r7, #4]
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <LoRaWAN_Init+0x14c>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	4251      	negs	r1, r2
 8002c44:	481b      	ldr	r0, [pc, #108]	@ (8002cb4 <LoRaWAN_Init+0x150>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	9200      	str	r2, [sp, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f019 f952 	bl	801bef4 <UTIL_TIMER_Create>
//    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
    UTIL_TIMER_SetPeriod(&TxTimer,  APPTXDUTYCYCLE);
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <LoRaWAN_Init+0x150>)
 8002c54:	0011      	movs	r1, r2
 8002c56:	0018      	movs	r0, r3
 8002c58:	f019 fa74 	bl	801c144 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8002c5c:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <LoRaWAN_Init+0x150>)
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f019 f980 	bl	801bf64 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 8002c64:	e003      	b.n	8002c6e <LoRaWAN_Init+0x10a>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002c66:	2101      	movs	r1, #1
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f002 fbe1 	bl	8005430 <BSP_PB_Init>
}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	0801d424 	.word	0x0801d424
 8002c7c:	080030fd 	.word	0x080030fd
 8002c80:	20000300 	.word	0x20000300
 8002c84:	08003113 	.word	0x08003113
 8002c88:	20000318 	.word	0x20000318
 8002c8c:	08003129 	.word	0x08003129
 8002c90:	20000330 	.word	0x20000330
 8002c94:	0800d4d1 	.word	0x0800d4d1
 8002c98:	08002de9 	.word	0x08002de9
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	2000002c 	.word	0x2000002c
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	200002e7 	.word	0x200002e7
 8002cac:	00002710 	.word	0x00002710
 8002cb0:	080030d9 	.word	0x080030d9
 8002cb4:	200002e8 	.word	0x200002e8

08002cb8 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8002cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af06      	add	r7, sp, #24
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d100      	bne.n	8002cca <OnRxData+0x12>
 8002cc8:	e07d      	b.n	8002dc6 <OnRxData+0x10e>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d100      	bne.n	8002cd2 <OnRxData+0x1a>
 8002cd0:	e079      	b.n	8002dc6 <OnRxData+0x10e>
  {
    LED_On(LED_BLUE);
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	f002 fb58 	bl	8005388 <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n   Индикация приёма данных\r\n");
 8002cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd0 <OnRxData+0x118>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2002      	movs	r0, #2
 8002ce0:	f018 fa7c 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	7b12      	ldrb	r2, [r2, #12]
 8002cec:	b252      	sxtb	r2, r2
 8002cee:	0011      	movs	r1, r2
 8002cf0:	4a38      	ldr	r2, [pc, #224]	@ (8002dd4 <OnRxData+0x11c>)
 8002cf2:	0089      	lsls	r1, r1, #2
 8002cf4:	588a      	ldr	r2, [r1, r2]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	7809      	ldrb	r1, [r1, #0]
 8002cfa:	0008      	movs	r0, r1
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	7889      	ldrb	r1, [r1, #2]
 8002d00:	b249      	sxtb	r1, r1
 8002d02:	000c      	movs	r4, r1
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	78c9      	ldrb	r1, [r1, #3]
 8002d08:	b249      	sxtb	r1, r1
 8002d0a:	000d      	movs	r5, r1
 8002d0c:	6839      	ldr	r1, [r7, #0]
 8002d0e:	7909      	ldrb	r1, [r1, #4]
 8002d10:	b249      	sxtb	r1, r1
 8002d12:	000e      	movs	r6, r1
 8002d14:	4930      	ldr	r1, [pc, #192]	@ (8002dd8 <OnRxData+0x120>)
 8002d16:	9605      	str	r6, [sp, #20]
 8002d18:	9504      	str	r5, [sp, #16]
 8002d1a:	9403      	str	r4, [sp, #12]
 8002d1c:	9002      	str	r0, [sp, #8]
 8002d1e:	9201      	str	r2, [sp, #4]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	000b      	movs	r3, r1
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f018 fa57 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d01e      	beq.n	8002d74 <OnRxData+0xbc>
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d140      	bne.n	8002dbc <OnRxData+0x104>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d13e      	bne.n	8002dc0 <OnRxData+0x108>
        {
          switch (appData->Buffer[0])
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d00d      	beq.n	8002d68 <OnRxData+0xb0>
 8002d4c:	dc10      	bgt.n	8002d70 <OnRxData+0xb8>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <OnRxData+0xa0>
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d004      	beq.n	8002d60 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8002d56:	e00b      	b.n	8002d70 <OnRxData+0xb8>
              LmHandlerRequestClass(CLASS_A);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f00a fd71 	bl	800d840 <LmHandlerRequestClass>
              break;
 8002d5e:	e008      	b.n	8002d72 <OnRxData+0xba>
              LmHandlerRequestClass(CLASS_B);
 8002d60:	2001      	movs	r0, #1
 8002d62:	f00a fd6d 	bl	800d840 <LmHandlerRequestClass>
              break;
 8002d66:	e004      	b.n	8002d72 <OnRxData+0xba>
              LmHandlerRequestClass(CLASS_C);
 8002d68:	2002      	movs	r0, #2
 8002d6a:	f00a fd69 	bl	800d840 <LmHandlerRequestClass>
              break;
 8002d6e:	e000      	b.n	8002d72 <OnRxData+0xba>
              break;
 8002d70:	46c0      	nop			@ (mov r8, r8)
          }
        }
        break;
 8002d72:	e025      	b.n	8002dc0 <OnRxData+0x108>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d123      	bne.n	8002dc4 <OnRxData+0x10c>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b14      	ldr	r3, [pc, #80]	@ (8002ddc <OnRxData+0x124>)
 8002d8a:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8002d8c:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <OnRxData+0x124>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <OnRxData+0xf0>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8002d94:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <OnRxData+0x128>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2003      	movs	r0, #3
 8002d9c:	f018 fa1e 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 8002da0:	2001      	movs	r0, #1
 8002da2:	f002 fb0d 	bl	80053c0 <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 8002da6:	e00d      	b.n	8002dc4 <OnRxData+0x10c>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002da8:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <OnRxData+0x12c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2003      	movs	r0, #3
 8002db0:	f018 fa14 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f002 fae7 	bl	8005388 <BSP_LED_On>
        break;
 8002dba:	e003      	b.n	8002dc4 <OnRxData+0x10c>
      /* USER CODE END OnRxData_Switch_case */
      default:
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
 8002dbc:	46c0      	nop			@ (mov r8, r8)
 8002dbe:	e002      	b.n	8002dc6 <OnRxData+0x10e>
        break;
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	e000      	b.n	8002dc6 <OnRxData+0x10e>
        break;
 8002dc4:	46c0      	nop			@ (mov r8, r8)
  }

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b003      	add	sp, #12
 8002dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	0801d458 	.word	0x0801d458
 8002dd4:	20000034 	.word	0x20000034
 8002dd8:	0801d48c 	.word	0x0801d48c
 8002ddc:	200002e6 	.word	0x200002e6
 8002de0:	0801d4d0 	.word	0x0801d4d0
 8002de4:	0801d4dc 	.word	0x0801d4dc

08002de8 <SendTxData>:

static void SendTxData(void)
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	b0e1      	sub	sp, #388	@ 0x184
 8002dec:	af04      	add	r7, sp, #16
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 8002dee:	23b7      	movs	r3, #183	@ 0xb7
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	2200      	movs	r2, #0
 8002df6:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 8002df8:	23b6      	movs	r3, #182	@ 0xb6
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2200      	movs	r2, #0
 8002e00:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Datasens[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 8002e06:	4b9e      	ldr	r3, [pc, #632]	@ (8003080 <SendTxData+0x298>)
 8002e08:	22b8      	movs	r2, #184	@ 0xb8
 8002e0a:	0052      	lsls	r2, r2, #1
 8002e0c:	189b      	adds	r3, r3, r2
 8002e0e:	19db      	adds	r3, r3, r7
 8002e10:	2200      	movs	r2, #0
 8002e12:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 8002e14:	23b5      	movs	r3, #181	@ 0xb5
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	22b2      	movs	r2, #178	@ 0xb2
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	18ba      	adds	r2, r7, r2
 8002e26:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	22b0      	movs	r2, #176	@ 0xb0
 8002e2c:	0052      	lsls	r2, r2, #1
 8002e2e:	18ba      	adds	r2, r7, r2
 8002e30:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	22ae      	movs	r2, #174	@ 0xae
 8002e36:	0052      	lsls	r2, r2, #1
 8002e38:	18ba      	adds	r2, r7, r2
 8002e3a:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 8002e3c:	23ad      	movs	r3, #173	@ 0xad
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2200      	movs	r2, #0
 8002e44:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8002e46:	4b8f      	ldr	r3, [pc, #572]	@ (8003084 <SendTxData+0x29c>)
 8002e48:	2202      	movs	r2, #2
 8002e4a:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 8002e4c:	f002 f8e6 	bl	800501c <BSP_I2C1_Init>
  MX_ADC_Init();
 8002e50:	f000 fa58 	bl	8003304 <MX_ADC_Init>
  MX_LPTIM1_Init();
 8002e54:	f000 fa12 	bl	800327c <MX_LPTIM1_Init>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  	  bmp280_init_default_params(&bmp280.params);
 8002e58:	4b8b      	ldr	r3, [pc, #556]	@ (8003088 <SendTxData+0x2a0>)
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f019 fd1a 	bl	801c894 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002e60:	4b8a      	ldr	r3, [pc, #552]	@ (800308c <SendTxData+0x2a4>)
 8002e62:	2276      	movs	r2, #118	@ 0x76
 8002e64:	849a      	strh	r2, [r3, #36]	@ 0x24
    	bmp280.i2c = &hi2c1;
 8002e66:	4b89      	ldr	r3, [pc, #548]	@ (800308c <SendTxData+0x2a4>)
 8002e68:	4a89      	ldr	r2, [pc, #548]	@ (8003090 <SendTxData+0x2a8>)
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8002e6c:	4a86      	ldr	r2, [pc, #536]	@ (8003088 <SendTxData+0x2a0>)
 8002e6e:	4b87      	ldr	r3, [pc, #540]	@ (800308c <SendTxData+0x2a4>)
 8002e70:	0011      	movs	r1, r2
 8002e72:	0018      	movs	r0, r3
 8002e74:	f019 fea2 	bl	801cbbc <bmp280_init>
    	HAL_Delay(2000);
 8002e78:	23fa      	movs	r3, #250	@ 0xfa
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f001 fd14 	bl	80048aa <HAL_Delay>
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
//    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
    	 bmp280_read_fixed(&bmp280, &temperaturei, &pressurei, &humidityi);
 8002e82:	4b84      	ldr	r3, [pc, #528]	@ (8003094 <SendTxData+0x2ac>)
 8002e84:	4a84      	ldr	r2, [pc, #528]	@ (8003098 <SendTxData+0x2b0>)
 8002e86:	4985      	ldr	r1, [pc, #532]	@ (800309c <SendTxData+0x2b4>)
 8002e88:	4880      	ldr	r0, [pc, #512]	@ (800308c <SendTxData+0x2a4>)
 8002e8a:	f01a f997 	bl	801d1bc <bmp280_read_fixed>
    	 int32_t temp_decimal = temperaturei % 100; // Получаем 2-ю цифру после запятой
 8002e8e:	4b83      	ldr	r3, [pc, #524]	@ (800309c <SendTxData+0x2b4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2164      	movs	r1, #100	@ 0x64
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7fd faaf 	bl	80003f8 <__aeabi_idivmod>
 8002e9a:	000b      	movs	r3, r1
 8002e9c:	22aa      	movs	r2, #170	@ 0xaa
 8002e9e:	0052      	lsls	r2, r2, #1
 8002ea0:	18ba      	adds	r2, r7, r2
 8002ea2:	6013      	str	r3, [r2, #0]
//    	HAL_Delay(200);
//    	APP_LOG(TS_OFF, VLEVEL_M, " Температура:%d | Влажность:%d\r\n", Datasens, Datasens);
//    	 APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//    		       		numberdev, temperaturei, humidityi, per, chargebattery);

    	 if(bmp280.dig_T1!=0)
 8002ea4:	4b79      	ldr	r3, [pc, #484]	@ (800308c <SendTxData+0x2a4>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <SendTxData+0xd2>
    	//*/
    	{
//    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, "     Датчик измерения : активен\r\n");
 8002eac:	4b7c      	ldr	r3, [pc, #496]	@ (80030a0 <SendTxData+0x2b8>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	f018 f992 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
 8002eb8:	e005      	b.n	8002ec6 <SendTxData+0xde>
    	 else
    	 {

//    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
//    		 APP_LOG(TS_OFF, VLEVEL_M, "  Ошибка инициализации датчика   \r\n");
    		 APP_LOG(TS_OFF, VLEVEL_M, "     Датчик измерения : ошибка инициализации    \r\n");
 8002eba:	4b7a      	ldr	r3, [pc, #488]	@ (80030a4 <SendTxData+0x2bc>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2002      	movs	r0, #2
 8002ec2:	f018 f98b 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    	 }

    	 if(temperaturei/100>=1 && temperaturei/100<=30)
 8002ec6:	4b75      	ldr	r3, [pc, #468]	@ (800309c <SendTxData+0x2b4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b63      	cmp	r3, #99	@ 0x63
 8002ecc:	dd0b      	ble.n	8002ee6 <SendTxData+0xfe>
 8002ece:	4b73      	ldr	r3, [pc, #460]	@ (800309c <SendTxData+0x2b4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a75      	ldr	r2, [pc, #468]	@ (80030a8 <SendTxData+0x2c0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	dc06      	bgt.n	8002ee6 <SendTxData+0xfe>
//    		 if(temperature1>=1 && temperature1<=30 && pressure1>=1)
    	     	//*/
    	  {
//    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
    	     	  APP_LOG(TS_OFF, VLEVEL_M, "     Параметры окружающей среды: в норме \r\n");
 8002ed8:	4b74      	ldr	r3, [pc, #464]	@ (80030ac <SendTxData+0x2c4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	2100      	movs	r1, #0
 8002ede:	2002      	movs	r0, #2
 8002ee0:	f018 f97c 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
 8002ee4:	e005      	b.n	8002ef2 <SendTxData+0x10a>
    	  } //*/
    	     	 else
    	   {
//    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
//    	       		 APP_LOG(TS_OFF, VLEVEL_M, "    Отклонение от нормы > \r\n");
    	       		 APP_LOG(TS_OFF, VLEVEL_M, "     Параметры окружающей среды: отклонение от нормы \r\n");
 8002ee6:	4b72      	ldr	r3, [pc, #456]	@ (80030b0 <SendTxData+0x2c8>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2100      	movs	r1, #0
 8002eec:	2002      	movs	r0, #2
 8002eee:	f018 f975 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 modelnum = 1;
 8002ef2:	4b70      	ldr	r3, [pc, #448]	@ (80030b4 <SendTxData+0x2cc>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
    	 // EEPROMWRITE modelnum
    	 numberdev = 0x01;  // new 0b00010001
 8002ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80030b8 <SendTxData+0x2d0>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	801a      	strh	r2, [r3, #0]
    	 per = 0xA; // new
 8002efe:	4b6f      	ldr	r3, [pc, #444]	@ (80030bc <SendTxData+0x2d4>)
 8002f00:	220a      	movs	r2, #10
 8002f02:	801a      	strh	r2, [r3, #0]
         FirmwareVersion = 1.1;
 8002f04:	4b6e      	ldr	r3, [pc, #440]	@ (80030c0 <SendTxData+0x2d8>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 8002f0a:	4b6b      	ldr	r3, [pc, #428]	@ (80030b8 <SendTxData+0x2d0>)
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	5e18      	ldrsh	r0, [r3, r0]
 8002f10:	4b5c      	ldr	r3, [pc, #368]	@ (8003084 <SendTxData+0x29c>)
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	24b2      	movs	r4, #178	@ 0xb2
 8002f16:	0064      	lsls	r4, r4, #1
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c59      	adds	r1, r3, #1
 8002f1e:	193d      	adds	r5, r7, r4
 8002f20:	6029      	str	r1, [r5, #0]
 8002f22:	18d3      	adds	r3, r2, r3
 8002f24:	b2c2      	uxtb	r2, r0
 8002f26:	701a      	strb	r2, [r3, #0]
//     AppData.Buffer[i++] = temperaturei;
//     AppData.Buffer[i++] = temperaturei / 100;
     AppData.Buffer[i++] = (temperaturei / 100) % 100;
 8002f28:	4b5c      	ldr	r3, [pc, #368]	@ (800309c <SendTxData+0x2b4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2164      	movs	r1, #100	@ 0x64
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7fd f97c 	bl	800022c <__divsi3>
 8002f34:	0003      	movs	r3, r0
 8002f36:	2164      	movs	r1, #100	@ 0x64
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7fd fa5d 	bl	80003f8 <__aeabi_idivmod>
 8002f3e:	000b      	movs	r3, r1
 8002f40:	0018      	movs	r0, r3
 8002f42:	4b50      	ldr	r3, [pc, #320]	@ (8003084 <SendTxData+0x29c>)
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	193d      	adds	r5, r7, r4
 8002f4e:	6029      	str	r1, [r5, #0]
 8002f50:	18d3      	adds	r3, r2, r3
 8002f52:	b2c2      	uxtb	r2, r0
 8002f54:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = humidityi/1000;
 8002f56:	4b4f      	ldr	r3, [pc, #316]	@ (8003094 <SendTxData+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	22fa      	movs	r2, #250	@ 0xfa
 8002f5c:	0091      	lsls	r1, r2, #2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7fd f964 	bl	800022c <__divsi3>
 8002f64:	0003      	movs	r3, r0
 8002f66:	0018      	movs	r0, r3
 8002f68:	4b46      	ldr	r3, [pc, #280]	@ (8003084 <SendTxData+0x29c>)
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1c59      	adds	r1, r3, #1
 8002f72:	193d      	adds	r5, r7, r4
 8002f74:	6029      	str	r1, [r5, #0]
 8002f76:	18d3      	adds	r3, r2, r3
 8002f78:	b2c2      	uxtb	r2, r0
 8002f7a:	701a      	strb	r2, [r3, #0]

     AppData.Buffer[i++] = per; // new период включения прибора
 8002f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80030bc <SendTxData+0x2d4>)
 8002f7e:	2000      	movs	r0, #0
 8002f80:	5e18      	ldrsh	r0, [r3, r0]
 8002f82:	4b40      	ldr	r3, [pc, #256]	@ (8003084 <SendTxData+0x29c>)
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	0026      	movs	r6, r4
 8002f8e:	193c      	adds	r4, r7, r4
 8002f90:	6021      	str	r1, [r4, #0]
 8002f92:	18d3      	adds	r3, r2, r3
 8002f94:	b2c2      	uxtb	r2, r0
 8002f96:	701a      	strb	r2, [r3, #0]
//     temperatureint = temperature1;
//     humidityint = humidity1;
      // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
     chargebattery = GetBatteryLevel(); // new заряд батареи
 8002f98:	f001 faf6 	bl	8004588 <GetBatteryLevel>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	b21a      	sxth	r2, r3
 8002fa0:	4b48      	ldr	r3, [pc, #288]	@ (80030c4 <SendTxData+0x2dc>)
 8002fa2:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = chargebattery;
 8002fa4:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <SendTxData+0x2dc>)
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	5e18      	ldrsh	r0, [r3, r0]
 8002faa:	4b36      	ldr	r3, [pc, #216]	@ (8003084 <SendTxData+0x29c>)
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	19bb      	adds	r3, r7, r6
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	1c59      	adds	r1, r3, #1
 8002fb4:	19bc      	adds	r4, r7, r6
 8002fb6:	6021      	str	r1, [r4, #0]
 8002fb8:	18d3      	adds	r3, r2, r3
 8002fba:	b2c2      	uxtb	r2, r0
 8002fbc:	701a      	strb	r2, [r3, #0]
//     HAL_Delay(1000);
//     APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//       		numberdev, temperatureint, humidityint, per, chargebattery);
//     APP_LOG(TS_OFF, VLEVEL_M, "Заряд батареи:%d\r\n", chargebattery);
     HAL_Delay(200);
 8002fbe:	20c8      	movs	r0, #200	@ 0xc8
 8002fc0:	f001 fc73 	bl	80048aa <HAL_Delay>

//		 APP_LOG(TS_OFF, VLEVEL_M, "     Номер устройства:%d | Температура:%d,%02d °C | Влажность:%d%  | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//	  numberdev, temperaturei / 100, temp_decimal, humidityi /1000, per, chargebattery);
		 APP_LOG(TS_OFF, VLEVEL_M, "     Номер устройства: %d | Температура воздуха: %d,%02d °C | Влажность воздуха: %d%\r\n",
 8002fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80030b8 <SendTxData+0x2d0>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	5e9b      	ldrsh	r3, [r3, r2]
 8002fca:	001c      	movs	r4, r3
 8002fcc:	4b33      	ldr	r3, [pc, #204]	@ (800309c <SendTxData+0x2b4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2164      	movs	r1, #100	@ 0x64
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7fd f92a 	bl	800022c <__divsi3>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	001d      	movs	r5, r3
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <SendTxData+0x2ac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	22fa      	movs	r2, #250	@ 0xfa
 8002fe2:	0091      	lsls	r1, r2, #2
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7fd f921 	bl	800022c <__divsi3>
 8002fea:	0003      	movs	r3, r0
 8002fec:	4a36      	ldr	r2, [pc, #216]	@ (80030c8 <SendTxData+0x2e0>)
 8002fee:	9303      	str	r3, [sp, #12]
 8002ff0:	23aa      	movs	r3, #170	@ 0xaa
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	9302      	str	r3, [sp, #8]
 8002ffa:	9501      	str	r5, [sp, #4]
 8002ffc:	9400      	str	r4, [sp, #0]
 8002ffe:	0013      	movs	r3, r2
 8003000:	2200      	movs	r2, #0
 8003002:	2100      	movs	r1, #0
 8003004:	2002      	movs	r0, #2
 8003006:	f018 f8e9 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
		  numberdev, temperaturei / 100, temp_decimal, humidityi /1000);
		 APP_LOG(TS_OFF, VLEVEL_M, "     Период передачи: %d сек | Заряд батареи: %d%\r\n", per, chargebattery);
 800300a:	4b2c      	ldr	r3, [pc, #176]	@ (80030bc <SendTxData+0x2d4>)
 800300c:	2200      	movs	r2, #0
 800300e:	5e9b      	ldrsh	r3, [r3, r2]
 8003010:	001a      	movs	r2, r3
 8003012:	4b2c      	ldr	r3, [pc, #176]	@ (80030c4 <SendTxData+0x2dc>)
 8003014:	2100      	movs	r1, #0
 8003016:	5e5b      	ldrsh	r3, [r3, r1]
 8003018:	0019      	movs	r1, r3
 800301a:	4b2c      	ldr	r3, [pc, #176]	@ (80030cc <SendTxData+0x2e4>)
 800301c:	9101      	str	r1, [sp, #4]
 800301e:	9200      	str	r2, [sp, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	2002      	movs	r0, #2
 8003026:	f018 f8d9 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 800302a:	19bb      	adds	r3, r7, r6
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <SendTxData+0x29c>)
 8003032:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8003034:	2338      	movs	r3, #56	@ 0x38
 8003036:	18fa      	adds	r2, r7, r3
 8003038:	4812      	ldr	r0, [pc, #72]	@ (8003084 <SendTxData+0x29c>)
 800303a:	2300      	movs	r3, #0
 800303c:	2101      	movs	r1, #1
 800303e:	f00a fb2d 	bl	800d69c <LmHandlerSend>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d106      	bne.n	8003054 <SendTxData+0x26c>
  {
	  APP_LOG(TS_OFF, VLEVEL_L, "     Запрос на подключение: отправлен\r\n");
 8003046:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <SendTxData+0x2e8>)
 8003048:	2200      	movs	r2, #0
 800304a:	2100      	movs	r1, #0
 800304c:	2001      	movs	r0, #1
 800304e:	f018 f8c5 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, "    Следующий запрос на отправку через : ~%d секунд \r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 8003052:	e011      	b.n	8003078 <SendTxData+0x290>
  else if (nextTxIn > 0)
 8003054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <SendTxData+0x290>
    APP_LOG(TS_OFF, VLEVEL_L, "    Следующий запрос на отправку через : ~%d секунд \r\n", (nextTxIn / 1000));
 800305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305c:	22fa      	movs	r2, #250	@ 0xfa
 800305e:	0091      	lsls	r1, r2, #2
 8003060:	0018      	movs	r0, r3
 8003062:	f7fd f859 	bl	8000118 <__udivsi3>
 8003066:	0003      	movs	r3, r0
 8003068:	001a      	movs	r2, r3
 800306a:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <SendTxData+0x2ec>)
 800306c:	9200      	str	r2, [sp, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2001      	movs	r0, #1
 8003074:	f018 f8b2 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
}
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b05d      	add	sp, #372	@ 0x174
 800307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003080:	fffffe92 	.word	0xfffffe92
 8003084:	20000000 	.word	0x20000000
 8003088:	20000374 	.word	0x20000374
 800308c:	20000348 	.word	0x20000348
 8003090:	20000744 	.word	0x20000744
 8003094:	200004b8 	.word	0x200004b8
 8003098:	200004bc 	.word	0x200004bc
 800309c:	200004b4 	.word	0x200004b4
 80030a0:	0801d4e8 	.word	0x0801d4e8
 80030a4:	0801d520 	.word	0x0801d520
 80030a8:	00000c1b 	.word	0x00000c1b
 80030ac:	0801d578 	.word	0x0801d578
 80030b0:	0801d5c4 	.word	0x0801d5c4
 80030b4:	200004a8 	.word	0x200004a8
 80030b8:	200004a4 	.word	0x200004a4
 80030bc:	200004a6 	.word	0x200004a6
 80030c0:	200004ac 	.word	0x200004ac
 80030c4:	200004c0 	.word	0x200004c0
 80030c8:	0801d628 	.word	0x0801d628
 80030cc:	0801d6b4 	.word	0x0801d6b4
 80030d0:	0801d708 	.word	0x0801d708
 80030d4:	0801d74c 	.word	0x0801d74c

080030d8 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80030e0:	2100      	movs	r1, #0
 80030e2:	2002      	movs	r0, #2
 80030e4:	f018 fd42 	bl	801bb6c <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <OnTxTimerEvent+0x20>)
 80030ea:	0018      	movs	r0, r3
 80030ec:	f018 ff3a 	bl	801bf64 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	200002e8 	.word	0x200002e8

080030fc <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 8003104:	2003      	movs	r0, #3
 8003106:	f002 f95b 	bl	80053c0 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b002      	add	sp, #8
 8003110:	bd80      	pop	{r7, pc}

08003112 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 800311a:	2002      	movs	r0, #2
 800311c:	f002 f950 	bl	80053c0 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 8003120:	46c0      	nop			@ (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}

08003128 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 8003130:	2001      	movs	r0, #1
 8003132:	f002 f961 	bl	80053f8 <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af04      	add	r7, sp, #16
 8003146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d042      	beq.n	80031d4 <OnTxData+0x94>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03e      	beq.n	80031d4 <OnTxData+0x94>
  {
    LED_On(LED_RED2) ;
 8003156:	2003      	movs	r0, #3
 8003158:	f002 f916 	bl	8005388 <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 800315c:	4b1f      	ldr	r3, [pc, #124]	@ (80031dc <OnTxData+0x9c>)
 800315e:	0018      	movs	r0, r3
 8003160:	f018 ff00 	bl	801bf64 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "     MCPS Подтверждение\r\n");
 8003164:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <OnTxData+0xa0>)
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	2002      	movs	r0, #2
 800316c:	f018 f836 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
//            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
//    int8_t txPower2 = 7;
//    LmHandlerSetTxPower(txPower2);
//    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Мощность:%d | Канал связи:%d\r\n",
//    		params->UplinkCounter, params->AppData.Port, params->TxPower, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, "     Номер посылки: %01d | Порт: %d | Канал связи: %d\r\n",
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	7b12      	ldrb	r2, [r2, #12]
 8003178:	0011      	movs	r1, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	7d52      	ldrb	r2, [r2, #21]
 800317e:	0010      	movs	r0, r2
 8003180:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <OnTxData+0xa4>)
 8003182:	9002      	str	r0, [sp, #8]
 8003184:	9101      	str	r1, [sp, #4]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	0013      	movs	r3, r2
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	2002      	movs	r0, #2
 8003190:	f018 f824 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
       		params->UplinkCounter, params->AppData.Port, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8003194:	4b14      	ldr	r3, [pc, #80]	@ (80031e8 <OnTxData+0xa8>)
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	2003      	movs	r0, #3
 800319c:	f018 f81e 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	789b      	ldrb	r3, [r3, #2]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d10f      	bne.n	80031c8 <OnTxData+0x88>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	78db      	ldrb	r3, [r3, #3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <OnTxData+0x74>
 80031b0:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <OnTxData+0xac>)
 80031b2:	e000      	b.n	80031b6 <OnTxData+0x76>
 80031b4:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <OnTxData+0xb0>)
 80031b6:	4a0f      	ldr	r2, [pc, #60]	@ (80031f4 <OnTxData+0xb4>)
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	0013      	movs	r3, r2
 80031bc:	2200      	movs	r2, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	2003      	movs	r0, #3
 80031c2:	f018 f80b 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 80031c6:	e005      	b.n	80031d4 <OnTxData+0x94>
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n UNCONFIRMED\r\n");
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <OnTxData+0xb8>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2003      	movs	r0, #3
 80031d0:	f018 f804 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000300 	.word	0x20000300
 80031e0:	0801d7a8 	.word	0x0801d7a8
 80031e4:	0801d7d0 	.word	0x0801d7d0
 80031e8:	0801d824 	.word	0x0801d824
 80031ec:	0801d834 	.word	0x0801d834
 80031f0:	0801d838 	.word	0x0801d838
 80031f4:	0801d840 	.word	0x0801d840
 80031f8:	0801d854 	.word	0x0801d854

080031fc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d029      	beq.n	800325e <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	b25b      	sxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11e      	bne.n	8003252 <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 8003214:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <OnJoinRequest+0x6c>)
 8003216:	0018      	movs	r0, r3
 8003218:	f018 ff1c 	bl	801c054 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 800321c:	2001      	movs	r0, #1
 800321e:	f002 f8cf 	bl	80053c0 <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n🗸  Устройство подключено  \r\n  "); // ✓✔ ✅︎ ☑ 🗹︎ √
 8003222:	4b12      	ldr	r3, [pc, #72]	@ (800326c <OnJoinRequest+0x70>)
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	2002      	movs	r0, #2
 800322a:	f017 ffd7 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	789b      	ldrb	r3, [r3, #2]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d106      	bne.n	8003244 <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
//    	  APP_LOG(TS_OFF, VLEVEL_M, " Активация по воздуху  \r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, "   Тип активации: OTAA  \r\n");
 8003236:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <OnJoinRequest+0x74>)
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	2002      	movs	r0, #2
 800323e:	f017 ffcd 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 8003242:	e00c      	b.n	800325e <OnJoinRequest+0x62>
    	  APP_LOG(TS_OFF, VLEVEL_M, "     Тип активации: ABP  \r\n");
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <OnJoinRequest+0x78>)
 8003246:	2200      	movs	r2, #0
 8003248:	2100      	movs	r1, #0
 800324a:	2002      	movs	r0, #2
 800324c:	f017 ffc6 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
}
 8003250:	e005      	b.n	800325e <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, "     Подключение к базовой станции: ошибка > \r\n");
 8003252:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <OnJoinRequest+0x7c>)
 8003254:	2200      	movs	r2, #0
 8003256:	2100      	movs	r1, #0
 8003258:	2002      	movs	r0, #2
 800325a:	f017 ffbf 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	20000330 	.word	0x20000330
 800326c:	0801d868 	.word	0x0801d868
 8003270:	0801d8a0 	.word	0x0801d8a0
 8003274:	0801d8c8 	.word	0x0801d8c8
 8003278:	0801d8f0 	.word	0x0801d8f0

0800327c <MX_LPTIM1_Init>:
  }
  */
/*

 */ static void MX_LPTIM1_Init(void) // new
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <OnMacProcessNotify>:
//    }
//
//  }

static void OnMacProcessNotify(void)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800328a:	2100      	movs	r1, #0
 800328c:	2001      	movs	r0, #1
 800328e:	f018 fc6d 	bl	801bb6c <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800329c:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <LoraInfo_Init+0x54>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80032a2:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <LoraInfo_Init+0x54>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80032a8:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <LoraInfo_Init+0x54>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80032ae:	4b0f      	ldr	r3, [pc, #60]	@ (80032ec <LoraInfo_Init+0x54>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 80032b4:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <LoraInfo_Init+0x54>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	431a      	orrs	r2, r3
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <LoraInfo_Init+0x54>)
 80032be:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <LoraInfo_Init+0x54>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <LoraInfo_Init+0x40>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 80032c8:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <LoraInfo_Init+0x58>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	2000      	movs	r0, #0
 80032d0:	f017 ff84 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	e7fd      	b.n	80032d4 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 80032d8:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <LoraInfo_Init+0x54>)
 80032da:	2200      	movs	r2, #0
 80032dc:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 80032de:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <LoraInfo_Init+0x54>)
 80032e0:	2203      	movs	r2, #3
 80032e2:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	200004c4 	.word	0x200004c4
 80032f0:	0801d98c 	.word	0x0801d98c

080032f4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 80032f8:	4b01      	ldr	r3, [pc, #4]	@ (8003300 <LoraInfo_GetPtr+0xc>)
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	200004c4 	.word	0x200004c4

08003304 <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 8003308:	4b22      	ldr	r3, [pc, #136]	@ (8003394 <MX_ADC_Init+0x90>)
 800330a:	4a23      	ldr	r2, [pc, #140]	@ (8003398 <MX_ADC_Init+0x94>)
 800330c:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 800330e:	4b21      	ldr	r3, [pc, #132]	@ (8003394 <MX_ADC_Init+0x90>)
 8003310:	2200      	movs	r2, #0
 8003312:	63da      	str	r2, [r3, #60]	@ 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003314:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <MX_ADC_Init+0x90>)
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	0612      	lsls	r2, r2, #24
 800331a:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 800331c:	4b1d      	ldr	r3, [pc, #116]	@ (8003394 <MX_ADC_Init+0x90>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8003322:	4b1c      	ldr	r3, [pc, #112]	@ (8003394 <MX_ADC_Init+0x90>)
 8003324:	2201      	movs	r2, #1
 8003326:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 8003328:	4b1a      	ldr	r3, [pc, #104]	@ (8003394 <MX_ADC_Init+0x90>)
 800332a:	2200      	movs	r2, #0
 800332c:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 800332e:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <MX_ADC_Init+0x90>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8003334:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <MX_ADC_Init+0x90>)
 8003336:	2207      	movs	r2, #7
 8003338:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800333a:	4b16      	ldr	r3, [pc, #88]	@ (8003394 <MX_ADC_Init+0x90>)
 800333c:	2201      	movs	r2, #1
 800333e:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003340:	4b14      	ldr	r3, [pc, #80]	@ (8003394 <MX_ADC_Init+0x90>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8003346:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <MX_ADC_Init+0x90>)
 8003348:	2220      	movs	r2, #32
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800334e:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <MX_ADC_Init+0x90>)
 8003350:	2221      	movs	r2, #33	@ 0x21
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003356:	4b0f      	ldr	r3, [pc, #60]	@ (8003394 <MX_ADC_Init+0x90>)
 8003358:	2200      	movs	r2, #0
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800335c:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <MX_ADC_Init+0x90>)
 800335e:	2204      	movs	r2, #4
 8003360:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003362:	4b0c      	ldr	r3, [pc, #48]	@ (8003394 <MX_ADC_Init+0x90>)
 8003364:	222c      	movs	r2, #44	@ 0x2c
 8003366:	2100      	movs	r1, #0
 8003368:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800336a:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <MX_ADC_Init+0x90>)
 800336c:	0018      	movs	r0, r3
 800336e:	f002 fcbd 	bl	8005cec <HAL_ADC_Init>
 8003372:	1e03      	subs	r3, r0, #0
 8003374:	d001      	beq.n	800337a <MX_ADC_Init+0x76>
  {
    Error_Handler();
 8003376:	f000 fa47 	bl	8003808 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <MX_ADC_Init+0x90>)
 800337c:	2100      	movs	r1, #0
 800337e:	0018      	movs	r0, r3
 8003380:	f003 f9a6 	bl	80066d0 <HAL_ADCEx_Calibration_Start>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d001      	beq.n	800338c <MX_ADC_Init+0x88>
  {
    Error_Handler();
 8003388:	f000 fa3e 	bl	8003808 <Error_Handler>
  }
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	200004d4 	.word	0x200004d4
 8003398:	40012400 	.word	0x40012400

0800339c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <HAL_ADC_MspInit+0x58>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d11e      	bne.n	80033ec <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ae:	240c      	movs	r4, #12
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	0018      	movs	r0, r3
 80033b4:	2314      	movs	r3, #20
 80033b6:	001a      	movs	r2, r3
 80033b8:	2100      	movs	r1, #0
 80033ba:	f019 ff6c 	bl	801d296 <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <HAL_ADC_MspInit+0x5c>)
 80033c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <HAL_ADC_MspInit+0x5c>)
 80033c4:	2180      	movs	r1, #128	@ 0x80
 80033c6:	0089      	lsls	r1, r1, #2
 80033c8:	430a      	orrs	r2, r1
 80033ca:	635a      	str	r2, [r3, #52]	@ 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2210      	movs	r2, #16
 80033d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	2203      	movs	r2, #3
 80033d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 80033de:	193a      	adds	r2, r7, r4
 80033e0:	23a0      	movs	r3, #160	@ 0xa0
 80033e2:	05db      	lsls	r3, r3, #23
 80033e4:	0011      	movs	r1, r2
 80033e6:	0018      	movs	r0, r3
 80033e8:	f003 fdde 	bl	8006fa8 <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 80033ec:	46c0      	nop			@ (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b009      	add	sp, #36	@ 0x24
 80033f2:	bd90      	pop	{r4, r7, pc}
 80033f4:	40012400 	.word	0x40012400
 80033f8:	40021000 	.word	0x40021000

080033fc <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <HAL_ADC_MspDeInit+0x4c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d118      	bne.n	8003440 <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 800340e:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <HAL_ADC_MspDeInit+0x50>)
 8003410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <HAL_ADC_MspDeInit+0x50>)
 8003414:	2180      	movs	r1, #128	@ 0x80
 8003416:	0089      	lsls	r1, r1, #2
 8003418:	430a      	orrs	r2, r1
 800341a:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 800341c:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_ADC_MspDeInit+0x50>)
 800341e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003420:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <HAL_ADC_MspDeInit+0x50>)
 8003422:	490b      	ldr	r1, [pc, #44]	@ (8003450 <HAL_ADC_MspDeInit+0x54>)
 8003424:	400a      	ands	r2, r1
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003428:	4b08      	ldr	r3, [pc, #32]	@ (800344c <HAL_ADC_MspDeInit+0x50>)
 800342a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800342c:	4b07      	ldr	r3, [pc, #28]	@ (800344c <HAL_ADC_MspDeInit+0x50>)
 800342e:	4908      	ldr	r1, [pc, #32]	@ (8003450 <HAL_ADC_MspDeInit+0x54>)
 8003430:	400a      	ands	r2, r1
 8003432:	635a      	str	r2, [r3, #52]	@ 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 8003434:	23a0      	movs	r3, #160	@ 0xa0
 8003436:	05db      	lsls	r3, r3, #23
 8003438:	2110      	movs	r1, #16
 800343a:	0018      	movs	r0, r3
 800343c:	f003 ff32 	bl	80072a4 <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40012400 	.word	0x40012400
 800344c:	40021000 	.word	0x40021000
 8003450:	fffffdff 	.word	0xfffffdff

08003454 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 8003458:	4b02      	ldr	r3, [pc, #8]	@ (8003464 <SYS_InitMeasurement+0x10>)
 800345a:	4a03      	ldr	r2, [pc, #12]	@ (8003468 <SYS_InitMeasurement+0x14>)
 800345c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	200004d4 	.word	0x200004d4
 8003468:	40012400 	.word	0x40012400

0800346c <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 800346c:	b5b0      	push	{r4, r5, r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8003472:	250e      	movs	r5, #14
 8003474:	197b      	adds	r3, r7, r5
 8003476:	2200      	movs	r2, #0
 8003478:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800347e:	1dbc      	adds	r4, r7, #6
 8003480:	f000 f83c 	bl	80034fc <SYS_GetBatteryLevel>
 8003484:	0003      	movs	r3, r0
 8003486:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8003488:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <SYS_GetTemperatureLevel+0x80>)
 800348a:	0018      	movs	r0, r3
 800348c:	f000 f864 	bl	8003558 <ADC_ReadChannels>
 8003490:	0003      	movs	r3, r0
 8003492:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003494:	1dbb      	adds	r3, r7, #6
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	4353      	muls	r3, r2
 800349c:	4914      	ldr	r1, [pc, #80]	@ (80034f0 <SYS_GetTemperatureLevel+0x84>)
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fc fe3a 	bl	8000118 <__udivsi3>
 80034a4:	0003      	movs	r3, r0
 80034a6:	001a      	movs	r2, r3
 80034a8:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <SYS_GetTemperatureLevel+0x88>)
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	1ad2      	subs	r2, r2, r3
 80034ae:	0013      	movs	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	189b      	adds	r3, r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	4a0f      	ldr	r2, [pc, #60]	@ (80034f8 <SYS_GetTemperatureLevel+0x8c>)
 80034ba:	8812      	ldrh	r2, [r2, #0]
 80034bc:	0011      	movs	r1, r2
 80034be:	4a0d      	ldr	r2, [pc, #52]	@ (80034f4 <SYS_GetTemperatureLevel+0x88>)
 80034c0:	8812      	ldrh	r2, [r2, #0]
 80034c2:	1a8a      	subs	r2, r1, r2
 80034c4:	0011      	movs	r1, r2
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7fc feb0 	bl	800022c <__divsi3>
 80034cc:	0003      	movs	r3, r0
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	22f0      	movs	r2, #240	@ 0xf0
 80034d2:	0152      	lsls	r2, r2, #5
 80034d4:	4694      	mov	ip, r2
 80034d6:	4463      	add	r3, ip
 80034d8:	b29a      	uxth	r2, r3
 80034da:	197b      	adds	r3, r7, r5
 80034dc:	801a      	strh	r2, [r3, #0]

//  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);

  return (int16_t) temperatureDegreeC;
 80034de:	197b      	adds	r3, r7, r5
 80034e0:	2200      	movs	r2, #0
 80034e2:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b004      	add	sp, #16
 80034ea:	bdb0      	pop	{r4, r5, r7, pc}
 80034ec:	48040000 	.word	0x48040000
 80034f0:	00000bb8 	.word	0x00000bb8
 80034f4:	1ff8007a 	.word	0x1ff8007a
 80034f8:	1ff8007e 	.word	0x1ff8007e

080034fc <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8003502:	1dbb      	adds	r3, r7, #6
 8003504:	2200      	movs	r2, #0
 8003506:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800350c:	4b0f      	ldr	r3, [pc, #60]	@ (800354c <SYS_GetBatteryLevel+0x50>)
 800350e:	0018      	movs	r0, r3
 8003510:	f000 f822 	bl	8003558 <ADC_ReadChannels>
 8003514:	0003      	movs	r3, r0
 8003516:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d103      	bne.n	8003526 <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 800351e:	1dbb      	adds	r3, r7, #6
 8003520:	2200      	movs	r2, #0
 8003522:	801a      	strh	r2, [r3, #0]
 8003524:	e00c      	b.n	8003540 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8003526:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <SYS_GetBatteryLevel+0x54>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	001a      	movs	r2, r3
 800352c:	4b09      	ldr	r3, [pc, #36]	@ (8003554 <SYS_GetBatteryLevel+0x58>)
 800352e:	4353      	muls	r3, r2
 8003530:	6839      	ldr	r1, [r7, #0]
 8003532:	0018      	movs	r0, r3
 8003534:	f7fc fdf0 	bl	8000118 <__udivsi3>
 8003538:	0003      	movs	r3, r0
 800353a:	001a      	movs	r2, r3
 800353c:	1dbb      	adds	r3, r7, #6
 800353e:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 8003540:	1dbb      	adds	r3, r7, #6
 8003542:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}
 800354c:	44020000 	.word	0x44020000
 8003550:	1ff80078 	.word	0x1ff80078
 8003554:	00000bb8 	.word	0x00000bb8

08003558 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003564:	230c      	movs	r3, #12
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	0018      	movs	r0, r3
 800356a:	2308      	movs	r3, #8
 800356c:	001a      	movs	r2, r3
 800356e:	2100      	movs	r1, #0
 8003570:	f019 fe91 	bl	801d296 <memset>

  MX_ADC_Init();
 8003574:	f7ff fec6 	bl	8003304 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8003578:	46c0      	nop			@ (mov r8, r8)
 800357a:	4b2c      	ldr	r3, [pc, #176]	@ (800362c <ADC_ReadChannels+0xd4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2208      	movs	r2, #8
 8003580:	4013      	ands	r3, r2
 8003582:	2b08      	cmp	r3, #8
 8003584:	d1f9      	bne.n	800357a <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8003586:	4b2a      	ldr	r3, [pc, #168]	@ (8003630 <ADC_ReadChannels+0xd8>)
 8003588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800358a:	4b29      	ldr	r3, [pc, #164]	@ (8003630 <ADC_ReadChannels+0xd8>)
 800358c:	2180      	movs	r1, #128	@ 0x80
 800358e:	0089      	lsls	r1, r1, #2
 8003590:	430a      	orrs	r2, r1
 8003592:	635a      	str	r2, [r3, #52]	@ 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003594:	4b27      	ldr	r3, [pc, #156]	@ (8003634 <ADC_ReadChannels+0xdc>)
 8003596:	2100      	movs	r1, #0
 8003598:	0018      	movs	r0, r3
 800359a:	f003 f899 	bl	80066d0 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 800359e:	240c      	movs	r4, #12
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	4a25      	ldr	r2, [pc, #148]	@ (8003638 <ADC_ReadChannels+0xe0>)
 80035a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	4a24      	ldr	r2, [pc, #144]	@ (800363c <ADC_ReadChannels+0xe4>)
 80035aa:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80035ac:	193a      	adds	r2, r7, r4
 80035ae:	4b21      	ldr	r3, [pc, #132]	@ (8003634 <ADC_ReadChannels+0xdc>)
 80035b0:	0011      	movs	r1, r2
 80035b2:	0018      	movs	r0, r3
 80035b4:	f002 fee0 	bl	8006378 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80035b8:	0021      	movs	r1, r4
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2280      	movs	r2, #128	@ 0x80
 80035c4:	0152      	lsls	r2, r2, #5
 80035c6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035c8:	187a      	adds	r2, r7, r1
 80035ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003634 <ADC_ReadChannels+0xdc>)
 80035cc:	0011      	movs	r1, r2
 80035ce:	0018      	movs	r0, r3
 80035d0:	f002 fed2 	bl	8006378 <HAL_ADC_ConfigChannel>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d001      	beq.n	80035dc <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 80035d8:	f000 f916 	bl	8003808 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80035dc:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <ADC_ReadChannels+0xdc>)
 80035de:	0018      	movs	r0, r3
 80035e0:	f002 fd94 	bl	800610c <HAL_ADC_Start>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d001      	beq.n	80035ec <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 80035e8:	f000 f90e 	bl	8003808 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80035ec:	2301      	movs	r3, #1
 80035ee:	425a      	negs	r2, r3
 80035f0:	4b10      	ldr	r3, [pc, #64]	@ (8003634 <ADC_ReadChannels+0xdc>)
 80035f2:	0011      	movs	r1, r2
 80035f4:	0018      	movs	r0, r3
 80035f6:	f002 fe1d 	bl	8006234 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 80035fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003634 <ADC_ReadChannels+0xdc>)
 80035fc:	0018      	movs	r0, r3
 80035fe:	f002 fdd9 	bl	80061b4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8003602:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <ADC_ReadChannels+0xdc>)
 8003604:	0018      	movs	r0, r3
 8003606:	f002 feab 	bl	8006360 <HAL_ADC_GetValue>
 800360a:	0003      	movs	r3, r0
 800360c:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 800360e:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <ADC_ReadChannels+0xdc>)
 8003610:	0018      	movs	r0, r3
 8003612:	f002 fcdf 	bl	8005fd4 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <ADC_ReadChannels+0xd8>)
 8003618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800361a:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <ADC_ReadChannels+0xd8>)
 800361c:	4908      	ldr	r1, [pc, #32]	@ (8003640 <ADC_ReadChannels+0xe8>)
 800361e:	400a      	ands	r2, r1
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34

  return ADCxConvertedValues;
 8003622:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b007      	add	sp, #28
 800362a:	bd90      	pop	{r4, r7, pc}
 800362c:	40007000 	.word	0x40007000
 8003630:	40021000 	.word	0x40021000
 8003634:	200004d4 	.word	0x200004d4
 8003638:	0007ffff 	.word	0x0007ffff
 800363c:	00001001 	.word	0x00001001
 8003640:	fffffdff 	.word	0xfffffdff

08003644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <MX_DMA_Init+0x38>)
 800364c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800364e:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <MX_DMA_Init+0x38>)
 8003650:	2101      	movs	r1, #1
 8003652:	430a      	orrs	r2, r1
 8003654:	631a      	str	r2, [r3, #48]	@ 0x30
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <MX_DMA_Init+0x38>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	2201      	movs	r2, #1
 800365c:	4013      	ands	r3, r2
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2100      	movs	r1, #0
 8003666:	200b      	movs	r0, #11
 8003668:	f003 f972 	bl	8006950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800366c:	200b      	movs	r0, #11
 800366e:	f003 f984 	bl	800697a <HAL_NVIC_EnableIRQ>

}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b002      	add	sp, #8
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	40021000 	.word	0x40021000

08003680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003686:	f002 fab7 	bl	8005bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800368a:	f000 f827 	bl	80036dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 800368e:	f7ff fa55 	bl	8002b3c <MX_LoRaWAN_Init>
      	   		size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
      	 	HAL_UART_Transmit(&husart2, Data, size, 1000);
      	 	*/
  //      uint16_t eepromBaseAddress = 0x08080000; // Пример адреса EEPROM
  	  #define eepromBaseAddress 0x08080000UL
        uint8_t dataToWrite[] = {0x01, 0x02, 0x03}; // Пример данных для записи
 8003692:	003b      	movs	r3, r7
 8003694:	4a10      	ldr	r2, [pc, #64]	@ (80036d8 <main+0x58>)
 8003696:	8811      	ldrh	r1, [r2, #0]
 8003698:	8019      	strh	r1, [r3, #0]
 800369a:	7892      	ldrb	r2, [r2, #2]
 800369c:	709a      	strb	r2, [r3, #2]
        uint8_t dataToWrite1 = 10; // Пример данных для записи
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	220a      	movs	r2, #10
 80036a2:	701a      	strb	r2, [r3, #0]
        uint8_t dataSize = sizeof(dataToWrite1); // Размер данных
 80036a4:	1dbb      	adds	r3, r7, #6
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
//        EEPROM_WRITE_DATA(STM32L072_EEPROM_START_ADDR, dataToWrite1, dataSize);
  //    FLASHEx_EEPROM_WRITE(0, params->DownlinkCounter, sizeof(params->DownlinkCounter));
  //      dataeprom = dataToWrite;
//        EEPROM_CLEAR();      // возможный вариант
//        EEPROM_WRITE_DATA(eepromBaseAddress, dataToWrite1, dataSize); // возможный вариант
        uint8_t datareadepr = 0; // Прочитанные данные
 80036aa:	1d7b      	adds	r3, r7, #5
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
//        EEPROM_ReadData();
        uint8_t datareadeprerror = 2; // Буфер ошибки
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	2202      	movs	r2, #2
 80036b4:	701a      	strb	r2, [r3, #0]
//        EEPROM_Read_Data(eepromBaseAddress, datareadepr, dataSize); //  возможный вариант
//        datareadepr =  EEPROM_ReadData();
//        datareadepr = EEPROM_Read_Data();
//        memcmp(datareadepr,dataToWrite);
         if (datareadepr == dataToWrite1)
 80036b6:	1d7a      	adds	r2, r7, #5
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d103      	bne.n	80036ca <main+0x4a>
        {
        	datareadeprerror = 100;
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	2264      	movs	r2, #100	@ 0x64
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	e002      	b.n	80036d0 <main+0x50>
        }
        else {
            // Прочитанные данные не соответствуют записанным данным
            // Выполняйте необходимые действия здесь
//               printf("Ошибка при записи или чтении данных из EEPROM\n");
            datareadeprerror =  0;
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 80036d0:	f7ff fa3d 	bl	8002b4e <MX_LoRaWAN_Process>
 80036d4:	e7fc      	b.n	80036d0 <main+0x50>
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	0801d9dc 	.word	0x0801d9dc

080036dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b09d      	sub	sp, #116	@ 0x74
 80036e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036e2:	2438      	movs	r4, #56	@ 0x38
 80036e4:	193b      	adds	r3, r7, r4
 80036e6:	0018      	movs	r0, r3
 80036e8:	2338      	movs	r3, #56	@ 0x38
 80036ea:	001a      	movs	r2, r3
 80036ec:	2100      	movs	r1, #0
 80036ee:	f019 fdd2 	bl	801d296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036f2:	2324      	movs	r3, #36	@ 0x24
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	0018      	movs	r0, r3
 80036f8:	2314      	movs	r3, #20
 80036fa:	001a      	movs	r2, r3
 80036fc:	2100      	movs	r1, #0
 80036fe:	f019 fdca 	bl	801d296 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003702:	003b      	movs	r3, r7
 8003704:	0018      	movs	r0, r3
 8003706:	2324      	movs	r3, #36	@ 0x24
 8003708:	001a      	movs	r2, r3
 800370a:	2100      	movs	r1, #0
 800370c:	f019 fdc3 	bl	801d296 <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003710:	0021      	movs	r1, r4
 8003712:	187b      	adds	r3, r7, r1
 8003714:	2202      	movs	r2, #2
 8003716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003718:	187b      	adds	r3, r7, r1
 800371a:	2200      	movs	r2, #0
 800371c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800371e:	187b      	adds	r3, r7, r1
 8003720:	2201      	movs	r2, #1
 8003722:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 8003724:	187b      	adds	r3, r7, r1
 8003726:	2201      	movs	r2, #1
 8003728:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800372a:	187b      	adds	r3, r7, r1
 800372c:	2210      	movs	r2, #16
 800372e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003730:	187b      	adds	r3, r7, r1
 8003732:	2202      	movs	r2, #2
 8003734:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8003736:	187b      	adds	r3, r7, r1
 8003738:	2200      	movs	r2, #0
 800373a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800373c:	187b      	adds	r3, r7, r1
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	0312      	lsls	r2, r2, #12
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003744:	187b      	adds	r3, r7, r1
 8003746:	2280      	movs	r2, #128	@ 0x80
 8003748:	0412      	lsls	r2, r2, #16
 800374a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800374c:	187b      	adds	r3, r7, r1
 800374e:	0018      	movs	r0, r3
 8003750:	f004 fda0 	bl	8008294 <HAL_RCC_OscConfig>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d001      	beq.n	800375c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003758:	f000 f856 	bl	8003808 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 800375c:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <SystemClock_Config+0x120>)
 800375e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003760:	4b26      	ldr	r3, [pc, #152]	@ (80037fc <SystemClock_Config+0x120>)
 8003762:	2180      	movs	r1, #128	@ 0x80
 8003764:	0549      	lsls	r1, r1, #21
 8003766:	430a      	orrs	r2, r1
 8003768:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800376a:	4b25      	ldr	r3, [pc, #148]	@ (8003800 <SystemClock_Config+0x124>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a25      	ldr	r2, [pc, #148]	@ (8003804 <SystemClock_Config+0x128>)
 8003770:	401a      	ands	r2, r3
 8003772:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <SystemClock_Config+0x124>)
 8003774:	2180      	movs	r1, #128	@ 0x80
 8003776:	0109      	lsls	r1, r1, #4
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <SystemClock_Config+0x124>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2210      	movs	r2, #16
 8003784:	4013      	ands	r3, r2
 8003786:	2b10      	cmp	r3, #16
 8003788:	d0f9      	beq.n	800377e <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800378a:	2124      	movs	r1, #36	@ 0x24
 800378c:	187b      	adds	r3, r7, r1
 800378e:	220f      	movs	r2, #15
 8003790:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2203      	movs	r2, #3
 8003796:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2200      	movs	r2, #0
 80037a2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2101      	movs	r1, #1
 80037ae:	0018      	movs	r0, r3
 80037b0:	f005 f944 	bl	8008a3c <HAL_RCC_ClockConfig>
 80037b4:	1e03      	subs	r3, r0, #0
 80037b6:	d001      	beq.n	80037bc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80037b8:	f000 f826 	bl	8003808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80037bc:	003b      	movs	r3, r7
 80037be:	22ab      	movs	r2, #171	@ 0xab
 80037c0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037c2:	003b      	movs	r3, r7
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037c8:	003b      	movs	r3, r7
 80037ca:	2200      	movs	r2, #0
 80037cc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037ce:	003b      	movs	r3, r7
 80037d0:	2200      	movs	r2, #0
 80037d2:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80037d4:	003b      	movs	r3, r7
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	0292      	lsls	r2, r2, #10
 80037da:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80037dc:	003b      	movs	r3, r7
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037e2:	003b      	movs	r3, r7
 80037e4:	0018      	movs	r0, r3
 80037e6:	f005 fb4d 	bl	8008e84 <HAL_RCCEx_PeriphCLKConfig>
 80037ea:	1e03      	subs	r3, r0, #0
 80037ec:	d001      	beq.n	80037f2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 80037ee:	f000 f80b 	bl	8003808 <Error_Handler>
  }
}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b01d      	add	sp, #116	@ 0x74
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
 8003804:	ffffe7ff 	.word	0xffffe7ff

08003808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 800380c:	46c0      	nop			@ (mov r8, r8)
 800380e:	e7fd      	b.n	800380c <Error_Handler+0x4>

08003810 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b090      	sub	sp, #64	@ 0x40
 8003814:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003816:	232c      	movs	r3, #44	@ 0x2c
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	0018      	movs	r0, r3
 800381c:	2314      	movs	r3, #20
 800381e:	001a      	movs	r2, r3
 8003820:	2100      	movs	r1, #0
 8003822:	f019 fd38 	bl	801d296 <memset>
  RTC_DateTypeDef sDate = {0};
 8003826:	2328      	movs	r3, #40	@ 0x28
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800382e:	003b      	movs	r3, r7
 8003830:	0018      	movs	r0, r3
 8003832:	2328      	movs	r3, #40	@ 0x28
 8003834:	001a      	movs	r2, r3
 8003836:	2100      	movs	r1, #0
 8003838:	f019 fd2d 	bl	801d296 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800383c:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <MX_RTC_Init+0x134>)
 800383e:	4a42      	ldr	r2, [pc, #264]	@ (8003948 <MX_RTC_Init+0x138>)
 8003840:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003842:	4b40      	ldr	r3, [pc, #256]	@ (8003944 <MX_RTC_Init+0x134>)
 8003844:	2200      	movs	r2, #0
 8003846:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003848:	4b3e      	ldr	r3, [pc, #248]	@ (8003944 <MX_RTC_Init+0x134>)
 800384a:	221f      	movs	r2, #31
 800384c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 800384e:	4b3d      	ldr	r3, [pc, #244]	@ (8003944 <MX_RTC_Init+0x134>)
 8003850:	4a3e      	ldr	r2, [pc, #248]	@ (800394c <MX_RTC_Init+0x13c>)
 8003852:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003854:	4b3b      	ldr	r3, [pc, #236]	@ (8003944 <MX_RTC_Init+0x134>)
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800385a:	4b3a      	ldr	r3, [pc, #232]	@ (8003944 <MX_RTC_Init+0x134>)
 800385c:	2200      	movs	r2, #0
 800385e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003860:	4b38      	ldr	r3, [pc, #224]	@ (8003944 <MX_RTC_Init+0x134>)
 8003862:	2200      	movs	r2, #0
 8003864:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003866:	4b37      	ldr	r3, [pc, #220]	@ (8003944 <MX_RTC_Init+0x134>)
 8003868:	2200      	movs	r2, #0
 800386a:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800386c:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <MX_RTC_Init+0x134>)
 800386e:	0018      	movs	r0, r3
 8003870:	f005 fc5e 	bl	8009130 <HAL_RTC_Init>
 8003874:	1e03      	subs	r3, r0, #0
 8003876:	d001      	beq.n	800387c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003878:	f7ff ffc6 	bl	8003808 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800387c:	212c      	movs	r1, #44	@ 0x2c
 800387e:	187b      	adds	r3, r7, r1
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003884:	187b      	adds	r3, r7, r1
 8003886:	2200      	movs	r2, #0
 8003888:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800388a:	187b      	adds	r3, r7, r1
 800388c:	2200      	movs	r2, #0
 800388e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003896:	187b      	adds	r3, r7, r1
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800389c:	1879      	adds	r1, r7, r1
 800389e:	4b29      	ldr	r3, [pc, #164]	@ (8003944 <MX_RTC_Init+0x134>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	0018      	movs	r0, r3
 80038a4:	f005 fce2 	bl	800926c <HAL_RTC_SetTime>
 80038a8:	1e03      	subs	r3, r0, #0
 80038aa:	d001      	beq.n	80038b0 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80038ac:	f7ff ffac 	bl	8003808 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80038b0:	2128      	movs	r1, #40	@ 0x28
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	2201      	movs	r2, #1
 80038bc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	2201      	movs	r2, #1
 80038c2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	2200      	movs	r2, #0
 80038c8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80038ca:	1879      	adds	r1, r7, r1
 80038cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <MX_RTC_Init+0x134>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	0018      	movs	r0, r3
 80038d2:	f005 fdeb 	bl	80094ac <HAL_RTC_SetDate>
 80038d6:	1e03      	subs	r3, r0, #0
 80038d8:	d001      	beq.n	80038de <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80038da:	f7ff ff95 	bl	8003808 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80038de:	003b      	movs	r3, r7
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80038e4:	003b      	movs	r3, r7
 80038e6:	2200      	movs	r2, #0
 80038e8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80038ea:	003b      	movs	r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80038f0:	003b      	movs	r3, r7
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038f6:	003b      	movs	r3, r7
 80038f8:	2200      	movs	r2, #0
 80038fa:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038fc:	003b      	movs	r3, r7
 80038fe:	2200      	movs	r2, #0
 8003900:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003902:	003b      	movs	r3, r7
 8003904:	2200      	movs	r2, #0
 8003906:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003908:	003b      	movs	r3, r7
 800390a:	22a0      	movs	r2, #160	@ 0xa0
 800390c:	0512      	lsls	r2, r2, #20
 800390e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003910:	003b      	movs	r3, r7
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 8003916:	003b      	movs	r3, r7
 8003918:	2220      	movs	r2, #32
 800391a:	211e      	movs	r1, #30
 800391c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800391e:	003b      	movs	r3, r7
 8003920:	2280      	movs	r2, #128	@ 0x80
 8003922:	0052      	lsls	r2, r2, #1
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003926:	0039      	movs	r1, r7
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <MX_RTC_Init+0x134>)
 800392a:	2200      	movs	r2, #0
 800392c:	0018      	movs	r0, r3
 800392e:	f005 feb9 	bl	80096a4 <HAL_RTC_SetAlarm_IT>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d001      	beq.n	800393a <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003936:	f7ff ff67 	bl	8003808 <Error_Handler>
  }

}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b010      	add	sp, #64	@ 0x40
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	200005a8 	.word	0x200005a8
 8003948:	40002800 	.word	0x40002800
 800394c:	000003ff 	.word	0x000003ff

08003950 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003950:	b590      	push	{r4, r7, lr}
 8003952:	b091      	sub	sp, #68	@ 0x44
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003958:	2408      	movs	r4, #8
 800395a:	193b      	adds	r3, r7, r4
 800395c:	0018      	movs	r0, r3
 800395e:	2338      	movs	r3, #56	@ 0x38
 8003960:	001a      	movs	r2, r3
 8003962:	2100      	movs	r1, #0
 8003964:	f019 fc97 	bl	801d296 <memset>
  if (rtcHandle->Instance == RTC)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a16      	ldr	r2, [pc, #88]	@ (80039c8 <HAL_RTC_MspInit+0x78>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d126      	bne.n	80039c0 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003972:	193b      	adds	r3, r7, r4
 8003974:	2204      	movs	r2, #4
 8003976:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 8003978:	193b      	adds	r3, r7, r4
 800397a:	2280      	movs	r2, #128	@ 0x80
 800397c:	0052      	lsls	r2, r2, #1
 800397e:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 8003980:	193b      	adds	r3, r7, r4
 8003982:	2200      	movs	r2, #0
 8003984:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003986:	193b      	adds	r3, r7, r4
 8003988:	2200      	movs	r2, #0
 800398a:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800398c:	193b      	adds	r3, r7, r4
 800398e:	2200      	movs	r2, #0
 8003990:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003992:	193b      	adds	r3, r7, r4
 8003994:	0018      	movs	r0, r3
 8003996:	f004 fc7d 	bl	8008294 <HAL_RCC_OscConfig>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d001      	beq.n	80039a2 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 800399e:	f7ff ff33 	bl	8003808 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_RTC_MspInit+0x7c>)
 80039a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <HAL_RTC_MspInit+0x7c>)
 80039a8:	2180      	movs	r1, #128	@ 0x80
 80039aa:	02c9      	lsls	r1, r1, #11
 80039ac:	430a      	orrs	r2, r1
 80039ae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2100      	movs	r1, #0
 80039b4:	2002      	movs	r0, #2
 80039b6:	f002 ffcb 	bl	8006950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 80039ba:	2002      	movs	r0, #2
 80039bc:	f002 ffdd 	bl	800697a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b011      	add	sp, #68	@ 0x44
 80039c6:	bd90      	pop	{r4, r7, pc}
 80039c8:	40002800 	.word	0x40002800
 80039cc:	40021000 	.word	0x40021000

080039d0 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	0c1b      	lsrs	r3, r3, #16
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 80039ee:	4b16      	ldr	r3, [pc, #88]	@ (8003a48 <RTC_IF_Init+0x60>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	4053      	eors	r3, r2
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <RTC_IF_Init+0x56>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	2220      	movs	r2, #32
 8003a00:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	0252      	lsls	r2, r2, #9
 8003a08:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f005 fa39 	bl	8008e84 <HAL_RCCEx_PeriphCLKConfig>
 8003a12:	1e03      	subs	r3, r0, #0
 8003a14:	d001      	beq.n	8003a1a <RTC_IF_Init+0x32>
    {
      /* Initialization Error */
      while (1);
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	e7fd      	b.n	8003a16 <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003a1a:	f7ff fef9 	bl	8003810 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <RTC_IF_Init+0x64>)
 8003a24:	0011      	movs	r1, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f005 ff88 	bl	800993c <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003a2c:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <RTC_IF_Init+0x64>)
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f006 f932 	bl	8009c98 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003a34:	f000 f858 	bl	8003ae8 <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <RTC_IF_Init+0x60>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b00a      	add	sp, #40	@ 0x28
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200005cc 	.word	0x200005cc
 8003a4c:	200005a8 	.word	0x200005a8

08003a50 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003a58:	4b14      	ldr	r3, [pc, #80]	@ (8003aac <RTC_IF_StartTimer+0x5c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	5e9b      	ldrsh	r3, [r3, r2]
 8003a5e:	3303      	adds	r3, #3
 8003a60:	001c      	movs	r4, r3
 8003a62:	f000 f861 	bl	8003b28 <RTC_IF_GetTimerElapsedTime>
 8003a66:	0002      	movs	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	429c      	cmp	r4, r3
 8003a6e:	d204      	bcs.n	8003a7a <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003a70:	2100      	movs	r1, #0
 8003a72:	2002      	movs	r0, #2
 8003a74:	f017 fe6a 	bl	801b74c <UTIL_LPM_SetStopMode>
 8003a78:	e003      	b.n	8003a82 <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	2002      	movs	r0, #2
 8003a7e:	f017 fe65 	bl	801b74c <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003a82:	f017 fec3 	bl	801b80c <UTIL_LPM_GetMode>
 8003a86:	0003      	movs	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d106      	bne.n	8003a9a <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003a8c:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <RTC_IF_StartTimer+0x5c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	5e9b      	ldrsh	r3, [r3, r2]
 8003a92:	001a      	movs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 f959 	bl	8003d54 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b003      	add	sp, #12
 8003aaa:	bd90      	pop	{r4, r7, pc}
 8003aac:	200005ce 	.word	0x200005ce

08003ab0 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <RTC_IF_StopTimer+0x30>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	22ff      	movs	r2, #255	@ 0xff
 8003abc:	401a      	ands	r2, r3
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <RTC_IF_StopTimer+0x30>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4908      	ldr	r1, [pc, #32]	@ (8003ae4 <RTC_IF_StopTimer+0x34>)
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	005a      	lsls	r2, r3, #1
 8003acc:	4b04      	ldr	r3, [pc, #16]	@ (8003ae0 <RTC_IF_StopTimer+0x30>)
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f005 ff33 	bl	800993c <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	200005a8 	.word	0x200005a8
 8003ae4:	fffffe7f 	.word	0xfffffe7f

08003ae8 <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003aec:	4a06      	ldr	r2, [pc, #24]	@ (8003b08 <RTC_IF_SetTimerContext+0x20>)
 8003aee:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <RTC_IF_SetTimerContext+0x24>)
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 fa92 	bl	800401c <RTC_GetCalendarValue>
 8003af8:	0002      	movs	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <RTC_IF_SetTimerContext+0x28>)
 8003afc:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003afe:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <RTC_IF_SetTimerContext+0x28>)
 8003b00:	681b      	ldr	r3, [r3, #0]
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	200005fc 	.word	0x200005fc
 8003b0c:	20000610 	.word	0x20000610
 8003b10:	200005f8 	.word	0x200005f8

08003b14 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003b18:	4b02      	ldr	r3, [pc, #8]	@ (8003b24 <RTC_IF_GetTimerContext+0x10>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	200005f8 	.word	0x200005f8

08003b28 <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003b2e:	2308      	movs	r3, #8
 8003b30:	18fa      	adds	r2, r7, r3
 8003b32:	1d3b      	adds	r3, r7, #4
 8003b34:	0011      	movs	r1, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 fa70 	bl	800401c <RTC_GetCalendarValue>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003b40:	4b03      	ldr	r3, [pc, #12]	@ (8003b50 <RTC_IF_GetTimerElapsedTime+0x28>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	1ad3      	subs	r3, r2, r3
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b008      	add	sp, #32
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	200005f8 	.word	0x200005f8

08003b54 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <RTC_IF_GetTimerValue+0x30>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003b66:	2308      	movs	r3, #8
 8003b68:	18fa      	adds	r2, r7, r3
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	0011      	movs	r1, r2
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fa54 	bl	800401c <RTC_GetCalendarValue>
 8003b74:	0003      	movs	r3, r0
 8003b76:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 8003b78:	69fb      	ldr	r3, [r7, #28]
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b008      	add	sp, #32
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	200005cc 	.word	0x200005cc

08003b88 <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003b8c:	2303      	movs	r3, #3
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003b94:	b5b0      	push	{r4, r5, r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	000a      	movs	r2, r1
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	000b      	movs	r3, r1
 8003ba4:	0e51      	lsrs	r1, r2, #25
 8003ba6:	01dd      	lsls	r5, r3, #7
 8003ba8:	430d      	orrs	r5, r1
 8003baa:	01d4      	lsls	r4, r2, #7
 8003bac:	227d      	movs	r2, #125	@ 0x7d
 8003bae:	2300      	movs	r3, #0
 8003bb0:	0020      	movs	r0, r4
 8003bb2:	0029      	movs	r1, r5
 8003bb4:	f7fc fc88 	bl	80004c8 <__aeabi_uldivmod>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	000b      	movs	r3, r1
 8003bbc:	0013      	movs	r3, r2
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bdb0      	pop	{r4, r5, r7, pc}

08003bc6 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc8:	b089      	sub	sp, #36	@ 0x24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	0ed1      	lsrs	r1, r2, #27
 8003bdc:	0158      	lsls	r0, r3, #5
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	4308      	orrs	r0, r1
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	0153      	lsls	r3, r2, #5
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	68fc      	ldr	r4, [r7, #12]
 8003bee:	6939      	ldr	r1, [r7, #16]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	1a5b      	subs	r3, r3, r1
 8003bf4:	4194      	sbcs	r4, r2
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	0023      	movs	r3, r4
 8003bfa:	0f91      	lsrs	r1, r2, #30
 8003bfc:	0098      	lsls	r0, r3, #2
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4308      	orrs	r0, r1
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	0093      	lsls	r3, r2, #2
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	6838      	ldr	r0, [r7, #0]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	1812      	adds	r2, r2, r0
 8003c14:	414b      	adcs	r3, r1
 8003c16:	0659      	lsls	r1, r3, #25
 8003c18:	09d0      	lsrs	r0, r2, #7
 8003c1a:	0005      	movs	r5, r0
 8003c1c:	0028      	movs	r0, r5
 8003c1e:	4308      	orrs	r0, r1
 8003c20:	0005      	movs	r5, r0
 8003c22:	09db      	lsrs	r3, r3, #7
 8003c24:	001e      	movs	r6, r3
 8003c26:	002b      	movs	r3, r5
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b009      	add	sp, #36	@ 0x24
 8003c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c30 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f7ff ffa6 	bl	8003b94 <RTC_IF_Convert_ms2Tick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8003c4c:	f7ff ff82 	bl	8003b54 <RTC_IF_GetTimerValue>
 8003c50:	0003      	movs	r3, r0
 8003c52:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003c54:	e000      	b.n	8003c58 <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 8003c56:	46c0      	nop			@ (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003c58:	f7ff ff7c 	bl	8003b54 <RTC_IF_GetTimerValue>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d8f6      	bhi.n	8003c56 <RTC_IF_DelayMs+0x26>
  }
}
 8003c68:	46c0      	nop			@ (mov r8, r8)
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 8003c7a:	f018 fa97 	bl	801c1ac <UTIL_TIMER_IRQ_Handler>
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b002      	add	sp, #8
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 8003c86:	b5b0      	push	{r4, r5, r7, lr}
 8003c88:	b08c      	sub	sp, #48	@ 0x30
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003c8e:	230c      	movs	r3, #12
 8003c90:	18fa      	adds	r2, r7, r3
 8003c92:	2308      	movs	r3, #8
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	0011      	movs	r1, r2
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 f9bf 	bl	800401c <RTC_GetCalendarValue>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca8:	059b      	lsls	r3, r3, #22
 8003caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cac:	0a94      	lsrs	r4, r2, #10
 8003cae:	431c      	orrs	r4, r3
 8003cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb2:	0a9d      	lsrs	r5, r3, #10
 8003cb4:	0023      	movs	r3, r4
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	059b      	lsls	r3, r3, #22
 8003cbc:	0d9b      	lsrs	r3, r3, #22
 8003cbe:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7ff ff7f 	bl	8003bc6 <RTC_IF_Convert_Tick2ms>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	801a      	strh	r2, [r3, #0]

  return seconds;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b00c      	add	sp, #48	@ 0x30
 8003cd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003cdc <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <RTC_IF_BkUp_Write_Seconds+0x1c>)
 8003ce8:	2100      	movs	r1, #0
 8003cea:	0018      	movs	r0, r3
 8003cec:	f005 ffaa 	bl	8009c44 <HAL_RTCEx_BKUPWrite>
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200005a8 	.word	0x200005a8

08003cfc <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8003d08:	2101      	movs	r1, #1
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f005 ff9a 	bl	8009c44 <HAL_RTCEx_BKUPWrite>
}
 8003d10:	46c0      	nop			@ (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	200005a8 	.word	0x200005a8

08003d1c <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003d20:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <RTC_IF_BkUp_Read_Seconds+0x18>)
 8003d22:	2100      	movs	r1, #0
 8003d24:	0018      	movs	r0, r3
 8003d26:	f005 ffa3 	bl	8009c70 <HAL_RTCEx_BKUPRead>
 8003d2a:	0003      	movs	r3, r0
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	200005a8 	.word	0x200005a8

08003d38 <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003d3c:	4b04      	ldr	r3, [pc, #16]	@ (8003d50 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 8003d3e:	2101      	movs	r1, #1
 8003d40:	0018      	movs	r0, r3
 8003d42:	f005 ff95 	bl	8009c70 <HAL_RTCEx_BKUPRead>
 8003d46:	0003      	movs	r3, r0
}
 8003d48:	0018      	movs	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	200005a8 	.word	0x200005a8

08003d54 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8003d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d56:	b08d      	sub	sp, #52	@ 0x34
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8003d5c:	252e      	movs	r5, #46	@ 0x2e
 8003d5e:	197b      	adds	r3, r7, r5
 8003d60:	2200      	movs	r2, #0
 8003d62:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8003d64:	232c      	movs	r3, #44	@ 0x2c
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	2200      	movs	r2, #0
 8003d6a:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8003d6c:	232a      	movs	r3, #42	@ 0x2a
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2200      	movs	r2, #0
 8003d72:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8003d74:	2328      	movs	r3, #40	@ 0x28
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8003d7c:	2626      	movs	r6, #38	@ 0x26
 8003d7e:	19bb      	adds	r3, r7, r6
 8003d80:	2200      	movs	r2, #0
 8003d82:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003d84:	2310      	movs	r3, #16
 8003d86:	18fa      	adds	r2, r7, r3
 8003d88:	4b9a      	ldr	r3, [pc, #616]	@ (8003ff4 <RTC_StartWakeUpAlarm+0x2a0>)
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	cb13      	ldmia	r3!, {r0, r1, r4}
 8003d8e:	c213      	stmia	r2!, {r0, r1, r4}
 8003d90:	cb03      	ldmia	r3!, {r0, r1}
 8003d92:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003d94:	240c      	movs	r4, #12
 8003d96:	193b      	adds	r3, r7, r4
 8003d98:	4a96      	ldr	r2, [pc, #600]	@ (8003ff4 <RTC_StartWakeUpAlarm+0x2a0>)
 8003d9a:	6992      	ldr	r2, [r2, #24]
 8003d9c:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8003d9e:	f7ff fe87 	bl	8003ab0 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003da2:	2310      	movs	r3, #16
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	197b      	adds	r3, r7, r5
 8003dac:	4992      	ldr	r1, [pc, #584]	@ (8003ff8 <RTC_StartWakeUpAlarm+0x2a4>)
 8003dae:	1a8a      	subs	r2, r1, r2
 8003db0:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	059b      	lsls	r3, r3, #22
 8003db8:	0d9b      	lsrs	r3, r3, #22
 8003dba:	b299      	uxth	r1, r3
 8003dbc:	197b      	adds	r3, r7, r5
 8003dbe:	197a      	adds	r2, r7, r5
 8003dc0:	8812      	ldrh	r2, [r2, #0]
 8003dc2:	188a      	adds	r2, r1, r2
 8003dc4:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0a9b      	lsrs	r3, r3, #10
 8003dca:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003dcc:	193b      	adds	r3, r7, r4
 8003dce:	789a      	ldrb	r2, [r3, #2]
 8003dd0:	19bb      	adds	r3, r7, r6
 8003dd2:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003dd4:	e00a      	b.n	8003dec <RTC_StartWakeUpAlarm+0x98>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a88      	ldr	r2, [pc, #544]	@ (8003ffc <RTC_StartWakeUpAlarm+0x2a8>)
 8003dda:	4694      	mov	ip, r2
 8003ddc:	4463      	add	r3, ip
 8003dde:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8003de0:	2126      	movs	r1, #38	@ 0x26
 8003de2:	187b      	adds	r3, r7, r1
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	3201      	adds	r2, #1
 8003dea:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a84      	ldr	r2, [pc, #528]	@ (8004000 <RTC_StartWakeUpAlarm+0x2ac>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d8f0      	bhi.n	8003dd6 <RTC_StartWakeUpAlarm+0x82>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8003df4:	2310      	movs	r3, #16
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	2328      	movs	r3, #40	@ 0x28
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003e00:	e00a      	b.n	8003e18 <RTC_StartWakeUpAlarm+0xc4>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a7f      	ldr	r2, [pc, #508]	@ (8004004 <RTC_StartWakeUpAlarm+0x2b0>)
 8003e06:	4694      	mov	ip, r2
 8003e08:	4463      	add	r3, ip
 8003e0a:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8003e0c:	2128      	movs	r1, #40	@ 0x28
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	3201      	adds	r2, #1
 8003e16:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	23e1      	movs	r3, #225	@ 0xe1
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d2ef      	bcs.n	8003e02 <RTC_StartWakeUpAlarm+0xae>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003e22:	2310      	movs	r3, #16
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	785a      	ldrb	r2, [r3, #1]
 8003e28:	232a      	movs	r3, #42	@ 0x2a
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003e2e:	e008      	b.n	8003e42 <RTC_StartWakeUpAlarm+0xee>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3b3c      	subs	r3, #60	@ 0x3c
 8003e34:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8003e36:	212a      	movs	r1, #42	@ 0x2a
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	3201      	adds	r2, #1
 8003e40:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b3b      	cmp	r3, #59	@ 0x3b
 8003e46:	d8f3      	bhi.n	8003e30 <RTC_StartWakeUpAlarm+0xdc>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8003e48:	2310      	movs	r3, #16
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	789b      	ldrb	r3, [r3, #2]
 8003e4e:	0019      	movs	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	232c      	movs	r3, #44	@ 0x2c
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	188a      	adds	r2, r1, r2
 8003e5a:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003e5c:	e00d      	b.n	8003e7a <RTC_StartWakeUpAlarm+0x126>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 8003e5e:	222e      	movs	r2, #46	@ 0x2e
 8003e60:	18bb      	adds	r3, r7, r2
 8003e62:	18ba      	adds	r2, r7, r2
 8003e64:	8812      	ldrh	r2, [r2, #0]
 8003e66:	4968      	ldr	r1, [pc, #416]	@ (8004008 <RTC_StartWakeUpAlarm+0x2b4>)
 8003e68:	468c      	mov	ip, r1
 8003e6a:	4462      	add	r2, ip
 8003e6c:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8003e6e:	212c      	movs	r1, #44	@ 0x2c
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	3201      	adds	r2, #1
 8003e78:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003e7a:	232e      	movs	r3, #46	@ 0x2e
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	881a      	ldrh	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d2ea      	bcs.n	8003e5e <RTC_StartWakeUpAlarm+0x10a>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003e88:	e00b      	b.n	8003ea2 <RTC_StartWakeUpAlarm+0x14e>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003e8a:	222c      	movs	r2, #44	@ 0x2c
 8003e8c:	18bb      	adds	r3, r7, r2
 8003e8e:	18ba      	adds	r2, r7, r2
 8003e90:	8812      	ldrh	r2, [r2, #0]
 8003e92:	3a3c      	subs	r2, #60	@ 0x3c
 8003e94:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8003e96:	212a      	movs	r1, #42	@ 0x2a
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	3201      	adds	r2, #1
 8003ea0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003ea2:	232c      	movs	r3, #44	@ 0x2c
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2b3b      	cmp	r3, #59	@ 0x3b
 8003eaa:	d8ee      	bhi.n	8003e8a <RTC_StartWakeUpAlarm+0x136>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003eac:	e00b      	b.n	8003ec6 <RTC_StartWakeUpAlarm+0x172>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003eae:	222a      	movs	r2, #42	@ 0x2a
 8003eb0:	18bb      	adds	r3, r7, r2
 8003eb2:	18ba      	adds	r2, r7, r2
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	3a3c      	subs	r2, #60	@ 0x3c
 8003eb8:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8003eba:	2128      	movs	r1, #40	@ 0x28
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	3201      	adds	r2, #1
 8003ec4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003ec6:	232a      	movs	r3, #42	@ 0x2a
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ece:	d8ee      	bhi.n	8003eae <RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003ed0:	e00b      	b.n	8003eea <RTC_StartWakeUpAlarm+0x196>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003ed2:	2228      	movs	r2, #40	@ 0x28
 8003ed4:	18bb      	adds	r3, r7, r2
 8003ed6:	18ba      	adds	r2, r7, r2
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	3a18      	subs	r2, #24
 8003edc:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8003ede:	2126      	movs	r1, #38	@ 0x26
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	3201      	adds	r2, #1
 8003ee8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003eea:	2328      	movs	r3, #40	@ 0x28
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	2b17      	cmp	r3, #23
 8003ef2:	d8ee      	bhi.n	8003ed2 <RTC_StartWakeUpAlarm+0x17e>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8003ef4:	210c      	movs	r1, #12
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	78db      	ldrb	r3, [r3, #3]
 8003efa:	2203      	movs	r2, #3
 8003efc:	4013      	ands	r3, r2
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d119      	bne.n	8003f38 <RTC_StartWakeUpAlarm+0x1e4>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	4a40      	ldr	r2, [pc, #256]	@ (800400c <RTC_StartWakeUpAlarm+0x2b8>)
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
 8003f0e:	001a      	movs	r2, r3
 8003f10:	2426      	movs	r4, #38	@ 0x26
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d928      	bls.n	8003f6c <RTC_StartWakeUpAlarm+0x218>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8003f1a:	193b      	adds	r3, r7, r4
 8003f1c:	8818      	ldrh	r0, [r3, #0]
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	4a39      	ldr	r2, [pc, #228]	@ (800400c <RTC_StartWakeUpAlarm+0x2b8>)
 8003f26:	5cd3      	ldrb	r3, [r2, r3]
 8003f28:	0019      	movs	r1, r3
 8003f2a:	f7fc fa65 	bl	80003f8 <__aeabi_idivmod>
 8003f2e:	000b      	movs	r3, r1
 8003f30:	001a      	movs	r2, r3
 8003f32:	193b      	adds	r3, r7, r4
 8003f34:	801a      	strh	r2, [r3, #0]
 8003f36:	e019      	b.n	8003f6c <RTC_StartWakeUpAlarm+0x218>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003f38:	210c      	movs	r1, #12
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	4a33      	ldr	r2, [pc, #204]	@ (8004010 <RTC_StartWakeUpAlarm+0x2bc>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	001a      	movs	r2, r3
 8003f46:	2426      	movs	r4, #38	@ 0x26
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d90d      	bls.n	8003f6c <RTC_StartWakeUpAlarm+0x218>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	8818      	ldrh	r0, [r3, #0]
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004010 <RTC_StartWakeUpAlarm+0x2bc>)
 8003f5c:	5cd3      	ldrb	r3, [r2, r3]
 8003f5e:	0019      	movs	r1, r3
 8003f60:	f7fc fa4a 	bl	80003f8 <__aeabi_idivmod>
 8003f64:	000b      	movs	r3, r1
 8003f66:	001a      	movs	r2, r3
 8003f68:	193b      	adds	r3, r7, r4
 8003f6a:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8003f6c:	232e      	movs	r3, #46	@ 0x2e
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	4a21      	ldr	r2, [pc, #132]	@ (8003ff8 <RTC_StartWakeUpAlarm+0x2a4>)
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	001a      	movs	r2, r3
 8003f78:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003f7a:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8003f7c:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003f7e:	22a0      	movs	r2, #160	@ 0xa0
 8003f80:	0512      	lsls	r2, r2, #20
 8003f82:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8003f84:	232c      	movs	r3, #44	@ 0x2c
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b21      	ldr	r3, [pc, #132]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003f8e:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8003f90:	232a      	movs	r3, #42	@ 0x2a
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003f9a:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8003f9c:	2328      	movs	r3, #40	@ 0x28
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fa6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003fa8:	2326      	movs	r3, #38	@ 0x26
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b2d9      	uxtb	r1, r3
 8003fb0:	4b18      	ldr	r3, [pc, #96]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8003fb6:	2310      	movs	r3, #16
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	78da      	ldrb	r2, [r3, #3]
 8003fbc:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fbe:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003fc0:	4b14      	ldr	r3, [pc, #80]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8003fc6:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fce:	2280      	movs	r2, #128	@ 0x80
 8003fd0:	0052      	lsls	r2, r2, #1
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003fe0:	490c      	ldr	r1, [pc, #48]	@ (8004014 <RTC_StartWakeUpAlarm+0x2c0>)
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <RTC_StartWakeUpAlarm+0x2c4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f005 fb5c 	bl	80096a4 <HAL_RTC_SetAlarm_IT>
}
 8003fec:	46c0      	nop			@ (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b00d      	add	sp, #52	@ 0x34
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff4:	200005f8 	.word	0x200005f8
 8003ff8:	000003ff 	.word	0x000003ff
 8003ffc:	fffeae80 	.word	0xfffeae80
 8004000:	0001517f 	.word	0x0001517f
 8004004:	fffff1f0 	.word	0xfffff1f0
 8004008:	fffffc00 	.word	0xfffffc00
 800400c:	0801d9ec 	.word	0x0801d9ec
 8004010:	0801d9e0 	.word	0x0801d9e0
 8004014:	200005d0 	.word	0x200005d0
 8004018:	200005a8 	.word	0x200005a8

0800401c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	4b42      	ldr	r3, [pc, #264]	@ (8004138 <RTC_GetCalendarValue+0x11c>)
 800402e:	2200      	movs	r2, #0
 8004030:	0018      	movs	r0, r3
 8004032:	f005 f9df 	bl	80093f4 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 8004036:	4b41      	ldr	r3, [pc, #260]	@ (800413c <RTC_GetCalendarValue+0x120>)
 8004038:	0018      	movs	r0, r3
 800403a:	f7ff fcc9 	bl	80039d0 <LL_RTC_TIME_GetSubSecond>
 800403e:	0003      	movs	r3, r0
 8004040:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4b3c      	ldr	r3, [pc, #240]	@ (8004138 <RTC_GetCalendarValue+0x11c>)
 8004046:	2200      	movs	r2, #0
 8004048:	0018      	movs	r0, r3
 800404a:	f005 fadd 	bl	8009608 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800404e:	6839      	ldr	r1, [r7, #0]
 8004050:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <RTC_GetCalendarValue+0x11c>)
 8004052:	2200      	movs	r2, #0
 8004054:	0018      	movs	r0, r3
 8004056:	f005 f9cd 	bl	80093f4 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800405a:	4b38      	ldr	r3, [pc, #224]	@ (800413c <RTC_GetCalendarValue+0x120>)
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fcb7 	bl	80039d0 <LL_RTC_TIME_GetSubSecond>
 8004062:	0002      	movs	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4293      	cmp	r3, r2
 8004068:	d1e5      	bne.n	8004036 <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	78db      	ldrb	r3, [r3, #3]
 800406e:	001a      	movs	r2, r3
 8004070:	4b33      	ldr	r3, [pc, #204]	@ (8004140 <RTC_GetCalendarValue+0x124>)
 8004072:	4353      	muls	r3, r2
 8004074:	3303      	adds	r3, #3
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	78db      	ldrb	r3, [r3, #3]
 800407e:	2203      	movs	r2, #3
 8004080:	4013      	ands	r3, r2
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <RTC_GetCalendarValue+0x70>
 8004088:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <RTC_GetCalendarValue+0x128>)
 800408a:	e000      	b.n	800408e <RTC_GetCalendarValue+0x72>
 800408c:	4b2e      	ldr	r3, [pc, #184]	@ (8004148 <RTC_GetCalendarValue+0x12c>)
 800408e:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	1e5a      	subs	r2, r3, #1
 8004096:	0013      	movs	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	3301      	adds	r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	da00      	bge.n	80040a8 <RTC_GetCalendarValue+0x8c>
 80040a6:	3301      	adds	r3, #1
 80040a8:	105b      	asrs	r3, r3, #1
 80040aa:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	40da      	lsrs	r2, r3
 80040b8:	0013      	movs	r3, r2
 80040ba:	2203      	movs	r2, #3
 80040bc:	4013      	ands	r3, r2
 80040be:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	18d3      	adds	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	789b      	ldrb	r3, [r3, #2]
 80040ca:	001a      	movs	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	18d3      	adds	r3, r2, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	0013      	movs	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	011a      	lsls	r2, r3, #4
 80040de:	1ad2      	subs	r2, r2, r3
 80040e0:	0113      	lsls	r3, r2, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	01db      	lsls	r3, r3, #7
 80040e6:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	789b      	ldrb	r3, [r3, #2]
 80040ec:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	001a      	movs	r2, r3
 80040f4:	0013      	movs	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	011a      	lsls	r2, r3, #4
 80040fc:	1ad2      	subs	r2, r2, r3
 80040fe:	0113      	lsls	r3, r2, #4
 8004100:	001a      	movs	r2, r3
 8004102:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	001a      	movs	r2, r3
 800410a:	0013      	movs	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	18c3      	adds	r3, r0, r3
 8004114:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	18d3      	adds	r3, r2, r3
 800411a:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	029a      	lsls	r2, r3, #10
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <RTC_GetCalendarValue+0x130>)
 8004128:	4694      	mov	ip, r2
 800412a:	4463      	add	r3, ip
 800412c:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 800412e:	697b      	ldr	r3, [r7, #20]
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b006      	add	sp, #24
 8004136:	bd80      	pop	{r7, pc}
 8004138:	200005a8 	.word	0x200005a8
 800413c:	40002800 	.word	0x40002800
 8004140:	000005b5 	.word	0x000005b5
 8004144:	00445550 	.word	0x00445550
 8004148:	0099aaa0 	.word	0x0099aaa0
 800414c:	000003ff 	.word	0x000003ff

08004150 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8004154:	46c0      	nop			@ (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416a:	f3ef 8310 	mrs	r3, PRIMASK
 800416e:	607b      	str	r3, [r7, #4]
  return(result);
 8004170:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004172:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004174:	b672      	cpsid	i
}
 8004176:	46c0      	nop			@ (mov r8, r8)

  Sx_Board_IoDeInit();
 8004178:	f001 faee 	bl	8005758 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <PWR_EnterStopMode+0x48>)
 800417e:	0018      	movs	r0, r3
 8004180:	f7ff f93c 	bl	80033fc <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8004184:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <PWR_EnterStopMode+0x4c>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b09      	ldr	r3, [pc, #36]	@ (80041b0 <PWR_EnterStopMode+0x4c>)
 800418a:	2104      	movs	r1, #4
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			@ (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800419c:	2101      	movs	r1, #1
 800419e:	2001      	movs	r0, #1
 80041a0:	f004 f800 	bl	80081a4 <HAL_PWR_EnterSTOPMode>
}
 80041a4:	46c0      	nop			@ (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	200004d4 	.word	0x200004d4
 80041b0:	40007000 	.word	0x40007000

080041b4 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	60bb      	str	r3, [r7, #8]
  return(result);
 80041c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 80041c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80041c4:	b672      	cpsid	i
}
 80041c6:	46c0      	nop			@ (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 80041c8:	4b19      	ldr	r3, [pc, #100]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b18      	ldr	r3, [pc, #96]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 80041ce:	2101      	movs	r1, #1
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 80041d4:	46c0      	nop			@ (mov r8, r8)
 80041d6:	4b16      	ldr	r3, [pc, #88]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2204      	movs	r2, #4
 80041dc:	4013      	ands	r3, r2
 80041de:	d0fa      	beq.n	80041d6 <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80041e0:	4b13      	ldr	r3, [pc, #76]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4b12      	ldr	r3, [pc, #72]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 80041e6:	2180      	movs	r1, #128	@ 0x80
 80041e8:	0449      	lsls	r1, r1, #17
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2380      	movs	r3, #128	@ 0x80
 80041f6:	049b      	lsls	r3, r3, #18
 80041f8:	4013      	ands	r3, r2
 80041fa:	d0f9      	beq.n	80041f0 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80041fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 8004202:	2103      	movs	r1, #3
 8004204:	430a      	orrs	r2, r1
 8004206:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	4b09      	ldr	r3, [pc, #36]	@ (8004230 <PWR_ExitStopMode+0x7c>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	220c      	movs	r2, #12
 8004210:	4013      	ands	r3, r2
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d1f9      	bne.n	800420a <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8004216:	f001 f999 	bl	800554c <CMWX1ZZABZ0XX_RADIO_IoInit>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			@ (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	46bd      	mov	sp, r7
 800422a:	b004      	add	sp, #16
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	40021000 	.word	0x40021000

08004234 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004238:	2101      	movs	r1, #1
 800423a:	2000      	movs	r0, #0
 800423c:	f003 ff5a 	bl	80080f4 <HAL_PWR_EnterSLEEPMode>
}
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	af00      	add	r7, sp, #0
}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2201      	movs	r2, #1
 8004260:	4013      	ands	r3, r2
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10e      	bne.n	8004284 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2201      	movs	r2, #1
 800426e:	4013      	ands	r3, r2
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2201      	movs	r2, #1
 800427a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	0018      	movs	r0, r3
 8004280:	f000 f888 	bl	8004394 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2202      	movs	r2, #2
 800428c:	4013      	ands	r3, r2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d10e      	bne.n	80042b0 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2202      	movs	r2, #2
 800429a:	4013      	ands	r3, r2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d107      	bne.n	80042b0 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2202      	movs	r2, #2
 80042a6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f000 f87a 	bl	80043a4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2204      	movs	r2, #4
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d10e      	bne.n	80042dc <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2204      	movs	r2, #4
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d107      	bne.n	80042dc <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2204      	movs	r2, #4
 80042d2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 f86c 	bl	80043b4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2208      	movs	r2, #8
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d10e      	bne.n	8004308 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2208      	movs	r2, #8
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d107      	bne.n	8004308 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2208      	movs	r2, #8
 80042fe:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	0018      	movs	r0, r3
 8004304:	f000 f85e 	bl	80043c4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2210      	movs	r2, #16
 8004310:	4013      	ands	r3, r2
 8004312:	2b10      	cmp	r3, #16
 8004314:	d10e      	bne.n	8004334 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2210      	movs	r2, #16
 800431e:	4013      	ands	r3, r2
 8004320:	2b10      	cmp	r3, #16
 8004322:	d107      	bne.n	8004334 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2210      	movs	r2, #16
 800432a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0018      	movs	r0, r3
 8004330:	f000 f850 	bl	80043d4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2220      	movs	r2, #32
 800433c:	4013      	ands	r3, r2
 800433e:	2b20      	cmp	r3, #32
 8004340:	d10e      	bne.n	8004360 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2220      	movs	r2, #32
 800434a:	4013      	ands	r3, r2
 800434c:	2b20      	cmp	r3, #32
 800434e:	d107      	bne.n	8004360 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2220      	movs	r2, #32
 8004356:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f842 	bl	80043e4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2240      	movs	r2, #64	@ 0x40
 8004368:	4013      	ands	r3, r2
 800436a:	2b40      	cmp	r3, #64	@ 0x40
 800436c:	d10e      	bne.n	800438c <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2240      	movs	r2, #64	@ 0x40
 8004376:	4013      	ands	r3, r2
 8004378:	2b40      	cmp	r3, #64	@ 0x40
 800437a:	d107      	bne.n	800438c <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2240      	movs	r2, #64	@ 0x40
 8004382:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 f834 	bl	80043f4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b002      	add	sp, #8
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800439c:	46c0      	nop			@ (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	b002      	add	sp, #8
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80043ac:	46c0      	nop			@ (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b002      	add	sp, #8
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80043bc:	46c0      	nop			@ (mov r8, r8)
 80043be:	46bd      	mov	sp, r7
 80043c0:	b002      	add	sp, #8
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80043dc:	46c0      	nop			@ (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	b002      	add	sp, #8
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b002      	add	sp, #8
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004408:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <HAL_MspInit+0x3c>)
 800440a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800440c:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <HAL_MspInit+0x3c>)
 800440e:	2180      	movs	r1, #128	@ 0x80
 8004410:	0549      	lsls	r1, r1, #21
 8004412:	430a      	orrs	r2, r1
 8004414:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004416:	f003 fe5f 	bl	80080d8 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800441a:	f003 ff2d 	bl	8008278 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800441e:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <HAL_MspInit+0x40>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <HAL_MspInit+0x40>)
 8004424:	2108      	movs	r1, #8
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_MspInit+0x40>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_MspInit+0x40>)
 8004430:	2108      	movs	r1, #8
 8004432:	438a      	bics	r2, r1
 8004434:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004436:	f003 ff11 	bl	800825c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	40022000 	.word	0x40022000

08004448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	e7fd      	b.n	8004456 <HardFault_Handler+0x4>

0800445a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004472:	f001 fbe1 	bl	8005c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <EXTI0_1_IRQHandler+0x1c>)
 8004482:	0018      	movs	r0, r3
 8004484:	f002 fd6c 	bl	8006f60 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8004488:	4b04      	ldr	r3, [pc, #16]	@ (800449c <EXTI0_1_IRQHandler+0x20>)
 800448a:	0018      	movs	r0, r3
 800448c:	f002 fd68 	bl	8006f60 <HAL_EXTI_IRQHandler>
#endif
}
 8004490:	46c0      	nop			@ (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	200007a4 	.word	0x200007a4
 800449c:	2000079c 	.word	0x2000079c

080044a0 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 80044a4:	46c0      	nop			@ (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <EXTI4_15_IRQHandler+0x1c>)
 80044b2:	0018      	movs	r0, r3
 80044b4:	f002 fd54 	bl	8006f60 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80044b8:	4b04      	ldr	r3, [pc, #16]	@ (80044cc <EXTI4_15_IRQHandler+0x20>)
 80044ba:	0018      	movs	r0, r3
 80044bc:	f002 fd50 	bl	8006f60 <HAL_EXTI_IRQHandler>
#endif
}
 80044c0:	46c0      	nop			@ (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	20000794 	.word	0x20000794
 80044cc:	200007ac 	.word	0x200007ac

080044d0 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 80044d4:	4b03      	ldr	r3, [pc, #12]	@ (80044e4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80044d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d8:	0018      	movs	r0, r3
 80044da:	f002 fc32 	bl	8006d42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000614 	.word	0x20000614

080044e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 80044ec:	4b03      	ldr	r3, [pc, #12]	@ (80044fc <USART2_IRQHandler+0x14>)
 80044ee:	0018      	movs	r0, r3
 80044f0:	f006 f884 	bl	800a5fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80044f4:	46c0      	nop			@ (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	20000614 	.word	0x20000614

08004500 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004504:	4b03      	ldr	r3, [pc, #12]	@ (8004514 <LPTIM1_IRQHandler+0x14>)
 8004506:	0018      	movs	r0, r3
 8004508:	f7ff fea2 	bl	8004250 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800450c:	46c0      	nop			@ (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	20000578 	.word	0x20000578

08004518 <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 800451c:	4b03      	ldr	r3, [pc, #12]	@ (800452c <RTC_IRQHandler+0x14>)
 800451e:	0018      	movs	r0, r3
 8004520:	f005 faac 	bl	8009a7c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004524:	46c0      	nop			@ (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	200005a8 	.word	0x200005a8

08004530 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004534:	f017 fcce 	bl	801bed4 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004538:	f000 f8f6 	bl	8004728 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 800453c:	f000 f9c2 	bl	80048c4 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004540:	f016 fe2c 	bl	801b19c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004544:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <SystemApp_Init+0x44>)
 8004546:	0018      	movs	r0, r3
 8004548:	f016 fee0 	bl	801b30c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800454c:	2002      	movs	r0, #2
 800454e:	f016 feeb 	bl	801b328 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8004552:	f7fe ff7f 	bl	8003454 <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 8004556:	f001 fa2d 	bl	80059b4 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 800455a:	f000 fff7 	bl	800554c <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 800455e:	f000 fa55 	bl	8004a0c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8004562:	f017 f8e3 	bl	801b72c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8004566:	2101      	movs	r1, #1
 8004568:	2001      	movs	r0, #1
 800456a:	f017 f91f 	bl	801b7ac <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	080046dd 	.word	0x080046dd

08004578 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800457c:	f017 f978 	bl	801b870 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8004580:	46c0      	nop			@ (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8004588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800458e:	250f      	movs	r5, #15
 8004590:	197b      	adds	r3, r7, r5
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8004596:	260c      	movs	r6, #12
 8004598:	19bc      	adds	r4, r7, r6
 800459a:	f7fe ffaf 	bl	80034fc <SYS_GetBatteryLevel>
 800459e:	0003      	movs	r3, r0
 80045a0:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80045a2:	19bb      	adds	r3, r7, r6
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	4a18      	ldr	r2, [pc, #96]	@ (8004608 <GetBatteryLevel+0x80>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d903      	bls.n	80045b4 <GetBatteryLevel+0x2c>
  {
//    batteryLevel = LORAWAN_MAX_BAT;
	  batteryLevel = 100;
 80045ac:	197b      	adds	r3, r7, r5
 80045ae:	2264      	movs	r2, #100	@ 0x64
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e021      	b.n	80045f8 <GetBatteryLevel+0x70>
  }
  else if (batteryLevelmV < VDD_MIN)
 80045b4:	230c      	movs	r3, #12
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	23e1      	movs	r3, #225	@ 0xe1
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	429a      	cmp	r2, r3
 80045c0:	d204      	bcs.n	80045cc <GetBatteryLevel+0x44>
  {
    batteryLevel = 0;
 80045c2:	230f      	movs	r3, #15
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e015      	b.n	80045f8 <GetBatteryLevel+0x70>
  }
  else
  {
//    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
    uint32_t batteryRange = VDD_BAT - VDD_MIN;
 80045cc:	2396      	movs	r3, #150	@ 0x96
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	60bb      	str	r3, [r7, #8]
    uint32_t batteryRemaining = batteryLevelmV - VDD_MIN;
 80045d2:	230c      	movs	r3, #12
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	4a0c      	ldr	r2, [pc, #48]	@ (800460c <GetBatteryLevel+0x84>)
 80045da:	4694      	mov	ip, r2
 80045dc:	4463      	add	r3, ip
 80045de:	607b      	str	r3, [r7, #4]
    batteryLevel = (batteryRemaining * 100) / batteryRange;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2264      	movs	r2, #100	@ 0x64
 80045e4:	4353      	muls	r3, r2
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7fb fd95 	bl	8000118 <__udivsi3>
 80045ee:	0003      	movs	r3, r0
 80045f0:	001a      	movs	r2, r3
 80045f2:	230f      	movs	r3, #15
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	781b      	ldrb	r3, [r3, #0]
}
 80045fe:	0018      	movs	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	b005      	add	sp, #20
 8004604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	00000bb8 	.word	0x00000bb8
 800460c:	fffff8f8 	.word	0xfffff8f8

08004610 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8004616:	1dbb      	adds	r3, r7, #6
 8004618:	2200      	movs	r2, #0
 800461a:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800461c:	f7fe ff26 	bl	800346c <SYS_GetTemperatureLevel>
 8004620:	1e03      	subs	r3, r0, #0
 8004622:	da00      	bge.n	8004626 <GetTemperatureLevel+0x16>
 8004624:	33ff      	adds	r3, #255	@ 0xff
 8004626:	121b      	asrs	r3, r3, #8
 8004628:	b21a      	sxth	r2, r3
 800462a:	1dbb      	adds	r3, r7, #6
 800462c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800462e:	1dbb      	adds	r3, r7, #6
 8004630:	881b      	ldrh	r3, [r3, #0]
}
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b002      	add	sp, #8
 8004638:	bd80      	pop	{r7, pc}

0800463a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800463a:	b590      	push	{r4, r7, lr}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8004642:	f001 fb0b 	bl	8005c5c <HAL_GetUIDw0>
 8004646:	0004      	movs	r4, r0
 8004648:	f001 fb1c 	bl	8005c84 <HAL_GetUIDw2>
 800464c:	0003      	movs	r3, r0
 800464e:	18e3      	adds	r3, r4, r3
 8004650:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 8004652:	f001 fb0d 	bl	8005c70 <HAL_GetUIDw1>
 8004656:	0003      	movs	r3, r0
 8004658:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	0e1a      	lsrs	r2, r3, #24
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3307      	adds	r3, #7
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	0c1a      	lsrs	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3306      	adds	r3, #6
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	0a1a      	lsrs	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3305      	adds	r3, #5
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	0e1a      	lsrs	r2, r3, #24
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3303      	adds	r3, #3
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	0c1a      	lsrs	r2, r3, #16
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3302      	adds	r3, #2
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	0a1a      	lsrs	r2, r3, #8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3301      	adds	r3, #1
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b005      	add	sp, #20
 80046ba:	bd90      	pop	{r4, r7, pc}

080046bc <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80046bc:	b5b0      	push	{r4, r5, r7, lr}
 80046be:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80046c0:	f001 facc 	bl	8005c5c <HAL_GetUIDw0>
 80046c4:	0004      	movs	r4, r0
 80046c6:	f001 fad3 	bl	8005c70 <HAL_GetUIDw1>
 80046ca:	0003      	movs	r3, r0
 80046cc:	405c      	eors	r4, r3
 80046ce:	f001 fad9 	bl	8005c84 <HAL_GetUIDw2>
 80046d2:	0003      	movs	r3, r0
 80046d4:	4063      	eors	r3, r4
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	bdb0      	pop	{r4, r5, r7, pc}

080046dc <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b087      	sub	sp, #28
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80046e6:	2408      	movs	r4, #8
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	0018      	movs	r0, r3
 80046ec:	f017 fb90 	bl	801be10 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80046f0:	0022      	movs	r2, r4
 80046f2:	18bb      	adds	r3, r7, r2
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	18bb      	adds	r3, r7, r2
 80046f8:	2204      	movs	r2, #4
 80046fa:	5e9b      	ldrsh	r3, [r3, r2]
 80046fc:	4a09      	ldr	r2, [pc, #36]	@ (8004724 <TimestampNow+0x48>)
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	000b      	movs	r3, r1
 8004704:	2110      	movs	r1, #16
 8004706:	f000 f8a9 	bl	800485c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0018      	movs	r0, r3
 800470e:	f7fb fcfb 	bl	8000108 <strlen>
 8004712:	0003      	movs	r3, r0
 8004714:	b29a      	uxth	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b005      	add	sp, #20
 8004720:	bd90      	pop	{r4, r7, pc}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	0801da50 	.word	0x0801da50

08004728 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b08b      	sub	sp, #44	@ 0x2c
 800472c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472e:	2414      	movs	r4, #20
 8004730:	193b      	adds	r3, r7, r4
 8004732:	0018      	movs	r0, r3
 8004734:	2314      	movs	r3, #20
 8004736:	001a      	movs	r2, r3
 8004738:	2100      	movs	r1, #0
 800473a:	f018 fdac 	bl	801d296 <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800473e:	4b38      	ldr	r3, [pc, #224]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004742:	4b37      	ldr	r3, [pc, #220]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004744:	2101      	movs	r1, #1
 8004746:	430a      	orrs	r2, r1
 8004748:	62da      	str	r2, [r3, #44]	@ 0x2c
 800474a:	4b35      	ldr	r3, [pc, #212]	@ (8004820 <Gpio_PreInit+0xf8>)
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	2201      	movs	r2, #1
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004756:	4b32      	ldr	r3, [pc, #200]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475a:	4b31      	ldr	r3, [pc, #196]	@ (8004820 <Gpio_PreInit+0xf8>)
 800475c:	2102      	movs	r1, #2
 800475e:	430a      	orrs	r2, r1
 8004760:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004762:	4b2f      	ldr	r3, [pc, #188]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	2202      	movs	r2, #2
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800476e:	4b2c      	ldr	r3, [pc, #176]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004772:	4b2b      	ldr	r3, [pc, #172]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004774:	2104      	movs	r1, #4
 8004776:	430a      	orrs	r2, r1
 8004778:	62da      	str	r2, [r3, #44]	@ 0x2c
 800477a:	4b29      	ldr	r3, [pc, #164]	@ (8004820 <Gpio_PreInit+0xf8>)
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	2204      	movs	r2, #4
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004786:	4b26      	ldr	r3, [pc, #152]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478a:	4b25      	ldr	r3, [pc, #148]	@ (8004820 <Gpio_PreInit+0xf8>)
 800478c:	2180      	movs	r1, #128	@ 0x80
 800478e:	430a      	orrs	r2, r1
 8004790:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004792:	4b23      	ldr	r3, [pc, #140]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	2280      	movs	r2, #128	@ 0x80
 8004798:	4013      	ands	r3, r2
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800479e:	193b      	adds	r3, r7, r4
 80047a0:	2203      	movs	r2, #3
 80047a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80047aa:	193b      	adds	r3, r7, r4
 80047ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <Gpio_PreInit+0xfc>)
 80047ae:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b0:	193a      	adds	r2, r7, r4
 80047b2:	23a0      	movs	r3, #160	@ 0xa0
 80047b4:	05db      	lsls	r3, r3, #23
 80047b6:	0011      	movs	r1, r2
 80047b8:	0018      	movs	r0, r3
 80047ba:	f002 fbf5 	bl	8006fa8 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80047be:	193b      	adds	r3, r7, r4
 80047c0:	4a19      	ldr	r2, [pc, #100]	@ (8004828 <Gpio_PreInit+0x100>)
 80047c2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c4:	193b      	adds	r3, r7, r4
 80047c6:	4a19      	ldr	r2, [pc, #100]	@ (800482c <Gpio_PreInit+0x104>)
 80047c8:	0019      	movs	r1, r3
 80047ca:	0010      	movs	r0, r2
 80047cc:	f002 fbec 	bl	8006fa8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d0:	193b      	adds	r3, r7, r4
 80047d2:	4a17      	ldr	r2, [pc, #92]	@ (8004830 <Gpio_PreInit+0x108>)
 80047d4:	0019      	movs	r1, r3
 80047d6:	0010      	movs	r0, r2
 80047d8:	f002 fbe6 	bl	8006fa8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80047dc:	193b      	adds	r3, r7, r4
 80047de:	4a15      	ldr	r2, [pc, #84]	@ (8004834 <Gpio_PreInit+0x10c>)
 80047e0:	0019      	movs	r1, r3
 80047e2:	0010      	movs	r0, r2
 80047e4:	f002 fbe0 	bl	8006fa8 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80047e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <Gpio_PreInit+0xf8>)
 80047ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <Gpio_PreInit+0xf8>)
 80047ee:	2101      	movs	r1, #1
 80047f0:	438a      	bics	r2, r1
 80047f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80047f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004820 <Gpio_PreInit+0xf8>)
 80047f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f8:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <Gpio_PreInit+0xf8>)
 80047fa:	2102      	movs	r1, #2
 80047fc:	438a      	bics	r2, r1
 80047fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8004800:	4b07      	ldr	r3, [pc, #28]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004804:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004806:	2104      	movs	r1, #4
 8004808:	438a      	bics	r2, r1
 800480a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800480c:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <Gpio_PreInit+0xf8>)
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <Gpio_PreInit+0xf8>)
 8004812:	2180      	movs	r1, #128	@ 0x80
 8004814:	438a      	bics	r2, r1
 8004816:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8004818:	46c0      	nop			@ (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b00b      	add	sp, #44	@ 0x2c
 800481e:	bd90      	pop	{r4, r7, pc}
 8004820:	40021000 	.word	0x40021000
 8004824:	00009fff 	.word	0x00009fff
 8004828:	0000ffff 	.word	0x0000ffff
 800482c:	50000400 	.word	0x50000400
 8004830:	50000800 	.word	0x50000800
 8004834:	50001c00 	.word	0x50001c00

08004838 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800483c:	2101      	movs	r1, #1
 800483e:	2004      	movs	r0, #4
 8004840:	f016 ff84 	bl	801b74c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8004844:	46c0      	nop			@ (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800484e:	2100      	movs	r1, #0
 8004850:	2004      	movs	r0, #4
 8004852:	f016 ff7b 	bl	801b74c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800485c:	b40c      	push	{r2, r3}
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8004868:	231c      	movs	r3, #28
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f017 fef7 	bl	801c668 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b004      	add	sp, #16
 8004880:	bc80      	pop	{r7}
 8004882:	bc08      	pop	{r3}
 8004884:	b002      	add	sp, #8
 8004886:	4718      	bx	r3

08004888 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b002      	add	sp, #8
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 800489e:	f7ff f959 	bl	8003b54 <RTC_IF_GetTimerValue>
 80048a2:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f7ff f9bb 	bl	8003c30 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b08b      	sub	sp, #44	@ 0x2c
 80048c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80048ca:	2414      	movs	r4, #20
 80048cc:	193b      	adds	r3, r7, r4
 80048ce:	0018      	movs	r0, r3
 80048d0:	2314      	movs	r3, #20
 80048d2:	001a      	movs	r2, r3
 80048d4:	2100      	movs	r1, #0
 80048d6:	f018 fcde 	bl	801d296 <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 80048da:	4b4a      	ldr	r3, [pc, #296]	@ (8004a04 <DBG_Init+0x140>)
 80048dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048de:	4b49      	ldr	r3, [pc, #292]	@ (8004a04 <DBG_Init+0x140>)
 80048e0:	2102      	movs	r1, #2
 80048e2:	430a      	orrs	r2, r1
 80048e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048e6:	4b47      	ldr	r3, [pc, #284]	@ (8004a04 <DBG_Init+0x140>)
 80048e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ea:	2202      	movs	r2, #2
 80048ec:	4013      	ands	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 80048f2:	4b44      	ldr	r3, [pc, #272]	@ (8004a04 <DBG_Init+0x140>)
 80048f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f6:	4b43      	ldr	r3, [pc, #268]	@ (8004a04 <DBG_Init+0x140>)
 80048f8:	2102      	movs	r1, #2
 80048fa:	430a      	orrs	r2, r1
 80048fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048fe:	4b41      	ldr	r3, [pc, #260]	@ (8004a04 <DBG_Init+0x140>)
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	2202      	movs	r2, #2
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 800490a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a04 <DBG_Init+0x140>)
 800490c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a04 <DBG_Init+0x140>)
 8004910:	2102      	movs	r1, #2
 8004912:	430a      	orrs	r2, r1
 8004914:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004916:	4b3b      	ldr	r3, [pc, #236]	@ (8004a04 <DBG_Init+0x140>)
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	2202      	movs	r2, #2
 800491c:	4013      	ands	r3, r2
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 8004922:	4b38      	ldr	r3, [pc, #224]	@ (8004a04 <DBG_Init+0x140>)
 8004924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004926:	4b37      	ldr	r3, [pc, #220]	@ (8004a04 <DBG_Init+0x140>)
 8004928:	2102      	movs	r1, #2
 800492a:	430a      	orrs	r2, r1
 800492c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800492e:	4b35      	ldr	r3, [pc, #212]	@ (8004a04 <DBG_Init+0x140>)
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	2202      	movs	r2, #2
 8004934:	4013      	ands	r3, r2
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800493a:	0021      	movs	r1, r4
 800493c:	187b      	adds	r3, r7, r1
 800493e:	2201      	movs	r2, #1
 8004940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8004942:	187b      	adds	r3, r7, r1
 8004944:	2201      	movs	r2, #1
 8004946:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8004948:	187b      	adds	r3, r7, r1
 800494a:	2203      	movs	r2, #3
 800494c:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 800494e:	187b      	adds	r3, r7, r1
 8004950:	2280      	movs	r2, #128	@ 0x80
 8004952:	0152      	lsls	r2, r2, #5
 8004954:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 8004956:	000c      	movs	r4, r1
 8004958:	187b      	adds	r3, r7, r1
 800495a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a08 <DBG_Init+0x144>)
 800495c:	0019      	movs	r1, r3
 800495e:	0010      	movs	r0, r2
 8004960:	f002 fb22 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 8004964:	0021      	movs	r1, r4
 8004966:	187b      	adds	r3, r7, r1
 8004968:	2280      	movs	r2, #128	@ 0x80
 800496a:	0192      	lsls	r2, r2, #6
 800496c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 800496e:	000c      	movs	r4, r1
 8004970:	187b      	adds	r3, r7, r1
 8004972:	4a25      	ldr	r2, [pc, #148]	@ (8004a08 <DBG_Init+0x144>)
 8004974:	0019      	movs	r1, r3
 8004976:	0010      	movs	r0, r2
 8004978:	f002 fb16 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 800497c:	0021      	movs	r1, r4
 800497e:	187b      	adds	r3, r7, r1
 8004980:	2280      	movs	r2, #128	@ 0x80
 8004982:	01d2      	lsls	r2, r2, #7
 8004984:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 8004986:	000c      	movs	r4, r1
 8004988:	187b      	adds	r3, r7, r1
 800498a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a08 <DBG_Init+0x144>)
 800498c:	0019      	movs	r1, r3
 800498e:	0010      	movs	r0, r2
 8004990:	f002 fb0a 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 8004994:	0021      	movs	r1, r4
 8004996:	187b      	adds	r3, r7, r1
 8004998:	2280      	movs	r2, #128	@ 0x80
 800499a:	0212      	lsls	r2, r2, #8
 800499c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	4a19      	ldr	r2, [pc, #100]	@ (8004a08 <DBG_Init+0x144>)
 80049a2:	0019      	movs	r1, r3
 80049a4:	0010      	movs	r0, r2
 80049a6:	f002 faff 	bl	8006fa8 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 80049aa:	2380      	movs	r3, #128	@ 0x80
 80049ac:	015b      	lsls	r3, r3, #5
 80049ae:	4816      	ldr	r0, [pc, #88]	@ (8004a08 <DBG_Init+0x144>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	0019      	movs	r1, r3
 80049b4:	f002 fd75 	bl	80074a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 80049b8:	2380      	movs	r3, #128	@ 0x80
 80049ba:	019b      	lsls	r3, r3, #6
 80049bc:	4812      	ldr	r0, [pc, #72]	@ (8004a08 <DBG_Init+0x144>)
 80049be:	2200      	movs	r2, #0
 80049c0:	0019      	movs	r1, r3
 80049c2:	f002 fd6e 	bl	80074a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	01db      	lsls	r3, r3, #7
 80049ca:	480f      	ldr	r0, [pc, #60]	@ (8004a08 <DBG_Init+0x144>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	0019      	movs	r1, r3
 80049d0:	f002 fd67 	bl	80074a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 80049d4:	2380      	movs	r3, #128	@ 0x80
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	480b      	ldr	r0, [pc, #44]	@ (8004a08 <DBG_Init+0x144>)
 80049da:	2200      	movs	r2, #0
 80049dc:	0019      	movs	r1, r3
 80049de:	f002 fd60 	bl	80074a2 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 80049e2:	4b08      	ldr	r3, [pc, #32]	@ (8004a04 <DBG_Init+0x140>)
 80049e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e6:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <DBG_Init+0x140>)
 80049e8:	2180      	movs	r1, #128	@ 0x80
 80049ea:	03c9      	lsls	r1, r1, #15
 80049ec:	430a      	orrs	r2, r1
 80049ee:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 80049f0:	f001 f952 	bl	8005c98 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80049f4:	f001 f95e 	bl	8005cb4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80049f8:	f001 f96a 	bl	8005cd0 <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80049fc:	46c0      	nop			@ (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b00b      	add	sp, #44	@ 0x2c
 8004a02:	bd90      	pop	{r4, r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	50000400 	.word	0x50000400

08004a0c <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8004a10:	46c0      	nop			@ (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 8004a1c:	4b10      	ldr	r3, [pc, #64]	@ (8004a60 <MX_USART2_Init+0x48>)
 8004a1e:	4a11      	ldr	r2, [pc, #68]	@ (8004a64 <MX_USART2_Init+0x4c>)
 8004a20:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8004a22:	4b0f      	ldr	r3, [pc, #60]	@ (8004a60 <MX_USART2_Init+0x48>)
 8004a24:	22e1      	movs	r2, #225	@ 0xe1
 8004a26:	0252      	lsls	r2, r2, #9
 8004a28:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a60 <MX_USART2_Init+0x48>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8004a30:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <MX_USART2_Init+0x48>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8004a36:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <MX_USART2_Init+0x48>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8004a3c:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <MX_USART2_Init+0x48>)
 8004a3e:	2208      	movs	r2, #8
 8004a40:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004a42:	4b07      	ldr	r3, [pc, #28]	@ (8004a60 <MX_USART2_Init+0x48>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <MX_USART2_Init+0x48>)
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f005 fc98 	bl	800a380 <HAL_UART_Init>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d001      	beq.n	8004a58 <MX_USART2_Init+0x40>
  {
    Error_Handler();
 8004a54:	f7fe fed8 	bl	8003808 <Error_Handler>
  }
}
 8004a58:	46c0      	nop			@ (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	20000614 	.word	0x20000614
 8004a64:	40004400 	.word	0x40004400

08004a68 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b095      	sub	sp, #84	@ 0x54
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a70:	233c      	movs	r3, #60	@ 0x3c
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	0018      	movs	r0, r3
 8004a76:	2314      	movs	r3, #20
 8004a78:	001a      	movs	r2, r3
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	f018 fc0b 	bl	801d296 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a80:	2418      	movs	r4, #24
 8004a82:	193b      	adds	r3, r7, r4
 8004a84:	0018      	movs	r0, r3
 8004a86:	2324      	movs	r3, #36	@ 0x24
 8004a88:	001a      	movs	r2, r3
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	f018 fc03 	bl	801d296 <memset>
  if (uartHandle->Instance == USART2)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a57      	ldr	r2, [pc, #348]	@ (8004bf4 <HAL_UART_MspInit+0x18c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d000      	beq.n	8004a9c <HAL_UART_MspInit+0x34>
 8004a9a:	e0a6      	b.n	8004bea <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8004a9c:	4b56      	ldr	r3, [pc, #344]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa0:	4b55      	ldr	r3, [pc, #340]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004aa8:	4b53      	ldr	r3, [pc, #332]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	2201      	movs	r2, #1
 8004aae:	4013      	ands	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004ab4:	4b50      	ldr	r3, [pc, #320]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004aba:	2101      	movs	r1, #1
 8004abc:	430a      	orrs	r2, r1
 8004abe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 8004acc:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ad0:	4b49      	ldr	r3, [pc, #292]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004ad2:	2180      	movs	r1, #128	@ 0x80
 8004ad4:	0289      	lsls	r1, r1, #10
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8004ada:	4b47      	ldr	r3, [pc, #284]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ade:	4b46      	ldr	r3, [pc, #280]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ae6:	4b44      	ldr	r3, [pc, #272]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	2201      	movs	r2, #1
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004af2:	4b41      	ldr	r3, [pc, #260]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af6:	4b40      	ldr	r3, [pc, #256]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
 8004af8:	2180      	movs	r1, #128	@ 0x80
 8004afa:	0289      	lsls	r1, r1, #10
 8004afc:	430a      	orrs	r2, r1
 8004afe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b00:	193b      	adds	r3, r7, r4
 8004b02:	2202      	movs	r2, #2
 8004b04:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8004b06:	193b      	adds	r3, r7, r4
 8004b08:	2204      	movs	r2, #4
 8004b0a:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b0c:	193b      	adds	r3, r7, r4
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f004 f9b8 	bl	8008e84 <HAL_RCCEx_PeriphCLKConfig>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8004b18:	f7fe fe76 	bl	8003808 <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8004b1c:	243c      	movs	r4, #60	@ 0x3c
 8004b1e:	193b      	adds	r3, r7, r4
 8004b20:	2204      	movs	r2, #4
 8004b22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b24:	193b      	adds	r3, r7, r4
 8004b26:	2202      	movs	r2, #2
 8004b28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	193b      	adds	r3, r7, r4
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004b30:	193b      	adds	r3, r7, r4
 8004b32:	2203      	movs	r2, #3
 8004b34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004b36:	193b      	adds	r3, r7, r4
 8004b38:	2204      	movs	r2, #4
 8004b3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8004b3c:	193a      	adds	r2, r7, r4
 8004b3e:	23a0      	movs	r3, #160	@ 0xa0
 8004b40:	05db      	lsls	r3, r3, #23
 8004b42:	0011      	movs	r1, r2
 8004b44:	0018      	movs	r0, r3
 8004b46:	f002 fa2f 	bl	8006fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8004b4a:	0021      	movs	r1, r4
 8004b4c:	187b      	adds	r3, r7, r1
 8004b4e:	2208      	movs	r2, #8
 8004b50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b52:	187b      	adds	r3, r7, r1
 8004b54:	2202      	movs	r2, #2
 8004b56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	2203      	movs	r2, #3
 8004b62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	2204      	movs	r2, #4
 8004b68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004b6a:	187a      	adds	r2, r7, r1
 8004b6c:	23a0      	movs	r3, #160	@ 0xa0
 8004b6e:	05db      	lsls	r3, r3, #23
 8004b70:	0011      	movs	r1, r2
 8004b72:	0018      	movs	r0, r3
 8004b74:	f002 fa18 	bl	8006fa8 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8004b78:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004b7a:	4a21      	ldr	r2, [pc, #132]	@ (8004c00 <HAL_UART_MspInit+0x198>)
 8004b7c:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8004b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004b80:	2204      	movs	r2, #4
 8004b82:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004b86:	2210      	movs	r2, #16
 8004b88:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004b90:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004b92:	2280      	movs	r2, #128	@ 0x80
 8004b94:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b96:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8004b9c:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8004ba2:	4b16      	ldr	r3, [pc, #88]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8004ba8:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8004bae:	4b13      	ldr	r3, [pc, #76]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f001 ff03 	bl	80069bc <HAL_DMA_Init>
 8004bb6:	1e03      	subs	r3, r0, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8004bba:	f7fe fe25 	bl	8003808 <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004bc2:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <HAL_UART_MspInit+0x194>)
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8004bca:	2201      	movs	r2, #1
 8004bcc:	2100      	movs	r1, #0
 8004bce:	200b      	movs	r0, #11
 8004bd0:	f001 febe 	bl	8006950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8004bd4:	200b      	movs	r0, #11
 8004bd6:	f001 fed0 	bl	800697a <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8004bda:	2201      	movs	r2, #1
 8004bdc:	2100      	movs	r1, #0
 8004bde:	201c      	movs	r0, #28
 8004be0:	f001 feb6 	bl	8006950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8004be4:	201c      	movs	r0, #28
 8004be6:	f001 fec8 	bl	800697a <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b015      	add	sp, #84	@ 0x54
 8004bf0:	bd90      	pop	{r4, r7, pc}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	40004400 	.word	0x40004400
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	20000698 	.word	0x20000698
 8004c00:	40020080 	.word	0x40020080

08004c04 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0d      	ldr	r2, [pc, #52]	@ (8004c48 <HAL_UART_MspDeInit+0x44>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d113      	bne.n	8004c3e <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8004c16:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <HAL_UART_MspDeInit+0x48>)
 8004c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <HAL_UART_MspDeInit+0x48>)
 8004c1c:	490c      	ldr	r1, [pc, #48]	@ (8004c50 <HAL_UART_MspDeInit+0x4c>)
 8004c1e:	400a      	ands	r2, r1
 8004c20:	639a      	str	r2, [r3, #56]	@ 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8004c22:	23a0      	movs	r3, #160	@ 0xa0
 8004c24:	05db      	lsls	r3, r3, #23
 8004c26:	210c      	movs	r1, #12
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f002 fb3b 	bl	80072a4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c32:	0018      	movs	r0, r3
 8004c34:	f001 ff3a 	bl	8006aac <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004c38:	201c      	movs	r0, #28
 8004c3a:	f001 feae 	bl	800699a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b002      	add	sp, #8
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	40004400 	.word	0x40004400
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	fffdffff 	.word	0xfffdffff

08004c54 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8004c5c:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <vcom_Init+0x20>)
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 8004c62:	f7fe fcef 	bl	8003644 <MX_DMA_Init>
  MX_USART2_Init();
 8004c66:	f7ff fed7 	bl	8004a18 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 8004c6a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b002      	add	sp, #8
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	200006e4 	.word	0x200006e4

08004c78 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <vcom_DeInit+0x34>)
 8004c7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c80:	4b0a      	ldr	r3, [pc, #40]	@ (8004cac <vcom_DeInit+0x34>)
 8004c82:	2180      	movs	r1, #128	@ 0x80
 8004c84:	0289      	lsls	r1, r1, #10
 8004c86:	430a      	orrs	r2, r1
 8004c88:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8004c8a:	4b08      	ldr	r3, [pc, #32]	@ (8004cac <vcom_DeInit+0x34>)
 8004c8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <vcom_DeInit+0x34>)
 8004c90:	4907      	ldr	r1, [pc, #28]	@ (8004cb0 <vcom_DeInit+0x38>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8004c96:	4b07      	ldr	r3, [pc, #28]	@ (8004cb4 <vcom_DeInit+0x3c>)
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff ffb3 	bl	8004c04 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004c9e:	200b      	movs	r0, #11
 8004ca0:	f001 fe7b 	bl	800699a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8004ca4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	fffdffff 	.word	0xfffdffff
 8004cb4:	20000614 	.word	0x20000614

08004cb8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	000a      	movs	r2, r1
 8004cc2:	1cbb      	adds	r3, r7, #2
 8004cc4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8004cc6:	1cbb      	adds	r3, r7, #2
 8004cc8:	881a      	ldrh	r2, [r3, #0]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <vcom_Trace_DMA+0x28>)
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f005 fc02 	bl	800a4d8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8004cd4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b002      	add	sp, #8
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	20000614 	.word	0x20000614

08004ce4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8004cec:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <vcom_ReceiveInit+0x80>)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8004cf2:	2108      	movs	r1, #8
 8004cf4:	187b      	adds	r3, r7, r1
 8004cf6:	2280      	movs	r2, #128	@ 0x80
 8004cf8:	0392      	lsls	r2, r2, #14
 8004cfa:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8004cfc:	187b      	adds	r3, r7, r1
 8004cfe:	481a      	ldr	r0, [pc, #104]	@ (8004d68 <vcom_ReceiveInit+0x84>)
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	f006 fd22 	bl	800b74c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	4b17      	ldr	r3, [pc, #92]	@ (8004d68 <vcom_ReceiveInit+0x84>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	2380      	movs	r3, #128	@ 0x80
 8004d12:	025b      	lsls	r3, r3, #9
 8004d14:	401a      	ands	r2, r3
 8004d16:	2380      	movs	r3, #128	@ 0x80
 8004d18:	025b      	lsls	r3, r3, #9
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d0f5      	beq.n	8004d0a <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	4b11      	ldr	r3, [pc, #68]	@ (8004d68 <vcom_ReceiveInit+0x84>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	2380      	movs	r3, #128	@ 0x80
 8004d28:	03db      	lsls	r3, r3, #15
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	2380      	movs	r3, #128	@ 0x80
 8004d2e:	03db      	lsls	r3, r3, #15
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d1f5      	bne.n	8004d20 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8004d34:	4b0c      	ldr	r3, [pc, #48]	@ (8004d68 <vcom_ReceiveInit+0x84>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <vcom_ReceiveInit+0x84>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2180      	movs	r1, #128	@ 0x80
 8004d40:	03c9      	lsls	r1, r1, #15
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8004d46:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <vcom_ReceiveInit+0x84>)
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f006 fd65 	bl	800b818 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8004d4e:	4907      	ldr	r1, [pc, #28]	@ (8004d6c <vcom_ReceiveInit+0x88>)
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <vcom_ReceiveInit+0x84>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	0018      	movs	r0, r3
 8004d56:	f005 fb67 	bl	800a428 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8004d5a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b004      	add	sp, #16
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200006e8 	.word	0x200006e8
 8004d68:	20000614 	.word	0x20000614
 8004d6c:	200006e0 	.word	0x200006e0

08004d70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8004d78:	4b03      	ldr	r3, [pc, #12]	@ (8004d88 <HAL_UART_TxCpltCallback+0x18>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	200006e4 	.word	0x200006e4

08004d8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8004d94:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <HAL_UART_RxCpltCallback+0x3c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_UART_RxCpltCallback+0x26>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2280      	movs	r2, #128	@ 0x80
 8004da0:	589b      	ldr	r3, [r3, r2]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8004da6:	4b08      	ldr	r3, [pc, #32]	@ (8004dc8 <HAL_UART_RxCpltCallback+0x3c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4808      	ldr	r0, [pc, #32]	@ (8004dcc <HAL_UART_RxCpltCallback+0x40>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	2101      	movs	r1, #1
 8004db0:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8004db2:	4906      	ldr	r1, [pc, #24]	@ (8004dcc <HAL_UART_RxCpltCallback+0x40>)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	0018      	movs	r0, r3
 8004dba:	f005 fb35 	bl	800a428 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	200006e8 	.word	0x200006e8
 8004dcc:	200006e0 	.word	0x200006e0

08004dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004dd0:	480d      	ldr	r0, [pc, #52]	@ (8004e08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004dd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004dd4:	480d      	ldr	r0, [pc, #52]	@ (8004e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8004dd6:	490e      	ldr	r1, [pc, #56]	@ (8004e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e14 <LoopForever+0xe>)
  movs r3, #0
 8004dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ddc:	e002      	b.n	8004de4 <LoopCopyDataInit>

08004dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004de2:	3304      	adds	r3, #4

08004de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004de8:	d3f9      	bcc.n	8004dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dea:	4a0b      	ldr	r2, [pc, #44]	@ (8004e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004dec:	4c0b      	ldr	r4, [pc, #44]	@ (8004e1c <LoopForever+0x16>)
  movs r3, #0
 8004dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004df0:	e001      	b.n	8004df6 <LoopFillZerobss>

08004df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004df4:	3204      	adds	r2, #4

08004df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004df8:	d3fb      	bcc.n	8004df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004dfa:	f000 febf 	bl	8005b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dfe:	f018 fa53 	bl	801d2a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e02:	f7fe fc3d 	bl	8003680 <main>

08004e06 <LoopForever>:

LoopForever:
    b LoopForever
 8004e06:	e7fe      	b.n	8004e06 <LoopForever>
   ldr   r0, =_estack
 8004e08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e10:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004e14:	0801e8d8 	.word	0x0801e8d8
  ldr r2, =_sbss
 8004e18:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004e1c:	200019ac 	.word	0x200019ac

08004e20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e20:	e7fe      	b.n	8004e20 <ADC1_COMP_IRQHandler>
	...

08004e24 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <BSP_SPI1_Init+0x40>)
 8004e30:	4a0d      	ldr	r2, [pc, #52]	@ (8004e68 <BSP_SPI1_Init+0x44>)
 8004e32:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <BSP_SPI1_Init+0x40>)
 8004e36:	0018      	movs	r0, r3
 8004e38:	f005 f9c1 	bl	800a1be <HAL_SPI_GetState>
 8004e3c:	1e03      	subs	r3, r0, #0
 8004e3e:	d10c      	bne.n	8004e5a <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 8004e40:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <BSP_SPI1_Init+0x40>)
 8004e42:	0018      	movs	r0, r3
 8004e44:	f000 f87e 	bl	8004f44 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <BSP_SPI1_Init+0x40>)
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f000 f830 	bl	8004eb0 <MX_SPI1_Init>
 8004e50:	1e03      	subs	r3, r0, #0
 8004e52:	d002      	beq.n	8004e5a <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004e54:	2308      	movs	r3, #8
 8004e56:	425b      	negs	r3, r3
 8004e58:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8004e5a:	687b      	ldr	r3, [r7, #4]
}
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200006ec 	.word	0x200006ec
 8004e68:	40013000 	.word	0x40013000

08004e6c <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b089      	sub	sp, #36	@ 0x24
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	1dbb      	adds	r3, r7, #6
 8004e78:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004e7a:	2306      	movs	r3, #6
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004e80:	1dbb      	adds	r3, r7, #6
 8004e82:	881c      	ldrh	r4, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	4808      	ldr	r0, [pc, #32]	@ (8004eac <BSP_SPI1_SendRecv+0x40>)
 8004e8a:	23fa      	movs	r3, #250	@ 0xfa
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	0023      	movs	r3, r4
 8004e92:	f004 ffd9 	bl	8009e48 <HAL_SPI_TransmitReceive>
 8004e96:	1e03      	subs	r3, r0, #0
 8004e98:	d102      	bne.n	8004ea0 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 8004e9a:	1dbb      	adds	r3, r7, #6
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004ea0:	697b      	ldr	r3, [r7, #20]
}
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b007      	add	sp, #28
 8004ea8:	bd90      	pop	{r4, r7, pc}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	200006ec 	.word	0x200006ec

08004eb0 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004eb8:	240f      	movs	r4, #15
 8004eba:	193b      	adds	r3, r7, r4
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <MX_SPI1_Init+0x8c>)
 8004ec4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2282      	movs	r2, #130	@ 0x82
 8004eca:	0052      	lsls	r2, r2, #1
 8004ecc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2280      	movs	r2, #128	@ 0x80
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8004eee:	f003 ffb3 	bl	8008e58 <HAL_RCC_GetPCLK2Freq>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	4a12      	ldr	r2, [pc, #72]	@ (8004f40 <MX_SPI1_Init+0x90>)
 8004ef6:	0011      	movs	r1, r2
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 f867 	bl	8004fcc <SPI_GetPrescaler>
 8004efe:	0002      	movs	r2, r0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2207      	movs	r2, #7
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f004 fef6 	bl	8009d10 <HAL_SPI_Init>
 8004f24:	1e03      	subs	r3, r0, #0
 8004f26:	d002      	beq.n	8004f2e <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 8004f28:	193b      	adds	r3, r7, r4
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004f2e:	230f      	movs	r3, #15
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	781b      	ldrb	r3, [r3, #0]
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b005      	add	sp, #20
 8004f3a:	bd90      	pop	{r4, r7, pc}
 8004f3c:	40013000 	.word	0x40013000
 8004f40:	00989680 	.word	0x00989680

08004f44 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b089      	sub	sp, #36	@ 0x24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc4 <SPI1_MspInit+0x80>)
 8004f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f50:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc4 <SPI1_MspInit+0x80>)
 8004f52:	2180      	movs	r1, #128	@ 0x80
 8004f54:	0149      	lsls	r1, r1, #5
 8004f56:	430a      	orrs	r2, r1
 8004f58:	635a      	str	r2, [r3, #52]	@ 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5a:	240c      	movs	r4, #12
 8004f5c:	193b      	adds	r3, r7, r4
 8004f5e:	2202      	movs	r2, #2
 8004f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f62:	193b      	adds	r3, r7, r4
 8004f64:	2200      	movs	r2, #0
 8004f66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f68:	193b      	adds	r3, r7, r4
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8004f6e:	193b      	adds	r3, r7, r4
 8004f70:	2200      	movs	r2, #0
 8004f72:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8004f74:	193b      	adds	r3, r7, r4
 8004f76:	2280      	movs	r2, #128	@ 0x80
 8004f78:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004f7a:	193a      	adds	r2, r7, r4
 8004f7c:	23a0      	movs	r3, #160	@ 0xa0
 8004f7e:	05db      	lsls	r3, r3, #23
 8004f80:	0011      	movs	r1, r2
 8004f82:	0018      	movs	r0, r3
 8004f84:	f002 f810 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8004f88:	193b      	adds	r3, r7, r4
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	2240      	movs	r2, #64	@ 0x40
 8004f92:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004f94:	193a      	adds	r2, r7, r4
 8004f96:	23a0      	movs	r3, #160	@ 0xa0
 8004f98:	05db      	lsls	r3, r3, #23
 8004f9a:	0011      	movs	r1, r2
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f002 f803 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8004fa2:	193b      	adds	r3, r7, r4
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8004fa8:	193b      	adds	r3, r7, r4
 8004faa:	2208      	movs	r2, #8
 8004fac:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004fae:	193b      	adds	r3, r7, r4
 8004fb0:	4a05      	ldr	r2, [pc, #20]	@ (8004fc8 <SPI1_MspInit+0x84>)
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	f001 fff7 	bl	8006fa8 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b009      	add	sp, #36	@ 0x24
 8004fc0:	bd90      	pop	{r4, r7, pc}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	50000400 	.word	0x50000400

08004fcc <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8004fe2:	e00d      	b.n	8005000 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <SPI_GetPrescaler+0x4c>)
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	0092      	lsls	r2, r2, #2
 8004fea:	58d3      	ldr	r3, [r2, r3]
 8004fec:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b07      	cmp	r3, #7
 8004ff8:	d807      	bhi.n	800500a <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d8ed      	bhi.n	8004fe4 <SPI_GetPrescaler+0x18>
 8005008:	e000      	b.n	800500c <SPI_GetPrescaler+0x40>
      break;
 800500a:	46c0      	nop			@ (mov r8, r8)
  }

  return presc;
 800500c:	68fb      	ldr	r3, [r7, #12]
}
 800500e:	0018      	movs	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	b006      	add	sp, #24
 8005014:	bd80      	pop	{r7, pc}
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	0801da6c 	.word	0x0801da6c

0800501c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8005022:	2300      	movs	r3, #0
 8005024:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8005026:	4b19      	ldr	r3, [pc, #100]	@ (800508c <BSP_I2C1_Init+0x70>)
 8005028:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <BSP_I2C1_Init+0x74>)
 800502a:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 800502c:	4b19      	ldr	r3, [pc, #100]	@ (8005094 <BSP_I2C1_Init+0x78>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	1c59      	adds	r1, r3, #1
 8005032:	4a18      	ldr	r2, [pc, #96]	@ (8005094 <BSP_I2C1_Init+0x78>)
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d123      	bne.n	8005082 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800503a:	4b14      	ldr	r3, [pc, #80]	@ (800508c <BSP_I2C1_Init+0x70>)
 800503c:	0018      	movs	r0, r3
 800503e:	f002 fd69 	bl	8007b14 <HAL_I2C_GetState>
 8005042:	1e03      	subs	r3, r0, #0
 8005044:	d11d      	bne.n	8005082 <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8005046:	4b11      	ldr	r3, [pc, #68]	@ (800508c <BSP_I2C1_Init+0x70>)
 8005048:	0018      	movs	r0, r3
 800504a:	f000 f873 	bl	8005134 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d116      	bne.n	8005082 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005054:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <BSP_I2C1_Init+0x70>)
 8005056:	0018      	movs	r0, r3
 8005058:	f000 f81e 	bl	8005098 <MX_I2C1_Init>
 800505c:	1e03      	subs	r3, r0, #0
 800505e:	d003      	beq.n	8005068 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005060:	2308      	movs	r3, #8
 8005062:	425b      	negs	r3, r3
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	e00c      	b.n	8005082 <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005068:	4b08      	ldr	r3, [pc, #32]	@ (800508c <BSP_I2C1_Init+0x70>)
 800506a:	2100      	movs	r1, #0
 800506c:	0018      	movs	r0, r3
 800506e:	f002 ff9b 	bl	8007fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8005072:	1e03      	subs	r3, r0, #0
 8005074:	d003      	beq.n	800507e <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005076:	2308      	movs	r3, #8
 8005078:	425b      	negs	r3, r3
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e001      	b.n	8005082 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005082:	687b      	ldr	r3, [r7, #4]
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b002      	add	sp, #8
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000744 	.word	0x20000744
 8005090:	40005400 	.word	0x40005400
 8005094:	20000790 	.word	0x20000790

08005098 <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80050a0:	240f      	movs	r4, #15
 80050a2:	193b      	adds	r3, r7, r4
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a20      	ldr	r2, [pc, #128]	@ (800512c <MX_I2C1_Init+0x94>)
 80050ac:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005130 <MX_I2C1_Init+0x98>)
 80050b2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0018      	movs	r0, r3
 80050e2:	f002 fa17 	bl	8007514 <HAL_I2C_Init>
 80050e6:	1e03      	subs	r3, r0, #0
 80050e8:	d002      	beq.n	80050f0 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 80050ea:	193b      	adds	r3, r7, r4
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2100      	movs	r1, #0
 80050f4:	0018      	movs	r0, r3
 80050f6:	f002 ff57 	bl	8007fa8 <HAL_I2CEx_ConfigAnalogFilter>
 80050fa:	1e03      	subs	r3, r0, #0
 80050fc:	d003      	beq.n	8005106 <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 80050fe:	230f      	movs	r3, #15
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2100      	movs	r1, #0
 800510a:	0018      	movs	r0, r3
 800510c:	f002 ff98 	bl	8008040 <HAL_I2CEx_ConfigDigitalFilter>
 8005110:	1e03      	subs	r3, r0, #0
 8005112:	d003      	beq.n	800511c <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8005114:	230f      	movs	r3, #15
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800511c:	230f      	movs	r3, #15
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	781b      	ldrb	r3, [r3, #0]
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b005      	add	sp, #20
 8005128:	bd90      	pop	{r4, r7, pc}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	40005400 	.word	0x40005400
 8005130:	00707cbb 	.word	0x00707cbb

08005134 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b089      	sub	sp, #36	@ 0x24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 800513c:	4b22      	ldr	r3, [pc, #136]	@ (80051c8 <I2C1_MspInit+0x94>)
 800513e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005140:	4b21      	ldr	r3, [pc, #132]	@ (80051c8 <I2C1_MspInit+0x94>)
 8005142:	2102      	movs	r1, #2
 8005144:	430a      	orrs	r2, r1
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005148:	4b1f      	ldr	r3, [pc, #124]	@ (80051c8 <I2C1_MspInit+0x94>)
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	2202      	movs	r2, #2
 800514e:	4013      	ands	r3, r2
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8005154:	210c      	movs	r1, #12
 8005156:	187b      	adds	r3, r7, r1
 8005158:	2280      	movs	r2, #128	@ 0x80
 800515a:	0052      	lsls	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800515e:	000c      	movs	r4, r1
 8005160:	193b      	adds	r3, r7, r4
 8005162:	2212      	movs	r2, #18
 8005164:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005166:	193b      	adds	r3, r7, r4
 8005168:	2201      	movs	r2, #1
 800516a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516c:	193b      	adds	r3, r7, r4
 800516e:	2203      	movs	r2, #3
 8005170:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8005172:	193b      	adds	r3, r7, r4
 8005174:	2204      	movs	r2, #4
 8005176:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005178:	193b      	adds	r3, r7, r4
 800517a:	4a14      	ldr	r2, [pc, #80]	@ (80051cc <I2C1_MspInit+0x98>)
 800517c:	0019      	movs	r1, r3
 800517e:	0010      	movs	r0, r2
 8005180:	f001 ff12 	bl	8006fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8005184:	0021      	movs	r1, r4
 8005186:	187b      	adds	r3, r7, r1
 8005188:	2280      	movs	r2, #128	@ 0x80
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800518e:	187b      	adds	r3, r7, r1
 8005190:	2212      	movs	r2, #18
 8005192:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005194:	187b      	adds	r3, r7, r1
 8005196:	2201      	movs	r2, #1
 8005198:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519a:	187b      	adds	r3, r7, r1
 800519c:	2203      	movs	r2, #3
 800519e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80051a0:	187b      	adds	r3, r7, r1
 80051a2:	2204      	movs	r2, #4
 80051a4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	4a08      	ldr	r2, [pc, #32]	@ (80051cc <I2C1_MspInit+0x98>)
 80051aa:	0019      	movs	r1, r3
 80051ac:	0010      	movs	r0, r2
 80051ae:	f001 fefb 	bl	8006fa8 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80051b2:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <I2C1_MspInit+0x94>)
 80051b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051b6:	4b04      	ldr	r3, [pc, #16]	@ (80051c8 <I2C1_MspInit+0x94>)
 80051b8:	2180      	movs	r1, #128	@ 0x80
 80051ba:	0389      	lsls	r1, r1, #14
 80051bc:	430a      	orrs	r2, r1
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80051c0:	46c0      	nop			@ (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b009      	add	sp, #36	@ 0x24
 80051c6:	bd90      	pop	{r4, r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	50000400 	.word	0x50000400

080051d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	0002      	movs	r2, r0
 80051d8:	6039      	str	r1, [r7, #0]
 80051da:	1dfb      	adds	r3, r7, #7
 80051dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80051de:	1dfb      	adds	r3, r7, #7
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80051e4:	d828      	bhi.n	8005238 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051e6:	4a2f      	ldr	r2, [pc, #188]	@ (80052a4 <__NVIC_SetPriority+0xd4>)
 80051e8:	1dfb      	adds	r3, r7, #7
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	b25b      	sxtb	r3, r3
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	33c0      	adds	r3, #192	@ 0xc0
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	589b      	ldr	r3, [r3, r2]
 80051f6:	1dfa      	adds	r2, r7, #7
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	0011      	movs	r1, r2
 80051fc:	2203      	movs	r2, #3
 80051fe:	400a      	ands	r2, r1
 8005200:	00d2      	lsls	r2, r2, #3
 8005202:	21ff      	movs	r1, #255	@ 0xff
 8005204:	4091      	lsls	r1, r2
 8005206:	000a      	movs	r2, r1
 8005208:	43d2      	mvns	r2, r2
 800520a:	401a      	ands	r2, r3
 800520c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	22ff      	movs	r2, #255	@ 0xff
 8005214:	401a      	ands	r2, r3
 8005216:	1dfb      	adds	r3, r7, #7
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	0018      	movs	r0, r3
 800521c:	2303      	movs	r3, #3
 800521e:	4003      	ands	r3, r0
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005224:	481f      	ldr	r0, [pc, #124]	@ (80052a4 <__NVIC_SetPriority+0xd4>)
 8005226:	1dfb      	adds	r3, r7, #7
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b25b      	sxtb	r3, r3
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	430a      	orrs	r2, r1
 8005230:	33c0      	adds	r3, #192	@ 0xc0
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005236:	e031      	b.n	800529c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005238:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <__NVIC_SetPriority+0xd8>)
 800523a:	1dfb      	adds	r3, r7, #7
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	0019      	movs	r1, r3
 8005240:	230f      	movs	r3, #15
 8005242:	400b      	ands	r3, r1
 8005244:	3b08      	subs	r3, #8
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	3306      	adds	r3, #6
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	18d3      	adds	r3, r2, r3
 800524e:	3304      	adds	r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	1dfa      	adds	r2, r7, #7
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	0011      	movs	r1, r2
 8005258:	2203      	movs	r2, #3
 800525a:	400a      	ands	r2, r1
 800525c:	00d2      	lsls	r2, r2, #3
 800525e:	21ff      	movs	r1, #255	@ 0xff
 8005260:	4091      	lsls	r1, r2
 8005262:	000a      	movs	r2, r1
 8005264:	43d2      	mvns	r2, r2
 8005266:	401a      	ands	r2, r3
 8005268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	22ff      	movs	r2, #255	@ 0xff
 8005270:	401a      	ands	r2, r3
 8005272:	1dfb      	adds	r3, r7, #7
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	0018      	movs	r0, r3
 8005278:	2303      	movs	r3, #3
 800527a:	4003      	ands	r3, r0
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005280:	4809      	ldr	r0, [pc, #36]	@ (80052a8 <__NVIC_SetPriority+0xd8>)
 8005282:	1dfb      	adds	r3, r7, #7
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	001c      	movs	r4, r3
 8005288:	230f      	movs	r3, #15
 800528a:	4023      	ands	r3, r4
 800528c:	3b08      	subs	r3, #8
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	430a      	orrs	r2, r1
 8005292:	3306      	adds	r3, #6
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	18c3      	adds	r3, r0, r3
 8005298:	3304      	adds	r3, #4
 800529a:	601a      	str	r2, [r3, #0]
}
 800529c:	46c0      	nop			@ (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b003      	add	sp, #12
 80052a2:	bd90      	pop	{r4, r7, pc}
 80052a4:	e000e100 	.word	0xe000e100
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	@ 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	0002      	movs	r2, r0
 80052b4:	1dfb      	adds	r3, r7, #7
 80052b6:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80052b8:	1dfb      	adds	r3, r7, #7
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d02f      	beq.n	8005320 <BSP_LED_Init+0x74>
 80052c0:	dc3b      	bgt.n	800533a <BSP_LED_Init+0x8e>
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d01f      	beq.n	8005306 <BSP_LED_Init+0x5a>
 80052c6:	dc38      	bgt.n	800533a <BSP_LED_Init+0x8e>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <BSP_LED_Init+0x26>
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d00d      	beq.n	80052ec <BSP_LED_Init+0x40>
 80052d0:	e033      	b.n	800533a <BSP_LED_Init+0x8e>
 80052d2:	4b2a      	ldr	r3, [pc, #168]	@ (800537c <BSP_LED_Init+0xd0>)
 80052d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d6:	4b29      	ldr	r3, [pc, #164]	@ (800537c <BSP_LED_Init+0xd0>)
 80052d8:	2102      	movs	r1, #2
 80052da:	430a      	orrs	r2, r1
 80052dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80052de:	4b27      	ldr	r3, [pc, #156]	@ (800537c <BSP_LED_Init+0xd0>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	2202      	movs	r2, #2
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	e026      	b.n	800533a <BSP_LED_Init+0x8e>
 80052ec:	4b23      	ldr	r3, [pc, #140]	@ (800537c <BSP_LED_Init+0xd0>)
 80052ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f0:	4b22      	ldr	r3, [pc, #136]	@ (800537c <BSP_LED_Init+0xd0>)
 80052f2:	2101      	movs	r1, #1
 80052f4:	430a      	orrs	r2, r1
 80052f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80052f8:	4b20      	ldr	r3, [pc, #128]	@ (800537c <BSP_LED_Init+0xd0>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	2201      	movs	r2, #1
 80052fe:	4013      	ands	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	e019      	b.n	800533a <BSP_LED_Init+0x8e>
 8005306:	4b1d      	ldr	r3, [pc, #116]	@ (800537c <BSP_LED_Init+0xd0>)
 8005308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530a:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <BSP_LED_Init+0xd0>)
 800530c:	2102      	movs	r1, #2
 800530e:	430a      	orrs	r2, r1
 8005310:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005312:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <BSP_LED_Init+0xd0>)
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	2202      	movs	r2, #2
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	e00c      	b.n	800533a <BSP_LED_Init+0x8e>
 8005320:	4b16      	ldr	r3, [pc, #88]	@ (800537c <BSP_LED_Init+0xd0>)
 8005322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005324:	4b15      	ldr	r3, [pc, #84]	@ (800537c <BSP_LED_Init+0xd0>)
 8005326:	2102      	movs	r1, #2
 8005328:	430a      	orrs	r2, r1
 800532a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800532c:	4b13      	ldr	r3, [pc, #76]	@ (800537c <BSP_LED_Init+0xd0>)
 800532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005330:	2202      	movs	r2, #2
 8005332:	4013      	ands	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	46c0      	nop			@ (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800533a:	1dfb      	adds	r3, r7, #7
 800533c:	781a      	ldrb	r2, [r3, #0]
 800533e:	4b10      	ldr	r3, [pc, #64]	@ (8005380 <BSP_LED_Init+0xd4>)
 8005340:	0052      	lsls	r2, r2, #1
 8005342:	5ad3      	ldrh	r3, [r2, r3]
 8005344:	001a      	movs	r2, r3
 8005346:	211c      	movs	r1, #28
 8005348:	187b      	adds	r3, r7, r1
 800534a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800534c:	187b      	adds	r3, r7, r1
 800534e:	2201      	movs	r2, #1
 8005350:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005352:	187b      	adds	r3, r7, r1
 8005354:	2200      	movs	r2, #0
 8005356:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005358:	187b      	adds	r3, r7, r1
 800535a:	2203      	movs	r2, #3
 800535c:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800535e:	1dfb      	adds	r3, r7, #7
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	4b08      	ldr	r3, [pc, #32]	@ (8005384 <BSP_LED_Init+0xd8>)
 8005364:	0092      	lsls	r2, r2, #2
 8005366:	58d3      	ldr	r3, [r2, r3]
 8005368:	187a      	adds	r2, r7, r1
 800536a:	0011      	movs	r1, r2
 800536c:	0018      	movs	r0, r3
 800536e:	f001 fe1b 	bl	8006fa8 <HAL_GPIO_Init>
}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	46bd      	mov	sp, r7
 8005376:	b00c      	add	sp, #48	@ 0x30
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			@ (mov r8, r8)
 800537c:	40021000 	.word	0x40021000
 8005380:	0801da8c 	.word	0x0801da8c
 8005384:	2000004c 	.word	0x2000004c

08005388 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	0002      	movs	r2, r0
 8005390:	1dfb      	adds	r3, r7, #7
 8005392:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8005394:	1dfb      	adds	r3, r7, #7
 8005396:	781a      	ldrb	r2, [r3, #0]
 8005398:	4b07      	ldr	r3, [pc, #28]	@ (80053b8 <BSP_LED_On+0x30>)
 800539a:	0092      	lsls	r2, r2, #2
 800539c:	58d0      	ldr	r0, [r2, r3]
 800539e:	1dfb      	adds	r3, r7, #7
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <BSP_LED_On+0x34>)
 80053a4:	0052      	lsls	r2, r2, #1
 80053a6:	5ad3      	ldrh	r3, [r2, r3]
 80053a8:	2201      	movs	r2, #1
 80053aa:	0019      	movs	r1, r3
 80053ac:	f002 f879 	bl	80074a2 <HAL_GPIO_WritePin>
}
 80053b0:	46c0      	nop			@ (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	2000004c 	.word	0x2000004c
 80053bc:	0801da8c 	.word	0x0801da8c

080053c0 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	0002      	movs	r2, r0
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80053cc:	1dfb      	adds	r3, r7, #7
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <BSP_LED_Off+0x30>)
 80053d2:	0092      	lsls	r2, r2, #2
 80053d4:	58d0      	ldr	r0, [r2, r3]
 80053d6:	1dfb      	adds	r3, r7, #7
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <BSP_LED_Off+0x34>)
 80053dc:	0052      	lsls	r2, r2, #1
 80053de:	5ad3      	ldrh	r3, [r2, r3]
 80053e0:	2200      	movs	r2, #0
 80053e2:	0019      	movs	r1, r3
 80053e4:	f002 f85d 	bl	80074a2 <HAL_GPIO_WritePin>
}
 80053e8:	46c0      	nop			@ (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b002      	add	sp, #8
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000004c 	.word	0x2000004c
 80053f4:	0801da8c 	.word	0x0801da8c

080053f8 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	0002      	movs	r2, r0
 8005400:	1dfb      	adds	r3, r7, #7
 8005402:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005404:	1dfb      	adds	r3, r7, #7
 8005406:	781a      	ldrb	r2, [r3, #0]
 8005408:	4b07      	ldr	r3, [pc, #28]	@ (8005428 <BSP_LED_Toggle+0x30>)
 800540a:	0092      	lsls	r2, r2, #2
 800540c:	58d0      	ldr	r0, [r2, r3]
 800540e:	1dfb      	adds	r3, r7, #7
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	4b06      	ldr	r3, [pc, #24]	@ (800542c <BSP_LED_Toggle+0x34>)
 8005414:	0052      	lsls	r2, r2, #1
 8005416:	5ad3      	ldrh	r3, [r2, r3]
 8005418:	0019      	movs	r1, r3
 800541a:	f002 f85f 	bl	80074dc <HAL_GPIO_TogglePin>
}
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b002      	add	sp, #8
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			@ (mov r8, r8)
 8005428:	2000004c 	.word	0x2000004c
 800542c:	0801da8c 	.word	0x0801da8c

08005430 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	0002      	movs	r2, r0
 8005438:	1dfb      	adds	r3, r7, #7
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	1dbb      	adds	r3, r7, #6
 800543e:	1c0a      	adds	r2, r1, #0
 8005440:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005442:	4b2b      	ldr	r3, [pc, #172]	@ (80054f0 <BSP_PB_Init+0xc0>)
 8005444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005446:	4b2a      	ldr	r3, [pc, #168]	@ (80054f0 <BSP_PB_Init+0xc0>)
 8005448:	2102      	movs	r1, #2
 800544a:	430a      	orrs	r2, r1
 800544c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800544e:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <BSP_PB_Init+0xc0>)
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	2202      	movs	r2, #2
 8005454:	4013      	ands	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545a:	4b25      	ldr	r3, [pc, #148]	@ (80054f0 <BSP_PB_Init+0xc0>)
 800545c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800545e:	4b24      	ldr	r3, [pc, #144]	@ (80054f0 <BSP_PB_Init+0xc0>)
 8005460:	2101      	movs	r1, #1
 8005462:	430a      	orrs	r2, r1
 8005464:	635a      	str	r2, [r3, #52]	@ 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005466:	1dbb      	adds	r3, r7, #6
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d117      	bne.n	800549e <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800546e:	2304      	movs	r3, #4
 8005470:	001a      	movs	r2, r3
 8005472:	210c      	movs	r1, #12
 8005474:	187b      	adds	r3, r7, r1
 8005476:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005478:	187b      	adds	r3, r7, r1
 800547a:	2200      	movs	r2, #0
 800547c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800547e:	187b      	adds	r3, r7, r1
 8005480:	2202      	movs	r2, #2
 8005482:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005484:	187b      	adds	r3, r7, r1
 8005486:	2203      	movs	r2, #3
 8005488:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	781a      	ldrb	r2, [r3, #0]
 800548e:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <BSP_PB_Init+0xc4>)
 8005490:	0092      	lsls	r2, r2, #2
 8005492:	58d3      	ldr	r3, [r2, r3]
 8005494:	187a      	adds	r2, r7, r1
 8005496:	0011      	movs	r1, r2
 8005498:	0018      	movs	r0, r3
 800549a:	f001 fd85 	bl	8006fa8 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 800549e:	1dbb      	adds	r3, r7, #6
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d11f      	bne.n	80054e6 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80054a6:	2304      	movs	r3, #4
 80054a8:	001a      	movs	r2, r3
 80054aa:	210c      	movs	r1, #12
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	4a0f      	ldr	r2, [pc, #60]	@ (80054f8 <BSP_PB_Init+0xc8>)
 80054ba:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80054bc:	1dfb      	adds	r3, r7, #7
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <BSP_PB_Init+0xc4>)
 80054c2:	0092      	lsls	r2, r2, #2
 80054c4:	58d3      	ldr	r3, [r2, r3]
 80054c6:	187a      	adds	r2, r7, r1
 80054c8:	0011      	movs	r1, r2
 80054ca:	0018      	movs	r0, r3
 80054cc:	f001 fd6c 	bl	8006fa8 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 80054d0:	2306      	movs	r3, #6
 80054d2:	b25b      	sxtb	r3, r3
 80054d4:	2103      	movs	r1, #3
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7ff fe7a 	bl	80051d0 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80054dc:	2306      	movs	r3, #6
 80054de:	b25b      	sxtb	r3, r3
 80054e0:	0018      	movs	r0, r3
 80054e2:	f001 fa4a 	bl	800697a <HAL_NVIC_EnableIRQ>
  }
}
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b008      	add	sp, #32
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	40021000 	.word	0x40021000
 80054f4:	2000005c 	.word	0x2000005c
 80054f8:	10110000 	.word	0x10110000

080054fc <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005500:	2305      	movs	r3, #5
}
 8005502:	0018      	movs	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	0002      	movs	r2, r0
 8005510:	1dfb      	adds	r3, r7, #7
 8005512:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 8005514:	1dfb      	adds	r3, r7, #7
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10b      	bne.n	8005534 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	0159      	lsls	r1, r3, #5
 8005520:	23a0      	movs	r3, #160	@ 0xa0
 8005522:	05db      	lsls	r3, r3, #23
 8005524:	2201      	movs	r2, #1
 8005526:	0018      	movs	r0, r3
 8005528:	f001 ffbb 	bl	80074a2 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 800552c:	2005      	movs	r0, #5
 800552e:	f7ff f9bc 	bl	80048aa <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8005532:	e007      	b.n	8005544 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8005534:	2380      	movs	r3, #128	@ 0x80
 8005536:	0159      	lsls	r1, r3, #5
 8005538:	23a0      	movs	r3, #160	@ 0xa0
 800553a:	05db      	lsls	r3, r3, #23
 800553c:	2200      	movs	r2, #0
 800553e:	0018      	movs	r0, r3
 8005540:	f001 ffaf 	bl	80074a2 <HAL_GPIO_WritePin>
}
 8005544:	46c0      	nop			@ (mov r8, r8)
 8005546:	46bd      	mov	sp, r7
 8005548:	b002      	add	sp, #8
 800554a:	bd80      	pop	{r7, pc}

0800554c <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b0a7      	sub	sp, #156	@ 0x9c
 8005550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005552:	2480      	movs	r4, #128	@ 0x80
 8005554:	193b      	adds	r3, r7, r4
 8005556:	0018      	movs	r0, r3
 8005558:	2314      	movs	r3, #20
 800555a:	001a      	movs	r2, r3
 800555c:	2100      	movs	r1, #0
 800555e:	f017 fe9a 	bl	801d296 <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8005562:	4b78      	ldr	r3, [pc, #480]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005566:	4b77      	ldr	r3, [pc, #476]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005568:	2102      	movs	r1, #2
 800556a:	430a      	orrs	r2, r1
 800556c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800556e:	4b75      	ldr	r3, [pc, #468]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005572:	2202      	movs	r2, #2
 8005574:	4013      	ands	r3, r2
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800557a:	4b72      	ldr	r3, [pc, #456]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800557c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557e:	4b71      	ldr	r3, [pc, #452]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005580:	2102      	movs	r1, #2
 8005582:	430a      	orrs	r2, r1
 8005584:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005586:	4b6f      	ldr	r3, [pc, #444]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	2202      	movs	r2, #2
 800558c:	4013      	ands	r3, r2
 800558e:	623b      	str	r3, [r7, #32]
 8005590:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8005592:	4b6c      	ldr	r3, [pc, #432]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005596:	4b6b      	ldr	r3, [pc, #428]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005598:	2102      	movs	r1, #2
 800559a:	430a      	orrs	r2, r1
 800559c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800559e:	4b69      	ldr	r3, [pc, #420]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	2202      	movs	r2, #2
 80055a4:	4013      	ands	r3, r2
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80055aa:	4b66      	ldr	r3, [pc, #408]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80055ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ae:	4b65      	ldr	r3, [pc, #404]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80055b0:	2104      	movs	r1, #4
 80055b2:	430a      	orrs	r2, r1
 80055b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055b6:	4b63      	ldr	r3, [pc, #396]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	2204      	movs	r2, #4
 80055bc:	4013      	ands	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 80055c2:	193b      	adds	r3, r7, r4
 80055c4:	2202      	movs	r2, #2
 80055c6:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80055c8:	193b      	adds	r3, r7, r4
 80055ca:	2203      	movs	r2, #3
 80055cc:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	2294      	movs	r2, #148	@ 0x94
 80055d2:	18ba      	adds	r2, r7, r2
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e020      	b.n	800561a <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 80055d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005748 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 80055da:	2194      	movs	r1, #148	@ 0x94
 80055dc:	187a      	adds	r2, r7, r1
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	0092      	lsls	r2, r2, #2
 80055e2:	58d2      	ldr	r2, [r2, r3]
 80055e4:	2080      	movs	r0, #128	@ 0x80
 80055e6:	183b      	adds	r3, r7, r0
 80055e8:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80055ea:	4b58      	ldr	r3, [pc, #352]	@ (800574c <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 80055ec:	187a      	adds	r2, r7, r1
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	0052      	lsls	r2, r2, #1
 80055f2:	5ad3      	ldrh	r3, [r2, r3]
 80055f4:	001a      	movs	r2, r3
 80055f6:	183b      	adds	r3, r7, r0
 80055f8:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80055fa:	4b55      	ldr	r3, [pc, #340]	@ (8005750 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 80055fc:	000c      	movs	r4, r1
 80055fe:	187a      	adds	r2, r7, r1
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	0092      	lsls	r2, r2, #2
 8005604:	58d3      	ldr	r3, [r2, r3]
 8005606:	183a      	adds	r2, r7, r0
 8005608:	0011      	movs	r1, r2
 800560a:	0018      	movs	r0, r3
 800560c:	f001 fccc 	bl	8006fa8 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005610:	193b      	adds	r3, r7, r4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	193a      	adds	r2, r7, r4
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	2394      	movs	r3, #148	@ 0x94
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d9d9      	bls.n	80055d8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8005624:	2328      	movs	r3, #40	@ 0x28
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	0018      	movs	r0, r3
 800562a:	f000 fa07 	bl	8005a3c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 800562e:	2480      	movs	r4, #128	@ 0x80
 8005630:	193b      	adds	r3, r7, r4
 8005632:	2280      	movs	r2, #128	@ 0x80
 8005634:	0212      	lsls	r2, r2, #8
 8005636:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005638:	193b      	adds	r3, r7, r4
 800563a:	2201      	movs	r2, #1
 800563c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 800563e:	193b      	adds	r3, r7, r4
 8005640:	2201      	movs	r2, #1
 8005642:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8005644:	4b3f      	ldr	r3, [pc, #252]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005648:	4b3e      	ldr	r3, [pc, #248]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800564a:	2101      	movs	r1, #1
 800564c:	430a      	orrs	r2, r1
 800564e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005650:	4b3c      	ldr	r3, [pc, #240]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	2201      	movs	r2, #1
 8005656:	4013      	ands	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 800565c:	193a      	adds	r2, r7, r4
 800565e:	23a0      	movs	r3, #160	@ 0xa0
 8005660:	05db      	lsls	r3, r3, #23
 8005662:	0011      	movs	r1, r2
 8005664:	0018      	movs	r0, r3
 8005666:	f001 fc9f 	bl	8006fa8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800566a:	2380      	movs	r3, #128	@ 0x80
 800566c:	0219      	lsls	r1, r3, #8
 800566e:	23a0      	movs	r3, #160	@ 0xa0
 8005670:	05db      	lsls	r3, r3, #23
 8005672:	2201      	movs	r2, #1
 8005674:	0018      	movs	r0, r3
 8005676:	f001 ff14 	bl	80074a2 <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 800567a:	4b32      	ldr	r3, [pc, #200]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800567c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567e:	4b31      	ldr	r3, [pc, #196]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005680:	2101      	movs	r1, #1
 8005682:	430a      	orrs	r2, r1
 8005684:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005686:	4b2f      	ldr	r3, [pc, #188]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	2201      	movs	r2, #1
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8005692:	4b2c      	ldr	r3, [pc, #176]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005696:	4b2b      	ldr	r3, [pc, #172]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005698:	2101      	movs	r1, #1
 800569a:	430a      	orrs	r2, r1
 800569c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800569e:	4b29      	ldr	r3, [pc, #164]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80056a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a2:	2201      	movs	r2, #1
 80056a4:	4013      	ands	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80056aa:	4b26      	ldr	r3, [pc, #152]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80056ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ae:	4b25      	ldr	r3, [pc, #148]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80056b0:	2104      	movs	r1, #4
 80056b2:	430a      	orrs	r2, r1
 80056b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056b6:	4b23      	ldr	r3, [pc, #140]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	2204      	movs	r2, #4
 80056bc:	4013      	ands	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 80056c2:	4b20      	ldr	r3, [pc, #128]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80056c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80056c8:	2104      	movs	r1, #4
 80056ca:	430a      	orrs	r2, r1
 80056cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005744 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d2:	2204      	movs	r2, #4
 80056d4:	4013      	ands	r3, r2
 80056d6:	607b      	str	r3, [r7, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056da:	193b      	adds	r3, r7, r4
 80056dc:	2201      	movs	r2, #1
 80056de:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 80056e0:	193b      	adds	r3, r7, r4
 80056e2:	2200      	movs	r2, #0
 80056e4:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80056e6:	193b      	adds	r3, r7, r4
 80056e8:	2203      	movs	r2, #3
 80056ea:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80056ec:	193b      	adds	r3, r7, r4
 80056ee:	2280      	movs	r2, #128	@ 0x80
 80056f0:	0152      	lsls	r2, r2, #5
 80056f2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80056f4:	193a      	adds	r2, r7, r4
 80056f6:	23a0      	movs	r3, #160	@ 0xa0
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	0011      	movs	r1, r2
 80056fc:	0018      	movs	r0, r3
 80056fe:	f001 fc53 	bl	8006fa8 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8005702:	193b      	adds	r3, r7, r4
 8005704:	2202      	movs	r2, #2
 8005706:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8005708:	193a      	adds	r2, r7, r4
 800570a:	23a0      	movs	r3, #160	@ 0xa0
 800570c:	05db      	lsls	r3, r3, #23
 800570e:	0011      	movs	r1, r2
 8005710:	0018      	movs	r0, r3
 8005712:	f001 fc49 	bl	8006fa8 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8005716:	193b      	adds	r3, r7, r4
 8005718:	2202      	movs	r2, #2
 800571a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 800571c:	193b      	adds	r3, r7, r4
 800571e:	4a0d      	ldr	r2, [pc, #52]	@ (8005754 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005720:	0019      	movs	r1, r3
 8005722:	0010      	movs	r0, r2
 8005724:	f001 fc40 	bl	8006fa8 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8005728:	193b      	adds	r3, r7, r4
 800572a:	2204      	movs	r2, #4
 800572c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 800572e:	193b      	adds	r3, r7, r4
 8005730:	4a08      	ldr	r2, [pc, #32]	@ (8005754 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005732:	0019      	movs	r1, r3
 8005734:	0010      	movs	r0, r2
 8005736:	f001 fc37 	bl	8006fa8 <HAL_GPIO_Init>
}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	46bd      	mov	sp, r7
 800573e:	b027      	add	sp, #156	@ 0x9c
 8005740:	bd90      	pop	{r4, r7, pc}
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	40021000 	.word	0x40021000
 8005748:	0801dac8 	.word	0x0801dac8
 800574c:	0801dac0 	.word	0x0801dac0
 8005750:	20000060 	.word	0x20000060
 8005754:	50000800 	.word	0x50000800

08005758 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 800575e:	003b      	movs	r3, r7
 8005760:	0018      	movs	r0, r3
 8005762:	2314      	movs	r3, #20
 8005764:	001a      	movs	r2, r3
 8005766:	2100      	movs	r1, #0
 8005768:	f017 fd95 	bl	801d296 <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 800576c:	003b      	movs	r3, r7
 800576e:	2202      	movs	r2, #2
 8005770:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	e018      	b.n	80057aa <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005778:	4b10      	ldr	r3, [pc, #64]	@ (80057bc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	0092      	lsls	r2, r2, #2
 800577e:	58d2      	ldr	r2, [r2, r3]
 8005780:	003b      	movs	r3, r7
 8005782:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005784:	4b0e      	ldr	r3, [pc, #56]	@ (80057c0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	0052      	lsls	r2, r2, #1
 800578a:	5ad3      	ldrh	r3, [r2, r3]
 800578c:	001a      	movs	r2, r3
 800578e:	003b      	movs	r3, r7
 8005790:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005792:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	58d3      	ldr	r3, [r2, r3]
 800579a:	003a      	movs	r2, r7
 800579c:	0011      	movs	r1, r2
 800579e:	0018      	movs	r0, r3
 80057a0:	f001 fc02 	bl	8006fa8 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	3301      	adds	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d9e3      	bls.n	8005778 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 80057b0:	f000 f9a4 	bl	8005afc <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 80057b4:	46c0      	nop			@ (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b006      	add	sp, #24
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	0801dac8 	.word	0x0801dac8
 80057c0:	0801dac0 	.word	0x0801dac0
 80057c4:	20000060 	.word	0x20000060

080057c8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d0:	f3ef 8310 	mrs	r3, PRIMASK
 80057d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80057d6:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 80057d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80057da:	b672      	cpsid	i
}
 80057dc:	46c0      	nop			@ (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e02f      	b.n	8005844 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	00da      	lsls	r2, r3, #3
 80057e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005860 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 80057ea:	18d0      	adds	r0, r2, r3
 80057ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005864 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	0092      	lsls	r2, r2, #2
 80057f2:	58d3      	ldr	r3, [r2, r3]
 80057f4:	0019      	movs	r1, r3
 80057f6:	f001 fba1 	bl	8006f3c <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	00da      	lsls	r2, r3, #3
 80057fe:	4b18      	ldr	r3, [pc, #96]	@ (8005860 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005800:	18d0      	adds	r0, r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	18d3      	adds	r3, r2, r3
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	001a      	movs	r2, r3
 800580e:	2100      	movs	r1, #0
 8005810:	f001 fb73 	bl	8006efa <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8005814:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	18d3      	adds	r3, r2, r3
 800581a:	2000      	movs	r0, #0
 800581c:	5618      	ldrsb	r0, [r3, r0]
 800581e:	4b13      	ldr	r3, [pc, #76]	@ (800586c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	0092      	lsls	r2, r2, #2
 8005824:	58d3      	ldr	r3, [r2, r3]
 8005826:	2200      	movs	r2, #0
 8005828:	0019      	movs	r1, r3
 800582a:	f001 f891 	bl	8006950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 800582e:	4a0e      	ldr	r2, [pc, #56]	@ (8005868 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	18d3      	adds	r3, r2, r3
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	b25b      	sxtb	r3, r3
 8005838:	0018      	movs	r0, r3
 800583a:	f001 f89e 	bl	800697a <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	3301      	adds	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d9cc      	bls.n	80057e4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f383 8810 	msr	PRIMASK, r3
}
 8005854:	46c0      	nop			@ (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	46bd      	mov	sp, r7
 800585a:	b006      	add	sp, #24
 800585c:	bd80      	pop	{r7, pc}
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	20000794 	.word	0x20000794
 8005864:	0801da9c 	.word	0x0801da9c
 8005868:	0801dabc 	.word	0x0801dabc
 800586c:	0801daac 	.word	0x0801daac

08005870 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8005878:	2300      	movs	r3, #0
}
 800587a:	0018      	movs	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	b002      	add	sp, #8
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	0002      	movs	r2, r0
 800588c:	1dfb      	adds	r3, r7, #7
 800588e:	701a      	strb	r2, [r3, #0]

  switch (state)
 8005890:	1dfb      	adds	r3, r7, #7
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d82e      	bhi.n	80058f6 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 8005898:	009a      	lsls	r2, r3, #2
 800589a:	4b23      	ldr	r3, [pc, #140]	@ (8005928 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 800589c:	18d3      	adds	r3, r2, r3
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 80058a2:	23a0      	movs	r3, #160	@ 0xa0
 80058a4:	05db      	lsls	r3, r3, #23
 80058a6:	2201      	movs	r2, #1
 80058a8:	2102      	movs	r1, #2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f001 fdf9 	bl	80074a2 <HAL_GPIO_WritePin>
      break;
 80058b0:	e036      	b.n	8005920 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 80058b2:	4b1e      	ldr	r3, [pc, #120]	@ (800592c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	2104      	movs	r1, #4
 80058b8:	0018      	movs	r0, r3
 80058ba:	f001 fdf2 	bl	80074a2 <HAL_GPIO_WritePin>
      break;
 80058be:	e02f      	b.n	8005920 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80058c0:	4b1a      	ldr	r3, [pc, #104]	@ (800592c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	2102      	movs	r1, #2
 80058c6:	0018      	movs	r0, r3
 80058c8:	f001 fdeb 	bl	80074a2 <HAL_GPIO_WritePin>
      break;
 80058cc:	e028      	b.n	8005920 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80058ce:	23a0      	movs	r3, #160	@ 0xa0
 80058d0:	05db      	lsls	r3, r3, #23
 80058d2:	2200      	movs	r2, #0
 80058d4:	2102      	movs	r1, #2
 80058d6:	0018      	movs	r0, r3
 80058d8:	f001 fde3 	bl	80074a2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80058dc:	4b13      	ldr	r3, [pc, #76]	@ (800592c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80058de:	2200      	movs	r2, #0
 80058e0:	2104      	movs	r1, #4
 80058e2:	0018      	movs	r0, r3
 80058e4:	f001 fddd 	bl	80074a2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80058e8:	4b10      	ldr	r3, [pc, #64]	@ (800592c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	2102      	movs	r1, #2
 80058ee:	0018      	movs	r0, r3
 80058f0:	f001 fdd7 	bl	80074a2 <HAL_GPIO_WritePin>
      break;
 80058f4:	e014      	b.n	8005920 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80058f6:	23a0      	movs	r3, #160	@ 0xa0
 80058f8:	05db      	lsls	r3, r3, #23
 80058fa:	2200      	movs	r2, #0
 80058fc:	2102      	movs	r1, #2
 80058fe:	0018      	movs	r0, r3
 8005900:	f001 fdcf 	bl	80074a2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8005904:	4b09      	ldr	r3, [pc, #36]	@ (800592c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005906:	2200      	movs	r2, #0
 8005908:	2104      	movs	r1, #4
 800590a:	0018      	movs	r0, r3
 800590c:	f001 fdc9 	bl	80074a2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005910:	4b06      	ldr	r3, [pc, #24]	@ (800592c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005912:	2200      	movs	r2, #0
 8005914:	2102      	movs	r1, #2
 8005916:	0018      	movs	r0, r3
 8005918:	f001 fdc3 	bl	80074a2 <HAL_GPIO_WritePin>

      break;
 800591c:	e000      	b.n	8005920 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 800591e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005920:	46c0      	nop			@ (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	b002      	add	sp, #8
 8005926:	bd80      	pop	{r7, pc}
 8005928:	0801dad8 	.word	0x0801dad8
 800592c:	50000800 	.word	0x50000800

08005930 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8005938:	2301      	movs	r3, #1
}
 800593a:	0018      	movs	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	b002      	add	sp, #8
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	0018      	movs	r0, r3
 800594e:	2314      	movs	r3, #20
 8005950:	001a      	movs	r2, r3
 8005952:	2100      	movs	r1, #0
 8005954:	f017 fc9f 	bl	801d296 <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	2201      	movs	r2, #1
 800595c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	2200      	movs	r2, #0
 8005962:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	2203      	movs	r2, #3
 8005968:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 800596a:	1d3b      	adds	r3, r7, #4
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005970:	1d3b      	adds	r3, r7, #4
 8005972:	4a0f      	ldr	r2, [pc, #60]	@ (80059b0 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005974:	0019      	movs	r1, r3
 8005976:	0010      	movs	r0, r2
 8005978:	f001 fb16 	bl	8006fa8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 800597c:	4b0c      	ldr	r3, [pc, #48]	@ (80059b0 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 800597e:	2200      	movs	r2, #0
 8005980:	2101      	movs	r1, #1
 8005982:	0018      	movs	r0, r3
 8005984:	f001 fd8d 	bl	80074a2 <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 8005988:	2001      	movs	r0, #1
 800598a:	f7fe ff8e 	bl	80048aa <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	2200      	movs	r2, #0
 8005992:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005994:	1d3b      	adds	r3, r7, #4
 8005996:	4a06      	ldr	r2, [pc, #24]	@ (80059b0 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005998:	0019      	movs	r1, r3
 800599a:	0010      	movs	r0, r2
 800599c:	f001 fb04 	bl	8006fa8 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 80059a0:	2006      	movs	r0, #6
 80059a2:	f7fe ff82 	bl	80048aa <HAL_Delay>
}
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b006      	add	sp, #24
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	50000800 	.word	0x50000800

080059b4 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 80059b8:	f7ff fa34 	bl	8004e24 <BSP_SPI1_Init>
}
 80059bc:	46c0      	nop			@ (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 80059c2:	b590      	push	{r4, r7, lr}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	0002      	movs	r2, r0
 80059ca:	1dbb      	adds	r3, r7, #6
 80059cc:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80059ce:	240e      	movs	r4, #14
 80059d0:	1939      	adds	r1, r7, r4
 80059d2:	1dbb      	adds	r3, r7, #6
 80059d4:	2201      	movs	r2, #1
 80059d6:	0018      	movs	r0, r3
 80059d8:	f7ff fa48 	bl	8004e6c <BSP_SPI1_SendRecv>

  return rxData;
 80059dc:	193b      	adds	r3, r7, r4
 80059de:	881b      	ldrh	r3, [r3, #0]
}
 80059e0:	0018      	movs	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b005      	add	sp, #20
 80059e6:	bd90      	pop	{r4, r7, pc}

080059e8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  if (state == 0)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d108      	bne.n	8005a08 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 80059f6:	2380      	movs	r3, #128	@ 0x80
 80059f8:	0219      	lsls	r1, r3, #8
 80059fa:	23a0      	movs	r3, #160	@ 0xa0
 80059fc:	05db      	lsls	r3, r3, #23
 80059fe:	2200      	movs	r2, #0
 8005a00:	0018      	movs	r0, r3
 8005a02:	f001 fd4e 	bl	80074a2 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 8005a06:	e007      	b.n	8005a18 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005a08:	2380      	movs	r3, #128	@ 0x80
 8005a0a:	0219      	lsls	r1, r3, #8
 8005a0c:	23a0      	movs	r3, #160	@ 0xa0
 8005a0e:	05db      	lsls	r3, r3, #23
 8005a10:	2201      	movs	r2, #1
 8005a12:	0018      	movs	r0, r3
 8005a14:	f001 fd45 	bl	80074a2 <HAL_GPIO_WritePin>
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8005a24:	4b04      	ldr	r3, [pc, #16]	@ (8005a38 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 8005a26:	2102      	movs	r1, #2
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f001 fd1d 	bl	8007468 <HAL_GPIO_ReadPin>
 8005a2e:	0003      	movs	r3, r0
}
 8005a30:	0018      	movs	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	50000400 	.word	0x50000400

08005a3c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b08b      	sub	sp, #44	@ 0x2c
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8005a44:	4b2b      	ldr	r3, [pc, #172]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a48:	4b2a      	ldr	r3, [pc, #168]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a50:	4b28      	ldr	r3, [pc, #160]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	2202      	movs	r2, #2
 8005a56:	4013      	ands	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8005a5c:	4b25      	ldr	r3, [pc, #148]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a60:	4b24      	ldr	r3, [pc, #144]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a62:	2101      	movs	r1, #1
 8005a64:	430a      	orrs	r2, r1
 8005a66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a68:	4b22      	ldr	r3, [pc, #136]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	4013      	ands	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8005a74:	4b1f      	ldr	r3, [pc, #124]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a78:	4b1e      	ldr	r3, [pc, #120]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a80:	4b1c      	ldr	r3, [pc, #112]	@ (8005af4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a84:	2201      	movs	r2, #1
 8005a86:	4013      	ands	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8c:	2414      	movs	r4, #20
 8005a8e:	193b      	adds	r3, r7, r4
 8005a90:	2202      	movs	r2, #2
 8005a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005a94:	193b      	adds	r3, r7, r4
 8005a96:	2202      	movs	r2, #2
 8005a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a9a:	193b      	adds	r3, r7, r4
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8005aa0:	193b      	adds	r3, r7, r4
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8005aa6:	193b      	adds	r3, r7, r4
 8005aa8:	2280      	movs	r2, #128	@ 0x80
 8005aaa:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8005aac:	193a      	adds	r2, r7, r4
 8005aae:	23a0      	movs	r3, #160	@ 0xa0
 8005ab0:	05db      	lsls	r3, r3, #23
 8005ab2:	0011      	movs	r1, r2
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f001 fa77 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8005aba:	193b      	adds	r3, r7, r4
 8005abc:	2200      	movs	r2, #0
 8005abe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8005ac0:	193b      	adds	r3, r7, r4
 8005ac2:	2240      	movs	r2, #64	@ 0x40
 8005ac4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005ac6:	193a      	adds	r2, r7, r4
 8005ac8:	23a0      	movs	r3, #160	@ 0xa0
 8005aca:	05db      	lsls	r3, r3, #23
 8005acc:	0011      	movs	r1, r2
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f001 fa6a 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8005ad4:	193b      	adds	r3, r7, r4
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8005ada:	193b      	adds	r3, r7, r4
 8005adc:	2208      	movs	r2, #8
 8005ade:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8005ae0:	193b      	adds	r3, r7, r4
 8005ae2:	4a05      	ldr	r2, [pc, #20]	@ (8005af8 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	0010      	movs	r0, r2
 8005ae8:	f001 fa5e 	bl	8006fa8 <HAL_GPIO_Init>
}
 8005aec:	46c0      	nop			@ (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b00b      	add	sp, #44	@ 0x2c
 8005af2:	bd90      	pop	{r4, r7, pc}
 8005af4:	40021000 	.word	0x40021000
 8005af8:	50000400 	.word	0x50000400

08005afc <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b02:	1d3b      	adds	r3, r7, #4
 8005b04:	2201      	movs	r2, #1
 8005b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	2280      	movs	r2, #128	@ 0x80
 8005b12:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8005b14:	1d3a      	adds	r2, r7, #4
 8005b16:	23a0      	movs	r3, #160	@ 0xa0
 8005b18:	05db      	lsls	r3, r3, #23
 8005b1a:	0011      	movs	r1, r2
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f001 fa43 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	2240      	movs	r2, #64	@ 0x40
 8005b26:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005b28:	1d3a      	adds	r2, r7, #4
 8005b2a:	23a0      	movs	r3, #160	@ 0xa0
 8005b2c:	05db      	lsls	r3, r3, #23
 8005b2e:	0011      	movs	r1, r2
 8005b30:	0018      	movs	r0, r3
 8005b32:	f001 fa39 	bl	8006fa8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8005b36:	1d3b      	adds	r3, r7, #4
 8005b38:	2208      	movs	r2, #8
 8005b3a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b78 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8005b40:	0019      	movs	r1, r3
 8005b42:	0010      	movs	r0, r2
 8005b44:	f001 fa30 	bl	8006fa8 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8005b48:	23a0      	movs	r3, #160	@ 0xa0
 8005b4a:	05db      	lsls	r3, r3, #23
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2180      	movs	r1, #128	@ 0x80
 8005b50:	0018      	movs	r0, r3
 8005b52:	f001 fca6 	bl	80074a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8005b56:	23a0      	movs	r3, #160	@ 0xa0
 8005b58:	05db      	lsls	r3, r3, #23
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2140      	movs	r1, #64	@ 0x40
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f001 fc9f 	bl	80074a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8005b64:	4b04      	ldr	r3, [pc, #16]	@ (8005b78 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	2108      	movs	r1, #8
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f001 fc99 	bl	80074a2 <HAL_GPIO_WritePin>

}
 8005b70:	46c0      	nop			@ (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b006      	add	sp, #24
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	50000400 	.word	0x50000400

08005b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005b80:	4b17      	ldr	r3, [pc, #92]	@ (8005be0 <SystemInit+0x64>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b16      	ldr	r3, [pc, #88]	@ (8005be0 <SystemInit+0x64>)
 8005b86:	2180      	movs	r1, #128	@ 0x80
 8005b88:	0049      	lsls	r1, r1, #1
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8005b8e:	4b14      	ldr	r3, [pc, #80]	@ (8005be0 <SystemInit+0x64>)
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	4b13      	ldr	r3, [pc, #76]	@ (8005be0 <SystemInit+0x64>)
 8005b94:	4913      	ldr	r1, [pc, #76]	@ (8005be4 <SystemInit+0x68>)
 8005b96:	400a      	ands	r2, r1
 8005b98:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005b9a:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <SystemInit+0x64>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b10      	ldr	r3, [pc, #64]	@ (8005be0 <SystemInit+0x64>)
 8005ba0:	4911      	ldr	r1, [pc, #68]	@ (8005be8 <SystemInit+0x6c>)
 8005ba2:	400a      	ands	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8005be0 <SystemInit+0x64>)
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <SystemInit+0x64>)
 8005bac:	2101      	movs	r1, #1
 8005bae:	438a      	bics	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <SystemInit+0x64>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <SystemInit+0x64>)
 8005bb8:	490c      	ldr	r1, [pc, #48]	@ (8005bec <SystemInit+0x70>)
 8005bba:	400a      	ands	r2, r1
 8005bbc:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8005bbe:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <SystemInit+0x64>)
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	4b07      	ldr	r3, [pc, #28]	@ (8005be0 <SystemInit+0x64>)
 8005bc4:	490a      	ldr	r1, [pc, #40]	@ (8005bf0 <SystemInit+0x74>)
 8005bc6:	400a      	ands	r2, r1
 8005bc8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005bca:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <SystemInit+0x64>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bd0:	4b08      	ldr	r3, [pc, #32]	@ (8005bf4 <SystemInit+0x78>)
 8005bd2:	2280      	movs	r2, #128	@ 0x80
 8005bd4:	0512      	lsls	r2, r2, #20
 8005bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8005bd8:	46c0      	nop			@ (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	46c0      	nop			@ (mov r8, r8)
 8005be0:	40021000 	.word	0x40021000
 8005be4:	88ff400c 	.word	0x88ff400c
 8005be8:	fef6fff6 	.word	0xfef6fff6
 8005bec:	fffbffff 	.word	0xfffbffff
 8005bf0:	ff02ffff 	.word	0xff02ffff
 8005bf4:	e000ed00 	.word	0xe000ed00

08005bf8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005bfe:	1dfb      	adds	r3, r7, #7
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c04:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <HAL_Init+0x3c>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b0a      	ldr	r3, [pc, #40]	@ (8005c34 <HAL_Init+0x3c>)
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c10:	2003      	movs	r0, #3
 8005c12:	f7fe fe39 	bl	8004888 <HAL_InitTick>
 8005c16:	1e03      	subs	r3, r0, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005c1a:	1dfb      	adds	r3, r7, #7
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e001      	b.n	8005c26 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c22:	f7fe fbef 	bl	8004404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c26:	1dfb      	adds	r3, r7, #7
 8005c28:	781b      	ldrb	r3, [r3, #0]
}
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b002      	add	sp, #8
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	40022000 	.word	0x40022000

08005c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <HAL_IncTick+0x1c>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	001a      	movs	r2, r3
 8005c42:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <HAL_IncTick+0x20>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	18d2      	adds	r2, r2, r3
 8005c48:	4b03      	ldr	r3, [pc, #12]	@ (8005c58 <HAL_IncTick+0x20>)
 8005c4a:	601a      	str	r2, [r3, #0]
}
 8005c4c:	46c0      	nop			@ (mov r8, r8)
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	46c0      	nop			@ (mov r8, r8)
 8005c54:	20000078 	.word	0x20000078
 8005c58:	200007b4 	.word	0x200007b4

08005c5c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8005c60:	4b02      	ldr	r3, [pc, #8]	@ (8005c6c <HAL_GetUIDw0+0x10>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	0018      	movs	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	1ff80050 	.word	0x1ff80050

08005c70 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8005c74:	4b02      	ldr	r3, [pc, #8]	@ (8005c80 <HAL_GetUIDw1+0x10>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	0018      	movs	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	1ff80054 	.word	0x1ff80054

08005c84 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8005c88:	4b02      	ldr	r3, [pc, #8]	@ (8005c94 <HAL_GetUIDw2+0x10>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
}
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	1ff80064 	.word	0x1ff80064

08005c98 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005c9c:	4b04      	ldr	r3, [pc, #16]	@ (8005cb0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	4b03      	ldr	r3, [pc, #12]	@ (8005cb0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
}
 8005ca8:	46c0      	nop			@ (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	40015800 	.word	0x40015800

08005cb4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005cb8:	4b04      	ldr	r3, [pc, #16]	@ (8005ccc <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4b03      	ldr	r3, [pc, #12]	@ (8005ccc <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8005cbe:	2102      	movs	r1, #2
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
}
 8005cc4:	46c0      	nop			@ (mov r8, r8)
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	40015800 	.word	0x40015800

08005cd0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005cd4:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	4b03      	ldr	r3, [pc, #12]	@ (8005ce8 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005cda:	2104      	movs	r1, #4
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
}
 8005ce0:	46c0      	nop			@ (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	40015800 	.word	0x40015800

08005cec <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e159      	b.n	8005fb2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	659a      	str	r2, [r3, #88]	@ 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2250      	movs	r2, #80	@ 0x50
 8005d10:	2100      	movs	r1, #0
 8005d12:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	0018      	movs	r0, r3
 8005d18:	f7fd fb40 	bl	800339c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d20:	2210      	movs	r2, #16
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d005      	beq.n	8005d34 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2204      	movs	r2, #4
 8005d30:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005d32:	d00b      	beq.n	8005d4c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d38:	2210      	movs	r2, #16
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2250      	movs	r2, #80	@ 0x50
 8005d44:	2100      	movs	r1, #0
 8005d46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e132      	b.n	8005fb2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d50:	4a9a      	ldr	r2, [pc, #616]	@ (8005fbc <HAL_ADC_Init+0x2d0>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	2202      	movs	r2, #2
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2203      	movs	r2, #3
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d108      	bne.n	8005d7c <HAL_ADC_Init+0x90>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2201      	movs	r2, #1
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_ADC_Init+0x90>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <HAL_ADC_Init+0x92>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d149      	bne.n	8005e16 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	23c0      	movs	r3, #192	@ 0xc0
 8005d88:	061b      	lsls	r3, r3, #24
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d00b      	beq.n	8005da6 <HAL_ADC_Init+0xba>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	2380      	movs	r3, #128	@ 0x80
 8005d94:	05db      	lsls	r3, r3, #23
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d005      	beq.n	8005da6 <HAL_ADC_Init+0xba>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	2380      	movs	r3, #128	@ 0x80
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d111      	bne.n	8005dca <HAL_ADC_Init+0xde>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	0092      	lsls	r2, r2, #2
 8005db2:	0892      	lsrs	r2, r2, #2
 8005db4:	611a      	str	r2, [r3, #16]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6919      	ldr	r1, [r3, #16]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	611a      	str	r2, [r3, #16]
 8005dc8:	e014      	b.n	8005df4 <HAL_ADC_Init+0x108>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	0092      	lsls	r2, r2, #2
 8005dd6:	0892      	lsrs	r2, r2, #2
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	4b79      	ldr	r3, [pc, #484]	@ (8005fc0 <HAL_ADC_Init+0x2d4>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b78      	ldr	r3, [pc, #480]	@ (8005fc0 <HAL_ADC_Init+0x2d4>)
 8005de0:	4978      	ldr	r1, [pc, #480]	@ (8005fc4 <HAL_ADC_Init+0x2d8>)
 8005de2:	400a      	ands	r2, r1
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	4b76      	ldr	r3, [pc, #472]	@ (8005fc0 <HAL_ADC_Init+0x2d4>)
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	4b74      	ldr	r3, [pc, #464]	@ (8005fc0 <HAL_ADC_Init+0x2d4>)
 8005df0:	430a      	orrs	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2118      	movs	r1, #24
 8005e00:	438a      	bics	r2, r1
 8005e02:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68d9      	ldr	r1, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005e16:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc0 <HAL_ADC_Init+0x2d4>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b69      	ldr	r3, [pc, #420]	@ (8005fc0 <HAL_ADC_Init+0x2d4>)
 8005e1c:	496a      	ldr	r1, [pc, #424]	@ (8005fc8 <HAL_ADC_Init+0x2dc>)
 8005e1e:	400a      	ands	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8005e22:	4b67      	ldr	r3, [pc, #412]	@ (8005fc0 <HAL_ADC_Init+0x2d4>)
 8005e24:	6819      	ldr	r1, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e2a:	065a      	lsls	r2, r3, #25
 8005e2c:	4b64      	ldr	r3, [pc, #400]	@ (8005fc0 <HAL_ADC_Init+0x2d4>)
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	2380      	movs	r3, #128	@ 0x80
 8005e3a:	055b      	lsls	r3, r3, #21
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d108      	bne.n	8005e52 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2180      	movs	r1, #128	@ 0x80
 8005e4c:	0549      	lsls	r1, r1, #21
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	495b      	ldr	r1, [pc, #364]	@ (8005fcc <HAL_ADC_Init+0x2e0>)
 8005e5e:	400a      	ands	r2, r1
 8005e60:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68d9      	ldr	r1, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d101      	bne.n	8005e78 <HAL_ADC_Init+0x18c>
 8005e74:	2304      	movs	r3, #4
 8005e76:	e000      	b.n	8005e7a <HAL_ADC_Init+0x18e>
 8005e78:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005e7a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2020      	movs	r0, #32
 8005e80:	5c1b      	ldrb	r3, [r3, r0]
 8005e82:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005e84:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	202c      	movs	r0, #44	@ 0x2c
 8005e8a:	5c1b      	ldrb	r3, [r3, r0]
 8005e8c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005e8e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005e94:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005e9c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005ea4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eb2:	23c2      	movs	r3, #194	@ 0xc2
 8005eb4:	33ff      	adds	r3, #255	@ 0xff
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68d9      	ldr	r1, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2221      	movs	r2, #33	@ 0x21
 8005ed6:	5c9b      	ldrb	r3, [r3, r2]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d11a      	bne.n	8005f12 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	5c9b      	ldrb	r3, [r3, r2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2180      	movs	r1, #128	@ 0x80
 8005ef2:	0249      	lsls	r1, r1, #9
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	60da      	str	r2, [r3, #12]
 8005ef8:	e00b      	b.n	8005f12 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	2220      	movs	r2, #32
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d11f      	bne.n	8005f5a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	492a      	ldr	r1, [pc, #168]	@ (8005fd0 <HAL_ADC_Init+0x2e4>)
 8005f26:	400a      	ands	r2, r1
 8005f28:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6919      	ldr	r1, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005f38:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8005f3e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2101      	movs	r1, #1
 8005f54:	430a      	orrs	r2, r1
 8005f56:	611a      	str	r2, [r3, #16]
 8005f58:	e00e      	b.n	8005f78 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2201      	movs	r2, #1
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d107      	bne.n	8005f78 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2101      	movs	r1, #1
 8005f74:	438a      	bics	r2, r1
 8005f76:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695a      	ldr	r2, [r3, #20]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2107      	movs	r1, #7
 8005f84:	438a      	bics	r2, r1
 8005f86:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6959      	ldr	r1, [r3, #20]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	4393      	bics	r3, r2
 8005fa8:	2201      	movs	r2, #1
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	fffffefd 	.word	0xfffffefd
 8005fc0:	40012708 	.word	0x40012708
 8005fc4:	ffc3ffff 	.word	0xffc3ffff
 8005fc8:	fdffffff 	.word	0xfdffffff
 8005fcc:	fffe0219 	.word	0xfffe0219
 8005fd0:	fffffc03 	.word	0xfffffc03

08005fd4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8005fd4:	b5b0      	push	{r4, r5, r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fdc:	230f      	movs	r3, #15
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e07d      	b.n	80060ea <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005ffa:	250f      	movs	r5, #15
 8005ffc:	197c      	adds	r4, r7, r5
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	0018      	movs	r0, r3
 8006002:	f000 faff 	bl	8006604 <ADC_ConversionStop>
 8006006:	0003      	movs	r3, r0
 8006008:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800600a:	197b      	adds	r3, r7, r5
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10d      	bne.n	800602e <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006012:	197c      	adds	r4, r7, r5
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	0018      	movs	r0, r3
 8006018:	f000 fa94 	bl	8006544 <ADC_Disable>
 800601c:	0003      	movs	r3, r0
 800601e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8006020:	197b      	adds	r3, r7, r5
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d002      	beq.n	800602e <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 800602e:	230f      	movs	r3, #15
 8006030:	18fb      	adds	r3, r7, r3
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d051      	beq.n	80060dc <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	492c      	ldr	r1, [pc, #176]	@ (80060f4 <HAL_ADC_DeInit+0x120>)
 8006044:	400a      	ands	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2a      	ldr	r2, [pc, #168]	@ (80060f8 <HAL_ADC_DeInit+0x124>)
 800604e:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4928      	ldr	r1, [pc, #160]	@ (80060fc <HAL_ADC_DeInit+0x128>)
 800605c:	400a      	ands	r2, r1
 800605e:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4925      	ldr	r1, [pc, #148]	@ (8006100 <HAL_ADC_DeInit+0x12c>)
 800606c:	400a      	ands	r2, r1
 800606e:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4922      	ldr	r1, [pc, #136]	@ (8006104 <HAL_ADC_DeInit+0x130>)
 800607c:	400a      	ands	r2, r1
 800607e:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2107      	movs	r1, #7
 800608c:	438a      	bics	r2, r1
 800608e:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6a1a      	ldr	r2, [r3, #32]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	491b      	ldr	r1, [pc, #108]	@ (8006108 <HAL_ADC_DeInit+0x134>)
 800609c:	400a      	ands	r2, r1
 800609e:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	22b4      	movs	r2, #180	@ 0xb4
 80060a6:	589a      	ldr	r2, [r3, r2]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	217f      	movs	r1, #127	@ 0x7f
 80060ae:	438a      	bics	r2, r1
 80060b0:	21b4      	movs	r1, #180	@ 0xb4
 80060b2:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	22b4      	movs	r2, #180	@ 0xb4
 80060ba:	589a      	ldr	r2, [r3, r2]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	217f      	movs	r1, #127	@ 0x7f
 80060c2:	438a      	bics	r2, r1
 80060c4:	21b4      	movs	r1, #180	@ 0xb4
 80060c6:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	0018      	movs	r0, r3
 80060cc:	f7fd f996 	bl	80033fc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	659a      	str	r2, [r3, #88]	@ 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2250      	movs	r2, #80	@ 0x50
 80060e0:	2100      	movs	r1, #0
 80060e2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80060e4:	230f      	movs	r3, #15
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	781b      	ldrb	r3, [r3, #0]
}
 80060ea:	0018      	movs	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b004      	add	sp, #16
 80060f0:	bdb0      	pop	{r4, r5, r7, pc}
 80060f2:	46c0      	nop			@ (mov r8, r8)
 80060f4:	fffff760 	.word	0xfffff760
 80060f8:	0000089f 	.word	0x0000089f
 80060fc:	efffffff 	.word	0xefffffff
 8006100:	833e0200 	.word	0x833e0200
 8006104:	3ffffc02 	.word	0x3ffffc02
 8006108:	f000f000 	.word	0xf000f000

0800610c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006114:	230f      	movs	r3, #15
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2204      	movs	r2, #4
 8006124:	4013      	ands	r3, r2
 8006126:	d138      	bne.n	800619a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2250      	movs	r2, #80	@ 0x50
 800612c:	5c9b      	ldrb	r3, [r3, r2]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_ADC_Start+0x2a>
 8006132:	2302      	movs	r3, #2
 8006134:	e038      	b.n	80061a8 <HAL_ADC_Start+0x9c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2250      	movs	r2, #80	@ 0x50
 800613a:	2101      	movs	r1, #1
 800613c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d007      	beq.n	8006156 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006146:	230f      	movs	r3, #15
 8006148:	18fc      	adds	r4, r7, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	0018      	movs	r0, r3
 800614e:	f000 f999 	bl	8006484 <ADC_Enable>
 8006152:	0003      	movs	r3, r0
 8006154:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006156:	230f      	movs	r3, #15
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d120      	bne.n	80061a2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006164:	4a12      	ldr	r2, [pc, #72]	@ (80061b0 <HAL_ADC_Start+0xa4>)
 8006166:	4013      	ands	r3, r2
 8006168:	2280      	movs	r2, #128	@ 0x80
 800616a:	0052      	lsls	r2, r2, #1
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	659a      	str	r2, [r3, #88]	@ 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2250      	movs	r2, #80	@ 0x50
 800617c:	2100      	movs	r1, #0
 800617e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	221c      	movs	r2, #28
 8006186:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2104      	movs	r1, #4
 8006194:	430a      	orrs	r2, r1
 8006196:	609a      	str	r2, [r3, #8]
 8006198:	e003      	b.n	80061a2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800619a:	230f      	movs	r3, #15
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	2202      	movs	r2, #2
 80061a0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80061a2:	230f      	movs	r3, #15
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	781b      	ldrb	r3, [r3, #0]
}
 80061a8:	0018      	movs	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b005      	add	sp, #20
 80061ae:	bd90      	pop	{r4, r7, pc}
 80061b0:	fffff0fe 	.word	0xfffff0fe

080061b4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80061b4:	b5b0      	push	{r4, r5, r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061bc:	230f      	movs	r3, #15
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2250      	movs	r2, #80	@ 0x50
 80061c8:	5c9b      	ldrb	r3, [r3, r2]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_ADC_Stop+0x1e>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e029      	b.n	8006226 <HAL_ADC_Stop+0x72>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2250      	movs	r2, #80	@ 0x50
 80061d6:	2101      	movs	r1, #1
 80061d8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80061da:	250f      	movs	r5, #15
 80061dc:	197c      	adds	r4, r7, r5
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 fa0f 	bl	8006604 <ADC_ConversionStop>
 80061e6:	0003      	movs	r3, r0
 80061e8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80061ea:	197b      	adds	r3, r7, r5
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d112      	bne.n	8006218 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80061f2:	197c      	adds	r4, r7, r5
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	0018      	movs	r0, r3
 80061f8:	f000 f9a4 	bl	8006544 <ADC_Disable>
 80061fc:	0003      	movs	r3, r0
 80061fe:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006200:	197b      	adds	r3, r7, r5
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d107      	bne.n	8006218 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620c:	4a08      	ldr	r2, [pc, #32]	@ (8006230 <HAL_ADC_Stop+0x7c>)
 800620e:	4013      	ands	r3, r2
 8006210:	2201      	movs	r2, #1
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2250      	movs	r2, #80	@ 0x50
 800621c:	2100      	movs	r1, #0
 800621e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006220:	230f      	movs	r3, #15
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	781b      	ldrb	r3, [r3, #0]
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bdb0      	pop	{r4, r5, r7, pc}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	fffffefe 	.word	0xfffffefe

08006234 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d102      	bne.n	8006254 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800624e:	2308      	movs	r3, #8
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e014      	b.n	800627e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	4013      	ands	r3, r2
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10b      	bne.n	800627a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006266:	2220      	movs	r2, #32
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2250      	movs	r2, #80	@ 0x50
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e06c      	b.n	8006354 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800627a:	230c      	movs	r3, #12
 800627c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800627e:	f7fe fb0c 	bl	800489a <HAL_GetTick>
 8006282:	0003      	movs	r3, r0
 8006284:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006286:	e019      	b.n	80062bc <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	d016      	beq.n	80062bc <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <HAL_ADC_PollForConversion+0x70>
 8006294:	f7fe fb01 	bl	800489a <HAL_GetTick>
 8006298:	0002      	movs	r2, r0
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d20b      	bcs.n	80062bc <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a8:	2204      	movs	r2, #4
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2250      	movs	r2, #80	@ 0x50
 80062b4:	2100      	movs	r1, #0
 80062b6:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e04b      	b.n	8006354 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4013      	ands	r3, r2
 80062c6:	d0df      	beq.n	8006288 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062cc:	2280      	movs	r2, #128	@ 0x80
 80062ce:	0092      	lsls	r2, r2, #2
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	23c0      	movs	r3, #192	@ 0xc0
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	4013      	ands	r3, r2
 80062e2:	d12e      	bne.n	8006342 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2220      	movs	r2, #32
 80062e8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d129      	bne.n	8006342 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2208      	movs	r2, #8
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d122      	bne.n	8006342 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2204      	movs	r2, #4
 8006304:	4013      	ands	r3, r2
 8006306:	d110      	bne.n	800632a <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	210c      	movs	r1, #12
 8006314:	438a      	bics	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631c:	4a0f      	ldr	r2, [pc, #60]	@ (800635c <HAL_ADC_PollForConversion+0x128>)
 800631e:	4013      	ands	r3, r2
 8006320:	2201      	movs	r2, #1
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54
 8006328:	e00b      	b.n	8006342 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632e:	2220      	movs	r2, #32
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633a:	2201      	movs	r2, #1
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	659a      	str	r2, [r3, #88]	@ 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	220c      	movs	r2, #12
 8006350:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b004      	add	sp, #16
 800635a:	bd80      	pop	{r7, pc}
 800635c:	fffffefe 	.word	0xfffffefe

08006360 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800636e:	0018      	movs	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	b002      	add	sp, #8
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2250      	movs	r2, #80	@ 0x50
 8006386:	5c9b      	ldrb	r3, [r3, r2]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x18>
 800638c:	2302      	movs	r3, #2
 800638e:	e06c      	b.n	800646a <HAL_ADC_ConfigChannel+0xf2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2250      	movs	r2, #80	@ 0x50
 8006394:	2101      	movs	r1, #1
 8006396:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2204      	movs	r2, #4
 80063a0:	4013      	ands	r3, r2
 80063a2:	d00b      	beq.n	80063bc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a8:	2220      	movs	r2, #32
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2250      	movs	r2, #80	@ 0x50
 80063b4:	2100      	movs	r1, #0
 80063b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e056      	b.n	800646a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006474 <HAL_ADC_ConfigChannel+0xfc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d028      	beq.n	8006418 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	035b      	lsls	r3, r3, #13
 80063d2:	0b5a      	lsrs	r2, r3, #13
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	2380      	movs	r3, #128	@ 0x80
 80063e2:	02db      	lsls	r3, r3, #11
 80063e4:	4013      	ands	r3, r2
 80063e6:	d009      	beq.n	80063fc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80063e8:	4b23      	ldr	r3, [pc, #140]	@ (8006478 <HAL_ADC_ConfigChannel+0x100>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	4b22      	ldr	r3, [pc, #136]	@ (8006478 <HAL_ADC_ConfigChannel+0x100>)
 80063ee:	2180      	movs	r1, #128	@ 0x80
 80063f0:	0409      	lsls	r1, r1, #16
 80063f2:	430a      	orrs	r2, r1
 80063f4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80063f6:	200a      	movs	r0, #10
 80063f8:	f000 f94a 	bl	8006690 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	2380      	movs	r3, #128	@ 0x80
 8006402:	029b      	lsls	r3, r3, #10
 8006404:	4013      	ands	r3, r2
 8006406:	d02b      	beq.n	8006460 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006408:	4b1b      	ldr	r3, [pc, #108]	@ (8006478 <HAL_ADC_ConfigChannel+0x100>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4b1a      	ldr	r3, [pc, #104]	@ (8006478 <HAL_ADC_ConfigChannel+0x100>)
 800640e:	2180      	movs	r1, #128	@ 0x80
 8006410:	03c9      	lsls	r1, r1, #15
 8006412:	430a      	orrs	r2, r1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e023      	b.n	8006460 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	035b      	lsls	r3, r3, #13
 8006424:	0b5b      	lsrs	r3, r3, #13
 8006426:	43d9      	mvns	r1, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	400a      	ands	r2, r1
 800642e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	2380      	movs	r3, #128	@ 0x80
 8006436:	02db      	lsls	r3, r3, #11
 8006438:	4013      	ands	r3, r2
 800643a:	d005      	beq.n	8006448 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800643c:	4b0e      	ldr	r3, [pc, #56]	@ (8006478 <HAL_ADC_ConfigChannel+0x100>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b0d      	ldr	r3, [pc, #52]	@ (8006478 <HAL_ADC_ConfigChannel+0x100>)
 8006442:	490e      	ldr	r1, [pc, #56]	@ (800647c <HAL_ADC_ConfigChannel+0x104>)
 8006444:	400a      	ands	r2, r1
 8006446:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	2380      	movs	r3, #128	@ 0x80
 800644e:	029b      	lsls	r3, r3, #10
 8006450:	4013      	ands	r3, r2
 8006452:	d005      	beq.n	8006460 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006454:	4b08      	ldr	r3, [pc, #32]	@ (8006478 <HAL_ADC_ConfigChannel+0x100>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b07      	ldr	r3, [pc, #28]	@ (8006478 <HAL_ADC_ConfigChannel+0x100>)
 800645a:	4909      	ldr	r1, [pc, #36]	@ (8006480 <HAL_ADC_ConfigChannel+0x108>)
 800645c:	400a      	ands	r2, r1
 800645e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2250      	movs	r2, #80	@ 0x50
 8006464:	2100      	movs	r1, #0
 8006466:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	0018      	movs	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	b002      	add	sp, #8
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	00001001 	.word	0x00001001
 8006478:	40012708 	.word	0x40012708
 800647c:	ff7fffff 	.word	0xff7fffff
 8006480:	ffbfffff 	.word	0xffbfffff

08006484 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2203      	movs	r2, #3
 8006498:	4013      	ands	r3, r2
 800649a:	2b01      	cmp	r3, #1
 800649c:	d108      	bne.n	80064b0 <ADC_Enable+0x2c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <ADC_Enable+0x2c>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <ADC_Enable+0x2e>
 80064b0:	2300      	movs	r3, #0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d13f      	bne.n	8006536 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a20      	ldr	r2, [pc, #128]	@ (8006540 <ADC_Enable+0xbc>)
 80064be:	4013      	ands	r3, r2
 80064c0:	d00d      	beq.n	80064de <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c6:	2210      	movs	r2, #16
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d2:	2201      	movs	r2, #1
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	659a      	str	r2, [r3, #88]	@ 0x58
      
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e02c      	b.n	8006538 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2101      	movs	r1, #1
 80064ea:	430a      	orrs	r2, r1
 80064ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80064ee:	2001      	movs	r0, #1
 80064f0:	f000 f8ce 	bl	8006690 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80064f4:	f7fe f9d1 	bl	800489a <HAL_GetTick>
 80064f8:	0003      	movs	r3, r0
 80064fa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80064fc:	e014      	b.n	8006528 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064fe:	f7fe f9cc 	bl	800489a <HAL_GetTick>
 8006502:	0002      	movs	r2, r0
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b0a      	cmp	r3, #10
 800650a:	d90d      	bls.n	8006528 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006510:	2210      	movs	r2, #16
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651c:	2201      	movs	r2, #1
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e007      	b.n	8006538 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2201      	movs	r2, #1
 8006530:	4013      	ands	r3, r2
 8006532:	2b01      	cmp	r3, #1
 8006534:	d1e3      	bne.n	80064fe <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b004      	add	sp, #16
 800653e:	bd80      	pop	{r7, pc}
 8006540:	80000017 	.word	0x80000017

08006544 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2203      	movs	r2, #3
 8006558:	4013      	ands	r3, r2
 800655a:	2b01      	cmp	r3, #1
 800655c:	d108      	bne.n	8006570 <ADC_Disable+0x2c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2201      	movs	r2, #1
 8006566:	4013      	ands	r3, r2
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <ADC_Disable+0x2c>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <ADC_Disable+0x2e>
 8006570:	2300      	movs	r3, #0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d041      	beq.n	80065fa <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2205      	movs	r2, #5
 800657e:	4013      	ands	r3, r2
 8006580:	2b01      	cmp	r3, #1
 8006582:	d110      	bne.n	80065a6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2102      	movs	r1, #2
 8006590:	430a      	orrs	r2, r1
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2203      	movs	r2, #3
 800659a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800659c:	f7fe f97d 	bl	800489a <HAL_GetTick>
 80065a0:	0003      	movs	r3, r0
 80065a2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80065a4:	e022      	b.n	80065ec <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	2210      	movs	r2, #16
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	2201      	movs	r2, #1
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e01c      	b.n	80065fc <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80065c2:	f7fe f96a 	bl	800489a <HAL_GetTick>
 80065c6:	0002      	movs	r2, r0
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b0a      	cmp	r3, #10
 80065ce:	d90d      	bls.n	80065ec <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d4:	2210      	movs	r2, #16
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e0:	2201      	movs	r2, #1
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e007      	b.n	80065fc <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2201      	movs	r2, #1
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d0e3      	beq.n	80065c2 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	0018      	movs	r0, r3
 80065fe:	46bd      	mov	sp, r7
 8006600:	b004      	add	sp, #16
 8006602:	bd80      	pop	{r7, pc}

08006604 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	2204      	movs	r2, #4
 8006618:	4013      	ands	r3, r2
 800661a:	d034      	beq.n	8006686 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2204      	movs	r2, #4
 8006624:	4013      	ands	r3, r2
 8006626:	2b04      	cmp	r3, #4
 8006628:	d10d      	bne.n	8006646 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2202      	movs	r2, #2
 8006632:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006634:	d107      	bne.n	8006646 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2110      	movs	r1, #16
 8006642:	430a      	orrs	r2, r1
 8006644:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006646:	f7fe f928 	bl	800489a <HAL_GetTick>
 800664a:	0003      	movs	r3, r0
 800664c:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800664e:	e014      	b.n	800667a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006650:	f7fe f923 	bl	800489a <HAL_GetTick>
 8006654:	0002      	movs	r2, r0
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b0a      	cmp	r3, #10
 800665c:	d90d      	bls.n	800667a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006662:	2210      	movs	r2, #16
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	655a      	str	r2, [r3, #84]	@ 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666e:	2201      	movs	r2, #1
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e006      	b.n	8006688 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2204      	movs	r2, #4
 8006682:	4013      	ands	r3, r2
 8006684:	d1e4      	bne.n	8006650 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	0018      	movs	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	b004      	add	sp, #16
 800668e:	bd80      	pop	{r7, pc}

08006690 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006698:	4b0b      	ldr	r3, [pc, #44]	@ (80066c8 <ADC_DelayMicroSecond+0x38>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	490b      	ldr	r1, [pc, #44]	@ (80066cc <ADC_DelayMicroSecond+0x3c>)
 800669e:	0018      	movs	r0, r3
 80066a0:	f7f9 fd3a 	bl	8000118 <__udivsi3>
 80066a4:	0003      	movs	r3, r0
 80066a6:	001a      	movs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4353      	muls	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80066ae:	e002      	b.n	80066b6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f9      	bne.n	80066b0 <ADC_DelayMicroSecond+0x20>
  } 
}
 80066bc:	46c0      	nop			@ (mov r8, r8)
 80066be:	46c0      	nop			@ (mov r8, r8)
 80066c0:	46bd      	mov	sp, r7
 80066c2:	b004      	add	sp, #16
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	20000070 	.word	0x20000070
 80066cc:	000f4240 	.word	0x000f4240

080066d0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066da:	2317      	movs	r3, #23
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2250      	movs	r2, #80	@ 0x50
 80066ee:	5c9b      	ldrb	r3, [r3, r2]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_ADCEx_Calibration_Start+0x28>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e07a      	b.n	80067ee <HAL_ADCEx_Calibration_Start+0x11e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2250      	movs	r2, #80	@ 0x50
 80066fc:	2101      	movs	r1, #1
 80066fe:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2203      	movs	r2, #3
 8006708:	4013      	ands	r3, r2
 800670a:	2b01      	cmp	r3, #1
 800670c:	d108      	bne.n	8006720 <HAL_ADCEx_Calibration_Start+0x50>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2201      	movs	r2, #1
 8006716:	4013      	ands	r3, r2
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_ADCEx_Calibration_Start+0x50>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <HAL_ADCEx_Calibration_Start+0x52>
 8006720:	2300      	movs	r3, #0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d152      	bne.n	80067cc <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672a:	4a33      	ldr	r2, [pc, #204]	@ (80067f8 <HAL_ADCEx_Calibration_Start+0x128>)
 800672c:	4013      	ands	r3, r2
 800672e:	2202      	movs	r2, #2
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2203      	movs	r2, #3
 800673e:	4013      	ands	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2103      	movs	r1, #3
 800674e:	438a      	bics	r2, r1
 8006750:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2180      	movs	r1, #128	@ 0x80
 800675e:	0609      	lsls	r1, r1, #24
 8006760:	430a      	orrs	r2, r1
 8006762:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006764:	f7fe f899 	bl	800489a <HAL_GetTick>
 8006768:	0003      	movs	r3, r0
 800676a:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800676c:	e014      	b.n	8006798 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800676e:	f7fe f894 	bl	800489a <HAL_GetTick>
 8006772:	0002      	movs	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b0a      	cmp	r3, #10
 800677a:	d90d      	bls.n	8006798 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006780:	2212      	movs	r2, #18
 8006782:	4393      	bics	r3, r2
 8006784:	2210      	movs	r2, #16
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2250      	movs	r2, #80	@ 0x50
 8006790:	2100      	movs	r1, #0
 8006792:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e02a      	b.n	80067ee <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	0fdb      	lsrs	r3, r3, #31
 80067a0:	07da      	lsls	r2, r3, #31
 80067a2:	2380      	movs	r3, #128	@ 0x80
 80067a4:	061b      	lsls	r3, r3, #24
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d0e1      	beq.n	800676e <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68d9      	ldr	r1, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067be:	2203      	movs	r2, #3
 80067c0:	4393      	bics	r3, r2
 80067c2:	2201      	movs	r2, #1
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80067ca:	e009      	b.n	80067e0 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d0:	2220      	movs	r2, #32
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    tmp_hal_status = HAL_ERROR;
 80067d8:	2317      	movs	r3, #23
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2250      	movs	r2, #80	@ 0x50
 80067e4:	2100      	movs	r1, #0
 80067e6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80067e8:	2317      	movs	r3, #23
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	781b      	ldrb	r3, [r3, #0]
}
 80067ee:	0018      	movs	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b006      	add	sp, #24
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	fffffefd 	.word	0xfffffefd

080067fc <__NVIC_EnableIRQ>:
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	0002      	movs	r2, r0
 8006804:	1dfb      	adds	r3, r7, #7
 8006806:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006808:	1dfb      	adds	r3, r7, #7
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b7f      	cmp	r3, #127	@ 0x7f
 800680e:	d809      	bhi.n	8006824 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006810:	1dfb      	adds	r3, r7, #7
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	001a      	movs	r2, r3
 8006816:	231f      	movs	r3, #31
 8006818:	401a      	ands	r2, r3
 800681a:	4b04      	ldr	r3, [pc, #16]	@ (800682c <__NVIC_EnableIRQ+0x30>)
 800681c:	2101      	movs	r1, #1
 800681e:	4091      	lsls	r1, r2
 8006820:	000a      	movs	r2, r1
 8006822:	601a      	str	r2, [r3, #0]
}
 8006824:	46c0      	nop			@ (mov r8, r8)
 8006826:	46bd      	mov	sp, r7
 8006828:	b002      	add	sp, #8
 800682a:	bd80      	pop	{r7, pc}
 800682c:	e000e100 	.word	0xe000e100

08006830 <__NVIC_DisableIRQ>:
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	0002      	movs	r2, r0
 8006838:	1dfb      	adds	r3, r7, #7
 800683a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800683c:	1dfb      	adds	r3, r7, #7
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b7f      	cmp	r3, #127	@ 0x7f
 8006842:	d810      	bhi.n	8006866 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006844:	1dfb      	adds	r3, r7, #7
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	001a      	movs	r2, r3
 800684a:	231f      	movs	r3, #31
 800684c:	4013      	ands	r3, r2
 800684e:	4908      	ldr	r1, [pc, #32]	@ (8006870 <__NVIC_DisableIRQ+0x40>)
 8006850:	2201      	movs	r2, #1
 8006852:	409a      	lsls	r2, r3
 8006854:	0013      	movs	r3, r2
 8006856:	2280      	movs	r2, #128	@ 0x80
 8006858:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800685a:	f3bf 8f4f 	dsb	sy
}
 800685e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006860:	f3bf 8f6f 	isb	sy
}
 8006864:	46c0      	nop			@ (mov r8, r8)
}
 8006866:	46c0      	nop			@ (mov r8, r8)
 8006868:	46bd      	mov	sp, r7
 800686a:	b002      	add	sp, #8
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	e000e100 	.word	0xe000e100

08006874 <__NVIC_SetPriority>:
{
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	0002      	movs	r2, r0
 800687c:	6039      	str	r1, [r7, #0]
 800687e:	1dfb      	adds	r3, r7, #7
 8006880:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006882:	1dfb      	adds	r3, r7, #7
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b7f      	cmp	r3, #127	@ 0x7f
 8006888:	d828      	bhi.n	80068dc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800688a:	4a2f      	ldr	r2, [pc, #188]	@ (8006948 <__NVIC_SetPriority+0xd4>)
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b25b      	sxtb	r3, r3
 8006892:	089b      	lsrs	r3, r3, #2
 8006894:	33c0      	adds	r3, #192	@ 0xc0
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	589b      	ldr	r3, [r3, r2]
 800689a:	1dfa      	adds	r2, r7, #7
 800689c:	7812      	ldrb	r2, [r2, #0]
 800689e:	0011      	movs	r1, r2
 80068a0:	2203      	movs	r2, #3
 80068a2:	400a      	ands	r2, r1
 80068a4:	00d2      	lsls	r2, r2, #3
 80068a6:	21ff      	movs	r1, #255	@ 0xff
 80068a8:	4091      	lsls	r1, r2
 80068aa:	000a      	movs	r2, r1
 80068ac:	43d2      	mvns	r2, r2
 80068ae:	401a      	ands	r2, r3
 80068b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	22ff      	movs	r2, #255	@ 0xff
 80068b8:	401a      	ands	r2, r3
 80068ba:	1dfb      	adds	r3, r7, #7
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	0018      	movs	r0, r3
 80068c0:	2303      	movs	r3, #3
 80068c2:	4003      	ands	r3, r0
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068c8:	481f      	ldr	r0, [pc, #124]	@ (8006948 <__NVIC_SetPriority+0xd4>)
 80068ca:	1dfb      	adds	r3, r7, #7
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	b25b      	sxtb	r3, r3
 80068d0:	089b      	lsrs	r3, r3, #2
 80068d2:	430a      	orrs	r2, r1
 80068d4:	33c0      	adds	r3, #192	@ 0xc0
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	501a      	str	r2, [r3, r0]
}
 80068da:	e031      	b.n	8006940 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068dc:	4a1b      	ldr	r2, [pc, #108]	@ (800694c <__NVIC_SetPriority+0xd8>)
 80068de:	1dfb      	adds	r3, r7, #7
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	0019      	movs	r1, r3
 80068e4:	230f      	movs	r3, #15
 80068e6:	400b      	ands	r3, r1
 80068e8:	3b08      	subs	r3, #8
 80068ea:	089b      	lsrs	r3, r3, #2
 80068ec:	3306      	adds	r3, #6
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	18d3      	adds	r3, r2, r3
 80068f2:	3304      	adds	r3, #4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	1dfa      	adds	r2, r7, #7
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	0011      	movs	r1, r2
 80068fc:	2203      	movs	r2, #3
 80068fe:	400a      	ands	r2, r1
 8006900:	00d2      	lsls	r2, r2, #3
 8006902:	21ff      	movs	r1, #255	@ 0xff
 8006904:	4091      	lsls	r1, r2
 8006906:	000a      	movs	r2, r1
 8006908:	43d2      	mvns	r2, r2
 800690a:	401a      	ands	r2, r3
 800690c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	019b      	lsls	r3, r3, #6
 8006912:	22ff      	movs	r2, #255	@ 0xff
 8006914:	401a      	ands	r2, r3
 8006916:	1dfb      	adds	r3, r7, #7
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	0018      	movs	r0, r3
 800691c:	2303      	movs	r3, #3
 800691e:	4003      	ands	r3, r0
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006924:	4809      	ldr	r0, [pc, #36]	@ (800694c <__NVIC_SetPriority+0xd8>)
 8006926:	1dfb      	adds	r3, r7, #7
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	001c      	movs	r4, r3
 800692c:	230f      	movs	r3, #15
 800692e:	4023      	ands	r3, r4
 8006930:	3b08      	subs	r3, #8
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	430a      	orrs	r2, r1
 8006936:	3306      	adds	r3, #6
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	18c3      	adds	r3, r0, r3
 800693c:	3304      	adds	r3, #4
 800693e:	601a      	str	r2, [r3, #0]
}
 8006940:	46c0      	nop			@ (mov r8, r8)
 8006942:	46bd      	mov	sp, r7
 8006944:	b003      	add	sp, #12
 8006946:	bd90      	pop	{r4, r7, pc}
 8006948:	e000e100 	.word	0xe000e100
 800694c:	e000ed00 	.word	0xe000ed00

08006950 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	210f      	movs	r1, #15
 800695c:	187b      	adds	r3, r7, r1
 800695e:	1c02      	adds	r2, r0, #0
 8006960:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	187b      	adds	r3, r7, r1
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	b25b      	sxtb	r3, r3
 800696a:	0011      	movs	r1, r2
 800696c:	0018      	movs	r0, r3
 800696e:	f7ff ff81 	bl	8006874 <__NVIC_SetPriority>
}
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	46bd      	mov	sp, r7
 8006976:	b004      	add	sp, #16
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b082      	sub	sp, #8
 800697e:	af00      	add	r7, sp, #0
 8006980:	0002      	movs	r2, r0
 8006982:	1dfb      	adds	r3, r7, #7
 8006984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006986:	1dfb      	adds	r3, r7, #7
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b25b      	sxtb	r3, r3
 800698c:	0018      	movs	r0, r3
 800698e:	f7ff ff35 	bl	80067fc <__NVIC_EnableIRQ>
}
 8006992:	46c0      	nop			@ (mov r8, r8)
 8006994:	46bd      	mov	sp, r7
 8006996:	b002      	add	sp, #8
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	0002      	movs	r2, r0
 80069a2:	1dfb      	adds	r3, r7, #7
 80069a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80069a6:	1dfb      	adds	r3, r7, #7
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b25b      	sxtb	r3, r3
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7ff ff3f 	bl	8006830 <__NVIC_DisableIRQ>
}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b002      	add	sp, #8
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e061      	b.n	8006a92 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a32      	ldr	r2, [pc, #200]	@ (8006a9c <HAL_DMA_Init+0xe0>)
 80069d4:	4694      	mov	ip, r2
 80069d6:	4463      	add	r3, ip
 80069d8:	2114      	movs	r1, #20
 80069da:	0018      	movs	r0, r3
 80069dc:	f7f9 fb9c 	bl	8000118 <__udivsi3>
 80069e0:	0003      	movs	r3, r0
 80069e2:	009a      	lsls	r2, r3, #2
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a2d      	ldr	r2, [pc, #180]	@ (8006aa0 <HAL_DMA_Init+0xe4>)
 80069ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2225      	movs	r2, #37	@ 0x25
 80069f2:	2102      	movs	r1, #2
 80069f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a28      	ldr	r2, [pc, #160]	@ (8006aa4 <HAL_DMA_Init+0xe8>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	01db      	lsls	r3, r3, #7
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d018      	beq.n	8006a7a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006a48:	4b17      	ldr	r3, [pc, #92]	@ (8006aa8 <HAL_DMA_Init+0xec>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a50:	211c      	movs	r1, #28
 8006a52:	400b      	ands	r3, r1
 8006a54:	210f      	movs	r1, #15
 8006a56:	4099      	lsls	r1, r3
 8006a58:	000b      	movs	r3, r1
 8006a5a:	43d9      	mvns	r1, r3
 8006a5c:	4b12      	ldr	r3, [pc, #72]	@ (8006aa8 <HAL_DMA_Init+0xec>)
 8006a5e:	400a      	ands	r2, r1
 8006a60:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006a62:	4b11      	ldr	r3, [pc, #68]	@ (8006aa8 <HAL_DMA_Init+0xec>)
 8006a64:	6819      	ldr	r1, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	201c      	movs	r0, #28
 8006a70:	4003      	ands	r3, r0
 8006a72:	409a      	lsls	r2, r3
 8006a74:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa8 <HAL_DMA_Init+0xec>)
 8006a76:	430a      	orrs	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2225      	movs	r2, #37	@ 0x25
 8006a84:	2101      	movs	r1, #1
 8006a86:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2224      	movs	r2, #36	@ 0x24
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	0018      	movs	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b004      	add	sp, #16
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	bffdfff8 	.word	0xbffdfff8
 8006aa0:	40020000 	.word	0x40020000
 8006aa4:	ffff800f 	.word	0xffff800f
 8006aa8:	400200a8 	.word	0x400200a8

08006aac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e04a      	b.n	8006b54 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2101      	movs	r1, #1
 8006aca:	438a      	bics	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a22      	ldr	r2, [pc, #136]	@ (8006b5c <HAL_DMA_DeInit+0xb0>)
 8006ad4:	4694      	mov	ip, r2
 8006ad6:	4463      	add	r3, ip
 8006ad8:	2114      	movs	r1, #20
 8006ada:	0018      	movs	r0, r3
 8006adc:	f7f9 fb1c 	bl	8000118 <__udivsi3>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	009a      	lsls	r2, r3, #2
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a1d      	ldr	r2, [pc, #116]	@ (8006b60 <HAL_DMA_DeInit+0xb4>)
 8006aec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afa:	221c      	movs	r2, #28
 8006afc:	401a      	ands	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b02:	2101      	movs	r1, #1
 8006b04:	4091      	lsls	r1, r2
 8006b06:	000a      	movs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006b0a:	4b16      	ldr	r3, [pc, #88]	@ (8006b64 <HAL_DMA_DeInit+0xb8>)
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b12:	211c      	movs	r1, #28
 8006b14:	400b      	ands	r3, r1
 8006b16:	210f      	movs	r1, #15
 8006b18:	4099      	lsls	r1, r3
 8006b1a:	000b      	movs	r3, r1
 8006b1c:	43d9      	mvns	r1, r3
 8006b1e:	4b11      	ldr	r3, [pc, #68]	@ (8006b64 <HAL_DMA_DeInit+0xb8>)
 8006b20:	400a      	ands	r2, r1
 8006b22:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2225      	movs	r2, #37	@ 0x25
 8006b46:	2100      	movs	r1, #0
 8006b48:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2224      	movs	r2, #36	@ 0x24
 8006b4e:	2100      	movs	r1, #0
 8006b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	0018      	movs	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	bffdfff8 	.word	0xbffdfff8
 8006b60:	40020000 	.word	0x40020000
 8006b64:	400200a8 	.word	0x400200a8

08006b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b76:	2317      	movs	r3, #23
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2224      	movs	r2, #36	@ 0x24
 8006b82:	5c9b      	ldrb	r3, [r3, r2]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_DMA_Start_IT+0x24>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e04f      	b.n	8006c2c <HAL_DMA_Start_IT+0xc4>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2224      	movs	r2, #36	@ 0x24
 8006b90:	2101      	movs	r1, #1
 8006b92:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2225      	movs	r2, #37	@ 0x25
 8006b98:	5c9b      	ldrb	r3, [r3, r2]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d13a      	bne.n	8006c16 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2225      	movs	r2, #37	@ 0x25
 8006ba4:	2102      	movs	r1, #2
 8006ba6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2101      	movs	r1, #1
 8006bba:	438a      	bics	r2, r1
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f96a 	bl	8006e9e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	210e      	movs	r1, #14
 8006bde:	430a      	orrs	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e00f      	b.n	8006c04 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2104      	movs	r1, #4
 8006bf0:	438a      	bics	r2, r1
 8006bf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	210a      	movs	r1, #10
 8006c00:	430a      	orrs	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2101      	movs	r1, #1
 8006c10:	430a      	orrs	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e007      	b.n	8006c26 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2224      	movs	r2, #36	@ 0x24
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006c1e:	2317      	movs	r3, #23
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	2202      	movs	r2, #2
 8006c24:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006c26:	2317      	movs	r3, #23
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	781b      	ldrb	r3, [r3, #0]
}
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b006      	add	sp, #24
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c3c:	230f      	movs	r3, #15
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2225      	movs	r2, #37	@ 0x25
 8006c48:	5c9b      	ldrb	r3, [r3, r2]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d008      	beq.n	8006c62 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2204      	movs	r2, #4
 8006c54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2224      	movs	r2, #36	@ 0x24
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e024      	b.n	8006cac <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	210e      	movs	r1, #14
 8006c6e:	438a      	bics	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	438a      	bics	r2, r1
 8006c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c86:	221c      	movs	r2, #28
 8006c88:	401a      	ands	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4091      	lsls	r1, r2
 8006c92:	000a      	movs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2225      	movs	r2, #37	@ 0x25
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2224      	movs	r2, #36	@ 0x24
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	5499      	strb	r1, [r3, r2]

    return status;
 8006ca6:	230f      	movs	r3, #15
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b004      	add	sp, #16
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cbc:	210f      	movs	r1, #15
 8006cbe:	187b      	adds	r3, r7, r1
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2225      	movs	r2, #37	@ 0x25
 8006cc8:	5c9b      	ldrb	r3, [r3, r2]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d006      	beq.n	8006cde <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006cd6:	187b      	adds	r3, r7, r1
 8006cd8:	2201      	movs	r2, #1
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	e02a      	b.n	8006d34 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	210e      	movs	r1, #14
 8006cea:	438a      	bics	r2, r1
 8006cec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	438a      	bics	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d02:	221c      	movs	r2, #28
 8006d04:	401a      	ands	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	4091      	lsls	r1, r2
 8006d0e:	000a      	movs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2225      	movs	r2, #37	@ 0x25
 8006d16:	2101      	movs	r1, #1
 8006d18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2224      	movs	r2, #36	@ 0x24
 8006d1e:	2100      	movs	r1, #0
 8006d20:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	0010      	movs	r0, r2
 8006d32:	4798      	blx	r3
    }
  }
  return status;
 8006d34:	230f      	movs	r3, #15
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	781b      	ldrb	r3, [r3, #0]
}
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	b004      	add	sp, #16
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5e:	221c      	movs	r2, #28
 8006d60:	4013      	ands	r3, r2
 8006d62:	2204      	movs	r2, #4
 8006d64:	409a      	lsls	r2, r3
 8006d66:	0013      	movs	r3, r2
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d026      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x7a>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2204      	movs	r2, #4
 8006d72:	4013      	ands	r3, r2
 8006d74:	d022      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d107      	bne.n	8006d92 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2104      	movs	r1, #4
 8006d8e:	438a      	bics	r2, r1
 8006d90:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d96:	221c      	movs	r2, #28
 8006d98:	401a      	ands	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	2104      	movs	r1, #4
 8006da0:	4091      	lsls	r1, r2
 8006da2:	000a      	movs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d100      	bne.n	8006db0 <HAL_DMA_IRQHandler+0x6e>
 8006dae:	e071      	b.n	8006e94 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	0010      	movs	r0, r2
 8006db8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8006dba:	e06b      	b.n	8006e94 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc0:	221c      	movs	r2, #28
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	0013      	movs	r3, r2
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d02d      	beq.n	8006e2c <HAL_DMA_IRQHandler+0xea>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d029      	beq.n	8006e2c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2220      	movs	r2, #32
 8006de0:	4013      	ands	r3, r2
 8006de2:	d10b      	bne.n	8006dfc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	210a      	movs	r1, #10
 8006df0:	438a      	bics	r2, r1
 8006df2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2225      	movs	r2, #37	@ 0x25
 8006df8:	2101      	movs	r1, #1
 8006dfa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e00:	221c      	movs	r2, #28
 8006e02:	401a      	ands	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e08:	2102      	movs	r1, #2
 8006e0a:	4091      	lsls	r1, r2
 8006e0c:	000a      	movs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2224      	movs	r2, #36	@ 0x24
 8006e14:	2100      	movs	r1, #0
 8006e16:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d039      	beq.n	8006e94 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	0010      	movs	r0, r2
 8006e28:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006e2a:	e033      	b.n	8006e94 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e30:	221c      	movs	r2, #28
 8006e32:	4013      	ands	r3, r2
 8006e34:	2208      	movs	r2, #8
 8006e36:	409a      	lsls	r2, r3
 8006e38:	0013      	movs	r3, r2
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	d02a      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x154>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2208      	movs	r2, #8
 8006e44:	4013      	ands	r3, r2
 8006e46:	d026      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	210e      	movs	r1, #14
 8006e54:	438a      	bics	r2, r1
 8006e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5c:	221c      	movs	r2, #28
 8006e5e:	401a      	ands	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e64:	2101      	movs	r1, #1
 8006e66:	4091      	lsls	r1, r2
 8006e68:	000a      	movs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2225      	movs	r2, #37	@ 0x25
 8006e76:	2101      	movs	r1, #1
 8006e78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2224      	movs	r2, #36	@ 0x24
 8006e7e:	2100      	movs	r1, #0
 8006e80:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	0010      	movs	r0, r2
 8006e92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e94:	46c0      	nop			@ (mov r8, r8)
 8006e96:	46c0      	nop			@ (mov r8, r8)
}
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	b004      	add	sp, #16
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb0:	221c      	movs	r2, #28
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4091      	lsls	r1, r2
 8006ebc:	000a      	movs	r2, r1
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d108      	bne.n	8006ee2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ee0:	e007      	b.n	8006ef2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	60da      	str	r2, [r3, #12]
}
 8006ef2:	46c0      	nop			@ (mov r8, r8)
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b004      	add	sp, #16
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	200b      	movs	r0, #11
 8006f06:	183b      	adds	r3, r7, r0
 8006f08:	1c0a      	adds	r2, r1, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0c:	2317      	movs	r3, #23
 8006f0e:	18fb      	adds	r3, r7, r3
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8006f14:	183b      	adds	r3, r7, r0
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d103      	bne.n	8006f24 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	605a      	str	r2, [r3, #4]
      break;
 8006f22:	e004      	b.n	8006f2e <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 8006f24:	2317      	movs	r3, #23
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	2201      	movs	r2, #1
 8006f2a:	701a      	strb	r2, [r3, #0]
      break;
 8006f2c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8006f2e:	2317      	movs	r3, #23
 8006f30:	18fb      	adds	r3, r7, r3
 8006f32:	781b      	ldrb	r3, [r3, #0]
}
 8006f34:	0018      	movs	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b006      	add	sp, #24
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e003      	b.n	8006f58 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006f56:	2300      	movs	r3, #0
  }
}
 8006f58:	0018      	movs	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b002      	add	sp, #8
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	221f      	movs	r2, #31
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2201      	movs	r2, #1
 8006f72:	409a      	lsls	r2, r3
 8006f74:	0013      	movs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8006f78:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa4 <HAL_EXTI_IRQHandler+0x44>)
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d009      	beq.n	8006f9c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8006f88:	4b06      	ldr	r3, [pc, #24]	@ (8006fa4 <HAL_EXTI_IRQHandler+0x44>)
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	4798      	blx	r3
    }
  }
}
 8006f9c:	46c0      	nop			@ (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b004      	add	sp, #16
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40010400 	.word	0x40010400

08006fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006fbe:	e155      	b.n	800726c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4091      	lsls	r1, r2
 8006fca:	000a      	movs	r2, r1
 8006fcc:	4013      	ands	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d100      	bne.n	8006fd8 <HAL_GPIO_Init+0x30>
 8006fd6:	e146      	b.n	8007266 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d00b      	beq.n	8006ff8 <HAL_GPIO_Init+0x50>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d007      	beq.n	8006ff8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fec:	2b11      	cmp	r3, #17
 8006fee:	d003      	beq.n	8006ff8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b12      	cmp	r3, #18
 8006ff6:	d130      	bne.n	800705a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	2203      	movs	r2, #3
 8007004:	409a      	lsls	r2, r3
 8007006:	0013      	movs	r3, r2
 8007008:	43da      	mvns	r2, r3
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4013      	ands	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	409a      	lsls	r2, r3
 800701a:	0013      	movs	r3, r2
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800702e:	2201      	movs	r2, #1
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	409a      	lsls	r2, r3
 8007034:	0013      	movs	r3, r2
 8007036:	43da      	mvns	r2, r3
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	4013      	ands	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	091b      	lsrs	r3, r3, #4
 8007044:	2201      	movs	r2, #1
 8007046:	401a      	ands	r2, r3
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	409a      	lsls	r2, r3
 800704c:	0013      	movs	r3, r2
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	4313      	orrs	r3, r2
 8007052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	2203      	movs	r2, #3
 8007066:	409a      	lsls	r2, r3
 8007068:	0013      	movs	r3, r2
 800706a:	43da      	mvns	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	409a      	lsls	r2, r3
 800707c:	0013      	movs	r3, r2
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d003      	beq.n	800709a <HAL_GPIO_Init+0xf2>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b12      	cmp	r3, #18
 8007098:	d123      	bne.n	80070e2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	08da      	lsrs	r2, r3, #3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	3208      	adds	r2, #8
 80070a2:	0092      	lsls	r2, r2, #2
 80070a4:	58d3      	ldr	r3, [r2, r3]
 80070a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2207      	movs	r2, #7
 80070ac:	4013      	ands	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	220f      	movs	r2, #15
 80070b2:	409a      	lsls	r2, r3
 80070b4:	0013      	movs	r3, r2
 80070b6:	43da      	mvns	r2, r3
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4013      	ands	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691a      	ldr	r2, [r3, #16]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2107      	movs	r1, #7
 80070c6:	400b      	ands	r3, r1
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	409a      	lsls	r2, r3
 80070cc:	0013      	movs	r3, r2
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	08da      	lsrs	r2, r3, #3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3208      	adds	r2, #8
 80070dc:	0092      	lsls	r2, r2, #2
 80070de:	6939      	ldr	r1, [r7, #16]
 80070e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	2203      	movs	r2, #3
 80070ee:	409a      	lsls	r2, r3
 80070f0:	0013      	movs	r3, r2
 80070f2:	43da      	mvns	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	4013      	ands	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2203      	movs	r2, #3
 8007100:	401a      	ands	r2, r3
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	409a      	lsls	r2, r3
 8007108:	0013      	movs	r3, r2
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	2380      	movs	r3, #128	@ 0x80
 800711c:	055b      	lsls	r3, r3, #21
 800711e:	4013      	ands	r3, r2
 8007120:	d100      	bne.n	8007124 <HAL_GPIO_Init+0x17c>
 8007122:	e0a0      	b.n	8007266 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007124:	4b57      	ldr	r3, [pc, #348]	@ (8007284 <HAL_GPIO_Init+0x2dc>)
 8007126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007128:	4b56      	ldr	r3, [pc, #344]	@ (8007284 <HAL_GPIO_Init+0x2dc>)
 800712a:	2101      	movs	r1, #1
 800712c:	430a      	orrs	r2, r1
 800712e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007130:	4a55      	ldr	r2, [pc, #340]	@ (8007288 <HAL_GPIO_Init+0x2e0>)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	089b      	lsrs	r3, r3, #2
 8007136:	3302      	adds	r3, #2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	589b      	ldr	r3, [r3, r2]
 800713c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2203      	movs	r2, #3
 8007142:	4013      	ands	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	220f      	movs	r2, #15
 8007148:	409a      	lsls	r2, r3
 800714a:	0013      	movs	r3, r2
 800714c:	43da      	mvns	r2, r3
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4013      	ands	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	23a0      	movs	r3, #160	@ 0xa0
 8007158:	05db      	lsls	r3, r3, #23
 800715a:	429a      	cmp	r2, r3
 800715c:	d01f      	beq.n	800719e <HAL_GPIO_Init+0x1f6>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a4a      	ldr	r2, [pc, #296]	@ (800728c <HAL_GPIO_Init+0x2e4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d019      	beq.n	800719a <HAL_GPIO_Init+0x1f2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a49      	ldr	r2, [pc, #292]	@ (8007290 <HAL_GPIO_Init+0x2e8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <HAL_GPIO_Init+0x1ee>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a48      	ldr	r2, [pc, #288]	@ (8007294 <HAL_GPIO_Init+0x2ec>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00d      	beq.n	8007192 <HAL_GPIO_Init+0x1ea>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a47      	ldr	r2, [pc, #284]	@ (8007298 <HAL_GPIO_Init+0x2f0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <HAL_GPIO_Init+0x1e6>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a46      	ldr	r2, [pc, #280]	@ (800729c <HAL_GPIO_Init+0x2f4>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d101      	bne.n	800718a <HAL_GPIO_Init+0x1e2>
 8007186:	2305      	movs	r3, #5
 8007188:	e00a      	b.n	80071a0 <HAL_GPIO_Init+0x1f8>
 800718a:	2306      	movs	r3, #6
 800718c:	e008      	b.n	80071a0 <HAL_GPIO_Init+0x1f8>
 800718e:	2304      	movs	r3, #4
 8007190:	e006      	b.n	80071a0 <HAL_GPIO_Init+0x1f8>
 8007192:	2303      	movs	r3, #3
 8007194:	e004      	b.n	80071a0 <HAL_GPIO_Init+0x1f8>
 8007196:	2302      	movs	r3, #2
 8007198:	e002      	b.n	80071a0 <HAL_GPIO_Init+0x1f8>
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <HAL_GPIO_Init+0x1f8>
 800719e:	2300      	movs	r3, #0
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	2103      	movs	r1, #3
 80071a4:	400a      	ands	r2, r1
 80071a6:	0092      	lsls	r2, r2, #2
 80071a8:	4093      	lsls	r3, r2
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071b0:	4935      	ldr	r1, [pc, #212]	@ (8007288 <HAL_GPIO_Init+0x2e0>)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	089b      	lsrs	r3, r3, #2
 80071b6:	3302      	adds	r3, #2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071be:	4b38      	ldr	r3, [pc, #224]	@ (80072a0 <HAL_GPIO_Init+0x2f8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	43da      	mvns	r2, r3
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	4013      	ands	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	2380      	movs	r3, #128	@ 0x80
 80071d4:	025b      	lsls	r3, r3, #9
 80071d6:	4013      	ands	r3, r2
 80071d8:	d003      	beq.n	80071e2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80071e2:	4b2f      	ldr	r3, [pc, #188]	@ (80072a0 <HAL_GPIO_Init+0x2f8>)
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80071e8:	4b2d      	ldr	r3, [pc, #180]	@ (80072a0 <HAL_GPIO_Init+0x2f8>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	43da      	mvns	r2, r3
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	4013      	ands	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	2380      	movs	r3, #128	@ 0x80
 80071fe:	029b      	lsls	r3, r3, #10
 8007200:	4013      	ands	r3, r2
 8007202:	d003      	beq.n	800720c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800720c:	4b24      	ldr	r3, [pc, #144]	@ (80072a0 <HAL_GPIO_Init+0x2f8>)
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007212:	4b23      	ldr	r3, [pc, #140]	@ (80072a0 <HAL_GPIO_Init+0x2f8>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	43da      	mvns	r2, r3
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	4013      	ands	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	2380      	movs	r3, #128	@ 0x80
 8007228:	035b      	lsls	r3, r3, #13
 800722a:	4013      	ands	r3, r2
 800722c:	d003      	beq.n	8007236 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007236:	4b1a      	ldr	r3, [pc, #104]	@ (80072a0 <HAL_GPIO_Init+0x2f8>)
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800723c:	4b18      	ldr	r3, [pc, #96]	@ (80072a0 <HAL_GPIO_Init+0x2f8>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	43da      	mvns	r2, r3
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	4013      	ands	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	2380      	movs	r3, #128	@ 0x80
 8007252:	039b      	lsls	r3, r3, #14
 8007254:	4013      	ands	r3, r2
 8007256:	d003      	beq.n	8007260 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4313      	orrs	r3, r2
 800725e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007260:	4b0f      	ldr	r3, [pc, #60]	@ (80072a0 <HAL_GPIO_Init+0x2f8>)
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	3301      	adds	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	40da      	lsrs	r2, r3
 8007274:	1e13      	subs	r3, r2, #0
 8007276:	d000      	beq.n	800727a <HAL_GPIO_Init+0x2d2>
 8007278:	e6a2      	b.n	8006fc0 <HAL_GPIO_Init+0x18>
  }
}
 800727a:	46c0      	nop			@ (mov r8, r8)
 800727c:	46c0      	nop			@ (mov r8, r8)
 800727e:	46bd      	mov	sp, r7
 8007280:	b006      	add	sp, #24
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40021000 	.word	0x40021000
 8007288:	40010000 	.word	0x40010000
 800728c:	50000400 	.word	0x50000400
 8007290:	50000800 	.word	0x50000800
 8007294:	50000c00 	.word	0x50000c00
 8007298:	50001000 	.word	0x50001000
 800729c:	50001c00 	.word	0x50001c00
 80072a0:	40010400 	.word	0x40010400

080072a4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80072ba:	e0bc      	b.n	8007436 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80072bc:	2201      	movs	r2, #1
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	409a      	lsls	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	4013      	ands	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d100      	bne.n	80072d0 <HAL_GPIO_DeInit+0x2c>
 80072ce:	e0af      	b.n	8007430 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80072d0:	4a5e      	ldr	r2, [pc, #376]	@ (800744c <HAL_GPIO_DeInit+0x1a8>)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	089b      	lsrs	r3, r3, #2
 80072d6:	3302      	adds	r3, #2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	589b      	ldr	r3, [r3, r2]
 80072dc:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2203      	movs	r2, #3
 80072e2:	4013      	ands	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	220f      	movs	r2, #15
 80072e8:	409a      	lsls	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4013      	ands	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	23a0      	movs	r3, #160	@ 0xa0
 80072f4:	05db      	lsls	r3, r3, #23
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d01f      	beq.n	800733a <HAL_GPIO_DeInit+0x96>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a54      	ldr	r2, [pc, #336]	@ (8007450 <HAL_GPIO_DeInit+0x1ac>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d019      	beq.n	8007336 <HAL_GPIO_DeInit+0x92>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a53      	ldr	r2, [pc, #332]	@ (8007454 <HAL_GPIO_DeInit+0x1b0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_GPIO_DeInit+0x8e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a52      	ldr	r2, [pc, #328]	@ (8007458 <HAL_GPIO_DeInit+0x1b4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00d      	beq.n	800732e <HAL_GPIO_DeInit+0x8a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a51      	ldr	r2, [pc, #324]	@ (800745c <HAL_GPIO_DeInit+0x1b8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d007      	beq.n	800732a <HAL_GPIO_DeInit+0x86>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a50      	ldr	r2, [pc, #320]	@ (8007460 <HAL_GPIO_DeInit+0x1bc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d101      	bne.n	8007326 <HAL_GPIO_DeInit+0x82>
 8007322:	2305      	movs	r3, #5
 8007324:	e00a      	b.n	800733c <HAL_GPIO_DeInit+0x98>
 8007326:	2306      	movs	r3, #6
 8007328:	e008      	b.n	800733c <HAL_GPIO_DeInit+0x98>
 800732a:	2304      	movs	r3, #4
 800732c:	e006      	b.n	800733c <HAL_GPIO_DeInit+0x98>
 800732e:	2303      	movs	r3, #3
 8007330:	e004      	b.n	800733c <HAL_GPIO_DeInit+0x98>
 8007332:	2302      	movs	r3, #2
 8007334:	e002      	b.n	800733c <HAL_GPIO_DeInit+0x98>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <HAL_GPIO_DeInit+0x98>
 800733a:	2300      	movs	r3, #0
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	2103      	movs	r1, #3
 8007340:	400a      	ands	r2, r1
 8007342:	0092      	lsls	r2, r2, #2
 8007344:	4093      	lsls	r3, r2
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	429a      	cmp	r2, r3
 800734a:	d132      	bne.n	80073b2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800734c:	4b45      	ldr	r3, [pc, #276]	@ (8007464 <HAL_GPIO_DeInit+0x1c0>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	43d9      	mvns	r1, r3
 8007354:	4b43      	ldr	r3, [pc, #268]	@ (8007464 <HAL_GPIO_DeInit+0x1c0>)
 8007356:	400a      	ands	r2, r1
 8007358:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800735a:	4b42      	ldr	r3, [pc, #264]	@ (8007464 <HAL_GPIO_DeInit+0x1c0>)
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	43d9      	mvns	r1, r3
 8007362:	4b40      	ldr	r3, [pc, #256]	@ (8007464 <HAL_GPIO_DeInit+0x1c0>)
 8007364:	400a      	ands	r2, r1
 8007366:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007368:	4b3e      	ldr	r3, [pc, #248]	@ (8007464 <HAL_GPIO_DeInit+0x1c0>)
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	43d9      	mvns	r1, r3
 8007370:	4b3c      	ldr	r3, [pc, #240]	@ (8007464 <HAL_GPIO_DeInit+0x1c0>)
 8007372:	400a      	ands	r2, r1
 8007374:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007376:	4b3b      	ldr	r3, [pc, #236]	@ (8007464 <HAL_GPIO_DeInit+0x1c0>)
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	43d9      	mvns	r1, r3
 800737e:	4b39      	ldr	r3, [pc, #228]	@ (8007464 <HAL_GPIO_DeInit+0x1c0>)
 8007380:	400a      	ands	r2, r1
 8007382:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2203      	movs	r2, #3
 8007388:	4013      	ands	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	220f      	movs	r2, #15
 800738e:	409a      	lsls	r2, r3
 8007390:	0013      	movs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007394:	4a2d      	ldr	r2, [pc, #180]	@ (800744c <HAL_GPIO_DeInit+0x1a8>)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	089b      	lsrs	r3, r3, #2
 800739a:	3302      	adds	r3, #2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	589a      	ldr	r2, [r3, r2]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	43d9      	mvns	r1, r3
 80073a4:	4829      	ldr	r0, [pc, #164]	@ (800744c <HAL_GPIO_DeInit+0x1a8>)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	089b      	lsrs	r3, r3, #2
 80073aa:	400a      	ands	r2, r1
 80073ac:	3302      	adds	r3, #2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	2103      	movs	r1, #3
 80073bc:	4099      	lsls	r1, r3
 80073be:	000b      	movs	r3, r1
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	08da      	lsrs	r2, r3, #3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3208      	adds	r2, #8
 80073ce:	0092      	lsls	r2, r2, #2
 80073d0:	58d3      	ldr	r3, [r2, r3]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	2107      	movs	r1, #7
 80073d6:	400a      	ands	r2, r1
 80073d8:	0092      	lsls	r2, r2, #2
 80073da:	210f      	movs	r1, #15
 80073dc:	4091      	lsls	r1, r2
 80073de:	000a      	movs	r2, r1
 80073e0:	43d1      	mvns	r1, r2
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	08d2      	lsrs	r2, r2, #3
 80073e6:	4019      	ands	r1, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3208      	adds	r2, #8
 80073ec:	0092      	lsls	r2, r2, #2
 80073ee:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	0052      	lsls	r2, r2, #1
 80073f8:	2103      	movs	r1, #3
 80073fa:	4091      	lsls	r1, r2
 80073fc:	000a      	movs	r2, r1
 80073fe:	43d2      	mvns	r2, r2
 8007400:	401a      	ands	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	2101      	movs	r1, #1
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4091      	lsls	r1, r2
 8007410:	000a      	movs	r2, r1
 8007412:	43d2      	mvns	r2, r2
 8007414:	401a      	ands	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	0052      	lsls	r2, r2, #1
 8007422:	2103      	movs	r1, #3
 8007424:	4091      	lsls	r1, r2
 8007426:	000a      	movs	r2, r1
 8007428:	43d2      	mvns	r2, r2
 800742a:	401a      	ands	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	3301      	adds	r3, #1
 8007434:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	40da      	lsrs	r2, r3
 800743c:	1e13      	subs	r3, r2, #0
 800743e:	d000      	beq.n	8007442 <HAL_GPIO_DeInit+0x19e>
 8007440:	e73c      	b.n	80072bc <HAL_GPIO_DeInit+0x18>
  }
}
 8007442:	46c0      	nop			@ (mov r8, r8)
 8007444:	46c0      	nop			@ (mov r8, r8)
 8007446:	46bd      	mov	sp, r7
 8007448:	b006      	add	sp, #24
 800744a:	bd80      	pop	{r7, pc}
 800744c:	40010000 	.word	0x40010000
 8007450:	50000400 	.word	0x50000400
 8007454:	50000800 	.word	0x50000800
 8007458:	50000c00 	.word	0x50000c00
 800745c:	50001000 	.word	0x50001000
 8007460:	50001c00 	.word	0x50001c00
 8007464:	40010400 	.word	0x40010400

08007468 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	000a      	movs	r2, r1
 8007472:	1cbb      	adds	r3, r7, #2
 8007474:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	1cba      	adds	r2, r7, #2
 800747c:	8812      	ldrh	r2, [r2, #0]
 800747e:	4013      	ands	r3, r2
 8007480:	d004      	beq.n	800748c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007482:	230f      	movs	r3, #15
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	2201      	movs	r2, #1
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	e003      	b.n	8007494 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800748c:	230f      	movs	r3, #15
 800748e:	18fb      	adds	r3, r7, r3
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007494:	230f      	movs	r3, #15
 8007496:	18fb      	adds	r3, r7, r3
 8007498:	781b      	ldrb	r3, [r3, #0]
}
 800749a:	0018      	movs	r0, r3
 800749c:	46bd      	mov	sp, r7
 800749e:	b004      	add	sp, #16
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	0008      	movs	r0, r1
 80074ac:	0011      	movs	r1, r2
 80074ae:	1cbb      	adds	r3, r7, #2
 80074b0:	1c02      	adds	r2, r0, #0
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	1c7b      	adds	r3, r7, #1
 80074b6:	1c0a      	adds	r2, r1, #0
 80074b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074ba:	1c7b      	adds	r3, r7, #1
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074c2:	1cbb      	adds	r3, r7, #2
 80074c4:	881a      	ldrh	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80074ca:	e003      	b.n	80074d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80074cc:	1cbb      	adds	r3, r7, #2
 80074ce:	881a      	ldrh	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80074d4:	46c0      	nop			@ (mov r8, r8)
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b002      	add	sp, #8
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	000a      	movs	r2, r1
 80074e6:	1cbb      	adds	r3, r7, #2
 80074e8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074f0:	1cbb      	adds	r3, r7, #2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4013      	ands	r3, r2
 80074f8:	041a      	lsls	r2, r3, #16
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	43db      	mvns	r3, r3
 80074fe:	1cb9      	adds	r1, r7, #2
 8007500:	8809      	ldrh	r1, [r1, #0]
 8007502:	400b      	ands	r3, r1
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	619a      	str	r2, [r3, #24]
}
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	b004      	add	sp, #16
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e082      	b.n	800762c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2241      	movs	r2, #65	@ 0x41
 800752a:	5c9b      	ldrb	r3, [r3, r2]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d107      	bne.n	8007542 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2240      	movs	r2, #64	@ 0x40
 8007536:	2100      	movs	r1, #0
 8007538:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	0018      	movs	r0, r3
 800753e:	f000 f87f 	bl	8007640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2241      	movs	r2, #65	@ 0x41
 8007546:	2124      	movs	r1, #36	@ 0x24
 8007548:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2101      	movs	r1, #1
 8007556:	438a      	bics	r2, r1
 8007558:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4934      	ldr	r1, [pc, #208]	@ (8007634 <HAL_I2C_Init+0x120>)
 8007564:	400a      	ands	r2, r1
 8007566:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4931      	ldr	r1, [pc, #196]	@ (8007638 <HAL_I2C_Init+0x124>)
 8007574:	400a      	ands	r2, r1
 8007576:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d108      	bne.n	8007592 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2180      	movs	r1, #128	@ 0x80
 800758a:	0209      	lsls	r1, r1, #8
 800758c:	430a      	orrs	r2, r1
 800758e:	609a      	str	r2, [r3, #8]
 8007590:	e007      	b.n	80075a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2184      	movs	r1, #132	@ 0x84
 800759c:	0209      	lsls	r1, r1, #8
 800759e:	430a      	orrs	r2, r1
 80075a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d104      	bne.n	80075b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2280      	movs	r2, #128	@ 0x80
 80075b0:	0112      	lsls	r2, r2, #4
 80075b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	491f      	ldr	r1, [pc, #124]	@ (800763c <HAL_I2C_Init+0x128>)
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	491a      	ldr	r1, [pc, #104]	@ (8007638 <HAL_I2C_Init+0x124>)
 80075d0:	400a      	ands	r2, r1
 80075d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	431a      	orrs	r2, r3
 80075de:	0011      	movs	r1, r2
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	021a      	lsls	r2, r3, #8
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69d9      	ldr	r1, [r3, #28]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2101      	movs	r1, #1
 800760a:	430a      	orrs	r2, r1
 800760c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2241      	movs	r2, #65	@ 0x41
 8007618:	2120      	movs	r1, #32
 800761a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2242      	movs	r2, #66	@ 0x42
 8007626:	2100      	movs	r1, #0
 8007628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	0018      	movs	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	b002      	add	sp, #8
 8007632:	bd80      	pop	{r7, pc}
 8007634:	f0ffffff 	.word	0xf0ffffff
 8007638:	ffff7fff 	.word	0xffff7fff
 800763c:	02008000 	.word	0x02008000

08007640 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007648:	46c0      	nop			@ (mov r8, r8)
 800764a:	46bd      	mov	sp, r7
 800764c:	b002      	add	sp, #8
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b089      	sub	sp, #36	@ 0x24
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	000c      	movs	r4, r1
 800765a:	0010      	movs	r0, r2
 800765c:	0019      	movs	r1, r3
 800765e:	230a      	movs	r3, #10
 8007660:	18fb      	adds	r3, r7, r3
 8007662:	1c22      	adds	r2, r4, #0
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	2308      	movs	r3, #8
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	1c02      	adds	r2, r0, #0
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	1dbb      	adds	r3, r7, #6
 8007670:	1c0a      	adds	r2, r1, #0
 8007672:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2241      	movs	r2, #65	@ 0x41
 8007678:	5c9b      	ldrb	r3, [r3, r2]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b20      	cmp	r3, #32
 800767e:	d000      	beq.n	8007682 <HAL_I2C_Mem_Write+0x32>
 8007680:	e10c      	b.n	800789c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <HAL_I2C_Mem_Write+0x42>
 8007688:	232c      	movs	r3, #44	@ 0x2c
 800768a:	18fb      	adds	r3, r7, r3
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d105      	bne.n	800769e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2280      	movs	r2, #128	@ 0x80
 8007696:	0092      	lsls	r2, r2, #2
 8007698:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e0ff      	b.n	800789e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2240      	movs	r2, #64	@ 0x40
 80076a2:	5c9b      	ldrb	r3, [r3, r2]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_I2C_Mem_Write+0x5c>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e0f8      	b.n	800789e <HAL_I2C_Mem_Write+0x24e>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2240      	movs	r2, #64	@ 0x40
 80076b0:	2101      	movs	r1, #1
 80076b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076b4:	f7fd f8f1 	bl	800489a <HAL_GetTick>
 80076b8:	0003      	movs	r3, r0
 80076ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076bc:	2380      	movs	r3, #128	@ 0x80
 80076be:	0219      	lsls	r1, r3, #8
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	2319      	movs	r3, #25
 80076c8:	2201      	movs	r2, #1
 80076ca:	f000 fb17 	bl	8007cfc <I2C_WaitOnFlagUntilTimeout>
 80076ce:	1e03      	subs	r3, r0, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e0e3      	b.n	800789e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2241      	movs	r2, #65	@ 0x41
 80076da:	2121      	movs	r1, #33	@ 0x21
 80076dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2242      	movs	r2, #66	@ 0x42
 80076e2:	2140      	movs	r1, #64	@ 0x40
 80076e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	222c      	movs	r2, #44	@ 0x2c
 80076f6:	18ba      	adds	r2, r7, r2
 80076f8:	8812      	ldrh	r2, [r2, #0]
 80076fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007702:	1dbb      	adds	r3, r7, #6
 8007704:	881c      	ldrh	r4, [r3, #0]
 8007706:	2308      	movs	r3, #8
 8007708:	18fb      	adds	r3, r7, r3
 800770a:	881a      	ldrh	r2, [r3, #0]
 800770c:	230a      	movs	r3, #10
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	8819      	ldrh	r1, [r3, #0]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	0023      	movs	r3, r4
 800771e:	f000 fa05 	bl	8007b2c <I2C_RequestMemoryWrite>
 8007722:	1e03      	subs	r3, r0, #0
 8007724:	d005      	beq.n	8007732 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2240      	movs	r2, #64	@ 0x40
 800772a:	2100      	movs	r1, #0
 800772c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e0b5      	b.n	800789e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007736:	b29b      	uxth	r3, r3
 8007738:	2bff      	cmp	r3, #255	@ 0xff
 800773a:	d911      	bls.n	8007760 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	22ff      	movs	r2, #255	@ 0xff
 8007740:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007746:	b2da      	uxtb	r2, r3
 8007748:	2380      	movs	r3, #128	@ 0x80
 800774a:	045c      	lsls	r4, r3, #17
 800774c:	230a      	movs	r3, #10
 800774e:	18fb      	adds	r3, r7, r3
 8007750:	8819      	ldrh	r1, [r3, #0]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	2300      	movs	r3, #0
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	0023      	movs	r3, r4
 800775a:	f000 fbef 	bl	8007f3c <I2C_TransferConfig>
 800775e:	e012      	b.n	8007786 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776e:	b2da      	uxtb	r2, r3
 8007770:	2380      	movs	r3, #128	@ 0x80
 8007772:	049c      	lsls	r4, r3, #18
 8007774:	230a      	movs	r3, #10
 8007776:	18fb      	adds	r3, r7, r3
 8007778:	8819      	ldrh	r1, [r3, #0]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	2300      	movs	r3, #0
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	0023      	movs	r3, r4
 8007782:	f000 fbdb 	bl	8007f3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	0018      	movs	r0, r3
 800778e:	f000 faf4 	bl	8007d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007792:	1e03      	subs	r3, r0, #0
 8007794:	d001      	beq.n	800779a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e081      	b.n	800789e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779e:	781a      	ldrb	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d03a      	beq.n	800784a <HAL_I2C_Mem_Write+0x1fa>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d136      	bne.n	800784a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	0013      	movs	r3, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	2180      	movs	r1, #128	@ 0x80
 80077ea:	f000 fa87 	bl	8007cfc <I2C_WaitOnFlagUntilTimeout>
 80077ee:	1e03      	subs	r3, r0, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e053      	b.n	800789e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2bff      	cmp	r3, #255	@ 0xff
 80077fe:	d911      	bls.n	8007824 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	22ff      	movs	r2, #255	@ 0xff
 8007804:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800780a:	b2da      	uxtb	r2, r3
 800780c:	2380      	movs	r3, #128	@ 0x80
 800780e:	045c      	lsls	r4, r3, #17
 8007810:	230a      	movs	r3, #10
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	8819      	ldrh	r1, [r3, #0]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	2300      	movs	r3, #0
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	0023      	movs	r3, r4
 800781e:	f000 fb8d 	bl	8007f3c <I2C_TransferConfig>
 8007822:	e012      	b.n	800784a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007832:	b2da      	uxtb	r2, r3
 8007834:	2380      	movs	r3, #128	@ 0x80
 8007836:	049c      	lsls	r4, r3, #18
 8007838:	230a      	movs	r3, #10
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	8819      	ldrh	r1, [r3, #0]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	2300      	movs	r3, #0
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	0023      	movs	r3, r4
 8007846:	f000 fb79 	bl	8007f3c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d198      	bne.n	8007786 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	0018      	movs	r0, r3
 800785c:	f000 facc 	bl	8007df8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007860:	1e03      	subs	r3, r0, #0
 8007862:	d001      	beq.n	8007868 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e01a      	b.n	800789e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2220      	movs	r2, #32
 800786e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	490b      	ldr	r1, [pc, #44]	@ (80078a8 <HAL_I2C_Mem_Write+0x258>)
 800787c:	400a      	ands	r2, r1
 800787e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2241      	movs	r2, #65	@ 0x41
 8007884:	2120      	movs	r1, #32
 8007886:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2242      	movs	r2, #66	@ 0x42
 800788c:	2100      	movs	r1, #0
 800788e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2240      	movs	r2, #64	@ 0x40
 8007894:	2100      	movs	r1, #0
 8007896:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	e000      	b.n	800789e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800789c:	2302      	movs	r3, #2
  }
}
 800789e:	0018      	movs	r0, r3
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b007      	add	sp, #28
 80078a4:	bd90      	pop	{r4, r7, pc}
 80078a6:	46c0      	nop			@ (mov r8, r8)
 80078a8:	fe00e800 	.word	0xfe00e800

080078ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b089      	sub	sp, #36	@ 0x24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	000c      	movs	r4, r1
 80078b6:	0010      	movs	r0, r2
 80078b8:	0019      	movs	r1, r3
 80078ba:	230a      	movs	r3, #10
 80078bc:	18fb      	adds	r3, r7, r3
 80078be:	1c22      	adds	r2, r4, #0
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	2308      	movs	r3, #8
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	1c02      	adds	r2, r0, #0
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	1dbb      	adds	r3, r7, #6
 80078cc:	1c0a      	adds	r2, r1, #0
 80078ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2241      	movs	r2, #65	@ 0x41
 80078d4:	5c9b      	ldrb	r3, [r3, r2]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d000      	beq.n	80078de <HAL_I2C_Mem_Read+0x32>
 80078dc:	e110      	b.n	8007b00 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80078de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <HAL_I2C_Mem_Read+0x42>
 80078e4:	232c      	movs	r3, #44	@ 0x2c
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2280      	movs	r2, #128	@ 0x80
 80078f2:	0092      	lsls	r2, r2, #2
 80078f4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e103      	b.n	8007b02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2240      	movs	r2, #64	@ 0x40
 80078fe:	5c9b      	ldrb	r3, [r3, r2]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_I2C_Mem_Read+0x5c>
 8007904:	2302      	movs	r3, #2
 8007906:	e0fc      	b.n	8007b02 <HAL_I2C_Mem_Read+0x256>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2240      	movs	r2, #64	@ 0x40
 800790c:	2101      	movs	r1, #1
 800790e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007910:	f7fc ffc3 	bl	800489a <HAL_GetTick>
 8007914:	0003      	movs	r3, r0
 8007916:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	0219      	lsls	r1, r3, #8
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	2319      	movs	r3, #25
 8007924:	2201      	movs	r2, #1
 8007926:	f000 f9e9 	bl	8007cfc <I2C_WaitOnFlagUntilTimeout>
 800792a:	1e03      	subs	r3, r0, #0
 800792c:	d001      	beq.n	8007932 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e0e7      	b.n	8007b02 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2241      	movs	r2, #65	@ 0x41
 8007936:	2122      	movs	r1, #34	@ 0x22
 8007938:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2242      	movs	r2, #66	@ 0x42
 800793e:	2140      	movs	r1, #64	@ 0x40
 8007940:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800794c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	222c      	movs	r2, #44	@ 0x2c
 8007952:	18ba      	adds	r2, r7, r2
 8007954:	8812      	ldrh	r2, [r2, #0]
 8007956:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800795e:	1dbb      	adds	r3, r7, #6
 8007960:	881c      	ldrh	r4, [r3, #0]
 8007962:	2308      	movs	r3, #8
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	881a      	ldrh	r2, [r3, #0]
 8007968:	230a      	movs	r3, #10
 800796a:	18fb      	adds	r3, r7, r3
 800796c:	8819      	ldrh	r1, [r3, #0]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	0023      	movs	r3, r4
 800797a:	f000 f93b 	bl	8007bf4 <I2C_RequestMemoryRead>
 800797e:	1e03      	subs	r3, r0, #0
 8007980:	d005      	beq.n	800798e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2240      	movs	r2, #64	@ 0x40
 8007986:	2100      	movs	r1, #0
 8007988:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e0b9      	b.n	8007b02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	2bff      	cmp	r3, #255	@ 0xff
 8007996:	d911      	bls.n	80079bc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	22ff      	movs	r2, #255	@ 0xff
 800799c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	045c      	lsls	r4, r3, #17
 80079a8:	230a      	movs	r3, #10
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	8819      	ldrh	r1, [r3, #0]
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	4b56      	ldr	r3, [pc, #344]	@ (8007b0c <HAL_I2C_Mem_Read+0x260>)
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	0023      	movs	r3, r4
 80079b6:	f000 fac1 	bl	8007f3c <I2C_TransferConfig>
 80079ba:	e012      	b.n	80079e2 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	2380      	movs	r3, #128	@ 0x80
 80079ce:	049c      	lsls	r4, r3, #18
 80079d0:	230a      	movs	r3, #10
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	8819      	ldrh	r1, [r3, #0]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	4b4c      	ldr	r3, [pc, #304]	@ (8007b0c <HAL_I2C_Mem_Read+0x260>)
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	0023      	movs	r3, r4
 80079de:	f000 faad 	bl	8007f3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80079e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	0013      	movs	r3, r2
 80079ec:	2200      	movs	r2, #0
 80079ee:	2104      	movs	r1, #4
 80079f0:	f000 f984 	bl	8007cfc <I2C_WaitOnFlagUntilTimeout>
 80079f4:	1e03      	subs	r3, r0, #0
 80079f6:	d001      	beq.n	80079fc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e082      	b.n	8007b02 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d03a      	beq.n	8007aae <HAL_I2C_Mem_Read+0x202>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d136      	bne.n	8007aae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	0013      	movs	r3, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2180      	movs	r1, #128	@ 0x80
 8007a4e:	f000 f955 	bl	8007cfc <I2C_WaitOnFlagUntilTimeout>
 8007a52:	1e03      	subs	r3, r0, #0
 8007a54:	d001      	beq.n	8007a5a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e053      	b.n	8007b02 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2bff      	cmp	r3, #255	@ 0xff
 8007a62:	d911      	bls.n	8007a88 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	22ff      	movs	r2, #255	@ 0xff
 8007a68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	2380      	movs	r3, #128	@ 0x80
 8007a72:	045c      	lsls	r4, r3, #17
 8007a74:	230a      	movs	r3, #10
 8007a76:	18fb      	adds	r3, r7, r3
 8007a78:	8819      	ldrh	r1, [r3, #0]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	0023      	movs	r3, r4
 8007a82:	f000 fa5b 	bl	8007f3c <I2C_TransferConfig>
 8007a86:	e012      	b.n	8007aae <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	2380      	movs	r3, #128	@ 0x80
 8007a9a:	049c      	lsls	r4, r3, #18
 8007a9c:	230a      	movs	r3, #10
 8007a9e:	18fb      	adds	r3, r7, r3
 8007aa0:	8819      	ldrh	r1, [r3, #0]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	0023      	movs	r3, r4
 8007aaa:	f000 fa47 	bl	8007f3c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d194      	bne.n	80079e2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f000 f99a 	bl	8007df8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ac4:	1e03      	subs	r3, r0, #0
 8007ac6:	d001      	beq.n	8007acc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e01a      	b.n	8007b02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	490c      	ldr	r1, [pc, #48]	@ (8007b10 <HAL_I2C_Mem_Read+0x264>)
 8007ae0:	400a      	ands	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2241      	movs	r2, #65	@ 0x41
 8007ae8:	2120      	movs	r1, #32
 8007aea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2242      	movs	r2, #66	@ 0x42
 8007af0:	2100      	movs	r1, #0
 8007af2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2240      	movs	r2, #64	@ 0x40
 8007af8:	2100      	movs	r1, #0
 8007afa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e000      	b.n	8007b02 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	0018      	movs	r0, r3
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b007      	add	sp, #28
 8007b08:	bd90      	pop	{r4, r7, pc}
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	80002400 	.word	0x80002400
 8007b10:	fe00e800 	.word	0xfe00e800

08007b14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2241      	movs	r2, #65	@ 0x41
 8007b20:	5c9b      	ldrb	r3, [r3, r2]
 8007b22:	b2db      	uxtb	r3, r3
}
 8007b24:	0018      	movs	r0, r3
 8007b26:	46bd      	mov	sp, r7
 8007b28:	b002      	add	sp, #8
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b2c:	b5b0      	push	{r4, r5, r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	000c      	movs	r4, r1
 8007b36:	0010      	movs	r0, r2
 8007b38:	0019      	movs	r1, r3
 8007b3a:	250a      	movs	r5, #10
 8007b3c:	197b      	adds	r3, r7, r5
 8007b3e:	1c22      	adds	r2, r4, #0
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	2308      	movs	r3, #8
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	1c02      	adds	r2, r0, #0
 8007b48:	801a      	strh	r2, [r3, #0]
 8007b4a:	1dbb      	adds	r3, r7, #6
 8007b4c:	1c0a      	adds	r2, r1, #0
 8007b4e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b50:	1dbb      	adds	r3, r7, #6
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	2380      	movs	r3, #128	@ 0x80
 8007b58:	045c      	lsls	r4, r3, #17
 8007b5a:	197b      	adds	r3, r7, r5
 8007b5c:	8819      	ldrh	r1, [r3, #0]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	4b23      	ldr	r3, [pc, #140]	@ (8007bf0 <I2C_RequestMemoryWrite+0xc4>)
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	0023      	movs	r3, r4
 8007b66:	f000 f9e9 	bl	8007f3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b6c:	6a39      	ldr	r1, [r7, #32]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	0018      	movs	r0, r3
 8007b72:	f000 f902 	bl	8007d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007b76:	1e03      	subs	r3, r0, #0
 8007b78:	d001      	beq.n	8007b7e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e033      	b.n	8007be6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b7e:	1dbb      	adds	r3, r7, #6
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d107      	bne.n	8007b96 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b86:	2308      	movs	r3, #8
 8007b88:	18fb      	adds	r3, r7, r3
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b94:	e019      	b.n	8007bca <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b96:	2308      	movs	r3, #8
 8007b98:	18fb      	adds	r3, r7, r3
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	0a1b      	lsrs	r3, r3, #8
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007baa:	6a39      	ldr	r1, [r7, #32]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f000 f8e3 	bl	8007d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007bb4:	1e03      	subs	r3, r0, #0
 8007bb6:	d001      	beq.n	8007bbc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e014      	b.n	8007be6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	18fb      	adds	r3, r7, r3
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	0013      	movs	r3, r2
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2180      	movs	r1, #128	@ 0x80
 8007bd8:	f000 f890 	bl	8007cfc <I2C_WaitOnFlagUntilTimeout>
 8007bdc:	1e03      	subs	r3, r0, #0
 8007bde:	d001      	beq.n	8007be4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e000      	b.n	8007be6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b004      	add	sp, #16
 8007bec:	bdb0      	pop	{r4, r5, r7, pc}
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	80002000 	.word	0x80002000

08007bf4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf4:	b5b0      	push	{r4, r5, r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af02      	add	r7, sp, #8
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	000c      	movs	r4, r1
 8007bfe:	0010      	movs	r0, r2
 8007c00:	0019      	movs	r1, r3
 8007c02:	250a      	movs	r5, #10
 8007c04:	197b      	adds	r3, r7, r5
 8007c06:	1c22      	adds	r2, r4, #0
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	18fb      	adds	r3, r7, r3
 8007c0e:	1c02      	adds	r2, r0, #0
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	1dbb      	adds	r3, r7, #6
 8007c14:	1c0a      	adds	r2, r1, #0
 8007c16:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007c18:	1dbb      	adds	r3, r7, #6
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	197b      	adds	r3, r7, r5
 8007c20:	8819      	ldrh	r1, [r3, #0]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	4b23      	ldr	r3, [pc, #140]	@ (8007cb4 <I2C_RequestMemoryRead+0xc0>)
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f000 f987 	bl	8007f3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c30:	6a39      	ldr	r1, [r7, #32]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	0018      	movs	r0, r3
 8007c36:	f000 f8a0 	bl	8007d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007c3a:	1e03      	subs	r3, r0, #0
 8007c3c:	d001      	beq.n	8007c42 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e033      	b.n	8007caa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c42:	1dbb      	adds	r3, r7, #6
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d107      	bne.n	8007c5a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	18fb      	adds	r3, r7, r3
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c58:	e019      	b.n	8007c8e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c5a:	2308      	movs	r3, #8
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	0a1b      	lsrs	r3, r3, #8
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c6e:	6a39      	ldr	r1, [r7, #32]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	0018      	movs	r0, r3
 8007c74:	f000 f881 	bl	8007d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007c78:	1e03      	subs	r3, r0, #0
 8007c7a:	d001      	beq.n	8007c80 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e014      	b.n	8007caa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c80:	2308      	movs	r3, #8
 8007c82:	18fb      	adds	r3, r7, r3
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007c8e:	6a3a      	ldr	r2, [r7, #32]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	0013      	movs	r3, r2
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2140      	movs	r1, #64	@ 0x40
 8007c9c:	f000 f82e 	bl	8007cfc <I2C_WaitOnFlagUntilTimeout>
 8007ca0:	1e03      	subs	r3, r0, #0
 8007ca2:	d001      	beq.n	8007ca8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	0018      	movs	r0, r3
 8007cac:	46bd      	mov	sp, r7
 8007cae:	b004      	add	sp, #16
 8007cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8007cb2:	46c0      	nop			@ (mov r8, r8)
 8007cb4:	80002000 	.word	0x80002000

08007cb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	4013      	ands	r3, r2
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d103      	bne.n	8007cd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	4013      	ands	r3, r2
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d007      	beq.n	8007cf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2101      	movs	r1, #1
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	619a      	str	r2, [r3, #24]
  }
}
 8007cf4:	46c0      	nop			@ (mov r8, r8)
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b002      	add	sp, #8
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	1dfb      	adds	r3, r7, #7
 8007d0a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d0c:	e021      	b.n	8007d52 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	3301      	adds	r3, #1
 8007d12:	d01e      	beq.n	8007d52 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d14:	f7fc fdc1 	bl	800489a <HAL_GetTick>
 8007d18:	0002      	movs	r2, r0
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d113      	bne.n	8007d52 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2e:	2220      	movs	r2, #32
 8007d30:	431a      	orrs	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2241      	movs	r2, #65	@ 0x41
 8007d3a:	2120      	movs	r1, #32
 8007d3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2242      	movs	r2, #66	@ 0x42
 8007d42:	2100      	movs	r1, #0
 8007d44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2240      	movs	r2, #64	@ 0x40
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e00f      	b.n	8007d72 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	425a      	negs	r2, r3
 8007d62:	4153      	adcs	r3, r2
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	001a      	movs	r2, r3
 8007d68:	1dfb      	adds	r3, r7, #7
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d0ce      	beq.n	8007d0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	0018      	movs	r0, r3
 8007d74:	46bd      	mov	sp, r7
 8007d76:	b004      	add	sp, #16
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d86:	e02b      	b.n	8007de0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f000 f86e 	bl	8007e70 <I2C_IsAcknowledgeFailed>
 8007d94:	1e03      	subs	r3, r0, #0
 8007d96:	d001      	beq.n	8007d9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e029      	b.n	8007df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	d01e      	beq.n	8007de0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da2:	f7fc fd7a 	bl	800489a <HAL_GetTick>
 8007da6:	0002      	movs	r2, r0
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d302      	bcc.n	8007db8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d113      	bne.n	8007de0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2241      	movs	r2, #65	@ 0x41
 8007dc8:	2120      	movs	r1, #32
 8007dca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2242      	movs	r2, #66	@ 0x42
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2240      	movs	r2, #64	@ 0x40
 8007dd8:	2100      	movs	r1, #0
 8007dda:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e007      	b.n	8007df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	2202      	movs	r2, #2
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d1cc      	bne.n	8007d88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	0018      	movs	r0, r3
 8007df2:	46bd      	mov	sp, r7
 8007df4:	b004      	add	sp, #16
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e04:	e028      	b.n	8007e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f000 f82f 	bl	8007e70 <I2C_IsAcknowledgeFailed>
 8007e12:	1e03      	subs	r3, r0, #0
 8007e14:	d001      	beq.n	8007e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e026      	b.n	8007e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e1a:	f7fc fd3e 	bl	800489a <HAL_GetTick>
 8007e1e:	0002      	movs	r2, r0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d302      	bcc.n	8007e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d113      	bne.n	8007e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e34:	2220      	movs	r2, #32
 8007e36:	431a      	orrs	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2241      	movs	r2, #65	@ 0x41
 8007e40:	2120      	movs	r1, #32
 8007e42:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2242      	movs	r2, #66	@ 0x42
 8007e48:	2100      	movs	r1, #0
 8007e4a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2240      	movs	r2, #64	@ 0x40
 8007e50:	2100      	movs	r1, #0
 8007e52:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e007      	b.n	8007e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b20      	cmp	r3, #32
 8007e64:	d1cf      	bne.n	8007e06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	0018      	movs	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b004      	add	sp, #16
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	2210      	movs	r2, #16
 8007e84:	4013      	ands	r3, r2
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d151      	bne.n	8007f2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e8a:	e021      	b.n	8007ed0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	d01e      	beq.n	8007ed0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e92:	f7fc fd02 	bl	800489a <HAL_GetTick>
 8007e96:	0002      	movs	r2, r0
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d302      	bcc.n	8007ea8 <I2C_IsAcknowledgeFailed+0x38>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d113      	bne.n	8007ed0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eac:	2220      	movs	r2, #32
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2241      	movs	r2, #65	@ 0x41
 8007eb8:	2120      	movs	r1, #32
 8007eba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2242      	movs	r2, #66	@ 0x42
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2240      	movs	r2, #64	@ 0x40
 8007ec8:	2100      	movs	r1, #0
 8007eca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e02f      	b.n	8007f30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	d1d6      	bne.n	8007e8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2210      	movs	r2, #16
 8007ee4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2220      	movs	r2, #32
 8007eec:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	f7ff fee1 	bl	8007cb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	490d      	ldr	r1, [pc, #52]	@ (8007f38 <I2C_IsAcknowledgeFailed+0xc8>)
 8007f02:	400a      	ands	r2, r1
 8007f04:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2241      	movs	r2, #65	@ 0x41
 8007f16:	2120      	movs	r1, #32
 8007f18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2242      	movs	r2, #66	@ 0x42
 8007f1e:	2100      	movs	r1, #0
 8007f20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2240      	movs	r2, #64	@ 0x40
 8007f26:	2100      	movs	r1, #0
 8007f28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	0018      	movs	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	b004      	add	sp, #16
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	fe00e800 	.word	0xfe00e800

08007f3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f3c:	b590      	push	{r4, r7, lr}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	0008      	movs	r0, r1
 8007f46:	0011      	movs	r1, r2
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	240a      	movs	r4, #10
 8007f4c:	193b      	adds	r3, r7, r4
 8007f4e:	1c02      	adds	r2, r0, #0
 8007f50:	801a      	strh	r2, [r3, #0]
 8007f52:	2009      	movs	r0, #9
 8007f54:	183b      	adds	r3, r7, r0
 8007f56:	1c0a      	adds	r2, r1, #0
 8007f58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	6a3a      	ldr	r2, [r7, #32]
 8007f62:	0d51      	lsrs	r1, r2, #21
 8007f64:	2280      	movs	r2, #128	@ 0x80
 8007f66:	00d2      	lsls	r2, r2, #3
 8007f68:	400a      	ands	r2, r1
 8007f6a:	490e      	ldr	r1, [pc, #56]	@ (8007fa4 <I2C_TransferConfig+0x68>)
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	43d2      	mvns	r2, r2
 8007f70:	401a      	ands	r2, r3
 8007f72:	0011      	movs	r1, r2
 8007f74:	193b      	adds	r3, r7, r4
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	059b      	lsls	r3, r3, #22
 8007f7a:	0d9a      	lsrs	r2, r3, #22
 8007f7c:	183b      	adds	r3, r7, r0
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	0418      	lsls	r0, r3, #16
 8007f82:	23ff      	movs	r3, #255	@ 0xff
 8007f84:	041b      	lsls	r3, r3, #16
 8007f86:	4003      	ands	r3, r0
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007f9a:	46c0      	nop			@ (mov r8, r8)
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b005      	add	sp, #20
 8007fa0:	bd90      	pop	{r4, r7, pc}
 8007fa2:	46c0      	nop			@ (mov r8, r8)
 8007fa4:	03ff63ff 	.word	0x03ff63ff

08007fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2241      	movs	r2, #65	@ 0x41
 8007fb6:	5c9b      	ldrb	r3, [r3, r2]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d138      	bne.n	8008030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2240      	movs	r2, #64	@ 0x40
 8007fc2:	5c9b      	ldrb	r3, [r3, r2]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e032      	b.n	8008032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2240      	movs	r2, #64	@ 0x40
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2241      	movs	r2, #65	@ 0x41
 8007fd8:	2124      	movs	r1, #36	@ 0x24
 8007fda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	438a      	bics	r2, r1
 8007fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4911      	ldr	r1, [pc, #68]	@ (800803c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007ff8:	400a      	ands	r2, r1
 8007ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6819      	ldr	r1, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2101      	movs	r1, #1
 8008018:	430a      	orrs	r2, r1
 800801a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2241      	movs	r2, #65	@ 0x41
 8008020:	2120      	movs	r1, #32
 8008022:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2240      	movs	r2, #64	@ 0x40
 8008028:	2100      	movs	r1, #0
 800802a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	e000      	b.n	8008032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008030:	2302      	movs	r3, #2
  }
}
 8008032:	0018      	movs	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	b002      	add	sp, #8
 8008038:	bd80      	pop	{r7, pc}
 800803a:	46c0      	nop			@ (mov r8, r8)
 800803c:	ffffefff 	.word	0xffffefff

08008040 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2241      	movs	r2, #65	@ 0x41
 800804e:	5c9b      	ldrb	r3, [r3, r2]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b20      	cmp	r3, #32
 8008054:	d139      	bne.n	80080ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2240      	movs	r2, #64	@ 0x40
 800805a:	5c9b      	ldrb	r3, [r3, r2]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008060:	2302      	movs	r3, #2
 8008062:	e033      	b.n	80080cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2240      	movs	r2, #64	@ 0x40
 8008068:	2101      	movs	r1, #1
 800806a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2241      	movs	r2, #65	@ 0x41
 8008070:	2124      	movs	r1, #36	@ 0x24
 8008072:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2101      	movs	r1, #1
 8008080:	438a      	bics	r2, r1
 8008082:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a11      	ldr	r2, [pc, #68]	@ (80080d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008090:	4013      	ands	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2101      	movs	r1, #1
 80080b2:	430a      	orrs	r2, r1
 80080b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2241      	movs	r2, #65	@ 0x41
 80080ba:	2120      	movs	r1, #32
 80080bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2240      	movs	r2, #64	@ 0x40
 80080c2:	2100      	movs	r1, #0
 80080c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e000      	b.n	80080cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080ca:	2302      	movs	r3, #2
  }
}
 80080cc:	0018      	movs	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b004      	add	sp, #16
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	fffff0ff 	.word	0xfffff0ff

080080d8 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80080dc:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <HAL_PWR_DisablePVD+0x18>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4b03      	ldr	r3, [pc, #12]	@ (80080f0 <HAL_PWR_DisablePVD+0x18>)
 80080e2:	2110      	movs	r1, #16
 80080e4:	438a      	bics	r2, r1
 80080e6:	601a      	str	r2, [r3, #0]
}
 80080e8:	46c0      	nop			@ (mov r8, r8)
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	46c0      	nop			@ (mov r8, r8)
 80080f0:	40007000 	.word	0x40007000

080080f4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	000a      	movs	r2, r1
 80080fe:	1cfb      	adds	r3, r7, #3
 8008100:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008106:	4b23      	ldr	r3, [pc, #140]	@ (8008194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	2380      	movs	r3, #128	@ 0x80
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4013      	ands	r3, r2
 8008110:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008112:	4b21      	ldr	r3, [pc, #132]	@ (8008198 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	2201      	movs	r2, #1
 8008118:	4013      	ands	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <HAL_PWR_EnterSLEEPMode+0x40>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d005      	beq.n	8008134 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008128:	4b1a      	ldr	r3, [pc, #104]	@ (8008194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	4b19      	ldr	r3, [pc, #100]	@ (8008194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800812e:	491b      	ldr	r1, [pc, #108]	@ (800819c <HAL_PWR_EnterSLEEPMode+0xa8>)
 8008130:	400a      	ands	r2, r1
 8008132:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008134:	4b17      	ldr	r3, [pc, #92]	@ (8008194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2203      	movs	r2, #3
 800813e:	4393      	bics	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800814a:	4b12      	ldr	r3, [pc, #72]	@ (8008194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008150:	4b13      	ldr	r3, [pc, #76]	@ (80081a0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	4b12      	ldr	r3, [pc, #72]	@ (80081a0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008156:	2104      	movs	r1, #4
 8008158:	438a      	bics	r2, r1
 800815a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800815c:	1cfb      	adds	r3, r7, #3
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008164:	bf30      	wfi
 8008166:	e002      	b.n	800816e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008168:	bf40      	sev
    __WFE();
 800816a:	bf20      	wfe
    __WFE();
 800816c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d009      	beq.n	8008188 <HAL_PWR_EnterSLEEPMode+0x94>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d006      	beq.n	8008188 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800817a:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008180:	2180      	movs	r1, #128	@ 0x80
 8008182:	0089      	lsls	r1, r1, #2
 8008184:	430a      	orrs	r2, r1
 8008186:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8008188:	46c0      	nop			@ (mov r8, r8)

}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	46bd      	mov	sp, r7
 800818e:	b006      	add	sp, #24
 8008190:	bd80      	pop	{r7, pc}
 8008192:	46c0      	nop			@ (mov r8, r8)
 8008194:	40007000 	.word	0x40007000
 8008198:	40010000 	.word	0x40010000
 800819c:	fffffdff 	.word	0xfffffdff
 80081a0:	e000ed00 	.word	0xe000ed00

080081a4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	000a      	movs	r2, r1
 80081ae:	1cfb      	adds	r3, r7, #3
 80081b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80081b6:	4b25      	ldr	r3, [pc, #148]	@ (800824c <HAL_PWR_EnterSTOPMode+0xa8>)
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	2380      	movs	r3, #128	@ 0x80
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4013      	ands	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80081c2:	4b23      	ldr	r3, [pc, #140]	@ (8008250 <HAL_PWR_EnterSTOPMode+0xac>)
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	2201      	movs	r2, #1
 80081c8:	4013      	ands	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d008      	beq.n	80081e4 <HAL_PWR_EnterSTOPMode+0x40>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80081d8:	4b1c      	ldr	r3, [pc, #112]	@ (800824c <HAL_PWR_EnterSTOPMode+0xa8>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	4b1b      	ldr	r3, [pc, #108]	@ (800824c <HAL_PWR_EnterSTOPMode+0xa8>)
 80081de:	491d      	ldr	r1, [pc, #116]	@ (8008254 <HAL_PWR_EnterSTOPMode+0xb0>)
 80081e0:	400a      	ands	r2, r1
 80081e2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80081e4:	4b19      	ldr	r3, [pc, #100]	@ (800824c <HAL_PWR_EnterSTOPMode+0xa8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2203      	movs	r2, #3
 80081ee:	4393      	bics	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80081fa:	4b14      	ldr	r3, [pc, #80]	@ (800824c <HAL_PWR_EnterSTOPMode+0xa8>)
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008200:	4b15      	ldr	r3, [pc, #84]	@ (8008258 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	4b14      	ldr	r3, [pc, #80]	@ (8008258 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008206:	2104      	movs	r1, #4
 8008208:	430a      	orrs	r2, r1
 800820a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800820c:	1cfb      	adds	r3, r7, #3
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008214:	bf30      	wfi
 8008216:	e002      	b.n	800821e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008218:	bf40      	sev
    __WFE();
 800821a:	bf20      	wfe
    __WFE();
 800821c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800821e:	4b0e      	ldr	r3, [pc, #56]	@ (8008258 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008220:	691a      	ldr	r2, [r3, #16]
 8008222:	4b0d      	ldr	r3, [pc, #52]	@ (8008258 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008224:	2104      	movs	r1, #4
 8008226:	438a      	bics	r2, r1
 8008228:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d009      	beq.n	8008244 <HAL_PWR_EnterSTOPMode+0xa0>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d006      	beq.n	8008244 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008236:	4b05      	ldr	r3, [pc, #20]	@ (800824c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	4b04      	ldr	r3, [pc, #16]	@ (800824c <HAL_PWR_EnterSTOPMode+0xa8>)
 800823c:	2180      	movs	r1, #128	@ 0x80
 800823e:	0089      	lsls	r1, r1, #2
 8008240:	430a      	orrs	r2, r1
 8008242:	601a      	str	r2, [r3, #0]
  }
}
 8008244:	46c0      	nop			@ (mov r8, r8)
 8008246:	46bd      	mov	sp, r7
 8008248:	b006      	add	sp, #24
 800824a:	bd80      	pop	{r7, pc}
 800824c:	40007000 	.word	0x40007000
 8008250:	40010000 	.word	0x40010000
 8008254:	fffffdff 	.word	0xfffffdff
 8008258:	e000ed00 	.word	0xe000ed00

0800825c <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008260:	4b04      	ldr	r3, [pc, #16]	@ (8008274 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	4b03      	ldr	r3, [pc, #12]	@ (8008274 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008266:	2180      	movs	r1, #128	@ 0x80
 8008268:	00c9      	lsls	r1, r1, #3
 800826a:	430a      	orrs	r2, r1
 800826c:	601a      	str	r2, [r3, #0]
}
 800826e:	46c0      	nop			@ (mov r8, r8)
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	40007000 	.word	0x40007000

08008278 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 800827c:	4b04      	ldr	r3, [pc, #16]	@ (8008290 <HAL_PWREx_EnableUltraLowPower+0x18>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	4b03      	ldr	r3, [pc, #12]	@ (8008290 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008282:	2180      	movs	r1, #128	@ 0x80
 8008284:	0089      	lsls	r1, r1, #2
 8008286:	430a      	orrs	r2, r1
 8008288:	601a      	str	r2, [r3, #0]
}
 800828a:	46c0      	nop			@ (mov r8, r8)
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	40007000 	.word	0x40007000

08008294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008294:	b5b0      	push	{r4, r5, r7, lr}
 8008296:	b08a      	sub	sp, #40	@ 0x28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d102      	bne.n	80082a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	f000 fbbf 	bl	8008a26 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082a8:	4bc9      	ldr	r3, [pc, #804]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	220c      	movs	r2, #12
 80082ae:	4013      	ands	r3, r2
 80082b0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082b2:	4bc7      	ldr	r3, [pc, #796]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	2380      	movs	r3, #128	@ 0x80
 80082b8:	025b      	lsls	r3, r3, #9
 80082ba:	4013      	ands	r3, r2
 80082bc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	4013      	ands	r3, r2
 80082c6:	d100      	bne.n	80082ca <HAL_RCC_OscConfig+0x36>
 80082c8:	e07e      	b.n	80083c8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d007      	beq.n	80082e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	2b0c      	cmp	r3, #12
 80082d4:	d112      	bne.n	80082fc <HAL_RCC_OscConfig+0x68>
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	2380      	movs	r3, #128	@ 0x80
 80082da:	025b      	lsls	r3, r3, #9
 80082dc:	429a      	cmp	r2, r3
 80082de:	d10d      	bne.n	80082fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e0:	4bbb      	ldr	r3, [pc, #748]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	2380      	movs	r3, #128	@ 0x80
 80082e6:	029b      	lsls	r3, r3, #10
 80082e8:	4013      	ands	r3, r2
 80082ea:	d100      	bne.n	80082ee <HAL_RCC_OscConfig+0x5a>
 80082ec:	e06b      	b.n	80083c6 <HAL_RCC_OscConfig+0x132>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d167      	bne.n	80083c6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f000 fb95 	bl	8008a26 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	2380      	movs	r3, #128	@ 0x80
 8008302:	025b      	lsls	r3, r3, #9
 8008304:	429a      	cmp	r2, r3
 8008306:	d107      	bne.n	8008318 <HAL_RCC_OscConfig+0x84>
 8008308:	4bb1      	ldr	r3, [pc, #708]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4bb0      	ldr	r3, [pc, #704]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800830e:	2180      	movs	r1, #128	@ 0x80
 8008310:	0249      	lsls	r1, r1, #9
 8008312:	430a      	orrs	r2, r1
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	e027      	b.n	8008368 <HAL_RCC_OscConfig+0xd4>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	23a0      	movs	r3, #160	@ 0xa0
 800831e:	02db      	lsls	r3, r3, #11
 8008320:	429a      	cmp	r2, r3
 8008322:	d10e      	bne.n	8008342 <HAL_RCC_OscConfig+0xae>
 8008324:	4baa      	ldr	r3, [pc, #680]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4ba9      	ldr	r3, [pc, #676]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800832a:	2180      	movs	r1, #128	@ 0x80
 800832c:	02c9      	lsls	r1, r1, #11
 800832e:	430a      	orrs	r2, r1
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	4ba7      	ldr	r3, [pc, #668]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	4ba6      	ldr	r3, [pc, #664]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008338:	2180      	movs	r1, #128	@ 0x80
 800833a:	0249      	lsls	r1, r1, #9
 800833c:	430a      	orrs	r2, r1
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e012      	b.n	8008368 <HAL_RCC_OscConfig+0xd4>
 8008342:	4ba3      	ldr	r3, [pc, #652]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4ba2      	ldr	r3, [pc, #648]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008348:	49a2      	ldr	r1, [pc, #648]	@ (80085d4 <HAL_RCC_OscConfig+0x340>)
 800834a:	400a      	ands	r2, r1
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	4ba0      	ldr	r3, [pc, #640]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	2380      	movs	r3, #128	@ 0x80
 8008354:	025b      	lsls	r3, r3, #9
 8008356:	4013      	ands	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4b9c      	ldr	r3, [pc, #624]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4b9b      	ldr	r3, [pc, #620]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008362:	499d      	ldr	r1, [pc, #628]	@ (80085d8 <HAL_RCC_OscConfig+0x344>)
 8008364:	400a      	ands	r2, r1
 8008366:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d015      	beq.n	800839c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008370:	f7fc fa93 	bl	800489a <HAL_GetTick>
 8008374:	0003      	movs	r3, r0
 8008376:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008378:	e009      	b.n	800838e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800837a:	f7fc fa8e 	bl	800489a <HAL_GetTick>
 800837e:	0002      	movs	r2, r0
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b64      	cmp	r3, #100	@ 0x64
 8008386:	d902      	bls.n	800838e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	f000 fb4c 	bl	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800838e:	4b90      	ldr	r3, [pc, #576]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	2380      	movs	r3, #128	@ 0x80
 8008394:	029b      	lsls	r3, r3, #10
 8008396:	4013      	ands	r3, r2
 8008398:	d0ef      	beq.n	800837a <HAL_RCC_OscConfig+0xe6>
 800839a:	e015      	b.n	80083c8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800839c:	f7fc fa7d 	bl	800489a <HAL_GetTick>
 80083a0:	0003      	movs	r3, r0
 80083a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083a6:	f7fc fa78 	bl	800489a <HAL_GetTick>
 80083aa:	0002      	movs	r2, r0
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b64      	cmp	r3, #100	@ 0x64
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e336      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083b8:	4b85      	ldr	r3, [pc, #532]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	2380      	movs	r3, #128	@ 0x80
 80083be:	029b      	lsls	r3, r3, #10
 80083c0:	4013      	ands	r3, r2
 80083c2:	d1f0      	bne.n	80083a6 <HAL_RCC_OscConfig+0x112>
 80083c4:	e000      	b.n	80083c8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2202      	movs	r2, #2
 80083ce:	4013      	ands	r3, r2
 80083d0:	d100      	bne.n	80083d4 <HAL_RCC_OscConfig+0x140>
 80083d2:	e099      	b.n	8008508 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	2220      	movs	r2, #32
 80083de:	4013      	ands	r3, r2
 80083e0:	d009      	beq.n	80083f6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80083e2:	4b7b      	ldr	r3, [pc, #492]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4b7a      	ldr	r3, [pc, #488]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80083e8:	2120      	movs	r1, #32
 80083ea:	430a      	orrs	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	2220      	movs	r2, #32
 80083f2:	4393      	bics	r3, r2
 80083f4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d005      	beq.n	8008408 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	2b0c      	cmp	r3, #12
 8008400:	d13e      	bne.n	8008480 <HAL_RCC_OscConfig+0x1ec>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d13b      	bne.n	8008480 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008408:	4b71      	ldr	r3, [pc, #452]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2204      	movs	r2, #4
 800840e:	4013      	ands	r3, r2
 8008410:	d004      	beq.n	800841c <HAL_RCC_OscConfig+0x188>
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e304      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800841c:	4b6c      	ldr	r3, [pc, #432]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	4a6e      	ldr	r2, [pc, #440]	@ (80085dc <HAL_RCC_OscConfig+0x348>)
 8008422:	4013      	ands	r3, r2
 8008424:	0019      	movs	r1, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	021a      	lsls	r2, r3, #8
 800842c:	4b68      	ldr	r3, [pc, #416]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800842e:	430a      	orrs	r2, r1
 8008430:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008432:	4b67      	ldr	r3, [pc, #412]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2209      	movs	r2, #9
 8008438:	4393      	bics	r3, r2
 800843a:	0019      	movs	r1, r3
 800843c:	4b64      	ldr	r3, [pc, #400]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800843e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008440:	430a      	orrs	r2, r1
 8008442:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008444:	f000 fc42 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 8008448:	0001      	movs	r1, r0
 800844a:	4b61      	ldr	r3, [pc, #388]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	091b      	lsrs	r3, r3, #4
 8008450:	220f      	movs	r2, #15
 8008452:	4013      	ands	r3, r2
 8008454:	4a62      	ldr	r2, [pc, #392]	@ (80085e0 <HAL_RCC_OscConfig+0x34c>)
 8008456:	5cd3      	ldrb	r3, [r2, r3]
 8008458:	000a      	movs	r2, r1
 800845a:	40da      	lsrs	r2, r3
 800845c:	4b61      	ldr	r3, [pc, #388]	@ (80085e4 <HAL_RCC_OscConfig+0x350>)
 800845e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008460:	4b61      	ldr	r3, [pc, #388]	@ (80085e8 <HAL_RCC_OscConfig+0x354>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2513      	movs	r5, #19
 8008466:	197c      	adds	r4, r7, r5
 8008468:	0018      	movs	r0, r3
 800846a:	f7fc fa0d 	bl	8004888 <HAL_InitTick>
 800846e:	0003      	movs	r3, r0
 8008470:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008472:	197b      	adds	r3, r7, r5
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d046      	beq.n	8008508 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800847a:	197b      	adds	r3, r7, r5
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	e2d2      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	2b00      	cmp	r3, #0
 8008484:	d027      	beq.n	80084d6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008486:	4b52      	ldr	r3, [pc, #328]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2209      	movs	r2, #9
 800848c:	4393      	bics	r3, r2
 800848e:	0019      	movs	r1, r3
 8008490:	4b4f      	ldr	r3, [pc, #316]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008494:	430a      	orrs	r2, r1
 8008496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008498:	f7fc f9ff 	bl	800489a <HAL_GetTick>
 800849c:	0003      	movs	r3, r0
 800849e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084a2:	f7fc f9fa 	bl	800489a <HAL_GetTick>
 80084a6:	0002      	movs	r2, r0
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e2b8      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084b4:	4b46      	ldr	r3, [pc, #280]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2204      	movs	r2, #4
 80084ba:	4013      	ands	r3, r2
 80084bc:	d0f1      	beq.n	80084a2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084be:	4b44      	ldr	r3, [pc, #272]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	4a46      	ldr	r2, [pc, #280]	@ (80085dc <HAL_RCC_OscConfig+0x348>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	0019      	movs	r1, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	021a      	lsls	r2, r3, #8
 80084ce:	4b40      	ldr	r3, [pc, #256]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80084d0:	430a      	orrs	r2, r1
 80084d2:	605a      	str	r2, [r3, #4]
 80084d4:	e018      	b.n	8008508 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084d6:	4b3e      	ldr	r3, [pc, #248]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4b3d      	ldr	r3, [pc, #244]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80084dc:	2101      	movs	r1, #1
 80084de:	438a      	bics	r2, r1
 80084e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084e2:	f7fc f9da 	bl	800489a <HAL_GetTick>
 80084e6:	0003      	movs	r3, r0
 80084e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084ea:	e008      	b.n	80084fe <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084ec:	f7fc f9d5 	bl	800489a <HAL_GetTick>
 80084f0:	0002      	movs	r2, r0
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d901      	bls.n	80084fe <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e293      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084fe:	4b34      	ldr	r3, [pc, #208]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2204      	movs	r2, #4
 8008504:	4013      	ands	r3, r2
 8008506:	d1f1      	bne.n	80084ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2210      	movs	r2, #16
 800850e:	4013      	ands	r3, r2
 8008510:	d100      	bne.n	8008514 <HAL_RCC_OscConfig+0x280>
 8008512:	e0a2      	b.n	800865a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d140      	bne.n	800859c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800851a:	4b2d      	ldr	r3, [pc, #180]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	2380      	movs	r3, #128	@ 0x80
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4013      	ands	r3, r2
 8008524:	d005      	beq.n	8008532 <HAL_RCC_OscConfig+0x29e>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e279      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008532:	4b27      	ldr	r3, [pc, #156]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	4a2d      	ldr	r2, [pc, #180]	@ (80085ec <HAL_RCC_OscConfig+0x358>)
 8008538:	4013      	ands	r3, r2
 800853a:	0019      	movs	r1, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008540:	4b23      	ldr	r3, [pc, #140]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008542:	430a      	orrs	r2, r1
 8008544:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008546:	4b22      	ldr	r3, [pc, #136]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	0a19      	lsrs	r1, r3, #8
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	061a      	lsls	r2, r3, #24
 8008554:	4b1e      	ldr	r3, [pc, #120]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 8008556:	430a      	orrs	r2, r1
 8008558:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855e:	0b5b      	lsrs	r3, r3, #13
 8008560:	3301      	adds	r3, #1
 8008562:	2280      	movs	r2, #128	@ 0x80
 8008564:	0212      	lsls	r2, r2, #8
 8008566:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008568:	4b19      	ldr	r3, [pc, #100]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	091b      	lsrs	r3, r3, #4
 800856e:	210f      	movs	r1, #15
 8008570:	400b      	ands	r3, r1
 8008572:	491b      	ldr	r1, [pc, #108]	@ (80085e0 <HAL_RCC_OscConfig+0x34c>)
 8008574:	5ccb      	ldrb	r3, [r1, r3]
 8008576:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008578:	4b1a      	ldr	r3, [pc, #104]	@ (80085e4 <HAL_RCC_OscConfig+0x350>)
 800857a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800857c:	4b1a      	ldr	r3, [pc, #104]	@ (80085e8 <HAL_RCC_OscConfig+0x354>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2513      	movs	r5, #19
 8008582:	197c      	adds	r4, r7, r5
 8008584:	0018      	movs	r0, r3
 8008586:	f7fc f97f 	bl	8004888 <HAL_InitTick>
 800858a:	0003      	movs	r3, r0
 800858c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800858e:	197b      	adds	r3, r7, r5
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d061      	beq.n	800865a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008596:	197b      	adds	r3, r7, r5
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	e244      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d040      	beq.n	8008626 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80085a4:	4b0a      	ldr	r3, [pc, #40]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	4b09      	ldr	r3, [pc, #36]	@ (80085d0 <HAL_RCC_OscConfig+0x33c>)
 80085aa:	2180      	movs	r1, #128	@ 0x80
 80085ac:	0049      	lsls	r1, r1, #1
 80085ae:	430a      	orrs	r2, r1
 80085b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085b2:	f7fc f972 	bl	800489a <HAL_GetTick>
 80085b6:	0003      	movs	r3, r0
 80085b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80085ba:	e019      	b.n	80085f0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085bc:	f7fc f96d 	bl	800489a <HAL_GetTick>
 80085c0:	0002      	movs	r2, r0
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d912      	bls.n	80085f0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e22b      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
 80085ce:	46c0      	nop			@ (mov r8, r8)
 80085d0:	40021000 	.word	0x40021000
 80085d4:	fffeffff 	.word	0xfffeffff
 80085d8:	fffbffff 	.word	0xfffbffff
 80085dc:	ffffe0ff 	.word	0xffffe0ff
 80085e0:	0801daec 	.word	0x0801daec
 80085e4:	20000070 	.word	0x20000070
 80085e8:	20000074 	.word	0x20000074
 80085ec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80085f0:	4bca      	ldr	r3, [pc, #808]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	2380      	movs	r3, #128	@ 0x80
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4013      	ands	r3, r2
 80085fa:	d0df      	beq.n	80085bc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085fc:	4bc7      	ldr	r3, [pc, #796]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4ac7      	ldr	r2, [pc, #796]	@ (8008920 <HAL_RCC_OscConfig+0x68c>)
 8008602:	4013      	ands	r3, r2
 8008604:	0019      	movs	r1, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800860a:	4bc4      	ldr	r3, [pc, #784]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800860c:	430a      	orrs	r2, r1
 800860e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008610:	4bc2      	ldr	r3, [pc, #776]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	0a19      	lsrs	r1, r3, #8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	061a      	lsls	r2, r3, #24
 800861e:	4bbf      	ldr	r3, [pc, #764]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008620:	430a      	orrs	r2, r1
 8008622:	605a      	str	r2, [r3, #4]
 8008624:	e019      	b.n	800865a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008626:	4bbd      	ldr	r3, [pc, #756]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4bbc      	ldr	r3, [pc, #752]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800862c:	49bd      	ldr	r1, [pc, #756]	@ (8008924 <HAL_RCC_OscConfig+0x690>)
 800862e:	400a      	ands	r2, r1
 8008630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008632:	f7fc f932 	bl	800489a <HAL_GetTick>
 8008636:	0003      	movs	r3, r0
 8008638:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800863a:	e008      	b.n	800864e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800863c:	f7fc f92d 	bl	800489a <HAL_GetTick>
 8008640:	0002      	movs	r2, r0
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e1eb      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800864e:	4bb3      	ldr	r3, [pc, #716]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	2380      	movs	r3, #128	@ 0x80
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4013      	ands	r3, r2
 8008658:	d1f0      	bne.n	800863c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2208      	movs	r2, #8
 8008660:	4013      	ands	r3, r2
 8008662:	d036      	beq.n	80086d2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d019      	beq.n	80086a0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800866c:	4bab      	ldr	r3, [pc, #684]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800866e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008670:	4baa      	ldr	r3, [pc, #680]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008672:	2101      	movs	r1, #1
 8008674:	430a      	orrs	r2, r1
 8008676:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008678:	f7fc f90f 	bl	800489a <HAL_GetTick>
 800867c:	0003      	movs	r3, r0
 800867e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008680:	e008      	b.n	8008694 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008682:	f7fc f90a 	bl	800489a <HAL_GetTick>
 8008686:	0002      	movs	r2, r0
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e1c8      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008694:	4ba1      	ldr	r3, [pc, #644]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008698:	2202      	movs	r2, #2
 800869a:	4013      	ands	r3, r2
 800869c:	d0f1      	beq.n	8008682 <HAL_RCC_OscConfig+0x3ee>
 800869e:	e018      	b.n	80086d2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086a0:	4b9e      	ldr	r3, [pc, #632]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80086a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086a4:	4b9d      	ldr	r3, [pc, #628]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80086a6:	2101      	movs	r1, #1
 80086a8:	438a      	bics	r2, r1
 80086aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ac:	f7fc f8f5 	bl	800489a <HAL_GetTick>
 80086b0:	0003      	movs	r3, r0
 80086b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086b6:	f7fc f8f0 	bl	800489a <HAL_GetTick>
 80086ba:	0002      	movs	r2, r0
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e1ae      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086c8:	4b94      	ldr	r3, [pc, #592]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80086ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086cc:	2202      	movs	r2, #2
 80086ce:	4013      	ands	r3, r2
 80086d0:	d1f1      	bne.n	80086b6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2204      	movs	r2, #4
 80086d8:	4013      	ands	r3, r2
 80086da:	d100      	bne.n	80086de <HAL_RCC_OscConfig+0x44a>
 80086dc:	e0ae      	b.n	800883c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086de:	2023      	movs	r0, #35	@ 0x23
 80086e0:	183b      	adds	r3, r7, r0
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086e6:	4b8d      	ldr	r3, [pc, #564]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80086e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086ea:	2380      	movs	r3, #128	@ 0x80
 80086ec:	055b      	lsls	r3, r3, #21
 80086ee:	4013      	ands	r3, r2
 80086f0:	d109      	bne.n	8008706 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086f2:	4b8a      	ldr	r3, [pc, #552]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80086f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086f6:	4b89      	ldr	r3, [pc, #548]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80086f8:	2180      	movs	r1, #128	@ 0x80
 80086fa:	0549      	lsls	r1, r1, #21
 80086fc:	430a      	orrs	r2, r1
 80086fe:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8008700:	183b      	adds	r3, r7, r0
 8008702:	2201      	movs	r2, #1
 8008704:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008706:	4b88      	ldr	r3, [pc, #544]	@ (8008928 <HAL_RCC_OscConfig+0x694>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	2380      	movs	r3, #128	@ 0x80
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	4013      	ands	r3, r2
 8008710:	d11a      	bne.n	8008748 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008712:	4b85      	ldr	r3, [pc, #532]	@ (8008928 <HAL_RCC_OscConfig+0x694>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4b84      	ldr	r3, [pc, #528]	@ (8008928 <HAL_RCC_OscConfig+0x694>)
 8008718:	2180      	movs	r1, #128	@ 0x80
 800871a:	0049      	lsls	r1, r1, #1
 800871c:	430a      	orrs	r2, r1
 800871e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008720:	f7fc f8bb 	bl	800489a <HAL_GetTick>
 8008724:	0003      	movs	r3, r0
 8008726:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872a:	f7fc f8b6 	bl	800489a <HAL_GetTick>
 800872e:	0002      	movs	r2, r0
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b64      	cmp	r3, #100	@ 0x64
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e174      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800873c:	4b7a      	ldr	r3, [pc, #488]	@ (8008928 <HAL_RCC_OscConfig+0x694>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	2380      	movs	r3, #128	@ 0x80
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	4013      	ands	r3, r2
 8008746:	d0f0      	beq.n	800872a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	2380      	movs	r3, #128	@ 0x80
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	429a      	cmp	r2, r3
 8008752:	d107      	bne.n	8008764 <HAL_RCC_OscConfig+0x4d0>
 8008754:	4b71      	ldr	r3, [pc, #452]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008756:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008758:	4b70      	ldr	r3, [pc, #448]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800875a:	2180      	movs	r1, #128	@ 0x80
 800875c:	0049      	lsls	r1, r1, #1
 800875e:	430a      	orrs	r2, r1
 8008760:	651a      	str	r2, [r3, #80]	@ 0x50
 8008762:	e031      	b.n	80087c8 <HAL_RCC_OscConfig+0x534>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10c      	bne.n	8008786 <HAL_RCC_OscConfig+0x4f2>
 800876c:	4b6b      	ldr	r3, [pc, #428]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800876e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008770:	4b6a      	ldr	r3, [pc, #424]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008772:	496c      	ldr	r1, [pc, #432]	@ (8008924 <HAL_RCC_OscConfig+0x690>)
 8008774:	400a      	ands	r2, r1
 8008776:	651a      	str	r2, [r3, #80]	@ 0x50
 8008778:	4b68      	ldr	r3, [pc, #416]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800877a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800877c:	4b67      	ldr	r3, [pc, #412]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800877e:	496b      	ldr	r1, [pc, #428]	@ (800892c <HAL_RCC_OscConfig+0x698>)
 8008780:	400a      	ands	r2, r1
 8008782:	651a      	str	r2, [r3, #80]	@ 0x50
 8008784:	e020      	b.n	80087c8 <HAL_RCC_OscConfig+0x534>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	23a0      	movs	r3, #160	@ 0xa0
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	429a      	cmp	r2, r3
 8008790:	d10e      	bne.n	80087b0 <HAL_RCC_OscConfig+0x51c>
 8008792:	4b62      	ldr	r3, [pc, #392]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008794:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008796:	4b61      	ldr	r3, [pc, #388]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008798:	2180      	movs	r1, #128	@ 0x80
 800879a:	00c9      	lsls	r1, r1, #3
 800879c:	430a      	orrs	r2, r1
 800879e:	651a      	str	r2, [r3, #80]	@ 0x50
 80087a0:	4b5e      	ldr	r3, [pc, #376]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80087a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087a4:	4b5d      	ldr	r3, [pc, #372]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80087a6:	2180      	movs	r1, #128	@ 0x80
 80087a8:	0049      	lsls	r1, r1, #1
 80087aa:	430a      	orrs	r2, r1
 80087ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80087ae:	e00b      	b.n	80087c8 <HAL_RCC_OscConfig+0x534>
 80087b0:	4b5a      	ldr	r3, [pc, #360]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80087b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087b4:	4b59      	ldr	r3, [pc, #356]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80087b6:	495b      	ldr	r1, [pc, #364]	@ (8008924 <HAL_RCC_OscConfig+0x690>)
 80087b8:	400a      	ands	r2, r1
 80087ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80087bc:	4b57      	ldr	r3, [pc, #348]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80087be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087c0:	4b56      	ldr	r3, [pc, #344]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80087c2:	495a      	ldr	r1, [pc, #360]	@ (800892c <HAL_RCC_OscConfig+0x698>)
 80087c4:	400a      	ands	r2, r1
 80087c6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d015      	beq.n	80087fc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087d0:	f7fc f863 	bl	800489a <HAL_GetTick>
 80087d4:	0003      	movs	r3, r0
 80087d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087d8:	e009      	b.n	80087ee <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087da:	f7fc f85e 	bl	800489a <HAL_GetTick>
 80087de:	0002      	movs	r2, r0
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	4a52      	ldr	r2, [pc, #328]	@ (8008930 <HAL_RCC_OscConfig+0x69c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e11b      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087ee:	4b4b      	ldr	r3, [pc, #300]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80087f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087f2:	2380      	movs	r3, #128	@ 0x80
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4013      	ands	r3, r2
 80087f8:	d0ef      	beq.n	80087da <HAL_RCC_OscConfig+0x546>
 80087fa:	e014      	b.n	8008826 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087fc:	f7fc f84d 	bl	800489a <HAL_GetTick>
 8008800:	0003      	movs	r3, r0
 8008802:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008804:	e009      	b.n	800881a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008806:	f7fc f848 	bl	800489a <HAL_GetTick>
 800880a:	0002      	movs	r2, r0
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	4a47      	ldr	r2, [pc, #284]	@ (8008930 <HAL_RCC_OscConfig+0x69c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e105      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800881a:	4b40      	ldr	r3, [pc, #256]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800881c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800881e:	2380      	movs	r3, #128	@ 0x80
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4013      	ands	r3, r2
 8008824:	d1ef      	bne.n	8008806 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008826:	2323      	movs	r3, #35	@ 0x23
 8008828:	18fb      	adds	r3, r7, r3
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d105      	bne.n	800883c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008830:	4b3a      	ldr	r3, [pc, #232]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008834:	4b39      	ldr	r3, [pc, #228]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008836:	493f      	ldr	r1, [pc, #252]	@ (8008934 <HAL_RCC_OscConfig+0x6a0>)
 8008838:	400a      	ands	r2, r1
 800883a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2220      	movs	r2, #32
 8008842:	4013      	ands	r3, r2
 8008844:	d049      	beq.n	80088da <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d026      	beq.n	800889c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800884e:	4b33      	ldr	r3, [pc, #204]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	4b32      	ldr	r3, [pc, #200]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008854:	2101      	movs	r1, #1
 8008856:	430a      	orrs	r2, r1
 8008858:	609a      	str	r2, [r3, #8]
 800885a:	4b30      	ldr	r3, [pc, #192]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800885c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800885e:	4b2f      	ldr	r3, [pc, #188]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008860:	2101      	movs	r1, #1
 8008862:	430a      	orrs	r2, r1
 8008864:	635a      	str	r2, [r3, #52]	@ 0x34
 8008866:	4b34      	ldr	r3, [pc, #208]	@ (8008938 <HAL_RCC_OscConfig+0x6a4>)
 8008868:	6a1a      	ldr	r2, [r3, #32]
 800886a:	4b33      	ldr	r3, [pc, #204]	@ (8008938 <HAL_RCC_OscConfig+0x6a4>)
 800886c:	2180      	movs	r1, #128	@ 0x80
 800886e:	0189      	lsls	r1, r1, #6
 8008870:	430a      	orrs	r2, r1
 8008872:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008874:	f7fc f811 	bl	800489a <HAL_GetTick>
 8008878:	0003      	movs	r3, r0
 800887a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800887c:	e008      	b.n	8008890 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800887e:	f7fc f80c 	bl	800489a <HAL_GetTick>
 8008882:	0002      	movs	r2, r0
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d901      	bls.n	8008890 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e0ca      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008890:	4b22      	ldr	r3, [pc, #136]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	2202      	movs	r2, #2
 8008896:	4013      	ands	r3, r2
 8008898:	d0f1      	beq.n	800887e <HAL_RCC_OscConfig+0x5ea>
 800889a:	e01e      	b.n	80088da <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800889c:	4b1f      	ldr	r3, [pc, #124]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	4b1e      	ldr	r3, [pc, #120]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80088a2:	2101      	movs	r1, #1
 80088a4:	438a      	bics	r2, r1
 80088a6:	609a      	str	r2, [r3, #8]
 80088a8:	4b23      	ldr	r3, [pc, #140]	@ (8008938 <HAL_RCC_OscConfig+0x6a4>)
 80088aa:	6a1a      	ldr	r2, [r3, #32]
 80088ac:	4b22      	ldr	r3, [pc, #136]	@ (8008938 <HAL_RCC_OscConfig+0x6a4>)
 80088ae:	4923      	ldr	r1, [pc, #140]	@ (800893c <HAL_RCC_OscConfig+0x6a8>)
 80088b0:	400a      	ands	r2, r1
 80088b2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b4:	f7fb fff1 	bl	800489a <HAL_GetTick>
 80088b8:	0003      	movs	r3, r0
 80088ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088bc:	e008      	b.n	80088d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088be:	f7fb ffec 	bl	800489a <HAL_GetTick>
 80088c2:	0002      	movs	r2, r0
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d901      	bls.n	80088d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e0aa      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088d0:	4b12      	ldr	r3, [pc, #72]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2202      	movs	r2, #2
 80088d6:	4013      	ands	r3, r2
 80088d8:	d1f1      	bne.n	80088be <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d100      	bne.n	80088e4 <HAL_RCC_OscConfig+0x650>
 80088e2:	e09f      	b.n	8008a24 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2b0c      	cmp	r3, #12
 80088e8:	d100      	bne.n	80088ec <HAL_RCC_OscConfig+0x658>
 80088ea:	e078      	b.n	80089de <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d159      	bne.n	80089a8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f4:	4b09      	ldr	r3, [pc, #36]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b08      	ldr	r3, [pc, #32]	@ (800891c <HAL_RCC_OscConfig+0x688>)
 80088fa:	4911      	ldr	r1, [pc, #68]	@ (8008940 <HAL_RCC_OscConfig+0x6ac>)
 80088fc:	400a      	ands	r2, r1
 80088fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008900:	f7fb ffcb 	bl	800489a <HAL_GetTick>
 8008904:	0003      	movs	r3, r0
 8008906:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008908:	e01c      	b.n	8008944 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890a:	f7fb ffc6 	bl	800489a <HAL_GetTick>
 800890e:	0002      	movs	r2, r0
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d915      	bls.n	8008944 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e084      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
 800891c:	40021000 	.word	0x40021000
 8008920:	ffff1fff 	.word	0xffff1fff
 8008924:	fffffeff 	.word	0xfffffeff
 8008928:	40007000 	.word	0x40007000
 800892c:	fffffbff 	.word	0xfffffbff
 8008930:	00001388 	.word	0x00001388
 8008934:	efffffff 	.word	0xefffffff
 8008938:	40010000 	.word	0x40010000
 800893c:	ffffdfff 	.word	0xffffdfff
 8008940:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008944:	4b3a      	ldr	r3, [pc, #232]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	2380      	movs	r3, #128	@ 0x80
 800894a:	049b      	lsls	r3, r3, #18
 800894c:	4013      	ands	r3, r2
 800894e:	d1dc      	bne.n	800890a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008950:	4b37      	ldr	r3, [pc, #220]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	4a37      	ldr	r2, [pc, #220]	@ (8008a34 <HAL_RCC_OscConfig+0x7a0>)
 8008956:	4013      	ands	r3, r2
 8008958:	0019      	movs	r1, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008968:	431a      	orrs	r2, r3
 800896a:	4b31      	ldr	r3, [pc, #196]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 800896c:	430a      	orrs	r2, r1
 800896e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008970:	4b2f      	ldr	r3, [pc, #188]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	4b2e      	ldr	r3, [pc, #184]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 8008976:	2180      	movs	r1, #128	@ 0x80
 8008978:	0449      	lsls	r1, r1, #17
 800897a:	430a      	orrs	r2, r1
 800897c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800897e:	f7fb ff8c 	bl	800489a <HAL_GetTick>
 8008982:	0003      	movs	r3, r0
 8008984:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008986:	e008      	b.n	800899a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008988:	f7fb ff87 	bl	800489a <HAL_GetTick>
 800898c:	0002      	movs	r2, r0
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e045      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800899a:	4b25      	ldr	r3, [pc, #148]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	2380      	movs	r3, #128	@ 0x80
 80089a0:	049b      	lsls	r3, r3, #18
 80089a2:	4013      	ands	r3, r2
 80089a4:	d0f0      	beq.n	8008988 <HAL_RCC_OscConfig+0x6f4>
 80089a6:	e03d      	b.n	8008a24 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a8:	4b21      	ldr	r3, [pc, #132]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4b20      	ldr	r3, [pc, #128]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 80089ae:	4922      	ldr	r1, [pc, #136]	@ (8008a38 <HAL_RCC_OscConfig+0x7a4>)
 80089b0:	400a      	ands	r2, r1
 80089b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b4:	f7fb ff71 	bl	800489a <HAL_GetTick>
 80089b8:	0003      	movs	r3, r0
 80089ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80089bc:	e008      	b.n	80089d0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089be:	f7fb ff6c 	bl	800489a <HAL_GetTick>
 80089c2:	0002      	movs	r2, r0
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e02a      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80089d0:	4b17      	ldr	r3, [pc, #92]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	2380      	movs	r3, #128	@ 0x80
 80089d6:	049b      	lsls	r3, r3, #18
 80089d8:	4013      	ands	r3, r2
 80089da:	d1f0      	bne.n	80089be <HAL_RCC_OscConfig+0x72a>
 80089dc:	e022      	b.n	8008a24 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e01d      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80089ea:	4b11      	ldr	r3, [pc, #68]	@ (8008a30 <HAL_RCC_OscConfig+0x79c>)
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	2380      	movs	r3, #128	@ 0x80
 80089f4:	025b      	lsls	r3, r3, #9
 80089f6:	401a      	ands	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d10f      	bne.n	8008a20 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	23f0      	movs	r3, #240	@ 0xf0
 8008a04:	039b      	lsls	r3, r3, #14
 8008a06:	401a      	ands	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d107      	bne.n	8008a20 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	23c0      	movs	r3, #192	@ 0xc0
 8008a14:	041b      	lsls	r3, r3, #16
 8008a16:	401a      	ands	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d001      	beq.n	8008a24 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	0018      	movs	r0, r3
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b00a      	add	sp, #40	@ 0x28
 8008a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a2e:	46c0      	nop			@ (mov r8, r8)
 8008a30:	40021000 	.word	0x40021000
 8008a34:	ff02ffff 	.word	0xff02ffff
 8008a38:	feffffff 	.word	0xfeffffff

08008a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a3c:	b5b0      	push	{r4, r5, r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e128      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a50:	4b96      	ldr	r3, [pc, #600]	@ (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2201      	movs	r2, #1
 8008a56:	4013      	ands	r3, r2
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d91e      	bls.n	8008a9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5e:	4b93      	ldr	r3, [pc, #588]	@ (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2201      	movs	r2, #1
 8008a64:	4393      	bics	r3, r2
 8008a66:	0019      	movs	r1, r3
 8008a68:	4b90      	ldr	r3, [pc, #576]	@ (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a70:	f7fb ff13 	bl	800489a <HAL_GetTick>
 8008a74:	0003      	movs	r3, r0
 8008a76:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a78:	e009      	b.n	8008a8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a7a:	f7fb ff0e 	bl	800489a <HAL_GetTick>
 8008a7e:	0002      	movs	r2, r0
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	4a8a      	ldr	r2, [pc, #552]	@ (8008cb0 <HAL_RCC_ClockConfig+0x274>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e109      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a8e:	4b87      	ldr	r3, [pc, #540]	@ (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2201      	movs	r2, #1
 8008a94:	4013      	ands	r3, r2
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d1ee      	bne.n	8008a7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	d009      	beq.n	8008aba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aa6:	4b83      	ldr	r3, [pc, #524]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	22f0      	movs	r2, #240	@ 0xf0
 8008aac:	4393      	bics	r3, r2
 8008aae:	0019      	movs	r1, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	4b7f      	ldr	r3, [pc, #508]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	d100      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0x8a>
 8008ac4:	e089      	b.n	8008bda <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d107      	bne.n	8008ade <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ace:	4b79      	ldr	r3, [pc, #484]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	2380      	movs	r3, #128	@ 0x80
 8008ad4:	029b      	lsls	r3, r3, #10
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	d120      	bne.n	8008b1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e0e1      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d107      	bne.n	8008af6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ae6:	4b73      	ldr	r3, [pc, #460]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	2380      	movs	r3, #128	@ 0x80
 8008aec:	049b      	lsls	r3, r3, #18
 8008aee:	4013      	ands	r3, r2
 8008af0:	d114      	bne.n	8008b1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e0d5      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d106      	bne.n	8008b0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008afe:	4b6d      	ldr	r3, [pc, #436]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2204      	movs	r2, #4
 8008b04:	4013      	ands	r3, r2
 8008b06:	d109      	bne.n	8008b1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e0ca      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008b0c:	4b69      	ldr	r3, [pc, #420]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	2380      	movs	r3, #128	@ 0x80
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4013      	ands	r3, r2
 8008b16:	d101      	bne.n	8008b1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e0c2      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b1c:	4b65      	ldr	r3, [pc, #404]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	2203      	movs	r2, #3
 8008b22:	4393      	bics	r3, r2
 8008b24:	0019      	movs	r1, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	4b62      	ldr	r3, [pc, #392]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b30:	f7fb feb3 	bl	800489a <HAL_GetTick>
 8008b34:	0003      	movs	r3, r0
 8008b36:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d111      	bne.n	8008b64 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b40:	e009      	b.n	8008b56 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b42:	f7fb feaa 	bl	800489a <HAL_GetTick>
 8008b46:	0002      	movs	r2, r0
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	4a58      	ldr	r2, [pc, #352]	@ (8008cb0 <HAL_RCC_ClockConfig+0x274>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e0a5      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b56:	4b57      	ldr	r3, [pc, #348]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	220c      	movs	r2, #12
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d1ef      	bne.n	8008b42 <HAL_RCC_ClockConfig+0x106>
 8008b62:	e03a      	b.n	8008bda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d111      	bne.n	8008b90 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b6c:	e009      	b.n	8008b82 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b6e:	f7fb fe94 	bl	800489a <HAL_GetTick>
 8008b72:	0002      	movs	r2, r0
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	4a4d      	ldr	r2, [pc, #308]	@ (8008cb0 <HAL_RCC_ClockConfig+0x274>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e08f      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b82:	4b4c      	ldr	r3, [pc, #304]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	220c      	movs	r2, #12
 8008b88:	4013      	ands	r3, r2
 8008b8a:	2b0c      	cmp	r3, #12
 8008b8c:	d1ef      	bne.n	8008b6e <HAL_RCC_ClockConfig+0x132>
 8008b8e:	e024      	b.n	8008bda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d11b      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b98:	e009      	b.n	8008bae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b9a:	f7fb fe7e 	bl	800489a <HAL_GetTick>
 8008b9e:	0002      	movs	r2, r0
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	4a42      	ldr	r2, [pc, #264]	@ (8008cb0 <HAL_RCC_ClockConfig+0x274>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e079      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bae:	4b41      	ldr	r3, [pc, #260]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	220c      	movs	r2, #12
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d1ef      	bne.n	8008b9a <HAL_RCC_ClockConfig+0x15e>
 8008bba:	e00e      	b.n	8008bda <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bbc:	f7fb fe6d 	bl	800489a <HAL_GetTick>
 8008bc0:	0002      	movs	r2, r0
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	4a3a      	ldr	r2, [pc, #232]	@ (8008cb0 <HAL_RCC_ClockConfig+0x274>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e068      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008bd0:	4b38      	ldr	r3, [pc, #224]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	220c      	movs	r2, #12
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	d1f0      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bda:	4b34      	ldr	r3, [pc, #208]	@ (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2201      	movs	r2, #1
 8008be0:	4013      	ands	r3, r2
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d21e      	bcs.n	8008c26 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008be8:	4b30      	ldr	r3, [pc, #192]	@ (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2201      	movs	r2, #1
 8008bee:	4393      	bics	r3, r2
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008bfa:	f7fb fe4e 	bl	800489a <HAL_GetTick>
 8008bfe:	0003      	movs	r3, r0
 8008c00:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c02:	e009      	b.n	8008c18 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c04:	f7fb fe49 	bl	800489a <HAL_GetTick>
 8008c08:	0002      	movs	r2, r0
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	4a28      	ldr	r2, [pc, #160]	@ (8008cb0 <HAL_RCC_ClockConfig+0x274>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e044      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c18:	4b24      	ldr	r3, [pc, #144]	@ (8008cac <HAL_RCC_ClockConfig+0x270>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	4013      	ands	r3, r2
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d1ee      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	d009      	beq.n	8008c44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c30:	4b20      	ldr	r3, [pc, #128]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	4a20      	ldr	r2, [pc, #128]	@ (8008cb8 <HAL_RCC_ClockConfig+0x27c>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	0019      	movs	r1, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008c40:	430a      	orrs	r2, r1
 8008c42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2208      	movs	r2, #8
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	d00a      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c4e:	4b19      	ldr	r3, [pc, #100]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	4a1a      	ldr	r2, [pc, #104]	@ (8008cbc <HAL_RCC_ClockConfig+0x280>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	0019      	movs	r1, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	00da      	lsls	r2, r3, #3
 8008c5e:	4b15      	ldr	r3, [pc, #84]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008c60:	430a      	orrs	r2, r1
 8008c62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c64:	f000 f832 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 8008c68:	0001      	movs	r1, r0
 8008c6a:	4b12      	ldr	r3, [pc, #72]	@ (8008cb4 <HAL_RCC_ClockConfig+0x278>)
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	091b      	lsrs	r3, r3, #4
 8008c70:	220f      	movs	r2, #15
 8008c72:	4013      	ands	r3, r2
 8008c74:	4a12      	ldr	r2, [pc, #72]	@ (8008cc0 <HAL_RCC_ClockConfig+0x284>)
 8008c76:	5cd3      	ldrb	r3, [r2, r3]
 8008c78:	000a      	movs	r2, r1
 8008c7a:	40da      	lsrs	r2, r3
 8008c7c:	4b11      	ldr	r3, [pc, #68]	@ (8008cc4 <HAL_RCC_ClockConfig+0x288>)
 8008c7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008c80:	4b11      	ldr	r3, [pc, #68]	@ (8008cc8 <HAL_RCC_ClockConfig+0x28c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	250b      	movs	r5, #11
 8008c86:	197c      	adds	r4, r7, r5
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f7fb fdfd 	bl	8004888 <HAL_InitTick>
 8008c8e:	0003      	movs	r3, r0
 8008c90:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008c92:	197b      	adds	r3, r7, r5
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008c9a:	197b      	adds	r3, r7, r5
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	e000      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	b004      	add	sp, #16
 8008ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8008caa:	46c0      	nop			@ (mov r8, r8)
 8008cac:	40022000 	.word	0x40022000
 8008cb0:	00001388 	.word	0x00001388
 8008cb4:	40021000 	.word	0x40021000
 8008cb8:	fffff8ff 	.word	0xfffff8ff
 8008cbc:	ffffc7ff 	.word	0xffffc7ff
 8008cc0:	0801daec 	.word	0x0801daec
 8008cc4:	20000070 	.word	0x20000070
 8008cc8:	20000074 	.word	0x20000074

08008ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ccc:	b5b0      	push	{r4, r5, r7, lr}
 8008cce:	b08e      	sub	sp, #56	@ 0x38
 8008cd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8008e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cda:	230c      	movs	r3, #12
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b0c      	cmp	r3, #12
 8008ce0:	d014      	beq.n	8008d0c <HAL_RCC_GetSysClockFreq+0x40>
 8008ce2:	d900      	bls.n	8008ce6 <HAL_RCC_GetSysClockFreq+0x1a>
 8008ce4:	e07b      	b.n	8008dde <HAL_RCC_GetSysClockFreq+0x112>
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d002      	beq.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x24>
 8008cea:	2b08      	cmp	r3, #8
 8008cec:	d00b      	beq.n	8008d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8008cee:	e076      	b.n	8008dde <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008cf0:	4b44      	ldr	r3, [pc, #272]	@ (8008e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2210      	movs	r2, #16
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	d002      	beq.n	8008d00 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008cfa:	4b43      	ldr	r3, [pc, #268]	@ (8008e08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008cfc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008cfe:	e07c      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008d00:	4b42      	ldr	r3, [pc, #264]	@ (8008e0c <HAL_RCC_GetSysClockFreq+0x140>)
 8008d02:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008d04:	e079      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008d06:	4b42      	ldr	r3, [pc, #264]	@ (8008e10 <HAL_RCC_GetSysClockFreq+0x144>)
 8008d08:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008d0a:	e076      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	0c9a      	lsrs	r2, r3, #18
 8008d10:	230f      	movs	r3, #15
 8008d12:	401a      	ands	r2, r3
 8008d14:	4b3f      	ldr	r3, [pc, #252]	@ (8008e14 <HAL_RCC_GetSysClockFreq+0x148>)
 8008d16:	5c9b      	ldrb	r3, [r3, r2]
 8008d18:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	0d9a      	lsrs	r2, r3, #22
 8008d1e:	2303      	movs	r3, #3
 8008d20:	4013      	ands	r3, r2
 8008d22:	3301      	adds	r3, #1
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d26:	4b37      	ldr	r3, [pc, #220]	@ (8008e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	2380      	movs	r3, #128	@ 0x80
 8008d2c:	025b      	lsls	r3, r3, #9
 8008d2e:	4013      	ands	r3, r2
 8008d30:	d01a      	beq.n	8008d68 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	2300      	movs	r3, #0
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	4a35      	ldr	r2, [pc, #212]	@ (8008e10 <HAL_RCC_GetSysClockFreq+0x144>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	69b8      	ldr	r0, [r7, #24]
 8008d40:	69f9      	ldr	r1, [r7, #28]
 8008d42:	f7f7 fbe1 	bl	8000508 <__aeabi_lmul>
 8008d46:	0002      	movs	r2, r0
 8008d48:	000b      	movs	r3, r1
 8008d4a:	0010      	movs	r0, r2
 8008d4c:	0019      	movs	r1, r3
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f7f7 fbb5 	bl	80004c8 <__aeabi_uldivmod>
 8008d5e:	0002      	movs	r2, r0
 8008d60:	000b      	movs	r3, r1
 8008d62:	0013      	movs	r3, r2
 8008d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d66:	e037      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008d68:	4b26      	ldr	r3, [pc, #152]	@ (8008e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2210      	movs	r2, #16
 8008d6e:	4013      	ands	r3, r2
 8008d70:	d01a      	beq.n	8008da8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	60bb      	str	r3, [r7, #8]
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	4a23      	ldr	r2, [pc, #140]	@ (8008e08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	68b8      	ldr	r0, [r7, #8]
 8008d80:	68f9      	ldr	r1, [r7, #12]
 8008d82:	f7f7 fbc1 	bl	8000508 <__aeabi_lmul>
 8008d86:	0002      	movs	r2, r0
 8008d88:	000b      	movs	r3, r1
 8008d8a:	0010      	movs	r0, r2
 8008d8c:	0019      	movs	r1, r3
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	2300      	movs	r3, #0
 8008d94:	607b      	str	r3, [r7, #4]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f7f7 fb95 	bl	80004c8 <__aeabi_uldivmod>
 8008d9e:	0002      	movs	r2, r0
 8008da0:	000b      	movs	r3, r1
 8008da2:	0013      	movs	r3, r2
 8008da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da6:	e017      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	0018      	movs	r0, r3
 8008dac:	2300      	movs	r3, #0
 8008dae:	0019      	movs	r1, r3
 8008db0:	4a16      	ldr	r2, [pc, #88]	@ (8008e0c <HAL_RCC_GetSysClockFreq+0x140>)
 8008db2:	2300      	movs	r3, #0
 8008db4:	f7f7 fba8 	bl	8000508 <__aeabi_lmul>
 8008db8:	0002      	movs	r2, r0
 8008dba:	000b      	movs	r3, r1
 8008dbc:	0010      	movs	r0, r2
 8008dbe:	0019      	movs	r1, r3
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	001c      	movs	r4, r3
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	001d      	movs	r5, r3
 8008dc8:	0022      	movs	r2, r4
 8008dca:	002b      	movs	r3, r5
 8008dcc:	f7f7 fb7c 	bl	80004c8 <__aeabi_uldivmod>
 8008dd0:	0002      	movs	r2, r0
 8008dd2:	000b      	movs	r3, r1
 8008dd4:	0013      	movs	r3, r2
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dda:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008ddc:	e00d      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008dde:	4b09      	ldr	r3, [pc, #36]	@ (8008e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	0b5b      	lsrs	r3, r3, #13
 8008de4:	2207      	movs	r2, #7
 8008de6:	4013      	ands	r3, r2
 8008de8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	3301      	adds	r3, #1
 8008dee:	2280      	movs	r2, #128	@ 0x80
 8008df0:	0212      	lsls	r2, r2, #8
 8008df2:	409a      	lsls	r2, r3
 8008df4:	0013      	movs	r3, r2
 8008df6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008df8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	b00e      	add	sp, #56	@ 0x38
 8008e02:	bdb0      	pop	{r4, r5, r7, pc}
 8008e04:	40021000 	.word	0x40021000
 8008e08:	003d0900 	.word	0x003d0900
 8008e0c:	00f42400 	.word	0x00f42400
 8008e10:	007a1200 	.word	0x007a1200
 8008e14:	0801db04 	.word	0x0801db04

08008e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e1c:	4b02      	ldr	r3, [pc, #8]	@ (8008e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
}
 8008e20:	0018      	movs	r0, r3
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	46c0      	nop			@ (mov r8, r8)
 8008e28:	20000070 	.word	0x20000070

08008e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e30:	f7ff fff2 	bl	8008e18 <HAL_RCC_GetHCLKFreq>
 8008e34:	0001      	movs	r1, r0
 8008e36:	4b06      	ldr	r3, [pc, #24]	@ (8008e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	0a1b      	lsrs	r3, r3, #8
 8008e3c:	2207      	movs	r2, #7
 8008e3e:	4013      	ands	r3, r2
 8008e40:	4a04      	ldr	r2, [pc, #16]	@ (8008e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	40d9      	lsrs	r1, r3
 8008e46:	000b      	movs	r3, r1
}
 8008e48:	0018      	movs	r0, r3
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	46c0      	nop			@ (mov r8, r8)
 8008e50:	40021000 	.word	0x40021000
 8008e54:	0801dafc 	.word	0x0801dafc

08008e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e5c:	f7ff ffdc 	bl	8008e18 <HAL_RCC_GetHCLKFreq>
 8008e60:	0001      	movs	r1, r0
 8008e62:	4b06      	ldr	r3, [pc, #24]	@ (8008e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	0adb      	lsrs	r3, r3, #11
 8008e68:	2207      	movs	r2, #7
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	4a04      	ldr	r2, [pc, #16]	@ (8008e80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e6e:	5cd3      	ldrb	r3, [r2, r3]
 8008e70:	40d9      	lsrs	r1, r3
 8008e72:	000b      	movs	r3, r1
}
 8008e74:	0018      	movs	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	46c0      	nop			@ (mov r8, r8)
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	0801dafc 	.word	0x0801dafc

08008e84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008e8c:	2017      	movs	r0, #23
 8008e8e:	183b      	adds	r3, r7, r0
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	d100      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8008e9e:	e0c2      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ea0:	4b98      	ldr	r3, [pc, #608]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ea2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ea4:	2380      	movs	r3, #128	@ 0x80
 8008ea6:	055b      	lsls	r3, r3, #21
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	d109      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eac:	4b95      	ldr	r3, [pc, #596]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eb0:	4b94      	ldr	r3, [pc, #592]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eb2:	2180      	movs	r1, #128	@ 0x80
 8008eb4:	0549      	lsls	r1, r1, #21
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8008eba:	183b      	adds	r3, r7, r0
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ec0:	4b91      	ldr	r3, [pc, #580]	@ (8009108 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	2380      	movs	r3, #128	@ 0x80
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	4013      	ands	r3, r2
 8008eca:	d11a      	bne.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8009108 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	4b8d      	ldr	r3, [pc, #564]	@ (8009108 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008ed2:	2180      	movs	r1, #128	@ 0x80
 8008ed4:	0049      	lsls	r1, r1, #1
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eda:	f7fb fcde 	bl	800489a <HAL_GetTick>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ee2:	e008      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ee4:	f7fb fcd9 	bl	800489a <HAL_GetTick>
 8008ee8:	0002      	movs	r2, r0
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	2b64      	cmp	r3, #100	@ 0x64
 8008ef0:	d901      	bls.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e102      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ef6:	4b84      	ldr	r3, [pc, #528]	@ (8009108 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	2380      	movs	r3, #128	@ 0x80
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	4013      	ands	r3, r2
 8008f00:	d0f0      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008f02:	4b80      	ldr	r3, [pc, #512]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	23c0      	movs	r3, #192	@ 0xc0
 8008f08:	039b      	lsls	r3, r3, #14
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	23c0      	movs	r3, #192	@ 0xc0
 8008f14:	039b      	lsls	r3, r3, #14
 8008f16:	4013      	ands	r3, r2
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d013      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	23c0      	movs	r3, #192	@ 0xc0
 8008f24:	029b      	lsls	r3, r3, #10
 8008f26:	401a      	ands	r2, r3
 8008f28:	23c0      	movs	r3, #192	@ 0xc0
 8008f2a:	029b      	lsls	r3, r3, #10
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d10a      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f30:	4b74      	ldr	r3, [pc, #464]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	2380      	movs	r3, #128	@ 0x80
 8008f36:	029b      	lsls	r3, r3, #10
 8008f38:	401a      	ands	r2, r3
 8008f3a:	2380      	movs	r3, #128	@ 0x80
 8008f3c:	029b      	lsls	r3, r3, #10
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d101      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e0da      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008f46:	4b6f      	ldr	r3, [pc, #444]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f4a:	23c0      	movs	r3, #192	@ 0xc0
 8008f4c:	029b      	lsls	r3, r3, #10
 8008f4e:	4013      	ands	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d03b      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	23c0      	movs	r3, #192	@ 0xc0
 8008f5e:	029b      	lsls	r3, r3, #10
 8008f60:	4013      	ands	r3, r2
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d033      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	4013      	ands	r3, r2
 8008f70:	d02e      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008f72:	4b64      	ldr	r3, [pc, #400]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f76:	4a65      	ldr	r2, [pc, #404]	@ (800910c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f7c:	4b61      	ldr	r3, [pc, #388]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f80:	4b60      	ldr	r3, [pc, #384]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f82:	2180      	movs	r1, #128	@ 0x80
 8008f84:	0309      	lsls	r1, r1, #12
 8008f86:	430a      	orrs	r2, r1
 8008f88:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f8a:	4b5e      	ldr	r3, [pc, #376]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f90:	495f      	ldr	r1, [pc, #380]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008f92:	400a      	ands	r2, r1
 8008f94:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008f96:	4b5b      	ldr	r3, [pc, #364]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	2380      	movs	r3, #128	@ 0x80
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	d014      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fa6:	f7fb fc78 	bl	800489a <HAL_GetTick>
 8008faa:	0003      	movs	r3, r0
 8008fac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fae:	e009      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fb0:	f7fb fc73 	bl	800489a <HAL_GetTick>
 8008fb4:	0002      	movs	r2, r0
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	4a56      	ldr	r2, [pc, #344]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e09b      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008fc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fc8:	2380      	movs	r3, #128	@ 0x80
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4013      	ands	r3, r2
 8008fce:	d0ef      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	23c0      	movs	r3, #192	@ 0xc0
 8008fd6:	029b      	lsls	r3, r3, #10
 8008fd8:	401a      	ands	r2, r3
 8008fda:	23c0      	movs	r3, #192	@ 0xc0
 8008fdc:	029b      	lsls	r3, r3, #10
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d10c      	bne.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8008fe2:	4b48      	ldr	r3, [pc, #288]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	0019      	movs	r1, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	23c0      	movs	r3, #192	@ 0xc0
 8008ff2:	039b      	lsls	r3, r3, #14
 8008ff4:	401a      	ands	r2, r3
 8008ff6:	4b43      	ldr	r3, [pc, #268]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	4b41      	ldr	r3, [pc, #260]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ffe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	23c0      	movs	r3, #192	@ 0xc0
 8009006:	029b      	lsls	r3, r3, #10
 8009008:	401a      	ands	r2, r3
 800900a:	4b3e      	ldr	r3, [pc, #248]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800900c:	430a      	orrs	r2, r1
 800900e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009010:	2317      	movs	r3, #23
 8009012:	18fb      	adds	r3, r7, r3
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d105      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800901a:	4b3a      	ldr	r3, [pc, #232]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800901c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800901e:	4b39      	ldr	r3, [pc, #228]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009020:	493e      	ldr	r1, [pc, #248]	@ (800911c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8009022:	400a      	ands	r2, r1
 8009024:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2201      	movs	r2, #1
 800902c:	4013      	ands	r3, r2
 800902e:	d009      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009030:	4b34      	ldr	r3, [pc, #208]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009034:	2203      	movs	r2, #3
 8009036:	4393      	bics	r3, r2
 8009038:	0019      	movs	r1, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	4b31      	ldr	r3, [pc, #196]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009040:	430a      	orrs	r2, r1
 8009042:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2202      	movs	r2, #2
 800904a:	4013      	ands	r3, r2
 800904c:	d009      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800904e:	4b2d      	ldr	r3, [pc, #180]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009052:	220c      	movs	r2, #12
 8009054:	4393      	bics	r3, r2
 8009056:	0019      	movs	r1, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	4b29      	ldr	r3, [pc, #164]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800905e:	430a      	orrs	r2, r1
 8009060:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2204      	movs	r2, #4
 8009068:	4013      	ands	r3, r2
 800906a:	d009      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800906c:	4b25      	ldr	r3, [pc, #148]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800906e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009070:	4a2b      	ldr	r2, [pc, #172]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009072:	4013      	ands	r3, r2
 8009074:	0019      	movs	r1, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	691a      	ldr	r2, [r3, #16]
 800907a:	4b22      	ldr	r3, [pc, #136]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800907c:	430a      	orrs	r2, r1
 800907e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2208      	movs	r2, #8
 8009086:	4013      	ands	r3, r2
 8009088:	d009      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800908a:	4b1e      	ldr	r3, [pc, #120]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800908c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908e:	4a25      	ldr	r2, [pc, #148]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009090:	4013      	ands	r3, r2
 8009092:	0019      	movs	r1, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	695a      	ldr	r2, [r3, #20]
 8009098:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800909a:	430a      	orrs	r2, r1
 800909c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	2380      	movs	r3, #128	@ 0x80
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	4013      	ands	r3, r2
 80090a8:	d009      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80090aa:	4b16      	ldr	r3, [pc, #88]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ae:	4a17      	ldr	r2, [pc, #92]	@ (800910c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	0019      	movs	r1, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	699a      	ldr	r2, [r3, #24]
 80090b8:	4b12      	ldr	r3, [pc, #72]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090ba:	430a      	orrs	r2, r1
 80090bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2240      	movs	r2, #64	@ 0x40
 80090c4:	4013      	ands	r3, r2
 80090c6:	d009      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090cc:	4a16      	ldr	r2, [pc, #88]	@ (8009128 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80090ce:	4013      	ands	r3, r2
 80090d0:	0019      	movs	r1, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1a      	ldr	r2, [r3, #32]
 80090d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090d8:	430a      	orrs	r2, r1
 80090da:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2280      	movs	r2, #128	@ 0x80
 80090e2:	4013      	ands	r3, r2
 80090e4:	d009      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80090e6:	4b07      	ldr	r3, [pc, #28]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ea:	4a10      	ldr	r2, [pc, #64]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80090ec:	4013      	ands	r3, r2
 80090ee:	0019      	movs	r1, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69da      	ldr	r2, [r3, #28]
 80090f4:	4b03      	ldr	r3, [pc, #12]	@ (8009104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090f6:	430a      	orrs	r2, r1
 80090f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b006      	add	sp, #24
 8009102:	bd80      	pop	{r7, pc}
 8009104:	40021000 	.word	0x40021000
 8009108:	40007000 	.word	0x40007000
 800910c:	fffcffff 	.word	0xfffcffff
 8009110:	fff7ffff 	.word	0xfff7ffff
 8009114:	00001388 	.word	0x00001388
 8009118:	ffcfffff 	.word	0xffcfffff
 800911c:	efffffff 	.word	0xefffffff
 8009120:	fffff3ff 	.word	0xfffff3ff
 8009124:	ffffcfff 	.word	0xffffcfff
 8009128:	fbffffff 	.word	0xfbffffff
 800912c:	fff3ffff 	.word	0xfff3ffff

08009130 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e08e      	b.n	8009260 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2221      	movs	r2, #33	@ 0x21
 8009146:	5c9b      	ldrb	r3, [r3, r2]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d107      	bne.n	800915e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2220      	movs	r2, #32
 8009152:	2100      	movs	r1, #0
 8009154:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	0018      	movs	r0, r3
 800915a:	f7fa fbf9 	bl	8003950 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2221      	movs	r2, #33	@ 0x21
 8009162:	2102      	movs	r1, #2
 8009164:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	22ca      	movs	r2, #202	@ 0xca
 800916c:	625a      	str	r2, [r3, #36]	@ 0x24
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2253      	movs	r2, #83	@ 0x53
 8009174:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	0018      	movs	r0, r3
 800917a:	f000 fcf4 	bl	8009b66 <RTC_EnterInitMode>
 800917e:	1e03      	subs	r3, r0, #0
 8009180:	d009      	beq.n	8009196 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	22ff      	movs	r2, #255	@ 0xff
 8009188:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2221      	movs	r2, #33	@ 0x21
 800918e:	2104      	movs	r1, #4
 8009190:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e064      	b.n	8009260 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4931      	ldr	r1, [pc, #196]	@ (8009268 <HAL_RTC_Init+0x138>)
 80091a2:	400a      	ands	r2, r1
 80091a4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6899      	ldr	r1, [r3, #8]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	68d2      	ldr	r2, [r2, #12]
 80091cc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6919      	ldr	r1, [r3, #16]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	041a      	lsls	r2, r3, #16
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2180      	movs	r1, #128	@ 0x80
 80091ee:	438a      	bics	r2, r1
 80091f0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2103      	movs	r1, #3
 80091fe:	438a      	bics	r2, r1
 8009200:	64da      	str	r2, [r3, #76]	@ 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	69da      	ldr	r2, [r3, #28]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2220      	movs	r2, #32
 8009222:	4013      	ands	r3, r2
 8009224:	d113      	bne.n	800924e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	0018      	movs	r0, r3
 800922a:	f000 fc75 	bl	8009b18 <HAL_RTC_WaitForSynchro>
 800922e:	1e03      	subs	r3, r0, #0
 8009230:	d00d      	beq.n	800924e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	22ff      	movs	r2, #255	@ 0xff
 8009238:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2221      	movs	r2, #33	@ 0x21
 800923e:	2104      	movs	r1, #4
 8009240:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	2100      	movs	r1, #0
 8009248:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e008      	b.n	8009260 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	22ff      	movs	r2, #255	@ 0xff
 8009254:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2221      	movs	r2, #33	@ 0x21
 800925a:	2101      	movs	r1, #1
 800925c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800925e:	2300      	movs	r3, #0
  }
}
 8009260:	0018      	movs	r0, r3
 8009262:	46bd      	mov	sp, r7
 8009264:	b002      	add	sp, #8
 8009266:	bd80      	pop	{r7, pc}
 8009268:	ff8fffbf 	.word	0xff8fffbf

0800926c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800926c:	b590      	push	{r4, r7, lr}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	5c9b      	ldrb	r3, [r3, r2]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_RTC_SetTime+0x1a>
 8009282:	2302      	movs	r3, #2
 8009284:	e0ad      	b.n	80093e2 <HAL_RTC_SetTime+0x176>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	2101      	movs	r1, #1
 800928c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2221      	movs	r2, #33	@ 0x21
 8009292:	2102      	movs	r1, #2
 8009294:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d125      	bne.n	80092e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	2240      	movs	r2, #64	@ 0x40
 80092a4:	4013      	ands	r3, r2
 80092a6:	d102      	bne.n	80092ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2200      	movs	r2, #0
 80092ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	0018      	movs	r0, r3
 80092b4:	f000 fc81 	bl	8009bba <RTC_ByteToBcd2>
 80092b8:	0003      	movs	r3, r0
 80092ba:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	785b      	ldrb	r3, [r3, #1]
 80092c0:	0018      	movs	r0, r3
 80092c2:	f000 fc7a 	bl	8009bba <RTC_ByteToBcd2>
 80092c6:	0003      	movs	r3, r0
 80092c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80092ca:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	789b      	ldrb	r3, [r3, #2]
 80092d0:	0018      	movs	r0, r3
 80092d2:	f000 fc72 	bl	8009bba <RTC_ByteToBcd2>
 80092d6:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80092d8:	0022      	movs	r2, r4
 80092da:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	78db      	ldrb	r3, [r3, #3]
 80092e0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	e017      	b.n	8009318 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	2240      	movs	r2, #64	@ 0x40
 80092f0:	4013      	ands	r3, r2
 80092f2:	d102      	bne.n	80092fa <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2200      	movs	r2, #0
 80092f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009306:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800930c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	78db      	ldrb	r3, [r3, #3]
 8009312:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	22ca      	movs	r2, #202	@ 0xca
 800931e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2253      	movs	r2, #83	@ 0x53
 8009326:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	0018      	movs	r0, r3
 800932c:	f000 fc1b 	bl	8009b66 <RTC_EnterInitMode>
 8009330:	1e03      	subs	r3, r0, #0
 8009332:	d00d      	beq.n	8009350 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	22ff      	movs	r2, #255	@ 0xff
 800933a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2221      	movs	r2, #33	@ 0x21
 8009340:	2104      	movs	r1, #4
 8009342:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2220      	movs	r2, #32
 8009348:	2100      	movs	r1, #0
 800934a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e048      	b.n	80093e2 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	4925      	ldr	r1, [pc, #148]	@ (80093ec <HAL_RTC_SetTime+0x180>)
 8009358:	400a      	ands	r2, r1
 800935a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4922      	ldr	r1, [pc, #136]	@ (80093f0 <HAL_RTC_SetTime+0x184>)
 8009368:	400a      	ands	r2, r1
 800936a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6899      	ldr	r1, [r3, #8]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	431a      	orrs	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	430a      	orrs	r2, r1
 8009382:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2180      	movs	r1, #128	@ 0x80
 8009390:	438a      	bics	r2, r1
 8009392:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	2220      	movs	r2, #32
 800939c:	4013      	ands	r3, r2
 800939e:	d113      	bne.n	80093c8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	0018      	movs	r0, r3
 80093a4:	f000 fbb8 	bl	8009b18 <HAL_RTC_WaitForSynchro>
 80093a8:	1e03      	subs	r3, r0, #0
 80093aa:	d00d      	beq.n	80093c8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	22ff      	movs	r2, #255	@ 0xff
 80093b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2221      	movs	r2, #33	@ 0x21
 80093b8:	2104      	movs	r1, #4
 80093ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2220      	movs	r2, #32
 80093c0:	2100      	movs	r1, #0
 80093c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e00c      	b.n	80093e2 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	22ff      	movs	r2, #255	@ 0xff
 80093ce:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2221      	movs	r2, #33	@ 0x21
 80093d4:	2101      	movs	r1, #1
 80093d6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2220      	movs	r2, #32
 80093dc:	2100      	movs	r1, #0
 80093de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80093e0:	2300      	movs	r3, #0
  }
}
 80093e2:	0018      	movs	r0, r3
 80093e4:	46bd      	mov	sp, r7
 80093e6:	b007      	add	sp, #28
 80093e8:	bd90      	pop	{r4, r7, pc}
 80093ea:	46c0      	nop			@ (mov r8, r8)
 80093ec:	007f7f7f 	.word	0x007f7f7f
 80093f0:	fffbffff 	.word	0xfffbffff

080093f4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	045b      	lsls	r3, r3, #17
 8009412:	0c5a      	lsrs	r2, r3, #17
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a22      	ldr	r2, [pc, #136]	@ (80094a8 <HAL_RTC_GetTime+0xb4>)
 8009420:	4013      	ands	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	0c1b      	lsrs	r3, r3, #16
 8009428:	b2db      	uxtb	r3, r3
 800942a:	223f      	movs	r2, #63	@ 0x3f
 800942c:	4013      	ands	r3, r2
 800942e:	b2da      	uxtb	r2, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	0a1b      	lsrs	r3, r3, #8
 8009438:	b2db      	uxtb	r3, r3
 800943a:	227f      	movs	r2, #127	@ 0x7f
 800943c:	4013      	ands	r3, r2
 800943e:	b2da      	uxtb	r2, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	b2db      	uxtb	r3, r3
 8009448:	227f      	movs	r2, #127	@ 0x7f
 800944a:	4013      	ands	r3, r2
 800944c:	b2da      	uxtb	r2, r3
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2240      	movs	r2, #64	@ 0x40
 800945a:	4013      	ands	r3, r2
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d11a      	bne.n	800949e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	0018      	movs	r0, r3
 800946e:	f000 fbcc 	bl	8009c0a <RTC_Bcd2ToByte>
 8009472:	0003      	movs	r3, r0
 8009474:	001a      	movs	r2, r3
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	0018      	movs	r0, r3
 8009480:	f000 fbc3 	bl	8009c0a <RTC_Bcd2ToByte>
 8009484:	0003      	movs	r3, r0
 8009486:	001a      	movs	r2, r3
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	789b      	ldrb	r3, [r3, #2]
 8009490:	0018      	movs	r0, r3
 8009492:	f000 fbba 	bl	8009c0a <RTC_Bcd2ToByte>
 8009496:	0003      	movs	r3, r0
 8009498:	001a      	movs	r2, r3
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	0018      	movs	r0, r3
 80094a2:	46bd      	mov	sp, r7
 80094a4:	b006      	add	sp, #24
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	007f7f7f 	.word	0x007f7f7f

080094ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2220      	movs	r2, #32
 80094bc:	5c9b      	ldrb	r3, [r3, r2]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d101      	bne.n	80094c6 <HAL_RTC_SetDate+0x1a>
 80094c2:	2302      	movs	r3, #2
 80094c4:	e099      	b.n	80095fa <HAL_RTC_SetDate+0x14e>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2220      	movs	r2, #32
 80094ca:	2101      	movs	r1, #1
 80094cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2221      	movs	r2, #33	@ 0x21
 80094d2:	2102      	movs	r1, #2
 80094d4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10e      	bne.n	80094fa <HAL_RTC_SetDate+0x4e>
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	785b      	ldrb	r3, [r3, #1]
 80094e0:	001a      	movs	r2, r3
 80094e2:	2310      	movs	r3, #16
 80094e4:	4013      	ands	r3, r2
 80094e6:	d008      	beq.n	80094fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	785b      	ldrb	r3, [r3, #1]
 80094ec:	2210      	movs	r2, #16
 80094ee:	4393      	bics	r3, r2
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	330a      	adds	r3, #10
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d11c      	bne.n	800953a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	78db      	ldrb	r3, [r3, #3]
 8009504:	0018      	movs	r0, r3
 8009506:	f000 fb58 	bl	8009bba <RTC_ByteToBcd2>
 800950a:	0003      	movs	r3, r0
 800950c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	785b      	ldrb	r3, [r3, #1]
 8009512:	0018      	movs	r0, r3
 8009514:	f000 fb51 	bl	8009bba <RTC_ByteToBcd2>
 8009518:	0003      	movs	r3, r0
 800951a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800951c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	789b      	ldrb	r3, [r3, #2]
 8009522:	0018      	movs	r0, r3
 8009524:	f000 fb49 	bl	8009bba <RTC_ByteToBcd2>
 8009528:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800952a:	0022      	movs	r2, r4
 800952c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009534:	4313      	orrs	r3, r2
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	e00e      	b.n	8009558 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	78db      	ldrb	r3, [r3, #3]
 800953e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	785b      	ldrb	r3, [r3, #1]
 8009544:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009546:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800954c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009554:	4313      	orrs	r3, r2
 8009556:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	22ca      	movs	r2, #202	@ 0xca
 800955e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2253      	movs	r2, #83	@ 0x53
 8009566:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	0018      	movs	r0, r3
 800956c:	f000 fafb 	bl	8009b66 <RTC_EnterInitMode>
 8009570:	1e03      	subs	r3, r0, #0
 8009572:	d00d      	beq.n	8009590 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	22ff      	movs	r2, #255	@ 0xff
 800957a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2221      	movs	r2, #33	@ 0x21
 8009580:	2104      	movs	r1, #4
 8009582:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	2100      	movs	r1, #0
 800958a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e034      	b.n	80095fa <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	491b      	ldr	r1, [pc, #108]	@ (8009604 <HAL_RTC_SetDate+0x158>)
 8009598:	400a      	ands	r2, r1
 800959a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2180      	movs	r1, #128	@ 0x80
 80095a8:	438a      	bics	r2, r1
 80095aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	2220      	movs	r2, #32
 80095b4:	4013      	ands	r3, r2
 80095b6:	d113      	bne.n	80095e0 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	0018      	movs	r0, r3
 80095bc:	f000 faac 	bl	8009b18 <HAL_RTC_WaitForSynchro>
 80095c0:	1e03      	subs	r3, r0, #0
 80095c2:	d00d      	beq.n	80095e0 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	22ff      	movs	r2, #255	@ 0xff
 80095ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2221      	movs	r2, #33	@ 0x21
 80095d0:	2104      	movs	r1, #4
 80095d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2220      	movs	r2, #32
 80095d8:	2100      	movs	r1, #0
 80095da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e00c      	b.n	80095fa <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	22ff      	movs	r2, #255	@ 0xff
 80095e6:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2221      	movs	r2, #33	@ 0x21
 80095ec:	2101      	movs	r1, #1
 80095ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2220      	movs	r2, #32
 80095f4:	2100      	movs	r1, #0
 80095f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80095f8:	2300      	movs	r3, #0
  }
}
 80095fa:	0018      	movs	r0, r3
 80095fc:	46bd      	mov	sp, r7
 80095fe:	b007      	add	sp, #28
 8009600:	bd90      	pop	{r4, r7, pc}
 8009602:	46c0      	nop			@ (mov r8, r8)
 8009604:	00ffff3f 	.word	0x00ffff3f

08009608 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	4a21      	ldr	r2, [pc, #132]	@ (80096a0 <HAL_RTC_GetDate+0x98>)
 800961c:	4013      	ands	r3, r2
 800961e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	0c1b      	lsrs	r3, r3, #16
 8009624:	b2da      	uxtb	r2, r3
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	b2db      	uxtb	r3, r3
 8009630:	221f      	movs	r2, #31
 8009632:	4013      	ands	r3, r2
 8009634:	b2da      	uxtb	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	223f      	movs	r2, #63	@ 0x3f
 8009640:	4013      	ands	r3, r2
 8009642:	b2da      	uxtb	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	0b5b      	lsrs	r3, r3, #13
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2207      	movs	r2, #7
 8009650:	4013      	ands	r3, r2
 8009652:	b2da      	uxtb	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d11a      	bne.n	8009694 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	78db      	ldrb	r3, [r3, #3]
 8009662:	0018      	movs	r0, r3
 8009664:	f000 fad1 	bl	8009c0a <RTC_Bcd2ToByte>
 8009668:	0003      	movs	r3, r0
 800966a:	001a      	movs	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	785b      	ldrb	r3, [r3, #1]
 8009674:	0018      	movs	r0, r3
 8009676:	f000 fac8 	bl	8009c0a <RTC_Bcd2ToByte>
 800967a:	0003      	movs	r3, r0
 800967c:	001a      	movs	r2, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	789b      	ldrb	r3, [r3, #2]
 8009686:	0018      	movs	r0, r3
 8009688:	f000 fabf 	bl	8009c0a <RTC_Bcd2ToByte>
 800968c:	0003      	movs	r3, r0
 800968e:	001a      	movs	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	0018      	movs	r0, r3
 8009698:	46bd      	mov	sp, r7
 800969a:	b006      	add	sp, #24
 800969c:	bd80      	pop	{r7, pc}
 800969e:	46c0      	nop			@ (mov r8, r8)
 80096a0:	00ffff3f 	.word	0x00ffff3f

080096a4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80096a4:	b590      	push	{r4, r7, lr}
 80096a6:	b089      	sub	sp, #36	@ 0x24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	5c9b      	ldrb	r3, [r3, r2]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <HAL_RTC_SetAlarm_IT+0x1a>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e130      	b.n	8009920 <HAL_RTC_SetAlarm_IT+0x27c>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2220      	movs	r2, #32
 80096c2:	2101      	movs	r1, #1
 80096c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2221      	movs	r2, #33	@ 0x21
 80096ca:	2102      	movs	r1, #2
 80096cc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d136      	bne.n	8009742 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	2240      	movs	r2, #64	@ 0x40
 80096dc:	4013      	ands	r3, r2
 80096de:	d102      	bne.n	80096e6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	0018      	movs	r0, r3
 80096ec:	f000 fa65 	bl	8009bba <RTC_ByteToBcd2>
 80096f0:	0003      	movs	r3, r0
 80096f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	785b      	ldrb	r3, [r3, #1]
 80096f8:	0018      	movs	r0, r3
 80096fa:	f000 fa5e 	bl	8009bba <RTC_ByteToBcd2>
 80096fe:	0003      	movs	r3, r0
 8009700:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009702:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	789b      	ldrb	r3, [r3, #2]
 8009708:	0018      	movs	r0, r3
 800970a:	f000 fa56 	bl	8009bba <RTC_ByteToBcd2>
 800970e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009710:	0022      	movs	r2, r4
 8009712:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	78db      	ldrb	r3, [r3, #3]
 8009718:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800971a:	431a      	orrs	r2, r3
 800971c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2220      	movs	r2, #32
 8009722:	5c9b      	ldrb	r3, [r3, r2]
 8009724:	0018      	movs	r0, r3
 8009726:	f000 fa48 	bl	8009bba <RTC_ByteToBcd2>
 800972a:	0003      	movs	r3, r0
 800972c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800972e:	0022      	movs	r2, r4
 8009730:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009736:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800973c:	4313      	orrs	r3, r2
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	e022      	b.n	8009788 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	2240      	movs	r2, #64	@ 0x40
 800974a:	4013      	ands	r3, r2
 800974c:	d102      	bne.n	8009754 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2200      	movs	r2, #0
 8009752:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009760:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009766:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	78db      	ldrb	r3, [r3, #3]
 800976c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800976e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2120      	movs	r1, #32
 8009774:	5c5b      	ldrb	r3, [r3, r1]
 8009776:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009778:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800977e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009784:	4313      	orrs	r3, r2
 8009786:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	4313      	orrs	r3, r2
 8009792:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	22ca      	movs	r2, #202	@ 0xca
 800979a:	625a      	str	r2, [r3, #36]	@ 0x24
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2253      	movs	r2, #83	@ 0x53
 80097a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097a8:	2380      	movs	r3, #128	@ 0x80
 80097aa:	005b      	lsls	r3, r3, #1
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d14e      	bne.n	800984e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689a      	ldr	r2, [r3, #8]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	495b      	ldr	r1, [pc, #364]	@ (8009928 <HAL_RTC_SetAlarm_IT+0x284>)
 80097bc:	400a      	ands	r2, r1
 80097be:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	22ff      	movs	r2, #255	@ 0xff
 80097c8:	401a      	ands	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4957      	ldr	r1, [pc, #348]	@ (800992c <HAL_RTC_SetAlarm_IT+0x288>)
 80097d0:	430a      	orrs	r2, r1
 80097d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80097d4:	f7fb f861 	bl	800489a <HAL_GetTick>
 80097d8:	0003      	movs	r3, r0
 80097da:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80097dc:	e016      	b.n	800980c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097de:	f7fb f85c 	bl	800489a <HAL_GetTick>
 80097e2:	0002      	movs	r2, r0
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	1ad2      	subs	r2, r2, r3
 80097e8:	23fa      	movs	r3, #250	@ 0xfa
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d90d      	bls.n	800980c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	22ff      	movs	r2, #255	@ 0xff
 80097f6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2221      	movs	r2, #33	@ 0x21
 80097fc:	2103      	movs	r1, #3
 80097fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2220      	movs	r2, #32
 8009804:	2100      	movs	r1, #0
 8009806:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e089      	b.n	8009920 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	4013      	ands	r3, r2
 8009816:	d0e2      	beq.n	80097de <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	69fa      	ldr	r2, [r7, #28]
 800981e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689a      	ldr	r2, [r3, #8]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2180      	movs	r1, #128	@ 0x80
 8009834:	0049      	lsls	r1, r1, #1
 8009836:	430a      	orrs	r2, r1
 8009838:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2180      	movs	r1, #128	@ 0x80
 8009846:	0149      	lsls	r1, r1, #5
 8009848:	430a      	orrs	r2, r1
 800984a:	609a      	str	r2, [r3, #8]
 800984c:	e04d      	b.n	80098ea <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4935      	ldr	r1, [pc, #212]	@ (8009930 <HAL_RTC_SetAlarm_IT+0x28c>)
 800985a:	400a      	ands	r2, r1
 800985c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	22ff      	movs	r2, #255	@ 0xff
 8009866:	401a      	ands	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4931      	ldr	r1, [pc, #196]	@ (8009934 <HAL_RTC_SetAlarm_IT+0x290>)
 800986e:	430a      	orrs	r2, r1
 8009870:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009872:	f7fb f812 	bl	800489a <HAL_GetTick>
 8009876:	0003      	movs	r3, r0
 8009878:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800987a:	e016      	b.n	80098aa <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800987c:	f7fb f80d 	bl	800489a <HAL_GetTick>
 8009880:	0002      	movs	r2, r0
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	1ad2      	subs	r2, r2, r3
 8009886:	23fa      	movs	r3, #250	@ 0xfa
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	429a      	cmp	r2, r3
 800988c:	d90d      	bls.n	80098aa <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	22ff      	movs	r2, #255	@ 0xff
 8009894:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2221      	movs	r2, #33	@ 0x21
 800989a:	2103      	movs	r1, #3
 800989c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2220      	movs	r2, #32
 80098a2:	2100      	movs	r1, #0
 80098a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e03a      	b.n	8009920 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	2202      	movs	r2, #2
 80098b2:	4013      	ands	r3, r2
 80098b4:	d0e2      	beq.n	800987c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2180      	movs	r1, #128	@ 0x80
 80098d2:	0089      	lsls	r1, r1, #2
 80098d4:	430a      	orrs	r2, r1
 80098d6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689a      	ldr	r2, [r3, #8]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2180      	movs	r1, #128	@ 0x80
 80098e4:	0189      	lsls	r1, r1, #6
 80098e6:	430a      	orrs	r2, r1
 80098e8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80098ea:	4b13      	ldr	r3, [pc, #76]	@ (8009938 <HAL_RTC_SetAlarm_IT+0x294>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	4b12      	ldr	r3, [pc, #72]	@ (8009938 <HAL_RTC_SetAlarm_IT+0x294>)
 80098f0:	2180      	movs	r1, #128	@ 0x80
 80098f2:	0289      	lsls	r1, r1, #10
 80098f4:	430a      	orrs	r2, r1
 80098f6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80098f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009938 <HAL_RTC_SetAlarm_IT+0x294>)
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009938 <HAL_RTC_SetAlarm_IT+0x294>)
 80098fe:	2180      	movs	r1, #128	@ 0x80
 8009900:	0289      	lsls	r1, r1, #10
 8009902:	430a      	orrs	r2, r1
 8009904:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	22ff      	movs	r2, #255	@ 0xff
 800990c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2221      	movs	r2, #33	@ 0x21
 8009912:	2101      	movs	r1, #1
 8009914:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2220      	movs	r2, #32
 800991a:	2100      	movs	r1, #0
 800991c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	0018      	movs	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	b009      	add	sp, #36	@ 0x24
 8009926:	bd90      	pop	{r4, r7, pc}
 8009928:	fffffeff 	.word	0xfffffeff
 800992c:	fffffe7f 	.word	0xfffffe7f
 8009930:	fffffdff 	.word	0xfffffdff
 8009934:	fffffd7f 	.word	0xfffffd7f
 8009938:	40010400 	.word	0x40010400

0800993c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2220      	movs	r2, #32
 800994a:	5c9b      	ldrb	r3, [r3, r2]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d101      	bne.n	8009954 <HAL_RTC_DeactivateAlarm+0x18>
 8009950:	2302      	movs	r3, #2
 8009952:	e086      	b.n	8009a62 <HAL_RTC_DeactivateAlarm+0x126>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	2101      	movs	r1, #1
 800995a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2221      	movs	r2, #33	@ 0x21
 8009960:	2102      	movs	r1, #2
 8009962:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	22ca      	movs	r2, #202	@ 0xca
 800996a:	625a      	str	r2, [r3, #36]	@ 0x24
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2253      	movs	r2, #83	@ 0x53
 8009972:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	2380      	movs	r3, #128	@ 0x80
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	429a      	cmp	r2, r3
 800997c:	d132      	bne.n	80099e4 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4938      	ldr	r1, [pc, #224]	@ (8009a6c <HAL_RTC_DeactivateAlarm+0x130>)
 800998a:	400a      	ands	r2, r1
 800998c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4935      	ldr	r1, [pc, #212]	@ (8009a70 <HAL_RTC_DeactivateAlarm+0x134>)
 800999a:	400a      	ands	r2, r1
 800999c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800999e:	f7fa ff7c 	bl	800489a <HAL_GetTick>
 80099a2:	0003      	movs	r3, r0
 80099a4:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80099a6:	e016      	b.n	80099d6 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80099a8:	f7fa ff77 	bl	800489a <HAL_GetTick>
 80099ac:	0002      	movs	r2, r0
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	1ad2      	subs	r2, r2, r3
 80099b2:	23fa      	movs	r3, #250	@ 0xfa
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d90d      	bls.n	80099d6 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	22ff      	movs	r2, #255	@ 0xff
 80099c0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2221      	movs	r2, #33	@ 0x21
 80099c6:	2103      	movs	r1, #3
 80099c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	2100      	movs	r1, #0
 80099d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e045      	b.n	8009a62 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	4013      	ands	r3, r2
 80099e0:	d0e2      	beq.n	80099a8 <HAL_RTC_DeactivateAlarm+0x6c>
 80099e2:	e031      	b.n	8009a48 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4921      	ldr	r1, [pc, #132]	@ (8009a74 <HAL_RTC_DeactivateAlarm+0x138>)
 80099f0:	400a      	ands	r2, r1
 80099f2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689a      	ldr	r2, [r3, #8]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	491e      	ldr	r1, [pc, #120]	@ (8009a78 <HAL_RTC_DeactivateAlarm+0x13c>)
 8009a00:	400a      	ands	r2, r1
 8009a02:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009a04:	f7fa ff49 	bl	800489a <HAL_GetTick>
 8009a08:	0003      	movs	r3, r0
 8009a0a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009a0c:	e016      	b.n	8009a3c <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a0e:	f7fa ff44 	bl	800489a <HAL_GetTick>
 8009a12:	0002      	movs	r2, r0
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	23fa      	movs	r3, #250	@ 0xfa
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d90d      	bls.n	8009a3c <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	22ff      	movs	r2, #255	@ 0xff
 8009a26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2221      	movs	r2, #33	@ 0x21
 8009a2c:	2103      	movs	r1, #3
 8009a2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	2100      	movs	r1, #0
 8009a36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e012      	b.n	8009a62 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	2202      	movs	r2, #2
 8009a44:	4013      	ands	r3, r2
 8009a46:	d0e2      	beq.n	8009a0e <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	22ff      	movs	r2, #255	@ 0xff
 8009a4e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2221      	movs	r2, #33	@ 0x21
 8009a54:	2101      	movs	r1, #1
 8009a56:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	0018      	movs	r0, r3
 8009a64:	46bd      	mov	sp, r7
 8009a66:	b004      	add	sp, #16
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	46c0      	nop			@ (mov r8, r8)
 8009a6c:	fffffeff 	.word	0xfffffeff
 8009a70:	ffffefff 	.word	0xffffefff
 8009a74:	fffffdff 	.word	0xfffffdff
 8009a78:	ffffdfff 	.word	0xffffdfff

08009a7c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	2380      	movs	r3, #128	@ 0x80
 8009a8c:	015b      	lsls	r3, r3, #5
 8009a8e:	4013      	ands	r3, r2
 8009a90:	d014      	beq.n	8009abc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	2380      	movs	r3, #128	@ 0x80
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	d00d      	beq.n	8009abc <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f7fa f8e5 	bl	8003c72 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	22ff      	movs	r2, #255	@ 0xff
 8009ab0:	401a      	ands	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4915      	ldr	r1, [pc, #84]	@ (8009b0c <HAL_RTC_AlarmIRQHandler+0x90>)
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689a      	ldr	r2, [r3, #8]
 8009ac2:	2380      	movs	r3, #128	@ 0x80
 8009ac4:	019b      	lsls	r3, r3, #6
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	d014      	beq.n	8009af4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68da      	ldr	r2, [r3, #12]
 8009ad0:	2380      	movs	r3, #128	@ 0x80
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	d00d      	beq.n	8009af4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	0018      	movs	r0, r3
 8009adc:	f000 f910 	bl	8009d00 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	22ff      	movs	r2, #255	@ 0xff
 8009ae8:	401a      	ands	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4908      	ldr	r1, [pc, #32]	@ (8009b10 <HAL_RTC_AlarmIRQHandler+0x94>)
 8009af0:	430a      	orrs	r2, r1
 8009af2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009af4:	4b07      	ldr	r3, [pc, #28]	@ (8009b14 <HAL_RTC_AlarmIRQHandler+0x98>)
 8009af6:	2280      	movs	r2, #128	@ 0x80
 8009af8:	0292      	lsls	r2, r2, #10
 8009afa:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2221      	movs	r2, #33	@ 0x21
 8009b00:	2101      	movs	r1, #1
 8009b02:	5499      	strb	r1, [r3, r2]
}
 8009b04:	46c0      	nop			@ (mov r8, r8)
 8009b06:	46bd      	mov	sp, r7
 8009b08:	b002      	add	sp, #8
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	fffffe7f 	.word	0xfffffe7f
 8009b10:	fffffd7f 	.word	0xfffffd7f
 8009b14:	40010400 	.word	0x40010400

08009b18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68da      	ldr	r2, [r3, #12]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	21a0      	movs	r1, #160	@ 0xa0
 8009b2c:	438a      	bics	r2, r1
 8009b2e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009b30:	f7fa feb3 	bl	800489a <HAL_GetTick>
 8009b34:	0003      	movs	r3, r0
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b38:	e00a      	b.n	8009b50 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b3a:	f7fa feae 	bl	800489a <HAL_GetTick>
 8009b3e:	0002      	movs	r2, r0
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	1ad2      	subs	r2, r2, r3
 8009b44:	23fa      	movs	r3, #250	@ 0xfa
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d901      	bls.n	8009b50 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e006      	b.n	8009b5e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	2220      	movs	r2, #32
 8009b58:	4013      	ands	r3, r2
 8009b5a:	d0ee      	beq.n	8009b3a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	0018      	movs	r0, r3
 8009b60:	46bd      	mov	sp, r7
 8009b62:	b004      	add	sp, #16
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2240      	movs	r2, #64	@ 0x40
 8009b76:	4013      	ands	r3, r2
 8009b78:	d11a      	bne.n	8009bb0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	4252      	negs	r2, r2
 8009b82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009b84:	f7fa fe89 	bl	800489a <HAL_GetTick>
 8009b88:	0003      	movs	r3, r0
 8009b8a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b8c:	e00a      	b.n	8009ba4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009b8e:	f7fa fe84 	bl	800489a <HAL_GetTick>
 8009b92:	0002      	movs	r2, r0
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	1ad2      	subs	r2, r2, r3
 8009b98:	23fa      	movs	r3, #250	@ 0xfa
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d901      	bls.n	8009ba4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e006      	b.n	8009bb2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	2240      	movs	r2, #64	@ 0x40
 8009bac:	4013      	ands	r3, r2
 8009bae:	d0ee      	beq.n	8009b8e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	b004      	add	sp, #16
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	0002      	movs	r2, r0
 8009bc2:	1dfb      	adds	r3, r7, #7
 8009bc4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009bca:	230b      	movs	r3, #11
 8009bcc:	18fb      	adds	r3, r7, r3
 8009bce:	1dfa      	adds	r2, r7, #7
 8009bd0:	7812      	ldrb	r2, [r2, #0]
 8009bd2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8009bd4:	e008      	b.n	8009be8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009bdc:	220b      	movs	r2, #11
 8009bde:	18bb      	adds	r3, r7, r2
 8009be0:	18ba      	adds	r2, r7, r2
 8009be2:	7812      	ldrb	r2, [r2, #0]
 8009be4:	3a0a      	subs	r2, #10
 8009be6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8009be8:	210b      	movs	r1, #11
 8009bea:	187b      	adds	r3, r7, r1
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d8f1      	bhi.n	8009bd6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	187b      	adds	r3, r7, r1
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	b2db      	uxtb	r3, r3
}
 8009c02:	0018      	movs	r0, r3
 8009c04:	46bd      	mov	sp, r7
 8009c06:	b004      	add	sp, #16
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	0002      	movs	r2, r0
 8009c12:	1dfb      	adds	r3, r7, #7
 8009c14:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009c16:	1dfb      	adds	r3, r7, #7
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	091b      	lsrs	r3, r3, #4
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	001a      	movs	r2, r3
 8009c20:	0013      	movs	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	189b      	adds	r3, r3, r2
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	1dfb      	adds	r3, r7, #7
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	210f      	movs	r1, #15
 8009c34:	400b      	ands	r3, r1
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	18d3      	adds	r3, r2, r3
 8009c3a:	b2db      	uxtb	r3, r3
}
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	b004      	add	sp, #16
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3350      	adds	r3, #80	@ 0x50
 8009c56:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	18d3      	adds	r3, r2, r3
 8009c60:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	601a      	str	r2, [r3, #0]
}
 8009c68:	46c0      	nop			@ (mov r8, r8)
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	b006      	add	sp, #24
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3350      	adds	r3, #80	@ 0x50
 8009c80:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	18d3      	adds	r3, r2, r3
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
}
 8009c90:	0018      	movs	r0, r3
 8009c92:	46bd      	mov	sp, r7
 8009c94:	b004      	add	sp, #16
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	5c9b      	ldrb	r3, [r3, r2]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d101      	bne.n	8009cae <HAL_RTCEx_EnableBypassShadow+0x16>
 8009caa:	2302      	movs	r3, #2
 8009cac:	e024      	b.n	8009cf8 <HAL_RTCEx_EnableBypassShadow+0x60>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2221      	movs	r2, #33	@ 0x21
 8009cba:	2102      	movs	r1, #2
 8009cbc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	22ca      	movs	r2, #202	@ 0xca
 8009cc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2253      	movs	r2, #83	@ 0x53
 8009ccc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2120      	movs	r1, #32
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	22ff      	movs	r2, #255	@ 0xff
 8009ce4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2221      	movs	r2, #33	@ 0x21
 8009cea:	2101      	movs	r1, #1
 8009cec:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	b002      	add	sp, #8
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009d08:	46c0      	nop			@ (mov r8, r8)
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	b002      	add	sp, #8
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e083      	b.n	8009e2a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d109      	bne.n	8009d3e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	2382      	movs	r3, #130	@ 0x82
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d009      	beq.n	8009d4a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	61da      	str	r2, [r3, #28]
 8009d3c:	e005      	b.n	8009d4a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2251      	movs	r2, #81	@ 0x51
 8009d54:	5c9b      	ldrb	r3, [r3, r2]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d107      	bne.n	8009d6c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2250      	movs	r2, #80	@ 0x50
 8009d60:	2100      	movs	r1, #0
 8009d62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	0018      	movs	r0, r3
 8009d68:	f000 f866 	bl	8009e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2251      	movs	r2, #81	@ 0x51
 8009d70:	2102      	movs	r1, #2
 8009d72:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2140      	movs	r1, #64	@ 0x40
 8009d80:	438a      	bics	r2, r1
 8009d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	2382      	movs	r3, #130	@ 0x82
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	401a      	ands	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6899      	ldr	r1, [r3, #8]
 8009d92:	2384      	movs	r3, #132	@ 0x84
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	400b      	ands	r3, r1
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68d9      	ldr	r1, [r3, #12]
 8009d9e:	2380      	movs	r3, #128	@ 0x80
 8009da0:	011b      	lsls	r3, r3, #4
 8009da2:	400b      	ands	r3, r1
 8009da4:	431a      	orrs	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	2102      	movs	r1, #2
 8009dac:	400b      	ands	r3, r1
 8009dae:	431a      	orrs	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	2101      	movs	r1, #1
 8009db6:	400b      	ands	r3, r1
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6999      	ldr	r1, [r3, #24]
 8009dbe:	2380      	movs	r3, #128	@ 0x80
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	400b      	ands	r3, r1
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	2138      	movs	r1, #56	@ 0x38
 8009dcc:	400b      	ands	r3, r1
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
 8009dd4:	2180      	movs	r1, #128	@ 0x80
 8009dd6:	400b      	ands	r3, r1
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	0011      	movs	r1, r2
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009de0:	2380      	movs	r3, #128	@ 0x80
 8009de2:	019b      	lsls	r3, r3, #6
 8009de4:	401a      	ands	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	2204      	movs	r2, #4
 8009df6:	4013      	ands	r3, r2
 8009df8:	0019      	movs	r1, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfe:	2210      	movs	r2, #16
 8009e00:	401a      	ands	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	69da      	ldr	r2, [r3, #28]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4907      	ldr	r1, [pc, #28]	@ (8009e34 <HAL_SPI_Init+0x124>)
 8009e16:	400a      	ands	r2, r1
 8009e18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2251      	movs	r2, #81	@ 0x51
 8009e24:	2101      	movs	r1, #1
 8009e26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	b002      	add	sp, #8
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	46c0      	nop			@ (mov r8, r8)
 8009e34:	fffff7ff 	.word	0xfffff7ff

08009e38 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8009e40:	46c0      	nop			@ (mov r8, r8)
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b002      	add	sp, #8
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08c      	sub	sp, #48	@ 0x30
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	001a      	movs	r2, r3
 8009e56:	1cbb      	adds	r3, r7, #2
 8009e58:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e5e:	232b      	movs	r3, #43	@ 0x2b
 8009e60:	18fb      	adds	r3, r7, r3
 8009e62:	2200      	movs	r2, #0
 8009e64:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2250      	movs	r2, #80	@ 0x50
 8009e6a:	5c9b      	ldrb	r3, [r3, r2]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d101      	bne.n	8009e74 <HAL_SPI_TransmitReceive+0x2c>
 8009e70:	2302      	movs	r3, #2
 8009e72:	e1a0      	b.n	800a1b6 <HAL_SPI_TransmitReceive+0x36e>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2250      	movs	r2, #80	@ 0x50
 8009e78:	2101      	movs	r1, #1
 8009e7a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e7c:	f7fa fd0d 	bl	800489a <HAL_GetTick>
 8009e80:	0003      	movs	r3, r0
 8009e82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e84:	2023      	movs	r0, #35	@ 0x23
 8009e86:	183b      	adds	r3, r7, r0
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	2151      	movs	r1, #81	@ 0x51
 8009e8c:	5c52      	ldrb	r2, [r2, r1]
 8009e8e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009e96:	231a      	movs	r3, #26
 8009e98:	18fb      	adds	r3, r7, r3
 8009e9a:	1cba      	adds	r2, r7, #2
 8009e9c:	8812      	ldrh	r2, [r2, #0]
 8009e9e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ea0:	183b      	adds	r3, r7, r0
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d011      	beq.n	8009ecc <HAL_SPI_TransmitReceive+0x84>
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	2382      	movs	r3, #130	@ 0x82
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d107      	bne.n	8009ec2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d103      	bne.n	8009ec2 <HAL_SPI_TransmitReceive+0x7a>
 8009eba:	183b      	adds	r3, r7, r0
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d004      	beq.n	8009ecc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009ec2:	232b      	movs	r3, #43	@ 0x2b
 8009ec4:	18fb      	adds	r3, r7, r3
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	701a      	strb	r2, [r3, #0]
    goto error;
 8009eca:	e169      	b.n	800a1a0 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d006      	beq.n	8009ee0 <HAL_SPI_TransmitReceive+0x98>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <HAL_SPI_TransmitReceive+0x98>
 8009ed8:	1cbb      	adds	r3, r7, #2
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d104      	bne.n	8009eea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009ee0:	232b      	movs	r3, #43	@ 0x2b
 8009ee2:	18fb      	adds	r3, r7, r3
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	701a      	strb	r2, [r3, #0]
    goto error;
 8009ee8:	e15a      	b.n	800a1a0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2251      	movs	r2, #81	@ 0x51
 8009eee:	5c9b      	ldrb	r3, [r3, r2]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d003      	beq.n	8009efe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2251      	movs	r2, #81	@ 0x51
 8009efa:	2105      	movs	r1, #5
 8009efc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	1cba      	adds	r2, r7, #2
 8009f0e:	8812      	ldrh	r2, [r2, #0]
 8009f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	1cba      	adds	r2, r7, #2
 8009f16:	8812      	ldrh	r2, [r2, #0]
 8009f18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	1cba      	adds	r2, r7, #2
 8009f24:	8812      	ldrh	r2, [r2, #0]
 8009f26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	1cba      	adds	r2, r7, #2
 8009f2c:	8812      	ldrh	r2, [r2, #0]
 8009f2e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2240      	movs	r2, #64	@ 0x40
 8009f44:	4013      	ands	r3, r2
 8009f46:	2b40      	cmp	r3, #64	@ 0x40
 8009f48:	d007      	beq.n	8009f5a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2140      	movs	r1, #64	@ 0x40
 8009f56:	430a      	orrs	r2, r1
 8009f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	2380      	movs	r3, #128	@ 0x80
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d000      	beq.n	8009f68 <HAL_SPI_TransmitReceive+0x120>
 8009f66:	e07a      	b.n	800a05e <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <HAL_SPI_TransmitReceive+0x132>
 8009f70:	231a      	movs	r3, #26
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d166      	bne.n	800a048 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f7e:	881a      	ldrh	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f8a:	1c9a      	adds	r2, r3, #2
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f9e:	e053      	b.n	800a048 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	4013      	ands	r3, r2
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d11b      	bne.n	8009fe6 <HAL_SPI_TransmitReceive+0x19e>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d016      	beq.n	8009fe6 <HAL_SPI_TransmitReceive+0x19e>
 8009fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d113      	bne.n	8009fe6 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc2:	881a      	ldrh	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fce:	1c9a      	adds	r2, r3, #2
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2201      	movs	r2, #1
 8009fee:	4013      	ands	r3, r2
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d119      	bne.n	800a028 <HAL_SPI_TransmitReceive+0x1e0>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d014      	beq.n	800a028 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a008:	b292      	uxth	r2, r2
 800a00a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a010:	1c9a      	adds	r2, r3, #2
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	3b01      	subs	r3, #1
 800a01e:	b29a      	uxth	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a024:	2301      	movs	r3, #1
 800a026:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a028:	f7fa fc37 	bl	800489a <HAL_GetTick>
 800a02c:	0002      	movs	r2, r0
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a034:	429a      	cmp	r2, r3
 800a036:	d807      	bhi.n	800a048 <HAL_SPI_TransmitReceive+0x200>
 800a038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03a:	3301      	adds	r3, #1
 800a03c:	d004      	beq.n	800a048 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800a03e:	232b      	movs	r3, #43	@ 0x2b
 800a040:	18fb      	adds	r3, r7, r3
 800a042:	2203      	movs	r2, #3
 800a044:	701a      	strb	r2, [r3, #0]
        goto error;
 800a046:	e0ab      	b.n	800a1a0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1a6      	bne.n	8009fa0 <HAL_SPI_TransmitReceive+0x158>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a056:	b29b      	uxth	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1a1      	bne.n	8009fa0 <HAL_SPI_TransmitReceive+0x158>
 800a05c:	e07f      	b.n	800a15e <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <HAL_SPI_TransmitReceive+0x22a>
 800a066:	231a      	movs	r3, #26
 800a068:	18fb      	adds	r3, r7, r3
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d000      	beq.n	800a072 <HAL_SPI_TransmitReceive+0x22a>
 800a070:	e06b      	b.n	800a14a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	330c      	adds	r3, #12
 800a07c:	7812      	ldrb	r2, [r2, #0]
 800a07e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a084:	1c5a      	adds	r2, r3, #1
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a08e:	b29b      	uxth	r3, r3
 800a090:	3b01      	subs	r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a098:	e057      	b.n	800a14a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d11c      	bne.n	800a0e2 <HAL_SPI_TransmitReceive+0x29a>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d017      	beq.n	800a0e2 <HAL_SPI_TransmitReceive+0x29a>
 800a0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d114      	bne.n	800a0e2 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	330c      	adds	r3, #12
 800a0c2:	7812      	ldrb	r2, [r2, #0]
 800a0c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ca:	1c5a      	adds	r2, r3, #1
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d119      	bne.n	800a124 <HAL_SPI_TransmitReceive+0x2dc>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d014      	beq.n	800a124 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68da      	ldr	r2, [r3, #12]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a104:	b2d2      	uxtb	r2, r2
 800a106:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a116:	b29b      	uxth	r3, r3
 800a118:	3b01      	subs	r3, #1
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a120:	2301      	movs	r3, #1
 800a122:	62fb      	str	r3, [r7, #44]	@ 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a124:	f7fa fbb9 	bl	800489a <HAL_GetTick>
 800a128:	0002      	movs	r2, r0
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a130:	429a      	cmp	r2, r3
 800a132:	d802      	bhi.n	800a13a <HAL_SPI_TransmitReceive+0x2f2>
 800a134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a136:	3301      	adds	r3, #1
 800a138:	d102      	bne.n	800a140 <HAL_SPI_TransmitReceive+0x2f8>
 800a13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d104      	bne.n	800a14a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800a140:	232b      	movs	r3, #43	@ 0x2b
 800a142:	18fb      	adds	r3, r7, r3
 800a144:	2203      	movs	r2, #3
 800a146:	701a      	strb	r2, [r3, #0]
        goto error;
 800a148:	e02a      	b.n	800a1a0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a14e:	b29b      	uxth	r3, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1a2      	bne.n	800a09a <HAL_SPI_TransmitReceive+0x252>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a158:	b29b      	uxth	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d19d      	bne.n	800a09a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a15e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a160:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	0018      	movs	r0, r3
 800a166:	f000 f8c5 	bl	800a2f4 <SPI_EndRxTxTransaction>
 800a16a:	1e03      	subs	r3, r0, #0
 800a16c:	d007      	beq.n	800a17e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800a16e:	232b      	movs	r3, #43	@ 0x2b
 800a170:	18fb      	adds	r3, r7, r3
 800a172:	2201      	movs	r2, #1
 800a174:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2220      	movs	r2, #32
 800a17a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a17c:	e010      	b.n	800a1a0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10b      	bne.n	800a19e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a186:	2300      	movs	r3, #0
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	e000      	b.n	800a1a0 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800a19e:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2251      	movs	r2, #81	@ 0x51
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2250      	movs	r2, #80	@ 0x50
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a1b0:	232b      	movs	r3, #43	@ 0x2b
 800a1b2:	18fb      	adds	r3, r7, r3
 800a1b4:	781b      	ldrb	r3, [r3, #0]
}
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	b00c      	add	sp, #48	@ 0x30
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2251      	movs	r2, #81	@ 0x51
 800a1ca:	5c9b      	ldrb	r3, [r3, r2]
 800a1cc:	b2db      	uxtb	r3, r3
}
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	b002      	add	sp, #8
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b088      	sub	sp, #32
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	603b      	str	r3, [r7, #0]
 800a1e4:	1dfb      	adds	r3, r7, #7
 800a1e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a1e8:	f7fa fb57 	bl	800489a <HAL_GetTick>
 800a1ec:	0002      	movs	r2, r0
 800a1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f0:	1a9b      	subs	r3, r3, r2
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	18d3      	adds	r3, r2, r3
 800a1f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a1f8:	f7fa fb4f 	bl	800489a <HAL_GetTick>
 800a1fc:	0003      	movs	r3, r0
 800a1fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a200:	4b3a      	ldr	r3, [pc, #232]	@ (800a2ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	015b      	lsls	r3, r3, #5
 800a206:	0d1b      	lsrs	r3, r3, #20
 800a208:	69fa      	ldr	r2, [r7, #28]
 800a20a:	4353      	muls	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a20e:	e058      	b.n	800a2c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	d055      	beq.n	800a2c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a216:	f7fa fb40 	bl	800489a <HAL_GetTick>
 800a21a:	0002      	movs	r2, r0
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	69fa      	ldr	r2, [r7, #28]
 800a222:	429a      	cmp	r2, r3
 800a224:	d902      	bls.n	800a22c <SPI_WaitFlagStateUntilTimeout+0x54>
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d142      	bne.n	800a2b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	21e0      	movs	r1, #224	@ 0xe0
 800a238:	438a      	bics	r2, r1
 800a23a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	2382      	movs	r3, #130	@ 0x82
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	429a      	cmp	r2, r3
 800a246:	d113      	bne.n	800a270 <SPI_WaitFlagStateUntilTimeout+0x98>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	2380      	movs	r3, #128	@ 0x80
 800a24e:	021b      	lsls	r3, r3, #8
 800a250:	429a      	cmp	r2, r3
 800a252:	d005      	beq.n	800a260 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	2380      	movs	r3, #128	@ 0x80
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d107      	bne.n	800a270 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2140      	movs	r1, #64	@ 0x40
 800a26c:	438a      	bics	r2, r1
 800a26e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a274:	2380      	movs	r3, #128	@ 0x80
 800a276:	019b      	lsls	r3, r3, #6
 800a278:	429a      	cmp	r2, r3
 800a27a:	d110      	bne.n	800a29e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	491a      	ldr	r1, [pc, #104]	@ (800a2f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a288:	400a      	ands	r2, r1
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2180      	movs	r1, #128	@ 0x80
 800a298:	0189      	lsls	r1, r1, #6
 800a29a:	430a      	orrs	r2, r1
 800a29c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2251      	movs	r2, #81	@ 0x51
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2250      	movs	r2, #80	@ 0x50
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e017      	b.n	800a2e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	425a      	negs	r2, r3
 800a2d2:	4153      	adcs	r3, r2
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	001a      	movs	r2, r3
 800a2d8:	1dfb      	adds	r3, r7, #7
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d197      	bne.n	800a210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b008      	add	sp, #32
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	46c0      	nop			@ (mov r8, r8)
 800a2ec:	20000070 	.word	0x20000070
 800a2f0:	ffffdfff 	.word	0xffffdfff

0800a2f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b088      	sub	sp, #32
 800a2f8:	af02      	add	r7, sp, #8
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a300:	4b1d      	ldr	r3, [pc, #116]	@ (800a378 <SPI_EndRxTxTransaction+0x84>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	491d      	ldr	r1, [pc, #116]	@ (800a37c <SPI_EndRxTxTransaction+0x88>)
 800a306:	0018      	movs	r0, r3
 800a308:	f7f5 ff06 	bl	8000118 <__udivsi3>
 800a30c:	0003      	movs	r3, r0
 800a30e:	001a      	movs	r2, r3
 800a310:	0013      	movs	r3, r2
 800a312:	015b      	lsls	r3, r3, #5
 800a314:	1a9b      	subs	r3, r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	189b      	adds	r3, r3, r2
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	2382      	movs	r3, #130	@ 0x82
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	429a      	cmp	r2, r3
 800a328:	d112      	bne.n	800a350 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	0013      	movs	r3, r2
 800a334:	2200      	movs	r2, #0
 800a336:	2180      	movs	r1, #128	@ 0x80
 800a338:	f7ff ff4e 	bl	800a1d8 <SPI_WaitFlagStateUntilTimeout>
 800a33c:	1e03      	subs	r3, r0, #0
 800a33e:	d016      	beq.n	800a36e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a344:	2220      	movs	r2, #32
 800a346:	431a      	orrs	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e00f      	b.n	800a370 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	3b01      	subs	r3, #1
 800a35a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	2280      	movs	r2, #128	@ 0x80
 800a364:	4013      	ands	r3, r2
 800a366:	2b80      	cmp	r3, #128	@ 0x80
 800a368:	d0f2      	beq.n	800a350 <SPI_EndRxTxTransaction+0x5c>
 800a36a:	e000      	b.n	800a36e <SPI_EndRxTxTransaction+0x7a>
        break;
 800a36c:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	0018      	movs	r0, r3
 800a372:	46bd      	mov	sp, r7
 800a374:	b006      	add	sp, #24
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20000070 	.word	0x20000070
 800a37c:	016e3600 	.word	0x016e3600

0800a380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e044      	b.n	800a41c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a396:	2b00      	cmp	r3, #0
 800a398:	d107      	bne.n	800a3aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2274      	movs	r2, #116	@ 0x74
 800a39e:	2100      	movs	r1, #0
 800a3a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	f7fa fb5f 	bl	8004a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2224      	movs	r2, #36	@ 0x24
 800a3ae:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	438a      	bics	r2, r1
 800a3be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f000 fb3a 	bl	800aa3c <UART_SetConfig>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e024      	b.n	800a41c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	0018      	movs	r0, r3
 800a3de:	f000 fdcd 	bl	800af7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	490d      	ldr	r1, [pc, #52]	@ (800a424 <HAL_UART_Init+0xa4>)
 800a3ee:	400a      	ands	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	212a      	movs	r1, #42	@ 0x2a
 800a3fe:	438a      	bics	r2, r1
 800a400:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2101      	movs	r1, #1
 800a40e:	430a      	orrs	r2, r1
 800a410:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	0018      	movs	r0, r3
 800a416:	f000 fe65 	bl	800b0e4 <UART_CheckIdleState>
 800a41a:	0003      	movs	r3, r0
}
 800a41c:	0018      	movs	r0, r3
 800a41e:	46bd      	mov	sp, r7
 800a420:	b002      	add	sp, #8
 800a422:	bd80      	pop	{r7, pc}
 800a424:	ffffb7ff 	.word	0xffffb7ff

0800a428 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	1dbb      	adds	r3, r7, #6
 800a434:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a43a:	2b20      	cmp	r3, #32
 800a43c:	d144      	bne.n	800a4c8 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_UART_Receive_IT+0x24>
 800a444:	1dbb      	adds	r3, r7, #6
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d101      	bne.n	800a450 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e03c      	b.n	800a4ca <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	2380      	movs	r3, #128	@ 0x80
 800a456:	015b      	lsls	r3, r3, #5
 800a458:	429a      	cmp	r2, r3
 800a45a:	d109      	bne.n	800a470 <HAL_UART_Receive_IT+0x48>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d105      	bne.n	800a470 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2201      	movs	r2, #1
 800a468:	4013      	ands	r3, r2
 800a46a:	d001      	beq.n	800a470 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e02c      	b.n	800a4ca <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2274      	movs	r2, #116	@ 0x74
 800a474:	5c9b      	ldrb	r3, [r3, r2]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d101      	bne.n	800a47e <HAL_UART_Receive_IT+0x56>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e025      	b.n	800a4ca <HAL_UART_Receive_IT+0xa2>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2274      	movs	r2, #116	@ 0x74
 800a482:	2101      	movs	r1, #1
 800a484:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a10      	ldr	r2, [pc, #64]	@ (800a4d4 <HAL_UART_Receive_IT+0xac>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00f      	beq.n	800a4b6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	2380      	movs	r3, #128	@ 0x80
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	d008      	beq.n	800a4b6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2180      	movs	r1, #128	@ 0x80
 800a4b0:	04c9      	lsls	r1, r1, #19
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a4b6:	1dbb      	adds	r3, r7, #6
 800a4b8:	881a      	ldrh	r2, [r3, #0]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	0018      	movs	r0, r3
 800a4c0:	f000 fed6 	bl	800b270 <UART_Start_Receive_IT>
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	e000      	b.n	800a4ca <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a4c8:	2302      	movs	r3, #2
  }
}
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b004      	add	sp, #16
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	46c0      	nop			@ (mov r8, r8)
 800a4d4:	40004800 	.word	0x40004800

0800a4d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	1dbb      	adds	r3, r7, #6
 800a4e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d000      	beq.n	800a4f0 <HAL_UART_Transmit_DMA+0x18>
 800a4ee:	e079      	b.n	800a5e4 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_UART_Transmit_DMA+0x26>
 800a4f6:	1dbb      	adds	r3, r7, #6
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e071      	b.n	800a5e6 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	2380      	movs	r3, #128	@ 0x80
 800a508:	015b      	lsls	r3, r3, #5
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d109      	bne.n	800a522 <HAL_UART_Transmit_DMA+0x4a>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d105      	bne.n	800a522 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2201      	movs	r2, #1
 800a51a:	4013      	ands	r3, r2
 800a51c:	d001      	beq.n	800a522 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e061      	b.n	800a5e6 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2274      	movs	r2, #116	@ 0x74
 800a526:	5c9b      	ldrb	r3, [r3, r2]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d101      	bne.n	800a530 <HAL_UART_Transmit_DMA+0x58>
 800a52c:	2302      	movs	r3, #2
 800a52e:	e05a      	b.n	800a5e6 <HAL_UART_Transmit_DMA+0x10e>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2274      	movs	r2, #116	@ 0x74
 800a534:	2101      	movs	r1, #1
 800a536:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	1dba      	adds	r2, r7, #6
 800a542:	2150      	movs	r1, #80	@ 0x50
 800a544:	8812      	ldrh	r2, [r2, #0]
 800a546:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	1dba      	adds	r2, r7, #6
 800a54c:	2152      	movs	r1, #82	@ 0x52
 800a54e:	8812      	ldrh	r2, [r2, #0]
 800a550:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2280      	movs	r2, #128	@ 0x80
 800a556:	2100      	movs	r1, #0
 800a558:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2221      	movs	r2, #33	@ 0x21
 800a55e:	679a      	str	r2, [r3, #120]	@ 0x78

    if (huart->hdmatx != NULL)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a564:	2b00      	cmp	r3, #0
 800a566:	d02b      	beq.n	800a5c0 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a56c:	4a20      	ldr	r2, [pc, #128]	@ (800a5f0 <HAL_UART_Transmit_DMA+0x118>)
 800a56e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a574:	4a1f      	ldr	r2, [pc, #124]	@ (800a5f4 <HAL_UART_Transmit_DMA+0x11c>)
 800a576:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a57c:	4a1e      	ldr	r2, [pc, #120]	@ (800a5f8 <HAL_UART_Transmit_DMA+0x120>)
 800a57e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a584:	2200      	movs	r2, #0
 800a586:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a590:	0019      	movs	r1, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3328      	adds	r3, #40	@ 0x28
 800a598:	001a      	movs	r2, r3
 800a59a:	1dbb      	adds	r3, r7, #6
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	f7fc fae3 	bl	8006b68 <HAL_DMA_Start_IT>
 800a5a2:	1e03      	subs	r3, r0, #0
 800a5a4:	d00c      	beq.n	800a5c0 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2280      	movs	r2, #128	@ 0x80
 800a5aa:	2110      	movs	r1, #16
 800a5ac:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2274      	movs	r2, #116	@ 0x74
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	679a      	str	r2, [r3, #120]	@ 0x78

        return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e012      	b.n	800a5e6 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2240      	movs	r2, #64	@ 0x40
 800a5c6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2274      	movs	r2, #116	@ 0x74
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689a      	ldr	r2, [r3, #8]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2180      	movs	r1, #128	@ 0x80
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e000      	b.n	800a5e6 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a5e4:	2302      	movs	r3, #2
  }
}
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	b004      	add	sp, #16
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	46c0      	nop			@ (mov r8, r8)
 800a5f0:	0800b415 	.word	0x0800b415
 800a5f4:	0800b469 	.word	0x0800b469
 800a5f8:	0800b487 	.word	0x0800b487

0800a5fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	4ab5      	ldr	r2, [pc, #724]	@ (800a8f4 <HAL_UART_IRQHandler+0x2f8>)
 800a620:	4013      	ands	r3, r2
 800a622:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d112      	bne.n	800a650 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	2220      	movs	r2, #32
 800a62e:	4013      	ands	r3, r2
 800a630:	d00e      	beq.n	800a650 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	2220      	movs	r2, #32
 800a636:	4013      	ands	r3, r2
 800a638:	d00a      	beq.n	800a650 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d100      	bne.n	800a644 <HAL_UART_IRQHandler+0x48>
 800a642:	e1d1      	b.n	800a9e8 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	0010      	movs	r0, r2
 800a64c:	4798      	blx	r3
      }
      return;
 800a64e:	e1cb      	b.n	800a9e8 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d100      	bne.n	800a658 <HAL_UART_IRQHandler+0x5c>
 800a656:	e0d9      	b.n	800a80c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2201      	movs	r2, #1
 800a65c:	4013      	ands	r3, r2
 800a65e:	d104      	bne.n	800a66a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	4aa5      	ldr	r2, [pc, #660]	@ (800a8f8 <HAL_UART_IRQHandler+0x2fc>)
 800a664:	4013      	ands	r3, r2
 800a666:	d100      	bne.n	800a66a <HAL_UART_IRQHandler+0x6e>
 800a668:	e0d0      	b.n	800a80c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	2201      	movs	r2, #1
 800a66e:	4013      	ands	r3, r2
 800a670:	d010      	beq.n	800a694 <HAL_UART_IRQHandler+0x98>
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	2380      	movs	r3, #128	@ 0x80
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	4013      	ands	r3, r2
 800a67a:	d00b      	beq.n	800a694 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2201      	movs	r2, #1
 800a682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2280      	movs	r2, #128	@ 0x80
 800a688:	589b      	ldr	r3, [r3, r2]
 800a68a:	2201      	movs	r2, #1
 800a68c:	431a      	orrs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2180      	movs	r1, #128	@ 0x80
 800a692:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	2202      	movs	r2, #2
 800a698:	4013      	ands	r3, r2
 800a69a:	d00f      	beq.n	800a6bc <HAL_UART_IRQHandler+0xc0>
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	d00b      	beq.n	800a6bc <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2280      	movs	r2, #128	@ 0x80
 800a6b0:	589b      	ldr	r3, [r3, r2]
 800a6b2:	2204      	movs	r2, #4
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2180      	movs	r1, #128	@ 0x80
 800a6ba:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	2204      	movs	r2, #4
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	d00f      	beq.n	800a6e4 <HAL_UART_IRQHandler+0xe8>
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	d00b      	beq.n	800a6e4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2204      	movs	r2, #4
 800a6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2280      	movs	r2, #128	@ 0x80
 800a6d8:	589b      	ldr	r3, [r3, r2]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2180      	movs	r1, #128	@ 0x80
 800a6e2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	2208      	movs	r2, #8
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	d013      	beq.n	800a714 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	d103      	bne.n	800a6fc <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a6fa:	d00b      	beq.n	800a714 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2208      	movs	r2, #8
 800a702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2280      	movs	r2, #128	@ 0x80
 800a708:	589b      	ldr	r3, [r3, r2]
 800a70a:	2208      	movs	r2, #8
 800a70c:	431a      	orrs	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2180      	movs	r1, #128	@ 0x80
 800a712:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	2380      	movs	r3, #128	@ 0x80
 800a718:	011b      	lsls	r3, r3, #4
 800a71a:	4013      	ands	r3, r2
 800a71c:	d011      	beq.n	800a742 <HAL_UART_IRQHandler+0x146>
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	2380      	movs	r3, #128	@ 0x80
 800a722:	04db      	lsls	r3, r3, #19
 800a724:	4013      	ands	r3, r2
 800a726:	d00c      	beq.n	800a742 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2280      	movs	r2, #128	@ 0x80
 800a72e:	0112      	lsls	r2, r2, #4
 800a730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2280      	movs	r2, #128	@ 0x80
 800a736:	589b      	ldr	r3, [r3, r2]
 800a738:	2220      	movs	r2, #32
 800a73a:	431a      	orrs	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2180      	movs	r1, #128	@ 0x80
 800a740:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2280      	movs	r2, #128	@ 0x80
 800a746:	589b      	ldr	r3, [r3, r2]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d100      	bne.n	800a74e <HAL_UART_IRQHandler+0x152>
 800a74c:	e14e      	b.n	800a9ec <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	2220      	movs	r2, #32
 800a752:	4013      	ands	r3, r2
 800a754:	d00c      	beq.n	800a770 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	2220      	movs	r2, #32
 800a75a:	4013      	ands	r3, r2
 800a75c:	d008      	beq.n	800a770 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a762:	2b00      	cmp	r3, #0
 800a764:	d004      	beq.n	800a770 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	0010      	movs	r0, r2
 800a76e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2280      	movs	r2, #128	@ 0x80
 800a774:	589b      	ldr	r3, [r3, r2]
 800a776:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	2240      	movs	r2, #64	@ 0x40
 800a780:	4013      	ands	r3, r2
 800a782:	2b40      	cmp	r3, #64	@ 0x40
 800a784:	d003      	beq.n	800a78e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2228      	movs	r2, #40	@ 0x28
 800a78a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a78c:	d033      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	0018      	movs	r0, r3
 800a792:	f000 fe0f 	bl	800b3b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	2240      	movs	r2, #64	@ 0x40
 800a79e:	4013      	ands	r3, r2
 800a7a0:	2b40      	cmp	r3, #64	@ 0x40
 800a7a2:	d123      	bne.n	800a7ec <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2140      	movs	r1, #64	@ 0x40
 800a7b0:	438a      	bics	r2, r1
 800a7b2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d012      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c0:	4a4e      	ldr	r2, [pc, #312]	@ (800a8fc <HAL_UART_IRQHandler+0x300>)
 800a7c2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	f7fc fa73 	bl	8006cb4 <HAL_DMA_Abort_IT>
 800a7ce:	1e03      	subs	r3, r0, #0
 800a7d0:	d01a      	beq.n	800a808 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7dc:	0018      	movs	r0, r3
 800a7de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e0:	e012      	b.n	800a808 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	0018      	movs	r0, r3
 800a7e6:	f000 f915 	bl	800aa14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ea:	e00d      	b.n	800a808 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	f000 f910 	bl	800aa14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f4:	e008      	b.n	800a808 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f000 f90b 	bl	800aa14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2280      	movs	r2, #128	@ 0x80
 800a802:	2100      	movs	r1, #0
 800a804:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a806:	e0f1      	b.n	800a9ec <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a808:	46c0      	nop			@ (mov r8, r8)
    return;
 800a80a:	e0ef      	b.n	800a9ec <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a810:	2b01      	cmp	r3, #1
 800a812:	d000      	beq.n	800a816 <HAL_UART_IRQHandler+0x21a>
 800a814:	e0b5      	b.n	800a982 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	2210      	movs	r2, #16
 800a81a:	4013      	ands	r3, r2
 800a81c:	d100      	bne.n	800a820 <HAL_UART_IRQHandler+0x224>
 800a81e:	e0b0      	b.n	800a982 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2210      	movs	r2, #16
 800a824:	4013      	ands	r3, r2
 800a826:	d100      	bne.n	800a82a <HAL_UART_IRQHandler+0x22e>
 800a828:	e0ab      	b.n	800a982 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2210      	movs	r2, #16
 800a830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	2240      	movs	r2, #64	@ 0x40
 800a83a:	4013      	ands	r3, r2
 800a83c:	2b40      	cmp	r3, #64	@ 0x40
 800a83e:	d161      	bne.n	800a904 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	2108      	movs	r1, #8
 800a84a:	187b      	adds	r3, r7, r1
 800a84c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800a84e:	187b      	adds	r3, r7, r1
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d100      	bne.n	800a858 <HAL_UART_IRQHandler+0x25c>
 800a856:	e0cb      	b.n	800a9f0 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2258      	movs	r2, #88	@ 0x58
 800a85c:	5a9b      	ldrh	r3, [r3, r2]
 800a85e:	187a      	adds	r2, r7, r1
 800a860:	8812      	ldrh	r2, [r2, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d300      	bcc.n	800a868 <HAL_UART_IRQHandler+0x26c>
 800a866:	e0c3      	b.n	800a9f0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	187a      	adds	r2, r7, r1
 800a86c:	215a      	movs	r1, #90	@ 0x5a
 800a86e:	8812      	ldrh	r2, [r2, #0]
 800a870:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2220      	movs	r2, #32
 800a87c:	4013      	ands	r3, r2
 800a87e:	d12a      	bne.n	800a8d6 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	491d      	ldr	r1, [pc, #116]	@ (800a900 <HAL_UART_IRQHandler+0x304>)
 800a88c:	400a      	ands	r2, r1
 800a88e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689a      	ldr	r2, [r3, #8]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2101      	movs	r1, #1
 800a89c:	438a      	bics	r2, r1
 800a89e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689a      	ldr	r2, [r3, #8]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2140      	movs	r1, #64	@ 0x40
 800a8ac:	438a      	bics	r2, r1
 800a8ae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	661a      	str	r2, [r3, #96]	@ 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2110      	movs	r1, #16
 800a8c8:	438a      	bics	r2, r1
 800a8ca:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	f7fc f9af 	bl	8006c34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2258      	movs	r2, #88	@ 0x58
 800a8da:	5a9a      	ldrh	r2, [r3, r2]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	215a      	movs	r1, #90	@ 0x5a
 800a8e0:	5a5b      	ldrh	r3, [r3, r1]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	0011      	movs	r1, r2
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	f000 f899 	bl	800aa24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a8f2:	e07d      	b.n	800a9f0 <HAL_UART_IRQHandler+0x3f4>
 800a8f4:	0000080f 	.word	0x0000080f
 800a8f8:	04000120 	.word	0x04000120
 800a8fc:	0800b509 	.word	0x0800b509
 800a900:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2258      	movs	r2, #88	@ 0x58
 800a908:	5a99      	ldrh	r1, [r3, r2]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	225a      	movs	r2, #90	@ 0x5a
 800a90e:	5a9b      	ldrh	r3, [r3, r2]
 800a910:	b29a      	uxth	r2, r3
 800a912:	200a      	movs	r0, #10
 800a914:	183b      	adds	r3, r7, r0
 800a916:	1a8a      	subs	r2, r1, r2
 800a918:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	225a      	movs	r2, #90	@ 0x5a
 800a91e:	5a9b      	ldrh	r3, [r3, r2]
 800a920:	b29b      	uxth	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d100      	bne.n	800a928 <HAL_UART_IRQHandler+0x32c>
 800a926:	e065      	b.n	800a9f4 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800a928:	183b      	adds	r3, r7, r0
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d061      	beq.n	800a9f4 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4931      	ldr	r1, [pc, #196]	@ (800aa00 <HAL_UART_IRQHandler+0x404>)
 800a93c:	400a      	ands	r2, r1
 800a93e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689a      	ldr	r2, [r3, #8]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2101      	movs	r1, #1
 800a94c:	438a      	bics	r2, r1
 800a94e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2220      	movs	r2, #32
 800a954:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	665a      	str	r2, [r3, #100]	@ 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2110      	movs	r1, #16
 800a96e:	438a      	bics	r2, r1
 800a970:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a972:	183b      	adds	r3, r7, r0
 800a974:	881a      	ldrh	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	0011      	movs	r1, r2
 800a97a:	0018      	movs	r0, r3
 800a97c:	f000 f852 	bl	800aa24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a980:	e038      	b.n	800a9f4 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a982:	69fa      	ldr	r2, [r7, #28]
 800a984:	2380      	movs	r3, #128	@ 0x80
 800a986:	035b      	lsls	r3, r3, #13
 800a988:	4013      	ands	r3, r2
 800a98a:	d00e      	beq.n	800a9aa <HAL_UART_IRQHandler+0x3ae>
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	2380      	movs	r3, #128	@ 0x80
 800a990:	03db      	lsls	r3, r3, #15
 800a992:	4013      	ands	r3, r2
 800a994:	d009      	beq.n	800a9aa <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2280      	movs	r2, #128	@ 0x80
 800a99c:	0352      	lsls	r2, r2, #13
 800a99e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	f000 feca 	bl	800b73c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9a8:	e027      	b.n	800a9fa <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	2280      	movs	r2, #128	@ 0x80
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	d00d      	beq.n	800a9ce <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	2280      	movs	r2, #128	@ 0x80
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	d009      	beq.n	800a9ce <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d01a      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	0010      	movs	r0, r2
 800a9ca:	4798      	blx	r3
    }
    return;
 800a9cc:	e014      	b.n	800a9f8 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	2240      	movs	r2, #64	@ 0x40
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	d011      	beq.n	800a9fa <HAL_UART_IRQHandler+0x3fe>
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	2240      	movs	r2, #64	@ 0x40
 800a9da:	4013      	ands	r3, r2
 800a9dc:	d00d      	beq.n	800a9fa <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	f000 fda8 	bl	800b536 <UART_EndTransmit_IT>
    return;
 800a9e6:	e008      	b.n	800a9fa <HAL_UART_IRQHandler+0x3fe>
      return;
 800a9e8:	46c0      	nop			@ (mov r8, r8)
 800a9ea:	e006      	b.n	800a9fa <HAL_UART_IRQHandler+0x3fe>
    return;
 800a9ec:	46c0      	nop			@ (mov r8, r8)
 800a9ee:	e004      	b.n	800a9fa <HAL_UART_IRQHandler+0x3fe>
      return;
 800a9f0:	46c0      	nop			@ (mov r8, r8)
 800a9f2:	e002      	b.n	800a9fa <HAL_UART_IRQHandler+0x3fe>
      return;
 800a9f4:	46c0      	nop			@ (mov r8, r8)
 800a9f6:	e000      	b.n	800a9fa <HAL_UART_IRQHandler+0x3fe>
    return;
 800a9f8:	46c0      	nop			@ (mov r8, r8)
  }

}
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	b008      	add	sp, #32
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	fffffedf 	.word	0xfffffedf

0800aa04 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa0c:	46c0      	nop			@ (mov r8, r8)
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	b002      	add	sp, #8
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa1c:	46c0      	nop			@ (mov r8, r8)
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	b002      	add	sp, #8
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	000a      	movs	r2, r1
 800aa2e:	1cbb      	adds	r3, r7, #2
 800aa30:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa32:	46c0      	nop			@ (mov r8, r8)
 800aa34:	46bd      	mov	sp, r7
 800aa36:	b002      	add	sp, #8
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa3c:	b5b0      	push	{r4, r5, r7, lr}
 800aa3e:	b08e      	sub	sp, #56	@ 0x38
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa44:	231a      	movs	r3, #26
 800aa46:	2218      	movs	r2, #24
 800aa48:	189b      	adds	r3, r3, r2
 800aa4a:	19db      	adds	r3, r3, r7
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	431a      	orrs	r2, r3
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	69db      	ldr	r3, [r3, #28]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4ac3      	ldr	r2, [pc, #780]	@ (800ad7c <UART_SetConfig+0x340>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	0019      	movs	r1, r3
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4abe      	ldr	r2, [pc, #760]	@ (800ad80 <UART_SetConfig+0x344>)
 800aa86:	4013      	ands	r3, r2
 800aa88:	0019      	movs	r1, r3
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4ab8      	ldr	r2, [pc, #736]	@ (800ad84 <UART_SetConfig+0x348>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d004      	beq.n	800aab0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aaac:	4313      	orrs	r3, r2
 800aaae:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	4ab4      	ldr	r2, [pc, #720]	@ (800ad88 <UART_SetConfig+0x34c>)
 800aab8:	4013      	ands	r3, r2
 800aaba:	0019      	movs	r1, r3
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aac2:	430a      	orrs	r2, r1
 800aac4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4ab0      	ldr	r2, [pc, #704]	@ (800ad8c <UART_SetConfig+0x350>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d131      	bne.n	800ab34 <UART_SetConfig+0xf8>
 800aad0:	4baf      	ldr	r3, [pc, #700]	@ (800ad90 <UART_SetConfig+0x354>)
 800aad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aad4:	2203      	movs	r2, #3
 800aad6:	4013      	ands	r3, r2
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d01d      	beq.n	800ab18 <UART_SetConfig+0xdc>
 800aadc:	d823      	bhi.n	800ab26 <UART_SetConfig+0xea>
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d00c      	beq.n	800aafc <UART_SetConfig+0xc0>
 800aae2:	d820      	bhi.n	800ab26 <UART_SetConfig+0xea>
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <UART_SetConfig+0xb2>
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d00e      	beq.n	800ab0a <UART_SetConfig+0xce>
 800aaec:	e01b      	b.n	800ab26 <UART_SetConfig+0xea>
 800aaee:	231b      	movs	r3, #27
 800aaf0:	2218      	movs	r2, #24
 800aaf2:	189b      	adds	r3, r3, r2
 800aaf4:	19db      	adds	r3, r3, r7
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	e0b4      	b.n	800ac66 <UART_SetConfig+0x22a>
 800aafc:	231b      	movs	r3, #27
 800aafe:	2218      	movs	r2, #24
 800ab00:	189b      	adds	r3, r3, r2
 800ab02:	19db      	adds	r3, r3, r7
 800ab04:	2202      	movs	r2, #2
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	e0ad      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ab0a:	231b      	movs	r3, #27
 800ab0c:	2218      	movs	r2, #24
 800ab0e:	189b      	adds	r3, r3, r2
 800ab10:	19db      	adds	r3, r3, r7
 800ab12:	2204      	movs	r2, #4
 800ab14:	701a      	strb	r2, [r3, #0]
 800ab16:	e0a6      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ab18:	231b      	movs	r3, #27
 800ab1a:	2218      	movs	r2, #24
 800ab1c:	189b      	adds	r3, r3, r2
 800ab1e:	19db      	adds	r3, r3, r7
 800ab20:	2208      	movs	r2, #8
 800ab22:	701a      	strb	r2, [r3, #0]
 800ab24:	e09f      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ab26:	231b      	movs	r3, #27
 800ab28:	2218      	movs	r2, #24
 800ab2a:	189b      	adds	r3, r3, r2
 800ab2c:	19db      	adds	r3, r3, r7
 800ab2e:	2210      	movs	r2, #16
 800ab30:	701a      	strb	r2, [r3, #0]
 800ab32:	e098      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a96      	ldr	r2, [pc, #600]	@ (800ad94 <UART_SetConfig+0x358>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d131      	bne.n	800aba2 <UART_SetConfig+0x166>
 800ab3e:	4b94      	ldr	r3, [pc, #592]	@ (800ad90 <UART_SetConfig+0x354>)
 800ab40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab42:	220c      	movs	r2, #12
 800ab44:	4013      	ands	r3, r2
 800ab46:	2b0c      	cmp	r3, #12
 800ab48:	d01d      	beq.n	800ab86 <UART_SetConfig+0x14a>
 800ab4a:	d823      	bhi.n	800ab94 <UART_SetConfig+0x158>
 800ab4c:	2b08      	cmp	r3, #8
 800ab4e:	d00c      	beq.n	800ab6a <UART_SetConfig+0x12e>
 800ab50:	d820      	bhi.n	800ab94 <UART_SetConfig+0x158>
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d002      	beq.n	800ab5c <UART_SetConfig+0x120>
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d00e      	beq.n	800ab78 <UART_SetConfig+0x13c>
 800ab5a:	e01b      	b.n	800ab94 <UART_SetConfig+0x158>
 800ab5c:	231b      	movs	r3, #27
 800ab5e:	2218      	movs	r2, #24
 800ab60:	189b      	adds	r3, r3, r2
 800ab62:	19db      	adds	r3, r3, r7
 800ab64:	2200      	movs	r2, #0
 800ab66:	701a      	strb	r2, [r3, #0]
 800ab68:	e07d      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ab6a:	231b      	movs	r3, #27
 800ab6c:	2218      	movs	r2, #24
 800ab6e:	189b      	adds	r3, r3, r2
 800ab70:	19db      	adds	r3, r3, r7
 800ab72:	2202      	movs	r2, #2
 800ab74:	701a      	strb	r2, [r3, #0]
 800ab76:	e076      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ab78:	231b      	movs	r3, #27
 800ab7a:	2218      	movs	r2, #24
 800ab7c:	189b      	adds	r3, r3, r2
 800ab7e:	19db      	adds	r3, r3, r7
 800ab80:	2204      	movs	r2, #4
 800ab82:	701a      	strb	r2, [r3, #0]
 800ab84:	e06f      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ab86:	231b      	movs	r3, #27
 800ab88:	2218      	movs	r2, #24
 800ab8a:	189b      	adds	r3, r3, r2
 800ab8c:	19db      	adds	r3, r3, r7
 800ab8e:	2208      	movs	r2, #8
 800ab90:	701a      	strb	r2, [r3, #0]
 800ab92:	e068      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ab94:	231b      	movs	r3, #27
 800ab96:	2218      	movs	r2, #24
 800ab98:	189b      	adds	r3, r3, r2
 800ab9a:	19db      	adds	r3, r3, r7
 800ab9c:	2210      	movs	r2, #16
 800ab9e:	701a      	strb	r2, [r3, #0]
 800aba0:	e061      	b.n	800ac66 <UART_SetConfig+0x22a>
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a7c      	ldr	r2, [pc, #496]	@ (800ad98 <UART_SetConfig+0x35c>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d106      	bne.n	800abba <UART_SetConfig+0x17e>
 800abac:	231b      	movs	r3, #27
 800abae:	2218      	movs	r2, #24
 800abb0:	189b      	adds	r3, r3, r2
 800abb2:	19db      	adds	r3, r3, r7
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
 800abb8:	e055      	b.n	800ac66 <UART_SetConfig+0x22a>
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a77      	ldr	r2, [pc, #476]	@ (800ad9c <UART_SetConfig+0x360>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d106      	bne.n	800abd2 <UART_SetConfig+0x196>
 800abc4:	231b      	movs	r3, #27
 800abc6:	2218      	movs	r2, #24
 800abc8:	189b      	adds	r3, r3, r2
 800abca:	19db      	adds	r3, r3, r7
 800abcc:	2200      	movs	r2, #0
 800abce:	701a      	strb	r2, [r3, #0]
 800abd0:	e049      	b.n	800ac66 <UART_SetConfig+0x22a>
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a6b      	ldr	r2, [pc, #428]	@ (800ad84 <UART_SetConfig+0x348>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d13e      	bne.n	800ac5a <UART_SetConfig+0x21e>
 800abdc:	4b6c      	ldr	r3, [pc, #432]	@ (800ad90 <UART_SetConfig+0x354>)
 800abde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abe0:	23c0      	movs	r3, #192	@ 0xc0
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	4013      	ands	r3, r2
 800abe6:	22c0      	movs	r2, #192	@ 0xc0
 800abe8:	0112      	lsls	r2, r2, #4
 800abea:	4293      	cmp	r3, r2
 800abec:	d027      	beq.n	800ac3e <UART_SetConfig+0x202>
 800abee:	22c0      	movs	r2, #192	@ 0xc0
 800abf0:	0112      	lsls	r2, r2, #4
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d82a      	bhi.n	800ac4c <UART_SetConfig+0x210>
 800abf6:	2280      	movs	r2, #128	@ 0x80
 800abf8:	0112      	lsls	r2, r2, #4
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d011      	beq.n	800ac22 <UART_SetConfig+0x1e6>
 800abfe:	2280      	movs	r2, #128	@ 0x80
 800ac00:	0112      	lsls	r2, r2, #4
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d822      	bhi.n	800ac4c <UART_SetConfig+0x210>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d004      	beq.n	800ac14 <UART_SetConfig+0x1d8>
 800ac0a:	2280      	movs	r2, #128	@ 0x80
 800ac0c:	00d2      	lsls	r2, r2, #3
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00e      	beq.n	800ac30 <UART_SetConfig+0x1f4>
 800ac12:	e01b      	b.n	800ac4c <UART_SetConfig+0x210>
 800ac14:	231b      	movs	r3, #27
 800ac16:	2218      	movs	r2, #24
 800ac18:	189b      	adds	r3, r3, r2
 800ac1a:	19db      	adds	r3, r3, r7
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	e021      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ac22:	231b      	movs	r3, #27
 800ac24:	2218      	movs	r2, #24
 800ac26:	189b      	adds	r3, r3, r2
 800ac28:	19db      	adds	r3, r3, r7
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	701a      	strb	r2, [r3, #0]
 800ac2e:	e01a      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ac30:	231b      	movs	r3, #27
 800ac32:	2218      	movs	r2, #24
 800ac34:	189b      	adds	r3, r3, r2
 800ac36:	19db      	adds	r3, r3, r7
 800ac38:	2204      	movs	r2, #4
 800ac3a:	701a      	strb	r2, [r3, #0]
 800ac3c:	e013      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ac3e:	231b      	movs	r3, #27
 800ac40:	2218      	movs	r2, #24
 800ac42:	189b      	adds	r3, r3, r2
 800ac44:	19db      	adds	r3, r3, r7
 800ac46:	2208      	movs	r2, #8
 800ac48:	701a      	strb	r2, [r3, #0]
 800ac4a:	e00c      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ac4c:	231b      	movs	r3, #27
 800ac4e:	2218      	movs	r2, #24
 800ac50:	189b      	adds	r3, r3, r2
 800ac52:	19db      	adds	r3, r3, r7
 800ac54:	2210      	movs	r2, #16
 800ac56:	701a      	strb	r2, [r3, #0]
 800ac58:	e005      	b.n	800ac66 <UART_SetConfig+0x22a>
 800ac5a:	231b      	movs	r3, #27
 800ac5c:	2218      	movs	r2, #24
 800ac5e:	189b      	adds	r3, r3, r2
 800ac60:	19db      	adds	r3, r3, r7
 800ac62:	2210      	movs	r2, #16
 800ac64:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a46      	ldr	r2, [pc, #280]	@ (800ad84 <UART_SetConfig+0x348>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d000      	beq.n	800ac72 <UART_SetConfig+0x236>
 800ac70:	e09a      	b.n	800ada8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac72:	231b      	movs	r3, #27
 800ac74:	2218      	movs	r2, #24
 800ac76:	189b      	adds	r3, r3, r2
 800ac78:	19db      	adds	r3, r3, r7
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b08      	cmp	r3, #8
 800ac7e:	d01d      	beq.n	800acbc <UART_SetConfig+0x280>
 800ac80:	dc20      	bgt.n	800acc4 <UART_SetConfig+0x288>
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d015      	beq.n	800acb2 <UART_SetConfig+0x276>
 800ac86:	dc1d      	bgt.n	800acc4 <UART_SetConfig+0x288>
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <UART_SetConfig+0x256>
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d005      	beq.n	800ac9c <UART_SetConfig+0x260>
 800ac90:	e018      	b.n	800acc4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac92:	f7fe f8cb 	bl	8008e2c <HAL_RCC_GetPCLK1Freq>
 800ac96:	0003      	movs	r3, r0
 800ac98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ac9a:	e01c      	b.n	800acd6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac9c:	4b3c      	ldr	r3, [pc, #240]	@ (800ad90 <UART_SetConfig+0x354>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2210      	movs	r2, #16
 800aca2:	4013      	ands	r3, r2
 800aca4:	d002      	beq.n	800acac <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800aca6:	4b3e      	ldr	r3, [pc, #248]	@ (800ada0 <UART_SetConfig+0x364>)
 800aca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acaa:	e014      	b.n	800acd6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800acac:	4b3d      	ldr	r3, [pc, #244]	@ (800ada4 <UART_SetConfig+0x368>)
 800acae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800acb0:	e011      	b.n	800acd6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acb2:	f7fe f80b 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 800acb6:	0003      	movs	r3, r0
 800acb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800acba:	e00c      	b.n	800acd6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acbc:	2380      	movs	r3, #128	@ 0x80
 800acbe:	021b      	lsls	r3, r3, #8
 800acc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800acc2:	e008      	b.n	800acd6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800acc8:	231a      	movs	r3, #26
 800acca:	2218      	movs	r2, #24
 800accc:	189b      	adds	r3, r3, r2
 800acce:	19db      	adds	r3, r3, r7
 800acd0:	2201      	movs	r2, #1
 800acd2:	701a      	strb	r2, [r3, #0]
        break;
 800acd4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800acd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d100      	bne.n	800acde <UART_SetConfig+0x2a2>
 800acdc:	e134      	b.n	800af48 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	0013      	movs	r3, r2
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	189b      	adds	r3, r3, r2
 800ace8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acea:	429a      	cmp	r2, r3
 800acec:	d305      	bcc.n	800acfa <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800acf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d906      	bls.n	800ad08 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800acfa:	231a      	movs	r3, #26
 800acfc:	2218      	movs	r2, #24
 800acfe:	189b      	adds	r3, r3, r2
 800ad00:	19db      	adds	r3, r3, r7
 800ad02:	2201      	movs	r2, #1
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	e11f      	b.n	800af48 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ad08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	617b      	str	r3, [r7, #20]
 800ad10:	6939      	ldr	r1, [r7, #16]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	000b      	movs	r3, r1
 800ad16:	0e1b      	lsrs	r3, r3, #24
 800ad18:	0010      	movs	r0, r2
 800ad1a:	0205      	lsls	r5, r0, #8
 800ad1c:	431d      	orrs	r5, r3
 800ad1e:	000b      	movs	r3, r1
 800ad20:	021c      	lsls	r4, r3, #8
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	085b      	lsrs	r3, r3, #1
 800ad28:	60bb      	str	r3, [r7, #8]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	68b8      	ldr	r0, [r7, #8]
 800ad30:	68f9      	ldr	r1, [r7, #12]
 800ad32:	1900      	adds	r0, r0, r4
 800ad34:	4169      	adcs	r1, r5
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	607b      	str	r3, [r7, #4]
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f7f5 fbc0 	bl	80004c8 <__aeabi_uldivmod>
 800ad48:	0002      	movs	r2, r0
 800ad4a:	000b      	movs	r3, r1
 800ad4c:	0013      	movs	r3, r2
 800ad4e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad52:	23c0      	movs	r3, #192	@ 0xc0
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d309      	bcc.n	800ad6e <UART_SetConfig+0x332>
 800ad5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad5c:	2380      	movs	r3, #128	@ 0x80
 800ad5e:	035b      	lsls	r3, r3, #13
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d204      	bcs.n	800ad6e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad6a:	60da      	str	r2, [r3, #12]
 800ad6c:	e0ec      	b.n	800af48 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800ad6e:	231a      	movs	r3, #26
 800ad70:	2218      	movs	r2, #24
 800ad72:	189b      	adds	r3, r3, r2
 800ad74:	19db      	adds	r3, r3, r7
 800ad76:	2201      	movs	r2, #1
 800ad78:	701a      	strb	r2, [r3, #0]
 800ad7a:	e0e5      	b.n	800af48 <UART_SetConfig+0x50c>
 800ad7c:	efff69f3 	.word	0xefff69f3
 800ad80:	ffffcfff 	.word	0xffffcfff
 800ad84:	40004800 	.word	0x40004800
 800ad88:	fffff4ff 	.word	0xfffff4ff
 800ad8c:	40013800 	.word	0x40013800
 800ad90:	40021000 	.word	0x40021000
 800ad94:	40004400 	.word	0x40004400
 800ad98:	40004c00 	.word	0x40004c00
 800ad9c:	40005000 	.word	0x40005000
 800ada0:	003d0900 	.word	0x003d0900
 800ada4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	69da      	ldr	r2, [r3, #28]
 800adac:	2380      	movs	r3, #128	@ 0x80
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d000      	beq.n	800adb6 <UART_SetConfig+0x37a>
 800adb4:	e071      	b.n	800ae9a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800adb6:	231b      	movs	r3, #27
 800adb8:	2218      	movs	r2, #24
 800adba:	189b      	adds	r3, r3, r2
 800adbc:	19db      	adds	r3, r3, r7
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b08      	cmp	r3, #8
 800adc2:	d822      	bhi.n	800ae0a <UART_SetConfig+0x3ce>
 800adc4:	009a      	lsls	r2, r3, #2
 800adc6:	4b68      	ldr	r3, [pc, #416]	@ (800af68 <UART_SetConfig+0x52c>)
 800adc8:	18d3      	adds	r3, r2, r3
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adce:	f7fe f82d 	bl	8008e2c <HAL_RCC_GetPCLK1Freq>
 800add2:	0003      	movs	r3, r0
 800add4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800add6:	e021      	b.n	800ae1c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800add8:	f7fe f83e 	bl	8008e58 <HAL_RCC_GetPCLK2Freq>
 800addc:	0003      	movs	r3, r0
 800adde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ade0:	e01c      	b.n	800ae1c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ade2:	4b62      	ldr	r3, [pc, #392]	@ (800af6c <UART_SetConfig+0x530>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2210      	movs	r2, #16
 800ade8:	4013      	ands	r3, r2
 800adea:	d002      	beq.n	800adf2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800adec:	4b60      	ldr	r3, [pc, #384]	@ (800af70 <UART_SetConfig+0x534>)
 800adee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adf0:	e014      	b.n	800ae1c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800adf2:	4b60      	ldr	r3, [pc, #384]	@ (800af74 <UART_SetConfig+0x538>)
 800adf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800adf6:	e011      	b.n	800ae1c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adf8:	f7fd ff68 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 800adfc:	0003      	movs	r3, r0
 800adfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ae00:	e00c      	b.n	800ae1c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae02:	2380      	movs	r3, #128	@ 0x80
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ae08:	e008      	b.n	800ae1c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800ae0e:	231a      	movs	r3, #26
 800ae10:	2218      	movs	r2, #24
 800ae12:	189b      	adds	r3, r3, r2
 800ae14:	19db      	adds	r3, r3, r7
 800ae16:	2201      	movs	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]
        break;
 800ae1a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d100      	bne.n	800ae24 <UART_SetConfig+0x3e8>
 800ae22:	e091      	b.n	800af48 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae26:	005a      	lsls	r2, r3, #1
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	085b      	lsrs	r3, r3, #1
 800ae2e:	18d2      	adds	r2, r2, r3
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	0019      	movs	r1, r3
 800ae36:	0010      	movs	r0, r2
 800ae38:	f7f5 f96e 	bl	8000118 <__udivsi3>
 800ae3c:	0003      	movs	r3, r0
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae44:	2b0f      	cmp	r3, #15
 800ae46:	d921      	bls.n	800ae8c <UART_SetConfig+0x450>
 800ae48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae4a:	2380      	movs	r3, #128	@ 0x80
 800ae4c:	025b      	lsls	r3, r3, #9
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d21c      	bcs.n	800ae8c <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	200e      	movs	r0, #14
 800ae58:	2418      	movs	r4, #24
 800ae5a:	1903      	adds	r3, r0, r4
 800ae5c:	19db      	adds	r3, r3, r7
 800ae5e:	210f      	movs	r1, #15
 800ae60:	438a      	bics	r2, r1
 800ae62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae66:	085b      	lsrs	r3, r3, #1
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	2207      	movs	r2, #7
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	b299      	uxth	r1, r3
 800ae70:	1903      	adds	r3, r0, r4
 800ae72:	19db      	adds	r3, r3, r7
 800ae74:	1902      	adds	r2, r0, r4
 800ae76:	19d2      	adds	r2, r2, r7
 800ae78:	8812      	ldrh	r2, [r2, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	1902      	adds	r2, r0, r4
 800ae84:	19d2      	adds	r2, r2, r7
 800ae86:	8812      	ldrh	r2, [r2, #0]
 800ae88:	60da      	str	r2, [r3, #12]
 800ae8a:	e05d      	b.n	800af48 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800ae8c:	231a      	movs	r3, #26
 800ae8e:	2218      	movs	r2, #24
 800ae90:	189b      	adds	r3, r3, r2
 800ae92:	19db      	adds	r3, r3, r7
 800ae94:	2201      	movs	r2, #1
 800ae96:	701a      	strb	r2, [r3, #0]
 800ae98:	e056      	b.n	800af48 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae9a:	231b      	movs	r3, #27
 800ae9c:	2218      	movs	r2, #24
 800ae9e:	189b      	adds	r3, r3, r2
 800aea0:	19db      	adds	r3, r3, r7
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d822      	bhi.n	800aeee <UART_SetConfig+0x4b2>
 800aea8:	009a      	lsls	r2, r3, #2
 800aeaa:	4b33      	ldr	r3, [pc, #204]	@ (800af78 <UART_SetConfig+0x53c>)
 800aeac:	18d3      	adds	r3, r2, r3
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeb2:	f7fd ffbb 	bl	8008e2c <HAL_RCC_GetPCLK1Freq>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aeba:	e021      	b.n	800af00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aebc:	f7fd ffcc 	bl	8008e58 <HAL_RCC_GetPCLK2Freq>
 800aec0:	0003      	movs	r3, r0
 800aec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aec4:	e01c      	b.n	800af00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aec6:	4b29      	ldr	r3, [pc, #164]	@ (800af6c <UART_SetConfig+0x530>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2210      	movs	r2, #16
 800aecc:	4013      	ands	r3, r2
 800aece:	d002      	beq.n	800aed6 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800aed0:	4b27      	ldr	r3, [pc, #156]	@ (800af70 <UART_SetConfig+0x534>)
 800aed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aed4:	e014      	b.n	800af00 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800aed6:	4b27      	ldr	r3, [pc, #156]	@ (800af74 <UART_SetConfig+0x538>)
 800aed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aeda:	e011      	b.n	800af00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aedc:	f7fd fef6 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 800aee0:	0003      	movs	r3, r0
 800aee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aee4:	e00c      	b.n	800af00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aee6:	2380      	movs	r3, #128	@ 0x80
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aeec:	e008      	b.n	800af00 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800aef2:	231a      	movs	r3, #26
 800aef4:	2218      	movs	r2, #24
 800aef6:	189b      	adds	r3, r3, r2
 800aef8:	19db      	adds	r3, r3, r7
 800aefa:	2201      	movs	r2, #1
 800aefc:	701a      	strb	r2, [r3, #0]
        break;
 800aefe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800af00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af02:	2b00      	cmp	r3, #0
 800af04:	d020      	beq.n	800af48 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	085a      	lsrs	r2, r3, #1
 800af0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0e:	18d2      	adds	r2, r2, r3
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	0019      	movs	r1, r3
 800af16:	0010      	movs	r0, r2
 800af18:	f7f5 f8fe 	bl	8000118 <__udivsi3>
 800af1c:	0003      	movs	r3, r0
 800af1e:	b29b      	uxth	r3, r3
 800af20:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af24:	2b0f      	cmp	r3, #15
 800af26:	d909      	bls.n	800af3c <UART_SetConfig+0x500>
 800af28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af2a:	2380      	movs	r3, #128	@ 0x80
 800af2c:	025b      	lsls	r3, r3, #9
 800af2e:	429a      	cmp	r2, r3
 800af30:	d204      	bcs.n	800af3c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af38:	60da      	str	r2, [r3, #12]
 800af3a:	e005      	b.n	800af48 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800af3c:	231a      	movs	r3, #26
 800af3e:	2218      	movs	r2, #24
 800af40:	189b      	adds	r3, r3, r2
 800af42:	19db      	adds	r3, r3, r7
 800af44:	2201      	movs	r2, #1
 800af46:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	2200      	movs	r2, #0
 800af4c:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	2200      	movs	r2, #0
 800af52:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 800af54:	231a      	movs	r3, #26
 800af56:	2218      	movs	r2, #24
 800af58:	189b      	adds	r3, r3, r2
 800af5a:	19db      	adds	r3, r3, r7
 800af5c:	781b      	ldrb	r3, [r3, #0]
}
 800af5e:	0018      	movs	r0, r3
 800af60:	46bd      	mov	sp, r7
 800af62:	b00e      	add	sp, #56	@ 0x38
 800af64:	bdb0      	pop	{r4, r5, r7, pc}
 800af66:	46c0      	nop			@ (mov r8, r8)
 800af68:	0801db10 	.word	0x0801db10
 800af6c:	40021000 	.word	0x40021000
 800af70:	003d0900 	.word	0x003d0900
 800af74:	00f42400 	.word	0x00f42400
 800af78:	0801db34 	.word	0x0801db34

0800af7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af88:	2201      	movs	r2, #1
 800af8a:	4013      	ands	r3, r2
 800af8c:	d00b      	beq.n	800afa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4a4a      	ldr	r2, [pc, #296]	@ (800b0c0 <UART_AdvFeatureConfig+0x144>)
 800af96:	4013      	ands	r3, r2
 800af98:	0019      	movs	r1, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afaa:	2202      	movs	r2, #2
 800afac:	4013      	ands	r3, r2
 800afae:	d00b      	beq.n	800afc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	4a43      	ldr	r2, [pc, #268]	@ (800b0c4 <UART_AdvFeatureConfig+0x148>)
 800afb8:	4013      	ands	r3, r2
 800afba:	0019      	movs	r1, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	430a      	orrs	r2, r1
 800afc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	2204      	movs	r2, #4
 800afce:	4013      	ands	r3, r2
 800afd0:	d00b      	beq.n	800afea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	4a3b      	ldr	r2, [pc, #236]	@ (800b0c8 <UART_AdvFeatureConfig+0x14c>)
 800afda:	4013      	ands	r3, r2
 800afdc:	0019      	movs	r1, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afee:	2208      	movs	r2, #8
 800aff0:	4013      	ands	r3, r2
 800aff2:	d00b      	beq.n	800b00c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	4a34      	ldr	r2, [pc, #208]	@ (800b0cc <UART_AdvFeatureConfig+0x150>)
 800affc:	4013      	ands	r3, r2
 800affe:	0019      	movs	r1, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	430a      	orrs	r2, r1
 800b00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b010:	2210      	movs	r2, #16
 800b012:	4013      	ands	r3, r2
 800b014:	d00b      	beq.n	800b02e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	4a2c      	ldr	r2, [pc, #176]	@ (800b0d0 <UART_AdvFeatureConfig+0x154>)
 800b01e:	4013      	ands	r3, r2
 800b020:	0019      	movs	r1, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	430a      	orrs	r2, r1
 800b02c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b032:	2220      	movs	r2, #32
 800b034:	4013      	ands	r3, r2
 800b036:	d00b      	beq.n	800b050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	4a25      	ldr	r2, [pc, #148]	@ (800b0d4 <UART_AdvFeatureConfig+0x158>)
 800b040:	4013      	ands	r3, r2
 800b042:	0019      	movs	r1, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	430a      	orrs	r2, r1
 800b04e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b054:	2240      	movs	r2, #64	@ 0x40
 800b056:	4013      	ands	r3, r2
 800b058:	d01d      	beq.n	800b096 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	4a1d      	ldr	r2, [pc, #116]	@ (800b0d8 <UART_AdvFeatureConfig+0x15c>)
 800b062:	4013      	ands	r3, r2
 800b064:	0019      	movs	r1, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	430a      	orrs	r2, r1
 800b070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b076:	2380      	movs	r3, #128	@ 0x80
 800b078:	035b      	lsls	r3, r3, #13
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d10b      	bne.n	800b096 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	4a15      	ldr	r2, [pc, #84]	@ (800b0dc <UART_AdvFeatureConfig+0x160>)
 800b086:	4013      	ands	r3, r2
 800b088:	0019      	movs	r1, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b09a:	2280      	movs	r2, #128	@ 0x80
 800b09c:	4013      	ands	r3, r2
 800b09e:	d00b      	beq.n	800b0b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	4a0e      	ldr	r2, [pc, #56]	@ (800b0e0 <UART_AdvFeatureConfig+0x164>)
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	0019      	movs	r1, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	605a      	str	r2, [r3, #4]
  }
}
 800b0b8:	46c0      	nop			@ (mov r8, r8)
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	b002      	add	sp, #8
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	fffdffff 	.word	0xfffdffff
 800b0c4:	fffeffff 	.word	0xfffeffff
 800b0c8:	fffbffff 	.word	0xfffbffff
 800b0cc:	ffff7fff 	.word	0xffff7fff
 800b0d0:	ffffefff 	.word	0xffffefff
 800b0d4:	ffffdfff 	.word	0xffffdfff
 800b0d8:	ffefffff 	.word	0xffefffff
 800b0dc:	ff9fffff 	.word	0xff9fffff
 800b0e0:	fff7ffff 	.word	0xfff7ffff

0800b0e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2280      	movs	r2, #128	@ 0x80
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0f4:	f7f9 fbd1 	bl	800489a <HAL_GetTick>
 800b0f8:	0003      	movs	r3, r0
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2208      	movs	r2, #8
 800b104:	4013      	ands	r3, r2
 800b106:	2b08      	cmp	r3, #8
 800b108:	d10c      	bne.n	800b124 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2280      	movs	r2, #128	@ 0x80
 800b10e:	0391      	lsls	r1, r2, #14
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	4a17      	ldr	r2, [pc, #92]	@ (800b170 <UART_CheckIdleState+0x8c>)
 800b114:	9200      	str	r2, [sp, #0]
 800b116:	2200      	movs	r2, #0
 800b118:	f000 f82c 	bl	800b174 <UART_WaitOnFlagUntilTimeout>
 800b11c:	1e03      	subs	r3, r0, #0
 800b11e:	d001      	beq.n	800b124 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b120:	2303      	movs	r3, #3
 800b122:	e021      	b.n	800b168 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2204      	movs	r2, #4
 800b12c:	4013      	ands	r3, r2
 800b12e:	2b04      	cmp	r3, #4
 800b130:	d10c      	bne.n	800b14c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2280      	movs	r2, #128	@ 0x80
 800b136:	03d1      	lsls	r1, r2, #15
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	4a0d      	ldr	r2, [pc, #52]	@ (800b170 <UART_CheckIdleState+0x8c>)
 800b13c:	9200      	str	r2, [sp, #0]
 800b13e:	2200      	movs	r2, #0
 800b140:	f000 f818 	bl	800b174 <UART_WaitOnFlagUntilTimeout>
 800b144:	1e03      	subs	r3, r0, #0
 800b146:	d001      	beq.n	800b14c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e00d      	b.n	800b168 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2220      	movs	r2, #32
 800b150:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2220      	movs	r2, #32
 800b156:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2274      	movs	r2, #116	@ 0x74
 800b162:	2100      	movs	r1, #0
 800b164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	0018      	movs	r0, r3
 800b16a:	46bd      	mov	sp, r7
 800b16c:	b004      	add	sp, #16
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	01ffffff 	.word	0x01ffffff

0800b174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	1dfb      	adds	r3, r7, #7
 800b182:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b184:	e05e      	b.n	800b244 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	3301      	adds	r3, #1
 800b18a:	d05b      	beq.n	800b244 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b18c:	f7f9 fb85 	bl	800489a <HAL_GetTick>
 800b190:	0002      	movs	r2, r0
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d302      	bcc.n	800b1a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d11b      	bne.n	800b1da <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	492f      	ldr	r1, [pc, #188]	@ (800b26c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b1ae:	400a      	ands	r2, r1
 800b1b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689a      	ldr	r2, [r3, #8]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2101      	movs	r1, #1
 800b1be:	438a      	bics	r2, r1
 800b1c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2274      	movs	r2, #116	@ 0x74
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e044      	b.n	800b264 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2204      	movs	r2, #4
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	d02e      	beq.n	800b244 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	69da      	ldr	r2, [r3, #28]
 800b1ec:	2380      	movs	r3, #128	@ 0x80
 800b1ee:	011b      	lsls	r3, r3, #4
 800b1f0:	401a      	ands	r2, r3
 800b1f2:	2380      	movs	r3, #128	@ 0x80
 800b1f4:	011b      	lsls	r3, r3, #4
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d124      	bne.n	800b244 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2280      	movs	r2, #128	@ 0x80
 800b200:	0112      	lsls	r2, r2, #4
 800b202:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4917      	ldr	r1, [pc, #92]	@ (800b26c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b210:	400a      	ands	r2, r1
 800b212:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	689a      	ldr	r2, [r3, #8]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2101      	movs	r1, #1
 800b220:	438a      	bics	r2, r1
 800b222:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2220      	movs	r2, #32
 800b228:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2220      	movs	r2, #32
 800b22e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2280      	movs	r2, #128	@ 0x80
 800b234:	2120      	movs	r1, #32
 800b236:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2274      	movs	r2, #116	@ 0x74
 800b23c:	2100      	movs	r1, #0
 800b23e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e00f      	b.n	800b264 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	4013      	ands	r3, r2
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	425a      	negs	r2, r3
 800b254:	4153      	adcs	r3, r2
 800b256:	b2db      	uxtb	r3, r3
 800b258:	001a      	movs	r2, r3
 800b25a:	1dfb      	adds	r3, r7, #7
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d091      	beq.n	800b186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	0018      	movs	r0, r3
 800b266:	46bd      	mov	sp, r7
 800b268:	b004      	add	sp, #16
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	fffffe5f 	.word	0xfffffe5f

0800b270 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	1dbb      	adds	r3, r7, #6
 800b27c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	1dba      	adds	r2, r7, #6
 800b288:	2158      	movs	r1, #88	@ 0x58
 800b28a:	8812      	ldrh	r2, [r2, #0]
 800b28c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	1dba      	adds	r2, r7, #6
 800b292:	215a      	movs	r1, #90	@ 0x5a
 800b294:	8812      	ldrh	r2, [r2, #0]
 800b296:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	689a      	ldr	r2, [r3, #8]
 800b2a2:	2380      	movs	r3, #128	@ 0x80
 800b2a4:	015b      	lsls	r3, r3, #5
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d10d      	bne.n	800b2c6 <UART_Start_Receive_IT+0x56>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d104      	bne.n	800b2bc <UART_Start_Receive_IT+0x4c>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	225c      	movs	r2, #92	@ 0x5c
 800b2b6:	4932      	ldr	r1, [pc, #200]	@ (800b380 <UART_Start_Receive_IT+0x110>)
 800b2b8:	5299      	strh	r1, [r3, r2]
 800b2ba:	e02e      	b.n	800b31a <UART_Start_Receive_IT+0xaa>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	225c      	movs	r2, #92	@ 0x5c
 800b2c0:	21ff      	movs	r1, #255	@ 0xff
 800b2c2:	5299      	strh	r1, [r3, r2]
 800b2c4:	e029      	b.n	800b31a <UART_Start_Receive_IT+0xaa>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10d      	bne.n	800b2ea <UART_Start_Receive_IT+0x7a>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d104      	bne.n	800b2e0 <UART_Start_Receive_IT+0x70>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	225c      	movs	r2, #92	@ 0x5c
 800b2da:	21ff      	movs	r1, #255	@ 0xff
 800b2dc:	5299      	strh	r1, [r3, r2]
 800b2de:	e01c      	b.n	800b31a <UART_Start_Receive_IT+0xaa>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	225c      	movs	r2, #92	@ 0x5c
 800b2e4:	217f      	movs	r1, #127	@ 0x7f
 800b2e6:	5299      	strh	r1, [r3, r2]
 800b2e8:	e017      	b.n	800b31a <UART_Start_Receive_IT+0xaa>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	689a      	ldr	r2, [r3, #8]
 800b2ee:	2380      	movs	r3, #128	@ 0x80
 800b2f0:	055b      	lsls	r3, r3, #21
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d10d      	bne.n	800b312 <UART_Start_Receive_IT+0xa2>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d104      	bne.n	800b308 <UART_Start_Receive_IT+0x98>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	225c      	movs	r2, #92	@ 0x5c
 800b302:	217f      	movs	r1, #127	@ 0x7f
 800b304:	5299      	strh	r1, [r3, r2]
 800b306:	e008      	b.n	800b31a <UART_Start_Receive_IT+0xaa>
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	225c      	movs	r2, #92	@ 0x5c
 800b30c:	213f      	movs	r1, #63	@ 0x3f
 800b30e:	5299      	strh	r1, [r3, r2]
 800b310:	e003      	b.n	800b31a <UART_Start_Receive_IT+0xaa>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	225c      	movs	r2, #92	@ 0x5c
 800b316:	2100      	movs	r1, #0
 800b318:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2280      	movs	r2, #128	@ 0x80
 800b31e:	2100      	movs	r1, #0
 800b320:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2222      	movs	r2, #34	@ 0x22
 800b326:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689a      	ldr	r2, [r3, #8]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2101      	movs	r1, #1
 800b334:	430a      	orrs	r2, r1
 800b336:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	2380      	movs	r3, #128	@ 0x80
 800b33e:	015b      	lsls	r3, r3, #5
 800b340:	429a      	cmp	r2, r3
 800b342:	d107      	bne.n	800b354 <UART_Start_Receive_IT+0xe4>
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4a0d      	ldr	r2, [pc, #52]	@ (800b384 <UART_Start_Receive_IT+0x114>)
 800b350:	665a      	str	r2, [r3, #100]	@ 0x64
 800b352:	e002      	b.n	800b35a <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4a0c      	ldr	r2, [pc, #48]	@ (800b388 <UART_Start_Receive_IT+0x118>)
 800b358:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  __HAL_UNLOCK(huart);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2274      	movs	r2, #116	@ 0x74
 800b35e:	2100      	movs	r1, #0
 800b360:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2190      	movs	r1, #144	@ 0x90
 800b36e:	0049      	lsls	r1, r1, #1
 800b370:	430a      	orrs	r2, r1
 800b372:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	0018      	movs	r0, r3
 800b378:	46bd      	mov	sp, r7
 800b37a:	b004      	add	sp, #16
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	46c0      	nop			@ (mov r8, r8)
 800b380:	000001ff 	.word	0x000001ff
 800b384:	0800b655 	.word	0x0800b655
 800b388:	0800b56d 	.word	0x0800b56d

0800b38c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	21c0      	movs	r1, #192	@ 0xc0
 800b3a0:	438a      	bics	r2, r1
 800b3a2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2220      	movs	r2, #32
 800b3a8:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800b3aa:	46c0      	nop			@ (mov r8, r8)
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	b002      	add	sp, #8
 800b3b0:	bd80      	pop	{r7, pc}
	...

0800b3b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4912      	ldr	r1, [pc, #72]	@ (800b410 <UART_EndRxTransfer+0x5c>)
 800b3c8:	400a      	ands	r2, r1
 800b3ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	438a      	bics	r2, r1
 800b3da:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d107      	bne.n	800b3f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2110      	movs	r1, #16
 800b3f0:	438a      	bics	r2, r1
 800b3f2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	665a      	str	r2, [r3, #100]	@ 0x64
}
 800b406:	46c0      	nop			@ (mov r8, r8)
 800b408:	46bd      	mov	sp, r7
 800b40a:	b002      	add	sp, #8
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	46c0      	nop			@ (mov r8, r8)
 800b410:	fffffedf 	.word	0xfffffedf

0800b414 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b420:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2220      	movs	r2, #32
 800b42a:	4013      	ands	r3, r2
 800b42c:	d114      	bne.n	800b458 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2252      	movs	r2, #82	@ 0x52
 800b432:	2100      	movs	r1, #0
 800b434:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2180      	movs	r1, #128	@ 0x80
 800b442:	438a      	bics	r2, r1
 800b444:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2140      	movs	r1, #64	@ 0x40
 800b452:	430a      	orrs	r2, r1
 800b454:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b456:	e003      	b.n	800b460 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	0018      	movs	r0, r3
 800b45c:	f7f9 fc88 	bl	8004d70 <HAL_UART_TxCpltCallback>
}
 800b460:	46c0      	nop			@ (mov r8, r8)
 800b462:	46bd      	mov	sp, r7
 800b464:	b004      	add	sp, #16
 800b466:	bd80      	pop	{r7, pc}

0800b468 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b474:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	0018      	movs	r0, r3
 800b47a:	f7ff fac3 	bl	800aa04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b47e:	46c0      	nop			@ (mov r8, r8)
 800b480:	46bd      	mov	sp, r7
 800b482:	b004      	add	sp, #16
 800b484:	bd80      	pop	{r7, pc}

0800b486 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b086      	sub	sp, #24
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b492:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b498:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b49e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	2280      	movs	r2, #128	@ 0x80
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	2b80      	cmp	r3, #128	@ 0x80
 800b4ac:	d10a      	bne.n	800b4c4 <UART_DMAError+0x3e>
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	2b21      	cmp	r3, #33	@ 0x21
 800b4b2:	d107      	bne.n	800b4c4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	2252      	movs	r2, #82	@ 0x52
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f7ff ff64 	bl	800b38c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	2240      	movs	r2, #64	@ 0x40
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	2b40      	cmp	r3, #64	@ 0x40
 800b4d0:	d10a      	bne.n	800b4e8 <UART_DMAError+0x62>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b22      	cmp	r3, #34	@ 0x22
 800b4d6:	d107      	bne.n	800b4e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	225a      	movs	r2, #90	@ 0x5a
 800b4dc:	2100      	movs	r1, #0
 800b4de:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	0018      	movs	r0, r3
 800b4e4:	f7ff ff66 	bl	800b3b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2280      	movs	r2, #128	@ 0x80
 800b4ec:	589b      	ldr	r3, [r3, r2]
 800b4ee:	2210      	movs	r2, #16
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2180      	movs	r1, #128	@ 0x80
 800b4f6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	0018      	movs	r0, r3
 800b4fc:	f7ff fa8a 	bl	800aa14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b500:	46c0      	nop			@ (mov r8, r8)
 800b502:	46bd      	mov	sp, r7
 800b504:	b006      	add	sp, #24
 800b506:	bd80      	pop	{r7, pc}

0800b508 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	225a      	movs	r2, #90	@ 0x5a
 800b51a:	2100      	movs	r1, #0
 800b51c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2252      	movs	r2, #82	@ 0x52
 800b522:	2100      	movs	r1, #0
 800b524:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	0018      	movs	r0, r3
 800b52a:	f7ff fa73 	bl	800aa14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b52e:	46c0      	nop			@ (mov r8, r8)
 800b530:	46bd      	mov	sp, r7
 800b532:	b004      	add	sp, #16
 800b534:	bd80      	pop	{r7, pc}

0800b536 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b082      	sub	sp, #8
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2140      	movs	r1, #64	@ 0x40
 800b54a:	438a      	bics	r2, r1
 800b54c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2220      	movs	r2, #32
 800b552:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	0018      	movs	r0, r3
 800b55e:	f7f9 fc07 	bl	8004d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b562:	46c0      	nop			@ (mov r8, r8)
 800b564:	46bd      	mov	sp, r7
 800b566:	b002      	add	sp, #8
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b574:	200e      	movs	r0, #14
 800b576:	183b      	adds	r3, r7, r0
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	215c      	movs	r1, #92	@ 0x5c
 800b57c:	5a52      	ldrh	r2, [r2, r1]
 800b57e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b584:	2b22      	cmp	r3, #34	@ 0x22
 800b586:	d157      	bne.n	800b638 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b58e:	210c      	movs	r1, #12
 800b590:	187b      	adds	r3, r7, r1
 800b592:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b594:	187b      	adds	r3, r7, r1
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	183b      	adds	r3, r7, r0
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	b2d9      	uxtb	r1, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5a4:	400a      	ands	r2, r1
 800b5a6:	b2d2      	uxtb	r2, r2
 800b5a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	225a      	movs	r2, #90	@ 0x5a
 800b5b8:	5a9b      	ldrh	r3, [r3, r2]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	b299      	uxth	r1, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	225a      	movs	r2, #90	@ 0x5a
 800b5c4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	225a      	movs	r2, #90	@ 0x5a
 800b5ca:	5a9b      	ldrh	r3, [r3, r2]
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d13a      	bne.n	800b648 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	491c      	ldr	r1, [pc, #112]	@ (800b650 <UART_RxISR_8BIT+0xe4>)
 800b5de:	400a      	ands	r2, r1
 800b5e0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	438a      	bics	r2, r1
 800b5f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b602:	2b01      	cmp	r3, #1
 800b604:	d110      	bne.n	800b628 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2110      	movs	r1, #16
 800b612:	438a      	bics	r2, r1
 800b614:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2258      	movs	r2, #88	@ 0x58
 800b61a:	5a9a      	ldrh	r2, [r3, r2]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	0011      	movs	r1, r2
 800b620:	0018      	movs	r0, r3
 800b622:	f7ff f9ff 	bl	800aa24 <HAL_UARTEx_RxEventCallback>
 800b626:	e003      	b.n	800b630 <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	0018      	movs	r0, r3
 800b62c:	f7f9 fbae 	bl	8004d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	661a      	str	r2, [r3, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b636:	e007      	b.n	800b648 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699a      	ldr	r2, [r3, #24]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2108      	movs	r1, #8
 800b644:	430a      	orrs	r2, r1
 800b646:	619a      	str	r2, [r3, #24]
}
 800b648:	46c0      	nop			@ (mov r8, r8)
 800b64a:	46bd      	mov	sp, r7
 800b64c:	b004      	add	sp, #16
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	fffffedf 	.word	0xfffffedf

0800b654 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b65c:	200e      	movs	r0, #14
 800b65e:	183b      	adds	r3, r7, r0
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	215c      	movs	r1, #92	@ 0x5c
 800b664:	5a52      	ldrh	r2, [r2, r1]
 800b666:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b66c:	2b22      	cmp	r3, #34	@ 0x22
 800b66e:	d157      	bne.n	800b720 <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b676:	210c      	movs	r1, #12
 800b678:	187b      	adds	r3, r7, r1
 800b67a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b680:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b682:	187b      	adds	r3, r7, r1
 800b684:	183a      	adds	r2, r7, r0
 800b686:	881b      	ldrh	r3, [r3, #0]
 800b688:	8812      	ldrh	r2, [r2, #0]
 800b68a:	4013      	ands	r3, r2
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b696:	1c9a      	adds	r2, r3, #2
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	225a      	movs	r2, #90	@ 0x5a
 800b6a0:	5a9b      	ldrh	r3, [r3, r2]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b299      	uxth	r1, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	225a      	movs	r2, #90	@ 0x5a
 800b6ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	225a      	movs	r2, #90	@ 0x5a
 800b6b2:	5a9b      	ldrh	r3, [r3, r2]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d13a      	bne.n	800b730 <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	491c      	ldr	r1, [pc, #112]	@ (800b738 <UART_RxISR_16BIT+0xe4>)
 800b6c6:	400a      	ands	r2, r1
 800b6c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	689a      	ldr	r2, [r3, #8]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	438a      	bics	r2, r1
 800b6d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2220      	movs	r2, #32
 800b6de:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d110      	bne.n	800b710 <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2110      	movs	r1, #16
 800b6fa:	438a      	bics	r2, r1
 800b6fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2258      	movs	r2, #88	@ 0x58
 800b702:	5a9a      	ldrh	r2, [r3, r2]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	0011      	movs	r1, r2
 800b708:	0018      	movs	r0, r3
 800b70a:	f7ff f98b 	bl	800aa24 <HAL_UARTEx_RxEventCallback>
 800b70e:	e003      	b.n	800b718 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	0018      	movs	r0, r3
 800b714:	f7f9 fb3a 	bl	8004d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	661a      	str	r2, [r3, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b71e:	e007      	b.n	800b730 <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	699a      	ldr	r2, [r3, #24]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2108      	movs	r1, #8
 800b72c:	430a      	orrs	r2, r1
 800b72e:	619a      	str	r2, [r3, #24]
}
 800b730:	46c0      	nop			@ (mov r8, r8)
 800b732:	46bd      	mov	sp, r7
 800b734:	b004      	add	sp, #16
 800b736:	bd80      	pop	{r7, pc}
 800b738:	fffffedf 	.word	0xfffffedf

0800b73c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b744:	46c0      	nop			@ (mov r8, r8)
 800b746:	46bd      	mov	sp, r7
 800b748:	b002      	add	sp, #8
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af02      	add	r7, sp, #8
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	1d3b      	adds	r3, r7, #4
 800b756:	6019      	str	r1, [r3, #0]
 800b758:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b75a:	2317      	movs	r3, #23
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	2200      	movs	r2, #0
 800b760:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2274      	movs	r2, #116	@ 0x74
 800b766:	5c9b      	ldrb	r3, [r3, r2]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d101      	bne.n	800b770 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800b76c:	2302      	movs	r3, #2
 800b76e:	e04a      	b.n	800b806 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2274      	movs	r2, #116	@ 0x74
 800b774:	2101      	movs	r1, #1
 800b776:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2224      	movs	r2, #36	@ 0x24
 800b77c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2101      	movs	r1, #1
 800b78a:	438a      	bics	r2, r1
 800b78c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	4a1e      	ldr	r2, [pc, #120]	@ (800b810 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800b796:	4013      	ands	r3, r2
 800b798:	0019      	movs	r1, r3
 800b79a:	1d3b      	adds	r3, r7, #4
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	430a      	orrs	r2, r1
 800b7a4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b7a6:	1d3b      	adds	r3, r7, #4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d105      	bne.n	800b7ba <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b7ae:	1d3b      	adds	r3, r7, #4
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	6819      	ldr	r1, [r3, #0]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	f000 f84f 	bl	800b858 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7ca:	f7f9 f866 	bl	800489a <HAL_GetTick>
 800b7ce:	0003      	movs	r3, r0
 800b7d0:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	2280      	movs	r2, #128	@ 0x80
 800b7d6:	03d1      	lsls	r1, r2, #15
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	4a0e      	ldr	r2, [pc, #56]	@ (800b814 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800b7dc:	9200      	str	r2, [sp, #0]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f7ff fcc8 	bl	800b174 <UART_WaitOnFlagUntilTimeout>
 800b7e4:	1e03      	subs	r3, r0, #0
 800b7e6:	d004      	beq.n	800b7f2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800b7e8:	2317      	movs	r3, #23
 800b7ea:	18fb      	adds	r3, r7, r3
 800b7ec:	2203      	movs	r2, #3
 800b7ee:	701a      	strb	r2, [r3, #0]
 800b7f0:	e002      	b.n	800b7f8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2220      	movs	r2, #32
 800b7f6:	679a      	str	r2, [r3, #120]	@ 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2274      	movs	r2, #116	@ 0x74
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	5499      	strb	r1, [r3, r2]

  return status;
 800b800:	2317      	movs	r3, #23
 800b802:	18fb      	adds	r3, r7, r3
 800b804:	781b      	ldrb	r3, [r3, #0]
}
 800b806:	0018      	movs	r0, r3
 800b808:	46bd      	mov	sp, r7
 800b80a:	b006      	add	sp, #24
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	46c0      	nop			@ (mov r8, r8)
 800b810:	ffcfffff 	.word	0xffcfffff
 800b814:	01ffffff 	.word	0x01ffffff

0800b818 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2274      	movs	r2, #116	@ 0x74
 800b824:	5c9b      	ldrb	r3, [r3, r2]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d101      	bne.n	800b82e <HAL_UARTEx_EnableStopMode+0x16>
 800b82a:	2302      	movs	r3, #2
 800b82c:	e010      	b.n	800b850 <HAL_UARTEx_EnableStopMode+0x38>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2274      	movs	r2, #116	@ 0x74
 800b832:	2101      	movs	r1, #1
 800b834:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2102      	movs	r1, #2
 800b842:	430a      	orrs	r2, r1
 800b844:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2274      	movs	r2, #116	@ 0x74
 800b84a:	2100      	movs	r1, #0
 800b84c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	0018      	movs	r0, r3
 800b852:	46bd      	mov	sp, r7
 800b854:	b002      	add	sp, #8
 800b856:	bd80      	pop	{r7, pc}

0800b858 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	1d3b      	adds	r3, r7, #4
 800b862:	6019      	str	r1, [r3, #0]
 800b864:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	2210      	movs	r2, #16
 800b86e:	4393      	bics	r3, r2
 800b870:	001a      	movs	r2, r3
 800b872:	1d3b      	adds	r3, r7, #4
 800b874:	889b      	ldrh	r3, [r3, #4]
 800b876:	0019      	movs	r1, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	430a      	orrs	r2, r1
 800b87e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	021b      	lsls	r3, r3, #8
 800b888:	0a19      	lsrs	r1, r3, #8
 800b88a:	1d3b      	adds	r3, r7, #4
 800b88c:	799b      	ldrb	r3, [r3, #6]
 800b88e:	061a      	lsls	r2, r3, #24
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	430a      	orrs	r2, r1
 800b896:	605a      	str	r2, [r3, #4]
}
 800b898:	46c0      	nop			@ (mov r8, r8)
 800b89a:	46bd      	mov	sp, r7
 800b89c:	b004      	add	sp, #16
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	33f1      	adds	r3, #241	@ 0xf1
 800b8ac:	2210      	movs	r2, #16
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	f00d f897 	bl	80189e4 <memset1>
    ctx->M_n = 0;
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	238a      	movs	r3, #138	@ 0x8a
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	2100      	movs	r1, #0
 800b8be:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	22f0      	movs	r2, #240	@ 0xf0
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	0018      	movs	r0, r3
 800b8c8:	f00d f88c 	bl	80189e4 <memset1>
}
 800b8cc:	46c0      	nop			@ (mov r8, r8)
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	b002      	add	sp, #8
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2110      	movs	r1, #16
 800b8e4:	0018      	movs	r0, r3
 800b8e6:	f000 feaf 	bl	800c648 <lorawan_aes_set_key>
}
 800b8ea:	46c0      	nop			@ (mov r8, r8)
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	b002      	add	sp, #8
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b8f2:	b590      	push	{r4, r7, lr}
 800b8f4:	b08d      	sub	sp, #52	@ 0x34
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	238a      	movs	r3, #138	@ 0x8a
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	58d3      	ldr	r3, [r2, r3]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d100      	bne.n	800b90c <AES_CMAC_Update+0x1a>
 800b90a:	e0a4      	b.n	800ba56 <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	238a      	movs	r3, #138	@ 0x8a
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	58d3      	ldr	r3, [r2, r3]
 800b914:	2210      	movs	r2, #16
 800b916:	1ad2      	subs	r2, r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d900      	bls.n	800b920 <AES_CMAC_Update+0x2e>
 800b91e:	0013      	movs	r3, r2
 800b920:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	1c9a      	adds	r2, r3, #2
 800b926:	32ff      	adds	r2, #255	@ 0xff
 800b928:	68f9      	ldr	r1, [r7, #12]
 800b92a:	238a      	movs	r3, #138	@ 0x8a
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	58cb      	ldr	r3, [r1, r3]
 800b930:	18d3      	adds	r3, r2, r3
 800b932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b934:	b292      	uxth	r2, r2
 800b936:	68b9      	ldr	r1, [r7, #8]
 800b938:	0018      	movs	r0, r3
 800b93a:	f00d f815 	bl	8018968 <memcpy1>
        ctx->M_n += mlen;
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	238a      	movs	r3, #138	@ 0x8a
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	58d2      	ldr	r2, [r2, r3]
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	18d1      	adds	r1, r2, r3
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	238a      	movs	r3, #138	@ 0x8a
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	238a      	movs	r3, #138	@ 0x8a
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	58d3      	ldr	r3, [r2, r3]
 800b95a:	2b0f      	cmp	r3, #15
 800b95c:	d800      	bhi.n	800b960 <AES_CMAC_Update+0x6e>
 800b95e:	e08c      	b.n	800ba7a <AES_CMAC_Update+0x188>
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b964:	429a      	cmp	r2, r3
 800b966:	d100      	bne.n	800b96a <AES_CMAC_Update+0x78>
 800b968:	e087      	b.n	800ba7a <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800b96a:	2300      	movs	r3, #0
 800b96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b96e:	e018      	b.n	800b9a2 <AES_CMAC_Update+0xb0>
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	21f1      	movs	r1, #241	@ 0xf1
 800b974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b976:	18d3      	adds	r3, r2, r3
 800b978:	185b      	adds	r3, r3, r1
 800b97a:	781a      	ldrb	r2, [r3, #0]
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	2302      	movs	r3, #2
 800b980:	33ff      	adds	r3, #255	@ 0xff
 800b982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b984:	1841      	adds	r1, r0, r1
 800b986:	18cb      	adds	r3, r1, r3
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	4053      	eors	r3, r2
 800b98c:	b2d8      	uxtb	r0, r3
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	21f1      	movs	r1, #241	@ 0xf1
 800b992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b994:	18d3      	adds	r3, r2, r3
 800b996:	185b      	adds	r3, r3, r1
 800b998:	1c02      	adds	r2, r0, #0
 800b99a:	701a      	strb	r2, [r3, #0]
 800b99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b99e:	3301      	adds	r3, #1
 800b9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a4:	2b0f      	cmp	r3, #15
 800b9a6:	dde3      	ble.n	800b970 <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	33f1      	adds	r3, #241	@ 0xf1
 800b9ac:	0019      	movs	r1, r3
 800b9ae:	2414      	movs	r4, #20
 800b9b0:	193b      	adds	r3, r7, r4
 800b9b2:	2210      	movs	r2, #16
 800b9b4:	0018      	movs	r0, r3
 800b9b6:	f00c ffd7 	bl	8018968 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	1939      	adds	r1, r7, r4
 800b9be:	193b      	adds	r3, r7, r4
 800b9c0:	0018      	movs	r0, r3
 800b9c2:	f000 ff7d 	bl	800c8c0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	33f1      	adds	r3, #241	@ 0xf1
 800b9ca:	1939      	adds	r1, r7, r4
 800b9cc:	2210      	movs	r2, #16
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	f00c ffca 	bl	8018968 <memcpy1>

        data += mlen;
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	18d3      	adds	r3, r2, r3
 800b9da:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b9e4:	e037      	b.n	800ba56 <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9ea:	e015      	b.n	800ba18 <AES_CMAC_Update+0x126>
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	21f1      	movs	r1, #241	@ 0xf1
 800b9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f2:	18d3      	adds	r3, r2, r3
 800b9f4:	185b      	adds	r3, r3, r1
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	18cb      	adds	r3, r1, r3
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	4053      	eors	r3, r2
 800ba02:	b2d8      	uxtb	r0, r3
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	21f1      	movs	r1, #241	@ 0xf1
 800ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0a:	18d3      	adds	r3, r2, r3
 800ba0c:	185b      	adds	r3, r3, r1
 800ba0e:	1c02      	adds	r2, r0, #0
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba14:	3301      	adds	r3, #1
 800ba16:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1a:	2b0f      	cmp	r3, #15
 800ba1c:	dde6      	ble.n	800b9ec <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	33f1      	adds	r3, #241	@ 0xf1
 800ba22:	0019      	movs	r1, r3
 800ba24:	2414      	movs	r4, #20
 800ba26:	193b      	adds	r3, r7, r4
 800ba28:	2210      	movs	r2, #16
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	f00c ff9c 	bl	8018968 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	1939      	adds	r1, r7, r4
 800ba34:	193b      	adds	r3, r7, r4
 800ba36:	0018      	movs	r0, r3
 800ba38:	f000 ff42 	bl	800c8c0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	33f1      	adds	r3, #241	@ 0xf1
 800ba40:	1939      	adds	r1, r7, r4
 800ba42:	2210      	movs	r2, #16
 800ba44:	0018      	movs	r0, r3
 800ba46:	f00c ff8f 	bl	8018968 <memcpy1>

        data += 16;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3310      	adds	r3, #16
 800ba4e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3b10      	subs	r3, #16
 800ba54:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b10      	cmp	r3, #16
 800ba5a:	d8c4      	bhi.n	800b9e6 <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3302      	adds	r3, #2
 800ba60:	33ff      	adds	r3, #255	@ 0xff
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	b292      	uxth	r2, r2
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	0018      	movs	r0, r3
 800ba6a:	f00c ff7d 	bl	8018968 <memcpy1>
    ctx->M_n = len;
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	238a      	movs	r3, #138	@ 0x8a
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	6879      	ldr	r1, [r7, #4]
 800ba76:	50d1      	str	r1, [r2, r3]
 800ba78:	e000      	b.n	800ba7c <AES_CMAC_Update+0x18a>
            return;
 800ba7a:	46c0      	nop			@ (mov r8, r8)
}
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	b00d      	add	sp, #52	@ 0x34
 800ba80:	bd90      	pop	{r4, r7, pc}

0800ba82 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ba82:	b590      	push	{r4, r7, lr}
 800ba84:	b093      	sub	sp, #76	@ 0x4c
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ba8c:	241c      	movs	r4, #28
 800ba8e:	193b      	adds	r3, r7, r4
 800ba90:	2210      	movs	r2, #16
 800ba92:	2100      	movs	r1, #0
 800ba94:	0018      	movs	r0, r3
 800ba96:	f00c ffa5 	bl	80189e4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	1939      	adds	r1, r7, r4
 800ba9e:	193b      	adds	r3, r7, r4
 800baa0:	0018      	movs	r0, r3
 800baa2:	f000 ff0d 	bl	800c8c0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800baa6:	193b      	adds	r3, r7, r4
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	b25b      	sxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	da2e      	bge.n	800bb0e <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800bab0:	2300      	movs	r3, #0
 800bab2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bab4:	e018      	b.n	800bae8 <AES_CMAC_Final+0x66>
 800bab6:	201c      	movs	r0, #28
 800bab8:	183a      	adds	r2, r7, r0
 800baba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800babc:	18d3      	adds	r3, r2, r3
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	b25a      	sxtb	r2, r3
 800bac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bac6:	3301      	adds	r3, #1
 800bac8:	1839      	adds	r1, r7, r0
 800baca:	5ccb      	ldrb	r3, [r1, r3]
 800bacc:	09db      	lsrs	r3, r3, #7
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	b25b      	sxtb	r3, r3
 800bad2:	4313      	orrs	r3, r2
 800bad4:	b25b      	sxtb	r3, r3
 800bad6:	b2d9      	uxtb	r1, r3
 800bad8:	183a      	adds	r2, r7, r0
 800bada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800badc:	18d3      	adds	r3, r2, r3
 800bade:	1c0a      	adds	r2, r1, #0
 800bae0:	701a      	strb	r2, [r3, #0]
 800bae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bae4:	3301      	adds	r3, #1
 800bae6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baea:	2b0e      	cmp	r3, #14
 800baec:	dde3      	ble.n	800bab6 <AES_CMAC_Final+0x34>
 800baee:	211c      	movs	r1, #28
 800baf0:	187b      	adds	r3, r7, r1
 800baf2:	7bdb      	ldrb	r3, [r3, #15]
 800baf4:	18db      	adds	r3, r3, r3
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	187b      	adds	r3, r7, r1
 800bafa:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800bafc:	187b      	adds	r3, r7, r1
 800bafe:	7bdb      	ldrb	r3, [r3, #15]
 800bb00:	2279      	movs	r2, #121	@ 0x79
 800bb02:	4252      	negs	r2, r2
 800bb04:	4053      	eors	r3, r2
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	187b      	adds	r3, r7, r1
 800bb0a:	73da      	strb	r2, [r3, #15]
 800bb0c:	e025      	b.n	800bb5a <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800bb0e:	2300      	movs	r3, #0
 800bb10:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb12:	e018      	b.n	800bb46 <AES_CMAC_Final+0xc4>
 800bb14:	201c      	movs	r0, #28
 800bb16:	183a      	adds	r2, r7, r0
 800bb18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb1a:	18d3      	adds	r3, r2, r3
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	b25a      	sxtb	r2, r3
 800bb22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb24:	3301      	adds	r3, #1
 800bb26:	1839      	adds	r1, r7, r0
 800bb28:	5ccb      	ldrb	r3, [r1, r3]
 800bb2a:	09db      	lsrs	r3, r3, #7
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	b25b      	sxtb	r3, r3
 800bb30:	4313      	orrs	r3, r2
 800bb32:	b25b      	sxtb	r3, r3
 800bb34:	b2d9      	uxtb	r1, r3
 800bb36:	183a      	adds	r2, r7, r0
 800bb38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb3a:	18d3      	adds	r3, r2, r3
 800bb3c:	1c0a      	adds	r2, r1, #0
 800bb3e:	701a      	strb	r2, [r3, #0]
 800bb40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb42:	3301      	adds	r3, #1
 800bb44:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb48:	2b0e      	cmp	r3, #14
 800bb4a:	dde3      	ble.n	800bb14 <AES_CMAC_Final+0x92>
 800bb4c:	211c      	movs	r1, #28
 800bb4e:	187b      	adds	r3, r7, r1
 800bb50:	7bdb      	ldrb	r3, [r3, #15]
 800bb52:	18db      	adds	r3, r3, r3
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	187b      	adds	r3, r7, r1
 800bb58:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	238a      	movs	r3, #138	@ 0x8a
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	58d3      	ldr	r3, [r2, r3]
 800bb62:	2b10      	cmp	r3, #16
 800bb64:	d11f      	bne.n	800bba6 <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800bb66:	2300      	movs	r3, #0
 800bb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb6a:	e018      	b.n	800bb9e <AES_CMAC_Final+0x11c>
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	2302      	movs	r3, #2
 800bb70:	33ff      	adds	r3, #255	@ 0xff
 800bb72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bb74:	188a      	adds	r2, r1, r2
 800bb76:	18d3      	adds	r3, r2, r3
 800bb78:	781a      	ldrb	r2, [r3, #0]
 800bb7a:	231c      	movs	r3, #28
 800bb7c:	18f9      	adds	r1, r7, r3
 800bb7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb80:	18cb      	adds	r3, r1, r3
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	4053      	eors	r3, r2
 800bb86:	b2d8      	uxtb	r0, r3
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	33ff      	adds	r3, #255	@ 0xff
 800bb8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bb90:	188a      	adds	r2, r1, r2
 800bb92:	18d3      	adds	r3, r2, r3
 800bb94:	1c02      	adds	r2, r0, #0
 800bb96:	701a      	strb	r2, [r3, #0]
 800bb98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba0:	2b0f      	cmp	r3, #15
 800bba2:	dde3      	ble.n	800bb6c <AES_CMAC_Final+0xea>
 800bba4:	e09f      	b.n	800bce6 <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800bba6:	231c      	movs	r3, #28
 800bba8:	18fb      	adds	r3, r7, r3
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	b25b      	sxtb	r3, r3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	da2e      	bge.n	800bc10 <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bbb6:	e018      	b.n	800bbea <AES_CMAC_Final+0x168>
 800bbb8:	201c      	movs	r0, #28
 800bbba:	183a      	adds	r2, r7, r0
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbbe:	18d3      	adds	r3, r2, r3
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	b25a      	sxtb	r2, r3
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc8:	3301      	adds	r3, #1
 800bbca:	1839      	adds	r1, r7, r0
 800bbcc:	5ccb      	ldrb	r3, [r1, r3]
 800bbce:	09db      	lsrs	r3, r3, #7
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	b25b      	sxtb	r3, r3
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	b25b      	sxtb	r3, r3
 800bbd8:	b2d9      	uxtb	r1, r3
 800bbda:	183a      	adds	r2, r7, r0
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbde:	18d3      	adds	r3, r2, r3
 800bbe0:	1c0a      	adds	r2, r1, #0
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	2b0e      	cmp	r3, #14
 800bbee:	dde3      	ble.n	800bbb8 <AES_CMAC_Final+0x136>
 800bbf0:	211c      	movs	r1, #28
 800bbf2:	187b      	adds	r3, r7, r1
 800bbf4:	7bdb      	ldrb	r3, [r3, #15]
 800bbf6:	18db      	adds	r3, r3, r3
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	187b      	adds	r3, r7, r1
 800bbfc:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800bbfe:	187b      	adds	r3, r7, r1
 800bc00:	7bdb      	ldrb	r3, [r3, #15]
 800bc02:	2279      	movs	r2, #121	@ 0x79
 800bc04:	4252      	negs	r2, r2
 800bc06:	4053      	eors	r3, r2
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	187b      	adds	r3, r7, r1
 800bc0c:	73da      	strb	r2, [r3, #15]
 800bc0e:	e025      	b.n	800bc5c <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800bc10:	2300      	movs	r3, #0
 800bc12:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc14:	e018      	b.n	800bc48 <AES_CMAC_Final+0x1c6>
 800bc16:	201c      	movs	r0, #28
 800bc18:	183a      	adds	r2, r7, r0
 800bc1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc1c:	18d3      	adds	r3, r2, r3
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	005b      	lsls	r3, r3, #1
 800bc22:	b25a      	sxtb	r2, r3
 800bc24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc26:	3301      	adds	r3, #1
 800bc28:	1839      	adds	r1, r7, r0
 800bc2a:	5ccb      	ldrb	r3, [r1, r3]
 800bc2c:	09db      	lsrs	r3, r3, #7
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	b25b      	sxtb	r3, r3
 800bc32:	4313      	orrs	r3, r2
 800bc34:	b25b      	sxtb	r3, r3
 800bc36:	b2d9      	uxtb	r1, r3
 800bc38:	183a      	adds	r2, r7, r0
 800bc3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc3c:	18d3      	adds	r3, r2, r3
 800bc3e:	1c0a      	adds	r2, r1, #0
 800bc40:	701a      	strb	r2, [r3, #0]
 800bc42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc44:	3301      	adds	r3, #1
 800bc46:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc4a:	2b0e      	cmp	r3, #14
 800bc4c:	dde3      	ble.n	800bc16 <AES_CMAC_Final+0x194>
 800bc4e:	211c      	movs	r1, #28
 800bc50:	187b      	adds	r3, r7, r1
 800bc52:	7bdb      	ldrb	r3, [r3, #15]
 800bc54:	18db      	adds	r3, r3, r3
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	187b      	adds	r3, r7, r1
 800bc5a:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	238a      	movs	r3, #138	@ 0x8a
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	58d2      	ldr	r2, [r2, r3]
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	2302      	movs	r3, #2
 800bc68:	33ff      	adds	r3, #255	@ 0xff
 800bc6a:	188a      	adds	r2, r1, r2
 800bc6c:	18d3      	adds	r3, r2, r3
 800bc6e:	2280      	movs	r2, #128	@ 0x80
 800bc70:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800bc72:	e00a      	b.n	800bc8a <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	238a      	movs	r3, #138	@ 0x8a
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	58d2      	ldr	r2, [r2, r3]
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	2302      	movs	r3, #2
 800bc80:	33ff      	adds	r3, #255	@ 0xff
 800bc82:	188a      	adds	r2, r1, r2
 800bc84:	18d3      	adds	r3, r2, r3
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	238a      	movs	r3, #138	@ 0x8a
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	58d3      	ldr	r3, [r2, r3]
 800bc92:	1c59      	adds	r1, r3, #1
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	238a      	movs	r3, #138	@ 0x8a
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	50d1      	str	r1, [r2, r3]
 800bc9c:	683a      	ldr	r2, [r7, #0]
 800bc9e:	238a      	movs	r3, #138	@ 0x8a
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	58d3      	ldr	r3, [r2, r3]
 800bca4:	2b0f      	cmp	r3, #15
 800bca6:	d9e5      	bls.n	800bc74 <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800bca8:	2300      	movs	r3, #0
 800bcaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcac:	e018      	b.n	800bce0 <AES_CMAC_Final+0x25e>
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	33ff      	adds	r3, #255	@ 0xff
 800bcb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcb6:	188a      	adds	r2, r1, r2
 800bcb8:	18d3      	adds	r3, r2, r3
 800bcba:	781a      	ldrb	r2, [r3, #0]
 800bcbc:	231c      	movs	r3, #28
 800bcbe:	18f9      	adds	r1, r7, r3
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc2:	18cb      	adds	r3, r1, r3
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	4053      	eors	r3, r2
 800bcc8:	b2d8      	uxtb	r0, r3
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	2302      	movs	r3, #2
 800bcce:	33ff      	adds	r3, #255	@ 0xff
 800bcd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcd2:	188a      	adds	r2, r1, r2
 800bcd4:	18d3      	adds	r3, r2, r3
 800bcd6:	1c02      	adds	r2, r0, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcdc:	3301      	adds	r3, #1
 800bcde:	633b      	str	r3, [r7, #48]	@ 0x30
 800bce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce2:	2b0f      	cmp	r3, #15
 800bce4:	dde3      	ble.n	800bcae <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800bce6:	2300      	movs	r3, #0
 800bce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcea:	e018      	b.n	800bd1e <AES_CMAC_Final+0x29c>
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	21f1      	movs	r1, #241	@ 0xf1
 800bcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf2:	18d3      	adds	r3, r2, r3
 800bcf4:	185b      	adds	r3, r3, r1
 800bcf6:	781a      	ldrb	r2, [r3, #0]
 800bcf8:	6838      	ldr	r0, [r7, #0]
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	33ff      	adds	r3, #255	@ 0xff
 800bcfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd00:	1841      	adds	r1, r0, r1
 800bd02:	18cb      	adds	r3, r1, r3
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	4053      	eors	r3, r2
 800bd08:	b2d8      	uxtb	r0, r3
 800bd0a:	683a      	ldr	r2, [r7, #0]
 800bd0c:	21f1      	movs	r1, #241	@ 0xf1
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	18d3      	adds	r3, r2, r3
 800bd12:	185b      	adds	r3, r3, r1
 800bd14:	1c02      	adds	r2, r0, #0
 800bd16:	701a      	strb	r2, [r3, #0]
 800bd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd20:	2b0f      	cmp	r3, #15
 800bd22:	dde3      	ble.n	800bcec <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	33f1      	adds	r3, #241	@ 0xf1
 800bd28:	0019      	movs	r1, r3
 800bd2a:	240c      	movs	r4, #12
 800bd2c:	193b      	adds	r3, r7, r4
 800bd2e:	2210      	movs	r2, #16
 800bd30:	0018      	movs	r0, r3
 800bd32:	f00c fe19 	bl	8018968 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	6879      	ldr	r1, [r7, #4]
 800bd3a:	193b      	adds	r3, r7, r4
 800bd3c:	0018      	movs	r0, r3
 800bd3e:	f000 fdbf 	bl	800c8c0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bd42:	231c      	movs	r3, #28
 800bd44:	18fb      	adds	r3, r7, r3
 800bd46:	2210      	movs	r2, #16
 800bd48:	2100      	movs	r1, #0
 800bd4a:	0018      	movs	r0, r3
 800bd4c:	f00c fe4a 	bl	80189e4 <memset1>
}
 800bd50:	46c0      	nop			@ (mov r8, r8)
 800bd52:	46bd      	mov	sp, r7
 800bd54:	b013      	add	sp, #76	@ 0x4c
 800bd56:	bd90      	pop	{r4, r7, pc}

0800bd58 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	781a      	ldrb	r2, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	7852      	ldrb	r2, [r2, #1]
 800bd72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3302      	adds	r3, #2
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	7892      	ldrb	r2, [r2, #2]
 800bd7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	3303      	adds	r3, #3
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	78d2      	ldrb	r2, [r2, #3]
 800bd86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	7912      	ldrb	r2, [r2, #4]
 800bd90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3305      	adds	r3, #5
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	7952      	ldrb	r2, [r2, #5]
 800bd9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3306      	adds	r3, #6
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	7992      	ldrb	r2, [r2, #6]
 800bda4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	3307      	adds	r3, #7
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	79d2      	ldrb	r2, [r2, #7]
 800bdae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3308      	adds	r3, #8
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	7a12      	ldrb	r2, [r2, #8]
 800bdb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	3309      	adds	r3, #9
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	7a52      	ldrb	r2, [r2, #9]
 800bdc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	330a      	adds	r3, #10
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	7a92      	ldrb	r2, [r2, #10]
 800bdcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	330b      	adds	r3, #11
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	7ad2      	ldrb	r2, [r2, #11]
 800bdd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	330c      	adds	r3, #12
 800bddc:	683a      	ldr	r2, [r7, #0]
 800bdde:	7b12      	ldrb	r2, [r2, #12]
 800bde0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	330d      	adds	r3, #13
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	7b52      	ldrb	r2, [r2, #13]
 800bdea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	330e      	adds	r3, #14
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	7b92      	ldrb	r2, [r2, #14]
 800bdf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	330f      	adds	r3, #15
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	7bd2      	ldrb	r2, [r2, #15]
 800bdfe:	701a      	strb	r2, [r3, #0]
#endif
}
 800be00:	46c0      	nop			@ (mov r8, r8)
 800be02:	46bd      	mov	sp, r7
 800be04:	b002      	add	sp, #8
 800be06:	bd80      	pop	{r7, pc}

0800be08 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	1dfb      	adds	r3, r7, #7
 800be14:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800be16:	e007      	b.n	800be28 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	1c53      	adds	r3, r2, #1
 800be1c:	60bb      	str	r3, [r7, #8]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	1c59      	adds	r1, r3, #1
 800be22:	60f9      	str	r1, [r7, #12]
 800be24:	7812      	ldrb	r2, [r2, #0]
 800be26:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800be28:	1dfb      	adds	r3, r7, #7
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	1dfa      	adds	r2, r7, #7
 800be2e:	1e59      	subs	r1, r3, #1
 800be30:	7011      	strb	r1, [r2, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1f0      	bne.n	800be18 <copy_block_nn+0x10>
}
 800be36:	46c0      	nop			@ (mov r8, r8)
 800be38:	46c0      	nop			@ (mov r8, r8)
 800be3a:	46bd      	mov	sp, r7
 800be3c:	b004      	add	sp, #16
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	781a      	ldrb	r2, [r3, #0]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	4053      	eors	r3, r2
 800be54:	b2da      	uxtb	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3301      	adds	r3, #1
 800be5e:	7819      	ldrb	r1, [r3, #0]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	3301      	adds	r3, #1
 800be64:	781a      	ldrb	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	3301      	adds	r3, #1
 800be6a:	404a      	eors	r2, r1
 800be6c:	b2d2      	uxtb	r2, r2
 800be6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3302      	adds	r3, #2
 800be74:	7819      	ldrb	r1, [r3, #0]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	3302      	adds	r3, #2
 800be7a:	781a      	ldrb	r2, [r3, #0]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	3302      	adds	r3, #2
 800be80:	404a      	eors	r2, r1
 800be82:	b2d2      	uxtb	r2, r2
 800be84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3303      	adds	r3, #3
 800be8a:	7819      	ldrb	r1, [r3, #0]
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	3303      	adds	r3, #3
 800be90:	781a      	ldrb	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3303      	adds	r3, #3
 800be96:	404a      	eors	r2, r1
 800be98:	b2d2      	uxtb	r2, r2
 800be9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3304      	adds	r3, #4
 800bea0:	7819      	ldrb	r1, [r3, #0]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	3304      	adds	r3, #4
 800bea6:	781a      	ldrb	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3304      	adds	r3, #4
 800beac:	404a      	eors	r2, r1
 800beae:	b2d2      	uxtb	r2, r2
 800beb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3305      	adds	r3, #5
 800beb6:	7819      	ldrb	r1, [r3, #0]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	3305      	adds	r3, #5
 800bebc:	781a      	ldrb	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	3305      	adds	r3, #5
 800bec2:	404a      	eors	r2, r1
 800bec4:	b2d2      	uxtb	r2, r2
 800bec6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3306      	adds	r3, #6
 800becc:	7819      	ldrb	r1, [r3, #0]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	3306      	adds	r3, #6
 800bed2:	781a      	ldrb	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3306      	adds	r3, #6
 800bed8:	404a      	eors	r2, r1
 800beda:	b2d2      	uxtb	r2, r2
 800bedc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	3307      	adds	r3, #7
 800bee2:	7819      	ldrb	r1, [r3, #0]
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	3307      	adds	r3, #7
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	3307      	adds	r3, #7
 800beee:	404a      	eors	r2, r1
 800bef0:	b2d2      	uxtb	r2, r2
 800bef2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	3308      	adds	r3, #8
 800bef8:	7819      	ldrb	r1, [r3, #0]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	3308      	adds	r3, #8
 800befe:	781a      	ldrb	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3308      	adds	r3, #8
 800bf04:	404a      	eors	r2, r1
 800bf06:	b2d2      	uxtb	r2, r2
 800bf08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	3309      	adds	r3, #9
 800bf0e:	7819      	ldrb	r1, [r3, #0]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	3309      	adds	r3, #9
 800bf14:	781a      	ldrb	r2, [r3, #0]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3309      	adds	r3, #9
 800bf1a:	404a      	eors	r2, r1
 800bf1c:	b2d2      	uxtb	r2, r2
 800bf1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	330a      	adds	r3, #10
 800bf24:	7819      	ldrb	r1, [r3, #0]
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	330a      	adds	r3, #10
 800bf2a:	781a      	ldrb	r2, [r3, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	330a      	adds	r3, #10
 800bf30:	404a      	eors	r2, r1
 800bf32:	b2d2      	uxtb	r2, r2
 800bf34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	330b      	adds	r3, #11
 800bf3a:	7819      	ldrb	r1, [r3, #0]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	330b      	adds	r3, #11
 800bf40:	781a      	ldrb	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	330b      	adds	r3, #11
 800bf46:	404a      	eors	r2, r1
 800bf48:	b2d2      	uxtb	r2, r2
 800bf4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	330c      	adds	r3, #12
 800bf50:	7819      	ldrb	r1, [r3, #0]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	330c      	adds	r3, #12
 800bf56:	781a      	ldrb	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	330c      	adds	r3, #12
 800bf5c:	404a      	eors	r2, r1
 800bf5e:	b2d2      	uxtb	r2, r2
 800bf60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	330d      	adds	r3, #13
 800bf66:	7819      	ldrb	r1, [r3, #0]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	330d      	adds	r3, #13
 800bf6c:	781a      	ldrb	r2, [r3, #0]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	330d      	adds	r3, #13
 800bf72:	404a      	eors	r2, r1
 800bf74:	b2d2      	uxtb	r2, r2
 800bf76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	330e      	adds	r3, #14
 800bf7c:	7819      	ldrb	r1, [r3, #0]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	330e      	adds	r3, #14
 800bf82:	781a      	ldrb	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	330e      	adds	r3, #14
 800bf88:	404a      	eors	r2, r1
 800bf8a:	b2d2      	uxtb	r2, r2
 800bf8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	330f      	adds	r3, #15
 800bf92:	7819      	ldrb	r1, [r3, #0]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	330f      	adds	r3, #15
 800bf98:	781a      	ldrb	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	330f      	adds	r3, #15
 800bf9e:	404a      	eors	r2, r1
 800bfa0:	b2d2      	uxtb	r2, r2
 800bfa2:	701a      	strb	r2, [r3, #0]
#endif
}
 800bfa4:	46c0      	nop			@ (mov r8, r8)
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	b002      	add	sp, #8
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	781a      	ldrb	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	4053      	eors	r3, r2
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	7819      	ldrb	r1, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	404a      	eors	r2, r1
 800bfda:	b2d2      	uxtb	r2, r2
 800bfdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	3302      	adds	r3, #2
 800bfe2:	7819      	ldrb	r1, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3302      	adds	r3, #2
 800bfe8:	781a      	ldrb	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3302      	adds	r3, #2
 800bfee:	404a      	eors	r2, r1
 800bff0:	b2d2      	uxtb	r2, r2
 800bff2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	3303      	adds	r3, #3
 800bff8:	7819      	ldrb	r1, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3303      	adds	r3, #3
 800bffe:	781a      	ldrb	r2, [r3, #0]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3303      	adds	r3, #3
 800c004:	404a      	eors	r2, r1
 800c006:	b2d2      	uxtb	r2, r2
 800c008:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	3304      	adds	r3, #4
 800c00e:	7819      	ldrb	r1, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3304      	adds	r3, #4
 800c014:	781a      	ldrb	r2, [r3, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3304      	adds	r3, #4
 800c01a:	404a      	eors	r2, r1
 800c01c:	b2d2      	uxtb	r2, r2
 800c01e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	3305      	adds	r3, #5
 800c024:	7819      	ldrb	r1, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3305      	adds	r3, #5
 800c02a:	781a      	ldrb	r2, [r3, #0]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	3305      	adds	r3, #5
 800c030:	404a      	eors	r2, r1
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	3306      	adds	r3, #6
 800c03a:	7819      	ldrb	r1, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3306      	adds	r3, #6
 800c040:	781a      	ldrb	r2, [r3, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3306      	adds	r3, #6
 800c046:	404a      	eors	r2, r1
 800c048:	b2d2      	uxtb	r2, r2
 800c04a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	3307      	adds	r3, #7
 800c050:	7819      	ldrb	r1, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3307      	adds	r3, #7
 800c056:	781a      	ldrb	r2, [r3, #0]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	3307      	adds	r3, #7
 800c05c:	404a      	eors	r2, r1
 800c05e:	b2d2      	uxtb	r2, r2
 800c060:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	3308      	adds	r3, #8
 800c066:	7819      	ldrb	r1, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3308      	adds	r3, #8
 800c06c:	781a      	ldrb	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	3308      	adds	r3, #8
 800c072:	404a      	eors	r2, r1
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	3309      	adds	r3, #9
 800c07c:	7819      	ldrb	r1, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3309      	adds	r3, #9
 800c082:	781a      	ldrb	r2, [r3, #0]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	3309      	adds	r3, #9
 800c088:	404a      	eors	r2, r1
 800c08a:	b2d2      	uxtb	r2, r2
 800c08c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	330a      	adds	r3, #10
 800c092:	7819      	ldrb	r1, [r3, #0]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	330a      	adds	r3, #10
 800c098:	781a      	ldrb	r2, [r3, #0]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	330a      	adds	r3, #10
 800c09e:	404a      	eors	r2, r1
 800c0a0:	b2d2      	uxtb	r2, r2
 800c0a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	330b      	adds	r3, #11
 800c0a8:	7819      	ldrb	r1, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	330b      	adds	r3, #11
 800c0ae:	781a      	ldrb	r2, [r3, #0]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	330b      	adds	r3, #11
 800c0b4:	404a      	eors	r2, r1
 800c0b6:	b2d2      	uxtb	r2, r2
 800c0b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	330c      	adds	r3, #12
 800c0be:	7819      	ldrb	r1, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	330c      	adds	r3, #12
 800c0c4:	781a      	ldrb	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	404a      	eors	r2, r1
 800c0cc:	b2d2      	uxtb	r2, r2
 800c0ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	330d      	adds	r3, #13
 800c0d4:	7819      	ldrb	r1, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	330d      	adds	r3, #13
 800c0da:	781a      	ldrb	r2, [r3, #0]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	330d      	adds	r3, #13
 800c0e0:	404a      	eors	r2, r1
 800c0e2:	b2d2      	uxtb	r2, r2
 800c0e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	330e      	adds	r3, #14
 800c0ea:	7819      	ldrb	r1, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	330e      	adds	r3, #14
 800c0f0:	781a      	ldrb	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	330e      	adds	r3, #14
 800c0f6:	404a      	eors	r2, r1
 800c0f8:	b2d2      	uxtb	r2, r2
 800c0fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	330f      	adds	r3, #15
 800c100:	7819      	ldrb	r1, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	330f      	adds	r3, #15
 800c106:	781a      	ldrb	r2, [r3, #0]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	330f      	adds	r3, #15
 800c10c:	404a      	eors	r2, r1
 800c10e:	b2d2      	uxtb	r2, r2
 800c110:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c112:	46c0      	nop			@ (mov r8, r8)
 800c114:	46bd      	mov	sp, r7
 800c116:	b004      	add	sp, #16
 800c118:	bd80      	pop	{r7, pc}

0800c11a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	0011      	movs	r1, r2
 800c12a:	0018      	movs	r0, r3
 800c12c:	f7ff fe88 	bl	800be40 <xor_block>
}
 800c130:	46c0      	nop			@ (mov r8, r8)
 800c132:	46bd      	mov	sp, r7
 800c134:	b002      	add	sp, #8
 800c136:	bd80      	pop	{r7, pc}

0800c138 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	001a      	movs	r2, r3
 800c146:	4b4c      	ldr	r3, [pc, #304]	@ (800c278 <shift_sub_rows+0x140>)
 800c148:	5c9a      	ldrb	r2, [r3, r2]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	701a      	strb	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3304      	adds	r3, #4
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	0019      	movs	r1, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	3304      	adds	r3, #4
 800c15a:	4a47      	ldr	r2, [pc, #284]	@ (800c278 <shift_sub_rows+0x140>)
 800c15c:	5c52      	ldrb	r2, [r2, r1]
 800c15e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3308      	adds	r3, #8
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	0019      	movs	r1, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3308      	adds	r3, #8
 800c16c:	4a42      	ldr	r2, [pc, #264]	@ (800c278 <shift_sub_rows+0x140>)
 800c16e:	5c52      	ldrb	r2, [r2, r1]
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	330c      	adds	r3, #12
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	0019      	movs	r1, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	330c      	adds	r3, #12
 800c17e:	4a3e      	ldr	r2, [pc, #248]	@ (800c278 <shift_sub_rows+0x140>)
 800c180:	5c52      	ldrb	r2, [r2, r1]
 800c182:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c184:	200f      	movs	r0, #15
 800c186:	183b      	adds	r3, r7, r0
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	7852      	ldrb	r2, [r2, #1]
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3305      	adds	r3, #5
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	0019      	movs	r1, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	3301      	adds	r3, #1
 800c19a:	4a37      	ldr	r2, [pc, #220]	@ (800c278 <shift_sub_rows+0x140>)
 800c19c:	5c52      	ldrb	r2, [r2, r1]
 800c19e:	701a      	strb	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	3309      	adds	r3, #9
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	0019      	movs	r1, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	3305      	adds	r3, #5
 800c1ac:	4a32      	ldr	r2, [pc, #200]	@ (800c278 <shift_sub_rows+0x140>)
 800c1ae:	5c52      	ldrb	r2, [r2, r1]
 800c1b0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	330d      	adds	r3, #13
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	0019      	movs	r1, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3309      	adds	r3, #9
 800c1be:	4a2e      	ldr	r2, [pc, #184]	@ (800c278 <shift_sub_rows+0x140>)
 800c1c0:	5c52      	ldrb	r2, [r2, r1]
 800c1c2:	701a      	strb	r2, [r3, #0]
 800c1c4:	183b      	adds	r3, r7, r0
 800c1c6:	781a      	ldrb	r2, [r3, #0]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	330d      	adds	r3, #13
 800c1cc:	492a      	ldr	r1, [pc, #168]	@ (800c278 <shift_sub_rows+0x140>)
 800c1ce:	5c8a      	ldrb	r2, [r1, r2]
 800c1d0:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c1d2:	183b      	adds	r3, r7, r0
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	7892      	ldrb	r2, [r2, #2]
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	330a      	adds	r3, #10
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	0019      	movs	r1, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3302      	adds	r3, #2
 800c1e6:	4a24      	ldr	r2, [pc, #144]	@ (800c278 <shift_sub_rows+0x140>)
 800c1e8:	5c52      	ldrb	r2, [r2, r1]
 800c1ea:	701a      	strb	r2, [r3, #0]
 800c1ec:	183b      	adds	r3, r7, r0
 800c1ee:	781a      	ldrb	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	330a      	adds	r3, #10
 800c1f4:	4920      	ldr	r1, [pc, #128]	@ (800c278 <shift_sub_rows+0x140>)
 800c1f6:	5c8a      	ldrb	r2, [r1, r2]
 800c1f8:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c1fa:	183b      	adds	r3, r7, r0
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	7992      	ldrb	r2, [r2, #6]
 800c200:	701a      	strb	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	330e      	adds	r3, #14
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	0019      	movs	r1, r3
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	3306      	adds	r3, #6
 800c20e:	4a1a      	ldr	r2, [pc, #104]	@ (800c278 <shift_sub_rows+0x140>)
 800c210:	5c52      	ldrb	r2, [r2, r1]
 800c212:	701a      	strb	r2, [r3, #0]
 800c214:	183b      	adds	r3, r7, r0
 800c216:	781a      	ldrb	r2, [r3, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	330e      	adds	r3, #14
 800c21c:	4916      	ldr	r1, [pc, #88]	@ (800c278 <shift_sub_rows+0x140>)
 800c21e:	5c8a      	ldrb	r2, [r1, r2]
 800c220:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c222:	183b      	adds	r3, r7, r0
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	7bd2      	ldrb	r2, [r2, #15]
 800c228:	701a      	strb	r2, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	330b      	adds	r3, #11
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	0019      	movs	r1, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	330f      	adds	r3, #15
 800c236:	4a10      	ldr	r2, [pc, #64]	@ (800c278 <shift_sub_rows+0x140>)
 800c238:	5c52      	ldrb	r2, [r2, r1]
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	3307      	adds	r3, #7
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	0019      	movs	r1, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	330b      	adds	r3, #11
 800c248:	4a0b      	ldr	r2, [pc, #44]	@ (800c278 <shift_sub_rows+0x140>)
 800c24a:	5c52      	ldrb	r2, [r2, r1]
 800c24c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3303      	adds	r3, #3
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	0019      	movs	r1, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	3307      	adds	r3, #7
 800c25a:	4a07      	ldr	r2, [pc, #28]	@ (800c278 <shift_sub_rows+0x140>)
 800c25c:	5c52      	ldrb	r2, [r2, r1]
 800c25e:	701a      	strb	r2, [r3, #0]
 800c260:	183b      	adds	r3, r7, r0
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3303      	adds	r3, #3
 800c268:	4903      	ldr	r1, [pc, #12]	@ (800c278 <shift_sub_rows+0x140>)
 800c26a:	5c8a      	ldrb	r2, [r1, r2]
 800c26c:	701a      	strb	r2, [r3, #0]
}
 800c26e:	46c0      	nop			@ (mov r8, r8)
 800c270:	46bd      	mov	sp, r7
 800c272:	b004      	add	sp, #16
 800c274:	bd80      	pop	{r7, pc}
 800c276:	46c0      	nop			@ (mov r8, r8)
 800c278:	0801db58 	.word	0x0801db58

0800c27c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c27c:	b590      	push	{r4, r7, lr}
 800c27e:	b087      	sub	sp, #28
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	2408      	movs	r4, #8
 800c288:	193b      	adds	r3, r7, r4
 800c28a:	0011      	movs	r1, r2
 800c28c:	0018      	movs	r0, r3
 800c28e:	f7ff fd63 	bl	800bd58 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c292:	0020      	movs	r0, r4
 800c294:	183b      	adds	r3, r7, r0
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	001a      	movs	r2, r3
 800c29a:	4be8      	ldr	r3, [pc, #928]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c29c:	5c9a      	ldrb	r2, [r3, r2]
 800c29e:	183b      	adds	r3, r7, r0
 800c2a0:	795b      	ldrb	r3, [r3, #5]
 800c2a2:	0019      	movs	r1, r3
 800c2a4:	4be6      	ldr	r3, [pc, #920]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c2a6:	5c5b      	ldrb	r3, [r3, r1]
 800c2a8:	4053      	eors	r3, r2
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	183b      	adds	r3, r7, r0
 800c2ae:	7a9b      	ldrb	r3, [r3, #10]
 800c2b0:	0019      	movs	r1, r3
 800c2b2:	4be4      	ldr	r3, [pc, #912]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c2b4:	5c5b      	ldrb	r3, [r3, r1]
 800c2b6:	4053      	eors	r3, r2
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	183b      	adds	r3, r7, r0
 800c2bc:	7bdb      	ldrb	r3, [r3, #15]
 800c2be:	0019      	movs	r1, r3
 800c2c0:	4be0      	ldr	r3, [pc, #896]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c2c2:	5c5b      	ldrb	r3, [r3, r1]
 800c2c4:	4053      	eors	r3, r2
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c2cc:	183b      	adds	r3, r7, r0
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	001a      	movs	r2, r3
 800c2d2:	4bdc      	ldr	r3, [pc, #880]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c2d4:	5c9a      	ldrb	r2, [r3, r2]
 800c2d6:	183b      	adds	r3, r7, r0
 800c2d8:	795b      	ldrb	r3, [r3, #5]
 800c2da:	0019      	movs	r1, r3
 800c2dc:	4bd7      	ldr	r3, [pc, #860]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c2de:	5c5b      	ldrb	r3, [r3, r1]
 800c2e0:	4053      	eors	r3, r2
 800c2e2:	b2da      	uxtb	r2, r3
 800c2e4:	183b      	adds	r3, r7, r0
 800c2e6:	7a9b      	ldrb	r3, [r3, #10]
 800c2e8:	0019      	movs	r1, r3
 800c2ea:	4bd5      	ldr	r3, [pc, #852]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c2ec:	5c5b      	ldrb	r3, [r3, r1]
 800c2ee:	4053      	eors	r3, r2
 800c2f0:	b2d9      	uxtb	r1, r3
 800c2f2:	183b      	adds	r3, r7, r0
 800c2f4:	7bdb      	ldrb	r3, [r3, #15]
 800c2f6:	001a      	movs	r2, r3
 800c2f8:	4bd2      	ldr	r3, [pc, #840]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c2fa:	5c9a      	ldrb	r2, [r3, r2]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	3301      	adds	r3, #1
 800c300:	404a      	eors	r2, r1
 800c302:	b2d2      	uxtb	r2, r2
 800c304:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c306:	183b      	adds	r3, r7, r0
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	001a      	movs	r2, r3
 800c30c:	4bcd      	ldr	r3, [pc, #820]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c30e:	5c9a      	ldrb	r2, [r3, r2]
 800c310:	183b      	adds	r3, r7, r0
 800c312:	795b      	ldrb	r3, [r3, #5]
 800c314:	0019      	movs	r1, r3
 800c316:	4bcb      	ldr	r3, [pc, #812]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c318:	5c5b      	ldrb	r3, [r3, r1]
 800c31a:	4053      	eors	r3, r2
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	183b      	adds	r3, r7, r0
 800c320:	7a9b      	ldrb	r3, [r3, #10]
 800c322:	0019      	movs	r1, r3
 800c324:	4bc5      	ldr	r3, [pc, #788]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c326:	5c5b      	ldrb	r3, [r3, r1]
 800c328:	4053      	eors	r3, r2
 800c32a:	b2d9      	uxtb	r1, r3
 800c32c:	183b      	adds	r3, r7, r0
 800c32e:	7bdb      	ldrb	r3, [r3, #15]
 800c330:	001a      	movs	r2, r3
 800c332:	4bc3      	ldr	r3, [pc, #780]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c334:	5c9a      	ldrb	r2, [r3, r2]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	3302      	adds	r3, #2
 800c33a:	404a      	eors	r2, r1
 800c33c:	b2d2      	uxtb	r2, r2
 800c33e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c340:	183b      	adds	r3, r7, r0
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	001a      	movs	r2, r3
 800c346:	4bbe      	ldr	r3, [pc, #760]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c348:	5c9a      	ldrb	r2, [r3, r2]
 800c34a:	183b      	adds	r3, r7, r0
 800c34c:	795b      	ldrb	r3, [r3, #5]
 800c34e:	0019      	movs	r1, r3
 800c350:	4bbc      	ldr	r3, [pc, #752]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c352:	5c5b      	ldrb	r3, [r3, r1]
 800c354:	4053      	eors	r3, r2
 800c356:	b2da      	uxtb	r2, r3
 800c358:	183b      	adds	r3, r7, r0
 800c35a:	7a9b      	ldrb	r3, [r3, #10]
 800c35c:	0019      	movs	r1, r3
 800c35e:	4bb9      	ldr	r3, [pc, #740]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c360:	5c5b      	ldrb	r3, [r3, r1]
 800c362:	4053      	eors	r3, r2
 800c364:	b2d9      	uxtb	r1, r3
 800c366:	183b      	adds	r3, r7, r0
 800c368:	7bdb      	ldrb	r3, [r3, #15]
 800c36a:	001a      	movs	r2, r3
 800c36c:	4bb3      	ldr	r3, [pc, #716]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c36e:	5c9a      	ldrb	r2, [r3, r2]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3303      	adds	r3, #3
 800c374:	404a      	eors	r2, r1
 800c376:	b2d2      	uxtb	r2, r2
 800c378:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c37a:	183b      	adds	r3, r7, r0
 800c37c:	791b      	ldrb	r3, [r3, #4]
 800c37e:	001a      	movs	r2, r3
 800c380:	4bae      	ldr	r3, [pc, #696]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c382:	5c9a      	ldrb	r2, [r3, r2]
 800c384:	183b      	adds	r3, r7, r0
 800c386:	7a5b      	ldrb	r3, [r3, #9]
 800c388:	0019      	movs	r1, r3
 800c38a:	4bad      	ldr	r3, [pc, #692]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c38c:	5c5b      	ldrb	r3, [r3, r1]
 800c38e:	4053      	eors	r3, r2
 800c390:	b2da      	uxtb	r2, r3
 800c392:	183b      	adds	r3, r7, r0
 800c394:	7b9b      	ldrb	r3, [r3, #14]
 800c396:	0019      	movs	r1, r3
 800c398:	4baa      	ldr	r3, [pc, #680]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c39a:	5c5b      	ldrb	r3, [r3, r1]
 800c39c:	4053      	eors	r3, r2
 800c39e:	b2d9      	uxtb	r1, r3
 800c3a0:	183b      	adds	r3, r7, r0
 800c3a2:	78db      	ldrb	r3, [r3, #3]
 800c3a4:	001a      	movs	r2, r3
 800c3a6:	4ba7      	ldr	r3, [pc, #668]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c3a8:	5c9a      	ldrb	r2, [r3, r2]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	404a      	eors	r2, r1
 800c3b0:	b2d2      	uxtb	r2, r2
 800c3b2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c3b4:	183b      	adds	r3, r7, r0
 800c3b6:	791b      	ldrb	r3, [r3, #4]
 800c3b8:	001a      	movs	r2, r3
 800c3ba:	4ba2      	ldr	r3, [pc, #648]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c3bc:	5c9a      	ldrb	r2, [r3, r2]
 800c3be:	183b      	adds	r3, r7, r0
 800c3c0:	7a5b      	ldrb	r3, [r3, #9]
 800c3c2:	0019      	movs	r1, r3
 800c3c4:	4b9d      	ldr	r3, [pc, #628]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c3c6:	5c5b      	ldrb	r3, [r3, r1]
 800c3c8:	4053      	eors	r3, r2
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	183b      	adds	r3, r7, r0
 800c3ce:	7b9b      	ldrb	r3, [r3, #14]
 800c3d0:	0019      	movs	r1, r3
 800c3d2:	4b9b      	ldr	r3, [pc, #620]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c3d4:	5c5b      	ldrb	r3, [r3, r1]
 800c3d6:	4053      	eors	r3, r2
 800c3d8:	b2d9      	uxtb	r1, r3
 800c3da:	183b      	adds	r3, r7, r0
 800c3dc:	78db      	ldrb	r3, [r3, #3]
 800c3de:	001a      	movs	r2, r3
 800c3e0:	4b98      	ldr	r3, [pc, #608]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c3e2:	5c9a      	ldrb	r2, [r3, r2]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	3305      	adds	r3, #5
 800c3e8:	404a      	eors	r2, r1
 800c3ea:	b2d2      	uxtb	r2, r2
 800c3ec:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c3ee:	183b      	adds	r3, r7, r0
 800c3f0:	791b      	ldrb	r3, [r3, #4]
 800c3f2:	001a      	movs	r2, r3
 800c3f4:	4b93      	ldr	r3, [pc, #588]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c3f6:	5c9a      	ldrb	r2, [r3, r2]
 800c3f8:	183b      	adds	r3, r7, r0
 800c3fa:	7a5b      	ldrb	r3, [r3, #9]
 800c3fc:	0019      	movs	r1, r3
 800c3fe:	4b91      	ldr	r3, [pc, #580]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c400:	5c5b      	ldrb	r3, [r3, r1]
 800c402:	4053      	eors	r3, r2
 800c404:	b2da      	uxtb	r2, r3
 800c406:	183b      	adds	r3, r7, r0
 800c408:	7b9b      	ldrb	r3, [r3, #14]
 800c40a:	0019      	movs	r1, r3
 800c40c:	4b8b      	ldr	r3, [pc, #556]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c40e:	5c5b      	ldrb	r3, [r3, r1]
 800c410:	4053      	eors	r3, r2
 800c412:	b2d9      	uxtb	r1, r3
 800c414:	183b      	adds	r3, r7, r0
 800c416:	78db      	ldrb	r3, [r3, #3]
 800c418:	001a      	movs	r2, r3
 800c41a:	4b89      	ldr	r3, [pc, #548]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c41c:	5c9a      	ldrb	r2, [r3, r2]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3306      	adds	r3, #6
 800c422:	404a      	eors	r2, r1
 800c424:	b2d2      	uxtb	r2, r2
 800c426:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c428:	183b      	adds	r3, r7, r0
 800c42a:	791b      	ldrb	r3, [r3, #4]
 800c42c:	001a      	movs	r2, r3
 800c42e:	4b84      	ldr	r3, [pc, #528]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c430:	5c9a      	ldrb	r2, [r3, r2]
 800c432:	183b      	adds	r3, r7, r0
 800c434:	7a5b      	ldrb	r3, [r3, #9]
 800c436:	0019      	movs	r1, r3
 800c438:	4b82      	ldr	r3, [pc, #520]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c43a:	5c5b      	ldrb	r3, [r3, r1]
 800c43c:	4053      	eors	r3, r2
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	183b      	adds	r3, r7, r0
 800c442:	7b9b      	ldrb	r3, [r3, #14]
 800c444:	0019      	movs	r1, r3
 800c446:	4b7f      	ldr	r3, [pc, #508]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c448:	5c5b      	ldrb	r3, [r3, r1]
 800c44a:	4053      	eors	r3, r2
 800c44c:	b2d9      	uxtb	r1, r3
 800c44e:	183b      	adds	r3, r7, r0
 800c450:	78db      	ldrb	r3, [r3, #3]
 800c452:	001a      	movs	r2, r3
 800c454:	4b79      	ldr	r3, [pc, #484]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c456:	5c9a      	ldrb	r2, [r3, r2]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3307      	adds	r3, #7
 800c45c:	404a      	eors	r2, r1
 800c45e:	b2d2      	uxtb	r2, r2
 800c460:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c462:	183b      	adds	r3, r7, r0
 800c464:	7a1b      	ldrb	r3, [r3, #8]
 800c466:	001a      	movs	r2, r3
 800c468:	4b74      	ldr	r3, [pc, #464]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c46a:	5c9a      	ldrb	r2, [r3, r2]
 800c46c:	183b      	adds	r3, r7, r0
 800c46e:	7b5b      	ldrb	r3, [r3, #13]
 800c470:	0019      	movs	r1, r3
 800c472:	4b73      	ldr	r3, [pc, #460]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c474:	5c5b      	ldrb	r3, [r3, r1]
 800c476:	4053      	eors	r3, r2
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	183b      	adds	r3, r7, r0
 800c47c:	789b      	ldrb	r3, [r3, #2]
 800c47e:	0019      	movs	r1, r3
 800c480:	4b70      	ldr	r3, [pc, #448]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c482:	5c5b      	ldrb	r3, [r3, r1]
 800c484:	4053      	eors	r3, r2
 800c486:	b2d9      	uxtb	r1, r3
 800c488:	183b      	adds	r3, r7, r0
 800c48a:	79db      	ldrb	r3, [r3, #7]
 800c48c:	001a      	movs	r2, r3
 800c48e:	4b6d      	ldr	r3, [pc, #436]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c490:	5c9a      	ldrb	r2, [r3, r2]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	3308      	adds	r3, #8
 800c496:	404a      	eors	r2, r1
 800c498:	b2d2      	uxtb	r2, r2
 800c49a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c49c:	183b      	adds	r3, r7, r0
 800c49e:	7a1b      	ldrb	r3, [r3, #8]
 800c4a0:	001a      	movs	r2, r3
 800c4a2:	4b68      	ldr	r3, [pc, #416]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c4a4:	5c9a      	ldrb	r2, [r3, r2]
 800c4a6:	183b      	adds	r3, r7, r0
 800c4a8:	7b5b      	ldrb	r3, [r3, #13]
 800c4aa:	0019      	movs	r1, r3
 800c4ac:	4b63      	ldr	r3, [pc, #396]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c4ae:	5c5b      	ldrb	r3, [r3, r1]
 800c4b0:	4053      	eors	r3, r2
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	183b      	adds	r3, r7, r0
 800c4b6:	789b      	ldrb	r3, [r3, #2]
 800c4b8:	0019      	movs	r1, r3
 800c4ba:	4b61      	ldr	r3, [pc, #388]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c4bc:	5c5b      	ldrb	r3, [r3, r1]
 800c4be:	4053      	eors	r3, r2
 800c4c0:	b2d9      	uxtb	r1, r3
 800c4c2:	183b      	adds	r3, r7, r0
 800c4c4:	79db      	ldrb	r3, [r3, #7]
 800c4c6:	001a      	movs	r2, r3
 800c4c8:	4b5e      	ldr	r3, [pc, #376]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c4ca:	5c9a      	ldrb	r2, [r3, r2]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3309      	adds	r3, #9
 800c4d0:	404a      	eors	r2, r1
 800c4d2:	b2d2      	uxtb	r2, r2
 800c4d4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c4d6:	183b      	adds	r3, r7, r0
 800c4d8:	7a1b      	ldrb	r3, [r3, #8]
 800c4da:	001a      	movs	r2, r3
 800c4dc:	4b59      	ldr	r3, [pc, #356]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c4de:	5c9a      	ldrb	r2, [r3, r2]
 800c4e0:	183b      	adds	r3, r7, r0
 800c4e2:	7b5b      	ldrb	r3, [r3, #13]
 800c4e4:	0019      	movs	r1, r3
 800c4e6:	4b57      	ldr	r3, [pc, #348]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c4e8:	5c5b      	ldrb	r3, [r3, r1]
 800c4ea:	4053      	eors	r3, r2
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	183b      	adds	r3, r7, r0
 800c4f0:	789b      	ldrb	r3, [r3, #2]
 800c4f2:	0019      	movs	r1, r3
 800c4f4:	4b51      	ldr	r3, [pc, #324]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c4f6:	5c5b      	ldrb	r3, [r3, r1]
 800c4f8:	4053      	eors	r3, r2
 800c4fa:	b2d9      	uxtb	r1, r3
 800c4fc:	183b      	adds	r3, r7, r0
 800c4fe:	79db      	ldrb	r3, [r3, #7]
 800c500:	001a      	movs	r2, r3
 800c502:	4b4f      	ldr	r3, [pc, #316]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c504:	5c9a      	ldrb	r2, [r3, r2]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	330a      	adds	r3, #10
 800c50a:	404a      	eors	r2, r1
 800c50c:	b2d2      	uxtb	r2, r2
 800c50e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c510:	183b      	adds	r3, r7, r0
 800c512:	7a1b      	ldrb	r3, [r3, #8]
 800c514:	001a      	movs	r2, r3
 800c516:	4b4a      	ldr	r3, [pc, #296]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c518:	5c9a      	ldrb	r2, [r3, r2]
 800c51a:	183b      	adds	r3, r7, r0
 800c51c:	7b5b      	ldrb	r3, [r3, #13]
 800c51e:	0019      	movs	r1, r3
 800c520:	4b48      	ldr	r3, [pc, #288]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c522:	5c5b      	ldrb	r3, [r3, r1]
 800c524:	4053      	eors	r3, r2
 800c526:	b2da      	uxtb	r2, r3
 800c528:	183b      	adds	r3, r7, r0
 800c52a:	789b      	ldrb	r3, [r3, #2]
 800c52c:	0019      	movs	r1, r3
 800c52e:	4b45      	ldr	r3, [pc, #276]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c530:	5c5b      	ldrb	r3, [r3, r1]
 800c532:	4053      	eors	r3, r2
 800c534:	b2d9      	uxtb	r1, r3
 800c536:	183b      	adds	r3, r7, r0
 800c538:	79db      	ldrb	r3, [r3, #7]
 800c53a:	001a      	movs	r2, r3
 800c53c:	4b3f      	ldr	r3, [pc, #252]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c53e:	5c9a      	ldrb	r2, [r3, r2]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	330b      	adds	r3, #11
 800c544:	404a      	eors	r2, r1
 800c546:	b2d2      	uxtb	r2, r2
 800c548:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c54a:	183b      	adds	r3, r7, r0
 800c54c:	7b1b      	ldrb	r3, [r3, #12]
 800c54e:	001a      	movs	r2, r3
 800c550:	4b3a      	ldr	r3, [pc, #232]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c552:	5c9a      	ldrb	r2, [r3, r2]
 800c554:	183b      	adds	r3, r7, r0
 800c556:	785b      	ldrb	r3, [r3, #1]
 800c558:	0019      	movs	r1, r3
 800c55a:	4b39      	ldr	r3, [pc, #228]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c55c:	5c5b      	ldrb	r3, [r3, r1]
 800c55e:	4053      	eors	r3, r2
 800c560:	b2da      	uxtb	r2, r3
 800c562:	183b      	adds	r3, r7, r0
 800c564:	799b      	ldrb	r3, [r3, #6]
 800c566:	0019      	movs	r1, r3
 800c568:	4b36      	ldr	r3, [pc, #216]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c56a:	5c5b      	ldrb	r3, [r3, r1]
 800c56c:	4053      	eors	r3, r2
 800c56e:	b2d9      	uxtb	r1, r3
 800c570:	183b      	adds	r3, r7, r0
 800c572:	7adb      	ldrb	r3, [r3, #11]
 800c574:	001a      	movs	r2, r3
 800c576:	4b33      	ldr	r3, [pc, #204]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c578:	5c9a      	ldrb	r2, [r3, r2]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	330c      	adds	r3, #12
 800c57e:	404a      	eors	r2, r1
 800c580:	b2d2      	uxtb	r2, r2
 800c582:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c584:	183b      	adds	r3, r7, r0
 800c586:	7b1b      	ldrb	r3, [r3, #12]
 800c588:	001a      	movs	r2, r3
 800c58a:	4b2e      	ldr	r3, [pc, #184]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c58c:	5c9a      	ldrb	r2, [r3, r2]
 800c58e:	183b      	adds	r3, r7, r0
 800c590:	785b      	ldrb	r3, [r3, #1]
 800c592:	0019      	movs	r1, r3
 800c594:	4b29      	ldr	r3, [pc, #164]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c596:	5c5b      	ldrb	r3, [r3, r1]
 800c598:	4053      	eors	r3, r2
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	183b      	adds	r3, r7, r0
 800c59e:	799b      	ldrb	r3, [r3, #6]
 800c5a0:	0019      	movs	r1, r3
 800c5a2:	4b27      	ldr	r3, [pc, #156]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c5a4:	5c5b      	ldrb	r3, [r3, r1]
 800c5a6:	4053      	eors	r3, r2
 800c5a8:	b2d9      	uxtb	r1, r3
 800c5aa:	183b      	adds	r3, r7, r0
 800c5ac:	7adb      	ldrb	r3, [r3, #11]
 800c5ae:	001a      	movs	r2, r3
 800c5b0:	4b24      	ldr	r3, [pc, #144]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c5b2:	5c9a      	ldrb	r2, [r3, r2]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	330d      	adds	r3, #13
 800c5b8:	404a      	eors	r2, r1
 800c5ba:	b2d2      	uxtb	r2, r2
 800c5bc:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c5be:	183b      	adds	r3, r7, r0
 800c5c0:	7b1b      	ldrb	r3, [r3, #12]
 800c5c2:	001a      	movs	r2, r3
 800c5c4:	4b1f      	ldr	r3, [pc, #124]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c5c6:	5c9a      	ldrb	r2, [r3, r2]
 800c5c8:	183b      	adds	r3, r7, r0
 800c5ca:	785b      	ldrb	r3, [r3, #1]
 800c5cc:	0019      	movs	r1, r3
 800c5ce:	4b1d      	ldr	r3, [pc, #116]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c5d0:	5c5b      	ldrb	r3, [r3, r1]
 800c5d2:	4053      	eors	r3, r2
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	183b      	adds	r3, r7, r0
 800c5d8:	799b      	ldrb	r3, [r3, #6]
 800c5da:	0019      	movs	r1, r3
 800c5dc:	4b17      	ldr	r3, [pc, #92]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c5de:	5c5b      	ldrb	r3, [r3, r1]
 800c5e0:	4053      	eors	r3, r2
 800c5e2:	b2d9      	uxtb	r1, r3
 800c5e4:	183b      	adds	r3, r7, r0
 800c5e6:	7adb      	ldrb	r3, [r3, #11]
 800c5e8:	001a      	movs	r2, r3
 800c5ea:	4b15      	ldr	r3, [pc, #84]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c5ec:	5c9a      	ldrb	r2, [r3, r2]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	330e      	adds	r3, #14
 800c5f2:	404a      	eors	r2, r1
 800c5f4:	b2d2      	uxtb	r2, r2
 800c5f6:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c5f8:	183b      	adds	r3, r7, r0
 800c5fa:	7b1b      	ldrb	r3, [r3, #12]
 800c5fc:	001a      	movs	r2, r3
 800c5fe:	4b10      	ldr	r3, [pc, #64]	@ (800c640 <mix_sub_columns+0x3c4>)
 800c600:	5c9a      	ldrb	r2, [r3, r2]
 800c602:	183b      	adds	r3, r7, r0
 800c604:	785b      	ldrb	r3, [r3, #1]
 800c606:	0019      	movs	r1, r3
 800c608:	4b0e      	ldr	r3, [pc, #56]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c60a:	5c5b      	ldrb	r3, [r3, r1]
 800c60c:	4053      	eors	r3, r2
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	183b      	adds	r3, r7, r0
 800c612:	799b      	ldrb	r3, [r3, #6]
 800c614:	0019      	movs	r1, r3
 800c616:	4b0b      	ldr	r3, [pc, #44]	@ (800c644 <mix_sub_columns+0x3c8>)
 800c618:	5c5b      	ldrb	r3, [r3, r1]
 800c61a:	4053      	eors	r3, r2
 800c61c:	b2d9      	uxtb	r1, r3
 800c61e:	183b      	adds	r3, r7, r0
 800c620:	7adb      	ldrb	r3, [r3, #11]
 800c622:	001a      	movs	r2, r3
 800c624:	4b05      	ldr	r3, [pc, #20]	@ (800c63c <mix_sub_columns+0x3c0>)
 800c626:	5c9a      	ldrb	r2, [r3, r2]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	330f      	adds	r3, #15
 800c62c:	404a      	eors	r2, r1
 800c62e:	b2d2      	uxtb	r2, r2
 800c630:	701a      	strb	r2, [r3, #0]
  }
 800c632:	46c0      	nop			@ (mov r8, r8)
 800c634:	46bd      	mov	sp, r7
 800c636:	b007      	add	sp, #28
 800c638:	bd90      	pop	{r4, r7, pc}
 800c63a:	46c0      	nop			@ (mov r8, r8)
 800c63c:	0801dc58 	.word	0x0801dc58
 800c640:	0801dd58 	.word	0x0801dd58
 800c644:	0801db58 	.word	0x0801db58

0800c648 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	607a      	str	r2, [r7, #4]
 800c652:	200b      	movs	r0, #11
 800c654:	183b      	adds	r3, r7, r0
 800c656:	1c0a      	adds	r2, r1, #0
 800c658:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c65a:	183b      	adds	r3, r7, r0
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	3b10      	subs	r3, #16
 800c660:	2210      	movs	r2, #16
 800c662:	429a      	cmp	r2, r3
 800c664:	4192      	sbcs	r2, r2
 800c666:	4252      	negs	r2, r2
 800c668:	b2d2      	uxtb	r2, r2
 800c66a:	2a00      	cmp	r2, #0
 800c66c:	d109      	bne.n	800c682 <lorawan_aes_set_key+0x3a>
 800c66e:	4a92      	ldr	r2, [pc, #584]	@ (800c8b8 <lorawan_aes_set_key+0x270>)
 800c670:	40da      	lsrs	r2, r3
 800c672:	0013      	movs	r3, r2
 800c674:	2201      	movs	r2, #1
 800c676:	4013      	ands	r3, r2
 800c678:	1e5a      	subs	r2, r3, #1
 800c67a:	4193      	sbcs	r3, r2
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d105      	bne.n	800c68e <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	22f0      	movs	r2, #240	@ 0xf0
 800c686:	2100      	movs	r1, #0
 800c688:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800c68a:	23ff      	movs	r3, #255	@ 0xff
 800c68c:	e10f      	b.n	800c8ae <lorawan_aes_set_key+0x266>
        break;
 800c68e:	46c0      	nop			@ (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	240b      	movs	r4, #11
 800c694:	193b      	adds	r3, r7, r4
 800c696:	781a      	ldrb	r2, [r3, #0]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	0019      	movs	r1, r3
 800c69c:	f7ff fbb4 	bl	800be08 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c6a0:	0020      	movs	r0, r4
 800c6a2:	183b      	adds	r3, r7, r0
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	331c      	adds	r3, #28
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	2111      	movs	r1, #17
 800c6ac:	187b      	adds	r3, r7, r1
 800c6ae:	0092      	lsls	r2, r2, #2
 800c6b0:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800c6b2:	187b      	adds	r3, r7, r1
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	091b      	lsrs	r3, r3, #4
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	b2d9      	uxtb	r1, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	22f0      	movs	r2, #240	@ 0xf0
 800c6c2:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c6c4:	2317      	movs	r3, #23
 800c6c6:	18fb      	adds	r3, r7, r3
 800c6c8:	183a      	adds	r2, r7, r0
 800c6ca:	7812      	ldrb	r2, [r2, #0]
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	2316      	movs	r3, #22
 800c6d0:	18fb      	adds	r3, r7, r3
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	e0e0      	b.n	800c89a <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c6d8:	2017      	movs	r0, #23
 800c6da:	183b      	adds	r3, r7, r0
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	1f1a      	subs	r2, r3, #4
 800c6e0:	2415      	movs	r4, #21
 800c6e2:	193b      	adds	r3, r7, r4
 800c6e4:	6879      	ldr	r1, [r7, #4]
 800c6e6:	5c8a      	ldrb	r2, [r1, r2]
 800c6e8:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800c6ea:	183b      	adds	r3, r7, r0
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	1eda      	subs	r2, r3, #3
 800c6f0:	2514      	movs	r5, #20
 800c6f2:	197b      	adds	r3, r7, r5
 800c6f4:	6879      	ldr	r1, [r7, #4]
 800c6f6:	5c8a      	ldrb	r2, [r1, r2]
 800c6f8:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800c6fa:	183b      	adds	r3, r7, r0
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	1e9a      	subs	r2, r3, #2
 800c700:	2613      	movs	r6, #19
 800c702:	19bb      	adds	r3, r7, r6
 800c704:	6879      	ldr	r1, [r7, #4]
 800c706:	5c8a      	ldrb	r2, [r1, r2]
 800c708:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800c70a:	183b      	adds	r3, r7, r0
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	1e5a      	subs	r2, r3, #1
 800c710:	2312      	movs	r3, #18
 800c712:	18fb      	adds	r3, r7, r3
 800c714:	6879      	ldr	r1, [r7, #4]
 800c716:	5c8a      	ldrb	r2, [r1, r2]
 800c718:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800c71a:	183a      	adds	r2, r7, r0
 800c71c:	210b      	movs	r1, #11
 800c71e:	187b      	adds	r3, r7, r1
 800c720:	7812      	ldrb	r2, [r2, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	0019      	movs	r1, r3
 800c726:	0010      	movs	r0, r2
 800c728:	f7f3 fd7c 	bl	8000224 <__aeabi_uidivmod>
 800c72c:	000b      	movs	r3, r1
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	2b00      	cmp	r3, #0
 800c732:	d13b      	bne.n	800c7ac <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800c734:	2210      	movs	r2, #16
 800c736:	18bb      	adds	r3, r7, r2
 800c738:	193a      	adds	r2, r7, r4
 800c73a:	7812      	ldrb	r2, [r2, #0]
 800c73c:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800c73e:	197b      	adds	r3, r7, r5
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	4a5e      	ldr	r2, [pc, #376]	@ (800c8bc <lorawan_aes_set_key+0x274>)
 800c744:	5cd1      	ldrb	r1, [r2, r3]
 800c746:	193b      	adds	r3, r7, r4
 800c748:	2016      	movs	r0, #22
 800c74a:	183a      	adds	r2, r7, r0
 800c74c:	7812      	ldrb	r2, [r2, #0]
 800c74e:	404a      	eors	r2, r1
 800c750:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800c752:	19bb      	adds	r3, r7, r6
 800c754:	781a      	ldrb	r2, [r3, #0]
 800c756:	197b      	adds	r3, r7, r5
 800c758:	4958      	ldr	r1, [pc, #352]	@ (800c8bc <lorawan_aes_set_key+0x274>)
 800c75a:	5c8a      	ldrb	r2, [r1, r2]
 800c75c:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800c75e:	2412      	movs	r4, #18
 800c760:	193b      	adds	r3, r7, r4
 800c762:	781a      	ldrb	r2, [r3, #0]
 800c764:	19bb      	adds	r3, r7, r6
 800c766:	4955      	ldr	r1, [pc, #340]	@ (800c8bc <lorawan_aes_set_key+0x274>)
 800c768:	5c8a      	ldrb	r2, [r1, r2]
 800c76a:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800c76c:	2210      	movs	r2, #16
 800c76e:	18bb      	adds	r3, r7, r2
 800c770:	781a      	ldrb	r2, [r3, #0]
 800c772:	193b      	adds	r3, r7, r4
 800c774:	4951      	ldr	r1, [pc, #324]	@ (800c8bc <lorawan_aes_set_key+0x274>)
 800c776:	5c8a      	ldrb	r2, [r1, r2]
 800c778:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800c77a:	183b      	adds	r3, r7, r0
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	b25a      	sxtb	r2, r3
 800c782:	0004      	movs	r4, r0
 800c784:	183b      	adds	r3, r7, r0
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	09db      	lsrs	r3, r3, #7
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	1c19      	adds	r1, r3, #0
 800c78e:	1c0b      	adds	r3, r1, #0
 800c790:	18db      	adds	r3, r3, r3
 800c792:	185b      	adds	r3, r3, r1
 800c794:	1c19      	adds	r1, r3, #0
 800c796:	00c8      	lsls	r0, r1, #3
 800c798:	1c19      	adds	r1, r3, #0
 800c79a:	1c03      	adds	r3, r0, #0
 800c79c:	18cb      	adds	r3, r1, r3
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	b25b      	sxtb	r3, r3
 800c7a2:	4053      	eors	r3, r2
 800c7a4:	b25a      	sxtb	r2, r3
 800c7a6:	193b      	adds	r3, r7, r4
 800c7a8:	701a      	strb	r2, [r3, #0]
 800c7aa:	e02d      	b.n	800c808 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c7ac:	210b      	movs	r1, #11
 800c7ae:	187b      	adds	r3, r7, r1
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b18      	cmp	r3, #24
 800c7b4:	d928      	bls.n	800c808 <lorawan_aes_set_key+0x1c0>
 800c7b6:	2317      	movs	r3, #23
 800c7b8:	18fa      	adds	r2, r7, r3
 800c7ba:	187b      	adds	r3, r7, r1
 800c7bc:	7812      	ldrb	r2, [r2, #0]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	0019      	movs	r1, r3
 800c7c2:	0010      	movs	r0, r2
 800c7c4:	f7f3 fd2e 	bl	8000224 <__aeabi_uidivmod>
 800c7c8:	000b      	movs	r3, r1
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2b10      	cmp	r3, #16
 800c7ce:	d11b      	bne.n	800c808 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800c7d0:	2115      	movs	r1, #21
 800c7d2:	187b      	adds	r3, r7, r1
 800c7d4:	781a      	ldrb	r2, [r3, #0]
 800c7d6:	187b      	adds	r3, r7, r1
 800c7d8:	4938      	ldr	r1, [pc, #224]	@ (800c8bc <lorawan_aes_set_key+0x274>)
 800c7da:	5c8a      	ldrb	r2, [r1, r2]
 800c7dc:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800c7de:	2114      	movs	r1, #20
 800c7e0:	187b      	adds	r3, r7, r1
 800c7e2:	781a      	ldrb	r2, [r3, #0]
 800c7e4:	187b      	adds	r3, r7, r1
 800c7e6:	4935      	ldr	r1, [pc, #212]	@ (800c8bc <lorawan_aes_set_key+0x274>)
 800c7e8:	5c8a      	ldrb	r2, [r1, r2]
 800c7ea:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800c7ec:	2113      	movs	r1, #19
 800c7ee:	187b      	adds	r3, r7, r1
 800c7f0:	781a      	ldrb	r2, [r3, #0]
 800c7f2:	187b      	adds	r3, r7, r1
 800c7f4:	4931      	ldr	r1, [pc, #196]	@ (800c8bc <lorawan_aes_set_key+0x274>)
 800c7f6:	5c8a      	ldrb	r2, [r1, r2]
 800c7f8:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800c7fa:	2112      	movs	r1, #18
 800c7fc:	187b      	adds	r3, r7, r1
 800c7fe:	781a      	ldrb	r2, [r3, #0]
 800c800:	187b      	adds	r3, r7, r1
 800c802:	492e      	ldr	r1, [pc, #184]	@ (800c8bc <lorawan_aes_set_key+0x274>)
 800c804:	5c8a      	ldrb	r2, [r1, r2]
 800c806:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800c808:	2410      	movs	r4, #16
 800c80a:	193b      	adds	r3, r7, r4
 800c80c:	2017      	movs	r0, #23
 800c80e:	1839      	adds	r1, r7, r0
 800c810:	220b      	movs	r2, #11
 800c812:	18ba      	adds	r2, r7, r2
 800c814:	7809      	ldrb	r1, [r1, #0]
 800c816:	7812      	ldrb	r2, [r2, #0]
 800c818:	1a8a      	subs	r2, r1, r2
 800c81a:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c81c:	193b      	adds	r3, r7, r4
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	5cd1      	ldrb	r1, [r2, r3]
 800c824:	183b      	adds	r3, r7, r0
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	2215      	movs	r2, #21
 800c82a:	18ba      	adds	r2, r7, r2
 800c82c:	7812      	ldrb	r2, [r2, #0]
 800c82e:	404a      	eors	r2, r1
 800c830:	b2d1      	uxtb	r1, r2
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c836:	193b      	adds	r3, r7, r4
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	3301      	adds	r3, #1
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	5cd1      	ldrb	r1, [r2, r3]
 800c840:	183b      	adds	r3, r7, r0
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	3301      	adds	r3, #1
 800c846:	2214      	movs	r2, #20
 800c848:	18ba      	adds	r2, r7, r2
 800c84a:	7812      	ldrb	r2, [r2, #0]
 800c84c:	404a      	eors	r2, r1
 800c84e:	b2d1      	uxtb	r1, r2
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c854:	193b      	adds	r3, r7, r4
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	3302      	adds	r3, #2
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	5cd1      	ldrb	r1, [r2, r3]
 800c85e:	183b      	adds	r3, r7, r0
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	3302      	adds	r3, #2
 800c864:	2213      	movs	r2, #19
 800c866:	18ba      	adds	r2, r7, r2
 800c868:	7812      	ldrb	r2, [r2, #0]
 800c86a:	404a      	eors	r2, r1
 800c86c:	b2d1      	uxtb	r1, r2
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c872:	193b      	adds	r3, r7, r4
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	3303      	adds	r3, #3
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	5cd1      	ldrb	r1, [r2, r3]
 800c87c:	183b      	adds	r3, r7, r0
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	3303      	adds	r3, #3
 800c882:	2212      	movs	r2, #18
 800c884:	18ba      	adds	r2, r7, r2
 800c886:	7812      	ldrb	r2, [r2, #0]
 800c888:	404a      	eors	r2, r1
 800c88a:	b2d1      	uxtb	r1, r2
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c890:	183b      	adds	r3, r7, r0
 800c892:	183a      	adds	r2, r7, r0
 800c894:	7812      	ldrb	r2, [r2, #0]
 800c896:	3204      	adds	r2, #4
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	2317      	movs	r3, #23
 800c89c:	18fa      	adds	r2, r7, r3
 800c89e:	2311      	movs	r3, #17
 800c8a0:	18fb      	adds	r3, r7, r3
 800c8a2:	7812      	ldrb	r2, [r2, #0]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d200      	bcs.n	800c8ac <lorawan_aes_set_key+0x264>
 800c8aa:	e715      	b.n	800c6d8 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	0018      	movs	r0, r3
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	b007      	add	sp, #28
 800c8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8b6:	46c0      	nop			@ (mov r8, r8)
 800c8b8:	00010101 	.word	0x00010101
 800c8bc:	0801db58 	.word	0x0801db58

0800c8c0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c8c0:	b5b0      	push	{r4, r5, r7, lr}
 800c8c2:	b08a      	sub	sp, #40	@ 0x28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	22f0      	movs	r2, #240	@ 0xf0
 800c8d0:	5c9b      	ldrb	r3, [r3, r2]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d039      	beq.n	800c94a <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	68f9      	ldr	r1, [r7, #12]
 800c8da:	2314      	movs	r3, #20
 800c8dc:	18fb      	adds	r3, r7, r3
 800c8de:	0018      	movs	r0, r3
 800c8e0:	f7ff fb64 	bl	800bfac <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c8e4:	2327      	movs	r3, #39	@ 0x27
 800c8e6:	18fb      	adds	r3, r7, r3
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	701a      	strb	r2, [r3, #0]
 800c8ec:	e014      	b.n	800c918 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c8ee:	2514      	movs	r5, #20
 800c8f0:	197b      	adds	r3, r7, r5
 800c8f2:	0018      	movs	r0, r3
 800c8f4:	f7ff fcc2 	bl	800c27c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2427      	movs	r4, #39	@ 0x27
 800c8fc:	193a      	adds	r2, r7, r4
 800c8fe:	7812      	ldrb	r2, [r2, #0]
 800c900:	0112      	lsls	r2, r2, #4
 800c902:	189a      	adds	r2, r3, r2
 800c904:	197b      	adds	r3, r7, r5
 800c906:	0011      	movs	r1, r2
 800c908:	0018      	movs	r0, r3
 800c90a:	f7ff fc06 	bl	800c11a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c90e:	193b      	adds	r3, r7, r4
 800c910:	193a      	adds	r2, r7, r4
 800c912:	7812      	ldrb	r2, [r2, #0]
 800c914:	3201      	adds	r2, #1
 800c916:	701a      	strb	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	22f0      	movs	r2, #240	@ 0xf0
 800c91c:	5c9b      	ldrb	r3, [r3, r2]
 800c91e:	2427      	movs	r4, #39	@ 0x27
 800c920:	193a      	adds	r2, r7, r4
 800c922:	7812      	ldrb	r2, [r2, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	d3e2      	bcc.n	800c8ee <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c928:	2514      	movs	r5, #20
 800c92a:	197b      	adds	r3, r7, r5
 800c92c:	0018      	movs	r0, r3
 800c92e:	f7ff fc03 	bl	800c138 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	193a      	adds	r2, r7, r4
 800c936:	7812      	ldrb	r2, [r2, #0]
 800c938:	0112      	lsls	r2, r2, #4
 800c93a:	189a      	adds	r2, r3, r2
 800c93c:	1979      	adds	r1, r7, r5
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	0018      	movs	r0, r3
 800c942:	f7ff fb33 	bl	800bfac <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c946:	2300      	movs	r3, #0
 800c948:	e000      	b.n	800c94c <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800c94a:	23ff      	movs	r3, #255	@ 0xff
}
 800c94c:	0018      	movs	r0, r3
 800c94e:	46bd      	mov	sp, r7
 800c950:	b00a      	add	sp, #40	@ 0x28
 800c952:	bdb0      	pop	{r4, r5, r7, pc}

0800c954 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	0002      	movs	r2, r0
 800c95c:	6039      	str	r1, [r7, #0]
 800c95e:	1dfb      	adds	r3, r7, #7
 800c960:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c962:	230f      	movs	r3, #15
 800c964:	18fb      	adds	r3, r7, r3
 800c966:	2200      	movs	r2, #0
 800c968:	701a      	strb	r2, [r3, #0]
 800c96a:	e020      	b.n	800c9ae <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800c96c:	200f      	movs	r0, #15
 800c96e:	183b      	adds	r3, r7, r0
 800c970:	781a      	ldrb	r2, [r3, #0]
 800c972:	4914      	ldr	r1, [pc, #80]	@ (800c9c4 <GetKeyByID+0x70>)
 800c974:	0013      	movs	r3, r2
 800c976:	011b      	lsls	r3, r3, #4
 800c978:	189b      	adds	r3, r3, r2
 800c97a:	18cb      	adds	r3, r1, r3
 800c97c:	3310      	adds	r3, #16
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	1dfa      	adds	r2, r7, #7
 800c982:	7812      	ldrb	r2, [r2, #0]
 800c984:	429a      	cmp	r2, r3
 800c986:	d10c      	bne.n	800c9a2 <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800c988:	183b      	adds	r3, r7, r0
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	0013      	movs	r3, r2
 800c98e:	011b      	lsls	r3, r3, #4
 800c990:	189b      	adds	r3, r3, r2
 800c992:	3310      	adds	r3, #16
 800c994:	001a      	movs	r2, r3
 800c996:	4b0b      	ldr	r3, [pc, #44]	@ (800c9c4 <GetKeyByID+0x70>)
 800c998:	18d2      	adds	r2, r2, r3
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e00b      	b.n	800c9ba <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c9a2:	210f      	movs	r1, #15
 800c9a4:	187b      	adds	r3, r7, r1
 800c9a6:	781a      	ldrb	r2, [r3, #0]
 800c9a8:	187b      	adds	r3, r7, r1
 800c9aa:	3201      	adds	r2, #1
 800c9ac:	701a      	strb	r2, [r3, #0]
 800c9ae:	230f      	movs	r3, #15
 800c9b0:	18fb      	adds	r3, r7, r3
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	2b09      	cmp	r3, #9
 800c9b6:	d9d9      	bls.n	800c96c <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c9b8:	2303      	movs	r3, #3
}
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	b004      	add	sp, #16
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	46c0      	nop			@ (mov r8, r8)
 800c9c4:	2000007c 	.word	0x2000007c

0800c9c8 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	af00      	add	r7, sp, #0
  return;
 800c9cc:	46c0      	nop			@ (mov r8, r8)
}
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800c9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9d6:	b0d1      	sub	sp, #324	@ 0x144
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	0019      	movs	r1, r3
 800c9e0:	4b3c      	ldr	r3, [pc, #240]	@ (800cad4 <ComputeCmac+0x100>)
 800c9e2:	20a0      	movs	r0, #160	@ 0xa0
 800c9e4:	0040      	lsls	r0, r0, #1
 800c9e6:	181b      	adds	r3, r3, r0
 800c9e8:	19db      	adds	r3, r3, r7
 800c9ea:	801a      	strh	r2, [r3, #0]
 800c9ec:	4b3a      	ldr	r3, [pc, #232]	@ (800cad8 <ComputeCmac+0x104>)
 800c9ee:	181b      	adds	r3, r3, r0
 800c9f0:	19db      	adds	r3, r3, r7
 800c9f2:	1c0a      	adds	r2, r1, #0
 800c9f4:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c9f6:	2340      	movs	r3, #64	@ 0x40
 800c9f8:	33ff      	adds	r3, #255	@ 0xff
 800c9fa:	18fb      	adds	r3, r7, r3
 800c9fc:	2206      	movs	r2, #6
 800c9fe:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d007      	beq.n	800ca16 <ComputeCmac+0x42>
 800ca06:	23a8      	movs	r3, #168	@ 0xa8
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	2208      	movs	r2, #8
 800ca0c:	189b      	adds	r3, r3, r2
 800ca0e:	19db      	adds	r3, r3, r7
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d101      	bne.n	800ca1a <ComputeCmac+0x46>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800ca16:	2302      	movs	r3, #2
 800ca18:	e057      	b.n	800caca <ComputeCmac+0xf6>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800ca1a:	2514      	movs	r5, #20
 800ca1c:	197b      	adds	r3, r7, r5
 800ca1e:	0018      	movs	r0, r3
 800ca20:	f7fe ff3e 	bl	800b8a0 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800ca24:	2640      	movs	r6, #64	@ 0x40
 800ca26:	36ff      	adds	r6, #255	@ 0xff
 800ca28:	19bc      	adds	r4, r7, r6
 800ca2a:	2310      	movs	r3, #16
 800ca2c:	18fa      	adds	r2, r7, r3
 800ca2e:	4b2a      	ldr	r3, [pc, #168]	@ (800cad8 <ComputeCmac+0x104>)
 800ca30:	21a0      	movs	r1, #160	@ 0xa0
 800ca32:	0049      	lsls	r1, r1, #1
 800ca34:	185b      	adds	r3, r3, r1
 800ca36:	19db      	adds	r3, r3, r7
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	0011      	movs	r1, r2
 800ca3c:	0018      	movs	r0, r3
 800ca3e:	f7ff ff89 	bl	800c954 <GetKeyByID>
 800ca42:	0003      	movs	r3, r0
 800ca44:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800ca46:	19bb      	adds	r3, r7, r6
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d139      	bne.n	800cac2 <ComputeCmac+0xee>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	1c5a      	adds	r2, r3, #1
 800ca52:	197b      	adds	r3, r7, r5
 800ca54:	0011      	movs	r1, r2
 800ca56:	0018      	movs	r0, r3
 800ca58:	f7fe ff3c 	bl	800b8d4 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d005      	beq.n	800ca6e <ComputeCmac+0x9a>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800ca62:	68f9      	ldr	r1, [r7, #12]
 800ca64:	197b      	adds	r3, r7, r5
 800ca66:	2210      	movs	r2, #16
 800ca68:	0018      	movs	r0, r3
 800ca6a:	f7fe ff42 	bl	800b8f2 <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800ca6e:	4b19      	ldr	r3, [pc, #100]	@ (800cad4 <ComputeCmac+0x100>)
 800ca70:	22a0      	movs	r2, #160	@ 0xa0
 800ca72:	0052      	lsls	r2, r2, #1
 800ca74:	189b      	adds	r3, r3, r2
 800ca76:	19db      	adds	r3, r3, r7
 800ca78:	881a      	ldrh	r2, [r3, #0]
 800ca7a:	68b9      	ldr	r1, [r7, #8]
 800ca7c:	2414      	movs	r4, #20
 800ca7e:	193b      	adds	r3, r7, r4
 800ca80:	0018      	movs	r0, r3
 800ca82:	f7fe ff36 	bl	800b8f2 <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800ca86:	193a      	adds	r2, r7, r4
 800ca88:	2496      	movs	r4, #150	@ 0x96
 800ca8a:	0064      	lsls	r4, r4, #1
 800ca8c:	193b      	adds	r3, r7, r4
 800ca8e:	0011      	movs	r1, r2
 800ca90:	0018      	movs	r0, r3
 800ca92:	f7fe fff6 	bl	800ba82 <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800ca96:	0021      	movs	r1, r4
 800ca98:	187b      	adds	r3, r7, r1
 800ca9a:	78db      	ldrb	r3, [r3, #3]
 800ca9c:	061a      	lsls	r2, r3, #24
 800ca9e:	187b      	adds	r3, r7, r1
 800caa0:	789b      	ldrb	r3, [r3, #2]
 800caa2:	041b      	lsls	r3, r3, #16
 800caa4:	431a      	orrs	r2, r3
 800caa6:	187b      	adds	r3, r7, r1
 800caa8:	785b      	ldrb	r3, [r3, #1]
 800caaa:	021b      	lsls	r3, r3, #8
 800caac:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800caae:	187a      	adds	r2, r7, r1
 800cab0:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800cab2:	431a      	orrs	r2, r3
 800cab4:	23a8      	movs	r3, #168	@ 0xa8
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	2108      	movs	r1, #8
 800caba:	185b      	adds	r3, r3, r1
 800cabc:	19db      	adds	r3, r3, r7
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800cac2:	2340      	movs	r3, #64	@ 0x40
 800cac4:	33ff      	adds	r3, #255	@ 0xff
 800cac6:	18fb      	adds	r3, r7, r3
 800cac8:	781b      	ldrb	r3, [r3, #0]
}
 800caca:	0018      	movs	r0, r3
 800cacc:	46bd      	mov	sp, r7
 800cace:	b051      	add	sp, #324	@ 0x144
 800cad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad2:	46c0      	nop			@ (mov r8, r8)
 800cad4:	fffffec6 	.word	0xfffffec6
 800cad8:	fffffec5 	.word	0xfffffec5

0800cadc <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800cadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cade:	46de      	mov	lr, fp
 800cae0:	4657      	mov	r7, sl
 800cae2:	464e      	mov	r6, r9
 800cae4:	4645      	mov	r5, r8
 800cae6:	b5e0      	push	{r5, r6, r7, lr}
 800cae8:	b099      	sub	sp, #100	@ 0x64
 800caea:	af10      	add	r7, sp, #64	@ 0x40
 800caec:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800caee:	250f      	movs	r5, #15
 800caf0:	2610      	movs	r6, #16
 800caf2:	19ab      	adds	r3, r5, r6
 800caf4:	19db      	adds	r3, r3, r7
 800caf6:	2206      	movs	r2, #6
 800caf8:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800cafa:	4980      	ldr	r1, [pc, #512]	@ (800ccfc <SecureElementInit+0x220>)
 800cafc:	4b80      	ldr	r3, [pc, #512]	@ (800cd00 <SecureElementInit+0x224>)
 800cafe:	22aa      	movs	r2, #170	@ 0xaa
 800cb00:	0018      	movs	r0, r3
 800cb02:	f00b ff31 	bl	8018968 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800cb06:	19ab      	adds	r3, r5, r6
 800cb08:	19dc      	adds	r4, r3, r7
 800cb0a:	2308      	movs	r3, #8
 800cb0c:	199b      	adds	r3, r3, r6
 800cb0e:	19db      	adds	r3, r3, r7
 800cb10:	0019      	movs	r1, r3
 800cb12:	2000      	movs	r0, #0
 800cb14:	f7ff ff1e 	bl	800c954 <GetKeyByID>
 800cb18:	0003      	movs	r3, r0
 800cb1a:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "# Ключи для активации по OTAA \r\n");
 800cb1c:	4b79      	ldr	r3, [pc, #484]	@ (800cd04 <SecureElementInit+0x228>)
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2100      	movs	r1, #0
 800cb22:	2002      	movs	r0, #2
 800cb24:	f00e fb5a 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800cb28:	19ab      	adds	r3, r5, r6
 800cb2a:	19db      	adds	r3, r3, r7
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d14f      	bne.n	800cbd2 <SecureElementInit+0xf6>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "# AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	785b      	ldrb	r3, [r3, #1]
 800cb36:	001d      	movs	r5, r3
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	789b      	ldrb	r3, [r3, #2]
 800cb3c:	001e      	movs	r6, r3
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	78db      	ldrb	r3, [r3, #3]
 800cb42:	469c      	mov	ip, r3
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	791b      	ldrb	r3, [r3, #4]
 800cb48:	4698      	mov	r8, r3
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	795b      	ldrb	r3, [r3, #5]
 800cb4e:	4699      	mov	r9, r3
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	799b      	ldrb	r3, [r3, #6]
 800cb54:	469a      	mov	sl, r3
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	79db      	ldrb	r3, [r3, #7]
 800cb5a:	469b      	mov	fp, r3
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	7a1b      	ldrb	r3, [r3, #8]
 800cb60:	613b      	str	r3, [r7, #16]
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	7a5b      	ldrb	r3, [r3, #9]
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	7a9b      	ldrb	r3, [r3, #10]
 800cb6c:	60bb      	str	r3, [r7, #8]
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	7adb      	ldrb	r3, [r3, #11]
 800cb72:	607b      	str	r3, [r7, #4]
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	7b1b      	ldrb	r3, [r3, #12]
 800cb78:	603b      	str	r3, [r7, #0]
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	7b5b      	ldrb	r3, [r3, #13]
 800cb7e:	001c      	movs	r4, r3
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	7b9b      	ldrb	r3, [r3, #14]
 800cb84:	0018      	movs	r0, r3
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	7bdb      	ldrb	r3, [r3, #15]
 800cb8a:	0019      	movs	r1, r3
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	7c1b      	ldrb	r3, [r3, #16]
 800cb90:	4a5d      	ldr	r2, [pc, #372]	@ (800cd08 <SecureElementInit+0x22c>)
 800cb92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb94:	910e      	str	r1, [sp, #56]	@ 0x38
 800cb96:	900d      	str	r0, [sp, #52]	@ 0x34
 800cb98:	940c      	str	r4, [sp, #48]	@ 0x30
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	910a      	str	r1, [sp, #40]	@ 0x28
 800cba2:	68b9      	ldr	r1, [r7, #8]
 800cba4:	9109      	str	r1, [sp, #36]	@ 0x24
 800cba6:	68f9      	ldr	r1, [r7, #12]
 800cba8:	9108      	str	r1, [sp, #32]
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	9307      	str	r3, [sp, #28]
 800cbae:	465b      	mov	r3, fp
 800cbb0:	9306      	str	r3, [sp, #24]
 800cbb2:	4653      	mov	r3, sl
 800cbb4:	9305      	str	r3, [sp, #20]
 800cbb6:	464b      	mov	r3, r9
 800cbb8:	9304      	str	r3, [sp, #16]
 800cbba:	4643      	mov	r3, r8
 800cbbc:	9303      	str	r3, [sp, #12]
 800cbbe:	4663      	mov	r3, ip
 800cbc0:	9302      	str	r3, [sp, #8]
 800cbc2:	9601      	str	r6, [sp, #4]
 800cbc4:	9500      	str	r5, [sp, #0]
 800cbc6:	0013      	movs	r3, r2
 800cbc8:	2200      	movs	r2, #0
 800cbca:	2100      	movs	r1, #0
 800cbcc:	2002      	movs	r0, #2
 800cbce:	f00e fb05 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800cbd2:	250f      	movs	r5, #15
 800cbd4:	2610      	movs	r6, #16
 800cbd6:	19ab      	adds	r3, r5, r6
 800cbd8:	19dc      	adds	r4, r3, r7
 800cbda:	2308      	movs	r3, #8
 800cbdc:	199b      	adds	r3, r3, r6
 800cbde:	19db      	adds	r3, r3, r7
 800cbe0:	0019      	movs	r1, r3
 800cbe2:	2001      	movs	r0, #1
 800cbe4:	f7ff feb6 	bl	800c954 <GetKeyByID>
 800cbe8:	0003      	movs	r3, r0
 800cbea:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800cbec:	19ab      	adds	r3, r5, r6
 800cbee:	19db      	adds	r3, r3, r7
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d14f      	bne.n	800cc96 <SecureElementInit+0x1ba>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "# NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	785b      	ldrb	r3, [r3, #1]
 800cbfa:	001d      	movs	r5, r3
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	789b      	ldrb	r3, [r3, #2]
 800cc00:	001e      	movs	r6, r3
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	78db      	ldrb	r3, [r3, #3]
 800cc06:	469c      	mov	ip, r3
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	791b      	ldrb	r3, [r3, #4]
 800cc0c:	4698      	mov	r8, r3
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	795b      	ldrb	r3, [r3, #5]
 800cc12:	4699      	mov	r9, r3
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	799b      	ldrb	r3, [r3, #6]
 800cc18:	469a      	mov	sl, r3
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	79db      	ldrb	r3, [r3, #7]
 800cc1e:	469b      	mov	fp, r3
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	7a1b      	ldrb	r3, [r3, #8]
 800cc24:	613b      	str	r3, [r7, #16]
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	7a5b      	ldrb	r3, [r3, #9]
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	7a9b      	ldrb	r3, [r3, #10]
 800cc30:	60bb      	str	r3, [r7, #8]
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	7adb      	ldrb	r3, [r3, #11]
 800cc36:	607b      	str	r3, [r7, #4]
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	7b1b      	ldrb	r3, [r3, #12]
 800cc3c:	603b      	str	r3, [r7, #0]
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	7b5b      	ldrb	r3, [r3, #13]
 800cc42:	001c      	movs	r4, r3
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	7b9b      	ldrb	r3, [r3, #14]
 800cc48:	0018      	movs	r0, r3
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	7bdb      	ldrb	r3, [r3, #15]
 800cc4e:	0019      	movs	r1, r3
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	7c1b      	ldrb	r3, [r3, #16]
 800cc54:	4a2d      	ldr	r2, [pc, #180]	@ (800cd0c <SecureElementInit+0x230>)
 800cc56:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc58:	910e      	str	r1, [sp, #56]	@ 0x38
 800cc5a:	900d      	str	r0, [sp, #52]	@ 0x34
 800cc5c:	940c      	str	r4, [sp, #48]	@ 0x30
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	910a      	str	r1, [sp, #40]	@ 0x28
 800cc66:	68b9      	ldr	r1, [r7, #8]
 800cc68:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc6a:	68f9      	ldr	r1, [r7, #12]
 800cc6c:	9108      	str	r1, [sp, #32]
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	9307      	str	r3, [sp, #28]
 800cc72:	465b      	mov	r3, fp
 800cc74:	9306      	str	r3, [sp, #24]
 800cc76:	4653      	mov	r3, sl
 800cc78:	9305      	str	r3, [sp, #20]
 800cc7a:	464b      	mov	r3, r9
 800cc7c:	9304      	str	r3, [sp, #16]
 800cc7e:	4643      	mov	r3, r8
 800cc80:	9303      	str	r3, [sp, #12]
 800cc82:	4663      	mov	r3, ip
 800cc84:	9302      	str	r3, [sp, #8]
 800cc86:	9601      	str	r6, [sp, #4]
 800cc88:	9500      	str	r5, [sp, #0]
 800cc8a:	0013      	movs	r3, r2
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2100      	movs	r1, #0
 800cc90:	2002      	movs	r0, #2
 800cc92:	f00e faa3 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
  }
//  KEY_LOG(TS_OFF, VLEVEL_M, "# Ключи для активации по ABP \r\n");
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800cc96:	250f      	movs	r5, #15
 800cc98:	2310      	movs	r3, #16
 800cc9a:	18ea      	adds	r2, r5, r3
 800cc9c:	19d4      	adds	r4, r2, r7
 800cc9e:	2608      	movs	r6, #8
 800cca0:	18f2      	adds	r2, r6, r3
 800cca2:	19d3      	adds	r3, r2, r7
 800cca4:	0019      	movs	r1, r3
 800cca6:	2008      	movs	r0, #8
 800cca8:	f7ff fe54 	bl	800c954 <GetKeyByID>
 800ccac:	0003      	movs	r3, r0
 800ccae:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
  {
//    KEY_LOG(TS_OFF, VLEVEL_M, "# AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800ccb0:	2310      	movs	r3, #16
 800ccb2:	18ea      	adds	r2, r5, r3
 800ccb4:	19d4      	adds	r4, r2, r7
 800ccb6:	18f3      	adds	r3, r6, r3
 800ccb8:	19db      	adds	r3, r3, r7
 800ccba:	0019      	movs	r1, r3
 800ccbc:	2007      	movs	r0, #7
 800ccbe:	f7ff fe49 	bl	800c954 <GetKeyByID>
 800ccc2:	0003      	movs	r3, r0
 800ccc4:	7023      	strb	r3, [r4, #0]
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <SecureElementInit+0x1f8>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800cccc:	4b10      	ldr	r3, [pc, #64]	@ (800cd10 <SecureElementInit+0x234>)
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	e002      	b.n	800ccda <SecureElementInit+0x1fe>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800ccd4:	4b0e      	ldr	r3, [pc, #56]	@ (800cd10 <SecureElementInit+0x234>)
 800ccd6:	4a0f      	ldr	r2, [pc, #60]	@ (800cd14 <SecureElementInit+0x238>)
 800ccd8:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800ccda:	4b0f      	ldr	r3, [pc, #60]	@ (800cd18 <SecureElementInit+0x23c>)
 800ccdc:	0018      	movs	r0, r3
 800ccde:	f7f7 fcac 	bl	800463a <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800cce2:	4b0b      	ldr	r3, [pc, #44]	@ (800cd10 <SecureElementInit+0x234>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	0018      	movs	r0, r3
 800ccec:	46bd      	mov	sp, r7
 800ccee:	b009      	add	sp, #36	@ 0x24
 800ccf0:	bcf0      	pop	{r4, r5, r6, r7}
 800ccf2:	46bb      	mov	fp, r7
 800ccf4:	46b2      	mov	sl, r6
 800ccf6:	46a9      	mov	r9, r5
 800ccf8:	46a0      	mov	r8, r4
 800ccfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfc:	0801de58 	.word	0x0801de58
 800cd00:	2000008c 	.word	0x2000008c
 800cd04:	0801df04 	.word	0x0801df04
 800cd08:	0801df38 	.word	0x0801df38
 800cd0c:	0801df98 	.word	0x0801df98
 800cd10:	200007b8 	.word	0x200007b8
 800cd14:	0800c9c9 	.word	0x0800c9c9
 800cd18:	2000007c 	.word	0x2000007c

0800cd1c <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d007      	beq.n	800cd3a <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4b05      	ldr	r3, [pc, #20]	@ (800cd44 <SecureElementRestoreNvmCtx+0x28>)
 800cd2e:	22ba      	movs	r2, #186	@ 0xba
 800cd30:	0018      	movs	r0, r3
 800cd32:	f00b fe19 	bl	8018968 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cd36:	2300      	movs	r3, #0
 800cd38:	e000      	b.n	800cd3c <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cd3a:	2302      	movs	r3, #2
  }
}
 800cd3c:	0018      	movs	r0, r3
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	b002      	add	sp, #8
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	2000007c 	.word	0x2000007c

0800cd48 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	22ba      	movs	r2, #186	@ 0xba
 800cd54:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800cd56:	4b02      	ldr	r3, [pc, #8]	@ (800cd60 <SecureElementGetNvmCtx+0x18>)
}
 800cd58:	0018      	movs	r0, r3
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	b002      	add	sp, #8
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	2000007c 	.word	0x2000007c

0800cd64 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800cd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd66:	b089      	sub	sp, #36	@ 0x24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	0002      	movs	r2, r0
 800cd6c:	6039      	str	r1, [r7, #0]
 800cd6e:	1dfb      	adds	r3, r7, #7
 800cd70:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e064      	b.n	800ce46 <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cd7c:	231f      	movs	r3, #31
 800cd7e:	18fb      	adds	r3, r7, r3
 800cd80:	2200      	movs	r2, #0
 800cd82:	701a      	strb	r2, [r3, #0]
 800cd84:	e059      	b.n	800ce3a <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800cd86:	231f      	movs	r3, #31
 800cd88:	18fb      	adds	r3, r7, r3
 800cd8a:	781a      	ldrb	r2, [r3, #0]
 800cd8c:	4930      	ldr	r1, [pc, #192]	@ (800ce50 <SecureElementSetKey+0xec>)
 800cd8e:	0013      	movs	r3, r2
 800cd90:	011b      	lsls	r3, r3, #4
 800cd92:	189b      	adds	r3, r3, r2
 800cd94:	18cb      	adds	r3, r1, r3
 800cd96:	3310      	adds	r3, #16
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	1dfa      	adds	r2, r7, #7
 800cd9c:	7812      	ldrb	r2, [r2, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d145      	bne.n	800ce2e <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800cda2:	1dfb      	adds	r3, r7, #7
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b80      	cmp	r3, #128	@ 0x80
 800cda8:	d12c      	bne.n	800ce04 <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cdaa:	251e      	movs	r5, #30
 800cdac:	197b      	adds	r3, r7, r5
 800cdae:	2206      	movs	r2, #6
 800cdb0:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800cdb2:	260c      	movs	r6, #12
 800cdb4:	19bb      	adds	r3, r7, r6
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	3304      	adds	r3, #4
 800cdbc:	220c      	movs	r2, #12
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	0018      	movs	r0, r3
 800cdc2:	f010 fa68 	bl	801d296 <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800cdc6:	197c      	adds	r4, r7, r5
 800cdc8:	19bb      	adds	r3, r7, r6
 800cdca:	6838      	ldr	r0, [r7, #0]
 800cdcc:	227f      	movs	r2, #127	@ 0x7f
 800cdce:	2110      	movs	r1, #16
 800cdd0:	f000 f8a5 	bl	800cf1e <SecureElementAesEncrypt>
 800cdd4:	0003      	movs	r3, r0
 800cdd6:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800cdd8:	231f      	movs	r3, #31
 800cdda:	18fb      	adds	r3, r7, r3
 800cddc:	781a      	ldrb	r2, [r3, #0]
 800cdde:	0013      	movs	r3, r2
 800cde0:	011b      	lsls	r3, r3, #4
 800cde2:	189b      	adds	r3, r3, r2
 800cde4:	3310      	adds	r3, #16
 800cde6:	001a      	movs	r2, r3
 800cde8:	4b19      	ldr	r3, [pc, #100]	@ (800ce50 <SecureElementSetKey+0xec>)
 800cdea:	18d3      	adds	r3, r2, r3
 800cdec:	3301      	adds	r3, #1
 800cdee:	19b9      	adds	r1, r7, r6
 800cdf0:	2210      	movs	r2, #16
 800cdf2:	0018      	movs	r0, r3
 800cdf4:	f00b fdb8 	bl	8018968 <memcpy1>
        SeNvmCtxChanged();
 800cdf8:	4b16      	ldr	r3, [pc, #88]	@ (800ce54 <SecureElementSetKey+0xf0>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4798      	blx	r3

        return retval;
 800cdfe:	197b      	adds	r3, r7, r5
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	e020      	b.n	800ce46 <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800ce04:	231f      	movs	r3, #31
 800ce06:	18fb      	adds	r3, r7, r3
 800ce08:	781a      	ldrb	r2, [r3, #0]
 800ce0a:	0013      	movs	r3, r2
 800ce0c:	011b      	lsls	r3, r3, #4
 800ce0e:	189b      	adds	r3, r3, r2
 800ce10:	3310      	adds	r3, #16
 800ce12:	001a      	movs	r2, r3
 800ce14:	4b0e      	ldr	r3, [pc, #56]	@ (800ce50 <SecureElementSetKey+0xec>)
 800ce16:	18d3      	adds	r3, r2, r3
 800ce18:	3301      	adds	r3, #1
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	2210      	movs	r2, #16
 800ce1e:	0018      	movs	r0, r3
 800ce20:	f00b fda2 	bl	8018968 <memcpy1>
        SeNvmCtxChanged();
 800ce24:	4b0b      	ldr	r3, [pc, #44]	@ (800ce54 <SecureElementSetKey+0xf0>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e00b      	b.n	800ce46 <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ce2e:	211f      	movs	r1, #31
 800ce30:	187b      	adds	r3, r7, r1
 800ce32:	781a      	ldrb	r2, [r3, #0]
 800ce34:	187b      	adds	r3, r7, r1
 800ce36:	3201      	adds	r2, #1
 800ce38:	701a      	strb	r2, [r3, #0]
 800ce3a:	231f      	movs	r3, #31
 800ce3c:	18fb      	adds	r3, r7, r3
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b09      	cmp	r3, #9
 800ce42:	d9a0      	bls.n	800cd86 <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ce44:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800ce46:	0018      	movs	r0, r3
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	b009      	add	sp, #36	@ 0x24
 800ce4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce4e:	46c0      	nop			@ (mov r8, r8)
 800ce50:	2000007c 	.word	0x2000007c
 800ce54:	200007b8 	.word	0x200007b8

0800ce58 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800ce58:	b590      	push	{r4, r7, lr}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af02      	add	r7, sp, #8
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	0019      	movs	r1, r3
 800ce64:	1dbb      	adds	r3, r7, #6
 800ce66:	801a      	strh	r2, [r3, #0]
 800ce68:	1d7b      	adds	r3, r7, #5
 800ce6a:	1c0a      	adds	r2, r1, #0
 800ce6c:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800ce6e:	1d7b      	adds	r3, r7, #5
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b7e      	cmp	r3, #126	@ 0x7e
 800ce74:	d901      	bls.n	800ce7a <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ce76:	2303      	movs	r3, #3
 800ce78:	e00b      	b.n	800ce92 <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800ce7a:	1d7b      	adds	r3, r7, #5
 800ce7c:	781c      	ldrb	r4, [r3, #0]
 800ce7e:	1dbb      	adds	r3, r7, #6
 800ce80:	881a      	ldrh	r2, [r3, #0]
 800ce82:	68b9      	ldr	r1, [r7, #8]
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	6a3b      	ldr	r3, [r7, #32]
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	0023      	movs	r3, r4
 800ce8c:	f7ff fda2 	bl	800c9d4 <ComputeCmac>
 800ce90:	0003      	movs	r3, r0
}
 800ce92:	0018      	movs	r0, r3
 800ce94:	46bd      	mov	sp, r7
 800ce96:	b005      	add	sp, #20
 800ce98:	bd90      	pop	{r4, r7, pc}

0800ce9a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800ce9a:	b5b0      	push	{r4, r5, r7, lr}
 800ce9c:	b088      	sub	sp, #32
 800ce9e:	af02      	add	r7, sp, #8
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	0008      	movs	r0, r1
 800cea4:	607a      	str	r2, [r7, #4]
 800cea6:	0019      	movs	r1, r3
 800cea8:	230a      	movs	r3, #10
 800ceaa:	18fb      	adds	r3, r7, r3
 800ceac:	1c02      	adds	r2, r0, #0
 800ceae:	801a      	strh	r2, [r3, #0]
 800ceb0:	2309      	movs	r3, #9
 800ceb2:	18fb      	adds	r3, r7, r3
 800ceb4:	1c0a      	adds	r2, r1, #0
 800ceb6:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ceb8:	2317      	movs	r3, #23
 800ceba:	18fb      	adds	r3, r7, r3
 800cebc:	2206      	movs	r2, #6
 800cebe:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d101      	bne.n	800ceca <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cec6:	2302      	movs	r3, #2
 800cec8:	e025      	b.n	800cf16 <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800cece:	2517      	movs	r5, #23
 800ced0:	197c      	adds	r4, r7, r5
 800ced2:	2309      	movs	r3, #9
 800ced4:	18fb      	adds	r3, r7, r3
 800ced6:	7818      	ldrb	r0, [r3, #0]
 800ced8:	230a      	movs	r3, #10
 800ceda:	18fb      	adds	r3, r7, r3
 800cedc:	881a      	ldrh	r2, [r3, #0]
 800cede:	68f9      	ldr	r1, [r7, #12]
 800cee0:	2310      	movs	r3, #16
 800cee2:	18fb      	adds	r3, r7, r3
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	0003      	movs	r3, r0
 800cee8:	2000      	movs	r0, #0
 800ceea:	f7ff fd73 	bl	800c9d4 <ComputeCmac>
 800ceee:	0003      	movs	r3, r0
 800cef0:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800cef2:	197b      	adds	r3, r7, r5
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d002      	beq.n	800cf00 <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800cefa:	197b      	adds	r3, r7, r5
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	e00a      	b.n	800cf16 <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d003      	beq.n	800cf10 <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800cf08:	2317      	movs	r3, #23
 800cf0a:	18fb      	adds	r3, r7, r3
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800cf10:	2317      	movs	r3, #23
 800cf12:	18fb      	adds	r3, r7, r3
 800cf14:	781b      	ldrb	r3, [r3, #0]
}
 800cf16:	0018      	movs	r0, r3
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	b006      	add	sp, #24
 800cf1c:	bdb0      	pop	{r4, r5, r7, pc}

0800cf1e <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800cf1e:	b5b0      	push	{r4, r5, r7, lr}
 800cf20:	b0c2      	sub	sp, #264	@ 0x108
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	60f8      	str	r0, [r7, #12]
 800cf26:	0008      	movs	r0, r1
 800cf28:	0011      	movs	r1, r2
 800cf2a:	607b      	str	r3, [r7, #4]
 800cf2c:	230a      	movs	r3, #10
 800cf2e:	18fb      	adds	r3, r7, r3
 800cf30:	1c02      	adds	r2, r0, #0
 800cf32:	801a      	strh	r2, [r3, #0]
 800cf34:	2309      	movs	r3, #9
 800cf36:	18fb      	adds	r3, r7, r3
 800cf38:	1c0a      	adds	r2, r1, #0
 800cf3a:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cf3c:	1dfb      	adds	r3, r7, #7
 800cf3e:	33ff      	adds	r3, #255	@ 0xff
 800cf40:	2206      	movs	r2, #6
 800cf42:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d002      	beq.n	800cf50 <SecureElementAesEncrypt+0x32>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d101      	bne.n	800cf54 <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cf50:	2302      	movs	r3, #2
 800cf52:	e051      	b.n	800cff8 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800cf54:	230a      	movs	r3, #10
 800cf56:	18fb      	adds	r3, r7, r3
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	220f      	movs	r2, #15
 800cf5c:	4013      	ands	r3, r2
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800cf64:	2305      	movs	r3, #5
 800cf66:	e047      	b.n	800cff8 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800cf68:	2514      	movs	r5, #20
 800cf6a:	197b      	adds	r3, r7, r5
 800cf6c:	22f0      	movs	r2, #240	@ 0xf0
 800cf6e:	2100      	movs	r1, #0
 800cf70:	0018      	movs	r0, r3
 800cf72:	f00b fd37 	bl	80189e4 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800cf76:	1dfc      	adds	r4, r7, #7
 800cf78:	34ff      	adds	r4, #255	@ 0xff
 800cf7a:	2310      	movs	r3, #16
 800cf7c:	18fa      	adds	r2, r7, r3
 800cf7e:	2309      	movs	r3, #9
 800cf80:	18fb      	adds	r3, r7, r3
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	0011      	movs	r1, r2
 800cf86:	0018      	movs	r0, r3
 800cf88:	f7ff fce4 	bl	800c954 <GetKeyByID>
 800cf8c:	0003      	movs	r3, r0
 800cf8e:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800cf90:	1dfb      	adds	r3, r7, #7
 800cf92:	33ff      	adds	r3, #255	@ 0xff
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d12b      	bne.n	800cff2 <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	197a      	adds	r2, r7, r5
 800cfa0:	2110      	movs	r1, #16
 800cfa2:	0018      	movs	r0, r3
 800cfa4:	f7ff fb50 	bl	800c648 <lorawan_aes_set_key>

    uint8_t block = 0;
 800cfa8:	2308      	movs	r3, #8
 800cfaa:	33ff      	adds	r3, #255	@ 0xff
 800cfac:	18fb      	adds	r3, r7, r3
 800cfae:	2200      	movs	r2, #0
 800cfb0:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800cfb2:	e019      	b.n	800cfe8 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800cfb4:	2408      	movs	r4, #8
 800cfb6:	34ff      	adds	r4, #255	@ 0xff
 800cfb8:	193b      	adds	r3, r7, r4
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	18d0      	adds	r0, r2, r3
 800cfc0:	193b      	adds	r3, r7, r4
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	18d3      	adds	r3, r2, r3
 800cfc8:	2214      	movs	r2, #20
 800cfca:	18ba      	adds	r2, r7, r2
 800cfcc:	0019      	movs	r1, r3
 800cfce:	f7ff fc77 	bl	800c8c0 <lorawan_aes_encrypt>
      block = block + 16;
 800cfd2:	193b      	adds	r3, r7, r4
 800cfd4:	193a      	adds	r2, r7, r4
 800cfd6:	7812      	ldrb	r2, [r2, #0]
 800cfd8:	3210      	adds	r2, #16
 800cfda:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800cfdc:	220a      	movs	r2, #10
 800cfde:	18bb      	adds	r3, r7, r2
 800cfe0:	18ba      	adds	r2, r7, r2
 800cfe2:	8812      	ldrh	r2, [r2, #0]
 800cfe4:	3a10      	subs	r2, #16
 800cfe6:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800cfe8:	230a      	movs	r3, #10
 800cfea:	18fb      	adds	r3, r7, r3
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1e0      	bne.n	800cfb4 <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800cff2:	1dfb      	adds	r3, r7, #7
 800cff4:	33ff      	adds	r3, #255	@ 0xff
 800cff6:	781b      	ldrb	r3, [r3, #0]
}
 800cff8:	0018      	movs	r0, r3
 800cffa:	46bd      	mov	sp, r7
 800cffc:	b042      	add	sp, #264	@ 0x108
 800cffe:	bdb0      	pop	{r4, r5, r7, pc}

0800d000 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800d000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d002:	b08b      	sub	sp, #44	@ 0x2c
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	0019      	movs	r1, r3
 800d00c:	1dfb      	adds	r3, r7, #7
 800d00e:	701a      	strb	r2, [r3, #0]
 800d010:	1dbb      	adds	r3, r7, #6
 800d012:	1c0a      	adds	r2, r1, #0
 800d014:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d016:	2327      	movs	r3, #39	@ 0x27
 800d018:	18fb      	adds	r3, r7, r3
 800d01a:	2206      	movs	r2, #6
 800d01c:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d024:	2302      	movs	r3, #2
 800d026:	e03c      	b.n	800d0a2 <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800d028:	1dbb      	adds	r3, r7, #6
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d02e:	d105      	bne.n	800d03c <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800d030:	1dfb      	adds	r3, r7, #7
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	2b09      	cmp	r3, #9
 800d036:	d001      	beq.n	800d03c <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d038:	2303      	movs	r3, #3
 800d03a:	e032      	b.n	800d0a2 <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800d03c:	2614      	movs	r6, #20
 800d03e:	19bb      	adds	r3, r7, r6
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	3304      	adds	r3, #4
 800d046:	220c      	movs	r2, #12
 800d048:	2100      	movs	r1, #0
 800d04a:	0018      	movs	r0, r3
 800d04c:	f010 f923 	bl	801d296 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800d050:	2527      	movs	r5, #39	@ 0x27
 800d052:	197c      	adds	r4, r7, r5
 800d054:	19b9      	adds	r1, r7, r6
 800d056:	1dfb      	adds	r3, r7, #7
 800d058:	781a      	ldrb	r2, [r3, #0]
 800d05a:	68b8      	ldr	r0, [r7, #8]
 800d05c:	000b      	movs	r3, r1
 800d05e:	2110      	movs	r1, #16
 800d060:	f7ff ff5d 	bl	800cf1e <SecureElementAesEncrypt>
 800d064:	0003      	movs	r3, r0
 800d066:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d068:	197b      	adds	r3, r7, r5
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800d070:	197b      	adds	r3, r7, r5
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	e015      	b.n	800d0a2 <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800d076:	2527      	movs	r5, #39	@ 0x27
 800d078:	197c      	adds	r4, r7, r5
 800d07a:	2314      	movs	r3, #20
 800d07c:	18fa      	adds	r2, r7, r3
 800d07e:	1dbb      	adds	r3, r7, #6
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	0011      	movs	r1, r2
 800d084:	0018      	movs	r0, r3
 800d086:	f7ff fe6d 	bl	800cd64 <SecureElementSetKey>
 800d08a:	0003      	movs	r3, r0
 800d08c:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d08e:	197b      	adds	r3, r7, r5
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d002      	beq.n	800d09c <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800d096:	197b      	adds	r3, r7, r5
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	e002      	b.n	800d0a2 <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d09c:	2327      	movs	r3, #39	@ 0x27
 800d09e:	18fb      	adds	r3, r7, r3
 800d0a0:	781b      	ldrb	r3, [r3, #0]
}
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	b00b      	add	sp, #44	@ 0x2c
 800d0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0aa <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800d0aa:	b5b0      	push	{r4, r5, r7, lr}
 800d0ac:	b086      	sub	sp, #24
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	0011      	movs	r1, r2
 800d0b4:	607b      	str	r3, [r7, #4]
 800d0b6:	230f      	movs	r3, #15
 800d0b8:	18fb      	adds	r3, r7, r3
 800d0ba:	1c02      	adds	r2, r0, #0
 800d0bc:	701a      	strb	r2, [r3, #0]
 800d0be:	230c      	movs	r3, #12
 800d0c0:	18fb      	adds	r3, r7, r3
 800d0c2:	1c0a      	adds	r2, r1, #0
 800d0c4:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d005      	beq.n	800d0d8 <SecureElementProcessJoinAccept+0x2e>
 800d0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d002      	beq.n	800d0d8 <SecureElementProcessJoinAccept+0x2e>
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d101      	bne.n	800d0dc <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d0d8:	2302      	movs	r3, #2
 800d0da:	e069      	b.n	800d1b0 <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800d0dc:	2328      	movs	r3, #40	@ 0x28
 800d0de:	18fb      	adds	r3, r7, r3
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	2b21      	cmp	r3, #33	@ 0x21
 800d0e4:	d901      	bls.n	800d0ea <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d0e6:	2305      	movs	r3, #5
 800d0e8:	e062      	b.n	800d1b0 <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800d0ea:	2517      	movs	r5, #23
 800d0ec:	197b      	adds	r3, r7, r5
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800d0f2:	2428      	movs	r4, #40	@ 0x28
 800d0f4:	193b      	adds	r3, r7, r4
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	6879      	ldr	r1, [r7, #4]
 800d0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fe:	0018      	movs	r0, r3
 800d100:	f00b fc32 	bl	8018968 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	1c58      	adds	r0, r3, #1
 800d108:	193b      	adds	r3, r7, r4
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	3b01      	subs	r3, #1
 800d110:	b299      	uxth	r1, r3
 800d112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d114:	1c5c      	adds	r4, r3, #1
 800d116:	197b      	adds	r3, r7, r5
 800d118:	781a      	ldrb	r2, [r3, #0]
 800d11a:	0023      	movs	r3, r4
 800d11c:	f7ff feff 	bl	800cf1e <SecureElementAesEncrypt>
 800d120:	1e03      	subs	r3, r0, #0
 800d122:	d001      	beq.n	800d128 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d124:	2307      	movs	r3, #7
 800d126:	e043      	b.n	800d1b0 <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800d128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12a:	330b      	adds	r3, #11
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	09db      	lsrs	r3, r3, #7
 800d130:	b2da      	uxtb	r2, r3
 800d132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d134:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800d136:	2300      	movs	r3, #0
 800d138:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800d13a:	2128      	movs	r1, #40	@ 0x28
 800d13c:	187b      	adds	r3, r7, r1
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	3b04      	subs	r3, #4
 800d142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d144:	18d3      	adds	r3, r2, r3
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800d14a:	187b      	adds	r3, r7, r1
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	3b03      	subs	r3, #3
 800d150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d152:	18d3      	adds	r3, r2, r3
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	021b      	lsls	r3, r3, #8
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800d15e:	187b      	adds	r3, r7, r1
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	3b02      	subs	r3, #2
 800d164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d166:	18d3      	adds	r3, r2, r3
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	041b      	lsls	r3, r3, #16
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	4313      	orrs	r3, r2
 800d170:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800d172:	187b      	adds	r3, r7, r1
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	3b01      	subs	r3, #1
 800d178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d17a:	18d3      	adds	r3, r2, r3
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	061b      	lsls	r3, r3, #24
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	4313      	orrs	r3, r2
 800d184:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800d186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10d      	bne.n	800d1aa <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800d18e:	187b      	adds	r3, r7, r1
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	b29b      	uxth	r3, r3
 800d194:	3b04      	subs	r3, #4
 800d196:	b299      	uxth	r1, r3
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d19c:	2301      	movs	r3, #1
 800d19e:	f7ff fe7c 	bl	800ce9a <SecureElementVerifyAesCmac>
 800d1a2:	1e03      	subs	r3, r0, #0
 800d1a4:	d003      	beq.n	800d1ae <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e002      	b.n	800d1b0 <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d1aa:	2304      	movs	r3, #4
 800d1ac:	e000      	b.n	800d1b0 <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	b006      	add	sp, #24
 800d1b6:	bdb0      	pop	{r4, r5, r7, pc}

0800d1b8 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d101      	bne.n	800d1ca <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	e006      	b.n	800d1d8 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800d1ca:	4b05      	ldr	r3, [pc, #20]	@ (800d1e0 <SecureElementRandomNumber+0x28>)
 800d1cc:	695b      	ldr	r3, [r3, #20]
 800d1ce:	4798      	blx	r3
 800d1d0:	0002      	movs	r2, r0
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	0018      	movs	r0, r3
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	b002      	add	sp, #8
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	0801e62c 	.word	0x0801e62c

0800d1e4 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d101      	bne.n	800d1f6 <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d1f2:	2302      	movs	r3, #2
 800d1f4:	e009      	b.n	800d20a <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	4b06      	ldr	r3, [pc, #24]	@ (800d214 <SecureElementSetDevEui+0x30>)
 800d1fa:	2208      	movs	r2, #8
 800d1fc:	0018      	movs	r0, r3
 800d1fe:	f00b fbb3 	bl	8018968 <memcpy1>
  SeNvmCtxChanged();
 800d202:	4b05      	ldr	r3, [pc, #20]	@ (800d218 <SecureElementSetDevEui+0x34>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	0018      	movs	r0, r3
 800d20c:	46bd      	mov	sp, r7
 800d20e:	b002      	add	sp, #8
 800d210:	bd80      	pop	{r7, pc}
 800d212:	46c0      	nop			@ (mov r8, r8)
 800d214:	2000007c 	.word	0x2000007c
 800d218:	200007b8 	.word	0x200007b8

0800d21c <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800d220:	4b01      	ldr	r3, [pc, #4]	@ (800d228 <SecureElementGetDevEui+0xc>)
}
 800d222:	0018      	movs	r0, r3
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	2000007c 	.word	0x2000007c

0800d22c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d23a:	2302      	movs	r3, #2
 800d23c:	e009      	b.n	800d252 <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	4b06      	ldr	r3, [pc, #24]	@ (800d25c <SecureElementSetJoinEui+0x30>)
 800d242:	2208      	movs	r2, #8
 800d244:	0018      	movs	r0, r3
 800d246:	f00b fb8f 	bl	8018968 <memcpy1>
  SeNvmCtxChanged();
 800d24a:	4b05      	ldr	r3, [pc, #20]	@ (800d260 <SecureElementSetJoinEui+0x34>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800d250:	2300      	movs	r3, #0
}
 800d252:	0018      	movs	r0, r3
 800d254:	46bd      	mov	sp, r7
 800d256:	b002      	add	sp, #8
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	46c0      	nop			@ (mov r8, r8)
 800d25c:	20000084 	.word	0x20000084
 800d260:	200007b8 	.word	0x200007b8

0800d264 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800d268:	4b01      	ldr	r3, [pc, #4]	@ (800d270 <SecureElementGetJoinEui+0xc>)
}
 800d26a:	0018      	movs	r0, r3
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	20000084 	.word	0x20000084

0800d274 <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	4b17      	ldr	r3, [pc, #92]	@ (800d2dc <LmHandlerInit+0x68>)
 800d280:	2220      	movs	r2, #32
 800d282:	0018      	movs	r0, r3
 800d284:	f00e fb2a 	bl	801b8dc <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d288:	4b15      	ldr	r3, [pc, #84]	@ (800d2e0 <LmHandlerInit+0x6c>)
 800d28a:	4a16      	ldr	r2, [pc, #88]	@ (800d2e4 <LmHandlerInit+0x70>)
 800d28c:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d28e:	4b14      	ldr	r3, [pc, #80]	@ (800d2e0 <LmHandlerInit+0x6c>)
 800d290:	4a15      	ldr	r2, [pc, #84]	@ (800d2e8 <LmHandlerInit+0x74>)
 800d292:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d294:	4b12      	ldr	r3, [pc, #72]	@ (800d2e0 <LmHandlerInit+0x6c>)
 800d296:	4a15      	ldr	r2, [pc, #84]	@ (800d2ec <LmHandlerInit+0x78>)
 800d298:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d29a:	4b11      	ldr	r3, [pc, #68]	@ (800d2e0 <LmHandlerInit+0x6c>)
 800d29c:	4a14      	ldr	r2, [pc, #80]	@ (800d2f0 <LmHandlerInit+0x7c>)
 800d29e:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800d2a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d2dc <LmHandlerInit+0x68>)
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	4b13      	ldr	r3, [pc, #76]	@ (800d2f4 <LmHandlerInit+0x80>)
 800d2a6:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800d2a8:	4b0c      	ldr	r3, [pc, #48]	@ (800d2dc <LmHandlerInit+0x68>)
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	4b11      	ldr	r3, [pc, #68]	@ (800d2f4 <LmHandlerInit+0x80>)
 800d2ae:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800d2b0:	4b10      	ldr	r3, [pc, #64]	@ (800d2f4 <LmHandlerInit+0x80>)
 800d2b2:	4a11      	ldr	r2, [pc, #68]	@ (800d2f8 <LmHandlerInit+0x84>)
 800d2b4:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800d2b6:	4b09      	ldr	r3, [pc, #36]	@ (800d2dc <LmHandlerInit+0x68>)
 800d2b8:	689a      	ldr	r2, [r3, #8]
 800d2ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f4 <LmHandlerInit+0x80>)
 800d2bc:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d2be:	4b0f      	ldr	r3, [pc, #60]	@ (800d2fc <LmHandlerInit+0x88>)
 800d2c0:	0019      	movs	r1, r3
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	f000 fb4a 	bl	800d95c <LmHandlerPackageRegister>
 800d2c8:	1e03      	subs	r3, r0, #0
 800d2ca:	d002      	beq.n	800d2d2 <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	425b      	negs	r3, r3
 800d2d0:	e000      	b.n	800d2d4 <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	b002      	add	sp, #8
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	200009dc 	.word	0x200009dc
 800d2e0:	200009fc 	.word	0x200009fc
 800d2e4:	0800dac9 	.word	0x0800dac9
 800d2e8:	0800db35 	.word	0x0800db35
 800d2ec:	0800dc21 	.word	0x0800dc21
 800d2f0:	0800dcc9 	.word	0x0800dcc9
 800d2f4:	20000a0c 	.word	0x20000a0c
 800d2f8:	0800e463 	.word	0x0800e463
 800d2fc:	20000150 	.word	0x20000150

0800d300 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800d300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d302:	46ce      	mov	lr, r9
 800d304:	4647      	mov	r7, r8
 800d306:	b580      	push	{r7, lr}
 800d308:	b099      	sub	sp, #100	@ 0x64
 800d30a:	af08      	add	r7, sp, #32
 800d30c:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d30e:	6879      	ldr	r1, [r7, #4]
 800d310:	4b67      	ldr	r3, [pc, #412]	@ (800d4b0 <LmHandlerConfigure+0x1b0>)
 800d312:	2206      	movs	r2, #6
 800d314:	0018      	movs	r0, r3
 800d316:	f00e fae1 	bl	801b8dc <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800d31a:	f7f5 ffeb 	bl	80032f4 <LoraInfo_GetPtr>
 800d31e:	0003      	movs	r3, r0
 800d320:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d322:	4b63      	ldr	r3, [pc, #396]	@ (800d4b0 <LmHandlerConfigure+0x1b0>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	001a      	movs	r2, r3
 800d328:	2301      	movs	r3, #1
 800d32a:	4093      	lsls	r3, r2
 800d32c:	001a      	movs	r2, r3
 800d32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	4013      	ands	r3, r2
 800d334:	d00b      	beq.n	800d34e <LmHandlerConfigure+0x4e>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d336:	4b5e      	ldr	r3, [pc, #376]	@ (800d4b0 <LmHandlerConfigure+0x1b0>)
 800d338:	781a      	ldrb	r2, [r3, #0]
 800d33a:	495e      	ldr	r1, [pc, #376]	@ (800d4b4 <LmHandlerConfigure+0x1b4>)
 800d33c:	4b5e      	ldr	r3, [pc, #376]	@ (800d4b8 <LmHandlerConfigure+0x1b8>)
 800d33e:	0018      	movs	r0, r3
 800d340:	f004 ffb6 	bl	80122b0 <LoRaMacInitialization>
 800d344:	1e03      	subs	r3, r0, #0
 800d346:	d00a      	beq.n	800d35e <LmHandlerConfigure+0x5e>
    {
      return LORAMAC_HANDLER_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	425b      	negs	r3, r3
 800d34c:	e0a8      	b.n	800d4a0 <LmHandlerConfigure+0x1a0>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d34e:	4b5b      	ldr	r3, [pc, #364]	@ (800d4bc <LmHandlerConfigure+0x1bc>)
 800d350:	2201      	movs	r2, #1
 800d352:	2100      	movs	r1, #0
 800d354:	2000      	movs	r0, #0
 800d356:	f00d ff41 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800d35a:	46c0      	nop			@ (mov r8, r8)
 800d35c:	e7fd      	b.n	800d35a <LmHandlerConfigure+0x5a>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800d35e:	f001 f890 	bl	800e482 <NvmCtxMgmtRestore>
 800d362:	1e03      	subs	r3, r0, #0
 800d364:	d103      	bne.n	800d36e <LmHandlerConfigure+0x6e>
  {
    CtxRestoreDone = true;
 800d366:	4b56      	ldr	r3, [pc, #344]	@ (800d4c0 <LmHandlerConfigure+0x1c0>)
 800d368:	2201      	movs	r2, #1
 800d36a:	701a      	strb	r2, [r3, #0]
 800d36c:	e021      	b.n	800d3b2 <LmHandlerConfigure+0xb2>
  }
  else
  {
    CtxRestoreDone = false;
 800d36e:	4b54      	ldr	r3, [pc, #336]	@ (800d4c0 <LmHandlerConfigure+0x1c0>)
 800d370:	2200      	movs	r2, #0
 800d372:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800d374:	2418      	movs	r4, #24
 800d376:	193b      	adds	r3, r7, r4
 800d378:	2202      	movs	r2, #2
 800d37a:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800d37c:	193b      	adds	r3, r7, r4
 800d37e:	0018      	movs	r0, r3
 800d380:	f005 fbf8 	bl	8012b74 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800d384:	193b      	adds	r3, r7, r4
 800d386:	6859      	ldr	r1, [r3, #4]
 800d388:	4b4e      	ldr	r3, [pc, #312]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d38a:	2208      	movs	r2, #8
 800d38c:	0018      	movs	r0, r3
 800d38e:	f00b faeb 	bl	8018968 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d392:	0021      	movs	r1, r4
 800d394:	187b      	adds	r3, r7, r1
 800d396:	2203      	movs	r2, #3
 800d398:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800d39a:	000c      	movs	r4, r1
 800d39c:	187b      	adds	r3, r7, r1
 800d39e:	0018      	movs	r0, r3
 800d3a0:	f005 fbe8 	bl	8012b74 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800d3a4:	193b      	adds	r3, r7, r4
 800d3a6:	6859      	ldr	r1, [r3, #4]
 800d3a8:	4b47      	ldr	r3, [pc, #284]	@ (800d4c8 <LmHandlerConfigure+0x1c8>)
 800d3aa:	2208      	movs	r2, #8
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f00b fadb 	bl	8018968 <memcpy1>
  }
  MW_LOG(TS_OFF, VLEVEL_M, "# DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800d3b2:	4b44      	ldr	r3, [pc, #272]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	001a      	movs	r2, r3
 800d3b8:	4b42      	ldr	r3, [pc, #264]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d3ba:	785b      	ldrb	r3, [r3, #1]
 800d3bc:	0019      	movs	r1, r3
 800d3be:	4b41      	ldr	r3, [pc, #260]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d3c0:	789b      	ldrb	r3, [r3, #2]
 800d3c2:	0018      	movs	r0, r3
 800d3c4:	4b3f      	ldr	r3, [pc, #252]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d3c6:	78db      	ldrb	r3, [r3, #3]
 800d3c8:	001c      	movs	r4, r3
 800d3ca:	4b3e      	ldr	r3, [pc, #248]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d3cc:	791b      	ldrb	r3, [r3, #4]
 800d3ce:	001d      	movs	r5, r3
 800d3d0:	4b3c      	ldr	r3, [pc, #240]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d3d2:	795b      	ldrb	r3, [r3, #5]
 800d3d4:	001e      	movs	r6, r3
 800d3d6:	4b3b      	ldr	r3, [pc, #236]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d3d8:	799b      	ldrb	r3, [r3, #6]
 800d3da:	469c      	mov	ip, r3
 800d3dc:	4b39      	ldr	r3, [pc, #228]	@ (800d4c4 <LmHandlerConfigure+0x1c4>)
 800d3de:	79db      	ldrb	r3, [r3, #7]
 800d3e0:	4698      	mov	r8, r3
 800d3e2:	4b3a      	ldr	r3, [pc, #232]	@ (800d4cc <LmHandlerConfigure+0x1cc>)
 800d3e4:	4699      	mov	r9, r3
 800d3e6:	4643      	mov	r3, r8
 800d3e8:	9307      	str	r3, [sp, #28]
 800d3ea:	4663      	mov	r3, ip
 800d3ec:	9306      	str	r3, [sp, #24]
 800d3ee:	9605      	str	r6, [sp, #20]
 800d3f0:	9504      	str	r5, [sp, #16]
 800d3f2:	9403      	str	r4, [sp, #12]
 800d3f4:	9002      	str	r0, [sp, #8]
 800d3f6:	9101      	str	r1, [sp, #4]
 800d3f8:	9200      	str	r2, [sp, #0]
 800d3fa:	464b      	mov	r3, r9
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	2100      	movs	r1, #0
 800d400:	2002      	movs	r0, #2
 800d402:	f00d feeb 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "## KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800d406:	2118      	movs	r1, #24
 800d408:	187b      	adds	r3, r7, r1
 800d40a:	2214      	movs	r2, #20
 800d40c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d40e:	187b      	adds	r3, r7, r1
 800d410:	2201      	movs	r2, #1
 800d412:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d414:	000c      	movs	r4, r1
 800d416:	187b      	adds	r3, r7, r1
 800d418:	0018      	movs	r0, r3
 800d41a:	f005 fd09 	bl	8012e30 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800d41e:	0021      	movs	r1, r4
 800d420:	187b      	adds	r3, r7, r1
 800d422:	2215      	movs	r2, #21
 800d424:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d426:	187b      	adds	r3, r7, r1
 800d428:	2200      	movs	r2, #0
 800d42a:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d42c:	000c      	movs	r4, r1
 800d42e:	187b      	adds	r3, r7, r1
 800d430:	0018      	movs	r0, r3
 800d432:	f005 fcfd 	bl	8012e30 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800d436:	0021      	movs	r1, r4
 800d438:	187b      	adds	r3, r7, r1
 800d43a:	2204      	movs	r2, #4
 800d43c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d43e:	4b1c      	ldr	r3, [pc, #112]	@ (800d4b0 <LmHandlerConfigure+0x1b0>)
 800d440:	789a      	ldrb	r2, [r3, #2]
 800d442:	187b      	adds	r3, r7, r1
 800d444:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d446:	000c      	movs	r4, r1
 800d448:	187b      	adds	r3, r7, r1
 800d44a:	0018      	movs	r0, r3
 800d44c:	f005 fcf0 	bl	8012e30 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d450:	0021      	movs	r1, r4
 800d452:	187b      	adds	r3, r7, r1
 800d454:	2227      	movs	r2, #39	@ 0x27
 800d456:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800d458:	187b      	adds	r3, r7, r1
 800d45a:	2214      	movs	r2, #20
 800d45c:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d45e:	187b      	adds	r3, r7, r1
 800d460:	0018      	movs	r0, r3
 800d462:	f005 fce5 	bl	8012e30 <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800d466:	2110      	movs	r1, #16
 800d468:	187b      	adds	r3, r7, r1
 800d46a:	220f      	movs	r2, #15
 800d46c:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800d46e:	4b10      	ldr	r3, [pc, #64]	@ (800d4b0 <LmHandlerConfigure+0x1b0>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	187a      	adds	r2, r7, r1
 800d474:	0011      	movs	r1, r2
 800d476:	0018      	movs	r0, r3
 800d478:	f008 fdf3 	bl	8016062 <RegionGetPhyParam>
 800d47c:	0003      	movs	r3, r0
 800d47e:	001a      	movs	r2, r3
 800d480:	210c      	movs	r1, #12
 800d482:	187b      	adds	r3, r7, r1
 800d484:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d486:	187b      	adds	r3, r7, r1
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	1e5a      	subs	r2, r3, #1
 800d48c:	4193      	sbcs	r3, r2
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	4b07      	ldr	r3, [pc, #28]	@ (800d4b0 <LmHandlerConfigure+0x1b0>)
 800d492:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800d494:	4b06      	ldr	r3, [pc, #24]	@ (800d4b0 <LmHandlerConfigure+0x1b0>)
 800d496:	791b      	ldrb	r3, [r3, #4]
 800d498:	0018      	movs	r0, r3
 800d49a:	f006 faf5 	bl	8013a88 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	b011      	add	sp, #68	@ 0x44
 800d4a6:	bcc0      	pop	{r6, r7}
 800d4a8:	46b9      	mov	r9, r7
 800d4aa:	46b0      	mov	r8, r6
 800d4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ae:	46c0      	nop			@ (mov r8, r8)
 800d4b0:	200009d4 	.word	0x200009d4
 800d4b4:	20000a0c 	.word	0x20000a0c
 800d4b8:	200009fc 	.word	0x200009fc
 800d4bc:	0801e008 	.word	0x0801e008
 800d4c0:	20000b26 	.word	0x20000b26
 800d4c4:	20000138 	.word	0x20000138
 800d4c8:	20000140 	.word	0x20000140
 800d4cc:	0801e054 	.word	0x0801e054

0800d4d0 <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800d4d6:	f004 fea5 	bl	8012224 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800d4da:	1dfb      	adds	r3, r7, #7
 800d4dc:	2200      	movs	r2, #0
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	e027      	b.n	800d532 <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800d4e2:	1dfb      	adds	r3, r7, #7
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	569a      	ldrsb	r2, [r3, r2]
 800d4e8:	4b17      	ldr	r3, [pc, #92]	@ (800d548 <LmHandlerProcess+0x78>)
 800d4ea:	0092      	lsls	r2, r2, #2
 800d4ec:	58d3      	ldr	r3, [r2, r3]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d017      	beq.n	800d522 <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800d4f2:	1dfb      	adds	r3, r7, #7
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	569a      	ldrsb	r2, [r3, r2]
 800d4f8:	4b13      	ldr	r3, [pc, #76]	@ (800d548 <LmHandlerProcess+0x78>)
 800d4fa:	0092      	lsls	r2, r2, #2
 800d4fc:	58d3      	ldr	r3, [r2, r3]
 800d4fe:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00e      	beq.n	800d522 <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800d504:	1dfb      	adds	r3, r7, #7
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	0018      	movs	r0, r3
 800d50a:	f000 fbef 	bl	800dcec <LmHandlerPackageIsInitialized>
 800d50e:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800d510:	d007      	beq.n	800d522 <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800d512:	1dfb      	adds	r3, r7, #7
 800d514:	2200      	movs	r2, #0
 800d516:	569a      	ldrsb	r2, [r3, r2]
 800d518:	4b0b      	ldr	r3, [pc, #44]	@ (800d548 <LmHandlerProcess+0x78>)
 800d51a:	0092      	lsls	r2, r2, #2
 800d51c:	58d3      	ldr	r3, [r2, r3]
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800d522:	1dfb      	adds	r3, r7, #7
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	b25b      	sxtb	r3, r3
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	3301      	adds	r3, #1
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	1dfb      	adds	r3, r7, #7
 800d530:	701a      	strb	r2, [r3, #0]
 800d532:	1dfb      	adds	r3, r7, #7
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	b25b      	sxtb	r3, r3
 800d538:	2b04      	cmp	r3, #4
 800d53a:	ddd2      	ble.n	800d4e2 <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800d53c:	f000 ff9b 	bl	800e476 <NvmCtxMgmtStore>
}
 800d540:	46c0      	nop			@ (mov r8, r8)
 800d542:	46bd      	mov	sp, r7
 800d544:	b002      	add	sp, #8
 800d546:	bd80      	pop	{r7, pc}
 800d548:	200009c0 	.word	0x200009c0

0800d54c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800d54c:	b5b0      	push	{r4, r5, r7, lr}
 800d54e:	b08a      	sub	sp, #40	@ 0x28
 800d550:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d552:	003b      	movs	r3, r7
 800d554:	2201      	movs	r2, #1
 800d556:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800d558:	2527      	movs	r5, #39	@ 0x27
 800d55a:	197c      	adds	r4, r7, r5
 800d55c:	003b      	movs	r3, r7
 800d55e:	0018      	movs	r0, r3
 800d560:	f005 fb08 	bl	8012b74 <LoRaMacMibGetRequestConfirm>
 800d564:	0003      	movs	r3, r0
 800d566:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800d568:	197b      	adds	r3, r7, r5
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d107      	bne.n	800d580 <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800d570:	003b      	movs	r3, r7
 800d572:	791b      	ldrb	r3, [r3, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d101      	bne.n	800d57c <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800d578:	2300      	movs	r3, #0
 800d57a:	e002      	b.n	800d582 <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e000      	b.n	800d582 <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800d580:	2300      	movs	r3, #0
  }
}
 800d582:	0018      	movs	r0, r3
 800d584:	46bd      	mov	sp, r7
 800d586:	b00a      	add	sp, #40	@ 0x28
 800d588:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d58c <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800d58c:	b590      	push	{r4, r7, lr}
 800d58e:	b093      	sub	sp, #76	@ 0x4c
 800d590:	af02      	add	r7, sp, #8
 800d592:	0002      	movs	r2, r0
 800d594:	1dfb      	adds	r3, r7, #7
 800d596:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800d598:	1dfb      	adds	r3, r7, #7
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d113      	bne.n	800d5c8 <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d5a0:	4b37      	ldr	r3, [pc, #220]	@ (800d680 <LmHandlerJoin+0xf4>)
 800d5a2:	2202      	movs	r2, #2
 800d5a4:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800d5a6:	f005 fa2b 	bl	8012a00 <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800d5aa:	2108      	movs	r1, #8
 800d5ac:	187b      	adds	r3, r7, r1
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d5b2:	4b34      	ldr	r3, [pc, #208]	@ (800d684 <LmHandlerJoin+0xf8>)
 800d5b4:	78db      	ldrb	r3, [r3, #3]
 800d5b6:	b25b      	sxtb	r3, r3
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	187b      	adds	r3, r7, r1
 800d5bc:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800d5be:	187b      	adds	r3, r7, r1
 800d5c0:	0018      	movs	r0, r3
 800d5c2:	f005 ffbb 	bl	801353c <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800d5c6:	e057      	b.n	800d678 <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d5c8:	4b2d      	ldr	r3, [pc, #180]	@ (800d680 <LmHandlerJoin+0xf4>)
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d5ce:	4b2c      	ldr	r3, [pc, #176]	@ (800d680 <LmHandlerJoin+0xf4>)
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800d5d4:	4b2c      	ldr	r3, [pc, #176]	@ (800d688 <LmHandlerJoin+0xfc>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	4053      	eors	r3, r2
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d033      	beq.n	800d64a <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d5e2:	211c      	movs	r1, #28
 800d5e4:	187b      	adds	r3, r7, r1
 800d5e6:	222c      	movs	r2, #44	@ 0x2c
 800d5e8:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d5ea:	187b      	adds	r3, r7, r1
 800d5ec:	4a27      	ldr	r2, [pc, #156]	@ (800d68c <LmHandlerJoin+0x100>)
 800d5ee:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d5f0:	000c      	movs	r4, r1
 800d5f2:	187b      	adds	r3, r7, r1
 800d5f4:	0018      	movs	r0, r3
 800d5f6:	f005 fc1b 	bl	8012e30 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800d5fa:	0021      	movs	r1, r4
 800d5fc:	187b      	adds	r3, r7, r1
 800d5fe:	2205      	movs	r2, #5
 800d600:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800d602:	4b23      	ldr	r3, [pc, #140]	@ (800d690 <LmHandlerJoin+0x104>)
 800d604:	691a      	ldr	r2, [r3, #16]
 800d606:	187b      	adds	r3, r7, r1
 800d608:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d60a:	000c      	movs	r4, r1
 800d60c:	187b      	adds	r3, r7, r1
 800d60e:	0018      	movs	r0, r3
 800d610:	f005 fc0e 	bl	8012e30 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800d614:	f7f7 f852 	bl	80046bc <GetDevAddr>
 800d618:	0002      	movs	r2, r0
 800d61a:	4b1d      	ldr	r3, [pc, #116]	@ (800d690 <LmHandlerJoin+0x104>)
 800d61c:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800d61e:	0021      	movs	r1, r4
 800d620:	187b      	adds	r3, r7, r1
 800d622:	2206      	movs	r2, #6
 800d624:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d626:	4b1a      	ldr	r3, [pc, #104]	@ (800d690 <LmHandlerJoin+0x104>)
 800d628:	695a      	ldr	r2, [r3, #20]
 800d62a:	187b      	adds	r3, r7, r1
 800d62c:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d62e:	187b      	adds	r3, r7, r1
 800d630:	0018      	movs	r0, r3
 800d632:	f005 fbfd 	bl	8012e30 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "# DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800d636:	4b16      	ldr	r3, [pc, #88]	@ (800d690 <LmHandlerJoin+0x104>)
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	4a16      	ldr	r2, [pc, #88]	@ (800d694 <LmHandlerJoin+0x108>)
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	0013      	movs	r3, r2
 800d640:	2200      	movs	r2, #0
 800d642:	2100      	movs	r1, #0
 800d644:	2002      	movs	r0, #2
 800d646:	f00d fdc9 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800d64a:	f005 f9d9 	bl	8012a00 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d64e:	211c      	movs	r1, #28
 800d650:	187b      	adds	r3, r7, r1
 800d652:	2201      	movs	r2, #1
 800d654:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d656:	187b      	adds	r3, r7, r1
 800d658:	2201      	movs	r2, #1
 800d65a:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d65c:	187b      	adds	r3, r7, r1
 800d65e:	0018      	movs	r0, r3
 800d660:	f005 fbe6 	bl	8012e30 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800d664:	4b0c      	ldr	r3, [pc, #48]	@ (800d698 <LmHandlerJoin+0x10c>)
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	4a05      	ldr	r2, [pc, #20]	@ (800d680 <LmHandlerJoin+0xf4>)
 800d66a:	0010      	movs	r0, r2
 800d66c:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d66e:	4b05      	ldr	r3, [pc, #20]	@ (800d684 <LmHandlerJoin+0xf8>)
 800d670:	785b      	ldrb	r3, [r3, #1]
 800d672:	0018      	movs	r0, r3
 800d674:	f000 f8e4 	bl	800d840 <LmHandlerRequestClass>
}
 800d678:	46c0      	nop			@ (mov r8, r8)
 800d67a:	46bd      	mov	sp, r7
 800d67c:	b011      	add	sp, #68	@ 0x44
 800d67e:	bd90      	pop	{r4, r7, pc}
 800d680:	2000015c 	.word	0x2000015c
 800d684:	200009d4 	.word	0x200009d4
 800d688:	20000b26 	.word	0x20000b26
 800d68c:	01000300 	.word	0x01000300
 800d690:	20000138 	.word	0x20000138
 800d694:	0801e08c 	.word	0x0801e08c
 800d698:	200009dc 	.word	0x200009dc

0800d69c <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800d69c:	b5b0      	push	{r4, r5, r7, lr}
 800d69e:	b08c      	sub	sp, #48	@ 0x30
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	0008      	movs	r0, r1
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	0019      	movs	r1, r3
 800d6aa:	230b      	movs	r3, #11
 800d6ac:	18fb      	adds	r3, r7, r3
 800d6ae:	1c02      	adds	r2, r0, #0
 800d6b0:	701a      	strb	r2, [r3, #0]
 800d6b2:	230a      	movs	r3, #10
 800d6b4:	18fb      	adds	r3, r7, r3
 800d6b6:	1c0a      	adds	r2, r1, #0
 800d6b8:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d6ba:	232f      	movs	r3, #47	@ 0x2f
 800d6bc:	18fb      	adds	r3, r7, r3
 800d6be:	22ff      	movs	r2, #255	@ 0xff
 800d6c0:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800d6c2:	f004 fd97 	bl	80121f4 <LoRaMacIsBusy>
 800d6c6:	1e03      	subs	r3, r0, #0
 800d6c8:	d002      	beq.n	800d6d0 <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800d6ca:	2302      	movs	r3, #2
 800d6cc:	425b      	negs	r3, r3
 800d6ce:	e0a9      	b.n	800d824 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d6d0:	f7ff ff3c 	bl	800d54c <LmHandlerJoinStatus>
 800d6d4:	0003      	movs	r3, r0
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d007      	beq.n	800d6ea <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800d6da:	4b54      	ldr	r3, [pc, #336]	@ (800d82c <LmHandlerSend+0x190>)
 800d6dc:	789b      	ldrb	r3, [r3, #2]
 800d6de:	0018      	movs	r0, r3
 800d6e0:	f7ff ff54 	bl	800d58c <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	425b      	negs	r3, r3
 800d6e8:	e09c      	b.n	800d824 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800d6ea:	4b51      	ldr	r3, [pc, #324]	@ (800d830 <LmHandlerSend+0x194>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	4798      	blx	r3
 800d6f2:	1e03      	subs	r3, r0, #0
 800d6f4:	d00d      	beq.n	800d712 <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	781a      	ldrb	r2, [r3, #0]
 800d6fa:	4b4d      	ldr	r3, [pc, #308]	@ (800d830 <LmHandlerSend+0x194>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	429a      	cmp	r2, r3
 800d702:	d006      	beq.n	800d712 <LmHandlerSend+0x76>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d002      	beq.n	800d712 <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800d70c:	2304      	movs	r3, #4
 800d70e:	425b      	negs	r3, r3
 800d710:	e088      	b.n	800d824 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d712:	4b48      	ldr	r3, [pc, #288]	@ (800d834 <LmHandlerSend+0x198>)
 800d714:	2203      	movs	r2, #3
 800d716:	569a      	ldrsb	r2, [r3, r2]
 800d718:	2418      	movs	r4, #24
 800d71a:	193b      	adds	r3, r7, r4
 800d71c:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	785b      	ldrb	r3, [r3, #1]
 800d722:	2214      	movs	r2, #20
 800d724:	18ba      	adds	r2, r7, r2
 800d726:	0011      	movs	r1, r2
 800d728:	0018      	movs	r0, r3
 800d72a:	f005 f977 	bl	8012a1c <LoRaMacQueryTxPossible>
 800d72e:	1e03      	subs	r3, r0, #0
 800d730:	d00c      	beq.n	800d74c <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d732:	4b41      	ldr	r3, [pc, #260]	@ (800d838 <LmHandlerSend+0x19c>)
 800d734:	2200      	movs	r2, #0
 800d736:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800d738:	193b      	adds	r3, r7, r4
 800d73a:	2200      	movs	r2, #0
 800d73c:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d73e:	193b      	adds	r3, r7, r4
 800d740:	2200      	movs	r2, #0
 800d742:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d744:	193b      	adds	r3, r7, r4
 800d746:	2200      	movs	r2, #0
 800d748:	819a      	strh	r2, [r3, #12]
 800d74a:	e021      	b.n	800d790 <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800d74c:	4b3a      	ldr	r3, [pc, #232]	@ (800d838 <LmHandlerSend+0x19c>)
 800d74e:	200b      	movs	r0, #11
 800d750:	183a      	adds	r2, r7, r0
 800d752:	7812      	ldrb	r2, [r2, #0]
 800d754:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	781a      	ldrb	r2, [r3, #0]
 800d75a:	2118      	movs	r1, #24
 800d75c:	187b      	adds	r3, r7, r1
 800d75e:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	785b      	ldrb	r3, [r3, #1]
 800d764:	001a      	movs	r2, r3
 800d766:	187b      	adds	r3, r7, r1
 800d768:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	187b      	adds	r3, r7, r1
 800d770:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800d772:	183b      	adds	r3, r7, r0
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d103      	bne.n	800d782 <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800d77a:	187b      	adds	r3, r7, r1
 800d77c:	2200      	movs	r2, #0
 800d77e:	701a      	strb	r2, [r3, #0]
 800d780:	e006      	b.n	800d790 <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800d782:	2118      	movs	r1, #24
 800d784:	187b      	adds	r3, r7, r1
 800d786:	2201      	movs	r2, #1
 800d788:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800d78a:	187b      	adds	r3, r7, r1
 800d78c:	2208      	movs	r2, #8
 800d78e:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800d790:	4b29      	ldr	r3, [pc, #164]	@ (800d838 <LmHandlerSend+0x19c>)
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	330c      	adds	r3, #12
 800d796:	ca03      	ldmia	r2!, {r0, r1}
 800d798:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d79a:	4b26      	ldr	r3, [pc, #152]	@ (800d834 <LmHandlerSend+0x198>)
 800d79c:	2203      	movs	r2, #3
 800d79e:	569a      	ldrsb	r2, [r3, r2]
 800d7a0:	4b25      	ldr	r3, [pc, #148]	@ (800d838 <LmHandlerSend+0x19c>)
 800d7a2:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d7a4:	232e      	movs	r3, #46	@ 0x2e
 800d7a6:	18fc      	adds	r4, r7, r3
 800d7a8:	230a      	movs	r3, #10
 800d7aa:	18fb      	adds	r3, r7, r3
 800d7ac:	781a      	ldrb	r2, [r3, #0]
 800d7ae:	2518      	movs	r5, #24
 800d7b0:	197b      	adds	r3, r7, r5
 800d7b2:	0011      	movs	r1, r2
 800d7b4:	0018      	movs	r0, r3
 800d7b6:	f006 f819 	bl	80137ec <LoRaMacMcpsRequest>
 800d7ba:	0003      	movs	r3, r0
 800d7bc:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d003      	beq.n	800d7cc <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d7c4:	197b      	adds	r3, r7, r5
 800d7c6:	691a      	ldr	r2, [r3, #16]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800d7cc:	232e      	movs	r3, #46	@ 0x2e
 800d7ce:	18fb      	adds	r3, r7, r3
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2b11      	cmp	r3, #17
 800d7d4:	d81d      	bhi.n	800d812 <LmHandlerSend+0x176>
 800d7d6:	009a      	lsls	r2, r3, #2
 800d7d8:	4b18      	ldr	r3, [pc, #96]	@ (800d83c <LmHandlerSend+0x1a0>)
 800d7da:	18d3      	adds	r3, r2, r3
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d7e0:	232f      	movs	r3, #47	@ 0x2f
 800d7e2:	18fb      	adds	r3, r7, r3
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	701a      	strb	r2, [r3, #0]
    break;
 800d7e8:	e018      	b.n	800d81c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d7ea:	232f      	movs	r3, #47	@ 0x2f
 800d7ec:	18fb      	adds	r3, r7, r3
 800d7ee:	22fe      	movs	r2, #254	@ 0xfe
 800d7f0:	701a      	strb	r2, [r3, #0]
    break;
 800d7f2:	e013      	b.n	800d81c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d7f4:	232f      	movs	r3, #47	@ 0x2f
 800d7f6:	18fb      	adds	r3, r7, r3
 800d7f8:	22fd      	movs	r2, #253	@ 0xfd
 800d7fa:	701a      	strb	r2, [r3, #0]
    break;
 800d7fc:	e00e      	b.n	800d81c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d7fe:	232f      	movs	r3, #47	@ 0x2f
 800d800:	18fb      	adds	r3, r7, r3
 800d802:	22fb      	movs	r2, #251	@ 0xfb
 800d804:	701a      	strb	r2, [r3, #0]
    break;
 800d806:	e009      	b.n	800d81c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d808:	232f      	movs	r3, #47	@ 0x2f
 800d80a:	18fb      	adds	r3, r7, r3
 800d80c:	22fa      	movs	r2, #250	@ 0xfa
 800d80e:	701a      	strb	r2, [r3, #0]
    break;
 800d810:	e004      	b.n	800d81c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800d812:	232f      	movs	r3, #47	@ 0x2f
 800d814:	18fb      	adds	r3, r7, r3
 800d816:	22ff      	movs	r2, #255	@ 0xff
 800d818:	701a      	strb	r2, [r3, #0]
    break;
 800d81a:	46c0      	nop			@ (mov r8, r8)
  }
      
  return lmhStatus;
 800d81c:	232f      	movs	r3, #47	@ 0x2f
 800d81e:	18fb      	adds	r3, r7, r3
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	b25b      	sxtb	r3, r3
}
 800d824:	0018      	movs	r0, r3
 800d826:	46bd      	mov	sp, r7
 800d828:	b00c      	add	sp, #48	@ 0x30
 800d82a:	bdb0      	pop	{r4, r5, r7, pc}
 800d82c:	2000015c 	.word	0x2000015c
 800d830:	200009c0 	.word	0x200009c0
 800d834:	200009d4 	.word	0x200009d4
 800d838:	20000a1c 	.word	0x20000a1c
 800d83c:	0801e0a0 	.word	0x0801e0a0

0800d840 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08c      	sub	sp, #48	@ 0x30
 800d844:	af00      	add	r7, sp, #0
 800d846:	0002      	movs	r2, r0
 800d848:	1dfb      	adds	r3, r7, #7
 800d84a:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d84c:	232f      	movs	r3, #47	@ 0x2f
 800d84e:	18fb      	adds	r3, r7, r3
 800d850:	2200      	movs	r2, #0
 800d852:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d854:	f7ff fe7a 	bl	800d54c <LmHandlerJoinStatus>
 800d858:	0003      	movs	r3, r0
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d002      	beq.n	800d864 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d85e:	2303      	movs	r3, #3
 800d860:	425b      	negs	r3, r3
 800d862:	e075      	b.n	800d950 <LmHandlerRequestClass+0x110>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800d864:	2108      	movs	r1, #8
 800d866:	187b      	adds	r3, r7, r1
 800d868:	2200      	movs	r2, #0
 800d86a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800d86c:	187b      	adds	r3, r7, r1
 800d86e:	0018      	movs	r0, r3
 800d870:	f005 f980 	bl	8012b74 <LoRaMacMibGetRequestConfirm>
 800d874:	1e03      	subs	r3, r0, #0
 800d876:	d002      	beq.n	800d87e <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	425b      	negs	r3, r3
 800d87c:	e068      	b.n	800d950 <LmHandlerRequestClass+0x110>
  }
  currentClass = mibReq.Param.Class;
 800d87e:	212e      	movs	r1, #46	@ 0x2e
 800d880:	187b      	adds	r3, r7, r1
 800d882:	2208      	movs	r2, #8
 800d884:	18ba      	adds	r2, r7, r2
 800d886:	7912      	ldrb	r2, [r2, #4]
 800d888:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800d88a:	187a      	adds	r2, r7, r1
 800d88c:	1dfb      	adds	r3, r7, #7
 800d88e:	7812      	ldrb	r2, [r2, #0]
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	429a      	cmp	r2, r3
 800d894:	d058      	beq.n	800d948 <LmHandlerRequestClass+0x108>
  {
    switch (newClass)
 800d896:	1dfb      	adds	r3, r7, #7
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d02a      	beq.n	800d8f4 <LmHandlerRequestClass+0xb4>
 800d89e:	dc4e      	bgt.n	800d93e <LmHandlerRequestClass+0xfe>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <LmHandlerRequestClass+0x6a>
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d020      	beq.n	800d8ea <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800d8a8:	e049      	b.n	800d93e <LmHandlerRequestClass+0xfe>
        if (currentClass != CLASS_A)
 800d8aa:	232e      	movs	r3, #46	@ 0x2e
 800d8ac:	18fb      	adds	r3, r7, r3
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d046      	beq.n	800d942 <LmHandlerRequestClass+0x102>
          mibReq.Param.Class = CLASS_A;
 800d8b4:	2108      	movs	r1, #8
 800d8b6:	187b      	adds	r3, r7, r1
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800d8bc:	187b      	adds	r3, r7, r1
 800d8be:	0018      	movs	r0, r3
 800d8c0:	f005 fab6 	bl	8012e30 <LoRaMacMibSetRequestConfirm>
 800d8c4:	1e03      	subs	r3, r0, #0
 800d8c6:	d10b      	bne.n	800d8e0 <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	f000 fac5 	bl	800de58 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800d8ce:	4b22      	ldr	r3, [pc, #136]	@ (800d958 <LmHandlerRequestClass+0x118>)
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d035      	beq.n	800d942 <LmHandlerRequestClass+0x102>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800d8d6:	4b20      	ldr	r3, [pc, #128]	@ (800d958 <LmHandlerRequestClass+0x118>)
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	2000      	movs	r0, #0
 800d8dc:	4798      	blx	r3
      break;
 800d8de:	e030      	b.n	800d942 <LmHandlerRequestClass+0x102>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800d8e0:	232f      	movs	r3, #47	@ 0x2f
 800d8e2:	18fb      	adds	r3, r7, r3
 800d8e4:	22ff      	movs	r2, #255	@ 0xff
 800d8e6:	701a      	strb	r2, [r3, #0]
      break;
 800d8e8:	e02b      	b.n	800d942 <LmHandlerRequestClass+0x102>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800d8ea:	232f      	movs	r3, #47	@ 0x2f
 800d8ec:	18fb      	adds	r3, r7, r3
 800d8ee:	22ff      	movs	r2, #255	@ 0xff
 800d8f0:	701a      	strb	r2, [r3, #0]
      break;
 800d8f2:	e029      	b.n	800d948 <LmHandlerRequestClass+0x108>
        if (currentClass != CLASS_A)
 800d8f4:	232e      	movs	r3, #46	@ 0x2e
 800d8f6:	18fb      	adds	r3, r7, r3
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d004      	beq.n	800d908 <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800d8fe:	232f      	movs	r3, #47	@ 0x2f
 800d900:	18fb      	adds	r3, r7, r3
 800d902:	22ff      	movs	r2, #255	@ 0xff
 800d904:	701a      	strb	r2, [r3, #0]
      break;
 800d906:	e01e      	b.n	800d946 <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_C;
 800d908:	2108      	movs	r1, #8
 800d90a:	187b      	adds	r3, r7, r1
 800d90c:	2202      	movs	r2, #2
 800d90e:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800d910:	187b      	adds	r3, r7, r1
 800d912:	0018      	movs	r0, r3
 800d914:	f005 fa8c 	bl	8012e30 <LoRaMacMibSetRequestConfirm>
 800d918:	1e03      	subs	r3, r0, #0
 800d91a:	d10b      	bne.n	800d934 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800d91c:	2002      	movs	r0, #2
 800d91e:	f000 fa9b 	bl	800de58 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800d922:	4b0d      	ldr	r3, [pc, #52]	@ (800d958 <LmHandlerRequestClass+0x118>)
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00d      	beq.n	800d946 <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800d92a:	4b0b      	ldr	r3, [pc, #44]	@ (800d958 <LmHandlerRequestClass+0x118>)
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	2002      	movs	r0, #2
 800d930:	4798      	blx	r3
      break;
 800d932:	e008      	b.n	800d946 <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800d934:	232f      	movs	r3, #47	@ 0x2f
 800d936:	18fb      	adds	r3, r7, r3
 800d938:	22ff      	movs	r2, #255	@ 0xff
 800d93a:	701a      	strb	r2, [r3, #0]
      break;
 800d93c:	e003      	b.n	800d946 <LmHandlerRequestClass+0x106>
        break;
 800d93e:	46c0      	nop			@ (mov r8, r8)
 800d940:	e002      	b.n	800d948 <LmHandlerRequestClass+0x108>
      break;
 800d942:	46c0      	nop			@ (mov r8, r8)
 800d944:	e000      	b.n	800d948 <LmHandlerRequestClass+0x108>
      break;
 800d946:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return errorStatus;
 800d948:	232f      	movs	r3, #47	@ 0x2f
 800d94a:	18fb      	adds	r3, r7, r3
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	b25b      	sxtb	r3, r3
}
 800d950:	0018      	movs	r0, r3
 800d952:	46bd      	mov	sp, r7
 800d954:	b00c      	add	sp, #48	@ 0x30
 800d956:	bd80      	pop	{r7, pc}
 800d958:	200009dc 	.word	0x200009dc

0800d95c <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800d95c:	b590      	push	{r4, r7, lr}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	0002      	movs	r2, r0
 800d964:	6039      	str	r1, [r7, #0]
 800d966:	1dfb      	adds	r3, r7, #7
 800d968:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
  switch (id)
 800d96e:	1dfb      	adds	r3, r7, #7
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d104      	bne.n	800d980 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800d976:	f000 fa89 	bl	800de8c <LmphCompliancePackageFactory>
 800d97a:	0003      	movs	r3, r0
 800d97c:	60fb      	str	r3, [r7, #12]
      break;
 800d97e:	e000      	b.n	800d982 <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800d980:	46c0      	nop			@ (mov r8, r8)
  }

  if (package != NULL)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d028      	beq.n	800d9da <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800d988:	1dfb      	adds	r3, r7, #7
 800d98a:	781a      	ldrb	r2, [r3, #0]
 800d98c:	4b16      	ldr	r3, [pc, #88]	@ (800d9e8 <LmHandlerPackageRegister+0x8c>)
 800d98e:	0092      	lsls	r2, r2, #2
 800d990:	68f9      	ldr	r1, [r7, #12]
 800d992:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d994:	1dfb      	adds	r3, r7, #7
 800d996:	781a      	ldrb	r2, [r3, #0]
 800d998:	4b13      	ldr	r3, [pc, #76]	@ (800d9e8 <LmHandlerPackageRegister+0x8c>)
 800d99a:	0092      	lsls	r2, r2, #2
 800d99c:	58d3      	ldr	r3, [r2, r3]
 800d99e:	4a13      	ldr	r2, [pc, #76]	@ (800d9ec <LmHandlerPackageRegister+0x90>)
 800d9a0:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800d9a2:	1dfb      	adds	r3, r7, #7
 800d9a4:	781a      	ldrb	r2, [r3, #0]
 800d9a6:	4b10      	ldr	r3, [pc, #64]	@ (800d9e8 <LmHandlerPackageRegister+0x8c>)
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	58d3      	ldr	r3, [r2, r3]
 800d9ac:	4a10      	ldr	r2, [pc, #64]	@ (800d9f0 <LmHandlerPackageRegister+0x94>)
 800d9ae:	625a      	str	r2, [r3, #36]	@ 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d9b0:	1dfb      	adds	r3, r7, #7
 800d9b2:	781a      	ldrb	r2, [r3, #0]
 800d9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e8 <LmHandlerPackageRegister+0x8c>)
 800d9b6:	0092      	lsls	r2, r2, #2
 800d9b8:	58d3      	ldr	r3, [r2, r3]
 800d9ba:	4a0e      	ldr	r2, [pc, #56]	@ (800d9f4 <LmHandlerPackageRegister+0x98>)
 800d9bc:	629a      	str	r2, [r3, #40]	@ 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800d9be:	1dfb      	adds	r3, r7, #7
 800d9c0:	781a      	ldrb	r2, [r3, #0]
 800d9c2:	4b09      	ldr	r3, [pc, #36]	@ (800d9e8 <LmHandlerPackageRegister+0x8c>)
 800d9c4:	0092      	lsls	r2, r2, #2
 800d9c6:	58d3      	ldr	r3, [r2, r3]
 800d9c8:	685c      	ldr	r4, [r3, #4]
 800d9ca:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f8 <LmHandlerPackageRegister+0x9c>)
 800d9cc:	6859      	ldr	r1, [r3, #4]
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	22f2      	movs	r2, #242	@ 0xf2
 800d9d2:	0018      	movs	r0, r3
 800d9d4:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e001      	b.n	800d9de <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	425b      	negs	r3, r3
  }
}
 800d9de:	0018      	movs	r0, r3
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	b005      	add	sp, #20
 800d9e4:	bd90      	pop	{r4, r7, pc}
 800d9e6:	46c0      	nop			@ (mov r8, r8)
 800d9e8:	200009c0 	.word	0x200009c0
 800d9ec:	0800d58d 	.word	0x0800d58d
 800d9f0:	0800d69d 	.word	0x0800d69d
 800d9f4:	0800da95 	.word	0x0800da95
 800d9f8:	20000170 	.word	0x20000170

0800d9fc <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b08c      	sub	sp, #48	@ 0x30
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d102      	bne.n	800da10 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	425b      	negs	r3, r3
 800da0e:	e012      	b.n	800da36 <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800da10:	210c      	movs	r1, #12
 800da12:	187b      	adds	r3, r7, r1
 800da14:	2200      	movs	r2, #0
 800da16:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800da18:	187b      	adds	r3, r7, r1
 800da1a:	0018      	movs	r0, r3
 800da1c:	f005 f8aa 	bl	8012b74 <LoRaMacMibGetRequestConfirm>
 800da20:	1e03      	subs	r3, r0, #0
 800da22:	d002      	beq.n	800da2a <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800da24:	2301      	movs	r3, #1
 800da26:	425b      	negs	r3, r3
 800da28:	e005      	b.n	800da36 <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800da2a:	230c      	movs	r3, #12
 800da2c:	18fb      	adds	r3, r7, r3
 800da2e:	791a      	ldrb	r2, [r3, #4]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800da34:	2300      	movs	r3, #0
}
 800da36:	0018      	movs	r0, r3
 800da38:	46bd      	mov	sp, r7
 800da3a:	b00c      	add	sp, #48	@ 0x30
 800da3c:	bd80      	pop	{r7, pc}
	...

0800da40 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08c      	sub	sp, #48	@ 0x30
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d102      	bne.n	800da54 <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	425b      	negs	r3, r3
 800da52:	e018      	b.n	800da86 <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800da54:	210c      	movs	r1, #12
 800da56:	187b      	adds	r3, r7, r1
 800da58:	2224      	movs	r2, #36	@ 0x24
 800da5a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800da5c:	187b      	adds	r3, r7, r1
 800da5e:	0018      	movs	r0, r3
 800da60:	f005 f888 	bl	8012b74 <LoRaMacMibGetRequestConfirm>
 800da64:	1e03      	subs	r3, r0, #0
 800da66:	d002      	beq.n	800da6e <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800da68:	2301      	movs	r3, #1
 800da6a:	425b      	negs	r3, r3
 800da6c:	e00b      	b.n	800da86 <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800da6e:	210c      	movs	r1, #12
 800da70:	187b      	adds	r3, r7, r1
 800da72:	2204      	movs	r2, #4
 800da74:	569a      	ldrsb	r2, [r3, r2]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800da7a:	187b      	adds	r3, r7, r1
 800da7c:	2204      	movs	r2, #4
 800da7e:	569a      	ldrsb	r2, [r3, r2]
 800da80:	4b03      	ldr	r3, [pc, #12]	@ (800da90 <LmHandlerGetTxDatarate+0x50>)
 800da82:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800da84:	2300      	movs	r3, #0
}
 800da86:	0018      	movs	r0, r3
 800da88:	46bd      	mov	sp, r7
 800da8a:	b00c      	add	sp, #48	@ 0x30
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	46c0      	nop			@ (mov r8, r8)
 800da90:	200009d4 	.word	0x200009d4

0800da94 <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800da94:	b5b0      	push	{r4, r5, r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800da9a:	003b      	movs	r3, r7
 800da9c:	220a      	movs	r2, #10
 800da9e:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800daa0:	2517      	movs	r5, #23
 800daa2:	197c      	adds	r4, r7, r5
 800daa4:	003b      	movs	r3, r7
 800daa6:	0018      	movs	r0, r3
 800daa8:	f005 fd48 	bl	801353c <LoRaMacMlmeRequest>
 800daac:	0003      	movs	r3, r0
 800daae:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800dab0:	197b      	adds	r3, r7, r5
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d101      	bne.n	800dabc <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800dab8:	2300      	movs	r3, #0
 800daba:	e001      	b.n	800dac0 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	425b      	negs	r3, r3
  }
}
 800dac0:	0018      	movs	r0, r3
 800dac2:	46bd      	mov	sp, r7
 800dac4:	b006      	add	sp, #24
 800dac6:	bdb0      	pop	{r4, r5, r7, pc}

0800dac8 <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1; // Здесь выставляется будет ли подтверждение или нет
 800dad0:	4b16      	ldr	r3, [pc, #88]	@ (800db2c <McpsConfirm+0x64>)
 800dad2:	2201      	movs	r2, #1
 800dad4:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	785a      	ldrb	r2, [r3, #1]
 800dada:	4b14      	ldr	r3, [pc, #80]	@ (800db2c <McpsConfirm+0x64>)
 800dadc:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	789b      	ldrb	r3, [r3, #2]
 800dae2:	b25a      	sxtb	r2, r3
 800dae4:	4b11      	ldr	r3, [pc, #68]	@ (800db2c <McpsConfirm+0x64>)
 800dae6:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68da      	ldr	r2, [r3, #12]
 800daec:	4b0f      	ldr	r3, [pc, #60]	@ (800db2c <McpsConfirm+0x64>)
 800daee:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2203      	movs	r2, #3
 800daf4:	569a      	ldrsb	r2, [r3, r2]
 800daf6:	4b0d      	ldr	r3, [pc, #52]	@ (800db2c <McpsConfirm+0x64>)
 800daf8:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	4b0a      	ldr	r3, [pc, #40]	@ (800db2c <McpsConfirm+0x64>)
 800db02:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	791b      	ldrb	r3, [r3, #4]
 800db08:	001a      	movs	r2, r3
 800db0a:	4b08      	ldr	r3, [pc, #32]	@ (800db2c <McpsConfirm+0x64>)
 800db0c:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800db0e:	4b08      	ldr	r3, [pc, #32]	@ (800db30 <McpsConfirm+0x68>)
 800db10:	691b      	ldr	r3, [r3, #16]
 800db12:	4a06      	ldr	r2, [pc, #24]	@ (800db2c <McpsConfirm+0x64>)
 800db14:	0010      	movs	r0, r2
 800db16:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	0019      	movs	r1, r3
 800db1c:	2000      	movs	r0, #0
 800db1e:	f000 f907 	bl	800dd30 <LmHandlerPackagesNotify>
}
 800db22:	46c0      	nop			@ (mov r8, r8)
 800db24:	46bd      	mov	sp, r7
 800db26:	b002      	add	sp, #8
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	46c0      	nop			@ (mov r8, r8)
 800db2c:	20000a1c 	.word	0x20000a1c
 800db30:	200009dc 	.word	0x200009dc

0800db34 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800db34:	b590      	push	{r4, r7, lr}
 800db36:	b089      	sub	sp, #36	@ 0x24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800db3c:	4b36      	ldr	r3, [pc, #216]	@ (800dc18 <McpsIndication+0xe4>)
 800db3e:	2201      	movs	r2, #1
 800db40:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	785a      	ldrb	r2, [r3, #1]
 800db46:	4b34      	ldr	r3, [pc, #208]	@ (800dc18 <McpsIndication+0xe4>)
 800db48:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800db4a:	4b33      	ldr	r3, [pc, #204]	@ (800dc18 <McpsIndication+0xe4>)
 800db4c:	785b      	ldrb	r3, [r3, #1]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d15e      	bne.n	800dc10 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	7b1b      	ldrb	r3, [r3, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d02c      	beq.n	800dbb4 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	791b      	ldrb	r3, [r3, #4]
 800db5e:	b25a      	sxtb	r2, r3
 800db60:	4b2d      	ldr	r3, [pc, #180]	@ (800dc18 <McpsIndication+0xe4>)
 800db62:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	220e      	movs	r2, #14
 800db68:	5e9b      	ldrsh	r3, [r3, r2]
 800db6a:	b25a      	sxtb	r2, r3
 800db6c:	4b2a      	ldr	r3, [pc, #168]	@ (800dc18 <McpsIndication+0xe4>)
 800db6e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2210      	movs	r2, #16
 800db74:	569a      	ldrsb	r2, [r3, r2]
 800db76:	4b28      	ldr	r3, [pc, #160]	@ (800dc18 <McpsIndication+0xe4>)
 800db78:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	695a      	ldr	r2, [r3, #20]
 800db7e:	4b26      	ldr	r3, [pc, #152]	@ (800dc18 <McpsIndication+0xe4>)
 800db80:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	7c5b      	ldrb	r3, [r3, #17]
 800db86:	b25a      	sxtb	r2, r3
 800db88:	4b23      	ldr	r3, [pc, #140]	@ (800dc18 <McpsIndication+0xe4>)
 800db8a:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	78da      	ldrb	r2, [r3, #3]
 800db90:	2118      	movs	r1, #24
 800db92:	187b      	adds	r3, r7, r1
 800db94:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	7b1a      	ldrb	r2, [r3, #12]
 800db9a:	187b      	adds	r3, r7, r1
 800db9c:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	689a      	ldr	r2, [r3, #8]
 800dba2:	0008      	movs	r0, r1
 800dba4:	187b      	adds	r3, r7, r1
 800dba6:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800dba8:	4b1c      	ldr	r3, [pc, #112]	@ (800dc1c <McpsIndication+0xe8>)
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	491a      	ldr	r1, [pc, #104]	@ (800dc18 <McpsIndication+0xe4>)
 800dbae:	183a      	adds	r2, r7, r0
 800dbb0:	0010      	movs	r0, r2
 800dbb2:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	7f1b      	ldrb	r3, [r3, #28]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d006      	beq.n	800dbca <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800dbbc:	4b17      	ldr	r3, [pc, #92]	@ (800dc1c <McpsIndication+0xe8>)
 800dbbe:	69db      	ldr	r3, [r3, #28]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d002      	beq.n	800dbca <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800dbc4:	4b15      	ldr	r3, [pc, #84]	@ (800dc1c <McpsIndication+0xe8>)
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	0019      	movs	r1, r3
 800dbce:	2001      	movs	r0, #1
 800dbd0:	f000 f8ae 	bl	800dd30 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800dbd4:	2417      	movs	r4, #23
 800dbd6:	193b      	adds	r3, r7, r4
 800dbd8:	0018      	movs	r0, r3
 800dbda:	f7ff ff0f 	bl	800d9fc <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	795b      	ldrb	r3, [r3, #5]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d115      	bne.n	800dc12 <McpsIndication+0xde>
 800dbe6:	193b      	adds	r3, r7, r4
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d111      	bne.n	800dc12 <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800dbee:	210c      	movs	r1, #12
 800dbf0:	187b      	adds	r3, r7, r1
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	701a      	strb	r2, [r3, #0]
 800dbf6:	187b      	adds	r3, r7, r1
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	705a      	strb	r2, [r3, #1]
 800dbfc:	187b      	adds	r3, r7, r1
 800dbfe:	2200      	movs	r2, #0
 800dc00:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800dc02:	1878      	adds	r0, r7, r1
 800dc04:	2301      	movs	r3, #1
 800dc06:	2200      	movs	r2, #0
 800dc08:	2100      	movs	r1, #0
 800dc0a:	f7ff fd47 	bl	800d69c <LmHandlerSend>
 800dc0e:	e000      	b.n	800dc12 <McpsIndication+0xde>
    return;
 800dc10:	46c0      	nop			@ (mov r8, r8)
  }
}
 800dc12:	46bd      	mov	sp, r7
 800dc14:	b009      	add	sp, #36	@ 0x24
 800dc16:	bd90      	pop	{r4, r7, pc}
 800dc18:	20000160 	.word	0x20000160
 800dc1c:	200009dc 	.word	0x200009dc

0800dc20 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800dc20:	b590      	push	{r4, r7, lr}
 800dc22:	b08d      	sub	sp, #52	@ 0x34
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800dc28:	4b22      	ldr	r3, [pc, #136]	@ (800dcb4 <MlmeConfirm+0x94>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	785a      	ldrb	r2, [r3, #1]
 800dc32:	4b20      	ldr	r3, [pc, #128]	@ (800dcb4 <MlmeConfirm+0x94>)
 800dc34:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	0019      	movs	r1, r3
 800dc3a:	2002      	movs	r0, #2
 800dc3c:	f000 f878 	bl	800dd30 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b0a      	cmp	r3, #10
 800dc46:	d02c      	beq.n	800dca2 <MlmeConfirm+0x82>
 800dc48:	dc2d      	bgt.n	800dca6 <MlmeConfirm+0x86>
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d002      	beq.n	800dc54 <MlmeConfirm+0x34>
 800dc4e:	2b04      	cmp	r3, #4
 800dc50:	d02b      	beq.n	800dcaa <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800dc52:	e028      	b.n	800dca6 <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800dc54:	210c      	movs	r1, #12
 800dc56:	187b      	adds	r3, r7, r1
 800dc58:	2206      	movs	r2, #6
 800dc5a:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800dc5c:	000c      	movs	r4, r1
 800dc5e:	187b      	adds	r3, r7, r1
 800dc60:	0018      	movs	r0, r3
 800dc62:	f004 ff87 	bl	8012b74 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dc66:	193b      	adds	r3, r7, r4
 800dc68:	685a      	ldr	r2, [r3, #4]
 800dc6a:	4b13      	ldr	r3, [pc, #76]	@ (800dcb8 <MlmeConfirm+0x98>)
 800dc6c:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800dc6e:	4b13      	ldr	r3, [pc, #76]	@ (800dcbc <MlmeConfirm+0x9c>)
 800dc70:	0018      	movs	r0, r3
 800dc72:	f7ff fee5 	bl	800da40 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	785b      	ldrb	r3, [r3, #1]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d108      	bne.n	800dc90 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dc7e:	4b0f      	ldr	r3, [pc, #60]	@ (800dcbc <MlmeConfirm+0x9c>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dc84:	4b0e      	ldr	r3, [pc, #56]	@ (800dcc0 <MlmeConfirm+0xa0>)
 800dc86:	785b      	ldrb	r3, [r3, #1]
 800dc88:	0018      	movs	r0, r3
 800dc8a:	f7ff fdd9 	bl	800d840 <LmHandlerRequestClass>
 800dc8e:	e002      	b.n	800dc96 <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800dc90:	4b0a      	ldr	r3, [pc, #40]	@ (800dcbc <MlmeConfirm+0x9c>)
 800dc92:	22ff      	movs	r2, #255	@ 0xff
 800dc94:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800dc96:	4b0b      	ldr	r3, [pc, #44]	@ (800dcc4 <MlmeConfirm+0xa4>)
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	4a08      	ldr	r2, [pc, #32]	@ (800dcbc <MlmeConfirm+0x9c>)
 800dc9c:	0010      	movs	r0, r2
 800dc9e:	4798      	blx	r3
    break;
 800dca0:	e004      	b.n	800dcac <MlmeConfirm+0x8c>
    break;
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	e002      	b.n	800dcac <MlmeConfirm+0x8c>
      break;
 800dca6:	46c0      	nop			@ (mov r8, r8)
 800dca8:	e000      	b.n	800dcac <MlmeConfirm+0x8c>
    break;
 800dcaa:	46c0      	nop			@ (mov r8, r8)
  }
}
 800dcac:	46c0      	nop			@ (mov r8, r8)
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	b00d      	add	sp, #52	@ 0x34
 800dcb2:	bd90      	pop	{r4, r7, pc}
 800dcb4:	20000a1c 	.word	0x20000a1c
 800dcb8:	20000138 	.word	0x20000138
 800dcbc:	2000015c 	.word	0x2000015c
 800dcc0:	200009d4 	.word	0x200009d4
 800dcc4:	200009dc 	.word	0x200009dc

0800dcc8 <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800dcd0:	4b05      	ldr	r3, [pc, #20]	@ (800dce8 <MlmeIndication+0x20>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	785a      	ldrb	r2, [r3, #1]
 800dcda:	4b03      	ldr	r3, [pc, #12]	@ (800dce8 <MlmeIndication+0x20>)
 800dcdc:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800dcde:	46c0      	nop			@ (mov r8, r8)
  }
}
 800dce0:	46c0      	nop			@ (mov r8, r8)
 800dce2:	46bd      	mov	sp, r7
 800dce4:	b002      	add	sp, #8
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	20000160 	.word	0x20000160

0800dcec <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	0002      	movs	r2, r0
 800dcf4:	1dfb      	adds	r3, r7, #7
 800dcf6:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800dcf8:	1dfb      	adds	r3, r7, #7
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	2b04      	cmp	r3, #4
 800dcfe:	d810      	bhi.n	800dd22 <LmHandlerPackageIsInitialized+0x36>
 800dd00:	1dfb      	adds	r3, r7, #7
 800dd02:	781a      	ldrb	r2, [r3, #0]
 800dd04:	4b09      	ldr	r3, [pc, #36]	@ (800dd2c <LmHandlerPackageIsInitialized+0x40>)
 800dd06:	0092      	lsls	r2, r2, #2
 800dd08:	58d3      	ldr	r3, [r2, r3]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d008      	beq.n	800dd22 <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800dd10:	1dfb      	adds	r3, r7, #7
 800dd12:	781a      	ldrb	r2, [r3, #0]
 800dd14:	4b05      	ldr	r3, [pc, #20]	@ (800dd2c <LmHandlerPackageIsInitialized+0x40>)
 800dd16:	0092      	lsls	r2, r2, #2
 800dd18:	58d3      	ldr	r3, [r2, r3]
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	4798      	blx	r3
 800dd1e:	0003      	movs	r3, r0
 800dd20:	e000      	b.n	800dd24 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800dd22:	2300      	movs	r3, #0
  }
}
 800dd24:	0018      	movs	r0, r3
 800dd26:	46bd      	mov	sp, r7
 800dd28:	b002      	add	sp, #8
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	200009c0 	.word	0x200009c0

0800dd30 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	0002      	movs	r2, r0
 800dd38:	6039      	str	r1, [r7, #0]
 800dd3a:	1dfb      	adds	r3, r7, #7
 800dd3c:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800dd3e:	230f      	movs	r3, #15
 800dd40:	18fb      	adds	r3, r7, r3
 800dd42:	2200      	movs	r2, #0
 800dd44:	701a      	strb	r2, [r3, #0]
 800dd46:	e079      	b.n	800de3c <LmHandlerPackagesNotify+0x10c>
  {
    if (LmHandlerPackages[i] != NULL)
 800dd48:	230f      	movs	r3, #15
 800dd4a:	18fb      	adds	r3, r7, r3
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	569a      	ldrsb	r2, [r3, r2]
 800dd50:	4b40      	ldr	r3, [pc, #256]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800dd52:	0092      	lsls	r2, r2, #2
 800dd54:	58d3      	ldr	r3, [r2, r3]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d100      	bne.n	800dd5c <LmHandlerPackagesNotify+0x2c>
 800dd5a:	e066      	b.n	800de2a <LmHandlerPackagesNotify+0xfa>
    {
      switch (notifyType)
 800dd5c:	1dfb      	adds	r3, r7, #7
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	d046      	beq.n	800ddf2 <LmHandlerPackagesNotify+0xc2>
 800dd64:	dc5a      	bgt.n	800de1c <LmHandlerPackagesNotify+0xec>
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d002      	beq.n	800dd70 <LmHandlerPackagesNotify+0x40>
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d015      	beq.n	800dd9a <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800dd6e:	e055      	b.n	800de1c <LmHandlerPackagesNotify+0xec>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800dd70:	210f      	movs	r1, #15
 800dd72:	187b      	adds	r3, r7, r1
 800dd74:	2200      	movs	r2, #0
 800dd76:	569a      	ldrsb	r2, [r3, r2]
 800dd78:	4b36      	ldr	r3, [pc, #216]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800dd7a:	0092      	lsls	r2, r2, #2
 800dd7c:	58d3      	ldr	r3, [r2, r3]
 800dd7e:	695b      	ldr	r3, [r3, #20]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d04d      	beq.n	800de20 <LmHandlerPackagesNotify+0xf0>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800dd84:	187b      	adds	r3, r7, r1
 800dd86:	2200      	movs	r2, #0
 800dd88:	569a      	ldrsb	r2, [r3, r2]
 800dd8a:	4b32      	ldr	r3, [pc, #200]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800dd8c:	0092      	lsls	r2, r2, #2
 800dd8e:	58d3      	ldr	r3, [r2, r3]
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	683a      	ldr	r2, [r7, #0]
 800dd94:	0010      	movs	r0, r2
 800dd96:	4798      	blx	r3
          break;
 800dd98:	e042      	b.n	800de20 <LmHandlerPackagesNotify+0xf0>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800dd9a:	210f      	movs	r1, #15
 800dd9c:	187b      	adds	r3, r7, r1
 800dd9e:	2200      	movs	r2, #0
 800dda0:	569a      	ldrsb	r2, [r3, r2]
 800dda2:	4b2c      	ldr	r3, [pc, #176]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800dda4:	0092      	lsls	r2, r2, #2
 800dda6:	58d3      	ldr	r3, [r2, r3]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d03a      	beq.n	800de24 <LmHandlerPackagesNotify+0xf4>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800ddae:	187b      	adds	r3, r7, r1
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	569a      	ldrsb	r2, [r3, r2]
 800ddb4:	4b27      	ldr	r3, [pc, #156]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800ddb6:	0092      	lsls	r2, r2, #2
 800ddb8:	58d3      	ldr	r3, [r2, r3]
 800ddba:	781a      	ldrb	r2, [r3, #0]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d00a      	beq.n	800ddda <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800ddc4:	187b      	adds	r3, r7, r1
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	b25b      	sxtb	r3, r3
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d12a      	bne.n	800de24 <LmHandlerPackagesNotify+0xf4>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800ddce:	4b21      	ldr	r3, [pc, #132]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	4798      	blx	r3
 800ddd6:	1e03      	subs	r3, r0, #0
 800ddd8:	d024      	beq.n	800de24 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800ddda:	230f      	movs	r3, #15
 800dddc:	18fb      	adds	r3, r7, r3
 800ddde:	2200      	movs	r2, #0
 800dde0:	569a      	ldrsb	r2, [r3, r2]
 800dde2:	4b1c      	ldr	r3, [pc, #112]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800dde4:	0092      	lsls	r2, r2, #2
 800dde6:	58d3      	ldr	r3, [r2, r3]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	0010      	movs	r0, r2
 800ddee:	4798      	blx	r3
          break;
 800ddf0:	e018      	b.n	800de24 <LmHandlerPackagesNotify+0xf4>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800ddf2:	210f      	movs	r1, #15
 800ddf4:	187b      	adds	r3, r7, r1
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	569a      	ldrsb	r2, [r3, r2]
 800ddfa:	4b16      	ldr	r3, [pc, #88]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800ddfc:	0092      	lsls	r2, r2, #2
 800ddfe:	58d3      	ldr	r3, [r2, r3]
 800de00:	69db      	ldr	r3, [r3, #28]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d010      	beq.n	800de28 <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800de06:	187b      	adds	r3, r7, r1
 800de08:	2200      	movs	r2, #0
 800de0a:	569a      	ldrsb	r2, [r3, r2]
 800de0c:	4b11      	ldr	r3, [pc, #68]	@ (800de54 <LmHandlerPackagesNotify+0x124>)
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	58d3      	ldr	r3, [r2, r3]
 800de12:	69db      	ldr	r3, [r3, #28]
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	0010      	movs	r0, r2
 800de18:	4798      	blx	r3
          break;
 800de1a:	e005      	b.n	800de28 <LmHandlerPackagesNotify+0xf8>
          break;
 800de1c:	46c0      	nop			@ (mov r8, r8)
 800de1e:	e004      	b.n	800de2a <LmHandlerPackagesNotify+0xfa>
          break;
 800de20:	46c0      	nop			@ (mov r8, r8)
 800de22:	e002      	b.n	800de2a <LmHandlerPackagesNotify+0xfa>
          break;
 800de24:	46c0      	nop			@ (mov r8, r8)
 800de26:	e000      	b.n	800de2a <LmHandlerPackagesNotify+0xfa>
          break;
 800de28:	46c0      	nop			@ (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800de2a:	210f      	movs	r1, #15
 800de2c:	187b      	adds	r3, r7, r1
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	b25b      	sxtb	r3, r3
 800de32:	b2db      	uxtb	r3, r3
 800de34:	3301      	adds	r3, #1
 800de36:	b2da      	uxtb	r2, r3
 800de38:	187b      	adds	r3, r7, r1
 800de3a:	701a      	strb	r2, [r3, #0]
 800de3c:	230f      	movs	r3, #15
 800de3e:	18fb      	adds	r3, r7, r3
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	b25b      	sxtb	r3, r3
 800de44:	2b04      	cmp	r3, #4
 800de46:	dc00      	bgt.n	800de4a <LmHandlerPackagesNotify+0x11a>
 800de48:	e77e      	b.n	800dd48 <LmHandlerPackagesNotify+0x18>
      }
    }
  }
}
 800de4a:	46c0      	nop			@ (mov r8, r8)
 800de4c:	46c0      	nop			@ (mov r8, r8)
 800de4e:	46bd      	mov	sp, r7
 800de50:	b004      	add	sp, #16
 800de52:	bd80      	pop	{r7, pc}
 800de54:	200009c0 	.word	0x200009c0

0800de58 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af02      	add	r7, sp, #8
 800de5e:	0002      	movs	r2, r0
 800de60:	1dfb      	adds	r3, r7, #7
 800de62:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800de64:	1dfb      	adds	r3, r7, #7
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	4a06      	ldr	r2, [pc, #24]	@ (800de84 <DisplayClassUpdate+0x2c>)
 800de6a:	5cd3      	ldrb	r3, [r2, r3]
 800de6c:	001a      	movs	r2, r3
 800de6e:	4b06      	ldr	r3, [pc, #24]	@ (800de88 <DisplayClassUpdate+0x30>)
 800de70:	9200      	str	r2, [sp, #0]
 800de72:	2200      	movs	r2, #0
 800de74:	2100      	movs	r1, #0
 800de76:	2002      	movs	r0, #2
 800de78:	f00d f9b0 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
}
 800de7c:	46c0      	nop			@ (mov r8, r8)
 800de7e:	46bd      	mov	sp, r7
 800de80:	b002      	add	sp, #8
 800de82:	bd80      	pop	{r7, pc}
 800de84:	0801e104 	.word	0x0801e104
 800de88:	0801e0e8 	.word	0x0801e0e8

0800de8c <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800de90:	4b01      	ldr	r3, [pc, #4]	@ (800de98 <LmphCompliancePackageFactory+0xc>)
}
 800de92:	0018      	movs	r0, r3
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	20000178 	.word	0x20000178

0800de9c <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	1dfb      	adds	r3, r7, #7
 800dea8:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d010      	beq.n	800ded2 <LmhpComplianceInit+0x36>
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00d      	beq.n	800ded2 <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800deb6:	4b0c      	ldr	r3, [pc, #48]	@ (800dee8 <LmhpComplianceInit+0x4c>)
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800debc:	4b0b      	ldr	r3, [pc, #44]	@ (800deec <LmhpComplianceInit+0x50>)
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800dec2:	4b0a      	ldr	r3, [pc, #40]	@ (800deec <LmhpComplianceInit+0x50>)
 800dec4:	1dfa      	adds	r2, r7, #7
 800dec6:	7812      	ldrb	r2, [r2, #0]
 800dec8:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800deca:	4b08      	ldr	r3, [pc, #32]	@ (800deec <LmhpComplianceInit+0x50>)
 800decc:	2201      	movs	r2, #1
 800dece:	701a      	strb	r2, [r3, #0]
 800ded0:	e006      	b.n	800dee0 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800ded2:	4b05      	ldr	r3, [pc, #20]	@ (800dee8 <LmhpComplianceInit+0x4c>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800ded8:	4b04      	ldr	r3, [pc, #16]	@ (800deec <LmhpComplianceInit+0x50>)
 800deda:	2200      	movs	r2, #0
 800dedc:	701a      	strb	r2, [r3, #0]
  }
}
 800dede:	46c0      	nop			@ (mov r8, r8)
 800dee0:	46c0      	nop			@ (mov r8, r8)
 800dee2:	46bd      	mov	sp, r7
 800dee4:	b004      	add	sp, #16
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	20000b54 	.word	0x20000b54
 800deec:	20000b40 	.word	0x20000b40

0800def0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800def4:	4b02      	ldr	r3, [pc, #8]	@ (800df00 <LmhpComplianceIsInitialized+0x10>)
 800def6:	781b      	ldrb	r3, [r3, #0]
}
 800def8:	0018      	movs	r0, r3
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	46c0      	nop			@ (mov r8, r8)
 800df00:	20000b40 	.word	0x20000b40

0800df04 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800df08:	4b06      	ldr	r3, [pc, #24]	@ (800df24 <LmhpComplianceIsRunning+0x20>)
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2201      	movs	r2, #1
 800df0e:	4053      	eors	r3, r2
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b00      	cmp	r3, #0
 800df14:	d001      	beq.n	800df1a <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800df16:	2300      	movs	r3, #0
 800df18:	e001      	b.n	800df1e <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800df1a:	4b02      	ldr	r3, [pc, #8]	@ (800df24 <LmhpComplianceIsRunning+0x20>)
 800df1c:	785b      	ldrb	r3, [r3, #1]
}
 800df1e:	0018      	movs	r0, r3
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	20000b40 	.word	0x20000b40

0800df28 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800df30:	4b0e      	ldr	r3, [pc, #56]	@ (800df6c <LmhpComplianceOnMcpsConfirm+0x44>)
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2201      	movs	r2, #1
 800df36:	4053      	eors	r3, r2
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d112      	bne.n	800df64 <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800df3e:	4b0b      	ldr	r3, [pc, #44]	@ (800df6c <LmhpComplianceOnMcpsConfirm+0x44>)
 800df40:	785b      	ldrb	r3, [r3, #1]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00f      	beq.n	800df66 <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d10b      	bne.n	800df66 <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800df52:	2b00      	cmp	r3, #0
 800df54:	d007      	beq.n	800df66 <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800df56:	4b05      	ldr	r3, [pc, #20]	@ (800df6c <LmhpComplianceOnMcpsConfirm+0x44>)
 800df58:	899b      	ldrh	r3, [r3, #12]
 800df5a:	3301      	adds	r3, #1
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	4b03      	ldr	r3, [pc, #12]	@ (800df6c <LmhpComplianceOnMcpsConfirm+0x44>)
 800df60:	819a      	strh	r2, [r3, #12]
 800df62:	e000      	b.n	800df66 <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800df64:	46c0      	nop			@ (mov r8, r8)
  }
}
 800df66:	46bd      	mov	sp, r7
 800df68:	b002      	add	sp, #8
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20000b40 	.word	0x20000b40

0800df70 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800df78:	4b0d      	ldr	r3, [pc, #52]	@ (800dfb0 <LmhpComplianceOnMlmeConfirm+0x40>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	2201      	movs	r2, #1
 800df7e:	4053      	eors	r3, r2
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10f      	bne.n	800dfa6 <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b04      	cmp	r3, #4
 800df8c:	d10c      	bne.n	800dfa8 <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800df8e:	4b08      	ldr	r3, [pc, #32]	@ (800dfb0 <LmhpComplianceOnMlmeConfirm+0x40>)
 800df90:	2201      	movs	r2, #1
 800df92:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	7a1a      	ldrb	r2, [r3, #8]
 800df98:	4b05      	ldr	r3, [pc, #20]	@ (800dfb0 <LmhpComplianceOnMlmeConfirm+0x40>)
 800df9a:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	7a5a      	ldrb	r2, [r3, #9]
 800dfa0:	4b03      	ldr	r3, [pc, #12]	@ (800dfb0 <LmhpComplianceOnMlmeConfirm+0x40>)
 800dfa2:	741a      	strb	r2, [r3, #16]
 800dfa4:	e000      	b.n	800dfa8 <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800dfa6:	46c0      	nop			@ (mov r8, r8)
  }
}
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	b002      	add	sp, #8
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	46c0      	nop			@ (mov r8, r8)
 800dfb0:	20000b40 	.word	0x20000b40

0800dfb4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800dfb4:	b5b0      	push	{r4, r5, r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800dfba:	4b32      	ldr	r3, [pc, #200]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	4053      	eors	r3, r2
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d002      	beq.n	800dfce <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	425b      	negs	r3, r3
 800dfcc:	e056      	b.n	800e07c <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800dfce:	4b2d      	ldr	r3, [pc, #180]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dfd0:	7b9b      	ldrb	r3, [r3, #14]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d019      	beq.n	800e00a <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800dfd6:	4b2b      	ldr	r3, [pc, #172]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800dfdc:	4b29      	ldr	r3, [pc, #164]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dfde:	2203      	movs	r2, #3
 800dfe0:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800dfe2:	4b28      	ldr	r3, [pc, #160]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	2205      	movs	r2, #5
 800dfe8:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800dfea:	4b26      	ldr	r3, [pc, #152]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	3301      	adds	r3, #1
 800dff0:	4a24      	ldr	r2, [pc, #144]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dff2:	7bd2      	ldrb	r2, [r2, #15]
 800dff4:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800dff6:	4b23      	ldr	r3, [pc, #140]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	3302      	adds	r3, #2
 800dffc:	4a21      	ldr	r2, [pc, #132]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800dffe:	7c12      	ldrb	r2, [r2, #16]
 800e000:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800e002:	4b20      	ldr	r3, [pc, #128]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e004:	2201      	movs	r2, #1
 800e006:	709a      	strb	r2, [r3, #2]
 800e008:	e01c      	b.n	800e044 <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800e00a:	4b1e      	ldr	r3, [pc, #120]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e00c:	789b      	ldrb	r3, [r3, #2]
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d005      	beq.n	800e01e <LmhpComplianceTxProcess+0x6a>
 800e012:	2b04      	cmp	r3, #4
 800e014:	d116      	bne.n	800e044 <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800e016:	4b1b      	ldr	r3, [pc, #108]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e018:	2201      	movs	r2, #1
 800e01a:	709a      	strb	r2, [r3, #2]
        break;
 800e01c:	e012      	b.n	800e044 <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800e01e:	4b19      	ldr	r3, [pc, #100]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e020:	2202      	movs	r2, #2
 800e022:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e024:	4b17      	ldr	r3, [pc, #92]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e026:	899b      	ldrh	r3, [r3, #12]
 800e028:	0a1b      	lsrs	r3, r3, #8
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	4b15      	ldr	r3, [pc, #84]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	b2d2      	uxtb	r2, r2
 800e032:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e034:	4b13      	ldr	r3, [pc, #76]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e036:	899a      	ldrh	r2, [r3, #12]
 800e038:	4b12      	ldr	r3, [pc, #72]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	3301      	adds	r3, #1
 800e03e:	b2d2      	uxtb	r2, r2
 800e040:	701a      	strb	r2, [r3, #0]
        break;
 800e042:	46c0      	nop			@ (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800e044:	2508      	movs	r5, #8
 800e046:	197b      	adds	r3, r7, r5
 800e048:	22e0      	movs	r2, #224	@ 0xe0
 800e04a:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800e04c:	4b0d      	ldr	r3, [pc, #52]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e04e:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800e050:	197b      	adds	r3, r7, r5
 800e052:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800e054:	4b0b      	ldr	r3, [pc, #44]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e056:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800e058:	197b      	adds	r3, r7, r5
 800e05a:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800e05c:	2300      	movs	r3, #0
 800e05e:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800e060:	4b09      	ldr	r3, [pc, #36]	@ (800e088 <LmhpComplianceTxProcess+0xd4>)
 800e062:	0018      	movs	r0, r3
 800e064:	f00d ff7e 	bl	801bf64 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800e068:	4b08      	ldr	r3, [pc, #32]	@ (800e08c <LmhpComplianceTxProcess+0xd8>)
 800e06a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e06c:	4b05      	ldr	r3, [pc, #20]	@ (800e084 <LmhpComplianceTxProcess+0xd0>)
 800e06e:	791b      	ldrb	r3, [r3, #4]
 800e070:	0019      	movs	r1, r3
 800e072:	1d3a      	adds	r2, r7, #4
 800e074:	1978      	adds	r0, r7, r5
 800e076:	2301      	movs	r3, #1
 800e078:	47a0      	blx	r4
 800e07a:	0003      	movs	r3, r0
                                             true);
}
 800e07c:	0018      	movs	r0, r3
 800e07e:	46bd      	mov	sp, r7
 800e080:	b004      	add	sp, #16
 800e082:	bdb0      	pop	{r4, r5, r7, pc}
 800e084:	20000b40 	.word	0x20000b40
 800e088:	20000b28 	.word	0x20000b28
 800e08c:	20000178 	.word	0x20000178

0800e090 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b0a2      	sub	sp, #136	@ 0x88
 800e094:	af02      	add	r7, sp, #8
 800e096:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e098:	4be1      	ldr	r3, [pc, #900]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2201      	movs	r2, #1
 800e09e:	4053      	eors	r3, r2
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d000      	beq.n	800e0a8 <LmhpComplianceOnMcpsIndication+0x18>
 800e0a6:	e1b2      	b.n	800e40e <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7b5b      	ldrb	r3, [r3, #13]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	4053      	eors	r3, r2
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d000      	beq.n	800e0b8 <LmhpComplianceOnMcpsIndication+0x28>
 800e0b6:	e1ac      	b.n	800e412 <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800e0b8:	4bd9      	ldr	r3, [pc, #868]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0ba:	785b      	ldrb	r3, [r3, #1]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00c      	beq.n	800e0da <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	7c9b      	ldrb	r3, [r3, #18]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	4053      	eors	r3, r2
 800e0c8:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d005      	beq.n	800e0da <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800e0ce:	4bd4      	ldr	r3, [pc, #848]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0d0:	899b      	ldrh	r3, [r3, #12]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	4bd2      	ldr	r3, [pc, #840]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0d8:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	78db      	ldrb	r3, [r3, #3]
 800e0de:	2be0      	cmp	r3, #224	@ 0xe0
 800e0e0:	d000      	beq.n	800e0e4 <LmhpComplianceOnMcpsIndication+0x54>
 800e0e2:	e198      	b.n	800e416 <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800e0e4:	4bce      	ldr	r3, [pc, #824]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0e6:	785b      	ldrb	r3, [r3, #1]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	4053      	eors	r3, r2
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d063      	beq.n	800e1ba <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	7b1b      	ldrb	r3, [r3, #12]
 800e0f6:	2b04      	cmp	r3, #4
 800e0f8:	d000      	beq.n	800e0fc <LmhpComplianceOnMcpsIndication+0x6c>
 800e0fa:	e1a0      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800e102:	2b01      	cmp	r3, #1
 800e104:	d000      	beq.n	800e108 <LmhpComplianceOnMcpsIndication+0x78>
 800e106:	e19a      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	3301      	adds	r3, #1
 800e10e:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800e110:	2b01      	cmp	r3, #1
 800e112:	d000      	beq.n	800e116 <LmhpComplianceOnMcpsIndication+0x86>
 800e114:	e193      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	3302      	adds	r3, #2
 800e11c:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d000      	beq.n	800e124 <LmhpComplianceOnMcpsIndication+0x94>
 800e122:	e18c      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	3303      	adds	r3, #3
 800e12a:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d000      	beq.n	800e132 <LmhpComplianceOnMcpsIndication+0xa2>
 800e130:	e185      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800e132:	4bbb      	ldr	r3, [pc, #748]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e134:	2200      	movs	r2, #0
 800e136:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800e138:	4bb9      	ldr	r3, [pc, #740]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e13a:	22e0      	movs	r2, #224	@ 0xe0
 800e13c:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800e13e:	4bb8      	ldr	r3, [pc, #736]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e140:	2202      	movs	r2, #2
 800e142:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800e144:	4bb6      	ldr	r3, [pc, #728]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e146:	2200      	movs	r2, #0
 800e148:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800e14a:	4bb5      	ldr	r3, [pc, #724]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800e150:	4bb3      	ldr	r3, [pc, #716]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e152:	2200      	movs	r2, #0
 800e154:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800e156:	4bb2      	ldr	r3, [pc, #712]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e158:	2200      	movs	r2, #0
 800e15a:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800e15c:	4bb0      	ldr	r3, [pc, #704]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e15e:	2201      	movs	r2, #1
 800e160:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800e162:	4baf      	ldr	r3, [pc, #700]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e164:	2201      	movs	r2, #1
 800e166:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800e168:	2108      	movs	r1, #8
 800e16a:	187b      	adds	r3, r7, r1
 800e16c:	2204      	movs	r2, #4
 800e16e:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800e170:	187b      	adds	r3, r7, r1
 800e172:	2201      	movs	r2, #1
 800e174:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e176:	187b      	adds	r3, r7, r1
 800e178:	0018      	movs	r0, r3
 800e17a:	f004 fe59 	bl	8012e30 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800e17e:	2000      	movs	r0, #0
 800e180:	f005 fc82 	bl	8013a88 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800e184:	4ba7      	ldr	r3, [pc, #668]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d003      	beq.n	800e196 <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800e18e:	4ba5      	ldr	r3, [pc, #660]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800e196:	4ba4      	ldr	r3, [pc, #656]	@ (800e428 <LmhpComplianceOnMcpsIndication+0x398>)
 800e198:	2201      	movs	r2, #1
 800e19a:	4251      	negs	r1, r2
 800e19c:	48a3      	ldr	r0, [pc, #652]	@ (800e42c <LmhpComplianceOnMcpsIndication+0x39c>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	9200      	str	r2, [sp, #0]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f00d fea6 	bl	801bef4 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800e1a8:	4aa1      	ldr	r2, [pc, #644]	@ (800e430 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800e1aa:	4ba0      	ldr	r3, [pc, #640]	@ (800e42c <LmhpComplianceOnMcpsIndication+0x39c>)
 800e1ac:	0011      	movs	r1, r2
 800e1ae:	0018      	movs	r0, r3
 800e1b0:	f00d ffc8 	bl	801c144 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800e1b4:	f7ff fefe 	bl	800dfb4 <LmhpComplianceTxProcess>
 800e1b8:	e141      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	781a      	ldrb	r2, [r3, #0]
 800e1c0:	4b97      	ldr	r3, [pc, #604]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1c2:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800e1c4:	4b96      	ldr	r3, [pc, #600]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1c6:	789b      	ldrb	r3, [r3, #2]
 800e1c8:	2b0a      	cmp	r3, #10
 800e1ca:	d900      	bls.n	800e1ce <LmhpComplianceOnMcpsIndication+0x13e>
 800e1cc:	e125      	b.n	800e41a <LmhpComplianceOnMcpsIndication+0x38a>
 800e1ce:	009a      	lsls	r2, r3, #2
 800e1d0:	4b98      	ldr	r3, [pc, #608]	@ (800e434 <LmhpComplianceOnMcpsIndication+0x3a4>)
 800e1d2:	18d3      	adds	r3, r2, r3
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800e1d8:	4b94      	ldr	r3, [pc, #592]	@ (800e42c <LmhpComplianceOnMcpsIndication+0x39c>)
 800e1da:	0018      	movs	r0, r3
 800e1dc:	f00d ff3a 	bl	801c054 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800e1e0:	4b8f      	ldr	r3, [pc, #572]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800e1e6:	4b8e      	ldr	r3, [pc, #568]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800e1ec:	2108      	movs	r1, #8
 800e1ee:	187b      	adds	r3, r7, r1
 800e1f0:	2204      	movs	r2, #4
 800e1f2:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e1f4:	4b8b      	ldr	r3, [pc, #556]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	781a      	ldrb	r2, [r3, #0]
 800e1fa:	187b      	adds	r3, r7, r1
 800e1fc:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e1fe:	187b      	adds	r3, r7, r1
 800e200:	0018      	movs	r0, r3
 800e202:	f004 fe15 	bl	8012e30 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800e206:	4b87      	ldr	r3, [pc, #540]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	785b      	ldrb	r3, [r3, #1]
 800e20c:	0018      	movs	r0, r3
 800e20e:	f005 fc3b 	bl	8013a88 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800e212:	4b84      	ldr	r3, [pc, #528]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d100      	bne.n	800e21e <LmhpComplianceOnMcpsIndication+0x18e>
 800e21c:	e10e      	b.n	800e43c <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800e21e:	4b81      	ldr	r3, [pc, #516]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	4798      	blx	r3
        }
      }
      break;
 800e226:	e109      	b.n	800e43c <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800e228:	4b7d      	ldr	r3, [pc, #500]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e22a:	2202      	movs	r2, #2
 800e22c:	71da      	strb	r2, [r3, #7]
        break;
 800e22e:	e106      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800e230:	4b7b      	ldr	r3, [pc, #492]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e232:	2201      	movs	r2, #1
 800e234:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800e236:	4b7a      	ldr	r3, [pc, #488]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e238:	2201      	movs	r2, #1
 800e23a:	709a      	strb	r2, [r3, #2]
        break;
 800e23c:	e0ff      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800e23e:	4b78      	ldr	r3, [pc, #480]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e240:	2200      	movs	r2, #0
 800e242:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800e244:	4b76      	ldr	r3, [pc, #472]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e246:	2201      	movs	r2, #1
 800e248:	709a      	strb	r2, [r3, #2]
        break;
 800e24a:	e0f8      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	7b1a      	ldrb	r2, [r3, #12]
 800e250:	4b73      	ldr	r3, [pc, #460]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e252:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800e254:	4b72      	ldr	r3, [pc, #456]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	2204      	movs	r2, #4
 800e25a:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800e25c:	237f      	movs	r3, #127	@ 0x7f
 800e25e:	18fb      	adds	r3, r7, r3
 800e260:	2201      	movs	r2, #1
 800e262:	701a      	strb	r2, [r3, #0]
 800e264:	e013      	b.n	800e28e <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	689a      	ldr	r2, [r3, #8]
 800e26a:	207f      	movs	r0, #127	@ 0x7f
 800e26c:	183b      	adds	r3, r7, r0
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	18d3      	adds	r3, r2, r3
 800e272:	781a      	ldrb	r2, [r3, #0]
 800e274:	4b6a      	ldr	r3, [pc, #424]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e276:	6899      	ldr	r1, [r3, #8]
 800e278:	183b      	adds	r3, r7, r0
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	18cb      	adds	r3, r1, r3
 800e27e:	3201      	adds	r2, #1
 800e280:	b2d2      	uxtb	r2, r2
 800e282:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800e284:	183b      	adds	r3, r7, r0
 800e286:	781a      	ldrb	r2, [r3, #0]
 800e288:	183b      	adds	r3, r7, r0
 800e28a:	3201      	adds	r2, #1
 800e28c:	701a      	strb	r2, [r3, #0]
 800e28e:	4b64      	ldr	r3, [pc, #400]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e290:	799a      	ldrb	r2, [r3, #6]
 800e292:	4b63      	ldr	r3, [pc, #396]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e294:	79db      	ldrb	r3, [r3, #7]
 800e296:	1c18      	adds	r0, r3, #0
 800e298:	1c11      	adds	r1, r2, #0
 800e29a:	b2ca      	uxtb	r2, r1
 800e29c:	b2c3      	uxtb	r3, r0
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d900      	bls.n	800e2a4 <LmhpComplianceOnMcpsIndication+0x214>
 800e2a2:	1c01      	adds	r1, r0, #0
 800e2a4:	b2cb      	uxtb	r3, r1
 800e2a6:	227f      	movs	r2, #127	@ 0x7f
 800e2a8:	18ba      	adds	r2, r7, r2
 800e2aa:	7812      	ldrb	r2, [r2, #0]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d3da      	bcc.n	800e266 <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800e2b0:	e0c5      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800e2b2:	2168      	movs	r1, #104	@ 0x68
 800e2b4:	187b      	adds	r3, r7, r1
 800e2b6:	2204      	movs	r2, #4
 800e2b8:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800e2ba:	187b      	adds	r3, r7, r1
 800e2bc:	0018      	movs	r0, r3
 800e2be:	f005 f93d 	bl	801353c <LoRaMacMlmeRequest>
      }
      break;
 800e2c2:	e0bc      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800e2c4:	4b59      	ldr	r3, [pc, #356]	@ (800e42c <LmhpComplianceOnMcpsIndication+0x39c>)
 800e2c6:	0018      	movs	r0, r3
 800e2c8:	f00d fec4 	bl	801c054 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800e2cc:	4b54      	ldr	r3, [pc, #336]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800e2d2:	4b53      	ldr	r3, [pc, #332]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800e2d8:	2108      	movs	r1, #8
 800e2da:	187b      	adds	r3, r7, r1
 800e2dc:	2204      	movs	r2, #4
 800e2de:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e2e0:	4b50      	ldr	r3, [pc, #320]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	781a      	ldrb	r2, [r3, #0]
 800e2e6:	187b      	adds	r3, r7, r1
 800e2e8:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e2ea:	187b      	adds	r3, r7, r1
 800e2ec:	0018      	movs	r0, r3
 800e2ee:	f004 fd9f 	bl	8012e30 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800e2f2:	4b4c      	ldr	r3, [pc, #304]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	785b      	ldrb	r3, [r3, #1]
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	f005 fbc5 	bl	8013a88 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800e2fe:	4b49      	ldr	r3, [pc, #292]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d003      	beq.n	800e310 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800e308:	4b46      	ldr	r3, [pc, #280]	@ (800e424 <LmhpComplianceOnMcpsIndication+0x394>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800e310:	4b49      	ldr	r3, [pc, #292]	@ (800e438 <LmhpComplianceOnMcpsIndication+0x3a8>)
 800e312:	6a1b      	ldr	r3, [r3, #32]
 800e314:	2002      	movs	r0, #2
 800e316:	4798      	blx	r3
      }
      break;
 800e318:	e091      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	7b1b      	ldrb	r3, [r3, #12]
 800e31e:	2b03      	cmp	r3, #3
 800e320:	d114      	bne.n	800e34c <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800e322:	2154      	movs	r1, #84	@ 0x54
 800e324:	187b      	adds	r3, r7, r1
 800e326:	2205      	movs	r2, #5
 800e328:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	3301      	adds	r3, #1
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	021b      	lsls	r3, r3, #8
 800e334:	b21a      	sxth	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	3302      	adds	r3, #2
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	b21b      	sxth	r3, r3
 800e340:	4313      	orrs	r3, r2
 800e342:	b21b      	sxth	r3, r3
 800e344:	b29a      	uxth	r2, r3
 800e346:	187b      	adds	r3, r7, r1
 800e348:	809a      	strh	r2, [r3, #4]
 800e34a:	e031      	b.n	800e3b0 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	7b1b      	ldrb	r3, [r3, #12]
 800e350:	2b07      	cmp	r3, #7
 800e352:	d12d      	bne.n	800e3b0 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800e354:	2154      	movs	r1, #84	@ 0x54
 800e356:	187b      	adds	r3, r7, r1
 800e358:	2206      	movs	r2, #6
 800e35a:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	3301      	adds	r3, #1
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	021b      	lsls	r3, r3, #8
 800e366:	b21a      	sxth	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	3302      	adds	r3, #2
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	b21b      	sxth	r3, r3
 800e372:	4313      	orrs	r3, r2
 800e374:	b21b      	sxth	r3, r3
 800e376:	b29a      	uxth	r2, r3
 800e378:	187b      	adds	r3, r7, r1
 800e37a:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	3303      	adds	r3, #3
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	041a      	lsls	r2, r3, #16
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	3304      	adds	r3, #4
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	021b      	lsls	r3, r3, #8
 800e390:	431a      	orrs	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	3305      	adds	r3, #5
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	4313      	orrs	r3, r2
 800e39c:	001a      	movs	r2, r3
 800e39e:	2364      	movs	r3, #100	@ 0x64
 800e3a0:	435a      	muls	r2, r3
 800e3a2:	187b      	adds	r3, r7, r1
 800e3a4:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	799a      	ldrb	r2, [r3, #6]
 800e3ac:	187b      	adds	r3, r7, r1
 800e3ae:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800e3b0:	2354      	movs	r3, #84	@ 0x54
 800e3b2:	18fb      	adds	r3, r7, r3
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	f005 f8c1 	bl	801353c <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800e3ba:	4b19      	ldr	r3, [pc, #100]	@ (800e420 <LmhpComplianceOnMcpsIndication+0x390>)
 800e3bc:	2201      	movs	r2, #1
 800e3be:	709a      	strb	r2, [r3, #2]
      }
      break;
 800e3c0:	e03d      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800e3c2:	2140      	movs	r1, #64	@ 0x40
 800e3c4:	187b      	adds	r3, r7, r1
 800e3c6:	220a      	movs	r2, #10
 800e3c8:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800e3ca:	187b      	adds	r3, r7, r1
 800e3cc:	0018      	movs	r0, r3
 800e3ce:	f005 f8b5 	bl	801353c <LoRaMacMlmeRequest>
      }
      break;
 800e3d2:	e034      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800e3d4:	2108      	movs	r1, #8
 800e3d6:	187b      	adds	r3, r7, r1
 800e3d8:	2200      	movs	r2, #0
 800e3da:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	781a      	ldrb	r2, [r3, #0]
 800e3e4:	187b      	adds	r3, r7, r1
 800e3e6:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e3e8:	187b      	adds	r3, r7, r1
 800e3ea:	0018      	movs	r0, r3
 800e3ec:	f004 fd20 	bl	8012e30 <LoRaMacMibSetRequestConfirm>
      }
      break;
 800e3f0:	e025      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e3f2:	212c      	movs	r1, #44	@ 0x2c
 800e3f4:	187b      	adds	r3, r7, r1
 800e3f6:	220d      	movs	r2, #13
 800e3f8:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	785a      	ldrb	r2, [r3, #1]
 800e400:	187b      	adds	r3, r7, r1
 800e402:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800e404:	187b      	adds	r3, r7, r1
 800e406:	0018      	movs	r0, r3
 800e408:	f005 f898 	bl	801353c <LoRaMacMlmeRequest>
      }
      break;
 800e40c:	e017      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e40e:	46c0      	nop			@ (mov r8, r8)
 800e410:	e015      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e412:	46c0      	nop			@ (mov r8, r8)
 800e414:	e013      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e416:	46c0      	nop			@ (mov r8, r8)
 800e418:	e011      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800e41a:	46c0      	nop			@ (mov r8, r8)
 800e41c:	e00f      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x3ae>
 800e41e:	46c0      	nop			@ (mov r8, r8)
 800e420:	20000b40 	.word	0x20000b40
 800e424:	20000b54 	.word	0x20000b54
 800e428:	0800e44f 	.word	0x0800e44f
 800e42c:	20000b28 	.word	0x20000b28
 800e430:	00004e20 	.word	0x00004e20
 800e434:	0801e118 	.word	0x0801e118
 800e438:	20000178 	.word	0x20000178
      break;
 800e43c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800e43e:	46bd      	mov	sp, r7
 800e440:	b020      	add	sp, #128	@ 0x80
 800e442:	bd80      	pop	{r7, pc}

0800e444 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800e448:	46c0      	nop			@ (mov r8, r8)
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b082      	sub	sp, #8
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800e456:	f7ff fdad 	bl	800dfb4 <LmhpComplianceTxProcess>
}
 800e45a:	46c0      	nop			@ (mov r8, r8)
 800e45c:	46bd      	mov	sp, r7
 800e45e:	b002      	add	sp, #8
 800e460:	bd80      	pop	{r7, pc}

0800e462 <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b082      	sub	sp, #8
 800e466:	af00      	add	r7, sp, #0
 800e468:	0002      	movs	r2, r0
 800e46a:	1dfb      	adds	r3, r7, #7
 800e46c:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e46e:	46c0      	nop			@ (mov r8, r8)
 800e470:	46bd      	mov	sp, r7
 800e472:	b002      	add	sp, #8
 800e474:	bd80      	pop	{r7, pc}

0800e476 <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800e476:	b580      	push	{r7, lr}
 800e478:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800e47a:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e47c:	0018      	movs	r0, r3
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800e486:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e488:	0018      	movs	r0, r3
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
	...

0800e490 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800e490:	b5b0      	push	{r4, r5, r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e496:	f00d ff0d 	bl	801c2b4 <UTIL_TIMER_GetCurrentTime>
 800e49a:	0002      	movs	r2, r0
 800e49c:	4b14      	ldr	r3, [pc, #80]	@ (800e4f0 <OnRadioTxDone+0x60>)
 800e49e:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e4a0:	4d14      	ldr	r5, [pc, #80]	@ (800e4f4 <OnRadioTxDone+0x64>)
 800e4a2:	23ce      	movs	r3, #206	@ 0xce
 800e4a4:	009c      	lsls	r4, r3, #2
 800e4a6:	003b      	movs	r3, r7
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	f00d fcb1 	bl	801be10 <SysTimeGet>
 800e4ae:	003a      	movs	r2, r7
 800e4b0:	192b      	adds	r3, r5, r4
 800e4b2:	ca03      	ldmia	r2!, {r0, r1}
 800e4b4:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e4b6:	4b10      	ldr	r3, [pc, #64]	@ (800e4f8 <OnRadioTxDone+0x68>)
 800e4b8:	781a      	ldrb	r2, [r3, #0]
 800e4ba:	2110      	movs	r1, #16
 800e4bc:	430a      	orrs	r2, r1
 800e4be:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e4c0:	4a0c      	ldr	r2, [pc, #48]	@ (800e4f4 <OnRadioTxDone+0x64>)
 800e4c2:	23d2      	movs	r3, #210	@ 0xd2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	58d3      	ldr	r3, [r2, r3]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00c      	beq.n	800e4e6 <OnRadioTxDone+0x56>
 800e4cc:	4a09      	ldr	r2, [pc, #36]	@ (800e4f4 <OnRadioTxDone+0x64>)
 800e4ce:	23d2      	movs	r3, #210	@ 0xd2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	58d3      	ldr	r3, [r2, r3]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d005      	beq.n	800e4e6 <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e4da:	4a06      	ldr	r2, [pc, #24]	@ (800e4f4 <OnRadioTxDone+0x64>)
 800e4dc:	23d2      	movs	r3, #210	@ 0xd2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	58d3      	ldr	r3, [r2, r3]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800e4e6:	46c0      	nop			@ (mov r8, r8)
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	b002      	add	sp, #8
 800e4ec:	bdb0      	pop	{r4, r5, r7, pc}
 800e4ee:	46c0      	nop			@ (mov r8, r8)
 800e4f0:	20000b58 	.word	0x20000b58
 800e4f4:	20000b6c 	.word	0x20000b6c
 800e4f8:	2000119c 	.word	0x2000119c

0800e4fc <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e4fc:	b5b0      	push	{r4, r5, r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	000c      	movs	r4, r1
 800e506:	0010      	movs	r0, r2
 800e508:	0019      	movs	r1, r3
 800e50a:	250a      	movs	r5, #10
 800e50c:	197b      	adds	r3, r7, r5
 800e50e:	1c22      	adds	r2, r4, #0
 800e510:	801a      	strh	r2, [r3, #0]
 800e512:	2408      	movs	r4, #8
 800e514:	193b      	adds	r3, r7, r4
 800e516:	1c02      	adds	r2, r0, #0
 800e518:	801a      	strh	r2, [r3, #0]
 800e51a:	1dfb      	adds	r3, r7, #7
 800e51c:	1c0a      	adds	r2, r1, #0
 800e51e:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e520:	f00d fec8 	bl	801c2b4 <UTIL_TIMER_GetCurrentTime>
 800e524:	0002      	movs	r2, r0
 800e526:	4b16      	ldr	r3, [pc, #88]	@ (800e580 <OnRadioRxDone+0x84>)
 800e528:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800e52a:	4b15      	ldr	r3, [pc, #84]	@ (800e580 <OnRadioRxDone+0x84>)
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800e530:	4b13      	ldr	r3, [pc, #76]	@ (800e580 <OnRadioRxDone+0x84>)
 800e532:	197a      	adds	r2, r7, r5
 800e534:	8812      	ldrh	r2, [r2, #0]
 800e536:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800e538:	4b11      	ldr	r3, [pc, #68]	@ (800e580 <OnRadioRxDone+0x84>)
 800e53a:	193a      	adds	r2, r7, r4
 800e53c:	8812      	ldrh	r2, [r2, #0]
 800e53e:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800e540:	4b0f      	ldr	r3, [pc, #60]	@ (800e580 <OnRadioRxDone+0x84>)
 800e542:	1dfa      	adds	r2, r7, #7
 800e544:	7812      	ldrb	r2, [r2, #0]
 800e546:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e548:	4b0e      	ldr	r3, [pc, #56]	@ (800e584 <OnRadioRxDone+0x88>)
 800e54a:	781a      	ldrb	r2, [r3, #0]
 800e54c:	2108      	movs	r1, #8
 800e54e:	430a      	orrs	r2, r1
 800e550:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e552:	4a0d      	ldr	r2, [pc, #52]	@ (800e588 <OnRadioRxDone+0x8c>)
 800e554:	23d2      	movs	r3, #210	@ 0xd2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	58d3      	ldr	r3, [r2, r3]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00c      	beq.n	800e578 <OnRadioRxDone+0x7c>
 800e55e:	4a0a      	ldr	r2, [pc, #40]	@ (800e588 <OnRadioRxDone+0x8c>)
 800e560:	23d2      	movs	r3, #210	@ 0xd2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	58d3      	ldr	r3, [r2, r3]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d005      	beq.n	800e578 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e56c:	4a06      	ldr	r2, [pc, #24]	@ (800e588 <OnRadioRxDone+0x8c>)
 800e56e:	23d2      	movs	r3, #210	@ 0xd2
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	58d3      	ldr	r3, [r2, r3]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800e578:	46c0      	nop			@ (mov r8, r8)
 800e57a:	46bd      	mov	sp, r7
 800e57c:	b004      	add	sp, #16
 800e57e:	bdb0      	pop	{r4, r5, r7, pc}
 800e580:	20000b5c 	.word	0x20000b5c
 800e584:	2000119c 	.word	0x2000119c
 800e588:	20000b6c 	.word	0x20000b6c

0800e58c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e590:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c8 <OnRadioTxTimeout+0x3c>)
 800e592:	781a      	ldrb	r2, [r3, #0]
 800e594:	2104      	movs	r1, #4
 800e596:	430a      	orrs	r2, r1
 800e598:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e59a:	4a0c      	ldr	r2, [pc, #48]	@ (800e5cc <OnRadioTxTimeout+0x40>)
 800e59c:	23d2      	movs	r3, #210	@ 0xd2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	58d3      	ldr	r3, [r2, r3]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00c      	beq.n	800e5c0 <OnRadioTxTimeout+0x34>
 800e5a6:	4a09      	ldr	r2, [pc, #36]	@ (800e5cc <OnRadioTxTimeout+0x40>)
 800e5a8:	23d2      	movs	r3, #210	@ 0xd2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	58d3      	ldr	r3, [r2, r3]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d005      	beq.n	800e5c0 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e5b4:	4a05      	ldr	r2, [pc, #20]	@ (800e5cc <OnRadioTxTimeout+0x40>)
 800e5b6:	23d2      	movs	r3, #210	@ 0xd2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	58d3      	ldr	r3, [r2, r3]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800e5c0:	46c0      	nop			@ (mov r8, r8)
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	46c0      	nop			@ (mov r8, r8)
 800e5c8:	2000119c 	.word	0x2000119c
 800e5cc:	20000b6c 	.word	0x20000b6c

0800e5d0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e5d4:	4b0d      	ldr	r3, [pc, #52]	@ (800e60c <OnRadioRxError+0x3c>)
 800e5d6:	781a      	ldrb	r2, [r3, #0]
 800e5d8:	2102      	movs	r1, #2
 800e5da:	430a      	orrs	r2, r1
 800e5dc:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e5de:	4a0c      	ldr	r2, [pc, #48]	@ (800e610 <OnRadioRxError+0x40>)
 800e5e0:	23d2      	movs	r3, #210	@ 0xd2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	58d3      	ldr	r3, [r2, r3]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00c      	beq.n	800e604 <OnRadioRxError+0x34>
 800e5ea:	4a09      	ldr	r2, [pc, #36]	@ (800e610 <OnRadioRxError+0x40>)
 800e5ec:	23d2      	movs	r3, #210	@ 0xd2
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	58d3      	ldr	r3, [r2, r3]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d005      	beq.n	800e604 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e5f8:	4a05      	ldr	r2, [pc, #20]	@ (800e610 <OnRadioRxError+0x40>)
 800e5fa:	23d2      	movs	r3, #210	@ 0xd2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	58d3      	ldr	r3, [r2, r3]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	4798      	blx	r3
    }
}
 800e604:	46c0      	nop			@ (mov r8, r8)
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	46c0      	nop			@ (mov r8, r8)
 800e60c:	2000119c 	.word	0x2000119c
 800e610:	20000b6c 	.word	0x20000b6c

0800e614 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e618:	4b0d      	ldr	r3, [pc, #52]	@ (800e650 <OnRadioRxTimeout+0x3c>)
 800e61a:	781a      	ldrb	r2, [r3, #0]
 800e61c:	2101      	movs	r1, #1
 800e61e:	430a      	orrs	r2, r1
 800e620:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e622:	4a0c      	ldr	r2, [pc, #48]	@ (800e654 <OnRadioRxTimeout+0x40>)
 800e624:	23d2      	movs	r3, #210	@ 0xd2
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	58d3      	ldr	r3, [r2, r3]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00c      	beq.n	800e648 <OnRadioRxTimeout+0x34>
 800e62e:	4a09      	ldr	r2, [pc, #36]	@ (800e654 <OnRadioRxTimeout+0x40>)
 800e630:	23d2      	movs	r3, #210	@ 0xd2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	58d3      	ldr	r3, [r2, r3]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d005      	beq.n	800e648 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e63c:	4a05      	ldr	r2, [pc, #20]	@ (800e654 <OnRadioRxTimeout+0x40>)
 800e63e:	23d2      	movs	r3, #210	@ 0xd2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	58d3      	ldr	r3, [r2, r3]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800e648:	46c0      	nop			@ (mov r8, r8)
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	46c0      	nop			@ (mov r8, r8)
 800e650:	2000119c 	.word	0x2000119c
 800e654:	20000b6c 	.word	0x20000b6c

0800e658 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e65c:	4b0a      	ldr	r3, [pc, #40]	@ (800e688 <UpdateRxSlotIdleState+0x30>)
 800e65e:	4a0b      	ldr	r2, [pc, #44]	@ (800e68c <UpdateRxSlotIdleState+0x34>)
 800e660:	589b      	ldr	r3, [r3, r2]
 800e662:	227c      	movs	r2, #124	@ 0x7c
 800e664:	5c9b      	ldrb	r3, [r3, r2]
 800e666:	2b02      	cmp	r3, #2
 800e668:	d005      	beq.n	800e676 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e66a:	4a07      	ldr	r2, [pc, #28]	@ (800e688 <UpdateRxSlotIdleState+0x30>)
 800e66c:	2390      	movs	r3, #144	@ 0x90
 800e66e:	00db      	lsls	r3, r3, #3
 800e670:	2106      	movs	r1, #6
 800e672:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e674:	e004      	b.n	800e680 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e676:	4a04      	ldr	r2, [pc, #16]	@ (800e688 <UpdateRxSlotIdleState+0x30>)
 800e678:	2390      	movs	r3, #144	@ 0x90
 800e67a:	00db      	lsls	r3, r3, #3
 800e67c:	2102      	movs	r1, #2
 800e67e:	54d1      	strb	r1, [r2, r3]
}
 800e680:	46c0      	nop			@ (mov r8, r8)
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	46c0      	nop			@ (mov r8, r8)
 800e688:	20000b6c 	.word	0x20000b6c
 800e68c:	00000484 	.word	0x00000484

0800e690 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e692:	b08f      	sub	sp, #60	@ 0x3c
 800e694:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e696:	4b59      	ldr	r3, [pc, #356]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e698:	4a59      	ldr	r2, [pc, #356]	@ (800e800 <ProcessRadioTxDone+0x170>)
 800e69a:	589b      	ldr	r3, [r3, r2]
 800e69c:	227c      	movs	r2, #124	@ 0x7c
 800e69e:	5c9b      	ldrb	r3, [r3, r2]
 800e6a0:	2b02      	cmp	r3, #2
 800e6a2:	d002      	beq.n	800e6aa <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800e6a4:	4b57      	ldr	r3, [pc, #348]	@ (800e804 <ProcessRadioTxDone+0x174>)
 800e6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6a8:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e6aa:	4a54      	ldr	r2, [pc, #336]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e6ac:	23ec      	movs	r3, #236	@ 0xec
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	58d2      	ldr	r2, [r2, r3]
 800e6b2:	4b55      	ldr	r3, [pc, #340]	@ (800e808 <ProcessRadioTxDone+0x178>)
 800e6b4:	0011      	movs	r1, r2
 800e6b6:	0018      	movs	r0, r3
 800e6b8:	f00d fd44 	bl	801c144 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e6bc:	4b52      	ldr	r3, [pc, #328]	@ (800e808 <ProcessRadioTxDone+0x178>)
 800e6be:	0018      	movs	r0, r3
 800e6c0:	f00d fc50 	bl	801bf64 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e6c4:	4a4d      	ldr	r2, [pc, #308]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e6c6:	23ed      	movs	r3, #237	@ 0xed
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	58d2      	ldr	r2, [r2, r3]
 800e6cc:	4b4f      	ldr	r3, [pc, #316]	@ (800e80c <ProcessRadioTxDone+0x17c>)
 800e6ce:	0011      	movs	r1, r2
 800e6d0:	0018      	movs	r0, r3
 800e6d2:	f00d fd37 	bl	801c144 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e6d6:	4b4d      	ldr	r3, [pc, #308]	@ (800e80c <ProcessRadioTxDone+0x17c>)
 800e6d8:	0018      	movs	r0, r3
 800e6da:	f00d fc43 	bl	801bf64 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800e6de:	4b47      	ldr	r3, [pc, #284]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e6e0:	4a47      	ldr	r2, [pc, #284]	@ (800e800 <ProcessRadioTxDone+0x170>)
 800e6e2:	589b      	ldr	r3, [r3, r2]
 800e6e4:	227c      	movs	r2, #124	@ 0x7c
 800e6e6:	5c9b      	ldrb	r3, [r3, r2]
 800e6e8:	2b02      	cmp	r3, #2
 800e6ea:	d004      	beq.n	800e6f6 <ProcessRadioTxDone+0x66>
 800e6ec:	4b43      	ldr	r3, [pc, #268]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e6ee:	4a48      	ldr	r2, [pc, #288]	@ (800e810 <ProcessRadioTxDone+0x180>)
 800e6f0:	5c9b      	ldrb	r3, [r3, r2]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d021      	beq.n	800e73a <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800e6f6:	2120      	movs	r1, #32
 800e6f8:	187b      	adds	r3, r7, r1
 800e6fa:	2216      	movs	r2, #22
 800e6fc:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e6fe:	4b3f      	ldr	r3, [pc, #252]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e700:	4a3f      	ldr	r2, [pc, #252]	@ (800e800 <ProcessRadioTxDone+0x170>)
 800e702:	589b      	ldr	r3, [r3, r2]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	187a      	adds	r2, r7, r1
 800e708:	0011      	movs	r1, r2
 800e70a:	0018      	movs	r0, r3
 800e70c:	f007 fca9 	bl	8016062 <RegionGetPhyParam>
 800e710:	0003      	movs	r3, r0
 800e712:	001a      	movs	r2, r3
 800e714:	211c      	movs	r1, #28
 800e716:	187b      	adds	r3, r7, r1
 800e718:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e71a:	4a38      	ldr	r2, [pc, #224]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e71c:	23ed      	movs	r3, #237	@ 0xed
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	58d2      	ldr	r2, [r2, r3]
 800e722:	187b      	adds	r3, r7, r1
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	18d2      	adds	r2, r2, r3
 800e728:	4b3a      	ldr	r3, [pc, #232]	@ (800e814 <ProcessRadioTxDone+0x184>)
 800e72a:	0011      	movs	r1, r2
 800e72c:	0018      	movs	r0, r3
 800e72e:	f00d fd09 	bl	801c144 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800e732:	4b38      	ldr	r3, [pc, #224]	@ (800e814 <ProcessRadioTxDone+0x184>)
 800e734:	0018      	movs	r0, r3
 800e736:	f00d fc15 	bl	801bf64 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800e73a:	4b30      	ldr	r3, [pc, #192]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e73c:	4a30      	ldr	r2, [pc, #192]	@ (800e800 <ProcessRadioTxDone+0x170>)
 800e73e:	589a      	ldr	r2, [r3, r2]
 800e740:	4b35      	ldr	r3, [pc, #212]	@ (800e818 <ProcessRadioTxDone+0x188>)
 800e742:	6819      	ldr	r1, [r3, #0]
 800e744:	23a8      	movs	r3, #168	@ 0xa8
 800e746:	005b      	lsls	r3, r3, #1
 800e748:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e74a:	4b2c      	ldr	r3, [pc, #176]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e74c:	4a33      	ldr	r2, [pc, #204]	@ (800e81c <ProcessRadioTxDone+0x18c>)
 800e74e:	5c9a      	ldrb	r2, [r3, r2]
 800e750:	2408      	movs	r4, #8
 800e752:	193b      	adds	r3, r7, r4
 800e754:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e756:	4b30      	ldr	r3, [pc, #192]	@ (800e818 <ProcessRadioTxDone+0x188>)
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	193b      	adds	r3, r7, r4
 800e75c:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800e75e:	2328      	movs	r3, #40	@ 0x28
 800e760:	18fb      	adds	r3, r7, r3
 800e762:	0018      	movs	r0, r3
 800e764:	f00d fb96 	bl	801be94 <SysTimeGetMcuTime>
 800e768:	4b24      	ldr	r3, [pc, #144]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e76a:	4a25      	ldr	r2, [pc, #148]	@ (800e800 <ProcessRadioTxDone+0x170>)
 800e76c:	5898      	ldr	r0, [r3, r2]
 800e76e:	193d      	adds	r5, r7, r4
 800e770:	003e      	movs	r6, r7
 800e772:	23ac      	movs	r3, #172	@ 0xac
 800e774:	0059      	lsls	r1, r3, #1
 800e776:	2328      	movs	r3, #40	@ 0x28
 800e778:	18fa      	adds	r2, r7, r3
 800e77a:	2404      	movs	r4, #4
 800e77c:	1843      	adds	r3, r0, r1
 800e77e:	191c      	adds	r4, r3, r4
 800e780:	466b      	mov	r3, sp
 800e782:	6824      	ldr	r4, [r4, #0]
 800e784:	601c      	str	r4, [r3, #0]
 800e786:	5843      	ldr	r3, [r0, r1]
 800e788:	6811      	ldr	r1, [r2, #0]
 800e78a:	6852      	ldr	r2, [r2, #4]
 800e78c:	0030      	movs	r0, r6
 800e78e:	f00d fab9 	bl	801bd04 <SysTimeSub>
 800e792:	003a      	movs	r2, r7
 800e794:	002b      	movs	r3, r5
 800e796:	330c      	adds	r3, #12
 800e798:	ca03      	ldmia	r2!, {r0, r1}
 800e79a:	c303      	stmia	r3!, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e79c:	4a17      	ldr	r2, [pc, #92]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e79e:	2383      	movs	r3, #131	@ 0x83
 800e7a0:	00db      	lsls	r3, r3, #3
 800e7a2:	58d2      	ldr	r2, [r2, r3]
 800e7a4:	2108      	movs	r1, #8
 800e7a6:	187b      	adds	r3, r7, r1
 800e7a8:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800e7aa:	187b      	adds	r3, r7, r1
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800e7b0:	4b12      	ldr	r3, [pc, #72]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e7b2:	4a13      	ldr	r2, [pc, #76]	@ (800e800 <ProcessRadioTxDone+0x170>)
 800e7b4:	589a      	ldr	r2, [r3, r2]
 800e7b6:	23b2      	movs	r3, #178	@ 0xb2
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	5cd3      	ldrb	r3, [r2, r3]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d102      	bne.n	800e7c6 <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800e7c0:	187b      	adds	r3, r7, r1
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800e7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e7c8:	4a0d      	ldr	r2, [pc, #52]	@ (800e800 <ProcessRadioTxDone+0x170>)
 800e7ca:	589b      	ldr	r3, [r3, r2]
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	2208      	movs	r2, #8
 800e7d0:	18ba      	adds	r2, r7, r2
 800e7d2:	0011      	movs	r1, r2
 800e7d4:	0018      	movs	r0, r3
 800e7d6:	f007 fc6b 	bl	80160b0 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800e7da:	4b08      	ldr	r3, [pc, #32]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e7dc:	4a0c      	ldr	r2, [pc, #48]	@ (800e810 <ProcessRadioTxDone+0x180>)
 800e7de:	5c9b      	ldrb	r3, [r3, r2]
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	4053      	eors	r3, r2
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d003      	beq.n	800e7f2 <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e7ea:	4b04      	ldr	r3, [pc, #16]	@ (800e7fc <ProcessRadioTxDone+0x16c>)
 800e7ec:	4a0c      	ldr	r2, [pc, #48]	@ (800e820 <ProcessRadioTxDone+0x190>)
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	5499      	strb	r1, [r3, r2]
    }
}
 800e7f2:	46c0      	nop			@ (mov r8, r8)
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	b00d      	add	sp, #52	@ 0x34
 800e7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7fa:	46c0      	nop			@ (mov r8, r8)
 800e7fc:	20000b6c 	.word	0x20000b6c
 800e800:	00000484 	.word	0x00000484
 800e804:	0801e62c 	.word	0x0801e62c
 800e808:	20000eec 	.word	0x20000eec
 800e80c:	20000f04 	.word	0x20000f04
 800e810:	00000414 	.word	0x00000414
 800e814:	20000f64 	.word	0x20000f64
 800e818:	20000b58 	.word	0x20000b58
 800e81c:	00000415 	.word	0x00000415
 800e820:	0000043d 	.word	0x0000043d

0800e824 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e828:	4a11      	ldr	r2, [pc, #68]	@ (800e870 <PrepareRxDoneAbort+0x4c>)
 800e82a:	23d0      	movs	r3, #208	@ 0xd0
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	58d3      	ldr	r3, [r2, r3]
 800e830:	2280      	movs	r2, #128	@ 0x80
 800e832:	431a      	orrs	r2, r3
 800e834:	0011      	movs	r1, r2
 800e836:	4a0e      	ldr	r2, [pc, #56]	@ (800e870 <PrepareRxDoneAbort+0x4c>)
 800e838:	23d0      	movs	r3, #208	@ 0xd0
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800e83e:	4b0c      	ldr	r3, [pc, #48]	@ (800e870 <PrepareRxDoneAbort+0x4c>)
 800e840:	4a0c      	ldr	r2, [pc, #48]	@ (800e874 <PrepareRxDoneAbort+0x50>)
 800e842:	5c9b      	ldrb	r3, [r3, r2]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800e848:	2000      	movs	r0, #0
 800e84a:	f001 f98d 	bl	800fb68 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e84e:	4b08      	ldr	r3, [pc, #32]	@ (800e870 <PrepareRxDoneAbort+0x4c>)
 800e850:	4a09      	ldr	r2, [pc, #36]	@ (800e878 <PrepareRxDoneAbort+0x54>)
 800e852:	5c99      	ldrb	r1, [r3, r2]
 800e854:	2002      	movs	r0, #2
 800e856:	4301      	orrs	r1, r0
 800e858:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e85a:	4b05      	ldr	r3, [pc, #20]	@ (800e870 <PrepareRxDoneAbort+0x4c>)
 800e85c:	4a06      	ldr	r2, [pc, #24]	@ (800e878 <PrepareRxDoneAbort+0x54>)
 800e85e:	5c99      	ldrb	r1, [r3, r2]
 800e860:	2020      	movs	r0, #32
 800e862:	4301      	orrs	r1, r0
 800e864:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800e866:	f7ff fef7 	bl	800e658 <UpdateRxSlotIdleState>
}
 800e86a:	46c0      	nop			@ (mov r8, r8)
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	20000b6c 	.word	0x20000b6c
 800e874:	00000414 	.word	0x00000414
 800e878:	00000481 	.word	0x00000481

0800e87c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e87e:	b0a7      	sub	sp, #156	@ 0x9c
 800e880:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e882:	2380      	movs	r3, #128	@ 0x80
 800e884:	18fb      	adds	r3, r7, r3
 800e886:	2213      	movs	r2, #19
 800e888:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e88a:	4bdf      	ldr	r3, [pc, #892]	@ (800ec08 <ProcessRadioRxDone+0x38c>)
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint16_t size = RxDoneParams.Size;
 800e890:	267a      	movs	r6, #122	@ 0x7a
 800e892:	19bb      	adds	r3, r7, r6
 800e894:	4adc      	ldr	r2, [pc, #880]	@ (800ec08 <ProcessRadioRxDone+0x38c>)
 800e896:	8912      	ldrh	r2, [r2, #8]
 800e898:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800e89a:	2478      	movs	r4, #120	@ 0x78
 800e89c:	193b      	adds	r3, r7, r4
 800e89e:	4ada      	ldr	r2, [pc, #872]	@ (800ec08 <ProcessRadioRxDone+0x38c>)
 800e8a0:	8952      	ldrh	r2, [r2, #10]
 800e8a2:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800e8a4:	2577      	movs	r5, #119	@ 0x77
 800e8a6:	197b      	adds	r3, r7, r5
 800e8a8:	4ad7      	ldr	r2, [pc, #860]	@ (800ec08 <ProcessRadioRxDone+0x38c>)
 800e8aa:	7b12      	ldrb	r2, [r2, #12]
 800e8ac:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800e8ae:	2376      	movs	r3, #118	@ 0x76
 800e8b0:	18fb      	adds	r3, r7, r3
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800e8ba:	4bd4      	ldr	r3, [pc, #848]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e8bc:	4ad4      	ldr	r2, [pc, #848]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800e8be:	589b      	ldr	r3, [r3, r2]
 800e8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8c2:	2284      	movs	r2, #132	@ 0x84
 800e8c4:	18ba      	adds	r2, r7, r2
 800e8c6:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800e8c8:	2383      	movs	r3, #131	@ 0x83
 800e8ca:	18fb      	adds	r3, r7, r3
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e8d0:	2382      	movs	r3, #130	@ 0x82
 800e8d2:	18fb      	adds	r3, r7, r3
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800e8d8:	4acc      	ldr	r2, [pc, #816]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e8da:	2388      	movs	r3, #136	@ 0x88
 800e8dc:	00db      	lsls	r3, r3, #3
 800e8de:	2100      	movs	r1, #0
 800e8e0:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800e8e2:	4bca      	ldr	r3, [pc, #808]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e8e4:	193a      	adds	r2, r7, r4
 800e8e6:	49cb      	ldr	r1, [pc, #812]	@ (800ec14 <ProcessRadioRxDone+0x398>)
 800e8e8:	8812      	ldrh	r2, [r2, #0]
 800e8ea:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800e8ec:	4bc7      	ldr	r3, [pc, #796]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e8ee:	197a      	adds	r2, r7, r5
 800e8f0:	49c9      	ldr	r1, [pc, #804]	@ (800ec18 <ProcessRadioRxDone+0x39c>)
 800e8f2:	7812      	ldrb	r2, [r2, #0]
 800e8f4:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800e8f6:	4ac5      	ldr	r2, [pc, #788]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e8f8:	2390      	movs	r3, #144	@ 0x90
 800e8fa:	00db      	lsls	r3, r3, #3
 800e8fc:	5cd1      	ldrb	r1, [r2, r3]
 800e8fe:	4bc3      	ldr	r3, [pc, #780]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e900:	4ac6      	ldr	r2, [pc, #792]	@ (800ec1c <ProcessRadioRxDone+0x3a0>)
 800e902:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800e904:	4bc1      	ldr	r3, [pc, #772]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e906:	4ac6      	ldr	r2, [pc, #792]	@ (800ec20 <ProcessRadioRxDone+0x3a4>)
 800e908:	2100      	movs	r1, #0
 800e90a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800e90c:	4bbf      	ldr	r3, [pc, #764]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e90e:	4ac5      	ldr	r2, [pc, #788]	@ (800ec24 <ProcessRadioRxDone+0x3a8>)
 800e910:	2100      	movs	r1, #0
 800e912:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800e914:	4bbd      	ldr	r3, [pc, #756]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e916:	4ac4      	ldr	r2, [pc, #784]	@ (800ec28 <ProcessRadioRxDone+0x3ac>)
 800e918:	2100      	movs	r1, #0
 800e91a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800e91c:	4bbb      	ldr	r3, [pc, #748]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e91e:	4ac3      	ldr	r2, [pc, #780]	@ (800ec2c <ProcessRadioRxDone+0x3b0>)
 800e920:	2100      	movs	r1, #0
 800e922:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800e924:	4ab9      	ldr	r2, [pc, #740]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e926:	2385      	movs	r3, #133	@ 0x85
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	2100      	movs	r1, #0
 800e92c:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800e92e:	4bb7      	ldr	r3, [pc, #732]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e930:	4abf      	ldr	r2, [pc, #764]	@ (800ec30 <ProcessRadioRxDone+0x3b4>)
 800e932:	2100      	movs	r1, #0
 800e934:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800e936:	4bb5      	ldr	r3, [pc, #724]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e938:	4abe      	ldr	r2, [pc, #760]	@ (800ec34 <ProcessRadioRxDone+0x3b8>)
 800e93a:	2100      	movs	r1, #0
 800e93c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e93e:	4ab3      	ldr	r2, [pc, #716]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e940:	2386      	movs	r3, #134	@ 0x86
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	2100      	movs	r1, #0
 800e946:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e948:	4bb0      	ldr	r3, [pc, #704]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e94a:	4abb      	ldr	r2, [pc, #748]	@ (800ec38 <ProcessRadioRxDone+0x3bc>)
 800e94c:	2100      	movs	r1, #0
 800e94e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800e950:	4bae      	ldr	r3, [pc, #696]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e952:	4aba      	ldr	r2, [pc, #744]	@ (800ec3c <ProcessRadioRxDone+0x3c0>)
 800e954:	2100      	movs	r1, #0
 800e956:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e958:	4aac      	ldr	r2, [pc, #688]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e95a:	2387      	movs	r3, #135	@ 0x87
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	2100      	movs	r1, #0
 800e960:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800e962:	4bb7      	ldr	r3, [pc, #732]	@ (800ec40 <ProcessRadioRxDone+0x3c4>)
 800e964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e966:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e968:	4bb6      	ldr	r3, [pc, #728]	@ (800ec44 <ProcessRadioRxDone+0x3c8>)
 800e96a:	0018      	movs	r0, r3
 800e96c:	f00d fb72 	bl	801c054 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e970:	19bb      	adds	r3, r7, r6
 800e972:	881a      	ldrh	r2, [r3, #0]
 800e974:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e976:	0011      	movs	r1, r2
 800e978:	0018      	movs	r0, r3
 800e97a:	f005 f9f3 	bl	8013d64 <LoRaMacClassBRxBeacon>
 800e97e:	1e03      	subs	r3, r0, #0
 800e980:	d00c      	beq.n	800e99c <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e982:	4ba2      	ldr	r3, [pc, #648]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e984:	193a      	adds	r2, r7, r4
 800e986:	49b0      	ldr	r1, [pc, #704]	@ (800ec48 <ProcessRadioRxDone+0x3cc>)
 800e988:	8812      	ldrh	r2, [r2, #0]
 800e98a:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e98c:	4a9f      	ldr	r2, [pc, #636]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e98e:	1979      	adds	r1, r7, r5
 800e990:	238f      	movs	r3, #143	@ 0x8f
 800e992:	00db      	lsls	r3, r3, #3
 800e994:	7809      	ldrb	r1, [r1, #0]
 800e996:	54d1      	strb	r1, [r2, r3]
        return;
 800e998:	f000 fc9e 	bl	800f2d8 <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800e99c:	4b9b      	ldr	r3, [pc, #620]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e99e:	4a9c      	ldr	r2, [pc, #624]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800e9a0:	589b      	ldr	r3, [r3, r2]
 800e9a2:	227c      	movs	r2, #124	@ 0x7c
 800e9a4:	5c9b      	ldrb	r3, [r3, r2]
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d11c      	bne.n	800e9e4 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e9aa:	f005 f9ed 	bl	8013d88 <LoRaMacClassBIsPingExpected>
 800e9ae:	1e03      	subs	r3, r0, #0
 800e9b0:	d00a      	beq.n	800e9c8 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	f005 f9a4 	bl	8013d00 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	f005 f9c3 	bl	8013d44 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e9be:	4b93      	ldr	r3, [pc, #588]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e9c0:	4a96      	ldr	r2, [pc, #600]	@ (800ec1c <ProcessRadioRxDone+0x3a0>)
 800e9c2:	2104      	movs	r1, #4
 800e9c4:	5499      	strb	r1, [r3, r2]
 800e9c6:	e00d      	b.n	800e9e4 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e9c8:	f005 f9e4 	bl	8013d94 <LoRaMacClassBIsMulticastExpected>
 800e9cc:	1e03      	subs	r3, r0, #0
 800e9ce:	d009      	beq.n	800e9e4 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	f005 f99f 	bl	8013d14 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	f005 f9bc 	bl	8013d54 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e9dc:	4b8b      	ldr	r3, [pc, #556]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800e9de:	4a8f      	ldr	r2, [pc, #572]	@ (800ec1c <ProcessRadioRxDone+0x3a0>)
 800e9e0:	2105      	movs	r1, #5
 800e9e2:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e9e4:	2276      	movs	r2, #118	@ 0x76
 800e9e6:	18bb      	adds	r3, r7, r2
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	18ba      	adds	r2, r7, r2
 800e9ec:	1c59      	adds	r1, r3, #1
 800e9ee:	7011      	strb	r1, [r2, #0]
 800e9f0:	001a      	movs	r2, r3
 800e9f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e9f4:	189b      	adds	r3, r3, r2
 800e9f6:	781a      	ldrb	r2, [r3, #0]
 800e9f8:	2174      	movs	r1, #116	@ 0x74
 800e9fa:	187b      	adds	r3, r7, r1
 800e9fc:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800e9fe:	187b      	adds	r3, r7, r1
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	061b      	lsls	r3, r3, #24
 800ea04:	0f5b      	lsrs	r3, r3, #29
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	2b07      	cmp	r3, #7
 800ea0a:	d101      	bne.n	800ea10 <ProcessRadioRxDone+0x194>
 800ea0c:	f000 fc0c 	bl	800f228 <ProcessRadioRxDone+0x9ac>
 800ea10:	dd01      	ble.n	800ea16 <ProcessRadioRxDone+0x19a>
 800ea12:	f000 fc38 	bl	800f286 <ProcessRadioRxDone+0xa0a>
 800ea16:	2b05      	cmp	r3, #5
 800ea18:	d100      	bne.n	800ea1c <ProcessRadioRxDone+0x1a0>
 800ea1a:	e119      	b.n	800ec50 <ProcessRadioRxDone+0x3d4>
 800ea1c:	dd01      	ble.n	800ea22 <ProcessRadioRxDone+0x1a6>
 800ea1e:	f000 fc32 	bl	800f286 <ProcessRadioRxDone+0xa0a>
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d004      	beq.n	800ea30 <ProcessRadioRxDone+0x1b4>
 800ea26:	2b03      	cmp	r3, #3
 800ea28:	d100      	bne.n	800ea2c <ProcessRadioRxDone+0x1b0>
 800ea2a:	e115      	b.n	800ec58 <ProcessRadioRxDone+0x3dc>
 800ea2c:	f000 fc2b 	bl	800f286 <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ea30:	237a      	movs	r3, #122	@ 0x7a
 800ea32:	18fb      	adds	r3, r7, r3
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	2b10      	cmp	r3, #16
 800ea38:	d807      	bhi.n	800ea4a <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea3a:	4b74      	ldr	r3, [pc, #464]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800ea3c:	4a83      	ldr	r2, [pc, #524]	@ (800ec4c <ProcessRadioRxDone+0x3d0>)
 800ea3e:	2101      	movs	r1, #1
 800ea40:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ea42:	f7ff feef 	bl	800e824 <PrepareRxDoneAbort>
                return;
 800ea46:	f000 fc47 	bl	800f2d8 <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800ea4a:	2108      	movs	r1, #8
 800ea4c:	187b      	adds	r3, r7, r1
 800ea4e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ea50:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800ea52:	237a      	movs	r3, #122	@ 0x7a
 800ea54:	18fb      	adds	r3, r7, r3
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	b2da      	uxtb	r2, r3
 800ea5a:	187b      	adds	r3, r7, r1
 800ea5c:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800ea5e:	4b6b      	ldr	r3, [pc, #428]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800ea60:	4a6b      	ldr	r2, [pc, #428]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800ea62:	589a      	ldr	r2, [r3, r2]
 800ea64:	23b2      	movs	r3, #178	@ 0xb2
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	5cd3      	ldrb	r3, [r2, r3]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d007      	beq.n	800ea7e <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea6e:	4b67      	ldr	r3, [pc, #412]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800ea70:	4a76      	ldr	r2, [pc, #472]	@ (800ec4c <ProcessRadioRxDone+0x3d0>)
 800ea72:	2101      	movs	r1, #1
 800ea74:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ea76:	f7ff fed5 	bl	800e824 <PrepareRxDoneAbort>
                return;
 800ea7a:	f000 fc2d 	bl	800f2d8 <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ea7e:	f7fe fbf1 	bl	800d264 <SecureElementGetJoinEui>
 800ea82:	0001      	movs	r1, r0
 800ea84:	2680      	movs	r6, #128	@ 0x80
 800ea86:	19bc      	adds	r4, r7, r6
 800ea88:	2508      	movs	r5, #8
 800ea8a:	197b      	adds	r3, r7, r5
 800ea8c:	001a      	movs	r2, r3
 800ea8e:	20ff      	movs	r0, #255	@ 0xff
 800ea90:	f006 fc9a 	bl	80153c8 <LoRaMacCryptoHandleJoinAccept>
 800ea94:	0003      	movs	r3, r0
 800ea96:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ea98:	19bb      	adds	r3, r7, r6
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d000      	beq.n	800eaa2 <ProcessRadioRxDone+0x226>
 800eaa0:	e0a7      	b.n	800ebf2 <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800eaa2:	002c      	movs	r4, r5
 800eaa4:	193b      	adds	r3, r7, r4
 800eaa6:	7a59      	ldrb	r1, [r3, #9]
 800eaa8:	4b58      	ldr	r3, [pc, #352]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eaaa:	4a59      	ldr	r2, [pc, #356]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eaac:	589b      	ldr	r3, [r3, r2]
 800eaae:	000a      	movs	r2, r1
 800eab0:	649a      	str	r2, [r3, #72]	@ 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800eab2:	4b56      	ldr	r3, [pc, #344]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eab4:	4a56      	ldr	r2, [pc, #344]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eab6:	589b      	ldr	r3, [r3, r2]
 800eab8:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800eaba:	193b      	adds	r3, r7, r4
 800eabc:	7a9b      	ldrb	r3, [r3, #10]
 800eabe:	021a      	lsls	r2, r3, #8
 800eac0:	4b52      	ldr	r3, [pc, #328]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eac2:	4853      	ldr	r0, [pc, #332]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eac4:	581b      	ldr	r3, [r3, r0]
 800eac6:	430a      	orrs	r2, r1
 800eac8:	649a      	str	r2, [r3, #72]	@ 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800eaca:	4b50      	ldr	r3, [pc, #320]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eacc:	4a50      	ldr	r2, [pc, #320]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eace:	589b      	ldr	r3, [r3, r2]
 800ead0:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800ead2:	193b      	adds	r3, r7, r4
 800ead4:	7adb      	ldrb	r3, [r3, #11]
 800ead6:	041a      	lsls	r2, r3, #16
 800ead8:	4b4c      	ldr	r3, [pc, #304]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eada:	484d      	ldr	r0, [pc, #308]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eadc:	581b      	ldr	r3, [r3, r0]
 800eade:	430a      	orrs	r2, r1
 800eae0:	649a      	str	r2, [r3, #72]	@ 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800eae2:	4b4a      	ldr	r3, [pc, #296]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eae4:	4a4a      	ldr	r2, [pc, #296]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eae6:	589b      	ldr	r3, [r3, r2]
 800eae8:	0020      	movs	r0, r4
 800eaea:	183a      	adds	r2, r7, r0
 800eaec:	68d2      	ldr	r2, [r2, #12]
 800eaee:	64da      	str	r2, [r3, #76]	@ 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800eaf0:	183b      	adds	r3, r7, r0
 800eaf2:	7c1b      	ldrb	r3, [r3, #16]
 800eaf4:	065b      	lsls	r3, r3, #25
 800eaf6:	0f5b      	lsrs	r3, r3, #29
 800eaf8:	b2d9      	uxtb	r1, r3
 800eafa:	4b44      	ldr	r3, [pc, #272]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eafc:	4a44      	ldr	r2, [pc, #272]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eafe:	589b      	ldr	r3, [r3, r2]
 800eb00:	22a5      	movs	r2, #165	@ 0xa5
 800eb02:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800eb04:	183b      	adds	r3, r7, r0
 800eb06:	7c1b      	ldrb	r3, [r3, #16]
 800eb08:	071b      	lsls	r3, r3, #28
 800eb0a:	0f1b      	lsrs	r3, r3, #28
 800eb0c:	b2d9      	uxtb	r1, r3
 800eb0e:	4b3f      	ldr	r3, [pc, #252]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb10:	4a3f      	ldr	r2, [pc, #252]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb12:	589b      	ldr	r3, [r3, r2]
 800eb14:	22ac      	movs	r2, #172	@ 0xac
 800eb16:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800eb18:	183b      	adds	r3, r7, r0
 800eb1a:	7c1b      	ldrb	r3, [r3, #16]
 800eb1c:	071b      	lsls	r3, r3, #28
 800eb1e:	0f1b      	lsrs	r3, r3, #28
 800eb20:	b2d9      	uxtb	r1, r3
 800eb22:	4b3a      	ldr	r3, [pc, #232]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb24:	4a3a      	ldr	r2, [pc, #232]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb26:	589b      	ldr	r3, [r3, r2]
 800eb28:	22b4      	movs	r2, #180	@ 0xb4
 800eb2a:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800eb2c:	183b      	adds	r3, r7, r0
 800eb2e:	7c59      	ldrb	r1, [r3, #17]
 800eb30:	4b36      	ldr	r3, [pc, #216]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb32:	4a37      	ldr	r2, [pc, #220]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb34:	589b      	ldr	r3, [r3, r2]
 800eb36:	2294      	movs	r2, #148	@ 0x94
 800eb38:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800eb3a:	4b34      	ldr	r3, [pc, #208]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb3c:	4a34      	ldr	r2, [pc, #208]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb3e:	589b      	ldr	r3, [r3, r2]
 800eb40:	2294      	movs	r2, #148	@ 0x94
 800eb42:	589b      	ldr	r3, [r3, r2]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d105      	bne.n	800eb54 <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800eb48:	4b30      	ldr	r3, [pc, #192]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb4a:	4a31      	ldr	r2, [pc, #196]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb4c:	589b      	ldr	r3, [r3, r2]
 800eb4e:	2294      	movs	r2, #148	@ 0x94
 800eb50:	2101      	movs	r1, #1
 800eb52:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800eb54:	4b2d      	ldr	r3, [pc, #180]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb56:	4a2e      	ldr	r2, [pc, #184]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb58:	589b      	ldr	r3, [r3, r2]
 800eb5a:	2294      	movs	r2, #148	@ 0x94
 800eb5c:	589a      	ldr	r2, [r3, r2]
 800eb5e:	4b2b      	ldr	r3, [pc, #172]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb60:	492b      	ldr	r1, [pc, #172]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb62:	5859      	ldr	r1, [r3, r1]
 800eb64:	0013      	movs	r3, r2
 800eb66:	015b      	lsls	r3, r3, #5
 800eb68:	1a9b      	subs	r3, r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	189b      	adds	r3, r3, r2
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	001a      	movs	r2, r3
 800eb72:	2394      	movs	r3, #148	@ 0x94
 800eb74:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800eb76:	4b25      	ldr	r3, [pc, #148]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb78:	4a25      	ldr	r2, [pc, #148]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb7a:	589b      	ldr	r3, [r3, r2]
 800eb7c:	2294      	movs	r2, #148	@ 0x94
 800eb7e:	589b      	ldr	r3, [r3, r2]
 800eb80:	4a22      	ldr	r2, [pc, #136]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb82:	4923      	ldr	r1, [pc, #140]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb84:	5852      	ldr	r2, [r2, r1]
 800eb86:	21fa      	movs	r1, #250	@ 0xfa
 800eb88:	0089      	lsls	r1, r1, #2
 800eb8a:	468c      	mov	ip, r1
 800eb8c:	4463      	add	r3, ip
 800eb8e:	2198      	movs	r1, #152	@ 0x98
 800eb90:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800eb92:	4b1e      	ldr	r3, [pc, #120]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800eb94:	4a1e      	ldr	r2, [pc, #120]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800eb96:	589a      	ldr	r2, [r3, r2]
 800eb98:	23b1      	movs	r3, #177	@ 0xb1
 800eb9a:	005b      	lsls	r3, r3, #1
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800eba0:	216c      	movs	r1, #108	@ 0x6c
 800eba2:	187b      	adds	r3, r7, r1
 800eba4:	2208      	movs	r2, #8
 800eba6:	18ba      	adds	r2, r7, r2
 800eba8:	3212      	adds	r2, #18
 800ebaa:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ebac:	237a      	movs	r3, #122	@ 0x7a
 800ebae:	18fb      	adds	r3, r7, r3
 800ebb0:	881b      	ldrh	r3, [r3, #0]
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	3b11      	subs	r3, #17
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	187b      	adds	r3, r7, r1
 800ebba:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800ebbc:	4b13      	ldr	r3, [pc, #76]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800ebbe:	4a14      	ldr	r2, [pc, #80]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800ebc0:	589b      	ldr	r3, [r3, r2]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	187a      	adds	r2, r7, r1
 800ebc6:	0011      	movs	r1, r2
 800ebc8:	0018      	movs	r0, r3
 800ebca:	f007 facd 	bl	8016168 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ebce:	4b0f      	ldr	r3, [pc, #60]	@ (800ec0c <ProcessRadioRxDone+0x390>)
 800ebd0:	4a0f      	ldr	r2, [pc, #60]	@ (800ec10 <ProcessRadioRxDone+0x394>)
 800ebd2:	589a      	ldr	r2, [r3, r2]
 800ebd4:	23b2      	movs	r3, #178	@ 0xb2
 800ebd6:	005b      	lsls	r3, r3, #1
 800ebd8:	2102      	movs	r1, #2
 800ebda:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ebdc:	2001      	movs	r0, #1
 800ebde:	f005 fe4b 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 800ebe2:	1e03      	subs	r3, r0, #0
 800ebe4:	d100      	bne.n	800ebe8 <ProcessRadioRxDone+0x36c>
 800ebe6:	e355      	b.n	800f294 <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ebe8:	2101      	movs	r1, #1
 800ebea:	2000      	movs	r0, #0
 800ebec:	f005 fda8 	bl	8014740 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800ebf0:	e350      	b.n	800f294 <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ebf2:	2001      	movs	r0, #1
 800ebf4:	f005 fe40 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 800ebf8:	1e03      	subs	r3, r0, #0
 800ebfa:	d100      	bne.n	800ebfe <ProcessRadioRxDone+0x382>
 800ebfc:	e34a      	b.n	800f294 <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ebfe:	2101      	movs	r1, #1
 800ec00:	2007      	movs	r0, #7
 800ec02:	f005 fd9d 	bl	8014740 <LoRaMacConfirmQueueSetStatus>
            break;
 800ec06:	e345      	b.n	800f294 <ProcessRadioRxDone+0xa18>
 800ec08:	20000b5c 	.word	0x20000b5c
 800ec0c:	20000b6c 	.word	0x20000b6c
 800ec10:	00000484 	.word	0x00000484
 800ec14:	0000042a 	.word	0x0000042a
 800ec18:	0000042c 	.word	0x0000042c
 800ec1c:	0000042d 	.word	0x0000042d
 800ec20:	0000041f 	.word	0x0000041f
 800ec24:	0000041e 	.word	0x0000041e
 800ec28:	00000421 	.word	0x00000421
 800ec2c:	00000424 	.word	0x00000424
 800ec30:	00000429 	.word	0x00000429
 800ec34:	0000042e 	.word	0x0000042e
 800ec38:	0000041c 	.word	0x0000041c
 800ec3c:	00000434 	.word	0x00000434
 800ec40:	0801e62c 	.word	0x0801e62c
 800ec44:	20000f04 	.word	0x20000f04
 800ec48:	00000476 	.word	0x00000476
 800ec4c:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ec50:	4bd5      	ldr	r3, [pc, #852]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ec52:	4ad6      	ldr	r2, [pc, #856]	@ (800efac <ProcessRadioRxDone+0x730>)
 800ec54:	2101      	movs	r1, #1
 800ec56:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ec58:	4bd3      	ldr	r3, [pc, #844]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ec5a:	4ad5      	ldr	r2, [pc, #852]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ec5c:	589b      	ldr	r3, [r3, r2]
 800ec5e:	22b9      	movs	r2, #185	@ 0xb9
 800ec60:	5c9a      	ldrb	r2, [r3, r2]
 800ec62:	2164      	movs	r1, #100	@ 0x64
 800ec64:	187b      	adds	r3, r7, r1
 800ec66:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ec68:	4acf      	ldr	r2, [pc, #828]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ec6a:	2384      	movs	r3, #132	@ 0x84
 800ec6c:	00db      	lsls	r3, r3, #3
 800ec6e:	5cd3      	ldrb	r3, [r2, r3]
 800ec70:	b25a      	sxtb	r2, r3
 800ec72:	187b      	adds	r3, r7, r1
 800ec74:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ec76:	187b      	adds	r3, r7, r1
 800ec78:	220d      	movs	r2, #13
 800ec7a:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800ec7c:	4bca      	ldr	r3, [pc, #808]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ec7e:	4acc      	ldr	r2, [pc, #816]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ec80:	589b      	ldr	r3, [r3, r2]
 800ec82:	22ca      	movs	r2, #202	@ 0xca
 800ec84:	5c9b      	ldrb	r3, [r3, r2]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d002      	beq.n	800ec90 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ec8a:	187b      	adds	r3, r7, r1
 800ec8c:	220e      	movs	r2, #14
 800ec8e:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ec90:	4bc5      	ldr	r3, [pc, #788]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ec92:	4ac7      	ldr	r2, [pc, #796]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ec94:	589b      	ldr	r3, [r3, r2]
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	2264      	movs	r2, #100	@ 0x64
 800ec9a:	18ba      	adds	r2, r7, r2
 800ec9c:	0011      	movs	r1, r2
 800ec9e:	0018      	movs	r0, r3
 800eca0:	f007 f9df 	bl	8016062 <RegionGetPhyParam>
 800eca4:	0003      	movs	r3, r0
 800eca6:	001a      	movs	r2, r3
 800eca8:	2360      	movs	r3, #96	@ 0x60
 800ecaa:	18fb      	adds	r3, r7, r3
 800ecac:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ecae:	237a      	movs	r3, #122	@ 0x7a
 800ecb0:	18fb      	adds	r3, r7, r3
 800ecb2:	881b      	ldrh	r3, [r3, #0]
 800ecb4:	3b0d      	subs	r3, #13
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	b21b      	sxth	r3, r3
 800ecba:	1c1a      	adds	r2, r3, #0
 800ecbc:	b213      	sxth	r3, r2
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	da01      	bge.n	800ecc6 <ProcessRadioRxDone+0x44a>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	1c1a      	adds	r2, r3, #0
 800ecc6:	b212      	sxth	r2, r2
 800ecc8:	2360      	movs	r3, #96	@ 0x60
 800ecca:	18fb      	adds	r3, r7, r3
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	b21b      	sxth	r3, r3
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	dc04      	bgt.n	800ecde <ProcessRadioRxDone+0x462>
 800ecd4:	237a      	movs	r3, #122	@ 0x7a
 800ecd6:	18fb      	adds	r3, r7, r3
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	2b0b      	cmp	r3, #11
 800ecdc:	d806      	bhi.n	800ecec <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ecde:	4bb2      	ldr	r3, [pc, #712]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ece0:	4ab4      	ldr	r2, [pc, #720]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800ece2:	2101      	movs	r1, #1
 800ece4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ece6:	f7ff fd9d 	bl	800e824 <PrepareRxDoneAbort>
                return;
 800ecea:	e2f5      	b.n	800f2d8 <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800ecec:	2130      	movs	r1, #48	@ 0x30
 800ecee:	187b      	adds	r3, r7, r1
 800ecf0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ecf2:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800ecf4:	237a      	movs	r3, #122	@ 0x7a
 800ecf6:	18fb      	adds	r3, r7, r3
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	187b      	adds	r3, r7, r1
 800ecfe:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ed00:	187b      	adds	r3, r7, r1
 800ed02:	4aad      	ldr	r2, [pc, #692]	@ (800efb8 <ProcessRadioRxDone+0x73c>)
 800ed04:	625a      	str	r2, [r3, #36]	@ 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ed06:	0008      	movs	r0, r1
 800ed08:	187b      	adds	r3, r7, r1
 800ed0a:	2228      	movs	r2, #40	@ 0x28
 800ed0c:	21ff      	movs	r1, #255	@ 0xff
 800ed0e:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ed10:	183b      	adds	r3, r7, r0
 800ed12:	0018      	movs	r0, r3
 800ed14:	f006 fec2 	bl	8015a9c <LoRaMacParserData>
 800ed18:	1e03      	subs	r3, r0, #0
 800ed1a:	d006      	beq.n	800ed2a <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed1c:	4ba2      	ldr	r3, [pc, #648]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ed1e:	4aa5      	ldr	r2, [pc, #660]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800ed20:	2101      	movs	r1, #1
 800ed22:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ed24:	f7ff fd7e 	bl	800e824 <PrepareRxDoneAbort>
                return;
 800ed28:	e2d6      	b.n	800f2d8 <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ed2a:	2030      	movs	r0, #48	@ 0x30
 800ed2c:	183b      	adds	r3, r7, r0
 800ed2e:	689a      	ldr	r2, [r3, #8]
 800ed30:	4b9d      	ldr	r3, [pc, #628]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ed32:	49a2      	ldr	r1, [pc, #648]	@ (800efbc <ProcessRadioRxDone+0x740>)
 800ed34:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ed36:	1cba      	adds	r2, r7, #2
 800ed38:	183b      	adds	r3, r7, r0
 800ed3a:	0011      	movs	r1, r2
 800ed3c:	0018      	movs	r0, r3
 800ed3e:	f003 f863 	bl	8011e08 <DetermineFrameType>
 800ed42:	1e03      	subs	r3, r0, #0
 800ed44:	d006      	beq.n	800ed54 <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed46:	4b98      	ldr	r3, [pc, #608]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ed48:	4a9a      	ldr	r2, [pc, #616]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800ed4a:	2101      	movs	r1, #1
 800ed4c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ed4e:	f7ff fd69 	bl	800e824 <PrepareRxDoneAbort>
                return;
 800ed52:	e2c1      	b.n	800f2d8 <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ed54:	2383      	movs	r3, #131	@ 0x83
 800ed56:	18fb      	adds	r3, r7, r3
 800ed58:	2200      	movs	r2, #0
 800ed5a:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ed60:	2381      	movs	r3, #129	@ 0x81
 800ed62:	18fb      	adds	r3, r7, r3
 800ed64:	2200      	movs	r2, #0
 800ed66:	701a      	strb	r2, [r3, #0]
 800ed68:	e05b      	b.n	800ee22 <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ed6a:	4b8f      	ldr	r3, [pc, #572]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ed6c:	4a90      	ldr	r2, [pc, #576]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ed6e:	589a      	ldr	r2, [r3, r2]
 800ed70:	2481      	movs	r4, #129	@ 0x81
 800ed72:	193b      	adds	r3, r7, r4
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	212c      	movs	r1, #44	@ 0x2c
 800ed78:	434b      	muls	r3, r1
 800ed7a:	18d3      	adds	r3, r2, r3
 800ed7c:	3354      	adds	r3, #84	@ 0x54
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	2330      	movs	r3, #48	@ 0x30
 800ed82:	18fb      	adds	r3, r7, r3
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d145      	bne.n	800ee16 <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ed8a:	4b87      	ldr	r3, [pc, #540]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ed8c:	4a88      	ldr	r2, [pc, #544]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ed8e:	589a      	ldr	r2, [r3, r2]
 800ed90:	193b      	adds	r3, r7, r4
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	2152      	movs	r1, #82	@ 0x52
 800ed96:	202c      	movs	r0, #44	@ 0x2c
 800ed98:	4343      	muls	r3, r0
 800ed9a:	18d3      	adds	r3, r2, r3
 800ed9c:	185b      	adds	r3, r3, r1
 800ed9e:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d038      	beq.n	800ee16 <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800eda4:	2383      	movs	r3, #131	@ 0x83
 800eda6:	18fb      	adds	r3, r7, r3
 800eda8:	2201      	movs	r2, #1
 800edaa:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800edac:	4b7e      	ldr	r3, [pc, #504]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800edae:	4a80      	ldr	r2, [pc, #512]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800edb0:	5899      	ldr	r1, [r3, r2]
 800edb2:	0025      	movs	r5, r4
 800edb4:	193b      	adds	r3, r7, r4
 800edb6:	781a      	ldrb	r2, [r3, #0]
 800edb8:	2382      	movs	r3, #130	@ 0x82
 800edba:	18fb      	adds	r3, r7, r3
 800edbc:	2053      	movs	r0, #83	@ 0x53
 800edbe:	242c      	movs	r4, #44	@ 0x2c
 800edc0:	4362      	muls	r2, r4
 800edc2:	188a      	adds	r2, r1, r2
 800edc4:	1812      	adds	r2, r2, r0
 800edc6:	7812      	ldrb	r2, [r2, #0]
 800edc8:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800edca:	4b77      	ldr	r3, [pc, #476]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800edcc:	4a78      	ldr	r2, [pc, #480]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800edce:	589a      	ldr	r2, [r3, r2]
 800edd0:	002c      	movs	r4, r5
 800edd2:	193b      	adds	r3, r7, r4
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	212c      	movs	r1, #44	@ 0x2c
 800edd8:	434b      	muls	r3, r1
 800edda:	18d3      	adds	r3, r2, r3
 800eddc:	3370      	adds	r3, #112	@ 0x70
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800ede4:	4b70      	ldr	r3, [pc, #448]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ede6:	4a72      	ldr	r2, [pc, #456]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ede8:	589a      	ldr	r2, [r3, r2]
 800edea:	193b      	adds	r3, r7, r4
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	212c      	movs	r1, #44	@ 0x2c
 800edf0:	434b      	muls	r3, r1
 800edf2:	18d3      	adds	r3, r2, r3
 800edf4:	3354      	adds	r3, #84	@ 0x54
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2284      	movs	r2, #132	@ 0x84
 800edfa:	18ba      	adds	r2, r7, r2
 800edfc:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800edfe:	4b6a      	ldr	r3, [pc, #424]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ee00:	4a6b      	ldr	r2, [pc, #428]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ee02:	589b      	ldr	r3, [r3, r2]
 800ee04:	227c      	movs	r2, #124	@ 0x7c
 800ee06:	5c9b      	ldrb	r3, [r3, r2]
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d110      	bne.n	800ee2e <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ee0c:	4b66      	ldr	r3, [pc, #408]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ee0e:	4a6c      	ldr	r2, [pc, #432]	@ (800efc0 <ProcessRadioRxDone+0x744>)
 800ee10:	2103      	movs	r1, #3
 800ee12:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800ee14:	e00b      	b.n	800ee2e <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee16:	2181      	movs	r1, #129	@ 0x81
 800ee18:	187b      	adds	r3, r7, r1
 800ee1a:	781a      	ldrb	r2, [r3, #0]
 800ee1c:	187b      	adds	r3, r7, r1
 800ee1e:	3201      	adds	r2, #1
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	2381      	movs	r3, #129	@ 0x81
 800ee24:	18fb      	adds	r3, r7, r3
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d09e      	beq.n	800ed6a <ProcessRadioRxDone+0x4ee>
 800ee2c:	e000      	b.n	800ee30 <ProcessRadioRxDone+0x5b4>
                    break;
 800ee2e:	46c0      	nop			@ (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ee30:	2383      	movs	r3, #131	@ 0x83
 800ee32:	18fb      	adds	r3, r7, r3
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d119      	bne.n	800ee6e <ProcessRadioRxDone+0x5f2>
 800ee3a:	1cbb      	adds	r3, r7, #2
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	2b03      	cmp	r3, #3
 800ee40:	d10e      	bne.n	800ee60 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ee42:	2130      	movs	r1, #48	@ 0x30
 800ee44:	187b      	adds	r3, r7, r1
 800ee46:	7b1b      	ldrb	r3, [r3, #12]
 800ee48:	2220      	movs	r2, #32
 800ee4a:	4013      	ands	r3, r2
 800ee4c:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d106      	bne.n	800ee60 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ee52:	187b      	adds	r3, r7, r1
 800ee54:	7b1b      	ldrb	r3, [r3, #12]
 800ee56:	2240      	movs	r2, #64	@ 0x40
 800ee58:	4013      	ands	r3, r2
 800ee5a:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d006      	beq.n	800ee6e <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee60:	4b51      	ldr	r3, [pc, #324]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ee62:	4a54      	ldr	r2, [pc, #336]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800ee64:	2101      	movs	r1, #1
 800ee66:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ee68:	f7ff fcdc 	bl	800e824 <PrepareRxDoneAbort>
                return;
 800ee6c:	e234      	b.n	800f2d8 <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ee6e:	2164      	movs	r1, #100	@ 0x64
 800ee70:	187b      	adds	r3, r7, r1
 800ee72:	2215      	movs	r2, #21
 800ee74:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ee76:	4b4c      	ldr	r3, [pc, #304]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ee78:	4a4d      	ldr	r2, [pc, #308]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ee7a:	589b      	ldr	r3, [r3, r2]
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	187a      	adds	r2, r7, r1
 800ee80:	0011      	movs	r1, r2
 800ee82:	0018      	movs	r0, r3
 800ee84:	f007 f8ed 	bl	8016062 <RegionGetPhyParam>
 800ee88:	0003      	movs	r3, r0
 800ee8a:	001a      	movs	r2, r3
 800ee8c:	2060      	movs	r0, #96	@ 0x60
 800ee8e:	183b      	adds	r3, r7, r0
 800ee90:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ee92:	1cbb      	adds	r3, r7, #2
 800ee94:	781d      	ldrb	r5, [r3, #0]
 800ee96:	4b44      	ldr	r3, [pc, #272]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ee98:	4a45      	ldr	r2, [pc, #276]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ee9a:	5899      	ldr	r1, [r3, r2]
 800ee9c:	183b      	adds	r3, r7, r0
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	2280      	movs	r2, #128	@ 0x80
 800eea4:	18bc      	adds	r4, r7, r2
 800eea6:	22b0      	movs	r2, #176	@ 0xb0
 800eea8:	0052      	lsls	r2, r2, #1
 800eeaa:	588e      	ldr	r6, [r1, r2]
 800eeac:	2130      	movs	r1, #48	@ 0x30
 800eeae:	1879      	adds	r1, r7, r1
 800eeb0:	2082      	movs	r0, #130	@ 0x82
 800eeb2:	183a      	adds	r2, r7, r0
 800eeb4:	7810      	ldrb	r0, [r2, #0]
 800eeb6:	1d3a      	adds	r2, r7, #4
 800eeb8:	9202      	str	r2, [sp, #8]
 800eeba:	1cfa      	adds	r2, r7, #3
 800eebc:	9201      	str	r2, [sp, #4]
 800eebe:	9300      	str	r3, [sp, #0]
 800eec0:	0033      	movs	r3, r6
 800eec2:	000a      	movs	r2, r1
 800eec4:	0029      	movs	r1, r5
 800eec6:	f000 fe91 	bl	800fbec <GetFCntDown>
 800eeca:	0003      	movs	r3, r0
 800eecc:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800eece:	2280      	movs	r2, #128	@ 0x80
 800eed0:	18bb      	adds	r3, r7, r2
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d040      	beq.n	800ef5a <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800eed8:	18bb      	adds	r3, r7, r2
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	2b07      	cmp	r3, #7
 800eede:	d126      	bne.n	800ef2e <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800eee0:	4b31      	ldr	r3, [pc, #196]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800eee2:	4a34      	ldr	r2, [pc, #208]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800eee4:	2108      	movs	r1, #8
 800eee6:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800eee8:	4b2f      	ldr	r3, [pc, #188]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800eeea:	4a31      	ldr	r2, [pc, #196]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800eeec:	589a      	ldr	r2, [r3, r2]
 800eeee:	23b1      	movs	r3, #177	@ 0xb1
 800eef0:	005b      	lsls	r3, r3, #1
 800eef2:	5cd3      	ldrb	r3, [r2, r3]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d128      	bne.n	800ef4a <ProcessRadioRxDone+0x6ce>
 800eef8:	2374      	movs	r3, #116	@ 0x74
 800eefa:	18fb      	adds	r3, r7, r3
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	221f      	movs	r2, #31
 800ef00:	4393      	bics	r3, r2
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	2ba0      	cmp	r3, #160	@ 0xa0
 800ef06:	d120      	bne.n	800ef4a <ProcessRadioRxDone+0x6ce>
 800ef08:	4b27      	ldr	r3, [pc, #156]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ef0a:	4a29      	ldr	r2, [pc, #164]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ef0c:	589a      	ldr	r2, [r3, r2]
 800ef0e:	23b4      	movs	r3, #180	@ 0xb4
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	58d2      	ldr	r2, [r2, r3]
 800ef14:	2130      	movs	r1, #48	@ 0x30
 800ef16:	187b      	adds	r3, r7, r1
 800ef18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d115      	bne.n	800ef4a <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800ef1e:	4b22      	ldr	r3, [pc, #136]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ef20:	4a23      	ldr	r2, [pc, #140]	@ (800efb0 <ProcessRadioRxDone+0x734>)
 800ef22:	589a      	ldr	r2, [r3, r2]
 800ef24:	234c      	movs	r3, #76	@ 0x4c
 800ef26:	33ff      	adds	r3, #255	@ 0xff
 800ef28:	2101      	movs	r1, #1
 800ef2a:	54d1      	strb	r1, [r2, r3]
 800ef2c:	e00d      	b.n	800ef4a <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800ef2e:	2380      	movs	r3, #128	@ 0x80
 800ef30:	18fb      	adds	r3, r7, r3
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	2b08      	cmp	r3, #8
 800ef36:	d104      	bne.n	800ef42 <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800ef38:	4b1b      	ldr	r3, [pc, #108]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ef3a:	4a1e      	ldr	r2, [pc, #120]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800ef3c:	210a      	movs	r1, #10
 800ef3e:	5499      	strb	r1, [r3, r2]
 800ef40:	e003      	b.n	800ef4a <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef42:	4b19      	ldr	r3, [pc, #100]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ef44:	4a1b      	ldr	r2, [pc, #108]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800ef46:	2101      	movs	r1, #1
 800ef48:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ef4a:	6879      	ldr	r1, [r7, #4]
 800ef4c:	4a16      	ldr	r2, [pc, #88]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ef4e:	2386      	movs	r3, #134	@ 0x86
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800ef54:	f7ff fc66 	bl	800e824 <PrepareRxDoneAbort>
                return;
 800ef58:	e1be      	b.n	800f2d8 <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ef5a:	1cfb      	adds	r3, r7, #3
 800ef5c:	781a      	ldrb	r2, [r3, #0]
 800ef5e:	687d      	ldr	r5, [r7, #4]
 800ef60:	2680      	movs	r6, #128	@ 0x80
 800ef62:	19bc      	adds	r4, r7, r6
 800ef64:	2384      	movs	r3, #132	@ 0x84
 800ef66:	18fb      	adds	r3, r7, r3
 800ef68:	6819      	ldr	r1, [r3, #0]
 800ef6a:	2382      	movs	r3, #130	@ 0x82
 800ef6c:	18fb      	adds	r3, r7, r3
 800ef6e:	7818      	ldrb	r0, [r3, #0]
 800ef70:	2330      	movs	r3, #48	@ 0x30
 800ef72:	18fb      	adds	r3, r7, r3
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	002b      	movs	r3, r5
 800ef78:	f006 fb7a 	bl	8015670 <LoRaMacCryptoUnsecureMessage>
 800ef7c:	0003      	movs	r3, r0
 800ef7e:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ef80:	19bb      	adds	r3, r7, r6
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d01d      	beq.n	800efc4 <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ef88:	19bb      	adds	r3, r7, r6
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d104      	bne.n	800ef9a <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ef90:	4b05      	ldr	r3, [pc, #20]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ef92:	4a08      	ldr	r2, [pc, #32]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800ef94:	210b      	movs	r1, #11
 800ef96:	5499      	strb	r1, [r3, r2]
 800ef98:	e003      	b.n	800efa2 <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ef9a:	4b03      	ldr	r3, [pc, #12]	@ (800efa8 <ProcessRadioRxDone+0x72c>)
 800ef9c:	4a05      	ldr	r2, [pc, #20]	@ (800efb4 <ProcessRadioRxDone+0x738>)
 800ef9e:	210c      	movs	r1, #12
 800efa0:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800efa2:	f7ff fc3f 	bl	800e824 <PrepareRxDoneAbort>
                return;
 800efa6:	e197      	b.n	800f2d8 <ProcessRadioRxDone+0xa5c>
 800efa8:	20000b6c 	.word	0x20000b6c
 800efac:	0000041c 	.word	0x0000041c
 800efb0:	00000484 	.word	0x00000484
 800efb4:	0000041d 	.word	0x0000041d
 800efb8:	20000da4 	.word	0x20000da4
 800efbc:	00000434 	.word	0x00000434
 800efc0:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800efc4:	4bc6      	ldr	r3, [pc, #792]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800efc6:	4ac7      	ldr	r2, [pc, #796]	@ (800f2e4 <ProcessRadioRxDone+0xa68>)
 800efc8:	2100      	movs	r1, #0
 800efca:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800efcc:	4bc4      	ldr	r3, [pc, #784]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800efce:	2283      	movs	r2, #131	@ 0x83
 800efd0:	18ba      	adds	r2, r7, r2
 800efd2:	49c5      	ldr	r1, [pc, #788]	@ (800f2e8 <ProcessRadioRxDone+0xa6c>)
 800efd4:	7812      	ldrb	r2, [r2, #0]
 800efd6:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800efd8:	2030      	movs	r0, #48	@ 0x30
 800efda:	183b      	adds	r3, r7, r0
 800efdc:	7b1b      	ldrb	r3, [r3, #12]
 800efde:	06db      	lsls	r3, r3, #27
 800efe0:	0fdb      	lsrs	r3, r3, #31
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	0019      	movs	r1, r3
 800efe6:	4bbe      	ldr	r3, [pc, #760]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800efe8:	4ac0      	ldr	r2, [pc, #768]	@ (800f2ec <ProcessRadioRxDone+0xa70>)
 800efea:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800efec:	4bbc      	ldr	r3, [pc, #752]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800efee:	4ac0      	ldr	r2, [pc, #768]	@ (800f2f0 <ProcessRadioRxDone+0xa74>)
 800eff0:	2100      	movs	r1, #0
 800eff2:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800eff4:	4aba      	ldr	r2, [pc, #744]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800eff6:	2385      	movs	r3, #133	@ 0x85
 800eff8:	00db      	lsls	r3, r3, #3
 800effa:	2100      	movs	r1, #0
 800effc:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800effe:	6879      	ldr	r1, [r7, #4]
 800f000:	4ab7      	ldr	r2, [pc, #732]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f002:	2386      	movs	r3, #134	@ 0x86
 800f004:	00db      	lsls	r3, r3, #3
 800f006:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f008:	183b      	adds	r3, r7, r0
 800f00a:	7b1b      	ldrb	r3, [r3, #12]
 800f00c:	069b      	lsls	r3, r3, #26
 800f00e:	0fdb      	lsrs	r3, r3, #31
 800f010:	b2db      	uxtb	r3, r3
 800f012:	1e5a      	subs	r2, r3, #1
 800f014:	4193      	sbcs	r3, r2
 800f016:	b2d9      	uxtb	r1, r3
 800f018:	4bb1      	ldr	r3, [pc, #708]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f01a:	4ab6      	ldr	r2, [pc, #728]	@ (800f2f4 <ProcessRadioRxDone+0xa78>)
 800f01c:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f01e:	4bb0      	ldr	r3, [pc, #704]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f020:	4ab5      	ldr	r2, [pc, #724]	@ (800f2f8 <ProcessRadioRxDone+0xa7c>)
 800f022:	2100      	movs	r1, #0
 800f024:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f026:	183b      	adds	r3, r7, r0
 800f028:	7b1b      	ldrb	r3, [r3, #12]
 800f02a:	069b      	lsls	r3, r3, #26
 800f02c:	0fdb      	lsrs	r3, r3, #31
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	1e5a      	subs	r2, r3, #1
 800f032:	4193      	sbcs	r3, r2
 800f034:	b2d9      	uxtb	r1, r3
 800f036:	4aaa      	ldr	r2, [pc, #680]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f038:	2388      	movs	r3, #136	@ 0x88
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f03e:	4ba8      	ldr	r3, [pc, #672]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f040:	4aae      	ldr	r2, [pc, #696]	@ (800f2fc <ProcessRadioRxDone+0xa80>)
 800f042:	5c9b      	ldrb	r3, [r3, r2]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d004      	beq.n	800f052 <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800f048:	4ba5      	ldr	r3, [pc, #660]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f04a:	4aac      	ldr	r2, [pc, #688]	@ (800f2fc <ProcessRadioRxDone+0xa80>)
 800f04c:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d105      	bne.n	800f05e <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800f052:	4ba3      	ldr	r3, [pc, #652]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f054:	4aaa      	ldr	r2, [pc, #680]	@ (800f300 <ProcessRadioRxDone+0xa84>)
 800f056:	589b      	ldr	r3, [r3, r2]
 800f058:	2280      	movs	r2, #128	@ 0x80
 800f05a:	2100      	movs	r1, #0
 800f05c:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f05e:	2383      	movs	r3, #131	@ 0x83
 800f060:	18fb      	adds	r3, r7, r3
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d104      	bne.n	800f072 <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f068:	4b9d      	ldr	r3, [pc, #628]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f06a:	4aa6      	ldr	r2, [pc, #664]	@ (800f304 <ProcessRadioRxDone+0xa88>)
 800f06c:	2102      	movs	r1, #2
 800f06e:	5499      	strb	r1, [r3, r2]
 800f070:	e02f      	b.n	800f0d2 <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f072:	2374      	movs	r3, #116	@ 0x74
 800f074:	18fb      	adds	r3, r7, r3
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	221f      	movs	r2, #31
 800f07a:	4393      	bics	r3, r2
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	2ba0      	cmp	r3, #160	@ 0xa0
 800f080:	d11c      	bne.n	800f0bc <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800f082:	4b97      	ldr	r3, [pc, #604]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f084:	4a9e      	ldr	r2, [pc, #632]	@ (800f300 <ProcessRadioRxDone+0xa84>)
 800f086:	589a      	ldr	r2, [r3, r2]
 800f088:	234c      	movs	r3, #76	@ 0x4c
 800f08a:	33ff      	adds	r3, #255	@ 0xff
 800f08c:	2101      	movs	r1, #1
 800f08e:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800f090:	4b93      	ldr	r3, [pc, #588]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f092:	4a9b      	ldr	r2, [pc, #620]	@ (800f300 <ProcessRadioRxDone+0xa84>)
 800f094:	589a      	ldr	r2, [r3, r2]
 800f096:	23b1      	movs	r3, #177	@ 0xb1
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	5cd3      	ldrb	r3, [r2, r3]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d108      	bne.n	800f0b2 <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800f0a0:	4b8f      	ldr	r3, [pc, #572]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f0a2:	4a97      	ldr	r2, [pc, #604]	@ (800f300 <ProcessRadioRxDone+0xa84>)
 800f0a4:	589a      	ldr	r2, [r3, r2]
 800f0a6:	2330      	movs	r3, #48	@ 0x30
 800f0a8:	18fb      	adds	r3, r7, r3
 800f0aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f0ac:	23b4      	movs	r3, #180	@ 0xb4
 800f0ae:	005b      	lsls	r3, r3, #1
 800f0b0:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f0b2:	4b8b      	ldr	r3, [pc, #556]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f0b4:	4a93      	ldr	r2, [pc, #588]	@ (800f304 <ProcessRadioRxDone+0xa88>)
 800f0b6:	2101      	movs	r1, #1
 800f0b8:	5499      	strb	r1, [r3, r2]
 800f0ba:	e00a      	b.n	800f0d2 <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800f0bc:	4b88      	ldr	r3, [pc, #544]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f0be:	4a90      	ldr	r2, [pc, #576]	@ (800f300 <ProcessRadioRxDone+0xa84>)
 800f0c0:	589a      	ldr	r2, [r3, r2]
 800f0c2:	234c      	movs	r3, #76	@ 0x4c
 800f0c4:	33ff      	adds	r3, #255	@ 0xff
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f0ca:	4b85      	ldr	r3, [pc, #532]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f0cc:	4a8d      	ldr	r2, [pc, #564]	@ (800f304 <ProcessRadioRxDone+0xa88>)
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f0d2:	4b83      	ldr	r3, [pc, #524]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f0d4:	4a89      	ldr	r2, [pc, #548]	@ (800f2fc <ProcessRadioRxDone+0xa80>)
 800f0d6:	5c98      	ldrb	r0, [r3, r2]
 800f0d8:	4b81      	ldr	r3, [pc, #516]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f0da:	4a8b      	ldr	r2, [pc, #556]	@ (800f308 <ProcessRadioRxDone+0xa8c>)
 800f0dc:	5c9a      	ldrb	r2, [r3, r2]
 800f0de:	2330      	movs	r3, #48	@ 0x30
 800f0e0:	18fb      	adds	r3, r7, r3
 800f0e2:	7b1b      	ldrb	r3, [r3, #12]
 800f0e4:	1c19      	adds	r1, r3, #0
 800f0e6:	f002 f953 	bl	8011390 <RemoveMacCommands>

            switch( fType )
 800f0ea:	1cbb      	adds	r3, r7, #2
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d100      	bne.n	800f0f4 <ProcessRadioRxDone+0x878>
 800f0f2:	e073      	b.n	800f1dc <ProcessRadioRxDone+0x960>
 800f0f4:	dd00      	ble.n	800f0f8 <ProcessRadioRxDone+0x87c>
 800f0f6:	e089      	b.n	800f20c <ProcessRadioRxDone+0x990>
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d055      	beq.n	800f1a8 <ProcessRadioRxDone+0x92c>
 800f0fc:	dd00      	ble.n	800f100 <ProcessRadioRxDone+0x884>
 800f0fe:	e085      	b.n	800f20c <ProcessRadioRxDone+0x990>
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <ProcessRadioRxDone+0x88e>
 800f104:	2b01      	cmp	r3, #1
 800f106:	d030      	beq.n	800f16a <ProcessRadioRxDone+0x8ee>
 800f108:	e080      	b.n	800f20c <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800f10a:	2030      	movs	r0, #48	@ 0x30
 800f10c:	183b      	adds	r3, r7, r0
 800f10e:	7b1b      	ldrb	r3, [r3, #12]
 800f110:	071b      	lsls	r3, r3, #28
 800f112:	0f1b      	lsrs	r3, r3, #28
 800f114:	b2db      	uxtb	r3, r3
 800f116:	001c      	movs	r4, r3
 800f118:	4b71      	ldr	r3, [pc, #452]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f11a:	4a78      	ldr	r2, [pc, #480]	@ (800f2fc <ProcessRadioRxDone+0xa80>)
 800f11c:	5c9b      	ldrb	r3, [r3, r2]
 800f11e:	2277      	movs	r2, #119	@ 0x77
 800f120:	18ba      	adds	r2, r7, r2
 800f122:	2100      	movs	r1, #0
 800f124:	5651      	ldrsb	r1, [r2, r1]
 800f126:	0005      	movs	r5, r0
 800f128:	183a      	adds	r2, r7, r0
 800f12a:	3210      	adds	r2, #16
 800f12c:	0010      	movs	r0, r2
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	000b      	movs	r3, r1
 800f132:	0022      	movs	r2, r4
 800f134:	2100      	movs	r1, #0
 800f136:	f000 ff4f 	bl	800ffd8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f13a:	0028      	movs	r0, r5
 800f13c:	183b      	adds	r3, r7, r0
 800f13e:	2220      	movs	r2, #32
 800f140:	5c99      	ldrb	r1, [r3, r2]
 800f142:	4b67      	ldr	r3, [pc, #412]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f144:	4a71      	ldr	r2, [pc, #452]	@ (800f30c <ProcessRadioRxDone+0xa90>)
 800f146:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f148:	183b      	adds	r3, r7, r0
 800f14a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f14c:	4b64      	ldr	r3, [pc, #400]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f14e:	4968      	ldr	r1, [pc, #416]	@ (800f2f0 <ProcessRadioRxDone+0xa74>)
 800f150:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f152:	183b      	adds	r3, r7, r0
 800f154:	2228      	movs	r2, #40	@ 0x28
 800f156:	5c99      	ldrb	r1, [r3, r2]
 800f158:	4a61      	ldr	r2, [pc, #388]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f15a:	2385      	movs	r3, #133	@ 0x85
 800f15c:	00db      	lsls	r3, r3, #3
 800f15e:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800f160:	4b5f      	ldr	r3, [pc, #380]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f162:	4a6b      	ldr	r2, [pc, #428]	@ (800f310 <ProcessRadioRxDone+0xa94>)
 800f164:	2101      	movs	r1, #1
 800f166:	5499      	strb	r1, [r3, r2]
                    break;
 800f168:	e057      	b.n	800f21a <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800f16a:	2030      	movs	r0, #48	@ 0x30
 800f16c:	183b      	adds	r3, r7, r0
 800f16e:	7b1b      	ldrb	r3, [r3, #12]
 800f170:	071b      	lsls	r3, r3, #28
 800f172:	0f1b      	lsrs	r3, r3, #28
 800f174:	b2db      	uxtb	r3, r3
 800f176:	001c      	movs	r4, r3
 800f178:	4b59      	ldr	r3, [pc, #356]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f17a:	4a60      	ldr	r2, [pc, #384]	@ (800f2fc <ProcessRadioRxDone+0xa80>)
 800f17c:	5c9b      	ldrb	r3, [r3, r2]
 800f17e:	2277      	movs	r2, #119	@ 0x77
 800f180:	18ba      	adds	r2, r7, r2
 800f182:	2100      	movs	r1, #0
 800f184:	5651      	ldrsb	r1, [r2, r1]
 800f186:	0005      	movs	r5, r0
 800f188:	183a      	adds	r2, r7, r0
 800f18a:	3210      	adds	r2, #16
 800f18c:	0010      	movs	r0, r2
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	000b      	movs	r3, r1
 800f192:	0022      	movs	r2, r4
 800f194:	2100      	movs	r1, #0
 800f196:	f000 ff1f 	bl	800ffd8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f19a:	197b      	adds	r3, r7, r5
 800f19c:	2220      	movs	r2, #32
 800f19e:	5c99      	ldrb	r1, [r3, r2]
 800f1a0:	4b4f      	ldr	r3, [pc, #316]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f1a2:	4a5a      	ldr	r2, [pc, #360]	@ (800f30c <ProcessRadioRxDone+0xa90>)
 800f1a4:	5499      	strb	r1, [r3, r2]
                    break;
 800f1a6:	e038      	b.n	800f21a <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800f1a8:	2430      	movs	r4, #48	@ 0x30
 800f1aa:	193b      	adds	r3, r7, r4
 800f1ac:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f1ae:	193b      	adds	r3, r7, r4
 800f1b0:	2228      	movs	r2, #40	@ 0x28
 800f1b2:	5c99      	ldrb	r1, [r3, r2]
 800f1b4:	4b4a      	ldr	r3, [pc, #296]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f1b6:	4a51      	ldr	r2, [pc, #324]	@ (800f2fc <ProcessRadioRxDone+0xa80>)
 800f1b8:	5c9b      	ldrb	r3, [r3, r2]
 800f1ba:	2277      	movs	r2, #119	@ 0x77
 800f1bc:	18ba      	adds	r2, r7, r2
 800f1be:	7812      	ldrb	r2, [r2, #0]
 800f1c0:	b252      	sxtb	r2, r2
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	0013      	movs	r3, r2
 800f1c6:	000a      	movs	r2, r1
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	f000 ff05 	bl	800ffd8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f1ce:	193b      	adds	r3, r7, r4
 800f1d0:	2220      	movs	r2, #32
 800f1d2:	5c99      	ldrb	r1, [r3, r2]
 800f1d4:	4b42      	ldr	r3, [pc, #264]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f1d6:	4a4d      	ldr	r2, [pc, #308]	@ (800f30c <ProcessRadioRxDone+0xa90>)
 800f1d8:	5499      	strb	r1, [r3, r2]
                    break;
 800f1da:	e01e      	b.n	800f21a <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f1dc:	2030      	movs	r0, #48	@ 0x30
 800f1de:	183b      	adds	r3, r7, r0
 800f1e0:	2220      	movs	r2, #32
 800f1e2:	5c99      	ldrb	r1, [r3, r2]
 800f1e4:	4b3e      	ldr	r3, [pc, #248]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f1e6:	4a49      	ldr	r2, [pc, #292]	@ (800f30c <ProcessRadioRxDone+0xa90>)
 800f1e8:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f1ea:	183b      	adds	r3, r7, r0
 800f1ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1ee:	4b3c      	ldr	r3, [pc, #240]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f1f0:	493f      	ldr	r1, [pc, #252]	@ (800f2f0 <ProcessRadioRxDone+0xa74>)
 800f1f2:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f1f4:	183b      	adds	r3, r7, r0
 800f1f6:	2228      	movs	r2, #40	@ 0x28
 800f1f8:	5c99      	ldrb	r1, [r3, r2]
 800f1fa:	4a39      	ldr	r2, [pc, #228]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f1fc:	2385      	movs	r3, #133	@ 0x85
 800f1fe:	00db      	lsls	r3, r3, #3
 800f200:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800f202:	4b37      	ldr	r3, [pc, #220]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f204:	4a42      	ldr	r2, [pc, #264]	@ (800f310 <ProcessRadioRxDone+0xa94>)
 800f206:	2101      	movs	r1, #1
 800f208:	5499      	strb	r1, [r3, r2]
                    break;
 800f20a:	e006      	b.n	800f21a <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f20c:	4b34      	ldr	r3, [pc, #208]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f20e:	4a35      	ldr	r2, [pc, #212]	@ (800f2e4 <ProcessRadioRxDone+0xa68>)
 800f210:	2101      	movs	r1, #1
 800f212:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800f214:	f7ff fb06 	bl	800e824 <PrepareRxDoneAbort>
                    break;
 800f218:	46c0      	nop			@ (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f21a:	4b31      	ldr	r3, [pc, #196]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f21c:	4a3d      	ldr	r2, [pc, #244]	@ (800f314 <ProcessRadioRxDone+0xa98>)
 800f21e:	5c99      	ldrb	r1, [r3, r2]
 800f220:	2002      	movs	r0, #2
 800f222:	4301      	orrs	r1, r0
 800f224:	5499      	strb	r1, [r3, r2]

            break;
 800f226:	e036      	b.n	800f296 <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f228:	2476      	movs	r4, #118	@ 0x76
 800f22a:	193b      	adds	r3, r7, r4
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f230:	18d1      	adds	r1, r2, r3
 800f232:	193b      	adds	r3, r7, r4
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	b29b      	uxth	r3, r3
 800f238:	257a      	movs	r5, #122	@ 0x7a
 800f23a:	197a      	adds	r2, r7, r5
 800f23c:	8812      	ldrh	r2, [r2, #0]
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	b29a      	uxth	r2, r3
 800f242:	4b35      	ldr	r3, [pc, #212]	@ (800f318 <ProcessRadioRxDone+0xa9c>)
 800f244:	0018      	movs	r0, r3
 800f246:	f009 fb8f 	bl	8018968 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f24a:	4b25      	ldr	r3, [pc, #148]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f24c:	4a2d      	ldr	r2, [pc, #180]	@ (800f304 <ProcessRadioRxDone+0xa88>)
 800f24e:	2103      	movs	r1, #3
 800f250:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f252:	4b23      	ldr	r3, [pc, #140]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f254:	4a23      	ldr	r2, [pc, #140]	@ (800f2e4 <ProcessRadioRxDone+0xa68>)
 800f256:	2100      	movs	r1, #0
 800f258:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f25a:	4b21      	ldr	r3, [pc, #132]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f25c:	4924      	ldr	r1, [pc, #144]	@ (800f2f0 <ProcessRadioRxDone+0xa74>)
 800f25e:	4a2e      	ldr	r2, [pc, #184]	@ (800f318 <ProcessRadioRxDone+0xa9c>)
 800f260:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f262:	197b      	adds	r3, r7, r5
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	b2da      	uxtb	r2, r3
 800f268:	193b      	adds	r3, r7, r4
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	b2d9      	uxtb	r1, r3
 800f270:	4a1b      	ldr	r2, [pc, #108]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f272:	2385      	movs	r3, #133	@ 0x85
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f278:	4b19      	ldr	r3, [pc, #100]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f27a:	4a26      	ldr	r2, [pc, #152]	@ (800f314 <ProcessRadioRxDone+0xa98>)
 800f27c:	5c99      	ldrb	r1, [r3, r2]
 800f27e:	2002      	movs	r0, #2
 800f280:	4301      	orrs	r1, r0
 800f282:	5499      	strb	r1, [r3, r2]
            break;
 800f284:	e007      	b.n	800f296 <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f286:	4b16      	ldr	r3, [pc, #88]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f288:	4a16      	ldr	r2, [pc, #88]	@ (800f2e4 <ProcessRadioRxDone+0xa68>)
 800f28a:	2101      	movs	r1, #1
 800f28c:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800f28e:	f7ff fac9 	bl	800e824 <PrepareRxDoneAbort>
            break;
 800f292:	e000      	b.n	800f296 <ProcessRadioRxDone+0xa1a>
            break;
 800f294:	46c0      	nop			@ (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f296:	4b12      	ldr	r3, [pc, #72]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f298:	4a20      	ldr	r2, [pc, #128]	@ (800f31c <ProcessRadioRxDone+0xaa0>)
 800f29a:	5c9b      	ldrb	r3, [r3, r2]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d009      	beq.n	800f2b4 <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f2a0:	4a0f      	ldr	r2, [pc, #60]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f2a2:	2388      	movs	r3, #136	@ 0x88
 800f2a4:	00db      	lsls	r3, r3, #3
 800f2a6:	5cd3      	ldrb	r3, [r2, r3]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00d      	beq.n	800f2c8 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	f000 fc5b 	bl	800fb68 <OnAckTimeoutTimerEvent>
 800f2b2:	e009      	b.n	800f2c8 <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f2b6:	4a12      	ldr	r2, [pc, #72]	@ (800f300 <ProcessRadioRxDone+0xa84>)
 800f2b8:	589b      	ldr	r3, [r3, r2]
 800f2ba:	227c      	movs	r2, #124	@ 0x7c
 800f2bc:	5c9b      	ldrb	r3, [r3, r2]
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	d102      	bne.n	800f2c8 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f2c2:	2000      	movs	r0, #0
 800f2c4:	f000 fc50 	bl	800fb68 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f2c8:	4b05      	ldr	r3, [pc, #20]	@ (800f2e0 <ProcessRadioRxDone+0xa64>)
 800f2ca:	4a12      	ldr	r2, [pc, #72]	@ (800f314 <ProcessRadioRxDone+0xa98>)
 800f2cc:	5c99      	ldrb	r1, [r3, r2]
 800f2ce:	2020      	movs	r0, #32
 800f2d0:	4301      	orrs	r1, r0
 800f2d2:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f2d4:	f7ff f9c0 	bl	800e658 <UpdateRxSlotIdleState>
}
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	b023      	add	sp, #140	@ 0x8c
 800f2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2de:	46c0      	nop			@ (mov r8, r8)
 800f2e0:	20000b6c 	.word	0x20000b6c
 800f2e4:	0000041d 	.word	0x0000041d
 800f2e8:	0000041e 	.word	0x0000041e
 800f2ec:	00000421 	.word	0x00000421
 800f2f0:	00000424 	.word	0x00000424
 800f2f4:	0000042e 	.word	0x0000042e
 800f2f8:	0000043d 	.word	0x0000043d
 800f2fc:	0000042d 	.word	0x0000042d
 800f300:	00000484 	.word	0x00000484
 800f304:	0000041c 	.word	0x0000041c
 800f308:	0000043c 	.word	0x0000043c
 800f30c:	0000041f 	.word	0x0000041f
 800f310:	00000429 	.word	0x00000429
 800f314:	00000481 	.word	0x00000481
 800f318:	20000da4 	.word	0x20000da4
 800f31c:	00000414 	.word	0x00000414

0800f320 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f324:	4b12      	ldr	r3, [pc, #72]	@ (800f370 <ProcessRadioTxTimeout+0x50>)
 800f326:	4a13      	ldr	r2, [pc, #76]	@ (800f374 <ProcessRadioTxTimeout+0x54>)
 800f328:	589b      	ldr	r3, [r3, r2]
 800f32a:	227c      	movs	r2, #124	@ 0x7c
 800f32c:	5c9b      	ldrb	r3, [r3, r2]
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d002      	beq.n	800f338 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800f332:	4b11      	ldr	r3, [pc, #68]	@ (800f378 <ProcessRadioTxTimeout+0x58>)
 800f334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f336:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f338:	f7ff f98e 	bl	800e658 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f33c:	4b0c      	ldr	r3, [pc, #48]	@ (800f370 <ProcessRadioTxTimeout+0x50>)
 800f33e:	4a0f      	ldr	r2, [pc, #60]	@ (800f37c <ProcessRadioTxTimeout+0x5c>)
 800f340:	2102      	movs	r1, #2
 800f342:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f344:	2002      	movs	r0, #2
 800f346:	f005 fa5d 	bl	8014804 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f34a:	4b09      	ldr	r3, [pc, #36]	@ (800f370 <ProcessRadioTxTimeout+0x50>)
 800f34c:	4a0c      	ldr	r2, [pc, #48]	@ (800f380 <ProcessRadioTxTimeout+0x60>)
 800f34e:	5c9b      	ldrb	r3, [r3, r2]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d003      	beq.n	800f35c <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800f354:	4b06      	ldr	r3, [pc, #24]	@ (800f370 <ProcessRadioTxTimeout+0x50>)
 800f356:	4a0b      	ldr	r2, [pc, #44]	@ (800f384 <ProcessRadioTxTimeout+0x64>)
 800f358:	2101      	movs	r1, #1
 800f35a:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f35c:	4b04      	ldr	r3, [pc, #16]	@ (800f370 <ProcessRadioTxTimeout+0x50>)
 800f35e:	4a0a      	ldr	r2, [pc, #40]	@ (800f388 <ProcessRadioTxTimeout+0x68>)
 800f360:	5c99      	ldrb	r1, [r3, r2]
 800f362:	2020      	movs	r0, #32
 800f364:	4301      	orrs	r1, r0
 800f366:	5499      	strb	r1, [r3, r2]
}
 800f368:	46c0      	nop			@ (mov r8, r8)
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	46c0      	nop			@ (mov r8, r8)
 800f370:	20000b6c 	.word	0x20000b6c
 800f374:	00000484 	.word	0x00000484
 800f378:	0801e62c 	.word	0x0801e62c
 800f37c:	0000043d 	.word	0x0000043d
 800f380:	00000414 	.word	0x00000414
 800f384:	00000413 	.word	0x00000413
 800f388:	00000481 	.word	0x00000481

0800f38c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	0002      	movs	r2, r0
 800f394:	1dfb      	adds	r3, r7, #7
 800f396:	701a      	strb	r2, [r3, #0]
 800f398:	1dbb      	adds	r3, r7, #6
 800f39a:	1c0a      	adds	r2, r1, #0
 800f39c:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800f39e:	230f      	movs	r3, #15
 800f3a0:	18fb      	adds	r3, r7, r3
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f3a6:	4b4a      	ldr	r3, [pc, #296]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f3a8:	4a4a      	ldr	r2, [pc, #296]	@ (800f4d4 <HandleRadioRxErrorTimeout+0x148>)
 800f3aa:	589b      	ldr	r3, [r3, r2]
 800f3ac:	227c      	movs	r2, #124	@ 0x7c
 800f3ae:	5c9b      	ldrb	r3, [r3, r2]
 800f3b0:	2b02      	cmp	r3, #2
 800f3b2:	d002      	beq.n	800f3ba <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800f3b4:	4b48      	ldr	r3, [pc, #288]	@ (800f4d8 <HandleRadioRxErrorTimeout+0x14c>)
 800f3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b8:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f3ba:	f004 fcdf 	bl	8013d7c <LoRaMacClassBIsBeaconExpected>
 800f3be:	1e03      	subs	r3, r0, #0
 800f3c0:	d009      	beq.n	800f3d6 <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f3c2:	2002      	movs	r0, #2
 800f3c4:	f004 fc92 	bl	8013cec <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f3c8:	2000      	movs	r0, #0
 800f3ca:	f004 fcb3 	bl	8013d34 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f3ce:	230f      	movs	r3, #15
 800f3d0:	18fb      	adds	r3, r7, r3
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f3d6:	4b3e      	ldr	r3, [pc, #248]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f3d8:	4a3e      	ldr	r2, [pc, #248]	@ (800f4d4 <HandleRadioRxErrorTimeout+0x148>)
 800f3da:	589b      	ldr	r3, [r3, r2]
 800f3dc:	227c      	movs	r2, #124	@ 0x7c
 800f3de:	5c9b      	ldrb	r3, [r3, r2]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d11b      	bne.n	800f41c <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f3e4:	f004 fcd0 	bl	8013d88 <LoRaMacClassBIsPingExpected>
 800f3e8:	1e03      	subs	r3, r0, #0
 800f3ea:	d009      	beq.n	800f400 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	f004 fc87 	bl	8013d00 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f3f2:	2000      	movs	r0, #0
 800f3f4:	f004 fca6 	bl	8013d44 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f3f8:	230f      	movs	r3, #15
 800f3fa:	18fb      	adds	r3, r7, r3
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f400:	f004 fcc8 	bl	8013d94 <LoRaMacClassBIsMulticastExpected>
 800f404:	1e03      	subs	r3, r0, #0
 800f406:	d009      	beq.n	800f41c <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f408:	2000      	movs	r0, #0
 800f40a:	f004 fc83 	bl	8013d14 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f40e:	2000      	movs	r0, #0
 800f410:	f004 fca0 	bl	8013d54 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f414:	230f      	movs	r3, #15
 800f416:	18fb      	adds	r3, r7, r3
 800f418:	2201      	movs	r2, #1
 800f41a:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800f41c:	230f      	movs	r3, #15
 800f41e:	18fb      	adds	r3, r7, r3
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	2201      	movs	r2, #1
 800f424:	4053      	eors	r3, r2
 800f426:	b2db      	uxtb	r3, r3
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d04b      	beq.n	800f4c4 <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f42c:	4a28      	ldr	r2, [pc, #160]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f42e:	2390      	movs	r3, #144	@ 0x90
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	5cd3      	ldrb	r3, [r2, r3]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d129      	bne.n	800f48c <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 800f438:	4b25      	ldr	r3, [pc, #148]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f43a:	4a28      	ldr	r2, [pc, #160]	@ (800f4dc <HandleRadioRxErrorTimeout+0x150>)
 800f43c:	5c9b      	ldrb	r3, [r3, r2]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d004      	beq.n	800f44c <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f442:	4b23      	ldr	r3, [pc, #140]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f444:	1dfa      	adds	r2, r7, #7
 800f446:	4926      	ldr	r1, [pc, #152]	@ (800f4e0 <HandleRadioRxErrorTimeout+0x154>)
 800f448:	7812      	ldrb	r2, [r2, #0]
 800f44a:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f44c:	1dfb      	adds	r3, r7, #7
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	0018      	movs	r0, r3
 800f452:	f005 f9d7 	bl	8014804 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f456:	4b1e      	ldr	r3, [pc, #120]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f458:	4a1e      	ldr	r2, [pc, #120]	@ (800f4d4 <HandleRadioRxErrorTimeout+0x148>)
 800f45a:	589a      	ldr	r2, [r3, r2]
 800f45c:	23a8      	movs	r3, #168	@ 0xa8
 800f45e:	005b      	lsls	r3, r3, #1
 800f460:	58d3      	ldr	r3, [r2, r3]
 800f462:	0018      	movs	r0, r3
 800f464:	f00c ff3a 	bl	801c2dc <UTIL_TIMER_GetElapsedTime>
 800f468:	0001      	movs	r1, r0
 800f46a:	4a19      	ldr	r2, [pc, #100]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f46c:	23ed      	movs	r3, #237	@ 0xed
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	58d3      	ldr	r3, [r2, r3]
 800f472:	4299      	cmp	r1, r3
 800f474:	d326      	bcc.n	800f4c4 <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f476:	4b1b      	ldr	r3, [pc, #108]	@ (800f4e4 <HandleRadioRxErrorTimeout+0x158>)
 800f478:	0018      	movs	r0, r3
 800f47a:	f00c fdeb 	bl	801c054 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f47e:	4b14      	ldr	r3, [pc, #80]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f480:	4a19      	ldr	r2, [pc, #100]	@ (800f4e8 <HandleRadioRxErrorTimeout+0x15c>)
 800f482:	5c99      	ldrb	r1, [r3, r2]
 800f484:	2020      	movs	r0, #32
 800f486:	4301      	orrs	r1, r0
 800f488:	5499      	strb	r1, [r3, r2]
 800f48a:	e01b      	b.n	800f4c4 <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f48c:	4b10      	ldr	r3, [pc, #64]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f48e:	4a13      	ldr	r2, [pc, #76]	@ (800f4dc <HandleRadioRxErrorTimeout+0x150>)
 800f490:	5c9b      	ldrb	r3, [r3, r2]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d004      	beq.n	800f4a0 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f496:	4b0e      	ldr	r3, [pc, #56]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f498:	1dba      	adds	r2, r7, #6
 800f49a:	4911      	ldr	r1, [pc, #68]	@ (800f4e0 <HandleRadioRxErrorTimeout+0x154>)
 800f49c:	7812      	ldrb	r2, [r2, #0]
 800f49e:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f4a0:	1dbb      	adds	r3, r7, #6
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	0018      	movs	r0, r3
 800f4a6:	f005 f9ad 	bl	8014804 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f4aa:	4b09      	ldr	r3, [pc, #36]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f4ac:	4a09      	ldr	r2, [pc, #36]	@ (800f4d4 <HandleRadioRxErrorTimeout+0x148>)
 800f4ae:	589b      	ldr	r3, [r3, r2]
 800f4b0:	227c      	movs	r2, #124	@ 0x7c
 800f4b2:	5c9b      	ldrb	r3, [r3, r2]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d005      	beq.n	800f4c4 <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f4b8:	4b05      	ldr	r3, [pc, #20]	@ (800f4d0 <HandleRadioRxErrorTimeout+0x144>)
 800f4ba:	4a0b      	ldr	r2, [pc, #44]	@ (800f4e8 <HandleRadioRxErrorTimeout+0x15c>)
 800f4bc:	5c99      	ldrb	r1, [r3, r2]
 800f4be:	2020      	movs	r0, #32
 800f4c0:	4301      	orrs	r1, r0
 800f4c2:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800f4c4:	f7ff f8c8 	bl	800e658 <UpdateRxSlotIdleState>
}
 800f4c8:	46c0      	nop			@ (mov r8, r8)
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	b004      	add	sp, #16
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	20000b6c 	.word	0x20000b6c
 800f4d4:	00000484 	.word	0x00000484
 800f4d8:	0801e62c 	.word	0x0801e62c
 800f4dc:	00000414 	.word	0x00000414
 800f4e0:	0000043d 	.word	0x0000043d
 800f4e4:	20000f04 	.word	0x20000f04
 800f4e8:	00000481 	.word	0x00000481

0800f4ec <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f4f0:	2106      	movs	r1, #6
 800f4f2:	2005      	movs	r0, #5
 800f4f4:	f7ff ff4a 	bl	800f38c <HandleRadioRxErrorTimeout>
}
 800f4f8:	46c0      	nop			@ (mov r8, r8)
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f502:	2104      	movs	r1, #4
 800f504:	2003      	movs	r0, #3
 800f506:	f7ff ff41 	bl	800f38c <HandleRadioRxErrorTimeout>
}
 800f50a:	46c0      	nop			@ (mov r8, r8)
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f516:	f3ef 8310 	mrs	r3, PRIMASK
 800f51a:	607b      	str	r3, [r7, #4]
  return(result);
 800f51c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f51e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f520:	b672      	cpsid	i
}
 800f522:	46c0      	nop			@ (mov r8, r8)
    events = LoRaMacRadioEvents;
 800f524:	4b1f      	ldr	r3, [pc, #124]	@ (800f5a4 <LoRaMacHandleIrqEvents+0x94>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f52a:	4b1e      	ldr	r3, [pc, #120]	@ (800f5a4 <LoRaMacHandleIrqEvents+0x94>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	601a      	str	r2, [r3, #0]
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	f383 8810 	msr	PRIMASK, r3
}
 800f53a:	46c0      	nop			@ (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d02c      	beq.n	800f59c <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 800f542:	003b      	movs	r3, r7
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	2210      	movs	r2, #16
 800f548:	4013      	ands	r3, r2
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d001      	beq.n	800f554 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 800f550:	f7ff f89e 	bl	800e690 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f554:	003b      	movs	r3, r7
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2208      	movs	r2, #8
 800f55a:	4013      	ands	r3, r2
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d001      	beq.n	800f566 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 800f562:	f7ff f98b 	bl	800e87c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f566:	003b      	movs	r3, r7
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	2204      	movs	r2, #4
 800f56c:	4013      	ands	r3, r2
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b00      	cmp	r3, #0
 800f572:	d001      	beq.n	800f578 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 800f574:	f7ff fed4 	bl	800f320 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f578:	003b      	movs	r3, r7
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2202      	movs	r2, #2
 800f57e:	4013      	ands	r3, r2
 800f580:	b2db      	uxtb	r3, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 800f586:	f7ff ffb1 	bl	800f4ec <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f58a:	003b      	movs	r3, r7
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	2201      	movs	r2, #1
 800f590:	4013      	ands	r3, r2
 800f592:	b2db      	uxtb	r3, r3
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 800f598:	f7ff ffb1 	bl	800f4fe <ProcessRadioRxTimeout>
        }
    }
}
 800f59c:	46c0      	nop			@ (mov r8, r8)
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	b004      	add	sp, #16
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	2000119c 	.word	0x2000119c

0800f5a8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	0002      	movs	r2, r0
 800f5b0:	1dfb      	adds	r3, r7, #7
 800f5b2:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800f5b4:	4b04      	ldr	r3, [pc, #16]	@ (800f5c8 <LoRaMacEnableRequests+0x20>)
 800f5b6:	1dfa      	adds	r2, r7, #7
 800f5b8:	4904      	ldr	r1, [pc, #16]	@ (800f5cc <LoRaMacEnableRequests+0x24>)
 800f5ba:	7812      	ldrb	r2, [r2, #0]
 800f5bc:	545a      	strb	r2, [r3, r1]
}
 800f5be:	46c0      	nop			@ (mov r8, r8)
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	b002      	add	sp, #8
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	46c0      	nop			@ (mov r8, r8)
 800f5c8:	20000b6c 	.word	0x20000b6c
 800f5cc:	00000482 	.word	0x00000482

0800f5d0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f5d6:	1d3b      	adds	r3, r7, #4
 800f5d8:	4a2c      	ldr	r2, [pc, #176]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f5da:	492d      	ldr	r1, [pc, #180]	@ (800f690 <LoRaMacHandleRequestEvents+0xc0>)
 800f5dc:	5c52      	ldrb	r2, [r2, r1]
 800f5de:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f5e0:	4a2a      	ldr	r2, [pc, #168]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f5e2:	23d0      	movs	r3, #208	@ 0xd0
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	58d3      	ldr	r3, [r2, r3]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d14a      	bne.n	800f682 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f5ec:	4b27      	ldr	r3, [pc, #156]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f5ee:	4a28      	ldr	r2, [pc, #160]	@ (800f690 <LoRaMacHandleRequestEvents+0xc0>)
 800f5f0:	5c9b      	ldrb	r3, [r3, r2]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d005      	beq.n	800f608 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f5fc:	4b23      	ldr	r3, [pc, #140]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f5fe:	4a24      	ldr	r2, [pc, #144]	@ (800f690 <LoRaMacHandleRequestEvents+0xc0>)
 800f600:	5c99      	ldrb	r1, [r3, r2]
 800f602:	2001      	movs	r0, #1
 800f604:	4381      	bics	r1, r0
 800f606:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f608:	4b20      	ldr	r3, [pc, #128]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f60a:	4a21      	ldr	r2, [pc, #132]	@ (800f690 <LoRaMacHandleRequestEvents+0xc0>)
 800f60c:	5c9b      	ldrb	r3, [r3, r2]
 800f60e:	2204      	movs	r2, #4
 800f610:	4013      	ands	r3, r2
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	d005      	beq.n	800f624 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f618:	4b1c      	ldr	r3, [pc, #112]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f61a:	4a1d      	ldr	r2, [pc, #116]	@ (800f690 <LoRaMacHandleRequestEvents+0xc0>)
 800f61c:	5c99      	ldrb	r1, [r3, r2]
 800f61e:	2004      	movs	r0, #4
 800f620:	4381      	bics	r1, r0
 800f622:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f624:	2001      	movs	r0, #1
 800f626:	f7ff ffbf 	bl	800f5a8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f62a:	1d3b      	adds	r3, r7, #4
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	2201      	movs	r2, #1
 800f630:	4013      	ands	r3, r2
 800f632:	b2db      	uxtb	r3, r3
 800f634:	2b00      	cmp	r3, #0
 800f636:	d007      	beq.n	800f648 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f638:	4a14      	ldr	r2, [pc, #80]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f63a:	23d1      	movs	r3, #209	@ 0xd1
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	58d3      	ldr	r3, [r2, r3]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4a14      	ldr	r2, [pc, #80]	@ (800f694 <LoRaMacHandleRequestEvents+0xc4>)
 800f644:	0010      	movs	r0, r2
 800f646:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f648:	1d3b      	adds	r3, r7, #4
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	2204      	movs	r2, #4
 800f64e:	4013      	ands	r3, r2
 800f650:	b2db      	uxtb	r3, r3
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00d      	beq.n	800f672 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f656:	4b10      	ldr	r3, [pc, #64]	@ (800f698 <LoRaMacHandleRequestEvents+0xc8>)
 800f658:	0018      	movs	r0, r3
 800f65a:	f005 f927 	bl	80148ac <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f65e:	f005 f987 	bl	8014970 <LoRaMacConfirmQueueGetCnt>
 800f662:	1e03      	subs	r3, r0, #0
 800f664:	d005      	beq.n	800f672 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f666:	4b09      	ldr	r3, [pc, #36]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f668:	4a09      	ldr	r2, [pc, #36]	@ (800f690 <LoRaMacHandleRequestEvents+0xc0>)
 800f66a:	5c99      	ldrb	r1, [r3, r2]
 800f66c:	2004      	movs	r0, #4
 800f66e:	4301      	orrs	r1, r0
 800f670:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f672:	f004 fbaa 	bl	8013dca <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f676:	4b05      	ldr	r3, [pc, #20]	@ (800f68c <LoRaMacHandleRequestEvents+0xbc>)
 800f678:	4a05      	ldr	r2, [pc, #20]	@ (800f690 <LoRaMacHandleRequestEvents+0xc0>)
 800f67a:	5c99      	ldrb	r1, [r3, r2]
 800f67c:	2020      	movs	r0, #32
 800f67e:	4381      	bics	r1, r0
 800f680:	5499      	strb	r1, [r3, r2]
    }
}
 800f682:	46c0      	nop			@ (mov r8, r8)
 800f684:	46bd      	mov	sp, r7
 800f686:	b002      	add	sp, #8
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	46c0      	nop			@ (mov r8, r8)
 800f68c:	20000b6c 	.word	0x20000b6c
 800f690:	00000481 	.word	0x00000481
 800f694:	20000fa8 	.word	0x20000fa8
 800f698:	20000fbc 	.word	0x20000fbc

0800f69c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f6a2:	4a0b      	ldr	r2, [pc, #44]	@ (800f6d0 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 800f6a4:	23d0      	movs	r3, #208	@ 0xd0
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	58d3      	ldr	r3, [r2, r3]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d10c      	bne.n	800f6c8 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f6ae:	1dfb      	adds	r3, r7, #7
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f6b4:	1dfb      	adds	r3, r7, #7
 800f6b6:	0018      	movs	r0, r3
 800f6b8:	f004 fe96 	bl	80143e8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800f6bc:	1dfb      	adds	r3, r7, #7
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d001      	beq.n	800f6c8 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800f6c4:	f000 fc78 	bl	800ffb8 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800f6c8:	46c0      	nop			@ (mov r8, r8)
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	b002      	add	sp, #8
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	20000b6c 	.word	0x20000b6c

0800f6d4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b088      	sub	sp, #32
 800f6d8:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f6da:	4b26      	ldr	r3, [pc, #152]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6dc:	4a26      	ldr	r2, [pc, #152]	@ (800f778 <LoRaMacHandleIndicationEvents+0xa4>)
 800f6de:	5c9b      	ldrb	r3, [r3, r2]
 800f6e0:	2208      	movs	r2, #8
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00d      	beq.n	800f706 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f6ea:	4b22      	ldr	r3, [pc, #136]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6ec:	4a22      	ldr	r2, [pc, #136]	@ (800f778 <LoRaMacHandleIndicationEvents+0xa4>)
 800f6ee:	5c99      	ldrb	r1, [r3, r2]
 800f6f0:	2008      	movs	r0, #8
 800f6f2:	4381      	bics	r1, r0
 800f6f4:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800f6f6:	4a1f      	ldr	r2, [pc, #124]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6f8:	23d1      	movs	r3, #209	@ 0xd1
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	58d3      	ldr	r3, [r2, r3]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	4a1e      	ldr	r2, [pc, #120]	@ (800f77c <LoRaMacHandleIndicationEvents+0xa8>)
 800f702:	0010      	movs	r0, r2
 800f704:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800f706:	4b1b      	ldr	r3, [pc, #108]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f708:	4a1b      	ldr	r2, [pc, #108]	@ (800f778 <LoRaMacHandleIndicationEvents+0xa4>)
 800f70a:	5c9b      	ldrb	r3, [r3, r2]
 800f70c:	2210      	movs	r2, #16
 800f70e:	4013      	ands	r3, r2
 800f710:	b2db      	uxtb	r3, r3
 800f712:	2b00      	cmp	r3, #0
 800f714:	d013      	beq.n	800f73e <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f716:	1d3b      	adds	r3, r7, #4
 800f718:	2207      	movs	r2, #7
 800f71a:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f71c:	1d3b      	adds	r3, r7, #4
 800f71e:	2200      	movs	r2, #0
 800f720:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800f722:	4a14      	ldr	r2, [pc, #80]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f724:	23d1      	movs	r3, #209	@ 0xd1
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	58d3      	ldr	r3, [r2, r3]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	1d3a      	adds	r2, r7, #4
 800f72e:	0010      	movs	r0, r2
 800f730:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800f732:	4b10      	ldr	r3, [pc, #64]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f734:	4a10      	ldr	r2, [pc, #64]	@ (800f778 <LoRaMacHandleIndicationEvents+0xa4>)
 800f736:	5c99      	ldrb	r1, [r3, r2]
 800f738:	2010      	movs	r0, #16
 800f73a:	4381      	bics	r1, r0
 800f73c:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f73e:	4b0d      	ldr	r3, [pc, #52]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f740:	4a0d      	ldr	r2, [pc, #52]	@ (800f778 <LoRaMacHandleIndicationEvents+0xa4>)
 800f742:	5c9b      	ldrb	r3, [r3, r2]
 800f744:	2202      	movs	r2, #2
 800f746:	4013      	ands	r3, r2
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00d      	beq.n	800f76a <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f74e:	4b09      	ldr	r3, [pc, #36]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f750:	4a09      	ldr	r2, [pc, #36]	@ (800f778 <LoRaMacHandleIndicationEvents+0xa4>)
 800f752:	5c99      	ldrb	r1, [r3, r2]
 800f754:	2002      	movs	r0, #2
 800f756:	4381      	bics	r1, r0
 800f758:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800f75a:	4a06      	ldr	r2, [pc, #24]	@ (800f774 <LoRaMacHandleIndicationEvents+0xa0>)
 800f75c:	23d1      	movs	r3, #209	@ 0xd1
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	58d3      	ldr	r3, [r2, r3]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	4a06      	ldr	r2, [pc, #24]	@ (800f780 <LoRaMacHandleIndicationEvents+0xac>)
 800f766:	0010      	movs	r0, r2
 800f768:	4798      	blx	r3
    }
}
 800f76a:	46c0      	nop			@ (mov r8, r8)
 800f76c:	46bd      	mov	sp, r7
 800f76e:	b008      	add	sp, #32
 800f770:	bd80      	pop	{r7, pc}
 800f772:	46c0      	nop			@ (mov r8, r8)
 800f774:	20000b6c 	.word	0x20000b6c
 800f778:	00000481 	.word	0x00000481
 800f77c:	20000fd0 	.word	0x20000fd0
 800f780:	20000f88 	.word	0x20000f88

0800f784 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f784:	b590      	push	{r4, r7, lr}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f78a:	4b39      	ldr	r3, [pc, #228]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f78c:	4a39      	ldr	r2, [pc, #228]	@ (800f874 <LoRaMacHandleMcpsRequest+0xf0>)
 800f78e:	5c9b      	ldrb	r3, [r3, r2]
 800f790:	2201      	movs	r2, #1
 800f792:	4013      	ands	r3, r2
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	d066      	beq.n	800f868 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 800f79a:	1dfb      	adds	r3, r7, #7
 800f79c:	2200      	movs	r2, #0
 800f79e:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800f7a0:	1dbb      	adds	r3, r7, #6
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f7a6:	4b32      	ldr	r3, [pc, #200]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f7a8:	4a33      	ldr	r2, [pc, #204]	@ (800f878 <LoRaMacHandleMcpsRequest+0xf4>)
 800f7aa:	5c9b      	ldrb	r3, [r3, r2]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d004      	beq.n	800f7ba <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f7b0:	4b2f      	ldr	r3, [pc, #188]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f7b2:	4a31      	ldr	r2, [pc, #196]	@ (800f878 <LoRaMacHandleMcpsRequest+0xf4>)
 800f7b4:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	d105      	bne.n	800f7c6 <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f7ba:	1dfc      	adds	r4, r7, #7
 800f7bc:	f002 fb72 	bl	8011ea4 <CheckRetransUnconfirmedUplink>
 800f7c0:	0003      	movs	r3, r0
 800f7c2:	7023      	strb	r3, [r4, #0]
 800f7c4:	e026      	b.n	800f814 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f7c6:	4b2a      	ldr	r3, [pc, #168]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f7c8:	4a2b      	ldr	r2, [pc, #172]	@ (800f878 <LoRaMacHandleMcpsRequest+0xf4>)
 800f7ca:	5c9b      	ldrb	r3, [r3, r2]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d121      	bne.n	800f814 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800f7d0:	4b27      	ldr	r3, [pc, #156]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f7d2:	4a2a      	ldr	r2, [pc, #168]	@ (800f87c <LoRaMacHandleMcpsRequest+0xf8>)
 800f7d4:	5c9b      	ldrb	r3, [r3, r2]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d019      	beq.n	800f80e <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f7da:	1dfc      	adds	r4, r7, #7
 800f7dc:	f002 fb96 	bl	8011f0c <CheckRetransConfirmedUplink>
 800f7e0:	0003      	movs	r3, r0
 800f7e2:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800f7e4:	4b22      	ldr	r3, [pc, #136]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f7e6:	4a26      	ldr	r2, [pc, #152]	@ (800f880 <LoRaMacHandleMcpsRequest+0xfc>)
 800f7e8:	589a      	ldr	r2, [r3, r2]
 800f7ea:	23b1      	movs	r3, #177	@ 0xb1
 800f7ec:	005b      	lsls	r3, r3, #1
 800f7ee:	5cd3      	ldrb	r3, [r2, r3]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10f      	bne.n	800f814 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 800f7f4:	1dfb      	adds	r3, r7, #7
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	4053      	eors	r3, r2
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d002      	beq.n	800f808 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 800f802:	f002 fbf7 	bl	8011ff4 <AckTimeoutRetriesProcess>
 800f806:	e005      	b.n	800f814 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f808:	f002 fc42 	bl	8012090 <AckTimeoutRetriesFinalize>
 800f80c:	e002      	b.n	800f814 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f80e:	1dbb      	adds	r3, r7, #6
 800f810:	2201      	movs	r2, #1
 800f812:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800f814:	1dfb      	adds	r3, r7, #7
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d011      	beq.n	800f840 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f81c:	4b19      	ldr	r3, [pc, #100]	@ (800f884 <LoRaMacHandleMcpsRequest+0x100>)
 800f81e:	0018      	movs	r0, r3
 800f820:	f00c fc18 	bl	801c054 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f824:	4a12      	ldr	r2, [pc, #72]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f826:	23d0      	movs	r3, #208	@ 0xd0
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	58d3      	ldr	r3, [r2, r3]
 800f82c:	2220      	movs	r2, #32
 800f82e:	4393      	bics	r3, r2
 800f830:	0019      	movs	r1, r3
 800f832:	4a0f      	ldr	r2, [pc, #60]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f834:	23d0      	movs	r3, #208	@ 0xd0
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 800f83a:	f002 fb8f 	bl	8011f5c <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f83e:	e013      	b.n	800f868 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 800f840:	1dbb      	adds	r3, r7, #6
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	2201      	movs	r2, #1
 800f846:	4053      	eors	r3, r2
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00c      	beq.n	800f868 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f84e:	4b08      	ldr	r3, [pc, #32]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f850:	4a08      	ldr	r2, [pc, #32]	@ (800f874 <LoRaMacHandleMcpsRequest+0xf0>)
 800f852:	5c99      	ldrb	r1, [r3, r2]
 800f854:	2020      	movs	r0, #32
 800f856:	4381      	bics	r1, r0
 800f858:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 800f85a:	4b05      	ldr	r3, [pc, #20]	@ (800f870 <LoRaMacHandleMcpsRequest+0xec>)
 800f85c:	4a07      	ldr	r2, [pc, #28]	@ (800f87c <LoRaMacHandleMcpsRequest+0xf8>)
 800f85e:	2100      	movs	r1, #0
 800f860:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 800f862:	2000      	movs	r0, #0
 800f864:	f000 f8a2 	bl	800f9ac <OnTxDelayedTimerEvent>
}
 800f868:	46c0      	nop			@ (mov r8, r8)
 800f86a:	46bd      	mov	sp, r7
 800f86c:	b003      	add	sp, #12
 800f86e:	bd90      	pop	{r4, r7, pc}
 800f870:	20000b6c 	.word	0x20000b6c
 800f874:	00000481 	.word	0x00000481
 800f878:	0000043c 	.word	0x0000043c
 800f87c:	00000413 	.word	0x00000413
 800f880:	00000484 	.word	0x00000484
 800f884:	20000ed4 	.word	0x20000ed4

0800f888 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f88c:	4b1d      	ldr	r3, [pc, #116]	@ (800f904 <LoRaMacHandleMlmeRequest+0x7c>)
 800f88e:	4a1e      	ldr	r2, [pc, #120]	@ (800f908 <LoRaMacHandleMlmeRequest+0x80>)
 800f890:	5c9b      	ldrb	r3, [r3, r2]
 800f892:	2204      	movs	r2, #4
 800f894:	4013      	ands	r3, r2
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d02f      	beq.n	800f8fc <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f89c:	2001      	movs	r0, #1
 800f89e:	f004 ffeb 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 800f8a2:	1e03      	subs	r3, r0, #0
 800f8a4:	d015      	beq.n	800f8d2 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f8a6:	2001      	movs	r0, #1
 800f8a8:	f004 ff7e 	bl	80147a8 <LoRaMacConfirmQueueGetStatus>
 800f8ac:	1e03      	subs	r3, r0, #0
 800f8ae:	d104      	bne.n	800f8ba <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f8b0:	4a14      	ldr	r2, [pc, #80]	@ (800f904 <LoRaMacHandleMlmeRequest+0x7c>)
 800f8b2:	2382      	movs	r3, #130	@ 0x82
 800f8b4:	00db      	lsls	r3, r3, #3
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f8ba:	4a12      	ldr	r2, [pc, #72]	@ (800f904 <LoRaMacHandleMlmeRequest+0x7c>)
 800f8bc:	23d0      	movs	r3, #208	@ 0xd0
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	58d3      	ldr	r3, [r2, r3]
 800f8c2:	2202      	movs	r2, #2
 800f8c4:	4393      	bics	r3, r2
 800f8c6:	0019      	movs	r1, r3
 800f8c8:	4a0e      	ldr	r2, [pc, #56]	@ (800f904 <LoRaMacHandleMlmeRequest+0x7c>)
 800f8ca:	23d0      	movs	r3, #208	@ 0xd0
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800f8d0:	e014      	b.n	800f8fc <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f8d2:	2005      	movs	r0, #5
 800f8d4:	f004 ffd0 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 800f8d8:	1e03      	subs	r3, r0, #0
 800f8da:	d104      	bne.n	800f8e6 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f8dc:	2006      	movs	r0, #6
 800f8de:	f004 ffcb 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 800f8e2:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f8e4:	d00a      	beq.n	800f8fc <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f8e6:	4a07      	ldr	r2, [pc, #28]	@ (800f904 <LoRaMacHandleMlmeRequest+0x7c>)
 800f8e8:	23d0      	movs	r3, #208	@ 0xd0
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	58d3      	ldr	r3, [r2, r3]
 800f8ee:	2202      	movs	r2, #2
 800f8f0:	4393      	bics	r3, r2
 800f8f2:	0019      	movs	r1, r3
 800f8f4:	4a03      	ldr	r2, [pc, #12]	@ (800f904 <LoRaMacHandleMlmeRequest+0x7c>)
 800f8f6:	23d0      	movs	r3, #208	@ 0xd0
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	50d1      	str	r1, [r2, r3]
}
 800f8fc:	46c0      	nop			@ (mov r8, r8)
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	46c0      	nop			@ (mov r8, r8)
 800f904:	20000b6c 	.word	0x20000b6c
 800f908:	00000481 	.word	0x00000481

0800f90c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f910:	200c      	movs	r0, #12
 800f912:	f004 ffb1 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 800f916:	1e03      	subs	r3, r0, #0
 800f918:	d01c      	beq.n	800f954 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f91a:	4b10      	ldr	r3, [pc, #64]	@ (800f95c <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f91c:	4a10      	ldr	r2, [pc, #64]	@ (800f960 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800f91e:	5c9b      	ldrb	r3, [r3, r2]
 800f920:	2201      	movs	r2, #1
 800f922:	4013      	ands	r3, r2
 800f924:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f926:	2b00      	cmp	r3, #0
 800f928:	d114      	bne.n	800f954 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f92a:	4b0c      	ldr	r3, [pc, #48]	@ (800f95c <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f92c:	4a0c      	ldr	r2, [pc, #48]	@ (800f960 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800f92e:	5c9b      	ldrb	r3, [r3, r2]
 800f930:	2204      	movs	r2, #4
 800f932:	4013      	ands	r3, r2
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00c      	beq.n	800f954 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f93a:	4a08      	ldr	r2, [pc, #32]	@ (800f95c <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f93c:	23d0      	movs	r3, #208	@ 0xd0
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	58d3      	ldr	r3, [r2, r3]
 800f942:	2202      	movs	r2, #2
 800f944:	4393      	bics	r3, r2
 800f946:	0019      	movs	r1, r3
 800f948:	4a04      	ldr	r2, [pc, #16]	@ (800f95c <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f94a:	23d0      	movs	r3, #208	@ 0xd0
 800f94c:	009b      	lsls	r3, r3, #2
 800f94e:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800f950:	2301      	movs	r3, #1
 800f952:	e000      	b.n	800f956 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800f954:	2300      	movs	r3, #0
}
 800f956:	0018      	movs	r0, r3
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	20000b6c 	.word	0x20000b6c
 800f960:	00000481 	.word	0x00000481

0800f964 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f968:	4a0f      	ldr	r2, [pc, #60]	@ (800f9a8 <LoRaMacCheckForRxAbort+0x44>)
 800f96a:	23d0      	movs	r3, #208	@ 0xd0
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	58d3      	ldr	r3, [r2, r3]
 800f970:	2280      	movs	r2, #128	@ 0x80
 800f972:	4013      	ands	r3, r2
 800f974:	d015      	beq.n	800f9a2 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f976:	4a0c      	ldr	r2, [pc, #48]	@ (800f9a8 <LoRaMacCheckForRxAbort+0x44>)
 800f978:	23d0      	movs	r3, #208	@ 0xd0
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	58d3      	ldr	r3, [r2, r3]
 800f97e:	2280      	movs	r2, #128	@ 0x80
 800f980:	4393      	bics	r3, r2
 800f982:	0019      	movs	r1, r3
 800f984:	4a08      	ldr	r2, [pc, #32]	@ (800f9a8 <LoRaMacCheckForRxAbort+0x44>)
 800f986:	23d0      	movs	r3, #208	@ 0xd0
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f98c:	4a06      	ldr	r2, [pc, #24]	@ (800f9a8 <LoRaMacCheckForRxAbort+0x44>)
 800f98e:	23d0      	movs	r3, #208	@ 0xd0
 800f990:	009b      	lsls	r3, r3, #2
 800f992:	58d3      	ldr	r3, [r2, r3]
 800f994:	2202      	movs	r2, #2
 800f996:	4393      	bics	r3, r2
 800f998:	0019      	movs	r1, r3
 800f99a:	4a03      	ldr	r2, [pc, #12]	@ (800f9a8 <LoRaMacCheckForRxAbort+0x44>)
 800f99c:	23d0      	movs	r3, #208	@ 0xd0
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	50d1      	str	r1, [r2, r3]
    }
}
 800f9a2:	46c0      	nop			@ (mov r8, r8)
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	20000b6c 	.word	0x20000b6c

0800f9ac <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f9b4:	4b19      	ldr	r3, [pc, #100]	@ (800fa1c <OnTxDelayedTimerEvent+0x70>)
 800f9b6:	0018      	movs	r0, r3
 800f9b8:	f00c fb4c 	bl	801c054 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f9bc:	4a18      	ldr	r2, [pc, #96]	@ (800fa20 <OnTxDelayedTimerEvent+0x74>)
 800f9be:	23d0      	movs	r3, #208	@ 0xd0
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	58d3      	ldr	r3, [r2, r3]
 800f9c4:	2220      	movs	r2, #32
 800f9c6:	4393      	bics	r3, r2
 800f9c8:	0019      	movs	r1, r3
 800f9ca:	4a15      	ldr	r2, [pc, #84]	@ (800fa20 <OnTxDelayedTimerEvent+0x74>)
 800f9cc:	23d0      	movs	r3, #208	@ 0xd0
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	f001 fb5e 	bl	8011094 <ScheduleTx>
 800f9d8:	1e03      	subs	r3, r0, #0
 800f9da:	d01a      	beq.n	800fa12 <OnTxDelayedTimerEvent+0x66>
 800f9dc:	2b0b      	cmp	r3, #11
 800f9de:	d018      	beq.n	800fa12 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800fa20 <OnTxDelayedTimerEvent+0x74>)
 800f9e2:	4a10      	ldr	r2, [pc, #64]	@ (800fa24 <OnTxDelayedTimerEvent+0x78>)
 800f9e4:	589b      	ldr	r3, [r3, r2]
 800f9e6:	2285      	movs	r2, #133	@ 0x85
 800f9e8:	569b      	ldrsb	r3, [r3, r2]
 800f9ea:	b2d9      	uxtb	r1, r3
 800f9ec:	4b0c      	ldr	r3, [pc, #48]	@ (800fa20 <OnTxDelayedTimerEvent+0x74>)
 800f9ee:	4a0e      	ldr	r2, [pc, #56]	@ (800fa28 <OnTxDelayedTimerEvent+0x7c>)
 800f9f0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800f9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800fa20 <OnTxDelayedTimerEvent+0x74>)
 800f9f4:	4a0d      	ldr	r2, [pc, #52]	@ (800fa2c <OnTxDelayedTimerEvent+0x80>)
 800f9f6:	5c99      	ldrb	r1, [r3, r2]
 800f9f8:	4b09      	ldr	r3, [pc, #36]	@ (800fa20 <OnTxDelayedTimerEvent+0x74>)
 800f9fa:	4a0d      	ldr	r2, [pc, #52]	@ (800fa30 <OnTxDelayedTimerEvent+0x84>)
 800f9fc:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f9fe:	4b08      	ldr	r3, [pc, #32]	@ (800fa20 <OnTxDelayedTimerEvent+0x74>)
 800fa00:	4a0c      	ldr	r2, [pc, #48]	@ (800fa34 <OnTxDelayedTimerEvent+0x88>)
 800fa02:	2109      	movs	r1, #9
 800fa04:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fa06:	2009      	movs	r0, #9
 800fa08:	f004 fefc 	bl	8014804 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fa0c:	f002 faa6 	bl	8011f5c <StopRetransmission>
            break;
 800fa10:	e000      	b.n	800fa14 <OnTxDelayedTimerEvent+0x68>
            break;
 800fa12:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800fa14:	46c0      	nop			@ (mov r8, r8)
 800fa16:	46bd      	mov	sp, r7
 800fa18:	b002      	add	sp, #8
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	20000ed4 	.word	0x20000ed4
 800fa20:	20000b6c 	.word	0x20000b6c
 800fa24:	00000484 	.word	0x00000484
 800fa28:	0000043e 	.word	0x0000043e
 800fa2c:	00000412 	.word	0x00000412
 800fa30:	00000441 	.word	0x00000441
 800fa34:	0000043d 	.word	0x0000043d

0800fa38 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fa40:	4b19      	ldr	r3, [pc, #100]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa42:	4a1a      	ldr	r2, [pc, #104]	@ (800faac <OnRxWindow1TimerEvent+0x74>)
 800fa44:	5c99      	ldrb	r1, [r3, r2]
 800fa46:	4a18      	ldr	r2, [pc, #96]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa48:	23ee      	movs	r3, #238	@ 0xee
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800fa4e:	4b16      	ldr	r3, [pc, #88]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa50:	4a17      	ldr	r2, [pc, #92]	@ (800fab0 <OnRxWindow1TimerEvent+0x78>)
 800fa52:	589b      	ldr	r3, [r3, r2]
 800fa54:	22a5      	movs	r2, #165	@ 0xa5
 800fa56:	5c9b      	ldrb	r3, [r3, r2]
 800fa58:	b259      	sxtb	r1, r3
 800fa5a:	4b13      	ldr	r3, [pc, #76]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa5c:	4a15      	ldr	r2, [pc, #84]	@ (800fab4 <OnRxWindow1TimerEvent+0x7c>)
 800fa5e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fa60:	4b11      	ldr	r3, [pc, #68]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa62:	4a13      	ldr	r2, [pc, #76]	@ (800fab0 <OnRxWindow1TimerEvent+0x78>)
 800fa64:	589b      	ldr	r3, [r3, r2]
 800fa66:	22b9      	movs	r2, #185	@ 0xb9
 800fa68:	5c99      	ldrb	r1, [r3, r2]
 800fa6a:	4a0f      	ldr	r2, [pc, #60]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa6c:	23f2      	movs	r3, #242	@ 0xf2
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800fa72:	4b0d      	ldr	r3, [pc, #52]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa74:	4a0e      	ldr	r2, [pc, #56]	@ (800fab0 <OnRxWindow1TimerEvent+0x78>)
 800fa76:	589b      	ldr	r3, [r3, r2]
 800fa78:	22ca      	movs	r2, #202	@ 0xca
 800fa7a:	5c99      	ldrb	r1, [r3, r2]
 800fa7c:	4b0a      	ldr	r3, [pc, #40]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa7e:	4a0e      	ldr	r2, [pc, #56]	@ (800fab8 <OnRxWindow1TimerEvent+0x80>)
 800fa80:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fa82:	4b09      	ldr	r3, [pc, #36]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa84:	4a0d      	ldr	r2, [pc, #52]	@ (800fabc <OnRxWindow1TimerEvent+0x84>)
 800fa86:	2100      	movs	r1, #0
 800fa88:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fa8a:	4b07      	ldr	r3, [pc, #28]	@ (800faa8 <OnRxWindow1TimerEvent+0x70>)
 800fa8c:	4a0c      	ldr	r2, [pc, #48]	@ (800fac0 <OnRxWindow1TimerEvent+0x88>)
 800fa8e:	2100      	movs	r1, #0
 800fa90:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fa92:	4a0c      	ldr	r2, [pc, #48]	@ (800fac4 <OnRxWindow1TimerEvent+0x8c>)
 800fa94:	4b0c      	ldr	r3, [pc, #48]	@ (800fac8 <OnRxWindow1TimerEvent+0x90>)
 800fa96:	0011      	movs	r1, r2
 800fa98:	0018      	movs	r0, r3
 800fa9a:	f001 fda1 	bl	80115e0 <RxWindowSetup>
}
 800fa9e:	46c0      	nop			@ (mov r8, r8)
 800faa0:	46bd      	mov	sp, r7
 800faa2:	b002      	add	sp, #8
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	46c0      	nop			@ (mov r8, r8)
 800faa8:	20000b6c 	.word	0x20000b6c
 800faac:	00000415 	.word	0x00000415
 800fab0:	00000484 	.word	0x00000484
 800fab4:	000003bb 	.word	0x000003bb
 800fab8:	000003c9 	.word	0x000003c9
 800fabc:	000003ca 	.word	0x000003ca
 800fac0:	000003cb 	.word	0x000003cb
 800fac4:	20000f24 	.word	0x20000f24
 800fac8:	20000eec 	.word	0x20000eec

0800facc <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fad4:	4a1c      	ldr	r2, [pc, #112]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fad6:	2390      	movs	r3, #144	@ 0x90
 800fad8:	00db      	lsls	r3, r3, #3
 800fada:	5cd3      	ldrb	r3, [r2, r3]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d02f      	beq.n	800fb40 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fae0:	4b19      	ldr	r3, [pc, #100]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fae2:	4a1a      	ldr	r2, [pc, #104]	@ (800fb4c <OnRxWindow2TimerEvent+0x80>)
 800fae4:	5c99      	ldrb	r1, [r3, r2]
 800fae6:	4a18      	ldr	r2, [pc, #96]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fae8:	23f3      	movs	r3, #243	@ 0xf3
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800faee:	4b16      	ldr	r3, [pc, #88]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800faf0:	4a17      	ldr	r2, [pc, #92]	@ (800fb50 <OnRxWindow2TimerEvent+0x84>)
 800faf2:	589b      	ldr	r3, [r3, r2]
 800faf4:	22a8      	movs	r2, #168	@ 0xa8
 800faf6:	5899      	ldr	r1, [r3, r2]
 800faf8:	4a13      	ldr	r2, [pc, #76]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fafa:	23f4      	movs	r3, #244	@ 0xf4
 800fafc:	009b      	lsls	r3, r3, #2
 800fafe:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fb00:	4b11      	ldr	r3, [pc, #68]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fb02:	4a13      	ldr	r2, [pc, #76]	@ (800fb50 <OnRxWindow2TimerEvent+0x84>)
 800fb04:	589b      	ldr	r3, [r3, r2]
 800fb06:	22b9      	movs	r2, #185	@ 0xb9
 800fb08:	5c99      	ldrb	r1, [r3, r2]
 800fb0a:	4a0f      	ldr	r2, [pc, #60]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fb0c:	23f7      	movs	r3, #247	@ 0xf7
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800fb12:	4b0d      	ldr	r3, [pc, #52]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fb14:	4a0e      	ldr	r2, [pc, #56]	@ (800fb50 <OnRxWindow2TimerEvent+0x84>)
 800fb16:	589b      	ldr	r3, [r3, r2]
 800fb18:	22ca      	movs	r2, #202	@ 0xca
 800fb1a:	5c99      	ldrb	r1, [r3, r2]
 800fb1c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fb1e:	4a0d      	ldr	r2, [pc, #52]	@ (800fb54 <OnRxWindow2TimerEvent+0x88>)
 800fb20:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fb22:	4b09      	ldr	r3, [pc, #36]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fb24:	4a0c      	ldr	r2, [pc, #48]	@ (800fb58 <OnRxWindow2TimerEvent+0x8c>)
 800fb26:	2100      	movs	r1, #0
 800fb28:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fb2a:	4b07      	ldr	r3, [pc, #28]	@ (800fb48 <OnRxWindow2TimerEvent+0x7c>)
 800fb2c:	4a0b      	ldr	r2, [pc, #44]	@ (800fb5c <OnRxWindow2TimerEvent+0x90>)
 800fb2e:	2101      	movs	r1, #1
 800fb30:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fb32:	4a0b      	ldr	r2, [pc, #44]	@ (800fb60 <OnRxWindow2TimerEvent+0x94>)
 800fb34:	4b0b      	ldr	r3, [pc, #44]	@ (800fb64 <OnRxWindow2TimerEvent+0x98>)
 800fb36:	0011      	movs	r1, r2
 800fb38:	0018      	movs	r0, r3
 800fb3a:	f001 fd51 	bl	80115e0 <RxWindowSetup>
 800fb3e:	e000      	b.n	800fb42 <OnRxWindow2TimerEvent+0x76>
        return;
 800fb40:	46c0      	nop			@ (mov r8, r8)
}
 800fb42:	46bd      	mov	sp, r7
 800fb44:	b002      	add	sp, #8
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	20000b6c 	.word	0x20000b6c
 800fb4c:	00000415 	.word	0x00000415
 800fb50:	00000484 	.word	0x00000484
 800fb54:	000003dd 	.word	0x000003dd
 800fb58:	000003de 	.word	0x000003de
 800fb5c:	000003df 	.word	0x000003df
 800fb60:	20000f38 	.word	0x20000f38
 800fb64:	20000f04 	.word	0x20000f04

0800fb68 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800fb70:	4b18      	ldr	r3, [pc, #96]	@ (800fbd4 <OnAckTimeoutTimerEvent+0x6c>)
 800fb72:	0018      	movs	r0, r3
 800fb74:	f00c fa6e 	bl	801c054 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fb78:	4b17      	ldr	r3, [pc, #92]	@ (800fbd8 <OnAckTimeoutTimerEvent+0x70>)
 800fb7a:	4a18      	ldr	r2, [pc, #96]	@ (800fbdc <OnAckTimeoutTimerEvent+0x74>)
 800fb7c:	5c9b      	ldrb	r3, [r3, r2]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d003      	beq.n	800fb8a <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 800fb82:	4b15      	ldr	r3, [pc, #84]	@ (800fbd8 <OnAckTimeoutTimerEvent+0x70>)
 800fb84:	4a16      	ldr	r2, [pc, #88]	@ (800fbe0 <OnAckTimeoutTimerEvent+0x78>)
 800fb86:	2101      	movs	r1, #1
 800fb88:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fb8a:	4b13      	ldr	r3, [pc, #76]	@ (800fbd8 <OnAckTimeoutTimerEvent+0x70>)
 800fb8c:	4a15      	ldr	r2, [pc, #84]	@ (800fbe4 <OnAckTimeoutTimerEvent+0x7c>)
 800fb8e:	589b      	ldr	r3, [r3, r2]
 800fb90:	227c      	movs	r2, #124	@ 0x7c
 800fb92:	5c9b      	ldrb	r3, [r3, r2]
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d105      	bne.n	800fba4 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fb98:	4b0f      	ldr	r3, [pc, #60]	@ (800fbd8 <OnAckTimeoutTimerEvent+0x70>)
 800fb9a:	4a13      	ldr	r2, [pc, #76]	@ (800fbe8 <OnAckTimeoutTimerEvent+0x80>)
 800fb9c:	5c99      	ldrb	r1, [r3, r2]
 800fb9e:	2020      	movs	r0, #32
 800fba0:	4301      	orrs	r1, r0
 800fba2:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fba4:	4a0c      	ldr	r2, [pc, #48]	@ (800fbd8 <OnAckTimeoutTimerEvent+0x70>)
 800fba6:	23d2      	movs	r3, #210	@ 0xd2
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	58d3      	ldr	r3, [r2, r3]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00c      	beq.n	800fbca <OnAckTimeoutTimerEvent+0x62>
 800fbb0:	4a09      	ldr	r2, [pc, #36]	@ (800fbd8 <OnAckTimeoutTimerEvent+0x70>)
 800fbb2:	23d2      	movs	r3, #210	@ 0xd2
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	58d3      	ldr	r3, [r2, r3]
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d005      	beq.n	800fbca <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fbbe:	4a06      	ldr	r2, [pc, #24]	@ (800fbd8 <OnAckTimeoutTimerEvent+0x70>)
 800fbc0:	23d2      	movs	r3, #210	@ 0xd2
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	58d3      	ldr	r3, [r2, r3]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	4798      	blx	r3
    }
}
 800fbca:	46c0      	nop			@ (mov r8, r8)
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	b002      	add	sp, #8
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	46c0      	nop			@ (mov r8, r8)
 800fbd4:	20000f64 	.word	0x20000f64
 800fbd8:	20000b6c 	.word	0x20000b6c
 800fbdc:	00000414 	.word	0x00000414
 800fbe0:	00000413 	.word	0x00000413
 800fbe4:	00000484 	.word	0x00000484
 800fbe8:	00000481 	.word	0x00000481

0800fbec <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fbec:	b590      	push	{r4, r7, lr}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60ba      	str	r2, [r7, #8]
 800fbf4:	607b      	str	r3, [r7, #4]
 800fbf6:	230f      	movs	r3, #15
 800fbf8:	18fb      	adds	r3, r7, r3
 800fbfa:	1c02      	adds	r2, r0, #0
 800fbfc:	701a      	strb	r2, [r3, #0]
 800fbfe:	230e      	movs	r3, #14
 800fc00:	18fb      	adds	r3, r7, r3
 800fc02:	1c0a      	adds	r2, r1, #0
 800fc04:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d005      	beq.n	800fc18 <GetFCntDown+0x2c>
 800fc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d002      	beq.n	800fc18 <GetFCntDown+0x2c>
 800fc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d101      	bne.n	800fc1c <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fc18:	230a      	movs	r3, #10
 800fc1a:	e033      	b.n	800fc84 <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fc1c:	230f      	movs	r3, #15
 800fc1e:	18fb      	adds	r3, r7, r3
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d01a      	beq.n	800fc5c <GetFCntDown+0x70>
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d11c      	bne.n	800fc64 <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fc2a:	1d3b      	adds	r3, r7, #4
 800fc2c:	789b      	ldrb	r3, [r3, #2]
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d110      	bne.n	800fc54 <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fc32:	220e      	movs	r2, #14
 800fc34:	18bb      	adds	r3, r7, r2
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d003      	beq.n	800fc44 <GetFCntDown+0x58>
 800fc3c:	18bb      	adds	r3, r7, r2
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	2b03      	cmp	r3, #3
 800fc42:	d103      	bne.n	800fc4c <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 800fc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc46:	2202      	movs	r2, #2
 800fc48:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fc4a:	e00d      	b.n	800fc68 <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc4e:	2201      	movs	r2, #1
 800fc50:	701a      	strb	r2, [r3, #0]
            break;
 800fc52:	e009      	b.n	800fc68 <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 800fc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc56:	2203      	movs	r2, #3
 800fc58:	701a      	strb	r2, [r3, #0]
            break;
 800fc5a:	e005      	b.n	800fc68 <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc5e:	2204      	movs	r2, #4
 800fc60:	701a      	strb	r2, [r3, #0]
            break;
 800fc62:	e001      	b.n	800fc68 <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fc64:	2305      	movs	r3, #5
 800fc66:	e00d      	b.n	800fc84 <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800fc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc6a:	7818      	ldrb	r0, [r3, #0]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	89db      	ldrh	r3, [r3, #14]
 800fc70:	001c      	movs	r4, r3
 800fc72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc74:	2320      	movs	r3, #32
 800fc76:	18fb      	adds	r3, r7, r3
 800fc78:	8819      	ldrh	r1, [r3, #0]
 800fc7a:	0013      	movs	r3, r2
 800fc7c:	0022      	movs	r2, r4
 800fc7e:	f005 fa89 	bl	8015194 <LoRaMacCryptoGetFCntDown>
 800fc82:	0003      	movs	r3, r0
}
 800fc84:	0018      	movs	r0, r3
 800fc86:	46bd      	mov	sp, r7
 800fc88:	b005      	add	sp, #20
 800fc8a:	bd90      	pop	{r4, r7, pc}

0800fc8c <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fc8c:	b5b0      	push	{r4, r5, r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	0002      	movs	r2, r0
 800fc94:	1dfb      	adds	r3, r7, #7
 800fc96:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc98:	230f      	movs	r3, #15
 800fc9a:	18fb      	adds	r3, r7, r3
 800fc9c:	2203      	movs	r2, #3
 800fc9e:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800fca0:	4b82      	ldr	r3, [pc, #520]	@ (800feac <SwitchClass+0x220>)
 800fca2:	4a83      	ldr	r2, [pc, #524]	@ (800feb0 <SwitchClass+0x224>)
 800fca4:	589b      	ldr	r3, [r3, r2]
 800fca6:	227c      	movs	r2, #124	@ 0x7c
 800fca8:	5c9b      	ldrb	r3, [r3, r2]
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	d100      	bne.n	800fcb0 <SwitchClass+0x24>
 800fcae:	e0de      	b.n	800fe6e <SwitchClass+0x1e2>
 800fcb0:	dd00      	ble.n	800fcb4 <SwitchClass+0x28>
 800fcb2:	e0f4      	b.n	800fe9e <SwitchClass+0x212>
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d003      	beq.n	800fcc0 <SwitchClass+0x34>
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d100      	bne.n	800fcbe <SwitchClass+0x32>
 800fcbc:	e0c2      	b.n	800fe44 <SwitchClass+0x1b8>
 800fcbe:	e0ee      	b.n	800fe9e <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fcc0:	1dfb      	adds	r3, r7, #7
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d10b      	bne.n	800fce0 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800fcc8:	4b78      	ldr	r3, [pc, #480]	@ (800feac <SwitchClass+0x220>)
 800fcca:	4a79      	ldr	r2, [pc, #484]	@ (800feb0 <SwitchClass+0x224>)
 800fccc:	589a      	ldr	r2, [r3, r2]
 800fcce:	4b77      	ldr	r3, [pc, #476]	@ (800feac <SwitchClass+0x220>)
 800fcd0:	4977      	ldr	r1, [pc, #476]	@ (800feb0 <SwitchClass+0x224>)
 800fcd2:	585b      	ldr	r3, [r3, r1]
 800fcd4:	20b0      	movs	r0, #176	@ 0xb0
 800fcd6:	21a8      	movs	r1, #168	@ 0xa8
 800fcd8:	181b      	adds	r3, r3, r0
 800fcda:	1852      	adds	r2, r2, r1
 800fcdc:	ca03      	ldmia	r2!, {r0, r1}
 800fcde:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800fce0:	1dfb      	adds	r3, r7, #7
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d113      	bne.n	800fd10 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fce8:	250f      	movs	r5, #15
 800fcea:	197c      	adds	r4, r7, r5
 800fcec:	1dfb      	adds	r3, r7, #7
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	0018      	movs	r0, r3
 800fcf2:	f004 f86f 	bl	8013dd4 <LoRaMacClassBSwitchClass>
 800fcf6:	0003      	movs	r3, r0
 800fcf8:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800fcfa:	197b      	adds	r3, r7, r5
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d106      	bne.n	800fd10 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fd02:	4b6a      	ldr	r3, [pc, #424]	@ (800feac <SwitchClass+0x220>)
 800fd04:	4a6a      	ldr	r2, [pc, #424]	@ (800feb0 <SwitchClass+0x224>)
 800fd06:	589b      	ldr	r3, [r3, r2]
 800fd08:	1dfa      	adds	r2, r7, #7
 800fd0a:	217c      	movs	r1, #124	@ 0x7c
 800fd0c:	7812      	ldrb	r2, [r2, #0]
 800fd0e:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800fd10:	1dfb      	adds	r3, r7, #7
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	2b02      	cmp	r3, #2
 800fd16:	d000      	beq.n	800fd1a <SwitchClass+0x8e>
 800fd18:	e0bc      	b.n	800fe94 <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fd1a:	4b64      	ldr	r3, [pc, #400]	@ (800feac <SwitchClass+0x220>)
 800fd1c:	4a64      	ldr	r2, [pc, #400]	@ (800feb0 <SwitchClass+0x224>)
 800fd1e:	589b      	ldr	r3, [r3, r2]
 800fd20:	1dfa      	adds	r2, r7, #7
 800fd22:	217c      	movs	r1, #124	@ 0x7c
 800fd24:	7812      	ldrb	r2, [r2, #0]
 800fd26:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fd28:	4860      	ldr	r0, [pc, #384]	@ (800feac <SwitchClass+0x220>)
 800fd2a:	23f8      	movs	r3, #248	@ 0xf8
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	495f      	ldr	r1, [pc, #380]	@ (800feac <SwitchClass+0x220>)
 800fd30:	22f3      	movs	r2, #243	@ 0xf3
 800fd32:	0092      	lsls	r2, r2, #2
 800fd34:	18c3      	adds	r3, r0, r3
 800fd36:	188a      	adds	r2, r1, r2
 800fd38:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fd3a:	c313      	stmia	r3!, {r0, r1, r4}
 800fd3c:	ca03      	ldmia	r2!, {r0, r1}
 800fd3e:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fd40:	4b5a      	ldr	r3, [pc, #360]	@ (800feac <SwitchClass+0x220>)
 800fd42:	4a5c      	ldr	r2, [pc, #368]	@ (800feb4 <SwitchClass+0x228>)
 800fd44:	2102      	movs	r1, #2
 800fd46:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd48:	230e      	movs	r3, #14
 800fd4a:	18fb      	adds	r3, r7, r3
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	701a      	strb	r2, [r3, #0]
 800fd50:	e064      	b.n	800fe1c <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800fd52:	4b56      	ldr	r3, [pc, #344]	@ (800feac <SwitchClass+0x220>)
 800fd54:	4a56      	ldr	r2, [pc, #344]	@ (800feb0 <SwitchClass+0x224>)
 800fd56:	589a      	ldr	r2, [r3, r2]
 800fd58:	240e      	movs	r4, #14
 800fd5a:	193b      	adds	r3, r7, r4
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	b25b      	sxtb	r3, r3
 800fd60:	2152      	movs	r1, #82	@ 0x52
 800fd62:	202c      	movs	r0, #44	@ 0x2c
 800fd64:	4343      	muls	r3, r0
 800fd66:	18d3      	adds	r3, r2, r3
 800fd68:	185b      	adds	r3, r3, r1
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d04c      	beq.n	800fe0a <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800fd70:	4b4e      	ldr	r3, [pc, #312]	@ (800feac <SwitchClass+0x220>)
 800fd72:	4a4f      	ldr	r2, [pc, #316]	@ (800feb0 <SwitchClass+0x224>)
 800fd74:	5899      	ldr	r1, [r3, r2]
 800fd76:	193b      	adds	r3, r7, r4
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	b25b      	sxtb	r3, r3
 800fd7c:	4a4b      	ldr	r2, [pc, #300]	@ (800feac <SwitchClass+0x220>)
 800fd7e:	484c      	ldr	r0, [pc, #304]	@ (800feb0 <SwitchClass+0x224>)
 800fd80:	5812      	ldr	r2, [r2, r0]
 800fd82:	202c      	movs	r0, #44	@ 0x2c
 800fd84:	4343      	muls	r3, r0
 800fd86:	18cb      	adds	r3, r1, r3
 800fd88:	3368      	adds	r3, #104	@ 0x68
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	21b0      	movs	r1, #176	@ 0xb0
 800fd8e:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800fd90:	4b46      	ldr	r3, [pc, #280]	@ (800feac <SwitchClass+0x220>)
 800fd92:	4a47      	ldr	r2, [pc, #284]	@ (800feb0 <SwitchClass+0x224>)
 800fd94:	589a      	ldr	r2, [r3, r2]
 800fd96:	193b      	adds	r3, r7, r4
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	b25b      	sxtb	r3, r3
 800fd9c:	216c      	movs	r1, #108	@ 0x6c
 800fd9e:	202c      	movs	r0, #44	@ 0x2c
 800fda0:	4343      	muls	r3, r0
 800fda2:	18d3      	adds	r3, r2, r3
 800fda4:	185b      	adds	r3, r3, r1
 800fda6:	2100      	movs	r1, #0
 800fda8:	5659      	ldrsb	r1, [r3, r1]
 800fdaa:	4b40      	ldr	r3, [pc, #256]	@ (800feac <SwitchClass+0x220>)
 800fdac:	4a40      	ldr	r2, [pc, #256]	@ (800feb0 <SwitchClass+0x224>)
 800fdae:	589b      	ldr	r3, [r3, r2]
 800fdb0:	b2c9      	uxtb	r1, r1
 800fdb2:	22b4      	movs	r2, #180	@ 0xb4
 800fdb4:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fdb6:	4b3d      	ldr	r3, [pc, #244]	@ (800feac <SwitchClass+0x220>)
 800fdb8:	4a3f      	ldr	r2, [pc, #252]	@ (800feb8 <SwitchClass+0x22c>)
 800fdba:	5c99      	ldrb	r1, [r3, r2]
 800fdbc:	4a3b      	ldr	r2, [pc, #236]	@ (800feac <SwitchClass+0x220>)
 800fdbe:	23f8      	movs	r3, #248	@ 0xf8
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800fdc4:	4b39      	ldr	r3, [pc, #228]	@ (800feac <SwitchClass+0x220>)
 800fdc6:	4a3a      	ldr	r2, [pc, #232]	@ (800feb0 <SwitchClass+0x224>)
 800fdc8:	589b      	ldr	r3, [r3, r2]
 800fdca:	22b0      	movs	r2, #176	@ 0xb0
 800fdcc:	5899      	ldr	r1, [r3, r2]
 800fdce:	4a37      	ldr	r2, [pc, #220]	@ (800feac <SwitchClass+0x220>)
 800fdd0:	23f9      	movs	r3, #249	@ 0xf9
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fdd6:	4b35      	ldr	r3, [pc, #212]	@ (800feac <SwitchClass+0x220>)
 800fdd8:	4a35      	ldr	r2, [pc, #212]	@ (800feb0 <SwitchClass+0x224>)
 800fdda:	589b      	ldr	r3, [r3, r2]
 800fddc:	22b9      	movs	r2, #185	@ 0xb9
 800fdde:	5c99      	ldrb	r1, [r3, r2]
 800fde0:	4a32      	ldr	r2, [pc, #200]	@ (800feac <SwitchClass+0x220>)
 800fde2:	23fc      	movs	r3, #252	@ 0xfc
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800fde8:	4b30      	ldr	r3, [pc, #192]	@ (800feac <SwitchClass+0x220>)
 800fdea:	4a31      	ldr	r2, [pc, #196]	@ (800feb0 <SwitchClass+0x224>)
 800fdec:	589b      	ldr	r3, [r3, r2]
 800fdee:	22ca      	movs	r2, #202	@ 0xca
 800fdf0:	5c99      	ldrb	r1, [r3, r2]
 800fdf2:	4b2e      	ldr	r3, [pc, #184]	@ (800feac <SwitchClass+0x220>)
 800fdf4:	4a31      	ldr	r2, [pc, #196]	@ (800febc <SwitchClass+0x230>)
 800fdf6:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fdf8:	4b2c      	ldr	r3, [pc, #176]	@ (800feac <SwitchClass+0x220>)
 800fdfa:	4a2e      	ldr	r2, [pc, #184]	@ (800feb4 <SwitchClass+0x228>)
 800fdfc:	2103      	movs	r1, #3
 800fdfe:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe00:	4b2a      	ldr	r3, [pc, #168]	@ (800feac <SwitchClass+0x220>)
 800fe02:	4a2f      	ldr	r2, [pc, #188]	@ (800fec0 <SwitchClass+0x234>)
 800fe04:	2101      	movs	r1, #1
 800fe06:	5499      	strb	r1, [r3, r2]
                        break;
 800fe08:	e00e      	b.n	800fe28 <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fe0a:	210e      	movs	r1, #14
 800fe0c:	187b      	adds	r3, r7, r1
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	b25b      	sxtb	r3, r3
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	3301      	adds	r3, #1
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	187b      	adds	r3, r7, r1
 800fe1a:	701a      	strb	r2, [r3, #0]
 800fe1c:	230e      	movs	r3, #14
 800fe1e:	18fb      	adds	r3, r7, r3
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	b25b      	sxtb	r3, r3
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	dd94      	ble.n	800fd52 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fe28:	4b20      	ldr	r3, [pc, #128]	@ (800feac <SwitchClass+0x220>)
 800fe2a:	4a26      	ldr	r2, [pc, #152]	@ (800fec4 <SwitchClass+0x238>)
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fe30:	4b25      	ldr	r3, [pc, #148]	@ (800fec8 <SwitchClass+0x23c>)
 800fe32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe34:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fe36:	f001 fc05 	bl	8011644 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800fe3a:	230f      	movs	r3, #15
 800fe3c:	18fb      	adds	r3, r7, r3
 800fe3e:	2200      	movs	r2, #0
 800fe40:	701a      	strb	r2, [r3, #0]
            }
            break;
 800fe42:	e027      	b.n	800fe94 <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fe44:	250f      	movs	r5, #15
 800fe46:	197c      	adds	r4, r7, r5
 800fe48:	1dfb      	adds	r3, r7, #7
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	0018      	movs	r0, r3
 800fe4e:	f003 ffc1 	bl	8013dd4 <LoRaMacClassBSwitchClass>
 800fe52:	0003      	movs	r3, r0
 800fe54:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800fe56:	197b      	adds	r3, r7, r5
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d11c      	bne.n	800fe98 <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fe5e:	4b13      	ldr	r3, [pc, #76]	@ (800feac <SwitchClass+0x220>)
 800fe60:	4a13      	ldr	r2, [pc, #76]	@ (800feb0 <SwitchClass+0x224>)
 800fe62:	589b      	ldr	r3, [r3, r2]
 800fe64:	1dfa      	adds	r2, r7, #7
 800fe66:	217c      	movs	r1, #124	@ 0x7c
 800fe68:	7812      	ldrb	r2, [r2, #0]
 800fe6a:	545a      	strb	r2, [r3, r1]
            }
            break;
 800fe6c:	e014      	b.n	800fe98 <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fe6e:	1dfb      	adds	r3, r7, #7
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d112      	bne.n	800fe9c <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fe76:	4b0d      	ldr	r3, [pc, #52]	@ (800feac <SwitchClass+0x220>)
 800fe78:	4a0d      	ldr	r2, [pc, #52]	@ (800feb0 <SwitchClass+0x224>)
 800fe7a:	589b      	ldr	r3, [r3, r2]
 800fe7c:	1dfa      	adds	r2, r7, #7
 800fe7e:	217c      	movs	r1, #124	@ 0x7c
 800fe80:	7812      	ldrb	r2, [r2, #0]
 800fe82:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fe84:	4b10      	ldr	r3, [pc, #64]	@ (800fec8 <SwitchClass+0x23c>)
 800fe86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe88:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fe8a:	230f      	movs	r3, #15
 800fe8c:	18fb      	adds	r3, r7, r3
 800fe8e:	2200      	movs	r2, #0
 800fe90:	701a      	strb	r2, [r3, #0]
            }
            break;
 800fe92:	e003      	b.n	800fe9c <SwitchClass+0x210>
            break;
 800fe94:	46c0      	nop			@ (mov r8, r8)
 800fe96:	e002      	b.n	800fe9e <SwitchClass+0x212>
            break;
 800fe98:	46c0      	nop			@ (mov r8, r8)
 800fe9a:	e000      	b.n	800fe9e <SwitchClass+0x212>
            break;
 800fe9c:	46c0      	nop			@ (mov r8, r8)
        }
    }

    return status;
 800fe9e:	230f      	movs	r3, #15
 800fea0:	18fb      	adds	r3, r7, r3
 800fea2:	781b      	ldrb	r3, [r3, #0]
}
 800fea4:	0018      	movs	r0, r3
 800fea6:	46bd      	mov	sp, r7
 800fea8:	b004      	add	sp, #16
 800feaa:	bdb0      	pop	{r4, r5, r7, pc}
 800feac:	20000b6c 	.word	0x20000b6c
 800feb0:	00000484 	.word	0x00000484
 800feb4:	000003f3 	.word	0x000003f3
 800feb8:	00000415 	.word	0x00000415
 800febc:	000003f1 	.word	0x000003f1
 800fec0:	000003f2 	.word	0x000003f2
 800fec4:	00000414 	.word	0x00000414
 800fec8:	0801e62c 	.word	0x0801e62c

0800fecc <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b086      	sub	sp, #24
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	0002      	movs	r2, r0
 800fed4:	1dfb      	adds	r3, r7, #7
 800fed6:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800fed8:	4b17      	ldr	r3, [pc, #92]	@ (800ff38 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800feda:	4a18      	ldr	r2, [pc, #96]	@ (800ff3c <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800fedc:	589b      	ldr	r3, [r3, r2]
 800fede:	22b8      	movs	r2, #184	@ 0xb8
 800fee0:	5c9a      	ldrb	r2, [r3, r2]
 800fee2:	2110      	movs	r1, #16
 800fee4:	187b      	adds	r3, r7, r1
 800fee6:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800fee8:	187b      	adds	r3, r7, r1
 800feea:	1dfa      	adds	r2, r7, #7
 800feec:	7812      	ldrb	r2, [r2, #0]
 800feee:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fef0:	187b      	adds	r3, r7, r1
 800fef2:	220d      	movs	r2, #13
 800fef4:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800fef6:	4b10      	ldr	r3, [pc, #64]	@ (800ff38 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800fef8:	4a10      	ldr	r2, [pc, #64]	@ (800ff3c <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800fefa:	589b      	ldr	r3, [r3, r2]
 800fefc:	22ca      	movs	r2, #202	@ 0xca
 800fefe:	5c9b      	ldrb	r3, [r3, r2]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d002      	beq.n	800ff0a <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ff04:	187b      	adds	r3, r7, r1
 800ff06:	220e      	movs	r2, #14
 800ff08:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ff0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ff38 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800ff0c:	4a0b      	ldr	r2, [pc, #44]	@ (800ff3c <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800ff0e:	589b      	ldr	r3, [r3, r2]
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	2210      	movs	r2, #16
 800ff14:	18ba      	adds	r2, r7, r2
 800ff16:	0011      	movs	r1, r2
 800ff18:	0018      	movs	r0, r3
 800ff1a:	f006 f8a2 	bl	8016062 <RegionGetPhyParam>
 800ff1e:	0003      	movs	r3, r0
 800ff20:	001a      	movs	r2, r3
 800ff22:	210c      	movs	r1, #12
 800ff24:	187b      	adds	r3, r7, r1
 800ff26:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800ff28:	187b      	adds	r3, r7, r1
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	b2db      	uxtb	r3, r3
}
 800ff2e:	0018      	movs	r0, r3
 800ff30:	46bd      	mov	sp, r7
 800ff32:	b006      	add	sp, #24
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	46c0      	nop			@ (mov r8, r8)
 800ff38:	20000b6c 	.word	0x20000b6c
 800ff3c:	00000484 	.word	0x00000484

0800ff40 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ff40:	b5b0      	push	{r4, r5, r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	0004      	movs	r4, r0
 800ff48:	0008      	movs	r0, r1
 800ff4a:	0011      	movs	r1, r2
 800ff4c:	1dfb      	adds	r3, r7, #7
 800ff4e:	1c22      	adds	r2, r4, #0
 800ff50:	701a      	strb	r2, [r3, #0]
 800ff52:	1dbb      	adds	r3, r7, #6
 800ff54:	1c02      	adds	r2, r0, #0
 800ff56:	701a      	strb	r2, [r3, #0]
 800ff58:	1d7b      	adds	r3, r7, #5
 800ff5a:	1c0a      	adds	r2, r1, #0
 800ff5c:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800ff5e:	250e      	movs	r5, #14
 800ff60:	197b      	adds	r3, r7, r5
 800ff62:	2200      	movs	r2, #0
 800ff64:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800ff66:	240c      	movs	r4, #12
 800ff68:	193b      	adds	r3, r7, r4
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ff6e:	1dbb      	adds	r3, r7, #6
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	b25b      	sxtb	r3, r3
 800ff74:	0018      	movs	r0, r3
 800ff76:	f7ff ffa9 	bl	800fecc <GetMaxAppPayloadWithoutFOptsLength>
 800ff7a:	0003      	movs	r3, r0
 800ff7c:	001a      	movs	r2, r3
 800ff7e:	0028      	movs	r0, r5
 800ff80:	183b      	adds	r3, r7, r0
 800ff82:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ff84:	1dfb      	adds	r3, r7, #7
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	b299      	uxth	r1, r3
 800ff8a:	1d7b      	adds	r3, r7, #5
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	193b      	adds	r3, r7, r4
 800ff92:	188a      	adds	r2, r1, r2
 800ff94:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ff96:	193a      	adds	r2, r7, r4
 800ff98:	183b      	adds	r3, r7, r0
 800ff9a:	8812      	ldrh	r2, [r2, #0]
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d805      	bhi.n	800ffae <ValidatePayloadLength+0x6e>
 800ffa2:	193b      	adds	r3, r7, r4
 800ffa4:	881b      	ldrh	r3, [r3, #0]
 800ffa6:	2bff      	cmp	r3, #255	@ 0xff
 800ffa8:	d801      	bhi.n	800ffae <ValidatePayloadLength+0x6e>
    {
        return true;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e000      	b.n	800ffb0 <ValidatePayloadLength+0x70>
    }
    return false;
 800ffae:	2300      	movs	r3, #0
}
 800ffb0:	0018      	movs	r0, r3
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	b004      	add	sp, #16
 800ffb6:	bdb0      	pop	{r4, r5, r7, pc}

0800ffb8 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800ffbc:	4b04      	ldr	r3, [pc, #16]	@ (800ffd0 <SetMlmeScheduleUplinkIndication+0x18>)
 800ffbe:	4a05      	ldr	r2, [pc, #20]	@ (800ffd4 <SetMlmeScheduleUplinkIndication+0x1c>)
 800ffc0:	5c99      	ldrb	r1, [r3, r2]
 800ffc2:	2010      	movs	r0, #16
 800ffc4:	4301      	orrs	r1, r0
 800ffc6:	5499      	strb	r1, [r3, r2]
}
 800ffc8:	46c0      	nop			@ (mov r8, r8)
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	46c0      	nop			@ (mov r8, r8)
 800ffd0:	20000b6c 	.word	0x20000b6c
 800ffd4:	00000481 	.word	0x00000481

0800ffd8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ffd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffda:	b0a5      	sub	sp, #148	@ 0x94
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	000c      	movs	r4, r1
 800ffe2:	0010      	movs	r0, r2
 800ffe4:	0019      	movs	r1, r3
 800ffe6:	1cfb      	adds	r3, r7, #3
 800ffe8:	1c22      	adds	r2, r4, #0
 800ffea:	701a      	strb	r2, [r3, #0]
 800ffec:	1cbb      	adds	r3, r7, #2
 800ffee:	1c02      	adds	r2, r0, #0
 800fff0:	701a      	strb	r2, [r3, #0]
 800fff2:	1c7b      	adds	r3, r7, #1
 800fff4:	1c0a      	adds	r2, r1, #0
 800fff6:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800fff8:	236b      	movs	r3, #107	@ 0x6b
 800fffa:	18fb      	adds	r3, r7, r3
 800fffc:	2200      	movs	r2, #0
 800fffe:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8010000:	2387      	movs	r3, #135	@ 0x87
 8010002:	18fb      	adds	r3, r7, r3
 8010004:	2200      	movs	r2, #0
 8010006:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010008:	2368      	movs	r3, #104	@ 0x68
 801000a:	18fb      	adds	r3, r7, r3
 801000c:	2200      	movs	r2, #0
 801000e:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8010010:	f000 fd5f 	bl	8010ad2 <ProcessMacCommands+0xafa>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010014:	1cfb      	adds	r3, r7, #3
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	18d3      	adds	r3, r2, r3
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	0018      	movs	r0, r3
 8010020:	f004 fa08 	bl	8014434 <LoRaMacCommandsGetCmdSize>
 8010024:	0003      	movs	r3, r0
 8010026:	001a      	movs	r2, r3
 8010028:	1cfb      	adds	r3, r7, #3
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	18d2      	adds	r2, r2, r3
 801002e:	1cbb      	adds	r3, r7, #2
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	429a      	cmp	r2, r3
 8010034:	dd01      	ble.n	801003a <ProcessMacCommands+0x62>
 8010036:	f000 fd55 	bl	8010ae4 <ProcessMacCommands+0xb0c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801003a:	1cfb      	adds	r3, r7, #3
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	1cfa      	adds	r2, r7, #3
 8010040:	1c59      	adds	r1, r3, #1
 8010042:	7011      	strb	r1, [r2, #0]
 8010044:	001a      	movs	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	189b      	adds	r3, r3, r2
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	2b13      	cmp	r3, #19
 801004e:	d901      	bls.n	8010054 <ProcessMacCommands+0x7c>
 8010050:	f000 fd4a 	bl	8010ae8 <ProcessMacCommands+0xb10>
 8010054:	009a      	lsls	r2, r3, #2
 8010056:	4bed      	ldr	r3, [pc, #948]	@ (801040c <ProcessMacCommands+0x434>)
 8010058:	18d3      	adds	r3, r2, r3
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 801005e:	2004      	movs	r0, #4
 8010060:	f004 fc0a 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 8010064:	1e03      	subs	r3, r0, #0
 8010066:	d101      	bne.n	801006c <ProcessMacCommands+0x94>
 8010068:	f000 fd28 	bl	8010abc <ProcessMacCommands+0xae4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801006c:	2104      	movs	r1, #4
 801006e:	2000      	movs	r0, #0
 8010070:	f004 fb66 	bl	8014740 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010074:	1cfb      	adds	r3, r7, #3
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	1cfa      	adds	r2, r7, #3
 801007a:	1c59      	adds	r1, r3, #1
 801007c:	7011      	strb	r1, [r2, #0]
 801007e:	001a      	movs	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	189b      	adds	r3, r3, r2
 8010084:	7819      	ldrb	r1, [r3, #0]
 8010086:	4ae2      	ldr	r2, [pc, #904]	@ (8010410 <ProcessMacCommands+0x438>)
 8010088:	238b      	movs	r3, #139	@ 0x8b
 801008a:	00db      	lsls	r3, r3, #3
 801008c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801008e:	1cfb      	adds	r3, r7, #3
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	1cfa      	adds	r2, r7, #3
 8010094:	1c59      	adds	r1, r3, #1
 8010096:	7011      	strb	r1, [r2, #0]
 8010098:	001a      	movs	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	189b      	adds	r3, r3, r2
 801009e:	7819      	ldrb	r1, [r3, #0]
 80100a0:	4bdb      	ldr	r3, [pc, #876]	@ (8010410 <ProcessMacCommands+0x438>)
 80100a2:	4adc      	ldr	r2, [pc, #880]	@ (8010414 <ProcessMacCommands+0x43c>)
 80100a4:	5499      	strb	r1, [r3, r2]
                }
                break;
 80100a6:	f000 fd09 	bl	8010abc <ProcessMacCommands+0xae4>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80100aa:	2657      	movs	r6, #87	@ 0x57
 80100ac:	19bb      	adds	r3, r7, r6
 80100ae:	2200      	movs	r2, #0
 80100b0:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 80100b2:	2456      	movs	r4, #86	@ 0x56
 80100b4:	193b      	adds	r3, r7, r4
 80100b6:	2200      	movs	r2, #0
 80100b8:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 80100ba:	2555      	movs	r5, #85	@ 0x55
 80100bc:	197b      	adds	r3, r7, r5
 80100be:	2200      	movs	r2, #0
 80100c0:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 80100c2:	2354      	movs	r3, #84	@ 0x54
 80100c4:	18fb      	adds	r3, r7, r3
 80100c6:	2200      	movs	r2, #0
 80100c8:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 80100ca:	2187      	movs	r1, #135	@ 0x87
 80100cc:	187b      	adds	r3, r7, r1
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	2201      	movs	r2, #1
 80100d2:	4053      	eors	r3, r2
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d101      	bne.n	80100de <ProcessMacCommands+0x106>
 80100da:	f000 fcf1 	bl	8010ac0 <ProcessMacCommands+0xae8>
                {
                    adrBlockFound = true;
 80100de:	187b      	adds	r3, r7, r1
 80100e0:	2201      	movs	r2, #1
 80100e2:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80100e4:	1cfb      	adds	r3, r7, #3
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	3b01      	subs	r3, #1
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	18d2      	adds	r2, r2, r3
 80100ee:	2158      	movs	r1, #88	@ 0x58
 80100f0:	187b      	adds	r3, r7, r1
 80100f2:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80100f4:	1cba      	adds	r2, r7, #2
 80100f6:	1cfb      	adds	r3, r7, #3
 80100f8:	7812      	ldrb	r2, [r2, #0]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	1ad3      	subs	r3, r2, r3
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	3301      	adds	r3, #1
 8010102:	b2da      	uxtb	r2, r3
 8010104:	000d      	movs	r5, r1
 8010106:	197b      	adds	r3, r7, r5
 8010108:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 801010a:	4bc1      	ldr	r3, [pc, #772]	@ (8010410 <ProcessMacCommands+0x438>)
 801010c:	4ac2      	ldr	r2, [pc, #776]	@ (8010418 <ProcessMacCommands+0x440>)
 801010e:	589b      	ldr	r3, [r3, r2]
 8010110:	227e      	movs	r2, #126	@ 0x7e
 8010112:	5c9a      	ldrb	r2, [r3, r2]
 8010114:	197b      	adds	r3, r7, r5
 8010116:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010118:	4bbd      	ldr	r3, [pc, #756]	@ (8010410 <ProcessMacCommands+0x438>)
 801011a:	4abf      	ldr	r2, [pc, #764]	@ (8010418 <ProcessMacCommands+0x440>)
 801011c:	589b      	ldr	r3, [r3, r2]
 801011e:	22b8      	movs	r2, #184	@ 0xb8
 8010120:	5c9a      	ldrb	r2, [r3, r2]
 8010122:	197b      	adds	r3, r7, r5
 8010124:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010126:	4bba      	ldr	r3, [pc, #744]	@ (8010410 <ProcessMacCommands+0x438>)
 8010128:	4abb      	ldr	r2, [pc, #748]	@ (8010418 <ProcessMacCommands+0x440>)
 801012a:	589b      	ldr	r3, [r3, r2]
 801012c:	2285      	movs	r2, #133	@ 0x85
 801012e:	569a      	ldrsb	r2, [r3, r2]
 8010130:	197b      	adds	r3, r7, r5
 8010132:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010134:	4bb6      	ldr	r3, [pc, #728]	@ (8010410 <ProcessMacCommands+0x438>)
 8010136:	4ab8      	ldr	r2, [pc, #736]	@ (8010418 <ProcessMacCommands+0x440>)
 8010138:	589b      	ldr	r3, [r3, r2]
 801013a:	2284      	movs	r2, #132	@ 0x84
 801013c:	569a      	ldrsb	r2, [r3, r2]
 801013e:	197b      	adds	r3, r7, r5
 8010140:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010142:	4bb3      	ldr	r3, [pc, #716]	@ (8010410 <ProcessMacCommands+0x438>)
 8010144:	4ab4      	ldr	r2, [pc, #720]	@ (8010418 <ProcessMacCommands+0x440>)
 8010146:	589b      	ldr	r3, [r3, r2]
 8010148:	22a4      	movs	r2, #164	@ 0xa4
 801014a:	5c9a      	ldrb	r2, [r3, r2]
 801014c:	197b      	adds	r3, r7, r5
 801014e:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010150:	4baf      	ldr	r3, [pc, #700]	@ (8010410 <ProcessMacCommands+0x438>)
 8010152:	4ab1      	ldr	r2, [pc, #708]	@ (8010418 <ProcessMacCommands+0x440>)
 8010154:	5899      	ldr	r1, [r3, r2]
 8010156:	197b      	adds	r3, r7, r5
 8010158:	22b0      	movs	r2, #176	@ 0xb0
 801015a:	0052      	lsls	r2, r2, #1
 801015c:	588a      	ldr	r2, [r1, r2]
 801015e:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010160:	4bab      	ldr	r3, [pc, #684]	@ (8010410 <ProcessMacCommands+0x438>)
 8010162:	4aad      	ldr	r2, [pc, #692]	@ (8010418 <ProcessMacCommands+0x440>)
 8010164:	589b      	ldr	r3, [r3, r2]
 8010166:	7818      	ldrb	r0, [r3, #0]
 8010168:	193c      	adds	r4, r7, r4
 801016a:	19ba      	adds	r2, r7, r6
 801016c:	1979      	adds	r1, r7, r5
 801016e:	2354      	movs	r3, #84	@ 0x54
 8010170:	18fb      	adds	r3, r7, r3
 8010172:	9301      	str	r3, [sp, #4]
 8010174:	2555      	movs	r5, #85	@ 0x55
 8010176:	197b      	adds	r3, r7, r5
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	0023      	movs	r3, r4
 801017c:	f006 f878 	bl	8016270 <RegionLinkAdrReq>
 8010180:	0003      	movs	r3, r0
 8010182:	001a      	movs	r2, r3
 8010184:	216b      	movs	r1, #107	@ 0x6b
 8010186:	187b      	adds	r3, r7, r1
 8010188:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 801018a:	187b      	adds	r3, r7, r1
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	001a      	movs	r2, r3
 8010190:	2307      	movs	r3, #7
 8010192:	4013      	ands	r3, r2
 8010194:	2b07      	cmp	r3, #7
 8010196:	d117      	bne.n	80101c8 <ProcessMacCommands+0x1f0>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8010198:	4b9d      	ldr	r3, [pc, #628]	@ (8010410 <ProcessMacCommands+0x438>)
 801019a:	4a9f      	ldr	r2, [pc, #636]	@ (8010418 <ProcessMacCommands+0x440>)
 801019c:	589b      	ldr	r3, [r3, r2]
 801019e:	19ba      	adds	r2, r7, r6
 80101a0:	2100      	movs	r1, #0
 80101a2:	5651      	ldrsb	r1, [r2, r1]
 80101a4:	2285      	movs	r2, #133	@ 0x85
 80101a6:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80101a8:	4b99      	ldr	r3, [pc, #612]	@ (8010410 <ProcessMacCommands+0x438>)
 80101aa:	4a9b      	ldr	r2, [pc, #620]	@ (8010418 <ProcessMacCommands+0x440>)
 80101ac:	589b      	ldr	r3, [r3, r2]
 80101ae:	2456      	movs	r4, #86	@ 0x56
 80101b0:	193a      	adds	r2, r7, r4
 80101b2:	2100      	movs	r1, #0
 80101b4:	5651      	ldrsb	r1, [r2, r1]
 80101b6:	2284      	movs	r2, #132	@ 0x84
 80101b8:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80101ba:	4b95      	ldr	r3, [pc, #596]	@ (8010410 <ProcessMacCommands+0x438>)
 80101bc:	4a96      	ldr	r2, [pc, #600]	@ (8010418 <ProcessMacCommands+0x440>)
 80101be:	589b      	ldr	r3, [r3, r2]
 80101c0:	197a      	adds	r2, r7, r5
 80101c2:	7811      	ldrb	r1, [r2, #0]
 80101c4:	22a4      	movs	r2, #164	@ 0xa4
 80101c6:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80101c8:	2386      	movs	r3, #134	@ 0x86
 80101ca:	18fb      	adds	r3, r7, r3
 80101cc:	2200      	movs	r2, #0
 80101ce:	701a      	strb	r2, [r3, #0]
 80101d0:	e00c      	b.n	80101ec <ProcessMacCommands+0x214>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80101d2:	236b      	movs	r3, #107	@ 0x6b
 80101d4:	18fb      	adds	r3, r7, r3
 80101d6:	2201      	movs	r2, #1
 80101d8:	0019      	movs	r1, r3
 80101da:	2003      	movs	r0, #3
 80101dc:	f003 ffba 	bl	8014154 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80101e0:	2186      	movs	r1, #134	@ 0x86
 80101e2:	187b      	adds	r3, r7, r1
 80101e4:	781a      	ldrb	r2, [r3, #0]
 80101e6:	187b      	adds	r3, r7, r1
 80101e8:	3201      	adds	r2, #1
 80101ea:	701a      	strb	r2, [r3, #0]
 80101ec:	2454      	movs	r4, #84	@ 0x54
 80101ee:	193b      	adds	r3, r7, r4
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	2105      	movs	r1, #5
 80101f4:	0018      	movs	r0, r3
 80101f6:	f7ef ff8f 	bl	8000118 <__udivsi3>
 80101fa:	0003      	movs	r3, r0
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	2286      	movs	r2, #134	@ 0x86
 8010200:	18ba      	adds	r2, r7, r2
 8010202:	7812      	ldrb	r2, [r2, #0]
 8010204:	429a      	cmp	r2, r3
 8010206:	d3e4      	bcc.n	80101d2 <ProcessMacCommands+0x1fa>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010208:	193b      	adds	r3, r7, r4
 801020a:	781a      	ldrb	r2, [r3, #0]
 801020c:	1cfb      	adds	r3, r7, #3
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	18d3      	adds	r3, r2, r3
 8010212:	b2da      	uxtb	r2, r3
 8010214:	1cfb      	adds	r3, r7, #3
 8010216:	3a01      	subs	r2, #1
 8010218:	701a      	strb	r2, [r3, #0]
                }
                break;
 801021a:	f000 fc51 	bl	8010ac0 <ProcessMacCommands+0xae8>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 801021e:	1cfb      	adds	r3, r7, #3
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	1cfa      	adds	r2, r7, #3
 8010224:	1c59      	adds	r1, r3, #1
 8010226:	7011      	strb	r1, [r2, #0]
 8010228:	001a      	movs	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	189b      	adds	r3, r3, r2
 801022e:	781a      	ldrb	r2, [r3, #0]
 8010230:	4b77      	ldr	r3, [pc, #476]	@ (8010410 <ProcessMacCommands+0x438>)
 8010232:	4979      	ldr	r1, [pc, #484]	@ (8010418 <ProcessMacCommands+0x440>)
 8010234:	585b      	ldr	r3, [r3, r1]
 8010236:	210f      	movs	r1, #15
 8010238:	400a      	ands	r2, r1
 801023a:	b2d1      	uxtb	r1, r2
 801023c:	22c8      	movs	r2, #200	@ 0xc8
 801023e:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010240:	4b73      	ldr	r3, [pc, #460]	@ (8010410 <ProcessMacCommands+0x438>)
 8010242:	4a75      	ldr	r2, [pc, #468]	@ (8010418 <ProcessMacCommands+0x440>)
 8010244:	589b      	ldr	r3, [r3, r2]
 8010246:	22c8      	movs	r2, #200	@ 0xc8
 8010248:	5c9b      	ldrb	r3, [r3, r2]
 801024a:	001a      	movs	r2, r3
 801024c:	2301      	movs	r3, #1
 801024e:	4093      	lsls	r3, r2
 8010250:	0019      	movs	r1, r3
 8010252:	4b6f      	ldr	r3, [pc, #444]	@ (8010410 <ProcessMacCommands+0x438>)
 8010254:	4a70      	ldr	r2, [pc, #448]	@ (8010418 <ProcessMacCommands+0x440>)
 8010256:	589a      	ldr	r2, [r3, r2]
 8010258:	b289      	uxth	r1, r1
 801025a:	23a6      	movs	r3, #166	@ 0xa6
 801025c:	005b      	lsls	r3, r3, #1
 801025e:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010260:	2368      	movs	r3, #104	@ 0x68
 8010262:	18fb      	adds	r3, r7, r3
 8010264:	2200      	movs	r2, #0
 8010266:	0019      	movs	r1, r3
 8010268:	2004      	movs	r0, #4
 801026a:	f003 ff73 	bl	8014154 <LoRaMacCommandsAddCmd>
                break;
 801026e:	f000 fc30 	bl	8010ad2 <ProcessMacCommands+0xafa>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010272:	256b      	movs	r5, #107	@ 0x6b
 8010274:	197b      	adds	r3, r7, r5
 8010276:	2207      	movs	r2, #7
 8010278:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801027a:	1cfb      	adds	r3, r7, #3
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	18d3      	adds	r3, r2, r3
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	091b      	lsrs	r3, r3, #4
 8010286:	b2db      	uxtb	r3, r3
 8010288:	b25b      	sxtb	r3, r3
 801028a:	2207      	movs	r2, #7
 801028c:	4013      	ands	r3, r2
 801028e:	b25a      	sxtb	r2, r3
 8010290:	204c      	movs	r0, #76	@ 0x4c
 8010292:	183b      	adds	r3, r7, r0
 8010294:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010296:	1cfb      	adds	r3, r7, #3
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	18d3      	adds	r3, r2, r3
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	b25b      	sxtb	r3, r3
 80102a2:	220f      	movs	r2, #15
 80102a4:	4013      	ands	r3, r2
 80102a6:	b25a      	sxtb	r2, r3
 80102a8:	183b      	adds	r3, r7, r0
 80102aa:	701a      	strb	r2, [r3, #0]
                macIndex++;
 80102ac:	1cfb      	adds	r3, r7, #3
 80102ae:	781a      	ldrb	r2, [r3, #0]
 80102b0:	1cfb      	adds	r3, r7, #3
 80102b2:	3201      	adds	r2, #1
 80102b4:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80102b6:	1cfb      	adds	r3, r7, #3
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	1cfa      	adds	r2, r7, #3
 80102bc:	1c59      	adds	r1, r3, #1
 80102be:	7011      	strb	r1, [r2, #0]
 80102c0:	001a      	movs	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	189b      	adds	r3, r3, r2
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	001a      	movs	r2, r3
 80102ca:	183b      	adds	r3, r7, r0
 80102cc:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80102ce:	1cfb      	adds	r3, r7, #3
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	1cfa      	adds	r2, r7, #3
 80102d4:	1c59      	adds	r1, r3, #1
 80102d6:	7011      	strb	r1, [r2, #0]
 80102d8:	001a      	movs	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	189b      	adds	r3, r3, r2
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	021a      	lsls	r2, r3, #8
 80102e2:	183b      	adds	r3, r7, r0
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	431a      	orrs	r2, r3
 80102e8:	183b      	adds	r3, r7, r0
 80102ea:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80102ec:	1cfb      	adds	r3, r7, #3
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	1cfa      	adds	r2, r7, #3
 80102f2:	1c59      	adds	r1, r3, #1
 80102f4:	7011      	strb	r1, [r2, #0]
 80102f6:	001a      	movs	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	189b      	adds	r3, r3, r2
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	041a      	lsls	r2, r3, #16
 8010300:	183b      	adds	r3, r7, r0
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	431a      	orrs	r2, r3
 8010306:	0004      	movs	r4, r0
 8010308:	193b      	adds	r3, r7, r4
 801030a:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 801030c:	193b      	adds	r3, r7, r4
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	2264      	movs	r2, #100	@ 0x64
 8010312:	435a      	muls	r2, r3
 8010314:	193b      	adds	r3, r7, r4
 8010316:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8010318:	4b3d      	ldr	r3, [pc, #244]	@ (8010410 <ProcessMacCommands+0x438>)
 801031a:	4a3f      	ldr	r2, [pc, #252]	@ (8010418 <ProcessMacCommands+0x440>)
 801031c:	589b      	ldr	r3, [r3, r2]
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	193a      	adds	r2, r7, r4
 8010322:	0011      	movs	r1, r2
 8010324:	0018      	movs	r0, r3
 8010326:	f005 ffc1 	bl	80162ac <RegionRxParamSetupReq>
 801032a:	0003      	movs	r3, r0
 801032c:	001a      	movs	r2, r3
 801032e:	197b      	adds	r3, r7, r5
 8010330:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8010332:	197b      	adds	r3, r7, r5
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	001a      	movs	r2, r3
 8010338:	2307      	movs	r3, #7
 801033a:	4013      	ands	r3, r2
 801033c:	2b07      	cmp	r3, #7
 801033e:	d128      	bne.n	8010392 <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010340:	193b      	adds	r3, r7, r4
 8010342:	2100      	movs	r1, #0
 8010344:	5659      	ldrsb	r1, [r3, r1]
 8010346:	4b32      	ldr	r3, [pc, #200]	@ (8010410 <ProcessMacCommands+0x438>)
 8010348:	4a33      	ldr	r2, [pc, #204]	@ (8010418 <ProcessMacCommands+0x440>)
 801034a:	589b      	ldr	r3, [r3, r2]
 801034c:	b2c9      	uxtb	r1, r1
 801034e:	22ac      	movs	r2, #172	@ 0xac
 8010350:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010352:	193b      	adds	r3, r7, r4
 8010354:	2100      	movs	r1, #0
 8010356:	5659      	ldrsb	r1, [r3, r1]
 8010358:	4b2d      	ldr	r3, [pc, #180]	@ (8010410 <ProcessMacCommands+0x438>)
 801035a:	4a2f      	ldr	r2, [pc, #188]	@ (8010418 <ProcessMacCommands+0x440>)
 801035c:	589b      	ldr	r3, [r3, r2]
 801035e:	b2c9      	uxtb	r1, r1
 8010360:	22b4      	movs	r2, #180	@ 0xb4
 8010362:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010364:	4b2a      	ldr	r3, [pc, #168]	@ (8010410 <ProcessMacCommands+0x438>)
 8010366:	4a2c      	ldr	r2, [pc, #176]	@ (8010418 <ProcessMacCommands+0x440>)
 8010368:	589a      	ldr	r2, [r3, r2]
 801036a:	193b      	adds	r3, r7, r4
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	21a8      	movs	r1, #168	@ 0xa8
 8010370:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010372:	4b27      	ldr	r3, [pc, #156]	@ (8010410 <ProcessMacCommands+0x438>)
 8010374:	4a28      	ldr	r2, [pc, #160]	@ (8010418 <ProcessMacCommands+0x440>)
 8010376:	589a      	ldr	r2, [r3, r2]
 8010378:	193b      	adds	r3, r7, r4
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	21b0      	movs	r1, #176	@ 0xb0
 801037e:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010380:	193b      	adds	r3, r7, r4
 8010382:	2101      	movs	r1, #1
 8010384:	5659      	ldrsb	r1, [r3, r1]
 8010386:	4b22      	ldr	r3, [pc, #136]	@ (8010410 <ProcessMacCommands+0x438>)
 8010388:	4a23      	ldr	r2, [pc, #140]	@ (8010418 <ProcessMacCommands+0x440>)
 801038a:	589b      	ldr	r3, [r3, r2]
 801038c:	b2c9      	uxtb	r1, r1
 801038e:	22a5      	movs	r2, #165	@ 0xa5
 8010390:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010392:	236b      	movs	r3, #107	@ 0x6b
 8010394:	18fb      	adds	r3, r7, r3
 8010396:	781a      	ldrb	r2, [r3, #0]
 8010398:	2168      	movs	r1, #104	@ 0x68
 801039a:	187b      	adds	r3, r7, r1
 801039c:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801039e:	187b      	adds	r3, r7, r1
 80103a0:	2201      	movs	r2, #1
 80103a2:	0019      	movs	r1, r3
 80103a4:	2005      	movs	r0, #5
 80103a6:	f003 fed5 	bl	8014154 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80103aa:	f7ff fe05 	bl	800ffb8 <SetMlmeScheduleUplinkIndication>
                break;
 80103ae:	e390      	b.n	8010ad2 <ProcessMacCommands+0xafa>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80103b0:	2185      	movs	r1, #133	@ 0x85
 80103b2:	187b      	adds	r3, r7, r1
 80103b4:	22ff      	movs	r2, #255	@ 0xff
 80103b6:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80103b8:	4a15      	ldr	r2, [pc, #84]	@ (8010410 <ProcessMacCommands+0x438>)
 80103ba:	23d2      	movs	r3, #210	@ 0xd2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	58d3      	ldr	r3, [r2, r3]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00f      	beq.n	80103e4 <ProcessMacCommands+0x40c>
 80103c4:	4a12      	ldr	r2, [pc, #72]	@ (8010410 <ProcessMacCommands+0x438>)
 80103c6:	23d2      	movs	r3, #210	@ 0xd2
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	58d3      	ldr	r3, [r2, r3]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d008      	beq.n	80103e4 <ProcessMacCommands+0x40c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80103d2:	4a0f      	ldr	r2, [pc, #60]	@ (8010410 <ProcessMacCommands+0x438>)
 80103d4:	23d2      	movs	r3, #210	@ 0xd2
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	58d3      	ldr	r3, [r2, r3]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	187c      	adds	r4, r7, r1
 80103de:	4798      	blx	r3
 80103e0:	0003      	movs	r3, r0
 80103e2:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 80103e4:	2168      	movs	r1, #104	@ 0x68
 80103e6:	187b      	adds	r3, r7, r1
 80103e8:	2285      	movs	r2, #133	@ 0x85
 80103ea:	18ba      	adds	r2, r7, r2
 80103ec:	7812      	ldrb	r2, [r2, #0]
 80103ee:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80103f0:	1c7b      	adds	r3, r7, #1
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	223f      	movs	r2, #63	@ 0x3f
 80103f6:	4013      	ands	r3, r2
 80103f8:	b2da      	uxtb	r2, r3
 80103fa:	187b      	adds	r3, r7, r1
 80103fc:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80103fe:	187b      	adds	r3, r7, r1
 8010400:	2202      	movs	r2, #2
 8010402:	0019      	movs	r1, r3
 8010404:	2006      	movs	r0, #6
 8010406:	f003 fea5 	bl	8014154 <LoRaMacCommandsAddCmd>
                break;
 801040a:	e362      	b.n	8010ad2 <ProcessMacCommands+0xafa>
 801040c:	0801e154 	.word	0x0801e154
 8010410:	20000b6c 	.word	0x20000b6c
 8010414:	00000459 	.word	0x00000459
 8010418:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801041c:	246b      	movs	r4, #107	@ 0x6b
 801041e:	193b      	adds	r3, r7, r4
 8010420:	2203      	movs	r2, #3
 8010422:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 8010424:	1cfb      	adds	r3, r7, #3
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	1cfa      	adds	r2, r7, #3
 801042a:	1c59      	adds	r1, r3, #1
 801042c:	7011      	strb	r1, [r2, #0]
 801042e:	001a      	movs	r2, r3
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	189b      	adds	r3, r3, r2
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	b25a      	sxtb	r2, r3
 8010438:	2544      	movs	r5, #68	@ 0x44
 801043a:	197b      	adds	r3, r7, r5
 801043c:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 801043e:	197b      	adds	r3, r7, r5
 8010440:	2038      	movs	r0, #56	@ 0x38
 8010442:	183a      	adds	r2, r7, r0
 8010444:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010446:	1cfb      	adds	r3, r7, #3
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	1cfa      	adds	r2, r7, #3
 801044c:	1c59      	adds	r1, r3, #1
 801044e:	7011      	strb	r1, [r2, #0]
 8010450:	001a      	movs	r2, r3
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	189b      	adds	r3, r3, r2
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	001a      	movs	r2, r3
 801045a:	183b      	adds	r3, r7, r0
 801045c:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801045e:	1cfb      	adds	r3, r7, #3
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	1cfa      	adds	r2, r7, #3
 8010464:	1c59      	adds	r1, r3, #1
 8010466:	7011      	strb	r1, [r2, #0]
 8010468:	001a      	movs	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	189b      	adds	r3, r3, r2
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	021a      	lsls	r2, r3, #8
 8010472:	183b      	adds	r3, r7, r0
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	431a      	orrs	r2, r3
 8010478:	183b      	adds	r3, r7, r0
 801047a:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801047c:	1cfb      	adds	r3, r7, #3
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	1cfa      	adds	r2, r7, #3
 8010482:	1c59      	adds	r1, r3, #1
 8010484:	7011      	strb	r1, [r2, #0]
 8010486:	001a      	movs	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	189b      	adds	r3, r3, r2
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	041a      	lsls	r2, r3, #16
 8010490:	183b      	adds	r3, r7, r0
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	431a      	orrs	r2, r3
 8010496:	183b      	adds	r3, r7, r0
 8010498:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 801049a:	183b      	adds	r3, r7, r0
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	2264      	movs	r2, #100	@ 0x64
 80104a0:	435a      	muls	r2, r3
 80104a2:	183b      	adds	r3, r7, r0
 80104a4:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 80104a6:	183b      	adds	r3, r7, r0
 80104a8:	2200      	movs	r2, #0
 80104aa:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 80104ac:	1cfb      	adds	r3, r7, #3
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	1cfa      	adds	r2, r7, #3
 80104b2:	1c59      	adds	r1, r3, #1
 80104b4:	7011      	strb	r1, [r2, #0]
 80104b6:	001a      	movs	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	189b      	adds	r3, r3, r2
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	b25a      	sxtb	r2, r3
 80104c0:	183b      	adds	r3, r7, r0
 80104c2:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 80104c4:	4b9f      	ldr	r3, [pc, #636]	@ (8010744 <ProcessMacCommands+0x76c>)
 80104c6:	4aa0      	ldr	r2, [pc, #640]	@ (8010748 <ProcessMacCommands+0x770>)
 80104c8:	589b      	ldr	r3, [r3, r2]
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	197a      	adds	r2, r7, r5
 80104ce:	0011      	movs	r1, r2
 80104d0:	0018      	movs	r0, r3
 80104d2:	f005 ff01 	bl	80162d8 <RegionNewChannelReq>
 80104d6:	0003      	movs	r3, r0
 80104d8:	001a      	movs	r2, r3
 80104da:	193b      	adds	r3, r7, r4
 80104dc:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 80104de:	193b      	adds	r3, r7, r4
 80104e0:	781a      	ldrb	r2, [r3, #0]
 80104e2:	2168      	movs	r1, #104	@ 0x68
 80104e4:	187b      	adds	r3, r7, r1
 80104e6:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80104e8:	187b      	adds	r3, r7, r1
 80104ea:	2201      	movs	r2, #1
 80104ec:	0019      	movs	r1, r3
 80104ee:	2007      	movs	r0, #7
 80104f0:	f003 fe30 	bl	8014154 <LoRaMacCommandsAddCmd>
                break;
 80104f4:	e2ed      	b.n	8010ad2 <ProcessMacCommands+0xafa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80104f6:	1cfb      	adds	r3, r7, #3
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	1cfa      	adds	r2, r7, #3
 80104fc:	1c59      	adds	r1, r3, #1
 80104fe:	7011      	strb	r1, [r2, #0]
 8010500:	001a      	movs	r2, r3
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	189b      	adds	r3, r3, r2
 8010506:	781a      	ldrb	r2, [r3, #0]
 8010508:	2084      	movs	r0, #132	@ 0x84
 801050a:	183b      	adds	r3, r7, r0
 801050c:	210f      	movs	r1, #15
 801050e:	400a      	ands	r2, r1
 8010510:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 8010512:	183b      	adds	r3, r7, r0
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d104      	bne.n	8010524 <ProcessMacCommands+0x54c>
                {
                    delay++;
 801051a:	183b      	adds	r3, r7, r0
 801051c:	781a      	ldrb	r2, [r3, #0]
 801051e:	183b      	adds	r3, r7, r0
 8010520:	3201      	adds	r2, #1
 8010522:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8010524:	2384      	movs	r3, #132	@ 0x84
 8010526:	18fb      	adds	r3, r7, r3
 8010528:	781a      	ldrb	r2, [r3, #0]
 801052a:	0013      	movs	r3, r2
 801052c:	015b      	lsls	r3, r3, #5
 801052e:	1a9b      	subs	r3, r3, r2
 8010530:	009b      	lsls	r3, r3, #2
 8010532:	189b      	adds	r3, r3, r2
 8010534:	00db      	lsls	r3, r3, #3
 8010536:	0019      	movs	r1, r3
 8010538:	4b82      	ldr	r3, [pc, #520]	@ (8010744 <ProcessMacCommands+0x76c>)
 801053a:	4a83      	ldr	r2, [pc, #524]	@ (8010748 <ProcessMacCommands+0x770>)
 801053c:	589b      	ldr	r3, [r3, r2]
 801053e:	2294      	movs	r2, #148	@ 0x94
 8010540:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8010542:	4b80      	ldr	r3, [pc, #512]	@ (8010744 <ProcessMacCommands+0x76c>)
 8010544:	4a80      	ldr	r2, [pc, #512]	@ (8010748 <ProcessMacCommands+0x770>)
 8010546:	589b      	ldr	r3, [r3, r2]
 8010548:	2294      	movs	r2, #148	@ 0x94
 801054a:	589b      	ldr	r3, [r3, r2]
 801054c:	4a7d      	ldr	r2, [pc, #500]	@ (8010744 <ProcessMacCommands+0x76c>)
 801054e:	497e      	ldr	r1, [pc, #504]	@ (8010748 <ProcessMacCommands+0x770>)
 8010550:	5852      	ldr	r2, [r2, r1]
 8010552:	21fa      	movs	r1, #250	@ 0xfa
 8010554:	0089      	lsls	r1, r1, #2
 8010556:	468c      	mov	ip, r1
 8010558:	4463      	add	r3, ip
 801055a:	2198      	movs	r1, #152	@ 0x98
 801055c:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801055e:	2368      	movs	r3, #104	@ 0x68
 8010560:	18fb      	adds	r3, r7, r3
 8010562:	2200      	movs	r2, #0
 8010564:	0019      	movs	r1, r3
 8010566:	2008      	movs	r0, #8
 8010568:	f003 fdf4 	bl	8014154 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 801056c:	f7ff fd24 	bl	800ffb8 <SetMlmeScheduleUplinkIndication>
                break;
 8010570:	e2af      	b.n	8010ad2 <ProcessMacCommands+0xafa>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010572:	1cfb      	adds	r3, r7, #3
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	1cfa      	adds	r2, r7, #3
 8010578:	1c59      	adds	r1, r3, #1
 801057a:	7011      	strb	r1, [r2, #0]
 801057c:	001a      	movs	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	189a      	adds	r2, r3, r2
 8010582:	2076      	movs	r0, #118	@ 0x76
 8010584:	183b      	adds	r3, r7, r0
 8010586:	7812      	ldrb	r2, [r2, #0]
 8010588:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 801058a:	2134      	movs	r1, #52	@ 0x34
 801058c:	187b      	adds	r3, r7, r1
 801058e:	2200      	movs	r2, #0
 8010590:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 8010592:	187b      	adds	r3, r7, r1
 8010594:	2200      	movs	r2, #0
 8010596:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010598:	183b      	adds	r3, r7, r0
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2220      	movs	r2, #32
 801059e:	4013      	ands	r3, r2
 80105a0:	d002      	beq.n	80105a8 <ProcessMacCommands+0x5d0>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80105a2:	187b      	adds	r3, r7, r1
 80105a4:	2201      	movs	r2, #1
 80105a6:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80105a8:	2376      	movs	r3, #118	@ 0x76
 80105aa:	18fb      	adds	r3, r7, r3
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	2210      	movs	r2, #16
 80105b0:	4013      	ands	r3, r2
 80105b2:	d003      	beq.n	80105bc <ProcessMacCommands+0x5e4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80105b4:	2334      	movs	r3, #52	@ 0x34
 80105b6:	18fb      	adds	r3, r7, r3
 80105b8:	2201      	movs	r2, #1
 80105ba:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80105bc:	2376      	movs	r3, #118	@ 0x76
 80105be:	18fb      	adds	r3, r7, r3
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	220f      	movs	r2, #15
 80105c4:	4013      	ands	r3, r2
 80105c6:	b2da      	uxtb	r2, r3
 80105c8:	2434      	movs	r4, #52	@ 0x34
 80105ca:	193b      	adds	r3, r7, r4
 80105cc:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80105ce:	4b5d      	ldr	r3, [pc, #372]	@ (8010744 <ProcessMacCommands+0x76c>)
 80105d0:	4a5d      	ldr	r2, [pc, #372]	@ (8010748 <ProcessMacCommands+0x770>)
 80105d2:	589b      	ldr	r3, [r3, r2]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	193a      	adds	r2, r7, r4
 80105d8:	0011      	movs	r1, r2
 80105da:	0018      	movs	r0, r3
 80105dc:	f005 fe92 	bl	8016304 <RegionTxParamSetupReq>
 80105e0:	0003      	movs	r3, r0
 80105e2:	3301      	adds	r3, #1
 80105e4:	d100      	bne.n	80105e8 <ProcessMacCommands+0x610>
 80105e6:	e26d      	b.n	8010ac4 <ProcessMacCommands+0xaec>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80105e8:	4b56      	ldr	r3, [pc, #344]	@ (8010744 <ProcessMacCommands+0x76c>)
 80105ea:	4a57      	ldr	r2, [pc, #348]	@ (8010748 <ProcessMacCommands+0x770>)
 80105ec:	589b      	ldr	r3, [r3, r2]
 80105ee:	193a      	adds	r2, r7, r4
 80105f0:	7811      	ldrb	r1, [r2, #0]
 80105f2:	22b8      	movs	r2, #184	@ 0xb8
 80105f4:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80105f6:	4b53      	ldr	r3, [pc, #332]	@ (8010744 <ProcessMacCommands+0x76c>)
 80105f8:	4a53      	ldr	r2, [pc, #332]	@ (8010748 <ProcessMacCommands+0x770>)
 80105fa:	589b      	ldr	r3, [r3, r2]
 80105fc:	193a      	adds	r2, r7, r4
 80105fe:	7851      	ldrb	r1, [r2, #1]
 8010600:	22b9      	movs	r2, #185	@ 0xb9
 8010602:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010604:	193b      	adds	r3, r7, r4
 8010606:	789b      	ldrb	r3, [r3, #2]
 8010608:	001a      	movs	r2, r3
 801060a:	4b50      	ldr	r3, [pc, #320]	@ (801074c <ProcessMacCommands+0x774>)
 801060c:	5c9a      	ldrb	r2, [r3, r2]
 801060e:	4b4d      	ldr	r3, [pc, #308]	@ (8010744 <ProcessMacCommands+0x76c>)
 8010610:	494d      	ldr	r1, [pc, #308]	@ (8010748 <ProcessMacCommands+0x770>)
 8010612:	585c      	ldr	r4, [r3, r1]
 8010614:	0010      	movs	r0, r2
 8010616:	f7f0 fa51 	bl	8000abc <__aeabi_ui2f>
 801061a:	1c03      	adds	r3, r0, #0
 801061c:	22bc      	movs	r2, #188	@ 0xbc
 801061e:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010620:	212c      	movs	r1, #44	@ 0x2c
 8010622:	187b      	adds	r3, r7, r1
 8010624:	2202      	movs	r2, #2
 8010626:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010628:	4b46      	ldr	r3, [pc, #280]	@ (8010744 <ProcessMacCommands+0x76c>)
 801062a:	4a47      	ldr	r2, [pc, #284]	@ (8010748 <ProcessMacCommands+0x770>)
 801062c:	589b      	ldr	r3, [r3, r2]
 801062e:	22b8      	movs	r2, #184	@ 0xb8
 8010630:	5c9a      	ldrb	r2, [r3, r2]
 8010632:	187b      	adds	r3, r7, r1
 8010634:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010636:	4b43      	ldr	r3, [pc, #268]	@ (8010744 <ProcessMacCommands+0x76c>)
 8010638:	4a43      	ldr	r2, [pc, #268]	@ (8010748 <ProcessMacCommands+0x770>)
 801063a:	589b      	ldr	r3, [r3, r2]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	187a      	adds	r2, r7, r1
 8010640:	0011      	movs	r1, r2
 8010642:	0018      	movs	r0, r3
 8010644:	f005 fd0d 	bl	8016062 <RegionGetPhyParam>
 8010648:	0003      	movs	r3, r0
 801064a:	001a      	movs	r2, r3
 801064c:	2128      	movs	r1, #40	@ 0x28
 801064e:	187b      	adds	r3, r7, r1
 8010650:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010652:	187b      	adds	r3, r7, r1
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	b259      	sxtb	r1, r3
 8010658:	4b3a      	ldr	r3, [pc, #232]	@ (8010744 <ProcessMacCommands+0x76c>)
 801065a:	4a3b      	ldr	r2, [pc, #236]	@ (8010748 <ProcessMacCommands+0x770>)
 801065c:	589b      	ldr	r3, [r3, r2]
 801065e:	2285      	movs	r2, #133	@ 0x85
 8010660:	5698      	ldrsb	r0, [r3, r2]
 8010662:	4b38      	ldr	r3, [pc, #224]	@ (8010744 <ProcessMacCommands+0x76c>)
 8010664:	4a38      	ldr	r2, [pc, #224]	@ (8010748 <ProcessMacCommands+0x770>)
 8010666:	589b      	ldr	r3, [r3, r2]
 8010668:	1c04      	adds	r4, r0, #0
 801066a:	1c08      	adds	r0, r1, #0
 801066c:	b241      	sxtb	r1, r0
 801066e:	b262      	sxtb	r2, r4
 8010670:	4291      	cmp	r1, r2
 8010672:	da00      	bge.n	8010676 <ProcessMacCommands+0x69e>
 8010674:	1c20      	adds	r0, r4, #0
 8010676:	b241      	sxtb	r1, r0
 8010678:	2285      	movs	r2, #133	@ 0x85
 801067a:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801067c:	2368      	movs	r3, #104	@ 0x68
 801067e:	18fb      	adds	r3, r7, r3
 8010680:	2200      	movs	r2, #0
 8010682:	0019      	movs	r1, r3
 8010684:	2009      	movs	r0, #9
 8010686:	f003 fd65 	bl	8014154 <LoRaMacCommandsAddCmd>
                }
                break;
 801068a:	e21b      	b.n	8010ac4 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801068c:	246b      	movs	r4, #107	@ 0x6b
 801068e:	193b      	adds	r3, r7, r4
 8010690:	2203      	movs	r2, #3
 8010692:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 8010694:	1cfb      	adds	r3, r7, #3
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	1cfa      	adds	r2, r7, #3
 801069a:	1c59      	adds	r1, r3, #1
 801069c:	7011      	strb	r1, [r2, #0]
 801069e:	001a      	movs	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	189b      	adds	r3, r3, r2
 80106a4:	781a      	ldrb	r2, [r3, #0]
 80106a6:	2020      	movs	r0, #32
 80106a8:	183b      	adds	r3, r7, r0
 80106aa:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80106ac:	1cfb      	adds	r3, r7, #3
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	1cfa      	adds	r2, r7, #3
 80106b2:	1c59      	adds	r1, r3, #1
 80106b4:	7011      	strb	r1, [r2, #0]
 80106b6:	001a      	movs	r2, r3
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	189b      	adds	r3, r3, r2
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	001a      	movs	r2, r3
 80106c0:	183b      	adds	r3, r7, r0
 80106c2:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80106c4:	1cfb      	adds	r3, r7, #3
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	1cfa      	adds	r2, r7, #3
 80106ca:	1c59      	adds	r1, r3, #1
 80106cc:	7011      	strb	r1, [r2, #0]
 80106ce:	001a      	movs	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	189b      	adds	r3, r3, r2
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	021a      	lsls	r2, r3, #8
 80106d8:	183b      	adds	r3, r7, r0
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	431a      	orrs	r2, r3
 80106de:	183b      	adds	r3, r7, r0
 80106e0:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80106e2:	1cfb      	adds	r3, r7, #3
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	1cfa      	adds	r2, r7, #3
 80106e8:	1c59      	adds	r1, r3, #1
 80106ea:	7011      	strb	r1, [r2, #0]
 80106ec:	001a      	movs	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	189b      	adds	r3, r3, r2
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	041a      	lsls	r2, r3, #16
 80106f6:	183b      	adds	r3, r7, r0
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	431a      	orrs	r2, r3
 80106fc:	0001      	movs	r1, r0
 80106fe:	187b      	adds	r3, r7, r1
 8010700:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8010702:	187b      	adds	r3, r7, r1
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	2264      	movs	r2, #100	@ 0x64
 8010708:	435a      	muls	r2, r3
 801070a:	187b      	adds	r3, r7, r1
 801070c:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 801070e:	4b0d      	ldr	r3, [pc, #52]	@ (8010744 <ProcessMacCommands+0x76c>)
 8010710:	4a0d      	ldr	r2, [pc, #52]	@ (8010748 <ProcessMacCommands+0x770>)
 8010712:	589b      	ldr	r3, [r3, r2]
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	187a      	adds	r2, r7, r1
 8010718:	0011      	movs	r1, r2
 801071a:	0018      	movs	r0, r3
 801071c:	f005 fe08 	bl	8016330 <RegionDlChannelReq>
 8010720:	0003      	movs	r3, r0
 8010722:	001a      	movs	r2, r3
 8010724:	193b      	adds	r3, r7, r4
 8010726:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8010728:	193b      	adds	r3, r7, r4
 801072a:	781a      	ldrb	r2, [r3, #0]
 801072c:	2168      	movs	r1, #104	@ 0x68
 801072e:	187b      	adds	r3, r7, r1
 8010730:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010732:	187b      	adds	r3, r7, r1
 8010734:	2201      	movs	r2, #1
 8010736:	0019      	movs	r1, r3
 8010738:	200a      	movs	r0, #10
 801073a:	f003 fd0b 	bl	8014154 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 801073e:	f7ff fc3b 	bl	800ffb8 <SetMlmeScheduleUplinkIndication>
                break;
 8010742:	e1c6      	b.n	8010ad2 <ProcessMacCommands+0xafa>
 8010744:	20000b6c 	.word	0x20000b6c
 8010748:	00000484 	.word	0x00000484
 801074c:	0801e144 	.word	0x0801e144
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010750:	200a      	movs	r0, #10
 8010752:	f004 f891 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 8010756:	1e03      	subs	r3, r0, #0
 8010758:	d100      	bne.n	801075c <ProcessMacCommands+0x784>
 801075a:	e1b5      	b.n	8010ac8 <ProcessMacCommands+0xaf0>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801075c:	210a      	movs	r1, #10
 801075e:	2000      	movs	r0, #0
 8010760:	f003 ffee 	bl	8014740 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8010764:	2418      	movs	r4, #24
 8010766:	193b      	adds	r3, r7, r4
 8010768:	0018      	movs	r0, r3
 801076a:	2308      	movs	r3, #8
 801076c:	001a      	movs	r2, r3
 801076e:	2100      	movs	r1, #0
 8010770:	f00c fd91 	bl	801d296 <memset>
                    SysTime_t sysTime = { 0 };
 8010774:	2510      	movs	r5, #16
 8010776:	197b      	adds	r3, r7, r5
 8010778:	0018      	movs	r0, r3
 801077a:	2308      	movs	r3, #8
 801077c:	001a      	movs	r2, r3
 801077e:	2100      	movs	r1, #0
 8010780:	f00c fd89 	bl	801d296 <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 8010784:	2608      	movs	r6, #8
 8010786:	19bb      	adds	r3, r7, r6
 8010788:	0018      	movs	r0, r3
 801078a:	2308      	movs	r3, #8
 801078c:	001a      	movs	r2, r3
 801078e:	2100      	movs	r1, #0
 8010790:	f00c fd81 	bl	801d296 <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010794:	1cfb      	adds	r3, r7, #3
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	1cfa      	adds	r2, r7, #3
 801079a:	1c59      	adds	r1, r3, #1
 801079c:	7011      	strb	r1, [r2, #0]
 801079e:	001a      	movs	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	189b      	adds	r3, r3, r2
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	001a      	movs	r2, r3
 80107a8:	193b      	adds	r3, r7, r4
 80107aa:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80107ac:	1cfb      	adds	r3, r7, #3
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	1cfa      	adds	r2, r7, #3
 80107b2:	1c59      	adds	r1, r3, #1
 80107b4:	7011      	strb	r1, [r2, #0]
 80107b6:	001a      	movs	r2, r3
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	189b      	adds	r3, r3, r2
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	021a      	lsls	r2, r3, #8
 80107c0:	193b      	adds	r3, r7, r4
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	431a      	orrs	r2, r3
 80107c6:	0020      	movs	r0, r4
 80107c8:	193b      	adds	r3, r7, r4
 80107ca:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80107cc:	1cfb      	adds	r3, r7, #3
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	1cfa      	adds	r2, r7, #3
 80107d2:	1c59      	adds	r1, r3, #1
 80107d4:	7011      	strb	r1, [r2, #0]
 80107d6:	001a      	movs	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	189b      	adds	r3, r3, r2
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	041a      	lsls	r2, r3, #16
 80107e0:	183b      	adds	r3, r7, r0
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	431a      	orrs	r2, r3
 80107e6:	183b      	adds	r3, r7, r0
 80107e8:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80107ea:	1cfb      	adds	r3, r7, #3
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	1cfa      	adds	r2, r7, #3
 80107f0:	1c59      	adds	r1, r3, #1
 80107f2:	7011      	strb	r1, [r2, #0]
 80107f4:	001a      	movs	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	189b      	adds	r3, r3, r2
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	061a      	lsls	r2, r3, #24
 80107fe:	183b      	adds	r3, r7, r0
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	431a      	orrs	r2, r3
 8010804:	183b      	adds	r3, r7, r0
 8010806:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010808:	1cfb      	adds	r3, r7, #3
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	1cfa      	adds	r2, r7, #3
 801080e:	1c59      	adds	r1, r3, #1
 8010810:	7011      	strb	r1, [r2, #0]
 8010812:	001a      	movs	r2, r3
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	189b      	adds	r3, r3, r2
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	b21a      	sxth	r2, r3
 801081c:	183b      	adds	r3, r7, r0
 801081e:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010820:	0001      	movs	r1, r0
 8010822:	183b      	adds	r3, r7, r0
 8010824:	2204      	movs	r2, #4
 8010826:	5e9b      	ldrsh	r3, [r3, r2]
 8010828:	001a      	movs	r2, r3
 801082a:	0013      	movs	r3, r2
 801082c:	015b      	lsls	r3, r3, #5
 801082e:	1a9b      	subs	r3, r3, r2
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	189b      	adds	r3, r3, r2
 8010834:	00db      	lsls	r3, r3, #3
 8010836:	121b      	asrs	r3, r3, #8
 8010838:	b21a      	sxth	r2, r3
 801083a:	187b      	adds	r3, r7, r1
 801083c:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801083e:	197a      	adds	r2, r7, r5
 8010840:	187b      	adds	r3, r7, r1
 8010842:	0010      	movs	r0, r2
 8010844:	0019      	movs	r1, r3
 8010846:	2308      	movs	r3, #8
 8010848:	001a      	movs	r2, r3
 801084a:	f00c fd51 	bl	801d2f0 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801084e:	197b      	adds	r3, r7, r5
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	4aa7      	ldr	r2, [pc, #668]	@ (8010af0 <ProcessMacCommands+0xb18>)
 8010854:	189a      	adds	r2, r3, r2
 8010856:	002c      	movs	r4, r5
 8010858:	197b      	adds	r3, r7, r5
 801085a:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 801085c:	19bb      	adds	r3, r7, r6
 801085e:	0018      	movs	r0, r3
 8010860:	f00b fad6 	bl	801be10 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010864:	236c      	movs	r3, #108	@ 0x6c
 8010866:	18fd      	adds	r5, r7, r3
 8010868:	48a2      	ldr	r0, [pc, #648]	@ (8010af4 <ProcessMacCommands+0xb1c>)
 801086a:	23ce      	movs	r3, #206	@ 0xce
 801086c:	0099      	lsls	r1, r3, #2
 801086e:	0026      	movs	r6, r4
 8010870:	193a      	adds	r2, r7, r4
 8010872:	2404      	movs	r4, #4
 8010874:	1843      	adds	r3, r0, r1
 8010876:	191c      	adds	r4, r3, r4
 8010878:	466b      	mov	r3, sp
 801087a:	6824      	ldr	r4, [r4, #0]
 801087c:	601c      	str	r4, [r3, #0]
 801087e:	5843      	ldr	r3, [r0, r1]
 8010880:	6811      	ldr	r1, [r2, #0]
 8010882:	6852      	ldr	r2, [r2, #4]
 8010884:	0028      	movs	r0, r5
 8010886:	f00b fa3d 	bl	801bd04 <SysTimeSub>
 801088a:	0035      	movs	r5, r6
 801088c:	197c      	adds	r4, r7, r5
 801088e:	236c      	movs	r3, #108	@ 0x6c
 8010890:	18fb      	adds	r3, r7, r3
 8010892:	2608      	movs	r6, #8
 8010894:	19ba      	adds	r2, r7, r6
 8010896:	4669      	mov	r1, sp
 8010898:	6858      	ldr	r0, [r3, #4]
 801089a:	6008      	str	r0, [r1, #0]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	6811      	ldr	r1, [r2, #0]
 80108a0:	6852      	ldr	r2, [r2, #4]
 80108a2:	0020      	movs	r0, r4
 80108a4:	f00b f9dc 	bl	801bc60 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80108a8:	197b      	adds	r3, r7, r5
 80108aa:	6818      	ldr	r0, [r3, #0]
 80108ac:	6859      	ldr	r1, [r3, #4]
 80108ae:	f00b fa77 	bl	801bda0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80108b2:	f003 facb 	bl	8013e4c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80108b6:	4a8f      	ldr	r2, [pc, #572]	@ (8010af4 <ProcessMacCommands+0xb1c>)
 80108b8:	2387      	movs	r3, #135	@ 0x87
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	2101      	movs	r1, #1
 80108be:	54d1      	strb	r1, [r2, r3]
                }
                break;
 80108c0:	e102      	b.n	8010ac8 <ProcessMacCommands+0xaf0>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80108c2:	200d      	movs	r0, #13
 80108c4:	f003 ffd8 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 80108c8:	1e03      	subs	r3, r0, #0
 80108ca:	d100      	bne.n	80108ce <ProcessMacCommands+0x8f6>
 80108cc:	e0fe      	b.n	8010acc <ProcessMacCommands+0xaf4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80108ce:	210d      	movs	r1, #13
 80108d0:	2000      	movs	r0, #0
 80108d2:	f003 ff35 	bl	8014740 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80108d6:	4a87      	ldr	r2, [pc, #540]	@ (8010af4 <ProcessMacCommands+0xb1c>)
 80108d8:	2390      	movs	r3, #144	@ 0x90
 80108da:	00db      	lsls	r3, r3, #3
 80108dc:	5cd3      	ldrb	r3, [r2, r3]
 80108de:	2b04      	cmp	r3, #4
 80108e0:	d100      	bne.n	80108e4 <ProcessMacCommands+0x90c>
 80108e2:	e0f3      	b.n	8010acc <ProcessMacCommands+0xaf4>
 80108e4:	4a83      	ldr	r2, [pc, #524]	@ (8010af4 <ProcessMacCommands+0xb1c>)
 80108e6:	2390      	movs	r3, #144	@ 0x90
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	5cd3      	ldrb	r3, [r2, r3]
 80108ec:	2b05      	cmp	r3, #5
 80108ee:	d100      	bne.n	80108f2 <ProcessMacCommands+0x91a>
 80108f0:	e0ec      	b.n	8010acc <ProcessMacCommands+0xaf4>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80108f2:	f003 fa8c 	bl	8013e0e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80108f6:	e0e9      	b.n	8010acc <ProcessMacCommands+0xaf4>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80108f8:	207c      	movs	r0, #124	@ 0x7c
 80108fa:	183b      	adds	r3, r7, r0
 80108fc:	2203      	movs	r2, #3
 80108fe:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8010900:	2300      	movs	r3, #0
 8010902:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010904:	1cfb      	adds	r3, r7, #3
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	1cfa      	adds	r2, r7, #3
 801090a:	1c59      	adds	r1, r3, #1
 801090c:	7011      	strb	r1, [r2, #0]
 801090e:	001a      	movs	r2, r3
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	189b      	adds	r3, r3, r2
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010918:	1cfb      	adds	r3, r7, #3
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	1cfa      	adds	r2, r7, #3
 801091e:	1c59      	adds	r1, r3, #1
 8010920:	7011      	strb	r1, [r2, #0]
 8010922:	001a      	movs	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	189b      	adds	r3, r3, r2
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	021b      	lsls	r3, r3, #8
 801092c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801092e:	4313      	orrs	r3, r2
 8010930:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010932:	1cfb      	adds	r3, r7, #3
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	1cfa      	adds	r2, r7, #3
 8010938:	1c59      	adds	r1, r3, #1
 801093a:	7011      	strb	r1, [r2, #0]
 801093c:	001a      	movs	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	189b      	adds	r3, r3, r2
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	041b      	lsls	r3, r3, #16
 8010946:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010948:	4313      	orrs	r3, r2
 801094a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 801094c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801094e:	2264      	movs	r2, #100	@ 0x64
 8010950:	4353      	muls	r3, r2
 8010952:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010954:	1cfb      	adds	r3, r7, #3
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	1cfa      	adds	r2, r7, #3
 801095a:	1c59      	adds	r1, r3, #1
 801095c:	7011      	strb	r1, [r2, #0]
 801095e:	001a      	movs	r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	189b      	adds	r3, r3, r2
 8010964:	781a      	ldrb	r2, [r3, #0]
 8010966:	2677      	movs	r6, #119	@ 0x77
 8010968:	19bb      	adds	r3, r7, r6
 801096a:	210f      	movs	r1, #15
 801096c:	400a      	ands	r2, r1
 801096e:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010970:	0005      	movs	r5, r0
 8010972:	183c      	adds	r4, r7, r0
 8010974:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010976:	19bb      	adds	r3, r7, r6
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	0011      	movs	r1, r2
 801097c:	0018      	movs	r0, r3
 801097e:	f003 fa4b 	bl	8013e18 <LoRaMacClassBPingSlotChannelReq>
 8010982:	0003      	movs	r3, r0
 8010984:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8010986:	2168      	movs	r1, #104	@ 0x68
 8010988:	187b      	adds	r3, r7, r1
 801098a:	197a      	adds	r2, r7, r5
 801098c:	7812      	ldrb	r2, [r2, #0]
 801098e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8010990:	187b      	adds	r3, r7, r1
 8010992:	2201      	movs	r2, #1
 8010994:	0019      	movs	r1, r3
 8010996:	2011      	movs	r0, #17
 8010998:	f003 fbdc 	bl	8014154 <LoRaMacCommandsAddCmd>
                break;
 801099c:	e099      	b.n	8010ad2 <ProcessMacCommands+0xafa>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801099e:	200e      	movs	r0, #14
 80109a0:	f003 ff6a 	bl	8014878 <LoRaMacConfirmQueueIsCmdActive>
 80109a4:	1e03      	subs	r3, r0, #0
 80109a6:	d100      	bne.n	80109aa <ProcessMacCommands+0x9d2>
 80109a8:	e092      	b.n	8010ad0 <ProcessMacCommands+0xaf8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80109aa:	210e      	movs	r1, #14
 80109ac:	2000      	movs	r0, #0
 80109ae:	f003 fec7 	bl	8014740 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80109b2:	207e      	movs	r0, #126	@ 0x7e
 80109b4:	183b      	adds	r3, r7, r0
 80109b6:	2200      	movs	r2, #0
 80109b8:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 80109ba:	247d      	movs	r4, #125	@ 0x7d
 80109bc:	193b      	adds	r3, r7, r4
 80109be:	2200      	movs	r2, #0
 80109c0:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80109c2:	1cfb      	adds	r3, r7, #3
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	1cfa      	adds	r2, r7, #3
 80109c8:	1c59      	adds	r1, r3, #1
 80109ca:	7011      	strb	r1, [r2, #0]
 80109cc:	001a      	movs	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	189b      	adds	r3, r3, r2
 80109d2:	781a      	ldrb	r2, [r3, #0]
 80109d4:	183b      	adds	r3, r7, r0
 80109d6:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80109d8:	1cfb      	adds	r3, r7, #3
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	1cfa      	adds	r2, r7, #3
 80109de:	1c59      	adds	r1, r3, #1
 80109e0:	7011      	strb	r1, [r2, #0]
 80109e2:	001a      	movs	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	189b      	adds	r3, r3, r2
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	021b      	lsls	r3, r3, #8
 80109ec:	b21a      	sxth	r2, r3
 80109ee:	183b      	adds	r3, r7, r0
 80109f0:	2100      	movs	r1, #0
 80109f2:	5e5b      	ldrsh	r3, [r3, r1]
 80109f4:	4313      	orrs	r3, r2
 80109f6:	b21a      	sxth	r2, r3
 80109f8:	183b      	adds	r3, r7, r0
 80109fa:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 80109fc:	1cfb      	adds	r3, r7, #3
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	1cfa      	adds	r2, r7, #3
 8010a02:	1c59      	adds	r1, r3, #1
 8010a04:	7011      	strb	r1, [r2, #0]
 8010a06:	001a      	movs	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	189a      	adds	r2, r3, r2
 8010a0c:	193b      	adds	r3, r7, r4
 8010a0e:	7812      	ldrb	r2, [r2, #0]
 8010a10:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010a12:	4b39      	ldr	r3, [pc, #228]	@ (8010af8 <ProcessMacCommands+0xb20>)
 8010a14:	681a      	ldr	r2, [r3, #0]
 8010a16:	193b      	adds	r3, r7, r4
 8010a18:	7819      	ldrb	r1, [r3, #0]
 8010a1a:	183b      	adds	r3, r7, r0
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	0018      	movs	r0, r3
 8010a20:	f003 fa06 	bl	8013e30 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010a24:	e054      	b.n	8010ad0 <ProcessMacCommands+0xaf8>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	2080      	movs	r0, #128	@ 0x80
 8010a2a:	183a      	adds	r2, r7, r0
 8010a2c:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 8010a2e:	1cfb      	adds	r3, r7, #3
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	1cfa      	adds	r2, r7, #3
 8010a34:	1c59      	adds	r1, r3, #1
 8010a36:	7011      	strb	r1, [r2, #0]
 8010a38:	001a      	movs	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	189b      	adds	r3, r3, r2
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	183a      	adds	r2, r7, r0
 8010a42:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010a44:	1cfb      	adds	r3, r7, #3
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	1cfa      	adds	r2, r7, #3
 8010a4a:	1c59      	adds	r1, r3, #1
 8010a4c:	7011      	strb	r1, [r2, #0]
 8010a4e:	001a      	movs	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	189b      	adds	r3, r3, r2
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	021b      	lsls	r3, r3, #8
 8010a58:	183a      	adds	r2, r7, r0
 8010a5a:	6812      	ldr	r2, [r2, #0]
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	183a      	adds	r2, r7, r0
 8010a60:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010a62:	1cfb      	adds	r3, r7, #3
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	1cfa      	adds	r2, r7, #3
 8010a68:	1c59      	adds	r1, r3, #1
 8010a6a:	7011      	strb	r1, [r2, #0]
 8010a6c:	001a      	movs	r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	189b      	adds	r3, r3, r2
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	041b      	lsls	r3, r3, #16
 8010a76:	183a      	adds	r2, r7, r0
 8010a78:	6812      	ldr	r2, [r2, #0]
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	183a      	adds	r2, r7, r0
 8010a7e:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 8010a80:	183b      	adds	r3, r7, r0
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	2264      	movs	r2, #100	@ 0x64
 8010a86:	4353      	muls	r3, r2
 8010a88:	183a      	adds	r2, r7, r0
 8010a8a:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010a8c:	183b      	adds	r3, r7, r0
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	0018      	movs	r0, r3
 8010a92:	f003 f9e0 	bl	8013e56 <LoRaMacClassBBeaconFreqReq>
 8010a96:	1e03      	subs	r3, r0, #0
 8010a98:	d004      	beq.n	8010aa4 <ProcessMacCommands+0xacc>
                    {
                        macCmdPayload[0] = 1;
 8010a9a:	2368      	movs	r3, #104	@ 0x68
 8010a9c:	18fb      	adds	r3, r7, r3
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	701a      	strb	r2, [r3, #0]
 8010aa2:	e003      	b.n	8010aac <ProcessMacCommands+0xad4>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010aa4:	2368      	movs	r3, #104	@ 0x68
 8010aa6:	18fb      	adds	r3, r7, r3
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010aac:	2368      	movs	r3, #104	@ 0x68
 8010aae:	18fb      	adds	r3, r7, r3
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	0019      	movs	r1, r3
 8010ab4:	2013      	movs	r0, #19
 8010ab6:	f003 fb4d 	bl	8014154 <LoRaMacCommandsAddCmd>
                }
                break;
 8010aba:	e00a      	b.n	8010ad2 <ProcessMacCommands+0xafa>
                break;
 8010abc:	46c0      	nop			@ (mov r8, r8)
 8010abe:	e008      	b.n	8010ad2 <ProcessMacCommands+0xafa>
                break;
 8010ac0:	46c0      	nop			@ (mov r8, r8)
 8010ac2:	e006      	b.n	8010ad2 <ProcessMacCommands+0xafa>
                break;
 8010ac4:	46c0      	nop			@ (mov r8, r8)
 8010ac6:	e004      	b.n	8010ad2 <ProcessMacCommands+0xafa>
                break;
 8010ac8:	46c0      	nop			@ (mov r8, r8)
 8010aca:	e002      	b.n	8010ad2 <ProcessMacCommands+0xafa>
                break;
 8010acc:	46c0      	nop			@ (mov r8, r8)
 8010ace:	e000      	b.n	8010ad2 <ProcessMacCommands+0xafa>
                break;
 8010ad0:	46c0      	nop			@ (mov r8, r8)
    while( macIndex < commandsSize )
 8010ad2:	1cfa      	adds	r2, r7, #3
 8010ad4:	1cbb      	adds	r3, r7, #2
 8010ad6:	7812      	ldrb	r2, [r2, #0]
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d201      	bcs.n	8010ae2 <ProcessMacCommands+0xb0a>
 8010ade:	f7ff fa99 	bl	8010014 <ProcessMacCommands+0x3c>
 8010ae2:	e002      	b.n	8010aea <ProcessMacCommands+0xb12>
            return;
 8010ae4:	46c0      	nop			@ (mov r8, r8)
 8010ae6:	e000      	b.n	8010aea <ProcessMacCommands+0xb12>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010ae8:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8010aea:	46bd      	mov	sp, r7
 8010aec:	b023      	add	sp, #140	@ 0x8c
 8010aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010af0:	12d53d80 	.word	0x12d53d80
 8010af4:	20000b6c 	.word	0x20000b6c
 8010af8:	20000b5c 	.word	0x20000b5c

08010afc <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010afe:	b08f      	sub	sp, #60	@ 0x3c
 8010b00:	af02      	add	r7, sp, #8
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	0008      	movs	r0, r1
 8010b06:	607a      	str	r2, [r7, #4]
 8010b08:	0019      	movs	r1, r3
 8010b0a:	230b      	movs	r3, #11
 8010b0c:	18fb      	adds	r3, r7, r3
 8010b0e:	1c02      	adds	r2, r0, #0
 8010b10:	701a      	strb	r2, [r3, #0]
 8010b12:	2308      	movs	r3, #8
 8010b14:	18fb      	adds	r3, r7, r3
 8010b16:	1c0a      	adds	r2, r1, #0
 8010b18:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b1a:	232f      	movs	r3, #47	@ 0x2f
 8010b1c:	18fb      	adds	r3, r7, r3
 8010b1e:	2203      	movs	r2, #3
 8010b20:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010b22:	4b8f      	ldr	r3, [pc, #572]	@ (8010d60 <Send+0x264>)
 8010b24:	4a8f      	ldr	r2, [pc, #572]	@ (8010d64 <Send+0x268>)
 8010b26:	589a      	ldr	r2, [r3, r2]
 8010b28:	232e      	movs	r3, #46	@ 0x2e
 8010b2a:	18fb      	adds	r3, r7, r3
 8010b2c:	2185      	movs	r1, #133	@ 0x85
 8010b2e:	5c52      	ldrb	r2, [r2, r1]
 8010b30:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010b32:	4b8b      	ldr	r3, [pc, #556]	@ (8010d60 <Send+0x264>)
 8010b34:	4a8b      	ldr	r2, [pc, #556]	@ (8010d64 <Send+0x268>)
 8010b36:	589a      	ldr	r2, [r3, r2]
 8010b38:	232d      	movs	r3, #45	@ 0x2d
 8010b3a:	18fb      	adds	r3, r7, r3
 8010b3c:	2184      	movs	r1, #132	@ 0x84
 8010b3e:	5c52      	ldrb	r2, [r2, r1]
 8010b40:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010b42:	4b87      	ldr	r3, [pc, #540]	@ (8010d60 <Send+0x264>)
 8010b44:	4a87      	ldr	r2, [pc, #540]	@ (8010d64 <Send+0x268>)
 8010b46:	589b      	ldr	r3, [r3, r2]
 8010b48:	2280      	movs	r2, #128	@ 0x80
 8010b4a:	589b      	ldr	r3, [r3, r2]
 8010b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b4e:	4b84      	ldr	r3, [pc, #528]	@ (8010d60 <Send+0x264>)
 8010b50:	4a84      	ldr	r2, [pc, #528]	@ (8010d64 <Send+0x268>)
 8010b52:	589a      	ldr	r2, [r3, r2]
 8010b54:	23b2      	movs	r3, #178	@ 0xb2
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	5cd3      	ldrb	r3, [r2, r3]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d101      	bne.n	8010b62 <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010b5e:	2307      	movs	r3, #7
 8010b60:	e0fa      	b.n	8010d58 <Send+0x25c>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8010b62:	4b7f      	ldr	r3, [pc, #508]	@ (8010d60 <Send+0x264>)
 8010b64:	4a7f      	ldr	r2, [pc, #508]	@ (8010d64 <Send+0x268>)
 8010b66:	589b      	ldr	r3, [r3, r2]
 8010b68:	22c8      	movs	r2, #200	@ 0xc8
 8010b6a:	5c9b      	ldrb	r3, [r3, r2]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d106      	bne.n	8010b7e <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8010b70:	4b7b      	ldr	r3, [pc, #492]	@ (8010d60 <Send+0x264>)
 8010b72:	4a7c      	ldr	r2, [pc, #496]	@ (8010d64 <Send+0x268>)
 8010b74:	589a      	ldr	r2, [r3, r2]
 8010b76:	23aa      	movs	r3, #170	@ 0xaa
 8010b78:	005b      	lsls	r3, r3, #1
 8010b7a:	2100      	movs	r1, #0
 8010b7c:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 8010b7e:	242c      	movs	r4, #44	@ 0x2c
 8010b80:	193b      	adds	r3, r7, r4
 8010b82:	2200      	movs	r2, #0
 8010b84:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8010b86:	193b      	adds	r3, r7, r4
 8010b88:	781a      	ldrb	r2, [r3, #0]
 8010b8a:	210f      	movs	r1, #15
 8010b8c:	438a      	bics	r2, r1
 8010b8e:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8010b90:	4b73      	ldr	r3, [pc, #460]	@ (8010d60 <Send+0x264>)
 8010b92:	4a74      	ldr	r2, [pc, #464]	@ (8010d64 <Send+0x268>)
 8010b94:	589b      	ldr	r3, [r3, r2]
 8010b96:	227e      	movs	r2, #126	@ 0x7e
 8010b98:	5c9a      	ldrb	r2, [r3, r2]
 8010b9a:	193b      	adds	r3, r7, r4
 8010b9c:	01d0      	lsls	r0, r2, #7
 8010b9e:	781a      	ldrb	r2, [r3, #0]
 8010ba0:	217f      	movs	r1, #127	@ 0x7f
 8010ba2:	400a      	ands	r2, r1
 8010ba4:	1c11      	adds	r1, r2, #0
 8010ba6:	1c02      	adds	r2, r0, #0
 8010ba8:	430a      	orrs	r2, r1
 8010baa:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010bac:	4b6c      	ldr	r3, [pc, #432]	@ (8010d60 <Send+0x264>)
 8010bae:	4a6d      	ldr	r2, [pc, #436]	@ (8010d64 <Send+0x268>)
 8010bb0:	589b      	ldr	r3, [r3, r2]
 8010bb2:	227c      	movs	r2, #124	@ 0x7c
 8010bb4:	5c9b      	ldrb	r3, [r3, r2]
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d105      	bne.n	8010bc6 <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 8010bba:	193b      	adds	r3, r7, r4
 8010bbc:	781a      	ldrb	r2, [r3, #0]
 8010bbe:	2110      	movs	r1, #16
 8010bc0:	430a      	orrs	r2, r1
 8010bc2:	701a      	strb	r2, [r3, #0]
 8010bc4:	e005      	b.n	8010bd2 <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010bc6:	232c      	movs	r3, #44	@ 0x2c
 8010bc8:	18fb      	adds	r3, r7, r3
 8010bca:	781a      	ldrb	r2, [r3, #0]
 8010bcc:	2110      	movs	r1, #16
 8010bce:	438a      	bics	r2, r1
 8010bd0:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8010bd2:	4b63      	ldr	r3, [pc, #396]	@ (8010d60 <Send+0x264>)
 8010bd4:	4a63      	ldr	r2, [pc, #396]	@ (8010d64 <Send+0x268>)
 8010bd6:	589a      	ldr	r2, [r3, r2]
 8010bd8:	234c      	movs	r3, #76	@ 0x4c
 8010bda:	33ff      	adds	r3, #255	@ 0xff
 8010bdc:	5cd3      	ldrb	r3, [r2, r3]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d005      	beq.n	8010bee <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 8010be2:	232c      	movs	r3, #44	@ 0x2c
 8010be4:	18fb      	adds	r3, r7, r3
 8010be6:	781a      	ldrb	r2, [r3, #0]
 8010be8:	2120      	movs	r1, #32
 8010bea:	430a      	orrs	r2, r1
 8010bec:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8010bee:	4b5c      	ldr	r3, [pc, #368]	@ (8010d60 <Send+0x264>)
 8010bf0:	4a5c      	ldr	r2, [pc, #368]	@ (8010d64 <Send+0x268>)
 8010bf2:	5899      	ldr	r1, [r3, r2]
 8010bf4:	2014      	movs	r0, #20
 8010bf6:	183b      	adds	r3, r7, r0
 8010bf8:	22b0      	movs	r2, #176	@ 0xb0
 8010bfa:	0052      	lsls	r2, r2, #1
 8010bfc:	588a      	ldr	r2, [r1, r2]
 8010bfe:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8010c00:	0001      	movs	r1, r0
 8010c02:	187b      	adds	r3, r7, r1
 8010c04:	2201      	movs	r2, #1
 8010c06:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010c08:	242c      	movs	r4, #44	@ 0x2c
 8010c0a:	193b      	adds	r3, r7, r4
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	061b      	lsls	r3, r3, #24
 8010c10:	0fdb      	lsrs	r3, r3, #31
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	1e5a      	subs	r2, r3, #1
 8010c16:	4193      	sbcs	r3, r2
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	187b      	adds	r3, r7, r1
 8010c1c:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010c1e:	4b50      	ldr	r3, [pc, #320]	@ (8010d60 <Send+0x264>)
 8010c20:	4a50      	ldr	r2, [pc, #320]	@ (8010d64 <Send+0x268>)
 8010c22:	589b      	ldr	r3, [r3, r2]
 8010c24:	2280      	movs	r2, #128	@ 0x80
 8010c26:	589a      	ldr	r2, [r3, r2]
 8010c28:	0008      	movs	r0, r1
 8010c2a:	183b      	adds	r3, r7, r0
 8010c2c:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8010d60 <Send+0x264>)
 8010c30:	23fd      	movs	r3, #253	@ 0xfd
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	5ad2      	ldrh	r2, [r2, r3]
 8010c36:	183b      	adds	r3, r7, r0
 8010c38:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010c3a:	4b49      	ldr	r3, [pc, #292]	@ (8010d60 <Send+0x264>)
 8010c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8010d68 <Send+0x26c>)
 8010c3e:	5a9a      	ldrh	r2, [r3, r2]
 8010c40:	183b      	adds	r3, r7, r0
 8010c42:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010c44:	4b46      	ldr	r3, [pc, #280]	@ (8010d60 <Send+0x264>)
 8010c46:	4a47      	ldr	r2, [pc, #284]	@ (8010d64 <Send+0x268>)
 8010c48:	589b      	ldr	r3, [r3, r2]
 8010c4a:	2285      	movs	r2, #133	@ 0x85
 8010c4c:	569a      	ldrsb	r2, [r3, r2]
 8010c4e:	183b      	adds	r3, r7, r0
 8010c50:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010c52:	4b43      	ldr	r3, [pc, #268]	@ (8010d60 <Send+0x264>)
 8010c54:	4a43      	ldr	r2, [pc, #268]	@ (8010d64 <Send+0x268>)
 8010c56:	589b      	ldr	r3, [r3, r2]
 8010c58:	2284      	movs	r2, #132	@ 0x84
 8010c5a:	569a      	ldrsb	r2, [r3, r2]
 8010c5c:	183b      	adds	r3, r7, r0
 8010c5e:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010c60:	4b3f      	ldr	r3, [pc, #252]	@ (8010d60 <Send+0x264>)
 8010c62:	4a40      	ldr	r2, [pc, #256]	@ (8010d64 <Send+0x268>)
 8010c64:	589b      	ldr	r3, [r3, r2]
 8010c66:	22b8      	movs	r2, #184	@ 0xb8
 8010c68:	5c9a      	ldrb	r2, [r3, r2]
 8010c6a:	183b      	adds	r3, r7, r0
 8010c6c:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8010c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8010d60 <Send+0x264>)
 8010c70:	4a3c      	ldr	r2, [pc, #240]	@ (8010d64 <Send+0x268>)
 8010c72:	589b      	ldr	r3, [r3, r2]
 8010c74:	781a      	ldrb	r2, [r3, #0]
 8010c76:	183b      	adds	r3, r7, r0
 8010c78:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010c7a:	4b39      	ldr	r3, [pc, #228]	@ (8010d60 <Send+0x264>)
 8010c7c:	4a39      	ldr	r2, [pc, #228]	@ (8010d64 <Send+0x268>)
 8010c7e:	589b      	ldr	r3, [r3, r2]
 8010c80:	3385      	adds	r3, #133	@ 0x85
 8010c82:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 8010c84:	4b36      	ldr	r3, [pc, #216]	@ (8010d60 <Send+0x264>)
 8010c86:	4a37      	ldr	r2, [pc, #220]	@ (8010d64 <Send+0x268>)
 8010c88:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010c8a:	3384      	adds	r3, #132	@ 0x84
 8010c8c:	001a      	movs	r2, r3
 8010c8e:	2328      	movs	r3, #40	@ 0x28
 8010c90:	18fb      	adds	r3, r7, r3
 8010c92:	1838      	adds	r0, r7, r0
 8010c94:	f002 fff3 	bl	8013c7e <LoRaMacAdrCalcNext>
 8010c98:	0003      	movs	r3, r0
 8010c9a:	0019      	movs	r1, r3
 8010c9c:	0026      	movs	r6, r4
 8010c9e:	193b      	adds	r3, r7, r4
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	400a      	ands	r2, r1
 8010ca4:	0190      	lsls	r0, r2, #6
 8010ca6:	781a      	ldrb	r2, [r3, #0]
 8010ca8:	2140      	movs	r1, #64	@ 0x40
 8010caa:	438a      	bics	r2, r1
 8010cac:	1c11      	adds	r1, r2, #0
 8010cae:	1c02      	adds	r2, r0, #0
 8010cb0:	430a      	orrs	r2, r1
 8010cb2:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010cb4:	222f      	movs	r2, #47	@ 0x2f
 8010cb6:	18bc      	adds	r4, r7, r2
 8010cb8:	687d      	ldr	r5, [r7, #4]
 8010cba:	230b      	movs	r3, #11
 8010cbc:	18fb      	adds	r3, r7, r3
 8010cbe:	781a      	ldrb	r2, [r3, #0]
 8010cc0:	19b9      	adds	r1, r7, r6
 8010cc2:	68f8      	ldr	r0, [r7, #12]
 8010cc4:	2308      	movs	r3, #8
 8010cc6:	18fb      	adds	r3, r7, r3
 8010cc8:	881b      	ldrh	r3, [r3, #0]
 8010cca:	9300      	str	r3, [sp, #0]
 8010ccc:	002b      	movs	r3, r5
 8010cce:	f000 fd05 	bl	80116dc <PrepareFrame>
 8010cd2:	0003      	movs	r3, r0
 8010cd4:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010cd6:	222f      	movs	r2, #47	@ 0x2f
 8010cd8:	18bb      	adds	r3, r7, r2
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d003      	beq.n	8010ce8 <Send+0x1ec>
 8010ce0:	18bb      	adds	r3, r7, r2
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	2b0a      	cmp	r3, #10
 8010ce6:	d10b      	bne.n	8010d00 <Send+0x204>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8010ce8:	232f      	movs	r3, #47	@ 0x2f
 8010cea:	18fc      	adds	r4, r7, r3
 8010cec:	2340      	movs	r3, #64	@ 0x40
 8010cee:	2208      	movs	r2, #8
 8010cf0:	189b      	adds	r3, r3, r2
 8010cf2:	19db      	adds	r3, r3, r7
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	0018      	movs	r0, r3
 8010cf8:	f000 f9cc 	bl	8011094 <ScheduleTx>
 8010cfc:	0003      	movs	r3, r0
 8010cfe:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010d00:	232f      	movs	r3, #47	@ 0x2f
 8010d02:	18fb      	adds	r3, r7, r3
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d010      	beq.n	8010d2c <Send+0x230>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8010d0a:	4b15      	ldr	r3, [pc, #84]	@ (8010d60 <Send+0x264>)
 8010d0c:	4a15      	ldr	r2, [pc, #84]	@ (8010d64 <Send+0x268>)
 8010d0e:	589b      	ldr	r3, [r3, r2]
 8010d10:	222e      	movs	r2, #46	@ 0x2e
 8010d12:	18ba      	adds	r2, r7, r2
 8010d14:	2185      	movs	r1, #133	@ 0x85
 8010d16:	7812      	ldrb	r2, [r2, #0]
 8010d18:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8010d1a:	4b11      	ldr	r3, [pc, #68]	@ (8010d60 <Send+0x264>)
 8010d1c:	4a11      	ldr	r2, [pc, #68]	@ (8010d64 <Send+0x268>)
 8010d1e:	589b      	ldr	r3, [r3, r2]
 8010d20:	222d      	movs	r2, #45	@ 0x2d
 8010d22:	18ba      	adds	r2, r7, r2
 8010d24:	2184      	movs	r1, #132	@ 0x84
 8010d26:	7812      	ldrb	r2, [r2, #0]
 8010d28:	545a      	strb	r2, [r3, r1]
 8010d2a:	e012      	b.n	8010d52 <Send+0x256>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 8010d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8010d60 <Send+0x264>)
 8010d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8010d64 <Send+0x268>)
 8010d30:	589a      	ldr	r2, [r3, r2]
 8010d32:	234c      	movs	r3, #76	@ 0x4c
 8010d34:	33ff      	adds	r3, #255	@ 0xff
 8010d36:	2100      	movs	r1, #0
 8010d38:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8010d3a:	4b09      	ldr	r3, [pc, #36]	@ (8010d60 <Send+0x264>)
 8010d3c:	4a09      	ldr	r2, [pc, #36]	@ (8010d64 <Send+0x268>)
 8010d3e:	589b      	ldr	r3, [r3, r2]
 8010d40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d42:	2180      	movs	r1, #128	@ 0x80
 8010d44:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010d46:	f003 fa8f 	bl	8014268 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010d4a:	1e03      	subs	r3, r0, #0
 8010d4c:	d001      	beq.n	8010d52 <Send+0x256>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d4e:	2313      	movs	r3, #19
 8010d50:	e002      	b.n	8010d58 <Send+0x25c>
        }
    }
    return status;
 8010d52:	232f      	movs	r3, #47	@ 0x2f
 8010d54:	18fb      	adds	r3, r7, r3
 8010d56:	781b      	ldrb	r3, [r3, #0]
}
 8010d58:	0018      	movs	r0, r3
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	b00d      	add	sp, #52	@ 0x34
 8010d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d60:	20000b6c 	.word	0x20000b6c
 8010d64:	00000484 	.word	0x00000484
 8010d68:	000003f6 	.word	0x000003f6

08010d6c <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 8010d6c:	b5b0      	push	{r4, r5, r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	0002      	movs	r2, r0
 8010d74:	1dfb      	adds	r3, r7, #7
 8010d76:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010d78:	230e      	movs	r3, #14
 8010d7a:	18fb      	adds	r3, r7, r3
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 8010d80:	240c      	movs	r4, #12
 8010d82:	193b      	adds	r3, r7, r4
 8010d84:	2200      	movs	r2, #0
 8010d86:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8010d88:	250f      	movs	r5, #15
 8010d8a:	197b      	adds	r3, r7, r5
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8010d90:	1dfb      	adds	r3, r7, #7
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	2bff      	cmp	r3, #255	@ 0xff
 8010d96:	d130      	bne.n	8010dfa <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010d98:	2000      	movs	r0, #0
 8010d9a:	f7fe ff77 	bl	800fc8c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010d9e:	4a21      	ldr	r2, [pc, #132]	@ (8010e24 <SendReJoinReq+0xb8>)
 8010da0:	2382      	movs	r3, #130	@ 0x82
 8010da2:	005b      	lsls	r3, r3, #1
 8010da4:	2100      	movs	r1, #0
 8010da6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010da8:	4a1e      	ldr	r2, [pc, #120]	@ (8010e24 <SendReJoinReq+0xb8>)
 8010daa:	2384      	movs	r3, #132	@ 0x84
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	491e      	ldr	r1, [pc, #120]	@ (8010e28 <SendReJoinReq+0xbc>)
 8010db0:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010db2:	4a1c      	ldr	r2, [pc, #112]	@ (8010e24 <SendReJoinReq+0xb8>)
 8010db4:	2386      	movs	r3, #134	@ 0x86
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	21ff      	movs	r1, #255	@ 0xff
 8010dba:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010dbc:	193b      	adds	r3, r7, r4
 8010dbe:	781a      	ldrb	r2, [r3, #0]
 8010dc0:	211f      	movs	r1, #31
 8010dc2:	400a      	ands	r2, r1
 8010dc4:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010dc6:	193b      	adds	r3, r7, r4
 8010dc8:	7819      	ldrb	r1, [r3, #0]
 8010dca:	4a16      	ldr	r2, [pc, #88]	@ (8010e24 <SendReJoinReq+0xb8>)
 8010dcc:	230e      	movs	r3, #14
 8010dce:	33ff      	adds	r3, #255	@ 0xff
 8010dd0:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010dd2:	f7fc fa47 	bl	800d264 <SecureElementGetJoinEui>
 8010dd6:	0001      	movs	r1, r0
 8010dd8:	4b14      	ldr	r3, [pc, #80]	@ (8010e2c <SendReJoinReq+0xc0>)
 8010dda:	2208      	movs	r2, #8
 8010ddc:	0018      	movs	r0, r3
 8010dde:	f007 fdc3 	bl	8018968 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010de2:	f7fc fa1b 	bl	800d21c <SecureElementGetDevEui>
 8010de6:	0001      	movs	r1, r0
 8010de8:	4b11      	ldr	r3, [pc, #68]	@ (8010e30 <SendReJoinReq+0xc4>)
 8010dea:	2208      	movs	r2, #8
 8010dec:	0018      	movs	r0, r3
 8010dee:	f007 fdbb 	bl	8018968 <memcpy1>

            allowDelayedTx = false;
 8010df2:	197b      	adds	r3, r7, r5
 8010df4:	2200      	movs	r2, #0
 8010df6:	701a      	strb	r2, [r3, #0]

            break;
 8010df8:	e004      	b.n	8010e04 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010dfa:	230e      	movs	r3, #14
 8010dfc:	18fb      	adds	r3, r7, r3
 8010dfe:	2202      	movs	r2, #2
 8010e00:	701a      	strb	r2, [r3, #0]
            break;
 8010e02:	46c0      	nop			@ (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010e04:	250e      	movs	r5, #14
 8010e06:	197c      	adds	r4, r7, r5
 8010e08:	230f      	movs	r3, #15
 8010e0a:	18fb      	adds	r3, r7, r3
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	0018      	movs	r0, r3
 8010e10:	f000 f940 	bl	8011094 <ScheduleTx>
 8010e14:	0003      	movs	r3, r0
 8010e16:	7023      	strb	r3, [r4, #0]
    return status;
 8010e18:	197b      	adds	r3, r7, r5
 8010e1a:	781b      	ldrb	r3, [r3, #0]
}
 8010e1c:	0018      	movs	r0, r3
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	b004      	add	sp, #16
 8010e22:	bdb0      	pop	{r4, r5, r7, pc}
 8010e24:	20000b6c 	.word	0x20000b6c
 8010e28:	20000b6e 	.word	0x20000b6e
 8010e2c:	20000c7a 	.word	0x20000c7a
 8010e30:	20000c82 	.word	0x20000c82

08010e34 <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010e38:	f002 ffa0 	bl	8013d7c <LoRaMacClassBIsBeaconExpected>
 8010e3c:	1e03      	subs	r3, r0, #0
 8010e3e:	d001      	beq.n	8010e44 <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010e40:	230e      	movs	r3, #14
 8010e42:	e013      	b.n	8010e6c <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010e44:	4b0b      	ldr	r3, [pc, #44]	@ (8010e74 <CheckForClassBCollision+0x40>)
 8010e46:	4a0c      	ldr	r2, [pc, #48]	@ (8010e78 <CheckForClassBCollision+0x44>)
 8010e48:	589b      	ldr	r3, [r3, r2]
 8010e4a:	227c      	movs	r2, #124	@ 0x7c
 8010e4c:	5c9b      	ldrb	r3, [r3, r2]
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	d10b      	bne.n	8010e6a <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010e52:	f002 ff99 	bl	8013d88 <LoRaMacClassBIsPingExpected>
 8010e56:	1e03      	subs	r3, r0, #0
 8010e58:	d001      	beq.n	8010e5e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010e5a:	230f      	movs	r3, #15
 8010e5c:	e006      	b.n	8010e6c <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010e5e:	f002 ff99 	bl	8013d94 <LoRaMacClassBIsMulticastExpected>
 8010e62:	1e03      	subs	r3, r0, #0
 8010e64:	d001      	beq.n	8010e6a <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010e66:	230f      	movs	r3, #15
 8010e68:	e000      	b.n	8010e6c <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 8010e6a:	2300      	movs	r3, #0
}
 8010e6c:	0018      	movs	r0, r3
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	20000b6c 	.word	0x20000b6c
 8010e78:	00000484 	.word	0x00000484

08010e7c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010e7c:	b5b0      	push	{r4, r5, r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010e82:	4b44      	ldr	r3, [pc, #272]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010e84:	4a44      	ldr	r2, [pc, #272]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010e86:	589b      	ldr	r3, [r3, r2]
 8010e88:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010e8a:	4b42      	ldr	r3, [pc, #264]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010e8c:	4a42      	ldr	r2, [pc, #264]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010e8e:	589b      	ldr	r3, [r3, r2]
 8010e90:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 8010e92:	4b40      	ldr	r3, [pc, #256]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010e94:	4a40      	ldr	r2, [pc, #256]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010e96:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010e98:	22b9      	movs	r2, #185	@ 0xb9
 8010e9a:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010e9e:	4a3e      	ldr	r2, [pc, #248]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010ea0:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010ea2:	2285      	movs	r2, #133	@ 0x85
 8010ea4:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8010ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010ea8:	4d3b      	ldr	r5, [pc, #236]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010eaa:	595b      	ldr	r3, [r3, r5]
 8010eac:	25a5      	movs	r5, #165	@ 0xa5
 8010eae:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010eb0:	b25b      	sxtb	r3, r3
 8010eb2:	f005 faa6 	bl	8016402 <RegionApplyDrOffset>
 8010eb6:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010eb8:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010eba:	4b36      	ldr	r3, [pc, #216]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010ebc:	4a36      	ldr	r2, [pc, #216]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010ebe:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010ec0:	228c      	movs	r2, #140	@ 0x8c
 8010ec2:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8010ec4:	4b33      	ldr	r3, [pc, #204]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010ec6:	4834      	ldr	r0, [pc, #208]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010ec8:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010eca:	2088      	movs	r0, #136	@ 0x88
 8010ecc:	5818      	ldr	r0, [r3, r0]
 8010ece:	4b33      	ldr	r3, [pc, #204]	@ (8010f9c <ComputeRxWindowParameters+0x120>)
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	0003      	movs	r3, r0
 8010ed4:	0020      	movs	r0, r4
 8010ed6:	f005 f972 	bl	80161be <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010eda:	4b2e      	ldr	r3, [pc, #184]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010edc:	4a2e      	ldr	r2, [pc, #184]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010ede:	589b      	ldr	r3, [r3, r2]
 8010ee0:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8010ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010ee6:	589b      	ldr	r3, [r3, r2]
 8010ee8:	22ac      	movs	r2, #172	@ 0xac
 8010eea:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010eec:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010eee:	4b29      	ldr	r3, [pc, #164]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010ef0:	4a29      	ldr	r2, [pc, #164]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010ef2:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010ef4:	228c      	movs	r2, #140	@ 0x8c
 8010ef6:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8010ef8:	4b26      	ldr	r3, [pc, #152]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010efa:	4c27      	ldr	r4, [pc, #156]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010efc:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010efe:	2488      	movs	r4, #136	@ 0x88
 8010f00:	591c      	ldr	r4, [r3, r4]
 8010f02:	4b27      	ldr	r3, [pc, #156]	@ (8010fa0 <ComputeRxWindowParameters+0x124>)
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	0023      	movs	r3, r4
 8010f08:	f005 f959 	bl	80161be <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010f0c:	4b21      	ldr	r3, [pc, #132]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f0e:	4a22      	ldr	r2, [pc, #136]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010f10:	589b      	ldr	r3, [r3, r2]
 8010f12:	2294      	movs	r2, #148	@ 0x94
 8010f14:	589b      	ldr	r3, [r3, r2]
 8010f16:	491f      	ldr	r1, [pc, #124]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f18:	22f1      	movs	r2, #241	@ 0xf1
 8010f1a:	0092      	lsls	r2, r2, #2
 8010f1c:	588a      	ldr	r2, [r1, r2]
 8010f1e:	1899      	adds	r1, r3, r2
 8010f20:	4a1c      	ldr	r2, [pc, #112]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f22:	23ec      	movs	r3, #236	@ 0xec
 8010f24:	009b      	lsls	r3, r3, #2
 8010f26:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010f28:	4b1a      	ldr	r3, [pc, #104]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010f2c:	589b      	ldr	r3, [r3, r2]
 8010f2e:	2298      	movs	r2, #152	@ 0x98
 8010f30:	589b      	ldr	r3, [r3, r2]
 8010f32:	4918      	ldr	r1, [pc, #96]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f34:	22f6      	movs	r2, #246	@ 0xf6
 8010f36:	0092      	lsls	r2, r2, #2
 8010f38:	588a      	ldr	r2, [r1, r2]
 8010f3a:	1899      	adds	r1, r3, r2
 8010f3c:	4a15      	ldr	r2, [pc, #84]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f3e:	23ed      	movs	r3, #237	@ 0xed
 8010f40:	009b      	lsls	r3, r3, #2
 8010f42:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8010f44:	4b13      	ldr	r3, [pc, #76]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f46:	4a14      	ldr	r2, [pc, #80]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010f48:	589a      	ldr	r2, [r3, r2]
 8010f4a:	23b2      	movs	r3, #178	@ 0xb2
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	5cd3      	ldrb	r3, [r2, r3]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d11b      	bne.n	8010f8c <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010f54:	4b0f      	ldr	r3, [pc, #60]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f56:	4a10      	ldr	r2, [pc, #64]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010f58:	589b      	ldr	r3, [r3, r2]
 8010f5a:	229c      	movs	r2, #156	@ 0x9c
 8010f5c:	589b      	ldr	r3, [r3, r2]
 8010f5e:	490d      	ldr	r1, [pc, #52]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f60:	22f1      	movs	r2, #241	@ 0xf1
 8010f62:	0092      	lsls	r2, r2, #2
 8010f64:	588a      	ldr	r2, [r1, r2]
 8010f66:	1899      	adds	r1, r3, r2
 8010f68:	4a0a      	ldr	r2, [pc, #40]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f6a:	23ec      	movs	r3, #236	@ 0xec
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010f70:	4b08      	ldr	r3, [pc, #32]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f72:	4a09      	ldr	r2, [pc, #36]	@ (8010f98 <ComputeRxWindowParameters+0x11c>)
 8010f74:	589b      	ldr	r3, [r3, r2]
 8010f76:	22a0      	movs	r2, #160	@ 0xa0
 8010f78:	589b      	ldr	r3, [r3, r2]
 8010f7a:	4906      	ldr	r1, [pc, #24]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f7c:	22f6      	movs	r2, #246	@ 0xf6
 8010f7e:	0092      	lsls	r2, r2, #2
 8010f80:	588a      	ldr	r2, [r1, r2]
 8010f82:	1899      	adds	r1, r3, r2
 8010f84:	4a03      	ldr	r2, [pc, #12]	@ (8010f94 <ComputeRxWindowParameters+0x118>)
 8010f86:	23ed      	movs	r3, #237	@ 0xed
 8010f88:	009b      	lsls	r3, r3, #2
 8010f8a:	50d1      	str	r1, [r2, r3]
    }
}
 8010f8c:	46c0      	nop			@ (mov r8, r8)
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bdb0      	pop	{r4, r5, r7, pc}
 8010f92:	46c0      	nop			@ (mov r8, r8)
 8010f94:	20000b6c 	.word	0x20000b6c
 8010f98:	00000484 	.word	0x00000484
 8010f9c:	20000f24 	.word	0x20000f24
 8010fa0:	20000f38 	.word	0x20000f38

08010fa4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8010fae:	4b15      	ldr	r3, [pc, #84]	@ (8011004 <VerifyTxFrame+0x60>)
 8010fb0:	4a15      	ldr	r2, [pc, #84]	@ (8011008 <VerifyTxFrame+0x64>)
 8010fb2:	589a      	ldr	r2, [r3, r2]
 8010fb4:	23b2      	movs	r3, #178	@ 0xb2
 8010fb6:	005b      	lsls	r3, r3, #1
 8010fb8:	5cd3      	ldrb	r3, [r2, r3]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d01d      	beq.n	8010ffa <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010fbe:	1d3b      	adds	r3, r7, #4
 8010fc0:	0018      	movs	r0, r3
 8010fc2:	f003 f99d 	bl	8014300 <LoRaMacCommandsGetSizeSerializedCmds>
 8010fc6:	1e03      	subs	r3, r0, #0
 8010fc8:	d001      	beq.n	8010fce <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010fca:	2313      	movs	r3, #19
 8010fcc:	e016      	b.n	8010ffc <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8010fce:	4b0d      	ldr	r3, [pc, #52]	@ (8011004 <VerifyTxFrame+0x60>)
 8010fd0:	4a0e      	ldr	r2, [pc, #56]	@ (801100c <VerifyTxFrame+0x68>)
 8010fd2:	5c98      	ldrb	r0, [r3, r2]
 8010fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8011004 <VerifyTxFrame+0x60>)
 8010fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8011008 <VerifyTxFrame+0x64>)
 8010fd8:	589b      	ldr	r3, [r3, r2]
 8010fda:	2285      	movs	r2, #133	@ 0x85
 8010fdc:	569b      	ldrsb	r3, [r3, r2]
 8010fde:	687a      	ldr	r2, [r7, #4]
 8010fe0:	b2d2      	uxtb	r2, r2
 8010fe2:	0019      	movs	r1, r3
 8010fe4:	f7fe ffac 	bl	800ff40 <ValidatePayloadLength>
 8010fe8:	0003      	movs	r3, r0
 8010fea:	001a      	movs	r2, r3
 8010fec:	2301      	movs	r3, #1
 8010fee:	4053      	eors	r3, r2
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d001      	beq.n	8010ffa <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010ff6:	2308      	movs	r3, #8
 8010ff8:	e000      	b.n	8010ffc <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	0018      	movs	r0, r3
 8010ffe:	46bd      	mov	sp, r7
 8011000:	b002      	add	sp, #8
 8011002:	bd80      	pop	{r7, pc}
 8011004:	20000b6c 	.word	0x20000b6c
 8011008:	00000484 	.word	0x00000484
 801100c:	00000237 	.word	0x00000237

08011010 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011010:	b590      	push	{r4, r7, lr}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011016:	4a1d      	ldr	r2, [pc, #116]	@ (801108c <SerializeTxFrame+0x7c>)
 8011018:	2382      	movs	r3, #130	@ 0x82
 801101a:	005b      	lsls	r3, r3, #1
 801101c:	5cd3      	ldrb	r3, [r2, r3]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d002      	beq.n	8011028 <SerializeTxFrame+0x18>
 8011022:	2b04      	cmp	r3, #4
 8011024:	d015      	beq.n	8011052 <SerializeTxFrame+0x42>
 8011026:	e029      	b.n	801107c <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011028:	1dfc      	adds	r4, r7, #7
 801102a:	4b19      	ldr	r3, [pc, #100]	@ (8011090 <SerializeTxFrame+0x80>)
 801102c:	0018      	movs	r0, r3
 801102e:	f004 fe43 	bl	8015cb8 <LoRaMacSerializerJoinRequest>
 8011032:	0003      	movs	r3, r0
 8011034:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011036:	1dfb      	adds	r3, r7, #7
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d001      	beq.n	8011042 <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801103e:	2311      	movs	r3, #17
 8011040:	e01f      	b.n	8011082 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011042:	4a12      	ldr	r2, [pc, #72]	@ (801108c <SerializeTxFrame+0x7c>)
 8011044:	2386      	movs	r3, #134	@ 0x86
 8011046:	005b      	lsls	r3, r3, #1
 8011048:	5cd3      	ldrb	r3, [r2, r3]
 801104a:	001a      	movs	r2, r3
 801104c:	4b0f      	ldr	r3, [pc, #60]	@ (801108c <SerializeTxFrame+0x7c>)
 801104e:	801a      	strh	r2, [r3, #0]
            break;
 8011050:	e016      	b.n	8011080 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011052:	1dfc      	adds	r4, r7, #7
 8011054:	4b0e      	ldr	r3, [pc, #56]	@ (8011090 <SerializeTxFrame+0x80>)
 8011056:	0018      	movs	r0, r3
 8011058:	f004 fec9 	bl	8015dee <LoRaMacSerializerData>
 801105c:	0003      	movs	r3, r0
 801105e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011060:	1dfb      	adds	r3, r7, #7
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d001      	beq.n	801106c <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011068:	2311      	movs	r3, #17
 801106a:	e00a      	b.n	8011082 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801106c:	4a07      	ldr	r2, [pc, #28]	@ (801108c <SerializeTxFrame+0x7c>)
 801106e:	2386      	movs	r3, #134	@ 0x86
 8011070:	005b      	lsls	r3, r3, #1
 8011072:	5cd3      	ldrb	r3, [r2, r3]
 8011074:	001a      	movs	r2, r3
 8011076:	4b05      	ldr	r3, [pc, #20]	@ (801108c <SerializeTxFrame+0x7c>)
 8011078:	801a      	strh	r2, [r3, #0]
            break;
 801107a:	e001      	b.n	8011080 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801107c:	2303      	movs	r3, #3
 801107e:	e000      	b.n	8011082 <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 8011080:	2300      	movs	r3, #0
}
 8011082:	0018      	movs	r0, r3
 8011084:	46bd      	mov	sp, r7
 8011086:	b003      	add	sp, #12
 8011088:	bd90      	pop	{r4, r7, pc}
 801108a:	46c0      	nop			@ (mov r8, r8)
 801108c:	20000b6c 	.word	0x20000b6c
 8011090:	20000c74 	.word	0x20000c74

08011094 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011096:	b091      	sub	sp, #68	@ 0x44
 8011098:	af02      	add	r7, sp, #8
 801109a:	0002      	movs	r2, r0
 801109c:	230f      	movs	r3, #15
 801109e:	18fb      	adds	r3, r7, r3
 80110a0:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80110a2:	2537      	movs	r5, #55	@ 0x37
 80110a4:	197b      	adds	r3, r7, r5
 80110a6:	2203      	movs	r2, #3
 80110a8:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80110aa:	197c      	adds	r4, r7, r5
 80110ac:	f7ff fec2 	bl	8010e34 <CheckForClassBCollision>
 80110b0:	0003      	movs	r3, r0
 80110b2:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80110b4:	002a      	movs	r2, r5
 80110b6:	18bb      	adds	r3, r7, r2
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d002      	beq.n	80110c4 <ScheduleTx+0x30>
    {
        return status;
 80110be:	18bb      	adds	r3, r7, r2
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	e0c3      	b.n	801124c <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 80110c4:	f000 f940 	bl	8011348 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80110c8:	2537      	movs	r5, #55	@ 0x37
 80110ca:	197c      	adds	r4, r7, r5
 80110cc:	f7ff ffa0 	bl	8011010 <SerializeTxFrame>
 80110d0:	0003      	movs	r3, r0
 80110d2:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80110d4:	002a      	movs	r2, r5
 80110d6:	18bb      	adds	r3, r7, r2
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d002      	beq.n	80110e4 <ScheduleTx+0x50>
    {
        return status;
 80110de:	18bb      	adds	r3, r7, r2
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	e0b3      	b.n	801124c <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 80110e4:	4b5b      	ldr	r3, [pc, #364]	@ (8011254 <ScheduleTx+0x1c0>)
 80110e6:	4a5c      	ldr	r2, [pc, #368]	@ (8011258 <ScheduleTx+0x1c4>)
 80110e8:	589a      	ldr	r2, [r3, r2]
 80110ea:	23aa      	movs	r3, #170	@ 0xaa
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	58d2      	ldr	r2, [r2, r3]
 80110f0:	2414      	movs	r4, #20
 80110f2:	193b      	adds	r3, r7, r4
 80110f4:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80110f6:	4b57      	ldr	r3, [pc, #348]	@ (8011254 <ScheduleTx+0x1c0>)
 80110f8:	4a57      	ldr	r2, [pc, #348]	@ (8011258 <ScheduleTx+0x1c4>)
 80110fa:	589b      	ldr	r3, [r3, r2]
 80110fc:	2285      	movs	r2, #133	@ 0x85
 80110fe:	569a      	ldrsb	r2, [r3, r2]
 8011100:	193b      	adds	r3, r7, r4
 8011102:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8011104:	4b53      	ldr	r3, [pc, #332]	@ (8011254 <ScheduleTx+0x1c0>)
 8011106:	4a54      	ldr	r2, [pc, #336]	@ (8011258 <ScheduleTx+0x1c4>)
 8011108:	589b      	ldr	r3, [r3, r2]
 801110a:	22c9      	movs	r2, #201	@ 0xc9
 801110c:	5c9a      	ldrb	r2, [r3, r2]
 801110e:	193b      	adds	r3, r7, r4
 8011110:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8011112:	232c      	movs	r3, #44	@ 0x2c
 8011114:	18fb      	adds	r3, r7, r3
 8011116:	0018      	movs	r0, r3
 8011118:	f00a febc 	bl	801be94 <SysTimeGetMcuTime>
 801111c:	4b4d      	ldr	r3, [pc, #308]	@ (8011254 <ScheduleTx+0x1c0>)
 801111e:	4a4e      	ldr	r2, [pc, #312]	@ (8011258 <ScheduleTx+0x1c4>)
 8011120:	5898      	ldr	r0, [r3, r2]
 8011122:	193d      	adds	r5, r7, r4
 8011124:	003e      	movs	r6, r7
 8011126:	23ac      	movs	r3, #172	@ 0xac
 8011128:	0059      	lsls	r1, r3, #1
 801112a:	232c      	movs	r3, #44	@ 0x2c
 801112c:	18fa      	adds	r2, r7, r3
 801112e:	2404      	movs	r4, #4
 8011130:	1843      	adds	r3, r0, r1
 8011132:	191c      	adds	r4, r3, r4
 8011134:	466b      	mov	r3, sp
 8011136:	6824      	ldr	r4, [r4, #0]
 8011138:	601c      	str	r4, [r3, #0]
 801113a:	5843      	ldr	r3, [r0, r1]
 801113c:	6811      	ldr	r1, [r2, #0]
 801113e:	6852      	ldr	r2, [r2, #4]
 8011140:	0030      	movs	r0, r6
 8011142:	f00a fddf 	bl	801bd04 <SysTimeSub>
 8011146:	003a      	movs	r2, r7
 8011148:	002b      	movs	r3, r5
 801114a:	330c      	adds	r3, #12
 801114c:	ca03      	ldmia	r2!, {r0, r1}
 801114e:	c303      	stmia	r3!, {r0, r1}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011150:	4b40      	ldr	r3, [pc, #256]	@ (8011254 <ScheduleTx+0x1c0>)
 8011152:	4a41      	ldr	r2, [pc, #260]	@ (8011258 <ScheduleTx+0x1c4>)
 8011154:	589a      	ldr	r2, [r3, r2]
 8011156:	23a8      	movs	r3, #168	@ 0xa8
 8011158:	005b      	lsls	r3, r3, #1
 801115a:	58d2      	ldr	r2, [r2, r3]
 801115c:	2114      	movs	r1, #20
 801115e:	187b      	adds	r3, r7, r1
 8011160:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 8011162:	187b      	adds	r3, r7, r1
 8011164:	2200      	movs	r2, #0
 8011166:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011168:	187b      	adds	r3, r7, r1
 801116a:	2201      	movs	r2, #1
 801116c:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801116e:	4b39      	ldr	r3, [pc, #228]	@ (8011254 <ScheduleTx+0x1c0>)
 8011170:	881a      	ldrh	r2, [r3, #0]
 8011172:	187b      	adds	r3, r7, r1
 8011174:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011176:	4b37      	ldr	r3, [pc, #220]	@ (8011254 <ScheduleTx+0x1c0>)
 8011178:	4a37      	ldr	r2, [pc, #220]	@ (8011258 <ScheduleTx+0x1c4>)
 801117a:	589a      	ldr	r2, [r3, r2]
 801117c:	23b2      	movs	r3, #178	@ 0xb2
 801117e:	005b      	lsls	r3, r3, #1
 8011180:	5cd3      	ldrb	r3, [r2, r3]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d105      	bne.n	8011192 <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011186:	187b      	adds	r3, r7, r1
 8011188:	2201      	movs	r2, #1
 801118a:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 801118c:	187b      	adds	r3, r7, r1
 801118e:	2200      	movs	r2, #0
 8011190:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8011192:	4b30      	ldr	r3, [pc, #192]	@ (8011254 <ScheduleTx+0x1c0>)
 8011194:	4a30      	ldr	r2, [pc, #192]	@ (8011258 <ScheduleTx+0x1c4>)
 8011196:	589b      	ldr	r3, [r3, r2]
 8011198:	7818      	ldrb	r0, [r3, #0]
 801119a:	4b2e      	ldr	r3, [pc, #184]	@ (8011254 <ScheduleTx+0x1c0>)
 801119c:	4a2e      	ldr	r2, [pc, #184]	@ (8011258 <ScheduleTx+0x1c4>)
 801119e:	589b      	ldr	r3, [r3, r2]
 80111a0:	3355      	adds	r3, #85	@ 0x55
 80111a2:	33ff      	adds	r3, #255	@ 0xff
 80111a4:	2637      	movs	r6, #55	@ 0x37
 80111a6:	19bc      	adds	r4, r7, r6
 80111a8:	4d2c      	ldr	r5, [pc, #176]	@ (801125c <ScheduleTx+0x1c8>)
 80111aa:	4a2d      	ldr	r2, [pc, #180]	@ (8011260 <ScheduleTx+0x1cc>)
 80111ac:	2114      	movs	r1, #20
 80111ae:	1879      	adds	r1, r7, r1
 80111b0:	9300      	str	r3, [sp, #0]
 80111b2:	002b      	movs	r3, r5
 80111b4:	f005 f8f5 	bl	80163a2 <RegionNextChannel>
 80111b8:	0003      	movs	r3, r0
 80111ba:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 80111bc:	19bb      	adds	r3, r7, r6
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d02c      	beq.n	801121e <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80111c4:	19bb      	adds	r3, r7, r6
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	2b0b      	cmp	r3, #11
 80111ca:	d124      	bne.n	8011216 <ScheduleTx+0x182>
 80111cc:	230f      	movs	r3, #15
 80111ce:	18fb      	adds	r3, r7, r3
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d01f      	beq.n	8011216 <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80111d6:	4a1f      	ldr	r2, [pc, #124]	@ (8011254 <ScheduleTx+0x1c0>)
 80111d8:	2391      	movs	r3, #145	@ 0x91
 80111da:	00db      	lsls	r3, r3, #3
 80111dc:	58d3      	ldr	r3, [r2, r3]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d017      	beq.n	8011212 <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80111e2:	4a1c      	ldr	r2, [pc, #112]	@ (8011254 <ScheduleTx+0x1c0>)
 80111e4:	23d0      	movs	r3, #208	@ 0xd0
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	58d3      	ldr	r3, [r2, r3]
 80111ea:	2220      	movs	r2, #32
 80111ec:	431a      	orrs	r2, r3
 80111ee:	0011      	movs	r1, r2
 80111f0:	4a18      	ldr	r2, [pc, #96]	@ (8011254 <ScheduleTx+0x1c0>)
 80111f2:	23d0      	movs	r3, #208	@ 0xd0
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80111f8:	4a16      	ldr	r2, [pc, #88]	@ (8011254 <ScheduleTx+0x1c0>)
 80111fa:	2391      	movs	r3, #145	@ 0x91
 80111fc:	00db      	lsls	r3, r3, #3
 80111fe:	58d2      	ldr	r2, [r2, r3]
 8011200:	4b18      	ldr	r3, [pc, #96]	@ (8011264 <ScheduleTx+0x1d0>)
 8011202:	0011      	movs	r1, r2
 8011204:	0018      	movs	r0, r3
 8011206:	f00a ff9d 	bl	801c144 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801120a:	4b16      	ldr	r3, [pc, #88]	@ (8011264 <ScheduleTx+0x1d0>)
 801120c:	0018      	movs	r0, r3
 801120e:	f00a fea9 	bl	801bf64 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011212:	2300      	movs	r3, #0
 8011214:	e01a      	b.n	801124c <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011216:	2337      	movs	r3, #55	@ 0x37
 8011218:	18fb      	adds	r3, r7, r3
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	e016      	b.n	801124c <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801121e:	f7ff fe2d 	bl	8010e7c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011222:	2537      	movs	r5, #55	@ 0x37
 8011224:	197c      	adds	r4, r7, r5
 8011226:	f7ff febd 	bl	8010fa4 <VerifyTxFrame>
 801122a:	0003      	movs	r3, r0
 801122c:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 801122e:	002a      	movs	r2, r5
 8011230:	18bb      	adds	r3, r7, r2
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d002      	beq.n	801123e <ScheduleTx+0x1aa>
    {
        return status;
 8011238:	18bb      	adds	r3, r7, r2
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	e006      	b.n	801124c <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801123e:	4b05      	ldr	r3, [pc, #20]	@ (8011254 <ScheduleTx+0x1c0>)
 8011240:	4a09      	ldr	r2, [pc, #36]	@ (8011268 <ScheduleTx+0x1d4>)
 8011242:	5c9b      	ldrb	r3, [r3, r2]
 8011244:	0018      	movs	r0, r3
 8011246:	f000 fb97 	bl	8011978 <SendFrameOnChannel>
 801124a:	0003      	movs	r3, r0
}
 801124c:	0018      	movs	r0, r3
 801124e:	46bd      	mov	sp, r7
 8011250:	b00f      	add	sp, #60	@ 0x3c
 8011252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011254:	20000b6c 	.word	0x20000b6c
 8011258:	00000484 	.word	0x00000484
 801125c:	20000ff4 	.word	0x20000ff4
 8011260:	20000f81 	.word	0x20000f81
 8011264:	20000ed4 	.word	0x20000ed4
 8011268:	00000415 	.word	0x00000415

0801126c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 801126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	0002      	movs	r2, r0
 8011274:	1dfb      	adds	r3, r7, #7
 8011276:	701a      	strb	r2, [r3, #0]
 8011278:	1dbb      	adds	r3, r7, #6
 801127a:	1c0a      	adds	r2, r1, #0
 801127c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801127e:	230f      	movs	r3, #15
 8011280:	18fb      	adds	r3, r7, r3
 8011282:	2213      	movs	r2, #19
 8011284:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8011286:	2300      	movs	r3, #0
 8011288:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 801128a:	4a2c      	ldr	r2, [pc, #176]	@ (801133c <SecureFrame+0xd0>)
 801128c:	2382      	movs	r3, #130	@ 0x82
 801128e:	005b      	lsls	r3, r3, #1
 8011290:	5cd3      	ldrb	r3, [r2, r3]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d002      	beq.n	801129c <SecureFrame+0x30>
 8011296:	2b04      	cmp	r3, #4
 8011298:	d016      	beq.n	80112c8 <SecureFrame+0x5c>
 801129a:	e047      	b.n	801132c <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801129c:	250f      	movs	r5, #15
 801129e:	197c      	adds	r4, r7, r5
 80112a0:	4b27      	ldr	r3, [pc, #156]	@ (8011340 <SecureFrame+0xd4>)
 80112a2:	0018      	movs	r0, r3
 80112a4:	f004 f846 	bl	8015334 <LoRaMacCryptoPrepareJoinRequest>
 80112a8:	0003      	movs	r3, r0
 80112aa:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80112ac:	197b      	adds	r3, r7, r5
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d001      	beq.n	80112b8 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80112b4:	2311      	movs	r3, #17
 80112b6:	e03c      	b.n	8011332 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80112b8:	4a20      	ldr	r2, [pc, #128]	@ (801133c <SecureFrame+0xd0>)
 80112ba:	2386      	movs	r3, #134	@ 0x86
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	5cd3      	ldrb	r3, [r2, r3]
 80112c0:	001a      	movs	r2, r3
 80112c2:	4b1e      	ldr	r3, [pc, #120]	@ (801133c <SecureFrame+0xd0>)
 80112c4:	801a      	strh	r2, [r3, #0]
            break;
 80112c6:	e033      	b.n	8011330 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80112c8:	2308      	movs	r3, #8
 80112ca:	18fb      	adds	r3, r7, r3
 80112cc:	0018      	movs	r0, r3
 80112ce:	f003 ff4b 	bl	8015168 <LoRaMacCryptoGetFCntUp>
 80112d2:	1e03      	subs	r3, r0, #0
 80112d4:	d001      	beq.n	80112da <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80112d6:	2312      	movs	r3, #18
 80112d8:	e02b      	b.n	8011332 <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80112da:	4a18      	ldr	r2, [pc, #96]	@ (801133c <SecureFrame+0xd0>)
 80112dc:	2382      	movs	r3, #130	@ 0x82
 80112de:	00db      	lsls	r3, r3, #3
 80112e0:	5cd3      	ldrb	r3, [r2, r3]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d104      	bne.n	80112f0 <SecureFrame+0x84>
 80112e6:	4b15      	ldr	r3, [pc, #84]	@ (801133c <SecureFrame+0xd0>)
 80112e8:	4a16      	ldr	r2, [pc, #88]	@ (8011344 <SecureFrame+0xd8>)
 80112ea:	5c9b      	ldrb	r3, [r3, r2]
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	d902      	bls.n	80112f6 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	3b01      	subs	r3, #1
 80112f4:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80112f6:	68b8      	ldr	r0, [r7, #8]
 80112f8:	260f      	movs	r6, #15
 80112fa:	19bc      	adds	r4, r7, r6
 80112fc:	4d10      	ldr	r5, [pc, #64]	@ (8011340 <SecureFrame+0xd4>)
 80112fe:	1dbb      	adds	r3, r7, #6
 8011300:	781a      	ldrb	r2, [r3, #0]
 8011302:	1dfb      	adds	r3, r7, #7
 8011304:	7819      	ldrb	r1, [r3, #0]
 8011306:	002b      	movs	r3, r5
 8011308:	f004 f91e 	bl	8015548 <LoRaMacCryptoSecureMessage>
 801130c:	0003      	movs	r3, r0
 801130e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011310:	19bb      	adds	r3, r7, r6
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d001      	beq.n	801131c <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011318:	2311      	movs	r3, #17
 801131a:	e00a      	b.n	8011332 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801131c:	4a07      	ldr	r2, [pc, #28]	@ (801133c <SecureFrame+0xd0>)
 801131e:	2386      	movs	r3, #134	@ 0x86
 8011320:	005b      	lsls	r3, r3, #1
 8011322:	5cd3      	ldrb	r3, [r2, r3]
 8011324:	001a      	movs	r2, r3
 8011326:	4b05      	ldr	r3, [pc, #20]	@ (801133c <SecureFrame+0xd0>)
 8011328:	801a      	strh	r2, [r3, #0]
            break;
 801132a:	e001      	b.n	8011330 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801132c:	2303      	movs	r3, #3
 801132e:	e000      	b.n	8011332 <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8011330:	2300      	movs	r3, #0
}
 8011332:	0018      	movs	r0, r3
 8011334:	46bd      	mov	sp, r7
 8011336:	b005      	add	sp, #20
 8011338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801133a:	46c0      	nop			@ (mov r8, r8)
 801133c:	20000b6c 	.word	0x20000b6c
 8011340:	20000c74 	.word	0x20000c74
 8011344:	00000412 	.word	0x00000412

08011348 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 801134c:	4b0e      	ldr	r3, [pc, #56]	@ (8011388 <CalculateBackOff+0x40>)
 801134e:	4a0f      	ldr	r2, [pc, #60]	@ (801138c <CalculateBackOff+0x44>)
 8011350:	589a      	ldr	r2, [r3, r2]
 8011352:	23aa      	movs	r3, #170	@ 0xaa
 8011354:	005b      	lsls	r3, r3, #1
 8011356:	58d3      	ldr	r3, [r2, r3]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d111      	bne.n	8011380 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 801135c:	4b0a      	ldr	r3, [pc, #40]	@ (8011388 <CalculateBackOff+0x40>)
 801135e:	4a0b      	ldr	r2, [pc, #44]	@ (801138c <CalculateBackOff+0x44>)
 8011360:	589a      	ldr	r2, [r3, r2]
 8011362:	23a6      	movs	r3, #166	@ 0xa6
 8011364:	005b      	lsls	r3, r3, #1
 8011366:	5ad3      	ldrh	r3, [r2, r3]
 8011368:	3b01      	subs	r3, #1
 801136a:	4907      	ldr	r1, [pc, #28]	@ (8011388 <CalculateBackOff+0x40>)
 801136c:	2283      	movs	r2, #131	@ 0x83
 801136e:	00d2      	lsls	r2, r2, #3
 8011370:	5889      	ldr	r1, [r1, r2]
 8011372:	4a05      	ldr	r2, [pc, #20]	@ (8011388 <CalculateBackOff+0x40>)
 8011374:	4805      	ldr	r0, [pc, #20]	@ (801138c <CalculateBackOff+0x44>)
 8011376:	5812      	ldr	r2, [r2, r0]
 8011378:	4359      	muls	r1, r3
 801137a:	23aa      	movs	r3, #170	@ 0xaa
 801137c:	005b      	lsls	r3, r3, #1
 801137e:	50d1      	str	r1, [r2, r3]
    }
}
 8011380:	46c0      	nop			@ (mov r8, r8)
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	46c0      	nop			@ (mov r8, r8)
 8011388:	20000b6c 	.word	0x20000b6c
 801138c:	00000484 	.word	0x00000484

08011390 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	1d3b      	adds	r3, r7, #4
 8011398:	7019      	strb	r1, [r3, #0]
 801139a:	0011      	movs	r1, r2
 801139c:	1dfb      	adds	r3, r7, #7
 801139e:	1c02      	adds	r2, r0, #0
 80113a0:	701a      	strb	r2, [r3, #0]
 80113a2:	1dbb      	adds	r3, r7, #6
 80113a4:	1c0a      	adds	r2, r1, #0
 80113a6:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80113a8:	1dfb      	adds	r3, r7, #7
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d003      	beq.n	80113b8 <RemoveMacCommands+0x28>
 80113b0:	1dfb      	adds	r3, r7, #7
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	d10f      	bne.n	80113d8 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80113b8:	1dbb      	adds	r3, r7, #6
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d109      	bne.n	80113d4 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 80113c0:	1d3b      	adds	r3, r7, #4
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	2220      	movs	r2, #32
 80113c6:	4013      	ands	r3, r2
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d004      	beq.n	80113d8 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80113ce:	f002 ff73 	bl	80142b8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80113d2:	e001      	b.n	80113d8 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80113d4:	f002 ff70 	bl	80142b8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80113d8:	46c0      	nop			@ (mov r8, r8)
 80113da:	46bd      	mov	sp, r7
 80113dc:	b002      	add	sp, #8
 80113de:	bd80      	pop	{r7, pc}

080113e0 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80113e0:	b590      	push	{r4, r7, lr}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80113e6:	4b72      	ldr	r3, [pc, #456]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80113e8:	4a72      	ldr	r2, [pc, #456]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80113ea:	589a      	ldr	r2, [r3, r2]
 80113ec:	23b2      	movs	r3, #178	@ 0xb2
 80113ee:	005b      	lsls	r3, r3, #1
 80113f0:	2100      	movs	r1, #0
 80113f2:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 80113f4:	4b6e      	ldr	r3, [pc, #440]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80113f6:	4a6f      	ldr	r2, [pc, #444]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80113f8:	589b      	ldr	r3, [r3, r2]
 80113fa:	2280      	movs	r2, #128	@ 0x80
 80113fc:	2100      	movs	r1, #0
 80113fe:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8011400:	4a6b      	ldr	r2, [pc, #428]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011402:	2382      	movs	r3, #130	@ 0x82
 8011404:	00db      	lsls	r3, r3, #3
 8011406:	2100      	movs	r1, #0
 8011408:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 801140a:	4b69      	ldr	r3, [pc, #420]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801140c:	4a6a      	ldr	r2, [pc, #424]	@ (80115b8 <ResetMacParameters+0x1d8>)
 801140e:	2101      	movs	r1, #1
 8011410:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 8011412:	4b67      	ldr	r3, [pc, #412]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011414:	4a69      	ldr	r2, [pc, #420]	@ (80115bc <ResetMacParameters+0x1dc>)
 8011416:	2101      	movs	r1, #1
 8011418:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 801141a:	4b65      	ldr	r3, [pc, #404]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801141c:	4a68      	ldr	r2, [pc, #416]	@ (80115c0 <ResetMacParameters+0x1e0>)
 801141e:	2100      	movs	r1, #0
 8011420:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8011422:	4b63      	ldr	r3, [pc, #396]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011424:	4a63      	ldr	r2, [pc, #396]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011426:	589b      	ldr	r3, [r3, r2]
 8011428:	22c8      	movs	r2, #200	@ 0xc8
 801142a:	2100      	movs	r1, #0
 801142c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 801142e:	4b60      	ldr	r3, [pc, #384]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011430:	4a60      	ldr	r2, [pc, #384]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011432:	589a      	ldr	r2, [r3, r2]
 8011434:	23a6      	movs	r3, #166	@ 0xa6
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	2101      	movs	r1, #1
 801143a:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 801143c:	4b5c      	ldr	r3, [pc, #368]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801143e:	4a5d      	ldr	r2, [pc, #372]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011440:	589a      	ldr	r2, [r3, r2]
 8011442:	4b5b      	ldr	r3, [pc, #364]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011444:	495b      	ldr	r1, [pc, #364]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011446:	585b      	ldr	r3, [r3, r1]
 8011448:	2104      	movs	r1, #4
 801144a:	5651      	ldrsb	r1, [r2, r1]
 801144c:	2284      	movs	r2, #132	@ 0x84
 801144e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011450:	4b57      	ldr	r3, [pc, #348]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011452:	4a58      	ldr	r2, [pc, #352]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011454:	589a      	ldr	r2, [r3, r2]
 8011456:	4b56      	ldr	r3, [pc, #344]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011458:	4956      	ldr	r1, [pc, #344]	@ (80115b4 <ResetMacParameters+0x1d4>)
 801145a:	585b      	ldr	r3, [r3, r1]
 801145c:	2105      	movs	r1, #5
 801145e:	5651      	ldrsb	r1, [r2, r1]
 8011460:	2285      	movs	r2, #133	@ 0x85
 8011462:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8011464:	4b52      	ldr	r3, [pc, #328]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011466:	4a53      	ldr	r2, [pc, #332]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011468:	589a      	ldr	r2, [r3, r2]
 801146a:	4b51      	ldr	r3, [pc, #324]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801146c:	4951      	ldr	r1, [pc, #324]	@ (80115b4 <ResetMacParameters+0x1d4>)
 801146e:	585b      	ldr	r3, [r3, r1]
 8011470:	2125      	movs	r1, #37	@ 0x25
 8011472:	5c51      	ldrb	r1, [r2, r1]
 8011474:	22a5      	movs	r2, #165	@ 0xa5
 8011476:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011478:	4b4d      	ldr	r3, [pc, #308]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801147a:	4a4e      	ldr	r2, [pc, #312]	@ (80115b4 <ResetMacParameters+0x1d4>)
 801147c:	589a      	ldr	r2, [r3, r2]
 801147e:	4b4c      	ldr	r3, [pc, #304]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011480:	494c      	ldr	r1, [pc, #304]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011482:	585b      	ldr	r3, [r3, r1]
 8011484:	21a8      	movs	r1, #168	@ 0xa8
 8011486:	185b      	adds	r3, r3, r1
 8011488:	3228      	adds	r2, #40	@ 0x28
 801148a:	ca03      	ldmia	r2!, {r0, r1}
 801148c:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 801148e:	4b48      	ldr	r3, [pc, #288]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011490:	4a48      	ldr	r2, [pc, #288]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011492:	589a      	ldr	r2, [r3, r2]
 8011494:	4b46      	ldr	r3, [pc, #280]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011496:	4947      	ldr	r1, [pc, #284]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011498:	585b      	ldr	r3, [r3, r1]
 801149a:	21b0      	movs	r1, #176	@ 0xb0
 801149c:	185b      	adds	r3, r3, r1
 801149e:	3230      	adds	r2, #48	@ 0x30
 80114a0:	ca03      	ldmia	r2!, {r0, r1}
 80114a2:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 80114a4:	4b42      	ldr	r3, [pc, #264]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114a6:	4a43      	ldr	r2, [pc, #268]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114a8:	589a      	ldr	r2, [r3, r2]
 80114aa:	4b41      	ldr	r3, [pc, #260]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114ac:	4941      	ldr	r1, [pc, #260]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114ae:	585b      	ldr	r3, [r3, r1]
 80114b0:	2138      	movs	r1, #56	@ 0x38
 80114b2:	5c51      	ldrb	r1, [r2, r1]
 80114b4:	22b8      	movs	r2, #184	@ 0xb8
 80114b6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 80114b8:	4b3d      	ldr	r3, [pc, #244]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114ba:	4a3e      	ldr	r2, [pc, #248]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114bc:	589a      	ldr	r2, [r3, r2]
 80114be:	4b3c      	ldr	r3, [pc, #240]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114c0:	493c      	ldr	r1, [pc, #240]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114c2:	585b      	ldr	r3, [r3, r1]
 80114c4:	2139      	movs	r1, #57	@ 0x39
 80114c6:	5c51      	ldrb	r1, [r2, r1]
 80114c8:	22b9      	movs	r2, #185	@ 0xb9
 80114ca:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80114cc:	4b38      	ldr	r3, [pc, #224]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114ce:	4a39      	ldr	r2, [pc, #228]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114d0:	589b      	ldr	r3, [r3, r2]
 80114d2:	4a37      	ldr	r2, [pc, #220]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114d4:	4937      	ldr	r1, [pc, #220]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114d6:	5852      	ldr	r2, [r2, r1]
 80114d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114da:	21bc      	movs	r1, #188	@ 0xbc
 80114dc:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80114de:	4b34      	ldr	r3, [pc, #208]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114e0:	4a34      	ldr	r2, [pc, #208]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114e2:	589b      	ldr	r3, [r3, r2]
 80114e4:	4a32      	ldr	r2, [pc, #200]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114e6:	4933      	ldr	r1, [pc, #204]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114e8:	5852      	ldr	r2, [r2, r1]
 80114ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114ec:	21c0      	movs	r1, #192	@ 0xc0
 80114ee:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 80114f0:	4b2f      	ldr	r3, [pc, #188]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114f2:	4a34      	ldr	r2, [pc, #208]	@ (80115c4 <ResetMacParameters+0x1e4>)
 80114f4:	2100      	movs	r1, #0
 80114f6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80114f8:	4b2d      	ldr	r3, [pc, #180]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80114fa:	4a2e      	ldr	r2, [pc, #184]	@ (80115b4 <ResetMacParameters+0x1d4>)
 80114fc:	589a      	ldr	r2, [r3, r2]
 80114fe:	234c      	movs	r3, #76	@ 0x4c
 8011500:	33ff      	adds	r3, #255	@ 0xff
 8011502:	2100      	movs	r1, #0
 8011504:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011506:	003b      	movs	r3, r7
 8011508:	2201      	movs	r2, #1
 801150a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 801150c:	003b      	movs	r3, r7
 801150e:	2200      	movs	r2, #0
 8011510:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011512:	4b27      	ldr	r3, [pc, #156]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011514:	4a27      	ldr	r2, [pc, #156]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011516:	589b      	ldr	r3, [r3, r2]
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	003a      	movs	r2, r7
 801151c:	0011      	movs	r1, r2
 801151e:	0018      	movs	r0, r3
 8011520:	f004 fdda 	bl	80160d8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011524:	4b22      	ldr	r3, [pc, #136]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011526:	4a28      	ldr	r2, [pc, #160]	@ (80115c8 <ResetMacParameters+0x1e8>)
 8011528:	2100      	movs	r1, #0
 801152a:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801152c:	4b20      	ldr	r3, [pc, #128]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801152e:	4a26      	ldr	r2, [pc, #152]	@ (80115c8 <ResetMacParameters+0x1e8>)
 8011530:	5c99      	ldrb	r1, [r3, r2]
 8011532:	4a1f      	ldr	r2, [pc, #124]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011534:	23f3      	movs	r3, #243	@ 0xf3
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 801153a:	4b1d      	ldr	r3, [pc, #116]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801153c:	4a1d      	ldr	r2, [pc, #116]	@ (80115b4 <ResetMacParameters+0x1d4>)
 801153e:	589b      	ldr	r3, [r3, r2]
 8011540:	22a8      	movs	r2, #168	@ 0xa8
 8011542:	5899      	ldr	r1, [r3, r2]
 8011544:	4a1a      	ldr	r2, [pc, #104]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011546:	23f4      	movs	r3, #244	@ 0xf4
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801154c:	4b18      	ldr	r3, [pc, #96]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801154e:	4a19      	ldr	r2, [pc, #100]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011550:	589b      	ldr	r3, [r3, r2]
 8011552:	22b9      	movs	r2, #185	@ 0xb9
 8011554:	5c99      	ldrb	r1, [r3, r2]
 8011556:	4a16      	ldr	r2, [pc, #88]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011558:	23f7      	movs	r3, #247	@ 0xf7
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801155e:	4b14      	ldr	r3, [pc, #80]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011560:	4a14      	ldr	r2, [pc, #80]	@ (80115b4 <ResetMacParameters+0x1d4>)
 8011562:	589b      	ldr	r3, [r3, r2]
 8011564:	22ca      	movs	r2, #202	@ 0xca
 8011566:	5c99      	ldrb	r1, [r3, r2]
 8011568:	4b11      	ldr	r3, [pc, #68]	@ (80115b0 <ResetMacParameters+0x1d0>)
 801156a:	4a18      	ldr	r2, [pc, #96]	@ (80115cc <ResetMacParameters+0x1ec>)
 801156c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801156e:	4b10      	ldr	r3, [pc, #64]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011570:	4a17      	ldr	r2, [pc, #92]	@ (80115d0 <ResetMacParameters+0x1f0>)
 8011572:	2100      	movs	r1, #0
 8011574:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011576:	4b0e      	ldr	r3, [pc, #56]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011578:	4a16      	ldr	r2, [pc, #88]	@ (80115d4 <ResetMacParameters+0x1f4>)
 801157a:	2101      	movs	r1, #1
 801157c:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801157e:	480c      	ldr	r0, [pc, #48]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011580:	23f8      	movs	r3, #248	@ 0xf8
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	490a      	ldr	r1, [pc, #40]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011586:	22f3      	movs	r2, #243	@ 0xf3
 8011588:	0092      	lsls	r2, r2, #2
 801158a:	18c3      	adds	r3, r0, r3
 801158c:	188a      	adds	r2, r1, r2
 801158e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8011590:	c313      	stmia	r3!, {r0, r1, r4}
 8011592:	ca03      	ldmia	r2!, {r0, r1}
 8011594:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011596:	4b06      	ldr	r3, [pc, #24]	@ (80115b0 <ResetMacParameters+0x1d0>)
 8011598:	4a0f      	ldr	r2, [pc, #60]	@ (80115d8 <ResetMacParameters+0x1f8>)
 801159a:	2101      	movs	r1, #1
 801159c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801159e:	4b04      	ldr	r3, [pc, #16]	@ (80115b0 <ResetMacParameters+0x1d0>)
 80115a0:	4a0e      	ldr	r2, [pc, #56]	@ (80115dc <ResetMacParameters+0x1fc>)
 80115a2:	2102      	movs	r1, #2
 80115a4:	5499      	strb	r1, [r3, r2]

}
 80115a6:	46c0      	nop			@ (mov r8, r8)
 80115a8:	46bd      	mov	sp, r7
 80115aa:	b003      	add	sp, #12
 80115ac:	bd90      	pop	{r4, r7, pc}
 80115ae:	46c0      	nop			@ (mov r8, r8)
 80115b0:	20000b6c 	.word	0x20000b6c
 80115b4:	00000484 	.word	0x00000484
 80115b8:	00000411 	.word	0x00000411
 80115bc:	00000412 	.word	0x00000412
 80115c0:	00000413 	.word	0x00000413
 80115c4:	00000414 	.word	0x00000414
 80115c8:	00000415 	.word	0x00000415
 80115cc:	000003dd 	.word	0x000003dd
 80115d0:	000003de 	.word	0x000003de
 80115d4:	000003df 	.word	0x000003df
 80115d8:	000003f2 	.word	0x000003f2
 80115dc:	000003f3 	.word	0x000003f3

080115e0 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	0018      	movs	r0, r3
 80115ee:	f00a fd31 	bl	801c054 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80115f2:	4b10      	ldr	r3, [pc, #64]	@ (8011634 <RxWindowSetup+0x54>)
 80115f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115f6:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80115f8:	4b0f      	ldr	r3, [pc, #60]	@ (8011638 <RxWindowSetup+0x58>)
 80115fa:	4a10      	ldr	r2, [pc, #64]	@ (801163c <RxWindowSetup+0x5c>)
 80115fc:	589b      	ldr	r3, [r3, r2]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	4a0f      	ldr	r2, [pc, #60]	@ (8011640 <RxWindowSetup+0x60>)
 8011602:	6839      	ldr	r1, [r7, #0]
 8011604:	0018      	movs	r0, r3
 8011606:	f004 fdfe 	bl	8016206 <RegionRxConfig>
 801160a:	1e03      	subs	r3, r0, #0
 801160c:	d00e      	beq.n	801162c <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 801160e:	4b09      	ldr	r3, [pc, #36]	@ (8011634 <RxWindowSetup+0x54>)
 8011610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011612:	4a09      	ldr	r2, [pc, #36]	@ (8011638 <RxWindowSetup+0x58>)
 8011614:	4909      	ldr	r1, [pc, #36]	@ (801163c <RxWindowSetup+0x5c>)
 8011616:	5852      	ldr	r2, [r2, r1]
 8011618:	2190      	movs	r1, #144	@ 0x90
 801161a:	5852      	ldr	r2, [r2, r1]
 801161c:	0010      	movs	r0, r2
 801161e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	7cd9      	ldrb	r1, [r3, #19]
 8011624:	4a04      	ldr	r2, [pc, #16]	@ (8011638 <RxWindowSetup+0x58>)
 8011626:	2390      	movs	r3, #144	@ 0x90
 8011628:	00db      	lsls	r3, r3, #3
 801162a:	54d1      	strb	r1, [r2, r3]
    }
}
 801162c:	46c0      	nop			@ (mov r8, r8)
 801162e:	46bd      	mov	sp, r7
 8011630:	b002      	add	sp, #8
 8011632:	bd80      	pop	{r7, pc}
 8011634:	0801e62c 	.word	0x0801e62c
 8011638:	20000b6c 	.word	0x20000b6c
 801163c:	00000484 	.word	0x00000484
 8011640:	20000f8c 	.word	0x20000f8c

08011644 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011644:	b590      	push	{r4, r7, lr}
 8011646:	b083      	sub	sp, #12
 8011648:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801164a:	4b1d      	ldr	r3, [pc, #116]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 801164c:	4a1d      	ldr	r2, [pc, #116]	@ (80116c4 <OpenContinuousRxCWindow+0x80>)
 801164e:	589b      	ldr	r3, [r3, r2]
 8011650:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8011652:	4b1b      	ldr	r3, [pc, #108]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 8011654:	4a1b      	ldr	r2, [pc, #108]	@ (80116c4 <OpenContinuousRxCWindow+0x80>)
 8011656:	589b      	ldr	r3, [r3, r2]
 8011658:	22b4      	movs	r2, #180	@ 0xb4
 801165a:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801165c:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 801165e:	4b18      	ldr	r3, [pc, #96]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 8011660:	4a18      	ldr	r2, [pc, #96]	@ (80116c4 <OpenContinuousRxCWindow+0x80>)
 8011662:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011664:	228c      	movs	r2, #140	@ 0x8c
 8011666:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011668:	4b15      	ldr	r3, [pc, #84]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 801166a:	4c16      	ldr	r4, [pc, #88]	@ (80116c4 <OpenContinuousRxCWindow+0x80>)
 801166c:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801166e:	2488      	movs	r4, #136	@ 0x88
 8011670:	591c      	ldr	r4, [r3, r4]
 8011672:	4b15      	ldr	r3, [pc, #84]	@ (80116c8 <OpenContinuousRxCWindow+0x84>)
 8011674:	9300      	str	r3, [sp, #0]
 8011676:	0023      	movs	r3, r4
 8011678:	f004 fda1 	bl	80161be <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801167c:	4b10      	ldr	r3, [pc, #64]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 801167e:	4a13      	ldr	r2, [pc, #76]	@ (80116cc <OpenContinuousRxCWindow+0x88>)
 8011680:	2102      	movs	r1, #2
 8011682:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011684:	4b0e      	ldr	r3, [pc, #56]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 8011686:	4a12      	ldr	r2, [pc, #72]	@ (80116d0 <OpenContinuousRxCWindow+0x8c>)
 8011688:	2101      	movs	r1, #1
 801168a:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801168c:	4b0c      	ldr	r3, [pc, #48]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 801168e:	4a0d      	ldr	r2, [pc, #52]	@ (80116c4 <OpenContinuousRxCWindow+0x80>)
 8011690:	589b      	ldr	r3, [r3, r2]
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	4a0f      	ldr	r2, [pc, #60]	@ (80116d4 <OpenContinuousRxCWindow+0x90>)
 8011696:	490c      	ldr	r1, [pc, #48]	@ (80116c8 <OpenContinuousRxCWindow+0x84>)
 8011698:	0018      	movs	r0, r3
 801169a:	f004 fdb4 	bl	8016206 <RegionRxConfig>
 801169e:	1e03      	subs	r3, r0, #0
 80116a0:	d00a      	beq.n	80116b8 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 80116a2:	4b0d      	ldr	r3, [pc, #52]	@ (80116d8 <OpenContinuousRxCWindow+0x94>)
 80116a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116a6:	2000      	movs	r0, #0
 80116a8:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80116aa:	4b05      	ldr	r3, [pc, #20]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 80116ac:	4a07      	ldr	r2, [pc, #28]	@ (80116cc <OpenContinuousRxCWindow+0x88>)
 80116ae:	5c99      	ldrb	r1, [r3, r2]
 80116b0:	4a03      	ldr	r2, [pc, #12]	@ (80116c0 <OpenContinuousRxCWindow+0x7c>)
 80116b2:	2390      	movs	r3, #144	@ 0x90
 80116b4:	00db      	lsls	r3, r3, #3
 80116b6:	54d1      	strb	r1, [r2, r3]
    }
}
 80116b8:	46c0      	nop			@ (mov r8, r8)
 80116ba:	46bd      	mov	sp, r7
 80116bc:	b001      	add	sp, #4
 80116be:	bd90      	pop	{r4, r7, pc}
 80116c0:	20000b6c 	.word	0x20000b6c
 80116c4:	00000484 	.word	0x00000484
 80116c8:	20000f4c 	.word	0x20000f4c
 80116cc:	000003f3 	.word	0x000003f3
 80116d0:	000003f2 	.word	0x000003f2
 80116d4:	20000f8c 	.word	0x20000f8c
 80116d8:	0801e62c 	.word	0x0801e62c

080116dc <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80116dc:	b590      	push	{r4, r7, lr}
 80116de:	b089      	sub	sp, #36	@ 0x24
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	603b      	str	r3, [r7, #0]
 80116e8:	1dfb      	adds	r3, r7, #7
 80116ea:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 80116ec:	4b99      	ldr	r3, [pc, #612]	@ (8011954 <PrepareFrame+0x278>)
 80116ee:	2200      	movs	r2, #0
 80116f0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80116f2:	4b98      	ldr	r3, [pc, #608]	@ (8011954 <PrepareFrame+0x278>)
 80116f4:	4a98      	ldr	r2, [pc, #608]	@ (8011958 <PrepareFrame+0x27c>)
 80116f6:	2100      	movs	r1, #0
 80116f8:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 80116fa:	2300      	movs	r3, #0
 80116fc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80116fe:	2300      	movs	r3, #0
 8011700:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011702:	231f      	movs	r3, #31
 8011704:	18fb      	adds	r3, r7, r3
 8011706:	2200      	movs	r2, #0
 8011708:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d103      	bne.n	8011718 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8011710:	2330      	movs	r3, #48	@ 0x30
 8011712:	18fb      	adds	r3, r7, r3
 8011714:	2200      	movs	r2, #0
 8011716:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011718:	2430      	movs	r4, #48	@ 0x30
 801171a:	193b      	adds	r3, r7, r4
 801171c:	881a      	ldrh	r2, [r3, #0]
 801171e:	6839      	ldr	r1, [r7, #0]
 8011720:	4b8e      	ldr	r3, [pc, #568]	@ (801195c <PrepareFrame+0x280>)
 8011722:	0018      	movs	r0, r3
 8011724:	f007 f920 	bl	8018968 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011728:	193b      	adds	r3, r7, r4
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	b2d9      	uxtb	r1, r3
 801172e:	4b89      	ldr	r3, [pc, #548]	@ (8011954 <PrepareFrame+0x278>)
 8011730:	4a8b      	ldr	r2, [pc, #556]	@ (8011960 <PrepareFrame+0x284>)
 8011732:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	781a      	ldrb	r2, [r3, #0]
 8011738:	4b86      	ldr	r3, [pc, #536]	@ (8011954 <PrepareFrame+0x278>)
 801173a:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	061b      	lsls	r3, r3, #24
 8011742:	0f5b      	lsrs	r3, r3, #29
 8011744:	b2db      	uxtb	r3, r3
 8011746:	2b07      	cmp	r3, #7
 8011748:	d100      	bne.n	801174c <PrepareFrame+0x70>
 801174a:	e0e0      	b.n	801190e <PrepareFrame+0x232>
 801174c:	dd00      	ble.n	8011750 <PrepareFrame+0x74>
 801174e:	e0f7      	b.n	8011940 <PrepareFrame+0x264>
 8011750:	2b02      	cmp	r3, #2
 8011752:	d006      	beq.n	8011762 <PrepareFrame+0x86>
 8011754:	2b04      	cmp	r3, #4
 8011756:	d000      	beq.n	801175a <PrepareFrame+0x7e>
 8011758:	e0f2      	b.n	8011940 <PrepareFrame+0x264>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801175a:	4b7e      	ldr	r3, [pc, #504]	@ (8011954 <PrepareFrame+0x278>)
 801175c:	4a7e      	ldr	r2, [pc, #504]	@ (8011958 <PrepareFrame+0x27c>)
 801175e:	2101      	movs	r1, #1
 8011760:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011762:	4a7c      	ldr	r2, [pc, #496]	@ (8011954 <PrepareFrame+0x278>)
 8011764:	2382      	movs	r3, #130	@ 0x82
 8011766:	005b      	lsls	r3, r3, #1
 8011768:	2104      	movs	r1, #4
 801176a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801176c:	4a79      	ldr	r2, [pc, #484]	@ (8011954 <PrepareFrame+0x278>)
 801176e:	2384      	movs	r3, #132	@ 0x84
 8011770:	005b      	lsls	r3, r3, #1
 8011772:	497c      	ldr	r1, [pc, #496]	@ (8011964 <PrepareFrame+0x288>)
 8011774:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011776:	4a77      	ldr	r2, [pc, #476]	@ (8011954 <PrepareFrame+0x278>)
 8011778:	2386      	movs	r3, #134	@ 0x86
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	21ff      	movs	r1, #255	@ 0xff
 801177e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	7819      	ldrb	r1, [r3, #0]
 8011784:	4a73      	ldr	r2, [pc, #460]	@ (8011954 <PrepareFrame+0x278>)
 8011786:	230e      	movs	r3, #14
 8011788:	33ff      	adds	r3, #255	@ 0xff
 801178a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801178c:	4a71      	ldr	r2, [pc, #452]	@ (8011954 <PrepareFrame+0x278>)
 801178e:	1df9      	adds	r1, r7, #7
 8011790:	2394      	movs	r3, #148	@ 0x94
 8011792:	005b      	lsls	r3, r3, #1
 8011794:	7809      	ldrb	r1, [r1, #0]
 8011796:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8011798:	4b6e      	ldr	r3, [pc, #440]	@ (8011954 <PrepareFrame+0x278>)
 801179a:	4a73      	ldr	r2, [pc, #460]	@ (8011968 <PrepareFrame+0x28c>)
 801179c:	589b      	ldr	r3, [r3, r2]
 801179e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80117a0:	4a6c      	ldr	r2, [pc, #432]	@ (8011954 <PrepareFrame+0x278>)
 80117a2:	2388      	movs	r3, #136	@ 0x88
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	7819      	ldrb	r1, [r3, #0]
 80117ac:	4a69      	ldr	r2, [pc, #420]	@ (8011954 <PrepareFrame+0x278>)
 80117ae:	238a      	movs	r3, #138	@ 0x8a
 80117b0:	005b      	lsls	r3, r3, #1
 80117b2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80117b4:	4b67      	ldr	r3, [pc, #412]	@ (8011954 <PrepareFrame+0x278>)
 80117b6:	4a6a      	ldr	r2, [pc, #424]	@ (8011960 <PrepareFrame+0x284>)
 80117b8:	5c99      	ldrb	r1, [r3, r2]
 80117ba:	4a66      	ldr	r2, [pc, #408]	@ (8011954 <PrepareFrame+0x278>)
 80117bc:	2398      	movs	r3, #152	@ 0x98
 80117be:	005b      	lsls	r3, r3, #1
 80117c0:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80117c2:	4a64      	ldr	r2, [pc, #400]	@ (8011954 <PrepareFrame+0x278>)
 80117c4:	2396      	movs	r3, #150	@ 0x96
 80117c6:	005b      	lsls	r3, r3, #1
 80117c8:	4964      	ldr	r1, [pc, #400]	@ (801195c <PrepareFrame+0x280>)
 80117ca:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80117cc:	2318      	movs	r3, #24
 80117ce:	18fb      	adds	r3, r7, r3
 80117d0:	0018      	movs	r0, r3
 80117d2:	f003 fcc9 	bl	8015168 <LoRaMacCryptoGetFCntUp>
 80117d6:	1e03      	subs	r3, r0, #0
 80117d8:	d001      	beq.n	80117de <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80117da:	2312      	movs	r3, #18
 80117dc:	e0b6      	b.n	801194c <PrepareFrame+0x270>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	b299      	uxth	r1, r3
 80117e2:	4a5c      	ldr	r2, [pc, #368]	@ (8011954 <PrepareFrame+0x278>)
 80117e4:	238b      	movs	r3, #139	@ 0x8b
 80117e6:	005b      	lsls	r3, r3, #1
 80117e8:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80117ea:	4b5a      	ldr	r3, [pc, #360]	@ (8011954 <PrepareFrame+0x278>)
 80117ec:	4a5f      	ldr	r2, [pc, #380]	@ (801196c <PrepareFrame+0x290>)
 80117ee:	2100      	movs	r1, #0
 80117f0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 80117f2:	4a58      	ldr	r2, [pc, #352]	@ (8011954 <PrepareFrame+0x278>)
 80117f4:	2388      	movs	r3, #136	@ 0x88
 80117f6:	00db      	lsls	r3, r3, #3
 80117f8:	2100      	movs	r1, #0
 80117fa:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80117fc:	69b9      	ldr	r1, [r7, #24]
 80117fe:	4a55      	ldr	r2, [pc, #340]	@ (8011954 <PrepareFrame+0x278>)
 8011800:	2389      	movs	r3, #137	@ 0x89
 8011802:	00db      	lsls	r3, r3, #3
 8011804:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011806:	2314      	movs	r3, #20
 8011808:	18fb      	adds	r3, r7, r3
 801180a:	0018      	movs	r0, r3
 801180c:	f002 fd78 	bl	8014300 <LoRaMacCommandsGetSizeSerializedCmds>
 8011810:	1e03      	subs	r3, r0, #0
 8011812:	d001      	beq.n	8011818 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011814:	2313      	movs	r3, #19
 8011816:	e099      	b.n	801194c <PrepareFrame+0x270>
            }

            if( macCmdsSize > 0 )
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d100      	bne.n	8011820 <PrepareFrame+0x144>
 801181e:	e091      	b.n	8011944 <PrepareFrame+0x268>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8011820:	4b4c      	ldr	r3, [pc, #304]	@ (8011954 <PrepareFrame+0x278>)
 8011822:	4a51      	ldr	r2, [pc, #324]	@ (8011968 <PrepareFrame+0x28c>)
 8011824:	589b      	ldr	r3, [r3, r2]
 8011826:	2285      	movs	r2, #133	@ 0x85
 8011828:	569b      	ldrsb	r3, [r3, r2]
 801182a:	221f      	movs	r2, #31
 801182c:	18bc      	adds	r4, r7, r2
 801182e:	0018      	movs	r0, r3
 8011830:	f7fe fb4c 	bl	800fecc <GetMaxAppPayloadWithoutFOptsLength>
 8011834:	0003      	movs	r3, r0
 8011836:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011838:	4b46      	ldr	r3, [pc, #280]	@ (8011954 <PrepareFrame+0x278>)
 801183a:	4a49      	ldr	r2, [pc, #292]	@ (8011960 <PrepareFrame+0x284>)
 801183c:	5c9b      	ldrb	r3, [r3, r2]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d024      	beq.n	801188c <PrepareFrame+0x1b0>
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	2b0f      	cmp	r3, #15
 8011846:	d821      	bhi.n	801188c <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011848:	4a49      	ldr	r2, [pc, #292]	@ (8011970 <PrepareFrame+0x294>)
 801184a:	2314      	movs	r3, #20
 801184c:	18fb      	adds	r3, r7, r3
 801184e:	0019      	movs	r1, r3
 8011850:	200f      	movs	r0, #15
 8011852:	f002 fd6b 	bl	801432c <LoRaMacCommandsSerializeCmds>
 8011856:	1e03      	subs	r3, r0, #0
 8011858:	d001      	beq.n	801185e <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801185a:	2313      	movs	r3, #19
 801185c:	e076      	b.n	801194c <PrepareFrame+0x270>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	1c1a      	adds	r2, r3, #0
 8011862:	230f      	movs	r3, #15
 8011864:	4013      	ands	r3, r2
 8011866:	b2da      	uxtb	r2, r3
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	210f      	movs	r1, #15
 801186c:	400a      	ands	r2, r1
 801186e:	0010      	movs	r0, r2
 8011870:	781a      	ldrb	r2, [r3, #0]
 8011872:	210f      	movs	r1, #15
 8011874:	438a      	bics	r2, r1
 8011876:	1c11      	adds	r1, r2, #0
 8011878:	1c02      	adds	r2, r0, #0
 801187a:	430a      	orrs	r2, r1
 801187c:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	7819      	ldrb	r1, [r3, #0]
 8011882:	4a34      	ldr	r2, [pc, #208]	@ (8011954 <PrepareFrame+0x278>)
 8011884:	238a      	movs	r3, #138	@ 0x8a
 8011886:	005b      	lsls	r3, r3, #1
 8011888:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801188a:	e05b      	b.n	8011944 <PrepareFrame+0x268>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801188c:	4b31      	ldr	r3, [pc, #196]	@ (8011954 <PrepareFrame+0x278>)
 801188e:	4a34      	ldr	r2, [pc, #208]	@ (8011960 <PrepareFrame+0x284>)
 8011890:	5c9b      	ldrb	r3, [r3, r2]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d015      	beq.n	80118c2 <PrepareFrame+0x1e6>
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	2b0f      	cmp	r3, #15
 801189a:	d912      	bls.n	80118c2 <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801189c:	231f      	movs	r3, #31
 801189e:	18fb      	adds	r3, r7, r3
 80118a0:	7818      	ldrb	r0, [r3, #0]
 80118a2:	4b2c      	ldr	r3, [pc, #176]	@ (8011954 <PrepareFrame+0x278>)
 80118a4:	4a30      	ldr	r2, [pc, #192]	@ (8011968 <PrepareFrame+0x28c>)
 80118a6:	589b      	ldr	r3, [r3, r2]
 80118a8:	33cb      	adds	r3, #203	@ 0xcb
 80118aa:	001a      	movs	r2, r3
 80118ac:	2314      	movs	r3, #20
 80118ae:	18fb      	adds	r3, r7, r3
 80118b0:	0019      	movs	r1, r3
 80118b2:	f002 fd3b 	bl	801432c <LoRaMacCommandsSerializeCmds>
 80118b6:	1e03      	subs	r3, r0, #0
 80118b8:	d001      	beq.n	80118be <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80118ba:	2313      	movs	r3, #19
 80118bc:	e046      	b.n	801194c <PrepareFrame+0x270>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80118be:	230a      	movs	r3, #10
 80118c0:	e044      	b.n	801194c <PrepareFrame+0x270>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80118c2:	231f      	movs	r3, #31
 80118c4:	18fb      	adds	r3, r7, r3
 80118c6:	7818      	ldrb	r0, [r3, #0]
 80118c8:	4b22      	ldr	r3, [pc, #136]	@ (8011954 <PrepareFrame+0x278>)
 80118ca:	4a27      	ldr	r2, [pc, #156]	@ (8011968 <PrepareFrame+0x28c>)
 80118cc:	589b      	ldr	r3, [r3, r2]
 80118ce:	33cb      	adds	r3, #203	@ 0xcb
 80118d0:	001a      	movs	r2, r3
 80118d2:	2314      	movs	r3, #20
 80118d4:	18fb      	adds	r3, r7, r3
 80118d6:	0019      	movs	r1, r3
 80118d8:	f002 fd28 	bl	801432c <LoRaMacCommandsSerializeCmds>
 80118dc:	1e03      	subs	r3, r0, #0
 80118de:	d001      	beq.n	80118e4 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80118e0:	2313      	movs	r3, #19
 80118e2:	e033      	b.n	801194c <PrepareFrame+0x270>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80118e4:	4a1b      	ldr	r2, [pc, #108]	@ (8011954 <PrepareFrame+0x278>)
 80118e6:	2394      	movs	r3, #148	@ 0x94
 80118e8:	005b      	lsls	r3, r3, #1
 80118ea:	2100      	movs	r1, #0
 80118ec:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 80118ee:	4b19      	ldr	r3, [pc, #100]	@ (8011954 <PrepareFrame+0x278>)
 80118f0:	4a1d      	ldr	r2, [pc, #116]	@ (8011968 <PrepareFrame+0x28c>)
 80118f2:	589b      	ldr	r3, [r3, r2]
 80118f4:	33cb      	adds	r3, #203	@ 0xcb
 80118f6:	0019      	movs	r1, r3
 80118f8:	4a16      	ldr	r2, [pc, #88]	@ (8011954 <PrepareFrame+0x278>)
 80118fa:	2396      	movs	r3, #150	@ 0x96
 80118fc:	005b      	lsls	r3, r3, #1
 80118fe:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	b2d9      	uxtb	r1, r3
 8011904:	4a13      	ldr	r2, [pc, #76]	@ (8011954 <PrepareFrame+0x278>)
 8011906:	2398      	movs	r3, #152	@ 0x98
 8011908:	005b      	lsls	r3, r3, #1
 801190a:	54d1      	strb	r1, [r2, r3]
            break;
 801190c:	e01a      	b.n	8011944 <PrepareFrame+0x268>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d019      	beq.n	8011948 <PrepareFrame+0x26c>
 8011914:	4b0f      	ldr	r3, [pc, #60]	@ (8011954 <PrepareFrame+0x278>)
 8011916:	4a12      	ldr	r2, [pc, #72]	@ (8011960 <PrepareFrame+0x284>)
 8011918:	5c9b      	ldrb	r3, [r3, r2]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d014      	beq.n	8011948 <PrepareFrame+0x26c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801191e:	4815      	ldr	r0, [pc, #84]	@ (8011974 <PrepareFrame+0x298>)
 8011920:	4b0c      	ldr	r3, [pc, #48]	@ (8011954 <PrepareFrame+0x278>)
 8011922:	4a0f      	ldr	r2, [pc, #60]	@ (8011960 <PrepareFrame+0x284>)
 8011924:	5c9b      	ldrb	r3, [r3, r2]
 8011926:	001a      	movs	r2, r3
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	0019      	movs	r1, r3
 801192c:	f007 f81c 	bl	8018968 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011930:	4b08      	ldr	r3, [pc, #32]	@ (8011954 <PrepareFrame+0x278>)
 8011932:	4a0b      	ldr	r2, [pc, #44]	@ (8011960 <PrepareFrame+0x284>)
 8011934:	5c9b      	ldrb	r3, [r3, r2]
 8011936:	3301      	adds	r3, #1
 8011938:	b29a      	uxth	r2, r3
 801193a:	4b06      	ldr	r3, [pc, #24]	@ (8011954 <PrepareFrame+0x278>)
 801193c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801193e:	e003      	b.n	8011948 <PrepareFrame+0x26c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011940:	2302      	movs	r3, #2
 8011942:	e003      	b.n	801194c <PrepareFrame+0x270>
            break;
 8011944:	46c0      	nop			@ (mov r8, r8)
 8011946:	e000      	b.n	801194a <PrepareFrame+0x26e>
            break;
 8011948:	46c0      	nop			@ (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 801194a:	2300      	movs	r3, #0
}
 801194c:	0018      	movs	r0, r3
 801194e:	46bd      	mov	sp, r7
 8011950:	b009      	add	sp, #36	@ 0x24
 8011952:	bd90      	pop	{r4, r7, pc}
 8011954:	20000b6c 	.word	0x20000b6c
 8011958:	00000414 	.word	0x00000414
 801195c:	20000ca4 	.word	0x20000ca4
 8011960:	00000237 	.word	0x00000237
 8011964:	20000b6e 	.word	0x20000b6e
 8011968:	00000484 	.word	0x00000484
 801196c:	00000441 	.word	0x00000441
 8011970:	20000c84 	.word	0x20000c84
 8011974:	20000b6f 	.word	0x20000b6f

08011978 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011978:	b5b0      	push	{r4, r5, r7, lr}
 801197a:	b08a      	sub	sp, #40	@ 0x28
 801197c:	af00      	add	r7, sp, #0
 801197e:	0002      	movs	r2, r0
 8011980:	1dfb      	adds	r3, r7, #7
 8011982:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011984:	2327      	movs	r3, #39	@ 0x27
 8011986:	18fb      	adds	r3, r7, r3
 8011988:	2203      	movs	r2, #3
 801198a:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 801198c:	240f      	movs	r4, #15
 801198e:	193b      	adds	r3, r7, r4
 8011990:	220a      	movs	r2, #10
 8011992:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8011994:	2110      	movs	r1, #16
 8011996:	187b      	adds	r3, r7, r1
 8011998:	1dfa      	adds	r2, r7, #7
 801199a:	7812      	ldrb	r2, [r2, #0]
 801199c:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801199e:	4b57      	ldr	r3, [pc, #348]	@ (8011afc <SendFrameOnChannel+0x184>)
 80119a0:	4a57      	ldr	r2, [pc, #348]	@ (8011b00 <SendFrameOnChannel+0x188>)
 80119a2:	589b      	ldr	r3, [r3, r2]
 80119a4:	2285      	movs	r2, #133	@ 0x85
 80119a6:	569a      	ldrsb	r2, [r3, r2]
 80119a8:	187b      	adds	r3, r7, r1
 80119aa:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80119ac:	4b53      	ldr	r3, [pc, #332]	@ (8011afc <SendFrameOnChannel+0x184>)
 80119ae:	4a54      	ldr	r2, [pc, #336]	@ (8011b00 <SendFrameOnChannel+0x188>)
 80119b0:	589b      	ldr	r3, [r3, r2]
 80119b2:	2284      	movs	r2, #132	@ 0x84
 80119b4:	569a      	ldrsb	r2, [r3, r2]
 80119b6:	187b      	adds	r3, r7, r1
 80119b8:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80119ba:	4b50      	ldr	r3, [pc, #320]	@ (8011afc <SendFrameOnChannel+0x184>)
 80119bc:	4a50      	ldr	r2, [pc, #320]	@ (8011b00 <SendFrameOnChannel+0x188>)
 80119be:	589b      	ldr	r3, [r3, r2]
 80119c0:	22bc      	movs	r2, #188	@ 0xbc
 80119c2:	589a      	ldr	r2, [r3, r2]
 80119c4:	187b      	adds	r3, r7, r1
 80119c6:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80119c8:	4b4c      	ldr	r3, [pc, #304]	@ (8011afc <SendFrameOnChannel+0x184>)
 80119ca:	4a4d      	ldr	r2, [pc, #308]	@ (8011b00 <SendFrameOnChannel+0x188>)
 80119cc:	589b      	ldr	r3, [r3, r2]
 80119ce:	22c0      	movs	r2, #192	@ 0xc0
 80119d0:	589a      	ldr	r2, [r3, r2]
 80119d2:	187b      	adds	r3, r7, r1
 80119d4:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80119d6:	4b49      	ldr	r3, [pc, #292]	@ (8011afc <SendFrameOnChannel+0x184>)
 80119d8:	881a      	ldrh	r2, [r3, #0]
 80119da:	187b      	adds	r3, r7, r1
 80119dc:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80119de:	4b47      	ldr	r3, [pc, #284]	@ (8011afc <SendFrameOnChannel+0x184>)
 80119e0:	4a47      	ldr	r2, [pc, #284]	@ (8011b00 <SendFrameOnChannel+0x188>)
 80119e2:	589b      	ldr	r3, [r3, r2]
 80119e4:	7818      	ldrb	r0, [r3, #0]
 80119e6:	4b47      	ldr	r3, [pc, #284]	@ (8011b04 <SendFrameOnChannel+0x18c>)
 80119e8:	193a      	adds	r2, r7, r4
 80119ea:	1879      	adds	r1, r7, r1
 80119ec:	f004 fc25 	bl	801623a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80119f0:	4b42      	ldr	r3, [pc, #264]	@ (8011afc <SendFrameOnChannel+0x184>)
 80119f2:	4a45      	ldr	r2, [pc, #276]	@ (8011b08 <SendFrameOnChannel+0x190>)
 80119f4:	2101      	movs	r1, #1
 80119f6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80119f8:	4b40      	ldr	r3, [pc, #256]	@ (8011afc <SendFrameOnChannel+0x184>)
 80119fa:	4a41      	ldr	r2, [pc, #260]	@ (8011b00 <SendFrameOnChannel+0x188>)
 80119fc:	589b      	ldr	r3, [r3, r2]
 80119fe:	2285      	movs	r2, #133	@ 0x85
 8011a00:	569b      	ldrsb	r3, [r3, r2]
 8011a02:	b2d9      	uxtb	r1, r3
 8011a04:	4b3d      	ldr	r3, [pc, #244]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a06:	4a41      	ldr	r2, [pc, #260]	@ (8011b0c <SendFrameOnChannel+0x194>)
 8011a08:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8011a0a:	193b      	adds	r3, r7, r4
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	5659      	ldrsb	r1, [r3, r1]
 8011a10:	4b3a      	ldr	r3, [pc, #232]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a12:	4a3f      	ldr	r2, [pc, #252]	@ (8011b10 <SendFrameOnChannel+0x198>)
 8011a14:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 8011a16:	1dfb      	adds	r3, r7, #7
 8011a18:	781a      	ldrb	r2, [r3, #0]
 8011a1a:	4b38      	ldr	r3, [pc, #224]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a1c:	493d      	ldr	r1, [pc, #244]	@ (8011b14 <SendFrameOnChannel+0x19c>)
 8011a1e:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011a20:	4a36      	ldr	r2, [pc, #216]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a22:	2383      	movs	r3, #131	@ 0x83
 8011a24:	00db      	lsls	r3, r3, #3
 8011a26:	58d2      	ldr	r2, [r2, r3]
 8011a28:	4b34      	ldr	r3, [pc, #208]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a2a:	493b      	ldr	r1, [pc, #236]	@ (8011b18 <SendFrameOnChannel+0x1a0>)
 8011a2c:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011a2e:	4a33      	ldr	r2, [pc, #204]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a30:	2383      	movs	r3, #131	@ 0x83
 8011a32:	00db      	lsls	r3, r3, #3
 8011a34:	58d2      	ldr	r2, [r2, r3]
 8011a36:	4b31      	ldr	r3, [pc, #196]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a38:	4938      	ldr	r1, [pc, #224]	@ (8011b1c <SendFrameOnChannel+0x1a4>)
 8011a3a:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011a3c:	f002 f9b0 	bl	8013da0 <LoRaMacClassBIsBeaconModeActive>
 8011a40:	1e03      	subs	r3, r0, #0
 8011a42:	d00d      	beq.n	8011a60 <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011a44:	4a2d      	ldr	r2, [pc, #180]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a46:	2383      	movs	r3, #131	@ 0x83
 8011a48:	00db      	lsls	r3, r3, #3
 8011a4a:	58d3      	ldr	r3, [r2, r3]
 8011a4c:	0018      	movs	r0, r3
 8011a4e:	f002 fa0b 	bl	8013e68 <LoRaMacClassBIsUplinkCollision>
 8011a52:	0003      	movs	r3, r0
 8011a54:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 8011a56:	6a3b      	ldr	r3, [r7, #32]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011a5c:	2310      	movs	r3, #16
 8011a5e:	e048      	b.n	8011af2 <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011a60:	4b26      	ldr	r3, [pc, #152]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a62:	4a27      	ldr	r2, [pc, #156]	@ (8011b00 <SendFrameOnChannel+0x188>)
 8011a64:	589b      	ldr	r3, [r3, r2]
 8011a66:	227c      	movs	r2, #124	@ 0x7c
 8011a68:	5c9b      	ldrb	r3, [r3, r2]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d101      	bne.n	8011a72 <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011a6e:	f002 fa04 	bl	8013e7a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011a72:	f002 f9a5 	bl	8013dc0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8011a76:	4b21      	ldr	r3, [pc, #132]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a78:	4a21      	ldr	r2, [pc, #132]	@ (8011b00 <SendFrameOnChannel+0x188>)
 8011a7a:	589b      	ldr	r3, [r3, r2]
 8011a7c:	2285      	movs	r2, #133	@ 0x85
 8011a7e:	569b      	ldrsb	r3, [r3, r2]
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	4b1e      	ldr	r3, [pc, #120]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011a84:	4926      	ldr	r1, [pc, #152]	@ (8011b20 <SendFrameOnChannel+0x1a8>)
 8011a86:	5c5b      	ldrb	r3, [r3, r1]
 8011a88:	2527      	movs	r5, #39	@ 0x27
 8011a8a:	197c      	adds	r4, r7, r5
 8011a8c:	0019      	movs	r1, r3
 8011a8e:	0010      	movs	r0, r2
 8011a90:	f7ff fbec 	bl	801126c <SecureFrame>
 8011a94:	0003      	movs	r3, r0
 8011a96:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011a98:	197b      	adds	r3, r7, r5
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d002      	beq.n	8011aa6 <SendFrameOnChannel+0x12e>
    {
        return status;
 8011aa0:	197b      	adds	r3, r7, r5
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	e025      	b.n	8011af2 <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011aa6:	4a15      	ldr	r2, [pc, #84]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011aa8:	23d0      	movs	r3, #208	@ 0xd0
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	58d3      	ldr	r3, [r2, r3]
 8011aae:	2202      	movs	r2, #2
 8011ab0:	431a      	orrs	r2, r3
 8011ab2:	0011      	movs	r1, r2
 8011ab4:	4a11      	ldr	r2, [pc, #68]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011ab6:	23d0      	movs	r3, #208	@ 0xd0
 8011ab8:	009b      	lsls	r3, r3, #2
 8011aba:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8011abc:	4b0f      	ldr	r3, [pc, #60]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011abe:	4a19      	ldr	r2, [pc, #100]	@ (8011b24 <SendFrameOnChannel+0x1ac>)
 8011ac0:	5c9b      	ldrb	r3, [r3, r2]
 8011ac2:	2201      	movs	r2, #1
 8011ac4:	4053      	eors	r3, r2
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d009      	beq.n	8011ae0 <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8011acc:	4a0b      	ldr	r2, [pc, #44]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011ace:	2382      	movs	r3, #130	@ 0x82
 8011ad0:	00db      	lsls	r3, r3, #3
 8011ad2:	5cd3      	ldrb	r3, [r2, r3]
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	b2d9      	uxtb	r1, r3
 8011ad8:	4a08      	ldr	r2, [pc, #32]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011ada:	2382      	movs	r3, #130	@ 0x82
 8011adc:	00db      	lsls	r3, r3, #3
 8011ade:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011ae0:	4b11      	ldr	r3, [pc, #68]	@ (8011b28 <SendFrameOnChannel+0x1b0>)
 8011ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ae4:	4a05      	ldr	r2, [pc, #20]	@ (8011afc <SendFrameOnChannel+0x184>)
 8011ae6:	8812      	ldrh	r2, [r2, #0]
 8011ae8:	b2d1      	uxtb	r1, r2
 8011aea:	4a10      	ldr	r2, [pc, #64]	@ (8011b2c <SendFrameOnChannel+0x1b4>)
 8011aec:	0010      	movs	r0, r2
 8011aee:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	0018      	movs	r0, r3
 8011af4:	46bd      	mov	sp, r7
 8011af6:	b00a      	add	sp, #40	@ 0x28
 8011af8:	bdb0      	pop	{r4, r5, r7, pc}
 8011afa:	46c0      	nop			@ (mov r8, r8)
 8011afc:	20000b6c 	.word	0x20000b6c
 8011b00:	00000484 	.word	0x00000484
 8011b04:	20000f84 	.word	0x20000f84
 8011b08:	0000043d 	.word	0x0000043d
 8011b0c:	0000043e 	.word	0x0000043e
 8011b10:	0000043f 	.word	0x0000043f
 8011b14:	0000044c 	.word	0x0000044c
 8011b18:	00000444 	.word	0x00000444
 8011b1c:	00000454 	.word	0x00000454
 8011b20:	00000415 	.word	0x00000415
 8011b24:	00000414 	.word	0x00000414
 8011b28:	0801e62c 	.word	0x0801e62c
 8011b2c:	20000b6e 	.word	0x20000b6e

08011b30 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b086      	sub	sp, #24
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	0002      	movs	r2, r0
 8011b38:	1dbb      	adds	r3, r7, #6
 8011b3a:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8011b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8011bbc <SetTxContinuousWave+0x8c>)
 8011b3e:	4a20      	ldr	r2, [pc, #128]	@ (8011bc0 <SetTxContinuousWave+0x90>)
 8011b40:	5c9a      	ldrb	r2, [r3, r2]
 8011b42:	2108      	movs	r1, #8
 8011b44:	187b      	adds	r3, r7, r1
 8011b46:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011b48:	4b1c      	ldr	r3, [pc, #112]	@ (8011bbc <SetTxContinuousWave+0x8c>)
 8011b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8011bc4 <SetTxContinuousWave+0x94>)
 8011b4c:	589b      	ldr	r3, [r3, r2]
 8011b4e:	2285      	movs	r2, #133	@ 0x85
 8011b50:	569a      	ldrsb	r2, [r3, r2]
 8011b52:	187b      	adds	r3, r7, r1
 8011b54:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011b56:	4b19      	ldr	r3, [pc, #100]	@ (8011bbc <SetTxContinuousWave+0x8c>)
 8011b58:	4a1a      	ldr	r2, [pc, #104]	@ (8011bc4 <SetTxContinuousWave+0x94>)
 8011b5a:	589b      	ldr	r3, [r3, r2]
 8011b5c:	2284      	movs	r2, #132	@ 0x84
 8011b5e:	569a      	ldrsb	r2, [r3, r2]
 8011b60:	187b      	adds	r3, r7, r1
 8011b62:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8011b64:	4b15      	ldr	r3, [pc, #84]	@ (8011bbc <SetTxContinuousWave+0x8c>)
 8011b66:	4a17      	ldr	r2, [pc, #92]	@ (8011bc4 <SetTxContinuousWave+0x94>)
 8011b68:	589b      	ldr	r3, [r3, r2]
 8011b6a:	22bc      	movs	r2, #188	@ 0xbc
 8011b6c:	589a      	ldr	r2, [r3, r2]
 8011b6e:	187b      	adds	r3, r7, r1
 8011b70:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8011b72:	4b12      	ldr	r3, [pc, #72]	@ (8011bbc <SetTxContinuousWave+0x8c>)
 8011b74:	4a13      	ldr	r2, [pc, #76]	@ (8011bc4 <SetTxContinuousWave+0x94>)
 8011b76:	589b      	ldr	r3, [r3, r2]
 8011b78:	22c0      	movs	r2, #192	@ 0xc0
 8011b7a:	589a      	ldr	r2, [r3, r2]
 8011b7c:	187b      	adds	r3, r7, r1
 8011b7e:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8011b80:	187b      	adds	r3, r7, r1
 8011b82:	1dba      	adds	r2, r7, #6
 8011b84:	8812      	ldrh	r2, [r2, #0]
 8011b86:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8011b88:	4b0c      	ldr	r3, [pc, #48]	@ (8011bbc <SetTxContinuousWave+0x8c>)
 8011b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8011bc4 <SetTxContinuousWave+0x94>)
 8011b8c:	589b      	ldr	r3, [r3, r2]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	187a      	adds	r2, r7, r1
 8011b92:	0011      	movs	r1, r2
 8011b94:	0018      	movs	r0, r3
 8011b96:	f004 fc1f 	bl	80163d8 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011b9a:	4a08      	ldr	r2, [pc, #32]	@ (8011bbc <SetTxContinuousWave+0x8c>)
 8011b9c:	23d0      	movs	r3, #208	@ 0xd0
 8011b9e:	009b      	lsls	r3, r3, #2
 8011ba0:	58d3      	ldr	r3, [r2, r3]
 8011ba2:	2202      	movs	r2, #2
 8011ba4:	431a      	orrs	r2, r3
 8011ba6:	0011      	movs	r1, r2
 8011ba8:	4a04      	ldr	r2, [pc, #16]	@ (8011bbc <SetTxContinuousWave+0x8c>)
 8011baa:	23d0      	movs	r3, #208	@ 0xd0
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8011bb0:	2300      	movs	r3, #0
}
 8011bb2:	0018      	movs	r0, r3
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	b006      	add	sp, #24
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	46c0      	nop			@ (mov r8, r8)
 8011bbc:	20000b6c 	.word	0x20000b6c
 8011bc0:	00000415 	.word	0x00000415
 8011bc4:	00000484 	.word	0x00000484

08011bc8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6039      	str	r1, [r7, #0]
 8011bd0:	0011      	movs	r1, r2
 8011bd2:	1dbb      	adds	r3, r7, #6
 8011bd4:	1c02      	adds	r2, r0, #0
 8011bd6:	801a      	strh	r2, [r3, #0]
 8011bd8:	1d7b      	adds	r3, r7, #5
 8011bda:	1c0a      	adds	r2, r1, #0
 8011bdc:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011bde:	4b0c      	ldr	r3, [pc, #48]	@ (8011c10 <SetTxContinuousWave1+0x48>)
 8011be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011be2:	1d7a      	adds	r2, r7, #5
 8011be4:	2100      	movs	r1, #0
 8011be6:	5651      	ldrsb	r1, [r2, r1]
 8011be8:	1dba      	adds	r2, r7, #6
 8011bea:	8812      	ldrh	r2, [r2, #0]
 8011bec:	6838      	ldr	r0, [r7, #0]
 8011bee:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011bf0:	4a08      	ldr	r2, [pc, #32]	@ (8011c14 <SetTxContinuousWave1+0x4c>)
 8011bf2:	23d0      	movs	r3, #208	@ 0xd0
 8011bf4:	009b      	lsls	r3, r3, #2
 8011bf6:	58d3      	ldr	r3, [r2, r3]
 8011bf8:	2202      	movs	r2, #2
 8011bfa:	431a      	orrs	r2, r3
 8011bfc:	0011      	movs	r1, r2
 8011bfe:	4a05      	ldr	r2, [pc, #20]	@ (8011c14 <SetTxContinuousWave1+0x4c>)
 8011c00:	23d0      	movs	r3, #208	@ 0xd0
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8011c06:	2300      	movs	r3, #0
}
 8011c08:	0018      	movs	r0, r3
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	b002      	add	sp, #8
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	0801e62c 	.word	0x0801e62c
 8011c14:	20000b6c 	.word	0x20000b6c

08011c18 <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8011c1e:	4b20      	ldr	r3, [pc, #128]	@ (8011ca0 <GetCtxs+0x88>)
 8011c20:	4a20      	ldr	r2, [pc, #128]	@ (8011ca4 <GetCtxs+0x8c>)
 8011c22:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8011c24:	4b1e      	ldr	r3, [pc, #120]	@ (8011ca0 <GetCtxs+0x88>)
 8011c26:	22b6      	movs	r2, #182	@ 0xb6
 8011c28:	0052      	lsls	r2, r2, #1
 8011c2a:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8011c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8011ca8 <GetCtxs+0x90>)
 8011c2e:	0018      	movs	r0, r3
 8011c30:	f003 fa8c 	bl	801514c <LoRaMacCryptoGetNvmCtx>
 8011c34:	0002      	movs	r2, r0
 8011c36:	4b1a      	ldr	r3, [pc, #104]	@ (8011ca0 <GetCtxs+0x88>)
 8011c38:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8011c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8011cac <GetCtxs+0x94>)
 8011c40:	4a1b      	ldr	r2, [pc, #108]	@ (8011cb0 <GetCtxs+0x98>)
 8011c42:	589b      	ldr	r3, [r3, r2]
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	1d3a      	adds	r2, r7, #4
 8011c48:	0011      	movs	r1, r2
 8011c4a:	0018      	movs	r0, r3
 8011c4c:	f004 fa59 	bl	8016102 <RegionGetNvmCtx>
 8011c50:	0002      	movs	r2, r0
 8011c52:	4b13      	ldr	r3, [pc, #76]	@ (8011ca0 <GetCtxs+0x88>)
 8011c54:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	4b11      	ldr	r3, [pc, #68]	@ (8011ca0 <GetCtxs+0x88>)
 8011c5a:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8011c5c:	4b15      	ldr	r3, [pc, #84]	@ (8011cb4 <GetCtxs+0x9c>)
 8011c5e:	0018      	movs	r0, r3
 8011c60:	f7fb f872 	bl	800cd48 <SecureElementGetNvmCtx>
 8011c64:	0002      	movs	r2, r0
 8011c66:	4b0e      	ldr	r3, [pc, #56]	@ (8011ca0 <GetCtxs+0x88>)
 8011c68:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8011c6a:	4b13      	ldr	r3, [pc, #76]	@ (8011cb8 <GetCtxs+0xa0>)
 8011c6c:	0018      	movs	r0, r3
 8011c6e:	f002 fa63 	bl	8014138 <LoRaMacCommandsGetNvmCtx>
 8011c72:	0002      	movs	r2, r0
 8011c74:	4b0a      	ldr	r3, [pc, #40]	@ (8011ca0 <GetCtxs+0x88>)
 8011c76:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8011c78:	4b10      	ldr	r3, [pc, #64]	@ (8011cbc <GetCtxs+0xa4>)
 8011c7a:	0018      	movs	r0, r3
 8011c7c:	f002 f82a 	bl	8013cd4 <LoRaMacClassBGetNvmCtx>
 8011c80:	0002      	movs	r2, r0
 8011c82:	4b07      	ldr	r3, [pc, #28]	@ (8011ca0 <GetCtxs+0x88>)
 8011c84:	629a      	str	r2, [r3, #40]	@ 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8011c86:	4b0e      	ldr	r3, [pc, #56]	@ (8011cc0 <GetCtxs+0xa8>)
 8011c88:	0018      	movs	r0, r3
 8011c8a:	f002 fcf5 	bl	8014678 <LoRaMacConfirmQueueGetNvmCtx>
 8011c8e:	0002      	movs	r2, r0
 8011c90:	4b03      	ldr	r3, [pc, #12]	@ (8011ca0 <GetCtxs+0x88>)
 8011c92:	631a      	str	r2, [r3, #48]	@ 0x30
    return &Contexts;
 8011c94:	4b02      	ldr	r3, [pc, #8]	@ (8011ca0 <GetCtxs+0x88>)
}
 8011c96:	0018      	movs	r0, r3
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	b002      	add	sp, #8
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	46c0      	nop			@ (mov r8, r8)
 8011ca0:	20001164 	.word	0x20001164
 8011ca4:	20000ff8 	.word	0x20000ff8
 8011ca8:	20001178 	.word	0x20001178
 8011cac:	20000b6c 	.word	0x20000b6c
 8011cb0:	00000484 	.word	0x00000484
 8011cb4:	20001180 	.word	0x20001180
 8011cb8:	20001188 	.word	0x20001188
 8011cbc:	20001190 	.word	0x20001190
 8011cc0:	20001198 	.word	0x20001198

08011cc4 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d101      	bne.n	8011cd6 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011cd2:	2303      	movs	r3, #3
 8011cd4:	e086      	b.n	8011de4 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011cd6:	4a45      	ldr	r2, [pc, #276]	@ (8011dec <RestoreCtxs+0x128>)
 8011cd8:	23d0      	movs	r3, #208	@ 0xd0
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	58d3      	ldr	r3, [r2, r3]
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d001      	beq.n	8011ce6 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e07e      	b.n	8011de4 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d008      	beq.n	8011d00 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6819      	ldr	r1, [r3, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8011df0 <RestoreCtxs+0x12c>)
 8011cfa:	0018      	movs	r0, r3
 8011cfc:	f006 fe34 	bl	8018968 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8011d00:	2108      	movs	r1, #8
 8011d02:	187b      	adds	r3, r7, r1
 8011d04:	2203      	movs	r2, #3
 8011d06:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	689a      	ldr	r2, [r3, #8]
 8011d0c:	187b      	adds	r3, r7, r1
 8011d0e:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011d10:	4b36      	ldr	r3, [pc, #216]	@ (8011dec <RestoreCtxs+0x128>)
 8011d12:	4a38      	ldr	r2, [pc, #224]	@ (8011df4 <RestoreCtxs+0x130>)
 8011d14:	589b      	ldr	r3, [r3, r2]
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	187a      	adds	r2, r7, r1
 8011d1a:	0011      	movs	r1, r2
 8011d1c:	0018      	movs	r0, r3
 8011d1e:	f004 f9db 	bl	80160d8 <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011d22:	4b32      	ldr	r3, [pc, #200]	@ (8011dec <RestoreCtxs+0x128>)
 8011d24:	4a34      	ldr	r2, [pc, #208]	@ (8011df8 <RestoreCtxs+0x134>)
 8011d26:	5c99      	ldrb	r1, [r3, r2]
 8011d28:	4a30      	ldr	r2, [pc, #192]	@ (8011dec <RestoreCtxs+0x128>)
 8011d2a:	23f8      	movs	r3, #248	@ 0xf8
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8011d30:	4b2e      	ldr	r3, [pc, #184]	@ (8011dec <RestoreCtxs+0x128>)
 8011d32:	4a30      	ldr	r2, [pc, #192]	@ (8011df4 <RestoreCtxs+0x130>)
 8011d34:	589b      	ldr	r3, [r3, r2]
 8011d36:	22b0      	movs	r2, #176	@ 0xb0
 8011d38:	5899      	ldr	r1, [r3, r2]
 8011d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8011dec <RestoreCtxs+0x128>)
 8011d3c:	23f9      	movs	r3, #249	@ 0xf9
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011d42:	4b2a      	ldr	r3, [pc, #168]	@ (8011dec <RestoreCtxs+0x128>)
 8011d44:	4a2b      	ldr	r2, [pc, #172]	@ (8011df4 <RestoreCtxs+0x130>)
 8011d46:	589b      	ldr	r3, [r3, r2]
 8011d48:	22b9      	movs	r2, #185	@ 0xb9
 8011d4a:	5c99      	ldrb	r1, [r3, r2]
 8011d4c:	4a27      	ldr	r2, [pc, #156]	@ (8011dec <RestoreCtxs+0x128>)
 8011d4e:	23fc      	movs	r3, #252	@ 0xfc
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011d54:	4b25      	ldr	r3, [pc, #148]	@ (8011dec <RestoreCtxs+0x128>)
 8011d56:	4a27      	ldr	r2, [pc, #156]	@ (8011df4 <RestoreCtxs+0x130>)
 8011d58:	589b      	ldr	r3, [r3, r2]
 8011d5a:	22ca      	movs	r2, #202	@ 0xca
 8011d5c:	5c99      	ldrb	r1, [r3, r2]
 8011d5e:	4b23      	ldr	r3, [pc, #140]	@ (8011dec <RestoreCtxs+0x128>)
 8011d60:	4a26      	ldr	r2, [pc, #152]	@ (8011dfc <RestoreCtxs+0x138>)
 8011d62:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011d64:	4b21      	ldr	r3, [pc, #132]	@ (8011dec <RestoreCtxs+0x128>)
 8011d66:	4a26      	ldr	r2, [pc, #152]	@ (8011e00 <RestoreCtxs+0x13c>)
 8011d68:	2101      	movs	r1, #1
 8011d6a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8011dec <RestoreCtxs+0x128>)
 8011d6e:	4a25      	ldr	r2, [pc, #148]	@ (8011e04 <RestoreCtxs+0x140>)
 8011d70:	2102      	movs	r1, #2
 8011d72:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	699b      	ldr	r3, [r3, #24]
 8011d78:	0018      	movs	r0, r3
 8011d7a:	f7fa ffcf 	bl	800cd1c <SecureElementRestoreNvmCtx>
 8011d7e:	1e03      	subs	r3, r0, #0
 8011d80:	d001      	beq.n	8011d86 <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d82:	2311      	movs	r3, #17
 8011d84:	e02e      	b.n	8011de4 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	691b      	ldr	r3, [r3, #16]
 8011d8a:	0018      	movs	r0, r3
 8011d8c:	f003 f9c8 	bl	8015120 <LoRaMacCryptoRestoreNvmCtx>
 8011d90:	1e03      	subs	r3, r0, #0
 8011d92:	d001      	beq.n	8011d98 <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d94:	2311      	movs	r3, #17
 8011d96:	e025      	b.n	8011de4 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6a1b      	ldr	r3, [r3, #32]
 8011d9c:	0018      	movs	r0, r3
 8011d9e:	f002 f9b5 	bl	801410c <LoRaMacCommandsRestoreNvmCtx>
 8011da2:	1e03      	subs	r3, r0, #0
 8011da4:	d001      	beq.n	8011daa <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011da6:	2313      	movs	r3, #19
 8011da8:	e01c      	b.n	8011de4 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dae:	0018      	movs	r0, r3
 8011db0:	f001 ff87 	bl	8013cc2 <LoRaMacClassBRestoreNvmCtx>
 8011db4:	0003      	movs	r3, r0
 8011db6:	001a      	movs	r2, r3
 8011db8:	2301      	movs	r3, #1
 8011dba:	4053      	eors	r3, r2
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d001      	beq.n	8011dc6 <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8011dc2:	2314      	movs	r3, #20
 8011dc4:	e00e      	b.n	8011de4 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dca:	0018      	movs	r0, r3
 8011dcc:	f002 fc3e 	bl	801464c <LoRaMacConfirmQueueRestoreNvmCtx>
 8011dd0:	0003      	movs	r3, r0
 8011dd2:	001a      	movs	r2, r3
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	4053      	eors	r3, r2
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d001      	beq.n	8011de2 <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8011dde:	2315      	movs	r3, #21
 8011de0:	e000      	b.n	8011de4 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	0018      	movs	r0, r3
 8011de6:	46bd      	mov	sp, r7
 8011de8:	b004      	add	sp, #16
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	20000b6c 	.word	0x20000b6c
 8011df0:	20000ff8 	.word	0x20000ff8
 8011df4:	00000484 	.word	0x00000484
 8011df8:	00000415 	.word	0x00000415
 8011dfc:	000003f1 	.word	0x000003f1
 8011e00:	000003f2 	.word	0x000003f2
 8011e04:	000003f3 	.word	0x000003f3

08011e08 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b082      	sub	sp, #8
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d002      	beq.n	8011e1e <DetermineFrameType+0x16>
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d101      	bne.n	8011e22 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e1e:	2303      	movs	r3, #3
 8011e20:	e03b      	b.n	8011e9a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	7b1b      	ldrb	r3, [r3, #12]
 8011e26:	220f      	movs	r2, #15
 8011e28:	4013      	ands	r3, r2
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d008      	beq.n	8011e42 <DetermineFrameType+0x3a>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2220      	movs	r2, #32
 8011e34:	5c9b      	ldrb	r3, [r3, r2]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d003      	beq.n	8011e42 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	701a      	strb	r2, [r3, #0]
 8011e40:	e02a      	b.n	8011e98 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2228      	movs	r2, #40	@ 0x28
 8011e46:	5c9b      	ldrb	r3, [r3, r2]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d103      	bne.n	8011e54 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	2201      	movs	r2, #1
 8011e50:	701a      	strb	r2, [r3, #0]
 8011e52:	e021      	b.n	8011e98 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	7b1b      	ldrb	r3, [r3, #12]
 8011e58:	220f      	movs	r2, #15
 8011e5a:	4013      	ands	r3, r2
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d108      	bne.n	8011e74 <DetermineFrameType+0x6c>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2220      	movs	r2, #32
 8011e66:	5c9b      	ldrb	r3, [r3, r2]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d103      	bne.n	8011e74 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	2202      	movs	r2, #2
 8011e70:	701a      	strb	r2, [r3, #0]
 8011e72:	e011      	b.n	8011e98 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	7b1b      	ldrb	r3, [r3, #12]
 8011e78:	220f      	movs	r2, #15
 8011e7a:	4013      	ands	r3, r2
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d108      	bne.n	8011e94 <DetermineFrameType+0x8c>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2220      	movs	r2, #32
 8011e86:	5c9b      	ldrb	r3, [r3, r2]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d003      	beq.n	8011e94 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	2203      	movs	r2, #3
 8011e90:	701a      	strb	r2, [r3, #0]
 8011e92:	e001      	b.n	8011e98 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011e94:	2317      	movs	r3, #23
 8011e96:	e000      	b.n	8011e9a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011e98:	2300      	movs	r3, #0
}
 8011e9a:	0018      	movs	r0, r3
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	b002      	add	sp, #8
 8011ea0:	bd80      	pop	{r7, pc}
	...

08011ea4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8011ea8:	4a14      	ldr	r2, [pc, #80]	@ (8011efc <CheckRetransUnconfirmedUplink+0x58>)
 8011eaa:	2382      	movs	r3, #130	@ 0x82
 8011eac:	00db      	lsls	r3, r3, #3
 8011eae:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8011eb0:	4b12      	ldr	r3, [pc, #72]	@ (8011efc <CheckRetransUnconfirmedUplink+0x58>)
 8011eb2:	4913      	ldr	r1, [pc, #76]	@ (8011f00 <CheckRetransUnconfirmedUplink+0x5c>)
 8011eb4:	585b      	ldr	r3, [r3, r1]
 8011eb6:	21a4      	movs	r1, #164	@ 0xa4
 8011eb8:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d301      	bcc.n	8011ec2 <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	e018      	b.n	8011ef4 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8011efc <CheckRetransUnconfirmedUplink+0x58>)
 8011ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8011f04 <CheckRetransUnconfirmedUplink+0x60>)
 8011ec6:	5c9b      	ldrb	r3, [r3, r2]
 8011ec8:	2202      	movs	r2, #2
 8011eca:	4013      	ands	r3, r2
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00f      	beq.n	8011ef2 <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8011ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8011efc <CheckRetransUnconfirmedUplink+0x58>)
 8011ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8011f00 <CheckRetransUnconfirmedUplink+0x5c>)
 8011ed6:	589b      	ldr	r3, [r3, r2]
 8011ed8:	227c      	movs	r2, #124	@ 0x7c
 8011eda:	5c9b      	ldrb	r3, [r3, r2]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d101      	bne.n	8011ee4 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e007      	b.n	8011ef4 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8011ee4:	4b05      	ldr	r3, [pc, #20]	@ (8011efc <CheckRetransUnconfirmedUplink+0x58>)
 8011ee6:	4a08      	ldr	r2, [pc, #32]	@ (8011f08 <CheckRetransUnconfirmedUplink+0x64>)
 8011ee8:	5c9b      	ldrb	r3, [r3, r2]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d101      	bne.n	8011ef2 <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e000      	b.n	8011ef4 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8011ef2:	2300      	movs	r3, #0
}
 8011ef4:	0018      	movs	r0, r3
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	46c0      	nop			@ (mov r8, r8)
 8011efc:	20000b6c 	.word	0x20000b6c
 8011f00:	00000484 	.word	0x00000484
 8011f04:	00000481 	.word	0x00000481
 8011f08:	0000042d 	.word	0x0000042d

08011f0c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011f10:	4b0e      	ldr	r3, [pc, #56]	@ (8011f4c <CheckRetransConfirmedUplink+0x40>)
 8011f12:	4a0f      	ldr	r2, [pc, #60]	@ (8011f50 <CheckRetransConfirmedUplink+0x44>)
 8011f14:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8011f16:	4b0d      	ldr	r3, [pc, #52]	@ (8011f4c <CheckRetransConfirmedUplink+0x40>)
 8011f18:	490e      	ldr	r1, [pc, #56]	@ (8011f54 <CheckRetransConfirmedUplink+0x48>)
 8011f1a:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d301      	bcc.n	8011f24 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011f20:	2301      	movs	r3, #1
 8011f22:	e010      	b.n	8011f46 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011f24:	4b09      	ldr	r3, [pc, #36]	@ (8011f4c <CheckRetransConfirmedUplink+0x40>)
 8011f26:	4a0c      	ldr	r2, [pc, #48]	@ (8011f58 <CheckRetransConfirmedUplink+0x4c>)
 8011f28:	5c9b      	ldrb	r3, [r3, r2]
 8011f2a:	2202      	movs	r2, #2
 8011f2c:	4013      	ands	r3, r2
 8011f2e:	b2db      	uxtb	r3, r3
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d007      	beq.n	8011f44 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011f34:	4a05      	ldr	r2, [pc, #20]	@ (8011f4c <CheckRetransConfirmedUplink+0x40>)
 8011f36:	2388      	movs	r3, #136	@ 0x88
 8011f38:	00db      	lsls	r3, r3, #3
 8011f3a:	5cd3      	ldrb	r3, [r2, r3]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d001      	beq.n	8011f44 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8011f40:	2301      	movs	r3, #1
 8011f42:	e000      	b.n	8011f46 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	0018      	movs	r0, r3
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}
 8011f4c:	20000b6c 	.word	0x20000b6c
 8011f50:	00000412 	.word	0x00000412
 8011f54:	00000411 	.word	0x00000411
 8011f58:	00000481 	.word	0x00000481

08011f5c <StopRetransmission>:

static bool StopRetransmission( void )
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011f60:	4b1e      	ldr	r3, [pc, #120]	@ (8011fdc <StopRetransmission+0x80>)
 8011f62:	4a1f      	ldr	r2, [pc, #124]	@ (8011fe0 <StopRetransmission+0x84>)
 8011f64:	5c9b      	ldrb	r3, [r3, r2]
 8011f66:	2202      	movs	r2, #2
 8011f68:	4013      	ands	r3, r2
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d009      	beq.n	8011f84 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8011f70:	4b1a      	ldr	r3, [pc, #104]	@ (8011fdc <StopRetransmission+0x80>)
 8011f72:	4a1c      	ldr	r2, [pc, #112]	@ (8011fe4 <StopRetransmission+0x88>)
 8011f74:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d013      	beq.n	8011fa2 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011f7a:	4b18      	ldr	r3, [pc, #96]	@ (8011fdc <StopRetransmission+0x80>)
 8011f7c:	4a19      	ldr	r2, [pc, #100]	@ (8011fe4 <StopRetransmission+0x88>)
 8011f7e:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8011f80:	2b01      	cmp	r3, #1
 8011f82:	d00e      	beq.n	8011fa2 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8011f84:	4b15      	ldr	r3, [pc, #84]	@ (8011fdc <StopRetransmission+0x80>)
 8011f86:	4a18      	ldr	r2, [pc, #96]	@ (8011fe8 <StopRetransmission+0x8c>)
 8011f88:	589b      	ldr	r3, [r3, r2]
 8011f8a:	227e      	movs	r2, #126	@ 0x7e
 8011f8c:	5c9b      	ldrb	r3, [r3, r2]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d007      	beq.n	8011fa2 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8011f92:	4b12      	ldr	r3, [pc, #72]	@ (8011fdc <StopRetransmission+0x80>)
 8011f94:	4a14      	ldr	r2, [pc, #80]	@ (8011fe8 <StopRetransmission+0x8c>)
 8011f96:	589b      	ldr	r3, [r3, r2]
 8011f98:	2280      	movs	r2, #128	@ 0x80
 8011f9a:	589a      	ldr	r2, [r3, r2]
 8011f9c:	3201      	adds	r2, #1
 8011f9e:	2180      	movs	r1, #128	@ 0x80
 8011fa0:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8011fdc <StopRetransmission+0x80>)
 8011fa4:	2382      	movs	r3, #130	@ 0x82
 8011fa6:	00db      	lsls	r3, r3, #3
 8011fa8:	2100      	movs	r1, #0
 8011faa:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8011fac:	4b0b      	ldr	r3, [pc, #44]	@ (8011fdc <StopRetransmission+0x80>)
 8011fae:	4a0f      	ldr	r2, [pc, #60]	@ (8011fec <StopRetransmission+0x90>)
 8011fb0:	2100      	movs	r1, #0
 8011fb2:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011fb4:	4b09      	ldr	r3, [pc, #36]	@ (8011fdc <StopRetransmission+0x80>)
 8011fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8011ff0 <StopRetransmission+0x94>)
 8011fb8:	2100      	movs	r1, #0
 8011fba:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011fbc:	4a07      	ldr	r2, [pc, #28]	@ (8011fdc <StopRetransmission+0x80>)
 8011fbe:	23d0      	movs	r3, #208	@ 0xd0
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	58d3      	ldr	r3, [r2, r3]
 8011fc4:	2202      	movs	r2, #2
 8011fc6:	4393      	bics	r3, r2
 8011fc8:	0019      	movs	r1, r3
 8011fca:	4a04      	ldr	r2, [pc, #16]	@ (8011fdc <StopRetransmission+0x80>)
 8011fcc:	23d0      	movs	r3, #208	@ 0xd0
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	50d1      	str	r1, [r2, r3]

    return true;
 8011fd2:	2301      	movs	r3, #1
}
 8011fd4:	0018      	movs	r0, r3
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	46c0      	nop			@ (mov r8, r8)
 8011fdc:	20000b6c 	.word	0x20000b6c
 8011fe0:	00000481 	.word	0x00000481
 8011fe4:	0000042d 	.word	0x0000042d
 8011fe8:	00000484 	.word	0x00000484
 8011fec:	00000414 	.word	0x00000414
 8011ff0:	00000413 	.word	0x00000413

08011ff4 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8011ffa:	4b21      	ldr	r3, [pc, #132]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 8011ffc:	4a21      	ldr	r2, [pc, #132]	@ (8012084 <AckTimeoutRetriesProcess+0x90>)
 8011ffe:	5c9a      	ldrb	r2, [r3, r2]
 8012000:	4b1f      	ldr	r3, [pc, #124]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 8012002:	4921      	ldr	r1, [pc, #132]	@ (8012088 <AckTimeoutRetriesProcess+0x94>)
 8012004:	5c5b      	ldrb	r3, [r3, r1]
 8012006:	429a      	cmp	r2, r3
 8012008:	d236      	bcs.n	8012078 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801200a:	4b1d      	ldr	r3, [pc, #116]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 801200c:	4a1d      	ldr	r2, [pc, #116]	@ (8012084 <AckTimeoutRetriesProcess+0x90>)
 801200e:	5c9b      	ldrb	r3, [r3, r2]
 8012010:	3301      	adds	r3, #1
 8012012:	b2d9      	uxtb	r1, r3
 8012014:	4b1a      	ldr	r3, [pc, #104]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 8012016:	4a1b      	ldr	r2, [pc, #108]	@ (8012084 <AckTimeoutRetriesProcess+0x90>)
 8012018:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801201a:	4b19      	ldr	r3, [pc, #100]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 801201c:	4a19      	ldr	r2, [pc, #100]	@ (8012084 <AckTimeoutRetriesProcess+0x90>)
 801201e:	5c9b      	ldrb	r3, [r3, r2]
 8012020:	2201      	movs	r2, #1
 8012022:	4013      	ands	r3, r2
 8012024:	b2db      	uxtb	r3, r3
 8012026:	2b00      	cmp	r3, #0
 8012028:	d026      	beq.n	8012078 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801202a:	2108      	movs	r1, #8
 801202c:	187b      	adds	r3, r7, r1
 801202e:	2222      	movs	r2, #34	@ 0x22
 8012030:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012032:	4b13      	ldr	r3, [pc, #76]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 8012034:	4a15      	ldr	r2, [pc, #84]	@ (801208c <AckTimeoutRetriesProcess+0x98>)
 8012036:	589b      	ldr	r3, [r3, r2]
 8012038:	22b8      	movs	r2, #184	@ 0xb8
 801203a:	5c9a      	ldrb	r2, [r3, r2]
 801203c:	187b      	adds	r3, r7, r1
 801203e:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012040:	4b0f      	ldr	r3, [pc, #60]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 8012042:	4a12      	ldr	r2, [pc, #72]	@ (801208c <AckTimeoutRetriesProcess+0x98>)
 8012044:	589b      	ldr	r3, [r3, r2]
 8012046:	2285      	movs	r2, #133	@ 0x85
 8012048:	569a      	ldrsb	r2, [r3, r2]
 801204a:	187b      	adds	r3, r7, r1
 801204c:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801204e:	4b0c      	ldr	r3, [pc, #48]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 8012050:	4a0e      	ldr	r2, [pc, #56]	@ (801208c <AckTimeoutRetriesProcess+0x98>)
 8012052:	589b      	ldr	r3, [r3, r2]
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	187a      	adds	r2, r7, r1
 8012058:	0011      	movs	r1, r2
 801205a:	0018      	movs	r0, r3
 801205c:	f004 f801 	bl	8016062 <RegionGetPhyParam>
 8012060:	0003      	movs	r3, r0
 8012062:	001a      	movs	r2, r3
 8012064:	1d3b      	adds	r3, r7, #4
 8012066:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8012068:	1d3b      	adds	r3, r7, #4
 801206a:	6819      	ldr	r1, [r3, #0]
 801206c:	4b04      	ldr	r3, [pc, #16]	@ (8012080 <AckTimeoutRetriesProcess+0x8c>)
 801206e:	4a07      	ldr	r2, [pc, #28]	@ (801208c <AckTimeoutRetriesProcess+0x98>)
 8012070:	589b      	ldr	r3, [r3, r2]
 8012072:	b249      	sxtb	r1, r1
 8012074:	2285      	movs	r2, #133	@ 0x85
 8012076:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8012078:	46c0      	nop			@ (mov r8, r8)
 801207a:	46bd      	mov	sp, r7
 801207c:	b004      	add	sp, #16
 801207e:	bd80      	pop	{r7, pc}
 8012080:	20000b6c 	.word	0x20000b6c
 8012084:	00000412 	.word	0x00000412
 8012088:	00000411 	.word	0x00000411
 801208c:	00000484 	.word	0x00000484

08012090 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012096:	4a16      	ldr	r2, [pc, #88]	@ (80120f0 <AckTimeoutRetriesFinalize+0x60>)
 8012098:	2388      	movs	r3, #136	@ 0x88
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	5cd3      	ldrb	r3, [r2, r3]
 801209e:	2201      	movs	r2, #1
 80120a0:	4053      	eors	r3, r2
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d018      	beq.n	80120da <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80120a8:	003b      	movs	r3, r7
 80120aa:	2202      	movs	r2, #2
 80120ac:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 80120ae:	4b11      	ldr	r3, [pc, #68]	@ (80120f4 <AckTimeoutRetriesFinalize+0x64>)
 80120b0:	689a      	ldr	r2, [r3, #8]
 80120b2:	003b      	movs	r3, r7
 80120b4:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80120b6:	4b0e      	ldr	r3, [pc, #56]	@ (80120f0 <AckTimeoutRetriesFinalize+0x60>)
 80120b8:	4a0f      	ldr	r2, [pc, #60]	@ (80120f8 <AckTimeoutRetriesFinalize+0x68>)
 80120ba:	589b      	ldr	r3, [r3, r2]
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	003a      	movs	r2, r7
 80120c0:	0011      	movs	r1, r2
 80120c2:	0018      	movs	r0, r3
 80120c4:	f004 f808 	bl	80160d8 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80120c8:	4b09      	ldr	r3, [pc, #36]	@ (80120f0 <AckTimeoutRetriesFinalize+0x60>)
 80120ca:	4a0c      	ldr	r2, [pc, #48]	@ (80120fc <AckTimeoutRetriesFinalize+0x6c>)
 80120cc:	2100      	movs	r1, #0
 80120ce:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 80120d0:	4a07      	ldr	r2, [pc, #28]	@ (80120f0 <AckTimeoutRetriesFinalize+0x60>)
 80120d2:	2388      	movs	r3, #136	@ 0x88
 80120d4:	00db      	lsls	r3, r3, #3
 80120d6:	2100      	movs	r1, #0
 80120d8:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80120da:	4b05      	ldr	r3, [pc, #20]	@ (80120f0 <AckTimeoutRetriesFinalize+0x60>)
 80120dc:	4a08      	ldr	r2, [pc, #32]	@ (8012100 <AckTimeoutRetriesFinalize+0x70>)
 80120de:	5c99      	ldrb	r1, [r3, r2]
 80120e0:	4b03      	ldr	r3, [pc, #12]	@ (80120f0 <AckTimeoutRetriesFinalize+0x60>)
 80120e2:	4a08      	ldr	r2, [pc, #32]	@ (8012104 <AckTimeoutRetriesFinalize+0x74>)
 80120e4:	5499      	strb	r1, [r3, r2]
}
 80120e6:	46c0      	nop			@ (mov r8, r8)
 80120e8:	46bd      	mov	sp, r7
 80120ea:	b002      	add	sp, #8
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	46c0      	nop			@ (mov r8, r8)
 80120f0:	20000b6c 	.word	0x20000b6c
 80120f4:	20001164 	.word	0x20001164
 80120f8:	00000484 	.word	0x00000484
 80120fc:	00000414 	.word	0x00000414
 8012100:	00000412 	.word	0x00000412
 8012104:	00000441 	.word	0x00000441

08012108 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	0002      	movs	r2, r0
 8012110:	1dfb      	adds	r3, r7, #7
 8012112:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8012114:	4a0c      	ldr	r2, [pc, #48]	@ (8012148 <CallNvmCtxCallback+0x40>)
 8012116:	23d2      	movs	r3, #210	@ 0xd2
 8012118:	009b      	lsls	r3, r3, #2
 801211a:	58d3      	ldr	r3, [r2, r3]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d00f      	beq.n	8012140 <CallNvmCtxCallback+0x38>
 8012120:	4a09      	ldr	r2, [pc, #36]	@ (8012148 <CallNvmCtxCallback+0x40>)
 8012122:	23d2      	movs	r3, #210	@ 0xd2
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	58d3      	ldr	r3, [r2, r3]
 8012128:	689b      	ldr	r3, [r3, #8]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d008      	beq.n	8012140 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 801212e:	4a06      	ldr	r2, [pc, #24]	@ (8012148 <CallNvmCtxCallback+0x40>)
 8012130:	23d2      	movs	r3, #210	@ 0xd2
 8012132:	009b      	lsls	r3, r3, #2
 8012134:	58d3      	ldr	r3, [r2, r3]
 8012136:	689b      	ldr	r3, [r3, #8]
 8012138:	1dfa      	adds	r2, r7, #7
 801213a:	7812      	ldrb	r2, [r2, #0]
 801213c:	0010      	movs	r0, r2
 801213e:	4798      	blx	r3
    }
}
 8012140:	46c0      	nop			@ (mov r8, r8)
 8012142:	46bd      	mov	sp, r7
 8012144:	b002      	add	sp, #8
 8012146:	bd80      	pop	{r7, pc}
 8012148:	20000b6c 	.word	0x20000b6c

0801214c <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8012150:	2000      	movs	r0, #0
 8012152:	f7ff ffd9 	bl	8012108 <CallNvmCtxCallback>
}
 8012156:	46c0      	nop			@ (mov r8, r8)
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 801215c:	b580      	push	{r7, lr}
 801215e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8012160:	2001      	movs	r0, #1
 8012162:	f7ff ffd1 	bl	8012108 <CallNvmCtxCallback>
}
 8012166:	46c0      	nop			@ (mov r8, r8)
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 801216c:	b580      	push	{r7, lr}
 801216e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8012170:	2002      	movs	r0, #2
 8012172:	f7ff ffc9 	bl	8012108 <CallNvmCtxCallback>
}
 8012176:	46c0      	nop			@ (mov r8, r8)
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 801217c:	b580      	push	{r7, lr}
 801217e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8012180:	2003      	movs	r0, #3
 8012182:	f7ff ffc1 	bl	8012108 <CallNvmCtxCallback>
}
 8012186:	46c0      	nop			@ (mov r8, r8)
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 801218c:	b580      	push	{r7, lr}
 801218e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8012190:	2004      	movs	r0, #4
 8012192:	f7ff ffb9 	bl	8012108 <CallNvmCtxCallback>
}
 8012196:	46c0      	nop			@ (mov r8, r8)
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 801219c:	b580      	push	{r7, lr}
 801219e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 80121a0:	2005      	movs	r0, #5
 80121a2:	f7ff ffb1 	bl	8012108 <CallNvmCtxCallback>
}
 80121a6:	46c0      	nop			@ (mov r8, r8)
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 80121b0:	2006      	movs	r0, #6
 80121b2:	f7ff ffa9 	bl	8012108 <CallNvmCtxCallback>
}
 80121b6:	46c0      	nop			@ (mov r8, r8)
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80121c0:	4b0a      	ldr	r3, [pc, #40]	@ (80121ec <IsRequestPending+0x30>)
 80121c2:	4a0b      	ldr	r2, [pc, #44]	@ (80121f0 <IsRequestPending+0x34>)
 80121c4:	5c9b      	ldrb	r3, [r3, r2]
 80121c6:	2204      	movs	r2, #4
 80121c8:	4013      	ands	r3, r2
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d107      	bne.n	80121e0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80121d0:	4b06      	ldr	r3, [pc, #24]	@ (80121ec <IsRequestPending+0x30>)
 80121d2:	4a07      	ldr	r2, [pc, #28]	@ (80121f0 <IsRequestPending+0x34>)
 80121d4:	5c9b      	ldrb	r3, [r3, r2]
 80121d6:	2201      	movs	r2, #1
 80121d8:	4013      	ands	r3, r2
 80121da:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d001      	beq.n	80121e4 <IsRequestPending+0x28>
    {
        return 1;
 80121e0:	2301      	movs	r3, #1
 80121e2:	e000      	b.n	80121e6 <IsRequestPending+0x2a>
    }
    return 0;
 80121e4:	2300      	movs	r3, #0
}
 80121e6:	0018      	movs	r0, r3
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	20000b6c 	.word	0x20000b6c
 80121f0:	00000481 	.word	0x00000481

080121f4 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80121f8:	4a08      	ldr	r2, [pc, #32]	@ (801221c <LoRaMacIsBusy+0x28>)
 80121fa:	23d0      	movs	r3, #208	@ 0xd0
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	58d3      	ldr	r3, [r2, r3]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d106      	bne.n	8012212 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012204:	4b05      	ldr	r3, [pc, #20]	@ (801221c <LoRaMacIsBusy+0x28>)
 8012206:	4a06      	ldr	r2, [pc, #24]	@ (8012220 <LoRaMacIsBusy+0x2c>)
 8012208:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801220a:	2b01      	cmp	r3, #1
 801220c:	d101      	bne.n	8012212 <LoRaMacIsBusy+0x1e>
    {
        return false;
 801220e:	2300      	movs	r3, #0
 8012210:	e000      	b.n	8012214 <LoRaMacIsBusy+0x20>
    }
    return true;
 8012212:	2301      	movs	r3, #1
}
 8012214:	0018      	movs	r0, r3
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	46c0      	nop			@ (mov r8, r8)
 801221c:	20000b6c 	.word	0x20000b6c
 8012220:	00000482 	.word	0x00000482

08012224 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 801222a:	1dfb      	adds	r3, r7, #7
 801222c:	2200      	movs	r2, #0
 801222e:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8012230:	f7fd f96e 	bl	800f510 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012234:	f001 fe26 	bl	8013e84 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012238:	4b1b      	ldr	r3, [pc, #108]	@ (80122a8 <LoRaMacProcess+0x84>)
 801223a:	4a1c      	ldr	r2, [pc, #112]	@ (80122ac <LoRaMacProcess+0x88>)
 801223c:	5c9b      	ldrb	r3, [r3, r2]
 801223e:	2220      	movs	r2, #32
 8012240:	4013      	ands	r3, r2
 8012242:	b2db      	uxtb	r3, r3
 8012244:	2b00      	cmp	r3, #0
 8012246:	d020      	beq.n	801228a <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012248:	2000      	movs	r0, #0
 801224a:	f7fd f9ad 	bl	800f5a8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 801224e:	f7fd fb89 	bl	800f964 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012252:	f7ff ffb3 	bl	80121bc <IsRequestPending>
 8012256:	1e03      	subs	r3, r0, #0
 8012258:	d008      	beq.n	801226c <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801225a:	f7fd fb57 	bl	800f90c <LoRaMacCheckForBeaconAcquisition>
 801225e:	0003      	movs	r3, r0
 8012260:	0019      	movs	r1, r3
 8012262:	1dfb      	adds	r3, r7, #7
 8012264:	1dfa      	adds	r2, r7, #7
 8012266:	7812      	ldrb	r2, [r2, #0]
 8012268:	430a      	orrs	r2, r1
 801226a:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 801226c:	1dfb      	adds	r3, r7, #7
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d103      	bne.n	801227c <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012274:	f7fd fb08 	bl	800f888 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012278:	f7fd fa84 	bl	800f784 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801227c:	f7fd f9a8 	bl	800f5d0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012280:	f7fd fa0c 	bl	800f69c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012284:	2001      	movs	r0, #1
 8012286:	f7fd f98f 	bl	800f5a8 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 801228a:	f7fd fa23 	bl	800f6d4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801228e:	4a06      	ldr	r2, [pc, #24]	@ (80122a8 <LoRaMacProcess+0x84>)
 8012290:	2390      	movs	r3, #144	@ 0x90
 8012292:	00db      	lsls	r3, r3, #3
 8012294:	5cd3      	ldrb	r3, [r2, r3]
 8012296:	2b02      	cmp	r3, #2
 8012298:	d101      	bne.n	801229e <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 801229a:	f7ff f9d3 	bl	8011644 <OpenContinuousRxCWindow>
    }
}
 801229e:	46c0      	nop			@ (mov r8, r8)
 80122a0:	46bd      	mov	sp, r7
 80122a2:	b002      	add	sp, #8
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	46c0      	nop			@ (mov r8, r8)
 80122a8:	20000b6c 	.word	0x20000b6c
 80122ac:	00000481 	.word	0x00000481

080122b0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80122b0:	b5b0      	push	{r4, r5, r7, lr}
 80122b2:	b098      	sub	sp, #96	@ 0x60
 80122b4:	af02      	add	r7, sp, #8
 80122b6:	6178      	str	r0, [r7, #20]
 80122b8:	6139      	str	r1, [r7, #16]
 80122ba:	230f      	movs	r3, #15
 80122bc:	18fb      	adds	r3, r7, r3
 80122be:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d002      	beq.n	80122cc <LoRaMacInitialization+0x1c>
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d101      	bne.n	80122d0 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80122cc:	2303      	movs	r3, #3
 80122ce:	e35e      	b.n	801298e <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d00b      	beq.n	80122f0 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d007      	beq.n	80122f0 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d003      	beq.n	80122f0 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d101      	bne.n	80122f4 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80122f0:	2303      	movs	r3, #3
 80122f2:	e34c      	b.n	801298e <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80122f4:	230f      	movs	r3, #15
 80122f6:	18fb      	adds	r3, r7, r3
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	0018      	movs	r0, r3
 80122fc:	f003 fea0 	bl	8016040 <RegionIsActive>
 8012300:	0003      	movs	r3, r0
 8012302:	001a      	movs	r2, r3
 8012304:	2301      	movs	r3, #1
 8012306:	4053      	eors	r3, r2
 8012308:	b2db      	uxtb	r3, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801230e:	2309      	movs	r3, #9
 8012310:	e33d      	b.n	801298e <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8012312:	4afd      	ldr	r2, [pc, #1012]	@ (8012708 <LoRaMacInitialization+0x458>)
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	0011      	movs	r1, r2
 8012318:	0018      	movs	r0, r3
 801231a:	f002 f967 	bl	80145ec <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 801231e:	23b6      	movs	r3, #182	@ 0xb6
 8012320:	005a      	lsls	r2, r3, #1
 8012322:	4bfa      	ldr	r3, [pc, #1000]	@ (801270c <LoRaMacInitialization+0x45c>)
 8012324:	2100      	movs	r1, #0
 8012326:	0018      	movs	r0, r3
 8012328:	f006 fb5c 	bl	80189e4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801232c:	4af8      	ldr	r2, [pc, #992]	@ (8012710 <LoRaMacInitialization+0x460>)
 801232e:	4bf9      	ldr	r3, [pc, #996]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012330:	2100      	movs	r1, #0
 8012332:	0018      	movs	r0, r3
 8012334:	f006 fb56 	bl	80189e4 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 8012338:	4bf6      	ldr	r3, [pc, #984]	@ (8012714 <LoRaMacInitialization+0x464>)
 801233a:	49f7      	ldr	r1, [pc, #988]	@ (8012718 <LoRaMacInitialization+0x468>)
 801233c:	4af3      	ldr	r2, [pc, #972]	@ (801270c <LoRaMacInitialization+0x45c>)
 801233e:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012340:	4bf4      	ldr	r3, [pc, #976]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012342:	4af6      	ldr	r2, [pc, #984]	@ (801271c <LoRaMacInitialization+0x46c>)
 8012344:	2101      	movs	r1, #1
 8012346:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8012348:	4bf2      	ldr	r3, [pc, #968]	@ (8012714 <LoRaMacInitialization+0x464>)
 801234a:	4af5      	ldr	r2, [pc, #980]	@ (8012720 <LoRaMacInitialization+0x470>)
 801234c:	2101      	movs	r1, #1
 801234e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8012350:	4bf0      	ldr	r3, [pc, #960]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012352:	4af1      	ldr	r2, [pc, #964]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012354:	589b      	ldr	r3, [r3, r2]
 8012356:	220f      	movs	r2, #15
 8012358:	18ba      	adds	r2, r7, r2
 801235a:	7812      	ldrb	r2, [r2, #0]
 801235c:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 801235e:	4bed      	ldr	r3, [pc, #948]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012360:	4aed      	ldr	r2, [pc, #948]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012362:	589b      	ldr	r3, [r3, r2]
 8012364:	227c      	movs	r2, #124	@ 0x7c
 8012366:	2100      	movs	r1, #0
 8012368:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 801236a:	4bea      	ldr	r3, [pc, #936]	@ (8012714 <LoRaMacInitialization+0x464>)
 801236c:	4aea      	ldr	r2, [pc, #936]	@ (8012718 <LoRaMacInitialization+0x468>)
 801236e:	589b      	ldr	r3, [r3, r2]
 8012370:	22ca      	movs	r2, #202	@ 0xca
 8012372:	2100      	movs	r1, #0
 8012374:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012376:	4be7      	ldr	r3, [pc, #924]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012378:	4ae7      	ldr	r2, [pc, #924]	@ (8012718 <LoRaMacInitialization+0x468>)
 801237a:	589a      	ldr	r2, [r3, r2]
 801237c:	23b0      	movs	r3, #176	@ 0xb0
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	49e8      	ldr	r1, [pc, #928]	@ (8012724 <LoRaMacInitialization+0x474>)
 8012382:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012384:	2550      	movs	r5, #80	@ 0x50
 8012386:	197b      	adds	r3, r7, r5
 8012388:	220f      	movs	r2, #15
 801238a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801238c:	4be1      	ldr	r3, [pc, #900]	@ (8012714 <LoRaMacInitialization+0x464>)
 801238e:	4ae2      	ldr	r2, [pc, #904]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012390:	589b      	ldr	r3, [r3, r2]
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	197a      	adds	r2, r7, r5
 8012396:	0011      	movs	r1, r2
 8012398:	0018      	movs	r0, r3
 801239a:	f003 fe62 	bl	8016062 <RegionGetPhyParam>
 801239e:	0003      	movs	r3, r0
 80123a0:	001a      	movs	r2, r3
 80123a2:	244c      	movs	r4, #76	@ 0x4c
 80123a4:	193b      	adds	r3, r7, r4
 80123a6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 80123a8:	193b      	adds	r3, r7, r4
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	4bd9      	ldr	r3, [pc, #868]	@ (8012714 <LoRaMacInitialization+0x464>)
 80123ae:	49da      	ldr	r1, [pc, #872]	@ (8012718 <LoRaMacInitialization+0x468>)
 80123b0:	585b      	ldr	r3, [r3, r1]
 80123b2:	1e51      	subs	r1, r2, #1
 80123b4:	418a      	sbcs	r2, r1
 80123b6:	b2d1      	uxtb	r1, r2
 80123b8:	22c9      	movs	r2, #201	@ 0xc9
 80123ba:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80123bc:	197b      	adds	r3, r7, r5
 80123be:	220a      	movs	r2, #10
 80123c0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80123c2:	4bd4      	ldr	r3, [pc, #848]	@ (8012714 <LoRaMacInitialization+0x464>)
 80123c4:	4ad4      	ldr	r2, [pc, #848]	@ (8012718 <LoRaMacInitialization+0x468>)
 80123c6:	589b      	ldr	r3, [r3, r2]
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	197a      	adds	r2, r7, r5
 80123cc:	0011      	movs	r1, r2
 80123ce:	0018      	movs	r0, r3
 80123d0:	f003 fe47 	bl	8016062 <RegionGetPhyParam>
 80123d4:	0003      	movs	r3, r0
 80123d6:	001a      	movs	r2, r3
 80123d8:	193b      	adds	r3, r7, r4
 80123da:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 80123dc:	193b      	adds	r3, r7, r4
 80123de:	6819      	ldr	r1, [r3, #0]
 80123e0:	4bcc      	ldr	r3, [pc, #816]	@ (8012714 <LoRaMacInitialization+0x464>)
 80123e2:	4acd      	ldr	r2, [pc, #820]	@ (8012718 <LoRaMacInitialization+0x468>)
 80123e4:	589b      	ldr	r3, [r3, r2]
 80123e6:	b24a      	sxtb	r2, r1
 80123e8:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 80123ea:	197b      	adds	r3, r7, r5
 80123ec:	2206      	movs	r2, #6
 80123ee:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80123f0:	4bc8      	ldr	r3, [pc, #800]	@ (8012714 <LoRaMacInitialization+0x464>)
 80123f2:	4ac9      	ldr	r2, [pc, #804]	@ (8012718 <LoRaMacInitialization+0x468>)
 80123f4:	589b      	ldr	r3, [r3, r2]
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	197a      	adds	r2, r7, r5
 80123fa:	0011      	movs	r1, r2
 80123fc:	0018      	movs	r0, r3
 80123fe:	f003 fe30 	bl	8016062 <RegionGetPhyParam>
 8012402:	0003      	movs	r3, r0
 8012404:	001a      	movs	r2, r3
 8012406:	193b      	adds	r3, r7, r4
 8012408:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 801240a:	193b      	adds	r3, r7, r4
 801240c:	6819      	ldr	r1, [r3, #0]
 801240e:	4bc1      	ldr	r3, [pc, #772]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012410:	4ac1      	ldr	r2, [pc, #772]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012412:	589b      	ldr	r3, [r3, r2]
 8012414:	b24a      	sxtb	r2, r1
 8012416:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012418:	197b      	adds	r3, r7, r5
 801241a:	2210      	movs	r2, #16
 801241c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801241e:	4bbd      	ldr	r3, [pc, #756]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012420:	4abd      	ldr	r2, [pc, #756]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012422:	589b      	ldr	r3, [r3, r2]
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	197a      	adds	r2, r7, r5
 8012428:	0011      	movs	r1, r2
 801242a:	0018      	movs	r0, r3
 801242c:	f003 fe19 	bl	8016062 <RegionGetPhyParam>
 8012430:	0003      	movs	r3, r0
 8012432:	001a      	movs	r2, r3
 8012434:	193b      	adds	r3, r7, r4
 8012436:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012438:	4bb6      	ldr	r3, [pc, #728]	@ (8012714 <LoRaMacInitialization+0x464>)
 801243a:	4ab7      	ldr	r2, [pc, #732]	@ (8012718 <LoRaMacInitialization+0x468>)
 801243c:	589b      	ldr	r3, [r3, r2]
 801243e:	193a      	adds	r2, r7, r4
 8012440:	6812      	ldr	r2, [r2, #0]
 8012442:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012444:	197b      	adds	r3, r7, r5
 8012446:	2211      	movs	r2, #17
 8012448:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801244a:	4bb2      	ldr	r3, [pc, #712]	@ (8012714 <LoRaMacInitialization+0x464>)
 801244c:	4ab2      	ldr	r2, [pc, #712]	@ (8012718 <LoRaMacInitialization+0x468>)
 801244e:	589b      	ldr	r3, [r3, r2]
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	197a      	adds	r2, r7, r5
 8012454:	0011      	movs	r1, r2
 8012456:	0018      	movs	r0, r3
 8012458:	f003 fe03 	bl	8016062 <RegionGetPhyParam>
 801245c:	0003      	movs	r3, r0
 801245e:	001a      	movs	r2, r3
 8012460:	193b      	adds	r3, r7, r4
 8012462:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012464:	4bab      	ldr	r3, [pc, #684]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012466:	4aac      	ldr	r2, [pc, #688]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012468:	589b      	ldr	r3, [r3, r2]
 801246a:	193a      	adds	r2, r7, r4
 801246c:	6812      	ldr	r2, [r2, #0]
 801246e:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012470:	197b      	adds	r3, r7, r5
 8012472:	2212      	movs	r2, #18
 8012474:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012476:	4ba7      	ldr	r3, [pc, #668]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012478:	4aa7      	ldr	r2, [pc, #668]	@ (8012718 <LoRaMacInitialization+0x468>)
 801247a:	589b      	ldr	r3, [r3, r2]
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	197a      	adds	r2, r7, r5
 8012480:	0011      	movs	r1, r2
 8012482:	0018      	movs	r0, r3
 8012484:	f003 fded 	bl	8016062 <RegionGetPhyParam>
 8012488:	0003      	movs	r3, r0
 801248a:	001a      	movs	r2, r3
 801248c:	193b      	adds	r3, r7, r4
 801248e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012490:	4ba0      	ldr	r3, [pc, #640]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012492:	4aa1      	ldr	r2, [pc, #644]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012494:	589b      	ldr	r3, [r3, r2]
 8012496:	193a      	adds	r2, r7, r4
 8012498:	6812      	ldr	r2, [r2, #0]
 801249a:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801249c:	197b      	adds	r3, r7, r5
 801249e:	2213      	movs	r2, #19
 80124a0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80124a2:	4b9c      	ldr	r3, [pc, #624]	@ (8012714 <LoRaMacInitialization+0x464>)
 80124a4:	4a9c      	ldr	r2, [pc, #624]	@ (8012718 <LoRaMacInitialization+0x468>)
 80124a6:	589b      	ldr	r3, [r3, r2]
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	197a      	adds	r2, r7, r5
 80124ac:	0011      	movs	r1, r2
 80124ae:	0018      	movs	r0, r3
 80124b0:	f003 fdd7 	bl	8016062 <RegionGetPhyParam>
 80124b4:	0003      	movs	r3, r0
 80124b6:	001a      	movs	r2, r3
 80124b8:	193b      	adds	r3, r7, r4
 80124ba:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80124bc:	4b95      	ldr	r3, [pc, #596]	@ (8012714 <LoRaMacInitialization+0x464>)
 80124be:	4a96      	ldr	r2, [pc, #600]	@ (8012718 <LoRaMacInitialization+0x468>)
 80124c0:	589b      	ldr	r3, [r3, r2]
 80124c2:	193a      	adds	r2, r7, r4
 80124c4:	6812      	ldr	r2, [r2, #0]
 80124c6:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80124c8:	197b      	adds	r3, r7, r5
 80124ca:	2214      	movs	r2, #20
 80124cc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80124ce:	4b91      	ldr	r3, [pc, #580]	@ (8012714 <LoRaMacInitialization+0x464>)
 80124d0:	4a91      	ldr	r2, [pc, #580]	@ (8012718 <LoRaMacInitialization+0x468>)
 80124d2:	589b      	ldr	r3, [r3, r2]
 80124d4:	781b      	ldrb	r3, [r3, #0]
 80124d6:	197a      	adds	r2, r7, r5
 80124d8:	0011      	movs	r1, r2
 80124da:	0018      	movs	r0, r3
 80124dc:	f003 fdc1 	bl	8016062 <RegionGetPhyParam>
 80124e0:	0003      	movs	r3, r0
 80124e2:	001a      	movs	r2, r3
 80124e4:	193b      	adds	r3, r7, r4
 80124e6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80124e8:	4b8a      	ldr	r3, [pc, #552]	@ (8012714 <LoRaMacInitialization+0x464>)
 80124ea:	4a8b      	ldr	r2, [pc, #556]	@ (8012718 <LoRaMacInitialization+0x468>)
 80124ec:	589b      	ldr	r3, [r3, r2]
 80124ee:	193a      	adds	r2, r7, r4
 80124f0:	6812      	ldr	r2, [r2, #0]
 80124f2:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80124f4:	197b      	adds	r3, r7, r5
 80124f6:	2217      	movs	r2, #23
 80124f8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80124fa:	4b86      	ldr	r3, [pc, #536]	@ (8012714 <LoRaMacInitialization+0x464>)
 80124fc:	4a86      	ldr	r2, [pc, #536]	@ (8012718 <LoRaMacInitialization+0x468>)
 80124fe:	589b      	ldr	r3, [r3, r2]
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	197a      	adds	r2, r7, r5
 8012504:	0011      	movs	r1, r2
 8012506:	0018      	movs	r0, r3
 8012508:	f003 fdab 	bl	8016062 <RegionGetPhyParam>
 801250c:	0003      	movs	r3, r0
 801250e:	001a      	movs	r2, r3
 8012510:	193b      	adds	r3, r7, r4
 8012512:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012514:	193b      	adds	r3, r7, r4
 8012516:	6819      	ldr	r1, [r3, #0]
 8012518:	4b7e      	ldr	r3, [pc, #504]	@ (8012714 <LoRaMacInitialization+0x464>)
 801251a:	4a7f      	ldr	r2, [pc, #508]	@ (8012718 <LoRaMacInitialization+0x468>)
 801251c:	589b      	ldr	r3, [r3, r2]
 801251e:	b2c9      	uxtb	r1, r1
 8012520:	2225      	movs	r2, #37	@ 0x25
 8012522:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012524:	197b      	adds	r3, r7, r5
 8012526:	2218      	movs	r2, #24
 8012528:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801252a:	4b7a      	ldr	r3, [pc, #488]	@ (8012714 <LoRaMacInitialization+0x464>)
 801252c:	4a7a      	ldr	r2, [pc, #488]	@ (8012718 <LoRaMacInitialization+0x468>)
 801252e:	589b      	ldr	r3, [r3, r2]
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	197a      	adds	r2, r7, r5
 8012534:	0011      	movs	r1, r2
 8012536:	0018      	movs	r0, r3
 8012538:	f003 fd93 	bl	8016062 <RegionGetPhyParam>
 801253c:	0003      	movs	r3, r0
 801253e:	001a      	movs	r2, r3
 8012540:	193b      	adds	r3, r7, r4
 8012542:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012544:	4b73      	ldr	r3, [pc, #460]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012546:	4a74      	ldr	r2, [pc, #464]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012548:	589b      	ldr	r3, [r3, r2]
 801254a:	193a      	adds	r2, r7, r4
 801254c:	6812      	ldr	r2, [r2, #0]
 801254e:	629a      	str	r2, [r3, #40]	@ 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012550:	4b70      	ldr	r3, [pc, #448]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012552:	4a71      	ldr	r2, [pc, #452]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012554:	589b      	ldr	r3, [r3, r2]
 8012556:	193a      	adds	r2, r7, r4
 8012558:	6812      	ldr	r2, [r2, #0]
 801255a:	631a      	str	r2, [r3, #48]	@ 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801255c:	197b      	adds	r3, r7, r5
 801255e:	2219      	movs	r2, #25
 8012560:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012562:	4b6c      	ldr	r3, [pc, #432]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012564:	4a6c      	ldr	r2, [pc, #432]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012566:	589b      	ldr	r3, [r3, r2]
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	197a      	adds	r2, r7, r5
 801256c:	0011      	movs	r1, r2
 801256e:	0018      	movs	r0, r3
 8012570:	f003 fd77 	bl	8016062 <RegionGetPhyParam>
 8012574:	0003      	movs	r3, r0
 8012576:	001a      	movs	r2, r3
 8012578:	193b      	adds	r3, r7, r4
 801257a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801257c:	193b      	adds	r3, r7, r4
 801257e:	6819      	ldr	r1, [r3, #0]
 8012580:	4b64      	ldr	r3, [pc, #400]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012582:	4a65      	ldr	r2, [pc, #404]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012584:	589b      	ldr	r3, [r3, r2]
 8012586:	b2c9      	uxtb	r1, r1
 8012588:	222c      	movs	r2, #44	@ 0x2c
 801258a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801258c:	193b      	adds	r3, r7, r4
 801258e:	6819      	ldr	r1, [r3, #0]
 8012590:	4b60      	ldr	r3, [pc, #384]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012592:	4a61      	ldr	r2, [pc, #388]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012594:	589b      	ldr	r3, [r3, r2]
 8012596:	b2c9      	uxtb	r1, r1
 8012598:	2234      	movs	r2, #52	@ 0x34
 801259a:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801259c:	197b      	adds	r3, r7, r5
 801259e:	221e      	movs	r2, #30
 80125a0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80125a2:	4b5c      	ldr	r3, [pc, #368]	@ (8012714 <LoRaMacInitialization+0x464>)
 80125a4:	4a5c      	ldr	r2, [pc, #368]	@ (8012718 <LoRaMacInitialization+0x468>)
 80125a6:	589b      	ldr	r3, [r3, r2]
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	197a      	adds	r2, r7, r5
 80125ac:	0011      	movs	r1, r2
 80125ae:	0018      	movs	r0, r3
 80125b0:	f003 fd57 	bl	8016062 <RegionGetPhyParam>
 80125b4:	0003      	movs	r3, r0
 80125b6:	001a      	movs	r2, r3
 80125b8:	193b      	adds	r3, r7, r4
 80125ba:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80125bc:	193b      	adds	r3, r7, r4
 80125be:	6819      	ldr	r1, [r3, #0]
 80125c0:	4b54      	ldr	r3, [pc, #336]	@ (8012714 <LoRaMacInitialization+0x464>)
 80125c2:	4a55      	ldr	r2, [pc, #340]	@ (8012718 <LoRaMacInitialization+0x468>)
 80125c4:	589b      	ldr	r3, [r3, r2]
 80125c6:	b2c9      	uxtb	r1, r1
 80125c8:	2238      	movs	r2, #56	@ 0x38
 80125ca:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80125cc:	197b      	adds	r3, r7, r5
 80125ce:	221f      	movs	r2, #31
 80125d0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80125d2:	4b50      	ldr	r3, [pc, #320]	@ (8012714 <LoRaMacInitialization+0x464>)
 80125d4:	4a50      	ldr	r2, [pc, #320]	@ (8012718 <LoRaMacInitialization+0x468>)
 80125d6:	589b      	ldr	r3, [r3, r2]
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	197a      	adds	r2, r7, r5
 80125dc:	0011      	movs	r1, r2
 80125de:	0018      	movs	r0, r3
 80125e0:	f003 fd3f 	bl	8016062 <RegionGetPhyParam>
 80125e4:	0003      	movs	r3, r0
 80125e6:	001a      	movs	r2, r3
 80125e8:	193b      	adds	r3, r7, r4
 80125ea:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80125ec:	193b      	adds	r3, r7, r4
 80125ee:	6819      	ldr	r1, [r3, #0]
 80125f0:	4b48      	ldr	r3, [pc, #288]	@ (8012714 <LoRaMacInitialization+0x464>)
 80125f2:	4a49      	ldr	r2, [pc, #292]	@ (8012718 <LoRaMacInitialization+0x468>)
 80125f4:	589b      	ldr	r3, [r3, r2]
 80125f6:	b2c9      	uxtb	r1, r1
 80125f8:	2239      	movs	r2, #57	@ 0x39
 80125fa:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80125fc:	197b      	adds	r3, r7, r5
 80125fe:	2220      	movs	r2, #32
 8012600:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012602:	4b44      	ldr	r3, [pc, #272]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012604:	4a44      	ldr	r2, [pc, #272]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012606:	589b      	ldr	r3, [r3, r2]
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	197a      	adds	r2, r7, r5
 801260c:	0011      	movs	r1, r2
 801260e:	0018      	movs	r0, r3
 8012610:	f003 fd27 	bl	8016062 <RegionGetPhyParam>
 8012614:	0003      	movs	r3, r0
 8012616:	001a      	movs	r2, r3
 8012618:	193b      	adds	r3, r7, r4
 801261a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 801261c:	4b3d      	ldr	r3, [pc, #244]	@ (8012714 <LoRaMacInitialization+0x464>)
 801261e:	4a3e      	ldr	r2, [pc, #248]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012620:	589b      	ldr	r3, [r3, r2]
 8012622:	193a      	adds	r2, r7, r4
 8012624:	6812      	ldr	r2, [r2, #0]
 8012626:	63da      	str	r2, [r3, #60]	@ 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012628:	197b      	adds	r3, r7, r5
 801262a:	2221      	movs	r2, #33	@ 0x21
 801262c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801262e:	4b39      	ldr	r3, [pc, #228]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012630:	4a39      	ldr	r2, [pc, #228]	@ (8012718 <LoRaMacInitialization+0x468>)
 8012632:	589b      	ldr	r3, [r3, r2]
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	197a      	adds	r2, r7, r5
 8012638:	0011      	movs	r1, r2
 801263a:	0018      	movs	r0, r3
 801263c:	f003 fd11 	bl	8016062 <RegionGetPhyParam>
 8012640:	0003      	movs	r3, r0
 8012642:	001a      	movs	r2, r3
 8012644:	193b      	adds	r3, r7, r4
 8012646:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012648:	4b32      	ldr	r3, [pc, #200]	@ (8012714 <LoRaMacInitialization+0x464>)
 801264a:	4a33      	ldr	r2, [pc, #204]	@ (8012718 <LoRaMacInitialization+0x468>)
 801264c:	589b      	ldr	r3, [r3, r2]
 801264e:	193a      	adds	r2, r7, r4
 8012650:	6812      	ldr	r2, [r2, #0]
 8012652:	641a      	str	r2, [r3, #64]	@ 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012654:	197b      	adds	r3, r7, r5
 8012656:	220b      	movs	r2, #11
 8012658:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801265a:	4b2e      	ldr	r3, [pc, #184]	@ (8012714 <LoRaMacInitialization+0x464>)
 801265c:	4a2e      	ldr	r2, [pc, #184]	@ (8012718 <LoRaMacInitialization+0x468>)
 801265e:	589b      	ldr	r3, [r3, r2]
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	197a      	adds	r2, r7, r5
 8012664:	0011      	movs	r1, r2
 8012666:	0018      	movs	r0, r3
 8012668:	f003 fcfb 	bl	8016062 <RegionGetPhyParam>
 801266c:	0003      	movs	r3, r0
 801266e:	001a      	movs	r2, r3
 8012670:	193b      	adds	r3, r7, r4
 8012672:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8012674:	193b      	adds	r3, r7, r4
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	b299      	uxth	r1, r3
 801267a:	4a26      	ldr	r2, [pc, #152]	@ (8012714 <LoRaMacInitialization+0x464>)
 801267c:	23fd      	movs	r3, #253	@ 0xfd
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012682:	197b      	adds	r3, r7, r5
 8012684:	220c      	movs	r2, #12
 8012686:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012688:	4b22      	ldr	r3, [pc, #136]	@ (8012714 <LoRaMacInitialization+0x464>)
 801268a:	4a23      	ldr	r2, [pc, #140]	@ (8012718 <LoRaMacInitialization+0x468>)
 801268c:	589b      	ldr	r3, [r3, r2]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	197a      	adds	r2, r7, r5
 8012692:	0011      	movs	r1, r2
 8012694:	0018      	movs	r0, r3
 8012696:	f003 fce4 	bl	8016062 <RegionGetPhyParam>
 801269a:	0003      	movs	r3, r0
 801269c:	001a      	movs	r2, r3
 801269e:	193b      	adds	r3, r7, r4
 80126a0:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 80126a2:	193b      	adds	r3, r7, r4
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	b299      	uxth	r1, r3
 80126a8:	4b1a      	ldr	r3, [pc, #104]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126aa:	4a1f      	ldr	r2, [pc, #124]	@ (8012728 <LoRaMacInitialization+0x478>)
 80126ac:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 80126ae:	4b19      	ldr	r3, [pc, #100]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126b0:	4a19      	ldr	r2, [pc, #100]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126b2:	589b      	ldr	r3, [r3, r2]
 80126b4:	2224      	movs	r2, #36	@ 0x24
 80126b6:	2101      	movs	r1, #1
 80126b8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 80126ba:	4b16      	ldr	r3, [pc, #88]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126bc:	4a16      	ldr	r2, [pc, #88]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126be:	589b      	ldr	r3, [r3, r2]
 80126c0:	220a      	movs	r2, #10
 80126c2:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 80126c4:	4b13      	ldr	r3, [pc, #76]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126c6:	4a14      	ldr	r2, [pc, #80]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126c8:	589b      	ldr	r3, [r3, r2]
 80126ca:	2206      	movs	r2, #6
 80126cc:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 80126ce:	4b11      	ldr	r3, [pc, #68]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126d0:	4a11      	ldr	r2, [pc, #68]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126d2:	589b      	ldr	r3, [r3, r2]
 80126d4:	4a0f      	ldr	r2, [pc, #60]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126d6:	4910      	ldr	r1, [pc, #64]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126d8:	5852      	ldr	r2, [r2, r1]
 80126da:	689b      	ldr	r3, [r3, #8]
 80126dc:	2188      	movs	r1, #136	@ 0x88
 80126de:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 80126e0:	4b0c      	ldr	r3, [pc, #48]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126e2:	4a0d      	ldr	r2, [pc, #52]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126e4:	589a      	ldr	r2, [r3, r2]
 80126e6:	4b0b      	ldr	r3, [pc, #44]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126e8:	490b      	ldr	r1, [pc, #44]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126ea:	585b      	ldr	r3, [r3, r1]
 80126ec:	7b11      	ldrb	r1, [r2, #12]
 80126ee:	228c      	movs	r2, #140	@ 0x8c
 80126f0:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 80126f2:	4b08      	ldr	r3, [pc, #32]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126f4:	4a08      	ldr	r2, [pc, #32]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126f6:	589b      	ldr	r3, [r3, r2]
 80126f8:	4a06      	ldr	r2, [pc, #24]	@ (8012714 <LoRaMacInitialization+0x464>)
 80126fa:	4907      	ldr	r1, [pc, #28]	@ (8012718 <LoRaMacInitialization+0x468>)
 80126fc:	5852      	ldr	r2, [r2, r1]
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	2190      	movs	r1, #144	@ 0x90
 8012702:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8012704:	4b03      	ldr	r3, [pc, #12]	@ (8012714 <LoRaMacInitialization+0x464>)
 8012706:	e011      	b.n	801272c <LoRaMacInitialization+0x47c>
 8012708:	080121ad 	.word	0x080121ad
 801270c:	20000ff8 	.word	0x20000ff8
 8012710:	0000048c 	.word	0x0000048c
 8012714:	20000b6c 	.word	0x20000b6c
 8012718:	00000484 	.word	0x00000484
 801271c:	00000412 	.word	0x00000412
 8012720:	00000411 	.word	0x00000411
 8012724:	01000300 	.word	0x01000300
 8012728:	000003f6 	.word	0x000003f6
 801272c:	4a9a      	ldr	r2, [pc, #616]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 801272e:	589b      	ldr	r3, [r3, r2]
 8012730:	4a9a      	ldr	r2, [pc, #616]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012732:	4999      	ldr	r1, [pc, #612]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012734:	5852      	ldr	r2, [r2, r1]
 8012736:	695b      	ldr	r3, [r3, #20]
 8012738:	2194      	movs	r1, #148	@ 0x94
 801273a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 801273c:	4b97      	ldr	r3, [pc, #604]	@ (801299c <LoRaMacInitialization+0x6ec>)
 801273e:	4a96      	ldr	r2, [pc, #600]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012740:	589b      	ldr	r3, [r3, r2]
 8012742:	4a96      	ldr	r2, [pc, #600]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012744:	4994      	ldr	r1, [pc, #592]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012746:	5852      	ldr	r2, [r2, r1]
 8012748:	699b      	ldr	r3, [r3, #24]
 801274a:	2198      	movs	r1, #152	@ 0x98
 801274c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 801274e:	4b93      	ldr	r3, [pc, #588]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012750:	4a91      	ldr	r2, [pc, #580]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012752:	589b      	ldr	r3, [r3, r2]
 8012754:	4a91      	ldr	r2, [pc, #580]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012756:	4990      	ldr	r1, [pc, #576]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012758:	5852      	ldr	r2, [r2, r1]
 801275a:	69db      	ldr	r3, [r3, #28]
 801275c:	219c      	movs	r1, #156	@ 0x9c
 801275e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8012760:	4b8e      	ldr	r3, [pc, #568]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012762:	4a8d      	ldr	r2, [pc, #564]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012764:	589b      	ldr	r3, [r3, r2]
 8012766:	4a8d      	ldr	r2, [pc, #564]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012768:	498b      	ldr	r1, [pc, #556]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 801276a:	5852      	ldr	r2, [r2, r1]
 801276c:	6a1b      	ldr	r3, [r3, #32]
 801276e:	21a0      	movs	r1, #160	@ 0xa0
 8012770:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8012772:	4b8a      	ldr	r3, [pc, #552]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012774:	4a88      	ldr	r2, [pc, #544]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012776:	589a      	ldr	r2, [r3, r2]
 8012778:	4b88      	ldr	r3, [pc, #544]	@ (801299c <LoRaMacInitialization+0x6ec>)
 801277a:	4987      	ldr	r1, [pc, #540]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 801277c:	585b      	ldr	r3, [r3, r1]
 801277e:	2124      	movs	r1, #36	@ 0x24
 8012780:	5c51      	ldrb	r1, [r2, r1]
 8012782:	22a4      	movs	r2, #164	@ 0xa4
 8012784:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012786:	211c      	movs	r1, #28
 8012788:	187b      	adds	r3, r7, r1
 801278a:	2200      	movs	r2, #0
 801278c:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 801278e:	187b      	adds	r3, r7, r1
 8012790:	2200      	movs	r2, #0
 8012792:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012794:	4b81      	ldr	r3, [pc, #516]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012796:	4a80      	ldr	r2, [pc, #512]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012798:	589b      	ldr	r3, [r3, r2]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	187a      	adds	r2, r7, r1
 801279e:	0011      	movs	r1, r2
 80127a0:	0018      	movs	r0, r3
 80127a2:	f003 fc99 	bl	80160d8 <RegionInitDefaults>

    ResetMacParameters( );
 80127a6:	f7fe fe1b 	bl	80113e0 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 80127aa:	4b7c      	ldr	r3, [pc, #496]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80127ac:	4a7a      	ldr	r2, [pc, #488]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 80127ae:	589b      	ldr	r3, [r3, r2]
 80127b0:	227d      	movs	r2, #125	@ 0x7d
 80127b2:	2101      	movs	r1, #1
 80127b4:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 80127b6:	4a79      	ldr	r2, [pc, #484]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80127b8:	23d1      	movs	r3, #209	@ 0xd1
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	6979      	ldr	r1, [r7, #20]
 80127be:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 80127c0:	4a76      	ldr	r2, [pc, #472]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80127c2:	23d2      	movs	r3, #210	@ 0xd2
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	6939      	ldr	r1, [r7, #16]
 80127c8:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 80127ca:	4b74      	ldr	r3, [pc, #464]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80127cc:	4a74      	ldr	r2, [pc, #464]	@ (80129a0 <LoRaMacInitialization+0x6f0>)
 80127ce:	2100      	movs	r1, #0
 80127d0:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 80127d2:	4a72      	ldr	r2, [pc, #456]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80127d4:	23d0      	movs	r3, #208	@ 0xd0
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	2101      	movs	r1, #1
 80127da:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 80127dc:	4b6f      	ldr	r3, [pc, #444]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80127de:	4a6e      	ldr	r2, [pc, #440]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 80127e0:	589a      	ldr	r2, [r3, r2]
 80127e2:	23a8      	movs	r3, #168	@ 0xa8
 80127e4:	005b      	lsls	r3, r3, #1
 80127e6:	2100      	movs	r1, #0
 80127e8:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80127ea:	4b6c      	ldr	r3, [pc, #432]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80127ec:	4a6a      	ldr	r2, [pc, #424]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 80127ee:	589a      	ldr	r2, [r3, r2]
 80127f0:	23aa      	movs	r3, #170	@ 0xaa
 80127f2:	005b      	lsls	r3, r3, #1
 80127f4:	2100      	movs	r1, #0
 80127f6:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80127f8:	4b6a      	ldr	r3, [pc, #424]	@ (80129a4 <LoRaMacInitialization+0x6f4>)
 80127fa:	2201      	movs	r2, #1
 80127fc:	4251      	negs	r1, r2
 80127fe:	486a      	ldr	r0, [pc, #424]	@ (80129a8 <LoRaMacInitialization+0x6f8>)
 8012800:	2200      	movs	r2, #0
 8012802:	9200      	str	r2, [sp, #0]
 8012804:	2200      	movs	r2, #0
 8012806:	f009 fb75 	bl	801bef4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801280a:	4b68      	ldr	r3, [pc, #416]	@ (80129ac <LoRaMacInitialization+0x6fc>)
 801280c:	2201      	movs	r2, #1
 801280e:	4251      	negs	r1, r2
 8012810:	4867      	ldr	r0, [pc, #412]	@ (80129b0 <LoRaMacInitialization+0x700>)
 8012812:	2200      	movs	r2, #0
 8012814:	9200      	str	r2, [sp, #0]
 8012816:	2200      	movs	r2, #0
 8012818:	f009 fb6c 	bl	801bef4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801281c:	4b65      	ldr	r3, [pc, #404]	@ (80129b4 <LoRaMacInitialization+0x704>)
 801281e:	2201      	movs	r2, #1
 8012820:	4251      	negs	r1, r2
 8012822:	4865      	ldr	r0, [pc, #404]	@ (80129b8 <LoRaMacInitialization+0x708>)
 8012824:	2200      	movs	r2, #0
 8012826:	9200      	str	r2, [sp, #0]
 8012828:	2200      	movs	r2, #0
 801282a:	f009 fb63 	bl	801bef4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 801282e:	4b63      	ldr	r3, [pc, #396]	@ (80129bc <LoRaMacInitialization+0x70c>)
 8012830:	2201      	movs	r2, #1
 8012832:	4251      	negs	r1, r2
 8012834:	4862      	ldr	r0, [pc, #392]	@ (80129c0 <LoRaMacInitialization+0x710>)
 8012836:	2200      	movs	r2, #0
 8012838:	9200      	str	r2, [sp, #0]
 801283a:	2200      	movs	r2, #0
 801283c:	f009 fb5a 	bl	801bef4 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 8012840:	4b56      	ldr	r3, [pc, #344]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012842:	4a55      	ldr	r2, [pc, #340]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012844:	589d      	ldr	r5, [r3, r2]
 8012846:	23ac      	movs	r3, #172	@ 0xac
 8012848:	005c      	lsls	r4, r3, #1
 801284a:	003b      	movs	r3, r7
 801284c:	0018      	movs	r0, r3
 801284e:	f009 fb21 	bl	801be94 <SysTimeGetMcuTime>
 8012852:	003a      	movs	r2, r7
 8012854:	192b      	adds	r3, r5, r4
 8012856:	ca03      	ldmia	r2!, {r0, r1}
 8012858:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801285a:	4a50      	ldr	r2, [pc, #320]	@ (801299c <LoRaMacInitialization+0x6ec>)
 801285c:	23d3      	movs	r3, #211	@ 0xd3
 801285e:	009b      	lsls	r3, r3, #2
 8012860:	4958      	ldr	r1, [pc, #352]	@ (80129c4 <LoRaMacInitialization+0x714>)
 8012862:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012864:	4a4d      	ldr	r2, [pc, #308]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012866:	23d5      	movs	r3, #213	@ 0xd5
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	4957      	ldr	r1, [pc, #348]	@ (80129c8 <LoRaMacInitialization+0x718>)
 801286c:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801286e:	4a4b      	ldr	r2, [pc, #300]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012870:	23d7      	movs	r3, #215	@ 0xd7
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4955      	ldr	r1, [pc, #340]	@ (80129cc <LoRaMacInitialization+0x71c>)
 8012876:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012878:	4a48      	ldr	r2, [pc, #288]	@ (801299c <LoRaMacInitialization+0x6ec>)
 801287a:	23d4      	movs	r3, #212	@ 0xd4
 801287c:	009b      	lsls	r3, r3, #2
 801287e:	4954      	ldr	r1, [pc, #336]	@ (80129d0 <LoRaMacInitialization+0x720>)
 8012880:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012882:	4a46      	ldr	r2, [pc, #280]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012884:	23d6      	movs	r3, #214	@ 0xd6
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	4952      	ldr	r1, [pc, #328]	@ (80129d4 <LoRaMacInitialization+0x724>)
 801288a:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 801288c:	4b52      	ldr	r3, [pc, #328]	@ (80129d8 <LoRaMacInitialization+0x728>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4a52      	ldr	r2, [pc, #328]	@ (80129dc <LoRaMacInitialization+0x72c>)
 8012892:	0010      	movs	r0, r2
 8012894:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8012896:	4b52      	ldr	r3, [pc, #328]	@ (80129e0 <LoRaMacInitialization+0x730>)
 8012898:	0018      	movs	r0, r3
 801289a:	f7fa f91f 	bl	800cadc <SecureElementInit>
 801289e:	1e03      	subs	r3, r0, #0
 80128a0:	d001      	beq.n	80128a6 <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128a2:	2311      	movs	r3, #17
 80128a4:	e073      	b.n	801298e <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 80128a6:	4b4f      	ldr	r3, [pc, #316]	@ (80129e4 <LoRaMacInitialization+0x734>)
 80128a8:	0018      	movs	r0, r3
 80128aa:	f002 fbf3 	bl	8015094 <LoRaMacCryptoInit>
 80128ae:	1e03      	subs	r3, r0, #0
 80128b0:	d001      	beq.n	80128b6 <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128b2:	2311      	movs	r3, #17
 80128b4:	e06b      	b.n	801298e <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 80128b6:	4b4c      	ldr	r3, [pc, #304]	@ (80129e8 <LoRaMacInitialization+0x738>)
 80128b8:	0018      	movs	r0, r3
 80128ba:	f001 fc0d 	bl	80140d8 <LoRaMacCommandsInit>
 80128be:	1e03      	subs	r3, r0, #0
 80128c0:	d001      	beq.n	80128c6 <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80128c2:	2313      	movs	r3, #19
 80128c4:	e063      	b.n	801298e <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80128c6:	4b35      	ldr	r3, [pc, #212]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80128c8:	4a33      	ldr	r2, [pc, #204]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 80128ca:	589b      	ldr	r3, [r3, r2]
 80128cc:	3350      	adds	r3, #80	@ 0x50
 80128ce:	0018      	movs	r0, r3
 80128d0:	f002 fcee 	bl	80152b0 <LoRaMacCryptoSetMulticastReference>
 80128d4:	1e03      	subs	r3, r0, #0
 80128d6:	d001      	beq.n	80128dc <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128d8:	2311      	movs	r3, #17
 80128da:	e058      	b.n	801298e <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80128dc:	4b3e      	ldr	r3, [pc, #248]	@ (80129d8 <LoRaMacInitialization+0x728>)
 80128de:	695b      	ldr	r3, [r3, #20]
 80128e0:	4798      	blx	r3
 80128e2:	0003      	movs	r3, r0
 80128e4:	0018      	movs	r0, r3
 80128e6:	f006 f81b 	bl	8018920 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80128ea:	4b3b      	ldr	r3, [pc, #236]	@ (80129d8 <LoRaMacInitialization+0x728>)
 80128ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128ee:	4a2b      	ldr	r2, [pc, #172]	@ (801299c <LoRaMacInitialization+0x6ec>)
 80128f0:	4929      	ldr	r1, [pc, #164]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 80128f2:	5852      	ldr	r2, [r2, r1]
 80128f4:	217d      	movs	r1, #125	@ 0x7d
 80128f6:	5c52      	ldrb	r2, [r2, r1]
 80128f8:	0010      	movs	r0, r2
 80128fa:	4798      	blx	r3
    Radio.Sleep( );
 80128fc:	4b36      	ldr	r3, [pc, #216]	@ (80129d8 <LoRaMacInitialization+0x728>)
 80128fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012900:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8012902:	2144      	movs	r1, #68	@ 0x44
 8012904:	187b      	adds	r3, r7, r1
 8012906:	2200      	movs	r2, #0
 8012908:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 801290a:	187b      	adds	r3, r7, r1
 801290c:	2200      	movs	r2, #0
 801290e:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d007      	beq.n	8012926 <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	685a      	ldr	r2, [r3, #4]
 801291a:	187b      	adds	r3, r7, r1
 801291c:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	68da      	ldr	r2, [r3, #12]
 8012922:	187b      	adds	r3, r7, r1
 8012924:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8012926:	2124      	movs	r1, #36	@ 0x24
 8012928:	187b      	adds	r3, r7, r1
 801292a:	4a30      	ldr	r2, [pc, #192]	@ (80129ec <LoRaMacInitialization+0x73c>)
 801292c:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801292e:	187b      	adds	r3, r7, r1
 8012930:	4a2f      	ldr	r2, [pc, #188]	@ (80129f0 <LoRaMacInitialization+0x740>)
 8012932:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8012934:	187b      	adds	r3, r7, r1
 8012936:	4a2f      	ldr	r2, [pc, #188]	@ (80129f4 <LoRaMacInitialization+0x744>)
 8012938:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801293a:	187b      	adds	r3, r7, r1
 801293c:	4a2e      	ldr	r2, [pc, #184]	@ (80129f8 <LoRaMacInitialization+0x748>)
 801293e:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8012940:	4b16      	ldr	r3, [pc, #88]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012942:	4a15      	ldr	r2, [pc, #84]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012944:	589b      	ldr	r3, [r3, r2]
 8012946:	334c      	adds	r3, #76	@ 0x4c
 8012948:	001a      	movs	r2, r3
 801294a:	187b      	adds	r3, r7, r1
 801294c:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 801294e:	4b13      	ldr	r3, [pc, #76]	@ (801299c <LoRaMacInitialization+0x6ec>)
 8012950:	4a11      	ldr	r2, [pc, #68]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 8012952:	589b      	ldr	r3, [r3, r2]
 8012954:	001a      	movs	r2, r3
 8012956:	187b      	adds	r3, r7, r1
 8012958:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 801295a:	4b10      	ldr	r3, [pc, #64]	@ (801299c <LoRaMacInitialization+0x6ec>)
 801295c:	4a0e      	ldr	r2, [pc, #56]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 801295e:	589b      	ldr	r3, [r3, r2]
 8012960:	3384      	adds	r3, #132	@ 0x84
 8012962:	001a      	movs	r2, r3
 8012964:	187b      	adds	r3, r7, r1
 8012966:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8012968:	4b0c      	ldr	r3, [pc, #48]	@ (801299c <LoRaMacInitialization+0x6ec>)
 801296a:	4a0b      	ldr	r2, [pc, #44]	@ (8012998 <LoRaMacInitialization+0x6e8>)
 801296c:	589b      	ldr	r3, [r3, r2]
 801296e:	3350      	adds	r3, #80	@ 0x50
 8012970:	001a      	movs	r2, r3
 8012972:	0008      	movs	r0, r1
 8012974:	187b      	adds	r3, r7, r1
 8012976:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8012978:	4a20      	ldr	r2, [pc, #128]	@ (80129fc <LoRaMacInitialization+0x74c>)
 801297a:	2344      	movs	r3, #68	@ 0x44
 801297c:	18f9      	adds	r1, r7, r3
 801297e:	183b      	adds	r3, r7, r0
 8012980:	0018      	movs	r0, r3
 8012982:	f001 f994 	bl	8013cae <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012986:	2001      	movs	r0, #1
 8012988:	f7fc fe0e 	bl	800f5a8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801298c:	2300      	movs	r3, #0
}
 801298e:	0018      	movs	r0, r3
 8012990:	46bd      	mov	sp, r7
 8012992:	b016      	add	sp, #88	@ 0x58
 8012994:	bdb0      	pop	{r4, r5, r7, pc}
 8012996:	46c0      	nop			@ (mov r8, r8)
 8012998:	00000484 	.word	0x00000484
 801299c:	20000b6c 	.word	0x20000b6c
 80129a0:	00000481 	.word	0x00000481
 80129a4:	0800f9ad 	.word	0x0800f9ad
 80129a8:	20000ed4 	.word	0x20000ed4
 80129ac:	0800fa39 	.word	0x0800fa39
 80129b0:	20000eec 	.word	0x20000eec
 80129b4:	0800facd 	.word	0x0800facd
 80129b8:	20000f04 	.word	0x20000f04
 80129bc:	0800fb69 	.word	0x0800fb69
 80129c0:	20000f64 	.word	0x20000f64
 80129c4:	0800e491 	.word	0x0800e491
 80129c8:	0800e4fd 	.word	0x0800e4fd
 80129cc:	0800e5d1 	.word	0x0800e5d1
 80129d0:	0800e58d 	.word	0x0800e58d
 80129d4:	0800e615 	.word	0x0800e615
 80129d8:	0801e62c 	.word	0x0801e62c
 80129dc:	20000eb8 	.word	0x20000eb8
 80129e0:	0801217d 	.word	0x0801217d
 80129e4:	0801216d 	.word	0x0801216d
 80129e8:	0801218d 	.word	0x0801218d
 80129ec:	20000fd0 	.word	0x20000fd0
 80129f0:	20000f88 	.word	0x20000f88
 80129f4:	20000fbc 	.word	0x20000fbc
 80129f8:	20000fed 	.word	0x20000fed
 80129fc:	0801219d 	.word	0x0801219d

08012a00 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012a04:	4a04      	ldr	r2, [pc, #16]	@ (8012a18 <LoRaMacStart+0x18>)
 8012a06:	23d0      	movs	r3, #208	@ 0xd0
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	0018      	movs	r0, r3
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	46c0      	nop			@ (mov r8, r8)
 8012a18:	20000b6c 	.word	0x20000b6c

08012a1c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012a1c:	b590      	push	{r4, r7, lr}
 8012a1e:	b08b      	sub	sp, #44	@ 0x2c
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	0002      	movs	r2, r0
 8012a24:	6039      	str	r1, [r7, #0]
 8012a26:	1dfb      	adds	r3, r7, #7
 8012a28:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8012a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012a2c:	4a4f      	ldr	r2, [pc, #316]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012a2e:	589b      	ldr	r3, [r3, r2]
 8012a30:	2280      	movs	r2, #128	@ 0x80
 8012a32:	589b      	ldr	r3, [r3, r2]
 8012a34:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8012a36:	4b4c      	ldr	r3, [pc, #304]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012a38:	4a4c      	ldr	r2, [pc, #304]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012a3a:	589b      	ldr	r3, [r3, r2]
 8012a3c:	2205      	movs	r2, #5
 8012a3e:	569a      	ldrsb	r2, [r3, r2]
 8012a40:	230f      	movs	r3, #15
 8012a42:	18fb      	adds	r3, r7, r3
 8012a44:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012a46:	4b48      	ldr	r3, [pc, #288]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012a48:	4a48      	ldr	r2, [pc, #288]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012a4a:	589b      	ldr	r3, [r3, r2]
 8012a4c:	2204      	movs	r2, #4
 8012a4e:	569a      	ldrsb	r2, [r3, r2]
 8012a50:	230e      	movs	r3, #14
 8012a52:	18fb      	adds	r3, r7, r3
 8012a54:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 8012a56:	2300      	movs	r3, #0
 8012a58:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d101      	bne.n	8012a64 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a60:	2303      	movs	r3, #3
 8012a62:	e07d      	b.n	8012b60 <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8012a64:	4b40      	ldr	r3, [pc, #256]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012a66:	4a41      	ldr	r2, [pc, #260]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012a68:	5899      	ldr	r1, [r3, r2]
 8012a6a:	2014      	movs	r0, #20
 8012a6c:	183b      	adds	r3, r7, r0
 8012a6e:	22b0      	movs	r2, #176	@ 0xb0
 8012a70:	0052      	lsls	r2, r2, #1
 8012a72:	588a      	ldr	r2, [r1, r2]
 8012a74:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 8012a76:	183b      	adds	r3, r7, r0
 8012a78:	2200      	movs	r2, #0
 8012a7a:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8012a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012a80:	589b      	ldr	r3, [r3, r2]
 8012a82:	227e      	movs	r2, #126	@ 0x7e
 8012a84:	5c9a      	ldrb	r2, [r3, r2]
 8012a86:	183b      	adds	r3, r7, r0
 8012a88:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8012a8a:	4b37      	ldr	r3, [pc, #220]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012a8c:	4a37      	ldr	r2, [pc, #220]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012a8e:	589b      	ldr	r3, [r3, r2]
 8012a90:	2280      	movs	r2, #128	@ 0x80
 8012a92:	589a      	ldr	r2, [r3, r2]
 8012a94:	183b      	adds	r3, r7, r0
 8012a96:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012a98:	4a33      	ldr	r2, [pc, #204]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012a9a:	23fd      	movs	r3, #253	@ 0xfd
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	5ad2      	ldrh	r2, [r2, r3]
 8012aa0:	183b      	adds	r3, r7, r0
 8012aa2:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012aa4:	4b30      	ldr	r3, [pc, #192]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012aa6:	4a32      	ldr	r2, [pc, #200]	@ (8012b70 <LoRaMacQueryTxPossible+0x154>)
 8012aa8:	5a9a      	ldrh	r2, [r3, r2]
 8012aaa:	183b      	adds	r3, r7, r0
 8012aac:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012aae:	4b2e      	ldr	r3, [pc, #184]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012ab2:	589b      	ldr	r3, [r3, r2]
 8012ab4:	2285      	movs	r2, #133	@ 0x85
 8012ab6:	569a      	ldrsb	r2, [r3, r2]
 8012ab8:	183b      	adds	r3, r7, r0
 8012aba:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012abc:	4b2a      	ldr	r3, [pc, #168]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012abe:	4a2b      	ldr	r2, [pc, #172]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012ac0:	589b      	ldr	r3, [r3, r2]
 8012ac2:	2284      	movs	r2, #132	@ 0x84
 8012ac4:	569a      	ldrsb	r2, [r3, r2]
 8012ac6:	183b      	adds	r3, r7, r0
 8012ac8:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012aca:	4b27      	ldr	r3, [pc, #156]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012acc:	4a27      	ldr	r2, [pc, #156]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012ace:	589b      	ldr	r3, [r3, r2]
 8012ad0:	22b8      	movs	r2, #184	@ 0xb8
 8012ad2:	5c9a      	ldrb	r2, [r3, r2]
 8012ad4:	183b      	adds	r3, r7, r0
 8012ad6:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8012ad8:	4b23      	ldr	r3, [pc, #140]	@ (8012b68 <LoRaMacQueryTxPossible+0x14c>)
 8012ada:	4a24      	ldr	r2, [pc, #144]	@ (8012b6c <LoRaMacQueryTxPossible+0x150>)
 8012adc:	589b      	ldr	r3, [r3, r2]
 8012ade:	781a      	ldrb	r2, [r3, #0]
 8012ae0:	183b      	adds	r3, r7, r0
 8012ae2:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8012ae4:	2310      	movs	r3, #16
 8012ae6:	18fb      	adds	r3, r7, r3
 8012ae8:	220e      	movs	r2, #14
 8012aea:	18ba      	adds	r2, r7, r2
 8012aec:	240f      	movs	r4, #15
 8012aee:	1939      	adds	r1, r7, r4
 8012af0:	1838      	adds	r0, r7, r0
 8012af2:	f001 f8c4 	bl	8013c7e <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012af6:	193b      	adds	r3, r7, r4
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	b25b      	sxtb	r3, r3
 8012afc:	0018      	movs	r0, r3
 8012afe:	f7fd f9e5 	bl	800fecc <GetMaxAppPayloadWithoutFOptsLength>
 8012b02:	0003      	movs	r3, r0
 8012b04:	001a      	movs	r2, r3
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012b0a:	2308      	movs	r3, #8
 8012b0c:	18fb      	adds	r3, r7, r3
 8012b0e:	0018      	movs	r0, r3
 8012b10:	f001 fbf6 	bl	8014300 <LoRaMacCommandsGetSizeSerializedCmds>
 8012b14:	1e03      	subs	r3, r0, #0
 8012b16:	d001      	beq.n	8012b1c <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012b18:	2313      	movs	r3, #19
 8012b1a:	e021      	b.n	8012b60 <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	2b0f      	cmp	r3, #15
 8012b20:	d81a      	bhi.n	8012b58 <LoRaMacQueryTxPossible+0x13c>
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	785b      	ldrb	r3, [r3, #1]
 8012b26:	001a      	movs	r2, r3
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	d314      	bcc.n	8012b58 <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	785a      	ldrb	r2, [r3, #1]
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	1ad3      	subs	r3, r2, r3
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	785b      	ldrb	r3, [r3, #1]
 8012b42:	0019      	movs	r1, r3
 8012b44:	1dfb      	adds	r3, r7, #7
 8012b46:	781a      	ldrb	r2, [r3, #0]
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	18d3      	adds	r3, r2, r3
 8012b4c:	4299      	cmp	r1, r3
 8012b4e:	d301      	bcc.n	8012b54 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 8012b50:	2300      	movs	r3, #0
 8012b52:	e005      	b.n	8012b60 <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012b54:	2308      	movs	r3, #8
 8012b56:	e003      	b.n	8012b60 <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012b5e:	2308      	movs	r3, #8
    }
}
 8012b60:	0018      	movs	r0, r3
 8012b62:	46bd      	mov	sp, r7
 8012b64:	b00b      	add	sp, #44	@ 0x2c
 8012b66:	bd90      	pop	{r4, r7, pc}
 8012b68:	20000b6c 	.word	0x20000b6c
 8012b6c:	00000484 	.word	0x00000484
 8012b70:	000003f6 	.word	0x000003f6

08012b74 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012b74:	b590      	push	{r4, r7, lr}
 8012b76:	b087      	sub	sp, #28
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012b7c:	2317      	movs	r3, #23
 8012b7e:	18fb      	adds	r3, r7, r3
 8012b80:	2200      	movs	r2, #0
 8012b82:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d101      	bne.n	8012b8e <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b8a:	2303      	movs	r3, #3
 8012b8c:	e146      	b.n	8012e1c <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	2b2d      	cmp	r3, #45	@ 0x2d
 8012b94:	d900      	bls.n	8012b98 <LoRaMacMibGetRequestConfirm+0x24>
 8012b96:	e135      	b.n	8012e04 <LoRaMacMibGetRequestConfirm+0x290>
 8012b98:	009a      	lsls	r2, r3, #2
 8012b9a:	4ba2      	ldr	r3, [pc, #648]	@ (8012e24 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8012b9c:	18d3      	adds	r3, r2, r3
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8012ba2:	4ba1      	ldr	r3, [pc, #644]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012ba4:	4aa1      	ldr	r2, [pc, #644]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012ba6:	589b      	ldr	r3, [r3, r2]
 8012ba8:	227c      	movs	r2, #124	@ 0x7c
 8012baa:	5c9a      	ldrb	r2, [r3, r2]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	711a      	strb	r2, [r3, #4]
            break;
 8012bb0:	e131      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8012bb2:	4b9d      	ldr	r3, [pc, #628]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bb4:	4a9d      	ldr	r2, [pc, #628]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bb6:	589a      	ldr	r2, [r3, r2]
 8012bb8:	23b2      	movs	r3, #178	@ 0xb2
 8012bba:	005b      	lsls	r3, r3, #1
 8012bbc:	5cd2      	ldrb	r2, [r2, r3]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	711a      	strb	r2, [r3, #4]
            break;
 8012bc2:	e128      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8012bc4:	f7fa fb2a 	bl	800d21c <SecureElementGetDevEui>
 8012bc8:	0002      	movs	r2, r0
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	605a      	str	r2, [r3, #4]
            break;
 8012bce:	e122      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8012bd0:	f7fa fb48 	bl	800d264 <SecureElementGetJoinEui>
 8012bd4:	0002      	movs	r2, r0
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	605a      	str	r2, [r3, #4]
            break;
 8012bda:	e11c      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8012bdc:	4b92      	ldr	r3, [pc, #584]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bde:	4a93      	ldr	r2, [pc, #588]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012be0:	589b      	ldr	r3, [r3, r2]
 8012be2:	227e      	movs	r2, #126	@ 0x7e
 8012be4:	5c9a      	ldrb	r2, [r3, r2]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	711a      	strb	r2, [r3, #4]
            break;
 8012bea:	e114      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8012bec:	4b8e      	ldr	r3, [pc, #568]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bee:	4a8f      	ldr	r2, [pc, #572]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bf0:	589b      	ldr	r3, [r3, r2]
 8012bf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	605a      	str	r2, [r3, #4]
            break;
 8012bf8:	e10d      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8012bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bfc:	4a8b      	ldr	r2, [pc, #556]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bfe:	589b      	ldr	r3, [r3, r2]
 8012c00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	605a      	str	r2, [r3, #4]
            break;
 8012c06:	e106      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8012c08:	4b87      	ldr	r3, [pc, #540]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c0a:	4a88      	ldr	r2, [pc, #544]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c0c:	589b      	ldr	r3, [r3, r2]
 8012c0e:	227d      	movs	r2, #125	@ 0x7d
 8012c10:	5c9a      	ldrb	r2, [r3, r2]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	711a      	strb	r2, [r3, #4]
            break;
 8012c16:	e0fe      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8012c18:	4b83      	ldr	r3, [pc, #524]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c1a:	4a84      	ldr	r2, [pc, #528]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c1c:	589b      	ldr	r3, [r3, r2]
 8012c1e:	22ca      	movs	r2, #202	@ 0xca
 8012c20:	5c9a      	ldrb	r2, [r3, r2]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	711a      	strb	r2, [r3, #4]
            break;
 8012c26:	e0f6      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012c28:	2110      	movs	r1, #16
 8012c2a:	187b      	adds	r3, r7, r1
 8012c2c:	221d      	movs	r2, #29
 8012c2e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012c30:	4b7d      	ldr	r3, [pc, #500]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c32:	4a7e      	ldr	r2, [pc, #504]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c34:	589b      	ldr	r3, [r3, r2]
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	187a      	adds	r2, r7, r1
 8012c3a:	0011      	movs	r1, r2
 8012c3c:	0018      	movs	r0, r3
 8012c3e:	f003 fa10 	bl	8016062 <RegionGetPhyParam>
 8012c42:	0003      	movs	r3, r0
 8012c44:	001a      	movs	r2, r3
 8012c46:	210c      	movs	r1, #12
 8012c48:	187b      	adds	r3, r7, r1
 8012c4a:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012c4c:	187b      	adds	r3, r7, r1
 8012c4e:	681a      	ldr	r2, [r3, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	605a      	str	r2, [r3, #4]
            break;
 8012c54:	e0df      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8012c56:	4b74      	ldr	r3, [pc, #464]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c58:	4a74      	ldr	r2, [pc, #464]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c5a:	589a      	ldr	r2, [r3, r2]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	21a8      	movs	r1, #168	@ 0xa8
 8012c60:	3304      	adds	r3, #4
 8012c62:	1852      	adds	r2, r2, r1
 8012c64:	ca03      	ldmia	r2!, {r0, r1}
 8012c66:	c303      	stmia	r3!, {r0, r1}
            break;
 8012c68:	e0d5      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8012c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c6c:	4a6f      	ldr	r2, [pc, #444]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c6e:	589a      	ldr	r2, [r3, r2]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	3304      	adds	r3, #4
 8012c74:	3228      	adds	r2, #40	@ 0x28
 8012c76:	ca03      	ldmia	r2!, {r0, r1}
 8012c78:	c303      	stmia	r3!, {r0, r1}
            break;
 8012c7a:	e0cc      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8012c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c7e:	4a6b      	ldr	r2, [pc, #428]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c80:	589a      	ldr	r2, [r3, r2]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	21b0      	movs	r1, #176	@ 0xb0
 8012c86:	3304      	adds	r3, #4
 8012c88:	1852      	adds	r2, r2, r1
 8012c8a:	ca03      	ldmia	r2!, {r0, r1}
 8012c8c:	c303      	stmia	r3!, {r0, r1}
            break;
 8012c8e:	e0c2      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8012c90:	4b65      	ldr	r3, [pc, #404]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c92:	4a66      	ldr	r2, [pc, #408]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c94:	589a      	ldr	r2, [r3, r2]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	3304      	adds	r3, #4
 8012c9a:	3230      	adds	r2, #48	@ 0x30
 8012c9c:	ca03      	ldmia	r2!, {r0, r1}
 8012c9e:	c303      	stmia	r3!, {r0, r1}
            break;
 8012ca0:	e0b9      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012ca2:	2110      	movs	r1, #16
 8012ca4:	187b      	adds	r3, r7, r1
 8012ca6:	221b      	movs	r2, #27
 8012ca8:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012caa:	4b5f      	ldr	r3, [pc, #380]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012cac:	4a5f      	ldr	r2, [pc, #380]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012cae:	589b      	ldr	r3, [r3, r2]
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	187a      	adds	r2, r7, r1
 8012cb4:	0011      	movs	r1, r2
 8012cb6:	0018      	movs	r0, r3
 8012cb8:	f003 f9d3 	bl	8016062 <RegionGetPhyParam>
 8012cbc:	0003      	movs	r3, r0
 8012cbe:	001a      	movs	r2, r3
 8012cc0:	210c      	movs	r1, #12
 8012cc2:	187b      	adds	r3, r7, r1
 8012cc4:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012cc6:	187b      	adds	r3, r7, r1
 8012cc8:	681a      	ldr	r2, [r3, #0]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	605a      	str	r2, [r3, #4]
            break;
 8012cce:	e0a2      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012cd0:	2110      	movs	r1, #16
 8012cd2:	187b      	adds	r3, r7, r1
 8012cd4:	221a      	movs	r2, #26
 8012cd6:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012cd8:	4b53      	ldr	r3, [pc, #332]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012cda:	4a54      	ldr	r2, [pc, #336]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012cdc:	589b      	ldr	r3, [r3, r2]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	187a      	adds	r2, r7, r1
 8012ce2:	0011      	movs	r1, r2
 8012ce4:	0018      	movs	r0, r3
 8012ce6:	f003 f9bc 	bl	8016062 <RegionGetPhyParam>
 8012cea:	0003      	movs	r3, r0
 8012cec:	001a      	movs	r2, r3
 8012cee:	210c      	movs	r1, #12
 8012cf0:	187b      	adds	r3, r7, r1
 8012cf2:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012cf4:	187b      	adds	r3, r7, r1
 8012cf6:	681a      	ldr	r2, [r3, #0]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	605a      	str	r2, [r3, #4]
            break;
 8012cfc:	e08b      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8012cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d00:	4a4a      	ldr	r2, [pc, #296]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d02:	589b      	ldr	r3, [r3, r2]
 8012d04:	22a4      	movs	r2, #164	@ 0xa4
 8012d06:	5c9a      	ldrb	r2, [r3, r2]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	711a      	strb	r2, [r3, #4]
            break;
 8012d0c:	e083      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8012d0e:	4b46      	ldr	r3, [pc, #280]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d10:	4a46      	ldr	r2, [pc, #280]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d12:	589b      	ldr	r3, [r3, r2]
 8012d14:	2290      	movs	r2, #144	@ 0x90
 8012d16:	589a      	ldr	r2, [r3, r2]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	605a      	str	r2, [r3, #4]
            break;
 8012d1c:	e07b      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8012d1e:	4b42      	ldr	r3, [pc, #264]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d20:	4a42      	ldr	r2, [pc, #264]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d22:	589b      	ldr	r3, [r3, r2]
 8012d24:	2294      	movs	r2, #148	@ 0x94
 8012d26:	589a      	ldr	r2, [r3, r2]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	605a      	str	r2, [r3, #4]
            break;
 8012d2c:	e073      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8012d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d30:	4a3e      	ldr	r2, [pc, #248]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d32:	589b      	ldr	r3, [r3, r2]
 8012d34:	2298      	movs	r2, #152	@ 0x98
 8012d36:	589a      	ldr	r2, [r3, r2]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	605a      	str	r2, [r3, #4]
            break;
 8012d3c:	e06b      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8012d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d40:	4a3a      	ldr	r2, [pc, #232]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d42:	589b      	ldr	r3, [r3, r2]
 8012d44:	229c      	movs	r2, #156	@ 0x9c
 8012d46:	589a      	ldr	r2, [r3, r2]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	605a      	str	r2, [r3, #4]
            break;
 8012d4c:	e063      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8012d4e:	4b36      	ldr	r3, [pc, #216]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d50:	4a36      	ldr	r2, [pc, #216]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d52:	589b      	ldr	r3, [r3, r2]
 8012d54:	22a0      	movs	r2, #160	@ 0xa0
 8012d56:	589a      	ldr	r2, [r3, r2]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	605a      	str	r2, [r3, #4]
            break;
 8012d5c:	e05b      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8012d5e:	4b32      	ldr	r3, [pc, #200]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d60:	4a32      	ldr	r2, [pc, #200]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d62:	589b      	ldr	r3, [r3, r2]
 8012d64:	2205      	movs	r2, #5
 8012d66:	569a      	ldrsb	r2, [r3, r2]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	711a      	strb	r2, [r3, #4]
            break;
 8012d6c:	e053      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d70:	4a2e      	ldr	r2, [pc, #184]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d72:	589b      	ldr	r3, [r3, r2]
 8012d74:	2285      	movs	r2, #133	@ 0x85
 8012d76:	569a      	ldrsb	r2, [r3, r2]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	711a      	strb	r2, [r3, #4]
            break;
 8012d7c:	e04b      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d80:	4a2a      	ldr	r2, [pc, #168]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d82:	589b      	ldr	r3, [r3, r2]
 8012d84:	2204      	movs	r2, #4
 8012d86:	569a      	ldrsb	r2, [r3, r2]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	711a      	strb	r2, [r3, #4]
            break;
 8012d8c:	e043      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012d8e:	4b26      	ldr	r3, [pc, #152]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d90:	4a26      	ldr	r2, [pc, #152]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d92:	589b      	ldr	r3, [r3, r2]
 8012d94:	2284      	movs	r2, #132	@ 0x84
 8012d96:	569a      	ldrsb	r2, [r3, r2]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	711a      	strb	r2, [r3, #4]
            break;
 8012d9c:	e03b      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8012d9e:	4b22      	ldr	r3, [pc, #136]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012da0:	4a22      	ldr	r2, [pc, #136]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012da2:	589b      	ldr	r3, [r3, r2]
 8012da4:	2288      	movs	r2, #136	@ 0x88
 8012da6:	589a      	ldr	r2, [r3, r2]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	605a      	str	r2, [r3, #4]
            break;
 8012dac:	e033      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8012dae:	4b1e      	ldr	r3, [pc, #120]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012db0:	4a1e      	ldr	r2, [pc, #120]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012db2:	589b      	ldr	r3, [r3, r2]
 8012db4:	228c      	movs	r2, #140	@ 0x8c
 8012db6:	5c9a      	ldrb	r2, [r3, r2]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	711a      	strb	r2, [r3, #4]
            break;
 8012dbc:	e02b      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012dc2:	589b      	ldr	r3, [r3, r2]
 8012dc4:	22c0      	movs	r2, #192	@ 0xc0
 8012dc6:	589a      	ldr	r2, [r3, r2]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	605a      	str	r2, [r3, #4]
            break;
 8012dcc:	e023      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8012dce:	f7fe ff23 	bl	8011c18 <GetCtxs>
 8012dd2:	0002      	movs	r2, r0
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	605a      	str	r2, [r3, #4]
            break;
 8012dd8:	e01d      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8012dda:	4b13      	ldr	r3, [pc, #76]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012ddc:	4a13      	ldr	r2, [pc, #76]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012dde:	589b      	ldr	r3, [r3, r2]
 8012de0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	605a      	str	r2, [r3, #4]
            break;
 8012de6:	e016      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 8012de8:	4b0f      	ldr	r3, [pc, #60]	@ (8012e28 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012dea:	4a10      	ldr	r2, [pc, #64]	@ (8012e2c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012dec:	5899      	ldr	r1, [r3, r2]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	22b0      	movs	r2, #176	@ 0xb0
 8012df2:	0052      	lsls	r2, r2, #1
 8012df4:	588a      	ldr	r2, [r1, r2]
 8012df6:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012df8:	687c      	ldr	r4, [r7, #4]
 8012dfa:	f003 fb2d 	bl	8016458 <RegionGetVersion>
 8012dfe:	0003      	movs	r3, r0
 8012e00:	60a3      	str	r3, [r4, #8]
            break;
 8012e02:	e008      	b.n	8012e16 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012e04:	2317      	movs	r3, #23
 8012e06:	18fc      	adds	r4, r7, r3
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	0018      	movs	r0, r3
 8012e0c:	f000 ffed 	bl	8013dea <LoRaMacClassBMibGetRequestConfirm>
 8012e10:	0003      	movs	r3, r0
 8012e12:	7023      	strb	r3, [r4, #0]
            break;
 8012e14:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status;
 8012e16:	2317      	movs	r3, #23
 8012e18:	18fb      	adds	r3, r7, r3
 8012e1a:	781b      	ldrb	r3, [r3, #0]
}
 8012e1c:	0018      	movs	r0, r3
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	b007      	add	sp, #28
 8012e22:	bd90      	pop	{r4, r7, pc}
 8012e24:	0801e1a4 	.word	0x0801e1a4
 8012e28:	20000b6c 	.word	0x20000b6c
 8012e2c:	00000484 	.word	0x00000484

08012e30 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012e30:	b590      	push	{r4, r7, lr}
 8012e32:	b087      	sub	sp, #28
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012e38:	2317      	movs	r3, #23
 8012e3a:	18fb      	adds	r3, r7, r3
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d102      	bne.n	8012e4c <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e46:	2303      	movs	r3, #3
 8012e48:	f000 fb74 	bl	8013534 <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012e4c:	4ac3      	ldr	r2, [pc, #780]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8012e4e:	23d0      	movs	r3, #208	@ 0xd0
 8012e50:	009b      	lsls	r3, r3, #2
 8012e52:	58d3      	ldr	r3, [r2, r3]
 8012e54:	2202      	movs	r2, #2
 8012e56:	4013      	ands	r3, r2
 8012e58:	d002      	beq.n	8012e60 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	f000 fb6a 	bl	8013534 <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	2b2c      	cmp	r3, #44	@ 0x2c
 8012e66:	d900      	bls.n	8012e6a <LoRaMacMibSetRequestConfirm+0x3a>
 8012e68:	e333      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6a2>
 8012e6a:	009a      	lsls	r2, r3, #2
 8012e6c:	4bbc      	ldr	r3, [pc, #752]	@ (8013160 <LoRaMacMibSetRequestConfirm+0x330>)
 8012e6e:	18d3      	adds	r3, r2, r3
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	791b      	ldrb	r3, [r3, #4]
 8012e78:	2217      	movs	r2, #23
 8012e7a:	18bc      	adds	r4, r7, r2
 8012e7c:	0018      	movs	r0, r3
 8012e7e:	f7fc ff05 	bl	800fc8c <SwitchClass>
 8012e82:	0003      	movs	r3, r0
 8012e84:	7023      	strb	r3, [r4, #0]
            break;
 8012e86:	e34e      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	791b      	ldrb	r3, [r3, #4]
 8012e8c:	2b02      	cmp	r3, #2
 8012e8e:	d008      	beq.n	8012ea2 <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8012e90:	4bb2      	ldr	r3, [pc, #712]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8012e92:	4ab4      	ldr	r2, [pc, #720]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8012e94:	589a      	ldr	r2, [r3, r2]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	7919      	ldrb	r1, [r3, #4]
 8012e9a:	23b2      	movs	r3, #178	@ 0xb2
 8012e9c:	005b      	lsls	r3, r3, #1
 8012e9e:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012ea0:	e341      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ea2:	2317      	movs	r3, #23
 8012ea4:	18fb      	adds	r3, r7, r3
 8012ea6:	2203      	movs	r2, #3
 8012ea8:	701a      	strb	r2, [r3, #0]
            break;
 8012eaa:	e33c      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	0018      	movs	r0, r3
 8012eb2:	f7fa f997 	bl	800d1e4 <SecureElementSetDevEui>
 8012eb6:	1e03      	subs	r3, r0, #0
 8012eb8:	d100      	bne.n	8012ebc <LoRaMacMibSetRequestConfirm+0x8c>
 8012eba:	e319      	b.n	80134f0 <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ebc:	2317      	movs	r3, #23
 8012ebe:	18fb      	adds	r3, r7, r3
 8012ec0:	2203      	movs	r2, #3
 8012ec2:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ec4:	e314      	b.n	80134f0 <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	685b      	ldr	r3, [r3, #4]
 8012eca:	0018      	movs	r0, r3
 8012ecc:	f7fa f9ae 	bl	800d22c <SecureElementSetJoinEui>
 8012ed0:	1e03      	subs	r3, r0, #0
 8012ed2:	d100      	bne.n	8012ed6 <LoRaMacMibSetRequestConfirm+0xa6>
 8012ed4:	e30e      	b.n	80134f4 <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ed6:	2317      	movs	r3, #23
 8012ed8:	18fb      	adds	r3, r7, r3
 8012eda:	2203      	movs	r2, #3
 8012edc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ede:	e309      	b.n	80134f4 <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8012ee0:	4b9e      	ldr	r3, [pc, #632]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8012ee2:	4aa0      	ldr	r2, [pc, #640]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8012ee4:	589b      	ldr	r3, [r3, r2]
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	7911      	ldrb	r1, [r2, #4]
 8012eea:	227e      	movs	r2, #126	@ 0x7e
 8012eec:	5499      	strb	r1, [r3, r2]
            break;
 8012eee:	e31a      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8012ef0:	4b9a      	ldr	r3, [pc, #616]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8012ef2:	4a9c      	ldr	r2, [pc, #624]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8012ef4:	589b      	ldr	r3, [r3, r2]
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	6852      	ldr	r2, [r2, #4]
 8012efa:	649a      	str	r2, [r3, #72]	@ 0x48
            break;
 8012efc:	e313      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8012efe:	4b97      	ldr	r3, [pc, #604]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8012f00:	4a98      	ldr	r2, [pc, #608]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8012f02:	589b      	ldr	r3, [r3, r2]
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	6852      	ldr	r2, [r2, #4]
 8012f08:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 8012f0a:	e30c      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	685b      	ldr	r3, [r3, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d00a      	beq.n	8012f2a <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	0019      	movs	r1, r3
 8012f1a:	2000      	movs	r0, #0
 8012f1c:	f002 f9de 	bl	80152dc <LoRaMacCryptoSetKey>
 8012f20:	1e03      	subs	r3, r0, #0
 8012f22:	d100      	bne.n	8012f26 <LoRaMacMibSetRequestConfirm+0xf6>
 8012f24:	e2e8      	b.n	80134f8 <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f26:	2311      	movs	r3, #17
 8012f28:	e304      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f2a:	2317      	movs	r3, #23
 8012f2c:	18fb      	adds	r3, r7, r3
 8012f2e:	2203      	movs	r2, #3
 8012f30:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f32:	e2e1      	b.n	80134f8 <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d00a      	beq.n	8012f52 <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	0019      	movs	r1, r3
 8012f42:	2001      	movs	r0, #1
 8012f44:	f002 f9ca 	bl	80152dc <LoRaMacCryptoSetKey>
 8012f48:	1e03      	subs	r3, r0, #0
 8012f4a:	d100      	bne.n	8012f4e <LoRaMacMibSetRequestConfirm+0x11e>
 8012f4c:	e2d6      	b.n	80134fc <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f4e:	2311      	movs	r3, #17
 8012f50:	e2f0      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f52:	2317      	movs	r3, #23
 8012f54:	18fb      	adds	r3, r7, r3
 8012f56:	2203      	movs	r2, #3
 8012f58:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f5a:	e2cf      	b.n	80134fc <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00a      	beq.n	8012f7a <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	0019      	movs	r1, r3
 8012f6a:	2007      	movs	r0, #7
 8012f6c:	f002 f9b6 	bl	80152dc <LoRaMacCryptoSetKey>
 8012f70:	1e03      	subs	r3, r0, #0
 8012f72:	d100      	bne.n	8012f76 <LoRaMacMibSetRequestConfirm+0x146>
 8012f74:	e2c4      	b.n	8013500 <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f76:	2311      	movs	r3, #17
 8012f78:	e2dc      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f7a:	2317      	movs	r3, #23
 8012f7c:	18fb      	adds	r3, r7, r3
 8012f7e:	2203      	movs	r2, #3
 8012f80:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f82:	e2bd      	b.n	8013500 <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00a      	beq.n	8012fa2 <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	0019      	movs	r1, r3
 8012f92:	2008      	movs	r0, #8
 8012f94:	f002 f9a2 	bl	80152dc <LoRaMacCryptoSetKey>
 8012f98:	1e03      	subs	r3, r0, #0
 8012f9a:	d100      	bne.n	8012f9e <LoRaMacMibSetRequestConfirm+0x16e>
 8012f9c:	e2b2      	b.n	8013504 <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f9e:	2311      	movs	r3, #17
 8012fa0:	e2c8      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fa2:	2317      	movs	r3, #23
 8012fa4:	18fb      	adds	r3, r7, r3
 8012fa6:	2203      	movs	r2, #3
 8012fa8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012faa:	e2ab      	b.n	8013504 <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	685b      	ldr	r3, [r3, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00a      	beq.n	8012fca <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	0019      	movs	r1, r3
 8012fba:	207f      	movs	r0, #127	@ 0x7f
 8012fbc:	f002 f98e 	bl	80152dc <LoRaMacCryptoSetKey>
 8012fc0:	1e03      	subs	r3, r0, #0
 8012fc2:	d100      	bne.n	8012fc6 <LoRaMacMibSetRequestConfirm+0x196>
 8012fc4:	e2a0      	b.n	8013508 <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fc6:	2311      	movs	r3, #17
 8012fc8:	e2b4      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fca:	2317      	movs	r3, #23
 8012fcc:	18fb      	adds	r3, r7, r3
 8012fce:	2203      	movs	r2, #3
 8012fd0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012fd2:	e299      	b.n	8013508 <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d00a      	beq.n	8012ff2 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	0019      	movs	r1, r3
 8012fe2:	2080      	movs	r0, #128	@ 0x80
 8012fe4:	f002 f97a 	bl	80152dc <LoRaMacCryptoSetKey>
 8012fe8:	1e03      	subs	r3, r0, #0
 8012fea:	d100      	bne.n	8012fee <LoRaMacMibSetRequestConfirm+0x1be>
 8012fec:	e28e      	b.n	801350c <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fee:	2311      	movs	r3, #17
 8012ff0:	e2a0      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ff2:	2317      	movs	r3, #23
 8012ff4:	18fb      	adds	r3, r7, r3
 8012ff6:	2203      	movs	r2, #3
 8012ff8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ffa:	e287      	b.n	801350c <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d00a      	beq.n	801301a <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	685b      	ldr	r3, [r3, #4]
 8013008:	0019      	movs	r1, r3
 801300a:	2081      	movs	r0, #129	@ 0x81
 801300c:	f002 f966 	bl	80152dc <LoRaMacCryptoSetKey>
 8013010:	1e03      	subs	r3, r0, #0
 8013012:	d100      	bne.n	8013016 <LoRaMacMibSetRequestConfirm+0x1e6>
 8013014:	e27c      	b.n	8013510 <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013016:	2311      	movs	r3, #17
 8013018:	e28c      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801301a:	2317      	movs	r3, #23
 801301c:	18fb      	adds	r3, r7, r3
 801301e:	2203      	movs	r2, #3
 8013020:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013022:	e275      	b.n	8013510 <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d00a      	beq.n	8013042 <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	0019      	movs	r1, r3
 8013032:	2082      	movs	r0, #130	@ 0x82
 8013034:	f002 f952 	bl	80152dc <LoRaMacCryptoSetKey>
 8013038:	1e03      	subs	r3, r0, #0
 801303a:	d100      	bne.n	801303e <LoRaMacMibSetRequestConfirm+0x20e>
 801303c:	e26a      	b.n	8013514 <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801303e:	2311      	movs	r3, #17
 8013040:	e278      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013042:	2317      	movs	r3, #23
 8013044:	18fb      	adds	r3, r7, r3
 8013046:	2203      	movs	r2, #3
 8013048:	701a      	strb	r2, [r3, #0]
            }
            break;
 801304a:	e263      	b.n	8013514 <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801304c:	4b43      	ldr	r3, [pc, #268]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 801304e:	4a45      	ldr	r2, [pc, #276]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8013050:	589b      	ldr	r3, [r3, r2]
 8013052:	687a      	ldr	r2, [r7, #4]
 8013054:	7911      	ldrb	r1, [r2, #4]
 8013056:	227d      	movs	r2, #125	@ 0x7d
 8013058:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 801305a:	4b43      	ldr	r3, [pc, #268]	@ (8013168 <LoRaMacMibSetRequestConfirm+0x338>)
 801305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801305e:	4a3f      	ldr	r2, [pc, #252]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013060:	4940      	ldr	r1, [pc, #256]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8013062:	5852      	ldr	r2, [r2, r1]
 8013064:	217d      	movs	r1, #125	@ 0x7d
 8013066:	5c52      	ldrb	r2, [r2, r1]
 8013068:	0010      	movs	r0, r2
 801306a:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801306c:	4b3e      	ldr	r3, [pc, #248]	@ (8013168 <LoRaMacMibSetRequestConfirm+0x338>)
 801306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013070:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013072:	e258      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013074:	4b39      	ldr	r3, [pc, #228]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013076:	4a3b      	ldr	r2, [pc, #236]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8013078:	589b      	ldr	r3, [r3, r2]
 801307a:	687a      	ldr	r2, [r7, #4]
 801307c:	7911      	ldrb	r1, [r2, #4]
 801307e:	22ca      	movs	r2, #202	@ 0xca
 8013080:	5499      	strb	r1, [r3, r2]
            break;
 8013082:	e250      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	7a1b      	ldrb	r3, [r3, #8]
 8013088:	b25a      	sxtb	r2, r3
 801308a:	2108      	movs	r1, #8
 801308c:	187b      	adds	r3, r7, r1
 801308e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013090:	4b32      	ldr	r3, [pc, #200]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013092:	4a34      	ldr	r2, [pc, #208]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8013094:	589b      	ldr	r3, [r3, r2]
 8013096:	22b9      	movs	r2, #185	@ 0xb9
 8013098:	5c9a      	ldrb	r2, [r3, r2]
 801309a:	187b      	adds	r3, r7, r1
 801309c:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 801309e:	4b2f      	ldr	r3, [pc, #188]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 80130a0:	4a30      	ldr	r2, [pc, #192]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 80130a2:	589b      	ldr	r3, [r3, r2]
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	1879      	adds	r1, r7, r1
 80130a8:	2207      	movs	r2, #7
 80130aa:	0018      	movs	r0, r3
 80130ac:	f003 f83f 	bl	801612e <RegionVerify>
 80130b0:	0003      	movs	r3, r0
 80130b2:	001a      	movs	r2, r3
 80130b4:	2301      	movs	r3, #1
 80130b6:	4053      	eors	r3, r2
 80130b8:	b2db      	uxtb	r3, r3
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d004      	beq.n	80130c8 <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130be:	2317      	movs	r3, #23
 80130c0:	18fb      	adds	r3, r7, r3
 80130c2:	2203      	movs	r2, #3
 80130c4:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80130c6:	e22e      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	685a      	ldr	r2, [r3, #4]
 80130cc:	2108      	movs	r1, #8
 80130ce:	187b      	adds	r3, r7, r1
 80130d0:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 80130d2:	4b22      	ldr	r3, [pc, #136]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 80130d4:	4a23      	ldr	r2, [pc, #140]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 80130d6:	589b      	ldr	r3, [r3, r2]
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	1879      	adds	r1, r7, r1
 80130dc:	2200      	movs	r2, #0
 80130de:	0018      	movs	r0, r3
 80130e0:	f003 f825 	bl	801612e <RegionVerify>
 80130e4:	0003      	movs	r3, r0
 80130e6:	001a      	movs	r2, r3
 80130e8:	2301      	movs	r3, #1
 80130ea:	4053      	eors	r3, r2
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d004      	beq.n	80130fc <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130f2:	2317      	movs	r3, #23
 80130f4:	18fb      	adds	r3, r7, r3
 80130f6:	2203      	movs	r2, #3
 80130f8:	701a      	strb	r2, [r3, #0]
            break;
 80130fa:	e214      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80130fc:	4b17      	ldr	r3, [pc, #92]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 80130fe:	4a19      	ldr	r2, [pc, #100]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8013100:	589b      	ldr	r3, [r3, r2]
 8013102:	21a8      	movs	r1, #168	@ 0xa8
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	185b      	adds	r3, r3, r1
 8013108:	3204      	adds	r2, #4
 801310a:	ca03      	ldmia	r2!, {r0, r1}
 801310c:	c303      	stmia	r3!, {r0, r1}
            break;
 801310e:	e20a      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	7a1b      	ldrb	r3, [r3, #8]
 8013114:	b25a      	sxtb	r2, r3
 8013116:	2108      	movs	r1, #8
 8013118:	187b      	adds	r3, r7, r1
 801311a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801311c:	4b0f      	ldr	r3, [pc, #60]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 801311e:	4a11      	ldr	r2, [pc, #68]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8013120:	589b      	ldr	r3, [r3, r2]
 8013122:	22b9      	movs	r2, #185	@ 0xb9
 8013124:	5c9a      	ldrb	r2, [r3, r2]
 8013126:	187b      	adds	r3, r7, r1
 8013128:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 801312a:	4b0c      	ldr	r3, [pc, #48]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 801312c:	4a0d      	ldr	r2, [pc, #52]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 801312e:	589b      	ldr	r3, [r3, r2]
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	1879      	adds	r1, r7, r1
 8013134:	2207      	movs	r2, #7
 8013136:	0018      	movs	r0, r3
 8013138:	f002 fff9 	bl	801612e <RegionVerify>
 801313c:	1e03      	subs	r3, r0, #0
 801313e:	d008      	beq.n	8013152 <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013140:	4b06      	ldr	r3, [pc, #24]	@ (801315c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013142:	4a08      	ldr	r2, [pc, #32]	@ (8013164 <LoRaMacMibSetRequestConfirm+0x334>)
 8013144:	589b      	ldr	r3, [r3, r2]
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	3328      	adds	r3, #40	@ 0x28
 801314a:	3204      	adds	r2, #4
 801314c:	ca03      	ldmia	r2!, {r0, r1}
 801314e:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013150:	e1e9      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013152:	2317      	movs	r3, #23
 8013154:	18fb      	adds	r3, r7, r3
 8013156:	2203      	movs	r2, #3
 8013158:	701a      	strb	r2, [r3, #0]
            break;
 801315a:	e1e4      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
 801315c:	20000b6c 	.word	0x20000b6c
 8013160:	0801e25c 	.word	0x0801e25c
 8013164:	00000484 	.word	0x00000484
 8013168:	0801e62c 	.word	0x0801e62c
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	7a1b      	ldrb	r3, [r3, #8]
 8013170:	b25a      	sxtb	r2, r3
 8013172:	2108      	movs	r1, #8
 8013174:	187b      	adds	r3, r7, r1
 8013176:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013178:	4bda      	ldr	r3, [pc, #872]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801317a:	4adb      	ldr	r2, [pc, #876]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801317c:	589b      	ldr	r3, [r3, r2]
 801317e:	22b9      	movs	r2, #185	@ 0xb9
 8013180:	5c9a      	ldrb	r2, [r3, r2]
 8013182:	187b      	adds	r3, r7, r1
 8013184:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013186:	4bd7      	ldr	r3, [pc, #860]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013188:	4ad7      	ldr	r2, [pc, #860]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801318a:	589b      	ldr	r3, [r3, r2]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	1879      	adds	r1, r7, r1
 8013190:	2207      	movs	r2, #7
 8013192:	0018      	movs	r0, r3
 8013194:	f002 ffcb 	bl	801612e <RegionVerify>
 8013198:	1e03      	subs	r3, r0, #0
 801319a:	d01f      	beq.n	80131dc <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801319c:	4bd1      	ldr	r3, [pc, #836]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801319e:	4ad2      	ldr	r2, [pc, #840]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80131a0:	589b      	ldr	r3, [r3, r2]
 80131a2:	21b0      	movs	r1, #176	@ 0xb0
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	185b      	adds	r3, r3, r1
 80131a8:	3204      	adds	r2, #4
 80131aa:	ca03      	ldmia	r2!, {r0, r1}
 80131ac:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80131ae:	4bcd      	ldr	r3, [pc, #820]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80131b0:	4acd      	ldr	r2, [pc, #820]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80131b2:	589b      	ldr	r3, [r3, r2]
 80131b4:	227c      	movs	r2, #124	@ 0x7c
 80131b6:	5c9b      	ldrb	r3, [r3, r2]
 80131b8:	2b02      	cmp	r3, #2
 80131ba:	d000      	beq.n	80131be <LoRaMacMibSetRequestConfirm+0x38e>
 80131bc:	e1ac      	b.n	8013518 <LoRaMacMibSetRequestConfirm+0x6e8>
 80131be:	4bc9      	ldr	r3, [pc, #804]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80131c0:	4ac9      	ldr	r2, [pc, #804]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80131c2:	589a      	ldr	r2, [r3, r2]
 80131c4:	23b2      	movs	r3, #178	@ 0xb2
 80131c6:	005b      	lsls	r3, r3, #1
 80131c8:	5cd3      	ldrb	r3, [r2, r3]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d100      	bne.n	80131d0 <LoRaMacMibSetRequestConfirm+0x3a0>
 80131ce:	e1a3      	b.n	8013518 <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80131d0:	4bc6      	ldr	r3, [pc, #792]	@ (80134ec <LoRaMacMibSetRequestConfirm+0x6bc>)
 80131d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131d4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80131d6:	f7fe fa35 	bl	8011644 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80131da:	e19d      	b.n	8013518 <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131dc:	2317      	movs	r3, #23
 80131de:	18fb      	adds	r3, r7, r3
 80131e0:	2203      	movs	r2, #3
 80131e2:	701a      	strb	r2, [r3, #0]
            break;
 80131e4:	e198      	b.n	8013518 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	7a1b      	ldrb	r3, [r3, #8]
 80131ea:	b25a      	sxtb	r2, r3
 80131ec:	2108      	movs	r1, #8
 80131ee:	187b      	adds	r3, r7, r1
 80131f0:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80131f2:	4bbc      	ldr	r3, [pc, #752]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80131f4:	4abc      	ldr	r2, [pc, #752]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80131f6:	589b      	ldr	r3, [r3, r2]
 80131f8:	22b9      	movs	r2, #185	@ 0xb9
 80131fa:	5c9a      	ldrb	r2, [r3, r2]
 80131fc:	187b      	adds	r3, r7, r1
 80131fe:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013200:	4bb8      	ldr	r3, [pc, #736]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013202:	4ab9      	ldr	r2, [pc, #740]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013204:	589b      	ldr	r3, [r3, r2]
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	1879      	adds	r1, r7, r1
 801320a:	2207      	movs	r2, #7
 801320c:	0018      	movs	r0, r3
 801320e:	f002 ff8e 	bl	801612e <RegionVerify>
 8013212:	1e03      	subs	r3, r0, #0
 8013214:	d008      	beq.n	8013228 <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013216:	4bb3      	ldr	r3, [pc, #716]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013218:	4ab3      	ldr	r2, [pc, #716]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801321a:	589b      	ldr	r3, [r3, r2]
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	3330      	adds	r3, #48	@ 0x30
 8013220:	3204      	adds	r2, #4
 8013222:	ca03      	ldmia	r2!, {r0, r1}
 8013224:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013226:	e17e      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013228:	2317      	movs	r3, #23
 801322a:	18fb      	adds	r3, r7, r3
 801322c:	2203      	movs	r2, #3
 801322e:	701a      	strb	r2, [r3, #0]
            break;
 8013230:	e179      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	685a      	ldr	r2, [r3, #4]
 8013236:	210c      	movs	r1, #12
 8013238:	187b      	adds	r3, r7, r1
 801323a:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801323c:	187b      	adds	r3, r7, r1
 801323e:	2201      	movs	r2, #1
 8013240:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013242:	4ba8      	ldr	r3, [pc, #672]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013244:	4aa8      	ldr	r2, [pc, #672]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013246:	589b      	ldr	r3, [r3, r2]
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	187a      	adds	r2, r7, r1
 801324c:	0011      	movs	r1, r2
 801324e:	0018      	movs	r0, r3
 8013250:	f002 ff9f 	bl	8016192 <RegionChanMaskSet>
 8013254:	0003      	movs	r3, r0
 8013256:	001a      	movs	r2, r3
 8013258:	2301      	movs	r3, #1
 801325a:	4053      	eors	r3, r2
 801325c:	b2db      	uxtb	r3, r3
 801325e:	2b00      	cmp	r3, #0
 8013260:	d100      	bne.n	8013264 <LoRaMacMibSetRequestConfirm+0x434>
 8013262:	e15b      	b.n	801351c <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013264:	2317      	movs	r3, #23
 8013266:	18fb      	adds	r3, r7, r3
 8013268:	2203      	movs	r2, #3
 801326a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801326c:	e156      	b.n	801351c <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	685a      	ldr	r2, [r3, #4]
 8013272:	210c      	movs	r1, #12
 8013274:	187b      	adds	r3, r7, r1
 8013276:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013278:	187b      	adds	r3, r7, r1
 801327a:	2200      	movs	r2, #0
 801327c:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 801327e:	4b99      	ldr	r3, [pc, #612]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013280:	4a99      	ldr	r2, [pc, #612]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013282:	589b      	ldr	r3, [r3, r2]
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	187a      	adds	r2, r7, r1
 8013288:	0011      	movs	r1, r2
 801328a:	0018      	movs	r0, r3
 801328c:	f002 ff81 	bl	8016192 <RegionChanMaskSet>
 8013290:	0003      	movs	r3, r0
 8013292:	001a      	movs	r2, r3
 8013294:	2301      	movs	r3, #1
 8013296:	4053      	eors	r3, r2
 8013298:	b2db      	uxtb	r3, r3
 801329a:	2b00      	cmp	r3, #0
 801329c:	d100      	bne.n	80132a0 <LoRaMacMibSetRequestConfirm+0x470>
 801329e:	e13f      	b.n	8013520 <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132a0:	2317      	movs	r3, #23
 80132a2:	18fb      	adds	r3, r7, r3
 80132a4:	2203      	movs	r2, #3
 80132a6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80132a8:	e13a      	b.n	8013520 <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	791b      	ldrb	r3, [r3, #4]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d00b      	beq.n	80132ca <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80132b6:	2b0f      	cmp	r3, #15
 80132b8:	d807      	bhi.n	80132ca <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80132ba:	4b8a      	ldr	r3, [pc, #552]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132bc:	4a8a      	ldr	r2, [pc, #552]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132be:	589b      	ldr	r3, [r3, r2]
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	7911      	ldrb	r1, [r2, #4]
 80132c4:	22a4      	movs	r2, #164	@ 0xa4
 80132c6:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80132c8:	e12d      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132ca:	2317      	movs	r3, #23
 80132cc:	18fb      	adds	r3, r7, r3
 80132ce:	2203      	movs	r2, #3
 80132d0:	701a      	strb	r2, [r3, #0]
            break;
 80132d2:	e128      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80132d4:	4b83      	ldr	r3, [pc, #524]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132d6:	4a84      	ldr	r2, [pc, #528]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132d8:	589a      	ldr	r2, [r3, r2]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	2190      	movs	r1, #144	@ 0x90
 80132e0:	5053      	str	r3, [r2, r1]
            break;
 80132e2:	e120      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80132e4:	4b7f      	ldr	r3, [pc, #508]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132e6:	4a80      	ldr	r2, [pc, #512]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132e8:	589a      	ldr	r2, [r3, r2]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	2194      	movs	r1, #148	@ 0x94
 80132f0:	5053      	str	r3, [r2, r1]
            break;
 80132f2:	e118      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80132f4:	4b7b      	ldr	r3, [pc, #492]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132f6:	4a7c      	ldr	r2, [pc, #496]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132f8:	589a      	ldr	r2, [r3, r2]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	2198      	movs	r1, #152	@ 0x98
 8013300:	5053      	str	r3, [r2, r1]
            break;
 8013302:	e110      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013304:	4b77      	ldr	r3, [pc, #476]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013306:	4a78      	ldr	r2, [pc, #480]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013308:	589a      	ldr	r2, [r3, r2]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	219c      	movs	r1, #156	@ 0x9c
 8013310:	5053      	str	r3, [r2, r1]
            break;
 8013312:	e108      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013314:	4b73      	ldr	r3, [pc, #460]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013316:	4a74      	ldr	r2, [pc, #464]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013318:	589a      	ldr	r2, [r3, r2]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	21a0      	movs	r1, #160	@ 0xa0
 8013320:	5053      	str	r3, [r2, r1]
            break;
 8013322:	e100      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2204      	movs	r2, #4
 8013328:	569a      	ldrsb	r2, [r3, r2]
 801332a:	2408      	movs	r4, #8
 801332c:	193b      	adds	r3, r7, r4
 801332e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8013330:	4b6c      	ldr	r3, [pc, #432]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013332:	4a6d      	ldr	r2, [pc, #436]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013334:	589b      	ldr	r3, [r3, r2]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	1939      	adds	r1, r7, r4
 801333a:	2206      	movs	r2, #6
 801333c:	0018      	movs	r0, r3
 801333e:	f002 fef6 	bl	801612e <RegionVerify>
 8013342:	1e03      	subs	r3, r0, #0
 8013344:	d007      	beq.n	8013356 <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013346:	4b67      	ldr	r3, [pc, #412]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013348:	4a67      	ldr	r2, [pc, #412]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801334a:	589b      	ldr	r3, [r3, r2]
 801334c:	193a      	adds	r2, r7, r4
 801334e:	7812      	ldrb	r2, [r2, #0]
 8013350:	b252      	sxtb	r2, r2
 8013352:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013354:	e0e7      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013356:	2317      	movs	r3, #23
 8013358:	18fb      	adds	r3, r7, r3
 801335a:	2203      	movs	r2, #3
 801335c:	701a      	strb	r2, [r3, #0]
            break;
 801335e:	e0e2      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2204      	movs	r2, #4
 8013364:	569a      	ldrsb	r2, [r3, r2]
 8013366:	2408      	movs	r4, #8
 8013368:	193b      	adds	r3, r7, r4
 801336a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801336c:	4b5d      	ldr	r3, [pc, #372]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801336e:	4a5e      	ldr	r2, [pc, #376]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013370:	589b      	ldr	r3, [r3, r2]
 8013372:	22b8      	movs	r2, #184	@ 0xb8
 8013374:	5c9a      	ldrb	r2, [r3, r2]
 8013376:	193b      	adds	r3, r7, r4
 8013378:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 801337a:	4b5a      	ldr	r3, [pc, #360]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801337c:	4a5a      	ldr	r2, [pc, #360]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801337e:	589b      	ldr	r3, [r3, r2]
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	1939      	adds	r1, r7, r4
 8013384:	2205      	movs	r2, #5
 8013386:	0018      	movs	r0, r3
 8013388:	f002 fed1 	bl	801612e <RegionVerify>
 801338c:	1e03      	subs	r3, r0, #0
 801338e:	d008      	beq.n	80133a2 <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013390:	4b54      	ldr	r3, [pc, #336]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013392:	4a55      	ldr	r2, [pc, #340]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013394:	589b      	ldr	r3, [r3, r2]
 8013396:	193a      	adds	r2, r7, r4
 8013398:	2100      	movs	r1, #0
 801339a:	5651      	ldrsb	r1, [r2, r1]
 801339c:	2285      	movs	r2, #133	@ 0x85
 801339e:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80133a0:	e0c1      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133a2:	2317      	movs	r3, #23
 80133a4:	18fb      	adds	r3, r7, r3
 80133a6:	2203      	movs	r2, #3
 80133a8:	701a      	strb	r2, [r3, #0]
            break;
 80133aa:	e0bc      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2204      	movs	r2, #4
 80133b0:	569a      	ldrsb	r2, [r3, r2]
 80133b2:	2408      	movs	r4, #8
 80133b4:	193b      	adds	r3, r7, r4
 80133b6:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 80133b8:	4b4a      	ldr	r3, [pc, #296]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133ba:	4a4b      	ldr	r2, [pc, #300]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133bc:	589b      	ldr	r3, [r3, r2]
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	1939      	adds	r1, r7, r4
 80133c2:	220a      	movs	r2, #10
 80133c4:	0018      	movs	r0, r3
 80133c6:	f002 feb2 	bl	801612e <RegionVerify>
 80133ca:	1e03      	subs	r3, r0, #0
 80133cc:	d007      	beq.n	80133de <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80133ce:	4b45      	ldr	r3, [pc, #276]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133d0:	4a45      	ldr	r2, [pc, #276]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133d2:	589b      	ldr	r3, [r3, r2]
 80133d4:	193a      	adds	r2, r7, r4
 80133d6:	7812      	ldrb	r2, [r2, #0]
 80133d8:	b252      	sxtb	r2, r2
 80133da:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80133dc:	e0a3      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133de:	2317      	movs	r3, #23
 80133e0:	18fb      	adds	r3, r7, r3
 80133e2:	2203      	movs	r2, #3
 80133e4:	701a      	strb	r2, [r3, #0]
            break;
 80133e6:	e09e      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2204      	movs	r2, #4
 80133ec:	569a      	ldrsb	r2, [r3, r2]
 80133ee:	2408      	movs	r4, #8
 80133f0:	193b      	adds	r3, r7, r4
 80133f2:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 80133f4:	4b3b      	ldr	r3, [pc, #236]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133f6:	4a3c      	ldr	r2, [pc, #240]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133f8:	589b      	ldr	r3, [r3, r2]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	1939      	adds	r1, r7, r4
 80133fe:	2209      	movs	r2, #9
 8013400:	0018      	movs	r0, r3
 8013402:	f002 fe94 	bl	801612e <RegionVerify>
 8013406:	1e03      	subs	r3, r0, #0
 8013408:	d008      	beq.n	801341c <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 801340a:	4b36      	ldr	r3, [pc, #216]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801340c:	4a36      	ldr	r2, [pc, #216]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801340e:	589b      	ldr	r3, [r3, r2]
 8013410:	193a      	adds	r2, r7, r4
 8013412:	2100      	movs	r1, #0
 8013414:	5651      	ldrsb	r1, [r2, r1]
 8013416:	2284      	movs	r2, #132	@ 0x84
 8013418:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801341a:	e084      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801341c:	2317      	movs	r3, #23
 801341e:	18fb      	adds	r3, r7, r3
 8013420:	2203      	movs	r2, #3
 8013422:	701a      	strb	r2, [r3, #0]
            break;
 8013424:	e07f      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013426:	4b2f      	ldr	r3, [pc, #188]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013428:	4a2f      	ldr	r2, [pc, #188]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801342a:	589b      	ldr	r3, [r3, r2]
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	6852      	ldr	r2, [r2, #4]
 8013430:	609a      	str	r2, [r3, #8]
 8013432:	4a2c      	ldr	r2, [pc, #176]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013434:	492c      	ldr	r1, [pc, #176]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013436:	5852      	ldr	r2, [r2, r1]
 8013438:	689b      	ldr	r3, [r3, #8]
 801343a:	2188      	movs	r1, #136	@ 0x88
 801343c:	5053      	str	r3, [r2, r1]
            break;
 801343e:	e072      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013440:	4b28      	ldr	r3, [pc, #160]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013442:	4a29      	ldr	r2, [pc, #164]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013444:	589b      	ldr	r3, [r3, r2]
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	7912      	ldrb	r2, [r2, #4]
 801344a:	731a      	strb	r2, [r3, #12]
 801344c:	4a25      	ldr	r2, [pc, #148]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801344e:	4926      	ldr	r1, [pc, #152]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013450:	5852      	ldr	r2, [r2, r1]
 8013452:	7b19      	ldrb	r1, [r3, #12]
 8013454:	238c      	movs	r3, #140	@ 0x8c
 8013456:	54d1      	strb	r1, [r2, r3]
            break;
 8013458:	e065      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801345a:	4b22      	ldr	r3, [pc, #136]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801345c:	4a22      	ldr	r2, [pc, #136]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801345e:	589a      	ldr	r2, [r3, r2]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	21c0      	movs	r1, #192	@ 0xc0
 8013466:	5053      	str	r3, [r2, r1]
            break;
 8013468:	e05d      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801346a:	4b1e      	ldr	r3, [pc, #120]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801346c:	4a1e      	ldr	r2, [pc, #120]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801346e:	589b      	ldr	r3, [r3, r2]
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	6852      	ldr	r2, [r2, #4]
 8013474:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8013476:	e056      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d009      	beq.n	8013494 <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	2217      	movs	r2, #23
 8013486:	18bc      	adds	r4, r7, r2
 8013488:	0018      	movs	r0, r3
 801348a:	f7fe fc1b 	bl	8011cc4 <RestoreCtxs>
 801348e:	0003      	movs	r3, r0
 8013490:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013492:	e048      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013494:	2317      	movs	r3, #23
 8013496:	18fb      	adds	r3, r7, r3
 8013498:	2203      	movs	r2, #3
 801349a:	701a      	strb	r2, [r3, #0]
            break;
 801349c:	e043      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	799b      	ldrb	r3, [r3, #6]
 80134a2:	2b01      	cmp	r3, #1
 80134a4:	d810      	bhi.n	80134c8 <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 80134a6:	4b0f      	ldr	r3, [pc, #60]	@ (80134e4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80134a8:	4a0f      	ldr	r2, [pc, #60]	@ (80134e8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80134aa:	5899      	ldr	r1, [r3, r2]
 80134ac:	23b0      	movs	r3, #176	@ 0xb0
 80134ae:	005a      	lsls	r2, r3, #1
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	0018      	movs	r0, r3
 80134bc:	f001 fe20 	bl	8015100 <LoRaMacCryptoSetLrWanVersion>
 80134c0:	1e03      	subs	r3, r0, #0
 80134c2:	d02f      	beq.n	8013524 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80134c4:	2311      	movs	r3, #17
 80134c6:	e035      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134c8:	2317      	movs	r3, #23
 80134ca:	18fb      	adds	r3, r7, r3
 80134cc:	2203      	movs	r2, #3
 80134ce:	701a      	strb	r2, [r3, #0]
            }
            break;
 80134d0:	e028      	b.n	8013524 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80134d2:	2317      	movs	r3, #23
 80134d4:	18fc      	adds	r4, r7, r3
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	0018      	movs	r0, r3
 80134da:	f000 fc8f 	bl	8013dfc <LoRaMacMibClassBSetRequestConfirm>
 80134de:	0003      	movs	r3, r0
 80134e0:	7023      	strb	r3, [r4, #0]
            break;
 80134e2:	e020      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
 80134e4:	20000b6c 	.word	0x20000b6c
 80134e8:	00000484 	.word	0x00000484
 80134ec:	0801e62c 	.word	0x0801e62c
            break;
 80134f0:	46c0      	nop			@ (mov r8, r8)
 80134f2:	e018      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134f4:	46c0      	nop			@ (mov r8, r8)
 80134f6:	e016      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134f8:	46c0      	nop			@ (mov r8, r8)
 80134fa:	e014      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134fc:	46c0      	nop			@ (mov r8, r8)
 80134fe:	e012      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013500:	46c0      	nop			@ (mov r8, r8)
 8013502:	e010      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013504:	46c0      	nop			@ (mov r8, r8)
 8013506:	e00e      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013508:	46c0      	nop			@ (mov r8, r8)
 801350a:	e00c      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801350c:	46c0      	nop			@ (mov r8, r8)
 801350e:	e00a      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013510:	46c0      	nop			@ (mov r8, r8)
 8013512:	e008      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013514:	46c0      	nop			@ (mov r8, r8)
 8013516:	e006      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013518:	46c0      	nop			@ (mov r8, r8)
 801351a:	e004      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801351c:	46c0      	nop			@ (mov r8, r8)
 801351e:	e002      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013520:	46c0      	nop			@ (mov r8, r8)
 8013522:	e000      	b.n	8013526 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013524:	46c0      	nop			@ (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 8013526:	f7fe fe19 	bl	801215c <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 801352a:	f7fe fe0f 	bl	801214c <EventMacNvmCtxChanged>
    return status;
 801352e:	2317      	movs	r3, #23
 8013530:	18fb      	adds	r3, r7, r3
 8013532:	781b      	ldrb	r3, [r3, #0]
}
 8013534:	0018      	movs	r0, r3
 8013536:	46bd      	mov	sp, r7
 8013538:	b007      	add	sp, #28
 801353a:	bd90      	pop	{r4, r7, pc}

0801353c <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801353c:	b5b0      	push	{r4, r5, r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013544:	2317      	movs	r3, #23
 8013546:	18fb      	adds	r3, r7, r3
 8013548:	2202      	movs	r2, #2
 801354a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801354c:	230c      	movs	r3, #12
 801354e:	18fb      	adds	r3, r7, r3
 8013550:	2200      	movs	r2, #0
 8013552:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d101      	bne.n	801355e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801355a:	2303      	movs	r3, #3
 801355c:	e133      	b.n	80137c6 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 801355e:	f7fe fe49 	bl	80121f4 <LoRaMacIsBusy>
 8013562:	1e03      	subs	r3, r0, #0
 8013564:	d001      	beq.n	801356a <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 8013566:	2301      	movs	r3, #1
 8013568:	e12d      	b.n	80137c6 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801356a:	f001 fa0b 	bl	8014984 <LoRaMacConfirmQueueIsFull>
 801356e:	1e03      	subs	r3, r0, #0
 8013570:	d001      	beq.n	8013576 <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 8013572:	2301      	movs	r3, #1
 8013574:	e127      	b.n	80137c6 <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013576:	f001 f9fb 	bl	8014970 <LoRaMacConfirmQueueGetCnt>
 801357a:	1e03      	subs	r3, r0, #0
 801357c:	d105      	bne.n	801358a <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801357e:	4b94      	ldr	r3, [pc, #592]	@ (80137d0 <LoRaMacMlmeRequest+0x294>)
 8013580:	2214      	movs	r2, #20
 8013582:	2100      	movs	r1, #0
 8013584:	0018      	movs	r0, r3
 8013586:	f005 fa2d 	bl	80189e4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801358a:	4b92      	ldr	r3, [pc, #584]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 801358c:	4a92      	ldr	r2, [pc, #584]	@ (80137d8 <LoRaMacMlmeRequest+0x29c>)
 801358e:	2101      	movs	r1, #1
 8013590:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013592:	4b90      	ldr	r3, [pc, #576]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 8013594:	4a91      	ldr	r2, [pc, #580]	@ (80137dc <LoRaMacMlmeRequest+0x2a0>)
 8013596:	5c99      	ldrb	r1, [r3, r2]
 8013598:	2004      	movs	r0, #4
 801359a:	4301      	orrs	r1, r0
 801359c:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	781a      	ldrb	r2, [r3, #0]
 80135a2:	2110      	movs	r1, #16
 80135a4:	187b      	adds	r3, r7, r1
 80135a6:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80135a8:	187b      	adds	r3, r7, r1
 80135aa:	2201      	movs	r2, #1
 80135ac:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 80135ae:	187b      	adds	r3, r7, r1
 80135b0:	2200      	movs	r2, #0
 80135b2:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	2b0e      	cmp	r3, #14
 80135ba:	d900      	bls.n	80135be <LoRaMacMlmeRequest+0x82>
 80135bc:	e0d4      	b.n	8013768 <LoRaMacMlmeRequest+0x22c>
 80135be:	009a      	lsls	r2, r3, #2
 80135c0:	4b87      	ldr	r3, [pc, #540]	@ (80137e0 <LoRaMacMlmeRequest+0x2a4>)
 80135c2:	18d3      	adds	r3, r2, r3
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80135c8:	4a82      	ldr	r2, [pc, #520]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 80135ca:	23d0      	movs	r3, #208	@ 0xd0
 80135cc:	009b      	lsls	r3, r3, #2
 80135ce:	58d3      	ldr	r3, [r2, r3]
 80135d0:	2220      	movs	r2, #32
 80135d2:	4013      	ands	r3, r2
 80135d4:	d001      	beq.n	80135da <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 80135d6:	2301      	movs	r3, #1
 80135d8:	e0f5      	b.n	80137c6 <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 80135da:	f7fd ff01 	bl	80113e0 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80135de:	4b7d      	ldr	r3, [pc, #500]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 80135e0:	4a80      	ldr	r2, [pc, #512]	@ (80137e4 <LoRaMacMlmeRequest+0x2a8>)
 80135e2:	589b      	ldr	r3, [r3, r2]
 80135e4:	7818      	ldrb	r0, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	791b      	ldrb	r3, [r3, #4]
 80135ea:	b259      	sxtb	r1, r3
 80135ec:	4b79      	ldr	r3, [pc, #484]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 80135ee:	4a7d      	ldr	r2, [pc, #500]	@ (80137e4 <LoRaMacMlmeRequest+0x2a8>)
 80135f0:	589c      	ldr	r4, [r3, r2]
 80135f2:	2200      	movs	r2, #0
 80135f4:	f002 feb2 	bl	801635c <RegionAlternateDr>
 80135f8:	0003      	movs	r3, r0
 80135fa:	001a      	movs	r2, r3
 80135fc:	2385      	movs	r3, #133	@ 0x85
 80135fe:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013600:	2310      	movs	r3, #16
 8013602:	18fb      	adds	r3, r7, r3
 8013604:	2207      	movs	r2, #7
 8013606:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 8013608:	2517      	movs	r5, #23
 801360a:	197c      	adds	r4, r7, r5
 801360c:	20ff      	movs	r0, #255	@ 0xff
 801360e:	f7fd fbad 	bl	8010d6c <SendReJoinReq>
 8013612:	0003      	movs	r3, r0
 8013614:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 8013616:	197b      	adds	r3, r7, r5
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d100      	bne.n	8013620 <LoRaMacMlmeRequest+0xe4>
 801361e:	e0a5      	b.n	801376c <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013620:	4b6c      	ldr	r3, [pc, #432]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 8013622:	4a70      	ldr	r2, [pc, #448]	@ (80137e4 <LoRaMacMlmeRequest+0x2a8>)
 8013624:	589b      	ldr	r3, [r3, r2]
 8013626:	7818      	ldrb	r0, [r3, #0]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	791b      	ldrb	r3, [r3, #4]
 801362c:	b259      	sxtb	r1, r3
 801362e:	4b69      	ldr	r3, [pc, #420]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 8013630:	4a6c      	ldr	r2, [pc, #432]	@ (80137e4 <LoRaMacMlmeRequest+0x2a8>)
 8013632:	589c      	ldr	r4, [r3, r2]
 8013634:	2201      	movs	r2, #1
 8013636:	f002 fe91 	bl	801635c <RegionAlternateDr>
 801363a:	0003      	movs	r3, r0
 801363c:	001a      	movs	r2, r3
 801363e:	2385      	movs	r3, #133	@ 0x85
 8013640:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8013642:	e093      	b.n	801376c <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013644:	2417      	movs	r4, #23
 8013646:	193b      	adds	r3, r7, r4
 8013648:	2200      	movs	r2, #0
 801364a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801364c:	230c      	movs	r3, #12
 801364e:	18fb      	adds	r3, r7, r3
 8013650:	2200      	movs	r2, #0
 8013652:	0019      	movs	r1, r3
 8013654:	2002      	movs	r0, #2
 8013656:	f000 fd7d 	bl	8014154 <LoRaMacCommandsAddCmd>
 801365a:	1e03      	subs	r3, r0, #0
 801365c:	d100      	bne.n	8013660 <LoRaMacMlmeRequest+0x124>
 801365e:	e087      	b.n	8013770 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013660:	193b      	adds	r3, r7, r4
 8013662:	2213      	movs	r2, #19
 8013664:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013666:	e083      	b.n	8013770 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	889b      	ldrh	r3, [r3, #4]
 801366c:	2217      	movs	r2, #23
 801366e:	18bc      	adds	r4, r7, r2
 8013670:	0018      	movs	r0, r3
 8013672:	f7fe fa5d 	bl	8011b30 <SetTxContinuousWave>
 8013676:	0003      	movs	r3, r0
 8013678:	7023      	strb	r3, [r4, #0]
            break;
 801367a:	e080      	b.n	801377e <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	8898      	ldrh	r0, [r3, #4]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6899      	ldr	r1, [r3, #8]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	7b1b      	ldrb	r3, [r3, #12]
 8013688:	2217      	movs	r2, #23
 801368a:	18bc      	adds	r4, r7, r2
 801368c:	001a      	movs	r2, r3
 801368e:	f7fe fa9b 	bl	8011bc8 <SetTxContinuousWave1>
 8013692:	0003      	movs	r3, r0
 8013694:	7023      	strb	r3, [r4, #0]
            break;
 8013696:	e072      	b.n	801377e <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013698:	2417      	movs	r4, #23
 801369a:	193b      	adds	r3, r7, r4
 801369c:	2200      	movs	r2, #0
 801369e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80136a0:	230c      	movs	r3, #12
 80136a2:	18fb      	adds	r3, r7, r3
 80136a4:	2200      	movs	r2, #0
 80136a6:	0019      	movs	r1, r3
 80136a8:	200d      	movs	r0, #13
 80136aa:	f000 fd53 	bl	8014154 <LoRaMacCommandsAddCmd>
 80136ae:	1e03      	subs	r3, r0, #0
 80136b0:	d060      	beq.n	8013774 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80136b2:	193b      	adds	r3, r7, r4
 80136b4:	2213      	movs	r2, #19
 80136b6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80136b8:	e05c      	b.n	8013774 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80136ba:	4b46      	ldr	r3, [pc, #280]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 80136bc:	4a49      	ldr	r2, [pc, #292]	@ (80137e4 <LoRaMacMlmeRequest+0x2a8>)
 80136be:	589b      	ldr	r3, [r3, r2]
 80136c0:	227c      	movs	r2, #124	@ 0x7c
 80136c2:	5c9b      	ldrb	r3, [r3, r2]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d157      	bne.n	8013778 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80136c8:	2416      	movs	r4, #22
 80136ca:	193b      	adds	r3, r7, r4
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	7912      	ldrb	r2, [r2, #4]
 80136d0:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	791b      	ldrb	r3, [r3, #4]
 80136d6:	075b      	lsls	r3, r3, #29
 80136d8:	0f5b      	lsrs	r3, r3, #29
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	0018      	movs	r0, r3
 80136de:	f000 fb65 	bl	8013dac <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80136e2:	210c      	movs	r1, #12
 80136e4:	187b      	adds	r3, r7, r1
 80136e6:	193a      	adds	r2, r7, r4
 80136e8:	7812      	ldrb	r2, [r2, #0]
 80136ea:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 80136ec:	2417      	movs	r4, #23
 80136ee:	193b      	adds	r3, r7, r4
 80136f0:	2200      	movs	r2, #0
 80136f2:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80136f4:	187b      	adds	r3, r7, r1
 80136f6:	2201      	movs	r2, #1
 80136f8:	0019      	movs	r1, r3
 80136fa:	2010      	movs	r0, #16
 80136fc:	f000 fd2a 	bl	8014154 <LoRaMacCommandsAddCmd>
 8013700:	1e03      	subs	r3, r0, #0
 8013702:	d039      	beq.n	8013778 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013704:	193b      	adds	r3, r7, r4
 8013706:	2213      	movs	r2, #19
 8013708:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 801370a:	e035      	b.n	8013778 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801370c:	2417      	movs	r4, #23
 801370e:	193b      	adds	r3, r7, r4
 8013710:	2200      	movs	r2, #0
 8013712:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013714:	230c      	movs	r3, #12
 8013716:	18fb      	adds	r3, r7, r3
 8013718:	2200      	movs	r2, #0
 801371a:	0019      	movs	r1, r3
 801371c:	2012      	movs	r0, #18
 801371e:	f000 fd19 	bl	8014154 <LoRaMacCommandsAddCmd>
 8013722:	1e03      	subs	r3, r0, #0
 8013724:	d02a      	beq.n	801377c <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013726:	193b      	adds	r3, r7, r4
 8013728:	2213      	movs	r2, #19
 801372a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801372c:	e026      	b.n	801377c <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801372e:	2310      	movs	r3, #16
 8013730:	18fb      	adds	r3, r7, r3
 8013732:	2201      	movs	r2, #1
 8013734:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013736:	f000 faf7 	bl	8013d28 <LoRaMacClassBIsAcquisitionInProgress>
 801373a:	0003      	movs	r3, r0
 801373c:	001a      	movs	r2, r3
 801373e:	2301      	movs	r3, #1
 8013740:	4053      	eors	r3, r2
 8013742:	b2db      	uxtb	r3, r3
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00a      	beq.n	801375e <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013748:	2000      	movs	r0, #0
 801374a:	f000 facf 	bl	8013cec <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801374e:	2000      	movs	r0, #0
 8013750:	f000 faf0 	bl	8013d34 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013754:	2317      	movs	r3, #23
 8013756:	18fb      	adds	r3, r7, r3
 8013758:	2200      	movs	r2, #0
 801375a:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801375c:	e00f      	b.n	801377e <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 801375e:	2317      	movs	r3, #23
 8013760:	18fb      	adds	r3, r7, r3
 8013762:	2201      	movs	r2, #1
 8013764:	701a      	strb	r2, [r3, #0]
            break;
 8013766:	e00a      	b.n	801377e <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 8013768:	46c0      	nop			@ (mov r8, r8)
 801376a:	e008      	b.n	801377e <LoRaMacMlmeRequest+0x242>
            break;
 801376c:	46c0      	nop			@ (mov r8, r8)
 801376e:	e006      	b.n	801377e <LoRaMacMlmeRequest+0x242>
            break;
 8013770:	46c0      	nop			@ (mov r8, r8)
 8013772:	e004      	b.n	801377e <LoRaMacMlmeRequest+0x242>
            break;
 8013774:	46c0      	nop			@ (mov r8, r8)
 8013776:	e002      	b.n	801377e <LoRaMacMlmeRequest+0x242>
            break;
 8013778:	46c0      	nop			@ (mov r8, r8)
 801377a:	e000      	b.n	801377e <LoRaMacMlmeRequest+0x242>
            break;
 801377c:	46c0      	nop			@ (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801377e:	4a15      	ldr	r2, [pc, #84]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 8013780:	2391      	movs	r3, #145	@ 0x91
 8013782:	00db      	lsls	r3, r3, #3
 8013784:	58d2      	ldr	r2, [r2, r3]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801378a:	2317      	movs	r3, #23
 801378c:	18fb      	adds	r3, r7, r3
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d00e      	beq.n	80137b2 <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013794:	f001 f8ec 	bl	8014970 <LoRaMacConfirmQueueGetCnt>
 8013798:	1e03      	subs	r3, r0, #0
 801379a:	d111      	bne.n	80137c0 <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 801379c:	4b0d      	ldr	r3, [pc, #52]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 801379e:	4a12      	ldr	r2, [pc, #72]	@ (80137e8 <LoRaMacMlmeRequest+0x2ac>)
 80137a0:	2100      	movs	r1, #0
 80137a2:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80137a4:	4b0b      	ldr	r3, [pc, #44]	@ (80137d4 <LoRaMacMlmeRequest+0x298>)
 80137a6:	4a0d      	ldr	r2, [pc, #52]	@ (80137dc <LoRaMacMlmeRequest+0x2a0>)
 80137a8:	5c99      	ldrb	r1, [r3, r2]
 80137aa:	2004      	movs	r0, #4
 80137ac:	4381      	bics	r1, r0
 80137ae:	5499      	strb	r1, [r3, r2]
 80137b0:	e006      	b.n	80137c0 <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80137b2:	2310      	movs	r3, #16
 80137b4:	18fb      	adds	r3, r7, r3
 80137b6:	0018      	movs	r0, r3
 80137b8:	f000 ff6c 	bl	8014694 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 80137bc:	f7fe fcc6 	bl	801214c <EventMacNvmCtxChanged>
    }
    return status;
 80137c0:	2317      	movs	r3, #23
 80137c2:	18fb      	adds	r3, r7, r3
 80137c4:	781b      	ldrb	r3, [r3, #0]
}
 80137c6:	0018      	movs	r0, r3
 80137c8:	46bd      	mov	sp, r7
 80137ca:	b006      	add	sp, #24
 80137cc:	bdb0      	pop	{r4, r5, r7, pc}
 80137ce:	46c0      	nop			@ (mov r8, r8)
 80137d0:	20000fbc 	.word	0x20000fbc
 80137d4:	20000b6c 	.word	0x20000b6c
 80137d8:	00000451 	.word	0x00000451
 80137dc:	00000481 	.word	0x00000481
 80137e0:	0801e310 	.word	0x0801e310
 80137e4:	00000484 	.word	0x00000484
 80137e8:	00000414 	.word	0x00000414

080137ec <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80137ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137ee:	b08d      	sub	sp, #52	@ 0x34
 80137f0:	af02      	add	r7, sp, #8
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	000a      	movs	r2, r1
 80137f6:	1cfb      	adds	r3, r7, #3
 80137f8:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80137fa:	2327      	movs	r3, #39	@ 0x27
 80137fc:	18fb      	adds	r3, r7, r3
 80137fe:	2202      	movs	r2, #2
 8013800:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8013802:	2326      	movs	r3, #38	@ 0x26
 8013804:	18fb      	adds	r3, r7, r3
 8013806:	2200      	movs	r2, #0
 8013808:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801380a:	231d      	movs	r3, #29
 801380c:	18fb      	adds	r3, r7, r3
 801380e:	2200      	movs	r2, #0
 8013810:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 8013812:	231c      	movs	r3, #28
 8013814:	18fb      	adds	r3, r7, r3
 8013816:	2200      	movs	r2, #0
 8013818:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d101      	bne.n	8013824 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013820:	2303      	movs	r3, #3
 8013822:	e11b      	b.n	8013a5c <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 8013824:	f7fe fce6 	bl	80121f4 <LoRaMacIsBusy>
 8013828:	1e03      	subs	r3, r0, #0
 801382a:	d001      	beq.n	8013830 <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 801382c:	2301      	movs	r3, #1
 801382e:	e115      	b.n	8013a5c <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 8013830:	230c      	movs	r3, #12
 8013832:	18fb      	adds	r3, r7, r3
 8013834:	2200      	movs	r2, #0
 8013836:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013838:	4b8a      	ldr	r3, [pc, #552]	@ (8013a64 <LoRaMacMcpsRequest+0x278>)
 801383a:	2214      	movs	r2, #20
 801383c:	2100      	movs	r1, #0
 801383e:	0018      	movs	r0, r3
 8013840:	f005 f8d0 	bl	80189e4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013844:	4b88      	ldr	r3, [pc, #544]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 8013846:	4a89      	ldr	r2, [pc, #548]	@ (8013a6c <LoRaMacMcpsRequest+0x280>)
 8013848:	2101      	movs	r1, #1
 801384a:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 801384c:	4b86      	ldr	r3, [pc, #536]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 801384e:	4a88      	ldr	r2, [pc, #544]	@ (8013a70 <LoRaMacMcpsRequest+0x284>)
 8013850:	2101      	movs	r1, #1
 8013852:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	2b03      	cmp	r3, #3
 801385a:	d056      	beq.n	801390a <LoRaMacMcpsRequest+0x11e>
 801385c:	dc72      	bgt.n	8013944 <LoRaMacMcpsRequest+0x158>
 801385e:	2b00      	cmp	r3, #0
 8013860:	d002      	beq.n	8013868 <LoRaMacMcpsRequest+0x7c>
 8013862:	2b01      	cmp	r3, #1
 8013864:	d024      	beq.n	80138b0 <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013866:	e06d      	b.n	8013944 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 8013868:	231c      	movs	r3, #28
 801386a:	18fb      	adds	r3, r7, r3
 801386c:	2201      	movs	r2, #1
 801386e:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8013870:	4b7d      	ldr	r3, [pc, #500]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 8013872:	4a80      	ldr	r2, [pc, #512]	@ (8013a74 <LoRaMacMcpsRequest+0x288>)
 8013874:	2101      	movs	r1, #1
 8013876:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013878:	230c      	movs	r3, #12
 801387a:	18fb      	adds	r3, r7, r3
 801387c:	781a      	ldrb	r2, [r3, #0]
 801387e:	211f      	movs	r1, #31
 8013880:	400a      	ands	r2, r1
 8013882:	1c11      	adds	r1, r2, #0
 8013884:	2240      	movs	r2, #64	@ 0x40
 8013886:	430a      	orrs	r2, r1
 8013888:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801388a:	2326      	movs	r3, #38	@ 0x26
 801388c:	18fb      	adds	r3, r7, r3
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	7912      	ldrb	r2, [r2, #4]
 8013892:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	689b      	ldr	r3, [r3, #8]
 8013898:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 801389a:	231e      	movs	r3, #30
 801389c:	18fb      	adds	r3, r7, r3
 801389e:	687a      	ldr	r2, [r7, #4]
 80138a0:	8992      	ldrh	r2, [r2, #12]
 80138a2:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80138a4:	231d      	movs	r3, #29
 80138a6:	18fb      	adds	r3, r7, r3
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	7b92      	ldrb	r2, [r2, #14]
 80138ac:	701a      	strb	r2, [r3, #0]
            break;
 80138ae:	e04a      	b.n	8013946 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 80138b0:	231c      	movs	r3, #28
 80138b2:	18fb      	adds	r3, r7, r3
 80138b4:	2201      	movs	r2, #1
 80138b6:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	7bdb      	ldrb	r3, [r3, #15]
 80138bc:	1c1a      	adds	r2, r3, #0
 80138be:	b2d3      	uxtb	r3, r2
 80138c0:	2b08      	cmp	r3, #8
 80138c2:	d901      	bls.n	80138c8 <LoRaMacMcpsRequest+0xdc>
 80138c4:	2308      	movs	r3, #8
 80138c6:	1c1a      	adds	r2, r3, #0
 80138c8:	b2d1      	uxtb	r1, r2
 80138ca:	4b67      	ldr	r3, [pc, #412]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 80138cc:	4a69      	ldr	r2, [pc, #420]	@ (8013a74 <LoRaMacMcpsRequest+0x288>)
 80138ce:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80138d0:	230c      	movs	r3, #12
 80138d2:	18fb      	adds	r3, r7, r3
 80138d4:	781a      	ldrb	r2, [r3, #0]
 80138d6:	211f      	movs	r1, #31
 80138d8:	400a      	ands	r2, r1
 80138da:	1c11      	adds	r1, r2, #0
 80138dc:	2280      	movs	r2, #128	@ 0x80
 80138de:	4252      	negs	r2, r2
 80138e0:	430a      	orrs	r2, r1
 80138e2:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80138e4:	2326      	movs	r3, #38	@ 0x26
 80138e6:	18fb      	adds	r3, r7, r3
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	7912      	ldrb	r2, [r2, #4]
 80138ec:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	689b      	ldr	r3, [r3, #8]
 80138f2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80138f4:	231e      	movs	r3, #30
 80138f6:	18fb      	adds	r3, r7, r3
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	8992      	ldrh	r2, [r2, #12]
 80138fc:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80138fe:	231d      	movs	r3, #29
 8013900:	18fb      	adds	r3, r7, r3
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	7b92      	ldrb	r2, [r2, #14]
 8013906:	701a      	strb	r2, [r3, #0]
            break;
 8013908:	e01d      	b.n	8013946 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 801390a:	231c      	movs	r3, #28
 801390c:	18fb      	adds	r3, r7, r3
 801390e:	2201      	movs	r2, #1
 8013910:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8013912:	4b55      	ldr	r3, [pc, #340]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 8013914:	4a57      	ldr	r2, [pc, #348]	@ (8013a74 <LoRaMacMcpsRequest+0x288>)
 8013916:	2101      	movs	r1, #1
 8013918:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801391a:	230c      	movs	r3, #12
 801391c:	18fb      	adds	r3, r7, r3
 801391e:	781a      	ldrb	r2, [r3, #0]
 8013920:	2120      	movs	r1, #32
 8013922:	4249      	negs	r1, r1
 8013924:	430a      	orrs	r2, r1
 8013926:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 801392e:	231e      	movs	r3, #30
 8013930:	18fb      	adds	r3, r7, r3
 8013932:	687a      	ldr	r2, [r7, #4]
 8013934:	8912      	ldrh	r2, [r2, #8]
 8013936:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8013938:	231d      	movs	r3, #29
 801393a:	18fb      	adds	r3, r7, r3
 801393c:	687a      	ldr	r2, [r7, #4]
 801393e:	7a92      	ldrb	r2, [r2, #10]
 8013940:	701a      	strb	r2, [r3, #0]
            break;
 8013942:	e000      	b.n	8013946 <LoRaMacMcpsRequest+0x15a>
            break;
 8013944:	46c0      	nop			@ (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013946:	2114      	movs	r1, #20
 8013948:	187b      	adds	r3, r7, r1
 801394a:	2202      	movs	r2, #2
 801394c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801394e:	4b46      	ldr	r3, [pc, #280]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 8013950:	4a49      	ldr	r2, [pc, #292]	@ (8013a78 <LoRaMacMcpsRequest+0x28c>)
 8013952:	589b      	ldr	r3, [r3, r2]
 8013954:	22b8      	movs	r2, #184	@ 0xb8
 8013956:	5c9a      	ldrb	r2, [r3, r2]
 8013958:	187b      	adds	r3, r7, r1
 801395a:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801395c:	4b42      	ldr	r3, [pc, #264]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 801395e:	4a46      	ldr	r2, [pc, #280]	@ (8013a78 <LoRaMacMcpsRequest+0x28c>)
 8013960:	589b      	ldr	r3, [r3, r2]
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	187a      	adds	r2, r7, r1
 8013966:	0011      	movs	r1, r2
 8013968:	0018      	movs	r0, r3
 801396a:	f002 fb7a 	bl	8016062 <RegionGetPhyParam>
 801396e:	0003      	movs	r3, r0
 8013970:	001a      	movs	r2, r3
 8013972:	2110      	movs	r1, #16
 8013974:	187b      	adds	r3, r7, r1
 8013976:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013978:	187b      	adds	r3, r7, r1
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	b259      	sxtb	r1, r3
 801397e:	231d      	movs	r3, #29
 8013980:	18fa      	adds	r2, r7, r3
 8013982:	18fb      	adds	r3, r7, r3
 8013984:	1c0c      	adds	r4, r1, #0
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	b258      	sxtb	r0, r3
 801398a:	b261      	sxtb	r1, r4
 801398c:	4288      	cmp	r0, r1
 801398e:	da00      	bge.n	8013992 <LoRaMacMcpsRequest+0x1a6>
 8013990:	1c23      	adds	r3, r4, #0
 8013992:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8013994:	231c      	movs	r3, #28
 8013996:	18fb      	adds	r3, r7, r3
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d055      	beq.n	8013a4a <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 801399e:	4b32      	ldr	r3, [pc, #200]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 80139a0:	4a35      	ldr	r2, [pc, #212]	@ (8013a78 <LoRaMacMcpsRequest+0x28c>)
 80139a2:	589b      	ldr	r3, [r3, r2]
 80139a4:	227e      	movs	r2, #126	@ 0x7e
 80139a6:	5c9b      	ldrb	r3, [r3, r2]
 80139a8:	2201      	movs	r2, #1
 80139aa:	4053      	eors	r3, r2
 80139ac:	b2db      	uxtb	r3, r3
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d022      	beq.n	80139f8 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 80139b2:	2408      	movs	r4, #8
 80139b4:	193b      	adds	r3, r7, r4
 80139b6:	221d      	movs	r2, #29
 80139b8:	18ba      	adds	r2, r7, r2
 80139ba:	7812      	ldrb	r2, [r2, #0]
 80139bc:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80139be:	4b2a      	ldr	r3, [pc, #168]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 80139c0:	4a2d      	ldr	r2, [pc, #180]	@ (8013a78 <LoRaMacMcpsRequest+0x28c>)
 80139c2:	589b      	ldr	r3, [r3, r2]
 80139c4:	22b8      	movs	r2, #184	@ 0xb8
 80139c6:	5c9a      	ldrb	r2, [r3, r2]
 80139c8:	193b      	adds	r3, r7, r4
 80139ca:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 80139cc:	4b26      	ldr	r3, [pc, #152]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 80139ce:	4a2a      	ldr	r2, [pc, #168]	@ (8013a78 <LoRaMacMcpsRequest+0x28c>)
 80139d0:	589b      	ldr	r3, [r3, r2]
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	1939      	adds	r1, r7, r4
 80139d6:	2205      	movs	r2, #5
 80139d8:	0018      	movs	r0, r3
 80139da:	f002 fba8 	bl	801612e <RegionVerify>
 80139de:	1e03      	subs	r3, r0, #0
 80139e0:	d008      	beq.n	80139f4 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80139e2:	4b21      	ldr	r3, [pc, #132]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 80139e4:	4a24      	ldr	r2, [pc, #144]	@ (8013a78 <LoRaMacMcpsRequest+0x28c>)
 80139e6:	589b      	ldr	r3, [r3, r2]
 80139e8:	193a      	adds	r2, r7, r4
 80139ea:	2100      	movs	r1, #0
 80139ec:	5651      	ldrsb	r1, [r2, r1]
 80139ee:	2285      	movs	r2, #133	@ 0x85
 80139f0:	5499      	strb	r1, [r3, r2]
 80139f2:	e001      	b.n	80139f8 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80139f4:	2303      	movs	r3, #3
 80139f6:	e031      	b.n	8013a5c <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80139f8:	2627      	movs	r6, #39	@ 0x27
 80139fa:	19bc      	adds	r4, r7, r6
 80139fc:	231e      	movs	r3, #30
 80139fe:	18fb      	adds	r3, r7, r3
 8013a00:	881d      	ldrh	r5, [r3, #0]
 8013a02:	6a3a      	ldr	r2, [r7, #32]
 8013a04:	2326      	movs	r3, #38	@ 0x26
 8013a06:	18fb      	adds	r3, r7, r3
 8013a08:	7819      	ldrb	r1, [r3, #0]
 8013a0a:	230c      	movs	r3, #12
 8013a0c:	18f8      	adds	r0, r7, r3
 8013a0e:	1cfb      	adds	r3, r7, #3
 8013a10:	781b      	ldrb	r3, [r3, #0]
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	002b      	movs	r3, r5
 8013a16:	f7fd f871 	bl	8010afc <Send>
 8013a1a:	0003      	movs	r3, r0
 8013a1c:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8013a1e:	19bb      	adds	r3, r7, r6
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d10d      	bne.n	8013a42 <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	7819      	ldrb	r1, [r3, #0]
 8013a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 8013a2c:	4a13      	ldr	r2, [pc, #76]	@ (8013a7c <LoRaMacMcpsRequest+0x290>)
 8013a2e:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013a30:	4b0d      	ldr	r3, [pc, #52]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 8013a32:	4a13      	ldr	r2, [pc, #76]	@ (8013a80 <LoRaMacMcpsRequest+0x294>)
 8013a34:	5c99      	ldrb	r1, [r3, r2]
 8013a36:	2001      	movs	r0, #1
 8013a38:	4301      	orrs	r1, r0
 8013a3a:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 8013a3c:	f7fe fb86 	bl	801214c <EventMacNvmCtxChanged>
 8013a40:	e003      	b.n	8013a4a <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013a42:	4b09      	ldr	r3, [pc, #36]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 8013a44:	4a0f      	ldr	r2, [pc, #60]	@ (8013a84 <LoRaMacMcpsRequest+0x298>)
 8013a46:	2100      	movs	r1, #0
 8013a48:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013a4a:	4a07      	ldr	r2, [pc, #28]	@ (8013a68 <LoRaMacMcpsRequest+0x27c>)
 8013a4c:	2391      	movs	r3, #145	@ 0x91
 8013a4e:	00db      	lsls	r3, r3, #3
 8013a50:	58d2      	ldr	r2, [r2, r3]
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	611a      	str	r2, [r3, #16]

    return status;
 8013a56:	2327      	movs	r3, #39	@ 0x27
 8013a58:	18fb      	adds	r3, r7, r3
 8013a5a:	781b      	ldrb	r3, [r3, #0]
}
 8013a5c:	0018      	movs	r0, r3
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	b00b      	add	sp, #44	@ 0x2c
 8013a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a64:	20000fa8 	.word	0x20000fa8
 8013a68:	20000b6c 	.word	0x20000b6c
 8013a6c:	0000043d 	.word	0x0000043d
 8013a70:	00000412 	.word	0x00000412
 8013a74:	00000411 	.word	0x00000411
 8013a78:	00000484 	.word	0x00000484
 8013a7c:	0000043c 	.word	0x0000043c
 8013a80:	00000481 	.word	0x00000481
 8013a84:	00000414 	.word	0x00000414

08013a88 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	0002      	movs	r2, r0
 8013a90:	1dfb      	adds	r3, r7, #7
 8013a92:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013a94:	210c      	movs	r1, #12
 8013a96:	187b      	adds	r3, r7, r1
 8013a98:	1dfa      	adds	r2, r7, #7
 8013a9a:	7812      	ldrb	r2, [r2, #0]
 8013a9c:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8013acc <LoRaMacTestSetDutyCycleOn+0x44>)
 8013aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8013ad0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013aa2:	589b      	ldr	r3, [r3, r2]
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	1879      	adds	r1, r7, r1
 8013aa8:	220f      	movs	r2, #15
 8013aaa:	0018      	movs	r0, r3
 8013aac:	f002 fb3f 	bl	801612e <RegionVerify>
 8013ab0:	1e03      	subs	r3, r0, #0
 8013ab2:	d006      	beq.n	8013ac2 <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8013ab4:	4b05      	ldr	r3, [pc, #20]	@ (8013acc <LoRaMacTestSetDutyCycleOn+0x44>)
 8013ab6:	4a06      	ldr	r2, [pc, #24]	@ (8013ad0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013ab8:	589b      	ldr	r3, [r3, r2]
 8013aba:	1dfa      	adds	r2, r7, #7
 8013abc:	21c9      	movs	r1, #201	@ 0xc9
 8013abe:	7812      	ldrb	r2, [r2, #0]
 8013ac0:	545a      	strb	r2, [r3, r1]
    }
}
 8013ac2:	46c0      	nop			@ (mov r8, r8)
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	b004      	add	sp, #16
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	46c0      	nop			@ (mov r8, r8)
 8013acc:	20000b6c 	.word	0x20000b6c
 8013ad0:	00000484 	.word	0x00000484

08013ad4 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ad6:	b08b      	sub	sp, #44	@ 0x2c
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	60b9      	str	r1, [r7, #8]
 8013ade:	607a      	str	r2, [r7, #4]
 8013ae0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013ae2:	2327      	movs	r3, #39	@ 0x27
 8013ae4:	18fb      	adds	r3, r7, r3
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8013aea:	2426      	movs	r4, #38	@ 0x26
 8013aec:	193b      	adds	r3, r7, r4
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	7c12      	ldrb	r2, [r2, #16]
 8013af2:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8013af4:	2325      	movs	r3, #37	@ 0x25
 8013af6:	18fb      	adds	r3, r7, r3
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	7c52      	ldrb	r2, [r2, #17]
 8013afc:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	689a      	ldr	r2, [r3, #8]
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	795b      	ldrb	r3, [r3, #5]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d100      	bne.n	8013b10 <CalcNextV10X+0x3c>
 8013b0e:	e0a5      	b.n	8013c5c <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013b10:	211c      	movs	r1, #28
 8013b12:	187b      	adds	r3, r7, r1
 8013b14:	2202      	movs	r2, #2
 8013b16:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	7c9a      	ldrb	r2, [r3, #18]
 8013b1c:	187b      	adds	r3, r7, r1
 8013b1e:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	7cdb      	ldrb	r3, [r3, #19]
 8013b24:	187a      	adds	r2, r7, r1
 8013b26:	0011      	movs	r1, r2
 8013b28:	0018      	movs	r0, r3
 8013b2a:	f002 fa9a 	bl	8016062 <RegionGetPhyParam>
 8013b2e:	0003      	movs	r3, r0
 8013b30:	001a      	movs	r2, r3
 8013b32:	2118      	movs	r1, #24
 8013b34:	187b      	adds	r3, r7, r1
 8013b36:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8013b38:	187b      	adds	r3, r7, r1
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	2124      	movs	r1, #36	@ 0x24
 8013b3e:	187b      	adds	r3, r7, r1
 8013b40:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8013b42:	193a      	adds	r2, r7, r4
 8013b44:	187b      	adds	r3, r7, r1
 8013b46:	1939      	adds	r1, r7, r4
 8013b48:	780c      	ldrb	r4, [r1, #0]
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	b258      	sxtb	r0, r3
 8013b4e:	b261      	sxtb	r1, r4
 8013b50:	4288      	cmp	r0, r1
 8013b52:	da00      	bge.n	8013b56 <CalcNextV10X+0x82>
 8013b54:	1c23      	adds	r3, r4, #0
 8013b56:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 8013b58:	2326      	movs	r3, #38	@ 0x26
 8013b5a:	18fa      	adds	r2, r7, r3
 8013b5c:	2324      	movs	r3, #36	@ 0x24
 8013b5e:	18fb      	adds	r3, r7, r3
 8013b60:	7812      	ldrb	r2, [r2, #0]
 8013b62:	b252      	sxtb	r2, r2
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	b25b      	sxtb	r3, r3
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d107      	bne.n	8013b7c <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8013b72:	2327      	movs	r3, #39	@ 0x27
 8013b74:	18fb      	adds	r3, r7, r3
 8013b76:	2200      	movs	r2, #0
 8013b78:	701a      	strb	r2, [r3, #0]
 8013b7a:	e06f      	b.n	8013c5c <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	689b      	ldr	r3, [r3, #8]
 8013b80:	68fa      	ldr	r2, [r7, #12]
 8013b82:	8992      	ldrh	r2, [r2, #12]
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d304      	bcc.n	8013b92 <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 8013b88:	2327      	movs	r3, #39	@ 0x27
 8013b8a:	18fb      	adds	r3, r7, r3
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	701a      	strb	r2, [r3, #0]
 8013b90:	e003      	b.n	8013b9a <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 8013b92:	2327      	movs	r3, #39	@ 0x27
 8013b94:	18fb      	adds	r3, r7, r3
 8013b96:	2200      	movs	r2, #0
 8013b98:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	8992      	ldrh	r2, [r2, #12]
 8013ba2:	0011      	movs	r1, r2
 8013ba4:	68fa      	ldr	r2, [r7, #12]
 8013ba6:	89d2      	ldrh	r2, [r2, #14]
 8013ba8:	188a      	adds	r2, r1, r2
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d356      	bcc.n	8013c5c <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8013bae:	241c      	movs	r4, #28
 8013bb0:	193b      	adds	r3, r7, r4
 8013bb2:	2208      	movs	r2, #8
 8013bb4:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	7cdb      	ldrb	r3, [r3, #19]
 8013bba:	193a      	adds	r2, r7, r4
 8013bbc:	0011      	movs	r1, r2
 8013bbe:	0018      	movs	r0, r3
 8013bc0:	f002 fa4f 	bl	8016062 <RegionGetPhyParam>
 8013bc4:	0003      	movs	r3, r0
 8013bc6:	001a      	movs	r2, r3
 8013bc8:	2518      	movs	r5, #24
 8013bca:	197b      	adds	r3, r7, r5
 8013bcc:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8013bce:	197b      	adds	r3, r7, r5
 8013bd0:	681a      	ldr	r2, [r3, #0]
 8013bd2:	2325      	movs	r3, #37	@ 0x25
 8013bd4:	18fb      	adds	r3, r7, r3
 8013bd6:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	689a      	ldr	r2, [r3, #8]
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	89db      	ldrh	r3, [r3, #14]
 8013be0:	0019      	movs	r1, r3
 8013be2:	0010      	movs	r0, r2
 8013be4:	f7ec fb1e 	bl	8000224 <__aeabi_uidivmod>
 8013be8:	000b      	movs	r3, r1
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d136      	bne.n	8013c5c <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013bee:	193b      	adds	r3, r7, r4
 8013bf0:	2222      	movs	r2, #34	@ 0x22
 8013bf2:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8013bf4:	193b      	adds	r3, r7, r4
 8013bf6:	2626      	movs	r6, #38	@ 0x26
 8013bf8:	19ba      	adds	r2, r7, r6
 8013bfa:	7812      	ldrb	r2, [r2, #0]
 8013bfc:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	7c9a      	ldrb	r2, [r3, #18]
 8013c02:	193b      	adds	r3, r7, r4
 8013c04:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	7cdb      	ldrb	r3, [r3, #19]
 8013c0a:	193a      	adds	r2, r7, r4
 8013c0c:	0011      	movs	r1, r2
 8013c0e:	0018      	movs	r0, r3
 8013c10:	f002 fa27 	bl	8016062 <RegionGetPhyParam>
 8013c14:	0003      	movs	r3, r0
 8013c16:	001a      	movs	r2, r3
 8013c18:	197b      	adds	r3, r7, r5
 8013c1a:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8013c1c:	197b      	adds	r3, r7, r5
 8013c1e:	681a      	ldr	r2, [r3, #0]
 8013c20:	19bb      	adds	r3, r7, r6
 8013c22:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8013c24:	19ba      	adds	r2, r7, r6
 8013c26:	2324      	movs	r3, #36	@ 0x24
 8013c28:	18fb      	adds	r3, r7, r3
 8013c2a:	7812      	ldrb	r2, [r2, #0]
 8013c2c:	b252      	sxtb	r2, r2
 8013c2e:	781b      	ldrb	r3, [r3, #0]
 8013c30:	b25b      	sxtb	r3, r3
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d112      	bne.n	8013c5c <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8013c36:	2327      	movs	r3, #39	@ 0x27
 8013c38:	18fb      	adds	r3, r7, r3
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	791b      	ldrb	r3, [r3, #4]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d00a      	beq.n	8013c5c <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013c46:	2110      	movs	r1, #16
 8013c48:	187b      	adds	r3, r7, r1
 8013c4a:	2202      	movs	r2, #2
 8013c4c:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	7cdb      	ldrb	r3, [r3, #19]
 8013c52:	187a      	adds	r2, r7, r1
 8013c54:	0011      	movs	r1, r2
 8013c56:	0018      	movs	r0, r3
 8013c58:	f002 fa3e 	bl	80160d8 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	2226      	movs	r2, #38	@ 0x26
 8013c60:	18ba      	adds	r2, r7, r2
 8013c62:	7812      	ldrb	r2, [r2, #0]
 8013c64:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2225      	movs	r2, #37	@ 0x25
 8013c6a:	18ba      	adds	r2, r7, r2
 8013c6c:	7812      	ldrb	r2, [r2, #0]
 8013c6e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013c70:	2327      	movs	r3, #39	@ 0x27
 8013c72:	18fb      	adds	r3, r7, r3
 8013c74:	781b      	ldrb	r3, [r3, #0]
}
 8013c76:	0018      	movs	r0, r3
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	b00b      	add	sp, #44	@ 0x2c
 8013c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c7e <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013c7e:	b580      	push	{r7, lr}
 8013c80:	b084      	sub	sp, #16
 8013c82:	af00      	add	r7, sp, #0
 8013c84:	60f8      	str	r0, [r7, #12]
 8013c86:	60b9      	str	r1, [r7, #8]
 8013c88:	607a      	str	r2, [r7, #4]
 8013c8a:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	789b      	ldrb	r3, [r3, #2]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d107      	bne.n	8013ca4 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	68b9      	ldr	r1, [r7, #8]
 8013c9a:	68f8      	ldr	r0, [r7, #12]
 8013c9c:	f7ff ff1a 	bl	8013ad4 <CalcNextV10X>
 8013ca0:	0003      	movs	r3, r0
 8013ca2:	e000      	b.n	8013ca6 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8013ca4:	2300      	movs	r3, #0
}
 8013ca6:	0018      	movs	r0, r3
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	b004      	add	sp, #16
 8013cac:	bd80      	pop	{r7, pc}

08013cae <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 8013cae:	b580      	push	{r7, lr}
 8013cb0:	b084      	sub	sp, #16
 8013cb2:	af00      	add	r7, sp, #0
 8013cb4:	60f8      	str	r0, [r7, #12]
 8013cb6:	60b9      	str	r1, [r7, #8]
 8013cb8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cba:	46c0      	nop			@ (mov r8, r8)
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	b004      	add	sp, #16
 8013cc0:	bd80      	pop	{r7, pc}

08013cc2 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 8013cc2:	b580      	push	{r7, lr}
 8013cc4:	b082      	sub	sp, #8
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8013cca:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8013ccc:	0018      	movs	r0, r3
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	b002      	add	sp, #8
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	601a      	str	r2, [r3, #0]
    return NULL;
 8013ce2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013ce4:	0018      	movs	r0, r3
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	b002      	add	sp, #8
 8013cea:	bd80      	pop	{r7, pc}

08013cec <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	0002      	movs	r2, r0
 8013cf4:	1dfb      	adds	r3, r7, #7
 8013cf6:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cf8:	46c0      	nop			@ (mov r8, r8)
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	b002      	add	sp, #8
 8013cfe:	bd80      	pop	{r7, pc}

08013d00 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	0002      	movs	r2, r0
 8013d08:	1dfb      	adds	r3, r7, #7
 8013d0a:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d0c:	46c0      	nop			@ (mov r8, r8)
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	b002      	add	sp, #8
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	0002      	movs	r2, r0
 8013d1c:	1dfb      	adds	r3, r7, #7
 8013d1e:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d20:	46c0      	nop			@ (mov r8, r8)
 8013d22:	46bd      	mov	sp, r7
 8013d24:	b002      	add	sp, #8
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013d2c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d2e:	0018      	movs	r0, r3
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d3c:	46c0      	nop			@ (mov r8, r8)
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	b002      	add	sp, #8
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d4c:	46c0      	nop			@ (mov r8, r8)
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	b002      	add	sp, #8
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d5c:	46c0      	nop			@ (mov r8, r8)
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	b002      	add	sp, #8
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b082      	sub	sp, #8
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	000a      	movs	r2, r1
 8013d6e:	1cbb      	adds	r3, r7, #2
 8013d70:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013d72:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d74:	0018      	movs	r0, r3
 8013d76:	46bd      	mov	sp, r7
 8013d78:	b002      	add	sp, #8
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d80:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d82:	0018      	movs	r0, r3
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d8c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d8e:	0018      	movs	r0, r3
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d98:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d9a:	0018      	movs	r0, r3
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013da4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013da6:	0018      	movs	r0, r3
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	0002      	movs	r2, r0
 8013db4:	1dfb      	adds	r3, r7, #7
 8013db6:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013db8:	46c0      	nop			@ (mov r8, r8)
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	b002      	add	sp, #8
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013dc4:	46c0      	nop			@ (mov r8, r8)
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013dce:	46c0      	nop			@ (mov r8, r8)
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}

08013dd4 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b082      	sub	sp, #8
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	0002      	movs	r2, r0
 8013ddc:	1dfb      	adds	r3, r7, #7
 8013dde:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013de0:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013de2:	0018      	movs	r0, r3
 8013de4:	46bd      	mov	sp, r7
 8013de6:	b002      	add	sp, #8
 8013de8:	bd80      	pop	{r7, pc}

08013dea <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b082      	sub	sp, #8
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013df2:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013df4:	0018      	movs	r0, r3
 8013df6:	46bd      	mov	sp, r7
 8013df8:	b002      	add	sp, #8
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013e04:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e06:	0018      	movs	r0, r3
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	b002      	add	sp, #8
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e12:	46c0      	nop			@ (mov r8, r8)
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b082      	sub	sp, #8
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	0002      	movs	r2, r0
 8013e20:	6039      	str	r1, [r7, #0]
 8013e22:	1dfb      	adds	r3, r7, #7
 8013e24:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8013e26:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e28:	0018      	movs	r0, r3
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	b002      	add	sp, #8
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	603a      	str	r2, [r7, #0]
 8013e38:	1dbb      	adds	r3, r7, #6
 8013e3a:	1c02      	adds	r2, r0, #0
 8013e3c:	801a      	strh	r2, [r3, #0]
 8013e3e:	1d7b      	adds	r3, r7, #5
 8013e40:	1c0a      	adds	r2, r1, #0
 8013e42:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e44:	46c0      	nop			@ (mov r8, r8)
 8013e46:	46bd      	mov	sp, r7
 8013e48:	b002      	add	sp, #8
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e50:	46c0      	nop			@ (mov r8, r8)
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}

08013e56 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013e56:	b580      	push	{r7, lr}
 8013e58:	b082      	sub	sp, #8
 8013e5a:	af00      	add	r7, sp, #0
 8013e5c:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8013e5e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e60:	0018      	movs	r0, r3
 8013e62:	46bd      	mov	sp, r7
 8013e64:	b002      	add	sp, #8
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013e70:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e72:	0018      	movs	r0, r3
 8013e74:	46bd      	mov	sp, r7
 8013e76:	b002      	add	sp, #8
 8013e78:	bd80      	pop	{r7, pc}

08013e7a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013e7a:	b580      	push	{r7, lr}
 8013e7c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e7e:	46c0      	nop			@ (mov r8, r8)
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e88:	46c0      	nop			@ (mov r8, r8)
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}

08013e8e <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013e8e:	b580      	push	{r7, lr}
 8013e90:	b084      	sub	sp, #16
 8013e92:	af00      	add	r7, sp, #0
 8013e94:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e9a:	230e      	movs	r3, #14
 8013e9c:	18fb      	adds	r3, r7, r3
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	801a      	strh	r2, [r3, #0]
 8013ea2:	e00f      	b.n	8013ec4 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 8013ea4:	230e      	movs	r3, #14
 8013ea6:	18fb      	adds	r3, r7, r3
 8013ea8:	881b      	ldrh	r3, [r3, #0]
 8013eaa:	68ba      	ldr	r2, [r7, #8]
 8013eac:	18d3      	adds	r3, r2, r3
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d001      	beq.n	8013eb8 <IsSlotFree+0x2a>
        {
            return false;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	e00b      	b.n	8013ed0 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013eb8:	210e      	movs	r1, #14
 8013eba:	187b      	adds	r3, r7, r1
 8013ebc:	881a      	ldrh	r2, [r3, #0]
 8013ebe:	187b      	adds	r3, r7, r1
 8013ec0:	3201      	adds	r2, #1
 8013ec2:	801a      	strh	r2, [r3, #0]
 8013ec4:	230e      	movs	r3, #14
 8013ec6:	18fb      	adds	r3, r7, r3
 8013ec8:	881b      	ldrh	r3, [r3, #0]
 8013eca:	2b0f      	cmp	r3, #15
 8013ecc:	d9ea      	bls.n	8013ea4 <IsSlotFree+0x16>
        }
    }
    return true;
 8013ece:	2301      	movs	r3, #1
}
 8013ed0:	0018      	movs	r0, r3
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	b004      	add	sp, #16
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013ede:	1dfb      	adds	r3, r7, #7
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8013ee4:	e00a      	b.n	8013efc <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8013ee6:	1dfb      	adds	r3, r7, #7
 8013ee8:	781a      	ldrb	r2, [r3, #0]
 8013eea:	1dfb      	adds	r3, r7, #7
 8013eec:	3201      	adds	r2, #1
 8013eee:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013ef0:	1dfb      	adds	r3, r7, #7
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	2b0f      	cmp	r3, #15
 8013ef6:	d101      	bne.n	8013efc <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	e017      	b.n	8013f2c <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8013efc:	1dfb      	adds	r3, r7, #7
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	011b      	lsls	r3, r3, #4
 8013f02:	3308      	adds	r3, #8
 8013f04:	001a      	movs	r2, r3
 8013f06:	4b0b      	ldr	r3, [pc, #44]	@ (8013f34 <MallocNewMacCommandSlot+0x5c>)
 8013f08:	18d3      	adds	r3, r2, r3
 8013f0a:	0018      	movs	r0, r3
 8013f0c:	f7ff ffbf 	bl	8013e8e <IsSlotFree>
 8013f10:	0003      	movs	r3, r0
 8013f12:	001a      	movs	r2, r3
 8013f14:	2301      	movs	r3, #1
 8013f16:	4053      	eors	r3, r2
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d1e3      	bne.n	8013ee6 <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8013f1e:	1dfb      	adds	r3, r7, #7
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	011b      	lsls	r3, r3, #4
 8013f24:	3308      	adds	r3, #8
 8013f26:	001a      	movs	r2, r3
 8013f28:	4b02      	ldr	r3, [pc, #8]	@ (8013f34 <MallocNewMacCommandSlot+0x5c>)
 8013f2a:	18d3      	adds	r3, r2, r3
}
 8013f2c:	0018      	movs	r0, r3
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	b002      	add	sp, #8
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	200011a4 	.word	0x200011a4

08013f38 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d101      	bne.n	8013f4a <FreeMacCommandSlot+0x12>
    {
        return false;
 8013f46:	2300      	movs	r3, #0
 8013f48:	e006      	b.n	8013f58 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2210      	movs	r2, #16
 8013f4e:	2100      	movs	r1, #0
 8013f50:	0018      	movs	r0, r3
 8013f52:	f004 fd47 	bl	80189e4 <memset1>

    return true;
 8013f56:	2301      	movs	r3, #1
}
 8013f58:	0018      	movs	r0, r3
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	b002      	add	sp, #8
 8013f5e:	bd80      	pop	{r7, pc}

08013f60 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d101      	bne.n	8013f72 <LinkedListInit+0x12>
    {
        return false;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	e006      	b.n	8013f80 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2200      	movs	r2, #0
 8013f76:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	605a      	str	r2, [r3, #4]

    return true;
 8013f7e:	2301      	movs	r3, #1
}
 8013f80:	0018      	movs	r0, r3
 8013f82:	46bd      	mov	sp, r7
 8013f84:	b002      	add	sp, #8
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d002      	beq.n	8013f9e <LinkedListAdd+0x16>
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d101      	bne.n	8013fa2 <LinkedListAdd+0x1a>
    {
        return false;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	e015      	b.n	8013fce <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d102      	bne.n	8013fb0 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	683a      	ldr	r2, [r7, #0]
 8013fae:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d003      	beq.n	8013fc0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	683a      	ldr	r2, [r7, #0]
 8013fbe:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	683a      	ldr	r2, [r7, #0]
 8013fca:	605a      	str	r2, [r3, #4]

    return true;
 8013fcc:	2301      	movs	r3, #1
}
 8013fce:	0018      	movs	r0, r3
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	b002      	add	sp, #8
 8013fd4:	bd80      	pop	{r7, pc}

08013fd6 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b084      	sub	sp, #16
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]
 8013fde:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d002      	beq.n	8013fec <LinkedListGetPrevious+0x16>
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d101      	bne.n	8013ff0 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013fec:	2300      	movs	r3, #0
 8013fee:	e016      	b.n	801401e <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013ff6:	683a      	ldr	r2, [r7, #0]
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d00c      	beq.n	8014018 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013ffe:	e002      	b.n	8014006 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d007      	beq.n	801401c <LinkedListGetPrevious+0x46>
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	683a      	ldr	r2, [r7, #0]
 8014012:	429a      	cmp	r2, r3
 8014014:	d1f4      	bne.n	8014000 <LinkedListGetPrevious+0x2a>
 8014016:	e001      	b.n	801401c <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014018:	2300      	movs	r3, #0
 801401a:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801401c:	68fb      	ldr	r3, [r7, #12]
}
 801401e:	0018      	movs	r0, r3
 8014020:	46bd      	mov	sp, r7
 8014022:	b004      	add	sp, #16
 8014024:	bd80      	pop	{r7, pc}

08014026 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b084      	sub	sp, #16
 801402a:	af00      	add	r7, sp, #0
 801402c:	6078      	str	r0, [r7, #4]
 801402e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d002      	beq.n	801403c <LinkedListRemove+0x16>
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d101      	bne.n	8014040 <LinkedListRemove+0x1a>
    {
        return false;
 801403c:	2300      	movs	r3, #0
 801403e:	e023      	b.n	8014088 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014040:	683a      	ldr	r2, [r7, #0]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	0011      	movs	r1, r2
 8014046:	0018      	movs	r0, r3
 8014048:	f7ff ffc5 	bl	8013fd6 <LinkedListGetPrevious>
 801404c:	0003      	movs	r3, r0
 801404e:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	683a      	ldr	r2, [r7, #0]
 8014056:	429a      	cmp	r2, r3
 8014058:	d103      	bne.n	8014062 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	683a      	ldr	r2, [r7, #0]
 8014068:	429a      	cmp	r2, r3
 801406a:	d102      	bne.n	8014072 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d003      	beq.n	8014080 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	681a      	ldr	r2, [r3, #0]
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	2200      	movs	r2, #0
 8014084:	601a      	str	r2, [r3, #0]

    return true;
 8014086:	2301      	movs	r3, #1
}
 8014088:	0018      	movs	r0, r3
 801408a:	46bd      	mov	sp, r7
 801408c:	b004      	add	sp, #16
 801408e:	bd80      	pop	{r7, pc}

08014090 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b082      	sub	sp, #8
 8014094:	af00      	add	r7, sp, #0
 8014096:	0002      	movs	r2, r0
 8014098:	1dfb      	adds	r3, r7, #7
 801409a:	701a      	strb	r2, [r3, #0]
    switch( cid )
 801409c:	1dfb      	adds	r3, r7, #7
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	2b05      	cmp	r3, #5
 80140a2:	d003      	beq.n	80140ac <IsSticky+0x1c>
 80140a4:	db04      	blt.n	80140b0 <IsSticky+0x20>
 80140a6:	3b08      	subs	r3, #8
 80140a8:	2b02      	cmp	r3, #2
 80140aa:	d801      	bhi.n	80140b0 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80140ac:	2301      	movs	r3, #1
 80140ae:	e000      	b.n	80140b2 <IsSticky+0x22>
        default:
            return false;
 80140b0:	2300      	movs	r3, #0
    }
}
 80140b2:	0018      	movs	r0, r3
 80140b4:	46bd      	mov	sp, r7
 80140b6:	b002      	add	sp, #8
 80140b8:	bd80      	pop	{r7, pc}
	...

080140bc <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 80140c0:	4b04      	ldr	r3, [pc, #16]	@ (80140d4 <NvmCtxCallback+0x18>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d002      	beq.n	80140ce <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 80140c8:	4b02      	ldr	r3, [pc, #8]	@ (80140d4 <NvmCtxCallback+0x18>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4798      	blx	r3
    }
}
 80140ce:	46c0      	nop			@ (mov r8, r8)
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}
 80140d4:	200011a0 	.word	0x200011a0

080140d8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b082      	sub	sp, #8
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 80140e0:	4b08      	ldr	r3, [pc, #32]	@ (8014104 <LoRaMacCommandsInit+0x2c>)
 80140e2:	22fc      	movs	r2, #252	@ 0xfc
 80140e4:	2100      	movs	r1, #0
 80140e6:	0018      	movs	r0, r3
 80140e8:	f004 fc7c 	bl	80189e4 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 80140ec:	4b05      	ldr	r3, [pc, #20]	@ (8014104 <LoRaMacCommandsInit+0x2c>)
 80140ee:	0018      	movs	r0, r3
 80140f0:	f7ff ff36 	bl	8013f60 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 80140f4:	4b04      	ldr	r3, [pc, #16]	@ (8014108 <LoRaMacCommandsInit+0x30>)
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 80140fa:	2300      	movs	r3, #0
}
 80140fc:	0018      	movs	r0, r3
 80140fe:	46bd      	mov	sp, r7
 8014100:	b002      	add	sp, #8
 8014102:	bd80      	pop	{r7, pc}
 8014104:	200011a4 	.word	0x200011a4
 8014108:	200011a0 	.word	0x200011a0

0801410c <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d007      	beq.n	801412a <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 801411a:	6879      	ldr	r1, [r7, #4]
 801411c:	4b05      	ldr	r3, [pc, #20]	@ (8014134 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 801411e:	22fc      	movs	r2, #252	@ 0xfc
 8014120:	0018      	movs	r0, r3
 8014122:	f004 fc21 	bl	8018968 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8014126:	2300      	movs	r3, #0
 8014128:	e000      	b.n	801412c <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801412a:	2301      	movs	r3, #1
    }
}
 801412c:	0018      	movs	r0, r3
 801412e:	46bd      	mov	sp, r7
 8014130:	b002      	add	sp, #8
 8014132:	bd80      	pop	{r7, pc}
 8014134:	200011a4 	.word	0x200011a4

08014138 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	22fc      	movs	r2, #252	@ 0xfc
 8014144:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014146:	4b02      	ldr	r3, [pc, #8]	@ (8014150 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8014148:	0018      	movs	r0, r3
 801414a:	46bd      	mov	sp, r7
 801414c:	b002      	add	sp, #8
 801414e:	bd80      	pop	{r7, pc}
 8014150:	200011a4 	.word	0x200011a4

08014154 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014154:	b590      	push	{r4, r7, lr}
 8014156:	b087      	sub	sp, #28
 8014158:	af00      	add	r7, sp, #0
 801415a:	60b9      	str	r1, [r7, #8]
 801415c:	607a      	str	r2, [r7, #4]
 801415e:	230f      	movs	r3, #15
 8014160:	18fb      	adds	r3, r7, r3
 8014162:	1c02      	adds	r2, r0, #0
 8014164:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d101      	bne.n	8014170 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801416c:	2301      	movs	r3, #1
 801416e:	e03c      	b.n	80141ea <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014170:	f7ff feb2 	bl	8013ed8 <MallocNewMacCommandSlot>
 8014174:	0003      	movs	r3, r0
 8014176:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d101      	bne.n	8014182 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801417e:	2302      	movs	r3, #2
 8014180:	e033      	b.n	80141ea <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8014182:	697a      	ldr	r2, [r7, #20]
 8014184:	4b1b      	ldr	r3, [pc, #108]	@ (80141f4 <LoRaMacCommandsAddCmd+0xa0>)
 8014186:	0011      	movs	r1, r2
 8014188:	0018      	movs	r0, r3
 801418a:	f7ff fefd 	bl	8013f88 <LinkedListAdd>
 801418e:	0003      	movs	r3, r0
 8014190:	001a      	movs	r2, r3
 8014192:	2301      	movs	r3, #1
 8014194:	4053      	eors	r3, r2
 8014196:	b2db      	uxtb	r3, r3
 8014198:	2b00      	cmp	r3, #0
 801419a:	d001      	beq.n	80141a0 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 801419c:	2305      	movs	r3, #5
 801419e:	e024      	b.n	80141ea <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	240f      	movs	r4, #15
 80141a4:	193a      	adds	r2, r7, r4
 80141a6:	7812      	ldrb	r2, [r2, #0]
 80141a8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	687a      	ldr	r2, [r7, #4]
 80141ae:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	3305      	adds	r3, #5
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	b292      	uxth	r2, r2
 80141b8:	68b9      	ldr	r1, [r7, #8]
 80141ba:	0018      	movs	r0, r3
 80141bc:	f004 fbd4 	bl	8018968 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80141c0:	193b      	adds	r3, r7, r4
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	0018      	movs	r0, r3
 80141c6:	f7ff ff63 	bl	8014090 <IsSticky>
 80141ca:	0003      	movs	r3, r0
 80141cc:	001a      	movs	r2, r3
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80141d2:	4b08      	ldr	r3, [pc, #32]	@ (80141f4 <LoRaMacCommandsAddCmd+0xa0>)
 80141d4:	22f8      	movs	r2, #248	@ 0xf8
 80141d6:	589a      	ldr	r2, [r3, r2]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	18d3      	adds	r3, r2, r3
 80141dc:	1c5a      	adds	r2, r3, #1
 80141de:	4b05      	ldr	r3, [pc, #20]	@ (80141f4 <LoRaMacCommandsAddCmd+0xa0>)
 80141e0:	21f8      	movs	r1, #248	@ 0xf8
 80141e2:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 80141e4:	f7ff ff6a 	bl	80140bc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80141e8:	2300      	movs	r3, #0
}
 80141ea:	0018      	movs	r0, r3
 80141ec:	46bd      	mov	sp, r7
 80141ee:	b007      	add	sp, #28
 80141f0:	bd90      	pop	{r4, r7, pc}
 80141f2:	46c0      	nop			@ (mov r8, r8)
 80141f4:	200011a4 	.word	0x200011a4

080141f8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d101      	bne.n	801420a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014206:	2301      	movs	r3, #1
 8014208:	e028      	b.n	801425c <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	4b15      	ldr	r3, [pc, #84]	@ (8014264 <LoRaMacCommandsRemoveCmd+0x6c>)
 801420e:	0011      	movs	r1, r2
 8014210:	0018      	movs	r0, r3
 8014212:	f7ff ff08 	bl	8014026 <LinkedListRemove>
 8014216:	0003      	movs	r3, r0
 8014218:	001a      	movs	r2, r3
 801421a:	2301      	movs	r3, #1
 801421c:	4053      	eors	r3, r2
 801421e:	b2db      	uxtb	r3, r3
 8014220:	2b00      	cmp	r3, #0
 8014222:	d001      	beq.n	8014228 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014224:	2303      	movs	r3, #3
 8014226:	e019      	b.n	801425c <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014228:	4b0e      	ldr	r3, [pc, #56]	@ (8014264 <LoRaMacCommandsRemoveCmd+0x6c>)
 801422a:	22f8      	movs	r2, #248	@ 0xf8
 801422c:	589a      	ldr	r2, [r3, r2]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	689b      	ldr	r3, [r3, #8]
 8014232:	1ad3      	subs	r3, r2, r3
 8014234:	1e5a      	subs	r2, r3, #1
 8014236:	4b0b      	ldr	r3, [pc, #44]	@ (8014264 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014238:	21f8      	movs	r1, #248	@ 0xf8
 801423a:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	0018      	movs	r0, r3
 8014240:	f7ff fe7a 	bl	8013f38 <FreeMacCommandSlot>
 8014244:	0003      	movs	r3, r0
 8014246:	001a      	movs	r2, r3
 8014248:	2301      	movs	r3, #1
 801424a:	4053      	eors	r3, r2
 801424c:	b2db      	uxtb	r3, r3
 801424e:	2b00      	cmp	r3, #0
 8014250:	d001      	beq.n	8014256 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014252:	2305      	movs	r3, #5
 8014254:	e002      	b.n	801425c <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8014256:	f7ff ff31 	bl	80140bc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801425a:	2300      	movs	r3, #0
}
 801425c:	0018      	movs	r0, r3
 801425e:	46bd      	mov	sp, r7
 8014260:	b002      	add	sp, #8
 8014262:	bd80      	pop	{r7, pc}
 8014264:	200011a4 	.word	0x200011a4

08014268 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801426e:	4b11      	ldr	r3, [pc, #68]	@ (80142b4 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014274:	e013      	b.n	801429e <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	7b1b      	ldrb	r3, [r3, #12]
 801427a:	2201      	movs	r2, #1
 801427c:	4053      	eors	r3, r2
 801427e:	b2db      	uxtb	r3, r3
 8014280:	2b00      	cmp	r3, #0
 8014282:	d009      	beq.n	8014298 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	0018      	movs	r0, r3
 801428e:	f7ff ffb3 	bl	80141f8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	607b      	str	r3, [r7, #4]
 8014296:	e002      	b.n	801429e <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d1e8      	bne.n	8014276 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 80142a4:	f7ff ff0a 	bl	80140bc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80142a8:	2300      	movs	r3, #0
}
 80142aa:	0018      	movs	r0, r3
 80142ac:	46bd      	mov	sp, r7
 80142ae:	b002      	add	sp, #8
 80142b0:	bd80      	pop	{r7, pc}
 80142b2:	46c0      	nop			@ (mov r8, r8)
 80142b4:	200011a4 	.word	0x200011a4

080142b8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 80142be:	4b0f      	ldr	r3, [pc, #60]	@ (80142fc <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80142c4:	e00f      	b.n	80142e6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	791b      	ldrb	r3, [r3, #4]
 80142d0:	0018      	movs	r0, r3
 80142d2:	f7ff fedd 	bl	8014090 <IsSticky>
 80142d6:	1e03      	subs	r3, r0, #0
 80142d8:	d003      	beq.n	80142e2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	0018      	movs	r0, r3
 80142de:	f7ff ff8b 	bl	80141f8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d1ec      	bne.n	80142c6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 80142ec:	f7ff fee6 	bl	80140bc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80142f0:	2300      	movs	r3, #0
}
 80142f2:	0018      	movs	r0, r3
 80142f4:	46bd      	mov	sp, r7
 80142f6:	b002      	add	sp, #8
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	46c0      	nop			@ (mov r8, r8)
 80142fc:	200011a4 	.word	0x200011a4

08014300 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d101      	bne.n	8014312 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801430e:	2301      	movs	r3, #1
 8014310:	e005      	b.n	801431e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8014312:	4b05      	ldr	r3, [pc, #20]	@ (8014328 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014314:	22f8      	movs	r2, #248	@ 0xf8
 8014316:	589a      	ldr	r2, [r3, r2]
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801431c:	2300      	movs	r3, #0
}
 801431e:	0018      	movs	r0, r3
 8014320:	46bd      	mov	sp, r7
 8014322:	b002      	add	sp, #8
 8014324:	bd80      	pop	{r7, pc}
 8014326:	46c0      	nop			@ (mov r8, r8)
 8014328:	200011a4 	.word	0x200011a4

0801432c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801432c:	b590      	push	{r4, r7, lr}
 801432e:	b089      	sub	sp, #36	@ 0x24
 8014330:	af00      	add	r7, sp, #0
 8014332:	60f8      	str	r0, [r7, #12]
 8014334:	60b9      	str	r1, [r7, #8]
 8014336:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8014338:	4b2a      	ldr	r3, [pc, #168]	@ (80143e4 <LoRaMacCommandsSerializeCmds+0xb8>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801433e:	231b      	movs	r3, #27
 8014340:	18fb      	adds	r3, r7, r3
 8014342:	2200      	movs	r2, #0
 8014344:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d002      	beq.n	8014352 <LoRaMacCommandsSerializeCmds+0x26>
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d12d      	bne.n	80143ae <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014352:	2301      	movs	r3, #1
 8014354:	e042      	b.n	80143dc <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014356:	241b      	movs	r4, #27
 8014358:	193b      	adds	r3, r7, r4
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	1ad2      	subs	r2, r2, r3
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	689b      	ldr	r3, [r3, #8]
 8014364:	3301      	adds	r3, #1
 8014366:	429a      	cmp	r2, r3
 8014368:	d325      	bcc.n	80143b6 <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 801436a:	193b      	adds	r3, r7, r4
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	193a      	adds	r2, r7, r4
 8014370:	1c59      	adds	r1, r3, #1
 8014372:	7011      	strb	r1, [r2, #0]
 8014374:	001a      	movs	r2, r3
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	189b      	adds	r3, r3, r2
 801437a:	69fa      	ldr	r2, [r7, #28]
 801437c:	7912      	ldrb	r2, [r2, #4]
 801437e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014380:	193b      	adds	r3, r7, r4
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	687a      	ldr	r2, [r7, #4]
 8014386:	18d0      	adds	r0, r2, r3
 8014388:	69fb      	ldr	r3, [r7, #28]
 801438a:	1d59      	adds	r1, r3, #5
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	689b      	ldr	r3, [r3, #8]
 8014390:	b29b      	uxth	r3, r3
 8014392:	001a      	movs	r2, r3
 8014394:	f004 fae8 	bl	8018968 <memcpy1>
            itr += curElement->PayloadSize;
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	689b      	ldr	r3, [r3, #8]
 801439c:	b2d9      	uxtb	r1, r3
 801439e:	193b      	adds	r3, r7, r4
 80143a0:	193a      	adds	r2, r7, r4
 80143a2:	7812      	ldrb	r2, [r2, #0]
 80143a4:	188a      	adds	r2, r1, r2
 80143a6:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d1d0      	bne.n	8014356 <LoRaMacCommandsSerializeCmds+0x2a>
 80143b4:	e00a      	b.n	80143cc <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 80143b6:	46c0      	nop			@ (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80143b8:	e008      	b.n	80143cc <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80143ba:	69fb      	ldr	r3, [r7, #28]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	0018      	movs	r0, r3
 80143c4:	f7ff ff18 	bl	80141f8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d1f3      	bne.n	80143ba <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	0018      	movs	r0, r3
 80143d6:	f7ff ff93 	bl	8014300 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80143da:	2300      	movs	r3, #0
}
 80143dc:	0018      	movs	r0, r3
 80143de:	46bd      	mov	sp, r7
 80143e0:	b009      	add	sp, #36	@ 0x24
 80143e2:	bd90      	pop	{r4, r7, pc}
 80143e4:	200011a4 	.word	0x200011a4

080143e8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b084      	sub	sp, #16
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d101      	bne.n	80143fa <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80143f6:	2301      	movs	r3, #1
 80143f8:	e016      	b.n	8014428 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80143fa:	4b0d      	ldr	r3, [pc, #52]	@ (8014430 <LoRaMacCommandsStickyCmdsPending+0x48>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2200      	movs	r2, #0
 8014404:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014406:	e00b      	b.n	8014420 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	7b1b      	ldrb	r3, [r3, #12]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d004      	beq.n	801441a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2201      	movs	r2, #1
 8014414:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8014416:	2300      	movs	r3, #0
 8014418:	e006      	b.n	8014428 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d1f0      	bne.n	8014408 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014426:	2300      	movs	r3, #0
}
 8014428:	0018      	movs	r0, r3
 801442a:	46bd      	mov	sp, r7
 801442c:	b004      	add	sp, #16
 801442e:	bd80      	pop	{r7, pc}
 8014430:	200011a4 	.word	0x200011a4

08014434 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	0002      	movs	r2, r0
 801443c:	1dfb      	adds	r3, r7, #7
 801443e:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 8014440:	230f      	movs	r3, #15
 8014442:	18fb      	adds	r3, r7, r3
 8014444:	2200      	movs	r2, #0
 8014446:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 8014448:	1dfb      	adds	r3, r7, #7
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	2b13      	cmp	r3, #19
 801444e:	d84a      	bhi.n	80144e6 <LoRaMacCommandsGetCmdSize+0xb2>
 8014450:	009a      	lsls	r2, r3, #2
 8014452:	4b29      	ldr	r3, [pc, #164]	@ (80144f8 <LoRaMacCommandsGetCmdSize+0xc4>)
 8014454:	18d3      	adds	r3, r2, r3
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801445a:	230f      	movs	r3, #15
 801445c:	18fb      	adds	r3, r7, r3
 801445e:	2203      	movs	r2, #3
 8014460:	701a      	strb	r2, [r3, #0]
            break;
 8014462:	e041      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014464:	230f      	movs	r3, #15
 8014466:	18fb      	adds	r3, r7, r3
 8014468:	2205      	movs	r2, #5
 801446a:	701a      	strb	r2, [r3, #0]
            break;
 801446c:	e03c      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801446e:	230f      	movs	r3, #15
 8014470:	18fb      	adds	r3, r7, r3
 8014472:	2202      	movs	r2, #2
 8014474:	701a      	strb	r2, [r3, #0]
            break;
 8014476:	e037      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014478:	230f      	movs	r3, #15
 801447a:	18fb      	adds	r3, r7, r3
 801447c:	2205      	movs	r2, #5
 801447e:	701a      	strb	r2, [r3, #0]
            break;
 8014480:	e032      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014482:	230f      	movs	r3, #15
 8014484:	18fb      	adds	r3, r7, r3
 8014486:	2201      	movs	r2, #1
 8014488:	701a      	strb	r2, [r3, #0]
            break;
 801448a:	e02d      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801448c:	230f      	movs	r3, #15
 801448e:	18fb      	adds	r3, r7, r3
 8014490:	2206      	movs	r2, #6
 8014492:	701a      	strb	r2, [r3, #0]
            break;
 8014494:	e028      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014496:	230f      	movs	r3, #15
 8014498:	18fb      	adds	r3, r7, r3
 801449a:	2202      	movs	r2, #2
 801449c:	701a      	strb	r2, [r3, #0]
            break;
 801449e:	e023      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80144a0:	230f      	movs	r3, #15
 80144a2:	18fb      	adds	r3, r7, r3
 80144a4:	2202      	movs	r2, #2
 80144a6:	701a      	strb	r2, [r3, #0]
            break;
 80144a8:	e01e      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80144aa:	230f      	movs	r3, #15
 80144ac:	18fb      	adds	r3, r7, r3
 80144ae:	2205      	movs	r2, #5
 80144b0:	701a      	strb	r2, [r3, #0]
            break;
 80144b2:	e019      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80144b4:	230f      	movs	r3, #15
 80144b6:	18fb      	adds	r3, r7, r3
 80144b8:	2206      	movs	r2, #6
 80144ba:	701a      	strb	r2, [r3, #0]
            break;
 80144bc:	e014      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80144be:	230f      	movs	r3, #15
 80144c0:	18fb      	adds	r3, r7, r3
 80144c2:	2201      	movs	r2, #1
 80144c4:	701a      	strb	r2, [r3, #0]
            break;
 80144c6:	e00f      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80144c8:	230f      	movs	r3, #15
 80144ca:	18fb      	adds	r3, r7, r3
 80144cc:	2205      	movs	r2, #5
 80144ce:	701a      	strb	r2, [r3, #0]
            break;
 80144d0:	e00a      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80144d2:	230f      	movs	r3, #15
 80144d4:	18fb      	adds	r3, r7, r3
 80144d6:	2204      	movs	r2, #4
 80144d8:	701a      	strb	r2, [r3, #0]
            break;
 80144da:	e005      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80144dc:	230f      	movs	r3, #15
 80144de:	18fb      	adds	r3, r7, r3
 80144e0:	2204      	movs	r2, #4
 80144e2:	701a      	strb	r2, [r3, #0]
            break;
 80144e4:	e000      	b.n	80144e8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80144e6:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return cidSize;
 80144e8:	230f      	movs	r3, #15
 80144ea:	18fb      	adds	r3, r7, r3
 80144ec:	781b      	ldrb	r3, [r3, #0]
}
 80144ee:	0018      	movs	r0, r3
 80144f0:	46bd      	mov	sp, r7
 80144f2:	b004      	add	sp, #16
 80144f4:	bd80      	pop	{r7, pc}
 80144f6:	46c0      	nop			@ (mov r8, r8)
 80144f8:	0801e35c 	.word	0x0801e35c

080144fc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014504:	4b08      	ldr	r3, [pc, #32]	@ (8014528 <IncreaseBufferPointer+0x2c>)
 8014506:	691b      	ldr	r3, [r3, #16]
 8014508:	3310      	adds	r3, #16
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	429a      	cmp	r2, r3
 801450e:	d103      	bne.n	8014518 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014510:	4b05      	ldr	r3, [pc, #20]	@ (8014528 <IncreaseBufferPointer+0x2c>)
 8014512:	691b      	ldr	r3, [r3, #16]
 8014514:	607b      	str	r3, [r7, #4]
 8014516:	e002      	b.n	801451e <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	3304      	adds	r3, #4
 801451c:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801451e:	687b      	ldr	r3, [r7, #4]
}
 8014520:	0018      	movs	r0, r3
 8014522:	46bd      	mov	sp, r7
 8014524:	b002      	add	sp, #8
 8014526:	bd80      	pop	{r7, pc}
 8014528:	200012b8 	.word	0x200012b8

0801452c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b082      	sub	sp, #8
 8014530:	af00      	add	r7, sp, #0
 8014532:	0002      	movs	r2, r0
 8014534:	1dfb      	adds	r3, r7, #7
 8014536:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 8014538:	1dfb      	adds	r3, r7, #7
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d101      	bne.n	8014544 <IsListEmpty+0x18>
    {
        return true;
 8014540:	2301      	movs	r3, #1
 8014542:	e000      	b.n	8014546 <IsListEmpty+0x1a>
    }
    return false;
 8014544:	2300      	movs	r3, #0
}
 8014546:	0018      	movs	r0, r3
 8014548:	46bd      	mov	sp, r7
 801454a:	b002      	add	sp, #8
 801454c:	bd80      	pop	{r7, pc}

0801454e <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801454e:	b580      	push	{r7, lr}
 8014550:	b082      	sub	sp, #8
 8014552:	af00      	add	r7, sp, #0
 8014554:	0002      	movs	r2, r0
 8014556:	1dfb      	adds	r3, r7, #7
 8014558:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801455a:	1dfb      	adds	r3, r7, #7
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	2b04      	cmp	r3, #4
 8014560:	d901      	bls.n	8014566 <IsListFull+0x18>
    {
        return true;
 8014562:	2301      	movs	r3, #1
 8014564:	e000      	b.n	8014568 <IsListFull+0x1a>
    }
    return false;
 8014566:	2300      	movs	r3, #0
}
 8014568:	0018      	movs	r0, r3
 801456a:	46bd      	mov	sp, r7
 801456c:	b002      	add	sp, #8
 801456e:	bd80      	pop	{r7, pc}

08014570 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af00      	add	r7, sp, #0
 8014576:	60b9      	str	r1, [r7, #8]
 8014578:	607a      	str	r2, [r7, #4]
 801457a:	230f      	movs	r3, #15
 801457c:	18fb      	adds	r3, r7, r3
 801457e:	1c02      	adds	r2, r0, #0
 8014580:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014586:	4b18      	ldr	r3, [pc, #96]	@ (80145e8 <GetElement+0x78>)
 8014588:	691b      	ldr	r3, [r3, #16]
 801458a:	7d1b      	ldrb	r3, [r3, #20]
 801458c:	0018      	movs	r0, r3
 801458e:	f7ff ffcd 	bl	801452c <IsListEmpty>
 8014592:	1e03      	subs	r3, r0, #0
 8014594:	d001      	beq.n	801459a <GetElement+0x2a>
    {
        return NULL;
 8014596:	2300      	movs	r3, #0
 8014598:	e022      	b.n	80145e0 <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 801459a:	2313      	movs	r3, #19
 801459c:	18fb      	adds	r3, r7, r3
 801459e:	2200      	movs	r2, #0
 80145a0:	701a      	strb	r2, [r3, #0]
 80145a2:	e014      	b.n	80145ce <GetElement+0x5e>
    {
        if( element->Request == request )
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	220f      	movs	r2, #15
 80145aa:	18ba      	adds	r2, r7, r2
 80145ac:	7812      	ldrb	r2, [r2, #0]
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d101      	bne.n	80145b6 <GetElement+0x46>
        {
            // We have found the element
            return element;
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	e014      	b.n	80145e0 <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	0018      	movs	r0, r3
 80145ba:	f7ff ff9f 	bl	80144fc <IncreaseBufferPointer>
 80145be:	0003      	movs	r3, r0
 80145c0:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 80145c2:	2113      	movs	r1, #19
 80145c4:	187b      	adds	r3, r7, r1
 80145c6:	781a      	ldrb	r2, [r3, #0]
 80145c8:	187b      	adds	r3, r7, r1
 80145ca:	3201      	adds	r2, #1
 80145cc:	701a      	strb	r2, [r3, #0]
 80145ce:	4b06      	ldr	r3, [pc, #24]	@ (80145e8 <GetElement+0x78>)
 80145d0:	691b      	ldr	r3, [r3, #16]
 80145d2:	7d1b      	ldrb	r3, [r3, #20]
 80145d4:	2213      	movs	r2, #19
 80145d6:	18ba      	adds	r2, r7, r2
 80145d8:	7812      	ldrb	r2, [r2, #0]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d3e2      	bcc.n	80145a4 <GetElement+0x34>
    }

    return NULL;
 80145de:	2300      	movs	r3, #0
}
 80145e0:	0018      	movs	r0, r3
 80145e2:	46bd      	mov	sp, r7
 80145e4:	b006      	add	sp, #24
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	200012b8 	.word	0x200012b8

080145ec <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 80145f6:	4b13      	ldr	r3, [pc, #76]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 80145fc:	4b11      	ldr	r3, [pc, #68]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 80145fe:	4a12      	ldr	r2, [pc, #72]	@ (8014648 <LoRaMacConfirmQueueInit+0x5c>)
 8014600:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8014602:	4b10      	ldr	r3, [pc, #64]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 8014604:	691b      	ldr	r3, [r3, #16]
 8014606:	2200      	movs	r2, #0
 8014608:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801460a:	4b0e      	ldr	r3, [pc, #56]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 801460c:	691b      	ldr	r3, [r3, #16]
 801460e:	001a      	movs	r2, r3
 8014610:	4b0c      	ldr	r3, [pc, #48]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 8014612:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014614:	4b0b      	ldr	r3, [pc, #44]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 8014616:	691b      	ldr	r3, [r3, #16]
 8014618:	001a      	movs	r2, r3
 801461a:	4b0a      	ldr	r3, [pc, #40]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 801461c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 801461e:	4b09      	ldr	r3, [pc, #36]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 8014620:	691b      	ldr	r3, [r3, #16]
 8014622:	2214      	movs	r2, #20
 8014624:	21ff      	movs	r1, #255	@ 0xff
 8014626:	0018      	movs	r0, r3
 8014628:	f004 f9dc 	bl	80189e4 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801462c:	4b05      	ldr	r3, [pc, #20]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 801462e:	691b      	ldr	r3, [r3, #16]
 8014630:	2201      	movs	r2, #1
 8014632:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8014634:	4b03      	ldr	r3, [pc, #12]	@ (8014644 <LoRaMacConfirmQueueInit+0x58>)
 8014636:	683a      	ldr	r2, [r7, #0]
 8014638:	60da      	str	r2, [r3, #12]
}
 801463a:	46c0      	nop			@ (mov r8, r8)
 801463c:	46bd      	mov	sp, r7
 801463e:	b002      	add	sp, #8
 8014640:	bd80      	pop	{r7, pc}
 8014642:	46c0      	nop			@ (mov r8, r8)
 8014644:	200012b8 	.word	0x200012b8
 8014648:	200012a0 	.word	0x200012a0

0801464c <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d007      	beq.n	801466a <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 801465a:	6879      	ldr	r1, [r7, #4]
 801465c:	4b05      	ldr	r3, [pc, #20]	@ (8014674 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 801465e:	2216      	movs	r2, #22
 8014660:	0018      	movs	r0, r3
 8014662:	f004 f981 	bl	8018968 <memcpy1>
        return true;
 8014666:	2301      	movs	r3, #1
 8014668:	e000      	b.n	801466c <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 801466a:	2300      	movs	r3, #0
    }
}
 801466c:	0018      	movs	r0, r3
 801466e:	46bd      	mov	sp, r7
 8014670:	b002      	add	sp, #8
 8014672:	bd80      	pop	{r7, pc}
 8014674:	200012a0 	.word	0x200012a0

08014678 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2216      	movs	r2, #22
 8014684:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8014686:	4b02      	ldr	r3, [pc, #8]	@ (8014690 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8014688:	0018      	movs	r0, r3
 801468a:	46bd      	mov	sp, r7
 801468c:	b002      	add	sp, #8
 801468e:	bd80      	pop	{r7, pc}
 8014690:	200012a0 	.word	0x200012a0

08014694 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 801469c:	4b17      	ldr	r3, [pc, #92]	@ (80146fc <LoRaMacConfirmQueueAdd+0x68>)
 801469e:	691b      	ldr	r3, [r3, #16]
 80146a0:	7d1b      	ldrb	r3, [r3, #20]
 80146a2:	0018      	movs	r0, r3
 80146a4:	f7ff ff53 	bl	801454e <IsListFull>
 80146a8:	1e03      	subs	r3, r0, #0
 80146aa:	d001      	beq.n	80146b0 <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 80146ac:	2300      	movs	r3, #0
 80146ae:	e021      	b.n	80146f4 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80146b0:	4b12      	ldr	r3, [pc, #72]	@ (80146fc <LoRaMacConfirmQueueAdd+0x68>)
 80146b2:	689b      	ldr	r3, [r3, #8]
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	7812      	ldrb	r2, [r2, #0]
 80146b8:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80146ba:	4b10      	ldr	r3, [pc, #64]	@ (80146fc <LoRaMacConfirmQueueAdd+0x68>)
 80146bc:	689b      	ldr	r3, [r3, #8]
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	7852      	ldrb	r2, [r2, #1]
 80146c2:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80146c4:	4b0d      	ldr	r3, [pc, #52]	@ (80146fc <LoRaMacConfirmQueueAdd+0x68>)
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	78d2      	ldrb	r2, [r2, #3]
 80146cc:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80146ce:	4b0b      	ldr	r3, [pc, #44]	@ (80146fc <LoRaMacConfirmQueueAdd+0x68>)
 80146d0:	689b      	ldr	r3, [r3, #8]
 80146d2:	2200      	movs	r2, #0
 80146d4:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 80146d6:	4b09      	ldr	r3, [pc, #36]	@ (80146fc <LoRaMacConfirmQueueAdd+0x68>)
 80146d8:	691b      	ldr	r3, [r3, #16]
 80146da:	7d1a      	ldrb	r2, [r3, #20]
 80146dc:	3201      	adds	r2, #1
 80146de:	b2d2      	uxtb	r2, r2
 80146e0:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80146e2:	4b06      	ldr	r3, [pc, #24]	@ (80146fc <LoRaMacConfirmQueueAdd+0x68>)
 80146e4:	689b      	ldr	r3, [r3, #8]
 80146e6:	0018      	movs	r0, r3
 80146e8:	f7ff ff08 	bl	80144fc <IncreaseBufferPointer>
 80146ec:	0002      	movs	r2, r0
 80146ee:	4b03      	ldr	r3, [pc, #12]	@ (80146fc <LoRaMacConfirmQueueAdd+0x68>)
 80146f0:	609a      	str	r2, [r3, #8]

    return true;
 80146f2:	2301      	movs	r3, #1
}
 80146f4:	0018      	movs	r0, r3
 80146f6:	46bd      	mov	sp, r7
 80146f8:	b002      	add	sp, #8
 80146fa:	bd80      	pop	{r7, pc}
 80146fc:	200012b8 	.word	0x200012b8

08014700 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014704:	4b0d      	ldr	r3, [pc, #52]	@ (801473c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8014706:	691b      	ldr	r3, [r3, #16]
 8014708:	7d1b      	ldrb	r3, [r3, #20]
 801470a:	0018      	movs	r0, r3
 801470c:	f7ff ff0e 	bl	801452c <IsListEmpty>
 8014710:	1e03      	subs	r3, r0, #0
 8014712:	d001      	beq.n	8014718 <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 8014714:	2300      	movs	r3, #0
 8014716:	e00e      	b.n	8014736 <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8014718:	4b08      	ldr	r3, [pc, #32]	@ (801473c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801471a:	691b      	ldr	r3, [r3, #16]
 801471c:	7d1a      	ldrb	r2, [r3, #20]
 801471e:	3a01      	subs	r2, #1
 8014720:	b2d2      	uxtb	r2, r2
 8014722:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014724:	4b05      	ldr	r3, [pc, #20]	@ (801473c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8014726:	685b      	ldr	r3, [r3, #4]
 8014728:	0018      	movs	r0, r3
 801472a:	f7ff fee7 	bl	80144fc <IncreaseBufferPointer>
 801472e:	0002      	movs	r2, r0
 8014730:	4b02      	ldr	r3, [pc, #8]	@ (801473c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8014732:	605a      	str	r2, [r3, #4]

    return true;
 8014734:	2301      	movs	r3, #1
}
 8014736:	0018      	movs	r0, r3
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	200012b8 	.word	0x200012b8

08014740 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b084      	sub	sp, #16
 8014744:	af00      	add	r7, sp, #0
 8014746:	0002      	movs	r2, r0
 8014748:	1dfb      	adds	r3, r7, #7
 801474a:	701a      	strb	r2, [r3, #0]
 801474c:	1dbb      	adds	r3, r7, #6
 801474e:	1c0a      	adds	r2, r1, #0
 8014750:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8014752:	2300      	movs	r3, #0
 8014754:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8014756:	4b13      	ldr	r3, [pc, #76]	@ (80147a4 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014758:	691b      	ldr	r3, [r3, #16]
 801475a:	7d1b      	ldrb	r3, [r3, #20]
 801475c:	0018      	movs	r0, r3
 801475e:	f7ff fee5 	bl	801452c <IsListEmpty>
 8014762:	0003      	movs	r3, r0
 8014764:	001a      	movs	r2, r3
 8014766:	2301      	movs	r3, #1
 8014768:	4053      	eors	r3, r2
 801476a:	b2db      	uxtb	r3, r3
 801476c:	2b00      	cmp	r3, #0
 801476e:	d014      	beq.n	801479a <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014770:	4b0c      	ldr	r3, [pc, #48]	@ (80147a4 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014772:	6859      	ldr	r1, [r3, #4]
 8014774:	4b0b      	ldr	r3, [pc, #44]	@ (80147a4 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014776:	689a      	ldr	r2, [r3, #8]
 8014778:	1dbb      	adds	r3, r7, #6
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	0018      	movs	r0, r3
 801477e:	f7ff fef7 	bl	8014570 <GetElement>
 8014782:	0003      	movs	r3, r0
 8014784:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d006      	beq.n	801479a <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	1dfa      	adds	r2, r7, #7
 8014790:	7812      	ldrb	r2, [r2, #0]
 8014792:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2201      	movs	r2, #1
 8014798:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801479a:	46c0      	nop			@ (mov r8, r8)
 801479c:	46bd      	mov	sp, r7
 801479e:	b004      	add	sp, #16
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	46c0      	nop			@ (mov r8, r8)
 80147a4:	200012b8 	.word	0x200012b8

080147a8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	0002      	movs	r2, r0
 80147b0:	1dfb      	adds	r3, r7, #7
 80147b2:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80147b4:	2300      	movs	r3, #0
 80147b6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 80147b8:	4b11      	ldr	r3, [pc, #68]	@ (8014800 <LoRaMacConfirmQueueGetStatus+0x58>)
 80147ba:	691b      	ldr	r3, [r3, #16]
 80147bc:	7d1b      	ldrb	r3, [r3, #20]
 80147be:	0018      	movs	r0, r3
 80147c0:	f7ff feb4 	bl	801452c <IsListEmpty>
 80147c4:	0003      	movs	r3, r0
 80147c6:	001a      	movs	r2, r3
 80147c8:	2301      	movs	r3, #1
 80147ca:	4053      	eors	r3, r2
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d010      	beq.n	80147f4 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80147d2:	4b0b      	ldr	r3, [pc, #44]	@ (8014800 <LoRaMacConfirmQueueGetStatus+0x58>)
 80147d4:	6859      	ldr	r1, [r3, #4]
 80147d6:	4b0a      	ldr	r3, [pc, #40]	@ (8014800 <LoRaMacConfirmQueueGetStatus+0x58>)
 80147d8:	689a      	ldr	r2, [r3, #8]
 80147da:	1dfb      	adds	r3, r7, #7
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	0018      	movs	r0, r3
 80147e0:	f7ff fec6 	bl	8014570 <GetElement>
 80147e4:	0003      	movs	r3, r0
 80147e6:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d002      	beq.n	80147f4 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	785b      	ldrb	r3, [r3, #1]
 80147f2:	e000      	b.n	80147f6 <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80147f4:	2301      	movs	r3, #1
}
 80147f6:	0018      	movs	r0, r3
 80147f8:	46bd      	mov	sp, r7
 80147fa:	b004      	add	sp, #16
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	46c0      	nop			@ (mov r8, r8)
 8014800:	200012b8 	.word	0x200012b8

08014804 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
 801480a:	0002      	movs	r2, r0
 801480c:	1dfb      	adds	r3, r7, #7
 801480e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014810:	4b18      	ldr	r3, [pc, #96]	@ (8014874 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8014816:	4b17      	ldr	r3, [pc, #92]	@ (8014874 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014818:	691b      	ldr	r3, [r3, #16]
 801481a:	1dfa      	adds	r2, r7, #7
 801481c:	7812      	ldrb	r2, [r2, #0]
 801481e:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8014820:	4b14      	ldr	r3, [pc, #80]	@ (8014874 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014822:	691b      	ldr	r3, [r3, #16]
 8014824:	7d1b      	ldrb	r3, [r3, #20]
 8014826:	0018      	movs	r0, r3
 8014828:	f7ff fe80 	bl	801452c <IsListEmpty>
 801482c:	0003      	movs	r3, r0
 801482e:	001a      	movs	r2, r3
 8014830:	2301      	movs	r3, #1
 8014832:	4053      	eors	r3, r2
 8014834:	b2db      	uxtb	r3, r3
 8014836:	2b00      	cmp	r3, #0
 8014838:	d018      	beq.n	801486c <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	1dfa      	adds	r2, r7, #7
 801483e:	7812      	ldrb	r2, [r2, #0]
 8014840:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	78db      	ldrb	r3, [r3, #3]
 8014846:	2201      	movs	r2, #1
 8014848:	4053      	eors	r3, r2
 801484a:	b2db      	uxtb	r3, r3
 801484c:	2b00      	cmp	r3, #0
 801484e:	d002      	beq.n	8014856 <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	2201      	movs	r2, #1
 8014854:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	0018      	movs	r0, r3
 801485a:	f7ff fe4f 	bl	80144fc <IncreaseBufferPointer>
 801485e:	0003      	movs	r3, r0
 8014860:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014862:	4b04      	ldr	r3, [pc, #16]	@ (8014874 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014864:	689b      	ldr	r3, [r3, #8]
 8014866:	68fa      	ldr	r2, [r7, #12]
 8014868:	429a      	cmp	r2, r3
 801486a:	d1e6      	bne.n	801483a <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 801486c:	46c0      	nop			@ (mov r8, r8)
 801486e:	46bd      	mov	sp, r7
 8014870:	b004      	add	sp, #16
 8014872:	bd80      	pop	{r7, pc}
 8014874:	200012b8 	.word	0x200012b8

08014878 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	af00      	add	r7, sp, #0
 801487e:	0002      	movs	r2, r0
 8014880:	1dfb      	adds	r3, r7, #7
 8014882:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014884:	4b08      	ldr	r3, [pc, #32]	@ (80148a8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014886:	6859      	ldr	r1, [r3, #4]
 8014888:	4b07      	ldr	r3, [pc, #28]	@ (80148a8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801488a:	689a      	ldr	r2, [r3, #8]
 801488c:	1dfb      	adds	r3, r7, #7
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	0018      	movs	r0, r3
 8014892:	f7ff fe6d 	bl	8014570 <GetElement>
 8014896:	1e03      	subs	r3, r0, #0
 8014898:	d001      	beq.n	801489e <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 801489a:	2301      	movs	r3, #1
 801489c:	e000      	b.n	80148a0 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 801489e:	2300      	movs	r3, #0
}
 80148a0:	0018      	movs	r0, r3
 80148a2:	46bd      	mov	sp, r7
 80148a4:	b002      	add	sp, #8
 80148a6:	bd80      	pop	{r7, pc}
 80148a8:	200012b8 	.word	0x200012b8

080148ac <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80148b4:	4b2d      	ldr	r3, [pc, #180]	@ (801496c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148b6:	691a      	ldr	r2, [r3, #16]
 80148b8:	230e      	movs	r3, #14
 80148ba:	18fb      	adds	r3, r7, r3
 80148bc:	7d12      	ldrb	r2, [r2, #20]
 80148be:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 80148c0:	230d      	movs	r3, #13
 80148c2:	18fb      	adds	r3, r7, r3
 80148c4:	2200      	movs	r2, #0
 80148c6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80148c8:	230f      	movs	r3, #15
 80148ca:	18fb      	adds	r3, r7, r3
 80148cc:	2200      	movs	r2, #0
 80148ce:	701a      	strb	r2, [r3, #0]
 80148d0:	e03f      	b.n	8014952 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80148d2:	4b26      	ldr	r3, [pc, #152]	@ (801496c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148d4:	685b      	ldr	r3, [r3, #4]
 80148d6:	781a      	ldrb	r2, [r3, #0]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80148dc:	4b23      	ldr	r3, [pc, #140]	@ (801496c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	785a      	ldrb	r2, [r3, #1]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80148e6:	4b21      	ldr	r3, [pc, #132]	@ (801496c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148e8:	685a      	ldr	r2, [r3, #4]
 80148ea:	210d      	movs	r1, #13
 80148ec:	187b      	adds	r3, r7, r1
 80148ee:	7892      	ldrb	r2, [r2, #2]
 80148f0:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 80148f2:	187b      	adds	r3, r7, r1
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d006      	beq.n	8014908 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80148fa:	4b1c      	ldr	r3, [pc, #112]	@ (801496c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	689b      	ldr	r3, [r3, #8]
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	0010      	movs	r0, r2
 8014904:	4798      	blx	r3
 8014906:	e00f      	b.n	8014928 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014908:	4b18      	ldr	r3, [pc, #96]	@ (801496c <LoRaMacConfirmQueueHandleCb+0xc0>)
 801490a:	685b      	ldr	r3, [r3, #4]
 801490c:	781a      	ldrb	r2, [r3, #0]
 801490e:	2108      	movs	r1, #8
 8014910:	187b      	adds	r3, r7, r1
 8014912:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014914:	4b15      	ldr	r3, [pc, #84]	@ (801496c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	785a      	ldrb	r2, [r3, #1]
 801491a:	187b      	adds	r3, r7, r1
 801491c:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801491e:	4b13      	ldr	r3, [pc, #76]	@ (801496c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014920:	685b      	ldr	r3, [r3, #4]
 8014922:	78da      	ldrb	r2, [r3, #3]
 8014924:	187b      	adds	r3, r7, r1
 8014926:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014928:	f7ff feea 	bl	8014700 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801492c:	230d      	movs	r3, #13
 801492e:	18fb      	adds	r3, r7, r3
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	2201      	movs	r2, #1
 8014934:	4053      	eors	r3, r2
 8014936:	b2db      	uxtb	r3, r3
 8014938:	2b00      	cmp	r3, #0
 801493a:	d004      	beq.n	8014946 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801493c:	2308      	movs	r3, #8
 801493e:	18fb      	adds	r3, r7, r3
 8014940:	0018      	movs	r0, r3
 8014942:	f7ff fea7 	bl	8014694 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014946:	210f      	movs	r1, #15
 8014948:	187b      	adds	r3, r7, r1
 801494a:	781a      	ldrb	r2, [r3, #0]
 801494c:	187b      	adds	r3, r7, r1
 801494e:	3201      	adds	r2, #1
 8014950:	701a      	strb	r2, [r3, #0]
 8014952:	230f      	movs	r3, #15
 8014954:	18fa      	adds	r2, r7, r3
 8014956:	230e      	movs	r3, #14
 8014958:	18fb      	adds	r3, r7, r3
 801495a:	7812      	ldrb	r2, [r2, #0]
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	429a      	cmp	r2, r3
 8014960:	d3b7      	bcc.n	80148d2 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 8014962:	46c0      	nop			@ (mov r8, r8)
 8014964:	46c0      	nop			@ (mov r8, r8)
 8014966:	46bd      	mov	sp, r7
 8014968:	b004      	add	sp, #16
 801496a:	bd80      	pop	{r7, pc}
 801496c:	200012b8 	.word	0x200012b8

08014970 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014970:	b580      	push	{r7, lr}
 8014972:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8014974:	4b02      	ldr	r3, [pc, #8]	@ (8014980 <LoRaMacConfirmQueueGetCnt+0x10>)
 8014976:	691b      	ldr	r3, [r3, #16]
 8014978:	7d1b      	ldrb	r3, [r3, #20]
}
 801497a:	0018      	movs	r0, r3
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}
 8014980:	200012b8 	.word	0x200012b8

08014984 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014984:	b580      	push	{r7, lr}
 8014986:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014988:	4b06      	ldr	r3, [pc, #24]	@ (80149a4 <LoRaMacConfirmQueueIsFull+0x20>)
 801498a:	691b      	ldr	r3, [r3, #16]
 801498c:	7d1b      	ldrb	r3, [r3, #20]
 801498e:	0018      	movs	r0, r3
 8014990:	f7ff fddd 	bl	801454e <IsListFull>
 8014994:	1e03      	subs	r3, r0, #0
 8014996:	d001      	beq.n	801499c <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 8014998:	2301      	movs	r3, #1
 801499a:	e000      	b.n	801499e <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 801499c:	2300      	movs	r3, #0
    }
}
 801499e:	0018      	movs	r0, r3
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	200012b8 	.word	0x200012b8

080149a8 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80149a8:	b590      	push	{r4, r7, lr}
 80149aa:	b08f      	sub	sp, #60	@ 0x3c
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	0008      	movs	r0, r1
 80149b2:	0011      	movs	r1, r2
 80149b4:	607b      	str	r3, [r7, #4]
 80149b6:	230a      	movs	r3, #10
 80149b8:	18fb      	adds	r3, r7, r3
 80149ba:	1c02      	adds	r2, r0, #0
 80149bc:	801a      	strh	r2, [r3, #0]
 80149be:	2309      	movs	r3, #9
 80149c0:	18fb      	adds	r3, r7, r3
 80149c2:	1c0a      	adds	r2, r1, #0
 80149c4:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d101      	bne.n	80149d0 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80149cc:	230a      	movs	r3, #10
 80149ce:	e0ad      	b.n	8014b2c <PayloadEncrypt+0x184>
    }

    uint8_t bufferIndex = 0;
 80149d0:	2337      	movs	r3, #55	@ 0x37
 80149d2:	18fb      	adds	r3, r7, r3
 80149d4:	2200      	movs	r2, #0
 80149d6:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 80149d8:	2334      	movs	r3, #52	@ 0x34
 80149da:	18fb      	adds	r3, r7, r3
 80149dc:	2201      	movs	r2, #1
 80149de:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 80149e0:	2320      	movs	r3, #32
 80149e2:	18fb      	adds	r3, r7, r3
 80149e4:	2200      	movs	r2, #0
 80149e6:	601a      	str	r2, [r3, #0]
 80149e8:	3304      	adds	r3, #4
 80149ea:	220c      	movs	r2, #12
 80149ec:	2100      	movs	r1, #0
 80149ee:	0018      	movs	r0, r3
 80149f0:	f008 fc51 	bl	801d296 <memset>
    uint8_t aBlock[16] = { 0 };
 80149f4:	2410      	movs	r4, #16
 80149f6:	193b      	adds	r3, r7, r4
 80149f8:	2200      	movs	r2, #0
 80149fa:	601a      	str	r2, [r3, #0]
 80149fc:	3304      	adds	r3, #4
 80149fe:	220c      	movs	r2, #12
 8014a00:	2100      	movs	r1, #0
 8014a02:	0018      	movs	r0, r3
 8014a04:	f008 fc47 	bl	801d296 <memset>

    aBlock[0] = 0x01;
 8014a08:	0021      	movs	r1, r4
 8014a0a:	187b      	adds	r3, r7, r1
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8014a10:	187a      	adds	r2, r7, r1
 8014a12:	2340      	movs	r3, #64	@ 0x40
 8014a14:	2008      	movs	r0, #8
 8014a16:	181b      	adds	r3, r3, r0
 8014a18:	19db      	adds	r3, r3, r7
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	b2da      	uxtb	r2, r3
 8014a22:	187b      	adds	r3, r7, r1
 8014a24:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	0a1b      	lsrs	r3, r3, #8
 8014a2a:	b2da      	uxtb	r2, r3
 8014a2c:	187b      	adds	r3, r7, r1
 8014a2e:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	0c1b      	lsrs	r3, r3, #16
 8014a34:	b2da      	uxtb	r2, r3
 8014a36:	187b      	adds	r3, r7, r1
 8014a38:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	0e1b      	lsrs	r3, r3, #24
 8014a3e:	b2da      	uxtb	r2, r3
 8014a40:	187b      	adds	r3, r7, r1
 8014a42:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8014a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a46:	b2da      	uxtb	r2, r3
 8014a48:	187b      	adds	r3, r7, r1
 8014a4a:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a4e:	0a1b      	lsrs	r3, r3, #8
 8014a50:	b2da      	uxtb	r2, r3
 8014a52:	187b      	adds	r3, r7, r1
 8014a54:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a58:	0c1b      	lsrs	r3, r3, #16
 8014a5a:	b2da      	uxtb	r2, r3
 8014a5c:	187b      	adds	r3, r7, r1
 8014a5e:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a62:	0e1b      	lsrs	r3, r3, #24
 8014a64:	b2da      	uxtb	r2, r3
 8014a66:	187b      	adds	r3, r7, r1
 8014a68:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 8014a6a:	e058      	b.n	8014b1e <PayloadEncrypt+0x176>
    {
        aBlock[15] = ctr & 0xFF;
 8014a6c:	2134      	movs	r1, #52	@ 0x34
 8014a6e:	187b      	adds	r3, r7, r1
 8014a70:	881b      	ldrh	r3, [r3, #0]
 8014a72:	b2da      	uxtb	r2, r3
 8014a74:	2010      	movs	r0, #16
 8014a76:	183b      	adds	r3, r7, r0
 8014a78:	73da      	strb	r2, [r3, #15]
        ctr++;
 8014a7a:	187b      	adds	r3, r7, r1
 8014a7c:	881a      	ldrh	r2, [r3, #0]
 8014a7e:	187b      	adds	r3, r7, r1
 8014a80:	3201      	adds	r2, #1
 8014a82:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014a84:	2320      	movs	r3, #32
 8014a86:	18f9      	adds	r1, r7, r3
 8014a88:	2309      	movs	r3, #9
 8014a8a:	18fb      	adds	r3, r7, r3
 8014a8c:	781a      	ldrb	r2, [r3, #0]
 8014a8e:	1838      	adds	r0, r7, r0
 8014a90:	000b      	movs	r3, r1
 8014a92:	2110      	movs	r1, #16
 8014a94:	f7f8 fa43 	bl	800cf1e <SecureElementAesEncrypt>
 8014a98:	1e03      	subs	r3, r0, #0
 8014a9a:	d001      	beq.n	8014aa0 <PayloadEncrypt+0xf8>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a9c:	230f      	movs	r3, #15
 8014a9e:	e045      	b.n	8014b2c <PayloadEncrypt+0x184>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014aa0:	2333      	movs	r3, #51	@ 0x33
 8014aa2:	18fb      	adds	r3, r7, r3
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	701a      	strb	r2, [r3, #0]
 8014aa8:	e01f      	b.n	8014aea <PayloadEncrypt+0x142>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014aaa:	2037      	movs	r0, #55	@ 0x37
 8014aac:	183b      	adds	r3, r7, r0
 8014aae:	781a      	ldrb	r2, [r3, #0]
 8014ab0:	2433      	movs	r4, #51	@ 0x33
 8014ab2:	193b      	adds	r3, r7, r4
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	18d3      	adds	r3, r2, r3
 8014ab8:	001a      	movs	r2, r3
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	189b      	adds	r3, r3, r2
 8014abe:	7819      	ldrb	r1, [r3, #0]
 8014ac0:	193b      	adds	r3, r7, r4
 8014ac2:	781b      	ldrb	r3, [r3, #0]
 8014ac4:	2220      	movs	r2, #32
 8014ac6:	18ba      	adds	r2, r7, r2
 8014ac8:	5cd2      	ldrb	r2, [r2, r3]
 8014aca:	183b      	adds	r3, r7, r0
 8014acc:	7818      	ldrb	r0, [r3, #0]
 8014ace:	193b      	adds	r3, r7, r4
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	18c3      	adds	r3, r0, r3
 8014ad4:	0018      	movs	r0, r3
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	181b      	adds	r3, r3, r0
 8014ada:	404a      	eors	r2, r1
 8014adc:	b2d2      	uxtb	r2, r2
 8014ade:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014ae0:	193b      	adds	r3, r7, r4
 8014ae2:	781a      	ldrb	r2, [r3, #0]
 8014ae4:	193b      	adds	r3, r7, r4
 8014ae6:	3201      	adds	r2, #1
 8014ae8:	701a      	strb	r2, [r3, #0]
 8014aea:	2333      	movs	r3, #51	@ 0x33
 8014aec:	18fb      	adds	r3, r7, r3
 8014aee:	781a      	ldrb	r2, [r3, #0]
 8014af0:	230a      	movs	r3, #10
 8014af2:	18fb      	adds	r3, r7, r3
 8014af4:	881b      	ldrh	r3, [r3, #0]
 8014af6:	b219      	sxth	r1, r3
 8014af8:	2910      	cmp	r1, #16
 8014afa:	dd00      	ble.n	8014afe <PayloadEncrypt+0x156>
 8014afc:	2310      	movs	r3, #16
 8014afe:	b21b      	sxth	r3, r3
 8014b00:	429a      	cmp	r2, r3
 8014b02:	dbd2      	blt.n	8014aaa <PayloadEncrypt+0x102>
        }
        size -= 16;
 8014b04:	210a      	movs	r1, #10
 8014b06:	187b      	adds	r3, r7, r1
 8014b08:	881b      	ldrh	r3, [r3, #0]
 8014b0a:	3b10      	subs	r3, #16
 8014b0c:	b29a      	uxth	r2, r3
 8014b0e:	187b      	adds	r3, r7, r1
 8014b10:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8014b12:	2237      	movs	r2, #55	@ 0x37
 8014b14:	18bb      	adds	r3, r7, r2
 8014b16:	18ba      	adds	r2, r7, r2
 8014b18:	7812      	ldrb	r2, [r2, #0]
 8014b1a:	3210      	adds	r2, #16
 8014b1c:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8014b1e:	230a      	movs	r3, #10
 8014b20:	18fb      	adds	r3, r7, r3
 8014b22:	2200      	movs	r2, #0
 8014b24:	5e9b      	ldrsh	r3, [r3, r2]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	dca0      	bgt.n	8014a6c <PayloadEncrypt+0xc4>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014b2a:	2300      	movs	r3, #0
}
 8014b2c:	0018      	movs	r0, r3
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	b00f      	add	sp, #60	@ 0x3c
 8014b32:	bd90      	pop	{r4, r7, pc}

08014b34 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014b34:	b5b0      	push	{r4, r5, r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	0005      	movs	r5, r0
 8014b3c:	000c      	movs	r4, r1
 8014b3e:	0010      	movs	r0, r2
 8014b40:	0019      	movs	r1, r3
 8014b42:	1dbb      	adds	r3, r7, #6
 8014b44:	1c2a      	adds	r2, r5, #0
 8014b46:	801a      	strh	r2, [r3, #0]
 8014b48:	1d7b      	adds	r3, r7, #5
 8014b4a:	1c22      	adds	r2, r4, #0
 8014b4c:	701a      	strb	r2, [r3, #0]
 8014b4e:	1d3b      	adds	r3, r7, #4
 8014b50:	1c02      	adds	r2, r0, #0
 8014b52:	701a      	strb	r2, [r3, #0]
 8014b54:	1cfb      	adds	r3, r7, #3
 8014b56:	1c0a      	adds	r2, r1, #0
 8014b58:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8014b5a:	6a3b      	ldr	r3, [r7, #32]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d101      	bne.n	8014b64 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b60:	230a      	movs	r3, #10
 8014b62:	e050      	b.n	8014c06 <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 8014b64:	6a3b      	ldr	r3, [r7, #32]
 8014b66:	2249      	movs	r2, #73	@ 0x49
 8014b68:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014b6a:	6a3b      	ldr	r3, [r7, #32]
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	2200      	movs	r2, #0
 8014b70:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014b72:	6a3b      	ldr	r3, [r7, #32]
 8014b74:	3302      	adds	r3, #2
 8014b76:	2200      	movs	r2, #0
 8014b78:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014b7a:	6a3b      	ldr	r3, [r7, #32]
 8014b7c:	3303      	adds	r3, #3
 8014b7e:	2200      	movs	r2, #0
 8014b80:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014b82:	6a3b      	ldr	r3, [r7, #32]
 8014b84:	3304      	adds	r3, #4
 8014b86:	2200      	movs	r2, #0
 8014b88:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014b8a:	6a3b      	ldr	r3, [r7, #32]
 8014b8c:	3305      	adds	r3, #5
 8014b8e:	1cfa      	adds	r2, r7, #3
 8014b90:	7812      	ldrb	r2, [r2, #0]
 8014b92:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014b94:	6a3b      	ldr	r3, [r7, #32]
 8014b96:	3306      	adds	r3, #6
 8014b98:	69ba      	ldr	r2, [r7, #24]
 8014b9a:	b2d2      	uxtb	r2, r2
 8014b9c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014b9e:	69bb      	ldr	r3, [r7, #24]
 8014ba0:	0a1a      	lsrs	r2, r3, #8
 8014ba2:	6a3b      	ldr	r3, [r7, #32]
 8014ba4:	3307      	adds	r3, #7
 8014ba6:	b2d2      	uxtb	r2, r2
 8014ba8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	0c1a      	lsrs	r2, r3, #16
 8014bae:	6a3b      	ldr	r3, [r7, #32]
 8014bb0:	3308      	adds	r3, #8
 8014bb2:	b2d2      	uxtb	r2, r2
 8014bb4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	0e1a      	lsrs	r2, r3, #24
 8014bba:	6a3b      	ldr	r3, [r7, #32]
 8014bbc:	3309      	adds	r3, #9
 8014bbe:	b2d2      	uxtb	r2, r2
 8014bc0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014bc2:	6a3b      	ldr	r3, [r7, #32]
 8014bc4:	330a      	adds	r3, #10
 8014bc6:	69fa      	ldr	r2, [r7, #28]
 8014bc8:	b2d2      	uxtb	r2, r2
 8014bca:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014bcc:	69fb      	ldr	r3, [r7, #28]
 8014bce:	0a1a      	lsrs	r2, r3, #8
 8014bd0:	6a3b      	ldr	r3, [r7, #32]
 8014bd2:	330b      	adds	r3, #11
 8014bd4:	b2d2      	uxtb	r2, r2
 8014bd6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014bd8:	69fb      	ldr	r3, [r7, #28]
 8014bda:	0c1a      	lsrs	r2, r3, #16
 8014bdc:	6a3b      	ldr	r3, [r7, #32]
 8014bde:	330c      	adds	r3, #12
 8014be0:	b2d2      	uxtb	r2, r2
 8014be2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014be4:	69fb      	ldr	r3, [r7, #28]
 8014be6:	0e1a      	lsrs	r2, r3, #24
 8014be8:	6a3b      	ldr	r3, [r7, #32]
 8014bea:	330d      	adds	r3, #13
 8014bec:	b2d2      	uxtb	r2, r2
 8014bee:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014bf0:	6a3b      	ldr	r3, [r7, #32]
 8014bf2:	330e      	adds	r3, #14
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014bf8:	6a3b      	ldr	r3, [r7, #32]
 8014bfa:	330f      	adds	r3, #15
 8014bfc:	1dba      	adds	r2, r7, #6
 8014bfe:	8812      	ldrh	r2, [r2, #0]
 8014c00:	b2d2      	uxtb	r2, r2
 8014c02:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014c04:	2300      	movs	r3, #0
}
 8014c06:	0018      	movs	r0, r3
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	b002      	add	sp, #8
 8014c0c:	bdb0      	pop	{r4, r5, r7, pc}

08014c0e <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014c0e:	b5b0      	push	{r4, r5, r7, lr}
 8014c10:	b08a      	sub	sp, #40	@ 0x28
 8014c12:	af04      	add	r7, sp, #16
 8014c14:	6078      	str	r0, [r7, #4]
 8014c16:	000c      	movs	r4, r1
 8014c18:	0010      	movs	r0, r2
 8014c1a:	0019      	movs	r1, r3
 8014c1c:	1cbb      	adds	r3, r7, #2
 8014c1e:	1c22      	adds	r2, r4, #0
 8014c20:	801a      	strh	r2, [r3, #0]
 8014c22:	1c7b      	adds	r3, r7, #1
 8014c24:	1c02      	adds	r2, r0, #0
 8014c26:	701a      	strb	r2, [r3, #0]
 8014c28:	003b      	movs	r3, r7
 8014c2a:	1c0a      	adds	r2, r1, #0
 8014c2c:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d002      	beq.n	8014c3a <ComputeCmacB0+0x2c>
 8014c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d101      	bne.n	8014c3e <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c3a:	230a      	movs	r3, #10
 8014c3c:	e02a      	b.n	8014c94 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014c3e:	1cbb      	adds	r3, r7, #2
 8014c40:	881a      	ldrh	r2, [r3, #0]
 8014c42:	2380      	movs	r3, #128	@ 0x80
 8014c44:	005b      	lsls	r3, r3, #1
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d901      	bls.n	8014c4e <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014c4a:	230e      	movs	r3, #14
 8014c4c:	e022      	b.n	8014c94 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014c4e:	2328      	movs	r3, #40	@ 0x28
 8014c50:	18fb      	adds	r3, r7, r3
 8014c52:	781c      	ldrb	r4, [r3, #0]
 8014c54:	003b      	movs	r3, r7
 8014c56:	781a      	ldrb	r2, [r3, #0]
 8014c58:	1c7b      	adds	r3, r7, #1
 8014c5a:	7819      	ldrb	r1, [r3, #0]
 8014c5c:	1cbb      	adds	r3, r7, #2
 8014c5e:	8818      	ldrh	r0, [r3, #0]
 8014c60:	2508      	movs	r5, #8
 8014c62:	197b      	adds	r3, r7, r5
 8014c64:	9302      	str	r3, [sp, #8]
 8014c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c68:	9301      	str	r3, [sp, #4]
 8014c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c6c:	9300      	str	r3, [sp, #0]
 8014c6e:	0023      	movs	r3, r4
 8014c70:	f7ff ff60 	bl	8014b34 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014c74:	1c7b      	adds	r3, r7, #1
 8014c76:	781c      	ldrb	r4, [r3, #0]
 8014c78:	1cbb      	adds	r3, r7, #2
 8014c7a:	881a      	ldrh	r2, [r3, #0]
 8014c7c:	6879      	ldr	r1, [r7, #4]
 8014c7e:	1978      	adds	r0, r7, r5
 8014c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	0023      	movs	r3, r4
 8014c86:	f7f8 f8e7 	bl	800ce58 <SecureElementComputeAesCmac>
 8014c8a:	1e03      	subs	r3, r0, #0
 8014c8c:	d001      	beq.n	8014c92 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c8e:	230f      	movs	r3, #15
 8014c90:	e000      	b.n	8014c94 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014c92:	2300      	movs	r3, #0
}
 8014c94:	0018      	movs	r0, r3
 8014c96:	46bd      	mov	sp, r7
 8014c98:	b006      	add	sp, #24
 8014c9a:	bdb0      	pop	{r4, r5, r7, pc}

08014c9c <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c9e:	b0cd      	sub	sp, #308	@ 0x134
 8014ca0:	af04      	add	r7, sp, #16
 8014ca2:	6078      	str	r0, [r7, #4]
 8014ca4:	000c      	movs	r4, r1
 8014ca6:	0010      	movs	r0, r2
 8014ca8:	0019      	movs	r1, r3
 8014caa:	4b46      	ldr	r3, [pc, #280]	@ (8014dc4 <VerifyCmacB0+0x128>)
 8014cac:	2590      	movs	r5, #144	@ 0x90
 8014cae:	006d      	lsls	r5, r5, #1
 8014cb0:	195b      	adds	r3, r3, r5
 8014cb2:	19db      	adds	r3, r3, r7
 8014cb4:	1c22      	adds	r2, r4, #0
 8014cb6:	801a      	strh	r2, [r3, #0]
 8014cb8:	4b43      	ldr	r3, [pc, #268]	@ (8014dc8 <VerifyCmacB0+0x12c>)
 8014cba:	002c      	movs	r4, r5
 8014cbc:	191b      	adds	r3, r3, r4
 8014cbe:	19db      	adds	r3, r3, r7
 8014cc0:	1c02      	adds	r2, r0, #0
 8014cc2:	701a      	strb	r2, [r3, #0]
 8014cc4:	4b41      	ldr	r3, [pc, #260]	@ (8014dcc <VerifyCmacB0+0x130>)
 8014cc6:	191b      	adds	r3, r3, r4
 8014cc8:	19db      	adds	r3, r3, r7
 8014cca:	1c0a      	adds	r2, r1, #0
 8014ccc:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d101      	bne.n	8014cd8 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014cd4:	230a      	movs	r3, #10
 8014cd6:	e070      	b.n	8014dba <VerifyCmacB0+0x11e>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8014dc4 <VerifyCmacB0+0x128>)
 8014cda:	2290      	movs	r2, #144	@ 0x90
 8014cdc:	0052      	lsls	r2, r2, #1
 8014cde:	189b      	adds	r3, r3, r2
 8014ce0:	19db      	adds	r3, r3, r7
 8014ce2:	881a      	ldrh	r2, [r3, #0]
 8014ce4:	2380      	movs	r3, #128	@ 0x80
 8014ce6:	005b      	lsls	r3, r3, #1
 8014ce8:	429a      	cmp	r2, r3
 8014cea:	d901      	bls.n	8014cf0 <VerifyCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014cec:	230e      	movs	r3, #14
 8014cee:	e064      	b.n	8014dba <VerifyCmacB0+0x11e>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014cf0:	2388      	movs	r3, #136	@ 0x88
 8014cf2:	005a      	lsls	r2, r3, #1
 8014cf4:	260c      	movs	r6, #12
 8014cf6:	19bb      	adds	r3, r7, r6
 8014cf8:	2100      	movs	r1, #0
 8014cfa:	0018      	movs	r0, r3
 8014cfc:	f003 fe72 	bl	80189e4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014d00:	2398      	movs	r3, #152	@ 0x98
 8014d02:	005b      	lsls	r3, r3, #1
 8014d04:	2008      	movs	r0, #8
 8014d06:	181b      	adds	r3, r3, r0
 8014d08:	19db      	adds	r3, r3, r7
 8014d0a:	781c      	ldrb	r4, [r3, #0]
 8014d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8014dcc <VerifyCmacB0+0x130>)
 8014d0e:	2590      	movs	r5, #144	@ 0x90
 8014d10:	006d      	lsls	r5, r5, #1
 8014d12:	195b      	adds	r3, r3, r5
 8014d14:	19db      	adds	r3, r3, r7
 8014d16:	781a      	ldrb	r2, [r3, #0]
 8014d18:	4b2b      	ldr	r3, [pc, #172]	@ (8014dc8 <VerifyCmacB0+0x12c>)
 8014d1a:	195b      	adds	r3, r3, r5
 8014d1c:	19db      	adds	r3, r3, r7
 8014d1e:	7819      	ldrb	r1, [r3, #0]
 8014d20:	4b28      	ldr	r3, [pc, #160]	@ (8014dc4 <VerifyCmacB0+0x128>)
 8014d22:	195b      	adds	r3, r3, r5
 8014d24:	19db      	adds	r3, r3, r7
 8014d26:	881b      	ldrh	r3, [r3, #0]
 8014d28:	469c      	mov	ip, r3
 8014d2a:	19bb      	adds	r3, r7, r6
 8014d2c:	9302      	str	r3, [sp, #8]
 8014d2e:	239c      	movs	r3, #156	@ 0x9c
 8014d30:	005b      	lsls	r3, r3, #1
 8014d32:	181b      	adds	r3, r3, r0
 8014d34:	19db      	adds	r3, r3, r7
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	9301      	str	r3, [sp, #4]
 8014d3a:	239a      	movs	r3, #154	@ 0x9a
 8014d3c:	005b      	lsls	r3, r3, #1
 8014d3e:	181b      	adds	r3, r3, r0
 8014d40:	19db      	adds	r3, r3, r7
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	9300      	str	r3, [sp, #0]
 8014d46:	0023      	movs	r3, r4
 8014d48:	4660      	mov	r0, ip
 8014d4a:	f7ff fef3 	bl	8014b34 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014d4e:	19bb      	adds	r3, r7, r6
 8014d50:	3310      	adds	r3, #16
 8014d52:	4a1c      	ldr	r2, [pc, #112]	@ (8014dc4 <VerifyCmacB0+0x128>)
 8014d54:	1952      	adds	r2, r2, r5
 8014d56:	19d2      	adds	r2, r2, r7
 8014d58:	8812      	ldrh	r2, [r2, #0]
 8014d5a:	6879      	ldr	r1, [r7, #4]
 8014d5c:	0018      	movs	r0, r3
 8014d5e:	f003 fe03 	bl	8018968 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014d62:	2020      	movs	r0, #32
 8014d64:	30ff      	adds	r0, #255	@ 0xff
 8014d66:	183b      	adds	r3, r7, r0
 8014d68:	2206      	movs	r2, #6
 8014d6a:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014d6c:	4b15      	ldr	r3, [pc, #84]	@ (8014dc4 <VerifyCmacB0+0x128>)
 8014d6e:	195b      	adds	r3, r3, r5
 8014d70:	19db      	adds	r3, r3, r7
 8014d72:	881b      	ldrh	r3, [r3, #0]
 8014d74:	3310      	adds	r3, #16
 8014d76:	b299      	uxth	r1, r3
 8014d78:	183c      	adds	r4, r7, r0
 8014d7a:	4b13      	ldr	r3, [pc, #76]	@ (8014dc8 <VerifyCmacB0+0x12c>)
 8014d7c:	195b      	adds	r3, r3, r5
 8014d7e:	19db      	adds	r3, r3, r7
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	229e      	movs	r2, #158	@ 0x9e
 8014d84:	0052      	lsls	r2, r2, #1
 8014d86:	2008      	movs	r0, #8
 8014d88:	1812      	adds	r2, r2, r0
 8014d8a:	19d2      	adds	r2, r2, r7
 8014d8c:	6812      	ldr	r2, [r2, #0]
 8014d8e:	19b8      	adds	r0, r7, r6
 8014d90:	f7f8 f883 	bl	800ce9a <SecureElementVerifyAesCmac>
 8014d94:	0003      	movs	r3, r0
 8014d96:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014d98:	2020      	movs	r0, #32
 8014d9a:	30ff      	adds	r0, #255	@ 0xff
 8014d9c:	183b      	adds	r3, r7, r0
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d101      	bne.n	8014da8 <VerifyCmacB0+0x10c>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014da4:	2300      	movs	r3, #0
 8014da6:	e008      	b.n	8014dba <VerifyCmacB0+0x11e>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014da8:	2320      	movs	r3, #32
 8014daa:	33ff      	adds	r3, #255	@ 0xff
 8014dac:	18fb      	adds	r3, r7, r3
 8014dae:	781b      	ldrb	r3, [r3, #0]
 8014db0:	2b01      	cmp	r3, #1
 8014db2:	d101      	bne.n	8014db8 <VerifyCmacB0+0x11c>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014db4:	2301      	movs	r3, #1
 8014db6:	e000      	b.n	8014dba <VerifyCmacB0+0x11e>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014db8:	230f      	movs	r3, #15
}
 8014dba:	0018      	movs	r0, r3
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	b049      	add	sp, #292	@ 0x124
 8014dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dc2:	46c0      	nop			@ (mov r8, r8)
 8014dc4:	fffffee2 	.word	0xfffffee2
 8014dc8:	fffffee1 	.word	0xfffffee1
 8014dcc:	fffffee0 	.word	0xfffffee0

08014dd0 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b084      	sub	sp, #16
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	0002      	movs	r2, r0
 8014dd8:	6039      	str	r1, [r7, #0]
 8014dda:	1dfb      	adds	r3, r7, #7
 8014ddc:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014dde:	230f      	movs	r3, #15
 8014de0:	18fb      	adds	r3, r7, r3
 8014de2:	2200      	movs	r2, #0
 8014de4:	701a      	strb	r2, [r3, #0]
 8014de6:	e018      	b.n	8014e1a <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014de8:	210f      	movs	r1, #15
 8014dea:	187b      	adds	r3, r7, r1
 8014dec:	781a      	ldrb	r2, [r3, #0]
 8014dee:	4b10      	ldr	r3, [pc, #64]	@ (8014e30 <GetKeyAddrItem+0x60>)
 8014df0:	0092      	lsls	r2, r2, #2
 8014df2:	5cd3      	ldrb	r3, [r2, r3]
 8014df4:	1dfa      	adds	r2, r7, #7
 8014df6:	7812      	ldrb	r2, [r2, #0]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d108      	bne.n	8014e0e <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8014dfc:	187b      	adds	r3, r7, r1
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	009a      	lsls	r2, r3, #2
 8014e02:	4b0b      	ldr	r3, [pc, #44]	@ (8014e30 <GetKeyAddrItem+0x60>)
 8014e04:	18d2      	adds	r2, r2, r3
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	e00b      	b.n	8014e26 <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014e0e:	210f      	movs	r1, #15
 8014e10:	187b      	adds	r3, r7, r1
 8014e12:	781a      	ldrb	r2, [r3, #0]
 8014e14:	187b      	adds	r3, r7, r1
 8014e16:	3201      	adds	r2, #1
 8014e18:	701a      	strb	r2, [r3, #0]
 8014e1a:	230f      	movs	r3, #15
 8014e1c:	18fb      	adds	r3, r7, r3
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	2b01      	cmp	r3, #1
 8014e22:	d9e1      	bls.n	8014de8 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014e24:	230c      	movs	r3, #12
}
 8014e26:	0018      	movs	r0, r3
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	b004      	add	sp, #16
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	46c0      	nop			@ (mov r8, r8)
 8014e30:	200001a4 	.word	0x200001a4

08014e34 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8014e34:	b590      	push	{r4, r7, lr}
 8014e36:	b089      	sub	sp, #36	@ 0x24
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	60b9      	str	r1, [r7, #8]
 8014e3c:	607a      	str	r2, [r7, #4]
 8014e3e:	603b      	str	r3, [r7, #0]
 8014e40:	230f      	movs	r3, #15
 8014e42:	18fb      	adds	r3, r7, r3
 8014e44:	1c02      	adds	r2, r0, #0
 8014e46:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d005      	beq.n	8014e5a <DeriveSessionKey10x+0x26>
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d002      	beq.n	8014e5a <DeriveSessionKey10x+0x26>
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d101      	bne.n	8014e5e <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e5a:	230a      	movs	r3, #10
 8014e5c:	e043      	b.n	8014ee6 <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 8014e5e:	2310      	movs	r3, #16
 8014e60:	18fb      	adds	r3, r7, r3
 8014e62:	2200      	movs	r2, #0
 8014e64:	601a      	str	r2, [r3, #0]
 8014e66:	3304      	adds	r3, #4
 8014e68:	220c      	movs	r2, #12
 8014e6a:	2100      	movs	r1, #0
 8014e6c:	0018      	movs	r0, r3
 8014e6e:	f008 fa12 	bl	801d296 <memset>

    switch( keyID )
 8014e72:	230f      	movs	r3, #15
 8014e74:	18fb      	adds	r3, r7, r3
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	2b07      	cmp	r3, #7
 8014e7a:	d002      	beq.n	8014e82 <DeriveSessionKey10x+0x4e>
 8014e7c:	2b08      	cmp	r3, #8
 8014e7e:	d005      	beq.n	8014e8c <DeriveSessionKey10x+0x58>
 8014e80:	e009      	b.n	8014e96 <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8014e82:	2310      	movs	r3, #16
 8014e84:	18fb      	adds	r3, r7, r3
 8014e86:	2201      	movs	r2, #1
 8014e88:	701a      	strb	r2, [r3, #0]
            break;
 8014e8a:	e006      	b.n	8014e9a <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014e8c:	2310      	movs	r3, #16
 8014e8e:	18fb      	adds	r3, r7, r3
 8014e90:	2202      	movs	r2, #2
 8014e92:	701a      	strb	r2, [r3, #0]
            break;
 8014e94:	e001      	b.n	8014e9a <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014e96:	230b      	movs	r3, #11
 8014e98:	e025      	b.n	8014ee6 <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8014e9a:	2410      	movs	r4, #16
 8014e9c:	193b      	adds	r3, r7, r4
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	68b9      	ldr	r1, [r7, #8]
 8014ea2:	2203      	movs	r2, #3
 8014ea4:	0018      	movs	r0, r3
 8014ea6:	f003 fd5f 	bl	8018968 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8014eaa:	193b      	adds	r3, r7, r4
 8014eac:	3304      	adds	r3, #4
 8014eae:	6879      	ldr	r1, [r7, #4]
 8014eb0:	2203      	movs	r2, #3
 8014eb2:	0018      	movs	r0, r3
 8014eb4:	f003 fd58 	bl	8018968 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8014eb8:	193b      	adds	r3, r7, r4
 8014eba:	3307      	adds	r3, #7
 8014ebc:	6839      	ldr	r1, [r7, #0]
 8014ebe:	2202      	movs	r2, #2
 8014ec0:	0018      	movs	r0, r3
 8014ec2:	f003 fd51 	bl	8018968 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8014ef0 <DeriveSessionKey10x+0xbc>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	220f      	movs	r2, #15
 8014ecc:	18ba      	adds	r2, r7, r2
 8014ece:	7812      	ldrb	r2, [r2, #0]
 8014ed0:	1939      	adds	r1, r7, r4
 8014ed2:	6818      	ldr	r0, [r3, #0]
 8014ed4:	0013      	movs	r3, r2
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	f7f8 f892 	bl	800d000 <SecureElementDeriveAndStoreKey>
 8014edc:	1e03      	subs	r3, r0, #0
 8014ede:	d001      	beq.n	8014ee4 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ee0:	230f      	movs	r3, #15
 8014ee2:	e000      	b.n	8014ee6 <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014ee4:	2300      	movs	r3, #0
}
 8014ee6:	0018      	movs	r0, r3
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	b009      	add	sp, #36	@ 0x24
 8014eec:	bd90      	pop	{r4, r7, pc}
 8014eee:	46c0      	nop			@ (mov r8, r8)
 8014ef0:	200012cc 	.word	0x200012cc

08014ef4 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	0002      	movs	r2, r0
 8014efc:	6039      	str	r1, [r7, #0]
 8014efe:	1dfb      	adds	r3, r7, #7
 8014f00:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d101      	bne.n	8014f0c <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f08:	230a      	movs	r3, #10
 8014f0a:	e039      	b.n	8014f80 <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8014f0c:	1dfb      	adds	r3, r7, #7
 8014f0e:	781b      	ldrb	r3, [r3, #0]
 8014f10:	2b04      	cmp	r3, #4
 8014f12:	d02c      	beq.n	8014f6e <GetLastFcntDown+0x7a>
 8014f14:	dc31      	bgt.n	8014f7a <GetLastFcntDown+0x86>
 8014f16:	2b03      	cmp	r3, #3
 8014f18:	d01d      	beq.n	8014f56 <GetLastFcntDown+0x62>
 8014f1a:	dc2e      	bgt.n	8014f7a <GetLastFcntDown+0x86>
 8014f1c:	2b01      	cmp	r3, #1
 8014f1e:	d002      	beq.n	8014f26 <GetLastFcntDown+0x32>
 8014f20:	2b02      	cmp	r3, #2
 8014f22:	d00c      	beq.n	8014f3e <GetLastFcntDown+0x4a>
 8014f24:	e029      	b.n	8014f7a <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8014f26:	4b18      	ldr	r3, [pc, #96]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	691a      	ldr	r2, [r3, #16]
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8014f30:	4b15      	ldr	r3, [pc, #84]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f32:	681a      	ldr	r2, [r3, #0]
 8014f34:	4b14      	ldr	r3, [pc, #80]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	3210      	adds	r2, #16
 8014f3a:	621a      	str	r2, [r3, #32]
            break;
 8014f3c:	e01f      	b.n	8014f7e <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8014f3e:	4b12      	ldr	r3, [pc, #72]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	695a      	ldr	r2, [r3, #20]
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8014f48:	4b0f      	ldr	r3, [pc, #60]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	3214      	adds	r2, #20
 8014f52:	621a      	str	r2, [r3, #32]
            break;
 8014f54:	e013      	b.n	8014f7e <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8014f56:	4b0c      	ldr	r3, [pc, #48]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	699a      	ldr	r2, [r3, #24]
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8014f60:	4b09      	ldr	r3, [pc, #36]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	4b08      	ldr	r3, [pc, #32]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	3218      	adds	r2, #24
 8014f6a:	621a      	str	r2, [r3, #32]
            break;
 8014f6c:	e007      	b.n	8014f7e <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8014f6e:	4b06      	ldr	r3, [pc, #24]	@ (8014f88 <GetLastFcntDown+0x94>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	69da      	ldr	r2, [r3, #28]
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	601a      	str	r2, [r3, #0]
            break;
 8014f78:	e001      	b.n	8014f7e <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014f7a:	2305      	movs	r3, #5
 8014f7c:	e000      	b.n	8014f80 <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014f7e:	2300      	movs	r3, #0
}
 8014f80:	0018      	movs	r0, r3
 8014f82:	46bd      	mov	sp, r7
 8014f84:	b002      	add	sp, #8
 8014f86:	bd80      	pop	{r7, pc}
 8014f88:	200012cc 	.word	0x200012cc

08014f8c <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b084      	sub	sp, #16
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	0002      	movs	r2, r0
 8014f94:	6039      	str	r1, [r7, #0]
 8014f96:	1dfb      	adds	r3, r7, #7
 8014f98:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014f9e:	230c      	movs	r3, #12
 8014fa0:	18fa      	adds	r2, r7, r3
 8014fa2:	1dfb      	adds	r3, r7, #7
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	0011      	movs	r1, r2
 8014fa8:	0018      	movs	r0, r3
 8014faa:	f7ff ffa3 	bl	8014ef4 <GetLastFcntDown>
 8014fae:	1e03      	subs	r3, r0, #0
 8014fb0:	d001      	beq.n	8014fb6 <CheckFCntDown+0x2a>
    {
        return false;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	e009      	b.n	8014fca <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	683a      	ldr	r2, [r7, #0]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d802      	bhi.n	8014fc4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014fbe:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	d101      	bne.n	8014fc8 <CheckFCntDown+0x3c>
    {
        return true;
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	e000      	b.n	8014fca <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014fc8:	2300      	movs	r3, #0
    }
}
 8014fca:	0018      	movs	r0, r3
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	b004      	add	sp, #16
 8014fd0:	bd80      	pop	{r7, pc}
	...

08014fd4 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	0002      	movs	r2, r0
 8014fdc:	6039      	str	r1, [r7, #0]
 8014fde:	1dfb      	adds	r3, r7, #7
 8014fe0:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8014fe2:	1dfb      	adds	r3, r7, #7
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	2b04      	cmp	r3, #4
 8014fe8:	d017      	beq.n	801501a <UpdateFCntDown+0x46>
 8014fea:	dc1b      	bgt.n	8015024 <UpdateFCntDown+0x50>
 8014fec:	2b03      	cmp	r3, #3
 8014fee:	d00f      	beq.n	8015010 <UpdateFCntDown+0x3c>
 8014ff0:	dc18      	bgt.n	8015024 <UpdateFCntDown+0x50>
 8014ff2:	2b01      	cmp	r3, #1
 8014ff4:	d002      	beq.n	8014ffc <UpdateFCntDown+0x28>
 8014ff6:	2b02      	cmp	r3, #2
 8014ff8:	d005      	beq.n	8015006 <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 8014ffa:	e013      	b.n	8015024 <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8014ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8015034 <UpdateFCntDown+0x60>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	683a      	ldr	r2, [r7, #0]
 8015002:	611a      	str	r2, [r3, #16]
            break;
 8015004:	e00f      	b.n	8015026 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8015006:	4b0b      	ldr	r3, [pc, #44]	@ (8015034 <UpdateFCntDown+0x60>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	683a      	ldr	r2, [r7, #0]
 801500c:	615a      	str	r2, [r3, #20]
            break;
 801500e:	e00a      	b.n	8015026 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8015010:	4b08      	ldr	r3, [pc, #32]	@ (8015034 <UpdateFCntDown+0x60>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	683a      	ldr	r2, [r7, #0]
 8015016:	619a      	str	r2, [r3, #24]
            break;
 8015018:	e005      	b.n	8015026 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 801501a:	4b06      	ldr	r3, [pc, #24]	@ (8015034 <UpdateFCntDown+0x60>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	683a      	ldr	r2, [r7, #0]
 8015020:	61da      	str	r2, [r3, #28]
            break;
 8015022:	e000      	b.n	8015026 <UpdateFCntDown+0x52>
            break;
 8015024:	46c0      	nop			@ (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015026:	4b03      	ldr	r3, [pc, #12]	@ (8015034 <UpdateFCntDown+0x60>)
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	4798      	blx	r3
}
 801502c:	46c0      	nop			@ (mov r8, r8)
 801502e:	46bd      	mov	sp, r7
 8015030:	b002      	add	sp, #8
 8015032:	bd80      	pop	{r7, pc}
 8015034:	200012cc 	.word	0x200012cc

08015038 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015038:	b580      	push	{r7, lr}
 801503a:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 801503c:	4b11      	ldr	r3, [pc, #68]	@ (8015084 <ResetFCnts+0x4c>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2200      	movs	r2, #0
 8015042:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015044:	4b0f      	ldr	r3, [pc, #60]	@ (8015084 <ResetFCnts+0x4c>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2201      	movs	r2, #1
 801504a:	4252      	negs	r2, r2
 801504c:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801504e:	4b0d      	ldr	r3, [pc, #52]	@ (8015084 <ResetFCnts+0x4c>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2201      	movs	r2, #1
 8015054:	4252      	negs	r2, r2
 8015056:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015058:	4b0a      	ldr	r3, [pc, #40]	@ (8015084 <ResetFCnts+0x4c>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2201      	movs	r2, #1
 801505e:	4252      	negs	r2, r2
 8015060:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015062:	4b08      	ldr	r3, [pc, #32]	@ (8015084 <ResetFCnts+0x4c>)
 8015064:	681a      	ldr	r2, [r3, #0]
 8015066:	4b07      	ldr	r3, [pc, #28]	@ (8015084 <ResetFCnts+0x4c>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	3218      	adds	r2, #24
 801506c:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 801506e:	4b05      	ldr	r3, [pc, #20]	@ (8015084 <ResetFCnts+0x4c>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2201      	movs	r2, #1
 8015074:	4252      	negs	r2, r2
 8015076:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015078:	4b02      	ldr	r3, [pc, #8]	@ (8015084 <ResetFCnts+0x4c>)
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	4798      	blx	r3
}
 801507e:	46c0      	nop			@ (mov r8, r8)
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}
 8015084:	200012cc 	.word	0x200012cc

08015088 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015088:	b580      	push	{r7, lr}
 801508a:	af00      	add	r7, sp, #0
    return;
 801508c:	46c0      	nop			@ (mov r8, r8)
}
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}
	...

08015094 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b082      	sub	sp, #8
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 801509c:	4b15      	ldr	r3, [pc, #84]	@ (80150f4 <LoRaMacCryptoInit+0x60>)
 801509e:	4a16      	ldr	r2, [pc, #88]	@ (80150f8 <LoRaMacCryptoInit+0x64>)
 80150a0:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d003      	beq.n	80150b0 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 80150a8:	4b12      	ldr	r3, [pc, #72]	@ (80150f4 <LoRaMacCryptoInit+0x60>)
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	605a      	str	r2, [r3, #4]
 80150ae:	e002      	b.n	80150b6 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 80150b0:	4b10      	ldr	r3, [pc, #64]	@ (80150f4 <LoRaMacCryptoInit+0x60>)
 80150b2:	4a12      	ldr	r2, [pc, #72]	@ (80150fc <LoRaMacCryptoInit+0x68>)
 80150b4:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 80150b6:	4b0f      	ldr	r3, [pc, #60]	@ (80150f4 <LoRaMacCryptoInit+0x60>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2224      	movs	r2, #36	@ 0x24
 80150bc:	2100      	movs	r1, #0
 80150be:	0018      	movs	r0, r3
 80150c0:	f003 fc90 	bl	80189e4 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 80150c4:	4b0b      	ldr	r3, [pc, #44]	@ (80150f4 <LoRaMacCryptoInit+0x60>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2201      	movs	r2, #1
 80150ca:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80150cc:	4b09      	ldr	r3, [pc, #36]	@ (80150f4 <LoRaMacCryptoInit+0x60>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	2201      	movs	r2, #1
 80150d2:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 80150d4:	4b07      	ldr	r3, [pc, #28]	@ (80150f4 <LoRaMacCryptoInit+0x60>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	2201      	movs	r2, #1
 80150da:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 80150dc:	4b05      	ldr	r3, [pc, #20]	@ (80150f4 <LoRaMacCryptoInit+0x60>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2200      	movs	r2, #0
 80150e2:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80150e4:	f7ff ffa8 	bl	8015038 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80150e8:	2300      	movs	r3, #0
}
 80150ea:	0018      	movs	r0, r3
 80150ec:	46bd      	mov	sp, r7
 80150ee:	b002      	add	sp, #8
 80150f0:	bd80      	pop	{r7, pc}
 80150f2:	46c0      	nop			@ (mov r8, r8)
 80150f4:	200012cc 	.word	0x200012cc
 80150f8:	200012d4 	.word	0x200012d4
 80150fc:	08015089 	.word	0x08015089

08015100 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8015108:	4b04      	ldr	r3, [pc, #16]	@ (801511c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	687a      	ldr	r2, [r7, #4]
 801510e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015110:	2300      	movs	r3, #0
}
 8015112:	0018      	movs	r0, r3
 8015114:	46bd      	mov	sp, r7
 8015116:	b002      	add	sp, #8
 8015118:	bd80      	pop	{r7, pc}
 801511a:	46c0      	nop			@ (mov r8, r8)
 801511c:	200012cc 	.word	0x200012cc

08015120 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d007      	beq.n	801513e <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 801512e:	6879      	ldr	r1, [r7, #4]
 8015130:	4b05      	ldr	r3, [pc, #20]	@ (8015148 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8015132:	2224      	movs	r2, #36	@ 0x24
 8015134:	0018      	movs	r0, r3
 8015136:	f003 fc17 	bl	8018968 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 801513a:	2300      	movs	r3, #0
 801513c:	e000      	b.n	8015140 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801513e:	230a      	movs	r3, #10
    }
}
 8015140:	0018      	movs	r0, r3
 8015142:	46bd      	mov	sp, r7
 8015144:	b002      	add	sp, #8
 8015146:	bd80      	pop	{r7, pc}
 8015148:	200012d4 	.word	0x200012d4

0801514c <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b082      	sub	sp, #8
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2224      	movs	r2, #36	@ 0x24
 8015158:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 801515a:	4b02      	ldr	r3, [pc, #8]	@ (8015164 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 801515c:	0018      	movs	r0, r3
 801515e:	46bd      	mov	sp, r7
 8015160:	b002      	add	sp, #8
 8015162:	bd80      	pop	{r7, pc}
 8015164:	200012d4 	.word	0x200012d4

08015168 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d101      	bne.n	801517a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015176:	230a      	movs	r3, #10
 8015178:	e006      	b.n	8015188 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 801517a:	4b05      	ldr	r3, [pc, #20]	@ (8015190 <LoRaMacCryptoGetFCntUp+0x28>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	68db      	ldr	r3, [r3, #12]
 8015180:	1c5a      	adds	r2, r3, #1
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015186:	2300      	movs	r3, #0
}
 8015188:	0018      	movs	r0, r3
 801518a:	46bd      	mov	sp, r7
 801518c:	b002      	add	sp, #8
 801518e:	bd80      	pop	{r7, pc}
 8015190:	200012cc 	.word	0x200012cc

08015194 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015196:	b08d      	sub	sp, #52	@ 0x34
 8015198:	af00      	add	r7, sp, #0
 801519a:	61ba      	str	r2, [r7, #24]
 801519c:	617b      	str	r3, [r7, #20]
 801519e:	230f      	movs	r3, #15
 80151a0:	2610      	movs	r6, #16
 80151a2:	199b      	adds	r3, r3, r6
 80151a4:	19db      	adds	r3, r3, r7
 80151a6:	1c02      	adds	r2, r0, #0
 80151a8:	701a      	strb	r2, [r3, #0]
 80151aa:	230c      	movs	r3, #12
 80151ac:	0030      	movs	r0, r6
 80151ae:	181b      	adds	r3, r3, r0
 80151b0:	19db      	adds	r3, r3, r7
 80151b2:	1c0a      	adds	r2, r1, #0
 80151b4:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 80151b6:	2300      	movs	r3, #0
 80151b8:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t fCntDiff = 0;
 80151ba:	2300      	movs	r3, #0
 80151bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80151be:	231b      	movs	r3, #27
 80151c0:	181b      	adds	r3, r3, r0
 80151c2:	19db      	adds	r3, r3, r7
 80151c4:	2213      	movs	r2, #19
 80151c6:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d101      	bne.n	80151d2 <LoRaMacCryptoGetFCntDown+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80151ce:	230a      	movs	r3, #10
 80151d0:	e068      	b.n	80152a4 <LoRaMacCryptoGetFCntDown+0x110>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80151d2:	221b      	movs	r2, #27
 80151d4:	2110      	movs	r1, #16
 80151d6:	1853      	adds	r3, r2, r1
 80151d8:	19de      	adds	r6, r3, r7
 80151da:	2314      	movs	r3, #20
 80151dc:	185b      	adds	r3, r3, r1
 80151de:	19da      	adds	r2, r3, r7
 80151e0:	230f      	movs	r3, #15
 80151e2:	185b      	adds	r3, r3, r1
 80151e4:	19db      	adds	r3, r3, r7
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	0011      	movs	r1, r2
 80151ea:	0018      	movs	r0, r3
 80151ec:	f7ff fe82 	bl	8014ef4 <GetLastFcntDown>
 80151f0:	0003      	movs	r3, r0
 80151f2:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80151f4:	221b      	movs	r2, #27
 80151f6:	2110      	movs	r1, #16
 80151f8:	1853      	adds	r3, r2, r1
 80151fa:	19db      	adds	r3, r3, r7
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d003      	beq.n	801520a <LoRaMacCryptoGetFCntDown+0x76>
    {
        return cryptoStatus;
 8015202:	1853      	adds	r3, r2, r1
 8015204:	19db      	adds	r3, r3, r7
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	e04c      	b.n	80152a4 <LoRaMacCryptoGetFCntDown+0x110>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801520c:	3301      	adds	r3, #1
 801520e:	d103      	bne.n	8015218 <LoRaMacCryptoGetFCntDown+0x84>
    {
        *currentDown = frameFcnt;
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	69ba      	ldr	r2, [r7, #24]
 8015214:	601a      	str	r2, [r3, #0]
 8015216:	e020      	b.n	801525a <LoRaMacCryptoGetFCntDown+0xc6>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801521a:	041b      	lsls	r3, r3, #16
 801521c:	0c1b      	lsrs	r3, r3, #16
 801521e:	69ba      	ldr	r2, [r7, #24]
 8015220:	1ad3      	subs	r3, r2, r3
 8015222:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( fCntDiff > 0 )
 8015224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015226:	2b00      	cmp	r3, #0
 8015228:	dd05      	ble.n	8015236 <LoRaMacCryptoGetFCntDown+0xa2>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801522a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801522c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801522e:	18d2      	adds	r2, r2, r3
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	601a      	str	r2, [r3, #0]
 8015234:	e011      	b.n	801525a <LoRaMacCryptoGetFCntDown+0xc6>
        }
        else if( fCntDiff == 0 )
 8015236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015238:	2b00      	cmp	r3, #0
 801523a:	d104      	bne.n	8015246 <LoRaMacCryptoGetFCntDown+0xb2>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801523c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015242:	2307      	movs	r3, #7
 8015244:	e02e      	b.n	80152a4 <LoRaMacCryptoGetFCntDown+0x110>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015248:	0c1b      	lsrs	r3, r3, #16
 801524a:	041a      	lsls	r2, r3, #16
 801524c:	69bb      	ldr	r3, [r7, #24]
 801524e:	18d3      	adds	r3, r2, r3
 8015250:	2280      	movs	r2, #128	@ 0x80
 8015252:	0252      	lsls	r2, r2, #9
 8015254:	189a      	adds	r2, r3, r2
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 801525a:	4b14      	ldr	r3, [pc, #80]	@ (80152ac <LoRaMacCryptoGetFCntDown+0x118>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	789b      	ldrb	r3, [r3, #2]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d11e      	bne.n	80152a2 <LoRaMacCryptoGetFCntDown+0x10e>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015264:	697b      	ldr	r3, [r7, #20]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	60bb      	str	r3, [r7, #8]
 801526a:	2300      	movs	r3, #0
 801526c:	60fb      	str	r3, [r7, #12]
 801526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015270:	603b      	str	r3, [r7, #0]
 8015272:	2300      	movs	r3, #0
 8015274:	607b      	str	r3, [r7, #4]
 8015276:	68ba      	ldr	r2, [r7, #8]
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	6838      	ldr	r0, [r7, #0]
 801527c:	6879      	ldr	r1, [r7, #4]
 801527e:	1a12      	subs	r2, r2, r0
 8015280:	418b      	sbcs	r3, r1
 8015282:	210c      	movs	r1, #12
 8015284:	2010      	movs	r0, #16
 8015286:	1809      	adds	r1, r1, r0
 8015288:	19c9      	adds	r1, r1, r7
 801528a:	8809      	ldrh	r1, [r1, #0]
 801528c:	b289      	uxth	r1, r1
 801528e:	000c      	movs	r4, r1
 8015290:	2100      	movs	r1, #0
 8015292:	000d      	movs	r5, r1
 8015294:	429d      	cmp	r5, r3
 8015296:	dc04      	bgt.n	80152a2 <LoRaMacCryptoGetFCntDown+0x10e>
 8015298:	d101      	bne.n	801529e <LoRaMacCryptoGetFCntDown+0x10a>
 801529a:	4294      	cmp	r4, r2
 801529c:	d801      	bhi.n	80152a2 <LoRaMacCryptoGetFCntDown+0x10e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801529e:	2308      	movs	r3, #8
 80152a0:	e000      	b.n	80152a4 <LoRaMacCryptoGetFCntDown+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80152a2:	2300      	movs	r3, #0
}
 80152a4:	0018      	movs	r0, r3
 80152a6:	46bd      	mov	sp, r7
 80152a8:	b00d      	add	sp, #52	@ 0x34
 80152aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152ac:	200012cc 	.word	0x200012cc

080152b0 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d101      	bne.n	80152c2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152be:	230a      	movs	r3, #10
 80152c0:	e006      	b.n	80152d0 <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 80152c2:	4b05      	ldr	r3, [pc, #20]	@ (80152d8 <LoRaMacCryptoSetMulticastReference+0x28>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	331c      	adds	r3, #28
 80152c8:	001a      	movs	r2, r3
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 80152ce:	2300      	movs	r3, #0
}
 80152d0:	0018      	movs	r0, r3
 80152d2:	46bd      	mov	sp, r7
 80152d4:	b002      	add	sp, #8
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	200012cc 	.word	0x200012cc

080152dc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	0002      	movs	r2, r0
 80152e4:	6039      	str	r1, [r7, #0]
 80152e6:	1dfb      	adds	r3, r7, #7
 80152e8:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80152ea:	683a      	ldr	r2, [r7, #0]
 80152ec:	1dfb      	adds	r3, r7, #7
 80152ee:	781b      	ldrb	r3, [r3, #0]
 80152f0:	0011      	movs	r1, r2
 80152f2:	0018      	movs	r0, r3
 80152f4:	f7f7 fd36 	bl	800cd64 <SecureElementSetKey>
 80152f8:	1e03      	subs	r3, r0, #0
 80152fa:	d001      	beq.n	8015300 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80152fc:	230f      	movs	r3, #15
 80152fe:	e014      	b.n	801532a <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8015300:	1dfb      	adds	r3, r7, #7
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d10f      	bne.n	8015328 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015308:	1dfb      	adds	r3, r7, #7
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	0018      	movs	r0, r3
 801530e:	f000 fa77 	bl	8015800 <LoRaMacCryptoDeriveMcRootKey>
 8015312:	1e03      	subs	r3, r0, #0
 8015314:	d001      	beq.n	801531a <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015316:	230f      	movs	r3, #15
 8015318:	e007      	b.n	801532a <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801531a:	2009      	movs	r0, #9
 801531c:	f000 faa4 	bl	8015868 <LoRaMacCryptoDeriveMcKEKey>
 8015320:	1e03      	subs	r3, r0, #0
 8015322:	d001      	beq.n	8015328 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015324:	230f      	movs	r3, #15
 8015326:	e000      	b.n	801532a <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015328:	2300      	movs	r3, #0
}
 801532a:	0018      	movs	r0, r3
 801532c:	46bd      	mov	sp, r7
 801532e:	b002      	add	sp, #8
 8015330:	bd80      	pop	{r7, pc}
	...

08015334 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b086      	sub	sp, #24
 8015338:	af02      	add	r7, sp, #8
 801533a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d101      	bne.n	8015346 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015342:	230a      	movs	r3, #10
 8015344:	e039      	b.n	80153ba <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015346:	230f      	movs	r3, #15
 8015348:	18fb      	adds	r3, r7, r3
 801534a:	2201      	movs	r2, #1
 801534c:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801534e:	2300      	movs	r3, #0
 8015350:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015352:	2308      	movs	r3, #8
 8015354:	18fb      	adds	r3, r7, r3
 8015356:	0018      	movs	r0, r3
 8015358:	f7f7 ff2e 	bl	800d1b8 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 801535c:	68ba      	ldr	r2, [r7, #8]
 801535e:	4b19      	ldr	r3, [pc, #100]	@ (80153c4 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	b292      	uxth	r2, r2
 8015364:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015366:	4b17      	ldr	r3, [pc, #92]	@ (80153c4 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 801536c:	4b15      	ldr	r3, [pc, #84]	@ (80153c4 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	889a      	ldrh	r2, [r3, #4]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	0018      	movs	r0, r3
 801537a:	f000 fc9d 	bl	8015cb8 <LoRaMacSerializerJoinRequest>
 801537e:	1e03      	subs	r3, r0, #0
 8015380:	d001      	beq.n	8015386 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015382:	2311      	movs	r3, #17
 8015384:	e019      	b.n	80153ba <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	6819      	ldr	r1, [r3, #0]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	3318      	adds	r3, #24
 801538e:	220f      	movs	r2, #15
 8015390:	18ba      	adds	r2, r7, r2
 8015392:	7812      	ldrb	r2, [r2, #0]
 8015394:	9300      	str	r3, [sp, #0]
 8015396:	0013      	movs	r3, r2
 8015398:	2213      	movs	r2, #19
 801539a:	2000      	movs	r0, #0
 801539c:	f7f7 fd5c 	bl	800ce58 <SecureElementComputeAesCmac>
 80153a0:	1e03      	subs	r3, r0, #0
 80153a2:	d001      	beq.n	80153a8 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80153a4:	230f      	movs	r3, #15
 80153a6:	e008      	b.n	80153ba <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	0018      	movs	r0, r3
 80153ac:	f000 fc84 	bl	8015cb8 <LoRaMacSerializerJoinRequest>
 80153b0:	1e03      	subs	r3, r0, #0
 80153b2:	d001      	beq.n	80153b8 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80153b4:	2311      	movs	r3, #17
 80153b6:	e000      	b.n	80153ba <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80153b8:	2300      	movs	r3, #0
}
 80153ba:	0018      	movs	r0, r3
 80153bc:	46bd      	mov	sp, r7
 80153be:	b004      	add	sp, #16
 80153c0:	bd80      	pop	{r7, pc}
 80153c2:	46c0      	nop			@ (mov r8, r8)
 80153c4:	200012cc 	.word	0x200012cc

080153c8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80153c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153ca:	b095      	sub	sp, #84	@ 0x54
 80153cc:	af04      	add	r7, sp, #16
 80153ce:	60b9      	str	r1, [r7, #8]
 80153d0:	607a      	str	r2, [r7, #4]
 80153d2:	230f      	movs	r3, #15
 80153d4:	18fb      	adds	r3, r7, r3
 80153d6:	1c02      	adds	r2, r0, #0
 80153d8:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d002      	beq.n	80153e6 <LoRaMacCryptoHandleJoinAccept+0x1e>
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d101      	bne.n	80153ea <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80153e6:	230a      	movs	r3, #10
 80153e8:	e0a7      	b.n	801553a <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80153ea:	233f      	movs	r3, #63	@ 0x3f
 80153ec:	18fb      	adds	r3, r7, r3
 80153ee:	2213      	movs	r2, #19
 80153f0:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80153f2:	2614      	movs	r6, #20
 80153f4:	19bb      	adds	r3, r7, r6
 80153f6:	2200      	movs	r2, #0
 80153f8:	601a      	str	r2, [r3, #0]
 80153fa:	3304      	adds	r3, #4
 80153fc:	221d      	movs	r2, #29
 80153fe:	2100      	movs	r1, #0
 8015400:	0018      	movs	r0, r3
 8015402:	f007 ff48 	bl	801d296 <memset>
    uint8_t versionMinor         = 0;
 8015406:	2313      	movs	r3, #19
 8015408:	18fb      	adds	r3, r7, r3
 801540a:	2200      	movs	r2, #0
 801540c:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 801540e:	4b4d      	ldr	r3, [pc, #308]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	3304      	adds	r3, #4
 8015414:	63bb      	str	r3, [r7, #56]	@ 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 8015416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015418:	781b      	ldrb	r3, [r3, #0]
 801541a:	001d      	movs	r5, r3
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681c      	ldr	r4, [r3, #0]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	791b      	ldrb	r3, [r3, #4]
 8015424:	68b9      	ldr	r1, [r7, #8]
 8015426:	200f      	movs	r0, #15
 8015428:	183a      	adds	r2, r7, r0
 801542a:	7810      	ldrb	r0, [r2, #0]
 801542c:	2213      	movs	r2, #19
 801542e:	18ba      	adds	r2, r7, r2
 8015430:	9202      	str	r2, [sp, #8]
 8015432:	19ba      	adds	r2, r7, r6
 8015434:	9201      	str	r2, [sp, #4]
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	0023      	movs	r3, r4
 801543a:	002a      	movs	r2, r5
 801543c:	f7f7 fe35 	bl	800d0aa <SecureElementProcessJoinAccept>
 8015440:	1e03      	subs	r3, r0, #0
 8015442:	d001      	beq.n	8015448 <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015444:	230f      	movs	r3, #15
 8015446:	e078      	b.n	801553a <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6818      	ldr	r0, [r3, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	791b      	ldrb	r3, [r3, #4]
 8015450:	001a      	movs	r2, r3
 8015452:	2314      	movs	r3, #20
 8015454:	18fb      	adds	r3, r7, r3
 8015456:	0019      	movs	r1, r3
 8015458:	f003 fa86 	bl	8018968 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	0018      	movs	r0, r3
 8015460:	f000 fa2c 	bl	80158bc <LoRaMacParserJoinAccept>
 8015464:	1e03      	subs	r3, r0, #0
 8015466:	d001      	beq.n	801546c <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015468:	2310      	movs	r3, #16
 801546a:	e066      	b.n	801553a <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 801546c:	253f      	movs	r5, #63	@ 0x3f
 801546e:	197c      	adds	r4, r7, r5
 8015470:	2000      	movs	r0, #0
 8015472:	f000 f9c5 	bl	8015800 <LoRaMacCryptoDeriveMcRootKey>
 8015476:	0003      	movs	r3, r0
 8015478:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801547a:	002a      	movs	r2, r5
 801547c:	18bb      	adds	r3, r7, r2
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d002      	beq.n	801548a <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 8015484:	18bb      	adds	r3, r7, r2
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	e057      	b.n	801553a <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801548a:	253f      	movs	r5, #63	@ 0x3f
 801548c:	197c      	adds	r4, r7, r5
 801548e:	2009      	movs	r0, #9
 8015490:	f000 f9ea 	bl	8015868 <LoRaMacCryptoDeriveMcKEKey>
 8015494:	0003      	movs	r3, r0
 8015496:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015498:	002a      	movs	r2, r5
 801549a:	18bb      	adds	r3, r7, r2
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d002      	beq.n	80154a8 <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 80154a2:	18bb      	adds	r3, r7, r2
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	e048      	b.n	801553a <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	1d99      	adds	r1, r3, #6
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	3309      	adds	r3, #9
 80154b0:	001a      	movs	r2, r3
 80154b2:	4b24      	ldr	r3, [pc, #144]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	3304      	adds	r3, #4
 80154b8:	253f      	movs	r5, #63	@ 0x3f
 80154ba:	197c      	adds	r4, r7, r5
 80154bc:	2008      	movs	r0, #8
 80154be:	f7ff fcb9 	bl	8014e34 <DeriveSessionKey10x>
 80154c2:	0003      	movs	r3, r0
 80154c4:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80154c6:	197b      	adds	r3, r7, r5
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d002      	beq.n	80154d4 <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 80154ce:	197b      	adds	r3, r7, r5
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	e032      	b.n	801553a <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	1d99      	adds	r1, r3, #6
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	3309      	adds	r3, #9
 80154dc:	001a      	movs	r2, r3
 80154de:	4b19      	ldr	r3, [pc, #100]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	3304      	adds	r3, #4
 80154e4:	253f      	movs	r5, #63	@ 0x3f
 80154e6:	197c      	adds	r4, r7, r5
 80154e8:	2007      	movs	r0, #7
 80154ea:	f7ff fca3 	bl	8014e34 <DeriveSessionKey10x>
 80154ee:	0003      	movs	r3, r0
 80154f0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80154f2:	197b      	adds	r3, r7, r5
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d002      	beq.n	8015500 <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 80154fa:	197b      	adds	r3, r7, r5
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	e01c      	b.n	801553a <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 8015500:	4b10      	ldr	r3, [pc, #64]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2213      	movs	r2, #19
 8015506:	18ba      	adds	r2, r7, r2
 8015508:	7812      	ldrb	r2, [r2, #0]
 801550a:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 801550c:	4b0d      	ldr	r3, [pc, #52]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	2200      	movs	r2, #0
 8015512:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015514:	4b0b      	ldr	r3, [pc, #44]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	2201      	movs	r2, #1
 801551a:	4252      	negs	r2, r2
 801551c:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801551e:	4b09      	ldr	r3, [pc, #36]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	2201      	movs	r2, #1
 8015524:	4252      	negs	r2, r2
 8015526:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015528:	4b06      	ldr	r3, [pc, #24]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	2201      	movs	r2, #1
 801552e:	4252      	negs	r2, r2
 8015530:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015532:	4b04      	ldr	r3, [pc, #16]	@ (8015544 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015538:	2300      	movs	r3, #0
}
 801553a:	0018      	movs	r0, r3
 801553c:	46bd      	mov	sp, r7
 801553e:	b011      	add	sp, #68	@ 0x44
 8015540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015542:	46c0      	nop			@ (mov r8, r8)
 8015544:	200012cc 	.word	0x200012cc

08015548 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801554a:	b08b      	sub	sp, #44	@ 0x2c
 801554c:	af04      	add	r7, sp, #16
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	0008      	movs	r0, r1
 8015552:	0011      	movs	r1, r2
 8015554:	607b      	str	r3, [r7, #4]
 8015556:	230b      	movs	r3, #11
 8015558:	18fb      	adds	r3, r7, r3
 801555a:	1c02      	adds	r2, r0, #0
 801555c:	701a      	strb	r2, [r3, #0]
 801555e:	230a      	movs	r3, #10
 8015560:	18fb      	adds	r3, r7, r3
 8015562:	1c0a      	adds	r2, r1, #0
 8015564:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015566:	2316      	movs	r3, #22
 8015568:	18fb      	adds	r3, r7, r3
 801556a:	2213      	movs	r2, #19
 801556c:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801556e:	2317      	movs	r3, #23
 8015570:	18fb      	adds	r3, r7, r3
 8015572:	2208      	movs	r2, #8
 8015574:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d101      	bne.n	8015580 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801557c:	230a      	movs	r3, #10
 801557e:	e071      	b.n	8015664 <LoRaMacCryptoSecureMessage+0x11c>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8015580:	4b3a      	ldr	r3, [pc, #232]	@ (801566c <LoRaMacCryptoSecureMessage+0x124>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	68db      	ldr	r3, [r3, #12]
 8015586:	68fa      	ldr	r2, [r7, #12]
 8015588:	429a      	cmp	r2, r3
 801558a:	d201      	bcs.n	8015590 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801558c:	2306      	movs	r3, #6
 801558e:	e069      	b.n	8015664 <LoRaMacCryptoSecureMessage+0x11c>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	2220      	movs	r2, #32
 8015594:	5c9b      	ldrb	r3, [r3, r2]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d103      	bne.n	80155a2 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801559a:	2317      	movs	r3, #23
 801559c:	18fb      	adds	r3, r7, r3
 801559e:	2207      	movs	r2, #7
 80155a0:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 80155a2:	4b32      	ldr	r3, [pc, #200]	@ (801566c <LoRaMacCryptoSecureMessage+0x124>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	68db      	ldr	r3, [r3, #12]
 80155a8:	68fa      	ldr	r2, [r7, #12]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d91c      	bls.n	80155e8 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2228      	movs	r2, #40	@ 0x28
 80155b6:	5c9b      	ldrb	r3, [r3, r2]
 80155b8:	b219      	sxth	r1, r3
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	689d      	ldr	r5, [r3, #8]
 80155be:	2616      	movs	r6, #22
 80155c0:	19bc      	adds	r4, r7, r6
 80155c2:	2317      	movs	r3, #23
 80155c4:	18fb      	adds	r3, r7, r3
 80155c6:	781a      	ldrb	r2, [r3, #0]
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	9301      	str	r3, [sp, #4]
 80155cc:	2300      	movs	r3, #0
 80155ce:	9300      	str	r3, [sp, #0]
 80155d0:	002b      	movs	r3, r5
 80155d2:	f7ff f9e9 	bl	80149a8 <PayloadEncrypt>
 80155d6:	0003      	movs	r3, r0
 80155d8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80155da:	19bb      	adds	r3, r7, r6
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d002      	beq.n	80155e8 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 80155e2:	19bb      	adds	r3, r7, r6
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	e03d      	b.n	8015664 <LoRaMacCryptoSecureMessage+0x11c>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	0018      	movs	r0, r3
 80155ec:	f000 fbff 	bl	8015dee <LoRaMacSerializerData>
 80155f0:	1e03      	subs	r3, r0, #0
 80155f2:	d001      	beq.n	80155f8 <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80155f4:	2311      	movs	r3, #17
 80155f6:	e035      	b.n	8015664 <LoRaMacCryptoSecureMessage+0x11c>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80155f8:	2117      	movs	r1, #23
 80155fa:	187b      	adds	r3, r7, r1
 80155fc:	2207      	movs	r2, #7
 80155fe:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	6818      	ldr	r0, [r3, #0]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	791b      	ldrb	r3, [r3, #4]
 8015608:	3b04      	subs	r3, #4
 801560a:	b29d      	uxth	r5, r3
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	689b      	ldr	r3, [r3, #8]
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	322c      	adds	r2, #44	@ 0x2c
 8015614:	2616      	movs	r6, #22
 8015616:	19bc      	adds	r4, r7, r6
 8015618:	1879      	adds	r1, r7, r1
 801561a:	7809      	ldrb	r1, [r1, #0]
 801561c:	9203      	str	r2, [sp, #12]
 801561e:	68fa      	ldr	r2, [r7, #12]
 8015620:	9202      	str	r2, [sp, #8]
 8015622:	9301      	str	r3, [sp, #4]
 8015624:	2300      	movs	r3, #0
 8015626:	9300      	str	r3, [sp, #0]
 8015628:	2300      	movs	r3, #0
 801562a:	000a      	movs	r2, r1
 801562c:	0029      	movs	r1, r5
 801562e:	f7ff faee 	bl	8014c0e <ComputeCmacB0>
 8015632:	0003      	movs	r3, r0
 8015634:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015636:	19bb      	adds	r3, r7, r6
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d002      	beq.n	8015644 <LoRaMacCryptoSecureMessage+0xfc>
        {
            return retval;
 801563e:	19bb      	adds	r3, r7, r6
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	e00f      	b.n	8015664 <LoRaMacCryptoSecureMessage+0x11c>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	0018      	movs	r0, r3
 8015648:	f000 fbd1 	bl	8015dee <LoRaMacSerializerData>
 801564c:	1e03      	subs	r3, r0, #0
 801564e:	d001      	beq.n	8015654 <LoRaMacCryptoSecureMessage+0x10c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015650:	2311      	movs	r3, #17
 8015652:	e007      	b.n	8015664 <LoRaMacCryptoSecureMessage+0x11c>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8015654:	4b05      	ldr	r3, [pc, #20]	@ (801566c <LoRaMacCryptoSecureMessage+0x124>)
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	68fa      	ldr	r2, [r7, #12]
 801565a:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801565c:	4b03      	ldr	r3, [pc, #12]	@ (801566c <LoRaMacCryptoSecureMessage+0x124>)
 801565e:	685b      	ldr	r3, [r3, #4]
 8015660:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015662:	2300      	movs	r3, #0
}
 8015664:	0018      	movs	r0, r3
 8015666:	46bd      	mov	sp, r7
 8015668:	b007      	add	sp, #28
 801566a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801566c:	200012cc 	.word	0x200012cc

08015670 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015672:	b08b      	sub	sp, #44	@ 0x2c
 8015674:	af04      	add	r7, sp, #16
 8015676:	60b9      	str	r1, [r7, #8]
 8015678:	0011      	movs	r1, r2
 801567a:	607b      	str	r3, [r7, #4]
 801567c:	230f      	movs	r3, #15
 801567e:	18fb      	adds	r3, r7, r3
 8015680:	1c02      	adds	r2, r0, #0
 8015682:	701a      	strb	r2, [r3, #0]
 8015684:	230e      	movs	r3, #14
 8015686:	18fb      	adds	r3, r7, r3
 8015688:	1c0a      	adds	r2, r1, #0
 801568a:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 801568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801568e:	2b00      	cmp	r3, #0
 8015690:	d101      	bne.n	8015696 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015692:	230a      	movs	r3, #10
 8015694:	e0ad      	b.n	80157f2 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015696:	687a      	ldr	r2, [r7, #4]
 8015698:	230e      	movs	r3, #14
 801569a:	18fb      	adds	r3, r7, r3
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	0011      	movs	r1, r2
 80156a0:	0018      	movs	r0, r3
 80156a2:	f7ff fc73 	bl	8014f8c <CheckFCntDown>
 80156a6:	0003      	movs	r3, r0
 80156a8:	001a      	movs	r2, r3
 80156aa:	2301      	movs	r3, #1
 80156ac:	4053      	eors	r3, r2
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d001      	beq.n	80156b8 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80156b4:	2306      	movs	r3, #6
 80156b6:	e09c      	b.n	80157f2 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80156b8:	2315      	movs	r3, #21
 80156ba:	18fb      	adds	r3, r7, r3
 80156bc:	2213      	movs	r2, #19
 80156be:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80156c0:	2317      	movs	r3, #23
 80156c2:	18fb      	adds	r3, r7, r3
 80156c4:	2208      	movs	r2, #8
 80156c6:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80156c8:	2314      	movs	r3, #20
 80156ca:	18fb      	adds	r3, r7, r3
 80156cc:	2207      	movs	r2, #7
 80156ce:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80156d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156d2:	0018      	movs	r0, r3
 80156d4:	f000 f9e2 	bl	8015a9c <LoRaMacParserData>
 80156d8:	1e03      	subs	r3, r0, #0
 80156da:	d001      	beq.n	80156e0 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80156dc:	2310      	movs	r3, #16
 80156de:	e088      	b.n	80157f2 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80156e0:	2515      	movs	r5, #21
 80156e2:	197c      	adds	r4, r7, r5
 80156e4:	2310      	movs	r3, #16
 80156e6:	18fa      	adds	r2, r7, r3
 80156e8:	230f      	movs	r3, #15
 80156ea:	18fb      	adds	r3, r7, r3
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	0011      	movs	r1, r2
 80156f0:	0018      	movs	r0, r3
 80156f2:	f7ff fb6d 	bl	8014dd0 <GetKeyAddrItem>
 80156f6:	0003      	movs	r3, r0
 80156f8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80156fa:	197b      	adds	r3, r7, r5
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d002      	beq.n	8015708 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 8015702:	197b      	adds	r3, r7, r5
 8015704:	781b      	ldrb	r3, [r3, #0]
 8015706:	e074      	b.n	80157f2 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015708:	693a      	ldr	r2, [r7, #16]
 801570a:	2317      	movs	r3, #23
 801570c:	18fb      	adds	r3, r7, r3
 801570e:	7852      	ldrb	r2, [r2, #1]
 8015710:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8015712:	693a      	ldr	r2, [r7, #16]
 8015714:	2314      	movs	r3, #20
 8015716:	18fb      	adds	r3, r7, r3
 8015718:	7892      	ldrb	r2, [r2, #2]
 801571a:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801571e:	689b      	ldr	r3, [r3, #8]
 8015720:	68ba      	ldr	r2, [r7, #8]
 8015722:	429a      	cmp	r2, r3
 8015724:	d001      	beq.n	801572a <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015726:	2302      	movs	r3, #2
 8015728:	e063      	b.n	80157f2 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801572c:	7b1b      	ldrb	r3, [r3, #12]
 801572e:	069b      	lsls	r3, r3, #26
 8015730:	0fdb      	lsrs	r3, r3, #31
 8015732:	b2db      	uxtb	r3, r3
 8015734:	001a      	movs	r2, r3
 8015736:	2016      	movs	r0, #22
 8015738:	183b      	adds	r3, r7, r0
 801573a:	1e51      	subs	r1, r2, #1
 801573c:	418a      	sbcs	r2, r1
 801573e:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015740:	4b2e      	ldr	r3, [pc, #184]	@ (80157fc <LoRaMacCryptoUnsecureMessage+0x18c>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	789b      	ldrb	r3, [r3, #2]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d102      	bne.n	8015750 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801574a:	183b      	adds	r3, r7, r0
 801574c:	2200      	movs	r2, #0
 801574e:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015752:	6818      	ldr	r0, [r3, #0]
 8015754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015756:	791b      	ldrb	r3, [r3, #4]
 8015758:	3b04      	subs	r3, #4
 801575a:	b299      	uxth	r1, r3
 801575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015760:	2615      	movs	r6, #21
 8015762:	19bc      	adds	r4, r7, r6
 8015764:	2216      	movs	r2, #22
 8015766:	18ba      	adds	r2, r7, r2
 8015768:	7815      	ldrb	r5, [r2, #0]
 801576a:	2214      	movs	r2, #20
 801576c:	18ba      	adds	r2, r7, r2
 801576e:	7812      	ldrb	r2, [r2, #0]
 8015770:	9303      	str	r3, [sp, #12]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	9302      	str	r3, [sp, #8]
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	9301      	str	r3, [sp, #4]
 801577a:	2301      	movs	r3, #1
 801577c:	9300      	str	r3, [sp, #0]
 801577e:	002b      	movs	r3, r5
 8015780:	f7ff fa8c 	bl	8014c9c <VerifyCmacB0>
 8015784:	0003      	movs	r3, r0
 8015786:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015788:	19bb      	adds	r3, r7, r6
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d002      	beq.n	8015796 <LoRaMacCryptoUnsecureMessage+0x126>
    {
        return retval;
 8015790:	19bb      	adds	r3, r7, r6
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	e02d      	b.n	80157f2 <LoRaMacCryptoUnsecureMessage+0x182>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015798:	2220      	movs	r2, #32
 801579a:	5c9b      	ldrb	r3, [r3, r2]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d103      	bne.n	80157a8 <LoRaMacCryptoUnsecureMessage+0x138>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80157a0:	2317      	movs	r3, #23
 80157a2:	18fb      	adds	r3, r7, r3
 80157a4:	2207      	movs	r2, #7
 80157a6:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80157a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157aa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80157ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ae:	2228      	movs	r2, #40	@ 0x28
 80157b0:	5c9b      	ldrb	r3, [r3, r2]
 80157b2:	b219      	sxth	r1, r3
 80157b4:	2615      	movs	r6, #21
 80157b6:	19bc      	adds	r4, r7, r6
 80157b8:	68bd      	ldr	r5, [r7, #8]
 80157ba:	2317      	movs	r3, #23
 80157bc:	18fb      	adds	r3, r7, r3
 80157be:	781a      	ldrb	r2, [r3, #0]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	9301      	str	r3, [sp, #4]
 80157c4:	2301      	movs	r3, #1
 80157c6:	9300      	str	r3, [sp, #0]
 80157c8:	002b      	movs	r3, r5
 80157ca:	f7ff f8ed 	bl	80149a8 <PayloadEncrypt>
 80157ce:	0003      	movs	r3, r0
 80157d0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80157d2:	19bb      	adds	r3, r7, r6
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d002      	beq.n	80157e0 <LoRaMacCryptoUnsecureMessage+0x170>
    {
        return retval;
 80157da:	19bb      	adds	r3, r7, r6
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	e008      	b.n	80157f2 <LoRaMacCryptoUnsecureMessage+0x182>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80157e0:	687a      	ldr	r2, [r7, #4]
 80157e2:	230e      	movs	r3, #14
 80157e4:	18fb      	adds	r3, r7, r3
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	0011      	movs	r1, r2
 80157ea:	0018      	movs	r0, r3
 80157ec:	f7ff fbf2 	bl	8014fd4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80157f0:	2300      	movs	r3, #0
}
 80157f2:	0018      	movs	r0, r3
 80157f4:	46bd      	mov	sp, r7
 80157f6:	b007      	add	sp, #28
 80157f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157fa:	46c0      	nop			@ (mov r8, r8)
 80157fc:	200012cc 	.word	0x200012cc

08015800 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8015800:	b590      	push	{r4, r7, lr}
 8015802:	b087      	sub	sp, #28
 8015804:	af00      	add	r7, sp, #0
 8015806:	0002      	movs	r2, r0
 8015808:	1dfb      	adds	r3, r7, #7
 801580a:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 801580c:	1dfb      	adds	r3, r7, #7
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d001      	beq.n	8015818 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015814:	230b      	movs	r3, #11
 8015816:	e020      	b.n	801585a <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 8015818:	2408      	movs	r4, #8
 801581a:	193b      	adds	r3, r7, r4
 801581c:	2200      	movs	r2, #0
 801581e:	601a      	str	r2, [r3, #0]
 8015820:	3304      	adds	r3, #4
 8015822:	220c      	movs	r2, #12
 8015824:	2100      	movs	r1, #0
 8015826:	0018      	movs	r0, r3
 8015828:	f007 fd35 	bl	801d296 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 801582c:	4b0d      	ldr	r3, [pc, #52]	@ (8015864 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	789b      	ldrb	r3, [r3, #2]
 8015832:	2b01      	cmp	r3, #1
 8015834:	d102      	bne.n	801583c <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 8015836:	193b      	adds	r3, r7, r4
 8015838:	2220      	movs	r2, #32
 801583a:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801583c:	4b09      	ldr	r3, [pc, #36]	@ (8015864 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	1dfa      	adds	r2, r7, #7
 8015842:	7812      	ldrb	r2, [r2, #0]
 8015844:	2108      	movs	r1, #8
 8015846:	1879      	adds	r1, r7, r1
 8015848:	6818      	ldr	r0, [r3, #0]
 801584a:	2309      	movs	r3, #9
 801584c:	f7f7 fbd8 	bl	800d000 <SecureElementDeriveAndStoreKey>
 8015850:	1e03      	subs	r3, r0, #0
 8015852:	d001      	beq.n	8015858 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015854:	230f      	movs	r3, #15
 8015856:	e000      	b.n	801585a <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015858:	2300      	movs	r3, #0
}
 801585a:	0018      	movs	r0, r3
 801585c:	46bd      	mov	sp, r7
 801585e:	b007      	add	sp, #28
 8015860:	bd90      	pop	{r4, r7, pc}
 8015862:	46c0      	nop			@ (mov r8, r8)
 8015864:	200012cc 	.word	0x200012cc

08015868 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8015868:	b590      	push	{r4, r7, lr}
 801586a:	b087      	sub	sp, #28
 801586c:	af00      	add	r7, sp, #0
 801586e:	0002      	movs	r2, r0
 8015870:	1dfb      	adds	r3, r7, #7
 8015872:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8015874:	1dfb      	adds	r3, r7, #7
 8015876:	781b      	ldrb	r3, [r3, #0]
 8015878:	2b09      	cmp	r3, #9
 801587a:	d001      	beq.n	8015880 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801587c:	230b      	movs	r3, #11
 801587e:	e017      	b.n	80158b0 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8015880:	2408      	movs	r4, #8
 8015882:	193b      	adds	r3, r7, r4
 8015884:	2200      	movs	r2, #0
 8015886:	601a      	str	r2, [r3, #0]
 8015888:	3304      	adds	r3, #4
 801588a:	220c      	movs	r2, #12
 801588c:	2100      	movs	r1, #0
 801588e:	0018      	movs	r0, r3
 8015890:	f007 fd01 	bl	801d296 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015894:	4b08      	ldr	r3, [pc, #32]	@ (80158b8 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	1dfa      	adds	r2, r7, #7
 801589a:	7812      	ldrb	r2, [r2, #0]
 801589c:	1939      	adds	r1, r7, r4
 801589e:	6818      	ldr	r0, [r3, #0]
 80158a0:	237f      	movs	r3, #127	@ 0x7f
 80158a2:	f7f7 fbad 	bl	800d000 <SecureElementDeriveAndStoreKey>
 80158a6:	1e03      	subs	r3, r0, #0
 80158a8:	d001      	beq.n	80158ae <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80158aa:	230f      	movs	r3, #15
 80158ac:	e000      	b.n	80158b0 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80158ae:	2300      	movs	r3, #0
}
 80158b0:	0018      	movs	r0, r3
 80158b2:	46bd      	mov	sp, r7
 80158b4:	b007      	add	sp, #28
 80158b6:	bd90      	pop	{r4, r7, pc}
 80158b8:	200012cc 	.word	0x200012cc

080158bc <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80158bc:	b590      	push	{r4, r7, lr}
 80158be:	b085      	sub	sp, #20
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d003      	beq.n	80158d2 <LoRaMacParserJoinAccept+0x16>
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d101      	bne.n	80158d6 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80158d2:	2302      	movs	r3, #2
 80158d4:	e0de      	b.n	8015a94 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 80158d6:	240e      	movs	r4, #14
 80158d8:	193b      	adds	r3, r7, r4
 80158da:	2200      	movs	r2, #0
 80158dc:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	681a      	ldr	r2, [r3, #0]
 80158e2:	193b      	adds	r3, r7, r4
 80158e4:	881b      	ldrh	r3, [r3, #0]
 80158e6:	1939      	adds	r1, r7, r4
 80158e8:	1c58      	adds	r0, r3, #1
 80158ea:	8008      	strh	r0, [r1, #0]
 80158ec:	18d3      	adds	r3, r2, r3
 80158ee:	781a      	ldrb	r2, [r3, #0]
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	1d98      	adds	r0, r3, #6
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	681a      	ldr	r2, [r3, #0]
 80158fc:	193b      	adds	r3, r7, r4
 80158fe:	881b      	ldrh	r3, [r3, #0]
 8015900:	18d3      	adds	r3, r2, r3
 8015902:	2203      	movs	r2, #3
 8015904:	0019      	movs	r1, r3
 8015906:	f003 f82f 	bl	8018968 <memcpy1>
    bufItr = bufItr + 3;
 801590a:	193b      	adds	r3, r7, r4
 801590c:	193a      	adds	r2, r7, r4
 801590e:	8812      	ldrh	r2, [r2, #0]
 8015910:	3203      	adds	r2, #3
 8015912:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	3309      	adds	r3, #9
 8015918:	0018      	movs	r0, r3
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	193b      	adds	r3, r7, r4
 8015920:	881b      	ldrh	r3, [r3, #0]
 8015922:	18d3      	adds	r3, r2, r3
 8015924:	2203      	movs	r2, #3
 8015926:	0019      	movs	r1, r3
 8015928:	f003 f81e 	bl	8018968 <memcpy1>
    bufItr = bufItr + 3;
 801592c:	193b      	adds	r3, r7, r4
 801592e:	193a      	adds	r2, r7, r4
 8015930:	8812      	ldrh	r2, [r2, #0]
 8015932:	3203      	adds	r2, #3
 8015934:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681a      	ldr	r2, [r3, #0]
 801593a:	193b      	adds	r3, r7, r4
 801593c:	881b      	ldrh	r3, [r3, #0]
 801593e:	1939      	adds	r1, r7, r4
 8015940:	1c58      	adds	r0, r3, #1
 8015942:	8008      	strh	r0, [r1, #0]
 8015944:	18d3      	adds	r3, r2, r3
 8015946:	781b      	ldrb	r3, [r3, #0]
 8015948:	001a      	movs	r2, r3
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	193b      	adds	r3, r7, r4
 8015954:	881b      	ldrh	r3, [r3, #0]
 8015956:	1939      	adds	r1, r7, r4
 8015958:	1c58      	adds	r0, r3, #1
 801595a:	8008      	strh	r0, [r1, #0]
 801595c:	18d3      	adds	r3, r2, r3
 801595e:	781b      	ldrb	r3, [r3, #0]
 8015960:	021a      	lsls	r2, r3, #8
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	68db      	ldr	r3, [r3, #12]
 8015966:	431a      	orrs	r2, r3
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681a      	ldr	r2, [r3, #0]
 8015970:	193b      	adds	r3, r7, r4
 8015972:	881b      	ldrh	r3, [r3, #0]
 8015974:	1939      	adds	r1, r7, r4
 8015976:	1c58      	adds	r0, r3, #1
 8015978:	8008      	strh	r0, [r1, #0]
 801597a:	18d3      	adds	r3, r2, r3
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	041a      	lsls	r2, r3, #16
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	68db      	ldr	r3, [r3, #12]
 8015984:	431a      	orrs	r2, r3
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681a      	ldr	r2, [r3, #0]
 801598e:	193b      	adds	r3, r7, r4
 8015990:	881b      	ldrh	r3, [r3, #0]
 8015992:	1939      	adds	r1, r7, r4
 8015994:	1c58      	adds	r0, r3, #1
 8015996:	8008      	strh	r0, [r1, #0]
 8015998:	18d3      	adds	r3, r2, r3
 801599a:	781b      	ldrb	r3, [r3, #0]
 801599c:	061a      	lsls	r2, r3, #24
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	431a      	orrs	r2, r3
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	193b      	adds	r3, r7, r4
 80159ae:	881b      	ldrh	r3, [r3, #0]
 80159b0:	1939      	adds	r1, r7, r4
 80159b2:	1c58      	adds	r0, r3, #1
 80159b4:	8008      	strh	r0, [r1, #0]
 80159b6:	18d3      	adds	r3, r2, r3
 80159b8:	781a      	ldrb	r2, [r3, #0]
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	193b      	adds	r3, r7, r4
 80159c4:	881b      	ldrh	r3, [r3, #0]
 80159c6:	1939      	adds	r1, r7, r4
 80159c8:	1c58      	adds	r0, r3, #1
 80159ca:	8008      	strh	r0, [r1, #0]
 80159cc:	18d3      	adds	r3, r2, r3
 80159ce:	781a      	ldrb	r2, [r3, #0]
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	791b      	ldrb	r3, [r3, #4]
 80159d8:	1f1a      	subs	r2, r3, #4
 80159da:	193b      	adds	r3, r7, r4
 80159dc:	881b      	ldrh	r3, [r3, #0]
 80159de:	1ad3      	subs	r3, r2, r3
 80159e0:	2b10      	cmp	r3, #16
 80159e2:	d111      	bne.n	8015a08 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	3312      	adds	r3, #18
 80159e8:	0018      	movs	r0, r3
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681a      	ldr	r2, [r3, #0]
 80159ee:	193b      	adds	r3, r7, r4
 80159f0:	881b      	ldrh	r3, [r3, #0]
 80159f2:	18d3      	adds	r3, r2, r3
 80159f4:	2210      	movs	r2, #16
 80159f6:	0019      	movs	r1, r3
 80159f8:	f002 ffb6 	bl	8018968 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80159fc:	193b      	adds	r3, r7, r4
 80159fe:	193a      	adds	r2, r7, r4
 8015a00:	8812      	ldrh	r2, [r2, #0]
 8015a02:	3210      	adds	r2, #16
 8015a04:	801a      	strh	r2, [r3, #0]
 8015a06:	e00a      	b.n	8015a1e <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	791b      	ldrb	r3, [r3, #4]
 8015a0c:	1f1a      	subs	r2, r3, #4
 8015a0e:	230e      	movs	r3, #14
 8015a10:	18fb      	adds	r3, r7, r3
 8015a12:	881b      	ldrh	r3, [r3, #0]
 8015a14:	1ad3      	subs	r3, r2, r3
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	dd01      	ble.n	8015a1e <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e03a      	b.n	8015a94 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	240e      	movs	r4, #14
 8015a24:	193b      	adds	r3, r7, r4
 8015a26:	881b      	ldrh	r3, [r3, #0]
 8015a28:	1939      	adds	r1, r7, r4
 8015a2a:	1c58      	adds	r0, r3, #1
 8015a2c:	8008      	strh	r0, [r1, #0]
 8015a2e:	18d3      	adds	r3, r2, r3
 8015a30:	781b      	ldrb	r3, [r3, #0]
 8015a32:	001a      	movs	r2, r3
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681a      	ldr	r2, [r3, #0]
 8015a3c:	193b      	adds	r3, r7, r4
 8015a3e:	881b      	ldrh	r3, [r3, #0]
 8015a40:	1939      	adds	r1, r7, r4
 8015a42:	1c58      	adds	r0, r3, #1
 8015a44:	8008      	strh	r0, [r1, #0]
 8015a46:	18d3      	adds	r3, r2, r3
 8015a48:	781b      	ldrb	r3, [r3, #0]
 8015a4a:	021a      	lsls	r2, r3, #8
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a50:	431a      	orrs	r2, r3
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681a      	ldr	r2, [r3, #0]
 8015a5a:	193b      	adds	r3, r7, r4
 8015a5c:	881b      	ldrh	r3, [r3, #0]
 8015a5e:	1939      	adds	r1, r7, r4
 8015a60:	1c58      	adds	r0, r3, #1
 8015a62:	8008      	strh	r0, [r1, #0]
 8015a64:	18d3      	adds	r3, r2, r3
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	041a      	lsls	r2, r3, #16
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a6e:	431a      	orrs	r2, r3
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681a      	ldr	r2, [r3, #0]
 8015a78:	193b      	adds	r3, r7, r4
 8015a7a:	881b      	ldrh	r3, [r3, #0]
 8015a7c:	1939      	adds	r1, r7, r4
 8015a7e:	1c58      	adds	r0, r3, #1
 8015a80:	8008      	strh	r0, [r1, #0]
 8015a82:	18d3      	adds	r3, r2, r3
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	061a      	lsls	r2, r3, #24
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a8c:	431a      	orrs	r2, r3
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015a92:	2300      	movs	r3, #0
}
 8015a94:	0018      	movs	r0, r3
 8015a96:	46bd      	mov	sp, r7
 8015a98:	b005      	add	sp, #20
 8015a9a:	bd90      	pop	{r4, r7, pc}

08015a9c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015a9c:	b590      	push	{r4, r7, lr}
 8015a9e:	b085      	sub	sp, #20
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d003      	beq.n	8015ab2 <LoRaMacParserData+0x16>
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d101      	bne.n	8015ab6 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015ab2:	2302      	movs	r3, #2
 8015ab4:	e0fc      	b.n	8015cb0 <LoRaMacParserData+0x214>
    }

    uint16_t bufItr = 0;
 8015ab6:	240e      	movs	r4, #14
 8015ab8:	193b      	adds	r3, r7, r4
 8015aba:	2200      	movs	r2, #0
 8015abc:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	681a      	ldr	r2, [r3, #0]
 8015ac2:	193b      	adds	r3, r7, r4
 8015ac4:	881b      	ldrh	r3, [r3, #0]
 8015ac6:	1939      	adds	r1, r7, r4
 8015ac8:	1c58      	adds	r0, r3, #1
 8015aca:	8008      	strh	r0, [r1, #0]
 8015acc:	18d3      	adds	r3, r2, r3
 8015ace:	781a      	ldrb	r2, [r3, #0]
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	193b      	adds	r3, r7, r4
 8015ada:	881b      	ldrh	r3, [r3, #0]
 8015adc:	1939      	adds	r1, r7, r4
 8015ade:	1c58      	adds	r0, r3, #1
 8015ae0:	8008      	strh	r0, [r1, #0]
 8015ae2:	18d3      	adds	r3, r2, r3
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	001a      	movs	r2, r3
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681a      	ldr	r2, [r3, #0]
 8015af0:	193b      	adds	r3, r7, r4
 8015af2:	881b      	ldrh	r3, [r3, #0]
 8015af4:	1939      	adds	r1, r7, r4
 8015af6:	1c58      	adds	r0, r3, #1
 8015af8:	8008      	strh	r0, [r1, #0]
 8015afa:	18d3      	adds	r3, r2, r3
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	021a      	lsls	r2, r3, #8
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	689b      	ldr	r3, [r3, #8]
 8015b04:	431a      	orrs	r2, r3
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	681a      	ldr	r2, [r3, #0]
 8015b0e:	193b      	adds	r3, r7, r4
 8015b10:	881b      	ldrh	r3, [r3, #0]
 8015b12:	1939      	adds	r1, r7, r4
 8015b14:	1c58      	adds	r0, r3, #1
 8015b16:	8008      	strh	r0, [r1, #0]
 8015b18:	18d3      	adds	r3, r2, r3
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	041a      	lsls	r2, r3, #16
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	689b      	ldr	r3, [r3, #8]
 8015b22:	431a      	orrs	r2, r3
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	193b      	adds	r3, r7, r4
 8015b2e:	881b      	ldrh	r3, [r3, #0]
 8015b30:	1939      	adds	r1, r7, r4
 8015b32:	1c58      	adds	r0, r3, #1
 8015b34:	8008      	strh	r0, [r1, #0]
 8015b36:	18d3      	adds	r3, r2, r3
 8015b38:	781b      	ldrb	r3, [r3, #0]
 8015b3a:	061a      	lsls	r2, r3, #24
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	689b      	ldr	r3, [r3, #8]
 8015b40:	431a      	orrs	r2, r3
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681a      	ldr	r2, [r3, #0]
 8015b4a:	193b      	adds	r3, r7, r4
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	1939      	adds	r1, r7, r4
 8015b50:	1c58      	adds	r0, r3, #1
 8015b52:	8008      	strh	r0, [r1, #0]
 8015b54:	18d3      	adds	r3, r2, r3
 8015b56:	781a      	ldrb	r2, [r3, #0]
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	193b      	adds	r3, r7, r4
 8015b62:	881b      	ldrh	r3, [r3, #0]
 8015b64:	1939      	adds	r1, r7, r4
 8015b66:	1c58      	adds	r0, r3, #1
 8015b68:	8008      	strh	r0, [r1, #0]
 8015b6a:	18d3      	adds	r3, r2, r3
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	001a      	movs	r2, r3
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	681a      	ldr	r2, [r3, #0]
 8015b78:	193b      	adds	r3, r7, r4
 8015b7a:	881b      	ldrh	r3, [r3, #0]
 8015b7c:	1939      	adds	r1, r7, r4
 8015b7e:	1c58      	adds	r0, r3, #1
 8015b80:	8008      	strh	r0, [r1, #0]
 8015b82:	18d3      	adds	r3, r2, r3
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	0219      	lsls	r1, r3, #8
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	89db      	ldrh	r3, [r3, #14]
 8015b8c:	b21a      	sxth	r2, r3
 8015b8e:	b20b      	sxth	r3, r1
 8015b90:	4313      	orrs	r3, r2
 8015b92:	b21b      	sxth	r3, r3
 8015b94:	b29a      	uxth	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	3310      	adds	r3, #16
 8015b9e:	0018      	movs	r0, r3
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681a      	ldr	r2, [r3, #0]
 8015ba4:	193b      	adds	r3, r7, r4
 8015ba6:	881b      	ldrh	r3, [r3, #0]
 8015ba8:	18d1      	adds	r1, r2, r3
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	7b1b      	ldrb	r3, [r3, #12]
 8015bae:	071b      	lsls	r3, r3, #28
 8015bb0:	0f1b      	lsrs	r3, r3, #28
 8015bb2:	b2db      	uxtb	r3, r3
 8015bb4:	001a      	movs	r2, r3
 8015bb6:	f002 fed7 	bl	8018968 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	7b1b      	ldrb	r3, [r3, #12]
 8015bbe:	071b      	lsls	r3, r3, #28
 8015bc0:	0f1b      	lsrs	r3, r3, #28
 8015bc2:	b2db      	uxtb	r3, r3
 8015bc4:	0019      	movs	r1, r3
 8015bc6:	193b      	adds	r3, r7, r4
 8015bc8:	193a      	adds	r2, r7, r4
 8015bca:	8812      	ldrh	r2, [r2, #0]
 8015bcc:	188a      	adds	r2, r1, r2
 8015bce:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2220      	movs	r2, #32
 8015bd4:	2100      	movs	r1, #0
 8015bd6:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2228      	movs	r2, #40	@ 0x28
 8015bdc:	2100      	movs	r1, #0
 8015bde:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	791b      	ldrb	r3, [r3, #4]
 8015be4:	001a      	movs	r2, r3
 8015be6:	193b      	adds	r3, r7, r4
 8015be8:	881b      	ldrh	r3, [r3, #0]
 8015bea:	1ad3      	subs	r3, r2, r3
 8015bec:	2b04      	cmp	r3, #4
 8015bee:	dd2d      	ble.n	8015c4c <LoRaMacParserData+0x1b0>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681a      	ldr	r2, [r3, #0]
 8015bf4:	193b      	adds	r3, r7, r4
 8015bf6:	881b      	ldrh	r3, [r3, #0]
 8015bf8:	1939      	adds	r1, r7, r4
 8015bfa:	1c58      	adds	r0, r3, #1
 8015bfc:	8008      	strh	r0, [r1, #0]
 8015bfe:	18d3      	adds	r3, r2, r3
 8015c00:	7819      	ldrb	r1, [r3, #0]
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2220      	movs	r2, #32
 8015c06:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	791a      	ldrb	r2, [r3, #4]
 8015c0c:	193b      	adds	r3, r7, r4
 8015c0e:	881b      	ldrh	r3, [r3, #0]
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	1ad3      	subs	r3, r2, r3
 8015c14:	b2db      	uxtb	r3, r3
 8015c16:	3b04      	subs	r3, #4
 8015c18:	b2d9      	uxtb	r1, r3
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2228      	movs	r2, #40	@ 0x28
 8015c1e:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681a      	ldr	r2, [r3, #0]
 8015c28:	193b      	adds	r3, r7, r4
 8015c2a:	881b      	ldrh	r3, [r3, #0]
 8015c2c:	18d1      	adds	r1, r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2228      	movs	r2, #40	@ 0x28
 8015c32:	5c9b      	ldrb	r3, [r3, r2]
 8015c34:	001a      	movs	r2, r3
 8015c36:	f002 fe97 	bl	8018968 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	2228      	movs	r2, #40	@ 0x28
 8015c3e:	5c9b      	ldrb	r3, [r3, r2]
 8015c40:	0019      	movs	r1, r3
 8015c42:	193b      	adds	r3, r7, r4
 8015c44:	193a      	adds	r2, r7, r4
 8015c46:	8812      	ldrh	r2, [r2, #0]
 8015c48:	188a      	adds	r2, r1, r2
 8015c4a:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	791b      	ldrb	r3, [r3, #4]
 8015c54:	3b04      	subs	r3, #4
 8015c56:	18d3      	adds	r3, r2, r3
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	001a      	movs	r2, r3
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6819      	ldr	r1, [r3, #0]
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	791b      	ldrb	r3, [r3, #4]
 8015c6c:	3b03      	subs	r3, #3
 8015c6e:	18cb      	adds	r3, r1, r3
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	021b      	lsls	r3, r3, #8
 8015c74:	431a      	orrs	r2, r3
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6819      	ldr	r1, [r3, #0]
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	791b      	ldrb	r3, [r3, #4]
 8015c86:	3b02      	subs	r3, #2
 8015c88:	18cb      	adds	r3, r1, r3
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	041b      	lsls	r3, r3, #16
 8015c8e:	431a      	orrs	r2, r3
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6819      	ldr	r1, [r3, #0]
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	791b      	ldrb	r3, [r3, #4]
 8015ca0:	3b01      	subs	r3, #1
 8015ca2:	18cb      	adds	r3, r1, r3
 8015ca4:	781b      	ldrb	r3, [r3, #0]
 8015ca6:	061b      	lsls	r3, r3, #24
 8015ca8:	431a      	orrs	r2, r3
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015cae:	2300      	movs	r3, #0
}
 8015cb0:	0018      	movs	r0, r3
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	b005      	add	sp, #20
 8015cb6:	bd90      	pop	{r4, r7, pc}

08015cb8 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015cb8:	b5b0      	push	{r4, r5, r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d003      	beq.n	8015cce <LoRaMacSerializerJoinRequest+0x16>
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d101      	bne.n	8015cd2 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015cce:	2301      	movs	r3, #1
 8015cd0:	e089      	b.n	8015de6 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8015cd2:	230e      	movs	r3, #14
 8015cd4:	18fb      	adds	r3, r7, r3
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	791b      	ldrb	r3, [r3, #4]
 8015cde:	2b16      	cmp	r3, #22
 8015ce0:	d801      	bhi.n	8015ce6 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015ce2:	2302      	movs	r3, #2
 8015ce4:	e07f      	b.n	8015de6 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681a      	ldr	r2, [r3, #0]
 8015cea:	240e      	movs	r4, #14
 8015cec:	193b      	adds	r3, r7, r4
 8015cee:	881b      	ldrh	r3, [r3, #0]
 8015cf0:	1939      	adds	r1, r7, r4
 8015cf2:	1c58      	adds	r0, r3, #1
 8015cf4:	8008      	strh	r0, [r1, #0]
 8015cf6:	18d3      	adds	r3, r2, r3
 8015cf8:	687a      	ldr	r2, [r7, #4]
 8015cfa:	7952      	ldrb	r2, [r2, #5]
 8015cfc:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681a      	ldr	r2, [r3, #0]
 8015d02:	193b      	adds	r3, r7, r4
 8015d04:	881b      	ldrh	r3, [r3, #0]
 8015d06:	18d0      	adds	r0, r2, r3
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	3306      	adds	r3, #6
 8015d0c:	2208      	movs	r2, #8
 8015d0e:	0019      	movs	r1, r3
 8015d10:	f002 fe46 	bl	80189a0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015d14:	193b      	adds	r3, r7, r4
 8015d16:	193a      	adds	r2, r7, r4
 8015d18:	8812      	ldrh	r2, [r2, #0]
 8015d1a:	3208      	adds	r2, #8
 8015d1c:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681a      	ldr	r2, [r3, #0]
 8015d22:	193b      	adds	r3, r7, r4
 8015d24:	881b      	ldrh	r3, [r3, #0]
 8015d26:	18d0      	adds	r0, r2, r3
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	330e      	adds	r3, #14
 8015d2c:	2208      	movs	r2, #8
 8015d2e:	0019      	movs	r1, r3
 8015d30:	f002 fe36 	bl	80189a0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015d34:	193b      	adds	r3, r7, r4
 8015d36:	0025      	movs	r5, r4
 8015d38:	193a      	adds	r2, r7, r4
 8015d3a:	8812      	ldrh	r2, [r2, #0]
 8015d3c:	3208      	adds	r2, #8
 8015d3e:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	8ad8      	ldrh	r0, [r3, #22]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681a      	ldr	r2, [r3, #0]
 8015d48:	197b      	adds	r3, r7, r5
 8015d4a:	881b      	ldrh	r3, [r3, #0]
 8015d4c:	1979      	adds	r1, r7, r5
 8015d4e:	1c5c      	adds	r4, r3, #1
 8015d50:	800c      	strh	r4, [r1, #0]
 8015d52:	18d3      	adds	r3, r2, r3
 8015d54:	b2c2      	uxtb	r2, r0
 8015d56:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	8adb      	ldrh	r3, [r3, #22]
 8015d5c:	0a1b      	lsrs	r3, r3, #8
 8015d5e:	b298      	uxth	r0, r3
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	681a      	ldr	r2, [r3, #0]
 8015d64:	197b      	adds	r3, r7, r5
 8015d66:	881b      	ldrh	r3, [r3, #0]
 8015d68:	1979      	adds	r1, r7, r5
 8015d6a:	1c5c      	adds	r4, r3, #1
 8015d6c:	800c      	strh	r4, [r1, #0]
 8015d6e:	18d3      	adds	r3, r2, r3
 8015d70:	b2c2      	uxtb	r2, r0
 8015d72:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	6998      	ldr	r0, [r3, #24]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681a      	ldr	r2, [r3, #0]
 8015d7c:	197b      	adds	r3, r7, r5
 8015d7e:	881b      	ldrh	r3, [r3, #0]
 8015d80:	1979      	adds	r1, r7, r5
 8015d82:	1c5c      	adds	r4, r3, #1
 8015d84:	800c      	strh	r4, [r1, #0]
 8015d86:	18d3      	adds	r3, r2, r3
 8015d88:	b2c2      	uxtb	r2, r0
 8015d8a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	699b      	ldr	r3, [r3, #24]
 8015d90:	0a18      	lsrs	r0, r3, #8
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	197b      	adds	r3, r7, r5
 8015d98:	881b      	ldrh	r3, [r3, #0]
 8015d9a:	1979      	adds	r1, r7, r5
 8015d9c:	1c5c      	adds	r4, r3, #1
 8015d9e:	800c      	strh	r4, [r1, #0]
 8015da0:	18d3      	adds	r3, r2, r3
 8015da2:	b2c2      	uxtb	r2, r0
 8015da4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	699b      	ldr	r3, [r3, #24]
 8015daa:	0c18      	lsrs	r0, r3, #16
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681a      	ldr	r2, [r3, #0]
 8015db0:	197b      	adds	r3, r7, r5
 8015db2:	881b      	ldrh	r3, [r3, #0]
 8015db4:	1979      	adds	r1, r7, r5
 8015db6:	1c5c      	adds	r4, r3, #1
 8015db8:	800c      	strh	r4, [r1, #0]
 8015dba:	18d3      	adds	r3, r2, r3
 8015dbc:	b2c2      	uxtb	r2, r0
 8015dbe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	699b      	ldr	r3, [r3, #24]
 8015dc4:	0e18      	lsrs	r0, r3, #24
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681a      	ldr	r2, [r3, #0]
 8015dca:	197b      	adds	r3, r7, r5
 8015dcc:	881b      	ldrh	r3, [r3, #0]
 8015dce:	1979      	adds	r1, r7, r5
 8015dd0:	1c5c      	adds	r4, r3, #1
 8015dd2:	800c      	strh	r4, [r1, #0]
 8015dd4:	18d3      	adds	r3, r2, r3
 8015dd6:	b2c2      	uxtb	r2, r0
 8015dd8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015dda:	197b      	adds	r3, r7, r5
 8015ddc:	881b      	ldrh	r3, [r3, #0]
 8015dde:	b2da      	uxtb	r2, r3
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015de4:	2300      	movs	r3, #0
}
 8015de6:	0018      	movs	r0, r3
 8015de8:	46bd      	mov	sp, r7
 8015dea:	b004      	add	sp, #16
 8015dec:	bdb0      	pop	{r4, r5, r7, pc}

08015dee <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015dee:	b5b0      	push	{r4, r5, r7, lr}
 8015df0:	b084      	sub	sp, #16
 8015df2:	af00      	add	r7, sp, #0
 8015df4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d003      	beq.n	8015e04 <LoRaMacSerializerData+0x16>
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d101      	bne.n	8015e08 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015e04:	2301      	movs	r3, #1
 8015e06:	e117      	b.n	8016038 <LoRaMacSerializerData+0x24a>
    }

    uint16_t bufItr = 0;
 8015e08:	230e      	movs	r3, #14
 8015e0a:	18fb      	adds	r3, r7, r3
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015e10:	200c      	movs	r0, #12
 8015e12:	183b      	adds	r3, r7, r0
 8015e14:	2208      	movs	r2, #8
 8015e16:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	7b1b      	ldrb	r3, [r3, #12]
 8015e1c:	071b      	lsls	r3, r3, #28
 8015e1e:	0f1b      	lsrs	r3, r3, #28
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	0019      	movs	r1, r3
 8015e24:	183b      	adds	r3, r7, r0
 8015e26:	183a      	adds	r2, r7, r0
 8015e28:	8812      	ldrh	r2, [r2, #0]
 8015e2a:	188a      	adds	r2, r1, r2
 8015e2c:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2228      	movs	r2, #40	@ 0x28
 8015e32:	5c9b      	ldrb	r3, [r3, r2]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d004      	beq.n	8015e42 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015e38:	183b      	adds	r3, r7, r0
 8015e3a:	183a      	adds	r2, r7, r0
 8015e3c:	8812      	ldrh	r2, [r2, #0]
 8015e3e:	3201      	adds	r2, #1
 8015e40:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2228      	movs	r2, #40	@ 0x28
 8015e46:	5c9b      	ldrb	r3, [r3, r2]
 8015e48:	0019      	movs	r1, r3
 8015e4a:	200c      	movs	r0, #12
 8015e4c:	183b      	adds	r3, r7, r0
 8015e4e:	183a      	adds	r2, r7, r0
 8015e50:	8812      	ldrh	r2, [r2, #0]
 8015e52:	188a      	adds	r2, r1, r2
 8015e54:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015e56:	0001      	movs	r1, r0
 8015e58:	187b      	adds	r3, r7, r1
 8015e5a:	187a      	adds	r2, r7, r1
 8015e5c:	8812      	ldrh	r2, [r2, #0]
 8015e5e:	3204      	adds	r2, #4
 8015e60:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	791b      	ldrb	r3, [r3, #4]
 8015e66:	001a      	movs	r2, r3
 8015e68:	187b      	adds	r3, r7, r1
 8015e6a:	881b      	ldrh	r3, [r3, #0]
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	d901      	bls.n	8015e74 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015e70:	2302      	movs	r3, #2
 8015e72:	e0e1      	b.n	8016038 <LoRaMacSerializerData+0x24a>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681a      	ldr	r2, [r3, #0]
 8015e78:	250e      	movs	r5, #14
 8015e7a:	197b      	adds	r3, r7, r5
 8015e7c:	881b      	ldrh	r3, [r3, #0]
 8015e7e:	1979      	adds	r1, r7, r5
 8015e80:	1c58      	adds	r0, r3, #1
 8015e82:	8008      	strh	r0, [r1, #0]
 8015e84:	18d3      	adds	r3, r2, r3
 8015e86:	687a      	ldr	r2, [r7, #4]
 8015e88:	7952      	ldrb	r2, [r2, #5]
 8015e8a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6898      	ldr	r0, [r3, #8]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681a      	ldr	r2, [r3, #0]
 8015e94:	197b      	adds	r3, r7, r5
 8015e96:	881b      	ldrh	r3, [r3, #0]
 8015e98:	1979      	adds	r1, r7, r5
 8015e9a:	1c5c      	adds	r4, r3, #1
 8015e9c:	800c      	strh	r4, [r1, #0]
 8015e9e:	18d3      	adds	r3, r2, r3
 8015ea0:	b2c2      	uxtb	r2, r0
 8015ea2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	689b      	ldr	r3, [r3, #8]
 8015ea8:	0a18      	lsrs	r0, r3, #8
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681a      	ldr	r2, [r3, #0]
 8015eae:	197b      	adds	r3, r7, r5
 8015eb0:	881b      	ldrh	r3, [r3, #0]
 8015eb2:	1979      	adds	r1, r7, r5
 8015eb4:	1c5c      	adds	r4, r3, #1
 8015eb6:	800c      	strh	r4, [r1, #0]
 8015eb8:	18d3      	adds	r3, r2, r3
 8015eba:	b2c2      	uxtb	r2, r0
 8015ebc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	689b      	ldr	r3, [r3, #8]
 8015ec2:	0c18      	lsrs	r0, r3, #16
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681a      	ldr	r2, [r3, #0]
 8015ec8:	197b      	adds	r3, r7, r5
 8015eca:	881b      	ldrh	r3, [r3, #0]
 8015ecc:	1979      	adds	r1, r7, r5
 8015ece:	1c5c      	adds	r4, r3, #1
 8015ed0:	800c      	strh	r4, [r1, #0]
 8015ed2:	18d3      	adds	r3, r2, r3
 8015ed4:	b2c2      	uxtb	r2, r0
 8015ed6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	689b      	ldr	r3, [r3, #8]
 8015edc:	0e18      	lsrs	r0, r3, #24
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681a      	ldr	r2, [r3, #0]
 8015ee2:	197b      	adds	r3, r7, r5
 8015ee4:	881b      	ldrh	r3, [r3, #0]
 8015ee6:	1979      	adds	r1, r7, r5
 8015ee8:	1c5c      	adds	r4, r3, #1
 8015eea:	800c      	strh	r4, [r1, #0]
 8015eec:	18d3      	adds	r3, r2, r3
 8015eee:	b2c2      	uxtb	r2, r0
 8015ef0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681a      	ldr	r2, [r3, #0]
 8015ef6:	197b      	adds	r3, r7, r5
 8015ef8:	881b      	ldrh	r3, [r3, #0]
 8015efa:	1979      	adds	r1, r7, r5
 8015efc:	1c58      	adds	r0, r3, #1
 8015efe:	8008      	strh	r0, [r1, #0]
 8015f00:	18d3      	adds	r3, r2, r3
 8015f02:	687a      	ldr	r2, [r7, #4]
 8015f04:	7b12      	ldrb	r2, [r2, #12]
 8015f06:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	89d8      	ldrh	r0, [r3, #14]
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681a      	ldr	r2, [r3, #0]
 8015f10:	197b      	adds	r3, r7, r5
 8015f12:	881b      	ldrh	r3, [r3, #0]
 8015f14:	1979      	adds	r1, r7, r5
 8015f16:	1c5c      	adds	r4, r3, #1
 8015f18:	800c      	strh	r4, [r1, #0]
 8015f1a:	18d3      	adds	r3, r2, r3
 8015f1c:	b2c2      	uxtb	r2, r0
 8015f1e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	89db      	ldrh	r3, [r3, #14]
 8015f24:	0a1b      	lsrs	r3, r3, #8
 8015f26:	b298      	uxth	r0, r3
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	197b      	adds	r3, r7, r5
 8015f2e:	881b      	ldrh	r3, [r3, #0]
 8015f30:	1979      	adds	r1, r7, r5
 8015f32:	1c5c      	adds	r4, r3, #1
 8015f34:	800c      	strh	r4, [r1, #0]
 8015f36:	18d3      	adds	r3, r2, r3
 8015f38:	b2c2      	uxtb	r2, r0
 8015f3a:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	002c      	movs	r4, r5
 8015f42:	197b      	adds	r3, r7, r5
 8015f44:	881b      	ldrh	r3, [r3, #0]
 8015f46:	18d0      	adds	r0, r2, r3
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	3310      	adds	r3, #16
 8015f4c:	0019      	movs	r1, r3
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	7b1b      	ldrb	r3, [r3, #12]
 8015f52:	071b      	lsls	r3, r3, #28
 8015f54:	0f1b      	lsrs	r3, r3, #28
 8015f56:	b2db      	uxtb	r3, r3
 8015f58:	001a      	movs	r2, r3
 8015f5a:	f002 fd05 	bl	8018968 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	7b1b      	ldrb	r3, [r3, #12]
 8015f62:	071b      	lsls	r3, r3, #28
 8015f64:	0f1b      	lsrs	r3, r3, #28
 8015f66:	b2db      	uxtb	r3, r3
 8015f68:	0019      	movs	r1, r3
 8015f6a:	193b      	adds	r3, r7, r4
 8015f6c:	193a      	adds	r2, r7, r4
 8015f6e:	8812      	ldrh	r2, [r2, #0]
 8015f70:	188a      	adds	r2, r1, r2
 8015f72:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2228      	movs	r2, #40	@ 0x28
 8015f78:	5c9b      	ldrb	r3, [r3, r2]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d00b      	beq.n	8015f96 <LoRaMacSerializerData+0x1a8>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681a      	ldr	r2, [r3, #0]
 8015f82:	193b      	adds	r3, r7, r4
 8015f84:	881b      	ldrh	r3, [r3, #0]
 8015f86:	1939      	adds	r1, r7, r4
 8015f88:	1c58      	adds	r0, r3, #1
 8015f8a:	8008      	strh	r0, [r1, #0]
 8015f8c:	18d3      	adds	r3, r2, r3
 8015f8e:	687a      	ldr	r2, [r7, #4]
 8015f90:	2120      	movs	r1, #32
 8015f92:	5c52      	ldrb	r2, [r2, r1]
 8015f94:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	240e      	movs	r4, #14
 8015f9c:	193b      	adds	r3, r7, r4
 8015f9e:	881b      	ldrh	r3, [r3, #0]
 8015fa0:	18d0      	adds	r0, r2, r3
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	2228      	movs	r2, #40	@ 0x28
 8015faa:	5c9b      	ldrb	r3, [r3, r2]
 8015fac:	001a      	movs	r2, r3
 8015fae:	f002 fcdb 	bl	8018968 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2228      	movs	r2, #40	@ 0x28
 8015fb6:	5c9b      	ldrb	r3, [r3, r2]
 8015fb8:	0019      	movs	r1, r3
 8015fba:	193b      	adds	r3, r7, r4
 8015fbc:	193a      	adds	r2, r7, r4
 8015fbe:	8812      	ldrh	r2, [r2, #0]
 8015fc0:	188a      	adds	r2, r1, r2
 8015fc2:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	681a      	ldr	r2, [r3, #0]
 8015fcc:	193b      	adds	r3, r7, r4
 8015fce:	881b      	ldrh	r3, [r3, #0]
 8015fd0:	0025      	movs	r5, r4
 8015fd2:	1939      	adds	r1, r7, r4
 8015fd4:	1c5c      	adds	r4, r3, #1
 8015fd6:	800c      	strh	r4, [r1, #0]
 8015fd8:	18d3      	adds	r3, r2, r3
 8015fda:	b2c2      	uxtb	r2, r0
 8015fdc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fe2:	0a18      	lsrs	r0, r3, #8
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	197b      	adds	r3, r7, r5
 8015fea:	881b      	ldrh	r3, [r3, #0]
 8015fec:	1979      	adds	r1, r7, r5
 8015fee:	1c5c      	adds	r4, r3, #1
 8015ff0:	800c      	strh	r4, [r1, #0]
 8015ff2:	18d3      	adds	r3, r2, r3
 8015ff4:	b2c2      	uxtb	r2, r0
 8015ff6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ffc:	0c18      	lsrs	r0, r3, #16
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681a      	ldr	r2, [r3, #0]
 8016002:	197b      	adds	r3, r7, r5
 8016004:	881b      	ldrh	r3, [r3, #0]
 8016006:	1979      	adds	r1, r7, r5
 8016008:	1c5c      	adds	r4, r3, #1
 801600a:	800c      	strh	r4, [r1, #0]
 801600c:	18d3      	adds	r3, r2, r3
 801600e:	b2c2      	uxtb	r2, r0
 8016010:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016016:	0e18      	lsrs	r0, r3, #24
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	681a      	ldr	r2, [r3, #0]
 801601c:	197b      	adds	r3, r7, r5
 801601e:	881b      	ldrh	r3, [r3, #0]
 8016020:	1979      	adds	r1, r7, r5
 8016022:	1c5c      	adds	r4, r3, #1
 8016024:	800c      	strh	r4, [r1, #0]
 8016026:	18d3      	adds	r3, r2, r3
 8016028:	b2c2      	uxtb	r2, r0
 801602a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801602c:	197b      	adds	r3, r7, r5
 801602e:	881b      	ldrh	r3, [r3, #0]
 8016030:	b2da      	uxtb	r2, r3
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016036:	2300      	movs	r3, #0
}
 8016038:	0018      	movs	r0, r3
 801603a:	46bd      	mov	sp, r7
 801603c:	b004      	add	sp, #16
 801603e:	bdb0      	pop	{r4, r5, r7, pc}

08016040 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b082      	sub	sp, #8
 8016044:	af00      	add	r7, sp, #0
 8016046:	0002      	movs	r2, r0
 8016048:	1dfb      	adds	r3, r7, #7
 801604a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801604c:	1dfb      	adds	r3, r7, #7
 801604e:	781b      	ldrb	r3, [r3, #0]
 8016050:	2b05      	cmp	r3, #5
 8016052:	d101      	bne.n	8016058 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016054:	2301      	movs	r3, #1
 8016056:	e000      	b.n	801605a <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016058:	2300      	movs	r3, #0
        }
    }
}
 801605a:	0018      	movs	r0, r3
 801605c:	46bd      	mov	sp, r7
 801605e:	b002      	add	sp, #8
 8016060:	bd80      	pop	{r7, pc}

08016062 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016062:	b580      	push	{r7, lr}
 8016064:	b084      	sub	sp, #16
 8016066:	af00      	add	r7, sp, #0
 8016068:	0002      	movs	r2, r0
 801606a:	6039      	str	r1, [r7, #0]
 801606c:	1dfb      	adds	r3, r7, #7
 801606e:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016070:	2308      	movs	r3, #8
 8016072:	18fb      	adds	r3, r7, r3
 8016074:	2200      	movs	r2, #0
 8016076:	601a      	str	r2, [r3, #0]
    switch( region )
 8016078:	1dfb      	adds	r3, r7, #7
 801607a:	781b      	ldrb	r3, [r3, #0]
 801607c:	2b05      	cmp	r3, #5
 801607e:	d109      	bne.n	8016094 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	0018      	movs	r0, r3
 8016084:	f001 fa52 	bl	801752c <RegionEU868GetPhyParam>
 8016088:	0003      	movs	r3, r0
 801608a:	001a      	movs	r2, r3
 801608c:	230c      	movs	r3, #12
 801608e:	18fb      	adds	r3, r7, r3
 8016090:	601a      	str	r2, [r3, #0]
 8016092:	e005      	b.n	80160a0 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016094:	230c      	movs	r3, #12
 8016096:	18fb      	adds	r3, r7, r3
 8016098:	2208      	movs	r2, #8
 801609a:	18ba      	adds	r2, r7, r2
 801609c:	6812      	ldr	r2, [r2, #0]
 801609e:	601a      	str	r2, [r3, #0]
        }
    }
}
 80160a0:	230c      	movs	r3, #12
 80160a2:	18fb      	adds	r3, r7, r3
 80160a4:	681a      	ldr	r2, [r3, #0]
 80160a6:	0013      	movs	r3, r2
 80160a8:	0018      	movs	r0, r3
 80160aa:	46bd      	mov	sp, r7
 80160ac:	b004      	add	sp, #16
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	0002      	movs	r2, r0
 80160b8:	6039      	str	r1, [r7, #0]
 80160ba:	1dfb      	adds	r3, r7, #7
 80160bc:	701a      	strb	r2, [r3, #0]
    switch( region )
 80160be:	1dfb      	adds	r3, r7, #7
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b05      	cmp	r3, #5
 80160c4:	d104      	bne.n	80160d0 <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	0018      	movs	r0, r3
 80160ca:	f001 fb4f 	bl	801776c <RegionEU868SetBandTxDone>
 80160ce:	e000      	b.n	80160d2 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80160d0:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80160d2:	46bd      	mov	sp, r7
 80160d4:	b002      	add	sp, #8
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b082      	sub	sp, #8
 80160dc:	af00      	add	r7, sp, #0
 80160de:	0002      	movs	r2, r0
 80160e0:	6039      	str	r1, [r7, #0]
 80160e2:	1dfb      	adds	r3, r7, #7
 80160e4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80160e6:	1dfb      	adds	r3, r7, #7
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	2b05      	cmp	r3, #5
 80160ec:	d104      	bne.n	80160f8 <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	0018      	movs	r0, r3
 80160f2:	f001 fb67 	bl	80177c4 <RegionEU868InitDefaults>
 80160f6:	e000      	b.n	80160fa <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80160f8:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80160fa:	46c0      	nop			@ (mov r8, r8)
 80160fc:	46bd      	mov	sp, r7
 80160fe:	b002      	add	sp, #8
 8016100:	bd80      	pop	{r7, pc}

08016102 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8016102:	b580      	push	{r7, lr}
 8016104:	b082      	sub	sp, #8
 8016106:	af00      	add	r7, sp, #0
 8016108:	0002      	movs	r2, r0
 801610a:	6039      	str	r1, [r7, #0]
 801610c:	1dfb      	adds	r3, r7, #7
 801610e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016110:	1dfb      	adds	r3, r7, #7
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	2b05      	cmp	r3, #5
 8016116:	d105      	bne.n	8016124 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	0018      	movs	r0, r3
 801611c:	f001 fbe6 	bl	80178ec <RegionEU868GetNvmCtx>
 8016120:	0003      	movs	r3, r0
 8016122:	e000      	b.n	8016126 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8016124:	2300      	movs	r3, #0
        }
    }
}
 8016126:	0018      	movs	r0, r3
 8016128:	46bd      	mov	sp, r7
 801612a:	b002      	add	sp, #8
 801612c:	bd80      	pop	{r7, pc}

0801612e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801612e:	b580      	push	{r7, lr}
 8016130:	b082      	sub	sp, #8
 8016132:	af00      	add	r7, sp, #0
 8016134:	6039      	str	r1, [r7, #0]
 8016136:	0011      	movs	r1, r2
 8016138:	1dfb      	adds	r3, r7, #7
 801613a:	1c02      	adds	r2, r0, #0
 801613c:	701a      	strb	r2, [r3, #0]
 801613e:	1dbb      	adds	r3, r7, #6
 8016140:	1c0a      	adds	r2, r1, #0
 8016142:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016144:	1dfb      	adds	r3, r7, #7
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	2b05      	cmp	r3, #5
 801614a:	d108      	bne.n	801615e <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801614c:	1dbb      	adds	r3, r7, #6
 801614e:	781a      	ldrb	r2, [r3, #0]
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	0011      	movs	r1, r2
 8016154:	0018      	movs	r0, r3
 8016156:	f001 fbd9 	bl	801790c <RegionEU868Verify>
 801615a:	0003      	movs	r3, r0
 801615c:	e000      	b.n	8016160 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801615e:	2300      	movs	r3, #0
        }
    }
}
 8016160:	0018      	movs	r0, r3
 8016162:	46bd      	mov	sp, r7
 8016164:	b002      	add	sp, #8
 8016166:	bd80      	pop	{r7, pc}

08016168 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b082      	sub	sp, #8
 801616c:	af00      	add	r7, sp, #0
 801616e:	0002      	movs	r2, r0
 8016170:	6039      	str	r1, [r7, #0]
 8016172:	1dfb      	adds	r3, r7, #7
 8016174:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016176:	1dfb      	adds	r3, r7, #7
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	2b05      	cmp	r3, #5
 801617c:	d104      	bne.n	8016188 <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	0018      	movs	r0, r3
 8016182:	f001 fc1d 	bl	80179c0 <RegionEU868ApplyCFList>
 8016186:	e000      	b.n	801618a <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016188:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 801618a:	46c0      	nop			@ (mov r8, r8)
 801618c:	46bd      	mov	sp, r7
 801618e:	b002      	add	sp, #8
 8016190:	bd80      	pop	{r7, pc}

08016192 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016192:	b580      	push	{r7, lr}
 8016194:	b082      	sub	sp, #8
 8016196:	af00      	add	r7, sp, #0
 8016198:	0002      	movs	r2, r0
 801619a:	6039      	str	r1, [r7, #0]
 801619c:	1dfb      	adds	r3, r7, #7
 801619e:	701a      	strb	r2, [r3, #0]
    switch( region )
 80161a0:	1dfb      	adds	r3, r7, #7
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	2b05      	cmp	r3, #5
 80161a6:	d105      	bne.n	80161b4 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	0018      	movs	r0, r3
 80161ac:	f001 fc98 	bl	8017ae0 <RegionEU868ChanMaskSet>
 80161b0:	0003      	movs	r3, r0
 80161b2:	e000      	b.n	80161b6 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80161b4:	2300      	movs	r3, #0
        }
    }
}
 80161b6:	0018      	movs	r0, r3
 80161b8:	46bd      	mov	sp, r7
 80161ba:	b002      	add	sp, #8
 80161bc:	bd80      	pop	{r7, pc}

080161be <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80161be:	b590      	push	{r4, r7, lr}
 80161c0:	b083      	sub	sp, #12
 80161c2:	af00      	add	r7, sp, #0
 80161c4:	0004      	movs	r4, r0
 80161c6:	0008      	movs	r0, r1
 80161c8:	0011      	movs	r1, r2
 80161ca:	603b      	str	r3, [r7, #0]
 80161cc:	1dfb      	adds	r3, r7, #7
 80161ce:	1c22      	adds	r2, r4, #0
 80161d0:	701a      	strb	r2, [r3, #0]
 80161d2:	1dbb      	adds	r3, r7, #6
 80161d4:	1c02      	adds	r2, r0, #0
 80161d6:	701a      	strb	r2, [r3, #0]
 80161d8:	1d7b      	adds	r3, r7, #5
 80161da:	1c0a      	adds	r2, r1, #0
 80161dc:	701a      	strb	r2, [r3, #0]
    switch( region )
 80161de:	1dfb      	adds	r3, r7, #7
 80161e0:	781b      	ldrb	r3, [r3, #0]
 80161e2:	2b05      	cmp	r3, #5
 80161e4:	d10a      	bne.n	80161fc <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80161e6:	69bc      	ldr	r4, [r7, #24]
 80161e8:	683a      	ldr	r2, [r7, #0]
 80161ea:	1d7b      	adds	r3, r7, #5
 80161ec:	7819      	ldrb	r1, [r3, #0]
 80161ee:	1dbb      	adds	r3, r7, #6
 80161f0:	2000      	movs	r0, #0
 80161f2:	5618      	ldrsb	r0, [r3, r0]
 80161f4:	0023      	movs	r3, r4
 80161f6:	f001 fc99 	bl	8017b2c <RegionEU868ComputeRxWindowParameters>
 80161fa:	e000      	b.n	80161fe <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80161fc:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80161fe:	46c0      	nop			@ (mov r8, r8)
 8016200:	46bd      	mov	sp, r7
 8016202:	b003      	add	sp, #12
 8016204:	bd90      	pop	{r4, r7, pc}

08016206 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016206:	b580      	push	{r7, lr}
 8016208:	b084      	sub	sp, #16
 801620a:	af00      	add	r7, sp, #0
 801620c:	60b9      	str	r1, [r7, #8]
 801620e:	607a      	str	r2, [r7, #4]
 8016210:	210f      	movs	r1, #15
 8016212:	187b      	adds	r3, r7, r1
 8016214:	1c02      	adds	r2, r0, #0
 8016216:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016218:	187b      	adds	r3, r7, r1
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	2b05      	cmp	r3, #5
 801621e:	d107      	bne.n	8016230 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	0011      	movs	r1, r2
 8016226:	0018      	movs	r0, r3
 8016228:	f001 fce2 	bl	8017bf0 <RegionEU868RxConfig>
 801622c:	0003      	movs	r3, r0
 801622e:	e000      	b.n	8016232 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016230:	2300      	movs	r3, #0
        }
    }
}
 8016232:	0018      	movs	r0, r3
 8016234:	46bd      	mov	sp, r7
 8016236:	b004      	add	sp, #16
 8016238:	bd80      	pop	{r7, pc}

0801623a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801623a:	b580      	push	{r7, lr}
 801623c:	b084      	sub	sp, #16
 801623e:	af00      	add	r7, sp, #0
 8016240:	60b9      	str	r1, [r7, #8]
 8016242:	607a      	str	r2, [r7, #4]
 8016244:	603b      	str	r3, [r7, #0]
 8016246:	210f      	movs	r1, #15
 8016248:	187b      	adds	r3, r7, r1
 801624a:	1c02      	adds	r2, r0, #0
 801624c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801624e:	187b      	adds	r3, r7, r1
 8016250:	781b      	ldrb	r3, [r3, #0]
 8016252:	2b05      	cmp	r3, #5
 8016254:	d107      	bne.n	8016266 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016256:	683a      	ldr	r2, [r7, #0]
 8016258:	6879      	ldr	r1, [r7, #4]
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	0018      	movs	r0, r3
 801625e:	f001 fdbb 	bl	8017dd8 <RegionEU868TxConfig>
 8016262:	0003      	movs	r3, r0
 8016264:	e000      	b.n	8016268 <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016266:	2300      	movs	r3, #0
        }
    }
}
 8016268:	0018      	movs	r0, r3
 801626a:	46bd      	mov	sp, r7
 801626c:	b004      	add	sp, #16
 801626e:	bd80      	pop	{r7, pc}

08016270 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016270:	b590      	push	{r4, r7, lr}
 8016272:	b087      	sub	sp, #28
 8016274:	af02      	add	r7, sp, #8
 8016276:	60b9      	str	r1, [r7, #8]
 8016278:	607a      	str	r2, [r7, #4]
 801627a:	603b      	str	r3, [r7, #0]
 801627c:	210f      	movs	r1, #15
 801627e:	187b      	adds	r3, r7, r1
 8016280:	1c02      	adds	r2, r0, #0
 8016282:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016284:	187b      	adds	r3, r7, r1
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	2b05      	cmp	r3, #5
 801628a:	d10a      	bne.n	80162a2 <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801628c:	6a3c      	ldr	r4, [r7, #32]
 801628e:	683a      	ldr	r2, [r7, #0]
 8016290:	6879      	ldr	r1, [r7, #4]
 8016292:	68b8      	ldr	r0, [r7, #8]
 8016294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016296:	9300      	str	r3, [sp, #0]
 8016298:	0023      	movs	r3, r4
 801629a:	f001 fe89 	bl	8017fb0 <RegionEU868LinkAdrReq>
 801629e:	0003      	movs	r3, r0
 80162a0:	e000      	b.n	80162a4 <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80162a2:	2300      	movs	r3, #0
        }
    }
}
 80162a4:	0018      	movs	r0, r3
 80162a6:	46bd      	mov	sp, r7
 80162a8:	b005      	add	sp, #20
 80162aa:	bd90      	pop	{r4, r7, pc}

080162ac <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	0002      	movs	r2, r0
 80162b4:	6039      	str	r1, [r7, #0]
 80162b6:	1dfb      	adds	r3, r7, #7
 80162b8:	701a      	strb	r2, [r3, #0]
    switch( region )
 80162ba:	1dfb      	adds	r3, r7, #7
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	2b05      	cmp	r3, #5
 80162c0:	d105      	bne.n	80162ce <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	0018      	movs	r0, r3
 80162c6:	f001 ffcb 	bl	8018260 <RegionEU868RxParamSetupReq>
 80162ca:	0003      	movs	r3, r0
 80162cc:	e000      	b.n	80162d0 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80162ce:	2300      	movs	r3, #0
        }
    }
}
 80162d0:	0018      	movs	r0, r3
 80162d2:	46bd      	mov	sp, r7
 80162d4:	b002      	add	sp, #8
 80162d6:	bd80      	pop	{r7, pc}

080162d8 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	0002      	movs	r2, r0
 80162e0:	6039      	str	r1, [r7, #0]
 80162e2:	1dfb      	adds	r3, r7, #7
 80162e4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80162e6:	1dfb      	adds	r3, r7, #7
 80162e8:	781b      	ldrb	r3, [r3, #0]
 80162ea:	2b05      	cmp	r3, #5
 80162ec:	d105      	bne.n	80162fa <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	0018      	movs	r0, r3
 80162f2:	f001 fffe 	bl	80182f2 <RegionEU868NewChannelReq>
 80162f6:	0003      	movs	r3, r0
 80162f8:	e000      	b.n	80162fc <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80162fa:	2300      	movs	r3, #0
        }
    }
}
 80162fc:	0018      	movs	r0, r3
 80162fe:	46bd      	mov	sp, r7
 8016300:	b002      	add	sp, #8
 8016302:	bd80      	pop	{r7, pc}

08016304 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	0002      	movs	r2, r0
 801630c:	6039      	str	r1, [r7, #0]
 801630e:	1dfb      	adds	r3, r7, #7
 8016310:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016312:	1dfb      	adds	r3, r7, #7
 8016314:	781b      	ldrb	r3, [r3, #0]
 8016316:	2b05      	cmp	r3, #5
 8016318:	d105      	bne.n	8016326 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	0018      	movs	r0, r3
 801631e:	f002 f850 	bl	80183c2 <RegionEU868TxParamSetupReq>
 8016322:	0003      	movs	r3, r0
 8016324:	e000      	b.n	8016328 <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016326:	2300      	movs	r3, #0
        }
    }
}
 8016328:	0018      	movs	r0, r3
 801632a:	46bd      	mov	sp, r7
 801632c:	b002      	add	sp, #8
 801632e:	bd80      	pop	{r7, pc}

08016330 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	0002      	movs	r2, r0
 8016338:	6039      	str	r1, [r7, #0]
 801633a:	1dfb      	adds	r3, r7, #7
 801633c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801633e:	1dfb      	adds	r3, r7, #7
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	2b05      	cmp	r3, #5
 8016344:	d105      	bne.n	8016352 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	0018      	movs	r0, r3
 801634a:	f002 f845 	bl	80183d8 <RegionEU868DlChannelReq>
 801634e:	0003      	movs	r3, r0
 8016350:	e000      	b.n	8016354 <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016352:	2300      	movs	r3, #0
        }
    }
}
 8016354:	0018      	movs	r0, r3
 8016356:	46bd      	mov	sp, r7
 8016358:	b002      	add	sp, #8
 801635a:	bd80      	pop	{r7, pc}

0801635c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801635c:	b590      	push	{r4, r7, lr}
 801635e:	b083      	sub	sp, #12
 8016360:	af00      	add	r7, sp, #0
 8016362:	0004      	movs	r4, r0
 8016364:	0008      	movs	r0, r1
 8016366:	0011      	movs	r1, r2
 8016368:	1dfb      	adds	r3, r7, #7
 801636a:	1c22      	adds	r2, r4, #0
 801636c:	701a      	strb	r2, [r3, #0]
 801636e:	1dbb      	adds	r3, r7, #6
 8016370:	1c02      	adds	r2, r0, #0
 8016372:	701a      	strb	r2, [r3, #0]
 8016374:	1d7b      	adds	r3, r7, #5
 8016376:	1c0a      	adds	r2, r1, #0
 8016378:	701a      	strb	r2, [r3, #0]
    switch( region )
 801637a:	1dfb      	adds	r3, r7, #7
 801637c:	781b      	ldrb	r3, [r3, #0]
 801637e:	2b05      	cmp	r3, #5
 8016380:	d10a      	bne.n	8016398 <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016382:	1d7b      	adds	r3, r7, #5
 8016384:	781a      	ldrb	r2, [r3, #0]
 8016386:	1dbb      	adds	r3, r7, #6
 8016388:	781b      	ldrb	r3, [r3, #0]
 801638a:	b25b      	sxtb	r3, r3
 801638c:	0011      	movs	r1, r2
 801638e:	0018      	movs	r0, r3
 8016390:	f002 f870 	bl	8018474 <RegionEU868AlternateDr>
 8016394:	0003      	movs	r3, r0
 8016396:	e000      	b.n	801639a <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016398:	2300      	movs	r3, #0
        }
    }
}
 801639a:	0018      	movs	r0, r3
 801639c:	46bd      	mov	sp, r7
 801639e:	b003      	add	sp, #12
 80163a0:	bd90      	pop	{r4, r7, pc}

080163a2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80163a2:	b580      	push	{r7, lr}
 80163a4:	b084      	sub	sp, #16
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	60b9      	str	r1, [r7, #8]
 80163aa:	607a      	str	r2, [r7, #4]
 80163ac:	603b      	str	r3, [r7, #0]
 80163ae:	210f      	movs	r1, #15
 80163b0:	187b      	adds	r3, r7, r1
 80163b2:	1c02      	adds	r2, r0, #0
 80163b4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80163b6:	187b      	adds	r3, r7, r1
 80163b8:	781b      	ldrb	r3, [r3, #0]
 80163ba:	2b05      	cmp	r3, #5
 80163bc:	d107      	bne.n	80163ce <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80163be:	69bb      	ldr	r3, [r7, #24]
 80163c0:	683a      	ldr	r2, [r7, #0]
 80163c2:	6879      	ldr	r1, [r7, #4]
 80163c4:	68b8      	ldr	r0, [r7, #8]
 80163c6:	f002 f865 	bl	8018494 <RegionEU868NextChannel>
 80163ca:	0003      	movs	r3, r0
 80163cc:	e000      	b.n	80163d0 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80163ce:	2309      	movs	r3, #9
        }
    }
}
 80163d0:	0018      	movs	r0, r3
 80163d2:	46bd      	mov	sp, r7
 80163d4:	b004      	add	sp, #16
 80163d6:	bd80      	pop	{r7, pc}

080163d8 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b082      	sub	sp, #8
 80163dc:	af00      	add	r7, sp, #0
 80163de:	0002      	movs	r2, r0
 80163e0:	6039      	str	r1, [r7, #0]
 80163e2:	1dfb      	adds	r3, r7, #7
 80163e4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80163e6:	1dfb      	adds	r3, r7, #7
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	2b05      	cmp	r3, #5
 80163ec:	d104      	bne.n	80163f8 <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	0018      	movs	r0, r3
 80163f2:	f002 f9f9 	bl	80187e8 <RegionEU868SetContinuousWave>
 80163f6:	e000      	b.n	80163fa <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80163f8:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80163fa:	46c0      	nop			@ (mov r8, r8)
 80163fc:	46bd      	mov	sp, r7
 80163fe:	b002      	add	sp, #8
 8016400:	bd80      	pop	{r7, pc}

08016402 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016402:	b5b0      	push	{r4, r5, r7, lr}
 8016404:	b082      	sub	sp, #8
 8016406:	af00      	add	r7, sp, #0
 8016408:	0005      	movs	r5, r0
 801640a:	000c      	movs	r4, r1
 801640c:	0010      	movs	r0, r2
 801640e:	0019      	movs	r1, r3
 8016410:	1dfb      	adds	r3, r7, #7
 8016412:	1c2a      	adds	r2, r5, #0
 8016414:	701a      	strb	r2, [r3, #0]
 8016416:	1dbb      	adds	r3, r7, #6
 8016418:	1c22      	adds	r2, r4, #0
 801641a:	701a      	strb	r2, [r3, #0]
 801641c:	1d7b      	adds	r3, r7, #5
 801641e:	1c02      	adds	r2, r0, #0
 8016420:	701a      	strb	r2, [r3, #0]
 8016422:	1d3b      	adds	r3, r7, #4
 8016424:	1c0a      	adds	r2, r1, #0
 8016426:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016428:	1dfb      	adds	r3, r7, #7
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	2b05      	cmp	r3, #5
 801642e:	d10c      	bne.n	801644a <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016430:	1d3b      	adds	r3, r7, #4
 8016432:	2200      	movs	r2, #0
 8016434:	569a      	ldrsb	r2, [r3, r2]
 8016436:	1d7b      	adds	r3, r7, #5
 8016438:	2100      	movs	r1, #0
 801643a:	5659      	ldrsb	r1, [r3, r1]
 801643c:	1dbb      	adds	r3, r7, #6
 801643e:	781b      	ldrb	r3, [r3, #0]
 8016440:	0018      	movs	r0, r3
 8016442:	f002 fa29 	bl	8018898 <RegionEU868ApplyDrOffset>
 8016446:	0003      	movs	r3, r0
 8016448:	e001      	b.n	801644e <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801644a:	1d7b      	adds	r3, r7, #5
 801644c:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 801644e:	0018      	movs	r0, r3
 8016450:	46bd      	mov	sp, r7
 8016452:	b002      	add	sp, #8
 8016454:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016458 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801645e:	4b03      	ldr	r3, [pc, #12]	@ (801646c <RegionGetVersion+0x14>)
 8016460:	607b      	str	r3, [r7, #4]

    return version;
 8016462:	687b      	ldr	r3, [r7, #4]
}
 8016464:	0018      	movs	r0, r3
 8016466:	46bd      	mov	sp, r7
 8016468:	b002      	add	sp, #8
 801646a:	bd80      	pop	{r7, pc}
 801646c:	01000300 	.word	0x01000300

08016470 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016472:	b087      	sub	sp, #28
 8016474:	af00      	add	r7, sp, #0
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	0008      	movs	r0, r1
 801647a:	0039      	movs	r1, r7
 801647c:	600a      	str	r2, [r1, #0]
 801647e:	604b      	str	r3, [r1, #4]
 8016480:	230b      	movs	r3, #11
 8016482:	18fb      	adds	r3, r7, r3
 8016484:	1c02      	adds	r2, r0, #0
 8016486:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016488:	2514      	movs	r5, #20
 801648a:	197c      	adds	r4, r7, r5
 801648c:	003b      	movs	r3, r7
 801648e:	6818      	ldr	r0, [r3, #0]
 8016490:	6859      	ldr	r1, [r3, #4]
 8016492:	f000 f91b 	bl	80166cc <RegionCommonGetJoinDc>
 8016496:	0003      	movs	r3, r0
 8016498:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 801649a:	2616      	movs	r6, #22
 801649c:	19bb      	adds	r3, r7, r6
 801649e:	68fa      	ldr	r2, [r7, #12]
 80164a0:	8812      	ldrh	r2, [r2, #0]
 80164a2:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 80164a4:	230b      	movs	r3, #11
 80164a6:	18fb      	adds	r3, r7, r3
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	2201      	movs	r2, #1
 80164ac:	4053      	eors	r3, r2
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d012      	beq.n	80164da <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 80164b4:	197c      	adds	r4, r7, r5
 80164b6:	003b      	movs	r3, r7
 80164b8:	6818      	ldr	r0, [r3, #0]
 80164ba:	6859      	ldr	r1, [r3, #4]
 80164bc:	f000 f906 	bl	80166cc <RegionCommonGetJoinDc>
 80164c0:	0003      	movs	r3, r0
 80164c2:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80164c4:	19ba      	adds	r2, r7, r6
 80164c6:	197b      	adds	r3, r7, r5
 80164c8:	19b9      	adds	r1, r7, r6
 80164ca:	880c      	ldrh	r4, [r1, #0]
 80164cc:	881b      	ldrh	r3, [r3, #0]
 80164ce:	b298      	uxth	r0, r3
 80164d0:	b2a1      	uxth	r1, r4
 80164d2:	4288      	cmp	r0, r1
 80164d4:	d200      	bcs.n	80164d8 <GetDutyCycle+0x68>
 80164d6:	1c23      	adds	r3, r4, #0
 80164d8:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80164da:	2216      	movs	r2, #22
 80164dc:	18bb      	adds	r3, r7, r2
 80164de:	881b      	ldrh	r3, [r3, #0]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d102      	bne.n	80164ea <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 80164e4:	18bb      	adds	r3, r7, r2
 80164e6:	2201      	movs	r2, #1
 80164e8:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 80164ea:	2316      	movs	r3, #22
 80164ec:	18fb      	adds	r3, r7, r3
 80164ee:	881b      	ldrh	r3, [r3, #0]
}
 80164f0:	0018      	movs	r0, r3
 80164f2:	46bd      	mov	sp, r7
 80164f4:	b007      	add	sp, #28
 80164f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164f8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80164f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164fa:	b087      	sub	sp, #28
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	60f8      	str	r0, [r7, #12]
 8016500:	0008      	movs	r0, r1
 8016502:	0039      	movs	r1, r7
 8016504:	600a      	str	r2, [r1, #0]
 8016506:	604b      	str	r3, [r1, #4]
 8016508:	210b      	movs	r1, #11
 801650a:	187b      	adds	r3, r7, r1
 801650c:	1c02      	adds	r2, r0, #0
 801650e:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 8016510:	2614      	movs	r6, #20
 8016512:	19bb      	adds	r3, r7, r6
 8016514:	68fa      	ldr	r2, [r7, #12]
 8016516:	8812      	ldrh	r2, [r2, #0]
 8016518:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 801651a:	2317      	movs	r3, #23
 801651c:	18fb      	adds	r3, r7, r3
 801651e:	2201      	movs	r2, #1
 8016520:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016522:	19bc      	adds	r4, r7, r6
 8016524:	003b      	movs	r3, r7
 8016526:	000d      	movs	r5, r1
 8016528:	187a      	adds	r2, r7, r1
 801652a:	7811      	ldrb	r1, [r2, #0]
 801652c:	68f8      	ldr	r0, [r7, #12]
 801652e:	681a      	ldr	r2, [r3, #0]
 8016530:	685b      	ldr	r3, [r3, #4]
 8016532:	f7ff ff9d 	bl	8016470 <GetDutyCycle>
 8016536:	0003      	movs	r3, r0
 8016538:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 801653a:	197b      	adds	r3, r7, r5
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	2201      	movs	r2, #1
 8016540:	4053      	eors	r3, r2
 8016542:	b2db      	uxtb	r3, r3
 8016544:	2b00      	cmp	r3, #0
 8016546:	d00a      	beq.n	801655e <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8016548:	19bb      	adds	r3, r7, r6
 801654a:	881b      	ldrh	r3, [r3, #0]
 801654c:	2164      	movs	r1, #100	@ 0x64
 801654e:	0018      	movs	r0, r3
 8016550:	f7e9 fde2 	bl	8000118 <__udivsi3>
 8016554:	0003      	movs	r3, r0
 8016556:	b29a      	uxth	r2, r3
 8016558:	2317      	movs	r3, #23
 801655a:	18fb      	adds	r3, r7, r3
 801655c:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 801655e:	2317      	movs	r3, #23
 8016560:	18fb      	adds	r3, r7, r3
 8016562:	781b      	ldrb	r3, [r3, #0]
 8016564:	4a09      	ldr	r2, [pc, #36]	@ (801658c <SetMaxTimeCredits+0x94>)
 8016566:	4353      	muls	r3, r2
 8016568:	001a      	movs	r2, r3
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d103      	bne.n	801657e <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	68da      	ldr	r2, [r3, #12]
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 801657e:	2314      	movs	r3, #20
 8016580:	18fb      	adds	r3, r7, r3
 8016582:	881b      	ldrh	r3, [r3, #0]
}
 8016584:	0018      	movs	r0, r3
 8016586:	46bd      	mov	sp, r7
 8016588:	b007      	add	sp, #28
 801658a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801658c:	0036ee80 	.word	0x0036ee80

08016590 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016590:	b590      	push	{r4, r7, lr}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	000c      	movs	r4, r1
 801659a:	0010      	movs	r0, r2
 801659c:	0019      	movs	r1, r3
 801659e:	1cfb      	adds	r3, r7, #3
 80165a0:	1c22      	adds	r2, r4, #0
 80165a2:	701a      	strb	r2, [r3, #0]
 80165a4:	1cbb      	adds	r3, r7, #2
 80165a6:	1c02      	adds	r2, r0, #0
 80165a8:	701a      	strb	r2, [r3, #0]
 80165aa:	1c7b      	adds	r3, r7, #1
 80165ac:	1c0a      	adds	r2, r1, #0
 80165ae:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 80165b0:	230e      	movs	r3, #14
 80165b2:	18fc      	adds	r4, r7, r3
 80165b4:	2320      	movs	r3, #32
 80165b6:	18fb      	adds	r3, r7, r3
 80165b8:	1cfa      	adds	r2, r7, #3
 80165ba:	7811      	ldrb	r1, [r2, #0]
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	681a      	ldr	r2, [r3, #0]
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	f7ff ff99 	bl	80164f8 <SetMaxTimeCredits>
 80165c6:	0003      	movs	r3, r0
 80165c8:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 80165ca:	1cfb      	adds	r3, r7, #3
 80165cc:	781b      	ldrb	r3, [r3, #0]
 80165ce:	2201      	movs	r2, #1
 80165d0:	4053      	eors	r3, r2
 80165d2:	b2db      	uxtb	r3, r3
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d012      	beq.n	80165fe <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 80165d8:	1cbb      	adds	r3, r7, #2
 80165da:	781b      	ldrb	r3, [r3, #0]
 80165dc:	2201      	movs	r2, #1
 80165de:	4053      	eors	r3, r2
 80165e0:	b2db      	uxtb	r3, r3
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d016      	beq.n	8016614 <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 80165e6:	1c7b      	adds	r3, r7, #1
 80165e8:	781b      	ldrb	r3, [r3, #0]
 80165ea:	2201      	movs	r2, #1
 80165ec:	4053      	eors	r3, r2
 80165ee:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d00f      	beq.n	8016614 <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	68da      	ldr	r2, [r3, #12]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	609a      	str	r2, [r3, #8]
 80165fc:	e00a      	b.n	8016614 <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80165fe:	1cbb      	adds	r3, r7, #2
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	2201      	movs	r2, #1
 8016604:	4053      	eors	r3, r2
 8016606:	b2db      	uxtb	r3, r3
 8016608:	2b00      	cmp	r3, #0
 801660a:	d003      	beq.n	8016614 <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	68da      	ldr	r2, [r3, #12]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	685b      	ldr	r3, [r3, #4]
 8016618:	0018      	movs	r0, r3
 801661a:	f005 fe5f 	bl	801c2dc <UTIL_TIMER_GetElapsedTime>
 801661e:	0002      	movs	r2, r0
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	689b      	ldr	r3, [r3, #8]
 8016624:	18d2      	adds	r2, r2, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	689a      	ldr	r2, [r3, #8]
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	68db      	ldr	r3, [r3, #12]
 8016632:	429a      	cmp	r2, r3
 8016634:	d903      	bls.n	801663e <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	68da      	ldr	r2, [r3, #12]
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016642:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016644:	230e      	movs	r3, #14
 8016646:	18fb      	adds	r3, r7, r3
 8016648:	881b      	ldrh	r3, [r3, #0]
}
 801664a:	0018      	movs	r0, r3
 801664c:	46bd      	mov	sp, r7
 801664e:	b005      	add	sp, #20
 8016650:	bd90      	pop	{r4, r7, pc}

08016652 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016652:	b580      	push	{r7, lr}
 8016654:	b084      	sub	sp, #16
 8016656:	af00      	add	r7, sp, #0
 8016658:	0002      	movs	r2, r0
 801665a:	1dbb      	adds	r3, r7, #6
 801665c:	801a      	strh	r2, [r3, #0]
 801665e:	1d7b      	adds	r3, r7, #5
 8016660:	1c0a      	adds	r2, r1, #0
 8016662:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8016664:	230f      	movs	r3, #15
 8016666:	18fb      	adds	r3, r7, r3
 8016668:	2200      	movs	r2, #0
 801666a:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 801666c:	230e      	movs	r3, #14
 801666e:	18fb      	adds	r3, r7, r3
 8016670:	2200      	movs	r2, #0
 8016672:	701a      	strb	r2, [r3, #0]
 8016674:	e01b      	b.n	80166ae <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016676:	1dbb      	adds	r3, r7, #6
 8016678:	881b      	ldrh	r3, [r3, #0]
 801667a:	200e      	movs	r0, #14
 801667c:	183a      	adds	r2, r7, r0
 801667e:	7812      	ldrb	r2, [r2, #0]
 8016680:	2101      	movs	r1, #1
 8016682:	4091      	lsls	r1, r2
 8016684:	000a      	movs	r2, r1
 8016686:	401a      	ands	r2, r3
 8016688:	183b      	adds	r3, r7, r0
 801668a:	781b      	ldrb	r3, [r3, #0]
 801668c:	2101      	movs	r1, #1
 801668e:	4099      	lsls	r1, r3
 8016690:	000b      	movs	r3, r1
 8016692:	429a      	cmp	r2, r3
 8016694:	d105      	bne.n	80166a2 <CountChannels+0x50>
        {
            nbActiveBits++;
 8016696:	210f      	movs	r1, #15
 8016698:	187b      	adds	r3, r7, r1
 801669a:	781a      	ldrb	r2, [r3, #0]
 801669c:	187b      	adds	r3, r7, r1
 801669e:	3201      	adds	r2, #1
 80166a0:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 80166a2:	210e      	movs	r1, #14
 80166a4:	187b      	adds	r3, r7, r1
 80166a6:	781a      	ldrb	r2, [r3, #0]
 80166a8:	187b      	adds	r3, r7, r1
 80166aa:	3201      	adds	r2, #1
 80166ac:	701a      	strb	r2, [r3, #0]
 80166ae:	230e      	movs	r3, #14
 80166b0:	18fa      	adds	r2, r7, r3
 80166b2:	1d7b      	adds	r3, r7, #5
 80166b4:	7812      	ldrb	r2, [r2, #0]
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d3dc      	bcc.n	8016676 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 80166bc:	230f      	movs	r3, #15
 80166be:	18fb      	adds	r3, r7, r3
 80166c0:	781b      	ldrb	r3, [r3, #0]
}
 80166c2:	0018      	movs	r0, r3
 80166c4:	46bd      	mov	sp, r7
 80166c6:	b004      	add	sp, #16
 80166c8:	bd80      	pop	{r7, pc}
	...

080166cc <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b084      	sub	sp, #16
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	003b      	movs	r3, r7
 80166d4:	6018      	str	r0, [r3, #0]
 80166d6:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 80166d8:	210e      	movs	r1, #14
 80166da:	187b      	adds	r3, r7, r1
 80166dc:	2200      	movs	r2, #0
 80166de:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 80166e0:	003b      	movs	r3, r7
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	23e1      	movs	r3, #225	@ 0xe1
 80166e6:	011b      	lsls	r3, r3, #4
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d203      	bcs.n	80166f4 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 80166ec:	187b      	adds	r3, r7, r1
 80166ee:	2264      	movs	r2, #100	@ 0x64
 80166f0:	801a      	strh	r2, [r3, #0]
 80166f2:	e00e      	b.n	8016712 <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 80166f4:	003b      	movs	r3, r7
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	4a09      	ldr	r2, [pc, #36]	@ (8016720 <RegionCommonGetJoinDc+0x54>)
 80166fa:	4293      	cmp	r3, r2
 80166fc:	d805      	bhi.n	801670a <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 80166fe:	230e      	movs	r3, #14
 8016700:	18fb      	adds	r3, r7, r3
 8016702:	22fa      	movs	r2, #250	@ 0xfa
 8016704:	0092      	lsls	r2, r2, #2
 8016706:	801a      	strh	r2, [r3, #0]
 8016708:	e003      	b.n	8016712 <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 801670a:	230e      	movs	r3, #14
 801670c:	18fb      	adds	r3, r7, r3
 801670e:	4a05      	ldr	r2, [pc, #20]	@ (8016724 <RegionCommonGetJoinDc+0x58>)
 8016710:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8016712:	230e      	movs	r3, #14
 8016714:	18fb      	adds	r3, r7, r3
 8016716:	881b      	ldrh	r3, [r3, #0]
}
 8016718:	0018      	movs	r0, r3
 801671a:	46bd      	mov	sp, r7
 801671c:	b004      	add	sp, #16
 801671e:	bd80      	pop	{r7, pc}
 8016720:	00009aaf 	.word	0x00009aaf
 8016724:	00002710 	.word	0x00002710

08016728 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016728:	b590      	push	{r4, r7, lr}
 801672a:	b085      	sub	sp, #20
 801672c:	af00      	add	r7, sp, #0
 801672e:	0004      	movs	r4, r0
 8016730:	6039      	str	r1, [r7, #0]
 8016732:	0010      	movs	r0, r2
 8016734:	0019      	movs	r1, r3
 8016736:	1dfb      	adds	r3, r7, #7
 8016738:	1c22      	adds	r2, r4, #0
 801673a:	701a      	strb	r2, [r3, #0]
 801673c:	1dbb      	adds	r3, r7, #6
 801673e:	1c02      	adds	r2, r0, #0
 8016740:	701a      	strb	r2, [r3, #0]
 8016742:	1d7b      	adds	r3, r7, #5
 8016744:	1c0a      	adds	r2, r1, #0
 8016746:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016748:	2320      	movs	r3, #32
 801674a:	18fb      	adds	r3, r7, r3
 801674c:	2200      	movs	r2, #0
 801674e:	569a      	ldrsb	r2, [r3, r2]
 8016750:	1d7b      	adds	r3, r7, #5
 8016752:	2100      	movs	r1, #0
 8016754:	5659      	ldrsb	r1, [r3, r1]
 8016756:	1dbb      	adds	r3, r7, #6
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	b25b      	sxtb	r3, r3
 801675c:	0018      	movs	r0, r3
 801675e:	f000 f87c 	bl	801685a <RegionCommonValueInRange>
 8016762:	1e03      	subs	r3, r0, #0
 8016764:	d101      	bne.n	801676a <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8016766:	2300      	movs	r3, #0
 8016768:	e073      	b.n	8016852 <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801676a:	230f      	movs	r3, #15
 801676c:	18fb      	adds	r3, r7, r3
 801676e:	2200      	movs	r2, #0
 8016770:	701a      	strb	r2, [r3, #0]
 8016772:	230e      	movs	r3, #14
 8016774:	18fb      	adds	r3, r7, r3
 8016776:	2200      	movs	r2, #0
 8016778:	701a      	strb	r2, [r3, #0]
 801677a:	e062      	b.n	8016842 <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801677c:	230d      	movs	r3, #13
 801677e:	18fb      	adds	r3, r7, r3
 8016780:	2200      	movs	r2, #0
 8016782:	701a      	strb	r2, [r3, #0]
 8016784:	e04c      	b.n	8016820 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016786:	230e      	movs	r3, #14
 8016788:	18fb      	adds	r3, r7, r3
 801678a:	781b      	ldrb	r3, [r3, #0]
 801678c:	005b      	lsls	r3, r3, #1
 801678e:	683a      	ldr	r2, [r7, #0]
 8016790:	18d3      	adds	r3, r2, r3
 8016792:	881b      	ldrh	r3, [r3, #0]
 8016794:	001a      	movs	r2, r3
 8016796:	200d      	movs	r0, #13
 8016798:	183b      	adds	r3, r7, r0
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	411a      	asrs	r2, r3
 801679e:	0013      	movs	r3, r2
 80167a0:	2201      	movs	r2, #1
 80167a2:	4013      	ands	r3, r2
 80167a4:	d036      	beq.n	8016814 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80167a6:	240f      	movs	r4, #15
 80167a8:	193b      	adds	r3, r7, r4
 80167aa:	781a      	ldrb	r2, [r3, #0]
 80167ac:	183b      	adds	r3, r7, r0
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	18d3      	adds	r3, r2, r3
 80167b2:	001a      	movs	r2, r3
 80167b4:	0013      	movs	r3, r2
 80167b6:	005b      	lsls	r3, r3, #1
 80167b8:	189b      	adds	r3, r3, r2
 80167ba:	009b      	lsls	r3, r3, #2
 80167bc:	001a      	movs	r2, r3
 80167be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167c0:	189b      	adds	r3, r3, r2
 80167c2:	7a1b      	ldrb	r3, [r3, #8]
 80167c4:	011b      	lsls	r3, r3, #4
 80167c6:	b25b      	sxtb	r3, r3
 80167c8:	111b      	asrs	r3, r3, #4
 80167ca:	b25b      	sxtb	r3, r3
 80167cc:	001a      	movs	r2, r3
 80167ce:	230f      	movs	r3, #15
 80167d0:	4013      	ands	r3, r2
 80167d2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80167d4:	193b      	adds	r3, r7, r4
 80167d6:	781a      	ldrb	r2, [r3, #0]
 80167d8:	183b      	adds	r3, r7, r0
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	18d3      	adds	r3, r2, r3
 80167de:	001a      	movs	r2, r3
 80167e0:	0013      	movs	r3, r2
 80167e2:	005b      	lsls	r3, r3, #1
 80167e4:	189b      	adds	r3, r3, r2
 80167e6:	009b      	lsls	r3, r3, #2
 80167e8:	001a      	movs	r2, r3
 80167ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167ec:	189b      	adds	r3, r3, r2
 80167ee:	7a1b      	ldrb	r3, [r3, #8]
 80167f0:	b25b      	sxtb	r3, r3
 80167f2:	111b      	asrs	r3, r3, #4
 80167f4:	b25b      	sxtb	r3, r3
 80167f6:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80167f8:	230f      	movs	r3, #15
 80167fa:	4013      	ands	r3, r2
 80167fc:	b25a      	sxtb	r2, r3
 80167fe:	1dbb      	adds	r3, r7, #6
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	b25b      	sxtb	r3, r3
 8016804:	0018      	movs	r0, r3
 8016806:	f000 f828 	bl	801685a <RegionCommonValueInRange>
 801680a:	0003      	movs	r3, r0
 801680c:	2b01      	cmp	r3, #1
 801680e:	d101      	bne.n	8016814 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016810:	2301      	movs	r3, #1
 8016812:	e01e      	b.n	8016852 <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 8016814:	210d      	movs	r1, #13
 8016816:	187b      	adds	r3, r7, r1
 8016818:	781a      	ldrb	r2, [r3, #0]
 801681a:	187b      	adds	r3, r7, r1
 801681c:	3201      	adds	r2, #1
 801681e:	701a      	strb	r2, [r3, #0]
 8016820:	230d      	movs	r3, #13
 8016822:	18fb      	adds	r3, r7, r3
 8016824:	781b      	ldrb	r3, [r3, #0]
 8016826:	2b0f      	cmp	r3, #15
 8016828:	d9ad      	bls.n	8016786 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801682a:	220f      	movs	r2, #15
 801682c:	18bb      	adds	r3, r7, r2
 801682e:	18ba      	adds	r2, r7, r2
 8016830:	7812      	ldrb	r2, [r2, #0]
 8016832:	3210      	adds	r2, #16
 8016834:	701a      	strb	r2, [r3, #0]
 8016836:	210e      	movs	r1, #14
 8016838:	187b      	adds	r3, r7, r1
 801683a:	781a      	ldrb	r2, [r3, #0]
 801683c:	187b      	adds	r3, r7, r1
 801683e:	3201      	adds	r2, #1
 8016840:	701a      	strb	r2, [r3, #0]
 8016842:	230f      	movs	r3, #15
 8016844:	18fa      	adds	r2, r7, r3
 8016846:	1dfb      	adds	r3, r7, #7
 8016848:	7812      	ldrb	r2, [r2, #0]
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	429a      	cmp	r2, r3
 801684e:	d395      	bcc.n	801677c <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8016850:	2300      	movs	r3, #0
}
 8016852:	0018      	movs	r0, r3
 8016854:	46bd      	mov	sp, r7
 8016856:	b005      	add	sp, #20
 8016858:	bd90      	pop	{r4, r7, pc}

0801685a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801685a:	b590      	push	{r4, r7, lr}
 801685c:	b083      	sub	sp, #12
 801685e:	af00      	add	r7, sp, #0
 8016860:	0004      	movs	r4, r0
 8016862:	0008      	movs	r0, r1
 8016864:	0011      	movs	r1, r2
 8016866:	1dfb      	adds	r3, r7, #7
 8016868:	1c22      	adds	r2, r4, #0
 801686a:	701a      	strb	r2, [r3, #0]
 801686c:	1dbb      	adds	r3, r7, #6
 801686e:	1c02      	adds	r2, r0, #0
 8016870:	701a      	strb	r2, [r3, #0]
 8016872:	1d7b      	adds	r3, r7, #5
 8016874:	1c0a      	adds	r2, r1, #0
 8016876:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8016878:	1dfa      	adds	r2, r7, #7
 801687a:	1dbb      	adds	r3, r7, #6
 801687c:	7812      	ldrb	r2, [r2, #0]
 801687e:	b252      	sxtb	r2, r2
 8016880:	781b      	ldrb	r3, [r3, #0]
 8016882:	b25b      	sxtb	r3, r3
 8016884:	429a      	cmp	r2, r3
 8016886:	db09      	blt.n	801689c <RegionCommonValueInRange+0x42>
 8016888:	1dfa      	adds	r2, r7, #7
 801688a:	1d7b      	adds	r3, r7, #5
 801688c:	7812      	ldrb	r2, [r2, #0]
 801688e:	b252      	sxtb	r2, r2
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	b25b      	sxtb	r3, r3
 8016894:	429a      	cmp	r2, r3
 8016896:	dc01      	bgt.n	801689c <RegionCommonValueInRange+0x42>
    {
        return 1;
 8016898:	2301      	movs	r3, #1
 801689a:	e000      	b.n	801689e <RegionCommonValueInRange+0x44>
    }
    return 0;
 801689c:	2300      	movs	r3, #0
}
 801689e:	0018      	movs	r0, r3
 80168a0:	46bd      	mov	sp, r7
 80168a2:	b003      	add	sp, #12
 80168a4:	bd90      	pop	{r4, r7, pc}

080168a6 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80168a6:	b580      	push	{r7, lr}
 80168a8:	b084      	sub	sp, #16
 80168aa:	af00      	add	r7, sp, #0
 80168ac:	6078      	str	r0, [r7, #4]
 80168ae:	0008      	movs	r0, r1
 80168b0:	0011      	movs	r1, r2
 80168b2:	1cfb      	adds	r3, r7, #3
 80168b4:	1c02      	adds	r2, r0, #0
 80168b6:	701a      	strb	r2, [r3, #0]
 80168b8:	1cbb      	adds	r3, r7, #2
 80168ba:	1c0a      	adds	r2, r1, #0
 80168bc:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 80168be:	210f      	movs	r1, #15
 80168c0:	187b      	adds	r3, r7, r1
 80168c2:	1cfa      	adds	r2, r7, #3
 80168c4:	7812      	ldrb	r2, [r2, #0]
 80168c6:	0912      	lsrs	r2, r2, #4
 80168c8:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80168ca:	1cbb      	adds	r3, r7, #2
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	091b      	lsrs	r3, r3, #4
 80168d0:	b2db      	uxtb	r3, r3
 80168d2:	187a      	adds	r2, r7, r1
 80168d4:	7812      	ldrb	r2, [r2, #0]
 80168d6:	429a      	cmp	r2, r3
 80168d8:	d805      	bhi.n	80168e6 <RegionCommonChanDisable+0x40>
 80168da:	1cfa      	adds	r2, r7, #3
 80168dc:	1cbb      	adds	r3, r7, #2
 80168de:	7812      	ldrb	r2, [r2, #0]
 80168e0:	781b      	ldrb	r3, [r3, #0]
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d301      	bcc.n	80168ea <RegionCommonChanDisable+0x44>
    {
        return false;
 80168e6:	2300      	movs	r3, #0
 80168e8:	e01b      	b.n	8016922 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80168ea:	200f      	movs	r0, #15
 80168ec:	183b      	adds	r3, r7, r0
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	005b      	lsls	r3, r3, #1
 80168f2:	687a      	ldr	r2, [r7, #4]
 80168f4:	18d3      	adds	r3, r2, r3
 80168f6:	881b      	ldrh	r3, [r3, #0]
 80168f8:	b21b      	sxth	r3, r3
 80168fa:	1cfa      	adds	r2, r7, #3
 80168fc:	7812      	ldrb	r2, [r2, #0]
 80168fe:	210f      	movs	r1, #15
 8016900:	400a      	ands	r2, r1
 8016902:	2101      	movs	r1, #1
 8016904:	4091      	lsls	r1, r2
 8016906:	000a      	movs	r2, r1
 8016908:	b212      	sxth	r2, r2
 801690a:	43d2      	mvns	r2, r2
 801690c:	b212      	sxth	r2, r2
 801690e:	4013      	ands	r3, r2
 8016910:	b219      	sxth	r1, r3
 8016912:	183b      	adds	r3, r7, r0
 8016914:	781b      	ldrb	r3, [r3, #0]
 8016916:	005b      	lsls	r3, r3, #1
 8016918:	687a      	ldr	r2, [r7, #4]
 801691a:	18d3      	adds	r3, r2, r3
 801691c:	b28a      	uxth	r2, r1
 801691e:	801a      	strh	r2, [r3, #0]

    return true;
 8016920:	2301      	movs	r3, #1
}
 8016922:	0018      	movs	r0, r3
 8016924:	46bd      	mov	sp, r7
 8016926:	b004      	add	sp, #16
 8016928:	bd80      	pop	{r7, pc}

0801692a <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801692a:	b590      	push	{r4, r7, lr}
 801692c:	b085      	sub	sp, #20
 801692e:	af00      	add	r7, sp, #0
 8016930:	6078      	str	r0, [r7, #4]
 8016932:	0008      	movs	r0, r1
 8016934:	0011      	movs	r1, r2
 8016936:	1cfb      	adds	r3, r7, #3
 8016938:	1c02      	adds	r2, r0, #0
 801693a:	701a      	strb	r2, [r3, #0]
 801693c:	1cbb      	adds	r3, r7, #2
 801693e:	1c0a      	adds	r2, r1, #0
 8016940:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8016942:	230f      	movs	r3, #15
 8016944:	18fb      	adds	r3, r7, r3
 8016946:	2200      	movs	r2, #0
 8016948:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d101      	bne.n	8016954 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8016950:	2300      	movs	r3, #0
 8016952:	e027      	b.n	80169a4 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016954:	230e      	movs	r3, #14
 8016956:	18fb      	adds	r3, r7, r3
 8016958:	1cfa      	adds	r2, r7, #3
 801695a:	7812      	ldrb	r2, [r2, #0]
 801695c:	701a      	strb	r2, [r3, #0]
 801695e:	e017      	b.n	8016990 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016960:	240e      	movs	r4, #14
 8016962:	193b      	adds	r3, r7, r4
 8016964:	781b      	ldrb	r3, [r3, #0]
 8016966:	005b      	lsls	r3, r3, #1
 8016968:	687a      	ldr	r2, [r7, #4]
 801696a:	18d3      	adds	r3, r2, r3
 801696c:	881b      	ldrh	r3, [r3, #0]
 801696e:	2110      	movs	r1, #16
 8016970:	0018      	movs	r0, r3
 8016972:	f7ff fe6e 	bl	8016652 <CountChannels>
 8016976:	0003      	movs	r3, r0
 8016978:	0019      	movs	r1, r3
 801697a:	220f      	movs	r2, #15
 801697c:	18bb      	adds	r3, r7, r2
 801697e:	18ba      	adds	r2, r7, r2
 8016980:	7812      	ldrb	r2, [r2, #0]
 8016982:	188a      	adds	r2, r1, r2
 8016984:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016986:	193b      	adds	r3, r7, r4
 8016988:	781a      	ldrb	r2, [r3, #0]
 801698a:	193b      	adds	r3, r7, r4
 801698c:	3201      	adds	r2, #1
 801698e:	701a      	strb	r2, [r3, #0]
 8016990:	230e      	movs	r3, #14
 8016992:	18fa      	adds	r2, r7, r3
 8016994:	1cbb      	adds	r3, r7, #2
 8016996:	7812      	ldrb	r2, [r2, #0]
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	429a      	cmp	r2, r3
 801699c:	d3e0      	bcc.n	8016960 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 801699e:	230f      	movs	r3, #15
 80169a0:	18fb      	adds	r3, r7, r3
 80169a2:	781b      	ldrb	r3, [r3, #0]
}
 80169a4:	0018      	movs	r0, r3
 80169a6:	46bd      	mov	sp, r7
 80169a8:	b005      	add	sp, #20
 80169aa:	bd90      	pop	{r4, r7, pc}

080169ac <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b086      	sub	sp, #24
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	60f8      	str	r0, [r7, #12]
 80169b4:	60b9      	str	r1, [r7, #8]
 80169b6:	1dfb      	adds	r3, r7, #7
 80169b8:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d020      	beq.n	8016a02 <RegionCommonChanMaskCopy+0x56>
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d01d      	beq.n	8016a02 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 80169c6:	2317      	movs	r3, #23
 80169c8:	18fb      	adds	r3, r7, r3
 80169ca:	2200      	movs	r2, #0
 80169cc:	701a      	strb	r2, [r3, #0]
 80169ce:	e011      	b.n	80169f4 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80169d0:	2017      	movs	r0, #23
 80169d2:	183b      	adds	r3, r7, r0
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	005b      	lsls	r3, r3, #1
 80169d8:	68ba      	ldr	r2, [r7, #8]
 80169da:	18d2      	adds	r2, r2, r3
 80169dc:	183b      	adds	r3, r7, r0
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	005b      	lsls	r3, r3, #1
 80169e2:	68f9      	ldr	r1, [r7, #12]
 80169e4:	18cb      	adds	r3, r1, r3
 80169e6:	8812      	ldrh	r2, [r2, #0]
 80169e8:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80169ea:	183b      	adds	r3, r7, r0
 80169ec:	781a      	ldrb	r2, [r3, #0]
 80169ee:	183b      	adds	r3, r7, r0
 80169f0:	3201      	adds	r2, #1
 80169f2:	701a      	strb	r2, [r3, #0]
 80169f4:	2317      	movs	r3, #23
 80169f6:	18fa      	adds	r2, r7, r3
 80169f8:	1dfb      	adds	r3, r7, #7
 80169fa:	7812      	ldrb	r2, [r2, #0]
 80169fc:	781b      	ldrb	r3, [r3, #0]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d3e6      	bcc.n	80169d0 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8016a02:	46c0      	nop			@ (mov r8, r8)
 8016a04:	46bd      	mov	sp, r7
 8016a06:	b006      	add	sp, #24
 8016a08:	bd80      	pop	{r7, pc}

08016a0a <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016a0a:	b082      	sub	sp, #8
 8016a0c:	b5b0      	push	{r4, r5, r7, lr}
 8016a0e:	b086      	sub	sp, #24
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	60f8      	str	r0, [r7, #12]
 8016a14:	60b9      	str	r1, [r7, #8]
 8016a16:	0011      	movs	r1, r2
 8016a18:	2204      	movs	r2, #4
 8016a1a:	2028      	movs	r0, #40	@ 0x28
 8016a1c:	1812      	adds	r2, r2, r0
 8016a1e:	19d2      	adds	r2, r2, r7
 8016a20:	6013      	str	r3, [r2, #0]
 8016a22:	1dfb      	adds	r3, r7, #7
 8016a24:	1c0a      	adds	r2, r1, #0
 8016a26:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016a28:	2516      	movs	r5, #22
 8016a2a:	197c      	adds	r4, r7, r5
 8016a2c:	2304      	movs	r3, #4
 8016a2e:	181b      	adds	r3, r3, r0
 8016a30:	19db      	adds	r3, r3, r7
 8016a32:	1dfa      	adds	r2, r7, #7
 8016a34:	7811      	ldrb	r1, [r2, #0]
 8016a36:	68f8      	ldr	r0, [r7, #12]
 8016a38:	681a      	ldr	r2, [r3, #0]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	f7ff fd18 	bl	8016470 <GetDutyCycle>
 8016a40:	0003      	movs	r3, r0
 8016a42:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	689a      	ldr	r2, [r3, #8]
 8016a48:	197b      	adds	r3, r7, r5
 8016a4a:	881b      	ldrh	r3, [r3, #0]
 8016a4c:	68b9      	ldr	r1, [r7, #8]
 8016a4e:	434b      	muls	r3, r1
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d909      	bls.n	8016a68 <RegionCommonSetBandTxDone+0x5e>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	689a      	ldr	r2, [r3, #8]
 8016a58:	197b      	adds	r3, r7, r5
 8016a5a:	881b      	ldrh	r3, [r3, #0]
 8016a5c:	68b9      	ldr	r1, [r7, #8]
 8016a5e:	434b      	muls	r3, r1
 8016a60:	1ad2      	subs	r2, r2, r3
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016a66:	e002      	b.n	8016a6e <RegionCommonSetBandTxDone+0x64>
        band->TimeCredits = 0;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	609a      	str	r2, [r3, #8]
}
 8016a6e:	46c0      	nop			@ (mov r8, r8)
 8016a70:	46bd      	mov	sp, r7
 8016a72:	b006      	add	sp, #24
 8016a74:	bcb0      	pop	{r4, r5, r7}
 8016a76:	bc08      	pop	{r3}
 8016a78:	b002      	add	sp, #8
 8016a7a:	4718      	bx	r3

08016a7c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a7e:	46c6      	mov	lr, r8
 8016a80:	b500      	push	{lr}
 8016a82:	b08c      	sub	sp, #48	@ 0x30
 8016a84:	af04      	add	r7, sp, #16
 8016a86:	0004      	movs	r4, r0
 8016a88:	6039      	str	r1, [r7, #0]
 8016a8a:	0010      	movs	r0, r2
 8016a8c:	0019      	movs	r1, r3
 8016a8e:	1dfb      	adds	r3, r7, #7
 8016a90:	1c22      	adds	r2, r4, #0
 8016a92:	701a      	strb	r2, [r3, #0]
 8016a94:	1dbb      	adds	r3, r7, #6
 8016a96:	1c02      	adds	r2, r0, #0
 8016a98:	701a      	strb	r2, [r3, #0]
 8016a9a:	1d7b      	adds	r3, r7, #5
 8016a9c:	1c0a      	adds	r2, r1, #0
 8016a9e:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	425b      	negs	r3, r3
 8016aa4:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016aa6:	f005 fc05 	bl	801c2b4 <UTIL_TIMER_GetCurrentTime>
 8016aaa:	0003      	movs	r3, r0
 8016aac:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 8016ab2:	230e      	movs	r3, #14
 8016ab4:	18fb      	adds	r3, r7, r3
 8016ab6:	2201      	movs	r2, #1
 8016ab8:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 8016aba:	231b      	movs	r3, #27
 8016abc:	18fb      	adds	r3, r7, r3
 8016abe:	2200      	movs	r2, #0
 8016ac0:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 8016ac2:	231a      	movs	r3, #26
 8016ac4:	18fb      	adds	r3, r7, r3
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	701a      	strb	r2, [r3, #0]
 8016aca:	e089      	b.n	8016be0 <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016acc:	231a      	movs	r3, #26
 8016ace:	18fb      	adds	r3, r7, r3
 8016ad0:	781a      	ldrb	r2, [r3, #0]
 8016ad2:	0013      	movs	r3, r2
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	189b      	adds	r3, r3, r2
 8016ad8:	009b      	lsls	r3, r3, #2
 8016ada:	001a      	movs	r2, r3
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	469c      	mov	ip, r3
 8016ae0:	4494      	add	ip, r2
 8016ae2:	220e      	movs	r2, #14
 8016ae4:	18bc      	adds	r4, r7, r2
 8016ae6:	2138      	movs	r1, #56	@ 0x38
 8016ae8:	000a      	movs	r2, r1
 8016aea:	187b      	adds	r3, r7, r1
 8016aec:	781e      	ldrb	r6, [r3, #0]
 8016aee:	1d7b      	adds	r3, r7, #5
 8016af0:	781d      	ldrb	r5, [r3, #0]
 8016af2:	1dfb      	adds	r3, r7, #7
 8016af4:	781b      	ldrb	r3, [r3, #0]
 8016af6:	4698      	mov	r8, r3
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	9302      	str	r3, [sp, #8]
 8016afc:	2304      	movs	r3, #4
 8016afe:	189b      	adds	r3, r3, r2
 8016b00:	19da      	adds	r2, r3, r7
 8016b02:	466b      	mov	r3, sp
 8016b04:	ca03      	ldmia	r2!, {r0, r1}
 8016b06:	c303      	stmia	r3!, {r0, r1}
 8016b08:	0033      	movs	r3, r6
 8016b0a:	002a      	movs	r2, r5
 8016b0c:	4641      	mov	r1, r8
 8016b0e:	4660      	mov	r0, ip
 8016b10:	f7ff fd3e 	bl	8016590 <UpdateTimeCredits>
 8016b14:	0003      	movs	r3, r0
 8016b16:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016b18:	220e      	movs	r2, #14
 8016b1a:	18bb      	adds	r3, r7, r2
 8016b1c:	881a      	ldrh	r2, [r3, #0]
 8016b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b20:	4353      	muls	r3, r2
 8016b22:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016b24:	231a      	movs	r3, #26
 8016b26:	18fb      	adds	r3, r7, r3
 8016b28:	781a      	ldrb	r2, [r3, #0]
 8016b2a:	0013      	movs	r3, r2
 8016b2c:	009b      	lsls	r3, r3, #2
 8016b2e:	189b      	adds	r3, r3, r2
 8016b30:	009b      	lsls	r3, r3, #2
 8016b32:	001a      	movs	r2, r3
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	189b      	adds	r3, r3, r2
 8016b38:	689b      	ldr	r3, [r3, #8]
 8016b3a:	693a      	ldr	r2, [r7, #16]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d306      	bcc.n	8016b4e <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 8016b40:	1d7b      	adds	r3, r7, #5
 8016b42:	781b      	ldrb	r3, [r3, #0]
 8016b44:	2201      	movs	r2, #1
 8016b46:	4053      	eors	r3, r2
 8016b48:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d012      	beq.n	8016b74 <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 8016b4e:	231a      	movs	r3, #26
 8016b50:	18fb      	adds	r3, r7, r3
 8016b52:	781a      	ldrb	r2, [r3, #0]
 8016b54:	0013      	movs	r3, r2
 8016b56:	009b      	lsls	r3, r3, #2
 8016b58:	189b      	adds	r3, r3, r2
 8016b5a:	009b      	lsls	r3, r3, #2
 8016b5c:	001a      	movs	r2, r3
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	189b      	adds	r3, r3, r2
 8016b62:	2201      	movs	r2, #1
 8016b64:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016b66:	211b      	movs	r1, #27
 8016b68:	187b      	adds	r3, r7, r1
 8016b6a:	781a      	ldrb	r2, [r3, #0]
 8016b6c:	187b      	adds	r3, r7, r1
 8016b6e:	3201      	adds	r2, #1
 8016b70:	701a      	strb	r2, [r3, #0]
 8016b72:	e02f      	b.n	8016bd4 <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016b74:	211a      	movs	r1, #26
 8016b76:	187b      	adds	r3, r7, r1
 8016b78:	781a      	ldrb	r2, [r3, #0]
 8016b7a:	0013      	movs	r3, r2
 8016b7c:	009b      	lsls	r3, r3, #2
 8016b7e:	189b      	adds	r3, r3, r2
 8016b80:	009b      	lsls	r3, r3, #2
 8016b82:	001a      	movs	r2, r3
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	189b      	adds	r3, r3, r2
 8016b88:	2200      	movs	r2, #0
 8016b8a:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016b8c:	187b      	adds	r3, r7, r1
 8016b8e:	781a      	ldrb	r2, [r3, #0]
 8016b90:	0013      	movs	r3, r2
 8016b92:	009b      	lsls	r3, r3, #2
 8016b94:	189b      	adds	r3, r3, r2
 8016b96:	009b      	lsls	r3, r3, #2
 8016b98:	001a      	movs	r2, r3
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	189b      	adds	r3, r3, r2
 8016b9e:	68db      	ldr	r3, [r3, #12]
 8016ba0:	693a      	ldr	r2, [r7, #16]
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d216      	bcs.n	8016bd4 <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016ba6:	187b      	adds	r3, r7, r1
 8016ba8:	781a      	ldrb	r2, [r3, #0]
 8016baa:	0013      	movs	r3, r2
 8016bac:	009b      	lsls	r3, r3, #2
 8016bae:	189b      	adds	r3, r3, r2
 8016bb0:	009b      	lsls	r3, r3, #2
 8016bb2:	001a      	movs	r2, r3
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	189b      	adds	r3, r3, r2
 8016bb8:	689b      	ldr	r3, [r3, #8]
 8016bba:	693a      	ldr	r2, [r7, #16]
 8016bbc:	1ad2      	subs	r2, r2, r3
 8016bbe:	69fb      	ldr	r3, [r7, #28]
 8016bc0:	4293      	cmp	r3, r2
 8016bc2:	d900      	bls.n	8016bc6 <RegionCommonUpdateBandTimeOff+0x14a>
 8016bc4:	0013      	movs	r3, r2
 8016bc6:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016bc8:	211b      	movs	r1, #27
 8016bca:	187b      	adds	r3, r7, r1
 8016bcc:	781a      	ldrb	r2, [r3, #0]
 8016bce:	187b      	adds	r3, r7, r1
 8016bd0:	3201      	adds	r2, #1
 8016bd2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 8016bd4:	211a      	movs	r1, #26
 8016bd6:	187b      	adds	r3, r7, r1
 8016bd8:	781a      	ldrb	r2, [r3, #0]
 8016bda:	187b      	adds	r3, r7, r1
 8016bdc:	3201      	adds	r2, #1
 8016bde:	701a      	strb	r2, [r3, #0]
 8016be0:	231a      	movs	r3, #26
 8016be2:	18fa      	adds	r2, r7, r3
 8016be4:	1dbb      	adds	r3, r7, #6
 8016be6:	7812      	ldrb	r2, [r2, #0]
 8016be8:	781b      	ldrb	r3, [r3, #0]
 8016bea:	429a      	cmp	r2, r3
 8016bec:	d200      	bcs.n	8016bf0 <RegionCommonUpdateBandTimeOff+0x174>
 8016bee:	e76d      	b.n	8016acc <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 8016bf0:	231b      	movs	r3, #27
 8016bf2:	18fb      	adds	r3, r7, r3
 8016bf4:	781b      	ldrb	r3, [r3, #0]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d102      	bne.n	8016c00 <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	425b      	negs	r3, r3
 8016bfe:	e000      	b.n	8016c02 <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 8016c00:	69fb      	ldr	r3, [r7, #28]
}
 8016c02:	0018      	movs	r0, r3
 8016c04:	46bd      	mov	sp, r7
 8016c06:	b008      	add	sp, #32
 8016c08:	bc80      	pop	{r7}
 8016c0a:	46b8      	mov	r8, r7
 8016c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c0e <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b084      	sub	sp, #16
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
 8016c16:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016c18:	210f      	movs	r1, #15
 8016c1a:	187b      	adds	r3, r7, r1
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	781b      	ldrb	r3, [r3, #0]
 8016c24:	2b03      	cmp	r3, #3
 8016c26:	d140      	bne.n	8016caa <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	3301      	adds	r3, #1
 8016c2c:	781b      	ldrb	r3, [r3, #0]
 8016c2e:	b25a      	sxtb	r2, r3
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	785b      	ldrb	r3, [r3, #1]
 8016c38:	b25b      	sxtb	r3, r3
 8016c3a:	220f      	movs	r2, #15
 8016c3c:	4013      	ands	r3, r2
 8016c3e:	b25a      	sxtb	r2, r3
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	785b      	ldrb	r3, [r3, #1]
 8016c48:	b25b      	sxtb	r3, r3
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	091b      	lsrs	r3, r3, #4
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	b25a      	sxtb	r2, r3
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	3302      	adds	r3, #2
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	001a      	movs	r2, r3
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016c62:	683b      	ldr	r3, [r7, #0]
 8016c64:	889b      	ldrh	r3, [r3, #4]
 8016c66:	b21a      	sxth	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	3303      	adds	r3, #3
 8016c6c:	781b      	ldrb	r3, [r3, #0]
 8016c6e:	021b      	lsls	r3, r3, #8
 8016c70:	b21b      	sxth	r3, r3
 8016c72:	4313      	orrs	r3, r2
 8016c74:	b21b      	sxth	r3, r3
 8016c76:	b29a      	uxth	r2, r3
 8016c78:	683b      	ldr	r3, [r7, #0]
 8016c7a:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	791a      	ldrb	r2, [r3, #4]
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	781b      	ldrb	r3, [r3, #0]
 8016c88:	091b      	lsrs	r3, r3, #4
 8016c8a:	b2db      	uxtb	r3, r3
 8016c8c:	2207      	movs	r2, #7
 8016c8e:	4013      	ands	r3, r2
 8016c90:	b2da      	uxtb	r2, r3
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	781b      	ldrb	r3, [r3, #0]
 8016c9a:	220f      	movs	r2, #15
 8016c9c:	4013      	ands	r3, r2
 8016c9e:	b2da      	uxtb	r2, r3
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016ca4:	187b      	adds	r3, r7, r1
 8016ca6:	2205      	movs	r2, #5
 8016ca8:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8016caa:	230f      	movs	r3, #15
 8016cac:	18fb      	adds	r3, r7, r3
 8016cae:	781b      	ldrb	r3, [r3, #0]
}
 8016cb0:	0018      	movs	r0, r3
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	b004      	add	sp, #16
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cba:	b089      	sub	sp, #36	@ 0x24
 8016cbc:	af02      	add	r7, sp, #8
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
 8016cc4:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016cc6:	2317      	movs	r3, #23
 8016cc8:	18fb      	adds	r3, r7, r3
 8016cca:	68fa      	ldr	r2, [r7, #12]
 8016ccc:	7912      	ldrb	r2, [r2, #4]
 8016cce:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8016cd0:	2116      	movs	r1, #22
 8016cd2:	187b      	adds	r3, r7, r1
 8016cd4:	68fa      	ldr	r2, [r7, #12]
 8016cd6:	7992      	ldrb	r2, [r2, #6]
 8016cd8:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8016cda:	2015      	movs	r0, #21
 8016cdc:	183b      	adds	r3, r7, r0
 8016cde:	68fa      	ldr	r2, [r7, #12]
 8016ce0:	79d2      	ldrb	r2, [r2, #7]
 8016ce2:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	7a1a      	ldrb	r2, [r3, #8]
 8016ce8:	2414      	movs	r4, #20
 8016cea:	193b      	adds	r3, r7, r4
 8016cec:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	795b      	ldrb	r3, [r3, #5]
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	4053      	eors	r3, r2
 8016cf6:	b2db      	uxtb	r3, r3
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d00b      	beq.n	8016d14 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016cfc:	193b      	adds	r3, r7, r4
 8016cfe:	68fa      	ldr	r2, [r7, #12]
 8016d00:	7ad2      	ldrb	r2, [r2, #11]
 8016d02:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8016d04:	187b      	adds	r3, r7, r1
 8016d06:	68fa      	ldr	r2, [r7, #12]
 8016d08:	7a52      	ldrb	r2, [r2, #9]
 8016d0a:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8016d0c:	183b      	adds	r3, r7, r0
 8016d0e:	68fa      	ldr	r2, [r7, #12]
 8016d10:	7a92      	ldrb	r2, [r2, #10]
 8016d12:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8016d14:	2617      	movs	r6, #23
 8016d16:	19bb      	adds	r3, r7, r6
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d046      	beq.n	8016dac <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	7b18      	ldrb	r0, [r3, #12]
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	691c      	ldr	r4, [r3, #16]
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	2514      	movs	r5, #20
 8016d2a:	575d      	ldrsb	r5, [r3, r5]
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	2215      	movs	r2, #21
 8016d30:	569a      	ldrsb	r2, [r3, r2]
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	699b      	ldr	r3, [r3, #24]
 8016d36:	2116      	movs	r1, #22
 8016d38:	1879      	adds	r1, r7, r1
 8016d3a:	7809      	ldrb	r1, [r1, #0]
 8016d3c:	b249      	sxtb	r1, r1
 8016d3e:	9301      	str	r3, [sp, #4]
 8016d40:	9200      	str	r2, [sp, #0]
 8016d42:	002b      	movs	r3, r5
 8016d44:	000a      	movs	r2, r1
 8016d46:	0021      	movs	r1, r4
 8016d48:	f7ff fcee 	bl	8016728 <RegionCommonChanVerifyDr>
 8016d4c:	0003      	movs	r3, r0
 8016d4e:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016d50:	2301      	movs	r3, #1
 8016d52:	4053      	eors	r3, r2
 8016d54:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d005      	beq.n	8016d66 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 8016d5a:	19bb      	adds	r3, r7, r6
 8016d5c:	19ba      	adds	r2, r7, r6
 8016d5e:	7812      	ldrb	r2, [r2, #0]
 8016d60:	2102      	movs	r1, #2
 8016d62:	438a      	bics	r2, r1
 8016d64:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	211d      	movs	r1, #29
 8016d6a:	5659      	ldrsb	r1, [r3, r1]
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	221c      	movs	r2, #28
 8016d70:	569a      	ldrsb	r2, [r3, r2]
 8016d72:	2415      	movs	r4, #21
 8016d74:	193b      	adds	r3, r7, r4
 8016d76:	781b      	ldrb	r3, [r3, #0]
 8016d78:	b25b      	sxtb	r3, r3
 8016d7a:	0018      	movs	r0, r3
 8016d7c:	f7ff fd6d 	bl	801685a <RegionCommonValueInRange>
 8016d80:	1e03      	subs	r3, r0, #0
 8016d82:	d113      	bne.n	8016dac <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
//        	verifyParams->MaxTxPower = 20;
            // Verify if the maximum TX power is exceeded Проверьте, не превышена ли максимальная мощность TX
            if( verifyParams->MaxTxPower > txPower )
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	7f5b      	ldrb	r3, [r3, #29]
 8016d88:	b25b      	sxtb	r3, r3
 8016d8a:	193a      	adds	r2, r7, r4
 8016d8c:	7812      	ldrb	r2, [r2, #0]
 8016d8e:	b252      	sxtb	r2, r2
 8016d90:	429a      	cmp	r2, r3
 8016d92:	da04      	bge.n	8016d9e <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016d94:	193b      	adds	r3, r7, r4
 8016d96:	68fa      	ldr	r2, [r7, #12]
 8016d98:	7f52      	ldrb	r2, [r2, #29]
 8016d9a:	701a      	strb	r2, [r3, #0]
 8016d9c:	e006      	b.n	8016dac <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016d9e:	2217      	movs	r2, #23
 8016da0:	18bb      	adds	r3, r7, r2
 8016da2:	18ba      	adds	r2, r7, r2
 8016da4:	7812      	ldrb	r2, [r2, #0]
 8016da6:	2104      	movs	r1, #4
 8016da8:	438a      	bics	r2, r1
 8016daa:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016dac:	2317      	movs	r3, #23
 8016dae:	18fb      	adds	r3, r7, r3
 8016db0:	781b      	ldrb	r3, [r3, #0]
 8016db2:	2b07      	cmp	r3, #7
 8016db4:	d108      	bne.n	8016dc8 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8016db6:	2214      	movs	r2, #20
 8016db8:	18bb      	adds	r3, r7, r2
 8016dba:	781b      	ldrb	r3, [r3, #0]
 8016dbc:	b25b      	sxtb	r3, r3
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d102      	bne.n	8016dc8 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8016dc2:	18bb      	adds	r3, r7, r2
 8016dc4:	2201      	movs	r2, #1
 8016dc6:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	2216      	movs	r2, #22
 8016dcc:	18ba      	adds	r2, r7, r2
 8016dce:	7812      	ldrb	r2, [r2, #0]
 8016dd0:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2215      	movs	r2, #21
 8016dd6:	18ba      	adds	r2, r7, r2
 8016dd8:	7812      	ldrb	r2, [r2, #0]
 8016dda:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016ddc:	2314      	movs	r3, #20
 8016dde:	18fb      	adds	r3, r7, r3
 8016de0:	781a      	ldrb	r2, [r3, #0]
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	701a      	strb	r2, [r3, #0]

    return status;
 8016de6:	2317      	movs	r3, #23
 8016de8:	18fb      	adds	r3, r7, r3
 8016dea:	781b      	ldrb	r3, [r3, #0]
}
 8016dec:	0018      	movs	r0, r3
 8016dee:	46bd      	mov	sp, r7
 8016df0:	b007      	add	sp, #28
 8016df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016df4 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b082      	sub	sp, #8
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	0002      	movs	r2, r0
 8016dfc:	6039      	str	r1, [r7, #0]
 8016dfe:	1dfb      	adds	r3, r7, #7
 8016e00:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 8016e02:	6839      	ldr	r1, [r7, #0]
 8016e04:	4806      	ldr	r0, [pc, #24]	@ (8016e20 <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 8016e06:	f7e9 f987 	bl	8000118 <__udivsi3>
 8016e0a:	0003      	movs	r3, r0
 8016e0c:	001a      	movs	r2, r3
 8016e0e:	1dfb      	adds	r3, r7, #7
 8016e10:	781b      	ldrb	r3, [r3, #0]
 8016e12:	409a      	lsls	r2, r3
 8016e14:	0013      	movs	r3, r2
}
 8016e16:	0018      	movs	r0, r3
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	b002      	add	sp, #8
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	46c0      	nop			@ (mov r8, r8)
 8016e20:	3b9aca00 	.word	0x3b9aca00

08016e24 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b082      	sub	sp, #8
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	0002      	movs	r2, r0
 8016e2c:	1dfb      	adds	r3, r7, #7
 8016e2e:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 8016e30:	4b02      	ldr	r3, [pc, #8]	@ (8016e3c <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 8016e32:	0018      	movs	r0, r3
 8016e34:	46bd      	mov	sp, r7
 8016e36:	b002      	add	sp, #8
 8016e38:	bd80      	pop	{r7, pc}
 8016e3a:	46c0      	nop			@ (mov r8, r8)
 8016e3c:	00027100 	.word	0x00027100

08016e40 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8016e40:	b5b0      	push	{r4, r5, r7, lr}
 8016e42:	b084      	sub	sp, #16
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	60f8      	str	r0, [r7, #12]
 8016e48:	607a      	str	r2, [r7, #4]
 8016e4a:	603b      	str	r3, [r7, #0]
 8016e4c:	200b      	movs	r0, #11
 8016e4e:	183b      	adds	r3, r7, r0
 8016e50:	1c0a      	adds	r2, r1, #0
 8016e52:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 8016e54:	0002      	movs	r2, r0
 8016e56:	18bb      	adds	r3, r7, r2
 8016e58:	781d      	ldrb	r5, [r3, #0]
 8016e5a:	18bb      	adds	r3, r7, r2
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8016ed0 <RegionCommonComputeRxWindowParameters+0x90>)
 8016e60:	4694      	mov	ip, r2
 8016e62:	4463      	add	r3, ip
 8016e64:	005c      	lsls	r4, r3, #1
 8016e66:	6879      	ldr	r1, [r7, #4]
 8016e68:	000a      	movs	r2, r1
 8016e6a:	0152      	lsls	r2, r2, #5
 8016e6c:	1a52      	subs	r2, r2, r1
 8016e6e:	0193      	lsls	r3, r2, #6
 8016e70:	1a9b      	subs	r3, r3, r2
 8016e72:	00db      	lsls	r3, r3, #3
 8016e74:	185b      	adds	r3, r3, r1
 8016e76:	01db      	lsls	r3, r3, #7
 8016e78:	001a      	movs	r2, r3
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	18d3      	adds	r3, r2, r3
 8016e7e:	3b01      	subs	r3, #1
 8016e80:	68f9      	ldr	r1, [r7, #12]
 8016e82:	0018      	movs	r0, r3
 8016e84:	f7e9 f948 	bl	8000118 <__udivsi3>
 8016e88:	0003      	movs	r3, r0
 8016e8a:	18e2      	adds	r2, r4, r3
 8016e8c:	002b      	movs	r3, r5
 8016e8e:	4293      	cmp	r3, r2
 8016e90:	d200      	bcs.n	8016e94 <RegionCommonComputeRxWindowParameters+0x54>
 8016e92:	0013      	movs	r3, r2
 8016e94:	6a3a      	ldr	r2, [r7, #32]
 8016e96:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	009a      	lsls	r2, r3, #2
 8016e9c:	6a3b      	ldr	r3, [r7, #32]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	68f9      	ldr	r1, [r7, #12]
 8016ea2:	434b      	muls	r3, r1
 8016ea4:	085b      	lsrs	r3, r3, #1
 8016ea6:	1ad3      	subs	r3, r2, r3
 8016ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8016ed4 <RegionCommonComputeRxWindowParameters+0x94>)
 8016eaa:	4694      	mov	ip, r2
 8016eac:	4463      	add	r3, ip
 8016eae:	490a      	ldr	r1, [pc, #40]	@ (8016ed8 <RegionCommonComputeRxWindowParameters+0x98>)
 8016eb0:	0018      	movs	r0, r3
 8016eb2:	f7e9 f9bb 	bl	800022c <__divsi3>
 8016eb6:	0003      	movs	r3, r0
 8016eb8:	001a      	movs	r2, r3
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	1ad3      	subs	r3, r2, r3
 8016ebe:	3b01      	subs	r3, #1
 8016ec0:	001a      	movs	r2, r3
 8016ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ec4:	601a      	str	r2, [r3, #0]
}
 8016ec6:	46c0      	nop			@ (mov r8, r8)
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	b004      	add	sp, #16
 8016ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8016ece:	46c0      	nop			@ (mov r8, r8)
 8016ed0:	7ffffffc 	.word	0x7ffffffc
 8016ed4:	000f423f 	.word	0x000f423f
 8016ed8:	000f4240 	.word	0x000f4240

08016edc <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016edc:	b5b0      	push	{r4, r5, r7, lr}
 8016ede:	b086      	sub	sp, #24
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60b9      	str	r1, [r7, #8]
 8016ee4:	607a      	str	r2, [r7, #4]
 8016ee6:	210f      	movs	r1, #15
 8016ee8:	187b      	adds	r3, r7, r1
 8016eea:	1c02      	adds	r2, r0, #0
 8016eec:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 14;
 8016eee:	2417      	movs	r4, #23
 8016ef0:	193b      	adds	r3, r7, r4
 8016ef2:	220e      	movs	r2, #14
 8016ef4:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016ef6:	187b      	adds	r3, r7, r1
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	b25b      	sxtb	r3, r3
 8016efc:	005b      	lsls	r3, r3, #1
 8016efe:	0018      	movs	r0, r3
 8016f00:	f7e9 fddc 	bl	8000abc <__aeabi_ui2f>
 8016f04:	1c03      	adds	r3, r0, #0
 8016f06:	1c19      	adds	r1, r3, #0
 8016f08:	68b8      	ldr	r0, [r7, #8]
 8016f0a:	f7e9 fc33 	bl	8000774 <__aeabi_fsub>
 8016f0e:	1c03      	adds	r3, r0, #0
 8016f10:	6879      	ldr	r1, [r7, #4]
 8016f12:	1c18      	adds	r0, r3, #0
 8016f14:	f7e9 fc2e 	bl	8000774 <__aeabi_fsub>
 8016f18:	1c03      	adds	r3, r0, #0
 8016f1a:	1c18      	adds	r0, r3, #0
 8016f1c:	f7eb fcaa 	bl	8002874 <__aeabi_f2d>
 8016f20:	0002      	movs	r2, r0
 8016f22:	000b      	movs	r3, r1
 8016f24:	0010      	movs	r0, r2
 8016f26:	0019      	movs	r1, r3
 8016f28:	f006 f9ec 	bl	801d304 <floor>
 8016f2c:	0002      	movs	r2, r0
 8016f2e:	000b      	movs	r3, r1
 8016f30:	0025      	movs	r5, r4
 8016f32:	193c      	adds	r4, r7, r4
 8016f34:	0010      	movs	r0, r2
 8016f36:	0019      	movs	r1, r3
 8016f38:	f7eb fc0e 	bl	8002758 <__aeabi_d2iz>
 8016f3c:	0003      	movs	r3, r0
 8016f3e:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8016f40:	197b      	adds	r3, r7, r5
 8016f42:	781b      	ldrb	r3, [r3, #0]
 8016f44:	b25b      	sxtb	r3, r3
}
 8016f46:	0018      	movs	r0, r3
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	b006      	add	sp, #24
 8016f4c:	bdb0      	pop	{r4, r5, r7, pc}

08016f4e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f50:	b087      	sub	sp, #28
 8016f52:	af00      	add	r7, sp, #0
 8016f54:	60f8      	str	r0, [r7, #12]
 8016f56:	60b9      	str	r1, [r7, #8]
 8016f58:	607a      	str	r2, [r7, #4]
 8016f5a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016f5c:	2317      	movs	r3, #23
 8016f5e:	18fb      	adds	r3, r7, r3
 8016f60:	2200      	movs	r2, #0
 8016f62:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8016f64:	2316      	movs	r3, #22
 8016f66:	18fb      	adds	r3, r7, r3
 8016f68:	2200      	movs	r2, #0
 8016f6a:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016f6c:	2315      	movs	r3, #21
 8016f6e:	18fb      	adds	r3, r7, r3
 8016f70:	2200      	movs	r2, #0
 8016f72:	701a      	strb	r2, [r3, #0]
 8016f74:	2314      	movs	r3, #20
 8016f76:	18fb      	adds	r3, r7, r3
 8016f78:	2200      	movs	r2, #0
 8016f7a:	701a      	strb	r2, [r3, #0]
 8016f7c:	e0bf      	b.n	80170fe <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016f7e:	2313      	movs	r3, #19
 8016f80:	18fb      	adds	r3, r7, r3
 8016f82:	2200      	movs	r2, #0
 8016f84:	701a      	strb	r2, [r3, #0]
 8016f86:	e0a8      	b.n	80170da <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	685a      	ldr	r2, [r3, #4]
 8016f8c:	2314      	movs	r3, #20
 8016f8e:	18fb      	adds	r3, r7, r3
 8016f90:	781b      	ldrb	r3, [r3, #0]
 8016f92:	005b      	lsls	r3, r3, #1
 8016f94:	18d3      	adds	r3, r2, r3
 8016f96:	881b      	ldrh	r3, [r3, #0]
 8016f98:	001a      	movs	r2, r3
 8016f9a:	2013      	movs	r0, #19
 8016f9c:	183b      	adds	r3, r7, r0
 8016f9e:	781b      	ldrb	r3, [r3, #0]
 8016fa0:	411a      	asrs	r2, r3
 8016fa2:	0013      	movs	r3, r2
 8016fa4:	2201      	movs	r2, #1
 8016fa6:	4013      	ands	r3, r2
 8016fa8:	d100      	bne.n	8016fac <RegionCommonCountNbOfEnabledChannels+0x5e>
 8016faa:	e090      	b.n	80170ce <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	689a      	ldr	r2, [r3, #8]
 8016fb0:	2315      	movs	r3, #21
 8016fb2:	18fb      	adds	r3, r7, r3
 8016fb4:	7819      	ldrb	r1, [r3, #0]
 8016fb6:	183b      	adds	r3, r7, r0
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	18cb      	adds	r3, r1, r3
 8016fbc:	0019      	movs	r1, r3
 8016fbe:	000b      	movs	r3, r1
 8016fc0:	005b      	lsls	r3, r3, #1
 8016fc2:	185b      	adds	r3, r3, r1
 8016fc4:	009b      	lsls	r3, r3, #2
 8016fc6:	18d3      	adds	r3, r2, r3
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d100      	bne.n	8016fd0 <RegionCommonCountNbOfEnabledChannels+0x82>
 8016fce:	e079      	b.n	80170c4 <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	4053      	eors	r3, r2
 8016fd8:	b2db      	uxtb	r3, r3
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d00d      	beq.n	8016ffa <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d009      	beq.n	8016ffa <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	8a5b      	ldrh	r3, [r3, #18]
 8016fea:	001a      	movs	r2, r3
 8016fec:	183b      	adds	r3, r7, r0
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	411a      	asrs	r2, r3
 8016ff2:	0013      	movs	r3, r2
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	4013      	ands	r3, r2
 8016ff8:	d066      	beq.n	80170c8 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	785b      	ldrb	r3, [r3, #1]
 8016ffe:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	689a      	ldr	r2, [r3, #8]
 8017004:	2515      	movs	r5, #21
 8017006:	197b      	adds	r3, r7, r5
 8017008:	7819      	ldrb	r1, [r3, #0]
 801700a:	2613      	movs	r6, #19
 801700c:	19bb      	adds	r3, r7, r6
 801700e:	781b      	ldrb	r3, [r3, #0]
 8017010:	18cb      	adds	r3, r1, r3
 8017012:	0019      	movs	r1, r3
 8017014:	000b      	movs	r3, r1
 8017016:	005b      	lsls	r3, r3, #1
 8017018:	185b      	adds	r3, r3, r1
 801701a:	009b      	lsls	r3, r3, #2
 801701c:	18d3      	adds	r3, r2, r3
 801701e:	7a1b      	ldrb	r3, [r3, #8]
 8017020:	011b      	lsls	r3, r3, #4
 8017022:	b25b      	sxtb	r3, r3
 8017024:	111b      	asrs	r3, r3, #4
 8017026:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017028:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	689a      	ldr	r2, [r3, #8]
 801702e:	197b      	adds	r3, r7, r5
 8017030:	7819      	ldrb	r1, [r3, #0]
 8017032:	19bb      	adds	r3, r7, r6
 8017034:	781b      	ldrb	r3, [r3, #0]
 8017036:	18cb      	adds	r3, r1, r3
 8017038:	0019      	movs	r1, r3
 801703a:	000b      	movs	r3, r1
 801703c:	005b      	lsls	r3, r3, #1
 801703e:	185b      	adds	r3, r3, r1
 8017040:	009b      	lsls	r3, r3, #2
 8017042:	18d3      	adds	r3, r2, r3
 8017044:	7a1b      	ldrb	r3, [r3, #8]
 8017046:	b25b      	sxtb	r3, r3
 8017048:	111b      	asrs	r3, r3, #4
 801704a:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801704c:	001a      	movs	r2, r3
 801704e:	0021      	movs	r1, r4
 8017050:	f7ff fc03 	bl	801685a <RegionCommonValueInRange>
 8017054:	1e03      	subs	r3, r0, #0
 8017056:	d039      	beq.n	80170cc <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	68da      	ldr	r2, [r3, #12]
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	6899      	ldr	r1, [r3, #8]
 8017060:	197b      	adds	r3, r7, r5
 8017062:	7818      	ldrb	r0, [r3, #0]
 8017064:	19bb      	adds	r3, r7, r6
 8017066:	781b      	ldrb	r3, [r3, #0]
 8017068:	18c3      	adds	r3, r0, r3
 801706a:	0018      	movs	r0, r3
 801706c:	0003      	movs	r3, r0
 801706e:	005b      	lsls	r3, r3, #1
 8017070:	181b      	adds	r3, r3, r0
 8017072:	009b      	lsls	r3, r3, #2
 8017074:	18cb      	adds	r3, r1, r3
 8017076:	7a5b      	ldrb	r3, [r3, #9]
 8017078:	0019      	movs	r1, r3
 801707a:	000b      	movs	r3, r1
 801707c:	009b      	lsls	r3, r3, #2
 801707e:	185b      	adds	r3, r3, r1
 8017080:	009b      	lsls	r3, r3, #2
 8017082:	18d3      	adds	r3, r2, r3
 8017084:	7c1b      	ldrb	r3, [r3, #16]
 8017086:	2201      	movs	r2, #1
 8017088:	4053      	eors	r3, r2
 801708a:	b2db      	uxtb	r3, r3
 801708c:	2b00      	cmp	r3, #0
 801708e:	d006      	beq.n	801709e <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017090:	2116      	movs	r1, #22
 8017092:	187b      	adds	r3, r7, r1
 8017094:	781a      	ldrb	r2, [r3, #0]
 8017096:	187b      	adds	r3, r7, r1
 8017098:	3201      	adds	r2, #1
 801709a:	701a      	strb	r2, [r3, #0]
                    continue;
 801709c:	e017      	b.n	80170ce <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801709e:	2217      	movs	r2, #23
 80170a0:	18bb      	adds	r3, r7, r2
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	18ba      	adds	r2, r7, r2
 80170a6:	1c59      	adds	r1, r3, #1
 80170a8:	7011      	strb	r1, [r2, #0]
 80170aa:	001a      	movs	r2, r3
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	189b      	adds	r3, r3, r2
 80170b0:	2215      	movs	r2, #21
 80170b2:	18b9      	adds	r1, r7, r2
 80170b4:	2213      	movs	r2, #19
 80170b6:	18ba      	adds	r2, r7, r2
 80170b8:	7809      	ldrb	r1, [r1, #0]
 80170ba:	7812      	ldrb	r2, [r2, #0]
 80170bc:	188a      	adds	r2, r1, r2
 80170be:	b2d2      	uxtb	r2, r2
 80170c0:	701a      	strb	r2, [r3, #0]
 80170c2:	e004      	b.n	80170ce <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 80170c4:	46c0      	nop			@ (mov r8, r8)
 80170c6:	e002      	b.n	80170ce <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 80170c8:	46c0      	nop			@ (mov r8, r8)
 80170ca:	e000      	b.n	80170ce <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 80170cc:	46c0      	nop			@ (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 80170ce:	2113      	movs	r1, #19
 80170d0:	187b      	adds	r3, r7, r1
 80170d2:	781a      	ldrb	r2, [r3, #0]
 80170d4:	187b      	adds	r3, r7, r1
 80170d6:	3201      	adds	r2, #1
 80170d8:	701a      	strb	r2, [r3, #0]
 80170da:	2313      	movs	r3, #19
 80170dc:	18fb      	adds	r3, r7, r3
 80170de:	781b      	ldrb	r3, [r3, #0]
 80170e0:	2b0f      	cmp	r3, #15
 80170e2:	d800      	bhi.n	80170e6 <RegionCommonCountNbOfEnabledChannels+0x198>
 80170e4:	e750      	b.n	8016f88 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80170e6:	2215      	movs	r2, #21
 80170e8:	18bb      	adds	r3, r7, r2
 80170ea:	18ba      	adds	r2, r7, r2
 80170ec:	7812      	ldrb	r2, [r2, #0]
 80170ee:	3210      	adds	r2, #16
 80170f0:	701a      	strb	r2, [r3, #0]
 80170f2:	2114      	movs	r1, #20
 80170f4:	187b      	adds	r3, r7, r1
 80170f6:	781a      	ldrb	r2, [r3, #0]
 80170f8:	187b      	adds	r3, r7, r1
 80170fa:	3201      	adds	r2, #1
 80170fc:	701a      	strb	r2, [r3, #0]
 80170fe:	2315      	movs	r3, #21
 8017100:	18fb      	adds	r3, r7, r3
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	b29a      	uxth	r2, r3
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	8a1b      	ldrh	r3, [r3, #16]
 801710a:	429a      	cmp	r2, r3
 801710c:	d200      	bcs.n	8017110 <RegionCommonCountNbOfEnabledChannels+0x1c2>
 801710e:	e736      	b.n	8016f7e <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2217      	movs	r2, #23
 8017114:	18ba      	adds	r2, r7, r2
 8017116:	7812      	ldrb	r2, [r2, #0]
 8017118:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	2216      	movs	r2, #22
 801711e:	18ba      	adds	r2, r7, r2
 8017120:	7812      	ldrb	r2, [r2, #0]
 8017122:	701a      	strb	r2, [r3, #0]
}
 8017124:	46c0      	nop			@ (mov r8, r8)
 8017126:	46bd      	mov	sp, r7
 8017128:	b007      	add	sp, #28
 801712a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801712c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801712c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801712e:	46c6      	mov	lr, r8
 8017130:	b500      	push	{lr}
 8017132:	b08a      	sub	sp, #40	@ 0x28
 8017134:	af04      	add	r7, sp, #16
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	60b9      	str	r1, [r7, #8]
 801713a:	607a      	str	r2, [r7, #4]
 801713c:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	0018      	movs	r0, r3
 8017144:	f005 f8ca 	bl	801c2dc <UTIL_TIMER_GetElapsedTime>
 8017148:	0003      	movs	r3, r0
 801714a:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	681a      	ldr	r2, [r3, #0]
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	1ad2      	subs	r2, r2, r3
 8017154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017156:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801715a:	2201      	movs	r2, #1
 801715c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	2200      	movs	r2, #0
 8017162:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d004      	beq.n	8017176 <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017170:	697a      	ldr	r2, [r7, #20]
 8017172:	429a      	cmp	r2, r3
 8017174:	d32b      	bcc.n	80171ce <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	2200      	movs	r2, #0
 801717a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	69db      	ldr	r3, [r3, #28]
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017188:	68dc      	ldr	r4, [r3, #12]
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	7a5d      	ldrb	r5, [r3, #9]
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	7a1e      	ldrb	r6, [r3, #8]
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	7d1b      	ldrb	r3, [r3, #20]
 8017196:	4698      	mov	r8, r3
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	699b      	ldr	r3, [r3, #24]
 801719c:	9303      	str	r3, [sp, #12]
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	2204      	movs	r2, #4
 80171a2:	446a      	add	r2, sp
 80171a4:	330c      	adds	r3, #12
 80171a6:	cb03      	ldmia	r3!, {r0, r1}
 80171a8:	c203      	stmia	r2!, {r0, r1}
 80171aa:	4643      	mov	r3, r8
 80171ac:	9300      	str	r3, [sp, #0]
 80171ae:	0033      	movs	r3, r6
 80171b0:	002a      	movs	r2, r5
 80171b2:	0021      	movs	r1, r4
 80171b4:	4660      	mov	r0, ip
 80171b6:	f7ff fc61 	bl	8016a7c <RegionCommonUpdateBandTimeOff>
 80171ba:	0002      	movs	r2, r0
 80171bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171be:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	69d8      	ldr	r0, [r3, #28]
 80171c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171c6:	683a      	ldr	r2, [r7, #0]
 80171c8:	6879      	ldr	r1, [r7, #4]
 80171ca:	f7ff fec0 	bl	8016f4e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d004      	beq.n	80171e0 <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 80171d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171d8:	2200      	movs	r2, #0
 80171da:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80171dc:	2300      	movs	r3, #0
 80171de:	e006      	b.n	80171ee <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 80171e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171e2:	781b      	ldrb	r3, [r3, #0]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d001      	beq.n	80171ec <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80171e8:	230b      	movs	r3, #11
 80171ea:	e000      	b.n	80171ee <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80171ec:	230c      	movs	r3, #12
    }
}
 80171ee:	0018      	movs	r0, r3
 80171f0:	46bd      	mov	sp, r7
 80171f2:	b006      	add	sp, #24
 80171f4:	bc80      	pop	{r7}
 80171f6:	46b8      	mov	r8, r7
 80171f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080171fc <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80171fc:	b590      	push	{r4, r7, lr}
 80171fe:	b089      	sub	sp, #36	@ 0x24
 8017200:	af00      	add	r7, sp, #0
 8017202:	6039      	str	r1, [r7, #0]
 8017204:	0011      	movs	r1, r2
 8017206:	1dfb      	adds	r3, r7, #7
 8017208:	1c02      	adds	r2, r0, #0
 801720a:	701a      	strb	r2, [r3, #0]
 801720c:	1dbb      	adds	r3, r7, #6
 801720e:	1c0a      	adds	r2, r1, #0
 8017210:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8017212:	2308      	movs	r3, #8
 8017214:	18fb      	adds	r3, r7, r3
 8017216:	4a04      	ldr	r2, [pc, #16]	@ (8017228 <RegionCommonRxConfigPrint+0x2c>)
 8017218:	ca13      	ldmia	r2!, {r0, r1, r4}
 801721a:	c313      	stmia	r3!, {r0, r1, r4}
 801721c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801721e:	c313      	stmia	r3!, {r0, r1, r4}
    }
    else
    {
//        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017220:	46c0      	nop			@ (mov r8, r8)
 8017222:	46bd      	mov	sp, r7
 8017224:	b009      	add	sp, #36	@ 0x24
 8017226:	bd90      	pop	{r4, r7, pc}
 8017228:	0801e3fc 	.word	0x0801e3fc

0801722c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b086      	sub	sp, #24
 8017230:	af02      	add	r7, sp, #8
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	000a      	movs	r2, r1
 8017236:	1cfb      	adds	r3, r7, #3
 8017238:	701a      	strb	r2, [r3, #0]
	uint32_t freq_mhz = frequency / 1000000; // Конвертируем частоту в мегагерцы
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	4915      	ldr	r1, [pc, #84]	@ (8017294 <RegionCommonTxConfigPrint+0x68>)
 801723e:	0018      	movs	r0, r3
 8017240:	f7e8 ff6a 	bl	8000118 <__udivsi3>
 8017244:	0003      	movs	r3, r0
 8017246:	60fb      	str	r3, [r7, #12]
	uint32_t freq_decimal = (frequency % 1000000) / 100000; // Получаем 1-ю цифру после запятой
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	4912      	ldr	r1, [pc, #72]	@ (8017294 <RegionCommonTxConfigPrint+0x68>)
 801724c:	0018      	movs	r0, r3
 801724e:	f7e8 ffe9 	bl	8000224 <__aeabi_uidivmod>
 8017252:	000b      	movs	r3, r1
 8017254:	4910      	ldr	r1, [pc, #64]	@ (8017298 <RegionCommonTxConfigPrint+0x6c>)
 8017256:	0018      	movs	r0, r3
 8017258:	f7e8 ff5e 	bl	8000118 <__udivsi3>
 801725c:	0003      	movs	r3, r0
 801725e:	60bb      	str	r3, [r7, #8]
//	float freq_mhz2 = frequency / 1000000.0f; // Конвертируем частоту в мегагерцы
//    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
//    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n » Отправка на частоте %d.%d МГц по каналу скорости передачи DR%d\r\n", freq_mhz, freq_decimal, dr );
    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n »  Передача данных на частоте: %d.%d МГц", freq_mhz, freq_decimal);
 8017260:	4a0e      	ldr	r2, [pc, #56]	@ (801729c <RegionCommonTxConfigPrint+0x70>)
 8017262:	68bb      	ldr	r3, [r7, #8]
 8017264:	9301      	str	r3, [sp, #4]
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	9300      	str	r3, [sp, #0]
 801726a:	0013      	movs	r3, r2
 801726c:	2200      	movs	r2, #0
 801726e:	2100      	movs	r1, #0
 8017270:	2002      	movs	r0, #2
 8017272:	f003 ffb3 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n     Канал скорости передачи: DR%d\r\n",  dr );
 8017276:	1cfb      	adds	r3, r7, #3
 8017278:	781b      	ldrb	r3, [r3, #0]
 801727a:	b25b      	sxtb	r3, r3
 801727c:	4a08      	ldr	r2, [pc, #32]	@ (80172a0 <RegionCommonTxConfigPrint+0x74>)
 801727e:	9300      	str	r3, [sp, #0]
 8017280:	0013      	movs	r3, r2
 8017282:	2200      	movs	r2, #0
 8017284:	2100      	movs	r1, #0
 8017286:	2002      	movs	r0, #2
 8017288:	f003 ffa8 	bl	801b1dc <UTIL_ADV_TRACE_COND_FSend>
}
 801728c:	46c0      	nop			@ (mov r8, r8)
 801728e:	46bd      	mov	sp, r7
 8017290:	b004      	add	sp, #16
 8017292:	bd80      	pop	{r7, pc}
 8017294:	000f4240 	.word	0x000f4240
 8017298:	000186a0 	.word	0x000186a0
 801729c:	0801e414 	.word	0x0801e414
 80172a0:	0801e45c 	.word	0x0801e45c

080172a4 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b084      	sub	sp, #16
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	0002      	movs	r2, r0
 80172ac:	1dfb      	adds	r3, r7, #7
 80172ae:	701a      	strb	r2, [r3, #0]
 80172b0:	1dbb      	adds	r3, r7, #6
 80172b2:	1c0a      	adds	r2, r1, #0
 80172b4:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 80172b6:	210f      	movs	r1, #15
 80172b8:	187b      	adds	r3, r7, r1
 80172ba:	2200      	movs	r2, #0
 80172bc:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 80172be:	1dfa      	adds	r2, r7, #7
 80172c0:	1dbb      	adds	r3, r7, #6
 80172c2:	7812      	ldrb	r2, [r2, #0]
 80172c4:	b252      	sxtb	r2, r2
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	b25b      	sxtb	r3, r3
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d104      	bne.n	80172d8 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 80172ce:	187b      	adds	r3, r7, r1
 80172d0:	1dba      	adds	r2, r7, #6
 80172d2:	7812      	ldrb	r2, [r2, #0]
 80172d4:	701a      	strb	r2, [r3, #0]
 80172d6:	e005      	b.n	80172e4 <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 80172d8:	1dfb      	adds	r3, r7, #7
 80172da:	781a      	ldrb	r2, [r3, #0]
 80172dc:	230f      	movs	r3, #15
 80172de:	18fb      	adds	r3, r7, r3
 80172e0:	3a01      	subs	r2, #1
 80172e2:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80172e4:	230f      	movs	r3, #15
 80172e6:	18fb      	adds	r3, r7, r3
 80172e8:	781b      	ldrb	r3, [r3, #0]
 80172ea:	b25b      	sxtb	r3, r3
}
 80172ec:	0018      	movs	r0, r3
 80172ee:	46bd      	mov	sp, r7
 80172f0:	b004      	add	sp, #16
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b082      	sub	sp, #8
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 80172fc:	4b09      	ldr	r3, [pc, #36]	@ (8017324 <GetBandwidth+0x30>)
 80172fe:	687a      	ldr	r2, [r7, #4]
 8017300:	0092      	lsls	r2, r2, #2
 8017302:	58d3      	ldr	r3, [r2, r3]
 8017304:	4a08      	ldr	r2, [pc, #32]	@ (8017328 <GetBandwidth+0x34>)
 8017306:	4293      	cmp	r3, r2
 8017308:	d004      	beq.n	8017314 <GetBandwidth+0x20>
 801730a:	4a08      	ldr	r2, [pc, #32]	@ (801732c <GetBandwidth+0x38>)
 801730c:	4293      	cmp	r3, r2
 801730e:	d003      	beq.n	8017318 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8017310:	2300      	movs	r3, #0
 8017312:	e002      	b.n	801731a <GetBandwidth+0x26>
        case 250000:
            return 1;
 8017314:	2301      	movs	r3, #1
 8017316:	e000      	b.n	801731a <GetBandwidth+0x26>
        case 500000:
            return 2;
 8017318:	2302      	movs	r3, #2
    }
}
 801731a:	0018      	movs	r0, r3
 801731c:	46bd      	mov	sp, r7
 801731e:	b002      	add	sp, #8
 8017320:	bd80      	pop	{r7, pc}
 8017322:	46c0      	nop			@ (mov r8, r8)
 8017324:	0801e4b0 	.word	0x0801e4b0
 8017328:	0003d090 	.word	0x0003d090
 801732c:	0007a120 	.word	0x0007a120

08017330 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017330:	b590      	push	{r4, r7, lr}
 8017332:	b085      	sub	sp, #20
 8017334:	af00      	add	r7, sp, #0
 8017336:	0004      	movs	r4, r0
 8017338:	0008      	movs	r0, r1
 801733a:	0011      	movs	r1, r2
 801733c:	603b      	str	r3, [r7, #0]
 801733e:	1dfb      	adds	r3, r7, #7
 8017340:	1c22      	adds	r2, r4, #0
 8017342:	701a      	strb	r2, [r3, #0]
 8017344:	1dbb      	adds	r3, r7, #6
 8017346:	1c02      	adds	r2, r0, #0
 8017348:	701a      	strb	r2, [r3, #0]
 801734a:	1d7b      	adds	r3, r7, #5
 801734c:	1c0a      	adds	r2, r1, #0
 801734e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017350:	210f      	movs	r1, #15
 8017352:	187b      	adds	r3, r7, r1
 8017354:	1dfa      	adds	r2, r7, #7
 8017356:	7812      	ldrb	r2, [r2, #0]
 8017358:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 801735a:	187a      	adds	r2, r7, r1
 801735c:	1dbb      	adds	r3, r7, #6
 801735e:	1df9      	adds	r1, r7, #7
 8017360:	780c      	ldrb	r4, [r1, #0]
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	b258      	sxtb	r0, r3
 8017366:	b261      	sxtb	r1, r4
 8017368:	4288      	cmp	r0, r1
 801736a:	da00      	bge.n	801736e <LimitTxPower+0x3e>
 801736c:	1c23      	adds	r3, r4, #0
 801736e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017370:	230f      	movs	r3, #15
 8017372:	18fb      	adds	r3, r7, r3
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	b25b      	sxtb	r3, r3
}
 8017378:	0018      	movs	r0, r3
 801737a:	46bd      	mov	sp, r7
 801737c:	b005      	add	sp, #20
 801737e:	bd90      	pop	{r4, r7, pc}

08017380 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b082      	sub	sp, #8
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801738a:	4b2e      	ldr	r3, [pc, #184]	@ (8017444 <VerifyRfFreq+0xc4>)
 801738c:	6a1b      	ldr	r3, [r3, #32]
 801738e:	687a      	ldr	r2, [r7, #4]
 8017390:	0010      	movs	r0, r2
 8017392:	4798      	blx	r3
 8017394:	0003      	movs	r3, r0
 8017396:	001a      	movs	r2, r3
 8017398:	2301      	movs	r3, #1
 801739a:	4053      	eors	r3, r2
 801739c:	b2db      	uxtb	r3, r3
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d001      	beq.n	80173a6 <VerifyRfFreq+0x26>
    {
        return false;
 80173a2:	2300      	movs	r3, #0
 80173a4:	e04a      	b.n	801743c <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	4a27      	ldr	r2, [pc, #156]	@ (8017448 <VerifyRfFreq+0xc8>)
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d907      	bls.n	80173be <VerifyRfFreq+0x3e>
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	4a26      	ldr	r2, [pc, #152]	@ (801744c <VerifyRfFreq+0xcc>)
 80173b2:	4293      	cmp	r3, r2
 80173b4:	d803      	bhi.n	80173be <VerifyRfFreq+0x3e>
    {
        *band = 2;
 80173b6:	683b      	ldr	r3, [r7, #0]
 80173b8:	2202      	movs	r2, #2
 80173ba:	701a      	strb	r2, [r3, #0]
 80173bc:	e03d      	b.n	801743a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	4a22      	ldr	r2, [pc, #136]	@ (801744c <VerifyRfFreq+0xcc>)
 80173c2:	4293      	cmp	r3, r2
 80173c4:	d907      	bls.n	80173d6 <VerifyRfFreq+0x56>
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	4a21      	ldr	r2, [pc, #132]	@ (8017450 <VerifyRfFreq+0xd0>)
 80173ca:	4293      	cmp	r3, r2
 80173cc:	d803      	bhi.n	80173d6 <VerifyRfFreq+0x56>
    {
        *band = 0;
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	2200      	movs	r2, #0
 80173d2:	701a      	strb	r2, [r3, #0]
 80173d4:	e031      	b.n	801743a <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	4a1d      	ldr	r2, [pc, #116]	@ (8017450 <VerifyRfFreq+0xd0>)
 80173da:	4293      	cmp	r3, r2
 80173dc:	d907      	bls.n	80173ee <VerifyRfFreq+0x6e>
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	4a1c      	ldr	r2, [pc, #112]	@ (8017454 <VerifyRfFreq+0xd4>)
 80173e2:	4293      	cmp	r3, r2
 80173e4:	d803      	bhi.n	80173ee <VerifyRfFreq+0x6e>
    {
        *band = 1;
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	2201      	movs	r2, #1
 80173ea:	701a      	strb	r2, [r3, #0]
 80173ec:	e025      	b.n	801743a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	4a19      	ldr	r2, [pc, #100]	@ (8017458 <VerifyRfFreq+0xd8>)
 80173f2:	4293      	cmp	r3, r2
 80173f4:	d907      	bls.n	8017406 <VerifyRfFreq+0x86>
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	4a18      	ldr	r2, [pc, #96]	@ (801745c <VerifyRfFreq+0xdc>)
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d803      	bhi.n	8017406 <VerifyRfFreq+0x86>
    {
        *band = 5;
 80173fe:	683b      	ldr	r3, [r7, #0]
 8017400:	2205      	movs	r2, #5
 8017402:	701a      	strb	r2, [r3, #0]
 8017404:	e019      	b.n	801743a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4a15      	ldr	r2, [pc, #84]	@ (8017460 <VerifyRfFreq+0xe0>)
 801740a:	4293      	cmp	r3, r2
 801740c:	d907      	bls.n	801741e <VerifyRfFreq+0x9e>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	4a14      	ldr	r2, [pc, #80]	@ (8017464 <VerifyRfFreq+0xe4>)
 8017412:	4293      	cmp	r3, r2
 8017414:	d803      	bhi.n	801741e <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	2203      	movs	r2, #3
 801741a:	701a      	strb	r2, [r3, #0]
 801741c:	e00d      	b.n	801743a <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	4a11      	ldr	r2, [pc, #68]	@ (8017468 <VerifyRfFreq+0xe8>)
 8017422:	4293      	cmp	r3, r2
 8017424:	d907      	bls.n	8017436 <VerifyRfFreq+0xb6>
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	4a10      	ldr	r2, [pc, #64]	@ (801746c <VerifyRfFreq+0xec>)
 801742a:	4293      	cmp	r3, r2
 801742c:	d803      	bhi.n	8017436 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	2204      	movs	r2, #4
 8017432:	701a      	strb	r2, [r3, #0]
 8017434:	e001      	b.n	801743a <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8017436:	2300      	movs	r3, #0
 8017438:	e000      	b.n	801743c <VerifyRfFreq+0xbc>
    }
    return true;
 801743a:	2301      	movs	r3, #1
}
 801743c:	0018      	movs	r0, r3
 801743e:	46bd      	mov	sp, r7
 8017440:	b002      	add	sp, #8
 8017442:	bd80      	pop	{r7, pc}
 8017444:	0801e62c 	.word	0x0801e62c
 8017448:	337055bf 	.word	0x337055bf
 801744c:	338eda3f 	.word	0x338eda3f
 8017450:	33bca100 	.word	0x33bca100
 8017454:	33c5c8c0 	.word	0x33c5c8c0
 8017458:	33c74f5f 	.word	0x33c74f5f
 801745c:	33cef080 	.word	0x33cef080
 8017460:	33d1fdbf 	.word	0x33d1fdbf
 8017464:	33d5ce50 	.word	0x33d5ce50
 8017468:	33d6919f 	.word	0x33d6919f
 801746c:	33db2580 	.word	0x33db2580

08017470 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017470:	b5b0      	push	{r4, r5, r7, lr}
 8017472:	b08a      	sub	sp, #40	@ 0x28
 8017474:	af04      	add	r7, sp, #16
 8017476:	0002      	movs	r2, r0
 8017478:	1dfb      	adds	r3, r7, #7
 801747a:	701a      	strb	r2, [r3, #0]
 801747c:	1d3b      	adds	r3, r7, #4
 801747e:	1c0a      	adds	r2, r1, #0
 8017480:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 8017482:	1dfb      	adds	r3, r7, #7
 8017484:	781b      	ldrb	r3, [r3, #0]
 8017486:	b25b      	sxtb	r3, r3
 8017488:	4a26      	ldr	r2, [pc, #152]	@ (8017524 <GetTimeOnAir+0xb4>)
 801748a:	5cd2      	ldrb	r2, [r2, r3]
 801748c:	2513      	movs	r5, #19
 801748e:	197b      	adds	r3, r7, r5
 8017490:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 8017492:	1dfb      	adds	r3, r7, #7
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	b25b      	sxtb	r3, r3
 8017498:	0018      	movs	r0, r3
 801749a:	f7ff ff2b 	bl	80172f4 <GetBandwidth>
 801749e:	0003      	movs	r3, r0
 80174a0:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80174a2:	2300      	movs	r3, #0
 80174a4:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80174a6:	1dfb      	adds	r3, r7, #7
 80174a8:	781b      	ldrb	r3, [r3, #0]
 80174aa:	b25b      	sxtb	r3, r3
 80174ac:	2b07      	cmp	r3, #7
 80174ae:	d11d      	bne.n	80174ec <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80174b0:	4b1d      	ldr	r3, [pc, #116]	@ (8017528 <GetTimeOnAir+0xb8>)
 80174b2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80174b4:	197b      	adds	r3, r7, r5
 80174b6:	2200      	movs	r2, #0
 80174b8:	569a      	ldrsb	r2, [r3, r2]
 80174ba:	0013      	movs	r3, r2
 80174bc:	015b      	lsls	r3, r3, #5
 80174be:	1a9b      	subs	r3, r3, r2
 80174c0:	009b      	lsls	r3, r3, #2
 80174c2:	189b      	adds	r3, r3, r2
 80174c4:	00db      	lsls	r3, r3, #3
 80174c6:	0018      	movs	r0, r3
 80174c8:	1d3b      	adds	r3, r7, #4
 80174ca:	881b      	ldrh	r3, [r3, #0]
 80174cc:	b2db      	uxtb	r3, r3
 80174ce:	68f9      	ldr	r1, [r7, #12]
 80174d0:	2201      	movs	r2, #1
 80174d2:	9203      	str	r2, [sp, #12]
 80174d4:	9302      	str	r3, [sp, #8]
 80174d6:	2300      	movs	r3, #0
 80174d8:	9301      	str	r3, [sp, #4]
 80174da:	2305      	movs	r3, #5
 80174dc:	9300      	str	r3, [sp, #0]
 80174de:	2300      	movs	r3, #0
 80174e0:	0002      	movs	r2, r0
 80174e2:	2000      	movs	r0, #0
 80174e4:	47a0      	blx	r4
 80174e6:	0003      	movs	r3, r0
 80174e8:	617b      	str	r3, [r7, #20]
 80174ea:	e015      	b.n	8017518 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80174ec:	4b0e      	ldr	r3, [pc, #56]	@ (8017528 <GetTimeOnAir+0xb8>)
 80174ee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80174f0:	2313      	movs	r3, #19
 80174f2:	18fb      	adds	r3, r7, r3
 80174f4:	2200      	movs	r2, #0
 80174f6:	569a      	ldrsb	r2, [r3, r2]
 80174f8:	1d3b      	adds	r3, r7, #4
 80174fa:	881b      	ldrh	r3, [r3, #0]
 80174fc:	b2db      	uxtb	r3, r3
 80174fe:	68f9      	ldr	r1, [r7, #12]
 8017500:	2001      	movs	r0, #1
 8017502:	9003      	str	r0, [sp, #12]
 8017504:	9302      	str	r3, [sp, #8]
 8017506:	2300      	movs	r3, #0
 8017508:	9301      	str	r3, [sp, #4]
 801750a:	2308      	movs	r3, #8
 801750c:	9300      	str	r3, [sp, #0]
 801750e:	2301      	movs	r3, #1
 8017510:	2001      	movs	r0, #1
 8017512:	47a0      	blx	r4
 8017514:	0003      	movs	r3, r0
 8017516:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 8017518:	697b      	ldr	r3, [r7, #20]
}
 801751a:	0018      	movs	r0, r3
 801751c:	46bd      	mov	sp, r7
 801751e:	b006      	add	sp, #24
 8017520:	bdb0      	pop	{r4, r5, r7, pc}
 8017522:	46c0      	nop			@ (mov r8, r8)
 8017524:	0801e4a8 	.word	0x0801e4a8
 8017528:	0801e62c 	.word	0x0801e62c

0801752c <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b084      	sub	sp, #16
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017534:	2308      	movs	r3, #8
 8017536:	18fb      	adds	r3, r7, r3
 8017538:	2200      	movs	r2, #0
 801753a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	2b39      	cmp	r3, #57	@ 0x39
 8017542:	d900      	bls.n	8017546 <RegionEU868GetPhyParam+0x1a>
 8017544:	e0e9      	b.n	801771a <RegionEU868GetPhyParam+0x1ee>
 8017546:	009a      	lsls	r2, r3, #2
 8017548:	4b7b      	ldr	r3, [pc, #492]	@ (8017738 <RegionEU868GetPhyParam+0x20c>)
 801754a:	18d3      	adds	r3, r2, r3
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017550:	2308      	movs	r3, #8
 8017552:	18fb      	adds	r3, r7, r3
 8017554:	2200      	movs	r2, #0
 8017556:	601a      	str	r2, [r3, #0]
            break;
 8017558:	e0e0      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801755a:	2308      	movs	r3, #8
 801755c:	18fb      	adds	r3, r7, r3
 801755e:	2200      	movs	r2, #0
 8017560:	601a      	str	r2, [r3, #0]
            break;
 8017562:	e0db      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017564:	2308      	movs	r3, #8
 8017566:	18fb      	adds	r3, r7, r3
 8017568:	2200      	movs	r2, #0
 801756a:	601a      	str	r2, [r3, #0]
            break;
 801756c:	e0d6      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	785b      	ldrb	r3, [r3, #1]
 8017572:	b25b      	sxtb	r3, r3
 8017574:	2100      	movs	r1, #0
 8017576:	0018      	movs	r0, r3
 8017578:	f7ff fe94 	bl	80172a4 <GetNextLowerTxDr>
 801757c:	0003      	movs	r3, r0
 801757e:	001a      	movs	r2, r3
 8017580:	2308      	movs	r3, #8
 8017582:	18fb      	adds	r3, r7, r3
 8017584:	601a      	str	r2, [r3, #0]
            break;
 8017586:	e0c9      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017588:	2308      	movs	r3, #8
 801758a:	18fb      	adds	r3, r7, r3
 801758c:	2200      	movs	r2, #0
 801758e:	601a      	str	r2, [r3, #0]
            break;
 8017590:	e0c4      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017592:	2308      	movs	r3, #8
 8017594:	18fb      	adds	r3, r7, r3
 8017596:	2200      	movs	r2, #0
 8017598:	601a      	str	r2, [r3, #0]
            break;
 801759a:	e0bf      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 801759c:	2308      	movs	r3, #8
 801759e:	18fb      	adds	r3, r7, r3
 80175a0:	2240      	movs	r2, #64	@ 0x40
 80175a2:	601a      	str	r2, [r3, #0]
            break;
 80175a4:	e0ba      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 80175a6:	2308      	movs	r3, #8
 80175a8:	18fb      	adds	r3, r7, r3
 80175aa:	2220      	movs	r2, #32
 80175ac:	601a      	str	r2, [r3, #0]
            break;
 80175ae:	e0b5      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	785b      	ldrb	r3, [r3, #1]
 80175b4:	b25b      	sxtb	r3, r3
 80175b6:	001a      	movs	r2, r3
 80175b8:	4b60      	ldr	r3, [pc, #384]	@ (801773c <RegionEU868GetPhyParam+0x210>)
 80175ba:	5c9b      	ldrb	r3, [r3, r2]
 80175bc:	001a      	movs	r2, r3
 80175be:	2308      	movs	r3, #8
 80175c0:	18fb      	adds	r3, r7, r3
 80175c2:	601a      	str	r2, [r3, #0]
            break;
 80175c4:	e0aa      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	785b      	ldrb	r3, [r3, #1]
 80175ca:	b25b      	sxtb	r3, r3
 80175cc:	001a      	movs	r2, r3
 80175ce:	4b5c      	ldr	r3, [pc, #368]	@ (8017740 <RegionEU868GetPhyParam+0x214>)
 80175d0:	5c9b      	ldrb	r3, [r3, r2]
 80175d2:	001a      	movs	r2, r3
 80175d4:	2308      	movs	r3, #8
 80175d6:	18fb      	adds	r3, r7, r3
 80175d8:	601a      	str	r2, [r3, #0]
            break;
 80175da:	e09f      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80175dc:	2308      	movs	r3, #8
 80175de:	18fb      	adds	r3, r7, r3
 80175e0:	2201      	movs	r2, #1
 80175e2:	601a      	str	r2, [r3, #0]
            break;
 80175e4:	e09a      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80175e6:	2308      	movs	r3, #8
 80175e8:	18fb      	adds	r3, r7, r3
 80175ea:	4a56      	ldr	r2, [pc, #344]	@ (8017744 <RegionEU868GetPhyParam+0x218>)
 80175ec:	601a      	str	r2, [r3, #0]
            break;
 80175ee:	e095      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 80175f0:	2308      	movs	r3, #8
 80175f2:	18fb      	adds	r3, r7, r3
 80175f4:	22fa      	movs	r2, #250	@ 0xfa
 80175f6:	0092      	lsls	r2, r2, #2
 80175f8:	601a      	str	r2, [r3, #0]
            break;
 80175fa:	e08f      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 80175fc:	2308      	movs	r3, #8
 80175fe:	18fb      	adds	r3, r7, r3
 8017600:	22fa      	movs	r2, #250	@ 0xfa
 8017602:	00d2      	lsls	r2, r2, #3
 8017604:	601a      	str	r2, [r3, #0]
            break;
 8017606:	e089      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8017608:	2308      	movs	r3, #8
 801760a:	18fb      	adds	r3, r7, r3
 801760c:	4a4e      	ldr	r2, [pc, #312]	@ (8017748 <RegionEU868GetPhyParam+0x21c>)
 801760e:	601a      	str	r2, [r3, #0]
            break;
 8017610:	e084      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8017612:	2308      	movs	r3, #8
 8017614:	18fb      	adds	r3, r7, r3
 8017616:	4a4d      	ldr	r2, [pc, #308]	@ (801774c <RegionEU868GetPhyParam+0x220>)
 8017618:	601a      	str	r2, [r3, #0]
            break;
 801761a:	e07f      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 801761c:	2308      	movs	r3, #8
 801761e:	18fb      	adds	r3, r7, r3
 8017620:	2280      	movs	r2, #128	@ 0x80
 8017622:	01d2      	lsls	r2, r2, #7
 8017624:	601a      	str	r2, [r3, #0]
            break;
 8017626:	e079      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8017628:	23fa      	movs	r3, #250	@ 0xfa
 801762a:	009b      	lsls	r3, r3, #2
 801762c:	4a48      	ldr	r2, [pc, #288]	@ (8017750 <RegionEU868GetPhyParam+0x224>)
 801762e:	0019      	movs	r1, r3
 8017630:	0010      	movs	r0, r2
 8017632:	f001 f983 	bl	801893c <randr>
 8017636:	0003      	movs	r3, r0
 8017638:	22fa      	movs	r2, #250	@ 0xfa
 801763a:	00d2      	lsls	r2, r2, #3
 801763c:	4694      	mov	ip, r2
 801763e:	4463      	add	r3, ip
 8017640:	001a      	movs	r2, r3
 8017642:	2308      	movs	r3, #8
 8017644:	18fb      	adds	r3, r7, r3
 8017646:	601a      	str	r2, [r3, #0]
            break;
 8017648:	e068      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 801764a:	2308      	movs	r3, #8
 801764c:	18fb      	adds	r3, r7, r3
 801764e:	2200      	movs	r2, #0
 8017650:	601a      	str	r2, [r3, #0]
            break;
 8017652:	e063      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017654:	2308      	movs	r3, #8
 8017656:	18fb      	adds	r3, r7, r3
 8017658:	4a3e      	ldr	r2, [pc, #248]	@ (8017754 <RegionEU868GetPhyParam+0x228>)
 801765a:	601a      	str	r2, [r3, #0]
            break;
 801765c:	e05e      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801765e:	2308      	movs	r3, #8
 8017660:	18fb      	adds	r3, r7, r3
 8017662:	2200      	movs	r2, #0
 8017664:	601a      	str	r2, [r3, #0]
            break;
 8017666:	e059      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8017668:	2308      	movs	r3, #8
 801766a:	18fb      	adds	r3, r7, r3
 801766c:	4a3a      	ldr	r2, [pc, #232]	@ (8017758 <RegionEU868GetPhyParam+0x22c>)
 801766e:	601a      	str	r2, [r3, #0]
            break;
 8017670:	e054      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8017672:	2308      	movs	r3, #8
 8017674:	18fb      	adds	r3, r7, r3
 8017676:	4a39      	ldr	r2, [pc, #228]	@ (801775c <RegionEU868GetPhyParam+0x230>)
 8017678:	601a      	str	r2, [r3, #0]
            break;
 801767a:	e04f      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801767c:	2308      	movs	r3, #8
 801767e:	18fb      	adds	r3, r7, r3
 8017680:	2210      	movs	r2, #16
 8017682:	601a      	str	r2, [r3, #0]
            break;
 8017684:	e04a      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8017686:	2308      	movs	r3, #8
 8017688:	18fb      	adds	r3, r7, r3
 801768a:	4a35      	ldr	r2, [pc, #212]	@ (8017760 <RegionEU868GetPhyParam+0x234>)
 801768c:	601a      	str	r2, [r3, #0]
            break;
 801768e:	e045      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8017690:	2308      	movs	r3, #8
 8017692:	18fb      	adds	r3, r7, r3
 8017694:	2200      	movs	r2, #0
 8017696:	601a      	str	r2, [r3, #0]
            break;
 8017698:	e040      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801769a:	2308      	movs	r3, #8
 801769c:	18fb      	adds	r3, r7, r3
 801769e:	2283      	movs	r2, #131	@ 0x83
 80176a0:	05d2      	lsls	r2, r2, #23
 80176a2:	601a      	str	r2, [r3, #0]
            break;
 80176a4:	e03a      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80176a6:	2308      	movs	r3, #8
 80176a8:	18fb      	adds	r3, r7, r3
 80176aa:	4a2e      	ldr	r2, [pc, #184]	@ (8017764 <RegionEU868GetPhyParam+0x238>)
 80176ac:	601a      	str	r2, [r3, #0]
            break;
 80176ae:	e035      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80176b0:	2308      	movs	r3, #8
 80176b2:	18fb      	adds	r3, r7, r3
 80176b4:	4a27      	ldr	r2, [pc, #156]	@ (8017754 <RegionEU868GetPhyParam+0x228>)
 80176b6:	601a      	str	r2, [r3, #0]
            break;
 80176b8:	e030      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80176ba:	2108      	movs	r1, #8
 80176bc:	187b      	adds	r3, r7, r1
 80176be:	2211      	movs	r2, #17
 80176c0:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80176c2:	187b      	adds	r3, r7, r1
 80176c4:	2202      	movs	r2, #2
 80176c6:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80176c8:	187b      	adds	r3, r7, r1
 80176ca:	2200      	movs	r2, #0
 80176cc:	709a      	strb	r2, [r3, #2]
            break;
 80176ce:	e025      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80176d0:	2308      	movs	r3, #8
 80176d2:	18fb      	adds	r3, r7, r3
 80176d4:	2203      	movs	r2, #3
 80176d6:	601a      	str	r2, [r3, #0]
            break;
 80176d8:	e020      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80176da:	2308      	movs	r3, #8
 80176dc:	18fb      	adds	r3, r7, r3
 80176de:	4a1d      	ldr	r2, [pc, #116]	@ (8017754 <RegionEU868GetPhyParam+0x228>)
 80176e0:	601a      	str	r2, [r3, #0]
            break;
 80176e2:	e01b      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80176e4:	2308      	movs	r3, #8
 80176e6:	18fb      	adds	r3, r7, r3
 80176e8:	2203      	movs	r2, #3
 80176ea:	601a      	str	r2, [r3, #0]
            break;
 80176ec:	e016      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	785b      	ldrb	r3, [r3, #1]
 80176f2:	b25b      	sxtb	r3, r3
 80176f4:	001a      	movs	r2, r3
 80176f6:	4b1c      	ldr	r3, [pc, #112]	@ (8017768 <RegionEU868GetPhyParam+0x23c>)
 80176f8:	5c9b      	ldrb	r3, [r3, r2]
 80176fa:	001a      	movs	r2, r3
 80176fc:	2308      	movs	r3, #8
 80176fe:	18fb      	adds	r3, r7, r3
 8017700:	601a      	str	r2, [r3, #0]
            break;
 8017702:	e00b      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	785b      	ldrb	r3, [r3, #1]
 8017708:	b25b      	sxtb	r3, r3
 801770a:	0018      	movs	r0, r3
 801770c:	f7ff fdf2 	bl	80172f4 <GetBandwidth>
 8017710:	0002      	movs	r2, r0
 8017712:	2308      	movs	r3, #8
 8017714:	18fb      	adds	r3, r7, r3
 8017716:	601a      	str	r2, [r3, #0]
            break;
 8017718:	e000      	b.n	801771c <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 801771a:	46c0      	nop			@ (mov r8, r8)
        }
    }

    return phyParam;
 801771c:	210c      	movs	r1, #12
 801771e:	187b      	adds	r3, r7, r1
 8017720:	2208      	movs	r2, #8
 8017722:	18ba      	adds	r2, r7, r2
 8017724:	6812      	ldr	r2, [r2, #0]
 8017726:	601a      	str	r2, [r3, #0]
 8017728:	187b      	adds	r3, r7, r1
 801772a:	681a      	ldr	r2, [r3, #0]
 801772c:	0013      	movs	r3, r2
}
 801772e:	0018      	movs	r0, r3
 8017730:	46bd      	mov	sp, r7
 8017732:	b004      	add	sp, #16
 8017734:	bd80      	pop	{r7, pc}
 8017736:	46c0      	nop			@ (mov r8, r8)
 8017738:	0801e4e0 	.word	0x0801e4e0
 801773c:	0801e4d0 	.word	0x0801e4d0
 8017740:	0801e4d8 	.word	0x0801e4d8
 8017744:	00000bb8 	.word	0x00000bb8
 8017748:	00001388 	.word	0x00001388
 801774c:	00001770 	.word	0x00001770
 8017750:	fffffc18 	.word	0xfffffc18
 8017754:	33d3e608 	.word	0x33d3e608
 8017758:	20001430 	.word	0x20001430
 801775c:	20001432 	.word	0x20001432
 8017760:	200012f8 	.word	0x200012f8
 8017764:	4009999a 	.word	0x4009999a
 8017768:	0801e4a8 	.word	0x0801e4a8

0801776c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801776c:	b5b0      	push	{r4, r5, r7, lr}
 801776e:	b084      	sub	sp, #16
 8017770:	af02      	add	r7, sp, #8
 8017772:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	0019      	movs	r1, r3
 801777a:	4a11      	ldr	r2, [pc, #68]	@ (80177c0 <RegionEU868SetBandTxDone+0x54>)
 801777c:	000b      	movs	r3, r1
 801777e:	005b      	lsls	r3, r3, #1
 8017780:	185b      	adds	r3, r3, r1
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	18d3      	adds	r3, r2, r3
 8017786:	3309      	adds	r3, #9
 8017788:	781b      	ldrb	r3, [r3, #0]
 801778a:	001a      	movs	r2, r3
 801778c:	0013      	movs	r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	189b      	adds	r3, r3, r2
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	33c0      	adds	r3, #192	@ 0xc0
 8017796:	001a      	movs	r2, r3
 8017798:	4b09      	ldr	r3, [pc, #36]	@ (80177c0 <RegionEU868SetBandTxDone+0x54>)
 801779a:	18d0      	adds	r0, r2, r3
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	689c      	ldr	r4, [r3, #8]
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	785d      	ldrb	r5, [r3, #1]
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	466a      	mov	r2, sp
 80177a8:	6919      	ldr	r1, [r3, #16]
 80177aa:	6011      	str	r1, [r2, #0]
 80177ac:	68db      	ldr	r3, [r3, #12]
 80177ae:	002a      	movs	r2, r5
 80177b0:	0021      	movs	r1, r4
 80177b2:	f7ff f92a 	bl	8016a0a <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 80177b6:	46c0      	nop			@ (mov r8, r8)
 80177b8:	46bd      	mov	sp, r7
 80177ba:	b002      	add	sp, #8
 80177bc:	bdb0      	pop	{r4, r5, r7, pc}
 80177be:	46c0      	nop			@ (mov r8, r8)
 80177c0:	200012f8 	.word	0x200012f8

080177c4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80177c4:	b590      	push	{r4, r7, lr}
 80177c6:	b0ab      	sub	sp, #172	@ 0xac
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 80177cc:	2430      	movs	r4, #48	@ 0x30
 80177ce:	193b      	adds	r3, r7, r4
 80177d0:	0018      	movs	r0, r3
 80177d2:	2378      	movs	r3, #120	@ 0x78
 80177d4:	001a      	movs	r2, r3
 80177d6:	2100      	movs	r1, #0
 80177d8:	f005 fd5d 	bl	801d296 <memset>
 80177dc:	0021      	movs	r1, r4
 80177de:	187b      	adds	r3, r7, r1
 80177e0:	2264      	movs	r2, #100	@ 0x64
 80177e2:	801a      	strh	r2, [r3, #0]
 80177e4:	187b      	adds	r3, r7, r1
 80177e6:	2264      	movs	r2, #100	@ 0x64
 80177e8:	829a      	strh	r2, [r3, #20]
 80177ea:	187b      	adds	r3, r7, r1
 80177ec:	22fa      	movs	r2, #250	@ 0xfa
 80177ee:	0092      	lsls	r2, r2, #2
 80177f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80177f2:	187b      	adds	r3, r7, r1
 80177f4:	220a      	movs	r2, #10
 80177f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80177f8:	0008      	movs	r0, r1
 80177fa:	187b      	adds	r3, r7, r1
 80177fc:	2250      	movs	r2, #80	@ 0x50
 80177fe:	2164      	movs	r1, #100	@ 0x64
 8017800:	5299      	strh	r1, [r3, r2]
 8017802:	183b      	adds	r3, r7, r0
 8017804:	2264      	movs	r2, #100	@ 0x64
 8017806:	21fa      	movs	r1, #250	@ 0xfa
 8017808:	0089      	lsls	r1, r1, #2
 801780a:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	791b      	ldrb	r3, [r3, #4]
 8017810:	2b03      	cmp	r3, #3
 8017812:	d048      	beq.n	80178a6 <RegionEU868InitDefaults+0xe2>
 8017814:	dc54      	bgt.n	80178c0 <RegionEU868InitDefaults+0xfc>
 8017816:	2b02      	cmp	r3, #2
 8017818:	d036      	beq.n	8017888 <RegionEU868InitDefaults+0xc4>
 801781a:	dc51      	bgt.n	80178c0 <RegionEU868InitDefaults+0xfc>
 801781c:	2b00      	cmp	r3, #0
 801781e:	d002      	beq.n	8017826 <RegionEU868InitDefaults+0x62>
 8017820:	2b01      	cmp	r3, #1
 8017822:	d021      	beq.n	8017868 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 8017824:	e04c      	b.n	80178c0 <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017826:	2330      	movs	r3, #48	@ 0x30
 8017828:	18f9      	adds	r1, r7, r3
 801782a:	4b29      	ldr	r3, [pc, #164]	@ (80178d0 <RegionEU868InitDefaults+0x10c>)
 801782c:	2278      	movs	r2, #120	@ 0x78
 801782e:	0018      	movs	r0, r3
 8017830:	f001 f89a 	bl	8018968 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017834:	4b27      	ldr	r3, [pc, #156]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 8017836:	4a28      	ldr	r2, [pc, #160]	@ (80178d8 <RegionEU868InitDefaults+0x114>)
 8017838:	ca13      	ldmia	r2!, {r0, r1, r4}
 801783a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801783c:	4b25      	ldr	r3, [pc, #148]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 801783e:	4a27      	ldr	r2, [pc, #156]	@ (80178dc <RegionEU868InitDefaults+0x118>)
 8017840:	330c      	adds	r3, #12
 8017842:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017844:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017846:	4b23      	ldr	r3, [pc, #140]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 8017848:	4a25      	ldr	r2, [pc, #148]	@ (80178e0 <RegionEU868InitDefaults+0x11c>)
 801784a:	3318      	adds	r3, #24
 801784c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801784e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017850:	4a20      	ldr	r2, [pc, #128]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 8017852:	239d      	movs	r3, #157	@ 0x9d
 8017854:	005b      	lsls	r3, r3, #1
 8017856:	2107      	movs	r1, #7
 8017858:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801785a:	4922      	ldr	r1, [pc, #136]	@ (80178e4 <RegionEU868InitDefaults+0x120>)
 801785c:	4b22      	ldr	r3, [pc, #136]	@ (80178e8 <RegionEU868InitDefaults+0x124>)
 801785e:	2201      	movs	r2, #1
 8017860:	0018      	movs	r0, r3
 8017862:	f7ff f8a3 	bl	80169ac <RegionCommonChanMaskCopy>
            break;
 8017866:	e02e      	b.n	80178c6 <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8017868:	4b1a      	ldr	r3, [pc, #104]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 801786a:	2200      	movs	r2, #0
 801786c:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 801786e:	4b19      	ldr	r3, [pc, #100]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 8017870:	2200      	movs	r2, #0
 8017872:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8017874:	4b17      	ldr	r3, [pc, #92]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 8017876:	2200      	movs	r2, #0
 8017878:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801787a:	491a      	ldr	r1, [pc, #104]	@ (80178e4 <RegionEU868InitDefaults+0x120>)
 801787c:	4b1a      	ldr	r3, [pc, #104]	@ (80178e8 <RegionEU868InitDefaults+0x124>)
 801787e:	2201      	movs	r2, #1
 8017880:	0018      	movs	r0, r3
 8017882:	f7ff f893 	bl	80169ac <RegionCommonChanMaskCopy>
            break;
 8017886:	e01e      	b.n	80178c6 <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8017888:	4a12      	ldr	r2, [pc, #72]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 801788a:	239c      	movs	r3, #156	@ 0x9c
 801788c:	005b      	lsls	r3, r3, #1
 801788e:	5ad2      	ldrh	r2, [r2, r3]
 8017890:	4910      	ldr	r1, [pc, #64]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 8017892:	239d      	movs	r3, #157	@ 0x9d
 8017894:	005b      	lsls	r3, r3, #1
 8017896:	5acb      	ldrh	r3, [r1, r3]
 8017898:	4313      	orrs	r3, r2
 801789a:	b299      	uxth	r1, r3
 801789c:	4a0d      	ldr	r2, [pc, #52]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 801789e:	239c      	movs	r3, #156	@ 0x9c
 80178a0:	005b      	lsls	r3, r3, #1
 80178a2:	52d1      	strh	r1, [r2, r3]
            break;
 80178a4:	e00f      	b.n	80178c6 <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d00a      	beq.n	80178c4 <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	6819      	ldr	r1, [r3, #0]
 80178b2:	239e      	movs	r3, #158	@ 0x9e
 80178b4:	005a      	lsls	r2, r3, #1
 80178b6:	4b07      	ldr	r3, [pc, #28]	@ (80178d4 <RegionEU868InitDefaults+0x110>)
 80178b8:	0018      	movs	r0, r3
 80178ba:	f001 f855 	bl	8018968 <memcpy1>
            break;
 80178be:	e001      	b.n	80178c4 <RegionEU868InitDefaults+0x100>
            break;
 80178c0:	46c0      	nop			@ (mov r8, r8)
 80178c2:	e000      	b.n	80178c6 <RegionEU868InitDefaults+0x102>
            break;
 80178c4:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80178c6:	46c0      	nop			@ (mov r8, r8)
 80178c8:	46bd      	mov	sp, r7
 80178ca:	b02b      	add	sp, #172	@ 0xac
 80178cc:	bd90      	pop	{r4, r7, pc}
 80178ce:	46c0      	nop			@ (mov r8, r8)
 80178d0:	200013b8 	.word	0x200013b8
 80178d4:	200012f8 	.word	0x200012f8
 80178d8:	0801e5c8 	.word	0x0801e5c8
 80178dc:	0801e5d4 	.word	0x0801e5d4
 80178e0:	0801e5e0 	.word	0x0801e5e0
 80178e4:	20001432 	.word	0x20001432
 80178e8:	20001430 	.word	0x20001430

080178ec <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b082      	sub	sp, #8
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	229e      	movs	r2, #158	@ 0x9e
 80178f8:	0052      	lsls	r2, r2, #1
 80178fa:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80178fc:	4b02      	ldr	r3, [pc, #8]	@ (8017908 <RegionEU868GetNvmCtx+0x1c>)
}
 80178fe:	0018      	movs	r0, r3
 8017900:	46bd      	mov	sp, r7
 8017902:	b002      	add	sp, #8
 8017904:	bd80      	pop	{r7, pc}
 8017906:	46c0      	nop			@ (mov r8, r8)
 8017908:	200012f8 	.word	0x200012f8

0801790c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b084      	sub	sp, #16
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
 8017914:	000a      	movs	r2, r1
 8017916:	1cfb      	adds	r3, r7, #3
 8017918:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 801791a:	1cfb      	adds	r3, r7, #3
 801791c:	781b      	ldrb	r3, [r3, #0]
 801791e:	2b0f      	cmp	r3, #15
 8017920:	d847      	bhi.n	80179b2 <RegionEU868Verify+0xa6>
 8017922:	009a      	lsls	r2, r3, #2
 8017924:	4b25      	ldr	r3, [pc, #148]	@ (80179bc <RegionEU868Verify+0xb0>)
 8017926:	18d3      	adds	r3, r2, r3
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801792c:	210f      	movs	r1, #15
 801792e:	187b      	adds	r3, r7, r1
 8017930:	2200      	movs	r2, #0
 8017932:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	187a      	adds	r2, r7, r1
 801793a:	0011      	movs	r1, r2
 801793c:	0018      	movs	r0, r3
 801793e:	f7ff fd1f 	bl	8017380 <VerifyRfFreq>
 8017942:	0003      	movs	r3, r0
 8017944:	e036      	b.n	80179b4 <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	781b      	ldrb	r3, [r3, #0]
 801794a:	b25b      	sxtb	r3, r3
 801794c:	2207      	movs	r2, #7
 801794e:	2100      	movs	r1, #0
 8017950:	0018      	movs	r0, r3
 8017952:	f7fe ff82 	bl	801685a <RegionCommonValueInRange>
 8017956:	0003      	movs	r3, r0
 8017958:	1e5a      	subs	r2, r3, #1
 801795a:	4193      	sbcs	r3, r2
 801795c:	b2db      	uxtb	r3, r3
 801795e:	e029      	b.n	80179b4 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	781b      	ldrb	r3, [r3, #0]
 8017964:	b25b      	sxtb	r3, r3
 8017966:	2205      	movs	r2, #5
 8017968:	2100      	movs	r1, #0
 801796a:	0018      	movs	r0, r3
 801796c:	f7fe ff75 	bl	801685a <RegionCommonValueInRange>
 8017970:	0003      	movs	r3, r0
 8017972:	1e5a      	subs	r2, r3, #1
 8017974:	4193      	sbcs	r3, r2
 8017976:	b2db      	uxtb	r3, r3
 8017978:	e01c      	b.n	80179b4 <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	b25b      	sxtb	r3, r3
 8017980:	2207      	movs	r2, #7
 8017982:	2100      	movs	r1, #0
 8017984:	0018      	movs	r0, r3
 8017986:	f7fe ff68 	bl	801685a <RegionCommonValueInRange>
 801798a:	0003      	movs	r3, r0
 801798c:	1e5a      	subs	r2, r3, #1
 801798e:	4193      	sbcs	r3, r2
 8017990:	b2db      	uxtb	r3, r3
 8017992:	e00f      	b.n	80179b4 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	b25b      	sxtb	r3, r3
 801799a:	2200      	movs	r2, #0
 801799c:	2100      	movs	r1, #0
 801799e:	0018      	movs	r0, r3
 80179a0:	f7fe ff5b 	bl	801685a <RegionCommonValueInRange>
 80179a4:	0003      	movs	r3, r0
 80179a6:	1e5a      	subs	r2, r3, #1
 80179a8:	4193      	sbcs	r3, r2
 80179aa:	b2db      	uxtb	r3, r3
 80179ac:	e002      	b.n	80179b4 <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80179ae:	2301      	movs	r3, #1
 80179b0:	e000      	b.n	80179b4 <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 80179b2:	2300      	movs	r3, #0
    }
}
 80179b4:	0018      	movs	r0, r3
 80179b6:	46bd      	mov	sp, r7
 80179b8:	b004      	add	sp, #16
 80179ba:	bd80      	pop	{r7, pc}
 80179bc:	0801e5ec 	.word	0x0801e5ec

080179c0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80179c0:	b590      	push	{r4, r7, lr}
 80179c2:	b08b      	sub	sp, #44	@ 0x2c
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80179c8:	2318      	movs	r3, #24
 80179ca:	18fb      	adds	r3, r7, r3
 80179cc:	2250      	movs	r2, #80	@ 0x50
 80179ce:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	791b      	ldrb	r3, [r3, #4]
 80179d4:	2b10      	cmp	r3, #16
 80179d6:	d000      	beq.n	80179da <RegionEU868ApplyCFList+0x1a>
 80179d8:	e07c      	b.n	8017ad4 <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	330f      	adds	r3, #15
 80179e0:	781b      	ldrb	r3, [r3, #0]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d000      	beq.n	80179e8 <RegionEU868ApplyCFList+0x28>
 80179e6:	e077      	b.n	8017ad8 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80179e8:	2327      	movs	r3, #39	@ 0x27
 80179ea:	18fb      	adds	r3, r7, r3
 80179ec:	2200      	movs	r2, #0
 80179ee:	701a      	strb	r2, [r3, #0]
 80179f0:	2326      	movs	r3, #38	@ 0x26
 80179f2:	18fb      	adds	r3, r7, r3
 80179f4:	2203      	movs	r2, #3
 80179f6:	701a      	strb	r2, [r3, #0]
 80179f8:	e066      	b.n	8017ac8 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80179fa:	2326      	movs	r3, #38	@ 0x26
 80179fc:	18fb      	adds	r3, r7, r3
 80179fe:	781b      	ldrb	r3, [r3, #0]
 8017a00:	2b07      	cmp	r3, #7
 8017a02:	d82e      	bhi.n	8017a62 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	681a      	ldr	r2, [r3, #0]
 8017a08:	2427      	movs	r4, #39	@ 0x27
 8017a0a:	193b      	adds	r3, r7, r4
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	18d3      	adds	r3, r2, r3
 8017a10:	781b      	ldrb	r3, [r3, #0]
 8017a12:	001a      	movs	r2, r3
 8017a14:	2018      	movs	r0, #24
 8017a16:	183b      	adds	r3, r7, r0
 8017a18:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017a1a:	183b      	adds	r3, r7, r0
 8017a1c:	681a      	ldr	r2, [r3, #0]
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	6819      	ldr	r1, [r3, #0]
 8017a22:	193b      	adds	r3, r7, r4
 8017a24:	781b      	ldrb	r3, [r3, #0]
 8017a26:	3301      	adds	r3, #1
 8017a28:	18cb      	adds	r3, r1, r3
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	021b      	lsls	r3, r3, #8
 8017a2e:	431a      	orrs	r2, r3
 8017a30:	183b      	adds	r3, r7, r0
 8017a32:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017a34:	183b      	adds	r3, r7, r0
 8017a36:	681a      	ldr	r2, [r3, #0]
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	6819      	ldr	r1, [r3, #0]
 8017a3c:	193b      	adds	r3, r7, r4
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	3302      	adds	r3, #2
 8017a42:	18cb      	adds	r3, r1, r3
 8017a44:	781b      	ldrb	r3, [r3, #0]
 8017a46:	041b      	lsls	r3, r3, #16
 8017a48:	431a      	orrs	r2, r3
 8017a4a:	183b      	adds	r3, r7, r0
 8017a4c:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8017a4e:	183b      	adds	r3, r7, r0
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	2264      	movs	r2, #100	@ 0x64
 8017a54:	435a      	muls	r2, r3
 8017a56:	183b      	adds	r3, r7, r0
 8017a58:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017a5a:	183b      	adds	r3, r7, r0
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	605a      	str	r2, [r3, #4]
 8017a60:	e009      	b.n	8017a76 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8017a62:	2118      	movs	r1, #24
 8017a64:	187b      	adds	r3, r7, r1
 8017a66:	2200      	movs	r2, #0
 8017a68:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8017a6a:	187b      	adds	r3, r7, r1
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8017a70:	187b      	adds	r3, r7, r1
 8017a72:	2200      	movs	r2, #0
 8017a74:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8017a76:	2218      	movs	r2, #24
 8017a78:	18bb      	adds	r3, r7, r2
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d00d      	beq.n	8017a9c <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8017a80:	2110      	movs	r1, #16
 8017a82:	187b      	adds	r3, r7, r1
 8017a84:	18ba      	adds	r2, r7, r2
 8017a86:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8017a88:	187b      	adds	r3, r7, r1
 8017a8a:	2226      	movs	r2, #38	@ 0x26
 8017a8c:	18ba      	adds	r2, r7, r2
 8017a8e:	7812      	ldrb	r2, [r2, #0]
 8017a90:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017a92:	187b      	adds	r3, r7, r1
 8017a94:	0018      	movs	r0, r3
 8017a96:	f000 fdb5 	bl	8018604 <RegionEU868ChannelAdd>
 8017a9a:	e009      	b.n	8017ab0 <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017a9c:	210c      	movs	r1, #12
 8017a9e:	187b      	adds	r3, r7, r1
 8017aa0:	2226      	movs	r2, #38	@ 0x26
 8017aa2:	18ba      	adds	r2, r7, r2
 8017aa4:	7812      	ldrb	r2, [r2, #0]
 8017aa6:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8017aa8:	187b      	adds	r3, r7, r1
 8017aaa:	0018      	movs	r0, r3
 8017aac:	f000 fe6e 	bl	801878c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017ab0:	2227      	movs	r2, #39	@ 0x27
 8017ab2:	18bb      	adds	r3, r7, r2
 8017ab4:	18ba      	adds	r2, r7, r2
 8017ab6:	7812      	ldrb	r2, [r2, #0]
 8017ab8:	3203      	adds	r2, #3
 8017aba:	701a      	strb	r2, [r3, #0]
 8017abc:	2126      	movs	r1, #38	@ 0x26
 8017abe:	187b      	adds	r3, r7, r1
 8017ac0:	781a      	ldrb	r2, [r3, #0]
 8017ac2:	187b      	adds	r3, r7, r1
 8017ac4:	3201      	adds	r2, #1
 8017ac6:	701a      	strb	r2, [r3, #0]
 8017ac8:	2326      	movs	r3, #38	@ 0x26
 8017aca:	18fb      	adds	r3, r7, r3
 8017acc:	781b      	ldrb	r3, [r3, #0]
 8017ace:	2b0f      	cmp	r3, #15
 8017ad0:	d993      	bls.n	80179fa <RegionEU868ApplyCFList+0x3a>
 8017ad2:	e002      	b.n	8017ada <RegionEU868ApplyCFList+0x11a>
        return;
 8017ad4:	46c0      	nop			@ (mov r8, r8)
 8017ad6:	e000      	b.n	8017ada <RegionEU868ApplyCFList+0x11a>
        return;
 8017ad8:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8017ada:	46bd      	mov	sp, r7
 8017adc:	b00b      	add	sp, #44	@ 0x2c
 8017ade:	bd90      	pop	{r4, r7, pc}

08017ae0 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b082      	sub	sp, #8
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	791b      	ldrb	r3, [r3, #4]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d002      	beq.n	8017af6 <RegionEU868ChanMaskSet+0x16>
 8017af0:	2b01      	cmp	r3, #1
 8017af2:	d008      	beq.n	8017b06 <RegionEU868ChanMaskSet+0x26>
 8017af4:	e00f      	b.n	8017b16 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6819      	ldr	r1, [r3, #0]
 8017afa:	4b0a      	ldr	r3, [pc, #40]	@ (8017b24 <RegionEU868ChanMaskSet+0x44>)
 8017afc:	2201      	movs	r2, #1
 8017afe:	0018      	movs	r0, r3
 8017b00:	f7fe ff54 	bl	80169ac <RegionCommonChanMaskCopy>
            break;
 8017b04:	e009      	b.n	8017b1a <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	6819      	ldr	r1, [r3, #0]
 8017b0a:	4b07      	ldr	r3, [pc, #28]	@ (8017b28 <RegionEU868ChanMaskSet+0x48>)
 8017b0c:	2201      	movs	r2, #1
 8017b0e:	0018      	movs	r0, r3
 8017b10:	f7fe ff4c 	bl	80169ac <RegionCommonChanMaskCopy>
            break;
 8017b14:	e001      	b.n	8017b1a <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 8017b16:	2300      	movs	r3, #0
 8017b18:	e000      	b.n	8017b1c <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 8017b1a:	2301      	movs	r3, #1
}
 8017b1c:	0018      	movs	r0, r3
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	b002      	add	sp, #8
 8017b22:	bd80      	pop	{r7, pc}
 8017b24:	20001430 	.word	0x20001430
 8017b28:	20001432 	.word	0x20001432

08017b2c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017b2c:	b5b0      	push	{r4, r5, r7, lr}
 8017b2e:	b088      	sub	sp, #32
 8017b30:	af02      	add	r7, sp, #8
 8017b32:	60ba      	str	r2, [r7, #8]
 8017b34:	607b      	str	r3, [r7, #4]
 8017b36:	240f      	movs	r4, #15
 8017b38:	193b      	adds	r3, r7, r4
 8017b3a:	1c02      	adds	r2, r0, #0
 8017b3c:	701a      	strb	r2, [r3, #0]
 8017b3e:	230e      	movs	r3, #14
 8017b40:	18fb      	adds	r3, r7, r3
 8017b42:	1c0a      	adds	r2, r1, #0
 8017b44:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 8017b46:	2300      	movs	r3, #0
 8017b48:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017b4a:	193b      	adds	r3, r7, r4
 8017b4c:	781b      	ldrb	r3, [r3, #0]
 8017b4e:	b25a      	sxtb	r2, r3
 8017b50:	2a07      	cmp	r2, #7
 8017b52:	dd00      	ble.n	8017b56 <RegionEU868ComputeRxWindowParameters+0x2a>
 8017b54:	2307      	movs	r3, #7
 8017b56:	b25a      	sxtb	r2, r3
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	785b      	ldrb	r3, [r3, #1]
 8017b60:	b25b      	sxtb	r3, r3
 8017b62:	0018      	movs	r0, r3
 8017b64:	f7ff fbc6 	bl	80172f4 <GetBandwidth>
 8017b68:	0003      	movs	r3, r0
 8017b6a:	b2da      	uxtb	r2, r3
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	785b      	ldrb	r3, [r3, #1]
 8017b74:	b25b      	sxtb	r3, r3
 8017b76:	2b07      	cmp	r3, #7
 8017b78:	d10b      	bne.n	8017b92 <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	785b      	ldrb	r3, [r3, #1]
 8017b7e:	b25b      	sxtb	r3, r3
 8017b80:	001a      	movs	r2, r3
 8017b82:	4b18      	ldr	r3, [pc, #96]	@ (8017be4 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8017b84:	5c9b      	ldrb	r3, [r3, r2]
 8017b86:	0018      	movs	r0, r3
 8017b88:	f7ff f94c 	bl	8016e24 <RegionCommonComputeSymbolTimeFsk>
 8017b8c:	0003      	movs	r3, r0
 8017b8e:	617b      	str	r3, [r7, #20]
 8017b90:	e011      	b.n	8017bb6 <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	785b      	ldrb	r3, [r3, #1]
 8017b96:	b25b      	sxtb	r3, r3
 8017b98:	001a      	movs	r2, r3
 8017b9a:	4b12      	ldr	r3, [pc, #72]	@ (8017be4 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8017b9c:	5c98      	ldrb	r0, [r3, r2]
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	785b      	ldrb	r3, [r3, #1]
 8017ba2:	b25b      	sxtb	r3, r3
 8017ba4:	001a      	movs	r2, r3
 8017ba6:	4b10      	ldr	r3, [pc, #64]	@ (8017be8 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8017ba8:	0092      	lsls	r2, r2, #2
 8017baa:	58d3      	ldr	r3, [r2, r3]
 8017bac:	0019      	movs	r1, r3
 8017bae:	f7ff f921 	bl	8016df4 <RegionCommonComputeSymbolTimeLoRa>
 8017bb2:	0003      	movs	r3, r0
 8017bb4:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8017bec <RegionEU868ComputeRxWindowParameters+0xc0>)
 8017bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017bba:	4798      	blx	r3
 8017bbc:	0005      	movs	r5, r0
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	3308      	adds	r3, #8
 8017bc2:	687a      	ldr	r2, [r7, #4]
 8017bc4:	320c      	adds	r2, #12
 8017bc6:	68bc      	ldr	r4, [r7, #8]
 8017bc8:	210e      	movs	r1, #14
 8017bca:	1879      	adds	r1, r7, r1
 8017bcc:	7809      	ldrb	r1, [r1, #0]
 8017bce:	6978      	ldr	r0, [r7, #20]
 8017bd0:	9201      	str	r2, [sp, #4]
 8017bd2:	9300      	str	r3, [sp, #0]
 8017bd4:	002b      	movs	r3, r5
 8017bd6:	0022      	movs	r2, r4
 8017bd8:	f7ff f932 	bl	8016e40 <RegionCommonComputeRxWindowParameters>
}
 8017bdc:	46c0      	nop			@ (mov r8, r8)
 8017bde:	46bd      	mov	sp, r7
 8017be0:	b006      	add	sp, #24
 8017be2:	bdb0      	pop	{r4, r5, r7, pc}
 8017be4:	0801e4a8 	.word	0x0801e4a8
 8017be8:	0801e4b0 	.word	0x0801e4b0
 8017bec:	0801e62c 	.word	0x0801e62c

08017bf0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bf2:	b091      	sub	sp, #68	@ 0x44
 8017bf4:	af0a      	add	r7, sp, #40	@ 0x28
 8017bf6:	6078      	str	r0, [r7, #4]
 8017bf8:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017bfa:	230f      	movs	r3, #15
 8017bfc:	18fb      	adds	r3, r7, r3
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	7852      	ldrb	r2, [r2, #1]
 8017c02:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8017c04:	2316      	movs	r3, #22
 8017c06:	18fb      	adds	r3, r7, r3
 8017c08:	2200      	movs	r2, #0
 8017c0a:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8017c0c:	230e      	movs	r3, #14
 8017c0e:	18fb      	adds	r3, r7, r3
 8017c10:	2200      	movs	r2, #0
 8017c12:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	685b      	ldr	r3, [r3, #4]
 8017c18:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017c1a:	4b68      	ldr	r3, [pc, #416]	@ (8017dbc <RegionEU868RxConfig+0x1cc>)
 8017c1c:	685b      	ldr	r3, [r3, #4]
 8017c1e:	4798      	blx	r3
 8017c20:	1e03      	subs	r3, r0, #0
 8017c22:	d001      	beq.n	8017c28 <RegionEU868RxConfig+0x38>
    {
        return false;
 8017c24:	2300      	movs	r3, #0
 8017c26:	e0c4      	b.n	8017db2 <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	7cdb      	ldrb	r3, [r3, #19]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d122      	bne.n	8017c76 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	781b      	ldrb	r3, [r3, #0]
 8017c34:	0019      	movs	r1, r3
 8017c36:	4a62      	ldr	r2, [pc, #392]	@ (8017dc0 <RegionEU868RxConfig+0x1d0>)
 8017c38:	000b      	movs	r3, r1
 8017c3a:	005b      	lsls	r3, r3, #1
 8017c3c:	185b      	adds	r3, r3, r1
 8017c3e:	009b      	lsls	r3, r3, #2
 8017c40:	589b      	ldr	r3, [r3, r2]
 8017c42:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	0019      	movs	r1, r3
 8017c4a:	4a5d      	ldr	r2, [pc, #372]	@ (8017dc0 <RegionEU868RxConfig+0x1d0>)
 8017c4c:	000b      	movs	r3, r1
 8017c4e:	005b      	lsls	r3, r3, #1
 8017c50:	185b      	adds	r3, r3, r1
 8017c52:	009b      	lsls	r3, r3, #2
 8017c54:	18d3      	adds	r3, r2, r3
 8017c56:	3304      	adds	r3, #4
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d00b      	beq.n	8017c76 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	781b      	ldrb	r3, [r3, #0]
 8017c62:	0019      	movs	r1, r3
 8017c64:	4a56      	ldr	r2, [pc, #344]	@ (8017dc0 <RegionEU868RxConfig+0x1d0>)
 8017c66:	000b      	movs	r3, r1
 8017c68:	005b      	lsls	r3, r3, #1
 8017c6a:	185b      	adds	r3, r3, r1
 8017c6c:	009b      	lsls	r3, r3, #2
 8017c6e:	18d3      	adds	r3, r2, r3
 8017c70:	3304      	adds	r3, #4
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017c76:	240f      	movs	r4, #15
 8017c78:	193b      	adds	r3, r7, r4
 8017c7a:	781b      	ldrb	r3, [r3, #0]
 8017c7c:	b25b      	sxtb	r3, r3
 8017c7e:	4a51      	ldr	r2, [pc, #324]	@ (8017dc4 <RegionEU868RxConfig+0x1d4>)
 8017c80:	5cd2      	ldrb	r2, [r2, r3]
 8017c82:	250e      	movs	r5, #14
 8017c84:	197b      	adds	r3, r7, r5
 8017c86:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8017c88:	4b4c      	ldr	r3, [pc, #304]	@ (8017dbc <RegionEU868RxConfig+0x1cc>)
 8017c8a:	68db      	ldr	r3, [r3, #12]
 8017c8c:	693a      	ldr	r2, [r7, #16]
 8017c8e:	0010      	movs	r0, r2
 8017c90:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017c92:	193b      	adds	r3, r7, r4
 8017c94:	781b      	ldrb	r3, [r3, #0]
 8017c96:	b25b      	sxtb	r3, r3
 8017c98:	2b07      	cmp	r3, #7
 8017c9a:	d12e      	bne.n	8017cfa <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8017c9c:	2117      	movs	r1, #23
 8017c9e:	187b      	adds	r3, r7, r1
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017ca4:	4b45      	ldr	r3, [pc, #276]	@ (8017dbc <RegionEU868RxConfig+0x1cc>)
 8017ca6:	699c      	ldr	r4, [r3, #24]
 8017ca8:	197b      	adds	r3, r7, r5
 8017caa:	2200      	movs	r2, #0
 8017cac:	569a      	ldrsb	r2, [r3, r2]
 8017cae:	0013      	movs	r3, r2
 8017cb0:	015b      	lsls	r3, r3, #5
 8017cb2:	1a9b      	subs	r3, r3, r2
 8017cb4:	009b      	lsls	r3, r3, #2
 8017cb6:	189b      	adds	r3, r3, r2
 8017cb8:	00db      	lsls	r3, r3, #3
 8017cba:	001e      	movs	r6, r3
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	689b      	ldr	r3, [r3, #8]
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	687a      	ldr	r2, [r7, #4]
 8017cc4:	7c92      	ldrb	r2, [r2, #18]
 8017cc6:	4d40      	ldr	r5, [pc, #256]	@ (8017dc8 <RegionEU868RxConfig+0x1d8>)
 8017cc8:	1879      	adds	r1, r7, r1
 8017cca:	7808      	ldrb	r0, [r1, #0]
 8017ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8017cce:	2200      	movs	r2, #0
 8017cd0:	9208      	str	r2, [sp, #32]
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	9207      	str	r2, [sp, #28]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	9206      	str	r2, [sp, #24]
 8017cda:	2201      	movs	r2, #1
 8017cdc:	9205      	str	r2, [sp, #20]
 8017cde:	2200      	movs	r2, #0
 8017ce0:	9204      	str	r2, [sp, #16]
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	9203      	str	r2, [sp, #12]
 8017ce6:	9302      	str	r3, [sp, #8]
 8017ce8:	2305      	movs	r3, #5
 8017cea:	9301      	str	r3, [sp, #4]
 8017cec:	4b37      	ldr	r3, [pc, #220]	@ (8017dcc <RegionEU868RxConfig+0x1dc>)
 8017cee:	9300      	str	r3, [sp, #0]
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	0032      	movs	r2, r6
 8017cf4:	0029      	movs	r1, r5
 8017cf6:	47a0      	blx	r4
 8017cf8:	e029      	b.n	8017d4e <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 8017cfa:	2117      	movs	r1, #23
 8017cfc:	187b      	adds	r3, r7, r1
 8017cfe:	2201      	movs	r2, #1
 8017d00:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017d02:	4b2e      	ldr	r3, [pc, #184]	@ (8017dbc <RegionEU868RxConfig+0x1cc>)
 8017d04:	699c      	ldr	r4, [r3, #24]
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	789b      	ldrb	r3, [r3, #2]
 8017d0a:	001e      	movs	r6, r3
 8017d0c:	230e      	movs	r3, #14
 8017d0e:	18fb      	adds	r3, r7, r3
 8017d10:	2500      	movs	r5, #0
 8017d12:	575d      	ldrsb	r5, [r3, r5]
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	689b      	ldr	r3, [r3, #8]
 8017d18:	b29b      	uxth	r3, r3
 8017d1a:	687a      	ldr	r2, [r7, #4]
 8017d1c:	7c92      	ldrb	r2, [r2, #18]
 8017d1e:	1879      	adds	r1, r7, r1
 8017d20:	7808      	ldrb	r0, [r1, #0]
 8017d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8017d24:	2201      	movs	r2, #1
 8017d26:	9208      	str	r2, [sp, #32]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	9207      	str	r2, [sp, #28]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	9206      	str	r2, [sp, #24]
 8017d30:	2200      	movs	r2, #0
 8017d32:	9205      	str	r2, [sp, #20]
 8017d34:	2200      	movs	r2, #0
 8017d36:	9204      	str	r2, [sp, #16]
 8017d38:	2200      	movs	r2, #0
 8017d3a:	9203      	str	r2, [sp, #12]
 8017d3c:	9302      	str	r3, [sp, #8]
 8017d3e:	2308      	movs	r3, #8
 8017d40:	9301      	str	r3, [sp, #4]
 8017d42:	2300      	movs	r3, #0
 8017d44:	9300      	str	r3, [sp, #0]
 8017d46:	2301      	movs	r3, #1
 8017d48:	002a      	movs	r2, r5
 8017d4a:	0031      	movs	r1, r6
 8017d4c:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	7c5b      	ldrb	r3, [r3, #17]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d009      	beq.n	8017d6a <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8017d56:	230f      	movs	r3, #15
 8017d58:	18fb      	adds	r3, r7, r3
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	569a      	ldrsb	r2, [r3, r2]
 8017d5e:	2316      	movs	r3, #22
 8017d60:	18fb      	adds	r3, r7, r3
 8017d62:	491b      	ldr	r1, [pc, #108]	@ (8017dd0 <RegionEU868RxConfig+0x1e0>)
 8017d64:	5c8a      	ldrb	r2, [r1, r2]
 8017d66:	701a      	strb	r2, [r3, #0]
 8017d68:	e008      	b.n	8017d7c <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017d6a:	230f      	movs	r3, #15
 8017d6c:	18fb      	adds	r3, r7, r3
 8017d6e:	2200      	movs	r2, #0
 8017d70:	569a      	ldrsb	r2, [r3, r2]
 8017d72:	2316      	movs	r3, #22
 8017d74:	18fb      	adds	r3, r7, r3
 8017d76:	4917      	ldr	r1, [pc, #92]	@ (8017dd4 <RegionEU868RxConfig+0x1e4>)
 8017d78:	5c8a      	ldrb	r2, [r1, r2]
 8017d7a:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8017dbc <RegionEU868RxConfig+0x1cc>)
 8017d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017d80:	2216      	movs	r2, #22
 8017d82:	18ba      	adds	r2, r7, r2
 8017d84:	7812      	ldrb	r2, [r2, #0]
 8017d86:	320d      	adds	r2, #13
 8017d88:	b2d1      	uxtb	r1, r2
 8017d8a:	2217      	movs	r2, #23
 8017d8c:	18ba      	adds	r2, r7, r2
 8017d8e:	7812      	ldrb	r2, [r2, #0]
 8017d90:	0010      	movs	r0, r2
 8017d92:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	7cd8      	ldrb	r0, [r3, #19]
 8017d98:	240f      	movs	r4, #15
 8017d9a:	193b      	adds	r3, r7, r4
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	569a      	ldrsb	r2, [r3, r2]
 8017da0:	693b      	ldr	r3, [r7, #16]
 8017da2:	0019      	movs	r1, r3
 8017da4:	f7ff fa2a 	bl	80171fc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	193a      	adds	r2, r7, r4
 8017dac:	7812      	ldrb	r2, [r2, #0]
 8017dae:	701a      	strb	r2, [r3, #0]
    return true;
 8017db0:	2301      	movs	r3, #1
}
 8017db2:	0018      	movs	r0, r3
 8017db4:	46bd      	mov	sp, r7
 8017db6:	b007      	add	sp, #28
 8017db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dba:	46c0      	nop			@ (mov r8, r8)
 8017dbc:	0801e62c 	.word	0x0801e62c
 8017dc0:	200012f8 	.word	0x200012f8
 8017dc4:	0801e4a8 	.word	0x0801e4a8
 8017dc8:	0000c350 	.word	0x0000c350
 8017dcc:	00014585 	.word	0x00014585
 8017dd0:	0801e4d8 	.word	0x0801e4d8
 8017dd4:	0801e4d0 	.word	0x0801e4d0

08017dd8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dda:	b093      	sub	sp, #76	@ 0x4c
 8017ddc:	af0a      	add	r7, sp, #40	@ 0x28
 8017dde:	60f8      	str	r0, [r7, #12]
 8017de0:	60b9      	str	r1, [r7, #8]
 8017de2:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	785b      	ldrb	r3, [r3, #1]
 8017de8:	b25b      	sxtb	r3, r3
 8017dea:	001a      	movs	r2, r3
 8017dec:	4b6b      	ldr	r3, [pc, #428]	@ (8017f9c <RegionEU868TxConfig+0x1c4>)
 8017dee:	5c9a      	ldrb	r2, [r3, r2]
 8017df0:	251e      	movs	r5, #30
 8017df2:	197b      	adds	r3, r7, r5
 8017df4:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	2002      	movs	r0, #2
 8017dfa:	5618      	ldrsb	r0, [r3, r0]
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	781b      	ldrb	r3, [r3, #0]
 8017e00:	0019      	movs	r1, r3
 8017e02:	4a67      	ldr	r2, [pc, #412]	@ (8017fa0 <RegionEU868TxConfig+0x1c8>)
 8017e04:	000b      	movs	r3, r1
 8017e06:	005b      	lsls	r3, r3, #1
 8017e08:	185b      	adds	r3, r3, r1
 8017e0a:	009b      	lsls	r3, r3, #2
 8017e0c:	18d3      	adds	r3, r2, r3
 8017e0e:	3309      	adds	r3, #9
 8017e10:	781b      	ldrb	r3, [r3, #0]
 8017e12:	001c      	movs	r4, r3
 8017e14:	4a62      	ldr	r2, [pc, #392]	@ (8017fa0 <RegionEU868TxConfig+0x1c8>)
 8017e16:	21c2      	movs	r1, #194	@ 0xc2
 8017e18:	0023      	movs	r3, r4
 8017e1a:	009b      	lsls	r3, r3, #2
 8017e1c:	191b      	adds	r3, r3, r4
 8017e1e:	009b      	lsls	r3, r3, #2
 8017e20:	18d3      	adds	r3, r2, r3
 8017e22:	185b      	adds	r3, r3, r1
 8017e24:	2100      	movs	r1, #0
 8017e26:	5659      	ldrsb	r1, [r3, r1]
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	2201      	movs	r2, #1
 8017e2c:	569a      	ldrsb	r2, [r3, r2]
 8017e2e:	261d      	movs	r6, #29
 8017e30:	19bc      	adds	r4, r7, r6
 8017e32:	4b5c      	ldr	r3, [pc, #368]	@ (8017fa4 <RegionEU868TxConfig+0x1cc>)
 8017e34:	f7ff fa7c 	bl	8017330 <LimitTxPower>
 8017e38:	0003      	movs	r3, r0
 8017e3a:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	785b      	ldrb	r3, [r3, #1]
 8017e40:	b25b      	sxtb	r3, r3
 8017e42:	0018      	movs	r0, r3
 8017e44:	f7ff fa56 	bl	80172f4 <GetBandwidth>
 8017e48:	0003      	movs	r3, r0
 8017e4a:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8017e4c:	2017      	movs	r0, #23
 8017e4e:	183b      	adds	r3, r7, r0
 8017e50:	2200      	movs	r2, #0
 8017e52:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	6859      	ldr	r1, [r3, #4]
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	689a      	ldr	r2, [r3, #8]
 8017e5c:	183c      	adds	r4, r7, r0
 8017e5e:	19bb      	adds	r3, r7, r6
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	b25b      	sxtb	r3, r3
 8017e64:	0018      	movs	r0, r3
 8017e66:	f7ff f839 	bl	8016edc <RegionCommonComputeTxPower>
 8017e6a:	0003      	movs	r3, r0
 8017e6c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8017e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8017fa8 <RegionEU868TxConfig+0x1d0>)
 8017e70:	68da      	ldr	r2, [r3, #12]
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	0018      	movs	r0, r3
 8017e78:	4949      	ldr	r1, [pc, #292]	@ (8017fa0 <RegionEU868TxConfig+0x1c8>)
 8017e7a:	0003      	movs	r3, r0
 8017e7c:	005b      	lsls	r3, r3, #1
 8017e7e:	181b      	adds	r3, r3, r0
 8017e80:	009b      	lsls	r3, r3, #2
 8017e82:	585b      	ldr	r3, [r3, r1]
 8017e84:	0018      	movs	r0, r3
 8017e86:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	785b      	ldrb	r3, [r3, #1]
 8017e8c:	b25b      	sxtb	r3, r3
 8017e8e:	2b07      	cmp	r3, #7
 8017e90:	d12e      	bne.n	8017ef0 <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017e92:	231f      	movs	r3, #31
 8017e94:	18fb      	adds	r3, r7, r3
 8017e96:	2200      	movs	r2, #0
 8017e98:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017e9a:	4b43      	ldr	r3, [pc, #268]	@ (8017fa8 <RegionEU868TxConfig+0x1d0>)
 8017e9c:	69dc      	ldr	r4, [r3, #28]
 8017e9e:	197b      	adds	r3, r7, r5
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	569a      	ldrsb	r2, [r3, r2]
 8017ea4:	0013      	movs	r3, r2
 8017ea6:	015b      	lsls	r3, r3, #5
 8017ea8:	1a9b      	subs	r3, r3, r2
 8017eaa:	009b      	lsls	r3, r3, #2
 8017eac:	189b      	adds	r3, r3, r2
 8017eae:	00db      	lsls	r3, r3, #3
 8017eb0:	001e      	movs	r6, r3
 8017eb2:	69ba      	ldr	r2, [r7, #24]
 8017eb4:	4d3d      	ldr	r5, [pc, #244]	@ (8017fac <RegionEU868TxConfig+0x1d4>)
 8017eb6:	2017      	movs	r0, #23
 8017eb8:	183b      	adds	r3, r7, r0
 8017eba:	2100      	movs	r1, #0
 8017ebc:	5659      	ldrsb	r1, [r3, r1]
 8017ebe:	231f      	movs	r3, #31
 8017ec0:	18fb      	adds	r3, r7, r3
 8017ec2:	7818      	ldrb	r0, [r3, #0]
 8017ec4:	23fa      	movs	r3, #250	@ 0xfa
 8017ec6:	011b      	lsls	r3, r3, #4
 8017ec8:	9308      	str	r3, [sp, #32]
 8017eca:	2300      	movs	r3, #0
 8017ecc:	9307      	str	r3, [sp, #28]
 8017ece:	2300      	movs	r3, #0
 8017ed0:	9306      	str	r3, [sp, #24]
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	9305      	str	r3, [sp, #20]
 8017ed6:	2301      	movs	r3, #1
 8017ed8:	9304      	str	r3, [sp, #16]
 8017eda:	2300      	movs	r3, #0
 8017edc:	9303      	str	r3, [sp, #12]
 8017ede:	2305      	movs	r3, #5
 8017ee0:	9302      	str	r3, [sp, #8]
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	9301      	str	r3, [sp, #4]
 8017ee6:	9600      	str	r6, [sp, #0]
 8017ee8:	0013      	movs	r3, r2
 8017eea:	002a      	movs	r2, r5
 8017eec:	47a0      	blx	r4
 8017eee:	e025      	b.n	8017f3c <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 8017ef0:	201f      	movs	r0, #31
 8017ef2:	183b      	adds	r3, r7, r0
 8017ef4:	2201      	movs	r2, #1
 8017ef6:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8017fa8 <RegionEU868TxConfig+0x1d0>)
 8017efa:	69dc      	ldr	r4, [r3, #28]
 8017efc:	231e      	movs	r3, #30
 8017efe:	18fb      	adds	r3, r7, r3
 8017f00:	781b      	ldrb	r3, [r3, #0]
 8017f02:	b25b      	sxtb	r3, r3
 8017f04:	69bd      	ldr	r5, [r7, #24]
 8017f06:	2217      	movs	r2, #23
 8017f08:	18ba      	adds	r2, r7, r2
 8017f0a:	2100      	movs	r1, #0
 8017f0c:	5651      	ldrsb	r1, [r2, r1]
 8017f0e:	183a      	adds	r2, r7, r0
 8017f10:	7810      	ldrb	r0, [r2, #0]
 8017f12:	22fa      	movs	r2, #250	@ 0xfa
 8017f14:	0112      	lsls	r2, r2, #4
 8017f16:	9208      	str	r2, [sp, #32]
 8017f18:	2200      	movs	r2, #0
 8017f1a:	9207      	str	r2, [sp, #28]
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	9206      	str	r2, [sp, #24]
 8017f20:	2200      	movs	r2, #0
 8017f22:	9205      	str	r2, [sp, #20]
 8017f24:	2201      	movs	r2, #1
 8017f26:	9204      	str	r2, [sp, #16]
 8017f28:	2200      	movs	r2, #0
 8017f2a:	9203      	str	r2, [sp, #12]
 8017f2c:	2208      	movs	r2, #8
 8017f2e:	9202      	str	r2, [sp, #8]
 8017f30:	2201      	movs	r2, #1
 8017f32:	9201      	str	r2, [sp, #4]
 8017f34:	9300      	str	r3, [sp, #0]
 8017f36:	002b      	movs	r3, r5
 8017f38:	2200      	movs	r2, #0
 8017f3a:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	781b      	ldrb	r3, [r3, #0]
 8017f40:	0019      	movs	r1, r3
 8017f42:	4a17      	ldr	r2, [pc, #92]	@ (8017fa0 <RegionEU868TxConfig+0x1c8>)
 8017f44:	000b      	movs	r3, r1
 8017f46:	005b      	lsls	r3, r3, #1
 8017f48:	185b      	adds	r3, r3, r1
 8017f4a:	009b      	lsls	r3, r3, #2
 8017f4c:	589a      	ldr	r2, [r3, r2]
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	785b      	ldrb	r3, [r3, #1]
 8017f52:	b25b      	sxtb	r3, r3
 8017f54:	0019      	movs	r1, r3
 8017f56:	0010      	movs	r0, r2
 8017f58:	f7ff f968 	bl	801722c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	2201      	movs	r2, #1
 8017f60:	569a      	ldrsb	r2, [r3, r2]
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	899b      	ldrh	r3, [r3, #12]
 8017f66:	0019      	movs	r1, r3
 8017f68:	0010      	movs	r0, r2
 8017f6a:	f7ff fa81 	bl	8017470 <GetTimeOnAir>
 8017f6e:	0002      	movs	r2, r0
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017f74:	4b0c      	ldr	r3, [pc, #48]	@ (8017fa8 <RegionEU868TxConfig+0x1d0>)
 8017f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f78:	68fa      	ldr	r2, [r7, #12]
 8017f7a:	8992      	ldrh	r2, [r2, #12]
 8017f7c:	b2d1      	uxtb	r1, r2
 8017f7e:	221f      	movs	r2, #31
 8017f80:	18ba      	adds	r2, r7, r2
 8017f82:	7812      	ldrb	r2, [r2, #0]
 8017f84:	0010      	movs	r0, r2
 8017f86:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	221d      	movs	r2, #29
 8017f8c:	18ba      	adds	r2, r7, r2
 8017f8e:	7812      	ldrb	r2, [r2, #0]
 8017f90:	701a      	strb	r2, [r3, #0]
    return true;
 8017f92:	2301      	movs	r3, #1
}
 8017f94:	0018      	movs	r0, r3
 8017f96:	46bd      	mov	sp, r7
 8017f98:	b009      	add	sp, #36	@ 0x24
 8017f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f9c:	0801e4a8 	.word	0x0801e4a8
 8017fa0:	200012f8 	.word	0x200012f8
 8017fa4:	20001430 	.word	0x20001430
 8017fa8:	0801e62c 	.word	0x0801e62c
 8017fac:	000061a8 	.word	0x000061a8

08017fb0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fb2:	b093      	sub	sp, #76	@ 0x4c
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	60f8      	str	r0, [r7, #12]
 8017fb8:	60b9      	str	r1, [r7, #8]
 8017fba:	607a      	str	r2, [r7, #4]
 8017fbc:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017fbe:	2347      	movs	r3, #71	@ 0x47
 8017fc0:	18fb      	adds	r3, r7, r3
 8017fc2:	2207      	movs	r2, #7
 8017fc4:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017fc6:	233c      	movs	r3, #60	@ 0x3c
 8017fc8:	18fb      	adds	r3, r7, r3
 8017fca:	0018      	movs	r0, r3
 8017fcc:	2306      	movs	r3, #6
 8017fce:	001a      	movs	r2, r3
 8017fd0:	2100      	movs	r1, #0
 8017fd2:	f005 f960 	bl	801d296 <memset>
    uint8_t nextIndex = 0;
 8017fd6:	2344      	movs	r3, #68	@ 0x44
 8017fd8:	18fb      	adds	r3, r7, r3
 8017fda:	2200      	movs	r2, #0
 8017fdc:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8017fde:	2346      	movs	r3, #70	@ 0x46
 8017fe0:	18fb      	adds	r3, r7, r3
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8017fe6:	233a      	movs	r3, #58	@ 0x3a
 8017fe8:	18fb      	adds	r3, r7, r3
 8017fea:	2200      	movs	r2, #0
 8017fec:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017fee:	e098      	b.n	8018122 <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	685a      	ldr	r2, [r3, #4]
 8017ff4:	2546      	movs	r5, #70	@ 0x46
 8017ff6:	197b      	adds	r3, r7, r5
 8017ff8:	781b      	ldrb	r3, [r3, #0]
 8017ffa:	18d3      	adds	r3, r2, r3
 8017ffc:	2644      	movs	r6, #68	@ 0x44
 8017ffe:	19bc      	adds	r4, r7, r6
 8018000:	203c      	movs	r0, #60	@ 0x3c
 8018002:	183a      	adds	r2, r7, r0
 8018004:	0011      	movs	r1, r2
 8018006:	0018      	movs	r0, r3
 8018008:	f7fe fe01 	bl	8016c0e <RegionCommonParseLinkAdrReq>
 801800c:	0003      	movs	r3, r0
 801800e:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8018010:	0032      	movs	r2, r6
 8018012:	18bb      	adds	r3, r7, r2
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d100      	bne.n	801801c <RegionEU868LinkAdrReq+0x6c>
 801801a:	e08b      	b.n	8018134 <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801801c:	197b      	adds	r3, r7, r5
 801801e:	1979      	adds	r1, r7, r5
 8018020:	18ba      	adds	r2, r7, r2
 8018022:	7809      	ldrb	r1, [r1, #0]
 8018024:	7812      	ldrb	r2, [r2, #0]
 8018026:	188a      	adds	r2, r1, r2
 8018028:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801802a:	2147      	movs	r1, #71	@ 0x47
 801802c:	187b      	adds	r3, r7, r1
 801802e:	2207      	movs	r2, #7
 8018030:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018032:	203c      	movs	r0, #60	@ 0x3c
 8018034:	183b      	adds	r3, r7, r0
 8018036:	889a      	ldrh	r2, [r3, #4]
 8018038:	243a      	movs	r4, #58	@ 0x3a
 801803a:	193b      	adds	r3, r7, r4
 801803c:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801803e:	183b      	adds	r3, r7, r0
 8018040:	78db      	ldrb	r3, [r3, #3]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d10a      	bne.n	801805c <RegionEU868LinkAdrReq+0xac>
 8018046:	193b      	adds	r3, r7, r4
 8018048:	881b      	ldrh	r3, [r3, #0]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d106      	bne.n	801805c <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 801804e:	187b      	adds	r3, r7, r1
 8018050:	187a      	adds	r2, r7, r1
 8018052:	7812      	ldrb	r2, [r2, #0]
 8018054:	2101      	movs	r1, #1
 8018056:	438a      	bics	r2, r1
 8018058:	701a      	strb	r2, [r3, #0]
 801805a:	e062      	b.n	8018122 <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801805c:	223c      	movs	r2, #60	@ 0x3c
 801805e:	18bb      	adds	r3, r7, r2
 8018060:	78db      	ldrb	r3, [r3, #3]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d003      	beq.n	801806e <RegionEU868LinkAdrReq+0xbe>
 8018066:	18bb      	adds	r3, r7, r2
 8018068:	78db      	ldrb	r3, [r3, #3]
 801806a:	2b05      	cmp	r3, #5
 801806c:	d904      	bls.n	8018078 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801806e:	233c      	movs	r3, #60	@ 0x3c
 8018070:	18fb      	adds	r3, r7, r3
 8018072:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018074:	2b06      	cmp	r3, #6
 8018076:	d907      	bls.n	8018088 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018078:	2247      	movs	r2, #71	@ 0x47
 801807a:	18bb      	adds	r3, r7, r2
 801807c:	18ba      	adds	r2, r7, r2
 801807e:	7812      	ldrb	r2, [r2, #0]
 8018080:	2101      	movs	r1, #1
 8018082:	438a      	bics	r2, r1
 8018084:	701a      	strb	r2, [r3, #0]
 8018086:	e04c      	b.n	8018122 <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018088:	2345      	movs	r3, #69	@ 0x45
 801808a:	18fb      	adds	r3, r7, r3
 801808c:	2200      	movs	r2, #0
 801808e:	701a      	strb	r2, [r3, #0]
 8018090:	e042      	b.n	8018118 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018092:	233c      	movs	r3, #60	@ 0x3c
 8018094:	18fb      	adds	r3, r7, r3
 8018096:	78db      	ldrb	r3, [r3, #3]
 8018098:	2b06      	cmp	r3, #6
 801809a:	d11a      	bne.n	80180d2 <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 801809c:	2045      	movs	r0, #69	@ 0x45
 801809e:	183b      	adds	r3, r7, r0
 80180a0:	781a      	ldrb	r2, [r3, #0]
 80180a2:	496d      	ldr	r1, [pc, #436]	@ (8018258 <RegionEU868LinkAdrReq+0x2a8>)
 80180a4:	0013      	movs	r3, r2
 80180a6:	005b      	lsls	r3, r3, #1
 80180a8:	189b      	adds	r3, r3, r2
 80180aa:	009b      	lsls	r3, r3, #2
 80180ac:	585b      	ldr	r3, [r3, r1]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d02c      	beq.n	801810c <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 80180b2:	183b      	adds	r3, r7, r0
 80180b4:	781b      	ldrb	r3, [r3, #0]
 80180b6:	2201      	movs	r2, #1
 80180b8:	409a      	lsls	r2, r3
 80180ba:	0013      	movs	r3, r2
 80180bc:	b21a      	sxth	r2, r3
 80180be:	213a      	movs	r1, #58	@ 0x3a
 80180c0:	187b      	adds	r3, r7, r1
 80180c2:	881b      	ldrh	r3, [r3, #0]
 80180c4:	b21b      	sxth	r3, r3
 80180c6:	4313      	orrs	r3, r2
 80180c8:	b21b      	sxth	r3, r3
 80180ca:	b29a      	uxth	r2, r3
 80180cc:	187b      	adds	r3, r7, r1
 80180ce:	801a      	strh	r2, [r3, #0]
 80180d0:	e01c      	b.n	801810c <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80180d2:	233a      	movs	r3, #58	@ 0x3a
 80180d4:	18fb      	adds	r3, r7, r3
 80180d6:	881b      	ldrh	r3, [r3, #0]
 80180d8:	001a      	movs	r2, r3
 80180da:	2145      	movs	r1, #69	@ 0x45
 80180dc:	187b      	adds	r3, r7, r1
 80180de:	781b      	ldrb	r3, [r3, #0]
 80180e0:	411a      	asrs	r2, r3
 80180e2:	0013      	movs	r3, r2
 80180e4:	2201      	movs	r2, #1
 80180e6:	4013      	ands	r3, r2
 80180e8:	d010      	beq.n	801810c <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 80180ea:	187b      	adds	r3, r7, r1
 80180ec:	781a      	ldrb	r2, [r3, #0]
 80180ee:	495a      	ldr	r1, [pc, #360]	@ (8018258 <RegionEU868LinkAdrReq+0x2a8>)
 80180f0:	0013      	movs	r3, r2
 80180f2:	005b      	lsls	r3, r3, #1
 80180f4:	189b      	adds	r3, r3, r2
 80180f6:	009b      	lsls	r3, r3, #2
 80180f8:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d106      	bne.n	801810c <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80180fe:	2247      	movs	r2, #71	@ 0x47
 8018100:	18bb      	adds	r3, r7, r2
 8018102:	18ba      	adds	r2, r7, r2
 8018104:	7812      	ldrb	r2, [r2, #0]
 8018106:	2101      	movs	r1, #1
 8018108:	438a      	bics	r2, r1
 801810a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801810c:	2145      	movs	r1, #69	@ 0x45
 801810e:	187b      	adds	r3, r7, r1
 8018110:	781a      	ldrb	r2, [r3, #0]
 8018112:	187b      	adds	r3, r7, r1
 8018114:	3201      	adds	r2, #1
 8018116:	701a      	strb	r2, [r3, #0]
 8018118:	2345      	movs	r3, #69	@ 0x45
 801811a:	18fb      	adds	r3, r7, r3
 801811c:	781b      	ldrb	r3, [r3, #0]
 801811e:	2b0f      	cmp	r3, #15
 8018120:	d9b7      	bls.n	8018092 <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	7a1b      	ldrb	r3, [r3, #8]
 8018126:	2246      	movs	r2, #70	@ 0x46
 8018128:	18ba      	adds	r2, r7, r2
 801812a:	7812      	ldrb	r2, [r2, #0]
 801812c:	429a      	cmp	r2, r3
 801812e:	d200      	bcs.n	8018132 <RegionEU868LinkAdrReq+0x182>
 8018130:	e75e      	b.n	8017ff0 <RegionEU868LinkAdrReq+0x40>
 8018132:	e000      	b.n	8018136 <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 8018134:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018136:	2134      	movs	r1, #52	@ 0x34
 8018138:	187b      	adds	r3, r7, r1
 801813a:	2202      	movs	r2, #2
 801813c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	7a5a      	ldrb	r2, [r3, #9]
 8018142:	187b      	adds	r3, r7, r1
 8018144:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018146:	187b      	adds	r3, r7, r1
 8018148:	0018      	movs	r0, r3
 801814a:	f7ff f9ef 	bl	801752c <RegionEU868GetPhyParam>
 801814e:	0003      	movs	r3, r0
 8018150:	001a      	movs	r2, r3
 8018152:	2030      	movs	r0, #48	@ 0x30
 8018154:	183b      	adds	r3, r7, r0
 8018156:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018158:	2110      	movs	r1, #16
 801815a:	187b      	adds	r3, r7, r1
 801815c:	2447      	movs	r4, #71	@ 0x47
 801815e:	193a      	adds	r2, r7, r4
 8018160:	7812      	ldrb	r2, [r2, #0]
 8018162:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	7a9a      	ldrb	r2, [r3, #10]
 8018168:	187b      	adds	r3, r7, r1
 801816a:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801816c:	253c      	movs	r5, #60	@ 0x3c
 801816e:	197b      	adds	r3, r7, r5
 8018170:	2201      	movs	r2, #1
 8018172:	569a      	ldrsb	r2, [r3, r2]
 8018174:	187b      	adds	r3, r7, r1
 8018176:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018178:	197b      	adds	r3, r7, r5
 801817a:	2202      	movs	r2, #2
 801817c:	569a      	ldrsb	r2, [r3, r2]
 801817e:	187b      	adds	r3, r7, r1
 8018180:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018182:	197b      	adds	r3, r7, r5
 8018184:	781a      	ldrb	r2, [r3, #0]
 8018186:	187b      	adds	r3, r7, r1
 8018188:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	220b      	movs	r2, #11
 801818e:	569a      	ldrsb	r2, [r3, r2]
 8018190:	187b      	adds	r3, r7, r1
 8018192:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	220c      	movs	r2, #12
 8018198:	569a      	ldrsb	r2, [r3, r2]
 801819a:	187b      	adds	r3, r7, r1
 801819c:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	7b5b      	ldrb	r3, [r3, #13]
 80181a2:	b25a      	sxtb	r2, r3
 80181a4:	187b      	adds	r3, r7, r1
 80181a6:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80181a8:	187b      	adds	r3, r7, r1
 80181aa:	2210      	movs	r2, #16
 80181ac:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80181ae:	187b      	adds	r3, r7, r1
 80181b0:	223a      	movs	r2, #58	@ 0x3a
 80181b2:	18ba      	adds	r2, r7, r2
 80181b4:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80181b6:	183b      	adds	r3, r7, r0
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	b25a      	sxtb	r2, r3
 80181bc:	0008      	movs	r0, r1
 80181be:	183b      	adds	r3, r7, r0
 80181c0:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80181c2:	183b      	adds	r3, r7, r0
 80181c4:	2207      	movs	r2, #7
 80181c6:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 80181c8:	183b      	adds	r3, r7, r0
 80181ca:	4a23      	ldr	r2, [pc, #140]	@ (8018258 <RegionEU868LinkAdrReq+0x2a8>)
 80181cc:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80181ce:	183b      	adds	r3, r7, r0
 80181d0:	2200      	movs	r2, #0
 80181d2:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80181d4:	183b      	adds	r3, r7, r0
 80181d6:	2200      	movs	r2, #0
 80181d8:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80181da:	183b      	adds	r3, r7, r0
 80181dc:	68fa      	ldr	r2, [r7, #12]
 80181de:	6812      	ldr	r2, [r2, #0]
 80181e0:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80181e2:	0026      	movs	r6, r4
 80181e4:	193c      	adds	r4, r7, r4
 80181e6:	0029      	movs	r1, r5
 80181e8:	187d      	adds	r5, r7, r1
 80181ea:	187b      	adds	r3, r7, r1
 80181ec:	1c9a      	adds	r2, r3, #2
 80181ee:	187b      	adds	r3, r7, r1
 80181f0:	1c59      	adds	r1, r3, #1
 80181f2:	1838      	adds	r0, r7, r0
 80181f4:	002b      	movs	r3, r5
 80181f6:	f7fe fd5f 	bl	8016cb8 <RegionCommonLinkAdrReqVerifyParams>
 80181fa:	0003      	movs	r3, r0
 80181fc:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80181fe:	19bb      	adds	r3, r7, r6
 8018200:	781b      	ldrb	r3, [r3, #0]
 8018202:	2b07      	cmp	r3, #7
 8018204:	d10c      	bne.n	8018220 <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018206:	4b15      	ldr	r3, [pc, #84]	@ (801825c <RegionEU868LinkAdrReq+0x2ac>)
 8018208:	2202      	movs	r2, #2
 801820a:	2100      	movs	r1, #0
 801820c:	0018      	movs	r0, r3
 801820e:	f000 fbe9 	bl	80189e4 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8018212:	223a      	movs	r2, #58	@ 0x3a
 8018214:	18bb      	adds	r3, r7, r2
 8018216:	8819      	ldrh	r1, [r3, #0]
 8018218:	4a0f      	ldr	r2, [pc, #60]	@ (8018258 <RegionEU868LinkAdrReq+0x2a8>)
 801821a:	239c      	movs	r3, #156	@ 0x9c
 801821c:	005b      	lsls	r3, r3, #1
 801821e:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018220:	213c      	movs	r1, #60	@ 0x3c
 8018222:	187b      	adds	r3, r7, r1
 8018224:	2201      	movs	r2, #1
 8018226:	569a      	ldrsb	r2, [r3, r2]
 8018228:	68bb      	ldr	r3, [r7, #8]
 801822a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801822c:	187b      	adds	r3, r7, r1
 801822e:	2202      	movs	r2, #2
 8018230:	569a      	ldrsb	r2, [r3, r2]
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018236:	187b      	adds	r3, r7, r1
 8018238:	781a      	ldrb	r2, [r3, #0]
 801823a:	683b      	ldr	r3, [r7, #0]
 801823c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801823e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018240:	2246      	movs	r2, #70	@ 0x46
 8018242:	18ba      	adds	r2, r7, r2
 8018244:	7812      	ldrb	r2, [r2, #0]
 8018246:	701a      	strb	r2, [r3, #0]

    return status;
 8018248:	2347      	movs	r3, #71	@ 0x47
 801824a:	18fb      	adds	r3, r7, r3
 801824c:	781b      	ldrb	r3, [r3, #0]
}
 801824e:	0018      	movs	r0, r3
 8018250:	46bd      	mov	sp, r7
 8018252:	b013      	add	sp, #76	@ 0x4c
 8018254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018256:	46c0      	nop			@ (mov r8, r8)
 8018258:	200012f8 	.word	0x200012f8
 801825c:	20001430 	.word	0x20001430

08018260 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018260:	b590      	push	{r4, r7, lr}
 8018262:	b085      	sub	sp, #20
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018268:	240f      	movs	r4, #15
 801826a:	193b      	adds	r3, r7, r4
 801826c:	2207      	movs	r2, #7
 801826e:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018270:	210e      	movs	r1, #14
 8018272:	187b      	adds	r3, r7, r1
 8018274:	2200      	movs	r2, #0
 8018276:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	685b      	ldr	r3, [r3, #4]
 801827c:	187a      	adds	r2, r7, r1
 801827e:	0011      	movs	r1, r2
 8018280:	0018      	movs	r0, r3
 8018282:	f7ff f87d 	bl	8017380 <VerifyRfFreq>
 8018286:	0003      	movs	r3, r0
 8018288:	001a      	movs	r2, r3
 801828a:	2301      	movs	r3, #1
 801828c:	4053      	eors	r3, r2
 801828e:	b2db      	uxtb	r3, r3
 8018290:	2b00      	cmp	r3, #0
 8018292:	d005      	beq.n	80182a0 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018294:	193b      	adds	r3, r7, r4
 8018296:	193a      	adds	r2, r7, r4
 8018298:	7812      	ldrb	r2, [r2, #0]
 801829a:	2101      	movs	r1, #1
 801829c:	438a      	bics	r2, r1
 801829e:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	781b      	ldrb	r3, [r3, #0]
 80182a4:	b25b      	sxtb	r3, r3
 80182a6:	2207      	movs	r2, #7
 80182a8:	2100      	movs	r1, #0
 80182aa:	0018      	movs	r0, r3
 80182ac:	f7fe fad5 	bl	801685a <RegionCommonValueInRange>
 80182b0:	1e03      	subs	r3, r0, #0
 80182b2:	d106      	bne.n	80182c2 <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 80182b4:	220f      	movs	r2, #15
 80182b6:	18bb      	adds	r3, r7, r2
 80182b8:	18ba      	adds	r2, r7, r2
 80182ba:	7812      	ldrb	r2, [r2, #0]
 80182bc:	2102      	movs	r1, #2
 80182be:	438a      	bics	r2, r1
 80182c0:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	785b      	ldrb	r3, [r3, #1]
 80182c6:	b25b      	sxtb	r3, r3
 80182c8:	2205      	movs	r2, #5
 80182ca:	2100      	movs	r1, #0
 80182cc:	0018      	movs	r0, r3
 80182ce:	f7fe fac4 	bl	801685a <RegionCommonValueInRange>
 80182d2:	1e03      	subs	r3, r0, #0
 80182d4:	d106      	bne.n	80182e4 <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80182d6:	220f      	movs	r2, #15
 80182d8:	18bb      	adds	r3, r7, r2
 80182da:	18ba      	adds	r2, r7, r2
 80182dc:	7812      	ldrb	r2, [r2, #0]
 80182de:	2104      	movs	r1, #4
 80182e0:	438a      	bics	r2, r1
 80182e2:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80182e4:	230f      	movs	r3, #15
 80182e6:	18fb      	adds	r3, r7, r3
 80182e8:	781b      	ldrb	r3, [r3, #0]
}
 80182ea:	0018      	movs	r0, r3
 80182ec:	46bd      	mov	sp, r7
 80182ee:	b005      	add	sp, #20
 80182f0:	bd90      	pop	{r4, r7, pc}

080182f2 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80182f2:	b590      	push	{r4, r7, lr}
 80182f4:	b087      	sub	sp, #28
 80182f6:	af00      	add	r7, sp, #0
 80182f8:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80182fa:	2417      	movs	r4, #23
 80182fc:	193b      	adds	r3, r7, r4
 80182fe:	2203      	movs	r2, #3
 8018300:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d118      	bne.n	801833e <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	791b      	ldrb	r3, [r3, #4]
 8018310:	b25b      	sxtb	r3, r3
 8018312:	b2da      	uxtb	r2, r3
 8018314:	2108      	movs	r1, #8
 8018316:	187b      	adds	r3, r7, r1
 8018318:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801831a:	187b      	adds	r3, r7, r1
 801831c:	0018      	movs	r0, r3
 801831e:	f000 fa35 	bl	801878c <RegionEU868ChannelsRemove>
 8018322:	0003      	movs	r3, r0
 8018324:	001a      	movs	r2, r3
 8018326:	2301      	movs	r3, #1
 8018328:	4053      	eors	r3, r2
 801832a:	b2db      	uxtb	r3, r3
 801832c:	2b00      	cmp	r3, #0
 801832e:	d041      	beq.n	80183b4 <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 8018330:	193b      	adds	r3, r7, r4
 8018332:	193a      	adds	r2, r7, r4
 8018334:	7812      	ldrb	r2, [r2, #0]
 8018336:	2103      	movs	r1, #3
 8018338:	438a      	bics	r2, r1
 801833a:	701a      	strb	r2, [r3, #0]
 801833c:	e03a      	b.n	80183b4 <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681a      	ldr	r2, [r3, #0]
 8018342:	210c      	movs	r1, #12
 8018344:	187b      	adds	r3, r7, r1
 8018346:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	791b      	ldrb	r3, [r3, #4]
 801834c:	b25b      	sxtb	r3, r3
 801834e:	b2da      	uxtb	r2, r3
 8018350:	187b      	adds	r3, r7, r1
 8018352:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018354:	187b      	adds	r3, r7, r1
 8018356:	0018      	movs	r0, r3
 8018358:	f000 f954 	bl	8018604 <RegionEU868ChannelAdd>
 801835c:	0003      	movs	r3, r0
 801835e:	2b06      	cmp	r3, #6
 8018360:	d017      	beq.n	8018392 <RegionEU868NewChannelReq+0xa0>
 8018362:	dc1e      	bgt.n	80183a2 <RegionEU868NewChannelReq+0xb0>
 8018364:	2b05      	cmp	r3, #5
 8018366:	d00c      	beq.n	8018382 <RegionEU868NewChannelReq+0x90>
 8018368:	dc1b      	bgt.n	80183a2 <RegionEU868NewChannelReq+0xb0>
 801836a:	2b00      	cmp	r3, #0
 801836c:	d021      	beq.n	80183b2 <RegionEU868NewChannelReq+0xc0>
 801836e:	2b04      	cmp	r3, #4
 8018370:	d117      	bne.n	80183a2 <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018372:	2217      	movs	r2, #23
 8018374:	18bb      	adds	r3, r7, r2
 8018376:	18ba      	adds	r2, r7, r2
 8018378:	7812      	ldrb	r2, [r2, #0]
 801837a:	2101      	movs	r1, #1
 801837c:	438a      	bics	r2, r1
 801837e:	701a      	strb	r2, [r3, #0]
                break;
 8018380:	e018      	b.n	80183b4 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018382:	2217      	movs	r2, #23
 8018384:	18bb      	adds	r3, r7, r2
 8018386:	18ba      	adds	r2, r7, r2
 8018388:	7812      	ldrb	r2, [r2, #0]
 801838a:	2102      	movs	r1, #2
 801838c:	438a      	bics	r2, r1
 801838e:	701a      	strb	r2, [r3, #0]
                break;
 8018390:	e010      	b.n	80183b4 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018392:	2217      	movs	r2, #23
 8018394:	18bb      	adds	r3, r7, r2
 8018396:	18ba      	adds	r2, r7, r2
 8018398:	7812      	ldrb	r2, [r2, #0]
 801839a:	2103      	movs	r1, #3
 801839c:	438a      	bics	r2, r1
 801839e:	701a      	strb	r2, [r3, #0]
                break;
 80183a0:	e008      	b.n	80183b4 <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 80183a2:	2217      	movs	r2, #23
 80183a4:	18bb      	adds	r3, r7, r2
 80183a6:	18ba      	adds	r2, r7, r2
 80183a8:	7812      	ldrb	r2, [r2, #0]
 80183aa:	2103      	movs	r1, #3
 80183ac:	438a      	bics	r2, r1
 80183ae:	701a      	strb	r2, [r3, #0]
                break;
 80183b0:	e000      	b.n	80183b4 <RegionEU868NewChannelReq+0xc2>
                break;
 80183b2:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }

    return status;
 80183b4:	2317      	movs	r3, #23
 80183b6:	18fb      	adds	r3, r7, r3
 80183b8:	781b      	ldrb	r3, [r3, #0]
}
 80183ba:	0018      	movs	r0, r3
 80183bc:	46bd      	mov	sp, r7
 80183be:	b007      	add	sp, #28
 80183c0:	bd90      	pop	{r4, r7, pc}

080183c2 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80183c2:	b580      	push	{r7, lr}
 80183c4:	b082      	sub	sp, #8
 80183c6:	af00      	add	r7, sp, #0
 80183c8:	6078      	str	r0, [r7, #4]
    return -1;
 80183ca:	2301      	movs	r3, #1
 80183cc:	425b      	negs	r3, r3
}
 80183ce:	0018      	movs	r0, r3
 80183d0:	46bd      	mov	sp, r7
 80183d2:	b002      	add	sp, #8
 80183d4:	bd80      	pop	{r7, pc}
	...

080183d8 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80183d8:	b590      	push	{r4, r7, lr}
 80183da:	b085      	sub	sp, #20
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80183e0:	240f      	movs	r4, #15
 80183e2:	193b      	adds	r3, r7, r4
 80183e4:	2203      	movs	r2, #3
 80183e6:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 80183e8:	210e      	movs	r1, #14
 80183ea:	187b      	adds	r3, r7, r1
 80183ec:	2200      	movs	r2, #0
 80183ee:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	685b      	ldr	r3, [r3, #4]
 80183f4:	187a      	adds	r2, r7, r1
 80183f6:	0011      	movs	r1, r2
 80183f8:	0018      	movs	r0, r3
 80183fa:	f7fe ffc1 	bl	8017380 <VerifyRfFreq>
 80183fe:	0003      	movs	r3, r0
 8018400:	001a      	movs	r2, r3
 8018402:	2301      	movs	r3, #1
 8018404:	4053      	eors	r3, r2
 8018406:	b2db      	uxtb	r3, r3
 8018408:	2b00      	cmp	r3, #0
 801840a:	d005      	beq.n	8018418 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 801840c:	193b      	adds	r3, r7, r4
 801840e:	193a      	adds	r2, r7, r4
 8018410:	7812      	ldrb	r2, [r2, #0]
 8018412:	2101      	movs	r1, #1
 8018414:	438a      	bics	r2, r1
 8018416:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	781b      	ldrb	r3, [r3, #0]
 801841c:	0019      	movs	r1, r3
 801841e:	4a14      	ldr	r2, [pc, #80]	@ (8018470 <RegionEU868DlChannelReq+0x98>)
 8018420:	000b      	movs	r3, r1
 8018422:	005b      	lsls	r3, r3, #1
 8018424:	185b      	adds	r3, r3, r1
 8018426:	009b      	lsls	r3, r3, #2
 8018428:	589b      	ldr	r3, [r3, r2]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d106      	bne.n	801843c <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 801842e:	220f      	movs	r2, #15
 8018430:	18bb      	adds	r3, r7, r2
 8018432:	18ba      	adds	r2, r7, r2
 8018434:	7812      	ldrb	r2, [r2, #0]
 8018436:	2102      	movs	r1, #2
 8018438:	438a      	bics	r2, r1
 801843a:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801843c:	230f      	movs	r3, #15
 801843e:	18fb      	adds	r3, r7, r3
 8018440:	781b      	ldrb	r3, [r3, #0]
 8018442:	2b03      	cmp	r3, #3
 8018444:	d10c      	bne.n	8018460 <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	781b      	ldrb	r3, [r3, #0]
 801844a:	0018      	movs	r0, r3
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	685a      	ldr	r2, [r3, #4]
 8018450:	4907      	ldr	r1, [pc, #28]	@ (8018470 <RegionEU868DlChannelReq+0x98>)
 8018452:	0003      	movs	r3, r0
 8018454:	005b      	lsls	r3, r3, #1
 8018456:	181b      	adds	r3, r3, r0
 8018458:	009b      	lsls	r3, r3, #2
 801845a:	18cb      	adds	r3, r1, r3
 801845c:	3304      	adds	r3, #4
 801845e:	601a      	str	r2, [r3, #0]
    }

    return status;
 8018460:	230f      	movs	r3, #15
 8018462:	18fb      	adds	r3, r7, r3
 8018464:	781b      	ldrb	r3, [r3, #0]
}
 8018466:	0018      	movs	r0, r3
 8018468:	46bd      	mov	sp, r7
 801846a:	b005      	add	sp, #20
 801846c:	bd90      	pop	{r4, r7, pc}
 801846e:	46c0      	nop			@ (mov r8, r8)
 8018470:	200012f8 	.word	0x200012f8

08018474 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b082      	sub	sp, #8
 8018478:	af00      	add	r7, sp, #0
 801847a:	0002      	movs	r2, r0
 801847c:	1dfb      	adds	r3, r7, #7
 801847e:	701a      	strb	r2, [r3, #0]
 8018480:	1dbb      	adds	r3, r7, #6
 8018482:	1c0a      	adds	r2, r1, #0
 8018484:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8018486:	1dfb      	adds	r3, r7, #7
 8018488:	781b      	ldrb	r3, [r3, #0]
 801848a:	b25b      	sxtb	r3, r3
}
 801848c:	0018      	movs	r0, r3
 801848e:	46bd      	mov	sp, r7
 8018490:	b002      	add	sp, #8
 8018492:	bd80      	pop	{r7, pc}

08018494 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018496:	b099      	sub	sp, #100	@ 0x64
 8018498:	af02      	add	r7, sp, #8
 801849a:	60f8      	str	r0, [r7, #12]
 801849c:	60b9      	str	r1, [r7, #8]
 801849e:	607a      	str	r2, [r7, #4]
 80184a0:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 80184a2:	2356      	movs	r3, #86	@ 0x56
 80184a4:	18fb      	adds	r3, r7, r3
 80184a6:	2200      	movs	r2, #0
 80184a8:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 80184aa:	2355      	movs	r3, #85	@ 0x55
 80184ac:	18fb      	adds	r3, r7, r3
 80184ae:	2200      	movs	r2, #0
 80184b0:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80184b2:	2344      	movs	r3, #68	@ 0x44
 80184b4:	18fb      	adds	r3, r7, r3
 80184b6:	2200      	movs	r2, #0
 80184b8:	601a      	str	r2, [r3, #0]
 80184ba:	3304      	adds	r3, #4
 80184bc:	220c      	movs	r2, #12
 80184be:	2100      	movs	r1, #0
 80184c0:	0018      	movs	r0, r3
 80184c2:	f004 fee8 	bl	801d296 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80184c6:	2357      	movs	r3, #87	@ 0x57
 80184c8:	18fb      	adds	r3, r7, r3
 80184ca:	220c      	movs	r2, #12
 80184cc:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80184ce:	4b4a      	ldr	r3, [pc, #296]	@ (80185f8 <RegionEU868NextChannel+0x164>)
 80184d0:	2201      	movs	r2, #1
 80184d2:	2100      	movs	r1, #0
 80184d4:	0018      	movs	r0, r3
 80184d6:	f7fe fa28 	bl	801692a <RegionCommonCountChannels>
 80184da:	1e03      	subs	r3, r0, #0
 80184dc:	d10a      	bne.n	80184f4 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80184de:	4a47      	ldr	r2, [pc, #284]	@ (80185fc <RegionEU868NextChannel+0x168>)
 80184e0:	239c      	movs	r3, #156	@ 0x9c
 80184e2:	005b      	lsls	r3, r3, #1
 80184e4:	5ad3      	ldrh	r3, [r2, r3]
 80184e6:	2207      	movs	r2, #7
 80184e8:	4313      	orrs	r3, r2
 80184ea:	b299      	uxth	r1, r3
 80184ec:	4a43      	ldr	r2, [pc, #268]	@ (80185fc <RegionEU868NextChannel+0x168>)
 80184ee:	239c      	movs	r3, #156	@ 0x9c
 80184f0:	005b      	lsls	r3, r3, #1
 80184f2:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	7a5a      	ldrb	r2, [r3, #9]
 80184f8:	2110      	movs	r1, #16
 80184fa:	187b      	adds	r3, r7, r1
 80184fc:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	7a1b      	ldrb	r3, [r3, #8]
 8018502:	b25b      	sxtb	r3, r3
 8018504:	b2da      	uxtb	r2, r3
 8018506:	187b      	adds	r3, r7, r1
 8018508:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 801850a:	000d      	movs	r5, r1
 801850c:	197b      	adds	r3, r7, r5
 801850e:	4a3a      	ldr	r2, [pc, #232]	@ (80185f8 <RegionEU868NextChannel+0x164>)
 8018510:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 8018512:	197b      	adds	r3, r7, r5
 8018514:	4a39      	ldr	r2, [pc, #228]	@ (80185fc <RegionEU868NextChannel+0x168>)
 8018516:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 8018518:	197b      	adds	r3, r7, r5
 801851a:	4a39      	ldr	r2, [pc, #228]	@ (8018600 <RegionEU868NextChannel+0x16c>)
 801851c:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801851e:	197b      	adds	r3, r7, r5
 8018520:	2210      	movs	r2, #16
 8018522:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 8018524:	197b      	adds	r3, r7, r5
 8018526:	2207      	movs	r2, #7
 8018528:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	681a      	ldr	r2, [r3, #0]
 801852e:	2424      	movs	r4, #36	@ 0x24
 8018530:	193b      	adds	r3, r7, r4
 8018532:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	685a      	ldr	r2, [r3, #4]
 8018538:	193b      	adds	r3, r7, r4
 801853a:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	7a9a      	ldrb	r2, [r3, #10]
 8018540:	193b      	adds	r3, r7, r4
 8018542:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018544:	193b      	adds	r3, r7, r4
 8018546:	2206      	movs	r2, #6
 8018548:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801854a:	193b      	adds	r3, r7, r4
 801854c:	68fa      	ldr	r2, [r7, #12]
 801854e:	330c      	adds	r3, #12
 8018550:	320c      	adds	r2, #12
 8018552:	ca03      	ldmia	r2!, {r0, r1}
 8018554:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	7d1a      	ldrb	r2, [r3, #20]
 801855a:	193b      	adds	r3, r7, r4
 801855c:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	2208      	movs	r2, #8
 8018562:	569a      	ldrsb	r2, [r3, r2]
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	8adb      	ldrh	r3, [r3, #22]
 8018568:	0019      	movs	r1, r3
 801856a:	0010      	movs	r0, r2
 801856c:	f7fe ff80 	bl	8017470 <GetTimeOnAir>
 8018570:	0002      	movs	r2, r0
 8018572:	0020      	movs	r0, r4
 8018574:	183b      	adds	r3, r7, r0
 8018576:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018578:	183b      	adds	r3, r7, r0
 801857a:	197a      	adds	r2, r7, r5
 801857c:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801857e:	2657      	movs	r6, #87	@ 0x57
 8018580:	19bc      	adds	r4, r7, r6
 8018582:	2356      	movs	r3, #86	@ 0x56
 8018584:	18fd      	adds	r5, r7, r3
 8018586:	2244      	movs	r2, #68	@ 0x44
 8018588:	18ba      	adds	r2, r7, r2
 801858a:	6839      	ldr	r1, [r7, #0]
 801858c:	1838      	adds	r0, r7, r0
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	9301      	str	r3, [sp, #4]
 8018592:	2355      	movs	r3, #85	@ 0x55
 8018594:	18fb      	adds	r3, r7, r3
 8018596:	9300      	str	r3, [sp, #0]
 8018598:	002b      	movs	r3, r5
 801859a:	f7fe fdc7 	bl	801712c <RegionCommonIdentifyChannels>
 801859e:	0003      	movs	r3, r0
 80185a0:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80185a2:	19bb      	adds	r3, r7, r6
 80185a4:	781b      	ldrb	r3, [r3, #0]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d10e      	bne.n	80185c8 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80185aa:	2356      	movs	r3, #86	@ 0x56
 80185ac:	18fb      	adds	r3, r7, r3
 80185ae:	781b      	ldrb	r3, [r3, #0]
 80185b0:	3b01      	subs	r3, #1
 80185b2:	0019      	movs	r1, r3
 80185b4:	2000      	movs	r0, #0
 80185b6:	f000 f9c1 	bl	801893c <randr>
 80185ba:	0002      	movs	r2, r0
 80185bc:	2344      	movs	r3, #68	@ 0x44
 80185be:	18fb      	adds	r3, r7, r3
 80185c0:	5c9a      	ldrb	r2, [r3, r2]
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	701a      	strb	r2, [r3, #0]
 80185c6:	e00f      	b.n	80185e8 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80185c8:	2357      	movs	r3, #87	@ 0x57
 80185ca:	18fb      	adds	r3, r7, r3
 80185cc:	781b      	ldrb	r3, [r3, #0]
 80185ce:	2b0c      	cmp	r3, #12
 80185d0:	d10a      	bne.n	80185e8 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80185d2:	4a0a      	ldr	r2, [pc, #40]	@ (80185fc <RegionEU868NextChannel+0x168>)
 80185d4:	239c      	movs	r3, #156	@ 0x9c
 80185d6:	005b      	lsls	r3, r3, #1
 80185d8:	5ad3      	ldrh	r3, [r2, r3]
 80185da:	2207      	movs	r2, #7
 80185dc:	4313      	orrs	r3, r2
 80185de:	b299      	uxth	r1, r3
 80185e0:	4a06      	ldr	r2, [pc, #24]	@ (80185fc <RegionEU868NextChannel+0x168>)
 80185e2:	239c      	movs	r3, #156	@ 0x9c
 80185e4:	005b      	lsls	r3, r3, #1
 80185e6:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 80185e8:	2357      	movs	r3, #87	@ 0x57
 80185ea:	18fb      	adds	r3, r7, r3
 80185ec:	781b      	ldrb	r3, [r3, #0]
}
 80185ee:	0018      	movs	r0, r3
 80185f0:	46bd      	mov	sp, r7
 80185f2:	b017      	add	sp, #92	@ 0x5c
 80185f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185f6:	46c0      	nop			@ (mov r8, r8)
 80185f8:	20001430 	.word	0x20001430
 80185fc:	200012f8 	.word	0x200012f8
 8018600:	200013b8 	.word	0x200013b8

08018604 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018604:	b590      	push	{r4, r7, lr}
 8018606:	b085      	sub	sp, #20
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 801860c:	230c      	movs	r3, #12
 801860e:	18fb      	adds	r3, r7, r3
 8018610:	2200      	movs	r2, #0
 8018612:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8018614:	230f      	movs	r3, #15
 8018616:	18fb      	adds	r3, r7, r3
 8018618:	2200      	movs	r2, #0
 801861a:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 801861c:	230e      	movs	r3, #14
 801861e:	18fb      	adds	r3, r7, r3
 8018620:	2200      	movs	r2, #0
 8018622:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8018624:	210d      	movs	r1, #13
 8018626:	187b      	adds	r3, r7, r1
 8018628:	687a      	ldr	r2, [r7, #4]
 801862a:	7912      	ldrb	r2, [r2, #4]
 801862c:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801862e:	187b      	adds	r3, r7, r1
 8018630:	781b      	ldrb	r3, [r3, #0]
 8018632:	2b02      	cmp	r3, #2
 8018634:	d801      	bhi.n	801863a <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018636:	2306      	movs	r3, #6
 8018638:	e0a1      	b.n	801877e <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801863a:	230d      	movs	r3, #13
 801863c:	18fb      	adds	r3, r7, r3
 801863e:	781b      	ldrb	r3, [r3, #0]
 8018640:	2b0f      	cmp	r3, #15
 8018642:	d901      	bls.n	8018648 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018644:	2303      	movs	r3, #3
 8018646:	e09a      	b.n	801877e <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	7a1b      	ldrb	r3, [r3, #8]
 801864e:	011b      	lsls	r3, r3, #4
 8018650:	b25b      	sxtb	r3, r3
 8018652:	111b      	asrs	r3, r3, #4
 8018654:	b25b      	sxtb	r3, r3
 8018656:	2207      	movs	r2, #7
 8018658:	2100      	movs	r1, #0
 801865a:	0018      	movs	r0, r3
 801865c:	f7fe f8fd 	bl	801685a <RegionCommonValueInRange>
 8018660:	1e03      	subs	r3, r0, #0
 8018662:	d103      	bne.n	801866c <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8018664:	230f      	movs	r3, #15
 8018666:	18fb      	adds	r3, r7, r3
 8018668:	2201      	movs	r2, #1
 801866a:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	7a1b      	ldrb	r3, [r3, #8]
 8018672:	b25b      	sxtb	r3, r3
 8018674:	111b      	asrs	r3, r3, #4
 8018676:	b25b      	sxtb	r3, r3
 8018678:	2207      	movs	r2, #7
 801867a:	2100      	movs	r1, #0
 801867c:	0018      	movs	r0, r3
 801867e:	f7fe f8ec 	bl	801685a <RegionCommonValueInRange>
 8018682:	1e03      	subs	r3, r0, #0
 8018684:	d103      	bne.n	801868e <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8018686:	230f      	movs	r3, #15
 8018688:	18fb      	adds	r3, r7, r3
 801868a:	2201      	movs	r2, #1
 801868c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	7a1b      	ldrb	r3, [r3, #8]
 8018694:	011b      	lsls	r3, r3, #4
 8018696:	b25b      	sxtb	r3, r3
 8018698:	111b      	asrs	r3, r3, #4
 801869a:	b25a      	sxtb	r2, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	7a1b      	ldrb	r3, [r3, #8]
 80186a2:	b25b      	sxtb	r3, r3
 80186a4:	111b      	asrs	r3, r3, #4
 80186a6:	b25b      	sxtb	r3, r3
 80186a8:	429a      	cmp	r2, r3
 80186aa:	dd03      	ble.n	80186b4 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 80186ac:	230f      	movs	r3, #15
 80186ae:	18fb      	adds	r3, r7, r3
 80186b0:	2201      	movs	r2, #1
 80186b2:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 80186b4:	240e      	movs	r4, #14
 80186b6:	193b      	adds	r3, r7, r4
 80186b8:	781b      	ldrb	r3, [r3, #0]
 80186ba:	2201      	movs	r2, #1
 80186bc:	4053      	eors	r3, r2
 80186be:	b2db      	uxtb	r3, r3
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d012      	beq.n	80186ea <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	220c      	movs	r2, #12
 80186cc:	18ba      	adds	r2, r7, r2
 80186ce:	0011      	movs	r1, r2
 80186d0:	0018      	movs	r0, r3
 80186d2:	f7fe fe55 	bl	8017380 <VerifyRfFreq>
 80186d6:	0003      	movs	r3, r0
 80186d8:	001a      	movs	r2, r3
 80186da:	2301      	movs	r3, #1
 80186dc:	4053      	eors	r3, r2
 80186de:	b2db      	uxtb	r3, r3
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d002      	beq.n	80186ea <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 80186e4:	193b      	adds	r3, r7, r4
 80186e6:	2201      	movs	r2, #1
 80186e8:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80186ea:	230f      	movs	r3, #15
 80186ec:	18fb      	adds	r3, r7, r3
 80186ee:	781b      	ldrb	r3, [r3, #0]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d006      	beq.n	8018702 <RegionEU868ChannelAdd+0xfe>
 80186f4:	230e      	movs	r3, #14
 80186f6:	18fb      	adds	r3, r7, r3
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d001      	beq.n	8018702 <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80186fe:	2306      	movs	r3, #6
 8018700:	e03d      	b.n	801877e <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 8018702:	230f      	movs	r3, #15
 8018704:	18fb      	adds	r3, r7, r3
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d001      	beq.n	8018710 <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801870c:	2305      	movs	r3, #5
 801870e:	e036      	b.n	801877e <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 8018710:	230e      	movs	r3, #14
 8018712:	18fb      	adds	r3, r7, r3
 8018714:	781b      	ldrb	r3, [r3, #0]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d001      	beq.n	801871e <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801871a:	2304      	movs	r3, #4
 801871c:	e02f      	b.n	801877e <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 801871e:	240d      	movs	r4, #13
 8018720:	193b      	adds	r3, r7, r4
 8018722:	781a      	ldrb	r2, [r3, #0]
 8018724:	0013      	movs	r3, r2
 8018726:	005b      	lsls	r3, r3, #1
 8018728:	189b      	adds	r3, r3, r2
 801872a:	009b      	lsls	r3, r3, #2
 801872c:	4a16      	ldr	r2, [pc, #88]	@ (8018788 <RegionEU868ChannelAdd+0x184>)
 801872e:	1898      	adds	r0, r3, r2
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	220c      	movs	r2, #12
 8018736:	0019      	movs	r1, r3
 8018738:	f000 f916 	bl	8018968 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 801873c:	193b      	adds	r3, r7, r4
 801873e:	781a      	ldrb	r2, [r3, #0]
 8018740:	230c      	movs	r3, #12
 8018742:	18fb      	adds	r3, r7, r3
 8018744:	7818      	ldrb	r0, [r3, #0]
 8018746:	4910      	ldr	r1, [pc, #64]	@ (8018788 <RegionEU868ChannelAdd+0x184>)
 8018748:	0013      	movs	r3, r2
 801874a:	005b      	lsls	r3, r3, #1
 801874c:	189b      	adds	r3, r3, r2
 801874e:	009b      	lsls	r3, r3, #2
 8018750:	18cb      	adds	r3, r1, r3
 8018752:	3309      	adds	r3, #9
 8018754:	1c02      	adds	r2, r0, #0
 8018756:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8018758:	4a0b      	ldr	r2, [pc, #44]	@ (8018788 <RegionEU868ChannelAdd+0x184>)
 801875a:	239c      	movs	r3, #156	@ 0x9c
 801875c:	005b      	lsls	r3, r3, #1
 801875e:	5ad3      	ldrh	r3, [r2, r3]
 8018760:	b21a      	sxth	r2, r3
 8018762:	193b      	adds	r3, r7, r4
 8018764:	781b      	ldrb	r3, [r3, #0]
 8018766:	2101      	movs	r1, #1
 8018768:	4099      	lsls	r1, r3
 801876a:	000b      	movs	r3, r1
 801876c:	b21b      	sxth	r3, r3
 801876e:	4313      	orrs	r3, r2
 8018770:	b21b      	sxth	r3, r3
 8018772:	b299      	uxth	r1, r3
 8018774:	4a04      	ldr	r2, [pc, #16]	@ (8018788 <RegionEU868ChannelAdd+0x184>)
 8018776:	239c      	movs	r3, #156	@ 0x9c
 8018778:	005b      	lsls	r3, r3, #1
 801877a:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 801877c:	2300      	movs	r3, #0
}
 801877e:	0018      	movs	r0, r3
 8018780:	46bd      	mov	sp, r7
 8018782:	b005      	add	sp, #20
 8018784:	bd90      	pop	{r4, r7, pc}
 8018786:	46c0      	nop			@ (mov r8, r8)
 8018788:	200012f8 	.word	0x200012f8

0801878c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801878c:	b590      	push	{r4, r7, lr}
 801878e:	b087      	sub	sp, #28
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8018794:	2117      	movs	r1, #23
 8018796:	187b      	adds	r3, r7, r1
 8018798:	687a      	ldr	r2, [r7, #4]
 801879a:	7812      	ldrb	r2, [r2, #0]
 801879c:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801879e:	187b      	adds	r3, r7, r1
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	2b02      	cmp	r3, #2
 80187a4:	d801      	bhi.n	80187aa <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 80187a6:	2300      	movs	r3, #0
 80187a8:	e015      	b.n	80187d6 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80187aa:	2417      	movs	r4, #23
 80187ac:	193b      	adds	r3, r7, r4
 80187ae:	781a      	ldrb	r2, [r3, #0]
 80187b0:	490b      	ldr	r1, [pc, #44]	@ (80187e0 <RegionEU868ChannelsRemove+0x54>)
 80187b2:	0013      	movs	r3, r2
 80187b4:	005b      	lsls	r3, r3, #1
 80187b6:	189b      	adds	r3, r3, r2
 80187b8:	009b      	lsls	r3, r3, #2
 80187ba:	18cb      	adds	r3, r1, r3
 80187bc:	220c      	movs	r2, #12
 80187be:	2100      	movs	r1, #0
 80187c0:	0018      	movs	r0, r3
 80187c2:	f004 fd68 	bl	801d296 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80187c6:	193b      	adds	r3, r7, r4
 80187c8:	7819      	ldrb	r1, [r3, #0]
 80187ca:	4b06      	ldr	r3, [pc, #24]	@ (80187e4 <RegionEU868ChannelsRemove+0x58>)
 80187cc:	2210      	movs	r2, #16
 80187ce:	0018      	movs	r0, r3
 80187d0:	f7fe f869 	bl	80168a6 <RegionCommonChanDisable>
 80187d4:	0003      	movs	r3, r0
}
 80187d6:	0018      	movs	r0, r3
 80187d8:	46bd      	mov	sp, r7
 80187da:	b007      	add	sp, #28
 80187dc:	bd90      	pop	{r4, r7, pc}
 80187de:	46c0      	nop			@ (mov r8, r8)
 80187e0:	200012f8 	.word	0x200012f8
 80187e4:	20001430 	.word	0x20001430

080187e8 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80187e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ea:	b085      	sub	sp, #20
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	2002      	movs	r0, #2
 80187f4:	5618      	ldrsb	r0, [r3, r0]
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	781b      	ldrb	r3, [r3, #0]
 80187fa:	0019      	movs	r1, r3
 80187fc:	4a23      	ldr	r2, [pc, #140]	@ (801888c <RegionEU868SetContinuousWave+0xa4>)
 80187fe:	000b      	movs	r3, r1
 8018800:	005b      	lsls	r3, r3, #1
 8018802:	185b      	adds	r3, r3, r1
 8018804:	009b      	lsls	r3, r3, #2
 8018806:	18d3      	adds	r3, r2, r3
 8018808:	3309      	adds	r3, #9
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	001c      	movs	r4, r3
 801880e:	4a1f      	ldr	r2, [pc, #124]	@ (801888c <RegionEU868SetContinuousWave+0xa4>)
 8018810:	21c2      	movs	r1, #194	@ 0xc2
 8018812:	0023      	movs	r3, r4
 8018814:	009b      	lsls	r3, r3, #2
 8018816:	191b      	adds	r3, r3, r4
 8018818:	009b      	lsls	r3, r3, #2
 801881a:	18d3      	adds	r3, r2, r3
 801881c:	185b      	adds	r3, r3, r1
 801881e:	2100      	movs	r1, #0
 8018820:	5659      	ldrsb	r1, [r3, r1]
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	2201      	movs	r2, #1
 8018826:	569a      	ldrsb	r2, [r3, r2]
 8018828:	260f      	movs	r6, #15
 801882a:	19bc      	adds	r4, r7, r6
 801882c:	4b18      	ldr	r3, [pc, #96]	@ (8018890 <RegionEU868SetContinuousWave+0xa8>)
 801882e:	f7fe fd7f 	bl	8017330 <LimitTxPower>
 8018832:	0003      	movs	r3, r0
 8018834:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8018836:	200e      	movs	r0, #14
 8018838:	183b      	adds	r3, r7, r0
 801883a:	2200      	movs	r2, #0
 801883c:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	781b      	ldrb	r3, [r3, #0]
 8018842:	0019      	movs	r1, r3
 8018844:	4a11      	ldr	r2, [pc, #68]	@ (801888c <RegionEU868SetContinuousWave+0xa4>)
 8018846:	000b      	movs	r3, r1
 8018848:	005b      	lsls	r3, r3, #1
 801884a:	185b      	adds	r3, r3, r1
 801884c:	009b      	lsls	r3, r3, #2
 801884e:	589b      	ldr	r3, [r3, r2]
 8018850:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6859      	ldr	r1, [r3, #4]
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	689a      	ldr	r2, [r3, #8]
 801885a:	0005      	movs	r5, r0
 801885c:	183c      	adds	r4, r7, r0
 801885e:	19bb      	adds	r3, r7, r6
 8018860:	781b      	ldrb	r3, [r3, #0]
 8018862:	b25b      	sxtb	r3, r3
 8018864:	0018      	movs	r0, r3
 8018866:	f7fe fb39 	bl	8016edc <RegionCommonComputeTxPower>
 801886a:	0003      	movs	r3, r0
 801886c:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801886e:	4b09      	ldr	r3, [pc, #36]	@ (8018894 <RegionEU868SetContinuousWave+0xac>)
 8018870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018872:	687a      	ldr	r2, [r7, #4]
 8018874:	8994      	ldrh	r4, [r2, #12]
 8018876:	197a      	adds	r2, r7, r5
 8018878:	2100      	movs	r1, #0
 801887a:	5651      	ldrsb	r1, [r2, r1]
 801887c:	68b8      	ldr	r0, [r7, #8]
 801887e:	0022      	movs	r2, r4
 8018880:	4798      	blx	r3
}
 8018882:	46c0      	nop			@ (mov r8, r8)
 8018884:	46bd      	mov	sp, r7
 8018886:	b005      	add	sp, #20
 8018888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801888a:	46c0      	nop			@ (mov r8, r8)
 801888c:	200012f8 	.word	0x200012f8
 8018890:	20001430 	.word	0x20001430
 8018894:	0801e62c 	.word	0x0801e62c

08018898 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018898:	b590      	push	{r4, r7, lr}
 801889a:	b085      	sub	sp, #20
 801889c:	af00      	add	r7, sp, #0
 801889e:	0004      	movs	r4, r0
 80188a0:	0008      	movs	r0, r1
 80188a2:	0011      	movs	r1, r2
 80188a4:	1dfb      	adds	r3, r7, #7
 80188a6:	1c22      	adds	r2, r4, #0
 80188a8:	701a      	strb	r2, [r3, #0]
 80188aa:	1dbb      	adds	r3, r7, #6
 80188ac:	1c02      	adds	r2, r0, #0
 80188ae:	701a      	strb	r2, [r3, #0]
 80188b0:	1d7b      	adds	r3, r7, #5
 80188b2:	1c0a      	adds	r2, r1, #0
 80188b4:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 80188b6:	1dbb      	adds	r3, r7, #6
 80188b8:	781a      	ldrb	r2, [r3, #0]
 80188ba:	1d7b      	adds	r3, r7, #5
 80188bc:	781b      	ldrb	r3, [r3, #0]
 80188be:	1ad3      	subs	r3, r2, r3
 80188c0:	b2da      	uxtb	r2, r3
 80188c2:	210f      	movs	r1, #15
 80188c4:	187b      	adds	r3, r7, r1
 80188c6:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 80188c8:	000a      	movs	r2, r1
 80188ca:	18bb      	adds	r3, r7, r2
 80188cc:	781b      	ldrb	r3, [r3, #0]
 80188ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80188d0:	d902      	bls.n	80188d8 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 80188d2:	18bb      	adds	r3, r7, r2
 80188d4:	2200      	movs	r2, #0
 80188d6:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 80188d8:	230f      	movs	r3, #15
 80188da:	18fb      	adds	r3, r7, r3
 80188dc:	781b      	ldrb	r3, [r3, #0]
}
 80188de:	0018      	movs	r0, r3
 80188e0:	46bd      	mov	sp, r7
 80188e2:	b005      	add	sp, #20
 80188e4:	bd90      	pop	{r4, r7, pc}
	...

080188e8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80188ec:	4b08      	ldr	r3, [pc, #32]	@ (8018910 <rand1+0x28>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	4a08      	ldr	r2, [pc, #32]	@ (8018914 <rand1+0x2c>)
 80188f2:	4353      	muls	r3, r2
 80188f4:	4a08      	ldr	r2, [pc, #32]	@ (8018918 <rand1+0x30>)
 80188f6:	189a      	adds	r2, r3, r2
 80188f8:	4b05      	ldr	r3, [pc, #20]	@ (8018910 <rand1+0x28>)
 80188fa:	601a      	str	r2, [r3, #0]
 80188fc:	4b04      	ldr	r3, [pc, #16]	@ (8018910 <rand1+0x28>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	4906      	ldr	r1, [pc, #24]	@ (801891c <rand1+0x34>)
 8018902:	0018      	movs	r0, r3
 8018904:	f7e7 fc8e 	bl	8000224 <__aeabi_uidivmod>
 8018908:	000b      	movs	r3, r1
}
 801890a:	0018      	movs	r0, r3
 801890c:	46bd      	mov	sp, r7
 801890e:	bd80      	pop	{r7, pc}
 8018910:	200001ac 	.word	0x200001ac
 8018914:	41c64e6d 	.word	0x41c64e6d
 8018918:	00003039 	.word	0x00003039
 801891c:	7fffffff 	.word	0x7fffffff

08018920 <srand1>:

void srand1( uint32_t seed )
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b082      	sub	sp, #8
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
    next = seed;
 8018928:	4b03      	ldr	r3, [pc, #12]	@ (8018938 <srand1+0x18>)
 801892a:	687a      	ldr	r2, [r7, #4]
 801892c:	601a      	str	r2, [r3, #0]
}
 801892e:	46c0      	nop			@ (mov r8, r8)
 8018930:	46bd      	mov	sp, r7
 8018932:	b002      	add	sp, #8
 8018934:	bd80      	pop	{r7, pc}
 8018936:	46c0      	nop			@ (mov r8, r8)
 8018938:	200001ac 	.word	0x200001ac

0801893c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
 8018944:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018946:	f7ff ffcf 	bl	80188e8 <rand1>
 801894a:	683a      	ldr	r2, [r7, #0]
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	1ad3      	subs	r3, r2, r3
 8018950:	3301      	adds	r3, #1
 8018952:	0019      	movs	r1, r3
 8018954:	f7e7 fd50 	bl	80003f8 <__aeabi_idivmod>
 8018958:	000b      	movs	r3, r1
 801895a:	001a      	movs	r2, r3
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	18d3      	adds	r3, r2, r3
}
 8018960:	0018      	movs	r0, r3
 8018962:	46bd      	mov	sp, r7
 8018964:	b002      	add	sp, #8
 8018966:	bd80      	pop	{r7, pc}

08018968 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	60f8      	str	r0, [r7, #12]
 8018970:	60b9      	str	r1, [r7, #8]
 8018972:	1dbb      	adds	r3, r7, #6
 8018974:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8018976:	e007      	b.n	8018988 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018978:	68ba      	ldr	r2, [r7, #8]
 801897a:	1c53      	adds	r3, r2, #1
 801897c:	60bb      	str	r3, [r7, #8]
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	1c59      	adds	r1, r3, #1
 8018982:	60f9      	str	r1, [r7, #12]
 8018984:	7812      	ldrb	r2, [r2, #0]
 8018986:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018988:	1dbb      	adds	r3, r7, #6
 801898a:	881b      	ldrh	r3, [r3, #0]
 801898c:	1dba      	adds	r2, r7, #6
 801898e:	1e59      	subs	r1, r3, #1
 8018990:	8011      	strh	r1, [r2, #0]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d1f0      	bne.n	8018978 <memcpy1+0x10>
    }
}
 8018996:	46c0      	nop			@ (mov r8, r8)
 8018998:	46c0      	nop			@ (mov r8, r8)
 801899a:	46bd      	mov	sp, r7
 801899c:	b004      	add	sp, #16
 801899e:	bd80      	pop	{r7, pc}

080189a0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b084      	sub	sp, #16
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	60f8      	str	r0, [r7, #12]
 80189a8:	60b9      	str	r1, [r7, #8]
 80189aa:	1dbb      	adds	r3, r7, #6
 80189ac:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 80189ae:	1dbb      	adds	r3, r7, #6
 80189b0:	881b      	ldrh	r3, [r3, #0]
 80189b2:	3b01      	subs	r3, #1
 80189b4:	68fa      	ldr	r2, [r7, #12]
 80189b6:	18d3      	adds	r3, r2, r3
 80189b8:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80189ba:	e007      	b.n	80189cc <memcpyr+0x2c>
    {
        *dst-- = *src++;
 80189bc:	68ba      	ldr	r2, [r7, #8]
 80189be:	1c53      	adds	r3, r2, #1
 80189c0:	60bb      	str	r3, [r7, #8]
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	1e59      	subs	r1, r3, #1
 80189c6:	60f9      	str	r1, [r7, #12]
 80189c8:	7812      	ldrb	r2, [r2, #0]
 80189ca:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80189cc:	1dbb      	adds	r3, r7, #6
 80189ce:	881b      	ldrh	r3, [r3, #0]
 80189d0:	1dba      	adds	r2, r7, #6
 80189d2:	1e59      	subs	r1, r3, #1
 80189d4:	8011      	strh	r1, [r2, #0]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d1f0      	bne.n	80189bc <memcpyr+0x1c>
    }
}
 80189da:	46c0      	nop			@ (mov r8, r8)
 80189dc:	46c0      	nop			@ (mov r8, r8)
 80189de:	46bd      	mov	sp, r7
 80189e0:	b004      	add	sp, #16
 80189e2:	bd80      	pop	{r7, pc}

080189e4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b082      	sub	sp, #8
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
 80189ec:	0008      	movs	r0, r1
 80189ee:	0011      	movs	r1, r2
 80189f0:	1cfb      	adds	r3, r7, #3
 80189f2:	1c02      	adds	r2, r0, #0
 80189f4:	701a      	strb	r2, [r3, #0]
 80189f6:	003b      	movs	r3, r7
 80189f8:	1c0a      	adds	r2, r1, #0
 80189fa:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80189fc:	e005      	b.n	8018a0a <memset1+0x26>
    {
        *dst++ = value;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	1c5a      	adds	r2, r3, #1
 8018a02:	607a      	str	r2, [r7, #4]
 8018a04:	1cfa      	adds	r2, r7, #3
 8018a06:	7812      	ldrb	r2, [r2, #0]
 8018a08:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018a0a:	003b      	movs	r3, r7
 8018a0c:	881b      	ldrh	r3, [r3, #0]
 8018a0e:	003a      	movs	r2, r7
 8018a10:	1e59      	subs	r1, r3, #1
 8018a12:	8011      	strh	r1, [r2, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d1f2      	bne.n	80189fe <memset1+0x1a>
    }
}
 8018a18:	46c0      	nop			@ (mov r8, r8)
 8018a1a:	46c0      	nop			@ (mov r8, r8)
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	b002      	add	sp, #8
 8018a20:	bd80      	pop	{r7, pc}
	...

08018a24 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 8018a24:	b590      	push	{r4, r7, lr}
 8018a26:	b087      	sub	sp, #28
 8018a28:	af02      	add	r7, sp, #8
 8018a2a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8018a2c:	4b34      	ldr	r3, [pc, #208]	@ (8018b00 <SX1276Init+0xdc>)
 8018a2e:	687a      	ldr	r2, [r7, #4]
 8018a30:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8018a32:	4b34      	ldr	r3, [pc, #208]	@ (8018b04 <SX1276Init+0xe0>)
 8018a34:	2201      	movs	r2, #1
 8018a36:	4251      	negs	r1, r2
 8018a38:	4833      	ldr	r0, [pc, #204]	@ (8018b08 <SX1276Init+0xe4>)
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	9200      	str	r2, [sp, #0]
 8018a3e:	2200      	movs	r2, #0
 8018a40:	f003 fa58 	bl	801bef4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8018a44:	4b2f      	ldr	r3, [pc, #188]	@ (8018b04 <SX1276Init+0xe0>)
 8018a46:	2201      	movs	r2, #1
 8018a48:	4251      	negs	r1, r2
 8018a4a:	4830      	ldr	r0, [pc, #192]	@ (8018b0c <SX1276Init+0xe8>)
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	9200      	str	r2, [sp, #0]
 8018a50:	2200      	movs	r2, #0
 8018a52:	f003 fa4f 	bl	801bef4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8018a56:	4b2b      	ldr	r3, [pc, #172]	@ (8018b04 <SX1276Init+0xe0>)
 8018a58:	2201      	movs	r2, #1
 8018a5a:	4251      	negs	r1, r2
 8018a5c:	482c      	ldr	r0, [pc, #176]	@ (8018b10 <SX1276Init+0xec>)
 8018a5e:	2200      	movs	r2, #0
 8018a60:	9200      	str	r2, [sp, #0]
 8018a62:	2200      	movs	r2, #0
 8018a64:	f003 fa46 	bl	801bef4 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 8018a68:	2001      	movs	r0, #1
 8018a6a:	f7ec fd4d 	bl	8005508 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 8018a6e:	f001 fbb7 	bl	801a1e0 <SX1276Reset>

    RxChainCalibration( );
 8018a72:	f000 f937 	bl	8018ce4 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8018a76:	2000      	movs	r0, #0
 8018a78:	f001 fbb9 	bl	801a1ee <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 8018a7c:	4b25      	ldr	r3, [pc, #148]	@ (8018b14 <SX1276Init+0xf0>)
 8018a7e:	0018      	movs	r0, r3
 8018a80:	f7ec fea2 	bl	80057c8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8018a84:	230f      	movs	r3, #15
 8018a86:	18fb      	adds	r3, r7, r3
 8018a88:	2200      	movs	r2, #0
 8018a8a:	701a      	strb	r2, [r3, #0]
 8018a8c:	e025      	b.n	8018ada <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8018a8e:	240f      	movs	r4, #15
 8018a90:	193b      	adds	r3, r7, r4
 8018a92:	781a      	ldrb	r2, [r3, #0]
 8018a94:	4920      	ldr	r1, [pc, #128]	@ (8018b18 <SX1276Init+0xf4>)
 8018a96:	0013      	movs	r3, r2
 8018a98:	005b      	lsls	r3, r3, #1
 8018a9a:	189b      	adds	r3, r3, r2
 8018a9c:	5c5b      	ldrb	r3, [r3, r1]
 8018a9e:	0018      	movs	r0, r3
 8018aa0:	f001 fc12 	bl	801a2c8 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8018aa4:	193b      	adds	r3, r7, r4
 8018aa6:	781a      	ldrb	r2, [r3, #0]
 8018aa8:	491b      	ldr	r1, [pc, #108]	@ (8018b18 <SX1276Init+0xf4>)
 8018aaa:	0013      	movs	r3, r2
 8018aac:	005b      	lsls	r3, r3, #1
 8018aae:	189b      	adds	r3, r3, r2
 8018ab0:	18cb      	adds	r3, r1, r3
 8018ab2:	3301      	adds	r3, #1
 8018ab4:	781b      	ldrb	r3, [r3, #0]
 8018ab6:	0018      	movs	r0, r3
 8018ab8:	193b      	adds	r3, r7, r4
 8018aba:	781a      	ldrb	r2, [r3, #0]
 8018abc:	4916      	ldr	r1, [pc, #88]	@ (8018b18 <SX1276Init+0xf4>)
 8018abe:	0013      	movs	r3, r2
 8018ac0:	005b      	lsls	r3, r3, #1
 8018ac2:	189b      	adds	r3, r3, r2
 8018ac4:	18cb      	adds	r3, r1, r3
 8018ac6:	3302      	adds	r3, #2
 8018ac8:	781b      	ldrb	r3, [r3, #0]
 8018aca:	0019      	movs	r1, r3
 8018acc:	f001 fc56 	bl	801a37c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8018ad0:	193b      	adds	r3, r7, r4
 8018ad2:	781a      	ldrb	r2, [r3, #0]
 8018ad4:	193b      	adds	r3, r7, r4
 8018ad6:	3201      	adds	r2, #1
 8018ad8:	701a      	strb	r2, [r3, #0]
 8018ada:	230f      	movs	r3, #15
 8018adc:	18fb      	adds	r3, r7, r3
 8018ade:	781b      	ldrb	r3, [r3, #0]
 8018ae0:	2b0f      	cmp	r3, #15
 8018ae2:	d9d4      	bls.n	8018a8e <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 8018ae4:	2000      	movs	r0, #0
 8018ae6:	f001 fbef 	bl	801a2c8 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8018aea:	4b0c      	ldr	r3, [pc, #48]	@ (8018b1c <SX1276Init+0xf8>)
 8018aec:	2200      	movs	r2, #0
 8018aee:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8018af0:	f7ec fd04 	bl	80054fc <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8018af4:	0003      	movs	r3, r0
 8018af6:	3302      	adds	r3, #2
}
 8018af8:	0018      	movs	r0, r3
 8018afa:	46bd      	mov	sp, r7
 8018afc:	b005      	add	sp, #20
 8018afe:	bd90      	pop	{r4, r7, pc}
 8018b00:	20001434 	.word	0x20001434
 8018b04:	0801a7f5 	.word	0x0801a7f5
 8018b08:	200015a0 	.word	0x200015a0
 8018b0c:	200015b8 	.word	0x200015b8
 8018b10:	200015d0 	.word	0x200015d0
 8018b14:	200001b0 	.word	0x200001b0
 8018b18:	0801e698 	.word	0x0801e698
 8018b1c:	20001538 	.word	0x20001538

08018b20 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8018b24:	4b02      	ldr	r3, [pc, #8]	@ (8018b30 <SX1276GetStatus+0x10>)
 8018b26:	791b      	ldrb	r3, [r3, #4]
}
 8018b28:	0018      	movs	r0, r3
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}
 8018b2e:	46c0      	nop			@ (mov r8, r8)
 8018b30:	20001538 	.word	0x20001538

08018b34 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8018b34:	b590      	push	{r4, r7, lr}
 8018b36:	b087      	sub	sp, #28
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8018b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8018bb4 <SX1276SetChannel+0x80>)
 8018b3e:	687a      	ldr	r2, [r7, #4]
 8018b40:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	491c      	ldr	r1, [pc, #112]	@ (8018bb8 <SX1276SetChannel+0x84>)
 8018b46:	0018      	movs	r0, r3
 8018b48:	f7e7 fae6 	bl	8000118 <__udivsi3>
 8018b4c:	0003      	movs	r3, r0
 8018b4e:	617b      	str	r3, [r7, #20]
 8018b50:	6979      	ldr	r1, [r7, #20]
 8018b52:	000b      	movs	r3, r1
 8018b54:	015b      	lsls	r3, r3, #5
 8018b56:	1a5b      	subs	r3, r3, r1
 8018b58:	019a      	lsls	r2, r3, #6
 8018b5a:	1ad2      	subs	r2, r2, r3
 8018b5c:	00d2      	lsls	r2, r2, #3
 8018b5e:	1853      	adds	r3, r2, r1
 8018b60:	687a      	ldr	r2, [r7, #4]
 8018b62:	1ad3      	subs	r3, r2, r3
 8018b64:	613b      	str	r3, [r7, #16]
 8018b66:	697b      	ldr	r3, [r7, #20]
 8018b68:	021c      	lsls	r4, r3, #8
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	021b      	lsls	r3, r3, #8
 8018b6e:	4a13      	ldr	r2, [pc, #76]	@ (8018bbc <SX1276SetChannel+0x88>)
 8018b70:	4694      	mov	ip, r2
 8018b72:	4463      	add	r3, ip
 8018b74:	4910      	ldr	r1, [pc, #64]	@ (8018bb8 <SX1276SetChannel+0x84>)
 8018b76:	0018      	movs	r0, r3
 8018b78:	f7e7 face 	bl	8000118 <__udivsi3>
 8018b7c:	0003      	movs	r3, r0
 8018b7e:	18e3      	adds	r3, r4, r3
 8018b80:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	0c1b      	lsrs	r3, r3, #16
 8018b86:	b2db      	uxtb	r3, r3
 8018b88:	0019      	movs	r1, r3
 8018b8a:	2006      	movs	r0, #6
 8018b8c:	f001 fbf6 	bl	801a37c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	0a1b      	lsrs	r3, r3, #8
 8018b94:	b2db      	uxtb	r3, r3
 8018b96:	0019      	movs	r1, r3
 8018b98:	2007      	movs	r0, #7
 8018b9a:	f001 fbef 	bl	801a37c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	b2db      	uxtb	r3, r3
 8018ba2:	0019      	movs	r1, r3
 8018ba4:	2008      	movs	r0, #8
 8018ba6:	f001 fbe9 	bl	801a37c <SX1276Write>
}
 8018baa:	46c0      	nop			@ (mov r8, r8)
 8018bac:	46bd      	mov	sp, r7
 8018bae:	b007      	add	sp, #28
 8018bb0:	bd90      	pop	{r4, r7, pc}
 8018bb2:	46c0      	nop			@ (mov r8, r8)
 8018bb4:	20001538 	.word	0x20001538
 8018bb8:	00003d09 	.word	0x00003d09
 8018bbc:	00001e84 	.word	0x00001e84

08018bc0 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018bc0:	b5b0      	push	{r4, r5, r7, lr}
 8018bc2:	b086      	sub	sp, #24
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	60f8      	str	r0, [r7, #12]
 8018bc8:	60b9      	str	r1, [r7, #8]
 8018bca:	603b      	str	r3, [r7, #0]
 8018bcc:	1dbb      	adds	r3, r7, #6
 8018bce:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8018bd0:	2317      	movs	r3, #23
 8018bd2:	18fb      	adds	r3, r7, r3
 8018bd4:	2201      	movs	r2, #1
 8018bd6:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8018bd8:	2314      	movs	r3, #20
 8018bda:	18fb      	adds	r3, r7, r3
 8018bdc:	2200      	movs	r2, #0
 8018bde:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8018be0:	2300      	movs	r3, #0
 8018be2:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8018be4:	f000 ffd6 	bl	8019b94 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8018be8:	2000      	movs	r0, #0
 8018bea:	f001 fb6d 	bl	801a2c8 <SX1276SetModem>

    SX1276SetChannel( freq );
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	0018      	movs	r0, r3
 8018bf2:	f7ff ff9f 	bl	8018b34 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	0018      	movs	r0, r3
 8018bfa:	f001 fccd 	bl	801a598 <GetFskBandwidthRegValue>
 8018bfe:	0003      	movs	r3, r0
 8018c00:	0019      	movs	r1, r3
 8018c02:	2012      	movs	r0, #18
 8018c04:	f001 fbba 	bl	801a37c <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8018c08:	68bb      	ldr	r3, [r7, #8]
 8018c0a:	0018      	movs	r0, r3
 8018c0c:	f001 fcc4 	bl	801a598 <GetFskBandwidthRegValue>
 8018c10:	0003      	movs	r3, r0
 8018c12:	0019      	movs	r1, r3
 8018c14:	2013      	movs	r0, #19
 8018c16:	f001 fbb1 	bl	801a37c <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8018c1a:	2005      	movs	r0, #5
 8018c1c:	f001 fae7 	bl	801a1ee <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 8018c20:	2001      	movs	r0, #1
 8018c22:	f7eb fe42 	bl	80048aa <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018c26:	f003 fb45 	bl	801c2b4 <UTIL_TIMER_GetCurrentTime>
 8018c2a:	0003      	movs	r3, r0
 8018c2c:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018c2e:	e013      	b.n	8018c58 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 8018c30:	2514      	movs	r5, #20
 8018c32:	197c      	adds	r4, r7, r5
 8018c34:	2000      	movs	r0, #0
 8018c36:	f001 fa8b 	bl	801a150 <SX1276ReadRssi>
 8018c3a:	0003      	movs	r3, r0
 8018c3c:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8018c3e:	197a      	adds	r2, r7, r5
 8018c40:	1dbb      	adds	r3, r7, #6
 8018c42:	2100      	movs	r1, #0
 8018c44:	5e52      	ldrsh	r2, [r2, r1]
 8018c46:	2100      	movs	r1, #0
 8018c48:	5e5b      	ldrsh	r3, [r3, r1]
 8018c4a:	429a      	cmp	r2, r3
 8018c4c:	dd04      	ble.n	8018c58 <SX1276IsChannelFree+0x98>
        {
            status = false;
 8018c4e:	2317      	movs	r3, #23
 8018c50:	18fb      	adds	r3, r7, r3
 8018c52:	2200      	movs	r2, #0
 8018c54:	701a      	strb	r2, [r3, #0]
            break;
 8018c56:	e007      	b.n	8018c68 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018c58:	693b      	ldr	r3, [r7, #16]
 8018c5a:	0018      	movs	r0, r3
 8018c5c:	f003 fb3e 	bl	801c2dc <UTIL_TIMER_GetElapsedTime>
 8018c60:	0002      	movs	r2, r0
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	4293      	cmp	r3, r2
 8018c66:	d8e3      	bhi.n	8018c30 <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 8018c68:	f000 ff94 	bl	8019b94 <SX1276SetSleep>
    return status;
 8018c6c:	2317      	movs	r3, #23
 8018c6e:	18fb      	adds	r3, r7, r3
 8018c70:	781b      	ldrb	r3, [r3, #0]
}
 8018c72:	0018      	movs	r0, r3
 8018c74:	46bd      	mov	sp, r7
 8018c76:	b006      	add	sp, #24
 8018c78:	bdb0      	pop	{r4, r5, r7, pc}

08018c7a <SX1276Random>:

uint32_t SX1276Random( void )
{
 8018c7a:	b580      	push	{r7, lr}
 8018c7c:	b082      	sub	sp, #8
 8018c7e:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8018c80:	2300      	movs	r3, #0
 8018c82:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8018c84:	2001      	movs	r0, #1
 8018c86:	f001 fb1f 	bl	801a2c8 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8018c8a:	21ff      	movs	r1, #255	@ 0xff
 8018c8c:	2011      	movs	r0, #17
 8018c8e:	f001 fb75 	bl	801a37c <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8018c92:	2005      	movs	r0, #5
 8018c94:	f001 faab 	bl	801a1ee <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8018c98:	1dfb      	adds	r3, r7, #7
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	701a      	strb	r2, [r3, #0]
 8018c9e:	e015      	b.n	8018ccc <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 8018ca0:	2001      	movs	r0, #1
 8018ca2:	f7eb fe02 	bl	80048aa <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8018ca6:	202c      	movs	r0, #44	@ 0x2c
 8018ca8:	f001 fb79 	bl	801a39e <SX1276Read>
 8018cac:	0003      	movs	r3, r0
 8018cae:	001a      	movs	r2, r3
 8018cb0:	2301      	movs	r3, #1
 8018cb2:	401a      	ands	r2, r3
 8018cb4:	1dfb      	adds	r3, r7, #7
 8018cb6:	781b      	ldrb	r3, [r3, #0]
 8018cb8:	409a      	lsls	r2, r3
 8018cba:	0013      	movs	r3, r2
 8018cbc:	683a      	ldr	r2, [r7, #0]
 8018cbe:	4313      	orrs	r3, r2
 8018cc0:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8018cc2:	1dfb      	adds	r3, r7, #7
 8018cc4:	781a      	ldrb	r2, [r3, #0]
 8018cc6:	1dfb      	adds	r3, r7, #7
 8018cc8:	3201      	adds	r2, #1
 8018cca:	701a      	strb	r2, [r3, #0]
 8018ccc:	1dfb      	adds	r3, r7, #7
 8018cce:	781b      	ldrb	r3, [r3, #0]
 8018cd0:	2b1f      	cmp	r3, #31
 8018cd2:	d9e5      	bls.n	8018ca0 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8018cd4:	f000 ff5e 	bl	8019b94 <SX1276SetSleep>

    return rnd;
 8018cd8:	683b      	ldr	r3, [r7, #0]
}
 8018cda:	0018      	movs	r0, r3
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	b002      	add	sp, #8
 8018ce0:	bd80      	pop	{r7, pc}
	...

08018ce4 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8018ce4:	b590      	push	{r4, r7, lr}
 8018ce6:	b087      	sub	sp, #28
 8018ce8:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8018cea:	2317      	movs	r3, #23
 8018cec:	18fc      	adds	r4, r7, r3
 8018cee:	2009      	movs	r0, #9
 8018cf0:	f001 fb55 	bl	801a39e <SX1276Read>
 8018cf4:	0003      	movs	r3, r0
 8018cf6:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8018cf8:	2006      	movs	r0, #6
 8018cfa:	f001 fb50 	bl	801a39e <SX1276Read>
 8018cfe:	0003      	movs	r3, r0
 8018d00:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8018d02:	2007      	movs	r0, #7
 8018d04:	f001 fb4b 	bl	801a39e <SX1276Read>
 8018d08:	0003      	movs	r3, r0
 8018d0a:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8018d0c:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8018d0e:	2008      	movs	r0, #8
 8018d10:	f001 fb45 	bl	801a39e <SX1276Read>
 8018d14:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8018d16:	4323      	orrs	r3, r4
 8018d18:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8018d1a:	693b      	ldr	r3, [r7, #16]
 8018d1c:	0a1b      	lsrs	r3, r3, #8
 8018d1e:	60fb      	str	r3, [r7, #12]
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	021b      	lsls	r3, r3, #8
 8018d24:	693a      	ldr	r2, [r7, #16]
 8018d26:	1ad3      	subs	r3, r2, r3
 8018d28:	60bb      	str	r3, [r7, #8]
 8018d2a:	68f9      	ldr	r1, [r7, #12]
 8018d2c:	000b      	movs	r3, r1
 8018d2e:	015b      	lsls	r3, r3, #5
 8018d30:	1a5b      	subs	r3, r3, r1
 8018d32:	019a      	lsls	r2, r3, #6
 8018d34:	1ad2      	subs	r2, r2, r3
 8018d36:	00d2      	lsls	r2, r2, #3
 8018d38:	1850      	adds	r0, r2, r1
 8018d3a:	68b9      	ldr	r1, [r7, #8]
 8018d3c:	000b      	movs	r3, r1
 8018d3e:	015b      	lsls	r3, r3, #5
 8018d40:	1a5b      	subs	r3, r3, r1
 8018d42:	019a      	lsls	r2, r3, #6
 8018d44:	1ad2      	subs	r2, r2, r3
 8018d46:	00d2      	lsls	r2, r2, #3
 8018d48:	1853      	adds	r3, r2, r1
 8018d4a:	3380      	adds	r3, #128	@ 0x80
 8018d4c:	0a1b      	lsrs	r3, r3, #8
 8018d4e:	18c3      	adds	r3, r0, r3
 8018d50:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8018d52:	2100      	movs	r1, #0
 8018d54:	2009      	movs	r0, #9
 8018d56:	f001 fb11 	bl	801a37c <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8018d5a:	203b      	movs	r0, #59	@ 0x3b
 8018d5c:	f001 fb1f 	bl	801a39e <SX1276Read>
 8018d60:	0003      	movs	r3, r0
 8018d62:	001a      	movs	r2, r3
 8018d64:	2340      	movs	r3, #64	@ 0x40
 8018d66:	4313      	orrs	r3, r2
 8018d68:	b2db      	uxtb	r3, r3
 8018d6a:	0019      	movs	r1, r3
 8018d6c:	203b      	movs	r0, #59	@ 0x3b
 8018d6e:	f001 fb05 	bl	801a37c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8018d72:	46c0      	nop			@ (mov r8, r8)
 8018d74:	203b      	movs	r0, #59	@ 0x3b
 8018d76:	f001 fb12 	bl	801a39e <SX1276Read>
 8018d7a:	0003      	movs	r3, r0
 8018d7c:	001a      	movs	r2, r3
 8018d7e:	2320      	movs	r3, #32
 8018d80:	4013      	ands	r3, r2
 8018d82:	2b20      	cmp	r3, #32
 8018d84:	d0f6      	beq.n	8018d74 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8018d86:	4b14      	ldr	r3, [pc, #80]	@ (8018dd8 <RxChainCalibration+0xf4>)
 8018d88:	0018      	movs	r0, r3
 8018d8a:	f7ff fed3 	bl	8018b34 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8018d8e:	203b      	movs	r0, #59	@ 0x3b
 8018d90:	f001 fb05 	bl	801a39e <SX1276Read>
 8018d94:	0003      	movs	r3, r0
 8018d96:	001a      	movs	r2, r3
 8018d98:	2340      	movs	r3, #64	@ 0x40
 8018d9a:	4313      	orrs	r3, r2
 8018d9c:	b2db      	uxtb	r3, r3
 8018d9e:	0019      	movs	r1, r3
 8018da0:	203b      	movs	r0, #59	@ 0x3b
 8018da2:	f001 faeb 	bl	801a37c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8018da6:	46c0      	nop			@ (mov r8, r8)
 8018da8:	203b      	movs	r0, #59	@ 0x3b
 8018daa:	f001 faf8 	bl	801a39e <SX1276Read>
 8018dae:	0003      	movs	r3, r0
 8018db0:	001a      	movs	r2, r3
 8018db2:	2320      	movs	r3, #32
 8018db4:	4013      	ands	r3, r2
 8018db6:	2b20      	cmp	r3, #32
 8018db8:	d0f6      	beq.n	8018da8 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8018dba:	2317      	movs	r3, #23
 8018dbc:	18fb      	adds	r3, r7, r3
 8018dbe:	781b      	ldrb	r3, [r3, #0]
 8018dc0:	0019      	movs	r1, r3
 8018dc2:	2009      	movs	r0, #9
 8018dc4:	f001 fada 	bl	801a37c <SX1276Write>
    SX1276SetChannel( initialFreq );
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	0018      	movs	r0, r3
 8018dcc:	f7ff feb2 	bl	8018b34 <SX1276SetChannel>
}
 8018dd0:	46c0      	nop			@ (mov r8, r8)
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	b007      	add	sp, #28
 8018dd6:	bd90      	pop	{r4, r7, pc}
 8018dd8:	33bca100 	.word	0x33bca100

08018ddc <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8018ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dde:	b085      	sub	sp, #20
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	60b9      	str	r1, [r7, #8]
 8018de4:	607a      	str	r2, [r7, #4]
 8018de6:	0019      	movs	r1, r3
 8018de8:	240f      	movs	r4, #15
 8018dea:	193b      	adds	r3, r7, r4
 8018dec:	1c02      	adds	r2, r0, #0
 8018dee:	701a      	strb	r2, [r3, #0]
 8018df0:	230e      	movs	r3, #14
 8018df2:	18fb      	adds	r3, r7, r3
 8018df4:	1c0a      	adds	r2, r1, #0
 8018df6:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8018df8:	193b      	adds	r3, r7, r4
 8018dfa:	781b      	ldrb	r3, [r3, #0]
 8018dfc:	0018      	movs	r0, r3
 8018dfe:	f001 fa63 	bl	801a2c8 <SX1276SetModem>

    switch( modem )
 8018e02:	193b      	adds	r3, r7, r4
 8018e04:	781b      	ldrb	r3, [r3, #0]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d003      	beq.n	8018e12 <SX1276SetRxConfig+0x36>
 8018e0a:	2b01      	cmp	r3, #1
 8018e0c:	d100      	bne.n	8018e10 <SX1276SetRxConfig+0x34>
 8018e0e:	e0ef      	b.n	8018ff0 <SX1276SetRxConfig+0x214>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8018e10:	e252      	b.n	80192b8 <SX1276SetRxConfig+0x4dc>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8018e12:	4bb1      	ldr	r3, [pc, #708]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e14:	68ba      	ldr	r2, [r7, #8]
 8018e16:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8018e18:	4baf      	ldr	r3, [pc, #700]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e1a:	687a      	ldr	r2, [r7, #4]
 8018e1c:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8018e1e:	4bae      	ldr	r3, [pc, #696]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018e22:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8018e24:	4bac      	ldr	r3, [pc, #688]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e26:	222c      	movs	r2, #44	@ 0x2c
 8018e28:	2508      	movs	r5, #8
 8018e2a:	1952      	adds	r2, r2, r5
 8018e2c:	19d2      	adds	r2, r2, r7
 8018e2e:	2122      	movs	r1, #34	@ 0x22
 8018e30:	7812      	ldrb	r2, [r2, #0]
 8018e32:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8018e34:	4ba8      	ldr	r3, [pc, #672]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e36:	2130      	movs	r1, #48	@ 0x30
 8018e38:	194a      	adds	r2, r1, r5
 8018e3a:	19d2      	adds	r2, r2, r7
 8018e3c:	2123      	movs	r1, #35	@ 0x23
 8018e3e:	7812      	ldrb	r2, [r2, #0]
 8018e40:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8018e42:	4ba5      	ldr	r3, [pc, #660]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e44:	2034      	movs	r0, #52	@ 0x34
 8018e46:	1942      	adds	r2, r0, r5
 8018e48:	19d2      	adds	r2, r2, r7
 8018e4a:	2124      	movs	r1, #36	@ 0x24
 8018e4c:	7812      	ldrb	r2, [r2, #0]
 8018e4e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8018e50:	4ba1      	ldr	r3, [pc, #644]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e52:	2220      	movs	r2, #32
 8018e54:	2020      	movs	r0, #32
 8018e56:	1814      	adds	r4, r2, r0
 8018e58:	197a      	adds	r2, r7, r5
 8018e5a:	18a2      	adds	r2, r4, r2
 8018e5c:	2125      	movs	r1, #37	@ 0x25
 8018e5e:	7812      	ldrb	r2, [r2, #0]
 8018e60:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8018e62:	4b9d      	ldr	r3, [pc, #628]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e64:	2224      	movs	r2, #36	@ 0x24
 8018e66:	1810      	adds	r0, r2, r0
 8018e68:	002c      	movs	r4, r5
 8018e6a:	193a      	adds	r2, r7, r4
 8018e6c:	1882      	adds	r2, r0, r2
 8018e6e:	2126      	movs	r1, #38	@ 0x26
 8018e70:	7812      	ldrb	r2, [r2, #0]
 8018e72:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8018e74:	4b98      	ldr	r3, [pc, #608]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018e76:	2624      	movs	r6, #36	@ 0x24
 8018e78:	1932      	adds	r2, r6, r4
 8018e7a:	19d2      	adds	r2, r2, r7
 8018e7c:	8812      	ldrh	r2, [r2, #0]
 8018e7e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8018e80:	2328      	movs	r3, #40	@ 0x28
 8018e82:	191b      	adds	r3, r3, r4
 8018e84:	19db      	adds	r3, r3, r7
 8018e86:	881b      	ldrh	r3, [r3, #0]
 8018e88:	0018      	movs	r0, r3
 8018e8a:	f7e9 fca1 	bl	80027d0 <__aeabi_i2d>
 8018e8e:	0004      	movs	r4, r0
 8018e90:	000d      	movs	r5, r1
 8018e92:	6878      	ldr	r0, [r7, #4]
 8018e94:	f7e9 fcca 	bl	800282c <__aeabi_ui2d>
 8018e98:	0002      	movs	r2, r0
 8018e9a:	000b      	movs	r3, r1
 8018e9c:	2000      	movs	r0, #0
 8018e9e:	498f      	ldr	r1, [pc, #572]	@ (80190dc <SX1276SetRxConfig+0x300>)
 8018ea0:	f7e8 f9b2 	bl	8001208 <__aeabi_ddiv>
 8018ea4:	0002      	movs	r2, r0
 8018ea6:	000b      	movs	r3, r1
 8018ea8:	0010      	movs	r0, r2
 8018eaa:	0019      	movs	r1, r3
 8018eac:	2200      	movs	r2, #0
 8018eae:	4b8c      	ldr	r3, [pc, #560]	@ (80190e0 <SX1276SetRxConfig+0x304>)
 8018eb0:	f7e8 fdee 	bl	8001a90 <__aeabi_dmul>
 8018eb4:	0002      	movs	r2, r0
 8018eb6:	000b      	movs	r3, r1
 8018eb8:	0020      	movs	r0, r4
 8018eba:	0029      	movs	r1, r5
 8018ebc:	f7e8 fde8 	bl	8001a90 <__aeabi_dmul>
 8018ec0:	0002      	movs	r2, r0
 8018ec2:	000b      	movs	r3, r1
 8018ec4:	0010      	movs	r0, r2
 8018ec6:	0019      	movs	r1, r3
 8018ec8:	2200      	movs	r2, #0
 8018eca:	4b86      	ldr	r3, [pc, #536]	@ (80190e4 <SX1276SetRxConfig+0x308>)
 8018ecc:	f7e8 fde0 	bl	8001a90 <__aeabi_dmul>
 8018ed0:	0002      	movs	r2, r0
 8018ed2:	000b      	movs	r3, r1
 8018ed4:	0010      	movs	r0, r2
 8018ed6:	0019      	movs	r1, r3
 8018ed8:	f7e7 fb44 	bl	8000564 <__aeabi_d2uiz>
 8018edc:	0002      	movs	r2, r0
 8018ede:	4b7e      	ldr	r3, [pc, #504]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8018ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8018ee2:	6878      	ldr	r0, [r7, #4]
 8018ee4:	f7e9 fca2 	bl	800282c <__aeabi_ui2d>
 8018ee8:	0002      	movs	r2, r0
 8018eea:	000b      	movs	r3, r1
 8018eec:	2000      	movs	r0, #0
 8018eee:	497e      	ldr	r1, [pc, #504]	@ (80190e8 <SX1276SetRxConfig+0x30c>)
 8018ef0:	f7e8 f98a 	bl	8001208 <__aeabi_ddiv>
 8018ef4:	0002      	movs	r2, r0
 8018ef6:	000b      	movs	r3, r1
 8018ef8:	0010      	movs	r0, r2
 8018efa:	0019      	movs	r1, r3
 8018efc:	f7e7 fb32 	bl	8000564 <__aeabi_d2uiz>
 8018f00:	0003      	movs	r3, r0
 8018f02:	b29b      	uxth	r3, r3
 8018f04:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	0a1b      	lsrs	r3, r3, #8
 8018f0a:	b2db      	uxtb	r3, r3
 8018f0c:	0019      	movs	r1, r3
 8018f0e:	2002      	movs	r0, #2
 8018f10:	f001 fa34 	bl	801a37c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	b2db      	uxtb	r3, r3
 8018f18:	0019      	movs	r1, r3
 8018f1a:	2003      	movs	r0, #3
 8018f1c:	f001 fa2e 	bl	801a37c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	0018      	movs	r0, r3
 8018f24:	f001 fb38 	bl	801a598 <GetFskBandwidthRegValue>
 8018f28:	0003      	movs	r3, r0
 8018f2a:	0019      	movs	r1, r3
 8018f2c:	2012      	movs	r0, #18
 8018f2e:	f001 fa25 	bl	801a37c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8018f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f34:	0018      	movs	r0, r3
 8018f36:	f001 fb2f 	bl	801a598 <GetFskBandwidthRegValue>
 8018f3a:	0003      	movs	r3, r0
 8018f3c:	0019      	movs	r1, r3
 8018f3e:	2013      	movs	r0, #19
 8018f40:	f001 fa1c 	bl	801a37c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8018f44:	2408      	movs	r4, #8
 8018f46:	1933      	adds	r3, r6, r4
 8018f48:	19db      	adds	r3, r3, r7
 8018f4a:	881b      	ldrh	r3, [r3, #0]
 8018f4c:	0a1b      	lsrs	r3, r3, #8
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	b2db      	uxtb	r3, r3
 8018f52:	0019      	movs	r1, r3
 8018f54:	2025      	movs	r0, #37	@ 0x25
 8018f56:	f001 fa11 	bl	801a37c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8018f5a:	1933      	adds	r3, r6, r4
 8018f5c:	19db      	adds	r3, r3, r7
 8018f5e:	881b      	ldrh	r3, [r3, #0]
 8018f60:	b2db      	uxtb	r3, r3
 8018f62:	0019      	movs	r1, r3
 8018f64:	2026      	movs	r0, #38	@ 0x26
 8018f66:	f001 fa09 	bl	801a37c <SX1276Write>
            if( fixLen == 1 )
 8018f6a:	222c      	movs	r2, #44	@ 0x2c
 8018f6c:	1913      	adds	r3, r2, r4
 8018f6e:	19db      	adds	r3, r3, r7
 8018f70:	781b      	ldrb	r3, [r3, #0]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d008      	beq.n	8018f88 <SX1276SetRxConfig+0x1ac>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8018f76:	2130      	movs	r1, #48	@ 0x30
 8018f78:	190b      	adds	r3, r1, r4
 8018f7a:	19db      	adds	r3, r3, r7
 8018f7c:	781b      	ldrb	r3, [r3, #0]
 8018f7e:	0019      	movs	r1, r3
 8018f80:	2032      	movs	r0, #50	@ 0x32
 8018f82:	f001 f9fb 	bl	801a37c <SX1276Write>
 8018f86:	e003      	b.n	8018f90 <SX1276SetRxConfig+0x1b4>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8018f88:	21ff      	movs	r1, #255	@ 0xff
 8018f8a:	2032      	movs	r0, #50	@ 0x32
 8018f8c:	f001 f9f6 	bl	801a37c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8018f90:	2030      	movs	r0, #48	@ 0x30
 8018f92:	f001 fa04 	bl	801a39e <SX1276Read>
 8018f96:	0003      	movs	r3, r0
 8018f98:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8018f9a:	226f      	movs	r2, #111	@ 0x6f
 8018f9c:	4013      	ands	r3, r2
 8018f9e:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8018fa0:	232c      	movs	r3, #44	@ 0x2c
 8018fa2:	2108      	movs	r1, #8
 8018fa4:	185b      	adds	r3, r3, r1
 8018fa6:	19db      	adds	r3, r3, r7
 8018fa8:	781b      	ldrb	r3, [r3, #0]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d001      	beq.n	8018fb2 <SX1276SetRxConfig+0x1d6>
 8018fae:	2300      	movs	r3, #0
 8018fb0:	e001      	b.n	8018fb6 <SX1276SetRxConfig+0x1da>
 8018fb2:	2380      	movs	r3, #128	@ 0x80
 8018fb4:	425b      	negs	r3, r3
 8018fb6:	4313      	orrs	r3, r2
 8018fb8:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8018fba:	2334      	movs	r3, #52	@ 0x34
 8018fbc:	2108      	movs	r1, #8
 8018fbe:	185b      	adds	r3, r3, r1
 8018fc0:	19db      	adds	r3, r3, r7
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8018fc6:	b25b      	sxtb	r3, r3
 8018fc8:	4313      	orrs	r3, r2
 8018fca:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8018fcc:	b2db      	uxtb	r3, r3
 8018fce:	0019      	movs	r1, r3
 8018fd0:	2030      	movs	r0, #48	@ 0x30
 8018fd2:	f001 f9d3 	bl	801a37c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8018fd6:	2031      	movs	r0, #49	@ 0x31
 8018fd8:	f001 f9e1 	bl	801a39e <SX1276Read>
 8018fdc:	0003      	movs	r3, r0
 8018fde:	001a      	movs	r2, r3
 8018fe0:	2340      	movs	r3, #64	@ 0x40
 8018fe2:	4313      	orrs	r3, r2
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	0019      	movs	r1, r3
 8018fe8:	2031      	movs	r0, #49	@ 0x31
 8018fea:	f001 f9c7 	bl	801a37c <SX1276Write>
        break;
 8018fee:	e163      	b.n	80192b8 <SX1276SetRxConfig+0x4dc>
            if( bandwidth > 2 )
 8018ff0:	68bb      	ldr	r3, [r7, #8]
 8018ff2:	2b02      	cmp	r3, #2
 8018ff4:	d901      	bls.n	8018ffa <SX1276SetRxConfig+0x21e>
                while( 1 );
 8018ff6:	46c0      	nop			@ (mov r8, r8)
 8018ff8:	e7fd      	b.n	8018ff6 <SX1276SetRxConfig+0x21a>
            bandwidth += 7;
 8018ffa:	68bb      	ldr	r3, [r7, #8]
 8018ffc:	3307      	adds	r3, #7
 8018ffe:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019000:	4b35      	ldr	r3, [pc, #212]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8019002:	68ba      	ldr	r2, [r7, #8]
 8019004:	645a      	str	r2, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019006:	4b34      	ldr	r3, [pc, #208]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8019008:	687a      	ldr	r2, [r7, #4]
 801900a:	649a      	str	r2, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801900c:	4b32      	ldr	r3, [pc, #200]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 801900e:	220e      	movs	r2, #14
 8019010:	18ba      	adds	r2, r7, r2
 8019012:	214d      	movs	r1, #77	@ 0x4d
 8019014:	7812      	ldrb	r2, [r2, #0]
 8019016:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019018:	4b2f      	ldr	r3, [pc, #188]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 801901a:	2224      	movs	r2, #36	@ 0x24
 801901c:	2008      	movs	r0, #8
 801901e:	1812      	adds	r2, r2, r0
 8019020:	19d2      	adds	r2, r2, r7
 8019022:	214e      	movs	r1, #78	@ 0x4e
 8019024:	8812      	ldrh	r2, [r2, #0]
 8019026:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019028:	4b2b      	ldr	r3, [pc, #172]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 801902a:	222c      	movs	r2, #44	@ 0x2c
 801902c:	1812      	adds	r2, r2, r0
 801902e:	19d2      	adds	r2, r2, r7
 8019030:	2150      	movs	r1, #80	@ 0x50
 8019032:	7812      	ldrb	r2, [r2, #0]
 8019034:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8019036:	4b28      	ldr	r3, [pc, #160]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8019038:	2230      	movs	r2, #48	@ 0x30
 801903a:	1812      	adds	r2, r2, r0
 801903c:	19d2      	adds	r2, r2, r7
 801903e:	2151      	movs	r1, #81	@ 0x51
 8019040:	7812      	ldrb	r2, [r2, #0]
 8019042:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019044:	4b24      	ldr	r3, [pc, #144]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8019046:	2234      	movs	r2, #52	@ 0x34
 8019048:	1812      	adds	r2, r2, r0
 801904a:	19d2      	adds	r2, r2, r7
 801904c:	2152      	movs	r1, #82	@ 0x52
 801904e:	7812      	ldrb	r2, [r2, #0]
 8019050:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019052:	4b21      	ldr	r3, [pc, #132]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8019054:	2238      	movs	r2, #56	@ 0x38
 8019056:	1812      	adds	r2, r2, r0
 8019058:	19d2      	adds	r2, r2, r7
 801905a:	2153      	movs	r1, #83	@ 0x53
 801905c:	7812      	ldrb	r2, [r2, #0]
 801905e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019060:	4b1d      	ldr	r3, [pc, #116]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8019062:	223c      	movs	r2, #60	@ 0x3c
 8019064:	1812      	adds	r2, r2, r0
 8019066:	19d2      	adds	r2, r2, r7
 8019068:	2154      	movs	r1, #84	@ 0x54
 801906a:	7812      	ldrb	r2, [r2, #0]
 801906c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801906e:	4b1a      	ldr	r3, [pc, #104]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8019070:	2220      	movs	r2, #32
 8019072:	2020      	movs	r0, #32
 8019074:	1812      	adds	r2, r2, r0
 8019076:	2108      	movs	r1, #8
 8019078:	468c      	mov	ip, r1
 801907a:	44bc      	add	ip, r7
 801907c:	4462      	add	r2, ip
 801907e:	2155      	movs	r1, #85	@ 0x55
 8019080:	7812      	ldrb	r2, [r2, #0]
 8019082:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019084:	4b14      	ldr	r3, [pc, #80]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 8019086:	2224      	movs	r2, #36	@ 0x24
 8019088:	1812      	adds	r2, r2, r0
 801908a:	2108      	movs	r1, #8
 801908c:	468c      	mov	ip, r1
 801908e:	44bc      	add	ip, r7
 8019090:	4462      	add	r2, ip
 8019092:	2156      	movs	r1, #86	@ 0x56
 8019094:	7812      	ldrb	r2, [r2, #0]
 8019096:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	2b0c      	cmp	r3, #12
 801909c:	d902      	bls.n	80190a4 <SX1276SetRxConfig+0x2c8>
                datarate = 12;
 801909e:	230c      	movs	r3, #12
 80190a0:	607b      	str	r3, [r7, #4]
 80190a2:	e004      	b.n	80190ae <SX1276SetRxConfig+0x2d2>
            else if( datarate < 6 )
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	2b05      	cmp	r3, #5
 80190a8:	d801      	bhi.n	80190ae <SX1276SetRxConfig+0x2d2>
                datarate = 6;
 80190aa:	2306      	movs	r3, #6
 80190ac:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80190ae:	68bb      	ldr	r3, [r7, #8]
 80190b0:	2b07      	cmp	r3, #7
 80190b2:	d105      	bne.n	80190c0 <SX1276SetRxConfig+0x2e4>
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	2b0b      	cmp	r3, #11
 80190b8:	d008      	beq.n	80190cc <SX1276SetRxConfig+0x2f0>
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	2b0c      	cmp	r3, #12
 80190be:	d005      	beq.n	80190cc <SX1276SetRxConfig+0x2f0>
 80190c0:	68bb      	ldr	r3, [r7, #8]
 80190c2:	2b08      	cmp	r3, #8
 80190c4:	d112      	bne.n	80190ec <SX1276SetRxConfig+0x310>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2b0c      	cmp	r3, #12
 80190ca:	d10f      	bne.n	80190ec <SX1276SetRxConfig+0x310>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80190cc:	4b02      	ldr	r3, [pc, #8]	@ (80190d8 <SX1276SetRxConfig+0x2fc>)
 80190ce:	224c      	movs	r2, #76	@ 0x4c
 80190d0:	2101      	movs	r1, #1
 80190d2:	5499      	strb	r1, [r3, r2]
 80190d4:	e00e      	b.n	80190f4 <SX1276SetRxConfig+0x318>
 80190d6:	46c0      	nop			@ (mov r8, r8)
 80190d8:	20001538 	.word	0x20001538
 80190dc:	3ff00000 	.word	0x3ff00000
 80190e0:	40200000 	.word	0x40200000
 80190e4:	408f4000 	.word	0x408f4000
 80190e8:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80190ec:	4b74      	ldr	r3, [pc, #464]	@ (80192c0 <SX1276SetRxConfig+0x4e4>)
 80190ee:	224c      	movs	r2, #76	@ 0x4c
 80190f0:	2100      	movs	r1, #0
 80190f2:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80190f4:	201d      	movs	r0, #29
 80190f6:	f001 f952 	bl	801a39e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80190fa:	68bb      	ldr	r3, [r7, #8]
 80190fc:	b2db      	uxtb	r3, r3
 80190fe:	011b      	lsls	r3, r3, #4
 8019100:	b2da      	uxtb	r2, r3
 8019102:	230e      	movs	r3, #14
 8019104:	18fb      	adds	r3, r7, r3
 8019106:	781b      	ldrb	r3, [r3, #0]
 8019108:	18db      	adds	r3, r3, r3
 801910a:	b2db      	uxtb	r3, r3
 801910c:	4313      	orrs	r3, r2
 801910e:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019110:	242c      	movs	r4, #44	@ 0x2c
 8019112:	2608      	movs	r6, #8
 8019114:	19a3      	adds	r3, r4, r6
 8019116:	19db      	adds	r3, r3, r7
 8019118:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801911a:	4313      	orrs	r3, r2
 801911c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801911e:	0019      	movs	r1, r3
 8019120:	201d      	movs	r0, #29
 8019122:	f001 f92b 	bl	801a37c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019126:	201e      	movs	r0, #30
 8019128:	f001 f939 	bl	801a39e <SX1276Read>
 801912c:	0003      	movs	r3, r0
 801912e:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8019130:	2308      	movs	r3, #8
 8019132:	4013      	ands	r3, r2
 8019134:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	b2db      	uxtb	r3, r3
 801913a:	011b      	lsls	r3, r3, #4
 801913c:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 801913e:	4313      	orrs	r3, r2
 8019140:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019142:	2334      	movs	r3, #52	@ 0x34
 8019144:	199b      	adds	r3, r3, r6
 8019146:	19db      	adds	r3, r3, r7
 8019148:	781b      	ldrb	r3, [r3, #0]
 801914a:	009b      	lsls	r3, r3, #2
 801914c:	b2db      	uxtb	r3, r3
 801914e:	4313      	orrs	r3, r2
 8019150:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8019152:	2528      	movs	r5, #40	@ 0x28
 8019154:	19ab      	adds	r3, r5, r6
 8019156:	19db      	adds	r3, r3, r7
 8019158:	881b      	ldrh	r3, [r3, #0]
 801915a:	0a1b      	lsrs	r3, r3, #8
 801915c:	b29b      	uxth	r3, r3
 801915e:	b2db      	uxtb	r3, r3
 8019160:	2103      	movs	r1, #3
 8019162:	400b      	ands	r3, r1
 8019164:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019166:	4313      	orrs	r3, r2
 8019168:	b2db      	uxtb	r3, r3
 801916a:	0019      	movs	r1, r3
 801916c:	201e      	movs	r0, #30
 801916e:	f001 f905 	bl	801a37c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019172:	2026      	movs	r0, #38	@ 0x26
 8019174:	f001 f913 	bl	801a39e <SX1276Read>
 8019178:	0003      	movs	r3, r0
 801917a:	b25b      	sxtb	r3, r3
 801917c:	2208      	movs	r2, #8
 801917e:	4393      	bics	r3, r2
 8019180:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019182:	4b4f      	ldr	r3, [pc, #316]	@ (80192c0 <SX1276SetRxConfig+0x4e4>)
 8019184:	214c      	movs	r1, #76	@ 0x4c
 8019186:	5c5b      	ldrb	r3, [r3, r1]
 8019188:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801918a:	b25b      	sxtb	r3, r3
 801918c:	4313      	orrs	r3, r2
 801918e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019190:	b2db      	uxtb	r3, r3
 8019192:	0019      	movs	r1, r3
 8019194:	2026      	movs	r0, #38	@ 0x26
 8019196:	f001 f8f1 	bl	801a37c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 801919a:	19ab      	adds	r3, r5, r6
 801919c:	19db      	adds	r3, r3, r7
 801919e:	881b      	ldrh	r3, [r3, #0]
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	0019      	movs	r1, r3
 80191a4:	201f      	movs	r0, #31
 80191a6:	f001 f8e9 	bl	801a37c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80191aa:	2524      	movs	r5, #36	@ 0x24
 80191ac:	19ab      	adds	r3, r5, r6
 80191ae:	19db      	adds	r3, r3, r7
 80191b0:	881b      	ldrh	r3, [r3, #0]
 80191b2:	0a1b      	lsrs	r3, r3, #8
 80191b4:	b29b      	uxth	r3, r3
 80191b6:	b2db      	uxtb	r3, r3
 80191b8:	0019      	movs	r1, r3
 80191ba:	2020      	movs	r0, #32
 80191bc:	f001 f8de 	bl	801a37c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80191c0:	19ab      	adds	r3, r5, r6
 80191c2:	19db      	adds	r3, r3, r7
 80191c4:	881b      	ldrh	r3, [r3, #0]
 80191c6:	b2db      	uxtb	r3, r3
 80191c8:	0019      	movs	r1, r3
 80191ca:	2021      	movs	r0, #33	@ 0x21
 80191cc:	f001 f8d6 	bl	801a37c <SX1276Write>
            if( fixLen == 1 )
 80191d0:	19a3      	adds	r3, r4, r6
 80191d2:	19db      	adds	r3, r3, r7
 80191d4:	781b      	ldrb	r3, [r3, #0]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d007      	beq.n	80191ea <SX1276SetRxConfig+0x40e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80191da:	2330      	movs	r3, #48	@ 0x30
 80191dc:	199b      	adds	r3, r3, r6
 80191de:	19db      	adds	r3, r3, r7
 80191e0:	781b      	ldrb	r3, [r3, #0]
 80191e2:	0019      	movs	r1, r3
 80191e4:	2022      	movs	r0, #34	@ 0x22
 80191e6:	f001 f8c9 	bl	801a37c <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80191ea:	4b35      	ldr	r3, [pc, #212]	@ (80192c0 <SX1276SetRxConfig+0x4e4>)
 80191ec:	2253      	movs	r2, #83	@ 0x53
 80191ee:	5c9b      	ldrb	r3, [r3, r2]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d013      	beq.n	801921c <SX1276SetRxConfig+0x440>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80191f4:	2044      	movs	r0, #68	@ 0x44
 80191f6:	f001 f8d2 	bl	801a39e <SX1276Read>
 80191fa:	0003      	movs	r3, r0
 80191fc:	001a      	movs	r2, r3
 80191fe:	2380      	movs	r3, #128	@ 0x80
 8019200:	425b      	negs	r3, r3
 8019202:	4313      	orrs	r3, r2
 8019204:	b2db      	uxtb	r3, r3
 8019206:	0019      	movs	r1, r3
 8019208:	2044      	movs	r0, #68	@ 0x44
 801920a:	f001 f8b7 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801920e:	4b2c      	ldr	r3, [pc, #176]	@ (80192c0 <SX1276SetRxConfig+0x4e4>)
 8019210:	2254      	movs	r2, #84	@ 0x54
 8019212:	5c9b      	ldrb	r3, [r3, r2]
 8019214:	0019      	movs	r1, r3
 8019216:	2024      	movs	r0, #36	@ 0x24
 8019218:	f001 f8b0 	bl	801a37c <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 801921c:	68bb      	ldr	r3, [r7, #8]
 801921e:	2b09      	cmp	r3, #9
 8019220:	d10d      	bne.n	801923e <SX1276SetRxConfig+0x462>
 8019222:	4b27      	ldr	r3, [pc, #156]	@ (80192c0 <SX1276SetRxConfig+0x4e4>)
 8019224:	689b      	ldr	r3, [r3, #8]
 8019226:	4a27      	ldr	r2, [pc, #156]	@ (80192c4 <SX1276SetRxConfig+0x4e8>)
 8019228:	4293      	cmp	r3, r2
 801922a:	d908      	bls.n	801923e <SX1276SetRxConfig+0x462>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 801922c:	2102      	movs	r1, #2
 801922e:	2036      	movs	r0, #54	@ 0x36
 8019230:	f001 f8a4 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8019234:	2164      	movs	r1, #100	@ 0x64
 8019236:	203a      	movs	r0, #58	@ 0x3a
 8019238:	f001 f8a0 	bl	801a37c <SX1276Write>
 801923c:	e00f      	b.n	801925e <SX1276SetRxConfig+0x482>
            else if( bandwidth == 9 )
 801923e:	68bb      	ldr	r3, [r7, #8]
 8019240:	2b09      	cmp	r3, #9
 8019242:	d108      	bne.n	8019256 <SX1276SetRxConfig+0x47a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019244:	2102      	movs	r1, #2
 8019246:	2036      	movs	r0, #54	@ 0x36
 8019248:	f001 f898 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 801924c:	217f      	movs	r1, #127	@ 0x7f
 801924e:	203a      	movs	r0, #58	@ 0x3a
 8019250:	f001 f894 	bl	801a37c <SX1276Write>
 8019254:	e003      	b.n	801925e <SX1276SetRxConfig+0x482>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8019256:	2103      	movs	r1, #3
 8019258:	2036      	movs	r0, #54	@ 0x36
 801925a:	f001 f88f 	bl	801a37c <SX1276Write>
            if( datarate == 6 )
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2b06      	cmp	r3, #6
 8019262:	d114      	bne.n	801928e <SX1276SetRxConfig+0x4b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019264:	2031      	movs	r0, #49	@ 0x31
 8019266:	f001 f89a 	bl	801a39e <SX1276Read>
 801926a:	0003      	movs	r3, r0
 801926c:	b25b      	sxtb	r3, r3
 801926e:	2207      	movs	r2, #7
 8019270:	4393      	bics	r3, r2
 8019272:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019274:	2205      	movs	r2, #5
 8019276:	4313      	orrs	r3, r2
 8019278:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801927a:	b2db      	uxtb	r3, r3
 801927c:	0019      	movs	r1, r3
 801927e:	2031      	movs	r0, #49	@ 0x31
 8019280:	f001 f87c 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019284:	210c      	movs	r1, #12
 8019286:	2037      	movs	r0, #55	@ 0x37
 8019288:	f001 f878 	bl	801a37c <SX1276Write>
        break;
 801928c:	e013      	b.n	80192b6 <SX1276SetRxConfig+0x4da>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801928e:	2031      	movs	r0, #49	@ 0x31
 8019290:	f001 f885 	bl	801a39e <SX1276Read>
 8019294:	0003      	movs	r3, r0
 8019296:	b25b      	sxtb	r3, r3
 8019298:	2207      	movs	r2, #7
 801929a:	4393      	bics	r3, r2
 801929c:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801929e:	2203      	movs	r2, #3
 80192a0:	4313      	orrs	r3, r2
 80192a2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	0019      	movs	r1, r3
 80192a8:	2031      	movs	r0, #49	@ 0x31
 80192aa:	f001 f867 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80192ae:	210a      	movs	r1, #10
 80192b0:	2037      	movs	r0, #55	@ 0x37
 80192b2:	f001 f863 	bl	801a37c <SX1276Write>
        break;
 80192b6:	46c0      	nop			@ (mov r8, r8)
}
 80192b8:	46c0      	nop			@ (mov r8, r8)
 80192ba:	46bd      	mov	sp, r7
 80192bc:	b005      	add	sp, #20
 80192be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192c0:	20001538 	.word	0x20001538
 80192c4:	1f4add40 	.word	0x1f4add40

080192c8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80192c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192ca:	b085      	sub	sp, #20
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	60ba      	str	r2, [r7, #8]
 80192d0:	607b      	str	r3, [r7, #4]
 80192d2:	240f      	movs	r4, #15
 80192d4:	193b      	adds	r3, r7, r4
 80192d6:	1c02      	adds	r2, r0, #0
 80192d8:	701a      	strb	r2, [r3, #0]
 80192da:	230e      	movs	r3, #14
 80192dc:	18fb      	adds	r3, r7, r3
 80192de:	1c0a      	adds	r2, r1, #0
 80192e0:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 80192e2:	4bb1      	ldr	r3, [pc, #708]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 80192e4:	791b      	ldrb	r3, [r3, #4]
 80192e6:	2b01      	cmp	r3, #1
 80192e8:	d108      	bne.n	80192fc <SX1276SetTxConfig+0x34>
 80192ea:	193b      	adds	r3, r7, r4
 80192ec:	781b      	ldrb	r3, [r3, #0]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d104      	bne.n	80192fc <SX1276SetTxConfig+0x34>
    {
        SX1276SetSleep( );
 80192f2:	f000 fc4f 	bl	8019b94 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 80192f6:	2001      	movs	r0, #1
 80192f8:	f7eb fad7 	bl	80048aa <HAL_Delay>
    }

    SX1276SetModem( modem );
 80192fc:	240f      	movs	r4, #15
 80192fe:	193b      	adds	r3, r7, r4
 8019300:	781b      	ldrb	r3, [r3, #0]
 8019302:	0018      	movs	r0, r3
 8019304:	f000 ffe0 	bl	801a2c8 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8019308:	250e      	movs	r5, #14
 801930a:	197b      	adds	r3, r7, r5
 801930c:	781b      	ldrb	r3, [r3, #0]
 801930e:	b25b      	sxtb	r3, r3
 8019310:	0018      	movs	r0, r3
 8019312:	f000 fb2d 	bl	8019970 <SX1276SetRfTxPower>
    power = 0;  // Изменение параметра мощности передачи
 8019316:	197b      	adds	r3, r7, r5
 8019318:	2200      	movs	r2, #0
 801931a:	701a      	strb	r2, [r3, #0]
    switch( modem )
 801931c:	193b      	adds	r3, r7, r4
 801931e:	781b      	ldrb	r3, [r3, #0]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d003      	beq.n	801932c <SX1276SetTxConfig+0x64>
 8019324:	2b01      	cmp	r3, #1
 8019326:	d100      	bne.n	801932a <SX1276SetTxConfig+0x62>
 8019328:	e0c1      	b.n	80194ae <SX1276SetTxConfig+0x1e6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801932a:	e1f7      	b.n	801971c <SX1276SetTxConfig+0x454>
            SX1276.Settings.Fsk.Power = power;
 801932c:	4b9e      	ldr	r3, [pc, #632]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 801932e:	220e      	movs	r2, #14
 8019330:	18ba      	adds	r2, r7, r2
 8019332:	7812      	ldrb	r2, [r2, #0]
 8019334:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8019336:	4b9c      	ldr	r3, [pc, #624]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 8019338:	68ba      	ldr	r2, [r7, #8]
 801933a:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801933c:	4b9a      	ldr	r3, [pc, #616]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019342:	4b99      	ldr	r3, [pc, #612]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 8019344:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019346:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019348:	4b97      	ldr	r3, [pc, #604]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 801934a:	2420      	movs	r4, #32
 801934c:	2608      	movs	r6, #8
 801934e:	19a2      	adds	r2, r4, r6
 8019350:	2108      	movs	r1, #8
 8019352:	468c      	mov	ip, r1
 8019354:	44bc      	add	ip, r7
 8019356:	4462      	add	r2, ip
 8019358:	8812      	ldrh	r2, [r2, #0]
 801935a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 801935c:	4b92      	ldr	r3, [pc, #584]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 801935e:	2524      	movs	r5, #36	@ 0x24
 8019360:	19aa      	adds	r2, r5, r6
 8019362:	2108      	movs	r1, #8
 8019364:	468c      	mov	ip, r1
 8019366:	44bc      	add	ip, r7
 8019368:	4462      	add	r2, ip
 801936a:	2122      	movs	r1, #34	@ 0x22
 801936c:	7812      	ldrb	r2, [r2, #0]
 801936e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019370:	4b8d      	ldr	r3, [pc, #564]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 8019372:	2228      	movs	r2, #40	@ 0x28
 8019374:	1992      	adds	r2, r2, r6
 8019376:	2108      	movs	r1, #8
 8019378:	468c      	mov	ip, r1
 801937a:	44bc      	add	ip, r7
 801937c:	4462      	add	r2, ip
 801937e:	2124      	movs	r1, #36	@ 0x24
 8019380:	7812      	ldrb	r2, [r2, #0]
 8019382:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019384:	4b88      	ldr	r3, [pc, #544]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 8019386:	2234      	movs	r2, #52	@ 0x34
 8019388:	1992      	adds	r2, r2, r6
 801938a:	2108      	movs	r1, #8
 801938c:	468c      	mov	ip, r1
 801938e:	44bc      	add	ip, r7
 8019390:	4462      	add	r2, ip
 8019392:	2125      	movs	r1, #37	@ 0x25
 8019394:	7812      	ldrb	r2, [r2, #0]
 8019396:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8019398:	4b83      	ldr	r3, [pc, #524]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 801939a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801939c:	629a      	str	r2, [r3, #40]	@ 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 801939e:	68b8      	ldr	r0, [r7, #8]
 80193a0:	f7e9 fa44 	bl	800282c <__aeabi_ui2d>
 80193a4:	2200      	movs	r2, #0
 80193a6:	4b81      	ldr	r3, [pc, #516]	@ (80195ac <SX1276SetTxConfig+0x2e4>)
 80193a8:	f7e7 ff2e 	bl	8001208 <__aeabi_ddiv>
 80193ac:	0002      	movs	r2, r0
 80193ae:	000b      	movs	r3, r1
 80193b0:	0010      	movs	r0, r2
 80193b2:	0019      	movs	r1, r3
 80193b4:	f7e7 f8d6 	bl	8000564 <__aeabi_d2uiz>
 80193b8:	0003      	movs	r3, r0
 80193ba:	b29b      	uxth	r3, r3
 80193bc:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	0a1b      	lsrs	r3, r3, #8
 80193c2:	b2db      	uxtb	r3, r3
 80193c4:	0019      	movs	r1, r3
 80193c6:	2004      	movs	r0, #4
 80193c8:	f000 ffd8 	bl	801a37c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80193cc:	68bb      	ldr	r3, [r7, #8]
 80193ce:	b2db      	uxtb	r3, r3
 80193d0:	0019      	movs	r1, r3
 80193d2:	2005      	movs	r0, #5
 80193d4:	f000 ffd2 	bl	801a37c <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80193d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80193da:	f7e9 fa27 	bl	800282c <__aeabi_ui2d>
 80193de:	0002      	movs	r2, r0
 80193e0:	000b      	movs	r3, r1
 80193e2:	2000      	movs	r0, #0
 80193e4:	4972      	ldr	r1, [pc, #456]	@ (80195b0 <SX1276SetTxConfig+0x2e8>)
 80193e6:	f7e7 ff0f 	bl	8001208 <__aeabi_ddiv>
 80193ea:	0002      	movs	r2, r0
 80193ec:	000b      	movs	r3, r1
 80193ee:	0010      	movs	r0, r2
 80193f0:	0019      	movs	r1, r3
 80193f2:	f7e7 f8b7 	bl	8000564 <__aeabi_d2uiz>
 80193f6:	0003      	movs	r3, r0
 80193f8:	b29b      	uxth	r3, r3
 80193fa:	62bb      	str	r3, [r7, #40]	@ 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80193fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193fe:	0a1b      	lsrs	r3, r3, #8
 8019400:	b2db      	uxtb	r3, r3
 8019402:	0019      	movs	r1, r3
 8019404:	2002      	movs	r0, #2
 8019406:	f000 ffb9 	bl	801a37c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801940a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801940c:	b2db      	uxtb	r3, r3
 801940e:	0019      	movs	r1, r3
 8019410:	2003      	movs	r0, #3
 8019412:	f000 ffb3 	bl	801a37c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8019416:	19a3      	adds	r3, r4, r6
 8019418:	2208      	movs	r2, #8
 801941a:	4694      	mov	ip, r2
 801941c:	44bc      	add	ip, r7
 801941e:	4463      	add	r3, ip
 8019420:	881b      	ldrh	r3, [r3, #0]
 8019422:	0a1b      	lsrs	r3, r3, #8
 8019424:	b29b      	uxth	r3, r3
 8019426:	b2db      	uxtb	r3, r3
 8019428:	0019      	movs	r1, r3
 801942a:	2025      	movs	r0, #37	@ 0x25
 801942c:	f000 ffa6 	bl	801a37c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8019430:	19a3      	adds	r3, r4, r6
 8019432:	2208      	movs	r2, #8
 8019434:	4694      	mov	ip, r2
 8019436:	44bc      	add	ip, r7
 8019438:	4463      	add	r3, ip
 801943a:	881b      	ldrh	r3, [r3, #0]
 801943c:	b2db      	uxtb	r3, r3
 801943e:	0019      	movs	r1, r3
 8019440:	2026      	movs	r0, #38	@ 0x26
 8019442:	f000 ff9b 	bl	801a37c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019446:	2030      	movs	r0, #48	@ 0x30
 8019448:	f000 ffa9 	bl	801a39e <SX1276Read>
 801944c:	0003      	movs	r3, r0
 801944e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019450:	226f      	movs	r2, #111	@ 0x6f
 8019452:	4013      	ands	r3, r2
 8019454:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019456:	19ab      	adds	r3, r5, r6
 8019458:	2108      	movs	r1, #8
 801945a:	468c      	mov	ip, r1
 801945c:	44bc      	add	ip, r7
 801945e:	4463      	add	r3, ip
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d001      	beq.n	801946a <SX1276SetTxConfig+0x1a2>
 8019466:	2300      	movs	r3, #0
 8019468:	e001      	b.n	801946e <SX1276SetTxConfig+0x1a6>
 801946a:	2380      	movs	r3, #128	@ 0x80
 801946c:	425b      	negs	r3, r3
 801946e:	4313      	orrs	r3, r2
 8019470:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019472:	2328      	movs	r3, #40	@ 0x28
 8019474:	2108      	movs	r1, #8
 8019476:	185b      	adds	r3, r3, r1
 8019478:	2108      	movs	r1, #8
 801947a:	468c      	mov	ip, r1
 801947c:	44bc      	add	ip, r7
 801947e:	4463      	add	r3, ip
 8019480:	781b      	ldrb	r3, [r3, #0]
 8019482:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019484:	b25b      	sxtb	r3, r3
 8019486:	4313      	orrs	r3, r2
 8019488:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801948a:	b2db      	uxtb	r3, r3
 801948c:	0019      	movs	r1, r3
 801948e:	2030      	movs	r0, #48	@ 0x30
 8019490:	f000 ff74 	bl	801a37c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019494:	2031      	movs	r0, #49	@ 0x31
 8019496:	f000 ff82 	bl	801a39e <SX1276Read>
 801949a:	0003      	movs	r3, r0
 801949c:	001a      	movs	r2, r3
 801949e:	2340      	movs	r3, #64	@ 0x40
 80194a0:	4313      	orrs	r3, r2
 80194a2:	b2db      	uxtb	r3, r3
 80194a4:	0019      	movs	r1, r3
 80194a6:	2031      	movs	r0, #49	@ 0x31
 80194a8:	f000 ff68 	bl	801a37c <SX1276Write>
        break;
 80194ac:	e136      	b.n	801971c <SX1276SetTxConfig+0x454>
            SX1276.Settings.LoRa.Power = power;
 80194ae:	4b3e      	ldr	r3, [pc, #248]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 80194b0:	220e      	movs	r2, #14
 80194b2:	18ba      	adds	r2, r7, r2
 80194b4:	2140      	movs	r1, #64	@ 0x40
 80194b6:	7812      	ldrb	r2, [r2, #0]
 80194b8:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	2b02      	cmp	r3, #2
 80194be:	d901      	bls.n	80194c4 <SX1276SetTxConfig+0x1fc>
                while( 1 );
 80194c0:	46c0      	nop			@ (mov r8, r8)
 80194c2:	e7fd      	b.n	80194c0 <SX1276SetTxConfig+0x1f8>
            bandwidth += 7;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	3307      	adds	r3, #7
 80194c8:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80194ca:	4b37      	ldr	r3, [pc, #220]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 80194cc:	687a      	ldr	r2, [r7, #4]
 80194ce:	645a      	str	r2, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80194d0:	4b35      	ldr	r3, [pc, #212]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 80194d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80194d4:	649a      	str	r2, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80194d6:	4b34      	ldr	r3, [pc, #208]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 80194d8:	221c      	movs	r2, #28
 80194da:	2008      	movs	r0, #8
 80194dc:	1812      	adds	r2, r2, r0
 80194de:	2108      	movs	r1, #8
 80194e0:	468c      	mov	ip, r1
 80194e2:	44bc      	add	ip, r7
 80194e4:	4462      	add	r2, ip
 80194e6:	214d      	movs	r1, #77	@ 0x4d
 80194e8:	7812      	ldrb	r2, [r2, #0]
 80194ea:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80194ec:	4b2e      	ldr	r3, [pc, #184]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 80194ee:	2220      	movs	r2, #32
 80194f0:	1812      	adds	r2, r2, r0
 80194f2:	2108      	movs	r1, #8
 80194f4:	468c      	mov	ip, r1
 80194f6:	44bc      	add	ip, r7
 80194f8:	4462      	add	r2, ip
 80194fa:	214e      	movs	r1, #78	@ 0x4e
 80194fc:	8812      	ldrh	r2, [r2, #0]
 80194fe:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019500:	4b29      	ldr	r3, [pc, #164]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 8019502:	2224      	movs	r2, #36	@ 0x24
 8019504:	1812      	adds	r2, r2, r0
 8019506:	2108      	movs	r1, #8
 8019508:	468c      	mov	ip, r1
 801950a:	44bc      	add	ip, r7
 801950c:	4462      	add	r2, ip
 801950e:	2150      	movs	r1, #80	@ 0x50
 8019510:	7812      	ldrb	r2, [r2, #0]
 8019512:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019514:	4b24      	ldr	r3, [pc, #144]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 8019516:	222c      	movs	r2, #44	@ 0x2c
 8019518:	1812      	adds	r2, r2, r0
 801951a:	2108      	movs	r1, #8
 801951c:	468c      	mov	ip, r1
 801951e:	44bc      	add	ip, r7
 8019520:	4462      	add	r2, ip
 8019522:	2153      	movs	r1, #83	@ 0x53
 8019524:	7812      	ldrb	r2, [r2, #0]
 8019526:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019528:	4b1f      	ldr	r3, [pc, #124]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 801952a:	2230      	movs	r2, #48	@ 0x30
 801952c:	1812      	adds	r2, r2, r0
 801952e:	2108      	movs	r1, #8
 8019530:	468c      	mov	ip, r1
 8019532:	44bc      	add	ip, r7
 8019534:	4462      	add	r2, ip
 8019536:	2154      	movs	r1, #84	@ 0x54
 8019538:	7812      	ldrb	r2, [r2, #0]
 801953a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801953c:	4b1a      	ldr	r3, [pc, #104]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 801953e:	2228      	movs	r2, #40	@ 0x28
 8019540:	1812      	adds	r2, r2, r0
 8019542:	2108      	movs	r1, #8
 8019544:	468c      	mov	ip, r1
 8019546:	44bc      	add	ip, r7
 8019548:	4462      	add	r2, ip
 801954a:	2152      	movs	r1, #82	@ 0x52
 801954c:	7812      	ldrb	r2, [r2, #0]
 801954e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019550:	4b15      	ldr	r3, [pc, #84]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 8019552:	2234      	movs	r2, #52	@ 0x34
 8019554:	1812      	adds	r2, r2, r0
 8019556:	2108      	movs	r1, #8
 8019558:	468c      	mov	ip, r1
 801955a:	44bc      	add	ip, r7
 801955c:	4462      	add	r2, ip
 801955e:	2155      	movs	r1, #85	@ 0x55
 8019560:	7812      	ldrb	r2, [r2, #0]
 8019562:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8019564:	4b10      	ldr	r3, [pc, #64]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 8019566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019568:	659a      	str	r2, [r3, #88]	@ 0x58
            if( datarate > 12 )
 801956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801956c:	2b0c      	cmp	r3, #12
 801956e:	d902      	bls.n	8019576 <SX1276SetTxConfig+0x2ae>
                datarate = 12;
 8019570:	230c      	movs	r3, #12
 8019572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019574:	e004      	b.n	8019580 <SX1276SetTxConfig+0x2b8>
            else if( datarate < 6 )
 8019576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019578:	2b05      	cmp	r3, #5
 801957a:	d801      	bhi.n	8019580 <SX1276SetTxConfig+0x2b8>
                datarate = 6;
 801957c:	2306      	movs	r3, #6
 801957e:	62bb      	str	r3, [r7, #40]	@ 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	2b07      	cmp	r3, #7
 8019584:	d105      	bne.n	8019592 <SX1276SetTxConfig+0x2ca>
 8019586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019588:	2b0b      	cmp	r3, #11
 801958a:	d008      	beq.n	801959e <SX1276SetTxConfig+0x2d6>
 801958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801958e:	2b0c      	cmp	r3, #12
 8019590:	d005      	beq.n	801959e <SX1276SetTxConfig+0x2d6>
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	2b08      	cmp	r3, #8
 8019596:	d10d      	bne.n	80195b4 <SX1276SetTxConfig+0x2ec>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801959a:	2b0c      	cmp	r3, #12
 801959c:	d10a      	bne.n	80195b4 <SX1276SetTxConfig+0x2ec>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801959e:	4b02      	ldr	r3, [pc, #8]	@ (80195a8 <SX1276SetTxConfig+0x2e0>)
 80195a0:	224c      	movs	r2, #76	@ 0x4c
 80195a2:	2101      	movs	r1, #1
 80195a4:	5499      	strb	r1, [r3, r2]
 80195a6:	e009      	b.n	80195bc <SX1276SetTxConfig+0x2f4>
 80195a8:	20001538 	.word	0x20001538
 80195ac:	404e8480 	.word	0x404e8480
 80195b0:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80195b4:	4b5b      	ldr	r3, [pc, #364]	@ (8019724 <SX1276SetTxConfig+0x45c>)
 80195b6:	224c      	movs	r2, #76	@ 0x4c
 80195b8:	2100      	movs	r1, #0
 80195ba:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80195bc:	4b59      	ldr	r3, [pc, #356]	@ (8019724 <SX1276SetTxConfig+0x45c>)
 80195be:	2253      	movs	r2, #83	@ 0x53
 80195c0:	5c9b      	ldrb	r3, [r3, r2]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d013      	beq.n	80195ee <SX1276SetTxConfig+0x326>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80195c6:	2044      	movs	r0, #68	@ 0x44
 80195c8:	f000 fee9 	bl	801a39e <SX1276Read>
 80195cc:	0003      	movs	r3, r0
 80195ce:	001a      	movs	r2, r3
 80195d0:	2380      	movs	r3, #128	@ 0x80
 80195d2:	425b      	negs	r3, r3
 80195d4:	4313      	orrs	r3, r2
 80195d6:	b2db      	uxtb	r3, r3
 80195d8:	0019      	movs	r1, r3
 80195da:	2044      	movs	r0, #68	@ 0x44
 80195dc:	f000 fece 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80195e0:	4b50      	ldr	r3, [pc, #320]	@ (8019724 <SX1276SetTxConfig+0x45c>)
 80195e2:	2254      	movs	r2, #84	@ 0x54
 80195e4:	5c9b      	ldrb	r3, [r3, r2]
 80195e6:	0019      	movs	r1, r3
 80195e8:	2024      	movs	r0, #36	@ 0x24
 80195ea:	f000 fec7 	bl	801a37c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80195ee:	201d      	movs	r0, #29
 80195f0:	f000 fed5 	bl	801a39e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	011b      	lsls	r3, r3, #4
 80195fa:	b2da      	uxtb	r2, r3
 80195fc:	231c      	movs	r3, #28
 80195fe:	2508      	movs	r5, #8
 8019600:	195b      	adds	r3, r3, r5
 8019602:	2108      	movs	r1, #8
 8019604:	468c      	mov	ip, r1
 8019606:	44bc      	add	ip, r7
 8019608:	4463      	add	r3, ip
 801960a:	781b      	ldrb	r3, [r3, #0]
 801960c:	18db      	adds	r3, r3, r3
 801960e:	b2db      	uxtb	r3, r3
 8019610:	4313      	orrs	r3, r2
 8019612:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019614:	2324      	movs	r3, #36	@ 0x24
 8019616:	195b      	adds	r3, r3, r5
 8019618:	2108      	movs	r1, #8
 801961a:	468c      	mov	ip, r1
 801961c:	44bc      	add	ip, r7
 801961e:	4463      	add	r3, ip
 8019620:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019622:	4313      	orrs	r3, r2
 8019624:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019626:	0019      	movs	r1, r3
 8019628:	201d      	movs	r0, #29
 801962a:	f000 fea7 	bl	801a37c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801962e:	201e      	movs	r0, #30
 8019630:	f000 feb5 	bl	801a39e <SX1276Read>
 8019634:	0003      	movs	r3, r0
 8019636:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8019638:	230b      	movs	r3, #11
 801963a:	4013      	ands	r3, r2
 801963c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801963e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019640:	b2db      	uxtb	r3, r3
 8019642:	011b      	lsls	r3, r3, #4
 8019644:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8019646:	4313      	orrs	r3, r2
 8019648:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801964a:	2328      	movs	r3, #40	@ 0x28
 801964c:	195b      	adds	r3, r3, r5
 801964e:	2108      	movs	r1, #8
 8019650:	468c      	mov	ip, r1
 8019652:	44bc      	add	ip, r7
 8019654:	4463      	add	r3, ip
 8019656:	781b      	ldrb	r3, [r3, #0]
 8019658:	009b      	lsls	r3, r3, #2
 801965a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801965c:	4313      	orrs	r3, r2
 801965e:	b2db      	uxtb	r3, r3
 8019660:	0019      	movs	r1, r3
 8019662:	201e      	movs	r0, #30
 8019664:	f000 fe8a 	bl	801a37c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019668:	2026      	movs	r0, #38	@ 0x26
 801966a:	f000 fe98 	bl	801a39e <SX1276Read>
 801966e:	0003      	movs	r3, r0
 8019670:	b25b      	sxtb	r3, r3
 8019672:	2208      	movs	r2, #8
 8019674:	4393      	bics	r3, r2
 8019676:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019678:	4b2a      	ldr	r3, [pc, #168]	@ (8019724 <SX1276SetTxConfig+0x45c>)
 801967a:	214c      	movs	r1, #76	@ 0x4c
 801967c:	5c5b      	ldrb	r3, [r3, r1]
 801967e:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019680:	b25b      	sxtb	r3, r3
 8019682:	4313      	orrs	r3, r2
 8019684:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019686:	b2db      	uxtb	r3, r3
 8019688:	0019      	movs	r1, r3
 801968a:	2026      	movs	r0, #38	@ 0x26
 801968c:	f000 fe76 	bl	801a37c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8019690:	2420      	movs	r4, #32
 8019692:	1963      	adds	r3, r4, r5
 8019694:	2208      	movs	r2, #8
 8019696:	4694      	mov	ip, r2
 8019698:	44bc      	add	ip, r7
 801969a:	4463      	add	r3, ip
 801969c:	881b      	ldrh	r3, [r3, #0]
 801969e:	0a1b      	lsrs	r3, r3, #8
 80196a0:	b29b      	uxth	r3, r3
 80196a2:	b2db      	uxtb	r3, r3
 80196a4:	0019      	movs	r1, r3
 80196a6:	2020      	movs	r0, #32
 80196a8:	f000 fe68 	bl	801a37c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80196ac:	1963      	adds	r3, r4, r5
 80196ae:	2208      	movs	r2, #8
 80196b0:	4694      	mov	ip, r2
 80196b2:	44bc      	add	ip, r7
 80196b4:	4463      	add	r3, ip
 80196b6:	881b      	ldrh	r3, [r3, #0]
 80196b8:	b2db      	uxtb	r3, r3
 80196ba:	0019      	movs	r1, r3
 80196bc:	2021      	movs	r0, #33	@ 0x21
 80196be:	f000 fe5d 	bl	801a37c <SX1276Write>
            if( datarate == 6 )
 80196c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196c4:	2b06      	cmp	r3, #6
 80196c6:	d114      	bne.n	80196f2 <SX1276SetTxConfig+0x42a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80196c8:	2031      	movs	r0, #49	@ 0x31
 80196ca:	f000 fe68 	bl	801a39e <SX1276Read>
 80196ce:	0003      	movs	r3, r0
 80196d0:	b25b      	sxtb	r3, r3
 80196d2:	2207      	movs	r2, #7
 80196d4:	4393      	bics	r3, r2
 80196d6:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80196d8:	2205      	movs	r2, #5
 80196da:	4313      	orrs	r3, r2
 80196dc:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80196de:	b2db      	uxtb	r3, r3
 80196e0:	0019      	movs	r1, r3
 80196e2:	2031      	movs	r0, #49	@ 0x31
 80196e4:	f000 fe4a 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80196e8:	210c      	movs	r1, #12
 80196ea:	2037      	movs	r0, #55	@ 0x37
 80196ec:	f000 fe46 	bl	801a37c <SX1276Write>
        break;
 80196f0:	e013      	b.n	801971a <SX1276SetTxConfig+0x452>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80196f2:	2031      	movs	r0, #49	@ 0x31
 80196f4:	f000 fe53 	bl	801a39e <SX1276Read>
 80196f8:	0003      	movs	r3, r0
 80196fa:	b25b      	sxtb	r3, r3
 80196fc:	2207      	movs	r2, #7
 80196fe:	4393      	bics	r3, r2
 8019700:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019702:	2203      	movs	r2, #3
 8019704:	4313      	orrs	r3, r2
 8019706:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019708:	b2db      	uxtb	r3, r3
 801970a:	0019      	movs	r1, r3
 801970c:	2031      	movs	r0, #49	@ 0x31
 801970e:	f000 fe35 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019712:	210a      	movs	r1, #10
 8019714:	2037      	movs	r0, #55	@ 0x37
 8019716:	f000 fe31 	bl	801a37c <SX1276Write>
        break;
 801971a:	46c0      	nop			@ (mov r8, r8)
}
 801971c:	46c0      	nop			@ (mov r8, r8)
 801971e:	46bd      	mov	sp, r7
 8019720:	b005      	add	sp, #20
 8019722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019724:	20001538 	.word	0x20001538

08019728 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8019728:	b590      	push	{r4, r7, lr}
 801972a:	b08b      	sub	sp, #44	@ 0x2c
 801972c:	af04      	add	r7, sp, #16
 801972e:	60b9      	str	r1, [r7, #8]
 8019730:	607a      	str	r2, [r7, #4]
 8019732:	0019      	movs	r1, r3
 8019734:	240f      	movs	r4, #15
 8019736:	193b      	adds	r3, r7, r4
 8019738:	1c02      	adds	r2, r0, #0
 801973a:	701a      	strb	r2, [r3, #0]
 801973c:	230e      	movs	r3, #14
 801973e:	18fb      	adds	r3, r7, r3
 8019740:	1c0a      	adds	r2, r1, #0
 8019742:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 8019744:	2300      	movs	r3, #0
 8019746:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019748:	2301      	movs	r3, #1
 801974a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801974c:	193b      	adds	r3, r7, r4
 801974e:	781b      	ldrb	r3, [r3, #0]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d002      	beq.n	801975a <SX1276GetTimeOnAir+0x32>
 8019754:	2b01      	cmp	r3, #1
 8019756:	d01a      	beq.n	801978e <SX1276GetTimeOnAir+0x66>
 8019758:	e03f      	b.n	80197da <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 801975a:	2334      	movs	r3, #52	@ 0x34
 801975c:	18fb      	adds	r3, r7, r3
 801975e:	781c      	ldrb	r4, [r3, #0]
 8019760:	2330      	movs	r3, #48	@ 0x30
 8019762:	18fb      	adds	r3, r7, r3
 8019764:	781a      	ldrb	r2, [r3, #0]
 8019766:	232c      	movs	r3, #44	@ 0x2c
 8019768:	18fb      	adds	r3, r7, r3
 801976a:	7819      	ldrb	r1, [r3, #0]
 801976c:	2328      	movs	r3, #40	@ 0x28
 801976e:	18fb      	adds	r3, r7, r3
 8019770:	8818      	ldrh	r0, [r3, #0]
 8019772:	0023      	movs	r3, r4
 8019774:	f000 ff78 	bl	801a668 <SX1276GetGfskTimeOnAirNumerator>
 8019778:	0002      	movs	r2, r0
 801977a:	0013      	movs	r3, r2
 801977c:	015b      	lsls	r3, r3, #5
 801977e:	1a9b      	subs	r3, r3, r2
 8019780:	009b      	lsls	r3, r3, #2
 8019782:	189b      	adds	r3, r3, r2
 8019784:	00db      	lsls	r3, r3, #3
 8019786:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	613b      	str	r3, [r7, #16]
        }
        break;
 801978c:	e025      	b.n	80197da <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 801978e:	2328      	movs	r3, #40	@ 0x28
 8019790:	18fb      	adds	r3, r7, r3
 8019792:	881c      	ldrh	r4, [r3, #0]
 8019794:	230e      	movs	r3, #14
 8019796:	18fb      	adds	r3, r7, r3
 8019798:	781a      	ldrb	r2, [r3, #0]
 801979a:	6879      	ldr	r1, [r7, #4]
 801979c:	68b8      	ldr	r0, [r7, #8]
 801979e:	2334      	movs	r3, #52	@ 0x34
 80197a0:	18fb      	adds	r3, r7, r3
 80197a2:	781b      	ldrb	r3, [r3, #0]
 80197a4:	9302      	str	r3, [sp, #8]
 80197a6:	2330      	movs	r3, #48	@ 0x30
 80197a8:	18fb      	adds	r3, r7, r3
 80197aa:	781b      	ldrb	r3, [r3, #0]
 80197ac:	9301      	str	r3, [sp, #4]
 80197ae:	232c      	movs	r3, #44	@ 0x2c
 80197b0:	18fb      	adds	r3, r7, r3
 80197b2:	781b      	ldrb	r3, [r3, #0]
 80197b4:	9300      	str	r3, [sp, #0]
 80197b6:	0023      	movs	r3, r4
 80197b8:	f000 ff90 	bl	801a6dc <SX1276GetLoRaTimeOnAirNumerator>
 80197bc:	0002      	movs	r2, r0
 80197be:	0013      	movs	r3, r2
 80197c0:	015b      	lsls	r3, r3, #5
 80197c2:	1a9b      	subs	r3, r3, r2
 80197c4:	009b      	lsls	r3, r3, #2
 80197c6:	189b      	adds	r3, r3, r2
 80197c8:	00db      	lsls	r3, r3, #3
 80197ca:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 80197cc:	68bb      	ldr	r3, [r7, #8]
 80197ce:	0018      	movs	r0, r3
 80197d0:	f000 ff18 	bl	801a604 <SX1276GetLoRaBandwidthInHz>
 80197d4:	0003      	movs	r3, r0
 80197d6:	613b      	str	r3, [r7, #16]
        }
        break;
 80197d8:	46c0      	nop			@ (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 80197da:	697a      	ldr	r2, [r7, #20]
 80197dc:	693b      	ldr	r3, [r7, #16]
 80197de:	18d3      	adds	r3, r2, r3
 80197e0:	3b01      	subs	r3, #1
 80197e2:	6939      	ldr	r1, [r7, #16]
 80197e4:	0018      	movs	r0, r3
 80197e6:	f7e6 fc97 	bl	8000118 <__udivsi3>
 80197ea:	0003      	movs	r3, r0
}
 80197ec:	0018      	movs	r0, r3
 80197ee:	46bd      	mov	sp, r7
 80197f0:	b007      	add	sp, #28
 80197f2:	bd90      	pop	{r4, r7, pc}

080197f4 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b084      	sub	sp, #16
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	000a      	movs	r2, r1
 80197fe:	1cfb      	adds	r3, r7, #3
 8019800:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 8019802:	2300      	movs	r3, #0
 8019804:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8019806:	4b58      	ldr	r3, [pc, #352]	@ (8019968 <SX1276Send+0x174>)
 8019808:	795b      	ldrb	r3, [r3, #5]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d002      	beq.n	8019814 <SX1276Send+0x20>
 801980e:	2b01      	cmp	r3, #1
 8019810:	d04b      	beq.n	80198aa <SX1276Send+0xb6>
 8019812:	e0a1      	b.n	8019958 <SX1276Send+0x164>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8019814:	4b54      	ldr	r3, [pc, #336]	@ (8019968 <SX1276Send+0x174>)
 8019816:	2200      	movs	r2, #0
 8019818:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801981a:	1cfb      	adds	r3, r7, #3
 801981c:	781b      	ldrb	r3, [r3, #0]
 801981e:	001a      	movs	r2, r3
 8019820:	4b51      	ldr	r3, [pc, #324]	@ (8019968 <SX1276Send+0x174>)
 8019822:	875a      	strh	r2, [r3, #58]	@ 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8019824:	4b50      	ldr	r3, [pc, #320]	@ (8019968 <SX1276Send+0x174>)
 8019826:	2222      	movs	r2, #34	@ 0x22
 8019828:	5c9b      	ldrb	r3, [r3, r2]
 801982a:	2201      	movs	r2, #1
 801982c:	4053      	eors	r3, r2
 801982e:	b2db      	uxtb	r3, r3
 8019830:	2b00      	cmp	r3, #0
 8019832:	d005      	beq.n	8019840 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8019834:	1cfb      	adds	r3, r7, #3
 8019836:	2101      	movs	r1, #1
 8019838:	0018      	movs	r0, r3
 801983a:	f000 fe2a 	bl	801a492 <SX1276WriteFifo>
 801983e:	e005      	b.n	801984c <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8019840:	1cfb      	adds	r3, r7, #3
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	0019      	movs	r1, r3
 8019846:	2032      	movs	r0, #50	@ 0x32
 8019848:	f000 fd98 	bl	801a37c <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801984c:	1cfb      	adds	r3, r7, #3
 801984e:	781b      	ldrb	r3, [r3, #0]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d009      	beq.n	8019868 <SX1276Send+0x74>
 8019854:	1cfb      	adds	r3, r7, #3
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	2b40      	cmp	r3, #64	@ 0x40
 801985a:	d805      	bhi.n	8019868 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801985c:	1cfb      	adds	r3, r7, #3
 801985e:	7819      	ldrb	r1, [r3, #0]
 8019860:	4b41      	ldr	r3, [pc, #260]	@ (8019968 <SX1276Send+0x174>)
 8019862:	223f      	movs	r2, #63	@ 0x3f
 8019864:	5499      	strb	r1, [r3, r2]
 8019866:	e00b      	b.n	8019880 <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8019868:	1cfb      	adds	r3, r7, #3
 801986a:	781b      	ldrb	r3, [r3, #0]
 801986c:	001a      	movs	r2, r3
 801986e:	6879      	ldr	r1, [r7, #4]
 8019870:	4b3e      	ldr	r3, [pc, #248]	@ (801996c <SX1276Send+0x178>)
 8019872:	0018      	movs	r0, r3
 8019874:	f002 f832 	bl	801b8dc <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8019878:	4b3b      	ldr	r3, [pc, #236]	@ (8019968 <SX1276Send+0x174>)
 801987a:	223f      	movs	r2, #63	@ 0x3f
 801987c:	2120      	movs	r1, #32
 801987e:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8019880:	4b39      	ldr	r3, [pc, #228]	@ (8019968 <SX1276Send+0x174>)
 8019882:	223f      	movs	r2, #63	@ 0x3f
 8019884:	5c9a      	ldrb	r2, [r3, r2]
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	0011      	movs	r1, r2
 801988a:	0018      	movs	r0, r3
 801988c:	f000 fe01 	bl	801a492 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8019890:	4b35      	ldr	r3, [pc, #212]	@ (8019968 <SX1276Send+0x174>)
 8019892:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8019894:	4a34      	ldr	r2, [pc, #208]	@ (8019968 <SX1276Send+0x174>)
 8019896:	213f      	movs	r1, #63	@ 0x3f
 8019898:	5c52      	ldrb	r2, [r2, r1]
 801989a:	189b      	adds	r3, r3, r2
 801989c:	b29a      	uxth	r2, r3
 801989e:	4b32      	ldr	r3, [pc, #200]	@ (8019968 <SX1276Send+0x174>)
 80198a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80198a2:	4b31      	ldr	r3, [pc, #196]	@ (8019968 <SX1276Send+0x174>)
 80198a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80198a8:	e056      	b.n	8019958 <SX1276Send+0x164>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80198aa:	4b2f      	ldr	r3, [pc, #188]	@ (8019968 <SX1276Send+0x174>)
 80198ac:	2255      	movs	r2, #85	@ 0x55
 80198ae:	5c9b      	ldrb	r3, [r3, r2]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d011      	beq.n	80198d8 <SX1276Send+0xe4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80198b4:	2033      	movs	r0, #51	@ 0x33
 80198b6:	f000 fd72 	bl	801a39e <SX1276Read>
 80198ba:	0003      	movs	r3, r0
 80198bc:	001a      	movs	r2, r3
 80198be:	2341      	movs	r3, #65	@ 0x41
 80198c0:	439a      	bics	r2, r3
 80198c2:	0013      	movs	r3, r2
 80198c4:	b2db      	uxtb	r3, r3
 80198c6:	0019      	movs	r1, r3
 80198c8:	2033      	movs	r0, #51	@ 0x33
 80198ca:	f000 fd57 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80198ce:	2119      	movs	r1, #25
 80198d0:	203b      	movs	r0, #59	@ 0x3b
 80198d2:	f000 fd53 	bl	801a37c <SX1276Write>
 80198d6:	e013      	b.n	8019900 <SX1276Send+0x10c>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80198d8:	2033      	movs	r0, #51	@ 0x33
 80198da:	f000 fd60 	bl	801a39e <SX1276Read>
 80198de:	0003      	movs	r3, r0
 80198e0:	b25b      	sxtb	r3, r3
 80198e2:	2241      	movs	r2, #65	@ 0x41
 80198e4:	4393      	bics	r3, r2
 80198e6:	b25b      	sxtb	r3, r3
 80198e8:	2201      	movs	r2, #1
 80198ea:	4313      	orrs	r3, r2
 80198ec:	b25b      	sxtb	r3, r3
 80198ee:	b2db      	uxtb	r3, r3
 80198f0:	0019      	movs	r1, r3
 80198f2:	2033      	movs	r0, #51	@ 0x33
 80198f4:	f000 fd42 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80198f8:	211d      	movs	r1, #29
 80198fa:	203b      	movs	r0, #59	@ 0x3b
 80198fc:	f000 fd3e 	bl	801a37c <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8019900:	1cfb      	adds	r3, r7, #3
 8019902:	7819      	ldrb	r1, [r3, #0]
 8019904:	4b18      	ldr	r3, [pc, #96]	@ (8019968 <SX1276Send+0x174>)
 8019906:	2264      	movs	r2, #100	@ 0x64
 8019908:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801990a:	1cfb      	adds	r3, r7, #3
 801990c:	781b      	ldrb	r3, [r3, #0]
 801990e:	0019      	movs	r1, r3
 8019910:	2022      	movs	r0, #34	@ 0x22
 8019912:	f000 fd33 	bl	801a37c <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8019916:	2100      	movs	r1, #0
 8019918:	200e      	movs	r0, #14
 801991a:	f000 fd2f 	bl	801a37c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801991e:	2100      	movs	r1, #0
 8019920:	200d      	movs	r0, #13
 8019922:	f000 fd2b 	bl	801a37c <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8019926:	2001      	movs	r0, #1
 8019928:	f000 fd39 	bl	801a39e <SX1276Read>
 801992c:	0003      	movs	r3, r0
 801992e:	001a      	movs	r2, r3
 8019930:	23f8      	movs	r3, #248	@ 0xf8
 8019932:	439a      	bics	r2, r3
 8019934:	1e13      	subs	r3, r2, #0
 8019936:	d104      	bne.n	8019942 <SX1276Send+0x14e>
            {
                SX1276SetStby( );
 8019938:	f000 f94e 	bl	8019bd8 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 801993c:	2001      	movs	r0, #1
 801993e:	f7ea ffb4 	bl	80048aa <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8019942:	1cfb      	adds	r3, r7, #3
 8019944:	781a      	ldrb	r2, [r3, #0]
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	0011      	movs	r1, r2
 801994a:	0018      	movs	r0, r3
 801994c:	f000 fda1 	bl	801a492 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8019950:	4b05      	ldr	r3, [pc, #20]	@ (8019968 <SX1276Send+0x174>)
 8019952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019954:	60fb      	str	r3, [r7, #12]
        }
        break;
 8019956:	46c0      	nop			@ (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	0018      	movs	r0, r3
 801995c:	f000 faf2 	bl	8019f44 <SX1276SetTx>
}
 8019960:	46c0      	nop			@ (mov r8, r8)
 8019962:	46bd      	mov	sp, r7
 8019964:	b004      	add	sp, #16
 8019966:	bd80      	pop	{r7, pc}
 8019968:	20001538 	.word	0x20001538
 801996c:	20001438 	.word	0x20001438

08019970 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 8019970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019972:	b085      	sub	sp, #20
 8019974:	af00      	add	r7, sp, #0
 8019976:	0002      	movs	r2, r0
 8019978:	1dfb      	adds	r3, r7, #7
 801997a:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 801997c:	210f      	movs	r1, #15
 801997e:	187b      	adds	r3, r7, r1
 8019980:	2200      	movs	r2, #0
 8019982:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8019984:	250e      	movs	r5, #14
 8019986:	197b      	adds	r3, r7, r5
 8019988:	2200      	movs	r2, #0
 801998a:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 801998c:	260d      	movs	r6, #13
 801998e:	19bb      	adds	r3, r7, r6
 8019990:	2200      	movs	r2, #0
 8019992:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8019994:	187c      	adds	r4, r7, r1
 8019996:	2009      	movs	r0, #9
 8019998:	f000 fd01 	bl	801a39e <SX1276Read>
 801999c:	0003      	movs	r3, r0
 801999e:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 80199a0:	197c      	adds	r4, r7, r5
 80199a2:	204d      	movs	r0, #77	@ 0x4d
 80199a4:	f000 fcfb 	bl	801a39e <SX1276Read>
 80199a8:	0003      	movs	r3, r0
 80199aa:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 80199ac:	4b78      	ldr	r3, [pc, #480]	@ (8019b90 <SX1276SetRfTxPower+0x220>)
 80199ae:	689b      	ldr	r3, [r3, #8]
 80199b0:	0018      	movs	r0, r3
 80199b2:	f7eb ff5d 	bl	8005870 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 80199b6:	0003      	movs	r3, r0
 80199b8:	2b03      	cmp	r3, #3
 80199ba:	d01f      	beq.n	80199fc <SX1276SetRfTxPower+0x8c>
 80199bc:	dc23      	bgt.n	8019a06 <SX1276SetRfTxPower+0x96>
 80199be:	2b02      	cmp	r3, #2
 80199c0:	d008      	beq.n	80199d4 <SX1276SetRfTxPower+0x64>
 80199c2:	dc20      	bgt.n	8019a06 <SX1276SetRfTxPower+0x96>
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d00a      	beq.n	80199de <SX1276SetRfTxPower+0x6e>
 80199c8:	2b01      	cmp	r3, #1
 80199ca:	d11c      	bne.n	8019a06 <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 80199cc:	19bb      	adds	r3, r7, r6
 80199ce:	2200      	movs	r2, #0
 80199d0:	701a      	strb	r2, [r3, #0]
        break;
 80199d2:	e019      	b.n	8019a08 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 80199d4:	230d      	movs	r3, #13
 80199d6:	18fb      	adds	r3, r7, r3
 80199d8:	2280      	movs	r2, #128	@ 0x80
 80199da:	701a      	strb	r2, [r3, #0]
        break;
 80199dc:	e014      	b.n	8019a08 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 80199de:	1dfb      	adds	r3, r7, #7
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	b25b      	sxtb	r3, r3
 80199e4:	2b0e      	cmp	r3, #14
 80199e6:	dd04      	ble.n	80199f2 <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 80199e8:	230d      	movs	r3, #13
 80199ea:	18fb      	adds	r3, r7, r3
 80199ec:	2280      	movs	r2, #128	@ 0x80
 80199ee:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 80199f0:	e00a      	b.n	8019a08 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 80199f2:	230d      	movs	r3, #13
 80199f4:	18fb      	adds	r3, r7, r3
 80199f6:	2200      	movs	r2, #0
 80199f8:	701a      	strb	r2, [r3, #0]
        break;
 80199fa:	e005      	b.n	8019a08 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 80199fc:	230d      	movs	r3, #13
 80199fe:	18fb      	adds	r3, r7, r3
 8019a00:	2280      	movs	r2, #128	@ 0x80
 8019a02:	701a      	strb	r2, [r3, #0]
          break;
 8019a04:	e000      	b.n	8019a08 <SX1276SetRfTxPower+0x98>
        default:
        break;
 8019a06:	46c0      	nop			@ (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8019a08:	210f      	movs	r1, #15
 8019a0a:	187b      	adds	r3, r7, r1
 8019a0c:	781b      	ldrb	r3, [r3, #0]
 8019a0e:	b25b      	sxtb	r3, r3
 8019a10:	227f      	movs	r2, #127	@ 0x7f
 8019a12:	4013      	ands	r3, r2
 8019a14:	b25a      	sxtb	r2, r3
 8019a16:	230d      	movs	r3, #13
 8019a18:	18fb      	adds	r3, r7, r3
 8019a1a:	781b      	ldrb	r3, [r3, #0]
 8019a1c:	b25b      	sxtb	r3, r3
 8019a1e:	4313      	orrs	r3, r2
 8019a20:	b25a      	sxtb	r2, r3
 8019a22:	187b      	adds	r3, r7, r1
 8019a24:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8019a26:	187b      	adds	r3, r7, r1
 8019a28:	781b      	ldrb	r3, [r3, #0]
 8019a2a:	b25b      	sxtb	r3, r3
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	da67      	bge.n	8019b00 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 8019a30:	1dfb      	adds	r3, r7, #7
 8019a32:	781b      	ldrb	r3, [r3, #0]
 8019a34:	b25b      	sxtb	r3, r3
 8019a36:	2b11      	cmp	r3, #17
 8019a38:	dd07      	ble.n	8019a4a <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8019a3a:	220e      	movs	r2, #14
 8019a3c:	18bb      	adds	r3, r7, r2
 8019a3e:	18ba      	adds	r2, r7, r2
 8019a40:	7812      	ldrb	r2, [r2, #0]
 8019a42:	2107      	movs	r1, #7
 8019a44:	430a      	orrs	r2, r1
 8019a46:	701a      	strb	r2, [r3, #0]
 8019a48:	e00b      	b.n	8019a62 <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8019a4a:	210e      	movs	r1, #14
 8019a4c:	187b      	adds	r3, r7, r1
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	b25b      	sxtb	r3, r3
 8019a52:	2207      	movs	r2, #7
 8019a54:	4393      	bics	r3, r2
 8019a56:	b25b      	sxtb	r3, r3
 8019a58:	2204      	movs	r2, #4
 8019a5a:	4313      	orrs	r3, r2
 8019a5c:	b25a      	sxtb	r2, r3
 8019a5e:	187b      	adds	r3, r7, r1
 8019a60:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8019a62:	230e      	movs	r3, #14
 8019a64:	18fb      	adds	r3, r7, r3
 8019a66:	781b      	ldrb	r3, [r3, #0]
 8019a68:	2207      	movs	r2, #7
 8019a6a:	4013      	ands	r3, r2
 8019a6c:	2b07      	cmp	r3, #7
 8019a6e:	d123      	bne.n	8019ab8 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 8019a70:	1dfb      	adds	r3, r7, #7
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	b25b      	sxtb	r3, r3
 8019a76:	2b04      	cmp	r3, #4
 8019a78:	dc02      	bgt.n	8019a80 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 8019a7a:	1dfb      	adds	r3, r7, #7
 8019a7c:	2205      	movs	r2, #5
 8019a7e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8019a80:	1dfb      	adds	r3, r7, #7
 8019a82:	781b      	ldrb	r3, [r3, #0]
 8019a84:	b25b      	sxtb	r3, r3
 8019a86:	2b14      	cmp	r3, #20
 8019a88:	dd02      	ble.n	8019a90 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 8019a8a:	1dfb      	adds	r3, r7, #7
 8019a8c:	2214      	movs	r2, #20
 8019a8e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8019a90:	200f      	movs	r0, #15
 8019a92:	183b      	adds	r3, r7, r0
 8019a94:	781b      	ldrb	r3, [r3, #0]
 8019a96:	b25b      	sxtb	r3, r3
 8019a98:	220f      	movs	r2, #15
 8019a9a:	4393      	bics	r3, r2
 8019a9c:	b25a      	sxtb	r2, r3
 8019a9e:	1dfb      	adds	r3, r7, #7
 8019aa0:	781b      	ldrb	r3, [r3, #0]
 8019aa2:	3b05      	subs	r3, #5
 8019aa4:	b2db      	uxtb	r3, r3
 8019aa6:	b25b      	sxtb	r3, r3
 8019aa8:	210f      	movs	r1, #15
 8019aaa:	400b      	ands	r3, r1
 8019aac:	b25b      	sxtb	r3, r3
 8019aae:	4313      	orrs	r3, r2
 8019ab0:	b25a      	sxtb	r2, r3
 8019ab2:	183b      	adds	r3, r7, r0
 8019ab4:	701a      	strb	r2, [r3, #0]
 8019ab6:	e059      	b.n	8019b6c <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 8019ab8:	1dfb      	adds	r3, r7, #7
 8019aba:	781b      	ldrb	r3, [r3, #0]
 8019abc:	b25b      	sxtb	r3, r3
 8019abe:	2b01      	cmp	r3, #1
 8019ac0:	dc02      	bgt.n	8019ac8 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 8019ac2:	1dfb      	adds	r3, r7, #7
 8019ac4:	2202      	movs	r2, #2
 8019ac6:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8019ac8:	1dfb      	adds	r3, r7, #7
 8019aca:	781b      	ldrb	r3, [r3, #0]
 8019acc:	b25b      	sxtb	r3, r3
 8019ace:	2b11      	cmp	r3, #17
 8019ad0:	dd02      	ble.n	8019ad8 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 8019ad2:	1dfb      	adds	r3, r7, #7
 8019ad4:	2211      	movs	r2, #17
 8019ad6:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8019ad8:	200f      	movs	r0, #15
 8019ada:	183b      	adds	r3, r7, r0
 8019adc:	781b      	ldrb	r3, [r3, #0]
 8019ade:	b25b      	sxtb	r3, r3
 8019ae0:	220f      	movs	r2, #15
 8019ae2:	4393      	bics	r3, r2
 8019ae4:	b25a      	sxtb	r2, r3
 8019ae6:	1dfb      	adds	r3, r7, #7
 8019ae8:	781b      	ldrb	r3, [r3, #0]
 8019aea:	3b02      	subs	r3, #2
 8019aec:	b2db      	uxtb	r3, r3
 8019aee:	b25b      	sxtb	r3, r3
 8019af0:	210f      	movs	r1, #15
 8019af2:	400b      	ands	r3, r1
 8019af4:	b25b      	sxtb	r3, r3
 8019af6:	4313      	orrs	r3, r2
 8019af8:	b25a      	sxtb	r2, r3
 8019afa:	183b      	adds	r3, r7, r0
 8019afc:	701a      	strb	r2, [r3, #0]
 8019afe:	e035      	b.n	8019b6c <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 8019b00:	1dfb      	adds	r3, r7, #7
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	b25b      	sxtb	r3, r3
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	dd18      	ble.n	8019b3c <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 8019b0a:	1dfb      	adds	r3, r7, #7
 8019b0c:	781b      	ldrb	r3, [r3, #0]
 8019b0e:	b25b      	sxtb	r3, r3
 8019b10:	2b0f      	cmp	r3, #15
 8019b12:	dd02      	ble.n	8019b1a <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 8019b14:	1dfb      	adds	r3, r7, #7
 8019b16:	220f      	movs	r2, #15
 8019b18:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8019b1a:	210f      	movs	r1, #15
 8019b1c:	187b      	adds	r3, r7, r1
 8019b1e:	781b      	ldrb	r3, [r3, #0]
 8019b20:	b25b      	sxtb	r3, r3
 8019b22:	227f      	movs	r2, #127	@ 0x7f
 8019b24:	4393      	bics	r3, r2
 8019b26:	b25b      	sxtb	r3, r3
 8019b28:	2270      	movs	r2, #112	@ 0x70
 8019b2a:	4313      	orrs	r3, r2
 8019b2c:	b25a      	sxtb	r2, r3
 8019b2e:	1dfb      	adds	r3, r7, #7
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	4313      	orrs	r3, r2
 8019b34:	b25a      	sxtb	r2, r3
 8019b36:	187b      	adds	r3, r7, r1
 8019b38:	701a      	strb	r2, [r3, #0]
 8019b3a:	e017      	b.n	8019b6c <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 8019b3c:	1dfb      	adds	r3, r7, #7
 8019b3e:	781b      	ldrb	r3, [r3, #0]
 8019b40:	b25b      	sxtb	r3, r3
 8019b42:	3304      	adds	r3, #4
 8019b44:	da02      	bge.n	8019b4c <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 8019b46:	1dfb      	adds	r3, r7, #7
 8019b48:	22fc      	movs	r2, #252	@ 0xfc
 8019b4a:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8019b4c:	210f      	movs	r1, #15
 8019b4e:	187b      	adds	r3, r7, r1
 8019b50:	781b      	ldrb	r3, [r3, #0]
 8019b52:	b25b      	sxtb	r3, r3
 8019b54:	227f      	movs	r2, #127	@ 0x7f
 8019b56:	4393      	bics	r3, r2
 8019b58:	b25a      	sxtb	r2, r3
 8019b5a:	1dfb      	adds	r3, r7, #7
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	3304      	adds	r3, #4
 8019b60:	b2db      	uxtb	r3, r3
 8019b62:	b25b      	sxtb	r3, r3
 8019b64:	4313      	orrs	r3, r2
 8019b66:	b25a      	sxtb	r2, r3
 8019b68:	187b      	adds	r3, r7, r1
 8019b6a:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8019b6c:	230f      	movs	r3, #15
 8019b6e:	18fb      	adds	r3, r7, r3
 8019b70:	781b      	ldrb	r3, [r3, #0]
 8019b72:	0019      	movs	r1, r3
 8019b74:	2009      	movs	r0, #9
 8019b76:	f000 fc01 	bl	801a37c <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8019b7a:	230e      	movs	r3, #14
 8019b7c:	18fb      	adds	r3, r7, r3
 8019b7e:	781b      	ldrb	r3, [r3, #0]
 8019b80:	0019      	movs	r1, r3
 8019b82:	204d      	movs	r0, #77	@ 0x4d
 8019b84:	f000 fbfa 	bl	801a37c <SX1276Write>
}
 8019b88:	46c0      	nop			@ (mov r8, r8)
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	b005      	add	sp, #20
 8019b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b90:	20001538 	.word	0x20001538

08019b94 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8019b94:	b580      	push	{r7, lr}
 8019b96:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 8019b98:	4b0b      	ldr	r3, [pc, #44]	@ (8019bc8 <SX1276SetSleep+0x34>)
 8019b9a:	0018      	movs	r0, r3
 8019b9c:	f002 fa5a 	bl	801c054 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8019ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8019bcc <SX1276SetSleep+0x38>)
 8019ba2:	0018      	movs	r0, r3
 8019ba4:	f002 fa56 	bl	801c054 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8019ba8:	4b09      	ldr	r3, [pc, #36]	@ (8019bd0 <SX1276SetSleep+0x3c>)
 8019baa:	0018      	movs	r0, r3
 8019bac:	f002 fa52 	bl	801c054 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8019bb0:	2000      	movs	r0, #0
 8019bb2:	f000 fb1c 	bl	801a1ee <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 8019bb6:	2000      	movs	r0, #0
 8019bb8:	f7eb fca6 	bl	8005508 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 8019bbc:	4b05      	ldr	r3, [pc, #20]	@ (8019bd4 <SX1276SetSleep+0x40>)
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	711a      	strb	r2, [r3, #4]
}
 8019bc2:	46c0      	nop			@ (mov r8, r8)
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bd80      	pop	{r7, pc}
 8019bc8:	200015b8 	.word	0x200015b8
 8019bcc:	200015a0 	.word	0x200015a0
 8019bd0:	200015d0 	.word	0x200015d0
 8019bd4:	20001538 	.word	0x20001538

08019bd8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8019bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8019c08 <SX1276SetStby+0x30>)
 8019bde:	0018      	movs	r0, r3
 8019be0:	f002 fa38 	bl	801c054 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8019be4:	4b09      	ldr	r3, [pc, #36]	@ (8019c0c <SX1276SetStby+0x34>)
 8019be6:	0018      	movs	r0, r3
 8019be8:	f002 fa34 	bl	801c054 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8019bec:	4b08      	ldr	r3, [pc, #32]	@ (8019c10 <SX1276SetStby+0x38>)
 8019bee:	0018      	movs	r0, r3
 8019bf0:	f002 fa30 	bl	801c054 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8019bf4:	2001      	movs	r0, #1
 8019bf6:	f000 fafa 	bl	801a1ee <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8019bfa:	4b06      	ldr	r3, [pc, #24]	@ (8019c14 <SX1276SetStby+0x3c>)
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	711a      	strb	r2, [r3, #4]
}
 8019c00:	46c0      	nop			@ (mov r8, r8)
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}
 8019c06:	46c0      	nop			@ (mov r8, r8)
 8019c08:	200015b8 	.word	0x200015b8
 8019c0c:	200015a0 	.word	0x200015a0
 8019c10:	200015d0 	.word	0x200015d0
 8019c14:	20001538 	.word	0x20001538

08019c18 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b084      	sub	sp, #16
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8019c20:	230f      	movs	r3, #15
 8019c22:	18fb      	adds	r3, r7, r3
 8019c24:	2200      	movs	r2, #0
 8019c26:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 8019c28:	4bba      	ldr	r3, [pc, #744]	@ (8019f14 <SX1276SetRx+0x2fc>)
 8019c2a:	0018      	movs	r0, r3
 8019c2c:	f002 fa12 	bl	801c054 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 8019c30:	4bb9      	ldr	r3, [pc, #740]	@ (8019f18 <SX1276SetRx+0x300>)
 8019c32:	795b      	ldrb	r3, [r3, #5]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d002      	beq.n	8019c3e <SX1276SetRx+0x26>
 8019c38:	2b01      	cmp	r3, #1
 8019c3a:	d041      	beq.n	8019cc0 <SX1276SetRx+0xa8>
 8019c3c:	e127      	b.n	8019e8e <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8019c3e:	230f      	movs	r3, #15
 8019c40:	18fb      	adds	r3, r7, r3
 8019c42:	4ab5      	ldr	r2, [pc, #724]	@ (8019f18 <SX1276SetRx+0x300>)
 8019c44:	2126      	movs	r1, #38	@ 0x26
 8019c46:	5c52      	ldrb	r2, [r2, r1]
 8019c48:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8019c4a:	2040      	movs	r0, #64	@ 0x40
 8019c4c:	f000 fba7 	bl	801a39e <SX1276Read>
 8019c50:	0003      	movs	r3, r0
 8019c52:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8019c54:	2203      	movs	r2, #3
 8019c56:	4013      	ands	r3, r2
 8019c58:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8019c5a:	220c      	movs	r2, #12
 8019c5c:	4313      	orrs	r3, r2
 8019c5e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8019c60:	b2db      	uxtb	r3, r3
 8019c62:	0019      	movs	r1, r3
 8019c64:	2040      	movs	r0, #64	@ 0x40
 8019c66:	f000 fb89 	bl	801a37c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8019c6a:	2041      	movs	r0, #65	@ 0x41
 8019c6c:	f000 fb97 	bl	801a39e <SX1276Read>
 8019c70:	0003      	movs	r3, r0
 8019c72:	001a      	movs	r2, r3
 8019c74:	233f      	movs	r3, #63	@ 0x3f
 8019c76:	425b      	negs	r3, r3
 8019c78:	4313      	orrs	r3, r2
 8019c7a:	b2db      	uxtb	r3, r3
 8019c7c:	0019      	movs	r1, r3
 8019c7e:	2041      	movs	r0, #65	@ 0x41
 8019c80:	f000 fb7c 	bl	801a37c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8019c84:	2035      	movs	r0, #53	@ 0x35
 8019c86:	f000 fb8a 	bl	801a39e <SX1276Read>
 8019c8a:	0003      	movs	r3, r0
 8019c8c:	001a      	movs	r2, r3
 8019c8e:	233f      	movs	r3, #63	@ 0x3f
 8019c90:	4013      	ands	r3, r2
 8019c92:	b2d9      	uxtb	r1, r3
 8019c94:	4ba0      	ldr	r3, [pc, #640]	@ (8019f18 <SX1276SetRx+0x300>)
 8019c96:	223e      	movs	r2, #62	@ 0x3e
 8019c98:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8019c9a:	211e      	movs	r1, #30
 8019c9c:	200d      	movs	r0, #13
 8019c9e:	f000 fb6d 	bl	801a37c <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8019ca2:	4b9d      	ldr	r3, [pc, #628]	@ (8019f18 <SX1276SetRx+0x300>)
 8019ca4:	2230      	movs	r2, #48	@ 0x30
 8019ca6:	2100      	movs	r1, #0
 8019ca8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8019caa:	4b9b      	ldr	r3, [pc, #620]	@ (8019f18 <SX1276SetRx+0x300>)
 8019cac:	2231      	movs	r2, #49	@ 0x31
 8019cae:	2100      	movs	r1, #0
 8019cb0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8019cb2:	4b99      	ldr	r3, [pc, #612]	@ (8019f18 <SX1276SetRx+0x300>)
 8019cb4:	2200      	movs	r2, #0
 8019cb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8019cb8:	4b97      	ldr	r3, [pc, #604]	@ (8019f18 <SX1276SetRx+0x300>)
 8019cba:	2200      	movs	r2, #0
 8019cbc:	875a      	strh	r2, [r3, #58]	@ 0x3a
        }
        break;
 8019cbe:	e0e6      	b.n	8019e8e <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8019cc0:	4b95      	ldr	r3, [pc, #596]	@ (8019f18 <SX1276SetRx+0x300>)
 8019cc2:	2255      	movs	r2, #85	@ 0x55
 8019cc4:	5c9b      	ldrb	r3, [r3, r2]
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d010      	beq.n	8019cec <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8019cca:	2033      	movs	r0, #51	@ 0x33
 8019ccc:	f000 fb67 	bl	801a39e <SX1276Read>
 8019cd0:	0003      	movs	r3, r0
 8019cd2:	001a      	movs	r2, r3
 8019cd4:	2341      	movs	r3, #65	@ 0x41
 8019cd6:	4313      	orrs	r3, r2
 8019cd8:	b2db      	uxtb	r3, r3
 8019cda:	0019      	movs	r1, r3
 8019cdc:	2033      	movs	r0, #51	@ 0x33
 8019cde:	f000 fb4d 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8019ce2:	2119      	movs	r1, #25
 8019ce4:	203b      	movs	r0, #59	@ 0x3b
 8019ce6:	f000 fb49 	bl	801a37c <SX1276Write>
 8019cea:	e013      	b.n	8019d14 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8019cec:	2033      	movs	r0, #51	@ 0x33
 8019cee:	f000 fb56 	bl	801a39e <SX1276Read>
 8019cf2:	0003      	movs	r3, r0
 8019cf4:	b25b      	sxtb	r3, r3
 8019cf6:	2241      	movs	r2, #65	@ 0x41
 8019cf8:	4393      	bics	r3, r2
 8019cfa:	b25b      	sxtb	r3, r3
 8019cfc:	2201      	movs	r2, #1
 8019cfe:	4313      	orrs	r3, r2
 8019d00:	b25b      	sxtb	r3, r3
 8019d02:	b2db      	uxtb	r3, r3
 8019d04:	0019      	movs	r1, r3
 8019d06:	2033      	movs	r0, #51	@ 0x33
 8019d08:	f000 fb38 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8019d0c:	211d      	movs	r1, #29
 8019d0e:	203b      	movs	r0, #59	@ 0x3b
 8019d10:	f000 fb34 	bl	801a37c <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8019d14:	4b80      	ldr	r3, [pc, #512]	@ (8019f18 <SX1276SetRx+0x300>)
 8019d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019d18:	2b08      	cmp	r3, #8
 8019d1a:	d900      	bls.n	8019d1e <SX1276SetRx+0x106>
 8019d1c:	e075      	b.n	8019e0a <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8019d1e:	2031      	movs	r0, #49	@ 0x31
 8019d20:	f000 fb3d 	bl	801a39e <SX1276Read>
 8019d24:	0003      	movs	r3, r0
 8019d26:	001a      	movs	r2, r3
 8019d28:	237f      	movs	r3, #127	@ 0x7f
 8019d2a:	4013      	ands	r3, r2
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	0019      	movs	r1, r3
 8019d30:	2031      	movs	r0, #49	@ 0x31
 8019d32:	f000 fb23 	bl	801a37c <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8019d36:	2100      	movs	r1, #0
 8019d38:	2030      	movs	r0, #48	@ 0x30
 8019d3a:	f000 fb1f 	bl	801a37c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8019d3e:	4b76      	ldr	r3, [pc, #472]	@ (8019f18 <SX1276SetRx+0x300>)
 8019d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019d42:	2b08      	cmp	r3, #8
 8019d44:	d86e      	bhi.n	8019e24 <SX1276SetRx+0x20c>
 8019d46:	009a      	lsls	r2, r3, #2
 8019d48:	4b74      	ldr	r3, [pc, #464]	@ (8019f1c <SX1276SetRx+0x304>)
 8019d4a:	18d3      	adds	r3, r2, r3
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8019d50:	2148      	movs	r1, #72	@ 0x48
 8019d52:	202f      	movs	r0, #47	@ 0x2f
 8019d54:	f000 fb12 	bl	801a37c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8019d58:	4b6f      	ldr	r3, [pc, #444]	@ (8019f18 <SX1276SetRx+0x300>)
 8019d5a:	689b      	ldr	r3, [r3, #8]
 8019d5c:	4a70      	ldr	r2, [pc, #448]	@ (8019f20 <SX1276SetRx+0x308>)
 8019d5e:	4694      	mov	ip, r2
 8019d60:	4463      	add	r3, ip
 8019d62:	0018      	movs	r0, r3
 8019d64:	f7fe fee6 	bl	8018b34 <SX1276SetChannel>
                    break;
 8019d68:	e05c      	b.n	8019e24 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019d6a:	2144      	movs	r1, #68	@ 0x44
 8019d6c:	202f      	movs	r0, #47	@ 0x2f
 8019d6e:	f000 fb05 	bl	801a37c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8019d72:	4b69      	ldr	r3, [pc, #420]	@ (8019f18 <SX1276SetRx+0x300>)
 8019d74:	689b      	ldr	r3, [r3, #8]
 8019d76:	4a6b      	ldr	r2, [pc, #428]	@ (8019f24 <SX1276SetRx+0x30c>)
 8019d78:	4694      	mov	ip, r2
 8019d7a:	4463      	add	r3, ip
 8019d7c:	0018      	movs	r0, r3
 8019d7e:	f7fe fed9 	bl	8018b34 <SX1276SetChannel>
                    break;
 8019d82:	e04f      	b.n	8019e24 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019d84:	2144      	movs	r1, #68	@ 0x44
 8019d86:	202f      	movs	r0, #47	@ 0x2f
 8019d88:	f000 faf8 	bl	801a37c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8019d8c:	4b62      	ldr	r3, [pc, #392]	@ (8019f18 <SX1276SetRx+0x300>)
 8019d8e:	689b      	ldr	r3, [r3, #8]
 8019d90:	4a65      	ldr	r2, [pc, #404]	@ (8019f28 <SX1276SetRx+0x310>)
 8019d92:	4694      	mov	ip, r2
 8019d94:	4463      	add	r3, ip
 8019d96:	0018      	movs	r0, r3
 8019d98:	f7fe fecc 	bl	8018b34 <SX1276SetChannel>
                    break;
 8019d9c:	e042      	b.n	8019e24 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019d9e:	2144      	movs	r1, #68	@ 0x44
 8019da0:	202f      	movs	r0, #47	@ 0x2f
 8019da2:	f000 faeb 	bl	801a37c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8019da6:	4b5c      	ldr	r3, [pc, #368]	@ (8019f18 <SX1276SetRx+0x300>)
 8019da8:	689b      	ldr	r3, [r3, #8]
 8019daa:	4a60      	ldr	r2, [pc, #384]	@ (8019f2c <SX1276SetRx+0x314>)
 8019dac:	4694      	mov	ip, r2
 8019dae:	4463      	add	r3, ip
 8019db0:	0018      	movs	r0, r3
 8019db2:	f7fe febf 	bl	8018b34 <SX1276SetChannel>
                    break;
 8019db6:	e035      	b.n	8019e24 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019db8:	2144      	movs	r1, #68	@ 0x44
 8019dba:	202f      	movs	r0, #47	@ 0x2f
 8019dbc:	f000 fade 	bl	801a37c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8019dc0:	4b55      	ldr	r3, [pc, #340]	@ (8019f18 <SX1276SetRx+0x300>)
 8019dc2:	689b      	ldr	r3, [r3, #8]
 8019dc4:	4a5a      	ldr	r2, [pc, #360]	@ (8019f30 <SX1276SetRx+0x318>)
 8019dc6:	4694      	mov	ip, r2
 8019dc8:	4463      	add	r3, ip
 8019dca:	0018      	movs	r0, r3
 8019dcc:	f7fe feb2 	bl	8018b34 <SX1276SetChannel>
                    break;
 8019dd0:	e028      	b.n	8019e24 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019dd2:	2144      	movs	r1, #68	@ 0x44
 8019dd4:	202f      	movs	r0, #47	@ 0x2f
 8019dd6:	f000 fad1 	bl	801a37c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8019dda:	4b4f      	ldr	r3, [pc, #316]	@ (8019f18 <SX1276SetRx+0x300>)
 8019ddc:	689b      	ldr	r3, [r3, #8]
 8019dde:	4a55      	ldr	r2, [pc, #340]	@ (8019f34 <SX1276SetRx+0x31c>)
 8019de0:	4694      	mov	ip, r2
 8019de2:	4463      	add	r3, ip
 8019de4:	0018      	movs	r0, r3
 8019de6:	f7fe fea5 	bl	8018b34 <SX1276SetChannel>
                    break;
 8019dea:	e01b      	b.n	8019e24 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8019dec:	2140      	movs	r1, #64	@ 0x40
 8019dee:	202f      	movs	r0, #47	@ 0x2f
 8019df0:	f000 fac4 	bl	801a37c <SX1276Write>
                    break;
 8019df4:	e016      	b.n	8019e24 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8019df6:	2140      	movs	r1, #64	@ 0x40
 8019df8:	202f      	movs	r0, #47	@ 0x2f
 8019dfa:	f000 fabf 	bl	801a37c <SX1276Write>
                    break;
 8019dfe:	e011      	b.n	8019e24 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8019e00:	2140      	movs	r1, #64	@ 0x40
 8019e02:	202f      	movs	r0, #47	@ 0x2f
 8019e04:	f000 faba 	bl	801a37c <SX1276Write>
                    break;
 8019e08:	e00c      	b.n	8019e24 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8019e0a:	2031      	movs	r0, #49	@ 0x31
 8019e0c:	f000 fac7 	bl	801a39e <SX1276Read>
 8019e10:	0003      	movs	r3, r0
 8019e12:	001a      	movs	r2, r3
 8019e14:	2380      	movs	r3, #128	@ 0x80
 8019e16:	425b      	negs	r3, r3
 8019e18:	4313      	orrs	r3, r2
 8019e1a:	b2db      	uxtb	r3, r3
 8019e1c:	0019      	movs	r1, r3
 8019e1e:	2031      	movs	r0, #49	@ 0x31
 8019e20:	f000 faac 	bl	801a37c <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8019e24:	230f      	movs	r3, #15
 8019e26:	18fb      	adds	r3, r7, r3
 8019e28:	4a3b      	ldr	r2, [pc, #236]	@ (8019f18 <SX1276SetRx+0x300>)
 8019e2a:	2156      	movs	r1, #86	@ 0x56
 8019e2c:	5c52      	ldrb	r2, [r2, r1]
 8019e2e:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019e30:	4b39      	ldr	r3, [pc, #228]	@ (8019f18 <SX1276SetRx+0x300>)
 8019e32:	2253      	movs	r2, #83	@ 0x53
 8019e34:	5c9b      	ldrb	r3, [r3, r2]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d010      	beq.n	8019e5c <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8019e3a:	211d      	movs	r1, #29
 8019e3c:	2011      	movs	r0, #17
 8019e3e:	f000 fa9d 	bl	801a37c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8019e42:	2040      	movs	r0, #64	@ 0x40
 8019e44:	f000 faab 	bl	801a39e <SX1276Read>
 8019e48:	0003      	movs	r3, r0
 8019e4a:	001a      	movs	r2, r3
 8019e4c:	2333      	movs	r3, #51	@ 0x33
 8019e4e:	4013      	ands	r3, r2
 8019e50:	b2db      	uxtb	r3, r3
 8019e52:	0019      	movs	r1, r3
 8019e54:	2040      	movs	r0, #64	@ 0x40
 8019e56:	f000 fa91 	bl	801a37c <SX1276Write>
 8019e5a:	e00f      	b.n	8019e7c <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8019e5c:	211f      	movs	r1, #31
 8019e5e:	2011      	movs	r0, #17
 8019e60:	f000 fa8c 	bl	801a37c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8019e64:	2040      	movs	r0, #64	@ 0x40
 8019e66:	f000 fa9a 	bl	801a39e <SX1276Read>
 8019e6a:	0003      	movs	r3, r0
 8019e6c:	001a      	movs	r2, r3
 8019e6e:	233f      	movs	r3, #63	@ 0x3f
 8019e70:	4013      	ands	r3, r2
 8019e72:	b2db      	uxtb	r3, r3
 8019e74:	0019      	movs	r1, r3
 8019e76:	2040      	movs	r0, #64	@ 0x40
 8019e78:	f000 fa80 	bl	801a37c <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8019e7c:	2100      	movs	r1, #0
 8019e7e:	200f      	movs	r0, #15
 8019e80:	f000 fa7c 	bl	801a37c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8019e84:	2100      	movs	r1, #0
 8019e86:	200d      	movs	r0, #13
 8019e88:	f000 fa78 	bl	801a37c <SX1276Write>
        }
        break;
 8019e8c:	46c0      	nop			@ (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8019e8e:	2380      	movs	r3, #128	@ 0x80
 8019e90:	005a      	lsls	r2, r3, #1
 8019e92:	4b29      	ldr	r3, [pc, #164]	@ (8019f38 <SX1276SetRx+0x320>)
 8019e94:	2100      	movs	r1, #0
 8019e96:	0018      	movs	r0, r3
 8019e98:	f003 f9fd 	bl	801d296 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8019e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8019f18 <SX1276SetRx+0x300>)
 8019e9e:	2201      	movs	r2, #1
 8019ea0:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d009      	beq.n	8019ebc <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019ea8:	687a      	ldr	r2, [r7, #4]
 8019eaa:	4b24      	ldr	r3, [pc, #144]	@ (8019f3c <SX1276SetRx+0x324>)
 8019eac:	0011      	movs	r1, r2
 8019eae:	0018      	movs	r0, r3
 8019eb0:	f002 f948 	bl	801c144 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019eb4:	4b21      	ldr	r3, [pc, #132]	@ (8019f3c <SX1276SetRx+0x324>)
 8019eb6:	0018      	movs	r0, r3
 8019eb8:	f002 f854 	bl	801bf64 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8019ebc:	4b16      	ldr	r3, [pc, #88]	@ (8019f18 <SX1276SetRx+0x300>)
 8019ebe:	795b      	ldrb	r3, [r3, #5]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d116      	bne.n	8019ef2 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8019ec4:	2005      	movs	r0, #5
 8019ec6:	f000 f992 	bl	801a1ee <SX1276SetOpMode>

        if( rxContinuous == false )
 8019eca:	230f      	movs	r3, #15
 8019ecc:	18fb      	adds	r3, r7, r3
 8019ece:	781b      	ldrb	r3, [r3, #0]
 8019ed0:	2201      	movs	r2, #1
 8019ed2:	4053      	eors	r3, r2
 8019ed4:	b2db      	uxtb	r3, r3
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d017      	beq.n	8019f0a <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8019eda:	4b0f      	ldr	r3, [pc, #60]	@ (8019f18 <SX1276SetRx+0x300>)
 8019edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019ede:	4b18      	ldr	r3, [pc, #96]	@ (8019f40 <SX1276SetRx+0x328>)
 8019ee0:	0011      	movs	r1, r2
 8019ee2:	0018      	movs	r0, r3
 8019ee4:	f002 f92e 	bl	801c144 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8019ee8:	4b15      	ldr	r3, [pc, #84]	@ (8019f40 <SX1276SetRx+0x328>)
 8019eea:	0018      	movs	r0, r3
 8019eec:	f002 f83a 	bl	801bf64 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8019ef0:	e00b      	b.n	8019f0a <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 8019ef2:	230f      	movs	r3, #15
 8019ef4:	18fb      	adds	r3, r7, r3
 8019ef6:	781b      	ldrb	r3, [r3, #0]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d003      	beq.n	8019f04 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8019efc:	2005      	movs	r0, #5
 8019efe:	f000 f976 	bl	801a1ee <SX1276SetOpMode>
}
 8019f02:	e002      	b.n	8019f0a <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8019f04:	2006      	movs	r0, #6
 8019f06:	f000 f972 	bl	801a1ee <SX1276SetOpMode>
}
 8019f0a:	46c0      	nop			@ (mov r8, r8)
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	b004      	add	sp, #16
 8019f10:	bd80      	pop	{r7, pc}
 8019f12:	46c0      	nop			@ (mov r8, r8)
 8019f14:	200015a0 	.word	0x200015a0
 8019f18:	20001538 	.word	0x20001538
 8019f1c:	0801e778 	.word	0x0801e778
 8019f20:	00001e82 	.word	0x00001e82
 8019f24:	000028b4 	.word	0x000028b4
 8019f28:	00003d04 	.word	0x00003d04
 8019f2c:	0000515e 	.word	0x0000515e
 8019f30:	00007a12 	.word	0x00007a12
 8019f34:	0000a2c6 	.word	0x0000a2c6
 8019f38:	20001438 	.word	0x20001438
 8019f3c:	200015b8 	.word	0x200015b8
 8019f40:	200015d0 	.word	0x200015d0

08019f44 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b082      	sub	sp, #8
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8019f4c:	4b38      	ldr	r3, [pc, #224]	@ (801a030 <SX1276SetTx+0xec>)
 8019f4e:	0018      	movs	r0, r3
 8019f50:	f002 f880 	bl	801c054 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019f54:	687a      	ldr	r2, [r7, #4]
 8019f56:	4b37      	ldr	r3, [pc, #220]	@ (801a034 <SX1276SetTx+0xf0>)
 8019f58:	0011      	movs	r1, r2
 8019f5a:	0018      	movs	r0, r3
 8019f5c:	f002 f8f2 	bl	801c144 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 8019f60:	4b35      	ldr	r3, [pc, #212]	@ (801a038 <SX1276SetTx+0xf4>)
 8019f62:	795b      	ldrb	r3, [r3, #5]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d002      	beq.n	8019f6e <SX1276SetTx+0x2a>
 8019f68:	2b01      	cmp	r3, #1
 8019f6a:	d024      	beq.n	8019fb6 <SX1276SetTx+0x72>
 8019f6c:	e052      	b.n	801a014 <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8019f6e:	2040      	movs	r0, #64	@ 0x40
 8019f70:	f000 fa15 	bl	801a39e <SX1276Read>
 8019f74:	0003      	movs	r3, r0
 8019f76:	001a      	movs	r2, r3
 8019f78:	2303      	movs	r3, #3
 8019f7a:	4013      	ands	r3, r2
 8019f7c:	b2db      	uxtb	r3, r3
 8019f7e:	0019      	movs	r1, r3
 8019f80:	2040      	movs	r0, #64	@ 0x40
 8019f82:	f000 f9fb 	bl	801a37c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8019f86:	2041      	movs	r0, #65	@ 0x41
 8019f88:	f000 fa09 	bl	801a39e <SX1276Read>
 8019f8c:	0003      	movs	r3, r0
 8019f8e:	001a      	movs	r2, r3
 8019f90:	233e      	movs	r3, #62	@ 0x3e
 8019f92:	4013      	ands	r3, r2
 8019f94:	b2db      	uxtb	r3, r3
 8019f96:	0019      	movs	r1, r3
 8019f98:	2041      	movs	r0, #65	@ 0x41
 8019f9a:	f000 f9ef 	bl	801a37c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8019f9e:	2035      	movs	r0, #53	@ 0x35
 8019fa0:	f000 f9fd 	bl	801a39e <SX1276Read>
 8019fa4:	0003      	movs	r3, r0
 8019fa6:	001a      	movs	r2, r3
 8019fa8:	233f      	movs	r3, #63	@ 0x3f
 8019faa:	4013      	ands	r3, r2
 8019fac:	b2d9      	uxtb	r1, r3
 8019fae:	4b22      	ldr	r3, [pc, #136]	@ (801a038 <SX1276SetTx+0xf4>)
 8019fb0:	223e      	movs	r2, #62	@ 0x3e
 8019fb2:	5499      	strb	r1, [r3, r2]
        }
        break;
 8019fb4:	e02e      	b.n	801a014 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019fb6:	4b20      	ldr	r3, [pc, #128]	@ (801a038 <SX1276SetTx+0xf4>)
 8019fb8:	2253      	movs	r2, #83	@ 0x53
 8019fba:	5c9b      	ldrb	r3, [r3, r2]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d014      	beq.n	8019fea <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8019fc0:	21f5      	movs	r1, #245	@ 0xf5
 8019fc2:	2011      	movs	r0, #17
 8019fc4:	f000 f9da 	bl	801a37c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8019fc8:	2040      	movs	r0, #64	@ 0x40
 8019fca:	f000 f9e8 	bl	801a39e <SX1276Read>
 8019fce:	0003      	movs	r3, r0
 8019fd0:	b25b      	sxtb	r3, r3
 8019fd2:	2233      	movs	r2, #51	@ 0x33
 8019fd4:	4013      	ands	r3, r2
 8019fd6:	b25b      	sxtb	r3, r3
 8019fd8:	2240      	movs	r2, #64	@ 0x40
 8019fda:	4313      	orrs	r3, r2
 8019fdc:	b25b      	sxtb	r3, r3
 8019fde:	b2db      	uxtb	r3, r3
 8019fe0:	0019      	movs	r1, r3
 8019fe2:	2040      	movs	r0, #64	@ 0x40
 8019fe4:	f000 f9ca 	bl	801a37c <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8019fe8:	e013      	b.n	801a012 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8019fea:	21f7      	movs	r1, #247	@ 0xf7
 8019fec:	2011      	movs	r0, #17
 8019fee:	f000 f9c5 	bl	801a37c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8019ff2:	2040      	movs	r0, #64	@ 0x40
 8019ff4:	f000 f9d3 	bl	801a39e <SX1276Read>
 8019ff8:	0003      	movs	r3, r0
 8019ffa:	b25b      	sxtb	r3, r3
 8019ffc:	223f      	movs	r2, #63	@ 0x3f
 8019ffe:	4013      	ands	r3, r2
 801a000:	b25b      	sxtb	r3, r3
 801a002:	2240      	movs	r2, #64	@ 0x40
 801a004:	4313      	orrs	r3, r2
 801a006:	b25b      	sxtb	r3, r3
 801a008:	b2db      	uxtb	r3, r3
 801a00a:	0019      	movs	r1, r3
 801a00c:	2040      	movs	r0, #64	@ 0x40
 801a00e:	f000 f9b5 	bl	801a37c <SX1276Write>
        break;
 801a012:	46c0      	nop			@ (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801a014:	4b08      	ldr	r3, [pc, #32]	@ (801a038 <SX1276SetTx+0xf4>)
 801a016:	2202      	movs	r2, #2
 801a018:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801a01a:	4b06      	ldr	r3, [pc, #24]	@ (801a034 <SX1276SetTx+0xf0>)
 801a01c:	0018      	movs	r0, r3
 801a01e:	f001 ffa1 	bl	801bf64 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801a022:	2003      	movs	r0, #3
 801a024:	f000 f8e3 	bl	801a1ee <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801a028:	46c0      	nop			@ (mov r8, r8)
 801a02a:	46bd      	mov	sp, r7
 801a02c:	b002      	add	sp, #8
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	200015b8 	.word	0x200015b8
 801a034:	200015a0 	.word	0x200015a0
 801a038:	20001538 	.word	0x20001538

0801a03c <SX1276StartCad>:

void SX1276StartCad( void )
{
 801a03c:	b580      	push	{r7, lr}
 801a03e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801a040:	4b11      	ldr	r3, [pc, #68]	@ (801a088 <SX1276StartCad+0x4c>)
 801a042:	795b      	ldrb	r3, [r3, #5]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d01a      	beq.n	801a07e <SX1276StartCad+0x42>
 801a048:	2b01      	cmp	r3, #1
 801a04a:	d000      	beq.n	801a04e <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801a04c:	e018      	b.n	801a080 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a04e:	21fa      	movs	r1, #250	@ 0xfa
 801a050:	2011      	movs	r0, #17
 801a052:	f000 f993 	bl	801a37c <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801a056:	2040      	movs	r0, #64	@ 0x40
 801a058:	f000 f9a1 	bl	801a39e <SX1276Read>
 801a05c:	0003      	movs	r3, r0
 801a05e:	001a      	movs	r2, r3
 801a060:	2303      	movs	r3, #3
 801a062:	439a      	bics	r2, r3
 801a064:	0013      	movs	r3, r2
 801a066:	b2db      	uxtb	r3, r3
 801a068:	0019      	movs	r1, r3
 801a06a:	2040      	movs	r0, #64	@ 0x40
 801a06c:	f000 f986 	bl	801a37c <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801a070:	4b05      	ldr	r3, [pc, #20]	@ (801a088 <SX1276StartCad+0x4c>)
 801a072:	2203      	movs	r2, #3
 801a074:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801a076:	2007      	movs	r0, #7
 801a078:	f000 f8b9 	bl	801a1ee <SX1276SetOpMode>
        break;
 801a07c:	e000      	b.n	801a080 <SX1276StartCad+0x44>
        break;
 801a07e:	46c0      	nop			@ (mov r8, r8)
    }
}
 801a080:	46c0      	nop			@ (mov r8, r8)
 801a082:	46bd      	mov	sp, r7
 801a084:	bd80      	pop	{r7, pc}
 801a086:	46c0      	nop			@ (mov r8, r8)
 801a088:	20001538 	.word	0x20001538

0801a08c <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b08e      	sub	sp, #56	@ 0x38
 801a090:	af0a      	add	r7, sp, #40	@ 0x28
 801a092:	6078      	str	r0, [r7, #4]
 801a094:	0008      	movs	r0, r1
 801a096:	0011      	movs	r1, r2
 801a098:	1cfb      	adds	r3, r7, #3
 801a09a:	1c02      	adds	r2, r0, #0
 801a09c:	701a      	strb	r2, [r3, #0]
 801a09e:	003b      	movs	r3, r7
 801a0a0:	1c0a      	adds	r2, r1, #0
 801a0a2:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801a0a4:	003b      	movs	r3, r7
 801a0a6:	881a      	ldrh	r2, [r3, #0]
 801a0a8:	0013      	movs	r3, r2
 801a0aa:	015b      	lsls	r3, r3, #5
 801a0ac:	1a9b      	subs	r3, r3, r2
 801a0ae:	009b      	lsls	r3, r3, #2
 801a0b0:	189b      	adds	r3, r3, r2
 801a0b2:	00db      	lsls	r3, r3, #3
 801a0b4:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	0018      	movs	r0, r3
 801a0ba:	f7fe fd3b 	bl	8018b34 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801a0be:	1cfb      	adds	r3, r7, #3
 801a0c0:	2100      	movs	r1, #0
 801a0c2:	5659      	ldrsb	r1, [r3, r1]
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	9308      	str	r3, [sp, #32]
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	9307      	str	r3, [sp, #28]
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	9306      	str	r3, [sp, #24]
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	9305      	str	r3, [sp, #20]
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	9304      	str	r3, [sp, #16]
 801a0d8:	2300      	movs	r3, #0
 801a0da:	9303      	str	r3, [sp, #12]
 801a0dc:	2305      	movs	r3, #5
 801a0de:	9302      	str	r3, [sp, #8]
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	9301      	str	r3, [sp, #4]
 801a0e4:	2396      	movs	r3, #150	@ 0x96
 801a0e6:	015b      	lsls	r3, r3, #5
 801a0e8:	9300      	str	r3, [sp, #0]
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	2000      	movs	r0, #0
 801a0f0:	f7ff f8ea 	bl	80192c8 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801a0f4:	2031      	movs	r0, #49	@ 0x31
 801a0f6:	f000 f952 	bl	801a39e <SX1276Read>
 801a0fa:	0003      	movs	r3, r0
 801a0fc:	001a      	movs	r2, r3
 801a0fe:	2340      	movs	r3, #64	@ 0x40
 801a100:	439a      	bics	r2, r3
 801a102:	0013      	movs	r3, r2
 801a104:	b2db      	uxtb	r3, r3
 801a106:	0019      	movs	r1, r3
 801a108:	2031      	movs	r0, #49	@ 0x31
 801a10a:	f000 f937 	bl	801a37c <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801a10e:	21f0      	movs	r1, #240	@ 0xf0
 801a110:	2040      	movs	r0, #64	@ 0x40
 801a112:	f000 f933 	bl	801a37c <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801a116:	21a0      	movs	r1, #160	@ 0xa0
 801a118:	2041      	movs	r0, #65	@ 0x41
 801a11a:	f000 f92f 	bl	801a37c <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a11e:	68fa      	ldr	r2, [r7, #12]
 801a120:	4b09      	ldr	r3, [pc, #36]	@ (801a148 <SX1276SetTxContinuousWave+0xbc>)
 801a122:	0011      	movs	r1, r2
 801a124:	0018      	movs	r0, r3
 801a126:	f002 f80d 	bl	801c144 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801a12a:	4b08      	ldr	r3, [pc, #32]	@ (801a14c <SX1276SetTxContinuousWave+0xc0>)
 801a12c:	2202      	movs	r2, #2
 801a12e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801a130:	4b05      	ldr	r3, [pc, #20]	@ (801a148 <SX1276SetTxContinuousWave+0xbc>)
 801a132:	0018      	movs	r0, r3
 801a134:	f001 ff16 	bl	801bf64 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801a138:	2003      	movs	r0, #3
 801a13a:	f000 f858 	bl	801a1ee <SX1276SetOpMode>
}
 801a13e:	46c0      	nop			@ (mov r8, r8)
 801a140:	46bd      	mov	sp, r7
 801a142:	b004      	add	sp, #16
 801a144:	bd80      	pop	{r7, pc}
 801a146:	46c0      	nop			@ (mov r8, r8)
 801a148:	200015a0 	.word	0x200015a0
 801a14c:	20001538 	.word	0x20001538

0801a150 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b084      	sub	sp, #16
 801a154:	af00      	add	r7, sp, #0
 801a156:	0002      	movs	r2, r0
 801a158:	1dfb      	adds	r3, r7, #7
 801a15a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801a15c:	230e      	movs	r3, #14
 801a15e:	18fb      	adds	r3, r7, r3
 801a160:	2200      	movs	r2, #0
 801a162:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801a164:	1dfb      	adds	r3, r7, #7
 801a166:	781b      	ldrb	r3, [r3, #0]
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d002      	beq.n	801a172 <SX1276ReadRssi+0x22>
 801a16c:	2b01      	cmp	r3, #1
 801a16e:	d00c      	beq.n	801a18a <SX1276ReadRssi+0x3a>
 801a170:	e024      	b.n	801a1bc <SX1276ReadRssi+0x6c>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801a172:	2011      	movs	r0, #17
 801a174:	f000 f913 	bl	801a39e <SX1276Read>
 801a178:	0003      	movs	r3, r0
 801a17a:	085b      	lsrs	r3, r3, #1
 801a17c:	b2db      	uxtb	r3, r3
 801a17e:	425b      	negs	r3, r3
 801a180:	b29a      	uxth	r2, r3
 801a182:	230e      	movs	r3, #14
 801a184:	18fb      	adds	r3, r7, r3
 801a186:	801a      	strh	r2, [r3, #0]
        break;
 801a188:	e01e      	b.n	801a1c8 <SX1276ReadRssi+0x78>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801a18a:	4b13      	ldr	r3, [pc, #76]	@ (801a1d8 <SX1276ReadRssi+0x88>)
 801a18c:	689b      	ldr	r3, [r3, #8]
 801a18e:	4a13      	ldr	r2, [pc, #76]	@ (801a1dc <SX1276ReadRssi+0x8c>)
 801a190:	4293      	cmp	r3, r2
 801a192:	d909      	bls.n	801a1a8 <SX1276ReadRssi+0x58>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801a194:	201b      	movs	r0, #27
 801a196:	f000 f902 	bl	801a39e <SX1276Read>
 801a19a:	0003      	movs	r3, r0
 801a19c:	3b9d      	subs	r3, #157	@ 0x9d
 801a19e:	b29a      	uxth	r2, r3
 801a1a0:	230e      	movs	r3, #14
 801a1a2:	18fb      	adds	r3, r7, r3
 801a1a4:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801a1a6:	e00f      	b.n	801a1c8 <SX1276ReadRssi+0x78>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801a1a8:	201b      	movs	r0, #27
 801a1aa:	f000 f8f8 	bl	801a39e <SX1276Read>
 801a1ae:	0003      	movs	r3, r0
 801a1b0:	3ba4      	subs	r3, #164	@ 0xa4
 801a1b2:	b29a      	uxth	r2, r3
 801a1b4:	230e      	movs	r3, #14
 801a1b6:	18fb      	adds	r3, r7, r3
 801a1b8:	801a      	strh	r2, [r3, #0]
        break;
 801a1ba:	e005      	b.n	801a1c8 <SX1276ReadRssi+0x78>
    default:
        rssi = -1;
 801a1bc:	230e      	movs	r3, #14
 801a1be:	18fb      	adds	r3, r7, r3
 801a1c0:	2201      	movs	r2, #1
 801a1c2:	4252      	negs	r2, r2
 801a1c4:	801a      	strh	r2, [r3, #0]
        break;
 801a1c6:	46c0      	nop			@ (mov r8, r8)
    }
    return rssi;
 801a1c8:	230e      	movs	r3, #14
 801a1ca:	18fb      	adds	r3, r7, r3
 801a1cc:	2200      	movs	r2, #0
 801a1ce:	5e9b      	ldrsh	r3, [r3, r2]
}
 801a1d0:	0018      	movs	r0, r3
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	b004      	add	sp, #16
 801a1d6:	bd80      	pop	{r7, pc}
 801a1d8:	20001538 	.word	0x20001538
 801a1dc:	1f4add40 	.word	0x1f4add40

0801a1e0 <SX1276Reset>:

static void SX1276Reset( void )
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801a1e4:	f7eb fbae 	bl	8005944 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801a1e8:	46c0      	nop			@ (mov r8, r8)
 801a1ea:	46bd      	mov	sp, r7
 801a1ec:	bd80      	pop	{r7, pc}

0801a1ee <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801a1ee:	b5b0      	push	{r4, r5, r7, lr}
 801a1f0:	b084      	sub	sp, #16
 801a1f2:	af00      	add	r7, sp, #0
 801a1f4:	0002      	movs	r2, r0
 801a1f6:	1dfb      	adds	r3, r7, #7
 801a1f8:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801a1fa:	1dfb      	adds	r3, r7, #7
 801a1fc:	781b      	ldrb	r3, [r3, #0]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d118      	bne.n	801a234 <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a202:	2001      	movs	r0, #1
 801a204:	f000 f8cb 	bl	801a39e <SX1276Read>
 801a208:	0003      	movs	r3, r0
 801a20a:	b25b      	sxtb	r3, r3
 801a20c:	2207      	movs	r2, #7
 801a20e:	4393      	bics	r3, r2
 801a210:	b25a      	sxtb	r2, r3
 801a212:	1dfb      	adds	r3, r7, #7
 801a214:	781b      	ldrb	r3, [r3, #0]
 801a216:	b25b      	sxtb	r3, r3
 801a218:	4313      	orrs	r3, r2
 801a21a:	b25b      	sxtb	r3, r3
 801a21c:	b2db      	uxtb	r3, r3
 801a21e:	0019      	movs	r1, r3
 801a220:	2001      	movs	r0, #1
 801a222:	f000 f8ab 	bl	801a37c <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801a226:	2000      	movs	r0, #0
 801a228:	f7eb fb2c 	bl	8005884 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801a22c:	2000      	movs	r0, #0
 801a22e:	f7eb f96b 	bl	8005508 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801a232:	e044      	b.n	801a2be <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801a234:	1dfb      	adds	r3, r7, #7
 801a236:	781b      	ldrb	r3, [r3, #0]
 801a238:	2b05      	cmp	r3, #5
 801a23a:	d118      	bne.n	801a26e <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801a23c:	2001      	movs	r0, #1
 801a23e:	f7eb f963 	bl	8005508 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801a242:	2001      	movs	r0, #1
 801a244:	f7eb fb1e 	bl	8005884 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a248:	2001      	movs	r0, #1
 801a24a:	f000 f8a8 	bl	801a39e <SX1276Read>
 801a24e:	0003      	movs	r3, r0
 801a250:	b25b      	sxtb	r3, r3
 801a252:	2207      	movs	r2, #7
 801a254:	4393      	bics	r3, r2
 801a256:	b25a      	sxtb	r2, r3
 801a258:	1dfb      	adds	r3, r7, #7
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	b25b      	sxtb	r3, r3
 801a25e:	4313      	orrs	r3, r2
 801a260:	b25b      	sxtb	r3, r3
 801a262:	b2db      	uxtb	r3, r3
 801a264:	0019      	movs	r1, r3
 801a266:	2001      	movs	r0, #1
 801a268:	f000 f888 	bl	801a37c <SX1276Write>
}
 801a26c:	e027      	b.n	801a2be <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801a26e:	250f      	movs	r5, #15
 801a270:	197c      	adds	r4, r7, r5
 801a272:	2009      	movs	r0, #9
 801a274:	f000 f893 	bl	801a39e <SX1276Read>
 801a278:	0003      	movs	r3, r0
 801a27a:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801a27c:	2001      	movs	r0, #1
 801a27e:	f7eb f943 	bl	8005508 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a282:	197b      	adds	r3, r7, r5
 801a284:	781b      	ldrb	r3, [r3, #0]
 801a286:	b25b      	sxtb	r3, r3
 801a288:	2b00      	cmp	r3, #0
 801a28a:	da03      	bge.n	801a294 <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801a28c:	2003      	movs	r0, #3
 801a28e:	f7eb faf9 	bl	8005884 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801a292:	e002      	b.n	801a29a <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801a294:	2002      	movs	r0, #2
 801a296:	f7eb faf5 	bl	8005884 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a29a:	2001      	movs	r0, #1
 801a29c:	f000 f87f 	bl	801a39e <SX1276Read>
 801a2a0:	0003      	movs	r3, r0
 801a2a2:	b25b      	sxtb	r3, r3
 801a2a4:	2207      	movs	r2, #7
 801a2a6:	4393      	bics	r3, r2
 801a2a8:	b25a      	sxtb	r2, r3
 801a2aa:	1dfb      	adds	r3, r7, #7
 801a2ac:	781b      	ldrb	r3, [r3, #0]
 801a2ae:	b25b      	sxtb	r3, r3
 801a2b0:	4313      	orrs	r3, r2
 801a2b2:	b25b      	sxtb	r3, r3
 801a2b4:	b2db      	uxtb	r3, r3
 801a2b6:	0019      	movs	r1, r3
 801a2b8:	2001      	movs	r0, #1
 801a2ba:	f000 f85f 	bl	801a37c <SX1276Write>
}
 801a2be:	46c0      	nop			@ (mov r8, r8)
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	b004      	add	sp, #16
 801a2c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a2c8 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b082      	sub	sp, #8
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	0002      	movs	r2, r0
 801a2d0:	1dfb      	adds	r3, r7, #7
 801a2d2:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801a2d4:	2001      	movs	r0, #1
 801a2d6:	f000 f862 	bl	801a39e <SX1276Read>
 801a2da:	0003      	movs	r3, r0
 801a2dc:	b25b      	sxtb	r3, r3
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	da03      	bge.n	801a2ea <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801a2e2:	4b25      	ldr	r3, [pc, #148]	@ (801a378 <SX1276SetModem+0xb0>)
 801a2e4:	2201      	movs	r2, #1
 801a2e6:	715a      	strb	r2, [r3, #5]
 801a2e8:	e002      	b.n	801a2f0 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801a2ea:	4b23      	ldr	r3, [pc, #140]	@ (801a378 <SX1276SetModem+0xb0>)
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801a2f0:	4b21      	ldr	r3, [pc, #132]	@ (801a378 <SX1276SetModem+0xb0>)
 801a2f2:	795b      	ldrb	r3, [r3, #5]
 801a2f4:	1dfa      	adds	r2, r7, #7
 801a2f6:	7812      	ldrb	r2, [r2, #0]
 801a2f8:	429a      	cmp	r2, r3
 801a2fa:	d038      	beq.n	801a36e <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801a2fc:	4b1e      	ldr	r3, [pc, #120]	@ (801a378 <SX1276SetModem+0xb0>)
 801a2fe:	1dfa      	adds	r2, r7, #7
 801a300:	7812      	ldrb	r2, [r2, #0]
 801a302:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801a304:	4b1c      	ldr	r3, [pc, #112]	@ (801a378 <SX1276SetModem+0xb0>)
 801a306:	795b      	ldrb	r3, [r3, #5]
 801a308:	2b01      	cmp	r3, #1
 801a30a:	d017      	beq.n	801a33c <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a30c:	2000      	movs	r0, #0
 801a30e:	f7ff ff6e 	bl	801a1ee <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801a312:	2001      	movs	r0, #1
 801a314:	f000 f843 	bl	801a39e <SX1276Read>
 801a318:	0003      	movs	r3, r0
 801a31a:	001a      	movs	r2, r3
 801a31c:	237f      	movs	r3, #127	@ 0x7f
 801a31e:	4013      	ands	r3, r2
 801a320:	b2db      	uxtb	r3, r3
 801a322:	0019      	movs	r1, r3
 801a324:	2001      	movs	r0, #1
 801a326:	f000 f829 	bl	801a37c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801a32a:	2100      	movs	r1, #0
 801a32c:	2040      	movs	r0, #64	@ 0x40
 801a32e:	f000 f825 	bl	801a37c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801a332:	2130      	movs	r1, #48	@ 0x30
 801a334:	2041      	movs	r0, #65	@ 0x41
 801a336:	f000 f821 	bl	801a37c <SX1276Write>
        break;
 801a33a:	e019      	b.n	801a370 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a33c:	2000      	movs	r0, #0
 801a33e:	f7ff ff56 	bl	801a1ee <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801a342:	2001      	movs	r0, #1
 801a344:	f000 f82b 	bl	801a39e <SX1276Read>
 801a348:	0003      	movs	r3, r0
 801a34a:	001a      	movs	r2, r3
 801a34c:	2380      	movs	r3, #128	@ 0x80
 801a34e:	425b      	negs	r3, r3
 801a350:	4313      	orrs	r3, r2
 801a352:	b2db      	uxtb	r3, r3
 801a354:	0019      	movs	r1, r3
 801a356:	2001      	movs	r0, #1
 801a358:	f000 f810 	bl	801a37c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801a35c:	2100      	movs	r1, #0
 801a35e:	2040      	movs	r0, #64	@ 0x40
 801a360:	f000 f80c 	bl	801a37c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801a364:	2100      	movs	r1, #0
 801a366:	2041      	movs	r0, #65	@ 0x41
 801a368:	f000 f808 	bl	801a37c <SX1276Write>
        break;
 801a36c:	e000      	b.n	801a370 <SX1276SetModem+0xa8>
        return;
 801a36e:	46c0      	nop			@ (mov r8, r8)
    }
}
 801a370:	46bd      	mov	sp, r7
 801a372:	b002      	add	sp, #8
 801a374:	bd80      	pop	{r7, pc}
 801a376:	46c0      	nop			@ (mov r8, r8)
 801a378:	20001538 	.word	0x20001538

0801a37c <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b082      	sub	sp, #8
 801a380:	af00      	add	r7, sp, #0
 801a382:	6078      	str	r0, [r7, #4]
 801a384:	000a      	movs	r2, r1
 801a386:	1cfb      	adds	r3, r7, #3
 801a388:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801a38a:	1cf9      	adds	r1, r7, #3
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	2201      	movs	r2, #1
 801a390:	0018      	movs	r0, r3
 801a392:	f000 f815 	bl	801a3c0 <SX1276WriteBuffer>
}
 801a396:	46c0      	nop			@ (mov r8, r8)
 801a398:	46bd      	mov	sp, r7
 801a39a:	b002      	add	sp, #8
 801a39c:	bd80      	pop	{r7, pc}

0801a39e <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801a39e:	b590      	push	{r4, r7, lr}
 801a3a0:	b085      	sub	sp, #20
 801a3a2:	af00      	add	r7, sp, #0
 801a3a4:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801a3a6:	240f      	movs	r4, #15
 801a3a8:	1939      	adds	r1, r7, r4
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	2201      	movs	r2, #1
 801a3ae:	0018      	movs	r0, r3
 801a3b0:	f000 f839 	bl	801a426 <SX1276ReadBuffer>
    return data;
 801a3b4:	193b      	adds	r3, r7, r4
 801a3b6:	781b      	ldrb	r3, [r3, #0]
}
 801a3b8:	0018      	movs	r0, r3
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	b005      	add	sp, #20
 801a3be:	bd90      	pop	{r4, r7, pc}

0801a3c0 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801a3c0:	b590      	push	{r4, r7, lr}
 801a3c2:	b087      	sub	sp, #28
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	60f8      	str	r0, [r7, #12]
 801a3c8:	60b9      	str	r1, [r7, #8]
 801a3ca:	1dfb      	adds	r3, r7, #7
 801a3cc:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801a3ce:	2000      	movs	r0, #0
 801a3d0:	f7eb fb0a 	bl	80059e8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	b29b      	uxth	r3, r3
 801a3d8:	2280      	movs	r2, #128	@ 0x80
 801a3da:	4313      	orrs	r3, r2
 801a3dc:	b29b      	uxth	r3, r3
 801a3de:	0018      	movs	r0, r3
 801a3e0:	f7eb faef 	bl	80059c2 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801a3e4:	2317      	movs	r3, #23
 801a3e6:	18fb      	adds	r3, r7, r3
 801a3e8:	2200      	movs	r2, #0
 801a3ea:	701a      	strb	r2, [r3, #0]
 801a3ec:	e00d      	b.n	801a40a <SX1276WriteBuffer+0x4a>
    {
        Sx_Board_SendRecv( buffer[i] );
 801a3ee:	2417      	movs	r4, #23
 801a3f0:	193b      	adds	r3, r7, r4
 801a3f2:	781b      	ldrb	r3, [r3, #0]
 801a3f4:	68ba      	ldr	r2, [r7, #8]
 801a3f6:	18d3      	adds	r3, r2, r3
 801a3f8:	781b      	ldrb	r3, [r3, #0]
 801a3fa:	0018      	movs	r0, r3
 801a3fc:	f7eb fae1 	bl	80059c2 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801a400:	193b      	adds	r3, r7, r4
 801a402:	781a      	ldrb	r2, [r3, #0]
 801a404:	193b      	adds	r3, r7, r4
 801a406:	3201      	adds	r2, #1
 801a408:	701a      	strb	r2, [r3, #0]
 801a40a:	2317      	movs	r3, #23
 801a40c:	18fa      	adds	r2, r7, r3
 801a40e:	1dfb      	adds	r3, r7, #7
 801a410:	7812      	ldrb	r2, [r2, #0]
 801a412:	781b      	ldrb	r3, [r3, #0]
 801a414:	429a      	cmp	r2, r3
 801a416:	d3ea      	bcc.n	801a3ee <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801a418:	2001      	movs	r0, #1
 801a41a:	f7eb fae5 	bl	80059e8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801a41e:	46c0      	nop			@ (mov r8, r8)
 801a420:	46bd      	mov	sp, r7
 801a422:	b007      	add	sp, #28
 801a424:	bd90      	pop	{r4, r7, pc}

0801a426 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801a426:	b580      	push	{r7, lr}
 801a428:	b086      	sub	sp, #24
 801a42a:	af00      	add	r7, sp, #0
 801a42c:	60f8      	str	r0, [r7, #12]
 801a42e:	60b9      	str	r1, [r7, #8]
 801a430:	1dfb      	adds	r3, r7, #7
 801a432:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801a434:	2000      	movs	r0, #0
 801a436:	f7eb fad7 	bl	80059e8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	b29b      	uxth	r3, r3
 801a43e:	227f      	movs	r2, #127	@ 0x7f
 801a440:	4013      	ands	r3, r2
 801a442:	b29b      	uxth	r3, r3
 801a444:	0018      	movs	r0, r3
 801a446:	f7eb fabc 	bl	80059c2 <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801a44a:	2317      	movs	r3, #23
 801a44c:	18fb      	adds	r3, r7, r3
 801a44e:	2200      	movs	r2, #0
 801a450:	701a      	strb	r2, [r3, #0]
 801a452:	e010      	b.n	801a476 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801a454:	2000      	movs	r0, #0
 801a456:	f7eb fab4 	bl	80059c2 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801a45a:	0003      	movs	r3, r0
 801a45c:	0019      	movs	r1, r3
 801a45e:	2017      	movs	r0, #23
 801a460:	183b      	adds	r3, r7, r0
 801a462:	781b      	ldrb	r3, [r3, #0]
 801a464:	68ba      	ldr	r2, [r7, #8]
 801a466:	18d3      	adds	r3, r2, r3
 801a468:	b2ca      	uxtb	r2, r1
 801a46a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a46c:	183b      	adds	r3, r7, r0
 801a46e:	781a      	ldrb	r2, [r3, #0]
 801a470:	183b      	adds	r3, r7, r0
 801a472:	3201      	adds	r2, #1
 801a474:	701a      	strb	r2, [r3, #0]
 801a476:	2317      	movs	r3, #23
 801a478:	18fa      	adds	r2, r7, r3
 801a47a:	1dfb      	adds	r3, r7, #7
 801a47c:	7812      	ldrb	r2, [r2, #0]
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	429a      	cmp	r2, r3
 801a482:	d3e7      	bcc.n	801a454 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801a484:	2001      	movs	r0, #1
 801a486:	f7eb faaf 	bl	80059e8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801a48a:	46c0      	nop			@ (mov r8, r8)
 801a48c:	46bd      	mov	sp, r7
 801a48e:	b006      	add	sp, #24
 801a490:	bd80      	pop	{r7, pc}

0801a492 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801a492:	b580      	push	{r7, lr}
 801a494:	b082      	sub	sp, #8
 801a496:	af00      	add	r7, sp, #0
 801a498:	6078      	str	r0, [r7, #4]
 801a49a:	000a      	movs	r2, r1
 801a49c:	1cfb      	adds	r3, r7, #3
 801a49e:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801a4a0:	1cfb      	adds	r3, r7, #3
 801a4a2:	781a      	ldrb	r2, [r3, #0]
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	0019      	movs	r1, r3
 801a4a8:	2000      	movs	r0, #0
 801a4aa:	f7ff ff89 	bl	801a3c0 <SX1276WriteBuffer>
}
 801a4ae:	46c0      	nop			@ (mov r8, r8)
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	b002      	add	sp, #8
 801a4b4:	bd80      	pop	{r7, pc}

0801a4b6 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801a4b6:	b580      	push	{r7, lr}
 801a4b8:	b082      	sub	sp, #8
 801a4ba:	af00      	add	r7, sp, #0
 801a4bc:	6078      	str	r0, [r7, #4]
 801a4be:	000a      	movs	r2, r1
 801a4c0:	1cfb      	adds	r3, r7, #3
 801a4c2:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801a4c4:	1cfb      	adds	r3, r7, #3
 801a4c6:	781a      	ldrb	r2, [r3, #0]
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	0019      	movs	r1, r3
 801a4cc:	2000      	movs	r0, #0
 801a4ce:	f7ff ffaa 	bl	801a426 <SX1276ReadBuffer>
}
 801a4d2:	46c0      	nop			@ (mov r8, r8)
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	b002      	add	sp, #8
 801a4d8:	bd80      	pop	{r7, pc}
	...

0801a4dc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a4dc:	b580      	push	{r7, lr}
 801a4de:	b082      	sub	sp, #8
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	0002      	movs	r2, r0
 801a4e4:	1dfb      	adds	r3, r7, #7
 801a4e6:	701a      	strb	r2, [r3, #0]
 801a4e8:	1dbb      	adds	r3, r7, #6
 801a4ea:	1c0a      	adds	r2, r1, #0
 801a4ec:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801a4ee:	1dfb      	adds	r3, r7, #7
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	0018      	movs	r0, r3
 801a4f4:	f7ff fee8 	bl	801a2c8 <SX1276SetModem>

    switch( modem )
 801a4f8:	1dfb      	adds	r3, r7, #7
 801a4fa:	781b      	ldrb	r3, [r3, #0]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d002      	beq.n	801a506 <SX1276SetMaxPayloadLength+0x2a>
 801a500:	2b01      	cmp	r3, #1
 801a502:	d00f      	beq.n	801a524 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801a504:	e016      	b.n	801a534 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801a506:	4b0d      	ldr	r3, [pc, #52]	@ (801a53c <SX1276SetMaxPayloadLength+0x60>)
 801a508:	2222      	movs	r2, #34	@ 0x22
 801a50a:	5c9b      	ldrb	r3, [r3, r2]
 801a50c:	2201      	movs	r2, #1
 801a50e:	4053      	eors	r3, r2
 801a510:	b2db      	uxtb	r3, r3
 801a512:	2b00      	cmp	r3, #0
 801a514:	d00d      	beq.n	801a532 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801a516:	1dbb      	adds	r3, r7, #6
 801a518:	781b      	ldrb	r3, [r3, #0]
 801a51a:	0019      	movs	r1, r3
 801a51c:	2032      	movs	r0, #50	@ 0x32
 801a51e:	f7ff ff2d 	bl	801a37c <SX1276Write>
        break;
 801a522:	e006      	b.n	801a532 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801a524:	1dbb      	adds	r3, r7, #6
 801a526:	781b      	ldrb	r3, [r3, #0]
 801a528:	0019      	movs	r1, r3
 801a52a:	2023      	movs	r0, #35	@ 0x23
 801a52c:	f7ff ff26 	bl	801a37c <SX1276Write>
        break;
 801a530:	e000      	b.n	801a534 <SX1276SetMaxPayloadLength+0x58>
        break;
 801a532:	46c0      	nop			@ (mov r8, r8)
}
 801a534:	46c0      	nop			@ (mov r8, r8)
 801a536:	46bd      	mov	sp, r7
 801a538:	b002      	add	sp, #8
 801a53a:	bd80      	pop	{r7, pc}
 801a53c:	20001538 	.word	0x20001538

0801a540 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801a540:	b580      	push	{r7, lr}
 801a542:	b082      	sub	sp, #8
 801a544:	af00      	add	r7, sp, #0
 801a546:	0002      	movs	r2, r0
 801a548:	1dfb      	adds	r3, r7, #7
 801a54a:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801a54c:	2001      	movs	r0, #1
 801a54e:	f7ff febb 	bl	801a2c8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801a552:	4b0b      	ldr	r3, [pc, #44]	@ (801a580 <SX1276SetPublicNetwork+0x40>)
 801a554:	1dfa      	adds	r2, r7, #7
 801a556:	215c      	movs	r1, #92	@ 0x5c
 801a558:	7812      	ldrb	r2, [r2, #0]
 801a55a:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801a55c:	1dfb      	adds	r3, r7, #7
 801a55e:	781b      	ldrb	r3, [r3, #0]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d004      	beq.n	801a56e <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801a564:	2134      	movs	r1, #52	@ 0x34
 801a566:	2039      	movs	r0, #57	@ 0x39
 801a568:	f7ff ff08 	bl	801a37c <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801a56c:	e003      	b.n	801a576 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801a56e:	2112      	movs	r1, #18
 801a570:	2039      	movs	r0, #57	@ 0x39
 801a572:	f7ff ff03 	bl	801a37c <SX1276Write>
}
 801a576:	46c0      	nop			@ (mov r8, r8)
 801a578:	46bd      	mov	sp, r7
 801a57a:	b002      	add	sp, #8
 801a57c:	bd80      	pop	{r7, pc}
 801a57e:	46c0      	nop			@ (mov r8, r8)
 801a580:	20001538 	.word	0x20001538

0801a584 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801a584:	b580      	push	{r7, lr}
 801a586:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801a588:	f7ea ffb8 	bl	80054fc <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801a58c:	0003      	movs	r3, r0
 801a58e:	3302      	adds	r3, #2
}
 801a590:	0018      	movs	r0, r3
 801a592:	46bd      	mov	sp, r7
 801a594:	bd80      	pop	{r7, pc}
	...

0801a598 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b084      	sub	sp, #16
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801a5a0:	230f      	movs	r3, #15
 801a5a2:	18fb      	adds	r3, r7, r3
 801a5a4:	2200      	movs	r2, #0
 801a5a6:	701a      	strb	r2, [r3, #0]
 801a5a8:	e01f      	b.n	801a5ea <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801a5aa:	210f      	movs	r1, #15
 801a5ac:	187b      	adds	r3, r7, r1
 801a5ae:	781a      	ldrb	r2, [r3, #0]
 801a5b0:	4b13      	ldr	r3, [pc, #76]	@ (801a600 <GetFskBandwidthRegValue+0x68>)
 801a5b2:	00d2      	lsls	r2, r2, #3
 801a5b4:	58d3      	ldr	r3, [r2, r3]
 801a5b6:	687a      	ldr	r2, [r7, #4]
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	d310      	bcc.n	801a5de <GetFskBandwidthRegValue+0x46>
 801a5bc:	187b      	adds	r3, r7, r1
 801a5be:	781b      	ldrb	r3, [r3, #0]
 801a5c0:	1c5a      	adds	r2, r3, #1
 801a5c2:	4b0f      	ldr	r3, [pc, #60]	@ (801a600 <GetFskBandwidthRegValue+0x68>)
 801a5c4:	00d2      	lsls	r2, r2, #3
 801a5c6:	58d3      	ldr	r3, [r2, r3]
 801a5c8:	687a      	ldr	r2, [r7, #4]
 801a5ca:	429a      	cmp	r2, r3
 801a5cc:	d207      	bcs.n	801a5de <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801a5ce:	187b      	adds	r3, r7, r1
 801a5d0:	781b      	ldrb	r3, [r3, #0]
 801a5d2:	4a0b      	ldr	r2, [pc, #44]	@ (801a600 <GetFskBandwidthRegValue+0x68>)
 801a5d4:	00db      	lsls	r3, r3, #3
 801a5d6:	18d3      	adds	r3, r2, r3
 801a5d8:	3304      	adds	r3, #4
 801a5da:	781b      	ldrb	r3, [r3, #0]
 801a5dc:	e00c      	b.n	801a5f8 <GetFskBandwidthRegValue+0x60>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801a5de:	210f      	movs	r1, #15
 801a5e0:	187b      	adds	r3, r7, r1
 801a5e2:	781a      	ldrb	r2, [r3, #0]
 801a5e4:	187b      	adds	r3, r7, r1
 801a5e6:	3201      	adds	r2, #1
 801a5e8:	701a      	strb	r2, [r3, #0]
 801a5ea:	230f      	movs	r3, #15
 801a5ec:	18fb      	adds	r3, r7, r3
 801a5ee:	781b      	ldrb	r3, [r3, #0]
 801a5f0:	2b14      	cmp	r3, #20
 801a5f2:	d9da      	bls.n	801a5aa <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801a5f4:	46c0      	nop			@ (mov r8, r8)
 801a5f6:	e7fd      	b.n	801a5f4 <GetFskBandwidthRegValue+0x5c>
}
 801a5f8:	0018      	movs	r0, r3
 801a5fa:	46bd      	mov	sp, r7
 801a5fc:	b004      	add	sp, #16
 801a5fe:	bd80      	pop	{r7, pc}
 801a600:	0801e6c8 	.word	0x0801e6c8

0801a604 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b084      	sub	sp, #16
 801a608:	af00      	add	r7, sp, #0
 801a60a:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801a60c:	2300      	movs	r3, #0
 801a60e:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	2b03      	cmp	r3, #3
 801a614:	d018      	beq.n	801a648 <SX1276GetLoRaBandwidthInHz+0x44>
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	2b03      	cmp	r3, #3
 801a61a:	d818      	bhi.n	801a64e <SX1276GetLoRaBandwidthInHz+0x4a>
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2b02      	cmp	r3, #2
 801a620:	d00f      	beq.n	801a642 <SX1276GetLoRaBandwidthInHz+0x3e>
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	2b02      	cmp	r3, #2
 801a626:	d812      	bhi.n	801a64e <SX1276GetLoRaBandwidthInHz+0x4a>
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d003      	beq.n	801a636 <SX1276GetLoRaBandwidthInHz+0x32>
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	2b01      	cmp	r3, #1
 801a632:	d003      	beq.n	801a63c <SX1276GetLoRaBandwidthInHz+0x38>
 801a634:	e00b      	b.n	801a64e <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801a636:	4b08      	ldr	r3, [pc, #32]	@ (801a658 <SX1276GetLoRaBandwidthInHz+0x54>)
 801a638:	60fb      	str	r3, [r7, #12]
        break;
 801a63a:	e008      	b.n	801a64e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801a63c:	4b07      	ldr	r3, [pc, #28]	@ (801a65c <SX1276GetLoRaBandwidthInHz+0x58>)
 801a63e:	60fb      	str	r3, [r7, #12]
        break;
 801a640:	e005      	b.n	801a64e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801a642:	4b07      	ldr	r3, [pc, #28]	@ (801a660 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801a644:	60fb      	str	r3, [r7, #12]
        break;
 801a646:	e002      	b.n	801a64e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801a648:	4b06      	ldr	r3, [pc, #24]	@ (801a664 <SX1276GetLoRaBandwidthInHz+0x60>)
 801a64a:	60fb      	str	r3, [r7, #12]
            break;
 801a64c:	46c0      	nop			@ (mov r8, r8)
    }

    return bandwidthInHz;
 801a64e:	68fb      	ldr	r3, [r7, #12]
}
 801a650:	0018      	movs	r0, r3
 801a652:	46bd      	mov	sp, r7
 801a654:	b004      	add	sp, #16
 801a656:	bd80      	pop	{r7, pc}
 801a658:	0001e848 	.word	0x0001e848
 801a65c:	0003d090 	.word	0x0003d090
 801a660:	0007a120 	.word	0x0007a120
 801a664:	0000f424 	.word	0x0000f424

0801a668 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801a668:	b5b0      	push	{r4, r5, r7, lr}
 801a66a:	b084      	sub	sp, #16
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	0005      	movs	r5, r0
 801a670:	000c      	movs	r4, r1
 801a672:	0010      	movs	r0, r2
 801a674:	0019      	movs	r1, r3
 801a676:	1dbb      	adds	r3, r7, #6
 801a678:	1c2a      	adds	r2, r5, #0
 801a67a:	801a      	strh	r2, [r3, #0]
 801a67c:	1d7b      	adds	r3, r7, #5
 801a67e:	1c22      	adds	r2, r4, #0
 801a680:	701a      	strb	r2, [r3, #0]
 801a682:	1d3b      	adds	r3, r7, #4
 801a684:	1c02      	adds	r2, r0, #0
 801a686:	701a      	strb	r2, [r3, #0]
 801a688:	1cfb      	adds	r3, r7, #3
 801a68a:	1c0a      	adds	r2, r1, #0
 801a68c:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801a68e:	230f      	movs	r3, #15
 801a690:	18fb      	adds	r3, r7, r3
 801a692:	2203      	movs	r2, #3
 801a694:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801a696:	1dbb      	adds	r3, r7, #6
 801a698:	881b      	ldrh	r3, [r3, #0]
 801a69a:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801a69c:	1d7b      	adds	r3, r7, #5
 801a69e:	781b      	ldrb	r3, [r3, #0]
 801a6a0:	2101      	movs	r1, #1
 801a6a2:	404b      	eors	r3, r1
 801a6a4:	b2db      	uxtb	r3, r3
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d001      	beq.n	801a6ae <SX1276GetGfskTimeOnAirNumerator+0x46>
 801a6aa:	2308      	movs	r3, #8
 801a6ac:	e000      	b.n	801a6b0 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801a6ae:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801a6b0:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801a6b2:	230f      	movs	r3, #15
 801a6b4:	18fb      	adds	r3, r7, r3
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801a6ba:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801a6bc:	1d3b      	adds	r3, r7, #4
 801a6be:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801a6c0:	1cfb      	adds	r3, r7, #3
 801a6c2:	781b      	ldrb	r3, [r3, #0]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d001      	beq.n	801a6cc <SX1276GetGfskTimeOnAirNumerator+0x64>
 801a6c8:	2302      	movs	r3, #2
 801a6ca:	e000      	b.n	801a6ce <SX1276GetGfskTimeOnAirNumerator+0x66>
 801a6cc:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801a6ce:	185b      	adds	r3, r3, r1
               ) << 3 
 801a6d0:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801a6d2:	18d3      	adds	r3, r2, r3
             );
}
 801a6d4:	0018      	movs	r0, r3
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	b004      	add	sp, #16
 801a6da:	bdb0      	pop	{r4, r5, r7, pc}

0801a6dc <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b08a      	sub	sp, #40	@ 0x28
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	60f8      	str	r0, [r7, #12]
 801a6e4:	60b9      	str	r1, [r7, #8]
 801a6e6:	0019      	movs	r1, r3
 801a6e8:	1dfb      	adds	r3, r7, #7
 801a6ea:	701a      	strb	r2, [r3, #0]
 801a6ec:	1d3b      	adds	r3, r7, #4
 801a6ee:	1c0a      	adds	r2, r1, #0
 801a6f0:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801a6f2:	1dfb      	adds	r3, r7, #7
 801a6f4:	781b      	ldrb	r3, [r3, #0]
 801a6f6:	3304      	adds	r3, #4
 801a6f8:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a6fa:	2327      	movs	r3, #39	@ 0x27
 801a6fc:	18fb      	adds	r3, r7, r3
 801a6fe:	2200      	movs	r2, #0
 801a700:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a702:	68bb      	ldr	r3, [r7, #8]
 801a704:	2b05      	cmp	r3, #5
 801a706:	d002      	beq.n	801a70e <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801a708:	68bb      	ldr	r3, [r7, #8]
 801a70a:	2b06      	cmp	r3, #6
 801a70c:	d106      	bne.n	801a71c <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801a70e:	1d3b      	adds	r3, r7, #4
 801a710:	881b      	ldrh	r3, [r3, #0]
 801a712:	2b0b      	cmp	r3, #11
 801a714:	d802      	bhi.n	801a71c <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801a716:	1d3b      	adds	r3, r7, #4
 801a718:	220c      	movs	r2, #12
 801a71a:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d105      	bne.n	801a72e <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801a722:	68bb      	ldr	r3, [r7, #8]
 801a724:	2b0b      	cmp	r3, #11
 801a726:	d008      	beq.n	801a73a <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	2b0c      	cmp	r3, #12
 801a72c:	d005      	beq.n	801a73a <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	2b01      	cmp	r3, #1
 801a732:	d106      	bne.n	801a742 <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a734:	68bb      	ldr	r3, [r7, #8]
 801a736:	2b0c      	cmp	r3, #12
 801a738:	d103      	bne.n	801a742 <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801a73a:	2327      	movs	r3, #39	@ 0x27
 801a73c:	18fb      	adds	r3, r7, r3
 801a73e:	2201      	movs	r2, #1
 801a740:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a742:	2334      	movs	r3, #52	@ 0x34
 801a744:	18fb      	adds	r3, r7, r3
 801a746:	781b      	ldrb	r3, [r3, #0]
 801a748:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a74a:	2338      	movs	r3, #56	@ 0x38
 801a74c:	18fb      	adds	r3, r7, r3
 801a74e:	781b      	ldrb	r3, [r3, #0]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d001      	beq.n	801a758 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801a754:	2310      	movs	r3, #16
 801a756:	e000      	b.n	801a75a <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801a758:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a75a:	189b      	adds	r3, r3, r2
 801a75c:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a762:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801a764:	2330      	movs	r3, #48	@ 0x30
 801a766:	18fb      	adds	r3, r7, r3
 801a768:	781b      	ldrb	r3, [r3, #0]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d001      	beq.n	801a772 <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801a76e:	2300      	movs	r3, #0
 801a770:	e000      	b.n	801a774 <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801a772:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801a774:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a776:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a778:	68bb      	ldr	r3, [r7, #8]
 801a77a:	2b06      	cmp	r3, #6
 801a77c:	d803      	bhi.n	801a786 <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801a77e:	68bb      	ldr	r3, [r7, #8]
 801a780:	009b      	lsls	r3, r3, #2
 801a782:	623b      	str	r3, [r7, #32]
 801a784:	e00f      	b.n	801a7a6 <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801a786:	69fb      	ldr	r3, [r7, #28]
 801a788:	3308      	adds	r3, #8
 801a78a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a78c:	2327      	movs	r3, #39	@ 0x27
 801a78e:	18fb      	adds	r3, r7, r3
 801a790:	781b      	ldrb	r3, [r3, #0]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d004      	beq.n	801a7a0 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	3b02      	subs	r3, #2
 801a79a:	009b      	lsls	r3, r3, #2
 801a79c:	623b      	str	r3, [r7, #32]
 801a79e:	e002      	b.n	801a7a6 <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	009b      	lsls	r3, r3, #2
 801a7a4:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a7a6:	69fb      	ldr	r3, [r7, #28]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	da01      	bge.n	801a7b0 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801a7ac:	2300      	movs	r3, #0
 801a7ae:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a7b0:	69fa      	ldr	r2, [r7, #28]
 801a7b2:	6a3b      	ldr	r3, [r7, #32]
 801a7b4:	18d3      	adds	r3, r2, r3
 801a7b6:	3b01      	subs	r3, #1
 801a7b8:	6a39      	ldr	r1, [r7, #32]
 801a7ba:	0018      	movs	r0, r3
 801a7bc:	f7e5 fd36 	bl	800022c <__divsi3>
 801a7c0:	0003      	movs	r3, r0
 801a7c2:	001a      	movs	r2, r3
 801a7c4:	697b      	ldr	r3, [r7, #20]
 801a7c6:	435a      	muls	r2, r3
 801a7c8:	1d3b      	adds	r3, r7, #4
 801a7ca:	881b      	ldrh	r3, [r3, #0]
 801a7cc:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801a7ce:	330c      	adds	r3, #12
 801a7d0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a7d2:	68bb      	ldr	r3, [r7, #8]
 801a7d4:	2b06      	cmp	r3, #6
 801a7d6:	d802      	bhi.n	801a7de <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801a7d8:	69bb      	ldr	r3, [r7, #24]
 801a7da:	3302      	adds	r3, #2
 801a7dc:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a7de:	69bb      	ldr	r3, [r7, #24]
 801a7e0:	009b      	lsls	r3, r3, #2
 801a7e2:	1c5a      	adds	r2, r3, #1
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	3b02      	subs	r3, #2
 801a7e8:	409a      	lsls	r2, r3
 801a7ea:	0013      	movs	r3, r2
}
 801a7ec:	0018      	movs	r0, r3
 801a7ee:	46bd      	mov	sp, r7
 801a7f0:	b00a      	add	sp, #40	@ 0x28
 801a7f2:	bd80      	pop	{r7, pc}

0801a7f4 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801a7f4:	b590      	push	{r4, r7, lr}
 801a7f6:	b085      	sub	sp, #20
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801a7fc:	4b4f      	ldr	r3, [pc, #316]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a7fe:	791b      	ldrb	r3, [r3, #4]
 801a800:	2b01      	cmp	r3, #1
 801a802:	d002      	beq.n	801a80a <SX1276OnTimeoutIrq+0x16>
 801a804:	2b02      	cmp	r3, #2
 801a806:	d041      	beq.n	801a88c <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801a808:	e094      	b.n	801a934 <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801a80a:	4b4c      	ldr	r3, [pc, #304]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a80c:	795b      	ldrb	r3, [r3, #5]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d12e      	bne.n	801a870 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a812:	4b4a      	ldr	r3, [pc, #296]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a814:	2230      	movs	r2, #48	@ 0x30
 801a816:	2100      	movs	r1, #0
 801a818:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a81a:	4b48      	ldr	r3, [pc, #288]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a81c:	2231      	movs	r2, #49	@ 0x31
 801a81e:	2100      	movs	r1, #0
 801a820:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a822:	4b46      	ldr	r3, [pc, #280]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a824:	2200      	movs	r2, #0
 801a826:	879a      	strh	r2, [r3, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a828:	4b44      	ldr	r3, [pc, #272]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a82a:	2200      	movs	r2, #0
 801a82c:	875a      	strh	r2, [r3, #58]	@ 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801a82e:	210b      	movs	r1, #11
 801a830:	203e      	movs	r0, #62	@ 0x3e
 801a832:	f7ff fda3 	bl	801a37c <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801a836:	2110      	movs	r1, #16
 801a838:	203f      	movs	r0, #63	@ 0x3f
 801a83a:	f7ff fd9f 	bl	801a37c <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801a83e:	4b3f      	ldr	r3, [pc, #252]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a840:	2226      	movs	r2, #38	@ 0x26
 801a842:	5c9b      	ldrb	r3, [r3, r2]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d00c      	beq.n	801a862 <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801a848:	200d      	movs	r0, #13
 801a84a:	f7ff fda8 	bl	801a39e <SX1276Read>
 801a84e:	0003      	movs	r3, r0
 801a850:	001a      	movs	r2, r3
 801a852:	2340      	movs	r3, #64	@ 0x40
 801a854:	4313      	orrs	r3, r2
 801a856:	b2db      	uxtb	r3, r3
 801a858:	0019      	movs	r1, r3
 801a85a:	200d      	movs	r0, #13
 801a85c:	f7ff fd8e 	bl	801a37c <SX1276Write>
 801a860:	e006      	b.n	801a870 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801a862:	4b36      	ldr	r3, [pc, #216]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a864:	2200      	movs	r2, #0
 801a866:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801a868:	4b35      	ldr	r3, [pc, #212]	@ (801a940 <SX1276OnTimeoutIrq+0x14c>)
 801a86a:	0018      	movs	r0, r3
 801a86c:	f001 fbf2 	bl	801c054 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a870:	4b34      	ldr	r3, [pc, #208]	@ (801a944 <SX1276OnTimeoutIrq+0x150>)
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d05a      	beq.n	801a92e <SX1276OnTimeoutIrq+0x13a>
 801a878:	4b32      	ldr	r3, [pc, #200]	@ (801a944 <SX1276OnTimeoutIrq+0x150>)
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	68db      	ldr	r3, [r3, #12]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d055      	beq.n	801a92e <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801a882:	4b30      	ldr	r3, [pc, #192]	@ (801a944 <SX1276OnTimeoutIrq+0x150>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	68db      	ldr	r3, [r3, #12]
 801a888:	4798      	blx	r3
        break;
 801a88a:	e050      	b.n	801a92e <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801a88c:	f7ff fca8 	bl	801a1e0 <SX1276Reset>
        RxChainCalibration( );
 801a890:	f7fe fa28 	bl	8018ce4 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a894:	2000      	movs	r0, #0
 801a896:	f7ff fcaa 	bl	801a1ee <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801a89a:	230f      	movs	r3, #15
 801a89c:	18fb      	adds	r3, r7, r3
 801a89e:	2200      	movs	r2, #0
 801a8a0:	701a      	strb	r2, [r3, #0]
 801a8a2:	e025      	b.n	801a8f0 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801a8a4:	240f      	movs	r4, #15
 801a8a6:	193b      	adds	r3, r7, r4
 801a8a8:	781a      	ldrb	r2, [r3, #0]
 801a8aa:	4927      	ldr	r1, [pc, #156]	@ (801a948 <SX1276OnTimeoutIrq+0x154>)
 801a8ac:	0013      	movs	r3, r2
 801a8ae:	005b      	lsls	r3, r3, #1
 801a8b0:	189b      	adds	r3, r3, r2
 801a8b2:	5c5b      	ldrb	r3, [r3, r1]
 801a8b4:	0018      	movs	r0, r3
 801a8b6:	f7ff fd07 	bl	801a2c8 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801a8ba:	193b      	adds	r3, r7, r4
 801a8bc:	781a      	ldrb	r2, [r3, #0]
 801a8be:	4922      	ldr	r1, [pc, #136]	@ (801a948 <SX1276OnTimeoutIrq+0x154>)
 801a8c0:	0013      	movs	r3, r2
 801a8c2:	005b      	lsls	r3, r3, #1
 801a8c4:	189b      	adds	r3, r3, r2
 801a8c6:	18cb      	adds	r3, r1, r3
 801a8c8:	3301      	adds	r3, #1
 801a8ca:	781b      	ldrb	r3, [r3, #0]
 801a8cc:	0018      	movs	r0, r3
 801a8ce:	193b      	adds	r3, r7, r4
 801a8d0:	781a      	ldrb	r2, [r3, #0]
 801a8d2:	491d      	ldr	r1, [pc, #116]	@ (801a948 <SX1276OnTimeoutIrq+0x154>)
 801a8d4:	0013      	movs	r3, r2
 801a8d6:	005b      	lsls	r3, r3, #1
 801a8d8:	189b      	adds	r3, r3, r2
 801a8da:	18cb      	adds	r3, r1, r3
 801a8dc:	3302      	adds	r3, #2
 801a8de:	781b      	ldrb	r3, [r3, #0]
 801a8e0:	0019      	movs	r1, r3
 801a8e2:	f7ff fd4b 	bl	801a37c <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801a8e6:	193b      	adds	r3, r7, r4
 801a8e8:	781a      	ldrb	r2, [r3, #0]
 801a8ea:	193b      	adds	r3, r7, r4
 801a8ec:	3201      	adds	r2, #1
 801a8ee:	701a      	strb	r2, [r3, #0]
 801a8f0:	230f      	movs	r3, #15
 801a8f2:	18fb      	adds	r3, r7, r3
 801a8f4:	781b      	ldrb	r3, [r3, #0]
 801a8f6:	2b0f      	cmp	r3, #15
 801a8f8:	d9d4      	bls.n	801a8a4 <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801a8fa:	2000      	movs	r0, #0
 801a8fc:	f7ff fce4 	bl	801a2c8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801a900:	4b0e      	ldr	r3, [pc, #56]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a902:	225c      	movs	r2, #92	@ 0x5c
 801a904:	5c9b      	ldrb	r3, [r3, r2]
 801a906:	0018      	movs	r0, r3
 801a908:	f7ff fe1a 	bl	801a540 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801a90c:	4b0b      	ldr	r3, [pc, #44]	@ (801a93c <SX1276OnTimeoutIrq+0x148>)
 801a90e:	2200      	movs	r2, #0
 801a910:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a912:	4b0c      	ldr	r3, [pc, #48]	@ (801a944 <SX1276OnTimeoutIrq+0x150>)
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	2b00      	cmp	r3, #0
 801a918:	d00b      	beq.n	801a932 <SX1276OnTimeoutIrq+0x13e>
 801a91a:	4b0a      	ldr	r3, [pc, #40]	@ (801a944 <SX1276OnTimeoutIrq+0x150>)
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	685b      	ldr	r3, [r3, #4]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d006      	beq.n	801a932 <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801a924:	4b07      	ldr	r3, [pc, #28]	@ (801a944 <SX1276OnTimeoutIrq+0x150>)
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	685b      	ldr	r3, [r3, #4]
 801a92a:	4798      	blx	r3
        break;
 801a92c:	e001      	b.n	801a932 <SX1276OnTimeoutIrq+0x13e>
        break;
 801a92e:	46c0      	nop			@ (mov r8, r8)
 801a930:	e000      	b.n	801a934 <SX1276OnTimeoutIrq+0x140>
        break;
 801a932:	46c0      	nop			@ (mov r8, r8)
    }
}
 801a934:	46c0      	nop			@ (mov r8, r8)
 801a936:	46bd      	mov	sp, r7
 801a938:	b005      	add	sp, #20
 801a93a:	bd90      	pop	{r4, r7, pc}
 801a93c:	20001538 	.word	0x20001538
 801a940:	200015d0 	.word	0x200015d0
 801a944:	20001434 	.word	0x20001434
 801a948:	0801e698 	.word	0x0801e698

0801a94c <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801a94c:	b5b0      	push	{r4, r5, r7, lr}
 801a94e:	b082      	sub	sp, #8
 801a950:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801a952:	1d7b      	adds	r3, r7, #5
 801a954:	2200      	movs	r2, #0
 801a956:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801a958:	4bc3      	ldr	r3, [pc, #780]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801a95a:	791b      	ldrb	r3, [r3, #4]
 801a95c:	2b01      	cmp	r3, #1
 801a95e:	d003      	beq.n	801a968 <SX1276OnDio0Irq+0x1c>
 801a960:	2b02      	cmp	r3, #2
 801a962:	d100      	bne.n	801a966 <SX1276OnDio0Irq+0x1a>
 801a964:	e1e3      	b.n	801ad2e <SX1276OnDio0Irq+0x3e2>
                }
                break;
            }
            break;
        default:
            break;
 801a966:	e200      	b.n	801ad6a <SX1276OnDio0Irq+0x41e>
            switch( SX1276.Settings.Modem )
 801a968:	4bbf      	ldr	r3, [pc, #764]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801a96a:	795b      	ldrb	r3, [r3, #5]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d003      	beq.n	801a978 <SX1276OnDio0Irq+0x2c>
 801a970:	2b01      	cmp	r3, #1
 801a972:	d100      	bne.n	801a976 <SX1276OnDio0Irq+0x2a>
 801a974:	e0e2      	b.n	801ab3c <SX1276OnDio0Irq+0x1f0>
                break;
 801a976:	e1d9      	b.n	801ad2c <SX1276OnDio0Irq+0x3e0>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801a978:	4bbb      	ldr	r3, [pc, #748]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801a97a:	2224      	movs	r2, #36	@ 0x24
 801a97c:	5c9b      	ldrb	r3, [r3, r2]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d052      	beq.n	801aa28 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801a982:	203f      	movs	r0, #63	@ 0x3f
 801a984:	f7ff fd0b 	bl	801a39e <SX1276Read>
 801a988:	0003      	movs	r3, r0
 801a98a:	001a      	movs	r2, r3
 801a98c:	1d7b      	adds	r3, r7, #5
 801a98e:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801a990:	1d7b      	adds	r3, r7, #5
 801a992:	781b      	ldrb	r3, [r3, #0]
 801a994:	b2db      	uxtb	r3, r3
 801a996:	001a      	movs	r2, r3
 801a998:	2302      	movs	r3, #2
 801a99a:	4013      	ands	r3, r2
 801a99c:	2b02      	cmp	r3, #2
 801a99e:	d043      	beq.n	801aa28 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801a9a0:	210b      	movs	r1, #11
 801a9a2:	203e      	movs	r0, #62	@ 0x3e
 801a9a4:	f7ff fcea 	bl	801a37c <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801a9a8:	2110      	movs	r1, #16
 801a9aa:	203f      	movs	r0, #63	@ 0x3f
 801a9ac:	f7ff fce6 	bl	801a37c <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801a9b0:	4bae      	ldr	r3, [pc, #696]	@ (801ac6c <SX1276OnDio0Irq+0x320>)
 801a9b2:	0018      	movs	r0, r3
 801a9b4:	f001 fb4e 	bl	801c054 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801a9b8:	4bab      	ldr	r3, [pc, #684]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801a9ba:	2226      	movs	r2, #38	@ 0x26
 801a9bc:	5c9b      	ldrb	r3, [r3, r2]
 801a9be:	2201      	movs	r2, #1
 801a9c0:	4053      	eors	r3, r2
 801a9c2:	b2db      	uxtb	r3, r3
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d007      	beq.n	801a9d8 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801a9c8:	4ba9      	ldr	r3, [pc, #676]	@ (801ac70 <SX1276OnDio0Irq+0x324>)
 801a9ca:	0018      	movs	r0, r3
 801a9cc:	f001 fb42 	bl	801c054 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801a9d0:	4ba5      	ldr	r3, [pc, #660]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	711a      	strb	r2, [r3, #4]
 801a9d6:	e00b      	b.n	801a9f0 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801a9d8:	200d      	movs	r0, #13
 801a9da:	f7ff fce0 	bl	801a39e <SX1276Read>
 801a9de:	0003      	movs	r3, r0
 801a9e0:	001a      	movs	r2, r3
 801a9e2:	2340      	movs	r3, #64	@ 0x40
 801a9e4:	4313      	orrs	r3, r2
 801a9e6:	b2db      	uxtb	r3, r3
 801a9e8:	0019      	movs	r1, r3
 801a9ea:	200d      	movs	r0, #13
 801a9ec:	f7ff fcc6 	bl	801a37c <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801a9f0:	4ba0      	ldr	r3, [pc, #640]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d008      	beq.n	801aa0a <SX1276OnDio0Irq+0xbe>
 801a9f8:	4b9e      	ldr	r3, [pc, #632]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	691b      	ldr	r3, [r3, #16]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d003      	beq.n	801aa0a <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801aa02:	4b9c      	ldr	r3, [pc, #624]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	691b      	ldr	r3, [r3, #16]
 801aa08:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801aa0a:	4b97      	ldr	r3, [pc, #604]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa0c:	2230      	movs	r2, #48	@ 0x30
 801aa0e:	2100      	movs	r1, #0
 801aa10:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801aa12:	4b95      	ldr	r3, [pc, #596]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa14:	2231      	movs	r2, #49	@ 0x31
 801aa16:	2100      	movs	r1, #0
 801aa18:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801aa1a:	4b93      	ldr	r3, [pc, #588]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801aa20:	4b91      	ldr	r3, [pc, #580]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa22:	2200      	movs	r2, #0
 801aa24:	875a      	strh	r2, [r3, #58]	@ 0x3a
                        break;
 801aa26:	e181      	b.n	801ad2c <SX1276OnDio0Irq+0x3e0>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801aa28:	4b8f      	ldr	r3, [pc, #572]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa2a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d12d      	bne.n	801aa8c <SX1276OnDio0Irq+0x140>
 801aa30:	4b8d      	ldr	r3, [pc, #564]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa32:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d129      	bne.n	801aa8c <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801aa38:	4b8b      	ldr	r3, [pc, #556]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa3a:	2222      	movs	r2, #34	@ 0x22
 801aa3c:	5c9b      	ldrb	r3, [r3, r2]
 801aa3e:	2201      	movs	r2, #1
 801aa40:	4053      	eors	r3, r2
 801aa42:	b2db      	uxtb	r3, r3
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d005      	beq.n	801aa54 <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801aa48:	4b8b      	ldr	r3, [pc, #556]	@ (801ac78 <SX1276OnDio0Irq+0x32c>)
 801aa4a:	2101      	movs	r1, #1
 801aa4c:	0018      	movs	r0, r3
 801aa4e:	f7ff fd32 	bl	801a4b6 <SX1276ReadFifo>
 801aa52:	e006      	b.n	801aa62 <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801aa54:	2032      	movs	r0, #50	@ 0x32
 801aa56:	f7ff fca2 	bl	801a39e <SX1276Read>
 801aa5a:	0003      	movs	r3, r0
 801aa5c:	001a      	movs	r2, r3
 801aa5e:	4b82      	ldr	r3, [pc, #520]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa60:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aa62:	4b81      	ldr	r3, [pc, #516]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa64:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801aa66:	001a      	movs	r2, r3
 801aa68:	4b84      	ldr	r3, [pc, #528]	@ (801ac7c <SX1276OnDio0Irq+0x330>)
 801aa6a:	18d0      	adds	r0, r2, r3
 801aa6c:	4b7e      	ldr	r3, [pc, #504]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa6e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801aa70:	b2da      	uxtb	r2, r3
 801aa72:	4b7d      	ldr	r3, [pc, #500]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa74:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801aa76:	b2db      	uxtb	r3, r3
 801aa78:	1ad3      	subs	r3, r2, r3
 801aa7a:	b2db      	uxtb	r3, r3
 801aa7c:	0019      	movs	r1, r3
 801aa7e:	f7ff fd1a 	bl	801a4b6 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aa82:	4b79      	ldr	r3, [pc, #484]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa84:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 801aa86:	4b78      	ldr	r3, [pc, #480]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa88:	879a      	strh	r2, [r3, #60]	@ 0x3c
 801aa8a:	e013      	b.n	801aab4 <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aa8c:	4b76      	ldr	r3, [pc, #472]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa8e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801aa90:	001a      	movs	r2, r3
 801aa92:	4b7a      	ldr	r3, [pc, #488]	@ (801ac7c <SX1276OnDio0Irq+0x330>)
 801aa94:	18d0      	adds	r0, r2, r3
 801aa96:	4b74      	ldr	r3, [pc, #464]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa98:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801aa9a:	b2da      	uxtb	r2, r3
 801aa9c:	4b72      	ldr	r3, [pc, #456]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aa9e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801aaa0:	b2db      	uxtb	r3, r3
 801aaa2:	1ad3      	subs	r3, r2, r3
 801aaa4:	b2db      	uxtb	r3, r3
 801aaa6:	0019      	movs	r1, r3
 801aaa8:	f7ff fd05 	bl	801a4b6 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aaac:	4b6e      	ldr	r3, [pc, #440]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aaae:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 801aab0:	4b6d      	ldr	r3, [pc, #436]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aab2:	879a      	strh	r2, [r3, #60]	@ 0x3c
                TimerStop( &RxTimeoutTimer );
 801aab4:	4b6d      	ldr	r3, [pc, #436]	@ (801ac6c <SX1276OnDio0Irq+0x320>)
 801aab6:	0018      	movs	r0, r3
 801aab8:	f001 facc 	bl	801c054 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801aabc:	4b6a      	ldr	r3, [pc, #424]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aabe:	2226      	movs	r2, #38	@ 0x26
 801aac0:	5c9b      	ldrb	r3, [r3, r2]
 801aac2:	2201      	movs	r2, #1
 801aac4:	4053      	eors	r3, r2
 801aac6:	b2db      	uxtb	r3, r3
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d007      	beq.n	801aadc <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801aacc:	4b66      	ldr	r3, [pc, #408]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801aace:	2200      	movs	r2, #0
 801aad0:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801aad2:	4b67      	ldr	r3, [pc, #412]	@ (801ac70 <SX1276OnDio0Irq+0x324>)
 801aad4:	0018      	movs	r0, r3
 801aad6:	f001 fabd 	bl	801c054 <UTIL_TIMER_Stop>
 801aada:	e00b      	b.n	801aaf4 <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801aadc:	200d      	movs	r0, #13
 801aade:	f7ff fc5e 	bl	801a39e <SX1276Read>
 801aae2:	0003      	movs	r3, r0
 801aae4:	001a      	movs	r2, r3
 801aae6:	2340      	movs	r3, #64	@ 0x40
 801aae8:	4313      	orrs	r3, r2
 801aaea:	b2db      	uxtb	r3, r3
 801aaec:	0019      	movs	r1, r3
 801aaee:	200d      	movs	r0, #13
 801aaf0:	f7ff fc44 	bl	801a37c <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801aaf4:	4b5f      	ldr	r3, [pc, #380]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d010      	beq.n	801ab1e <SX1276OnDio0Irq+0x1d2>
 801aafc:	4b5d      	ldr	r3, [pc, #372]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	689b      	ldr	r3, [r3, #8]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d00b      	beq.n	801ab1e <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801ab06:	4b5b      	ldr	r3, [pc, #364]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	689c      	ldr	r4, [r3, #8]
 801ab0c:	4b56      	ldr	r3, [pc, #344]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ab0e:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 801ab10:	4b55      	ldr	r3, [pc, #340]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ab12:	2232      	movs	r2, #50	@ 0x32
 801ab14:	569b      	ldrsb	r3, [r3, r2]
 801ab16:	001a      	movs	r2, r3
 801ab18:	4858      	ldr	r0, [pc, #352]	@ (801ac7c <SX1276OnDio0Irq+0x330>)
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801ab1e:	4b52      	ldr	r3, [pc, #328]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ab20:	2230      	movs	r2, #48	@ 0x30
 801ab22:	2100      	movs	r1, #0
 801ab24:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801ab26:	4b50      	ldr	r3, [pc, #320]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ab28:	2231      	movs	r2, #49	@ 0x31
 801ab2a:	2100      	movs	r1, #0
 801ab2c:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801ab2e:	4b4e      	ldr	r3, [pc, #312]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ab30:	2200      	movs	r2, #0
 801ab32:	879a      	strh	r2, [r3, #60]	@ 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801ab34:	4b4c      	ldr	r3, [pc, #304]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ab36:	2200      	movs	r2, #0
 801ab38:	875a      	strh	r2, [r3, #58]	@ 0x3a
                break;
 801ab3a:	e0f7      	b.n	801ad2c <SX1276OnDio0Irq+0x3e0>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801ab3c:	2140      	movs	r1, #64	@ 0x40
 801ab3e:	2012      	movs	r0, #18
 801ab40:	f7ff fc1c 	bl	801a37c <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801ab44:	2012      	movs	r0, #18
 801ab46:	f7ff fc2a 	bl	801a39e <SX1276Read>
 801ab4a:	0003      	movs	r3, r0
 801ab4c:	001a      	movs	r2, r3
 801ab4e:	1d7b      	adds	r3, r7, #5
 801ab50:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801ab52:	1d7b      	adds	r3, r7, #5
 801ab54:	781b      	ldrb	r3, [r3, #0]
 801ab56:	b2db      	uxtb	r3, r3
 801ab58:	001a      	movs	r2, r3
 801ab5a:	2320      	movs	r3, #32
 801ab5c:	4013      	ands	r3, r2
 801ab5e:	2b20      	cmp	r3, #32
 801ab60:	d122      	bne.n	801aba8 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801ab62:	2120      	movs	r1, #32
 801ab64:	2012      	movs	r0, #18
 801ab66:	f7ff fc09 	bl	801a37c <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801ab6a:	4b3f      	ldr	r3, [pc, #252]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ab6c:	2256      	movs	r2, #86	@ 0x56
 801ab6e:	5c9b      	ldrb	r3, [r3, r2]
 801ab70:	2201      	movs	r2, #1
 801ab72:	4053      	eors	r3, r2
 801ab74:	b2db      	uxtb	r3, r3
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d002      	beq.n	801ab80 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801ab7a:	4b3b      	ldr	r3, [pc, #236]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ab7c:	2200      	movs	r2, #0
 801ab7e:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801ab80:	4b3a      	ldr	r3, [pc, #232]	@ (801ac6c <SX1276OnDio0Irq+0x320>)
 801ab82:	0018      	movs	r0, r3
 801ab84:	f001 fa66 	bl	801c054 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801ab88:	4b3a      	ldr	r3, [pc, #232]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d100      	bne.n	801ab92 <SX1276OnDio0Irq+0x246>
 801ab90:	e0c9      	b.n	801ad26 <SX1276OnDio0Irq+0x3da>
 801ab92:	4b38      	ldr	r3, [pc, #224]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	691b      	ldr	r3, [r3, #16]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d100      	bne.n	801ab9e <SX1276OnDio0Irq+0x252>
 801ab9c:	e0c3      	b.n	801ad26 <SX1276OnDio0Irq+0x3da>
                            RadioEvents->RxError( );
 801ab9e:	4b35      	ldr	r3, [pc, #212]	@ (801ac74 <SX1276OnDio0Irq+0x328>)
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	691b      	ldr	r3, [r3, #16]
 801aba4:	4798      	blx	r3
                        break;
 801aba6:	e0be      	b.n	801ad26 <SX1276OnDio0Irq+0x3da>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801aba8:	2019      	movs	r0, #25
 801abaa:	f7ff fbf8 	bl	801a39e <SX1276Read>
 801abae:	0003      	movs	r3, r0
 801abb0:	b25b      	sxtb	r3, r3
 801abb2:	3302      	adds	r3, #2
 801abb4:	109b      	asrs	r3, r3, #2
 801abb6:	b259      	sxtb	r1, r3
 801abb8:	4b2b      	ldr	r3, [pc, #172]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801abba:	2260      	movs	r2, #96	@ 0x60
 801abbc:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801abbe:	201a      	movs	r0, #26
 801abc0:	f7ff fbed 	bl	801a39e <SX1276Read>
 801abc4:	0003      	movs	r3, r0
 801abc6:	001a      	movs	r2, r3
 801abc8:	1dbb      	adds	r3, r7, #6
 801abca:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801abcc:	4b26      	ldr	r3, [pc, #152]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801abce:	2260      	movs	r2, #96	@ 0x60
 801abd0:	569b      	ldrsb	r3, [r3, r2]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	da32      	bge.n	801ac3c <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801abd6:	4b24      	ldr	r3, [pc, #144]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801abd8:	689b      	ldr	r3, [r3, #8]
 801abda:	4a29      	ldr	r2, [pc, #164]	@ (801ac80 <SX1276OnDio0Irq+0x334>)
 801abdc:	4293      	cmp	r3, r2
 801abde:	d916      	bls.n	801ac0e <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801abe0:	1dbb      	adds	r3, r7, #6
 801abe2:	2200      	movs	r2, #0
 801abe4:	5e9b      	ldrsh	r3, [r3, r2]
 801abe6:	111b      	asrs	r3, r3, #4
 801abe8:	b21b      	sxth	r3, r3
 801abea:	b29a      	uxth	r2, r3
 801abec:	1dbb      	adds	r3, r7, #6
 801abee:	881b      	ldrh	r3, [r3, #0]
 801abf0:	18d3      	adds	r3, r2, r3
 801abf2:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801abf4:	4b1c      	ldr	r3, [pc, #112]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801abf6:	2160      	movs	r1, #96	@ 0x60
 801abf8:	565b      	ldrsb	r3, [r3, r1]
 801abfa:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801abfc:	18d3      	adds	r3, r2, r3
 801abfe:	b29b      	uxth	r3, r3
 801ac00:	3b9d      	subs	r3, #157	@ 0x9d
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	b219      	sxth	r1, r3
 801ac06:	4b18      	ldr	r3, [pc, #96]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ac08:	2262      	movs	r2, #98	@ 0x62
 801ac0a:	5299      	strh	r1, [r3, r2]
 801ac0c:	e04a      	b.n	801aca4 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801ac0e:	1dbb      	adds	r3, r7, #6
 801ac10:	2200      	movs	r2, #0
 801ac12:	5e9b      	ldrsh	r3, [r3, r2]
 801ac14:	111b      	asrs	r3, r3, #4
 801ac16:	b21b      	sxth	r3, r3
 801ac18:	b29a      	uxth	r2, r3
 801ac1a:	1dbb      	adds	r3, r7, #6
 801ac1c:	881b      	ldrh	r3, [r3, #0]
 801ac1e:	18d3      	adds	r3, r2, r3
 801ac20:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801ac22:	4b11      	ldr	r3, [pc, #68]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ac24:	2160      	movs	r1, #96	@ 0x60
 801ac26:	565b      	ldrsb	r3, [r3, r1]
 801ac28:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801ac2a:	18d3      	adds	r3, r2, r3
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	3ba4      	subs	r3, #164	@ 0xa4
 801ac30:	b29b      	uxth	r3, r3
 801ac32:	b219      	sxth	r1, r3
 801ac34:	4b0c      	ldr	r3, [pc, #48]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ac36:	2262      	movs	r2, #98	@ 0x62
 801ac38:	5299      	strh	r1, [r3, r2]
 801ac3a:	e033      	b.n	801aca4 <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801ac3c:	4b0a      	ldr	r3, [pc, #40]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ac3e:	689b      	ldr	r3, [r3, #8]
 801ac40:	4a0f      	ldr	r2, [pc, #60]	@ (801ac80 <SX1276OnDio0Irq+0x334>)
 801ac42:	4293      	cmp	r3, r2
 801ac44:	d91e      	bls.n	801ac84 <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801ac46:	1dbb      	adds	r3, r7, #6
 801ac48:	2200      	movs	r2, #0
 801ac4a:	5e9b      	ldrsh	r3, [r3, r2]
 801ac4c:	111b      	asrs	r3, r3, #4
 801ac4e:	b21b      	sxth	r3, r3
 801ac50:	b29a      	uxth	r2, r3
 801ac52:	1dbb      	adds	r3, r7, #6
 801ac54:	881b      	ldrh	r3, [r3, #0]
 801ac56:	18d3      	adds	r3, r2, r3
 801ac58:	b29b      	uxth	r3, r3
 801ac5a:	3b9d      	subs	r3, #157	@ 0x9d
 801ac5c:	b29b      	uxth	r3, r3
 801ac5e:	b219      	sxth	r1, r3
 801ac60:	4b01      	ldr	r3, [pc, #4]	@ (801ac68 <SX1276OnDio0Irq+0x31c>)
 801ac62:	2262      	movs	r2, #98	@ 0x62
 801ac64:	5299      	strh	r1, [r3, r2]
 801ac66:	e01d      	b.n	801aca4 <SX1276OnDio0Irq+0x358>
 801ac68:	20001538 	.word	0x20001538
 801ac6c:	200015b8 	.word	0x200015b8
 801ac70:	200015d0 	.word	0x200015d0
 801ac74:	20001434 	.word	0x20001434
 801ac78:	20001572 	.word	0x20001572
 801ac7c:	20001438 	.word	0x20001438
 801ac80:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801ac84:	1dbb      	adds	r3, r7, #6
 801ac86:	2200      	movs	r2, #0
 801ac88:	5e9b      	ldrsh	r3, [r3, r2]
 801ac8a:	111b      	asrs	r3, r3, #4
 801ac8c:	b21b      	sxth	r3, r3
 801ac8e:	b29a      	uxth	r2, r3
 801ac90:	1dbb      	adds	r3, r7, #6
 801ac92:	881b      	ldrh	r3, [r3, #0]
 801ac94:	18d3      	adds	r3, r2, r3
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	3ba4      	subs	r3, #164	@ 0xa4
 801ac9a:	b29b      	uxth	r3, r3
 801ac9c:	b219      	sxth	r1, r3
 801ac9e:	4b35      	ldr	r3, [pc, #212]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801aca0:	2262      	movs	r2, #98	@ 0x62
 801aca2:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801aca4:	2013      	movs	r0, #19
 801aca6:	f7ff fb7a 	bl	801a39e <SX1276Read>
 801acaa:	0003      	movs	r3, r0
 801acac:	0019      	movs	r1, r3
 801acae:	4b31      	ldr	r3, [pc, #196]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801acb0:	2264      	movs	r2, #100	@ 0x64
 801acb2:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801acb4:	2010      	movs	r0, #16
 801acb6:	f7ff fb72 	bl	801a39e <SX1276Read>
 801acba:	0003      	movs	r3, r0
 801acbc:	0019      	movs	r1, r3
 801acbe:	200d      	movs	r0, #13
 801acc0:	f7ff fb5c 	bl	801a37c <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801acc4:	4b2b      	ldr	r3, [pc, #172]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801acc6:	2264      	movs	r2, #100	@ 0x64
 801acc8:	5c9a      	ldrb	r2, [r3, r2]
 801acca:	4b2b      	ldr	r3, [pc, #172]	@ (801ad78 <SX1276OnDio0Irq+0x42c>)
 801accc:	0011      	movs	r1, r2
 801acce:	0018      	movs	r0, r3
 801acd0:	f7ff fbf1 	bl	801a4b6 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801acd4:	4b27      	ldr	r3, [pc, #156]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801acd6:	2256      	movs	r2, #86	@ 0x56
 801acd8:	5c9b      	ldrb	r3, [r3, r2]
 801acda:	2201      	movs	r2, #1
 801acdc:	4053      	eors	r3, r2
 801acde:	b2db      	uxtb	r3, r3
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d002      	beq.n	801acea <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801ace4:	4b23      	ldr	r3, [pc, #140]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801ace6:	2200      	movs	r2, #0
 801ace8:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801acea:	4b24      	ldr	r3, [pc, #144]	@ (801ad7c <SX1276OnDio0Irq+0x430>)
 801acec:	0018      	movs	r0, r3
 801acee:	f001 f9b1 	bl	801c054 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801acf2:	4b23      	ldr	r3, [pc, #140]	@ (801ad80 <SX1276OnDio0Irq+0x434>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d017      	beq.n	801ad2a <SX1276OnDio0Irq+0x3de>
 801acfa:	4b21      	ldr	r3, [pc, #132]	@ (801ad80 <SX1276OnDio0Irq+0x434>)
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	689b      	ldr	r3, [r3, #8]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d012      	beq.n	801ad2a <SX1276OnDio0Irq+0x3de>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801ad04:	4b1e      	ldr	r3, [pc, #120]	@ (801ad80 <SX1276OnDio0Irq+0x434>)
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	689c      	ldr	r4, [r3, #8]
 801ad0a:	4b1a      	ldr	r3, [pc, #104]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801ad0c:	2264      	movs	r2, #100	@ 0x64
 801ad0e:	5c9b      	ldrb	r3, [r3, r2]
 801ad10:	001d      	movs	r5, r3
 801ad12:	4b18      	ldr	r3, [pc, #96]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801ad14:	2262      	movs	r2, #98	@ 0x62
 801ad16:	5e9a      	ldrsh	r2, [r3, r2]
 801ad18:	4b16      	ldr	r3, [pc, #88]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801ad1a:	2160      	movs	r1, #96	@ 0x60
 801ad1c:	565b      	ldrsb	r3, [r3, r1]
 801ad1e:	4816      	ldr	r0, [pc, #88]	@ (801ad78 <SX1276OnDio0Irq+0x42c>)
 801ad20:	0029      	movs	r1, r5
 801ad22:	47a0      	blx	r4
                break;
 801ad24:	e001      	b.n	801ad2a <SX1276OnDio0Irq+0x3de>
                        break;
 801ad26:	46c0      	nop			@ (mov r8, r8)
 801ad28:	e01f      	b.n	801ad6a <SX1276OnDio0Irq+0x41e>
                break;
 801ad2a:	46c0      	nop			@ (mov r8, r8)
            break;
 801ad2c:	e01d      	b.n	801ad6a <SX1276OnDio0Irq+0x41e>
            TimerStop( &TxTimeoutTimer );
 801ad2e:	4b15      	ldr	r3, [pc, #84]	@ (801ad84 <SX1276OnDio0Irq+0x438>)
 801ad30:	0018      	movs	r0, r3
 801ad32:	f001 f98f 	bl	801c054 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801ad36:	4b0f      	ldr	r3, [pc, #60]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801ad38:	795b      	ldrb	r3, [r3, #5]
 801ad3a:	2b01      	cmp	r3, #1
 801ad3c:	d103      	bne.n	801ad46 <SX1276OnDio0Irq+0x3fa>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801ad3e:	2108      	movs	r1, #8
 801ad40:	2012      	movs	r0, #18
 801ad42:	f7ff fb1b 	bl	801a37c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801ad46:	4b0b      	ldr	r3, [pc, #44]	@ (801ad74 <SX1276OnDio0Irq+0x428>)
 801ad48:	2200      	movs	r2, #0
 801ad4a:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801ad4c:	4b0c      	ldr	r3, [pc, #48]	@ (801ad80 <SX1276OnDio0Irq+0x434>)
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d008      	beq.n	801ad66 <SX1276OnDio0Irq+0x41a>
 801ad54:	4b0a      	ldr	r3, [pc, #40]	@ (801ad80 <SX1276OnDio0Irq+0x434>)
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d003      	beq.n	801ad66 <SX1276OnDio0Irq+0x41a>
                    RadioEvents->TxDone( );
 801ad5e:	4b08      	ldr	r3, [pc, #32]	@ (801ad80 <SX1276OnDio0Irq+0x434>)
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	4798      	blx	r3
                break;
 801ad66:	46c0      	nop			@ (mov r8, r8)
            break;
 801ad68:	46c0      	nop			@ (mov r8, r8)
    }
}
 801ad6a:	46c0      	nop			@ (mov r8, r8)
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	b002      	add	sp, #8
 801ad70:	bdb0      	pop	{r4, r5, r7, pc}
 801ad72:	46c0      	nop			@ (mov r8, r8)
 801ad74:	20001538 	.word	0x20001538
 801ad78:	20001438 	.word	0x20001438
 801ad7c:	200015b8 	.word	0x200015b8
 801ad80:	20001434 	.word	0x20001434
 801ad84:	200015a0 	.word	0x200015a0

0801ad88 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801ad8c:	4b6b      	ldr	r3, [pc, #428]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ad8e:	791b      	ldrb	r3, [r3, #4]
 801ad90:	2b01      	cmp	r3, #1
 801ad92:	d003      	beq.n	801ad9c <SX1276OnDio1Irq+0x14>
 801ad94:	2b02      	cmp	r3, #2
 801ad96:	d100      	bne.n	801ad9a <SX1276OnDio1Irq+0x12>
 801ad98:	e08a      	b.n	801aeb0 <SX1276OnDio1Irq+0x128>
            default:
                break;
            }
            break;
        default:
            break;
 801ad9a:	e0cc      	b.n	801af36 <SX1276OnDio1Irq+0x1ae>
            switch( SX1276.Settings.Modem )
 801ad9c:	4b67      	ldr	r3, [pc, #412]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ad9e:	795b      	ldrb	r3, [r3, #5]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d002      	beq.n	801adaa <SX1276OnDio1Irq+0x22>
 801ada4:	2b01      	cmp	r3, #1
 801ada6:	d060      	beq.n	801ae6a <SX1276OnDio1Irq+0xe2>
                break;
 801ada8:	e081      	b.n	801aeae <SX1276OnDio1Irq+0x126>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801adaa:	f7ea fe39 	bl	8005a20 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801adae:	1e03      	subs	r3, r0, #0
 801adb0:	d100      	bne.n	801adb4 <SX1276OnDio1Irq+0x2c>
 801adb2:	e077      	b.n	801aea4 <SX1276OnDio1Irq+0x11c>
                TimerStop( &RxTimeoutSyncWord );
 801adb4:	4b62      	ldr	r3, [pc, #392]	@ (801af40 <SX1276OnDio1Irq+0x1b8>)
 801adb6:	0018      	movs	r0, r3
 801adb8:	f001 f94c 	bl	801c054 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801adbc:	4b5f      	ldr	r3, [pc, #380]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801adbe:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d118      	bne.n	801adf6 <SX1276OnDio1Irq+0x6e>
 801adc4:	4b5d      	ldr	r3, [pc, #372]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801adc6:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d114      	bne.n	801adf6 <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801adcc:	4b5b      	ldr	r3, [pc, #364]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801adce:	2222      	movs	r2, #34	@ 0x22
 801add0:	5c9b      	ldrb	r3, [r3, r2]
 801add2:	2201      	movs	r2, #1
 801add4:	4053      	eors	r3, r2
 801add6:	b2db      	uxtb	r3, r3
 801add8:	2b00      	cmp	r3, #0
 801adda:	d005      	beq.n	801ade8 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801addc:	4b59      	ldr	r3, [pc, #356]	@ (801af44 <SX1276OnDio1Irq+0x1bc>)
 801adde:	2101      	movs	r1, #1
 801ade0:	0018      	movs	r0, r3
 801ade2:	f7ff fb68 	bl	801a4b6 <SX1276ReadFifo>
 801ade6:	e006      	b.n	801adf6 <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801ade8:	2032      	movs	r0, #50	@ 0x32
 801adea:	f7ff fad8 	bl	801a39e <SX1276Read>
 801adee:	0003      	movs	r3, r0
 801adf0:	001a      	movs	r2, r3
 801adf2:	4b52      	ldr	r3, [pc, #328]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801adf4:	875a      	strh	r2, [r3, #58]	@ 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801adf6:	4b51      	ldr	r3, [pc, #324]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801adf8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801adfa:	001a      	movs	r2, r3
 801adfc:	4b4f      	ldr	r3, [pc, #316]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801adfe:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ae00:	1ad3      	subs	r3, r2, r3
 801ae02:	4a4e      	ldr	r2, [pc, #312]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae04:	213e      	movs	r1, #62	@ 0x3e
 801ae06:	5c52      	ldrb	r2, [r2, r1]
 801ae08:	4293      	cmp	r3, r2
 801ae0a:	db19      	blt.n	801ae40 <SX1276OnDio1Irq+0xb8>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801ae0c:	4b4b      	ldr	r3, [pc, #300]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae0e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ae10:	001a      	movs	r2, r3
 801ae12:	4b4d      	ldr	r3, [pc, #308]	@ (801af48 <SX1276OnDio1Irq+0x1c0>)
 801ae14:	18d2      	adds	r2, r2, r3
 801ae16:	4b49      	ldr	r3, [pc, #292]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae18:	213e      	movs	r1, #62	@ 0x3e
 801ae1a:	5c5b      	ldrb	r3, [r3, r1]
 801ae1c:	3b01      	subs	r3, #1
 801ae1e:	b2db      	uxtb	r3, r3
 801ae20:	0019      	movs	r1, r3
 801ae22:	0010      	movs	r0, r2
 801ae24:	f7ff fb47 	bl	801a4b6 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801ae28:	4b44      	ldr	r3, [pc, #272]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae2a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ae2c:	4a43      	ldr	r2, [pc, #268]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae2e:	213e      	movs	r1, #62	@ 0x3e
 801ae30:	5c52      	ldrb	r2, [r2, r1]
 801ae32:	189b      	adds	r3, r3, r2
 801ae34:	b29b      	uxth	r3, r3
 801ae36:	3b01      	subs	r3, #1
 801ae38:	b29a      	uxth	r2, r3
 801ae3a:	4b40      	ldr	r3, [pc, #256]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 801ae3e:	e036      	b.n	801aeae <SX1276OnDio1Irq+0x126>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801ae40:	4b3e      	ldr	r3, [pc, #248]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae42:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ae44:	001a      	movs	r2, r3
 801ae46:	4b40      	ldr	r3, [pc, #256]	@ (801af48 <SX1276OnDio1Irq+0x1c0>)
 801ae48:	18d0      	adds	r0, r2, r3
 801ae4a:	4b3c      	ldr	r3, [pc, #240]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae4c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801ae4e:	b2da      	uxtb	r2, r3
 801ae50:	4b3a      	ldr	r3, [pc, #232]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae52:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ae54:	b2db      	uxtb	r3, r3
 801ae56:	1ad3      	subs	r3, r2, r3
 801ae58:	b2db      	uxtb	r3, r3
 801ae5a:	0019      	movs	r1, r3
 801ae5c:	f7ff fb2b 	bl	801a4b6 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801ae60:	4b36      	ldr	r3, [pc, #216]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae62:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 801ae64:	4b35      	ldr	r3, [pc, #212]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae66:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 801ae68:	e021      	b.n	801aeae <SX1276OnDio1Irq+0x126>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801ae6a:	f7ea fdd9 	bl	8005a20 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801ae6e:	1e03      	subs	r3, r0, #0
 801ae70:	d01a      	beq.n	801aea8 <SX1276OnDio1Irq+0x120>
                TimerStop( &RxTimeoutTimer );
 801ae72:	4b36      	ldr	r3, [pc, #216]	@ (801af4c <SX1276OnDio1Irq+0x1c4>)
 801ae74:	0018      	movs	r0, r3
 801ae76:	f001 f8ed 	bl	801c054 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801ae7a:	2180      	movs	r1, #128	@ 0x80
 801ae7c:	2012      	movs	r0, #18
 801ae7e:	f7ff fa7d 	bl	801a37c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801ae82:	4b2e      	ldr	r3, [pc, #184]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801ae84:	2200      	movs	r2, #0
 801ae86:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ae88:	4b31      	ldr	r3, [pc, #196]	@ (801af50 <SX1276OnDio1Irq+0x1c8>)
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d00d      	beq.n	801aeac <SX1276OnDio1Irq+0x124>
 801ae90:	4b2f      	ldr	r3, [pc, #188]	@ (801af50 <SX1276OnDio1Irq+0x1c8>)
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	68db      	ldr	r3, [r3, #12]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d008      	beq.n	801aeac <SX1276OnDio1Irq+0x124>
                    RadioEvents->RxTimeout( );
 801ae9a:	4b2d      	ldr	r3, [pc, #180]	@ (801af50 <SX1276OnDio1Irq+0x1c8>)
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	68db      	ldr	r3, [r3, #12]
 801aea0:	4798      	blx	r3
                break;
 801aea2:	e003      	b.n	801aeac <SX1276OnDio1Irq+0x124>
                    break;
 801aea4:	46c0      	nop			@ (mov r8, r8)
 801aea6:	e046      	b.n	801af36 <SX1276OnDio1Irq+0x1ae>
                    break;
 801aea8:	46c0      	nop			@ (mov r8, r8)
 801aeaa:	e044      	b.n	801af36 <SX1276OnDio1Irq+0x1ae>
                break;
 801aeac:	46c0      	nop			@ (mov r8, r8)
            break;
 801aeae:	e042      	b.n	801af36 <SX1276OnDio1Irq+0x1ae>
            switch( SX1276.Settings.Modem )
 801aeb0:	4b22      	ldr	r3, [pc, #136]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801aeb2:	795b      	ldrb	r3, [r3, #5]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d13a      	bne.n	801af2e <SX1276OnDio1Irq+0x1a6>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801aeb8:	f7ea fdb2 	bl	8005a20 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801aebc:	0003      	movs	r3, r0
 801aebe:	2b01      	cmp	r3, #1
 801aec0:	d037      	beq.n	801af32 <SX1276OnDio1Irq+0x1aa>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801aec2:	4b1e      	ldr	r3, [pc, #120]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801aec4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801aec6:	001a      	movs	r2, r3
 801aec8:	4b1c      	ldr	r3, [pc, #112]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801aeca:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801aecc:	1ad3      	subs	r3, r2, r3
 801aece:	4a1b      	ldr	r2, [pc, #108]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801aed0:	213f      	movs	r1, #63	@ 0x3f
 801aed2:	5c52      	ldrb	r2, [r2, r1]
 801aed4:	4293      	cmp	r3, r2
 801aed6:	dd15      	ble.n	801af04 <SX1276OnDio1Irq+0x17c>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801aed8:	4b18      	ldr	r3, [pc, #96]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801aeda:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801aedc:	001a      	movs	r2, r3
 801aede:	4b1a      	ldr	r3, [pc, #104]	@ (801af48 <SX1276OnDio1Irq+0x1c0>)
 801aee0:	18d2      	adds	r2, r2, r3
 801aee2:	4b16      	ldr	r3, [pc, #88]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801aee4:	213f      	movs	r1, #63	@ 0x3f
 801aee6:	5c5b      	ldrb	r3, [r3, r1]
 801aee8:	0019      	movs	r1, r3
 801aeea:	0010      	movs	r0, r2
 801aeec:	f7ff fad1 	bl	801a492 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801aef0:	4b12      	ldr	r3, [pc, #72]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801aef2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801aef4:	4a11      	ldr	r2, [pc, #68]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801aef6:	213f      	movs	r1, #63	@ 0x3f
 801aef8:	5c52      	ldrb	r2, [r2, r1]
 801aefa:	189b      	adds	r3, r3, r2
 801aefc:	b29a      	uxth	r2, r3
 801aefe:	4b0f      	ldr	r3, [pc, #60]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801af00:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 801af02:	e017      	b.n	801af34 <SX1276OnDio1Irq+0x1ac>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801af04:	4b0d      	ldr	r3, [pc, #52]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801af06:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801af08:	001a      	movs	r2, r3
 801af0a:	4b0f      	ldr	r3, [pc, #60]	@ (801af48 <SX1276OnDio1Irq+0x1c0>)
 801af0c:	18d0      	adds	r0, r2, r3
 801af0e:	4b0b      	ldr	r3, [pc, #44]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801af10:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801af12:	b2da      	uxtb	r2, r3
 801af14:	4b09      	ldr	r3, [pc, #36]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801af16:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801af18:	b2db      	uxtb	r3, r3
 801af1a:	1ad3      	subs	r3, r2, r3
 801af1c:	b2db      	uxtb	r3, r3
 801af1e:	0019      	movs	r1, r3
 801af20:	f7ff fab7 	bl	801a492 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801af24:	4b05      	ldr	r3, [pc, #20]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801af26:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 801af28:	4b04      	ldr	r3, [pc, #16]	@ (801af3c <SX1276OnDio1Irq+0x1b4>)
 801af2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
                break;
 801af2c:	e002      	b.n	801af34 <SX1276OnDio1Irq+0x1ac>
                break;
 801af2e:	46c0      	nop			@ (mov r8, r8)
 801af30:	e000      	b.n	801af34 <SX1276OnDio1Irq+0x1ac>
                    break;
 801af32:	46c0      	nop			@ (mov r8, r8)
            break;
 801af34:	46c0      	nop			@ (mov r8, r8)
    }
}
 801af36:	46c0      	nop			@ (mov r8, r8)
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	20001538 	.word	0x20001538
 801af40:	200015d0 	.word	0x200015d0
 801af44:	20001572 	.word	0x20001572
 801af48:	20001438 	.word	0x20001438
 801af4c:	200015b8 	.word	0x200015b8
 801af50:	20001434 	.word	0x20001434

0801af54 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801af54:	b590      	push	{r4, r7, lr}
 801af56:	b085      	sub	sp, #20
 801af58:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801af5a:	2300      	movs	r3, #0
 801af5c:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801af5e:	4b5d      	ldr	r3, [pc, #372]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801af60:	791b      	ldrb	r3, [r3, #4]
 801af62:	2b01      	cmp	r3, #1
 801af64:	d003      	beq.n	801af6e <SX1276OnDio2Irq+0x1a>
 801af66:	2b02      	cmp	r3, #2
 801af68:	d100      	bne.n	801af6c <SX1276OnDio2Irq+0x18>
 801af6a:	e083      	b.n	801b074 <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801af6c:	e0ae      	b.n	801b0cc <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801af6e:	4b59      	ldr	r3, [pc, #356]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801af70:	795b      	ldrb	r3, [r3, #5]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d002      	beq.n	801af7c <SX1276OnDio2Irq+0x28>
 801af76:	2b01      	cmp	r3, #1
 801af78:	d058      	beq.n	801b02c <SX1276OnDio2Irq+0xd8>
                break;
 801af7a:	e07a      	b.n	801b072 <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801af7c:	4b55      	ldr	r3, [pc, #340]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801af7e:	2230      	movs	r2, #48	@ 0x30
 801af80:	2101      	movs	r1, #1
 801af82:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801af84:	4b53      	ldr	r3, [pc, #332]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801af86:	2230      	movs	r2, #48	@ 0x30
 801af88:	5c9b      	ldrb	r3, [r3, r2]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d06e      	beq.n	801b06c <SX1276OnDio2Irq+0x118>
 801af8e:	4b51      	ldr	r3, [pc, #324]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801af90:	2231      	movs	r2, #49	@ 0x31
 801af92:	5c9b      	ldrb	r3, [r3, r2]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d169      	bne.n	801b06c <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801af98:	4b4f      	ldr	r3, [pc, #316]	@ (801b0d8 <SX1276OnDio2Irq+0x184>)
 801af9a:	0018      	movs	r0, r3
 801af9c:	f001 f85a 	bl	801c054 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801afa0:	4b4c      	ldr	r3, [pc, #304]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801afa2:	2231      	movs	r2, #49	@ 0x31
 801afa4:	2101      	movs	r1, #1
 801afa6:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801afa8:	2011      	movs	r0, #17
 801afaa:	f7ff f9f8 	bl	801a39e <SX1276Read>
 801afae:	0003      	movs	r3, r0
 801afb0:	085b      	lsrs	r3, r3, #1
 801afb2:	b2db      	uxtb	r3, r3
 801afb4:	425b      	negs	r3, r3
 801afb6:	b2db      	uxtb	r3, r3
 801afb8:	b259      	sxtb	r1, r3
 801afba:	4b46      	ldr	r3, [pc, #280]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801afbc:	2232      	movs	r2, #50	@ 0x32
 801afbe:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801afc0:	201b      	movs	r0, #27
 801afc2:	f7ff f9ec 	bl	801a39e <SX1276Read>
 801afc6:	0003      	movs	r3, r0
 801afc8:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801afca:	201c      	movs	r0, #28
 801afcc:	f7ff f9e7 	bl	801a39e <SX1276Read>
 801afd0:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801afd2:	4323      	orrs	r3, r4
 801afd4:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	0a1b      	lsrs	r3, r3, #8
 801afda:	60bb      	str	r3, [r7, #8]
 801afdc:	68bb      	ldr	r3, [r7, #8]
 801afde:	021b      	lsls	r3, r3, #8
 801afe0:	68fa      	ldr	r2, [r7, #12]
 801afe2:	1ad3      	subs	r3, r2, r3
 801afe4:	607b      	str	r3, [r7, #4]
 801afe6:	68b9      	ldr	r1, [r7, #8]
 801afe8:	000b      	movs	r3, r1
 801afea:	015b      	lsls	r3, r3, #5
 801afec:	1a5b      	subs	r3, r3, r1
 801afee:	019a      	lsls	r2, r3, #6
 801aff0:	1ad2      	subs	r2, r2, r3
 801aff2:	00d2      	lsls	r2, r2, #3
 801aff4:	1850      	adds	r0, r2, r1
 801aff6:	6879      	ldr	r1, [r7, #4]
 801aff8:	000b      	movs	r3, r1
 801affa:	015b      	lsls	r3, r3, #5
 801affc:	1a5b      	subs	r3, r3, r1
 801affe:	019a      	lsls	r2, r3, #6
 801b000:	1ad2      	subs	r2, r2, r3
 801b002:	00d2      	lsls	r2, r2, #3
 801b004:	1853      	adds	r3, r2, r1
 801b006:	3380      	adds	r3, #128	@ 0x80
 801b008:	0a1b      	lsrs	r3, r3, #8
 801b00a:	18c3      	adds	r3, r0, r3
 801b00c:	001a      	movs	r2, r3
 801b00e:	4b31      	ldr	r3, [pc, #196]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801b010:	635a      	str	r2, [r3, #52]	@ 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801b012:	200c      	movs	r0, #12
 801b014:	f7ff f9c3 	bl	801a39e <SX1276Read>
 801b018:	0003      	movs	r3, r0
 801b01a:	095b      	lsrs	r3, r3, #5
 801b01c:	b2db      	uxtb	r3, r3
 801b01e:	2207      	movs	r2, #7
 801b020:	4013      	ands	r3, r2
 801b022:	b2d9      	uxtb	r1, r3
 801b024:	4b2b      	ldr	r3, [pc, #172]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801b026:	2238      	movs	r2, #56	@ 0x38
 801b028:	5499      	strb	r1, [r3, r2]
                break;
 801b02a:	e01f      	b.n	801b06c <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b02c:	4b29      	ldr	r3, [pc, #164]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801b02e:	2253      	movs	r2, #83	@ 0x53
 801b030:	5c9b      	ldrb	r3, [r3, r2]
 801b032:	2b00      	cmp	r3, #0
 801b034:	d01c      	beq.n	801b070 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801b036:	2102      	movs	r1, #2
 801b038:	2012      	movs	r0, #18
 801b03a:	f7ff f99f 	bl	801a37c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801b03e:	4b27      	ldr	r3, [pc, #156]	@ (801b0dc <SX1276OnDio2Irq+0x188>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d014      	beq.n	801b070 <SX1276OnDio2Irq+0x11c>
 801b046:	4b25      	ldr	r3, [pc, #148]	@ (801b0dc <SX1276OnDio2Irq+0x188>)
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	695b      	ldr	r3, [r3, #20]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d00f      	beq.n	801b070 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801b050:	4b22      	ldr	r3, [pc, #136]	@ (801b0dc <SX1276OnDio2Irq+0x188>)
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	695c      	ldr	r4, [r3, #20]
 801b056:	201c      	movs	r0, #28
 801b058:	f7ff f9a1 	bl	801a39e <SX1276Read>
 801b05c:	0003      	movs	r3, r0
 801b05e:	001a      	movs	r2, r3
 801b060:	233f      	movs	r3, #63	@ 0x3f
 801b062:	4013      	ands	r3, r2
 801b064:	b2db      	uxtb	r3, r3
 801b066:	0018      	movs	r0, r3
 801b068:	47a0      	blx	r4
                break;
 801b06a:	e001      	b.n	801b070 <SX1276OnDio2Irq+0x11c>
                break;
 801b06c:	46c0      	nop			@ (mov r8, r8)
 801b06e:	e02d      	b.n	801b0cc <SX1276OnDio2Irq+0x178>
                break;
 801b070:	46c0      	nop			@ (mov r8, r8)
            break;
 801b072:	e02b      	b.n	801b0cc <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801b074:	4b17      	ldr	r3, [pc, #92]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801b076:	795b      	ldrb	r3, [r3, #5]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d021      	beq.n	801b0c0 <SX1276OnDio2Irq+0x16c>
 801b07c:	2b01      	cmp	r3, #1
 801b07e:	d121      	bne.n	801b0c4 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b080:	4b14      	ldr	r3, [pc, #80]	@ (801b0d4 <SX1276OnDio2Irq+0x180>)
 801b082:	2253      	movs	r2, #83	@ 0x53
 801b084:	5c9b      	ldrb	r3, [r3, r2]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d01e      	beq.n	801b0c8 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801b08a:	2102      	movs	r1, #2
 801b08c:	2012      	movs	r0, #18
 801b08e:	f7ff f975 	bl	801a37c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801b092:	4b12      	ldr	r3, [pc, #72]	@ (801b0dc <SX1276OnDio2Irq+0x188>)
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d016      	beq.n	801b0c8 <SX1276OnDio2Irq+0x174>
 801b09a:	4b10      	ldr	r3, [pc, #64]	@ (801b0dc <SX1276OnDio2Irq+0x188>)
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	695b      	ldr	r3, [r3, #20]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d011      	beq.n	801b0c8 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801b0a4:	4b0d      	ldr	r3, [pc, #52]	@ (801b0dc <SX1276OnDio2Irq+0x188>)
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	695c      	ldr	r4, [r3, #20]
 801b0aa:	201c      	movs	r0, #28
 801b0ac:	f7ff f977 	bl	801a39e <SX1276Read>
 801b0b0:	0003      	movs	r3, r0
 801b0b2:	001a      	movs	r2, r3
 801b0b4:	233f      	movs	r3, #63	@ 0x3f
 801b0b6:	4013      	ands	r3, r2
 801b0b8:	b2db      	uxtb	r3, r3
 801b0ba:	0018      	movs	r0, r3
 801b0bc:	47a0      	blx	r4
                break;
 801b0be:	e003      	b.n	801b0c8 <SX1276OnDio2Irq+0x174>
                break;
 801b0c0:	46c0      	nop			@ (mov r8, r8)
 801b0c2:	e002      	b.n	801b0ca <SX1276OnDio2Irq+0x176>
                break;
 801b0c4:	46c0      	nop			@ (mov r8, r8)
 801b0c6:	e000      	b.n	801b0ca <SX1276OnDio2Irq+0x176>
                break;
 801b0c8:	46c0      	nop			@ (mov r8, r8)
            break;
 801b0ca:	46c0      	nop			@ (mov r8, r8)
    }
}
 801b0cc:	46c0      	nop			@ (mov r8, r8)
 801b0ce:	46bd      	mov	sp, r7
 801b0d0:	b005      	add	sp, #20
 801b0d2:	bd90      	pop	{r4, r7, pc}
 801b0d4:	20001538 	.word	0x20001538
 801b0d8:	200015d0 	.word	0x200015d0
 801b0dc:	20001434 	.word	0x20001434

0801b0e0 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b0e4:	4b1d      	ldr	r3, [pc, #116]	@ (801b15c <SX1276OnDio3Irq+0x7c>)
 801b0e6:	795b      	ldrb	r3, [r3, #5]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d031      	beq.n	801b150 <SX1276OnDio3Irq+0x70>
 801b0ec:	2b01      	cmp	r3, #1
 801b0ee:	d000      	beq.n	801b0f2 <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801b0f0:	e031      	b.n	801b156 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801b0f2:	2012      	movs	r0, #18
 801b0f4:	f7ff f953 	bl	801a39e <SX1276Read>
 801b0f8:	0003      	movs	r3, r0
 801b0fa:	001a      	movs	r2, r3
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	4013      	ands	r3, r2
 801b100:	2b01      	cmp	r3, #1
 801b102:	d112      	bne.n	801b12a <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801b104:	2105      	movs	r1, #5
 801b106:	2012      	movs	r0, #18
 801b108:	f7ff f938 	bl	801a37c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b10c:	4b14      	ldr	r3, [pc, #80]	@ (801b160 <SX1276OnDio3Irq+0x80>)
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	2b00      	cmp	r3, #0
 801b112:	d01f      	beq.n	801b154 <SX1276OnDio3Irq+0x74>
 801b114:	4b12      	ldr	r3, [pc, #72]	@ (801b160 <SX1276OnDio3Irq+0x80>)
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	699b      	ldr	r3, [r3, #24]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d01a      	beq.n	801b154 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801b11e:	4b10      	ldr	r3, [pc, #64]	@ (801b160 <SX1276OnDio3Irq+0x80>)
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	699b      	ldr	r3, [r3, #24]
 801b124:	2001      	movs	r0, #1
 801b126:	4798      	blx	r3
        break;
 801b128:	e014      	b.n	801b154 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801b12a:	2104      	movs	r1, #4
 801b12c:	2012      	movs	r0, #18
 801b12e:	f7ff f925 	bl	801a37c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b132:	4b0b      	ldr	r3, [pc, #44]	@ (801b160 <SX1276OnDio3Irq+0x80>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d00c      	beq.n	801b154 <SX1276OnDio3Irq+0x74>
 801b13a:	4b09      	ldr	r3, [pc, #36]	@ (801b160 <SX1276OnDio3Irq+0x80>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	699b      	ldr	r3, [r3, #24]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d007      	beq.n	801b154 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801b144:	4b06      	ldr	r3, [pc, #24]	@ (801b160 <SX1276OnDio3Irq+0x80>)
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	699b      	ldr	r3, [r3, #24]
 801b14a:	2000      	movs	r0, #0
 801b14c:	4798      	blx	r3
        break;
 801b14e:	e001      	b.n	801b154 <SX1276OnDio3Irq+0x74>
        break;
 801b150:	46c0      	nop			@ (mov r8, r8)
 801b152:	e000      	b.n	801b156 <SX1276OnDio3Irq+0x76>
        break;
 801b154:	46c0      	nop			@ (mov r8, r8)
    }
}
 801b156:	46c0      	nop			@ (mov r8, r8)
 801b158:	46bd      	mov	sp, r7
 801b15a:	bd80      	pop	{r7, pc}
 801b15c:	20001538 	.word	0x20001538
 801b160:	20001434 	.word	0x20001434

0801b164 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801b164:	b580      	push	{r7, lr}
 801b166:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b168:	4b0b      	ldr	r3, [pc, #44]	@ (801b198 <SX1276OnDio4Irq+0x34>)
 801b16a:	795b      	ldrb	r3, [r3, #5]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d002      	beq.n	801b176 <SX1276OnDio4Irq+0x12>
 801b170:	2b01      	cmp	r3, #1
 801b172:	d00a      	beq.n	801b18a <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801b174:	e00c      	b.n	801b190 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801b176:	4b08      	ldr	r3, [pc, #32]	@ (801b198 <SX1276OnDio4Irq+0x34>)
 801b178:	2230      	movs	r2, #48	@ 0x30
 801b17a:	5c9b      	ldrb	r3, [r3, r2]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d106      	bne.n	801b18e <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801b180:	4b05      	ldr	r3, [pc, #20]	@ (801b198 <SX1276OnDio4Irq+0x34>)
 801b182:	2230      	movs	r2, #48	@ 0x30
 801b184:	2101      	movs	r1, #1
 801b186:	5499      	strb	r1, [r3, r2]
        break;
 801b188:	e001      	b.n	801b18e <SX1276OnDio4Irq+0x2a>
        break;
 801b18a:	46c0      	nop			@ (mov r8, r8)
 801b18c:	e000      	b.n	801b190 <SX1276OnDio4Irq+0x2c>
        break;
 801b18e:	46c0      	nop			@ (mov r8, r8)
    }
}
 801b190:	46c0      	nop			@ (mov r8, r8)
 801b192:	46bd      	mov	sp, r7
 801b194:	bd80      	pop	{r7, pc}
 801b196:	46c0      	nop			@ (mov r8, r8)
 801b198:	20001538 	.word	0x20001538

0801b19c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b1a0:	4b0a      	ldr	r3, [pc, #40]	@ (801b1cc <UTIL_ADV_TRACE_Init+0x30>)
 801b1a2:	2218      	movs	r2, #24
 801b1a4:	2100      	movs	r1, #0
 801b1a6:	0018      	movs	r0, r3
 801b1a8:	f000 fbb8 	bl	801b91c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b1ac:	2380      	movs	r3, #128	@ 0x80
 801b1ae:	009a      	lsls	r2, r3, #2
 801b1b0:	4b07      	ldr	r3, [pc, #28]	@ (801b1d0 <UTIL_ADV_TRACE_Init+0x34>)
 801b1b2:	2100      	movs	r1, #0
 801b1b4:	0018      	movs	r0, r3
 801b1b6:	f000 fbb1 	bl	801b91c <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b1ba:	4b06      	ldr	r3, [pc, #24]	@ (801b1d4 <UTIL_ADV_TRACE_Init+0x38>)
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	4a06      	ldr	r2, [pc, #24]	@ (801b1d8 <UTIL_ADV_TRACE_Init+0x3c>)
 801b1c0:	0010      	movs	r0, r2
 801b1c2:	4798      	blx	r3
 801b1c4:	0003      	movs	r3, r0
}
 801b1c6:	0018      	movs	r0, r3
 801b1c8:	46bd      	mov	sp, r7
 801b1ca:	bd80      	pop	{r7, pc}
 801b1cc:	200015e8 	.word	0x200015e8
 801b1d0:	20001600 	.word	0x20001600
 801b1d4:	0801da5c 	.word	0x0801da5c
 801b1d8:	0801b45d 	.word	0x0801b45d

0801b1dc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b1dc:	b408      	push	{r3}
 801b1de:	b590      	push	{r4, r7, lr}
 801b1e0:	b08c      	sub	sp, #48	@ 0x30
 801b1e2:	af00      	add	r7, sp, #0
 801b1e4:	60f8      	str	r0, [r7, #12]
 801b1e6:	60b9      	str	r1, [r7, #8]
 801b1e8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b1ea:	2316      	movs	r3, #22
 801b1ec:	18fb      	adds	r3, r7, r3
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b1f2:	232c      	movs	r3, #44	@ 0x2c
 801b1f4:	18fb      	adds	r3, r7, r3
 801b1f6:	2200      	movs	r2, #0
 801b1f8:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b1fa:	4b41      	ldr	r3, [pc, #260]	@ (801b300 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b1fc:	7a1b      	ldrb	r3, [r3, #8]
 801b1fe:	001a      	movs	r2, r3
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	4293      	cmp	r3, r2
 801b204:	d902      	bls.n	801b20c <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b206:	2305      	movs	r3, #5
 801b208:	425b      	negs	r3, r3
 801b20a:	e072      	b.n	801b2f2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b20c:	4b3c      	ldr	r3, [pc, #240]	@ (801b300 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b20e:	68db      	ldr	r3, [r3, #12]
 801b210:	68ba      	ldr	r2, [r7, #8]
 801b212:	4013      	ands	r3, r2
 801b214:	68ba      	ldr	r2, [r7, #8]
 801b216:	429a      	cmp	r2, r3
 801b218:	d002      	beq.n	801b220 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b21a:	2306      	movs	r3, #6
 801b21c:	425b      	negs	r3, r3
 801b21e:	e068      	b.n	801b2f2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b220:	4b37      	ldr	r3, [pc, #220]	@ (801b300 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b222:	685b      	ldr	r3, [r3, #4]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d00a      	beq.n	801b23e <UTIL_ADV_TRACE_COND_FSend+0x62>
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d007      	beq.n	801b23e <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b22e:	4b34      	ldr	r3, [pc, #208]	@ (801b300 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b230:	685b      	ldr	r3, [r3, #4]
 801b232:	2216      	movs	r2, #22
 801b234:	18b9      	adds	r1, r7, r2
 801b236:	2218      	movs	r2, #24
 801b238:	18ba      	adds	r2, r7, r2
 801b23a:	0010      	movs	r0, r2
 801b23c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b23e:	2340      	movs	r3, #64	@ 0x40
 801b240:	18fb      	adds	r3, r7, r3
 801b242:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b246:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b248:	2180      	movs	r1, #128	@ 0x80
 801b24a:	0049      	lsls	r1, r1, #1
 801b24c:	482d      	ldr	r0, [pc, #180]	@ (801b304 <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801b24e:	f001 fa0b 	bl	801c668 <tiny_vsnprintf_like>
 801b252:	0002      	movs	r2, r0
 801b254:	242c      	movs	r4, #44	@ 0x2c
 801b256:	193b      	adds	r3, r7, r4
 801b258:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801b25a:	f000 fa23 	bl	801b6a4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b25e:	2316      	movs	r3, #22
 801b260:	18fb      	adds	r3, r7, r3
 801b262:	881a      	ldrh	r2, [r3, #0]
 801b264:	193b      	adds	r3, r7, r4
 801b266:	881b      	ldrh	r3, [r3, #0]
 801b268:	18d3      	adds	r3, r2, r3
 801b26a:	b29b      	uxth	r3, r3
 801b26c:	2214      	movs	r2, #20
 801b26e:	18ba      	adds	r2, r7, r2
 801b270:	0011      	movs	r1, r2
 801b272:	0018      	movs	r0, r3
 801b274:	f000 f97c 	bl	801b570 <TRACE_AllocateBufer>
 801b278:	0003      	movs	r3, r0
 801b27a:	3301      	adds	r3, #1
 801b27c:	d035      	beq.n	801b2ea <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b27e:	232e      	movs	r3, #46	@ 0x2e
 801b280:	18fb      	adds	r3, r7, r3
 801b282:	2200      	movs	r2, #0
 801b284:	801a      	strh	r2, [r3, #0]
 801b286:	e016      	b.n	801b2b6 <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b288:	202e      	movs	r0, #46	@ 0x2e
 801b28a:	183b      	adds	r3, r7, r0
 801b28c:	881b      	ldrh	r3, [r3, #0]
 801b28e:	2414      	movs	r4, #20
 801b290:	193a      	adds	r2, r7, r4
 801b292:	8812      	ldrh	r2, [r2, #0]
 801b294:	0011      	movs	r1, r2
 801b296:	2218      	movs	r2, #24
 801b298:	18ba      	adds	r2, r7, r2
 801b29a:	5cd2      	ldrb	r2, [r2, r3]
 801b29c:	4b1a      	ldr	r3, [pc, #104]	@ (801b308 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801b29e:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801b2a0:	193b      	adds	r3, r7, r4
 801b2a2:	881b      	ldrh	r3, [r3, #0]
 801b2a4:	3301      	adds	r3, #1
 801b2a6:	b29a      	uxth	r2, r3
 801b2a8:	193b      	adds	r3, r7, r4
 801b2aa:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b2ac:	183b      	adds	r3, r7, r0
 801b2ae:	881a      	ldrh	r2, [r3, #0]
 801b2b0:	183b      	adds	r3, r7, r0
 801b2b2:	3201      	adds	r2, #1
 801b2b4:	801a      	strh	r2, [r3, #0]
 801b2b6:	2316      	movs	r3, #22
 801b2b8:	18fb      	adds	r3, r7, r3
 801b2ba:	881b      	ldrh	r3, [r3, #0]
 801b2bc:	222e      	movs	r2, #46	@ 0x2e
 801b2be:	18ba      	adds	r2, r7, r2
 801b2c0:	8812      	ldrh	r2, [r2, #0]
 801b2c2:	429a      	cmp	r2, r3
 801b2c4:	d3e0      	bcc.n	801b288 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b2c6:	2314      	movs	r3, #20
 801b2c8:	18fb      	adds	r3, r7, r3
 801b2ca:	881b      	ldrh	r3, [r3, #0]
 801b2cc:	001a      	movs	r2, r3
 801b2ce:	4b0e      	ldr	r3, [pc, #56]	@ (801b308 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801b2d0:	18d0      	adds	r0, r2, r3
 801b2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b2d6:	2180      	movs	r1, #128	@ 0x80
 801b2d8:	0049      	lsls	r1, r1, #1
 801b2da:	f001 f9c5 	bl	801c668 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b2de:	f000 f9fd 	bl	801b6dc <TRACE_UnLock>

    return TRACE_Send();
 801b2e2:	f000 f831 	bl	801b348 <TRACE_Send>
 801b2e6:	0003      	movs	r3, r0
 801b2e8:	e003      	b.n	801b2f2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b2ea:	f000 f9f7 	bl	801b6dc <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b2ee:	2303      	movs	r3, #3
 801b2f0:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b2f2:	0018      	movs	r0, r3
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	b00c      	add	sp, #48	@ 0x30
 801b2f8:	bc90      	pop	{r4, r7}
 801b2fa:	bc08      	pop	{r3}
 801b2fc:	b001      	add	sp, #4
 801b2fe:	4718      	bx	r3
 801b300:	200015e8 	.word	0x200015e8
 801b304:	20001800 	.word	0x20001800
 801b308:	20001600 	.word	0x20001600

0801b30c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b082      	sub	sp, #8
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801b314:	4b03      	ldr	r3, [pc, #12]	@ (801b324 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b316:	687a      	ldr	r2, [r7, #4]
 801b318:	605a      	str	r2, [r3, #4]
}
 801b31a:	46c0      	nop			@ (mov r8, r8)
 801b31c:	46bd      	mov	sp, r7
 801b31e:	b002      	add	sp, #8
 801b320:	bd80      	pop	{r7, pc}
 801b322:	46c0      	nop			@ (mov r8, r8)
 801b324:	200015e8 	.word	0x200015e8

0801b328 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b082      	sub	sp, #8
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	0002      	movs	r2, r0
 801b330:	1dfb      	adds	r3, r7, #7
 801b332:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b334:	4b03      	ldr	r3, [pc, #12]	@ (801b344 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b336:	1dfa      	adds	r2, r7, #7
 801b338:	7812      	ldrb	r2, [r2, #0]
 801b33a:	721a      	strb	r2, [r3, #8]
}
 801b33c:	46c0      	nop			@ (mov r8, r8)
 801b33e:	46bd      	mov	sp, r7
 801b340:	b002      	add	sp, #8
 801b342:	bd80      	pop	{r7, pc}
 801b344:	200015e8 	.word	0x200015e8

0801b348 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b348:	b590      	push	{r4, r7, lr}
 801b34a:	b089      	sub	sp, #36	@ 0x24
 801b34c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801b34e:	231f      	movs	r3, #31
 801b350:	18fb      	adds	r3, r7, r3
 801b352:	2200      	movs	r2, #0
 801b354:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801b356:	2300      	movs	r3, #0
 801b358:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b35a:	f3ef 8310 	mrs	r3, PRIMASK
 801b35e:	613b      	str	r3, [r7, #16]
  return(result);
 801b360:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801b362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b364:	b672      	cpsid	i
}
 801b366:	46c0      	nop			@ (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801b368:	f000 f9d4 	bl	801b714 <TRACE_IsLocked>
 801b36c:	1e03      	subs	r3, r0, #0
 801b36e:	d160      	bne.n	801b432 <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801b370:	f000 f998 	bl	801b6a4 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b374:	4b36      	ldr	r3, [pc, #216]	@ (801b450 <TRACE_Send+0x108>)
 801b376:	8a1a      	ldrh	r2, [r3, #16]
 801b378:	4b35      	ldr	r3, [pc, #212]	@ (801b450 <TRACE_Send+0x108>)
 801b37a:	8a5b      	ldrh	r3, [r3, #18]
 801b37c:	429a      	cmp	r2, r3
 801b37e:	d050      	beq.n	801b422 <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b380:	4b33      	ldr	r3, [pc, #204]	@ (801b450 <TRACE_Send+0x108>)
 801b382:	789b      	ldrb	r3, [r3, #2]
 801b384:	2b01      	cmp	r3, #1
 801b386:	d117      	bne.n	801b3b8 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b388:	4b31      	ldr	r3, [pc, #196]	@ (801b450 <TRACE_Send+0x108>)
 801b38a:	881a      	ldrh	r2, [r3, #0]
 801b38c:	4b30      	ldr	r3, [pc, #192]	@ (801b450 <TRACE_Send+0x108>)
 801b38e:	8a1b      	ldrh	r3, [r3, #16]
 801b390:	1ad3      	subs	r3, r2, r3
 801b392:	b29a      	uxth	r2, r3
 801b394:	4b2e      	ldr	r3, [pc, #184]	@ (801b450 <TRACE_Send+0x108>)
 801b396:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b398:	4b2d      	ldr	r3, [pc, #180]	@ (801b450 <TRACE_Send+0x108>)
 801b39a:	2202      	movs	r2, #2
 801b39c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b39e:	4b2c      	ldr	r3, [pc, #176]	@ (801b450 <TRACE_Send+0x108>)
 801b3a0:	2200      	movs	r2, #0
 801b3a2:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801b3a4:	4b2a      	ldr	r3, [pc, #168]	@ (801b450 <TRACE_Send+0x108>)
 801b3a6:	8a9b      	ldrh	r3, [r3, #20]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d105      	bne.n	801b3b8 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b3ac:	4b28      	ldr	r3, [pc, #160]	@ (801b450 <TRACE_Send+0x108>)
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b3b2:	4b27      	ldr	r3, [pc, #156]	@ (801b450 <TRACE_Send+0x108>)
 801b3b4:	2200      	movs	r2, #0
 801b3b6:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b3b8:	4b25      	ldr	r3, [pc, #148]	@ (801b450 <TRACE_Send+0x108>)
 801b3ba:	789b      	ldrb	r3, [r3, #2]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d116      	bne.n	801b3ee <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b3c0:	4b23      	ldr	r3, [pc, #140]	@ (801b450 <TRACE_Send+0x108>)
 801b3c2:	8a5a      	ldrh	r2, [r3, #18]
 801b3c4:	4b22      	ldr	r3, [pc, #136]	@ (801b450 <TRACE_Send+0x108>)
 801b3c6:	8a1b      	ldrh	r3, [r3, #16]
 801b3c8:	429a      	cmp	r2, r3
 801b3ca:	d908      	bls.n	801b3de <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b3cc:	4b20      	ldr	r3, [pc, #128]	@ (801b450 <TRACE_Send+0x108>)
 801b3ce:	8a5a      	ldrh	r2, [r3, #18]
 801b3d0:	4b1f      	ldr	r3, [pc, #124]	@ (801b450 <TRACE_Send+0x108>)
 801b3d2:	8a1b      	ldrh	r3, [r3, #16]
 801b3d4:	1ad3      	subs	r3, r2, r3
 801b3d6:	b29a      	uxth	r2, r3
 801b3d8:	4b1d      	ldr	r3, [pc, #116]	@ (801b450 <TRACE_Send+0x108>)
 801b3da:	829a      	strh	r2, [r3, #20]
 801b3dc:	e007      	b.n	801b3ee <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b3de:	4b1c      	ldr	r3, [pc, #112]	@ (801b450 <TRACE_Send+0x108>)
 801b3e0:	8a1b      	ldrh	r3, [r3, #16]
 801b3e2:	2280      	movs	r2, #128	@ 0x80
 801b3e4:	0092      	lsls	r2, r2, #2
 801b3e6:	1ad3      	subs	r3, r2, r3
 801b3e8:	b29a      	uxth	r2, r3
 801b3ea:	4b19      	ldr	r3, [pc, #100]	@ (801b450 <TRACE_Send+0x108>)
 801b3ec:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b3ee:	4b18      	ldr	r3, [pc, #96]	@ (801b450 <TRACE_Send+0x108>)
 801b3f0:	8a1b      	ldrh	r3, [r3, #16]
 801b3f2:	001a      	movs	r2, r3
 801b3f4:	4b17      	ldr	r3, [pc, #92]	@ (801b454 <TRACE_Send+0x10c>)
 801b3f6:	18d3      	adds	r3, r2, r3
 801b3f8:	61bb      	str	r3, [r7, #24]
 801b3fa:	697b      	ldr	r3, [r7, #20]
 801b3fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	f383 8810 	msr	PRIMASK, r3
}
 801b404:	46c0      	nop			@ (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801b406:	f7e9 fa17 	bl	8004838 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b40a:	4b13      	ldr	r3, [pc, #76]	@ (801b458 <TRACE_Send+0x110>)
 801b40c:	68db      	ldr	r3, [r3, #12]
 801b40e:	4a10      	ldr	r2, [pc, #64]	@ (801b450 <TRACE_Send+0x108>)
 801b410:	8a91      	ldrh	r1, [r2, #20]
 801b412:	221f      	movs	r2, #31
 801b414:	18bc      	adds	r4, r7, r2
 801b416:	69ba      	ldr	r2, [r7, #24]
 801b418:	0010      	movs	r0, r2
 801b41a:	4798      	blx	r3
 801b41c:	0003      	movs	r3, r0
 801b41e:	7023      	strb	r3, [r4, #0]
 801b420:	e00d      	b.n	801b43e <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801b422:	f000 f95b 	bl	801b6dc <TRACE_UnLock>
 801b426:	697b      	ldr	r3, [r7, #20]
 801b428:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b42a:	68bb      	ldr	r3, [r7, #8]
 801b42c:	f383 8810 	msr	PRIMASK, r3
}
 801b430:	e005      	b.n	801b43e <TRACE_Send+0xf6>
 801b432:	697b      	ldr	r3, [r7, #20]
 801b434:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	f383 8810 	msr	PRIMASK, r3
}
 801b43c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801b43e:	231f      	movs	r3, #31
 801b440:	18fb      	adds	r3, r7, r3
 801b442:	781b      	ldrb	r3, [r3, #0]
 801b444:	b25b      	sxtb	r3, r3
}
 801b446:	0018      	movs	r0, r3
 801b448:	46bd      	mov	sp, r7
 801b44a:	b009      	add	sp, #36	@ 0x24
 801b44c:	bd90      	pop	{r4, r7, pc}
 801b44e:	46c0      	nop			@ (mov r8, r8)
 801b450:	200015e8 	.word	0x200015e8
 801b454:	20001600 	.word	0x20001600
 801b458:	0801da5c 	.word	0x0801da5c

0801b45c <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b086      	sub	sp, #24
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b464:	f3ef 8310 	mrs	r3, PRIMASK
 801b468:	613b      	str	r3, [r7, #16]
  return(result);
 801b46a:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b46c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b46e:	b672      	cpsid	i
}
 801b470:	46c0      	nop			@ (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b472:	4b3c      	ldr	r3, [pc, #240]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b474:	789b      	ldrb	r3, [r3, #2]
 801b476:	2b02      	cmp	r3, #2
 801b478:	d106      	bne.n	801b488 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b47a:	4b3a      	ldr	r3, [pc, #232]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b47c:	2200      	movs	r2, #0
 801b47e:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b480:	4b38      	ldr	r3, [pc, #224]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b482:	2200      	movs	r2, #0
 801b484:	821a      	strh	r2, [r3, #16]
 801b486:	e00a      	b.n	801b49e <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b488:	4b36      	ldr	r3, [pc, #216]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b48a:	8a1a      	ldrh	r2, [r3, #16]
 801b48c:	4b35      	ldr	r3, [pc, #212]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b48e:	8a9b      	ldrh	r3, [r3, #20]
 801b490:	18d3      	adds	r3, r2, r3
 801b492:	b29b      	uxth	r3, r3
 801b494:	05db      	lsls	r3, r3, #23
 801b496:	0ddb      	lsrs	r3, r3, #23
 801b498:	b29a      	uxth	r2, r3
 801b49a:	4b32      	ldr	r3, [pc, #200]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b49c:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b49e:	4b31      	ldr	r3, [pc, #196]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4a0:	8a1a      	ldrh	r2, [r3, #16]
 801b4a2:	4b30      	ldr	r3, [pc, #192]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4a4:	8a5b      	ldrh	r3, [r3, #18]
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	d04c      	beq.n	801b544 <TRACE_TxCpltCallback+0xe8>
 801b4aa:	4b2e      	ldr	r3, [pc, #184]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4ac:	8adb      	ldrh	r3, [r3, #22]
 801b4ae:	2b01      	cmp	r3, #1
 801b4b0:	d148      	bne.n	801b544 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b4b2:	4b2c      	ldr	r3, [pc, #176]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4b4:	789b      	ldrb	r3, [r3, #2]
 801b4b6:	2b01      	cmp	r3, #1
 801b4b8:	d117      	bne.n	801b4ea <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b4ba:	4b2a      	ldr	r3, [pc, #168]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4bc:	881a      	ldrh	r2, [r3, #0]
 801b4be:	4b29      	ldr	r3, [pc, #164]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4c0:	8a1b      	ldrh	r3, [r3, #16]
 801b4c2:	1ad3      	subs	r3, r2, r3
 801b4c4:	b29a      	uxth	r2, r3
 801b4c6:	4b27      	ldr	r3, [pc, #156]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4c8:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b4ca:	4b26      	ldr	r3, [pc, #152]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4cc:	2202      	movs	r2, #2
 801b4ce:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b4d0:	4b24      	ldr	r3, [pc, #144]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4d2:	2200      	movs	r2, #0
 801b4d4:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801b4d6:	4b23      	ldr	r3, [pc, #140]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4d8:	8a9b      	ldrh	r3, [r3, #20]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d105      	bne.n	801b4ea <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b4de:	4b21      	ldr	r3, [pc, #132]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b4e4:	4b1f      	ldr	r3, [pc, #124]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b4ea:	4b1e      	ldr	r3, [pc, #120]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4ec:	789b      	ldrb	r3, [r3, #2]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d116      	bne.n	801b520 <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b4f2:	4b1c      	ldr	r3, [pc, #112]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4f4:	8a5a      	ldrh	r2, [r3, #18]
 801b4f6:	4b1b      	ldr	r3, [pc, #108]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b4f8:	8a1b      	ldrh	r3, [r3, #16]
 801b4fa:	429a      	cmp	r2, r3
 801b4fc:	d908      	bls.n	801b510 <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b4fe:	4b19      	ldr	r3, [pc, #100]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b500:	8a5a      	ldrh	r2, [r3, #18]
 801b502:	4b18      	ldr	r3, [pc, #96]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b504:	8a1b      	ldrh	r3, [r3, #16]
 801b506:	1ad3      	subs	r3, r2, r3
 801b508:	b29a      	uxth	r2, r3
 801b50a:	4b16      	ldr	r3, [pc, #88]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b50c:	829a      	strh	r2, [r3, #20]
 801b50e:	e007      	b.n	801b520 <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b510:	4b14      	ldr	r3, [pc, #80]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b512:	8a1b      	ldrh	r3, [r3, #16]
 801b514:	2280      	movs	r2, #128	@ 0x80
 801b516:	0092      	lsls	r2, r2, #2
 801b518:	1ad3      	subs	r3, r2, r3
 801b51a:	b29a      	uxth	r2, r3
 801b51c:	4b11      	ldr	r3, [pc, #68]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b51e:	829a      	strh	r2, [r3, #20]
 801b520:	697b      	ldr	r3, [r7, #20]
 801b522:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	f383 8810 	msr	PRIMASK, r3
}
 801b52a:	46c0      	nop			@ (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801b52c:	4b0e      	ldr	r3, [pc, #56]	@ (801b568 <TRACE_TxCpltCallback+0x10c>)
 801b52e:	68db      	ldr	r3, [r3, #12]
 801b530:	4a0c      	ldr	r2, [pc, #48]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b532:	8a12      	ldrh	r2, [r2, #16]
 801b534:	0011      	movs	r1, r2
 801b536:	4a0d      	ldr	r2, [pc, #52]	@ (801b56c <TRACE_TxCpltCallback+0x110>)
 801b538:	1888      	adds	r0, r1, r2
 801b53a:	4a0a      	ldr	r2, [pc, #40]	@ (801b564 <TRACE_TxCpltCallback+0x108>)
 801b53c:	8a92      	ldrh	r2, [r2, #20]
 801b53e:	0011      	movs	r1, r2
 801b540:	4798      	blx	r3
 801b542:	e00a      	b.n	801b55a <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801b544:	f7e9 f981 	bl	800484a <UTIL_ADV_TRACE_PostSendHook>
 801b548:	697b      	ldr	r3, [r7, #20]
 801b54a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	f383 8810 	msr	PRIMASK, r3
}
 801b552:	46c0      	nop			@ (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801b554:	f000 f8c2 	bl	801b6dc <TRACE_UnLock>
  }
}
 801b558:	46c0      	nop			@ (mov r8, r8)
 801b55a:	46c0      	nop			@ (mov r8, r8)
 801b55c:	46bd      	mov	sp, r7
 801b55e:	b006      	add	sp, #24
 801b560:	bd80      	pop	{r7, pc}
 801b562:	46c0      	nop			@ (mov r8, r8)
 801b564:	200015e8 	.word	0x200015e8
 801b568:	0801da5c 	.word	0x0801da5c
 801b56c:	20001600 	.word	0x20001600

0801b570 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b086      	sub	sp, #24
 801b574:	af00      	add	r7, sp, #0
 801b576:	0002      	movs	r2, r0
 801b578:	6039      	str	r1, [r7, #0]
 801b57a:	1dbb      	adds	r3, r7, #6
 801b57c:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801b57e:	2314      	movs	r3, #20
 801b580:	18fb      	adds	r3, r7, r3
 801b582:	2201      	movs	r2, #1
 801b584:	4252      	negs	r2, r2
 801b586:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b588:	f3ef 8310 	mrs	r3, PRIMASK
 801b58c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b58e:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b590:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b592:	b672      	cpsid	i
}
 801b594:	46c0      	nop			@ (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b596:	4b42      	ldr	r3, [pc, #264]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b598:	8a5a      	ldrh	r2, [r3, #18]
 801b59a:	4b41      	ldr	r3, [pc, #260]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b59c:	8a1b      	ldrh	r3, [r3, #16]
 801b59e:	429a      	cmp	r2, r3
 801b5a0:	d123      	bne.n	801b5ea <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b5a2:	4b3f      	ldr	r3, [pc, #252]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5a4:	8a5a      	ldrh	r2, [r3, #18]
 801b5a6:	2016      	movs	r0, #22
 801b5a8:	183b      	adds	r3, r7, r0
 801b5aa:	2180      	movs	r1, #128	@ 0x80
 801b5ac:	0089      	lsls	r1, r1, #2
 801b5ae:	1a8a      	subs	r2, r1, r2
 801b5b0:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b5b2:	1dba      	adds	r2, r7, #6
 801b5b4:	0001      	movs	r1, r0
 801b5b6:	187b      	adds	r3, r7, r1
 801b5b8:	8812      	ldrh	r2, [r2, #0]
 801b5ba:	881b      	ldrh	r3, [r3, #0]
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	d346      	bcc.n	801b64e <TRACE_AllocateBufer+0xde>
 801b5c0:	4b37      	ldr	r3, [pc, #220]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5c2:	8a1b      	ldrh	r3, [r3, #16]
 801b5c4:	1dba      	adds	r2, r7, #6
 801b5c6:	8812      	ldrh	r2, [r2, #0]
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d240      	bcs.n	801b64e <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b5cc:	4b34      	ldr	r3, [pc, #208]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5ce:	2201      	movs	r2, #1
 801b5d0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b5d2:	4b33      	ldr	r3, [pc, #204]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5d4:	8a5a      	ldrh	r2, [r3, #18]
 801b5d6:	4b32      	ldr	r3, [pc, #200]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5d8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b5da:	187b      	adds	r3, r7, r1
 801b5dc:	4a30      	ldr	r2, [pc, #192]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5de:	8a12      	ldrh	r2, [r2, #16]
 801b5e0:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b5e2:	4b2f      	ldr	r3, [pc, #188]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5e4:	2200      	movs	r2, #0
 801b5e6:	825a      	strh	r2, [r3, #18]
 801b5e8:	e031      	b.n	801b64e <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b5ea:	4b2d      	ldr	r3, [pc, #180]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5ec:	8a5a      	ldrh	r2, [r3, #18]
 801b5ee:	4b2c      	ldr	r3, [pc, #176]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5f0:	8a1b      	ldrh	r3, [r3, #16]
 801b5f2:	429a      	cmp	r2, r3
 801b5f4:	d923      	bls.n	801b63e <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b5f6:	4b2a      	ldr	r3, [pc, #168]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b5f8:	8a5a      	ldrh	r2, [r3, #18]
 801b5fa:	2016      	movs	r0, #22
 801b5fc:	183b      	adds	r3, r7, r0
 801b5fe:	2180      	movs	r1, #128	@ 0x80
 801b600:	0089      	lsls	r1, r1, #2
 801b602:	1a8a      	subs	r2, r1, r2
 801b604:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b606:	1dba      	adds	r2, r7, #6
 801b608:	0001      	movs	r1, r0
 801b60a:	187b      	adds	r3, r7, r1
 801b60c:	8812      	ldrh	r2, [r2, #0]
 801b60e:	881b      	ldrh	r3, [r3, #0]
 801b610:	429a      	cmp	r2, r3
 801b612:	d31c      	bcc.n	801b64e <TRACE_AllocateBufer+0xde>
 801b614:	4b22      	ldr	r3, [pc, #136]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b616:	8a1b      	ldrh	r3, [r3, #16]
 801b618:	1dba      	adds	r2, r7, #6
 801b61a:	8812      	ldrh	r2, [r2, #0]
 801b61c:	429a      	cmp	r2, r3
 801b61e:	d216      	bcs.n	801b64e <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b620:	4b1f      	ldr	r3, [pc, #124]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b622:	2201      	movs	r2, #1
 801b624:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b626:	4b1e      	ldr	r3, [pc, #120]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b628:	8a5a      	ldrh	r2, [r3, #18]
 801b62a:	4b1d      	ldr	r3, [pc, #116]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b62c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b62e:	187b      	adds	r3, r7, r1
 801b630:	4a1b      	ldr	r2, [pc, #108]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b632:	8a12      	ldrh	r2, [r2, #16]
 801b634:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b636:	4b1a      	ldr	r3, [pc, #104]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b638:	2200      	movs	r2, #0
 801b63a:	825a      	strh	r2, [r3, #18]
 801b63c:	e007      	b.n	801b64e <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b63e:	4b18      	ldr	r3, [pc, #96]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b640:	8a19      	ldrh	r1, [r3, #16]
 801b642:	4b17      	ldr	r3, [pc, #92]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b644:	8a5a      	ldrh	r2, [r3, #18]
 801b646:	2316      	movs	r3, #22
 801b648:	18fb      	adds	r3, r7, r3
 801b64a:	1a8a      	subs	r2, r1, r2
 801b64c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801b64e:	2316      	movs	r3, #22
 801b650:	18fa      	adds	r2, r7, r3
 801b652:	1dbb      	adds	r3, r7, #6
 801b654:	8812      	ldrh	r2, [r2, #0]
 801b656:	881b      	ldrh	r3, [r3, #0]
 801b658:	429a      	cmp	r2, r3
 801b65a:	d912      	bls.n	801b682 <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b65c:	4b10      	ldr	r3, [pc, #64]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b65e:	8a5a      	ldrh	r2, [r3, #18]
 801b660:	683b      	ldr	r3, [r7, #0]
 801b662:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b664:	4b0e      	ldr	r3, [pc, #56]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b666:	8a5a      	ldrh	r2, [r3, #18]
 801b668:	1dbb      	adds	r3, r7, #6
 801b66a:	881b      	ldrh	r3, [r3, #0]
 801b66c:	18d3      	adds	r3, r2, r3
 801b66e:	b29b      	uxth	r3, r3
 801b670:	05db      	lsls	r3, r3, #23
 801b672:	0ddb      	lsrs	r3, r3, #23
 801b674:	b29a      	uxth	r2, r3
 801b676:	4b0a      	ldr	r3, [pc, #40]	@ (801b6a0 <TRACE_AllocateBufer+0x130>)
 801b678:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b67a:	2314      	movs	r3, #20
 801b67c:	18fb      	adds	r3, r7, r3
 801b67e:	2200      	movs	r2, #0
 801b680:	801a      	strh	r2, [r3, #0]
 801b682:	693b      	ldr	r3, [r7, #16]
 801b684:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b686:	68bb      	ldr	r3, [r7, #8]
 801b688:	f383 8810 	msr	PRIMASK, r3
}
 801b68c:	46c0      	nop			@ (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801b68e:	2314      	movs	r3, #20
 801b690:	18fb      	adds	r3, r7, r3
 801b692:	2200      	movs	r2, #0
 801b694:	5e9b      	ldrsh	r3, [r3, r2]
}
 801b696:	0018      	movs	r0, r3
 801b698:	46bd      	mov	sp, r7
 801b69a:	b006      	add	sp, #24
 801b69c:	bd80      	pop	{r7, pc}
 801b69e:	46c0      	nop			@ (mov r8, r8)
 801b6a0:	200015e8 	.word	0x200015e8

0801b6a4 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	b084      	sub	sp, #16
 801b6a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6aa:	f3ef 8310 	mrs	r3, PRIMASK
 801b6ae:	607b      	str	r3, [r7, #4]
  return(result);
 801b6b0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b6b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6b4:	b672      	cpsid	i
}
 801b6b6:	46c0      	nop			@ (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801b6b8:	4b07      	ldr	r3, [pc, #28]	@ (801b6d8 <TRACE_Lock+0x34>)
 801b6ba:	8adb      	ldrh	r3, [r3, #22]
 801b6bc:	3301      	adds	r3, #1
 801b6be:	b29a      	uxth	r2, r3
 801b6c0:	4b05      	ldr	r3, [pc, #20]	@ (801b6d8 <TRACE_Lock+0x34>)
 801b6c2:	82da      	strh	r2, [r3, #22]
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6c8:	68bb      	ldr	r3, [r7, #8]
 801b6ca:	f383 8810 	msr	PRIMASK, r3
}
 801b6ce:	46c0      	nop			@ (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b6d0:	46c0      	nop			@ (mov r8, r8)
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	b004      	add	sp, #16
 801b6d6:	bd80      	pop	{r7, pc}
 801b6d8:	200015e8 	.word	0x200015e8

0801b6dc <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	b084      	sub	sp, #16
 801b6e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6e2:	f3ef 8310 	mrs	r3, PRIMASK
 801b6e6:	607b      	str	r3, [r7, #4]
  return(result);
 801b6e8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b6ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6ec:	b672      	cpsid	i
}
 801b6ee:	46c0      	nop			@ (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801b6f0:	4b07      	ldr	r3, [pc, #28]	@ (801b710 <TRACE_UnLock+0x34>)
 801b6f2:	8adb      	ldrh	r3, [r3, #22]
 801b6f4:	3b01      	subs	r3, #1
 801b6f6:	b29a      	uxth	r2, r3
 801b6f8:	4b05      	ldr	r3, [pc, #20]	@ (801b710 <TRACE_UnLock+0x34>)
 801b6fa:	82da      	strh	r2, [r3, #22]
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b700:	68bb      	ldr	r3, [r7, #8]
 801b702:	f383 8810 	msr	PRIMASK, r3
}
 801b706:	46c0      	nop			@ (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b708:	46c0      	nop			@ (mov r8, r8)
 801b70a:	46bd      	mov	sp, r7
 801b70c:	b004      	add	sp, #16
 801b70e:	bd80      	pop	{r7, pc}
 801b710:	200015e8 	.word	0x200015e8

0801b714 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b718:	4b03      	ldr	r3, [pc, #12]	@ (801b728 <TRACE_IsLocked+0x14>)
 801b71a:	8adb      	ldrh	r3, [r3, #22]
 801b71c:	1e5a      	subs	r2, r3, #1
 801b71e:	4193      	sbcs	r3, r2
 801b720:	b2db      	uxtb	r3, r3
}
 801b722:	0018      	movs	r0, r3
 801b724:	46bd      	mov	sp, r7
 801b726:	bd80      	pop	{r7, pc}
 801b728:	200015e8 	.word	0x200015e8

0801b72c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b72c:	b580      	push	{r7, lr}
 801b72e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b730:	4b04      	ldr	r3, [pc, #16]	@ (801b744 <UTIL_LPM_Init+0x18>)
 801b732:	2200      	movs	r2, #0
 801b734:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b736:	4b04      	ldr	r3, [pc, #16]	@ (801b748 <UTIL_LPM_Init+0x1c>)
 801b738:	2200      	movs	r2, #0
 801b73a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b73c:	46c0      	nop			@ (mov r8, r8)
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd80      	pop	{r7, pc}
 801b742:	46c0      	nop			@ (mov r8, r8)
 801b744:	20001900 	.word	0x20001900
 801b748:	20001904 	.word	0x20001904

0801b74c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b74c:	b580      	push	{r7, lr}
 801b74e:	b086      	sub	sp, #24
 801b750:	af00      	add	r7, sp, #0
 801b752:	6078      	str	r0, [r7, #4]
 801b754:	000a      	movs	r2, r1
 801b756:	1cfb      	adds	r3, r7, #3
 801b758:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b75a:	f3ef 8310 	mrs	r3, PRIMASK
 801b75e:	613b      	str	r3, [r7, #16]
  return(result);
 801b760:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b764:	b672      	cpsid	i
}
 801b766:	46c0      	nop			@ (mov r8, r8)
  
  switch( state )
 801b768:	1cfb      	adds	r3, r7, #3
 801b76a:	781b      	ldrb	r3, [r3, #0]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d008      	beq.n	801b782 <UTIL_LPM_SetStopMode+0x36>
 801b770:	2b01      	cmp	r3, #1
 801b772:	d10e      	bne.n	801b792 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b774:	4b0c      	ldr	r3, [pc, #48]	@ (801b7a8 <UTIL_LPM_SetStopMode+0x5c>)
 801b776:	681a      	ldr	r2, [r3, #0]
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	431a      	orrs	r2, r3
 801b77c:	4b0a      	ldr	r3, [pc, #40]	@ (801b7a8 <UTIL_LPM_SetStopMode+0x5c>)
 801b77e:	601a      	str	r2, [r3, #0]
      break;
 801b780:	e008      	b.n	801b794 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	43da      	mvns	r2, r3
 801b786:	4b08      	ldr	r3, [pc, #32]	@ (801b7a8 <UTIL_LPM_SetStopMode+0x5c>)
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	401a      	ands	r2, r3
 801b78c:	4b06      	ldr	r3, [pc, #24]	@ (801b7a8 <UTIL_LPM_SetStopMode+0x5c>)
 801b78e:	601a      	str	r2, [r3, #0]
      break;
 801b790:	e000      	b.n	801b794 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801b792:	46c0      	nop			@ (mov r8, r8)
 801b794:	697b      	ldr	r3, [r7, #20]
 801b796:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	f383 8810 	msr	PRIMASK, r3
}
 801b79e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b7a0:	46c0      	nop			@ (mov r8, r8)
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	b006      	add	sp, #24
 801b7a6:	bd80      	pop	{r7, pc}
 801b7a8:	20001900 	.word	0x20001900

0801b7ac <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b086      	sub	sp, #24
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
 801b7b4:	000a      	movs	r2, r1
 801b7b6:	1cfb      	adds	r3, r7, #3
 801b7b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b7ba:	f3ef 8310 	mrs	r3, PRIMASK
 801b7be:	613b      	str	r3, [r7, #16]
  return(result);
 801b7c0:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b7c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b7c4:	b672      	cpsid	i
}
 801b7c6:	46c0      	nop			@ (mov r8, r8)
  
  switch(state)
 801b7c8:	1cfb      	adds	r3, r7, #3
 801b7ca:	781b      	ldrb	r3, [r3, #0]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d008      	beq.n	801b7e2 <UTIL_LPM_SetOffMode+0x36>
 801b7d0:	2b01      	cmp	r3, #1
 801b7d2:	d10e      	bne.n	801b7f2 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b7d4:	4b0c      	ldr	r3, [pc, #48]	@ (801b808 <UTIL_LPM_SetOffMode+0x5c>)
 801b7d6:	681a      	ldr	r2, [r3, #0]
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	431a      	orrs	r2, r3
 801b7dc:	4b0a      	ldr	r3, [pc, #40]	@ (801b808 <UTIL_LPM_SetOffMode+0x5c>)
 801b7de:	601a      	str	r2, [r3, #0]
      break;
 801b7e0:	e008      	b.n	801b7f4 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	43da      	mvns	r2, r3
 801b7e6:	4b08      	ldr	r3, [pc, #32]	@ (801b808 <UTIL_LPM_SetOffMode+0x5c>)
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	401a      	ands	r2, r3
 801b7ec:	4b06      	ldr	r3, [pc, #24]	@ (801b808 <UTIL_LPM_SetOffMode+0x5c>)
 801b7ee:	601a      	str	r2, [r3, #0]
      break;
 801b7f0:	e000      	b.n	801b7f4 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801b7f2:	46c0      	nop			@ (mov r8, r8)
 801b7f4:	697b      	ldr	r3, [r7, #20]
 801b7f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	f383 8810 	msr	PRIMASK, r3
}
 801b7fe:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b800:	46c0      	nop			@ (mov r8, r8)
 801b802:	46bd      	mov	sp, r7
 801b804:	b006      	add	sp, #24
 801b806:	bd80      	pop	{r7, pc}
 801b808:	20001904 	.word	0x20001904

0801b80c <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801b80c:	b580      	push	{r7, lr}
 801b80e:	b084      	sub	sp, #16
 801b810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b812:	f3ef 8310 	mrs	r3, PRIMASK
 801b816:	607b      	str	r3, [r7, #4]
  return(result);
 801b818:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b81a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801b81c:	b672      	cpsid	i
}
 801b81e:	46c0      	nop			@ (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b820:	4b11      	ldr	r3, [pc, #68]	@ (801b868 <UTIL_LPM_GetMode+0x5c>)
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d004      	beq.n	801b832 <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801b828:	230f      	movs	r3, #15
 801b82a:	18fb      	adds	r3, r7, r3
 801b82c:	2200      	movs	r2, #0
 801b82e:	701a      	strb	r2, [r3, #0]
 801b830:	e00c      	b.n	801b84c <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b832:	4b0e      	ldr	r3, [pc, #56]	@ (801b86c <UTIL_LPM_GetMode+0x60>)
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d004      	beq.n	801b844 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801b83a:	230f      	movs	r3, #15
 801b83c:	18fb      	adds	r3, r7, r3
 801b83e:	2201      	movs	r2, #1
 801b840:	701a      	strb	r2, [r3, #0]
 801b842:	e003      	b.n	801b84c <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801b844:	230f      	movs	r3, #15
 801b846:	18fb      	adds	r3, r7, r3
 801b848:	2202      	movs	r2, #2
 801b84a:	701a      	strb	r2, [r3, #0]
 801b84c:	68bb      	ldr	r3, [r7, #8]
 801b84e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b850:	683b      	ldr	r3, [r7, #0]
 801b852:	f383 8810 	msr	PRIMASK, r3
}
 801b856:	46c0      	nop			@ (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801b858:	230f      	movs	r3, #15
 801b85a:	18fb      	adds	r3, r7, r3
 801b85c:	781b      	ldrb	r3, [r3, #0]
}
 801b85e:	0018      	movs	r0, r3
 801b860:	46bd      	mov	sp, r7
 801b862:	b004      	add	sp, #16
 801b864:	bd80      	pop	{r7, pc}
 801b866:	46c0      	nop			@ (mov r8, r8)
 801b868:	20001900 	.word	0x20001900
 801b86c:	20001904 	.word	0x20001904

0801b870 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801b870:	b580      	push	{r7, lr}
 801b872:	b084      	sub	sp, #16
 801b874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b876:	f3ef 8310 	mrs	r3, PRIMASK
 801b87a:	60bb      	str	r3, [r7, #8]
  return(result);
 801b87c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b87e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b880:	b672      	cpsid	i
}
 801b882:	46c0      	nop			@ (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b884:	4b12      	ldr	r3, [pc, #72]	@ (801b8d0 <UTIL_LPM_EnterLowPower+0x60>)
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d006      	beq.n	801b89a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b88c:	4b11      	ldr	r3, [pc, #68]	@ (801b8d4 <UTIL_LPM_EnterLowPower+0x64>)
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b892:	4b10      	ldr	r3, [pc, #64]	@ (801b8d4 <UTIL_LPM_EnterLowPower+0x64>)
 801b894:	685b      	ldr	r3, [r3, #4]
 801b896:	4798      	blx	r3
 801b898:	e010      	b.n	801b8bc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b89a:	4b0f      	ldr	r3, [pc, #60]	@ (801b8d8 <UTIL_LPM_EnterLowPower+0x68>)
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d006      	beq.n	801b8b0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b8a2:	4b0c      	ldr	r3, [pc, #48]	@ (801b8d4 <UTIL_LPM_EnterLowPower+0x64>)
 801b8a4:	689b      	ldr	r3, [r3, #8]
 801b8a6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b8a8:	4b0a      	ldr	r3, [pc, #40]	@ (801b8d4 <UTIL_LPM_EnterLowPower+0x64>)
 801b8aa:	68db      	ldr	r3, [r3, #12]
 801b8ac:	4798      	blx	r3
 801b8ae:	e005      	b.n	801b8bc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b8b0:	4b08      	ldr	r3, [pc, #32]	@ (801b8d4 <UTIL_LPM_EnterLowPower+0x64>)
 801b8b2:	691b      	ldr	r3, [r3, #16]
 801b8b4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b8b6:	4b07      	ldr	r3, [pc, #28]	@ (801b8d4 <UTIL_LPM_EnterLowPower+0x64>)
 801b8b8:	695b      	ldr	r3, [r3, #20]
 801b8ba:	4798      	blx	r3
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	f383 8810 	msr	PRIMASK, r3
}
 801b8c6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b8c8:	46c0      	nop			@ (mov r8, r8)
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	b004      	add	sp, #16
 801b8ce:	bd80      	pop	{r7, pc}
 801b8d0:	20001900 	.word	0x20001900
 801b8d4:	0801da38 	.word	0x0801da38
 801b8d8:	20001904 	.word	0x20001904

0801b8dc <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	b086      	sub	sp, #24
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	60f8      	str	r0, [r7, #12]
 801b8e4:	60b9      	str	r1, [r7, #8]
 801b8e6:	1dbb      	adds	r3, r7, #6
 801b8e8:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b8ee:	68bb      	ldr	r3, [r7, #8]
 801b8f0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b8f2:	e007      	b.n	801b904 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b8f4:	693a      	ldr	r2, [r7, #16]
 801b8f6:	1c53      	adds	r3, r2, #1
 801b8f8:	613b      	str	r3, [r7, #16]
 801b8fa:	697b      	ldr	r3, [r7, #20]
 801b8fc:	1c59      	adds	r1, r3, #1
 801b8fe:	6179      	str	r1, [r7, #20]
 801b900:	7812      	ldrb	r2, [r2, #0]
 801b902:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b904:	1dbb      	adds	r3, r7, #6
 801b906:	881b      	ldrh	r3, [r3, #0]
 801b908:	1dba      	adds	r2, r7, #6
 801b90a:	1e59      	subs	r1, r3, #1
 801b90c:	8011      	strh	r1, [r2, #0]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d1f0      	bne.n	801b8f4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801b912:	46c0      	nop			@ (mov r8, r8)
 801b914:	46c0      	nop			@ (mov r8, r8)
 801b916:	46bd      	mov	sp, r7
 801b918:	b006      	add	sp, #24
 801b91a:	bd80      	pop	{r7, pc}

0801b91c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b084      	sub	sp, #16
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
 801b924:	0008      	movs	r0, r1
 801b926:	0011      	movs	r1, r2
 801b928:	1cfb      	adds	r3, r7, #3
 801b92a:	1c02      	adds	r2, r0, #0
 801b92c:	701a      	strb	r2, [r3, #0]
 801b92e:	003b      	movs	r3, r7
 801b930:	1c0a      	adds	r2, r1, #0
 801b932:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b938:	e005      	b.n	801b946 <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	1c5a      	adds	r2, r3, #1
 801b93e:	60fa      	str	r2, [r7, #12]
 801b940:	1cfa      	adds	r2, r7, #3
 801b942:	7812      	ldrb	r2, [r2, #0]
 801b944:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b946:	003b      	movs	r3, r7
 801b948:	881b      	ldrh	r3, [r3, #0]
 801b94a:	003a      	movs	r2, r7
 801b94c:	1e59      	subs	r1, r3, #1
 801b94e:	8011      	strh	r1, [r2, #0]
 801b950:	2b00      	cmp	r3, #0
 801b952:	d1f2      	bne.n	801b93a <UTIL_MEM_set_8+0x1e>
  }
}
 801b954:	46c0      	nop			@ (mov r8, r8)
 801b956:	46c0      	nop			@ (mov r8, r8)
 801b958:	46bd      	mov	sp, r7
 801b95a:	b004      	add	sp, #16
 801b95c:	bd80      	pop	{r7, pc}
	...

0801b960 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b08c      	sub	sp, #48	@ 0x30
 801b964:	af00      	add	r7, sp, #0
 801b966:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b968:	4b66      	ldr	r3, [pc, #408]	@ (801bb04 <UTIL_SEQ_Run+0x1a4>)
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801b96e:	4b65      	ldr	r3, [pc, #404]	@ (801bb04 <UTIL_SEQ_Run+0x1a4>)
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	687a      	ldr	r2, [r7, #4]
 801b974:	401a      	ands	r2, r3
 801b976:	4b63      	ldr	r3, [pc, #396]	@ (801bb04 <UTIL_SEQ_Run+0x1a4>)
 801b978:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801b97a:	e086      	b.n	801ba8a <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801b97c:	2300      	movs	r3, #0
 801b97e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801b980:	e002      	b.n	801b988 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801b982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b984:	3301      	adds	r3, #1
 801b986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801b988:	4b5f      	ldr	r3, [pc, #380]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801b98a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b98c:	00d2      	lsls	r2, r2, #3
 801b98e:	58d2      	ldr	r2, [r2, r3]
 801b990:	4b5e      	ldr	r3, [pc, #376]	@ (801bb0c <UTIL_SEQ_Run+0x1ac>)
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	401a      	ands	r2, r3
 801b996:	4b5b      	ldr	r3, [pc, #364]	@ (801bb04 <UTIL_SEQ_Run+0x1a4>)
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	4013      	ands	r3, r2
 801b99c:	d0f1      	beq.n	801b982 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801b99e:	4b5a      	ldr	r3, [pc, #360]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801b9a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b9a2:	00d2      	lsls	r2, r2, #3
 801b9a4:	58d2      	ldr	r2, [r2, r3]
 801b9a6:	4b59      	ldr	r3, [pc, #356]	@ (801bb0c <UTIL_SEQ_Run+0x1ac>)
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	401a      	ands	r2, r3
 801b9ac:	4b55      	ldr	r3, [pc, #340]	@ (801bb04 <UTIL_SEQ_Run+0x1a4>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	4013      	ands	r3, r2
 801b9b2:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b9b4:	4a54      	ldr	r2, [pc, #336]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801b9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9b8:	00db      	lsls	r3, r3, #3
 801b9ba:	18d3      	adds	r3, r2, r3
 801b9bc:	3304      	adds	r3, #4
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b9c2:	4013      	ands	r3, r2
 801b9c4:	d107      	bne.n	801b9d6 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b9c6:	4a50      	ldr	r2, [pc, #320]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801b9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9ca:	00db      	lsls	r3, r3, #3
 801b9cc:	18d3      	adds	r3, r2, r3
 801b9ce:	3304      	adds	r3, #4
 801b9d0:	2201      	movs	r2, #1
 801b9d2:	4252      	negs	r2, r2
 801b9d4:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b9d6:	4a4c      	ldr	r2, [pc, #304]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801b9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9da:	00db      	lsls	r3, r3, #3
 801b9dc:	18d3      	adds	r3, r2, r3
 801b9de:	3304      	adds	r3, #4
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b9e4:	4013      	ands	r3, r2
 801b9e6:	0018      	movs	r0, r3
 801b9e8:	f000 f8f6 	bl	801bbd8 <SEQ_BitPosition>
 801b9ec:	0003      	movs	r3, r0
 801b9ee:	001a      	movs	r2, r3
 801b9f0:	4b47      	ldr	r3, [pc, #284]	@ (801bb10 <UTIL_SEQ_Run+0x1b0>)
 801b9f2:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b9f4:	4a44      	ldr	r2, [pc, #272]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801b9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9f8:	00db      	lsls	r3, r3, #3
 801b9fa:	18d3      	adds	r3, r2, r3
 801b9fc:	3304      	adds	r3, #4
 801b9fe:	681a      	ldr	r2, [r3, #0]
 801ba00:	4b43      	ldr	r3, [pc, #268]	@ (801bb10 <UTIL_SEQ_Run+0x1b0>)
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	2101      	movs	r1, #1
 801ba06:	4099      	lsls	r1, r3
 801ba08:	000b      	movs	r3, r1
 801ba0a:	43db      	mvns	r3, r3
 801ba0c:	401a      	ands	r2, r3
 801ba0e:	493e      	ldr	r1, [pc, #248]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801ba10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba12:	00db      	lsls	r3, r3, #3
 801ba14:	18cb      	adds	r3, r1, r3
 801ba16:	3304      	adds	r3, #4
 801ba18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba1a:	f3ef 8310 	mrs	r3, PRIMASK
 801ba1e:	61bb      	str	r3, [r7, #24]
  return(result);
 801ba20:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ba22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba24:	b672      	cpsid	i
}
 801ba26:	46c0      	nop			@ (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ba28:	4b39      	ldr	r3, [pc, #228]	@ (801bb10 <UTIL_SEQ_Run+0x1b0>)
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	2201      	movs	r2, #1
 801ba2e:	409a      	lsls	r2, r3
 801ba30:	0013      	movs	r3, r2
 801ba32:	43da      	mvns	r2, r3
 801ba34:	4b37      	ldr	r3, [pc, #220]	@ (801bb14 <UTIL_SEQ_Run+0x1b4>)
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	401a      	ands	r2, r3
 801ba3a:	4b36      	ldr	r3, [pc, #216]	@ (801bb14 <UTIL_SEQ_Run+0x1b4>)
 801ba3c:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ba3e:	2302      	movs	r3, #2
 801ba40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ba42:	e013      	b.n	801ba6c <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ba44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba46:	1e5a      	subs	r2, r3, #1
 801ba48:	4b2f      	ldr	r3, [pc, #188]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801ba4a:	00d2      	lsls	r2, r2, #3
 801ba4c:	58d1      	ldr	r1, [r2, r3]
 801ba4e:	4b30      	ldr	r3, [pc, #192]	@ (801bb10 <UTIL_SEQ_Run+0x1b0>)
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	2201      	movs	r2, #1
 801ba54:	409a      	lsls	r2, r3
 801ba56:	0013      	movs	r3, r2
 801ba58:	43db      	mvns	r3, r3
 801ba5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ba5c:	3a01      	subs	r2, #1
 801ba5e:	4019      	ands	r1, r3
 801ba60:	4b29      	ldr	r3, [pc, #164]	@ (801bb08 <UTIL_SEQ_Run+0x1a8>)
 801ba62:	00d2      	lsls	r2, r2, #3
 801ba64:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ba66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba68:	3b01      	subs	r3, #1
 801ba6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ba6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d1e8      	bne.n	801ba44 <UTIL_SEQ_Run+0xe4>
 801ba72:	6a3b      	ldr	r3, [r7, #32]
 801ba74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba76:	697b      	ldr	r3, [r7, #20]
 801ba78:	f383 8810 	msr	PRIMASK, r3
}
 801ba7c:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ba7e:	4b24      	ldr	r3, [pc, #144]	@ (801bb10 <UTIL_SEQ_Run+0x1b0>)
 801ba80:	681a      	ldr	r2, [r3, #0]
 801ba82:	4b25      	ldr	r3, [pc, #148]	@ (801bb18 <UTIL_SEQ_Run+0x1b8>)
 801ba84:	0092      	lsls	r2, r2, #2
 801ba86:	58d3      	ldr	r3, [r2, r3]
 801ba88:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801ba8a:	4b22      	ldr	r3, [pc, #136]	@ (801bb14 <UTIL_SEQ_Run+0x1b4>)
 801ba8c:	681a      	ldr	r2, [r3, #0]
 801ba8e:	4b1f      	ldr	r3, [pc, #124]	@ (801bb0c <UTIL_SEQ_Run+0x1ac>)
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	401a      	ands	r2, r3
 801ba94:	4b1b      	ldr	r3, [pc, #108]	@ (801bb04 <UTIL_SEQ_Run+0x1a4>)
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	4013      	ands	r3, r2
 801ba9a:	d006      	beq.n	801baaa <UTIL_SEQ_Run+0x14a>
 801ba9c:	4b1f      	ldr	r3, [pc, #124]	@ (801bb1c <UTIL_SEQ_Run+0x1bc>)
 801ba9e:	681a      	ldr	r2, [r3, #0]
 801baa0:	4b1f      	ldr	r3, [pc, #124]	@ (801bb20 <UTIL_SEQ_Run+0x1c0>)
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	4013      	ands	r3, r2
 801baa6:	d100      	bne.n	801baaa <UTIL_SEQ_Run+0x14a>
 801baa8:	e768      	b.n	801b97c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801baaa:	4b19      	ldr	r3, [pc, #100]	@ (801bb10 <UTIL_SEQ_Run+0x1b0>)
 801baac:	2201      	movs	r2, #1
 801baae:	4252      	negs	r2, r2
 801bab0:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801bab2:	f000 f887 	bl	801bbc4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bab6:	f3ef 8310 	mrs	r3, PRIMASK
 801baba:	613b      	str	r3, [r7, #16]
  return(result);
 801babc:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801babe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bac0:	b672      	cpsid	i
}
 801bac2:	46c0      	nop			@ (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801bac4:	4b13      	ldr	r3, [pc, #76]	@ (801bb14 <UTIL_SEQ_Run+0x1b4>)
 801bac6:	681a      	ldr	r2, [r3, #0]
 801bac8:	4b10      	ldr	r3, [pc, #64]	@ (801bb0c <UTIL_SEQ_Run+0x1ac>)
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	401a      	ands	r2, r3
 801bace:	4b0d      	ldr	r3, [pc, #52]	@ (801bb04 <UTIL_SEQ_Run+0x1a4>)
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	4013      	ands	r3, r2
 801bad4:	d107      	bne.n	801bae6 <UTIL_SEQ_Run+0x186>
 801bad6:	4b11      	ldr	r3, [pc, #68]	@ (801bb1c <UTIL_SEQ_Run+0x1bc>)
 801bad8:	681a      	ldr	r2, [r3, #0]
 801bada:	4b11      	ldr	r3, [pc, #68]	@ (801bb20 <UTIL_SEQ_Run+0x1c0>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	4013      	ands	r3, r2
 801bae0:	d101      	bne.n	801bae6 <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801bae2:	f7e8 fd49 	bl	8004578 <UTIL_SEQ_Idle>
 801bae6:	69fb      	ldr	r3, [r7, #28]
 801bae8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	f383 8810 	msr	PRIMASK, r3
}
 801baf0:	46c0      	nop			@ (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801baf2:	f000 f86c 	bl	801bbce <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801baf6:	4b03      	ldr	r3, [pc, #12]	@ (801bb04 <UTIL_SEQ_Run+0x1a4>)
 801baf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bafa:	601a      	str	r2, [r3, #0]

  return;
 801bafc:	46c0      	nop			@ (mov r8, r8)
}
 801bafe:	46bd      	mov	sp, r7
 801bb00:	b00c      	add	sp, #48	@ 0x30
 801bb02:	bd80      	pop	{r7, pc}
 801bb04:	200001cc 	.word	0x200001cc
 801bb08:	20001998 	.word	0x20001998
 801bb0c:	200001c8 	.word	0x200001c8
 801bb10:	20001914 	.word	0x20001914
 801bb14:	20001908 	.word	0x20001908
 801bb18:	20001918 	.word	0x20001918
 801bb1c:	2000190c 	.word	0x2000190c
 801bb20:	20001910 	.word	0x20001910

0801bb24 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b088      	sub	sp, #32
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	60f8      	str	r0, [r7, #12]
 801bb2c:	60b9      	str	r1, [r7, #8]
 801bb2e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb30:	f3ef 8310 	mrs	r3, PRIMASK
 801bb34:	617b      	str	r3, [r7, #20]
  return(result);
 801bb36:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801bb38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb3a:	b672      	cpsid	i
}
 801bb3c:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	0018      	movs	r0, r3
 801bb42:	f000 f849 	bl	801bbd8 <SEQ_BitPosition>
 801bb46:	0003      	movs	r3, r0
 801bb48:	001a      	movs	r2, r3
 801bb4a:	4b07      	ldr	r3, [pc, #28]	@ (801bb68 <UTIL_SEQ_RegTask+0x44>)
 801bb4c:	0092      	lsls	r2, r2, #2
 801bb4e:	6879      	ldr	r1, [r7, #4]
 801bb50:	50d1      	str	r1, [r2, r3]
 801bb52:	69fb      	ldr	r3, [r7, #28]
 801bb54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb56:	69bb      	ldr	r3, [r7, #24]
 801bb58:	f383 8810 	msr	PRIMASK, r3
}
 801bb5c:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801bb5e:	46c0      	nop			@ (mov r8, r8)
}
 801bb60:	46bd      	mov	sp, r7
 801bb62:	b008      	add	sp, #32
 801bb64:	bd80      	pop	{r7, pc}
 801bb66:	46c0      	nop			@ (mov r8, r8)
 801bb68:	20001918 	.word	0x20001918

0801bb6c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b086      	sub	sp, #24
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
 801bb74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb76:	f3ef 8310 	mrs	r3, PRIMASK
 801bb7a:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb7c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bb7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb80:	b672      	cpsid	i
}
 801bb82:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
 801bb84:	4b0d      	ldr	r3, [pc, #52]	@ (801bbbc <UTIL_SEQ_SetTask+0x50>)
 801bb86:	681a      	ldr	r2, [r3, #0]
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	431a      	orrs	r2, r3
 801bb8c:	4b0b      	ldr	r3, [pc, #44]	@ (801bbbc <UTIL_SEQ_SetTask+0x50>)
 801bb8e:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801bb90:	4b0b      	ldr	r3, [pc, #44]	@ (801bbc0 <UTIL_SEQ_SetTask+0x54>)
 801bb92:	683a      	ldr	r2, [r7, #0]
 801bb94:	00d2      	lsls	r2, r2, #3
 801bb96:	58d2      	ldr	r2, [r2, r3]
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	431a      	orrs	r2, r3
 801bb9c:	0011      	movs	r1, r2
 801bb9e:	4b08      	ldr	r3, [pc, #32]	@ (801bbc0 <UTIL_SEQ_SetTask+0x54>)
 801bba0:	683a      	ldr	r2, [r7, #0]
 801bba2:	00d2      	lsls	r2, r2, #3
 801bba4:	50d1      	str	r1, [r2, r3]
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbaa:	693b      	ldr	r3, [r7, #16]
 801bbac:	f383 8810 	msr	PRIMASK, r3
}
 801bbb0:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801bbb2:	46c0      	nop			@ (mov r8, r8)
}
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	b006      	add	sp, #24
 801bbb8:	bd80      	pop	{r7, pc}
 801bbba:	46c0      	nop			@ (mov r8, r8)
 801bbbc:	20001908 	.word	0x20001908
 801bbc0:	20001998 	.word	0x20001998

0801bbc4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801bbc4:	b580      	push	{r7, lr}
 801bbc6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bbc8:	46c0      	nop			@ (mov r8, r8)
}
 801bbca:	46bd      	mov	sp, r7
 801bbcc:	bd80      	pop	{r7, pc}

0801bbce <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801bbce:	b580      	push	{r7, lr}
 801bbd0:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bbd2:	46c0      	nop			@ (mov r8, r8)
}
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bd80      	pop	{r7, pc}

0801bbd8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b084      	sub	sp, #16
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801bbe0:	210f      	movs	r1, #15
 801bbe2:	187b      	adds	r3, r7, r1
 801bbe4:	2200      	movs	r2, #0
 801bbe6:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801bbe8:	687a      	ldr	r2, [r7, #4]
 801bbea:	2380      	movs	r3, #128	@ 0x80
 801bbec:	025b      	lsls	r3, r3, #9
 801bbee:	429a      	cmp	r2, r3
 801bbf0:	d205      	bcs.n	801bbfe <SEQ_BitPosition+0x26>
 801bbf2:	187b      	adds	r3, r7, r1
 801bbf4:	2210      	movs	r2, #16
 801bbf6:	701a      	strb	r2, [r3, #0]
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	041b      	lsls	r3, r3, #16
 801bbfc:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801bbfe:	687a      	ldr	r2, [r7, #4]
 801bc00:	2380      	movs	r3, #128	@ 0x80
 801bc02:	045b      	lsls	r3, r3, #17
 801bc04:	429a      	cmp	r2, r3
 801bc06:	d208      	bcs.n	801bc1a <SEQ_BitPosition+0x42>
 801bc08:	220f      	movs	r2, #15
 801bc0a:	18bb      	adds	r3, r7, r2
 801bc0c:	18ba      	adds	r2, r7, r2
 801bc0e:	7812      	ldrb	r2, [r2, #0]
 801bc10:	3208      	adds	r2, #8
 801bc12:	701a      	strb	r2, [r3, #0]
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	021b      	lsls	r3, r3, #8
 801bc18:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801bc1a:	687a      	ldr	r2, [r7, #4]
 801bc1c:	2380      	movs	r3, #128	@ 0x80
 801bc1e:	055b      	lsls	r3, r3, #21
 801bc20:	429a      	cmp	r2, r3
 801bc22:	d208      	bcs.n	801bc36 <SEQ_BitPosition+0x5e>
 801bc24:	220f      	movs	r2, #15
 801bc26:	18bb      	adds	r3, r7, r2
 801bc28:	18ba      	adds	r2, r7, r2
 801bc2a:	7812      	ldrb	r2, [r2, #0]
 801bc2c:	3204      	adds	r2, #4
 801bc2e:	701a      	strb	r2, [r3, #0]
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	011b      	lsls	r3, r3, #4
 801bc34:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	0f1b      	lsrs	r3, r3, #28
 801bc3a:	4a08      	ldr	r2, [pc, #32]	@ (801bc5c <SEQ_BitPosition+0x84>)
 801bc3c:	5cd1      	ldrb	r1, [r2, r3]
 801bc3e:	200f      	movs	r0, #15
 801bc40:	183b      	adds	r3, r7, r0
 801bc42:	183a      	adds	r2, r7, r0
 801bc44:	7812      	ldrb	r2, [r2, #0]
 801bc46:	188a      	adds	r2, r1, r2
 801bc48:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801bc4a:	183b      	adds	r3, r7, r0
 801bc4c:	781b      	ldrb	r3, [r3, #0]
 801bc4e:	221f      	movs	r2, #31
 801bc50:	1ad3      	subs	r3, r2, r3
 801bc52:	b2db      	uxtb	r3, r3
}
 801bc54:	0018      	movs	r0, r3
 801bc56:	46bd      	mov	sp, r7
 801bc58:	b004      	add	sp, #16
 801bc5a:	bd80      	pop	{r7, pc}
 801bc5c:	0801e79c 	.word	0x0801e79c

0801bc60 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801bc60:	b082      	sub	sp, #8
 801bc62:	b580      	push	{r7, lr}
 801bc64:	b086      	sub	sp, #24
 801bc66:	af00      	add	r7, sp, #0
 801bc68:	60f8      	str	r0, [r7, #12]
 801bc6a:	1d38      	adds	r0, r7, #4
 801bc6c:	6001      	str	r1, [r0, #0]
 801bc6e:	6042      	str	r2, [r0, #4]
 801bc70:	2204      	movs	r2, #4
 801bc72:	2020      	movs	r0, #32
 801bc74:	1812      	adds	r2, r2, r0
 801bc76:	19d2      	adds	r2, r2, r7
 801bc78:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801bc7a:	2110      	movs	r1, #16
 801bc7c:	187b      	adds	r3, r7, r1
 801bc7e:	2200      	movs	r2, #0
 801bc80:	601a      	str	r2, [r3, #0]
 801bc82:	187b      	adds	r3, r7, r1
 801bc84:	2200      	movs	r2, #0
 801bc86:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801bc88:	1d3b      	adds	r3, r7, #4
 801bc8a:	681a      	ldr	r2, [r3, #0]
 801bc8c:	2304      	movs	r3, #4
 801bc8e:	181b      	adds	r3, r3, r0
 801bc90:	19db      	adds	r3, r3, r7
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	18d2      	adds	r2, r2, r3
 801bc96:	187b      	adds	r3, r7, r1
 801bc98:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801bc9a:	1d3b      	adds	r3, r7, #4
 801bc9c:	2204      	movs	r2, #4
 801bc9e:	5e9b      	ldrsh	r3, [r3, r2]
 801bca0:	b29a      	uxth	r2, r3
 801bca2:	2304      	movs	r3, #4
 801bca4:	181b      	adds	r3, r3, r0
 801bca6:	19db      	adds	r3, r3, r7
 801bca8:	2004      	movs	r0, #4
 801bcaa:	5e1b      	ldrsh	r3, [r3, r0]
 801bcac:	b29b      	uxth	r3, r3
 801bcae:	18d3      	adds	r3, r2, r3
 801bcb0:	b29b      	uxth	r3, r3
 801bcb2:	b21a      	sxth	r2, r3
 801bcb4:	187b      	adds	r3, r7, r1
 801bcb6:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801bcb8:	187b      	adds	r3, r7, r1
 801bcba:	2204      	movs	r2, #4
 801bcbc:	5e9a      	ldrsh	r2, [r3, r2]
 801bcbe:	23fa      	movs	r3, #250	@ 0xfa
 801bcc0:	009b      	lsls	r3, r3, #2
 801bcc2:	429a      	cmp	r2, r3
 801bcc4:	db0f      	blt.n	801bce6 <SysTimeAdd+0x86>
  {
    c.Seconds++;
 801bcc6:	187b      	adds	r3, r7, r1
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	1c5a      	adds	r2, r3, #1
 801bccc:	187b      	adds	r3, r7, r1
 801bcce:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801bcd0:	187b      	adds	r3, r7, r1
 801bcd2:	2204      	movs	r2, #4
 801bcd4:	5e9b      	ldrsh	r3, [r3, r2]
 801bcd6:	b29b      	uxth	r3, r3
 801bcd8:	4a09      	ldr	r2, [pc, #36]	@ (801bd00 <SysTimeAdd+0xa0>)
 801bcda:	4694      	mov	ip, r2
 801bcdc:	4463      	add	r3, ip
 801bcde:	b29b      	uxth	r3, r3
 801bce0:	b21a      	sxth	r2, r3
 801bce2:	187b      	adds	r3, r7, r1
 801bce4:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	2210      	movs	r2, #16
 801bcea:	18ba      	adds	r2, r7, r2
 801bcec:	ca03      	ldmia	r2!, {r0, r1}
 801bcee:	c303      	stmia	r3!, {r0, r1}
}
 801bcf0:	68f8      	ldr	r0, [r7, #12]
 801bcf2:	46bd      	mov	sp, r7
 801bcf4:	b006      	add	sp, #24
 801bcf6:	bc80      	pop	{r7}
 801bcf8:	bc08      	pop	{r3}
 801bcfa:	b002      	add	sp, #8
 801bcfc:	4718      	bx	r3
 801bcfe:	46c0      	nop			@ (mov r8, r8)
 801bd00:	fffffc18 	.word	0xfffffc18

0801bd04 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801bd04:	b082      	sub	sp, #8
 801bd06:	b580      	push	{r7, lr}
 801bd08:	b086      	sub	sp, #24
 801bd0a:	af00      	add	r7, sp, #0
 801bd0c:	60f8      	str	r0, [r7, #12]
 801bd0e:	1d38      	adds	r0, r7, #4
 801bd10:	6001      	str	r1, [r0, #0]
 801bd12:	6042      	str	r2, [r0, #4]
 801bd14:	2204      	movs	r2, #4
 801bd16:	2020      	movs	r0, #32
 801bd18:	1812      	adds	r2, r2, r0
 801bd1a:	19d2      	adds	r2, r2, r7
 801bd1c:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801bd1e:	2110      	movs	r1, #16
 801bd20:	187b      	adds	r3, r7, r1
 801bd22:	2200      	movs	r2, #0
 801bd24:	601a      	str	r2, [r3, #0]
 801bd26:	187b      	adds	r3, r7, r1
 801bd28:	2200      	movs	r2, #0
 801bd2a:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801bd2c:	1d3b      	adds	r3, r7, #4
 801bd2e:	681a      	ldr	r2, [r3, #0]
 801bd30:	2304      	movs	r3, #4
 801bd32:	181b      	adds	r3, r3, r0
 801bd34:	19db      	adds	r3, r3, r7
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	1ad2      	subs	r2, r2, r3
 801bd3a:	187b      	adds	r3, r7, r1
 801bd3c:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801bd3e:	1d3b      	adds	r3, r7, #4
 801bd40:	2204      	movs	r2, #4
 801bd42:	5e9b      	ldrsh	r3, [r3, r2]
 801bd44:	b29a      	uxth	r2, r3
 801bd46:	2304      	movs	r3, #4
 801bd48:	181b      	adds	r3, r3, r0
 801bd4a:	19db      	adds	r3, r3, r7
 801bd4c:	2004      	movs	r0, #4
 801bd4e:	5e1b      	ldrsh	r3, [r3, r0]
 801bd50:	b29b      	uxth	r3, r3
 801bd52:	1ad3      	subs	r3, r2, r3
 801bd54:	b29b      	uxth	r3, r3
 801bd56:	b21a      	sxth	r2, r3
 801bd58:	187b      	adds	r3, r7, r1
 801bd5a:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801bd5c:	187b      	adds	r3, r7, r1
 801bd5e:	2204      	movs	r2, #4
 801bd60:	5e9b      	ldrsh	r3, [r3, r2]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	da10      	bge.n	801bd88 <SysTimeSub+0x84>
  {
    c.Seconds--;
 801bd66:	187b      	adds	r3, r7, r1
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	1e5a      	subs	r2, r3, #1
 801bd6c:	187b      	adds	r3, r7, r1
 801bd6e:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801bd70:	187b      	adds	r3, r7, r1
 801bd72:	2204      	movs	r2, #4
 801bd74:	5e9b      	ldrsh	r3, [r3, r2]
 801bd76:	b29b      	uxth	r3, r3
 801bd78:	22fa      	movs	r2, #250	@ 0xfa
 801bd7a:	0092      	lsls	r2, r2, #2
 801bd7c:	4694      	mov	ip, r2
 801bd7e:	4463      	add	r3, ip
 801bd80:	b29b      	uxth	r3, r3
 801bd82:	b21a      	sxth	r2, r3
 801bd84:	187b      	adds	r3, r7, r1
 801bd86:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	2210      	movs	r2, #16
 801bd8c:	18ba      	adds	r2, r7, r2
 801bd8e:	ca03      	ldmia	r2!, {r0, r1}
 801bd90:	c303      	stmia	r3!, {r0, r1}
}
 801bd92:	68f8      	ldr	r0, [r7, #12]
 801bd94:	46bd      	mov	sp, r7
 801bd96:	b006      	add	sp, #24
 801bd98:	bc80      	pop	{r7}
 801bd9a:	bc08      	pop	{r3}
 801bd9c:	b002      	add	sp, #8
 801bd9e:	4718      	bx	r3

0801bda0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801bda0:	b5b0      	push	{r4, r5, r7, lr}
 801bda2:	b088      	sub	sp, #32
 801bda4:	af02      	add	r7, sp, #8
 801bda6:	003b      	movs	r3, r7
 801bda8:	6018      	str	r0, [r3, #0]
 801bdaa:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bdac:	2108      	movs	r1, #8
 801bdae:	187b      	adds	r3, r7, r1
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	601a      	str	r2, [r3, #0]
 801bdb4:	187b      	adds	r3, r7, r1
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bdba:	4b14      	ldr	r3, [pc, #80]	@ (801be0c <SysTimeSet+0x6c>)
 801bdbc:	691b      	ldr	r3, [r3, #16]
 801bdbe:	000c      	movs	r4, r1
 801bdc0:	187a      	adds	r2, r7, r1
 801bdc2:	3204      	adds	r2, #4
 801bdc4:	0010      	movs	r0, r2
 801bdc6:	4798      	blx	r3
 801bdc8:	0002      	movs	r2, r0
 801bdca:	0021      	movs	r1, r4
 801bdcc:	187b      	adds	r3, r7, r1
 801bdce:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801bdd0:	2510      	movs	r5, #16
 801bdd2:	197c      	adds	r4, r7, r5
 801bdd4:	187b      	adds	r3, r7, r1
 801bdd6:	003a      	movs	r2, r7
 801bdd8:	4669      	mov	r1, sp
 801bdda:	6858      	ldr	r0, [r3, #4]
 801bddc:	6008      	str	r0, [r1, #0]
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	6811      	ldr	r1, [r2, #0]
 801bde2:	6852      	ldr	r2, [r2, #4]
 801bde4:	0020      	movs	r0, r4
 801bde6:	f7ff ff8d 	bl	801bd04 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801bdea:	4b08      	ldr	r3, [pc, #32]	@ (801be0c <SysTimeSet+0x6c>)
 801bdec:	681a      	ldr	r2, [r3, #0]
 801bdee:	197b      	adds	r3, r7, r5
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	0018      	movs	r0, r3
 801bdf4:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801bdf6:	4b05      	ldr	r3, [pc, #20]	@ (801be0c <SysTimeSet+0x6c>)
 801bdf8:	689b      	ldr	r3, [r3, #8]
 801bdfa:	197a      	adds	r2, r7, r5
 801bdfc:	2104      	movs	r1, #4
 801bdfe:	5e52      	ldrsh	r2, [r2, r1]
 801be00:	0010      	movs	r0, r2
 801be02:	4798      	blx	r3
}
 801be04:	46c0      	nop			@ (mov r8, r8)
 801be06:	46bd      	mov	sp, r7
 801be08:	b006      	add	sp, #24
 801be0a:	bdb0      	pop	{r4, r5, r7, pc}
 801be0c:	0801da24 	.word	0x0801da24

0801be10 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801be10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be12:	b08b      	sub	sp, #44	@ 0x2c
 801be14:	af02      	add	r7, sp, #8
 801be16:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801be18:	2518      	movs	r5, #24
 801be1a:	197b      	adds	r3, r7, r5
 801be1c:	2200      	movs	r2, #0
 801be1e:	601a      	str	r2, [r3, #0]
 801be20:	197b      	adds	r3, r7, r5
 801be22:	2200      	movs	r2, #0
 801be24:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801be26:	2410      	movs	r4, #16
 801be28:	193b      	adds	r3, r7, r4
 801be2a:	2200      	movs	r2, #0
 801be2c:	601a      	str	r2, [r3, #0]
 801be2e:	193b      	adds	r3, r7, r4
 801be30:	2200      	movs	r2, #0
 801be32:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801be34:	4b16      	ldr	r3, [pc, #88]	@ (801be90 <SysTimeGet+0x80>)
 801be36:	691b      	ldr	r3, [r3, #16]
 801be38:	197a      	adds	r2, r7, r5
 801be3a:	3204      	adds	r2, #4
 801be3c:	0010      	movs	r0, r2
 801be3e:	4798      	blx	r3
 801be40:	0002      	movs	r2, r0
 801be42:	197b      	adds	r3, r7, r5
 801be44:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801be46:	4b12      	ldr	r3, [pc, #72]	@ (801be90 <SysTimeGet+0x80>)
 801be48:	68db      	ldr	r3, [r3, #12]
 801be4a:	4798      	blx	r3
 801be4c:	0003      	movs	r3, r0
 801be4e:	b21a      	sxth	r2, r3
 801be50:	2608      	movs	r6, #8
 801be52:	19bb      	adds	r3, r7, r6
 801be54:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801be56:	4b0e      	ldr	r3, [pc, #56]	@ (801be90 <SysTimeGet+0x80>)
 801be58:	685b      	ldr	r3, [r3, #4]
 801be5a:	4798      	blx	r3
 801be5c:	0002      	movs	r2, r0
 801be5e:	0031      	movs	r1, r6
 801be60:	187b      	adds	r3, r7, r1
 801be62:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801be64:	0026      	movs	r6, r4
 801be66:	193c      	adds	r4, r7, r4
 801be68:	197b      	adds	r3, r7, r5
 801be6a:	187a      	adds	r2, r7, r1
 801be6c:	4669      	mov	r1, sp
 801be6e:	6858      	ldr	r0, [r3, #4]
 801be70:	6008      	str	r0, [r1, #0]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	6811      	ldr	r1, [r2, #0]
 801be76:	6852      	ldr	r2, [r2, #4]
 801be78:	0020      	movs	r0, r4
 801be7a:	f7ff fef1 	bl	801bc60 <SysTimeAdd>

  return sysTime;
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	19ba      	adds	r2, r7, r6
 801be82:	ca03      	ldmia	r2!, {r0, r1}
 801be84:	c303      	stmia	r3!, {r0, r1}
}
 801be86:	6878      	ldr	r0, [r7, #4]
 801be88:	46bd      	mov	sp, r7
 801be8a:	b009      	add	sp, #36	@ 0x24
 801be8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be8e:	46c0      	nop			@ (mov r8, r8)
 801be90:	0801da24 	.word	0x0801da24

0801be94 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801be94:	b590      	push	{r4, r7, lr}
 801be96:	b085      	sub	sp, #20
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801be9c:	2108      	movs	r1, #8
 801be9e:	187b      	adds	r3, r7, r1
 801bea0:	2200      	movs	r2, #0
 801bea2:	601a      	str	r2, [r3, #0]
 801bea4:	187b      	adds	r3, r7, r1
 801bea6:	2200      	movs	r2, #0
 801bea8:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801beaa:	4b09      	ldr	r3, [pc, #36]	@ (801bed0 <SysTimeGetMcuTime+0x3c>)
 801beac:	691b      	ldr	r3, [r3, #16]
 801beae:	000c      	movs	r4, r1
 801beb0:	187a      	adds	r2, r7, r1
 801beb2:	3204      	adds	r2, #4
 801beb4:	0010      	movs	r0, r2
 801beb6:	4798      	blx	r3
 801beb8:	0002      	movs	r2, r0
 801beba:	193b      	adds	r3, r7, r4
 801bebc:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	193a      	adds	r2, r7, r4
 801bec2:	ca03      	ldmia	r2!, {r0, r1}
 801bec4:	c303      	stmia	r3!, {r0, r1}
}
 801bec6:	6878      	ldr	r0, [r7, #4]
 801bec8:	46bd      	mov	sp, r7
 801beca:	b005      	add	sp, #20
 801becc:	bd90      	pop	{r4, r7, pc}
 801bece:	46c0      	nop			@ (mov r8, r8)
 801bed0:	0801da24 	.word	0x0801da24

0801bed4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801bed8:	4b04      	ldr	r3, [pc, #16]	@ (801beec <UTIL_TIMER_Init+0x18>)
 801beda:	2200      	movs	r2, #0
 801bedc:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801bede:	4b04      	ldr	r3, [pc, #16]	@ (801bef0 <UTIL_TIMER_Init+0x1c>)
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	4798      	blx	r3
 801bee4:	0003      	movs	r3, r0
}
 801bee6:	0018      	movs	r0, r3
 801bee8:	46bd      	mov	sp, r7
 801beea:	bd80      	pop	{r7, pc}
 801beec:	200019a8 	.word	0x200019a8
 801bef0:	0801d9f8 	.word	0x0801d9f8

0801bef4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801bef4:	b580      	push	{r7, lr}
 801bef6:	b084      	sub	sp, #16
 801bef8:	af00      	add	r7, sp, #0
 801befa:	60f8      	str	r0, [r7, #12]
 801befc:	60b9      	str	r1, [r7, #8]
 801befe:	603b      	str	r3, [r7, #0]
 801bf00:	1dfb      	adds	r3, r7, #7
 801bf02:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d025      	beq.n	801bf56 <UTIL_TIMER_Create+0x62>
 801bf0a:	683b      	ldr	r3, [r7, #0]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d022      	beq.n	801bf56 <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801bf10:	68fb      	ldr	r3, [r7, #12]
 801bf12:	2200      	movs	r2, #0
 801bf14:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801bf16:	4b12      	ldr	r3, [pc, #72]	@ (801bf60 <UTIL_TIMER_Create+0x6c>)
 801bf18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf1a:	68ba      	ldr	r2, [r7, #8]
 801bf1c:	0010      	movs	r0, r2
 801bf1e:	4798      	blx	r3
 801bf20:	0002      	movs	r2, r0
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	2200      	movs	r2, #0
 801bf2a:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	2200      	movs	r2, #0
 801bf30:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	2200      	movs	r2, #0
 801bf36:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	683a      	ldr	r2, [r7, #0]
 801bf3c:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	69ba      	ldr	r2, [r7, #24]
 801bf42:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	1dfa      	adds	r2, r7, #7
 801bf48:	7812      	ldrb	r2, [r2, #0]
 801bf4a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801bf52:	2300      	movs	r3, #0
 801bf54:	e000      	b.n	801bf58 <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801bf56:	2301      	movs	r3, #1
  }
}
 801bf58:	0018      	movs	r0, r3
 801bf5a:	46bd      	mov	sp, r7
 801bf5c:	b004      	add	sp, #16
 801bf5e:	bd80      	pop	{r7, pc}
 801bf60:	0801d9f8 	.word	0x0801d9f8

0801bf64 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b08a      	sub	sp, #40	@ 0x28
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bf6c:	2327      	movs	r3, #39	@ 0x27
 801bf6e:	18fb      	adds	r3, r7, r3
 801bf70:	2200      	movs	r2, #0
 801bf72:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d05d      	beq.n	801c036 <UTIL_TIMER_Start+0xd2>
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	0018      	movs	r0, r3
 801bf7e:	f000 f9cb 	bl	801c318 <TimerExists>
 801bf82:	0003      	movs	r3, r0
 801bf84:	001a      	movs	r2, r3
 801bf86:	2301      	movs	r3, #1
 801bf88:	4053      	eors	r3, r2
 801bf8a:	b2db      	uxtb	r3, r3
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d052      	beq.n	801c036 <UTIL_TIMER_Start+0xd2>
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	7a5b      	ldrb	r3, [r3, #9]
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d14e      	bne.n	801c036 <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf98:	f3ef 8310 	mrs	r3, PRIMASK
 801bf9c:	613b      	str	r3, [r7, #16]
  return(result);
 801bf9e:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bfa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfa2:	b672      	cpsid	i
}
 801bfa4:	46c0      	nop			@ (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	685b      	ldr	r3, [r3, #4]
 801bfaa:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801bfac:	4b27      	ldr	r3, [pc, #156]	@ (801c04c <UTIL_TIMER_Start+0xe8>)
 801bfae:	6a1b      	ldr	r3, [r3, #32]
 801bfb0:	4798      	blx	r3
 801bfb2:	0003      	movs	r3, r0
 801bfb4:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801bfb6:	6a3a      	ldr	r2, [r7, #32]
 801bfb8:	69bb      	ldr	r3, [r7, #24]
 801bfba:	429a      	cmp	r2, r3
 801bfbc:	d201      	bcs.n	801bfc2 <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801bfbe:	69bb      	ldr	r3, [r7, #24]
 801bfc0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	6a3a      	ldr	r2, [r7, #32]
 801bfc6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	2200      	movs	r2, #0
 801bfcc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	2201      	movs	r2, #1
 801bfd2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	2200      	movs	r2, #0
 801bfd8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801bfda:	4b1d      	ldr	r3, [pc, #116]	@ (801c050 <UTIL_TIMER_Start+0xec>)
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d107      	bne.n	801bff2 <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801bfe2:	4b1a      	ldr	r3, [pc, #104]	@ (801c04c <UTIL_TIMER_Start+0xe8>)
 801bfe4:	691b      	ldr	r3, [r3, #16]
 801bfe6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	0018      	movs	r0, r3
 801bfec:	f000 fa08 	bl	801c400 <TimerInsertNewHeadTimer>
 801bff0:	e01a      	b.n	801c028 <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801bff2:	4b16      	ldr	r3, [pc, #88]	@ (801c04c <UTIL_TIMER_Start+0xe8>)
 801bff4:	699b      	ldr	r3, [r3, #24]
 801bff6:	4798      	blx	r3
 801bff8:	0003      	movs	r3, r0
 801bffa:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	681a      	ldr	r2, [r3, #0]
 801c000:	697b      	ldr	r3, [r7, #20]
 801c002:	18d2      	adds	r2, r2, r3
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	681a      	ldr	r2, [r3, #0]
 801c00c:	4b10      	ldr	r3, [pc, #64]	@ (801c050 <UTIL_TIMER_Start+0xec>)
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	429a      	cmp	r2, r3
 801c014:	d204      	bcs.n	801c020 <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	0018      	movs	r0, r3
 801c01a:	f000 f9f1 	bl	801c400 <TimerInsertNewHeadTimer>
 801c01e:	e003      	b.n	801c028 <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	0018      	movs	r0, r3
 801c024:	f000 f9be 	bl	801c3a4 <TimerInsertTimer>
 801c028:	69fb      	ldr	r3, [r7, #28]
 801c02a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	f383 8810 	msr	PRIMASK, r3
}
 801c032:	46c0      	nop			@ (mov r8, r8)
  {
 801c034:	e003      	b.n	801c03e <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c036:	2327      	movs	r3, #39	@ 0x27
 801c038:	18fb      	adds	r3, r7, r3
 801c03a:	2201      	movs	r2, #1
 801c03c:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801c03e:	2327      	movs	r3, #39	@ 0x27
 801c040:	18fb      	adds	r3, r7, r3
 801c042:	781b      	ldrb	r3, [r3, #0]
}
 801c044:	0018      	movs	r0, r3
 801c046:	46bd      	mov	sp, r7
 801c048:	b00a      	add	sp, #40	@ 0x28
 801c04a:	bd80      	pop	{r7, pc}
 801c04c:	0801d9f8 	.word	0x0801d9f8
 801c050:	200019a8 	.word	0x200019a8

0801c054 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c054:	b580      	push	{r7, lr}
 801c056:	b088      	sub	sp, #32
 801c058:	af00      	add	r7, sp, #0
 801c05a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c05c:	231f      	movs	r3, #31
 801c05e:	18fb      	adds	r3, r7, r3
 801c060:	2200      	movs	r2, #0
 801c062:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d05d      	beq.n	801c126 <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c06a:	f3ef 8310 	mrs	r3, PRIMASK
 801c06e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c070:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c074:	b672      	cpsid	i
}
 801c076:	46c0      	nop			@ (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c078:	4b30      	ldr	r3, [pc, #192]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c07e:	4b2f      	ldr	r3, [pc, #188]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	2201      	movs	r2, #1
 801c088:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c08a:	4b2c      	ldr	r3, [pc, #176]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d043      	beq.n	801c11a <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	2200      	movs	r2, #0
 801c096:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c098:	4b28      	ldr	r3, [pc, #160]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	687a      	ldr	r2, [r7, #4]
 801c09e:	429a      	cmp	r2, r3
 801c0a0:	d134      	bne.n	801c10c <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801c0a2:	4b26      	ldr	r3, [pc, #152]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c0aa:	4b24      	ldr	r3, [pc, #144]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	695b      	ldr	r3, [r3, #20]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d00a      	beq.n	801c0ca <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801c0b4:	4b21      	ldr	r3, [pc, #132]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	695a      	ldr	r2, [r3, #20]
 801c0ba:	4b20      	ldr	r3, [pc, #128]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c0bc:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801c0be:	4b1f      	ldr	r3, [pc, #124]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	0018      	movs	r0, r3
 801c0c4:	f000 f944 	bl	801c350 <TimerSetTimeout>
 801c0c8:	e023      	b.n	801c112 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c0ca:	4b1d      	ldr	r3, [pc, #116]	@ (801c140 <UTIL_TIMER_Stop+0xec>)
 801c0cc:	68db      	ldr	r3, [r3, #12]
 801c0ce:	4798      	blx	r3
            TimerListHead = NULL;
 801c0d0:	4b1a      	ldr	r3, [pc, #104]	@ (801c13c <UTIL_TIMER_Stop+0xe8>)
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	601a      	str	r2, [r3, #0]
 801c0d6:	e01c      	b.n	801c112 <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c0d8:	697a      	ldr	r2, [r7, #20]
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	429a      	cmp	r2, r3
 801c0de:	d110      	bne.n	801c102 <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801c0e0:	697b      	ldr	r3, [r7, #20]
 801c0e2:	695b      	ldr	r3, [r3, #20]
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d006      	beq.n	801c0f6 <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801c0e8:	697b      	ldr	r3, [r7, #20]
 801c0ea:	695b      	ldr	r3, [r3, #20]
 801c0ec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c0ee:	69bb      	ldr	r3, [r7, #24]
 801c0f0:	697a      	ldr	r2, [r7, #20]
 801c0f2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c0f4:	e00d      	b.n	801c112 <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c0fa:	69bb      	ldr	r3, [r7, #24]
 801c0fc:	697a      	ldr	r2, [r7, #20]
 801c0fe:	615a      	str	r2, [r3, #20]
            break;
 801c100:	e007      	b.n	801c112 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c106:	697b      	ldr	r3, [r7, #20]
 801c108:	695b      	ldr	r3, [r3, #20]
 801c10a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c10c:	697b      	ldr	r3, [r7, #20]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d1e2      	bne.n	801c0d8 <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c112:	231f      	movs	r3, #31
 801c114:	18fb      	adds	r3, r7, r3
 801c116:	2200      	movs	r2, #0
 801c118:	701a      	strb	r2, [r3, #0]
 801c11a:	693b      	ldr	r3, [r7, #16]
 801c11c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c11e:	68bb      	ldr	r3, [r7, #8]
 801c120:	f383 8810 	msr	PRIMASK, r3
}
 801c124:	e003      	b.n	801c12e <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c126:	231f      	movs	r3, #31
 801c128:	18fb      	adds	r3, r7, r3
 801c12a:	2201      	movs	r2, #1
 801c12c:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801c12e:	231f      	movs	r3, #31
 801c130:	18fb      	adds	r3, r7, r3
 801c132:	781b      	ldrb	r3, [r3, #0]
}
 801c134:	0018      	movs	r0, r3
 801c136:	46bd      	mov	sp, r7
 801c138:	b008      	add	sp, #32
 801c13a:	bd80      	pop	{r7, pc}
 801c13c:	200019a8 	.word	0x200019a8
 801c140:	0801d9f8 	.word	0x0801d9f8

0801c144 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c144:	b590      	push	{r4, r7, lr}
 801c146:	b085      	sub	sp, #20
 801c148:	af00      	add	r7, sp, #0
 801c14a:	6078      	str	r0, [r7, #4]
 801c14c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c14e:	210f      	movs	r1, #15
 801c150:	187b      	adds	r3, r7, r1
 801c152:	2200      	movs	r2, #0
 801c154:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d103      	bne.n	801c164 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c15c:	187b      	adds	r3, r7, r1
 801c15e:	2201      	movs	r2, #1
 801c160:	701a      	strb	r2, [r3, #0]
 801c162:	e019      	b.n	801c198 <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c164:	4b10      	ldr	r3, [pc, #64]	@ (801c1a8 <UTIL_TIMER_SetPeriod+0x64>)
 801c166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c168:	683a      	ldr	r2, [r7, #0]
 801c16a:	0010      	movs	r0, r2
 801c16c:	4798      	blx	r3
 801c16e:	0002      	movs	r2, r0
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	0018      	movs	r0, r3
 801c178:	f000 f8ce 	bl	801c318 <TimerExists>
 801c17c:	1e03      	subs	r3, r0, #0
 801c17e:	d00b      	beq.n	801c198 <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	0018      	movs	r0, r3
 801c184:	f7ff ff66 	bl	801c054 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c188:	230f      	movs	r3, #15
 801c18a:	18fc      	adds	r4, r7, r3
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	0018      	movs	r0, r3
 801c190:	f7ff fee8 	bl	801bf64 <UTIL_TIMER_Start>
 801c194:	0003      	movs	r3, r0
 801c196:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801c198:	230f      	movs	r3, #15
 801c19a:	18fb      	adds	r3, r7, r3
 801c19c:	781b      	ldrb	r3, [r3, #0]
}
 801c19e:	0018      	movs	r0, r3
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	b005      	add	sp, #20
 801c1a4:	bd90      	pop	{r4, r7, pc}
 801c1a6:	46c0      	nop			@ (mov r8, r8)
 801c1a8:	0801d9f8 	.word	0x0801d9f8

0801c1ac <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c1ac:	b590      	push	{r4, r7, lr}
 801c1ae:	b089      	sub	sp, #36	@ 0x24
 801c1b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1b2:	f3ef 8310 	mrs	r3, PRIMASK
 801c1b6:	60bb      	str	r3, [r7, #8]
  return(result);
 801c1b8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c1ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1bc:	b672      	cpsid	i
}
 801c1be:	46c0      	nop			@ (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c1c0:	4b3a      	ldr	r3, [pc, #232]	@ (801c2ac <UTIL_TIMER_IRQ_Handler+0x100>)
 801c1c2:	695b      	ldr	r3, [r3, #20]
 801c1c4:	4798      	blx	r3
 801c1c6:	0003      	movs	r3, r0
 801c1c8:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c1ca:	4b38      	ldr	r3, [pc, #224]	@ (801c2ac <UTIL_TIMER_IRQ_Handler+0x100>)
 801c1cc:	691b      	ldr	r3, [r3, #16]
 801c1ce:	4798      	blx	r3
 801c1d0:	0003      	movs	r3, r0
 801c1d2:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c1d4:	693a      	ldr	r2, [r7, #16]
 801c1d6:	697b      	ldr	r3, [r7, #20]
 801c1d8:	1ad3      	subs	r3, r2, r3
 801c1da:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c1dc:	4b34      	ldr	r3, [pc, #208]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d038      	beq.n	801c256 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801c1e4:	4b32      	ldr	r3, [pc, #200]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c1ea:	69fb      	ldr	r3, [r7, #28]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	68fa      	ldr	r2, [r7, #12]
 801c1f0:	429a      	cmp	r2, r3
 801c1f2:	d206      	bcs.n	801c202 <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801c1f4:	69fb      	ldr	r3, [r7, #28]
 801c1f6:	681a      	ldr	r2, [r3, #0]
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	1ad2      	subs	r2, r2, r3
 801c1fc:	69fb      	ldr	r3, [r7, #28]
 801c1fe:	601a      	str	r2, [r3, #0]
 801c200:	e002      	b.n	801c208 <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801c202:	69fb      	ldr	r3, [r7, #28]
 801c204:	2200      	movs	r2, #0
 801c206:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c208:	69fb      	ldr	r3, [r7, #28]
 801c20a:	695b      	ldr	r3, [r3, #20]
 801c20c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c20e:	69fb      	ldr	r3, [r7, #28]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d1ea      	bne.n	801c1ea <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c214:	e01f      	b.n	801c256 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801c216:	4b26      	ldr	r3, [pc, #152]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c21c:	4b24      	ldr	r3, [pc, #144]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	695a      	ldr	r2, [r3, #20]
 801c222:	4b23      	ldr	r3, [pc, #140]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c224:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801c226:	69fb      	ldr	r3, [r7, #28]
 801c228:	2200      	movs	r2, #0
 801c22a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c22c:	69fb      	ldr	r3, [r7, #28]
 801c22e:	2200      	movs	r2, #0
 801c230:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c232:	69fb      	ldr	r3, [r7, #28]
 801c234:	68da      	ldr	r2, [r3, #12]
 801c236:	69fb      	ldr	r3, [r7, #28]
 801c238:	691b      	ldr	r3, [r3, #16]
 801c23a:	0018      	movs	r0, r3
 801c23c:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c23e:	69fb      	ldr	r3, [r7, #28]
 801c240:	7adb      	ldrb	r3, [r3, #11]
 801c242:	2b01      	cmp	r3, #1
 801c244:	d107      	bne.n	801c256 <UTIL_TIMER_IRQ_Handler+0xaa>
 801c246:	69fb      	ldr	r3, [r7, #28]
 801c248:	7a9b      	ldrb	r3, [r3, #10]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d103      	bne.n	801c256 <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801c24e:	69fb      	ldr	r3, [r7, #28]
 801c250:	0018      	movs	r0, r3
 801c252:	f7ff fe87 	bl	801bf64 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c256:	4b16      	ldr	r3, [pc, #88]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d00d      	beq.n	801c27a <UTIL_TIMER_IRQ_Handler+0xce>
 801c25e:	4b14      	ldr	r3, [pc, #80]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	2b00      	cmp	r3, #0
 801c266:	d0d6      	beq.n	801c216 <UTIL_TIMER_IRQ_Handler+0x6a>
 801c268:	4b11      	ldr	r3, [pc, #68]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	681c      	ldr	r4, [r3, #0]
 801c26e:	4b0f      	ldr	r3, [pc, #60]	@ (801c2ac <UTIL_TIMER_IRQ_Handler+0x100>)
 801c270:	699b      	ldr	r3, [r3, #24]
 801c272:	4798      	blx	r3
 801c274:	0003      	movs	r3, r0
 801c276:	429c      	cmp	r4, r3
 801c278:	d3cd      	bcc.n	801c216 <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c27a:	4b0d      	ldr	r3, [pc, #52]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d009      	beq.n	801c296 <UTIL_TIMER_IRQ_Handler+0xea>
 801c282:	4b0b      	ldr	r3, [pc, #44]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	7a1b      	ldrb	r3, [r3, #8]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d104      	bne.n	801c296 <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801c28c:	4b08      	ldr	r3, [pc, #32]	@ (801c2b0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	0018      	movs	r0, r3
 801c292:	f000 f85d 	bl	801c350 <TimerSetTimeout>
 801c296:	69bb      	ldr	r3, [r7, #24]
 801c298:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	f383 8810 	msr	PRIMASK, r3
}
 801c2a0:	46c0      	nop			@ (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c2a2:	46c0      	nop			@ (mov r8, r8)
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	b009      	add	sp, #36	@ 0x24
 801c2a8:	bd90      	pop	{r4, r7, pc}
 801c2aa:	46c0      	nop			@ (mov r8, r8)
 801c2ac:	0801d9f8 	.word	0x0801d9f8
 801c2b0:	200019a8 	.word	0x200019a8

0801c2b4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c2b4:	b580      	push	{r7, lr}
 801c2b6:	b082      	sub	sp, #8
 801c2b8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c2ba:	4b07      	ldr	r3, [pc, #28]	@ (801c2d8 <UTIL_TIMER_GetCurrentTime+0x24>)
 801c2bc:	69db      	ldr	r3, [r3, #28]
 801c2be:	4798      	blx	r3
 801c2c0:	0003      	movs	r3, r0
 801c2c2:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c2c4:	4b04      	ldr	r3, [pc, #16]	@ (801c2d8 <UTIL_TIMER_GetCurrentTime+0x24>)
 801c2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2c8:	687a      	ldr	r2, [r7, #4]
 801c2ca:	0010      	movs	r0, r2
 801c2cc:	4798      	blx	r3
 801c2ce:	0003      	movs	r3, r0
}
 801c2d0:	0018      	movs	r0, r3
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	b002      	add	sp, #8
 801c2d6:	bd80      	pop	{r7, pc}
 801c2d8:	0801d9f8 	.word	0x0801d9f8

0801c2dc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b084      	sub	sp, #16
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c2e4:	4b0b      	ldr	r3, [pc, #44]	@ (801c314 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c2e6:	69db      	ldr	r3, [r3, #28]
 801c2e8:	4798      	blx	r3
 801c2ea:	0003      	movs	r3, r0
 801c2ec:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c2ee:	4b09      	ldr	r3, [pc, #36]	@ (801c314 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2f2:	687a      	ldr	r2, [r7, #4]
 801c2f4:	0010      	movs	r0, r2
 801c2f6:	4798      	blx	r3
 801c2f8:	0003      	movs	r3, r0
 801c2fa:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c2fc:	4b05      	ldr	r3, [pc, #20]	@ (801c314 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c300:	68f9      	ldr	r1, [r7, #12]
 801c302:	68ba      	ldr	r2, [r7, #8]
 801c304:	1a8a      	subs	r2, r1, r2
 801c306:	0010      	movs	r0, r2
 801c308:	4798      	blx	r3
 801c30a:	0003      	movs	r3, r0
}
 801c30c:	0018      	movs	r0, r3
 801c30e:	46bd      	mov	sp, r7
 801c310:	b004      	add	sp, #16
 801c312:	bd80      	pop	{r7, pc}
 801c314:	0801d9f8 	.word	0x0801d9f8

0801c318 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b084      	sub	sp, #16
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c320:	4b0a      	ldr	r3, [pc, #40]	@ (801c34c <TimerExists+0x34>)
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c326:	e008      	b.n	801c33a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c328:	68fa      	ldr	r2, [r7, #12]
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	429a      	cmp	r2, r3
 801c32e:	d101      	bne.n	801c334 <TimerExists+0x1c>
    {
      return true;
 801c330:	2301      	movs	r3, #1
 801c332:	e006      	b.n	801c342 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	695b      	ldr	r3, [r3, #20]
 801c338:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d1f3      	bne.n	801c328 <TimerExists+0x10>
  }
  return false;
 801c340:	2300      	movs	r3, #0
}
 801c342:	0018      	movs	r0, r3
 801c344:	46bd      	mov	sp, r7
 801c346:	b004      	add	sp, #16
 801c348:	bd80      	pop	{r7, pc}
 801c34a:	46c0      	nop			@ (mov r8, r8)
 801c34c:	200019a8 	.word	0x200019a8

0801c350 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c350:	b590      	push	{r4, r7, lr}
 801c352:	b085      	sub	sp, #20
 801c354:	af00      	add	r7, sp, #0
 801c356:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c358:	4b11      	ldr	r3, [pc, #68]	@ (801c3a0 <TimerSetTimeout+0x50>)
 801c35a:	6a1b      	ldr	r3, [r3, #32]
 801c35c:	4798      	blx	r3
 801c35e:	0003      	movs	r3, r0
 801c360:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	2201      	movs	r2, #1
 801c366:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	681c      	ldr	r4, [r3, #0]
 801c36c:	4b0c      	ldr	r3, [pc, #48]	@ (801c3a0 <TimerSetTimeout+0x50>)
 801c36e:	699b      	ldr	r3, [r3, #24]
 801c370:	4798      	blx	r3
 801c372:	0002      	movs	r2, r0
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	18d3      	adds	r3, r2, r3
 801c378:	429c      	cmp	r4, r3
 801c37a:	d207      	bcs.n	801c38c <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c37c:	4b08      	ldr	r3, [pc, #32]	@ (801c3a0 <TimerSetTimeout+0x50>)
 801c37e:	699b      	ldr	r3, [r3, #24]
 801c380:	4798      	blx	r3
 801c382:	0002      	movs	r2, r0
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	18d2      	adds	r2, r2, r3
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c38c:	4b04      	ldr	r3, [pc, #16]	@ (801c3a0 <TimerSetTimeout+0x50>)
 801c38e:	689a      	ldr	r2, [r3, #8]
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	0018      	movs	r0, r3
 801c396:	4790      	blx	r2
}
 801c398:	46c0      	nop			@ (mov r8, r8)
 801c39a:	46bd      	mov	sp, r7
 801c39c:	b005      	add	sp, #20
 801c39e:	bd90      	pop	{r4, r7, pc}
 801c3a0:	0801d9f8 	.word	0x0801d9f8

0801c3a4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b084      	sub	sp, #16
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c3ac:	4b13      	ldr	r3, [pc, #76]	@ (801c3fc <TimerInsertTimer+0x58>)
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c3b2:	4b12      	ldr	r3, [pc, #72]	@ (801c3fc <TimerInsertTimer+0x58>)
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	695b      	ldr	r3, [r3, #20]
 801c3b8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c3ba:	e012      	b.n	801c3e2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	681a      	ldr	r2, [r3, #0]
 801c3c0:	68bb      	ldr	r3, [r7, #8]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	429a      	cmp	r2, r3
 801c3c6:	d905      	bls.n	801c3d4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801c3c8:	68bb      	ldr	r3, [r7, #8]
 801c3ca:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c3cc:	68bb      	ldr	r3, [r7, #8]
 801c3ce:	695b      	ldr	r3, [r3, #20]
 801c3d0:	60bb      	str	r3, [r7, #8]
 801c3d2:	e006      	b.n	801c3e2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	687a      	ldr	r2, [r7, #4]
 801c3d8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	68ba      	ldr	r2, [r7, #8]
 801c3de:	615a      	str	r2, [r3, #20]
        return;
 801c3e0:	e009      	b.n	801c3f6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	695b      	ldr	r3, [r3, #20]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d1e8      	bne.n	801c3bc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c3ea:	68fb      	ldr	r3, [r7, #12]
 801c3ec:	687a      	ldr	r2, [r7, #4]
 801c3ee:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	615a      	str	r2, [r3, #20]
}
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	b004      	add	sp, #16
 801c3fa:	bd80      	pop	{r7, pc}
 801c3fc:	200019a8 	.word	0x200019a8

0801c400 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c400:	b580      	push	{r7, lr}
 801c402:	b084      	sub	sp, #16
 801c404:	af00      	add	r7, sp, #0
 801c406:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c408:	4b0b      	ldr	r3, [pc, #44]	@ (801c438 <TimerInsertNewHeadTimer+0x38>)
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d002      	beq.n	801c41a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	2200      	movs	r2, #0
 801c418:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	68fa      	ldr	r2, [r7, #12]
 801c41e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c420:	4b05      	ldr	r3, [pc, #20]	@ (801c438 <TimerInsertNewHeadTimer+0x38>)
 801c422:	687a      	ldr	r2, [r7, #4]
 801c424:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801c426:	4b04      	ldr	r3, [pc, #16]	@ (801c438 <TimerInsertNewHeadTimer+0x38>)
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	0018      	movs	r0, r3
 801c42c:	f7ff ff90 	bl	801c350 <TimerSetTimeout>
}
 801c430:	46c0      	nop			@ (mov r8, r8)
 801c432:	46bd      	mov	sp, r7
 801c434:	b004      	add	sp, #16
 801c436:	bd80      	pop	{r7, pc}
 801c438:	200019a8 	.word	0x200019a8

0801c43c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c43c:	b580      	push	{r7, lr}
 801c43e:	b084      	sub	sp, #16
 801c440:	af00      	add	r7, sp, #0
 801c442:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c444:	2300      	movs	r3, #0
 801c446:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c448:	e00e      	b.n	801c468 <ee_skip_atoi+0x2c>
 801c44a:	68fa      	ldr	r2, [r7, #12]
 801c44c:	0013      	movs	r3, r2
 801c44e:	009b      	lsls	r3, r3, #2
 801c450:	189b      	adds	r3, r3, r2
 801c452:	005b      	lsls	r3, r3, #1
 801c454:	0018      	movs	r0, r3
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	1c59      	adds	r1, r3, #1
 801c45c:	687a      	ldr	r2, [r7, #4]
 801c45e:	6011      	str	r1, [r2, #0]
 801c460:	781b      	ldrb	r3, [r3, #0]
 801c462:	18c3      	adds	r3, r0, r3
 801c464:	3b30      	subs	r3, #48	@ 0x30
 801c466:	60fb      	str	r3, [r7, #12]
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	781b      	ldrb	r3, [r3, #0]
 801c46e:	2b2f      	cmp	r3, #47	@ 0x2f
 801c470:	d904      	bls.n	801c47c <ee_skip_atoi+0x40>
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	781b      	ldrb	r3, [r3, #0]
 801c478:	2b39      	cmp	r3, #57	@ 0x39
 801c47a:	d9e6      	bls.n	801c44a <ee_skip_atoi+0xe>
  return i;
 801c47c:	68fb      	ldr	r3, [r7, #12]
}
 801c47e:	0018      	movs	r0, r3
 801c480:	46bd      	mov	sp, r7
 801c482:	b004      	add	sp, #16
 801c484:	bd80      	pop	{r7, pc}
	...

0801c488 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c488:	b580      	push	{r7, lr}
 801c48a:	b098      	sub	sp, #96	@ 0x60
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	60f8      	str	r0, [r7, #12]
 801c490:	60b9      	str	r1, [r7, #8]
 801c492:	607a      	str	r2, [r7, #4]
 801c494:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c496:	4b72      	ldr	r3, [pc, #456]	@ (801c660 <ee_number+0x1d8>)
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c49c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c49e:	2240      	movs	r2, #64	@ 0x40
 801c4a0:	4013      	ands	r3, r2
 801c4a2:	d002      	beq.n	801c4aa <ee_number+0x22>
 801c4a4:	4b6f      	ldr	r3, [pc, #444]	@ (801c664 <ee_number+0x1dc>)
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c4aa:	683b      	ldr	r3, [r7, #0]
 801c4ac:	2b01      	cmp	r3, #1
 801c4ae:	dd02      	ble.n	801c4b6 <ee_number+0x2e>
 801c4b0:	683b      	ldr	r3, [r7, #0]
 801c4b2:	2b24      	cmp	r3, #36	@ 0x24
 801c4b4:	dd01      	ble.n	801c4ba <ee_number+0x32>
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	e0cd      	b.n	801c656 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801c4ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c4bc:	2201      	movs	r2, #1
 801c4be:	4013      	ands	r3, r2
 801c4c0:	d001      	beq.n	801c4c6 <ee_number+0x3e>
 801c4c2:	2230      	movs	r2, #48	@ 0x30
 801c4c4:	e000      	b.n	801c4c8 <ee_number+0x40>
 801c4c6:	2220      	movs	r2, #32
 801c4c8:	2353      	movs	r3, #83	@ 0x53
 801c4ca:	18fb      	adds	r3, r7, r3
 801c4cc:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801c4ce:	215f      	movs	r1, #95	@ 0x5f
 801c4d0:	187b      	adds	r3, r7, r1
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801c4d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c4d8:	2202      	movs	r2, #2
 801c4da:	4013      	ands	r3, r2
 801c4dc:	d00b      	beq.n	801c4f6 <ee_number+0x6e>
  {
    if (num < 0)
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	da08      	bge.n	801c4f6 <ee_number+0x6e>
    {
      sign = '-';
 801c4e4:	187b      	adds	r3, r7, r1
 801c4e6:	222d      	movs	r2, #45	@ 0x2d
 801c4e8:	701a      	strb	r2, [r3, #0]
      num = -num;
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	425b      	negs	r3, r3
 801c4ee:	607b      	str	r3, [r7, #4]
      size--;
 801c4f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c4f2:	3b01      	subs	r3, #1
 801c4f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d120      	bne.n	801c542 <ee_number+0xba>
    tmp[i++] = '0';
 801c500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c502:	1c5a      	adds	r2, r3, #1
 801c504:	657a      	str	r2, [r7, #84]	@ 0x54
 801c506:	2210      	movs	r2, #16
 801c508:	18ba      	adds	r2, r7, r2
 801c50a:	2130      	movs	r1, #48	@ 0x30
 801c50c:	54d1      	strb	r1, [r2, r3]
 801c50e:	e01b      	b.n	801c548 <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	683a      	ldr	r2, [r7, #0]
 801c514:	0011      	movs	r1, r2
 801c516:	0018      	movs	r0, r3
 801c518:	f7e3 fe84 	bl	8000224 <__aeabi_uidivmod>
 801c51c:	000b      	movs	r3, r1
 801c51e:	001a      	movs	r2, r3
 801c520:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c522:	189a      	adds	r2, r3, r2
 801c524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c526:	1c59      	adds	r1, r3, #1
 801c528:	6579      	str	r1, [r7, #84]	@ 0x54
 801c52a:	7811      	ldrb	r1, [r2, #0]
 801c52c:	2210      	movs	r2, #16
 801c52e:	18ba      	adds	r2, r7, r2
 801c530:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	683a      	ldr	r2, [r7, #0]
 801c536:	0011      	movs	r1, r2
 801c538:	0018      	movs	r0, r3
 801c53a:	f7e3 fded 	bl	8000118 <__udivsi3>
 801c53e:	0003      	movs	r3, r0
 801c540:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d1e3      	bne.n	801c510 <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801c548:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c54a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c54c:	429a      	cmp	r2, r3
 801c54e:	dd01      	ble.n	801c554 <ee_number+0xcc>
 801c550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c552:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801c554:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c558:	1ad3      	subs	r3, r2, r3
 801c55a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c55c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c55e:	2201      	movs	r2, #1
 801c560:	4013      	ands	r3, r2
 801c562:	d112      	bne.n	801c58a <ee_number+0x102>
 801c564:	e00c      	b.n	801c580 <ee_number+0xf8>
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	1c5a      	adds	r2, r3, #1
 801c56a:	60fa      	str	r2, [r7, #12]
 801c56c:	2220      	movs	r2, #32
 801c56e:	701a      	strb	r2, [r3, #0]
 801c570:	68bb      	ldr	r3, [r7, #8]
 801c572:	3b01      	subs	r3, #1
 801c574:	60bb      	str	r3, [r7, #8]
 801c576:	68bb      	ldr	r3, [r7, #8]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d101      	bne.n	801c580 <ee_number+0xf8>
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	e06a      	b.n	801c656 <ee_number+0x1ce>
 801c580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c582:	1e5a      	subs	r2, r3, #1
 801c584:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c586:	2b00      	cmp	r3, #0
 801c588:	dced      	bgt.n	801c566 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c58a:	215f      	movs	r1, #95	@ 0x5f
 801c58c:	187b      	adds	r3, r7, r1
 801c58e:	781b      	ldrb	r3, [r3, #0]
 801c590:	2b00      	cmp	r3, #0
 801c592:	d01c      	beq.n	801c5ce <ee_number+0x146>
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	1c5a      	adds	r2, r3, #1
 801c598:	60fa      	str	r2, [r7, #12]
 801c59a:	187a      	adds	r2, r7, r1
 801c59c:	7812      	ldrb	r2, [r2, #0]
 801c59e:	701a      	strb	r2, [r3, #0]
 801c5a0:	68bb      	ldr	r3, [r7, #8]
 801c5a2:	3b01      	subs	r3, #1
 801c5a4:	60bb      	str	r3, [r7, #8]
 801c5a6:	68bb      	ldr	r3, [r7, #8]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d110      	bne.n	801c5ce <ee_number+0x146>
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	e052      	b.n	801c656 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	1c5a      	adds	r2, r3, #1
 801c5b4:	60fa      	str	r2, [r7, #12]
 801c5b6:	2253      	movs	r2, #83	@ 0x53
 801c5b8:	18ba      	adds	r2, r7, r2
 801c5ba:	7812      	ldrb	r2, [r2, #0]
 801c5bc:	701a      	strb	r2, [r3, #0]
 801c5be:	68bb      	ldr	r3, [r7, #8]
 801c5c0:	3b01      	subs	r3, #1
 801c5c2:	60bb      	str	r3, [r7, #8]
 801c5c4:	68bb      	ldr	r3, [r7, #8]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d101      	bne.n	801c5ce <ee_number+0x146>
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	e043      	b.n	801c656 <ee_number+0x1ce>
 801c5ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c5d0:	1e5a      	subs	r2, r3, #1
 801c5d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	dceb      	bgt.n	801c5b0 <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c5d8:	e00c      	b.n	801c5f4 <ee_number+0x16c>
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	1c5a      	adds	r2, r3, #1
 801c5de:	60fa      	str	r2, [r7, #12]
 801c5e0:	2230      	movs	r2, #48	@ 0x30
 801c5e2:	701a      	strb	r2, [r3, #0]
 801c5e4:	68bb      	ldr	r3, [r7, #8]
 801c5e6:	3b01      	subs	r3, #1
 801c5e8:	60bb      	str	r3, [r7, #8]
 801c5ea:	68bb      	ldr	r3, [r7, #8]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d101      	bne.n	801c5f4 <ee_number+0x16c>
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	e030      	b.n	801c656 <ee_number+0x1ce>
 801c5f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c5f6:	1e5a      	subs	r2, r3, #1
 801c5f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801c5fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c5fc:	429a      	cmp	r2, r3
 801c5fe:	dbec      	blt.n	801c5da <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c600:	e010      	b.n	801c624 <ee_number+0x19c>
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	1c5a      	adds	r2, r3, #1
 801c606:	60fa      	str	r2, [r7, #12]
 801c608:	2210      	movs	r2, #16
 801c60a:	18b9      	adds	r1, r7, r2
 801c60c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c60e:	188a      	adds	r2, r1, r2
 801c610:	7812      	ldrb	r2, [r2, #0]
 801c612:	701a      	strb	r2, [r3, #0]
 801c614:	68bb      	ldr	r3, [r7, #8]
 801c616:	3b01      	subs	r3, #1
 801c618:	60bb      	str	r3, [r7, #8]
 801c61a:	68bb      	ldr	r3, [r7, #8]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d101      	bne.n	801c624 <ee_number+0x19c>
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	e018      	b.n	801c656 <ee_number+0x1ce>
 801c624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c626:	1e5a      	subs	r2, r3, #1
 801c628:	657a      	str	r2, [r7, #84]	@ 0x54
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	dce9      	bgt.n	801c602 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801c62e:	e00c      	b.n	801c64a <ee_number+0x1c2>
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	1c5a      	adds	r2, r3, #1
 801c634:	60fa      	str	r2, [r7, #12]
 801c636:	2220      	movs	r2, #32
 801c638:	701a      	strb	r2, [r3, #0]
 801c63a:	68bb      	ldr	r3, [r7, #8]
 801c63c:	3b01      	subs	r3, #1
 801c63e:	60bb      	str	r3, [r7, #8]
 801c640:	68bb      	ldr	r3, [r7, #8]
 801c642:	2b00      	cmp	r3, #0
 801c644:	d101      	bne.n	801c64a <ee_number+0x1c2>
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	e005      	b.n	801c656 <ee_number+0x1ce>
 801c64a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c64c:	1e5a      	subs	r2, r3, #1
 801c64e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c650:	2b00      	cmp	r3, #0
 801c652:	dced      	bgt.n	801c630 <ee_number+0x1a8>

  return str;
 801c654:	68fb      	ldr	r3, [r7, #12]
}
 801c656:	0018      	movs	r0, r3
 801c658:	46bd      	mov	sp, r7
 801c65a:	b018      	add	sp, #96	@ 0x60
 801c65c:	bd80      	pop	{r7, pc}
 801c65e:	46c0      	nop			@ (mov r8, r8)
 801c660:	200001d0 	.word	0x200001d0
 801c664:	200001d4 	.word	0x200001d4

0801c668 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c668:	b590      	push	{r4, r7, lr}
 801c66a:	b093      	sub	sp, #76	@ 0x4c
 801c66c:	af04      	add	r7, sp, #16
 801c66e:	60f8      	str	r0, [r7, #12]
 801c670:	60b9      	str	r1, [r7, #8]
 801c672:	607a      	str	r2, [r7, #4]
 801c674:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c676:	68bb      	ldr	r3, [r7, #8]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	dc01      	bgt.n	801c680 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c67c:	2300      	movs	r3, #0
 801c67e:	e100      	b.n	801c882 <tiny_vsnprintf_like+0x21a>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c684:	e0ea      	b.n	801c85c <tiny_vsnprintf_like+0x1f4>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	1ad2      	subs	r2, r2, r3
 801c68c:	68bb      	ldr	r3, [r7, #8]
 801c68e:	3b01      	subs	r3, #1
 801c690:	429a      	cmp	r2, r3
 801c692:	db00      	blt.n	801c696 <tiny_vsnprintf_like+0x2e>
 801c694:	e0ef      	b.n	801c876 <tiny_vsnprintf_like+0x20e>
    
    if (*fmt != '%')
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	781b      	ldrb	r3, [r3, #0]
 801c69a:	2b25      	cmp	r3, #37	@ 0x25
 801c69c:	d006      	beq.n	801c6ac <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c69e:	687a      	ldr	r2, [r7, #4]
 801c6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6a2:	1c59      	adds	r1, r3, #1
 801c6a4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c6a6:	7812      	ldrb	r2, [r2, #0]
 801c6a8:	701a      	strb	r2, [r3, #0]
      continue;
 801c6aa:	e0d4      	b.n	801c856 <tiny_vsnprintf_like+0x1ee>
    }
                  
    // Process flags
    flags = 0;
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	3301      	adds	r3, #1
 801c6b4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	2b30      	cmp	r3, #48	@ 0x30
 801c6bc:	d103      	bne.n	801c6c6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c6be:	6a3b      	ldr	r3, [r7, #32]
 801c6c0:	2201      	movs	r2, #1
 801c6c2:	4313      	orrs	r3, r2
 801c6c4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801c6c6:	2301      	movs	r3, #1
 801c6c8:	425b      	negs	r3, r3
 801c6ca:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	781b      	ldrb	r3, [r3, #0]
 801c6d0:	2b2f      	cmp	r3, #47	@ 0x2f
 801c6d2:	d909      	bls.n	801c6e8 <tiny_vsnprintf_like+0x80>
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	2b39      	cmp	r3, #57	@ 0x39
 801c6da:	d805      	bhi.n	801c6e8 <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801c6dc:	1d3b      	adds	r3, r7, #4
 801c6de:	0018      	movs	r0, r3
 801c6e0:	f7ff feac 	bl	801c43c <ee_skip_atoi>
 801c6e4:	0003      	movs	r3, r0
 801c6e6:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801c6e8:	2301      	movs	r3, #1
 801c6ea:	425b      	negs	r3, r3
 801c6ec:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801c6ee:	2301      	movs	r3, #1
 801c6f0:	425b      	negs	r3, r3
 801c6f2:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801c6f4:	230a      	movs	r3, #10
 801c6f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	781b      	ldrb	r3, [r3, #0]
 801c6fc:	3b58      	subs	r3, #88	@ 0x58
 801c6fe:	2b20      	cmp	r3, #32
 801c700:	d854      	bhi.n	801c7ac <tiny_vsnprintf_like+0x144>
 801c702:	009a      	lsls	r2, r3, #2
 801c704:	4b61      	ldr	r3, [pc, #388]	@ (801c88c <tiny_vsnprintf_like+0x224>)
 801c706:	18d3      	adds	r3, r2, r3
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c70e:	1c5a      	adds	r2, r3, #1
 801c710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c712:	2220      	movs	r2, #32
 801c714:	701a      	strb	r2, [r3, #0]
 801c716:	69fb      	ldr	r3, [r7, #28]
 801c718:	3b01      	subs	r3, #1
 801c71a:	61fb      	str	r3, [r7, #28]
 801c71c:	69fb      	ldr	r3, [r7, #28]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	dcf4      	bgt.n	801c70c <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801c722:	683b      	ldr	r3, [r7, #0]
 801c724:	1d1a      	adds	r2, r3, #4
 801c726:	603a      	str	r2, [r7, #0]
 801c728:	6819      	ldr	r1, [r3, #0]
 801c72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c72c:	1c5a      	adds	r2, r3, #1
 801c72e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c730:	b2ca      	uxtb	r2, r1
 801c732:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c734:	e08f      	b.n	801c856 <tiny_vsnprintf_like+0x1ee>

      case 's':
        s = va_arg(args, char *);
 801c736:	683b      	ldr	r3, [r7, #0]
 801c738:	1d1a      	adds	r2, r3, #4
 801c73a:	603a      	str	r2, [r7, #0]
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c742:	2b00      	cmp	r3, #0
 801c744:	d101      	bne.n	801c74a <tiny_vsnprintf_like+0xe2>
 801c746:	4b52      	ldr	r3, [pc, #328]	@ (801c890 <tiny_vsnprintf_like+0x228>)
 801c748:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c74c:	0018      	movs	r0, r3
 801c74e:	f7e3 fcdb 	bl	8000108 <strlen>
 801c752:	0003      	movs	r3, r0
 801c754:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c756:	e004      	b.n	801c762 <tiny_vsnprintf_like+0xfa>
 801c758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c75a:	1c5a      	adds	r2, r3, #1
 801c75c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c75e:	2220      	movs	r2, #32
 801c760:	701a      	strb	r2, [r3, #0]
 801c762:	69fb      	ldr	r3, [r7, #28]
 801c764:	1e5a      	subs	r2, r3, #1
 801c766:	61fa      	str	r2, [r7, #28]
 801c768:	693a      	ldr	r2, [r7, #16]
 801c76a:	429a      	cmp	r2, r3
 801c76c:	dbf4      	blt.n	801c758 <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c76e:	2300      	movs	r3, #0
 801c770:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c772:	e00a      	b.n	801c78a <tiny_vsnprintf_like+0x122>
 801c774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c776:	1c53      	adds	r3, r2, #1
 801c778:	627b      	str	r3, [r7, #36]	@ 0x24
 801c77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c77c:	1c59      	adds	r1, r3, #1
 801c77e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c780:	7812      	ldrb	r2, [r2, #0]
 801c782:	701a      	strb	r2, [r3, #0]
 801c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c786:	3301      	adds	r3, #1
 801c788:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c78a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c78c:	693b      	ldr	r3, [r7, #16]
 801c78e:	429a      	cmp	r2, r3
 801c790:	dbf0      	blt.n	801c774 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c792:	e060      	b.n	801c856 <tiny_vsnprintf_like+0x1ee>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801c794:	6a3b      	ldr	r3, [r7, #32]
 801c796:	2240      	movs	r2, #64	@ 0x40
 801c798:	4313      	orrs	r3, r2
 801c79a:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c79c:	2310      	movs	r3, #16
 801c79e:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801c7a0:	e02b      	b.n	801c7fa <tiny_vsnprintf_like+0x192>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c7a2:	6a3b      	ldr	r3, [r7, #32]
 801c7a4:	2202      	movs	r2, #2
 801c7a6:	4313      	orrs	r3, r2
 801c7a8:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c7aa:	e025      	b.n	801c7f8 <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	781b      	ldrb	r3, [r3, #0]
 801c7b0:	2b25      	cmp	r3, #37	@ 0x25
 801c7b2:	d004      	beq.n	801c7be <tiny_vsnprintf_like+0x156>
 801c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7b6:	1c5a      	adds	r2, r3, #1
 801c7b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c7ba:	2225      	movs	r2, #37	@ 0x25
 801c7bc:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c7be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	1ad2      	subs	r2, r2, r3
 801c7c4:	68bb      	ldr	r3, [r7, #8]
 801c7c6:	3b01      	subs	r3, #1
 801c7c8:	429a      	cmp	r2, r3
 801c7ca:	da16      	bge.n	801c7fa <tiny_vsnprintf_like+0x192>
        if (*fmt)
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	781b      	ldrb	r3, [r3, #0]
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d006      	beq.n	801c7e2 <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801c7d4:	687a      	ldr	r2, [r7, #4]
 801c7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7d8:	1c59      	adds	r1, r3, #1
 801c7da:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c7dc:	7812      	ldrb	r2, [r2, #0]
 801c7de:	701a      	strb	r2, [r3, #0]
 801c7e0:	e002      	b.n	801c7e8 <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	3b01      	subs	r3, #1
 801c7e6:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c7e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	1ad2      	subs	r2, r2, r3
 801c7ee:	68bb      	ldr	r3, [r7, #8]
 801c7f0:	3b01      	subs	r3, #1
 801c7f2:	429a      	cmp	r2, r3
 801c7f4:	db2e      	blt.n	801c854 <tiny_vsnprintf_like+0x1ec>
 801c7f6:	e000      	b.n	801c7fa <tiny_vsnprintf_like+0x192>
        break;
 801c7f8:	46c0      	nop			@ (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801c7fa:	697b      	ldr	r3, [r7, #20]
 801c7fc:	2b6c      	cmp	r3, #108	@ 0x6c
 801c7fe:	d105      	bne.n	801c80c <tiny_vsnprintf_like+0x1a4>
      num = va_arg(args, unsigned long);
 801c800:	683b      	ldr	r3, [r7, #0]
 801c802:	1d1a      	adds	r2, r3, #4
 801c804:	603a      	str	r2, [r7, #0]
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	637b      	str	r3, [r7, #52]	@ 0x34
 801c80a:	e00e      	b.n	801c82a <tiny_vsnprintf_like+0x1c2>
    else if (flags & SIGN)
 801c80c:	6a3b      	ldr	r3, [r7, #32]
 801c80e:	2202      	movs	r2, #2
 801c810:	4013      	ands	r3, r2
 801c812:	d005      	beq.n	801c820 <tiny_vsnprintf_like+0x1b8>
      num = va_arg(args, int);
 801c814:	683b      	ldr	r3, [r7, #0]
 801c816:	1d1a      	adds	r2, r3, #4
 801c818:	603a      	str	r2, [r7, #0]
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c81e:	e004      	b.n	801c82a <tiny_vsnprintf_like+0x1c2>
    else
      num = va_arg(args, unsigned int);
 801c820:	683b      	ldr	r3, [r7, #0]
 801c822:	1d1a      	adds	r2, r3, #4
 801c824:	603a      	str	r2, [r7, #0]
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c82a:	68bb      	ldr	r3, [r7, #8]
 801c82c:	1e5a      	subs	r2, r3, #1
 801c82e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	1acb      	subs	r3, r1, r3
 801c834:	1ad1      	subs	r1, r2, r3
 801c836:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c838:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 801c83a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c83c:	6a3b      	ldr	r3, [r7, #32]
 801c83e:	9302      	str	r3, [sp, #8]
 801c840:	69bb      	ldr	r3, [r7, #24]
 801c842:	9301      	str	r3, [sp, #4]
 801c844:	69fb      	ldr	r3, [r7, #28]
 801c846:	9300      	str	r3, [sp, #0]
 801c848:	0023      	movs	r3, r4
 801c84a:	f7ff fe1d 	bl	801c488 <ee_number>
 801c84e:	0003      	movs	r3, r0
 801c850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c852:	e000      	b.n	801c856 <tiny_vsnprintf_like+0x1ee>
        continue;
 801c854:	46c0      	nop			@ (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	3301      	adds	r3, #1
 801c85a:	607b      	str	r3, [r7, #4]
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	781b      	ldrb	r3, [r3, #0]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d000      	beq.n	801c866 <tiny_vsnprintf_like+0x1fe>
 801c864:	e70f      	b.n	801c686 <tiny_vsnprintf_like+0x1e>
 801c866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	1ad2      	subs	r2, r2, r3
 801c86c:	68bb      	ldr	r3, [r7, #8]
 801c86e:	3b01      	subs	r3, #1
 801c870:	429a      	cmp	r2, r3
 801c872:	db00      	blt.n	801c876 <tiny_vsnprintf_like+0x20e>
 801c874:	e707      	b.n	801c686 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801c876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c878:	2200      	movs	r2, #0
 801c87a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c87c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	1ad3      	subs	r3, r2, r3
}
 801c882:	0018      	movs	r0, r3
 801c884:	46bd      	mov	sp, r7
 801c886:	b00f      	add	sp, #60	@ 0x3c
 801c888:	bd90      	pop	{r4, r7, pc}
 801c88a:	46c0      	nop			@ (mov r8, r8)
 801c88c:	0801e804 	.word	0x0801e804
 801c890:	0801e7fc 	.word	0x0801e7fc

0801c894 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801c894:	b580      	push	{r7, lr}
 801c896:	b082      	sub	sp, #8
 801c898:	af00      	add	r7, sp, #0
 801c89a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	2203      	movs	r2, #3
 801c8a0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	2200      	movs	r2, #0
 801c8a6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	2203      	movs	r2, #3
 801c8ac:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	2203      	movs	r2, #3
 801c8b2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	2203      	movs	r2, #3
 801c8b8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	2203      	movs	r2, #3
 801c8be:	715a      	strb	r2, [r3, #5]
}
 801c8c0:	46c0      	nop			@ (mov r8, r8)
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	b002      	add	sp, #8
 801c8c6:	bd80      	pop	{r7, pc}

0801c8c8 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801c8c8:	b590      	push	{r4, r7, lr}
 801c8ca:	b08b      	sub	sp, #44	@ 0x2c
 801c8cc:	af04      	add	r7, sp, #16
 801c8ce:	60f8      	str	r0, [r7, #12]
 801c8d0:	607a      	str	r2, [r7, #4]
 801c8d2:	240b      	movs	r4, #11
 801c8d4:	193b      	adds	r3, r7, r4
 801c8d6:	1c0a      	adds	r2, r1, #0
 801c8d8:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c8de:	2116      	movs	r1, #22
 801c8e0:	187a      	adds	r2, r7, r1
 801c8e2:	18db      	adds	r3, r3, r3
 801c8e4:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801c8ea:	193b      	adds	r3, r7, r4
 801c8ec:	781b      	ldrb	r3, [r3, #0]
 801c8ee:	b29a      	uxth	r2, r3
 801c8f0:	187b      	adds	r3, r7, r1
 801c8f2:	8819      	ldrh	r1, [r3, #0]
 801c8f4:	4b0f      	ldr	r3, [pc, #60]	@ (801c934 <read_register16+0x6c>)
 801c8f6:	9302      	str	r3, [sp, #8]
 801c8f8:	2302      	movs	r3, #2
 801c8fa:	9301      	str	r3, [sp, #4]
 801c8fc:	2414      	movs	r4, #20
 801c8fe:	193b      	adds	r3, r7, r4
 801c900:	9300      	str	r3, [sp, #0]
 801c902:	2301      	movs	r3, #1
 801c904:	f7ea ffd2 	bl	80078ac <HAL_I2C_Mem_Read>
 801c908:	1e03      	subs	r3, r0, #0
 801c90a:	d10e      	bne.n	801c92a <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801c90c:	0021      	movs	r1, r4
 801c90e:	187b      	adds	r3, r7, r1
 801c910:	785b      	ldrb	r3, [r3, #1]
 801c912:	021b      	lsls	r3, r3, #8
 801c914:	b21a      	sxth	r2, r3
 801c916:	187b      	adds	r3, r7, r1
 801c918:	781b      	ldrb	r3, [r3, #0]
 801c91a:	b21b      	sxth	r3, r3
 801c91c:	4313      	orrs	r3, r2
 801c91e:	b21b      	sxth	r3, r3
 801c920:	b29a      	uxth	r2, r3
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	801a      	strh	r2, [r3, #0]
		return true;
 801c926:	2301      	movs	r3, #1
 801c928:	e000      	b.n	801c92c <read_register16+0x64>
	} else
		return false;
 801c92a:	2300      	movs	r3, #0

}
 801c92c:	0018      	movs	r0, r3
 801c92e:	46bd      	mov	sp, r7
 801c930:	b007      	add	sp, #28
 801c932:	bd90      	pop	{r4, r7, pc}
 801c934:	00001388 	.word	0x00001388

0801c938 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801c938:	b5b0      	push	{r4, r5, r7, lr}
 801c93a:	b08a      	sub	sp, #40	@ 0x28
 801c93c:	af04      	add	r7, sp, #16
 801c93e:	60f8      	str	r0, [r7, #12]
 801c940:	0008      	movs	r0, r1
 801c942:	607a      	str	r2, [r7, #4]
 801c944:	0019      	movs	r1, r3
 801c946:	240b      	movs	r4, #11
 801c948:	193b      	adds	r3, r7, r4
 801c94a:	1c02      	adds	r2, r0, #0
 801c94c:	701a      	strb	r2, [r3, #0]
 801c94e:	250a      	movs	r5, #10
 801c950:	197b      	adds	r3, r7, r5
 801c952:	1c0a      	adds	r2, r1, #0
 801c954:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c95a:	2116      	movs	r1, #22
 801c95c:	187a      	adds	r2, r7, r1
 801c95e:	18db      	adds	r3, r3, r3
 801c960:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801c966:	193b      	adds	r3, r7, r4
 801c968:	781b      	ldrb	r3, [r3, #0]
 801c96a:	b29c      	uxth	r4, r3
 801c96c:	197b      	adds	r3, r7, r5
 801c96e:	781b      	ldrb	r3, [r3, #0]
 801c970:	b29b      	uxth	r3, r3
 801c972:	187a      	adds	r2, r7, r1
 801c974:	8811      	ldrh	r1, [r2, #0]
 801c976:	4a09      	ldr	r2, [pc, #36]	@ (801c99c <read_data+0x64>)
 801c978:	9202      	str	r2, [sp, #8]
 801c97a:	9301      	str	r3, [sp, #4]
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	9300      	str	r3, [sp, #0]
 801c980:	2301      	movs	r3, #1
 801c982:	0022      	movs	r2, r4
 801c984:	f7ea ff92 	bl	80078ac <HAL_I2C_Mem_Read>
 801c988:	1e03      	subs	r3, r0, #0
 801c98a:	d101      	bne.n	801c990 <read_data+0x58>
		return 0;
 801c98c:	2300      	movs	r3, #0
 801c98e:	e000      	b.n	801c992 <read_data+0x5a>
	else
		return 1;
 801c990:	2301      	movs	r3, #1

}
 801c992:	0018      	movs	r0, r3
 801c994:	46bd      	mov	sp, r7
 801c996:	b006      	add	sp, #24
 801c998:	bdb0      	pop	{r4, r5, r7, pc}
 801c99a:	46c0      	nop			@ (mov r8, r8)
 801c99c:	00001388 	.word	0x00001388

0801c9a0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801c9a0:	b580      	push	{r7, lr}
 801c9a2:	b082      	sub	sp, #8
 801c9a4:	af00      	add	r7, sp, #0
 801c9a6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801c9a8:	687a      	ldr	r2, [r7, #4]
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	2188      	movs	r1, #136	@ 0x88
 801c9ae:	0018      	movs	r0, r3
 801c9b0:	f7ff ff8a 	bl	801c8c8 <read_register16>
 801c9b4:	1e03      	subs	r3, r0, #0
 801c9b6:	d100      	bne.n	801c9ba <read_calibration_data+0x1a>
 801c9b8:	e06d      	b.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	1c9a      	adds	r2, r3, #2
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	218a      	movs	r1, #138	@ 0x8a
 801c9c2:	0018      	movs	r0, r3
 801c9c4:	f7ff ff80 	bl	801c8c8 <read_register16>
 801c9c8:	1e03      	subs	r3, r0, #0
 801c9ca:	d100      	bne.n	801c9ce <read_calibration_data+0x2e>
 801c9cc:	e063      	b.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	1d1a      	adds	r2, r3, #4
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	218c      	movs	r1, #140	@ 0x8c
 801c9d6:	0018      	movs	r0, r3
 801c9d8:	f7ff ff76 	bl	801c8c8 <read_register16>
 801c9dc:	1e03      	subs	r3, r0, #0
 801c9de:	d05a      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	1d9a      	adds	r2, r3, #6
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	218e      	movs	r1, #142	@ 0x8e
 801c9e8:	0018      	movs	r0, r3
 801c9ea:	f7ff ff6d 	bl	801c8c8 <read_register16>
 801c9ee:	1e03      	subs	r3, r0, #0
 801c9f0:	d051      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	3308      	adds	r3, #8
 801c9f6:	001a      	movs	r2, r3
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	2190      	movs	r1, #144	@ 0x90
 801c9fc:	0018      	movs	r0, r3
 801c9fe:	f7ff ff63 	bl	801c8c8 <read_register16>
 801ca02:	1e03      	subs	r3, r0, #0
 801ca04:	d047      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	330a      	adds	r3, #10
 801ca0a:	001a      	movs	r2, r3
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	2192      	movs	r1, #146	@ 0x92
 801ca10:	0018      	movs	r0, r3
 801ca12:	f7ff ff59 	bl	801c8c8 <read_register16>
 801ca16:	1e03      	subs	r3, r0, #0
 801ca18:	d03d      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	330c      	adds	r3, #12
 801ca1e:	001a      	movs	r2, r3
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	2194      	movs	r1, #148	@ 0x94
 801ca24:	0018      	movs	r0, r3
 801ca26:	f7ff ff4f 	bl	801c8c8 <read_register16>
 801ca2a:	1e03      	subs	r3, r0, #0
 801ca2c:	d033      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	330e      	adds	r3, #14
 801ca32:	001a      	movs	r2, r3
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	2196      	movs	r1, #150	@ 0x96
 801ca38:	0018      	movs	r0, r3
 801ca3a:	f7ff ff45 	bl	801c8c8 <read_register16>
 801ca3e:	1e03      	subs	r3, r0, #0
 801ca40:	d029      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	3310      	adds	r3, #16
 801ca46:	001a      	movs	r2, r3
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	2198      	movs	r1, #152	@ 0x98
 801ca4c:	0018      	movs	r0, r3
 801ca4e:	f7ff ff3b 	bl	801c8c8 <read_register16>
 801ca52:	1e03      	subs	r3, r0, #0
 801ca54:	d01f      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	3312      	adds	r3, #18
 801ca5a:	001a      	movs	r2, r3
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	219a      	movs	r1, #154	@ 0x9a
 801ca60:	0018      	movs	r0, r3
 801ca62:	f7ff ff31 	bl	801c8c8 <read_register16>
 801ca66:	1e03      	subs	r3, r0, #0
 801ca68:	d015      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	3314      	adds	r3, #20
 801ca6e:	001a      	movs	r2, r3
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	219c      	movs	r1, #156	@ 0x9c
 801ca74:	0018      	movs	r0, r3
 801ca76:	f7ff ff27 	bl	801c8c8 <read_register16>
 801ca7a:	1e03      	subs	r3, r0, #0
 801ca7c:	d00b      	beq.n	801ca96 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	3316      	adds	r3, #22
 801ca82:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	219e      	movs	r1, #158	@ 0x9e
 801ca88:	0018      	movs	r0, r3
 801ca8a:	f7ff ff1d 	bl	801c8c8 <read_register16>
 801ca8e:	1e03      	subs	r3, r0, #0
 801ca90:	d001      	beq.n	801ca96 <read_calibration_data+0xf6>

		return true;
 801ca92:	2301      	movs	r3, #1
 801ca94:	e000      	b.n	801ca98 <read_calibration_data+0xf8>
	}

	return false;
 801ca96:	2300      	movs	r3, #0
}
 801ca98:	0018      	movs	r0, r3
 801ca9a:	46bd      	mov	sp, r7
 801ca9c:	b002      	add	sp, #8
 801ca9e:	bd80      	pop	{r7, pc}

0801caa0 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801caa0:	b5b0      	push	{r4, r5, r7, lr}
 801caa2:	b084      	sub	sp, #16
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	3318      	adds	r3, #24
 801caac:	001a      	movs	r2, r3
 801caae:	6878      	ldr	r0, [r7, #4]
 801cab0:	2301      	movs	r3, #1
 801cab2:	21a1      	movs	r1, #161	@ 0xa1
 801cab4:	f7ff ff40 	bl	801c938 <read_data>
 801cab8:	1e03      	subs	r3, r0, #0
 801caba:	d14b      	bne.n	801cb54 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	331a      	adds	r3, #26
 801cac0:	001a      	movs	r2, r3
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	21e1      	movs	r1, #225	@ 0xe1
 801cac6:	0018      	movs	r0, r3
 801cac8:	f7ff fefe 	bl	801c8c8 <read_register16>
 801cacc:	1e03      	subs	r3, r0, #0
 801cace:	d041      	beq.n	801cb54 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	331c      	adds	r3, #28
 801cad4:	001a      	movs	r2, r3
 801cad6:	6878      	ldr	r0, [r7, #4]
 801cad8:	2301      	movs	r3, #1
 801cada:	21e3      	movs	r1, #227	@ 0xe3
 801cadc:	f7ff ff2c 	bl	801c938 <read_data>
 801cae0:	1e03      	subs	r3, r0, #0
 801cae2:	d137      	bne.n	801cb54 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801cae4:	240e      	movs	r4, #14
 801cae6:	193a      	adds	r2, r7, r4
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	21e4      	movs	r1, #228	@ 0xe4
 801caec:	0018      	movs	r0, r3
 801caee:	f7ff feeb 	bl	801c8c8 <read_register16>
 801caf2:	1e03      	subs	r3, r0, #0
 801caf4:	d02e      	beq.n	801cb54 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801caf6:	250c      	movs	r5, #12
 801caf8:	197a      	adds	r2, r7, r5
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	21e5      	movs	r1, #229	@ 0xe5
 801cafe:	0018      	movs	r0, r3
 801cb00:	f7ff fee2 	bl	801c8c8 <read_register16>
 801cb04:	1e03      	subs	r3, r0, #0
 801cb06:	d025      	beq.n	801cb54 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	3322      	adds	r3, #34	@ 0x22
 801cb0c:	001a      	movs	r2, r3
 801cb0e:	6878      	ldr	r0, [r7, #4]
 801cb10:	2301      	movs	r3, #1
 801cb12:	21e7      	movs	r1, #231	@ 0xe7
 801cb14:	f7ff ff10 	bl	801c938 <read_data>
 801cb18:	1e03      	subs	r3, r0, #0
 801cb1a:	d11b      	bne.n	801cb54 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801cb1c:	193b      	adds	r3, r7, r4
 801cb1e:	881b      	ldrh	r3, [r3, #0]
 801cb20:	011b      	lsls	r3, r3, #4
 801cb22:	b21a      	sxth	r2, r3
 801cb24:	23ff      	movs	r3, #255	@ 0xff
 801cb26:	011b      	lsls	r3, r3, #4
 801cb28:	4013      	ands	r3, r2
 801cb2a:	b21a      	sxth	r2, r3
 801cb2c:	193b      	adds	r3, r7, r4
 801cb2e:	881b      	ldrh	r3, [r3, #0]
 801cb30:	121b      	asrs	r3, r3, #8
 801cb32:	b21b      	sxth	r3, r3
 801cb34:	210f      	movs	r1, #15
 801cb36:	400b      	ands	r3, r1
 801cb38:	b21b      	sxth	r3, r3
 801cb3a:	4313      	orrs	r3, r2
 801cb3c:	b21a      	sxth	r2, r3
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801cb42:	197b      	adds	r3, r7, r5
 801cb44:	881b      	ldrh	r3, [r3, #0]
 801cb46:	091b      	lsrs	r3, r3, #4
 801cb48:	b29b      	uxth	r3, r3
 801cb4a:	b21a      	sxth	r2, r3
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	841a      	strh	r2, [r3, #32]

		return true;
 801cb50:	2301      	movs	r3, #1
 801cb52:	e000      	b.n	801cb56 <read_hum_calibration_data+0xb6>
	}

	return false;
 801cb54:	2300      	movs	r3, #0
}
 801cb56:	0018      	movs	r0, r3
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	b004      	add	sp, #16
 801cb5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801cb60 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b088      	sub	sp, #32
 801cb64:	af04      	add	r7, sp, #16
 801cb66:	6078      	str	r0, [r7, #4]
 801cb68:	0008      	movs	r0, r1
 801cb6a:	0011      	movs	r1, r2
 801cb6c:	1cfb      	adds	r3, r7, #3
 801cb6e:	1c02      	adds	r2, r0, #0
 801cb70:	701a      	strb	r2, [r3, #0]
 801cb72:	1cbb      	adds	r3, r7, #2
 801cb74:	1c0a      	adds	r2, r1, #0
 801cb76:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cb7c:	210e      	movs	r1, #14
 801cb7e:	187a      	adds	r2, r7, r1
 801cb80:	18db      	adds	r3, r3, r3
 801cb82:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801cb88:	1cfb      	adds	r3, r7, #3
 801cb8a:	781b      	ldrb	r3, [r3, #0]
 801cb8c:	b29a      	uxth	r2, r3
 801cb8e:	187b      	adds	r3, r7, r1
 801cb90:	8819      	ldrh	r1, [r3, #0]
 801cb92:	4b09      	ldr	r3, [pc, #36]	@ (801cbb8 <write_register8+0x58>)
 801cb94:	9302      	str	r3, [sp, #8]
 801cb96:	2301      	movs	r3, #1
 801cb98:	9301      	str	r3, [sp, #4]
 801cb9a:	1cbb      	adds	r3, r7, #2
 801cb9c:	9300      	str	r3, [sp, #0]
 801cb9e:	2301      	movs	r3, #1
 801cba0:	f7ea fd56 	bl	8007650 <HAL_I2C_Mem_Write>
 801cba4:	1e03      	subs	r3, r0, #0
 801cba6:	d101      	bne.n	801cbac <write_register8+0x4c>
		return false;
 801cba8:	2300      	movs	r3, #0
 801cbaa:	e000      	b.n	801cbae <write_register8+0x4e>
	else
		return true;
 801cbac:	2301      	movs	r3, #1
}
 801cbae:	0018      	movs	r0, r3
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	b004      	add	sp, #16
 801cbb4:	bd80      	pop	{r7, pc}
 801cbb6:	46c0      	nop			@ (mov r8, r8)
 801cbb8:	00002710 	.word	0x00002710

0801cbbc <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801cbbc:	b590      	push	{r4, r7, lr}
 801cbbe:	b085      	sub	sp, #20
 801cbc0:	af00      	add	r7, sp, #0
 801cbc2:	6078      	str	r0, [r7, #4]
 801cbc4:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cbca:	2b76      	cmp	r3, #118	@ 0x76
 801cbcc:	d005      	beq.n	801cbda <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cbd2:	2b77      	cmp	r3, #119	@ 0x77
 801cbd4:	d001      	beq.n	801cbda <bmp280_init+0x1e>

		return false;
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	e0a3      	b.n	801cd22 <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	3332      	adds	r3, #50	@ 0x32
 801cbde:	001a      	movs	r2, r3
 801cbe0:	6878      	ldr	r0, [r7, #4]
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	21d0      	movs	r1, #208	@ 0xd0
 801cbe6:	f7ff fea7 	bl	801c938 <read_data>
 801cbea:	1e03      	subs	r3, r0, #0
 801cbec:	d001      	beq.n	801cbf2 <bmp280_init+0x36>
		return false;
 801cbee:	2300      	movs	r3, #0
 801cbf0:	e097      	b.n	801cd22 <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	2232      	movs	r2, #50	@ 0x32
 801cbf6:	5c9b      	ldrb	r3, [r3, r2]
 801cbf8:	2b58      	cmp	r3, #88	@ 0x58
 801cbfa:	d006      	beq.n	801cc0a <bmp280_init+0x4e>
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	2232      	movs	r2, #50	@ 0x32
 801cc00:	5c9b      	ldrb	r3, [r3, r2]
 801cc02:	2b60      	cmp	r3, #96	@ 0x60
 801cc04:	d001      	beq.n	801cc0a <bmp280_init+0x4e>

		return false;
 801cc06:	2300      	movs	r3, #0
 801cc08:	e08b      	b.n	801cd22 <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	22b6      	movs	r2, #182	@ 0xb6
 801cc0e:	21e0      	movs	r1, #224	@ 0xe0
 801cc10:	0018      	movs	r0, r3
 801cc12:	f7ff ffa5 	bl	801cb60 <write_register8>
 801cc16:	1e03      	subs	r3, r0, #0
 801cc18:	d001      	beq.n	801cc1e <bmp280_init+0x62>
		return false;
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	e081      	b.n	801cd22 <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801cc1e:	240c      	movs	r4, #12
 801cc20:	193a      	adds	r2, r7, r4
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	2301      	movs	r3, #1
 801cc26:	21f3      	movs	r1, #243	@ 0xf3
 801cc28:	f7ff fe86 	bl	801c938 <read_data>
 801cc2c:	1e03      	subs	r3, r0, #0
 801cc2e:	d1f6      	bne.n	801cc1e <bmp280_init+0x62>
				&& (status & 1) == 0)
 801cc30:	193b      	adds	r3, r7, r4
 801cc32:	781b      	ldrb	r3, [r3, #0]
 801cc34:	001a      	movs	r2, r3
 801cc36:	2301      	movs	r3, #1
 801cc38:	4013      	ands	r3, r2
 801cc3a:	d1f0      	bne.n	801cc1e <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	0018      	movs	r0, r3
 801cc40:	f7ff feae 	bl	801c9a0 <read_calibration_data>
 801cc44:	0003      	movs	r3, r0
 801cc46:	001a      	movs	r2, r3
 801cc48:	2301      	movs	r3, #1
 801cc4a:	4053      	eors	r3, r2
 801cc4c:	b2db      	uxtb	r3, r3
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d100      	bne.n	801cc54 <bmp280_init+0x98>
 801cc52:	e001      	b.n	801cc58 <bmp280_init+0x9c>
		return false;
 801cc54:	2300      	movs	r3, #0
 801cc56:	e064      	b.n	801cd22 <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	2232      	movs	r2, #50	@ 0x32
 801cc5c:	5c9b      	ldrb	r3, [r3, r2]
 801cc5e:	2b60      	cmp	r3, #96	@ 0x60
 801cc60:	d10c      	bne.n	801cc7c <bmp280_init+0xc0>
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	0018      	movs	r0, r3
 801cc66:	f7ff ff1b 	bl	801caa0 <read_hum_calibration_data>
 801cc6a:	0003      	movs	r3, r0
 801cc6c:	001a      	movs	r2, r3
 801cc6e:	2301      	movs	r3, #1
 801cc70:	4053      	eors	r3, r2
 801cc72:	b2db      	uxtb	r3, r3
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d001      	beq.n	801cc7c <bmp280_init+0xc0>
		return false;
 801cc78:	2300      	movs	r3, #0
 801cc7a:	e052      	b.n	801cd22 <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801cc7c:	683b      	ldr	r3, [r7, #0]
 801cc7e:	795b      	ldrb	r3, [r3, #5]
 801cc80:	015b      	lsls	r3, r3, #5
 801cc82:	b25a      	sxtb	r2, r3
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	785b      	ldrb	r3, [r3, #1]
 801cc88:	009b      	lsls	r3, r3, #2
 801cc8a:	b25b      	sxtb	r3, r3
 801cc8c:	4313      	orrs	r3, r2
 801cc8e:	b25a      	sxtb	r2, r3
 801cc90:	210f      	movs	r1, #15
 801cc92:	187b      	adds	r3, r7, r1
 801cc94:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801cc96:	187b      	adds	r3, r7, r1
 801cc98:	781a      	ldrb	r2, [r3, #0]
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	21f5      	movs	r1, #245	@ 0xf5
 801cc9e:	0018      	movs	r0, r3
 801cca0:	f7ff ff5e 	bl	801cb60 <write_register8>
 801cca4:	1e03      	subs	r3, r0, #0
 801cca6:	d001      	beq.n	801ccac <bmp280_init+0xf0>
		return false;
 801cca8:	2300      	movs	r3, #0
 801ccaa:	e03a      	b.n	801cd22 <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	781b      	ldrb	r3, [r3, #0]
 801ccb0:	2b01      	cmp	r3, #1
 801ccb2:	d102      	bne.n	801ccba <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801ccb4:	683b      	ldr	r3, [r7, #0]
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801ccba:	683b      	ldr	r3, [r7, #0]
 801ccbc:	78db      	ldrb	r3, [r3, #3]
 801ccbe:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801ccc0:	b25a      	sxtb	r2, r3
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	789b      	ldrb	r3, [r3, #2]
 801ccc6:	009b      	lsls	r3, r3, #2
 801ccc8:	b25b      	sxtb	r3, r3
 801ccca:	4313      	orrs	r3, r2
 801cccc:	b25a      	sxtb	r2, r3
 801ccce:	683b      	ldr	r3, [r7, #0]
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	b25b      	sxtb	r3, r3
 801ccd4:	4313      	orrs	r3, r2
 801ccd6:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801ccd8:	230e      	movs	r3, #14
 801ccda:	18fb      	adds	r3, r7, r3
 801ccdc:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	2232      	movs	r2, #50	@ 0x32
 801cce2:	5c9b      	ldrb	r3, [r3, r2]
 801cce4:	2b60      	cmp	r3, #96	@ 0x60
 801cce6:	d10f      	bne.n	801cd08 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801cce8:	210d      	movs	r1, #13
 801ccea:	187b      	adds	r3, r7, r1
 801ccec:	683a      	ldr	r2, [r7, #0]
 801ccee:	7912      	ldrb	r2, [r2, #4]
 801ccf0:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801ccf2:	187b      	adds	r3, r7, r1
 801ccf4:	781a      	ldrb	r2, [r3, #0]
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	21f2      	movs	r1, #242	@ 0xf2
 801ccfa:	0018      	movs	r0, r3
 801ccfc:	f7ff ff30 	bl	801cb60 <write_register8>
 801cd00:	1e03      	subs	r3, r0, #0
 801cd02:	d001      	beq.n	801cd08 <bmp280_init+0x14c>
			return false;
 801cd04:	2300      	movs	r3, #0
 801cd06:	e00c      	b.n	801cd22 <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801cd08:	230e      	movs	r3, #14
 801cd0a:	18fb      	adds	r3, r7, r3
 801cd0c:	781a      	ldrb	r2, [r3, #0]
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	21f4      	movs	r1, #244	@ 0xf4
 801cd12:	0018      	movs	r0, r3
 801cd14:	f7ff ff24 	bl	801cb60 <write_register8>
 801cd18:	1e03      	subs	r3, r0, #0
 801cd1a:	d001      	beq.n	801cd20 <bmp280_init+0x164>
		return false;
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	e000      	b.n	801cd22 <bmp280_init+0x166>
	}

	return true;
 801cd20:	2301      	movs	r3, #1
}
 801cd22:	0018      	movs	r0, r3
 801cd24:	46bd      	mov	sp, r7
 801cd26:	b005      	add	sp, #20
 801cd28:	bd90      	pop	{r4, r7, pc}

0801cd2a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801cd2a:	b580      	push	{r7, lr}
 801cd2c:	b086      	sub	sp, #24
 801cd2e:	af00      	add	r7, sp, #0
 801cd30:	60f8      	str	r0, [r7, #12]
 801cd32:	60b9      	str	r1, [r7, #8]
 801cd34:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801cd36:	68bb      	ldr	r3, [r7, #8]
 801cd38:	10da      	asrs	r2, r3, #3
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	881b      	ldrh	r3, [r3, #0]
 801cd3e:	005b      	lsls	r3, r3, #1
 801cd40:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801cd42:	68fa      	ldr	r2, [r7, #12]
 801cd44:	2102      	movs	r1, #2
 801cd46:	5e52      	ldrsh	r2, [r2, r1]
 801cd48:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801cd4a:	12db      	asrs	r3, r3, #11
 801cd4c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801cd4e:	68bb      	ldr	r3, [r7, #8]
 801cd50:	111b      	asrs	r3, r3, #4
 801cd52:	68fa      	ldr	r2, [r7, #12]
 801cd54:	8812      	ldrh	r2, [r2, #0]
 801cd56:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801cd58:	68ba      	ldr	r2, [r7, #8]
 801cd5a:	1112      	asrs	r2, r2, #4
 801cd5c:	68f9      	ldr	r1, [r7, #12]
 801cd5e:	8809      	ldrh	r1, [r1, #0]
 801cd60:	1a52      	subs	r2, r2, r1
 801cd62:	4353      	muls	r3, r2
 801cd64:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801cd66:	68fa      	ldr	r2, [r7, #12]
 801cd68:	2104      	movs	r1, #4
 801cd6a:	5e52      	ldrsh	r2, [r2, r1]
 801cd6c:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801cd6e:	139b      	asrs	r3, r3, #14
 801cd70:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801cd72:	697a      	ldr	r2, [r7, #20]
 801cd74:	693b      	ldr	r3, [r7, #16]
 801cd76:	18d2      	adds	r2, r2, r3
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	681a      	ldr	r2, [r3, #0]
 801cd80:	0013      	movs	r3, r2
 801cd82:	009b      	lsls	r3, r3, #2
 801cd84:	189b      	adds	r3, r3, r2
 801cd86:	3380      	adds	r3, #128	@ 0x80
 801cd88:	121b      	asrs	r3, r3, #8
}
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	b006      	add	sp, #24
 801cd90:	bd80      	pop	{r7, pc}
	...

0801cd94 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd96:	b0af      	sub	sp, #188	@ 0xbc
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	239c      	movs	r3, #156	@ 0x9c
 801cd9c:	18fe      	adds	r6, r7, r3
 801cd9e:	6030      	str	r0, [r6, #0]
 801cda0:	2098      	movs	r0, #152	@ 0x98
 801cda2:	1838      	adds	r0, r7, r0
 801cda4:	6001      	str	r1, [r0, #0]
 801cda6:	2194      	movs	r1, #148	@ 0x94
 801cda8:	1878      	adds	r0, r7, r1
 801cdaa:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801cdac:	187a      	adds	r2, r7, r1
 801cdae:	6813      	ldr	r3, [r2, #0]
 801cdb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cdb2:	17db      	asrs	r3, r3, #31
 801cdb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cdb6:	4ace      	ldr	r2, [pc, #824]	@ (801d0f0 <compensate_pressure+0x35c>)
 801cdb8:	2301      	movs	r3, #1
 801cdba:	425b      	negs	r3, r3
 801cdbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801cdbe:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801cdc0:	1880      	adds	r0, r0, r2
 801cdc2:	4159      	adcs	r1, r3
 801cdc4:	0002      	movs	r2, r0
 801cdc6:	000b      	movs	r3, r1
 801cdc8:	26b0      	movs	r6, #176	@ 0xb0
 801cdca:	19b9      	adds	r1, r7, r6
 801cdcc:	600a      	str	r2, [r1, #0]
 801cdce:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801cdd0:	19ba      	adds	r2, r7, r6
 801cdd2:	6853      	ldr	r3, [r2, #4]
 801cdd4:	6812      	ldr	r2, [r2, #0]
 801cdd6:	19b9      	adds	r1, r7, r6
 801cdd8:	6808      	ldr	r0, [r1, #0]
 801cdda:	6849      	ldr	r1, [r1, #4]
 801cddc:	f7e3 fb94 	bl	8000508 <__aeabi_lmul>
 801cde0:	0002      	movs	r2, r0
 801cde2:	000b      	movs	r3, r1
 801cde4:	0010      	movs	r0, r2
 801cde6:	0019      	movs	r1, r3
 801cde8:	239c      	movs	r3, #156	@ 0x9c
 801cdea:	18fa      	adds	r2, r7, r3
 801cdec:	6813      	ldr	r3, [r2, #0]
 801cdee:	2210      	movs	r2, #16
 801cdf0:	5e9b      	ldrsh	r3, [r3, r2]
 801cdf2:	653b      	str	r3, [r7, #80]	@ 0x50
 801cdf4:	17db      	asrs	r3, r3, #31
 801cdf6:	657b      	str	r3, [r7, #84]	@ 0x54
 801cdf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cdfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cdfc:	f7e3 fb84 	bl	8000508 <__aeabi_lmul>
 801ce00:	0002      	movs	r2, r0
 801ce02:	000b      	movs	r3, r1
 801ce04:	21a8      	movs	r1, #168	@ 0xa8
 801ce06:	1878      	adds	r0, r7, r1
 801ce08:	6002      	str	r2, [r0, #0]
 801ce0a:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801ce0c:	239c      	movs	r3, #156	@ 0x9c
 801ce0e:	18fa      	adds	r2, r7, r3
 801ce10:	6813      	ldr	r3, [r2, #0]
 801ce12:	220e      	movs	r2, #14
 801ce14:	5e9b      	ldrsh	r3, [r3, r2]
 801ce16:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ce18:	17db      	asrs	r3, r3, #31
 801ce1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ce1c:	19ba      	adds	r2, r7, r6
 801ce1e:	6853      	ldr	r3, [r2, #4]
 801ce20:	6812      	ldr	r2, [r2, #0]
 801ce22:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801ce24:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801ce26:	f7e3 fb6f 	bl	8000508 <__aeabi_lmul>
 801ce2a:	0002      	movs	r2, r0
 801ce2c:	000b      	movs	r3, r1
 801ce2e:	0bd1      	lsrs	r1, r2, #15
 801ce30:	045d      	lsls	r5, r3, #17
 801ce32:	430d      	orrs	r5, r1
 801ce34:	0454      	lsls	r4, r2, #17
 801ce36:	21a8      	movs	r1, #168	@ 0xa8
 801ce38:	187a      	adds	r2, r7, r1
 801ce3a:	6853      	ldr	r3, [r2, #4]
 801ce3c:	6812      	ldr	r2, [r2, #0]
 801ce3e:	1912      	adds	r2, r2, r4
 801ce40:	416b      	adcs	r3, r5
 801ce42:	1878      	adds	r0, r7, r1
 801ce44:	6002      	str	r2, [r0, #0]
 801ce46:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801ce48:	259c      	movs	r5, #156	@ 0x9c
 801ce4a:	197b      	adds	r3, r7, r5
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	220c      	movs	r2, #12
 801ce50:	5e9b      	ldrsh	r3, [r3, r2]
 801ce52:	643b      	str	r3, [r7, #64]	@ 0x40
 801ce54:	17db      	asrs	r3, r3, #31
 801ce56:	647b      	str	r3, [r7, #68]	@ 0x44
 801ce58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ce5a:	00db      	lsls	r3, r3, #3
 801ce5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ce5e:	2300      	movs	r3, #0
 801ce60:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ce62:	000c      	movs	r4, r1
 801ce64:	187b      	adds	r3, r7, r1
 801ce66:	681a      	ldr	r2, [r3, #0]
 801ce68:	685b      	ldr	r3, [r3, #4]
 801ce6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801ce6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801ce6e:	1812      	adds	r2, r2, r0
 801ce70:	414b      	adcs	r3, r1
 801ce72:	1939      	adds	r1, r7, r4
 801ce74:	600a      	str	r2, [r1, #0]
 801ce76:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801ce78:	0034      	movs	r4, r6
 801ce7a:	193b      	adds	r3, r7, r4
 801ce7c:	681a      	ldr	r2, [r3, #0]
 801ce7e:	685b      	ldr	r3, [r3, #4]
 801ce80:	1939      	adds	r1, r7, r4
 801ce82:	6808      	ldr	r0, [r1, #0]
 801ce84:	6849      	ldr	r1, [r1, #4]
 801ce86:	f7e3 fb3f 	bl	8000508 <__aeabi_lmul>
 801ce8a:	0002      	movs	r2, r0
 801ce8c:	000b      	movs	r3, r1
 801ce8e:	0010      	movs	r0, r2
 801ce90:	0019      	movs	r1, r3
 801ce92:	197b      	adds	r3, r7, r5
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	220a      	movs	r2, #10
 801ce98:	5e9b      	ldrsh	r3, [r3, r2]
 801ce9a:	633b      	str	r3, [r7, #48]	@ 0x30
 801ce9c:	17db      	asrs	r3, r3, #31
 801ce9e:	637b      	str	r3, [r7, #52]	@ 0x34
 801cea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cea4:	f7e3 fb30 	bl	8000508 <__aeabi_lmul>
 801cea8:	0002      	movs	r2, r0
 801ceaa:	000b      	movs	r3, r1
 801ceac:	0619      	lsls	r1, r3, #24
 801ceae:	468c      	mov	ip, r1
 801ceb0:	0a10      	lsrs	r0, r2, #8
 801ceb2:	2688      	movs	r6, #136	@ 0x88
 801ceb4:	19b9      	adds	r1, r7, r6
 801ceb6:	6008      	str	r0, [r1, #0]
 801ceb8:	19b8      	adds	r0, r7, r6
 801ceba:	6800      	ldr	r0, [r0, #0]
 801cebc:	4661      	mov	r1, ip
 801cebe:	4308      	orrs	r0, r1
 801cec0:	19b9      	adds	r1, r7, r6
 801cec2:	6008      	str	r0, [r1, #0]
 801cec4:	121b      	asrs	r3, r3, #8
 801cec6:	228c      	movs	r2, #140	@ 0x8c
 801cec8:	18ba      	adds	r2, r7, r2
 801ceca:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801cecc:	197b      	adds	r3, r7, r5
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	2208      	movs	r2, #8
 801ced2:	5e9b      	ldrsh	r3, [r3, r2]
 801ced4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ced6:	17db      	asrs	r3, r3, #31
 801ced8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ceda:	193b      	adds	r3, r7, r4
 801cedc:	681a      	ldr	r2, [r3, #0]
 801cede:	685b      	ldr	r3, [r3, #4]
 801cee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cee4:	f7e3 fb10 	bl	8000508 <__aeabi_lmul>
 801cee8:	0002      	movs	r2, r0
 801ceea:	000b      	movs	r3, r1
 801ceec:	0d11      	lsrs	r1, r2, #20
 801ceee:	468c      	mov	ip, r1
 801cef0:	0318      	lsls	r0, r3, #12
 801cef2:	2184      	movs	r1, #132	@ 0x84
 801cef4:	1879      	adds	r1, r7, r1
 801cef6:	6008      	str	r0, [r1, #0]
 801cef8:	2084      	movs	r0, #132	@ 0x84
 801cefa:	1839      	adds	r1, r7, r0
 801cefc:	6808      	ldr	r0, [r1, #0]
 801cefe:	4661      	mov	r1, ip
 801cf00:	4308      	orrs	r0, r1
 801cf02:	2184      	movs	r1, #132	@ 0x84
 801cf04:	1879      	adds	r1, r7, r1
 801cf06:	6008      	str	r0, [r1, #0]
 801cf08:	0313      	lsls	r3, r2, #12
 801cf0a:	2180      	movs	r1, #128	@ 0x80
 801cf0c:	187a      	adds	r2, r7, r1
 801cf0e:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801cf10:	19bb      	adds	r3, r7, r6
 801cf12:	681a      	ldr	r2, [r3, #0]
 801cf14:	685b      	ldr	r3, [r3, #4]
 801cf16:	1879      	adds	r1, r7, r1
 801cf18:	6808      	ldr	r0, [r1, #0]
 801cf1a:	6849      	ldr	r1, [r1, #4]
 801cf1c:	1812      	adds	r2, r2, r0
 801cf1e:	414b      	adcs	r3, r1
 801cf20:	1939      	adds	r1, r7, r4
 801cf22:	600a      	str	r2, [r1, #0]
 801cf24:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801cf26:	193b      	adds	r3, r7, r4
 801cf28:	6818      	ldr	r0, [r3, #0]
 801cf2a:	6859      	ldr	r1, [r3, #4]
 801cf2c:	2200      	movs	r2, #0
 801cf2e:	2380      	movs	r3, #128	@ 0x80
 801cf30:	021b      	lsls	r3, r3, #8
 801cf32:	1880      	adds	r0, r0, r2
 801cf34:	4159      	adcs	r1, r3
 801cf36:	197b      	adds	r3, r7, r5
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	88db      	ldrh	r3, [r3, #6]
 801cf3c:	623b      	str	r3, [r7, #32]
 801cf3e:	2300      	movs	r3, #0
 801cf40:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf42:	6a3a      	ldr	r2, [r7, #32]
 801cf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf46:	f7e3 fadf 	bl	8000508 <__aeabi_lmul>
 801cf4a:	0002      	movs	r2, r0
 801cf4c:	000b      	movs	r3, r1
 801cf4e:	1059      	asrs	r1, r3, #1
 801cf50:	1938      	adds	r0, r7, r4
 801cf52:	6001      	str	r1, [r0, #0]
 801cf54:	17db      	asrs	r3, r3, #31
 801cf56:	21b4      	movs	r1, #180	@ 0xb4
 801cf58:	187a      	adds	r2, r7, r1
 801cf5a:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801cf5c:	193b      	adds	r3, r7, r4
 801cf5e:	681a      	ldr	r2, [r3, #0]
 801cf60:	187b      	adds	r3, r7, r1
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	431a      	orrs	r2, r3
 801cf66:	d101      	bne.n	801cf6c <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801cf68:	2300      	movs	r3, #0
 801cf6a:	e0bc      	b.n	801d0e6 <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801cf6c:	2398      	movs	r3, #152	@ 0x98
 801cf6e:	18fb      	adds	r3, r7, r3
 801cf70:	681a      	ldr	r2, [r3, #0]
 801cf72:	2380      	movs	r3, #128	@ 0x80
 801cf74:	035b      	lsls	r3, r3, #13
 801cf76:	1a9b      	subs	r3, r3, r2
 801cf78:	24a0      	movs	r4, #160	@ 0xa0
 801cf7a:	193a      	adds	r2, r7, r4
 801cf7c:	6013      	str	r3, [r2, #0]
 801cf7e:	17db      	asrs	r3, r3, #31
 801cf80:	25a4      	movs	r5, #164	@ 0xa4
 801cf82:	197a      	adds	r2, r7, r5
 801cf84:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801cf86:	193b      	adds	r3, r7, r4
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	105b      	asrs	r3, r3, #1
 801cf8c:	61fb      	str	r3, [r7, #28]
 801cf8e:	193b      	adds	r3, r7, r4
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	07db      	lsls	r3, r3, #31
 801cf94:	61bb      	str	r3, [r7, #24]
 801cf96:	20a8      	movs	r0, #168	@ 0xa8
 801cf98:	183a      	adds	r2, r7, r0
 801cf9a:	6853      	ldr	r3, [r2, #4]
 801cf9c:	6812      	ldr	r2, [r2, #0]
 801cf9e:	69b8      	ldr	r0, [r7, #24]
 801cfa0:	69f9      	ldr	r1, [r7, #28]
 801cfa2:	1a80      	subs	r0, r0, r2
 801cfa4:	4199      	sbcs	r1, r3
 801cfa6:	4a53      	ldr	r2, [pc, #332]	@ (801d0f4 <compensate_pressure+0x360>)
 801cfa8:	2300      	movs	r3, #0
 801cfaa:	f7e3 faad 	bl	8000508 <__aeabi_lmul>
 801cfae:	0002      	movs	r2, r0
 801cfb0:	000b      	movs	r3, r1
 801cfb2:	0010      	movs	r0, r2
 801cfb4:	0019      	movs	r1, r3
 801cfb6:	23b0      	movs	r3, #176	@ 0xb0
 801cfb8:	18fa      	adds	r2, r7, r3
 801cfba:	6853      	ldr	r3, [r2, #4]
 801cfbc:	6812      	ldr	r2, [r2, #0]
 801cfbe:	f7e3 fa5f 	bl	8000480 <__aeabi_ldivmod>
 801cfc2:	0002      	movs	r2, r0
 801cfc4:	000b      	movs	r3, r1
 801cfc6:	1939      	adds	r1, r7, r4
 801cfc8:	600a      	str	r2, [r1, #0]
 801cfca:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801cfcc:	269c      	movs	r6, #156	@ 0x9c
 801cfce:	19ba      	adds	r2, r7, r6
 801cfd0:	6813      	ldr	r3, [r2, #0]
 801cfd2:	2216      	movs	r2, #22
 801cfd4:	5e9b      	ldrsh	r3, [r3, r2]
 801cfd6:	613b      	str	r3, [r7, #16]
 801cfd8:	17db      	asrs	r3, r3, #31
 801cfda:	617b      	str	r3, [r7, #20]
 801cfdc:	197a      	adds	r2, r7, r5
 801cfde:	6813      	ldr	r3, [r2, #0]
 801cfe0:	04da      	lsls	r2, r3, #19
 801cfe2:	1939      	adds	r1, r7, r4
 801cfe4:	680b      	ldr	r3, [r1, #0]
 801cfe6:	0b5b      	lsrs	r3, r3, #13
 801cfe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cfea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cfec:	4313      	orrs	r3, r2
 801cfee:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cff0:	197a      	adds	r2, r7, r5
 801cff2:	6813      	ldr	r3, [r2, #0]
 801cff4:	135b      	asrs	r3, r3, #13
 801cff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801cff8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801cffa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cffc:	6938      	ldr	r0, [r7, #16]
 801cffe:	6979      	ldr	r1, [r7, #20]
 801d000:	f7e3 fa82 	bl	8000508 <__aeabi_lmul>
 801d004:	0002      	movs	r2, r0
 801d006:	000b      	movs	r3, r1
 801d008:	0010      	movs	r0, r2
 801d00a:	0019      	movs	r1, r3
 801d00c:	197a      	adds	r2, r7, r5
 801d00e:	6813      	ldr	r3, [r2, #0]
 801d010:	04da      	lsls	r2, r3, #19
 801d012:	193b      	adds	r3, r7, r4
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	0b5b      	lsrs	r3, r3, #13
 801d018:	673b      	str	r3, [r7, #112]	@ 0x70
 801d01a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d01c:	4313      	orrs	r3, r2
 801d01e:	673b      	str	r3, [r7, #112]	@ 0x70
 801d020:	197a      	adds	r2, r7, r5
 801d022:	6813      	ldr	r3, [r2, #0]
 801d024:	135b      	asrs	r3, r3, #13
 801d026:	677b      	str	r3, [r7, #116]	@ 0x74
 801d028:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801d02a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d02c:	f7e3 fa6c 	bl	8000508 <__aeabi_lmul>
 801d030:	0002      	movs	r2, r0
 801d032:	000b      	movs	r3, r1
 801d034:	01d9      	lsls	r1, r3, #7
 801d036:	0e50      	lsrs	r0, r2, #25
 801d038:	4301      	orrs	r1, r0
 801d03a:	25b0      	movs	r5, #176	@ 0xb0
 801d03c:	1978      	adds	r0, r7, r5
 801d03e:	6001      	str	r1, [r0, #0]
 801d040:	165b      	asrs	r3, r3, #25
 801d042:	22b4      	movs	r2, #180	@ 0xb4
 801d044:	18ba      	adds	r2, r7, r2
 801d046:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801d048:	19ba      	adds	r2, r7, r6
 801d04a:	6813      	ldr	r3, [r2, #0]
 801d04c:	2214      	movs	r2, #20
 801d04e:	5e9b      	ldrsh	r3, [r3, r2]
 801d050:	60bb      	str	r3, [r7, #8]
 801d052:	17db      	asrs	r3, r3, #31
 801d054:	60fb      	str	r3, [r7, #12]
 801d056:	193a      	adds	r2, r7, r4
 801d058:	6853      	ldr	r3, [r2, #4]
 801d05a:	6812      	ldr	r2, [r2, #0]
 801d05c:	68b8      	ldr	r0, [r7, #8]
 801d05e:	68f9      	ldr	r1, [r7, #12]
 801d060:	f7e3 fa52 	bl	8000508 <__aeabi_lmul>
 801d064:	0002      	movs	r2, r0
 801d066:	000b      	movs	r3, r1
 801d068:	0359      	lsls	r1, r3, #13
 801d06a:	0cd0      	lsrs	r0, r2, #19
 801d06c:	4301      	orrs	r1, r0
 801d06e:	20a8      	movs	r0, #168	@ 0xa8
 801d070:	1838      	adds	r0, r7, r0
 801d072:	6001      	str	r1, [r0, #0]
 801d074:	14db      	asrs	r3, r3, #19
 801d076:	22ac      	movs	r2, #172	@ 0xac
 801d078:	18ba      	adds	r2, r7, r2
 801d07a:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801d07c:	193a      	adds	r2, r7, r4
 801d07e:	6810      	ldr	r0, [r2, #0]
 801d080:	6851      	ldr	r1, [r2, #4]
 801d082:	197a      	adds	r2, r7, r5
 801d084:	6853      	ldr	r3, [r2, #4]
 801d086:	6812      	ldr	r2, [r2, #0]
 801d088:	1880      	adds	r0, r0, r2
 801d08a:	4159      	adcs	r1, r3
 801d08c:	23a8      	movs	r3, #168	@ 0xa8
 801d08e:	18fb      	adds	r3, r7, r3
 801d090:	681a      	ldr	r2, [r3, #0]
 801d092:	685b      	ldr	r3, [r3, #4]
 801d094:	1812      	adds	r2, r2, r0
 801d096:	414b      	adcs	r3, r1
 801d098:	0619      	lsls	r1, r3, #24
 801d09a:	0a10      	lsrs	r0, r2, #8
 801d09c:	66b8      	str	r0, [r7, #104]	@ 0x68
 801d09e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801d0a0:	4308      	orrs	r0, r1
 801d0a2:	66b8      	str	r0, [r7, #104]	@ 0x68
 801d0a4:	121b      	asrs	r3, r3, #8
 801d0a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801d0a8:	19bb      	adds	r3, r7, r6
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	2212      	movs	r2, #18
 801d0ae:	5e9b      	ldrsh	r3, [r3, r2]
 801d0b0:	603b      	str	r3, [r7, #0]
 801d0b2:	17db      	asrs	r3, r3, #31
 801d0b4:	607b      	str	r3, [r7, #4]
 801d0b6:	6839      	ldr	r1, [r7, #0]
 801d0b8:	687a      	ldr	r2, [r7, #4]
 801d0ba:	000b      	movs	r3, r1
 801d0bc:	0f1b      	lsrs	r3, r3, #28
 801d0be:	0010      	movs	r0, r2
 801d0c0:	0100      	lsls	r0, r0, #4
 801d0c2:	6678      	str	r0, [r7, #100]	@ 0x64
 801d0c4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801d0c6:	4318      	orrs	r0, r3
 801d0c8:	6678      	str	r0, [r7, #100]	@ 0x64
 801d0ca:	000b      	movs	r3, r1
 801d0cc:	011b      	lsls	r3, r3, #4
 801d0ce:	663b      	str	r3, [r7, #96]	@ 0x60
 801d0d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d0d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d0d4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801d0d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801d0d8:	1812      	adds	r2, r2, r0
 801d0da:	414b      	adcs	r3, r1
 801d0dc:	1939      	adds	r1, r7, r4
 801d0de:	600a      	str	r2, [r1, #0]
 801d0e0:	604b      	str	r3, [r1, #4]
	return p;
 801d0e2:	193b      	adds	r3, r7, r4
 801d0e4:	681b      	ldr	r3, [r3, #0]
}
 801d0e6:	0018      	movs	r0, r3
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	b02f      	add	sp, #188	@ 0xbc
 801d0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0ee:	46c0      	nop			@ (mov r8, r8)
 801d0f0:	fffe0c00 	.word	0xfffe0c00
 801d0f4:	00000c35 	.word	0x00000c35

0801d0f8 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801d0f8:	b580      	push	{r7, lr}
 801d0fa:	b086      	sub	sp, #24
 801d0fc:	af00      	add	r7, sp, #0
 801d0fe:	60f8      	str	r0, [r7, #12]
 801d100:	60b9      	str	r1, [r7, #8]
 801d102:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	4a2c      	ldr	r2, [pc, #176]	@ (801d1b8 <compensate_humidity+0xc0>)
 801d108:	4694      	mov	ip, r2
 801d10a:	4463      	add	r3, ip
 801d10c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801d10e:	68bb      	ldr	r3, [r7, #8]
 801d110:	039a      	lsls	r2, r3, #14
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	211e      	movs	r1, #30
 801d116:	5e5b      	ldrsh	r3, [r3, r1]
 801d118:	051b      	lsls	r3, r3, #20
 801d11a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801d11c:	68fb      	ldr	r3, [r7, #12]
 801d11e:	2120      	movs	r1, #32
 801d120:	5e5b      	ldrsh	r3, [r3, r1]
 801d122:	0019      	movs	r1, r3
 801d124:	697b      	ldr	r3, [r7, #20]
 801d126:	434b      	muls	r3, r1
 801d128:	1ad3      	subs	r3, r2, r3
 801d12a:	2280      	movs	r2, #128	@ 0x80
 801d12c:	01d2      	lsls	r2, r2, #7
 801d12e:	4694      	mov	ip, r2
 801d130:	4463      	add	r3, ip
 801d132:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801d134:	68fa      	ldr	r2, [r7, #12]
 801d136:	2122      	movs	r1, #34	@ 0x22
 801d138:	5652      	ldrsb	r2, [r2, r1]
 801d13a:	0011      	movs	r1, r2
 801d13c:	697a      	ldr	r2, [r7, #20]
 801d13e:	434a      	muls	r2, r1
 801d140:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801d142:	68f9      	ldr	r1, [r7, #12]
 801d144:	7f09      	ldrb	r1, [r1, #28]
 801d146:	0008      	movs	r0, r1
 801d148:	6979      	ldr	r1, [r7, #20]
 801d14a:	4341      	muls	r1, r0
 801d14c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801d14e:	2080      	movs	r0, #128	@ 0x80
 801d150:	0200      	lsls	r0, r0, #8
 801d152:	4684      	mov	ip, r0
 801d154:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801d156:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801d158:	1292      	asrs	r2, r2, #10
 801d15a:	2180      	movs	r1, #128	@ 0x80
 801d15c:	0389      	lsls	r1, r1, #14
 801d15e:	468c      	mov	ip, r1
 801d160:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801d162:	68f9      	ldr	r1, [r7, #12]
 801d164:	201a      	movs	r0, #26
 801d166:	5e09      	ldrsh	r1, [r1, r0]
 801d168:	434a      	muls	r2, r1
 801d16a:	2180      	movs	r1, #128	@ 0x80
 801d16c:	0189      	lsls	r1, r1, #6
 801d16e:	468c      	mov	ip, r1
 801d170:	4462      	add	r2, ip
 801d172:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801d174:	4353      	muls	r3, r2
 801d176:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801d178:	697b      	ldr	r3, [r7, #20]
 801d17a:	13db      	asrs	r3, r3, #15
 801d17c:	697a      	ldr	r2, [r7, #20]
 801d17e:	13d2      	asrs	r2, r2, #15
 801d180:	4353      	muls	r3, r2
 801d182:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801d184:	68fa      	ldr	r2, [r7, #12]
 801d186:	7e12      	ldrb	r2, [r2, #24]
 801d188:	4353      	muls	r3, r2
 801d18a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801d18c:	697a      	ldr	r2, [r7, #20]
 801d18e:	1ad3      	subs	r3, r2, r3
 801d190:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801d192:	697b      	ldr	r3, [r7, #20]
 801d194:	2b00      	cmp	r3, #0
 801d196:	da00      	bge.n	801d19a <compensate_humidity+0xa2>
 801d198:	2300      	movs	r3, #0
 801d19a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801d19c:	697b      	ldr	r3, [r7, #20]
 801d19e:	22c8      	movs	r2, #200	@ 0xc8
 801d1a0:	0552      	lsls	r2, r2, #21
 801d1a2:	4293      	cmp	r3, r2
 801d1a4:	dd01      	ble.n	801d1aa <compensate_humidity+0xb2>
 801d1a6:	23c8      	movs	r3, #200	@ 0xc8
 801d1a8:	055b      	lsls	r3, r3, #21
 801d1aa:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801d1ac:	697b      	ldr	r3, [r7, #20]
 801d1ae:	131b      	asrs	r3, r3, #12
}
 801d1b0:	0018      	movs	r0, r3
 801d1b2:	46bd      	mov	sp, r7
 801d1b4:	b006      	add	sp, #24
 801d1b6:	bd80      	pop	{r7, pc}
 801d1b8:	fffed400 	.word	0xfffed400

0801d1bc <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801d1bc:	b590      	push	{r4, r7, lr}
 801d1be:	b08d      	sub	sp, #52	@ 0x34
 801d1c0:	af00      	add	r7, sp, #0
 801d1c2:	60f8      	str	r0, [r7, #12]
 801d1c4:	60b9      	str	r1, [r7, #8]
 801d1c6:	607a      	str	r2, [r7, #4]
 801d1c8:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	2232      	movs	r2, #50	@ 0x32
 801d1ce:	5c9b      	ldrb	r3, [r3, r2]
 801d1d0:	2b60      	cmp	r3, #96	@ 0x60
 801d1d2:	d007      	beq.n	801d1e4 <bmp280_read_fixed+0x28>
		if (humidity)
 801d1d4:	683b      	ldr	r3, [r7, #0]
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d002      	beq.n	801d1e0 <bmp280_read_fixed+0x24>
			*humidity = 0;
 801d1da:	683b      	ldr	r3, [r7, #0]
 801d1dc:	2200      	movs	r2, #0
 801d1de:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801d1e4:	683b      	ldr	r3, [r7, #0]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d001      	beq.n	801d1ee <bmp280_read_fixed+0x32>
 801d1ea:	2308      	movs	r3, #8
 801d1ec:	e000      	b.n	801d1f0 <bmp280_read_fixed+0x34>
 801d1ee:	2306      	movs	r3, #6
 801d1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801d1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1f4:	b2db      	uxtb	r3, r3
 801d1f6:	2218      	movs	r2, #24
 801d1f8:	18ba      	adds	r2, r7, r2
 801d1fa:	68f8      	ldr	r0, [r7, #12]
 801d1fc:	21f7      	movs	r1, #247	@ 0xf7
 801d1fe:	f7ff fb9b 	bl	801c938 <read_data>
 801d202:	1e03      	subs	r3, r0, #0
 801d204:	d001      	beq.n	801d20a <bmp280_read_fixed+0x4e>
		return false;
 801d206:	2300      	movs	r3, #0
 801d208:	e041      	b.n	801d28e <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801d20a:	2418      	movs	r4, #24
 801d20c:	193b      	adds	r3, r7, r4
 801d20e:	781b      	ldrb	r3, [r3, #0]
 801d210:	031a      	lsls	r2, r3, #12
 801d212:	193b      	adds	r3, r7, r4
 801d214:	785b      	ldrb	r3, [r3, #1]
 801d216:	011b      	lsls	r3, r3, #4
 801d218:	4313      	orrs	r3, r2
 801d21a:	193a      	adds	r2, r7, r4
 801d21c:	7892      	ldrb	r2, [r2, #2]
 801d21e:	0912      	lsrs	r2, r2, #4
 801d220:	b2d2      	uxtb	r2, r2
 801d222:	4313      	orrs	r3, r2
 801d224:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801d226:	193b      	adds	r3, r7, r4
 801d228:	78db      	ldrb	r3, [r3, #3]
 801d22a:	031a      	lsls	r2, r3, #12
 801d22c:	193b      	adds	r3, r7, r4
 801d22e:	791b      	ldrb	r3, [r3, #4]
 801d230:	011b      	lsls	r3, r3, #4
 801d232:	4313      	orrs	r3, r2
 801d234:	193a      	adds	r2, r7, r4
 801d236:	7952      	ldrb	r2, [r2, #5]
 801d238:	0912      	lsrs	r2, r2, #4
 801d23a:	b2d2      	uxtb	r2, r2
 801d23c:	4313      	orrs	r3, r2
 801d23e:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801d240:	2314      	movs	r3, #20
 801d242:	18fa      	adds	r2, r7, r3
 801d244:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	0018      	movs	r0, r3
 801d24a:	f7ff fd6e 	bl	801cd2a <compensate_temperature>
 801d24e:	0002      	movs	r2, r0
 801d250:	68bb      	ldr	r3, [r7, #8]
 801d252:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801d254:	697a      	ldr	r2, [r7, #20]
 801d256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	0018      	movs	r0, r3
 801d25c:	f7ff fd9a 	bl	801cd94 <compensate_pressure>
 801d260:	0002      	movs	r2, r0
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801d266:	683b      	ldr	r3, [r7, #0]
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d00f      	beq.n	801d28c <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801d26c:	193b      	adds	r3, r7, r4
 801d26e:	799b      	ldrb	r3, [r3, #6]
 801d270:	021b      	lsls	r3, r3, #8
 801d272:	193a      	adds	r2, r7, r4
 801d274:	79d2      	ldrb	r2, [r2, #7]
 801d276:	4313      	orrs	r3, r2
 801d278:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801d27a:	697a      	ldr	r2, [r7, #20]
 801d27c:	6a39      	ldr	r1, [r7, #32]
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	0018      	movs	r0, r3
 801d282:	f7ff ff39 	bl	801d0f8 <compensate_humidity>
 801d286:	0002      	movs	r2, r0
 801d288:	683b      	ldr	r3, [r7, #0]
 801d28a:	601a      	str	r2, [r3, #0]
	}

	return true;
 801d28c:	2301      	movs	r3, #1
}
 801d28e:	0018      	movs	r0, r3
 801d290:	46bd      	mov	sp, r7
 801d292:	b00d      	add	sp, #52	@ 0x34
 801d294:	bd90      	pop	{r4, r7, pc}

0801d296 <memset>:
 801d296:	0003      	movs	r3, r0
 801d298:	1882      	adds	r2, r0, r2
 801d29a:	4293      	cmp	r3, r2
 801d29c:	d100      	bne.n	801d2a0 <memset+0xa>
 801d29e:	4770      	bx	lr
 801d2a0:	7019      	strb	r1, [r3, #0]
 801d2a2:	3301      	adds	r3, #1
 801d2a4:	e7f9      	b.n	801d29a <memset+0x4>
	...

0801d2a8 <__libc_init_array>:
 801d2a8:	b570      	push	{r4, r5, r6, lr}
 801d2aa:	2600      	movs	r6, #0
 801d2ac:	4c0c      	ldr	r4, [pc, #48]	@ (801d2e0 <__libc_init_array+0x38>)
 801d2ae:	4d0d      	ldr	r5, [pc, #52]	@ (801d2e4 <__libc_init_array+0x3c>)
 801d2b0:	1b64      	subs	r4, r4, r5
 801d2b2:	10a4      	asrs	r4, r4, #2
 801d2b4:	42a6      	cmp	r6, r4
 801d2b6:	d109      	bne.n	801d2cc <__libc_init_array+0x24>
 801d2b8:	2600      	movs	r6, #0
 801d2ba:	f000 f89f 	bl	801d3fc <_init>
 801d2be:	4c0a      	ldr	r4, [pc, #40]	@ (801d2e8 <__libc_init_array+0x40>)
 801d2c0:	4d0a      	ldr	r5, [pc, #40]	@ (801d2ec <__libc_init_array+0x44>)
 801d2c2:	1b64      	subs	r4, r4, r5
 801d2c4:	10a4      	asrs	r4, r4, #2
 801d2c6:	42a6      	cmp	r6, r4
 801d2c8:	d105      	bne.n	801d2d6 <__libc_init_array+0x2e>
 801d2ca:	bd70      	pop	{r4, r5, r6, pc}
 801d2cc:	00b3      	lsls	r3, r6, #2
 801d2ce:	58eb      	ldr	r3, [r5, r3]
 801d2d0:	4798      	blx	r3
 801d2d2:	3601      	adds	r6, #1
 801d2d4:	e7ee      	b.n	801d2b4 <__libc_init_array+0xc>
 801d2d6:	00b3      	lsls	r3, r6, #2
 801d2d8:	58eb      	ldr	r3, [r5, r3]
 801d2da:	4798      	blx	r3
 801d2dc:	3601      	adds	r6, #1
 801d2de:	e7f2      	b.n	801d2c6 <__libc_init_array+0x1e>
 801d2e0:	0801e8d0 	.word	0x0801e8d0
 801d2e4:	0801e8d0 	.word	0x0801e8d0
 801d2e8:	0801e8d4 	.word	0x0801e8d4
 801d2ec:	0801e8d0 	.word	0x0801e8d0

0801d2f0 <memcpy>:
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	b510      	push	{r4, lr}
 801d2f4:	429a      	cmp	r2, r3
 801d2f6:	d100      	bne.n	801d2fa <memcpy+0xa>
 801d2f8:	bd10      	pop	{r4, pc}
 801d2fa:	5ccc      	ldrb	r4, [r1, r3]
 801d2fc:	54c4      	strb	r4, [r0, r3]
 801d2fe:	3301      	adds	r3, #1
 801d300:	e7f8      	b.n	801d2f4 <memcpy+0x4>
	...

0801d304 <floor>:
 801d304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d306:	004b      	lsls	r3, r1, #1
 801d308:	4a36      	ldr	r2, [pc, #216]	@ (801d3e4 <floor+0xe0>)
 801d30a:	0d5b      	lsrs	r3, r3, #21
 801d30c:	189e      	adds	r6, r3, r2
 801d30e:	000c      	movs	r4, r1
 801d310:	0005      	movs	r5, r0
 801d312:	9001      	str	r0, [sp, #4]
 801d314:	2e13      	cmp	r6, #19
 801d316:	dc2f      	bgt.n	801d378 <floor+0x74>
 801d318:	2e00      	cmp	r6, #0
 801d31a:	da14      	bge.n	801d346 <floor+0x42>
 801d31c:	4a32      	ldr	r2, [pc, #200]	@ (801d3e8 <floor+0xe4>)
 801d31e:	4b33      	ldr	r3, [pc, #204]	@ (801d3ec <floor+0xe8>)
 801d320:	f7e3 fc0e 	bl	8000b40 <__aeabi_dadd>
 801d324:	2200      	movs	r2, #0
 801d326:	2300      	movs	r3, #0
 801d328:	f7e3 f896 	bl	8000458 <__aeabi_dcmpgt>
 801d32c:	2800      	cmp	r0, #0
 801d32e:	d007      	beq.n	801d340 <floor+0x3c>
 801d330:	2c00      	cmp	r4, #0
 801d332:	da50      	bge.n	801d3d6 <floor+0xd2>
 801d334:	0064      	lsls	r4, r4, #1
 801d336:	0864      	lsrs	r4, r4, #1
 801d338:	4325      	orrs	r5, r4
 801d33a:	d14f      	bne.n	801d3dc <floor+0xd8>
 801d33c:	2480      	movs	r4, #128	@ 0x80
 801d33e:	0624      	lsls	r4, r4, #24
 801d340:	0021      	movs	r1, r4
 801d342:	0028      	movs	r0, r5
 801d344:	e022      	b.n	801d38c <floor+0x88>
 801d346:	4f2a      	ldr	r7, [pc, #168]	@ (801d3f0 <floor+0xec>)
 801d348:	4137      	asrs	r7, r6
 801d34a:	003b      	movs	r3, r7
 801d34c:	400b      	ands	r3, r1
 801d34e:	4303      	orrs	r3, r0
 801d350:	d01c      	beq.n	801d38c <floor+0x88>
 801d352:	4a25      	ldr	r2, [pc, #148]	@ (801d3e8 <floor+0xe4>)
 801d354:	4b25      	ldr	r3, [pc, #148]	@ (801d3ec <floor+0xe8>)
 801d356:	f7e3 fbf3 	bl	8000b40 <__aeabi_dadd>
 801d35a:	2200      	movs	r2, #0
 801d35c:	2300      	movs	r3, #0
 801d35e:	f7e3 f87b 	bl	8000458 <__aeabi_dcmpgt>
 801d362:	2800      	cmp	r0, #0
 801d364:	d0ec      	beq.n	801d340 <floor+0x3c>
 801d366:	2c00      	cmp	r4, #0
 801d368:	da03      	bge.n	801d372 <floor+0x6e>
 801d36a:	2380      	movs	r3, #128	@ 0x80
 801d36c:	035b      	lsls	r3, r3, #13
 801d36e:	4133      	asrs	r3, r6
 801d370:	18e4      	adds	r4, r4, r3
 801d372:	2500      	movs	r5, #0
 801d374:	43bc      	bics	r4, r7
 801d376:	e7e3      	b.n	801d340 <floor+0x3c>
 801d378:	2e33      	cmp	r6, #51	@ 0x33
 801d37a:	dd09      	ble.n	801d390 <floor+0x8c>
 801d37c:	2380      	movs	r3, #128	@ 0x80
 801d37e:	00db      	lsls	r3, r3, #3
 801d380:	429e      	cmp	r6, r3
 801d382:	d103      	bne.n	801d38c <floor+0x88>
 801d384:	0002      	movs	r2, r0
 801d386:	000b      	movs	r3, r1
 801d388:	f7e3 fbda 	bl	8000b40 <__aeabi_dadd>
 801d38c:	b003      	add	sp, #12
 801d38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d390:	2701      	movs	r7, #1
 801d392:	4a18      	ldr	r2, [pc, #96]	@ (801d3f4 <floor+0xf0>)
 801d394:	427f      	negs	r7, r7
 801d396:	189b      	adds	r3, r3, r2
 801d398:	40df      	lsrs	r7, r3
 801d39a:	4238      	tst	r0, r7
 801d39c:	d0f6      	beq.n	801d38c <floor+0x88>
 801d39e:	4a12      	ldr	r2, [pc, #72]	@ (801d3e8 <floor+0xe4>)
 801d3a0:	4b12      	ldr	r3, [pc, #72]	@ (801d3ec <floor+0xe8>)
 801d3a2:	f7e3 fbcd 	bl	8000b40 <__aeabi_dadd>
 801d3a6:	2200      	movs	r2, #0
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	f7e3 f855 	bl	8000458 <__aeabi_dcmpgt>
 801d3ae:	2800      	cmp	r0, #0
 801d3b0:	d0c6      	beq.n	801d340 <floor+0x3c>
 801d3b2:	2c00      	cmp	r4, #0
 801d3b4:	da02      	bge.n	801d3bc <floor+0xb8>
 801d3b6:	2e14      	cmp	r6, #20
 801d3b8:	d102      	bne.n	801d3c0 <floor+0xbc>
 801d3ba:	3401      	adds	r4, #1
 801d3bc:	43bd      	bics	r5, r7
 801d3be:	e7bf      	b.n	801d340 <floor+0x3c>
 801d3c0:	2234      	movs	r2, #52	@ 0x34
 801d3c2:	2301      	movs	r3, #1
 801d3c4:	1b92      	subs	r2, r2, r6
 801d3c6:	4093      	lsls	r3, r2
 801d3c8:	18ed      	adds	r5, r5, r3
 801d3ca:	9b01      	ldr	r3, [sp, #4]
 801d3cc:	429d      	cmp	r5, r3
 801d3ce:	419b      	sbcs	r3, r3
 801d3d0:	425b      	negs	r3, r3
 801d3d2:	18e4      	adds	r4, r4, r3
 801d3d4:	e7f2      	b.n	801d3bc <floor+0xb8>
 801d3d6:	2500      	movs	r5, #0
 801d3d8:	002c      	movs	r4, r5
 801d3da:	e7b1      	b.n	801d340 <floor+0x3c>
 801d3dc:	2500      	movs	r5, #0
 801d3de:	4c06      	ldr	r4, [pc, #24]	@ (801d3f8 <floor+0xf4>)
 801d3e0:	e7ae      	b.n	801d340 <floor+0x3c>
 801d3e2:	46c0      	nop			@ (mov r8, r8)
 801d3e4:	fffffc01 	.word	0xfffffc01
 801d3e8:	8800759c 	.word	0x8800759c
 801d3ec:	7e37e43c 	.word	0x7e37e43c
 801d3f0:	000fffff 	.word	0x000fffff
 801d3f4:	fffffbed 	.word	0xfffffbed
 801d3f8:	bff00000 	.word	0xbff00000

0801d3fc <_init>:
 801d3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3fe:	46c0      	nop			@ (mov r8, r8)
 801d400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d402:	bc08      	pop	{r3}
 801d404:	469e      	mov	lr, r3
 801d406:	4770      	bx	lr

0801d408 <_fini>:
 801d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d40a:	46c0      	nop			@ (mov r8, r8)
 801d40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d40e:	bc08      	pop	{r3}
 801d410:	469e      	mov	lr, r3
 801d412:	4770      	bx	lr
